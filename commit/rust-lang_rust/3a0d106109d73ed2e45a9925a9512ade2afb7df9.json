{"sha": "3a0d106109d73ed2e45a9925a9512ade2afb7df9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMGQxMDYxMDlkNzNlZDJlNDVhOTkyNWE5NTEyYWRlMmFmYjdkZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-26T09:27:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-26T09:27:06Z"}, "message": "Auto merge of #61812 - jonas-schievink:assoc-ty-defaults, r=nikomatsakis\n\nImplement RFC 2532 \u2013 Associated Type Defaults\n\nThis is a partial implementation that is still missing the changes to object types, since I ran into some trouble while implementing that. I'm opening this part already to get feedback on the implementation and the unexpected test fallout (see my comments below). The remaining changes can be done in a later PR.\n\nBlockers before this can land:\n* [x] Resolve unsoundness around interaction with specialization (https://github.com/rust-lang/rust/pull/61812#discussion_r300504010) - #64564\n\ncc https://github.com/rust-lang/rust/issues/29661\nFixes #53907\nFixes #54182\nFixes #62211\nFixes #41868\nFixes #63593\nFixes #47385\nFixes #43924\nFixes #32350\nFixes #26681\nFixes https://github.com/rust-lang/rust/issues/67187", "tree": {"sha": "b1fea686c8ac421d4387c9a7d42337346b6ba7e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1fea686c8ac421d4387c9a7d42337346b6ba7e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a0d106109d73ed2e45a9925a9512ade2afb7df9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0d106109d73ed2e45a9925a9512ade2afb7df9", "html_url": "https://github.com/rust-lang/rust/commit/3a0d106109d73ed2e45a9925a9512ade2afb7df9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a0d106109d73ed2e45a9925a9512ade2afb7df9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46f5aa93d47e9077775ad9038970fd4c77abaad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/46f5aa93d47e9077775ad9038970fd4c77abaad7", "html_url": "https://github.com/rust-lang/rust/commit/46f5aa93d47e9077775ad9038970fd4c77abaad7"}, {"sha": "6cc268b9efcfa6d74e20b0c95e715cb05f41b19e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc268b9efcfa6d74e20b0c95e715cb05f41b19e", "html_url": "https://github.com/rust-lang/rust/commit/6cc268b9efcfa6d74e20b0c95e715cb05f41b19e"}], "stats": {"total": 2202, "additions": 2048, "deletions": 154}, "files": [{"sha": "6ea6054b417799c6f2194148e8d2c3dbad7df011", "filename": "src/librustc_error_codes/error_codes/E0399.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0399.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0399.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0399.md?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -1,9 +1,11 @@\n+#### Note: this error code is no longer emitted by the compiler\n+\n You implemented a trait, overriding one or more of its associated types but did\n not reimplement its default methods.\n \n Example of erroneous code:\n \n-```compile_fail,E0399\n+```\n #![feature(associated_type_defaults)]\n \n pub trait Foo {"}, {"sha": "8d9e5d3fa20fbd0a2921e716ef92ee98a01f9c67", "filename": "src/librustc_infer/traits/project.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Flibrustc_infer%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Flibrustc_infer%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fproject.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -1054,25 +1054,40 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     // an error when we confirm the candidate\n                     // (which will ultimately lead to `normalize_to_error`\n                     // being invoked).\n-                    node_item.item.defaultness.has_value()\n+                    false\n                 } else {\n+                    // If we're looking at a trait *impl*, the item is\n+                    // specializable if the impl or the item are marked\n+                    // `default`.\n                     node_item.item.defaultness.is_default()\n                         || super::util::impl_is_default(selcx.tcx(), node_item.node.def_id())\n                 };\n \n-                // Only reveal a specializable default if we're past type-checking\n-                // and the obligations is monomorphic, otherwise passes such as\n-                // transmute checking and polymorphic MIR optimizations could\n-                // get a result which isn't correct for all monomorphizations.\n-                if !is_default {\n-                    true\n-                } else if obligation.param_env.reveal == Reveal::All {\n-                    // NOTE(eddyb) inference variables can resolve to parameters, so\n-                    // assume `poly_trait_ref` isn't monomorphic, if it contains any.\n-                    let poly_trait_ref = selcx.infcx().resolve_vars_if_possible(&poly_trait_ref);\n-                    !poly_trait_ref.needs_infer() && !poly_trait_ref.needs_subst()\n-                } else {\n-                    false\n+                match is_default {\n+                    // Non-specializable items are always projectable\n+                    false => true,\n+\n+                    // Only reveal a specializable default if we're past type-checking\n+                    // and the obligation is monomorphic, otherwise passes such as\n+                    // transmute checking and polymorphic MIR optimizations could\n+                    // get a result which isn't correct for all monomorphizations.\n+                    true if obligation.param_env.reveal == Reveal::All => {\n+                        // NOTE(eddyb) inference variables can resolve to parameters, so\n+                        // assume `poly_trait_ref` isn't monomorphic, if it contains any.\n+                        let poly_trait_ref =\n+                            selcx.infcx().resolve_vars_if_possible(&poly_trait_ref);\n+                        !poly_trait_ref.needs_infer() && !poly_trait_ref.needs_subst()\n+                    }\n+\n+                    true => {\n+                        debug!(\n+                            \"assemble_candidates_from_impls: not eligible due to default: \\\n+                             assoc_ty={} predicate={}\",\n+                            selcx.tcx().def_path_str(node_item.item.def_id),\n+                            obligation.predicate,\n+                        );\n+                        false\n+                    }\n                 }\n             }\n             super::VtableParam(..) => {"}, {"sha": "4ab5d8f9ad3f6d63b1f14bec6910d223a24b0166", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -1964,7 +1964,6 @@ fn check_impl_items_against_trait<'tcx>(\n \n     // Locate trait definition and items\n     let trait_def = tcx.trait_def(impl_trait_ref.def_id);\n-    let mut overridden_associated_type = None;\n \n     let impl_items = || impl_item_refs.iter().map(|iiref| tcx.hir().impl_item(iiref.id));\n \n@@ -2046,9 +2045,6 @@ fn check_impl_items_against_trait<'tcx>(\n                 hir::ImplItemKind::OpaqueTy(..) | hir::ImplItemKind::TyAlias(_) => {\n                     let opt_trait_span = tcx.hir().span_if_local(ty_trait_item.def_id);\n                     if ty_trait_item.kind == ty::AssocKind::Type {\n-                        if ty_trait_item.defaultness.has_value() {\n-                            overridden_associated_type = Some(impl_item);\n-                        }\n                         compare_ty_impl(\n                             tcx,\n                             &ty_impl_item,\n@@ -2082,8 +2078,6 @@ fn check_impl_items_against_trait<'tcx>(\n \n     // Check for missing items from trait\n     let mut missing_items = Vec::new();\n-    let mut invalidated_items = Vec::new();\n-    let associated_type_overridden = overridden_associated_type.is_some();\n     for trait_item in tcx.associated_items(impl_trait_ref.def_id).in_definition_order() {\n         let is_implemented = trait_def\n             .ancestors(tcx, impl_id)\n@@ -2094,28 +2088,13 @@ fn check_impl_items_against_trait<'tcx>(\n         if !is_implemented && !traits::impl_is_default(tcx, impl_id) {\n             if !trait_item.defaultness.has_value() {\n                 missing_items.push(*trait_item);\n-            } else if associated_type_overridden {\n-                invalidated_items.push(trait_item.ident);\n             }\n         }\n     }\n \n     if !missing_items.is_empty() {\n         missing_items_err(tcx, impl_span, &missing_items, full_impl_span);\n     }\n-\n-    if !invalidated_items.is_empty() {\n-        let invalidator = overridden_associated_type.unwrap();\n-        struct_span_err!(\n-            tcx.sess,\n-            invalidator.span,\n-            E0399,\n-            \"the following trait items need to be reimplemented as `{}` was overridden: `{}`\",\n-            invalidator.ident,\n-            invalidated_items.iter().map(|name| name.to_string()).collect::<Vec<_>>().join(\"`, `\")\n-        )\n-        .emit();\n-    }\n }\n \n fn missing_items_err("}, {"sha": "c13e1e5b668ab6c92e049ba82772ff5177be0c6e", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -425,10 +425,109 @@ fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n \n     for_item(tcx, item).with_fcx(|fcx, _| {\n         check_where_clauses(tcx, fcx, item.span, trait_def_id, None);\n+        check_associated_type_defaults(fcx, trait_def_id);\n+\n         vec![]\n     });\n }\n \n+/// Checks all associated type defaults of trait `trait_def_id`.\n+///\n+/// Assuming the defaults are used, check that all predicates (bounds on the\n+/// assoc type and where clauses on the trait) hold.\n+fn check_associated_type_defaults(fcx: &FnCtxt<'_, '_>, trait_def_id: DefId) {\n+    let tcx = fcx.tcx;\n+    let substs = InternalSubsts::identity_for_item(tcx, trait_def_id);\n+\n+    // For all assoc. types with defaults, build a map from\n+    // `<Self as Trait<...>>::Assoc` to the default type.\n+    let map = tcx\n+        .associated_items(trait_def_id)\n+        .in_definition_order()\n+        .filter_map(|item| {\n+            if item.kind == ty::AssocKind::Type && item.defaultness.has_value() {\n+                // `<Self as Trait<...>>::Assoc`\n+                let proj = ty::ProjectionTy { substs, item_def_id: item.def_id };\n+                let default_ty = tcx.type_of(item.def_id);\n+                debug!(\"assoc. type default mapping: {} -> {}\", proj, default_ty);\n+                Some((proj, default_ty))\n+            } else {\n+                None\n+            }\n+        })\n+        .collect::<FxHashMap<_, _>>();\n+\n+    /// Replaces projections of associated types with their default types.\n+    ///\n+    /// This does a \"shallow substitution\", meaning that defaults that refer to\n+    /// other defaulted assoc. types will still refer to the projection\n+    /// afterwards, not to the other default. For example:\n+    ///\n+    /// ```compile_fail\n+    /// trait Tr {\n+    ///     type A: Clone = Vec<Self::B>;\n+    ///     type B = u8;\n+    /// }\n+    /// ```\n+    ///\n+    /// This will end up replacing the bound `Self::A: Clone` with\n+    /// `Vec<Self::B>: Clone`, not with `Vec<u8>: Clone`. If we did a deep\n+    /// substitution and ended up with the latter, the trait would be accepted.\n+    /// If an `impl` then replaced `B` with something that isn't `Clone`,\n+    /// suddenly the default for `A` is no longer valid. The shallow\n+    /// substitution forces the trait to add a `B: Clone` bound to be accepted,\n+    /// which means that an `impl` can replace any default without breaking\n+    /// others.\n+    ///\n+    /// Note that this isn't needed for soundness: The defaults would still be\n+    /// checked in any impl that doesn't override them.\n+    struct DefaultNormalizer<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+        map: FxHashMap<ty::ProjectionTy<'tcx>, Ty<'tcx>>,\n+    }\n+\n+    impl<'tcx> ty::fold::TypeFolder<'tcx> for DefaultNormalizer<'tcx> {\n+        fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+            self.tcx\n+        }\n+\n+        fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+            match t.kind {\n+                ty::Projection(proj_ty) => {\n+                    if let Some(default) = self.map.get(&proj_ty) {\n+                        default\n+                    } else {\n+                        t.super_fold_with(self)\n+                    }\n+                }\n+                _ => t.super_fold_with(self),\n+            }\n+        }\n+    }\n+\n+    // Now take all predicates defined on the trait, replace any mention of\n+    // the assoc. types with their default, and prove them.\n+    // We only consider predicates that directly mention the assoc. type.\n+    let mut norm = DefaultNormalizer { tcx, map };\n+    let predicates = fcx.tcx.predicates_of(trait_def_id);\n+    for &(orig_pred, span) in predicates.predicates.iter() {\n+        let pred = orig_pred.fold_with(&mut norm);\n+        if pred != orig_pred {\n+            // Mentions one of the defaulted assoc. types\n+            debug!(\"default suitability check: proving predicate: {} -> {}\", orig_pred, pred);\n+            let pred = fcx.normalize_associated_types_in(span, &pred);\n+            let cause = traits::ObligationCause::new(\n+                span,\n+                fcx.body_id,\n+                traits::ItemObligation(trait_def_id),\n+            );\n+            let obligation = traits::Obligation::new(cause, fcx.param_env, pred);\n+\n+            fcx.register_predicate(obligation);\n+        }\n+    }\n+}\n+\n fn check_item_fn(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n     for_item(tcx, item).with_fcx(|fcx, tcx| {\n         let def_id = fcx.tcx.hir().local_def_id(item.hir_id);"}, {"sha": "9b899ee316a0e737398a978e3f97947a1598e35a", "filename": "src/test/ui/associated-const/defaults-cyclic-fail.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,17 @@\n+// build-fail\n+\n+// Cyclic assoc. const defaults don't error unless *used*\n+trait Tr {\n+    const A: u8 = Self::B;\n+    //~^ ERROR cycle detected when const-evaluating + checking `Tr::A`\n+\n+    const B: u8 = Self::A;\n+}\n+\n+// This impl is *allowed* unless its assoc. consts are used\n+impl Tr for () {}\n+\n+fn main() {\n+    // This triggers the cycle error\n+    assert_eq!(<() as Tr>::A, 0);\n+}"}, {"sha": "940182d4aa6766ca62edb8073af465c801f00439", "filename": "src/test/ui/associated-const/defaults-cyclic-fail.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,31 @@\n+error[E0391]: cycle detected when const-evaluating + checking `Tr::A`\n+  --> $DIR/defaults-cyclic-fail.rs:5:5\n+   |\n+LL |     const A: u8 = Self::B;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...which requires const-evaluating `Tr::A`...\n+  --> $DIR/defaults-cyclic-fail.rs:5:19\n+   |\n+LL |     const A: u8 = Self::B;\n+   |                   ^^^^^^^\n+note: ...which requires const-evaluating + checking `Tr::B`...\n+  --> $DIR/defaults-cyclic-fail.rs:8:5\n+   |\n+LL |     const B: u8 = Self::A;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires const-evaluating `Tr::B`...\n+  --> $DIR/defaults-cyclic-fail.rs:8:19\n+   |\n+LL |     const B: u8 = Self::A;\n+   |                   ^^^^^^^\n+   = note: ...which again requires const-evaluating + checking `Tr::A`, completing the cycle\n+note: cycle used when const-evaluating `main`\n+  --> $DIR/defaults-cyclic-fail.rs:16:16\n+   |\n+LL |     assert_eq!(<() as Tr>::A, 0);\n+   |                ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "82105f25f92407df8a732dc0bd8a1f41aae926bd", "filename": "src/test/ui/associated-const/defaults-cyclic-pass.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-pass.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,36 @@\n+// run-pass\n+\n+// Cyclic assoc. const defaults don't error unless *used*\n+trait Tr {\n+    const A: u8 = Self::B;\n+    const B: u8 = Self::A;\n+}\n+\n+// This impl is *allowed* unless its assoc. consts are used, matching the\n+// behavior without defaults.\n+impl Tr for () {}\n+\n+// Overriding either constant breaks the cycle\n+impl Tr for u8 {\n+    const A: u8 = 42;\n+}\n+\n+impl Tr for u16 {\n+    const B: u8 = 0;\n+}\n+\n+impl Tr for u32 {\n+    const A: u8 = 100;\n+    const B: u8 = 123;\n+}\n+\n+fn main() {\n+    assert_eq!(<u8 as Tr>::A, 42);\n+    assert_eq!(<u8 as Tr>::B, 42);\n+\n+    assert_eq!(<u16 as Tr>::A, 0);\n+    assert_eq!(<u16 as Tr>::B, 0);\n+\n+    assert_eq!(<u32 as Tr>::A, 100);\n+    assert_eq!(<u32 as Tr>::B, 123);\n+}"}, {"sha": "d7a48cbd63ecccd1a67fbf6c9fdf99f0a16fa14a", "filename": "src/test/ui/associated-const/defaults-not-assumed-fail.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,45 @@\n+// build-fail\n+\n+trait Tr {\n+    const A: u8 = 255;\n+\n+    // This should not be a constant evaluation error (overflow). The value of\n+    // `Self::A` must not be assumed to hold inside the trait.\n+    const B: u8 = Self::A + 1;\n+    //~^ ERROR any use of this value will cause an error\n+}\n+\n+// An impl that doesn't override any constant will NOT cause a const eval error\n+// just because it's defined, but only if the bad constant is used anywhere.\n+// This matches the behavior without defaults.\n+impl Tr for () {}\n+\n+// An impl that overrides either constant with a suitable value will be fine.\n+impl Tr for u8 {\n+    const A: u8 = 254;\n+}\n+\n+impl Tr for u16 {\n+    const B: u8 = 0;\n+}\n+\n+impl Tr for u32 {\n+    const A: u8 = 254;\n+    const B: u8 = 0;\n+}\n+\n+fn main() {\n+    assert_eq!(<() as Tr>::A, 255);\n+    assert_eq!(<() as Tr>::B, 0);    // causes the error above\n+    //~^ ERROR evaluation of constant expression failed\n+    //~| ERROR erroneous constant used\n+\n+    assert_eq!(<u8 as Tr>::A, 254);\n+    assert_eq!(<u8 as Tr>::B, 255);\n+\n+    assert_eq!(<u16 as Tr>::A, 255);\n+    assert_eq!(<u16 as Tr>::B, 0);\n+\n+    assert_eq!(<u32 as Tr>::A, 254);\n+    assert_eq!(<u32 as Tr>::B, 0);\n+}"}, {"sha": "fe3721a910922aa7e1df73f14153418732a7d0d9", "filename": "src/test/ui/associated-const/defaults-not-assumed-fail.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,31 @@\n+error: any use of this value will cause an error\n+  --> $DIR/defaults-not-assumed-fail.rs:8:19\n+   |\n+LL |     const B: u8 = Self::A + 1;\n+   |     --------------^^^^^^^^^^^-\n+   |                   |\n+   |                   attempt to add with overflow\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/defaults-not-assumed-fail.rs:33:5\n+   |\n+LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n+   |     ^^^^^^^^^^^-------------^^^^^\n+   |                |\n+   |                referenced constant has errors\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: erroneous constant used\n+  --> $DIR/defaults-not-assumed-fail.rs:33:5\n+   |\n+LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "c08e05c8a3073c35d748cf07a3cc02dfb6c931a1", "filename": "src/test/ui/associated-const/defaults-not-assumed-pass.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-pass.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,42 @@\n+// run-pass\n+\n+trait Tr {\n+    const A: u8 = 255;\n+\n+    // This should not be a constant evaluation error (overflow). The value of\n+    // `Self::A` must not be assumed to hold inside the trait.\n+    const B: u8 = Self::A + 1;\n+}\n+\n+// An impl that doesn't override any constant will NOT cause a const eval error\n+// just because it's defined, but only if the bad constant is used anywhere.\n+// This matches the behavior without defaults.\n+impl Tr for () {}\n+\n+// An impl that overrides either constant with a suitable value will be fine.\n+impl Tr for u8 {\n+    const A: u8 = 254;\n+}\n+\n+impl Tr for u16 {\n+    const B: u8 = 0;\n+}\n+\n+impl Tr for u32 {\n+    const A: u8 = 254;\n+    const B: u8 = 0;\n+}\n+\n+fn main() {\n+    assert_eq!(<() as Tr>::A, 255);\n+    //assert_eq!(<() as Tr>::B, 0);  // using this is an error\n+\n+    assert_eq!(<u8 as Tr>::A, 254);\n+    assert_eq!(<u8 as Tr>::B, 255);\n+\n+    assert_eq!(<u16 as Tr>::A, 255);\n+    assert_eq!(<u16 as Tr>::B, 0);\n+\n+    assert_eq!(<u32 as Tr>::A, 254);\n+    assert_eq!(<u32 as Tr>::B, 0);\n+}"}, {"sha": "3e12c9228961809b36bde228dbfc54f11c902623", "filename": "src/test/ui/associated-types/associated-types-overridden-default.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -1,3 +1,8 @@\n+// check-pass\n+\n+// Before RFC 2532, overriding one assoc. type default required overriding all\n+// provided defaults.\n+\n #![feature(associated_type_defaults)]\n \n pub trait Tr {\n@@ -9,7 +14,9 @@ pub trait Tr {\n \n impl Tr for () {\n     type Assoc = ();\n-    //~^ ERROR need to be reimplemented as `Assoc` was overridden: `Assoc2`, `C`, `foo`\n }\n \n-fn main() {}\n+fn main() {\n+    let _: <() as Tr>::Assoc = ();\n+    let _: <() as Tr>::Assoc2 = ();\n+}"}, {"sha": "79fb9a613c2da3c41f1c2c0620d204fe547c0afa", "filename": "src/test/ui/associated-types/associated-types-overridden-default.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/46f5aa93d47e9077775ad9038970fd4c77abaad7/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46f5aa93d47e9077775ad9038970fd4c77abaad7/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-default.stderr?ref=46f5aa93d47e9077775ad9038970fd4c77abaad7", "patch": "@@ -1,9 +0,0 @@\n-error[E0399]: the following trait items need to be reimplemented as `Assoc` was overridden: `Assoc2`, `C`, `foo`\n-  --> $DIR/associated-types-overridden-default.rs:11:5\n-   |\n-LL |     type Assoc = ();\n-   |     ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0399`."}, {"sha": "71ac914ef57594a942d8063c768785be8417e60b", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-1.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,45 @@\n+#![feature(associated_type_defaults)]\n+\n+// Having a cycle in assoc. type defaults is okay...\n+trait Tr {\n+    type A = Self::B;\n+    type B = Self::A;\n+}\n+\n+// ...but is an error in any impl that doesn't override at least one of the defaults\n+impl Tr for () {}\n+//~^ ERROR overflow evaluating the requirement\n+\n+// As soon as at least one is redefined, it works:\n+impl Tr for u8 {\n+    type A = u8;\n+}\n+\n+impl Tr for u16 {\n+    type B = ();\n+}\n+\n+impl Tr for u32 {\n+    type A = ();\n+    type B = u8;\n+}\n+\n+// ...but only if this actually breaks the cycle\n+impl Tr for bool {\n+//~^ ERROR overflow evaluating the requirement\n+    type A = Box<Self::B>;\n+    //~^ ERROR overflow evaluating the requirement\n+}\n+// (the error is shown twice for some reason)\n+\n+impl Tr for usize {\n+//~^ ERROR overflow evaluating the requirement\n+    type B = &'static Self::A;\n+    //~^ ERROR overflow evaluating the requirement\n+}\n+\n+fn main() {\n+    // We don't check that the types project correctly because the cycle errors stop compilation\n+    // before `main` is type-checked.\n+    // `defaults-cyclic-pass-1.rs` does this.\n+}"}, {"sha": "6a8526f6aad1bc990bb319996d6edc1efbf45819", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-1.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,33 @@\n+error[E0275]: overflow evaluating the requirement `<() as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-1.rs:10:6\n+   |\n+LL | impl Tr for () {}\n+   |      ^^\n+\n+error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-1.rs:28:6\n+   |\n+LL | impl Tr for bool {\n+   |      ^^\n+\n+error[E0275]: overflow evaluating the requirement `<usize as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-1.rs:35:6\n+   |\n+LL | impl Tr for usize {\n+   |      ^^\n+\n+error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-1.rs:30:5\n+   |\n+LL |     type A = Box<Self::B>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0275]: overflow evaluating the requirement `<usize as Tr>::A`\n+  --> $DIR/defaults-cyclic-fail-1.rs:37:5\n+   |\n+LL |     type B = &'static Self::A;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "05091e3f498c7889f7ac1b81a794293151145c9b", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-2.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,47 @@\n+#![feature(associated_type_defaults)]\n+\n+// A more complex version of `defaults-cyclic-fail-1.rs`, with non-trivial defaults.\n+\n+// Having a cycle in assoc. type defaults is okay...\n+trait Tr {\n+    type A = Vec<Self::B>;\n+    type B = Box<Self::A>;\n+}\n+\n+// ...but is an error in any impl that doesn't override at least one of the defaults\n+impl Tr for () {}\n+//~^ ERROR overflow evaluating the requirement\n+\n+// As soon as at least one is redefined, it works:\n+impl Tr for u8 {\n+    type A = u8;\n+}\n+\n+impl Tr for u16 {\n+    type B = ();\n+}\n+\n+impl Tr for u32 {\n+    type A = ();\n+    type B = u8;\n+}\n+\n+// ...but only if this actually breaks the cycle\n+impl Tr for bool {\n+//~^ ERROR overflow evaluating the requirement\n+    type A = Box<Self::B>;\n+    //~^ ERROR overflow evaluating the requirement\n+}\n+// (the error is shown twice for some reason)\n+\n+impl Tr for usize {\n+//~^ ERROR overflow evaluating the requirement\n+    type B = &'static Self::A;\n+    //~^ ERROR overflow evaluating the requirement\n+}\n+\n+fn main() {\n+    // We don't check that the types project correctly because the cycle errors stop compilation\n+    // before `main` is type-checked.\n+    // `defaults-cyclic-pass-2.rs` does this.\n+}"}, {"sha": "78772df963885301202d6564c08d434d84adbb24", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-2.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,33 @@\n+error[E0275]: overflow evaluating the requirement `<() as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-2.rs:12:6\n+   |\n+LL | impl Tr for () {}\n+   |      ^^\n+\n+error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-2.rs:30:6\n+   |\n+LL | impl Tr for bool {\n+   |      ^^\n+\n+error[E0275]: overflow evaluating the requirement `<usize as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-2.rs:37:6\n+   |\n+LL | impl Tr for usize {\n+   |      ^^\n+\n+error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+  --> $DIR/defaults-cyclic-fail-2.rs:32:5\n+   |\n+LL |     type A = Box<Self::B>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0275]: overflow evaluating the requirement `<usize as Tr>::A`\n+  --> $DIR/defaults-cyclic-fail-2.rs:39:5\n+   |\n+LL |     type B = &'static Self::A;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "97c6e5bade233241d530a7ecfd6d5e26380def2b", "filename": "src/test/ui/associated-types/defaults-cyclic-pass-1.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass-1.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,56 @@\n+// check-pass\n+\n+#![feature(associated_type_defaults)]\n+\n+// Having a cycle in assoc. type defaults is okay, as long as there's no impl\n+// that retains it.\n+trait Tr {\n+    type A = Self::B;\n+    type B = Self::A;\n+\n+    fn f();\n+}\n+\n+// An impl has to break the cycle to be accepted.\n+impl Tr for u8 {\n+    type A = u8;\n+\n+    fn f() {\n+        // Check that the type propagates as expected (seen from inside the impl)\n+        let _: Self::A = 0u8;\n+        let _: Self::B = 0u8;\n+    }\n+}\n+\n+impl Tr for String {\n+    type B = ();\n+\n+    fn f() {\n+        // Check that the type propagates as expected (seen from inside the impl)\n+        let _: Self::A = ();\n+        let _: Self::B = ();\n+    }\n+}\n+\n+impl Tr for () {\n+    type A = Vec<()>;\n+    type B = u8;\n+\n+    fn f() {\n+        // Check that the type propagates as expected (seen from inside the impl)\n+        let _: Self::A = Vec::<()>::new();\n+        let _: Self::B = 0u8;\n+    }\n+}\n+\n+fn main() {\n+    // Check that both impls now have the right types (seen from outside the impls)\n+    let _: <u8 as Tr>::A = 0u8;\n+    let _: <u8 as Tr>::B = 0u8;\n+\n+    let _: <String as Tr>::A = ();\n+    let _: <String as Tr>::B = ();\n+\n+    let _: <() as Tr>::A = Vec::<()>::new();\n+    let _: <() as Tr>::B = 0u8;\n+}"}, {"sha": "69315a022100b89aa3ac4a377924ca4726737f8e", "filename": "src/test/ui/associated-types/defaults-cyclic-pass-2.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass-2.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,56 @@\n+// check-pass\n+\n+#![feature(associated_type_defaults)]\n+\n+// Having a cycle in assoc. type defaults is okay, as long as there's no impl\n+// that retains it.\n+trait Tr {\n+    type A = Vec<Self::B>;\n+    type B = Box<Self::A>;\n+\n+    fn f();\n+}\n+\n+// An impl has to break the cycle to be accepted.\n+impl Tr for u8 {\n+    type A = u8;\n+\n+    fn f() {\n+        // Check that the type propagates as expected (seen from inside the impl)\n+        let _: Self::A = 0u8;\n+        let _: Self::B = Box::new(0u8);\n+    }\n+}\n+\n+impl Tr for String {\n+    type B = ();\n+\n+    fn f() {\n+        // Check that the type propagates as expected (seen from inside the impl)\n+        let _: Self::A = Vec::<()>::new();\n+        let _: Self::B = ();\n+    }\n+}\n+\n+impl Tr for () {\n+    type A = Vec<()>;\n+    type B = u8;\n+\n+    fn f() {\n+        // Check that the type propagates as expected (seen from inside the impl)\n+        let _: Self::A = Vec::<()>::new();\n+        let _: Self::B = 0u8;\n+    }\n+}\n+\n+fn main() {\n+    // Check that both impls now have the right types (seen from outside the impls)\n+    let _: <u8 as Tr>::A = 0u8;\n+    let _: <u8 as Tr>::B = Box::new(0u8);\n+\n+    let _: <String as Tr>::A = Vec::<()>::new();\n+    let _: <String as Tr>::B = ();\n+\n+    let _: <() as Tr>::A = Vec::<()>::new();\n+    let _: <() as Tr>::B = 0u8;\n+}"}, {"sha": "a3bfcd8efe29acbdf5b1e50ce91b3407c6e55053", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items-pass.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items-pass.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,37 @@\n+// check-pass\n+\n+#![feature(associated_type_defaults)]\n+\n+trait Tr {\n+    type Item = u8;\n+    type Container = Vec<Self::Item>;\n+}\n+\n+impl Tr for () {}\n+\n+impl Tr for u16 {\n+    type Item = u16;\n+}\n+\n+impl Tr for String {\n+    type Container = String;\n+}\n+\n+impl Tr for usize {\n+    type Item = u32;\n+    type Container = Vec<()>;\n+}\n+\n+fn main() {\n+    let _container: <() as Tr>::Container = Vec::<u8>::new();\n+    let _item: <() as Tr>::Item = 0u8;\n+\n+    let _container: <u16 as Tr>::Container = Vec::<u16>::new();\n+    let _item: <u16 as Tr>::Item = 0u16;\n+\n+    let _container: <String as Tr>::Container = String::new();\n+    let _item: <String as Tr>::Item = 0u8;\n+\n+    let _container: <usize as Tr>::Container = Vec::<()>::new();\n+    let _item: <usize as Tr>::Item = 0u32;\n+}"}, {"sha": "9f2e8aca47712a0f2809d8b4e545c73427a51b82", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,50 @@\n+#![feature(associated_type_defaults)]\n+\n+// Associated type defaults may not be assumed inside the trait defining them.\n+// ie. they only resolve to `<Self as Tr>::A`, not the actual type `()`\n+trait Tr {\n+    type A = ();\n+\n+    fn f(p: Self::A) {\n+        let () = p;\n+        //~^ ERROR mismatched types\n+        //~| NOTE expected associated type, found `()`\n+        //~| NOTE expected associated type `<Self as Tr>::A`\n+        //~| NOTE consider constraining the associated type\n+        //~| NOTE for more information, visit\n+    }\n+}\n+\n+// An impl that doesn't override the type *can* assume the default.\n+impl Tr for () {\n+    fn f(p: Self::A) {\n+        let () = p;\n+    }\n+}\n+\n+impl Tr for u8 {\n+    type A = ();\n+\n+    fn f(p: Self::A) {\n+        let () = p;\n+    }\n+}\n+\n+trait AssocConst {\n+    type Ty = u8;\n+\n+    // Assoc. consts also cannot assume that default types hold\n+    const C: Self::Ty = 0u8;\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected associated type, found `u8`\n+    //~| NOTE expected associated type `<Self as AssocConst>::Ty`\n+    //~| NOTE consider constraining the associated type\n+    //~| NOTE for more information, visit\n+}\n+\n+// An impl can, however\n+impl AssocConst for () {\n+    const C: Self::Ty = 0u8;\n+}\n+\n+fn main() {}"}, {"sha": "9ecfe49c2b571bbd2781fc35dd3262d5a299744b", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,25 @@\n+error[E0308]: mismatched types\n+  --> $DIR/defaults-in-other-trait-items.rs:9:13\n+   |\n+LL |         let () = p;\n+   |             ^^ expected associated type, found `()`\n+   |\n+   = note: expected associated type `<Self as Tr>::A`\n+                    found unit type `()`\n+   = note: consider constraining the associated type `<Self as Tr>::A` to `()` or calling a method that returns `<Self as Tr>::A`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/defaults-in-other-trait-items.rs:37:25\n+   |\n+LL |     const C: Self::Ty = 0u8;\n+   |                         ^^^ expected associated type, found `u8`\n+   |\n+   = note: expected associated type `<Self as AssocConst>::Ty`\n+                         found type `u8`\n+   = note: consider constraining the associated type `<Self as AssocConst>::Ty` to `u8` or calling a method that returns `<Self as AssocConst>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c91b8de39f52ea84905ee60b503d101368c5f560", "filename": "src/test/ui/associated-types/defaults-mixed.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-mixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-mixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-mixed.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,34 @@\n+#![feature(associated_type_defaults)]\n+\n+// Tests that a trait with one defaulted and one non-defaulted assoc. type behaves properly.\n+\n+trait Trait {\n+    type Foo = u8;\n+    type Bar;\n+}\n+\n+// `Bar` must be specified\n+impl Trait for () {}\n+//~^ error: not all trait items implemented, missing: `Bar`\n+\n+impl Trait for bool {\n+//~^ error: not all trait items implemented, missing: `Bar`\n+    type Foo = ();\n+}\n+\n+impl Trait for u8 {\n+    type Bar = ();\n+}\n+\n+impl Trait for u16 {\n+    type Foo = String;\n+    type Bar = bool;\n+}\n+\n+fn main() {\n+    let _: <u8 as Trait>::Foo = 0u8;\n+    let _: <u8 as Trait>::Bar = ();\n+\n+    let _: <u16 as Trait>::Foo = String::new();\n+    let _: <u16 as Trait>::Bar = true;\n+}"}, {"sha": "69ddd5f2326d1305d9035b0c7f5f039d8811e11a", "filename": "src/test/ui/associated-types/defaults-mixed.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-mixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-mixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-mixed.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,21 @@\n+error[E0046]: not all trait items implemented, missing: `Bar`\n+  --> $DIR/defaults-mixed.rs:11:1\n+   |\n+LL |     type Bar;\n+   |     --------- `Bar` from trait\n+...\n+LL | impl Trait for () {}\n+   | ^^^^^^^^^^^^^^^^^ missing `Bar` in implementation\n+\n+error[E0046]: not all trait items implemented, missing: `Bar`\n+  --> $DIR/defaults-mixed.rs:14:1\n+   |\n+LL |     type Bar;\n+   |     --------- `Bar` from trait\n+...\n+LL | impl Trait for bool {\n+   | ^^^^^^^^^^^^^^^^^^^ missing `Bar` in implementation\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "d0ed718b839230c6465a6057f86b090fc29ec179", "filename": "src/test/ui/associated-types/defaults-specialization.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,95 @@\n+//! Tests the interaction of associated type defaults and specialization.\n+\n+#![feature(associated_type_defaults, specialization)]\n+\n+trait Tr {\n+    type Ty = u8;\n+\n+    fn make() -> Self::Ty {\n+        0u8\n+        //~^ error: mismatched types\n+    }\n+}\n+\n+struct A<T>(T);\n+// In a `default impl`, assoc. types are defaulted as well,\n+// so their values can't be assumed.\n+default impl<T> Tr for A<T> {\n+    fn make() -> u8 { 0 }\n+    //~^ ERROR method `make` has an incompatible type for trait\n+}\n+\n+struct A2<T>(T);\n+// ...same, but in the method body\n+default impl<T> Tr for A2<T> {\n+    fn make() -> Self::Ty { 0u8 }\n+    //~^ ERROR mismatched types\n+}\n+\n+struct B<T>(T);\n+// Explicitly defaulting the type does the same.\n+impl<T> Tr for B<T> {\n+    default type Ty = bool;\n+\n+    fn make() -> bool { true }\n+    //~^ ERROR method `make` has an incompatible type for trait\n+}\n+\n+struct B2<T>(T);\n+// ...same, but in the method body\n+impl<T> Tr for B2<T> {\n+    default type Ty = bool;\n+\n+    fn make() -> Self::Ty { true }\n+    //~^ ERROR mismatched types\n+}\n+\n+struct C<T>(T);\n+// Only the method is defaulted, so this is fine.\n+impl<T> Tr for C<T> {\n+    type Ty = bool;\n+\n+    default fn make() -> bool { true }\n+}\n+\n+// Defaulted method *can* assume the type, if the default is kept.\n+struct D<T>(T);\n+impl<T> Tr for D<T> {\n+    default fn make() -> u8 { 0 }\n+}\n+\n+impl Tr for D<bool> {\n+    fn make() -> u8 { 255 }\n+}\n+\n+struct E<T>(T);\n+impl<T> Tr for E<T> {\n+    default type Ty = bool;\n+    default fn make() -> Self::Ty { panic!(); }\n+}\n+\n+// This impl specializes and sets `Ty`, it can rely on `Ty=String`.\n+impl Tr for E<bool> {\n+    type Ty = String;\n+\n+    fn make() -> String { String::new() }\n+}\n+\n+fn main() {\n+    // Test that we can assume the right set of assoc. types from outside the impl\n+\n+    // This is a `default impl`, which does *not* mean that `A`/`A2` actually implement the trait.\n+    // cf. https://github.com/rust-lang/rust/issues/48515\n+    //let _: <A<()> as Tr>::Ty = 0u8;\n+    //let _: <A2<()> as Tr>::Ty = 0u8;\n+\n+    let _: <B<()> as Tr>::Ty = 0u8;   //~ error: mismatched types\n+    let _: <B<()> as Tr>::Ty = true;  //~ error: mismatched types\n+    let _: <B2<()> as Tr>::Ty = 0u8;  //~ error: mismatched types\n+    let _: <B2<()> as Tr>::Ty = true; //~ error: mismatched types\n+\n+    let _: <C<()> as Tr>::Ty = true;\n+\n+    let _: <D<()> as Tr>::Ty = 0u8;\n+    let _: <D<bool> as Tr>::Ty = 0u8;\n+}"}, {"sha": "1dd536ec6360f3cdfa67d9f50251f444561e0f9c", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,123 @@\n+error[E0053]: method `make` has an incompatible type for trait\n+  --> $DIR/defaults-specialization.rs:18:18\n+   |\n+LL |     fn make() -> Self::Ty {\n+   |                  -------- type in trait\n+...\n+LL |     fn make() -> u8 { 0 }\n+   |                  ^^ expected associated type, found `u8`\n+   |\n+   = note: expected fn pointer `fn() -> <A<T> as Tr>::Ty`\n+              found fn pointer `fn() -> u8`\n+   = note: consider constraining the associated type `<A<T> as Tr>::Ty` to `u8` or calling a method that returns `<A<T> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0053]: method `make` has an incompatible type for trait\n+  --> $DIR/defaults-specialization.rs:34:18\n+   |\n+LL |     fn make() -> Self::Ty {\n+   |                  -------- type in trait\n+...\n+LL |     fn make() -> bool { true }\n+   |                  ^^^^ expected associated type, found `bool`\n+   |\n+   = note: expected fn pointer `fn() -> <B<T> as Tr>::Ty`\n+              found fn pointer `fn() -> bool`\n+   = note: consider constraining the associated type `<B<T> as Tr>::Ty` to `bool` or calling a method that returns `<B<T> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/defaults-specialization.rs:9:9\n+   |\n+LL |     fn make() -> Self::Ty {\n+   |                  -------- expected `<Self as Tr>::Ty` because of return type\n+LL |         0u8\n+   |         ^^^ expected associated type, found `u8`\n+   |\n+   = note: expected associated type `<Self as Tr>::Ty`\n+                         found type `u8`\n+   = note: consider constraining the associated type `<Self as Tr>::Ty` to `u8` or calling a method that returns `<Self as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/defaults-specialization.rs:25:29\n+   |\n+LL |     fn make() -> Self::Ty { 0u8 }\n+   |                  --------   ^^^ expected associated type, found `u8`\n+   |                  |\n+   |                  expected `<A2<T> as Tr>::Ty` because of return type\n+   |\n+   = note: expected associated type `<A2<T> as Tr>::Ty`\n+                         found type `u8`\n+   = note: consider constraining the associated type `<A2<T> as Tr>::Ty` to `u8` or calling a method that returns `<A2<T> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/defaults-specialization.rs:43:29\n+   |\n+LL |     fn make() -> Self::Ty { true }\n+   |                  --------   ^^^^ expected associated type, found `bool`\n+   |                  |\n+   |                  expected `<B2<T> as Tr>::Ty` because of return type\n+   |\n+   = note: expected associated type `<B2<T> as Tr>::Ty`\n+                         found type `bool`\n+   = note: consider constraining the associated type `<B2<T> as Tr>::Ty` to `bool` or calling a method that returns `<B2<T> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/defaults-specialization.rs:86:32\n+   |\n+LL |     let _: <B<()> as Tr>::Ty = 0u8;\n+   |            -----------------   ^^^ expected associated type, found `u8`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected associated type `<B<()> as Tr>::Ty`\n+                         found type `u8`\n+   = note: consider constraining the associated type `<B<()> as Tr>::Ty` to `u8` or calling a method that returns `<B<()> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/defaults-specialization.rs:87:32\n+   |\n+LL |     let _: <B<()> as Tr>::Ty = true;\n+   |            -----------------   ^^^^ expected associated type, found `bool`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected associated type `<B<()> as Tr>::Ty`\n+                         found type `bool`\n+   = note: consider constraining the associated type `<B<()> as Tr>::Ty` to `bool` or calling a method that returns `<B<()> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/defaults-specialization.rs:88:33\n+   |\n+LL |     let _: <B2<()> as Tr>::Ty = 0u8;\n+   |            ------------------   ^^^ expected associated type, found `u8`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected associated type `<B2<()> as Tr>::Ty`\n+                         found type `u8`\n+   = note: consider constraining the associated type `<B2<()> as Tr>::Ty` to `u8` or calling a method that returns `<B2<()> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/defaults-specialization.rs:89:33\n+   |\n+LL |     let _: <B2<()> as Tr>::Ty = true;\n+   |            ------------------   ^^^^ expected associated type, found `bool`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected associated type `<B2<()> as Tr>::Ty`\n+                         found type `bool`\n+   = note: consider constraining the associated type `<B2<()> as Tr>::Ty` to `bool` or calling a method that returns `<B2<()> as Tr>::Ty`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors have detailed explanations: E0053, E0308.\n+For more information about an error, try `rustc --explain E0053`."}, {"sha": "2be01cba105eff9c03523c341e6618af73e0f459", "filename": "src/test/ui/associated-types/defaults-suitability.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,106 @@\n+//! Checks that associated type defaults are properly validated.\n+//!\n+//! This means:\n+//! * Default types are wfchecked\n+//! * Default types are checked against where clauses on the assoc. type\n+//!   (eg. `type Assoc: Clone = NotClone`), and also against where clauses on\n+//!   the trait itself when possible\n+\n+#![feature(associated_type_defaults)]\n+\n+struct NotClone;\n+\n+// Assoc. type bounds must hold for the default type\n+trait Tr {\n+    type Ty: Clone = NotClone;\n+    //~^ ERROR the trait bound `NotClone: std::clone::Clone` is not satisfied\n+}\n+\n+// Where-clauses defined on the trait must also be considered\n+trait Tr2 where Self::Ty: Clone {\n+    //~^ ERROR the trait bound `NotClone: std::clone::Clone` is not satisfied\n+    type Ty = NotClone;\n+}\n+\n+// Independent of where-clauses (there are none here), default types must always be wf\n+trait Tr3 {\n+    type Ty = Vec<[u8]>;\n+    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n+}\n+\n+// Involved type parameters must fulfill all bounds required by defaults that mention them\n+trait Foo<T> {\n+    type Bar: Clone = Vec<T>;\n+    //~^ ERROR the trait bound `T: std::clone::Clone` is not satisfied\n+}\n+\n+trait Bar: Sized {\n+    // `(): Foo<Self>` might hold for some possible impls but not all.\n+    type Assoc: Foo<Self> = ();\n+    //~^ ERROR the trait bound `(): Foo<Self>` is not satisfied\n+}\n+\n+trait IsU8<T> {}\n+impl<T> IsU8<u8> for T {}\n+\n+// Test that mentioning the assoc. type inside where clauses works\n+trait C where\n+    Vec<Self::Assoc>: Clone,\n+    Self::Assoc: IsU8<Self::Assoc>,\n+    bool: IsU8<Self::Assoc>,\n+{\n+    type Assoc = u8;\n+}\n+\n+// Test that we get all expected errors if that default is unsuitable\n+trait D where\n+    Vec<Self::Assoc>: Clone,\n+    //~^ ERROR the trait bound `NotClone: std::clone::Clone` is not satisfied\n+    Self::Assoc: IsU8<Self::Assoc>,\n+    //~^ ERROR the trait bound `NotClone: IsU8<NotClone>` is not satisfied\n+    bool: IsU8<Self::Assoc>,\n+    //~^ ERROR the trait bound `bool: IsU8<NotClone>` is not satisfied\n+{\n+    type Assoc = NotClone;\n+}\n+\n+// Test behavior of the check when defaults refer to other defaults:\n+\n+// Shallow substitution rejects this trait since `Baz` isn't guaranteed to be\n+// `Clone`.\n+trait Foo2<T> {\n+    type Bar: Clone = Vec<Self::Baz>;\n+    //~^ ERROR the trait bound `<Self as Foo2<T>>::Baz: std::clone::Clone` is not satisfied\n+    type Baz = T;\n+}\n+\n+// Adding a `T: Clone` bound doesn't help since the requirement doesn't see `T`\n+// because of the shallow substitution. If we did a deep substitution instead,\n+// this would be accepted.\n+trait Foo25<T: Clone> {\n+    type Bar: Clone = Vec<Self::Baz>;\n+    //~^ ERROR the trait bound `<Self as Foo25<T>>::Baz: std::clone::Clone` is not satisfied\n+    type Baz = T;\n+}\n+\n+// Adding the `Baz: Clone` bound isn't enough since the default is type\n+// parameter `T`, which also might not be `Clone`.\n+trait Foo3<T> where\n+    Self::Bar: Clone,\n+    Self::Baz: Clone,\n+    //~^ ERROR the trait bound `T: std::clone::Clone` is not satisfied\n+{\n+    type Bar = Vec<Self::Baz>;\n+    type Baz = T;\n+}\n+\n+// This one finally works, with `Clone` bounds on all assoc. types and the type\n+// parameter.\n+trait Foo4<T> where\n+    T: Clone,\n+{\n+    type Bar: Clone = Vec<Self::Baz>;\n+    type Baz: Clone = T;\n+}\n+\n+fn main() {}"}, {"sha": "60e1821b300d249a054ac2ab4080b2de0ac25a5a", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,140 @@\n+error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:15:14\n+   |\n+LL | trait Tr {\n+   | -------- required by `Tr`\n+LL |     type Ty: Clone = NotClone;\n+   |              ^^^^^ the trait `std::clone::Clone` is not implemented for `NotClone`\n+\n+error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:20:27\n+   |\n+LL | trait Tr2 where Self::Ty: Clone {\n+   | --------------------------^^^^^\n+   | |                         |\n+   | |                         the trait `std::clone::Clone` is not implemented for `NotClone`\n+   | required by `Tr2`\n+\n+error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:33:15\n+   |\n+LL | trait Foo<T> {\n+   | ------------ required by `Foo`\n+LL |     type Bar: Clone = Vec<T>;\n+   |               ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::clone::Clone`\n+  --> $DIR/defaults-suitability.rs:32:11\n+   |\n+LL | trait Foo<T> {\n+   |           ^\n+   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<T>`\n+\n+error[E0277]: the trait bound `(): Foo<Self>` is not satisfied\n+  --> $DIR/defaults-suitability.rs:39:17\n+   |\n+LL | trait Bar: Sized {\n+   | ---------------- required by `Bar`\n+LL |     // `(): Foo<Self>` might hold for some possible impls but not all.\n+LL |     type Assoc: Foo<Self> = ();\n+   |                 ^^^^^^^^^ the trait `Foo<Self>` is not implemented for `()`\n+\n+error[E0277]: the trait bound `NotClone: IsU8<NotClone>` is not satisfied\n+  --> $DIR/defaults-suitability.rs:59:18\n+   |\n+LL | / trait D where\n+LL | |     Vec<Self::Assoc>: Clone,\n+LL | |\n+LL | |     Self::Assoc: IsU8<Self::Assoc>,\n+   | |                  ^^^^^^^^^^^^^^^^^ the trait `IsU8<NotClone>` is not implemented for `NotClone`\n+...  |\n+LL | |     type Assoc = NotClone;\n+LL | | }\n+   | |_- required by `D`\n+\n+error[E0277]: the trait bound `bool: IsU8<NotClone>` is not satisfied\n+  --> $DIR/defaults-suitability.rs:61:11\n+   |\n+LL | / trait D where\n+LL | |     Vec<Self::Assoc>: Clone,\n+LL | |\n+LL | |     Self::Assoc: IsU8<Self::Assoc>,\n+LL | |\n+LL | |     bool: IsU8<Self::Assoc>,\n+   | |           ^^^^^^^^^^^^^^^^^ the trait `IsU8<NotClone>` is not implemented for `bool`\n+...  |\n+LL | |     type Assoc = NotClone;\n+LL | | }\n+   | |_- required by `D`\n+\n+error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:57:23\n+   |\n+LL | / trait D where\n+LL | |     Vec<Self::Assoc>: Clone,\n+   | |                       ^^^^^ the trait `std::clone::Clone` is not implemented for `NotClone`\n+LL | |\n+LL | |     Self::Assoc: IsU8<Self::Assoc>,\n+...  |\n+LL | |     type Assoc = NotClone;\n+LL | | }\n+   | |_- required by `D`\n+   |\n+   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<NotClone>`\n+\n+error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:72:15\n+   |\n+LL | trait Foo2<T> {\n+   | -------------- help: consider further restricting the associated type: `where <Self as Foo2<T>>::Baz: std::clone::Clone`\n+   | |\n+   | required by `Foo2`\n+LL |     type Bar: Clone = Vec<Self::Baz>;\n+   |               ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n+   |\n+   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo2<T>>::Baz>`\n+\n+error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:81:15\n+   |\n+LL | trait Foo25<T: Clone> {\n+   | ---------------------- help: consider further restricting the associated type: `where <Self as Foo25<T>>::Baz: std::clone::Clone`\n+   | |\n+   | required by `Foo25`\n+LL |     type Bar: Clone = Vec<Self::Baz>;\n+   |               ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n+   |\n+   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo25<T>>::Baz>`\n+\n+error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:90:16\n+   |\n+LL | / trait Foo3<T> where\n+LL | |     Self::Bar: Clone,\n+LL | |     Self::Baz: Clone,\n+   | |                ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n+LL | |\n+...  |\n+LL | |     type Baz = T;\n+LL | | }\n+   | |_- required by `Foo3`\n+   |\n+help: consider restricting this type parameter with `where T: std::clone::Clone`\n+  --> $DIR/defaults-suitability.rs:88:12\n+   |\n+LL | trait Foo3<T> where\n+   |            ^\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/defaults-suitability.rs:27:5\n+   |\n+LL |     type Ty = Vec<[u8]>;\n+   |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required by `std::vec::Vec`\n+\n+error: aborting due to 11 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c8b4734d6edc50640a3f77f86249b850b57cb2e5", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,63 @@\n+//! Regression test for https://github.com/rust-lang/rust/issues/62211\n+//!\n+//! The old implementation of defaults did not check whether the provided\n+//! default actually fulfills all bounds on the assoc. type, leading to\n+//! unsoundness, demonstrated here as a use-after-free.\n+//!\n+//! Note that the underlying cause of this is still not yet fixed.\n+//! See: https://github.com/rust-lang/rust/issues/33017\n+\n+#![feature(associated_type_defaults)]\n+\n+use std::{\n+    fmt::Display,\n+    ops::{AddAssign, Deref}\n+};\n+\n+\n+trait UncheckedCopy: Sized {\n+    // This Output is said to be Copy. Yet we default to Self\n+    // and it's accepted, not knowing if Self ineed is Copy\n+    type Output: Copy\n+    //~^ ERROR the trait bound `Self: std::marker::Copy` is not satisfied\n+    + Deref<Target = str>\n+    //~^ ERROR the trait bound `Self: std::ops::Deref` is not satisfied\n+    + AddAssign<&'static str>\n+    //~^ ERROR cannot add-assign `&'static str` to `Self`\n+    + From<Self>\n+    + Display = Self;\n+    //~^ ERROR `Self` doesn't implement `std::fmt::Display`\n+\n+    // We said the Output type was Copy, so we can Copy it freely!\n+    fn unchecked_copy(other: &Self::Output) -> Self::Output {\n+        (*other)\n+    }\n+\n+    fn make_origin(s: Self) -> Self::Output {\n+        s.into()\n+    }\n+}\n+\n+impl<T> UncheckedCopy for T {}\n+//~^ ERROR `T` doesn't implement `std::fmt::Display`\n+//~| ERROR the trait bound `T: std::ops::Deref` is not satisfied\n+//~| ERROR cannot add-assign `&'static str` to `T`\n+//~| ERROR the trait bound `T: std::marker::Copy` is not satisfied\n+\n+fn bug<T: UncheckedCopy>(origin: T) {\n+    let origin = T::make_origin(origin);\n+    let mut copy = T::unchecked_copy(&origin);\n+\n+    // assert we indeed have 2 strings pointing to the same buffer.\n+    assert_eq!(origin.as_ptr(), copy.as_ptr());\n+\n+    // Drop the origin. Any use of `copy` is UB.\n+    drop(origin);\n+\n+    copy += \"This is invalid!\";\n+    println!(\"{}\", copy);\n+}\n+\n+fn main() {\n+    bug(String::from(\"hello!\"));\n+}"}, {"sha": "9c4a1260139426b4a676daff476bd7174c8781c8", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,95 @@\n+error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n+  --> $DIR/defaults-unsound-62211-1.rs:21:18\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n+LL |     type Output: Copy\n+   |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n+\n+error[E0277]: cannot add-assign `&'static str` to `Self`\n+  --> $DIR/defaults-unsound-62211-1.rs:25:7\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n+LL |     + AddAssign<&'static str>\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n+   |\n+   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n+\n+error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n+  --> $DIR/defaults-unsound-62211-1.rs:23:7\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n+LL |     + Deref<Target = str>\n+   |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n+\n+error[E0277]: `Self` doesn't implement `std::fmt::Display`\n+  --> $DIR/defaults-unsound-62211-1.rs:28:7\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n+LL |     + Display = Self;\n+   |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `Self`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+\n+error[E0277]: `T` doesn't implement `std::fmt::Display`\n+  --> $DIR/defaults-unsound-62211-1.rs:41:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `T`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+help: consider restricting this type parameter with `T: std::fmt::Display`\n+  --> $DIR/defaults-unsound-62211-1.rs:41:6\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |      ^\n+\n+error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n+  --> $DIR/defaults-unsound-62211-1.rs:41:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::ops::Deref`\n+  --> $DIR/defaults-unsound-62211-1.rs:41:6\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |      ^\n+\n+error[E0277]: cannot add-assign `&'static str` to `T`\n+  --> $DIR/defaults-unsound-62211-1.rs:41:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n+   |\n+   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n+help: consider restricting this type parameter with `T: std::ops::AddAssign<&'static str>`\n+  --> $DIR/defaults-unsound-62211-1.rs:41:6\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |      ^\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/defaults-unsound-62211-1.rs:41:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/defaults-unsound-62211-1.rs:41:6\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |      ^\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "aa343e759a8f50eb2fa8ecbdbecd8f584388a39a", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,63 @@\n+//! Regression test for https://github.com/rust-lang/rust/issues/62211\n+//!\n+//! The old implementation of defaults did not check whether the provided\n+//! default actually fulfills all bounds on the assoc. type, leading to\n+//! unsoundness and ICEs, the latter being demonstrated here.\n+//!\n+//! Note that the underlying cause of this is still not yet fixed.\n+//! See: https://github.com/rust-lang/rust/issues/33017\n+\n+#![feature(associated_type_defaults)]\n+\n+use std::{\n+    fmt::Display,\n+    ops::{AddAssign, Deref}\n+};\n+\n+\n+trait UncheckedCopy: Sized {\n+    // This Output is said to be Copy. Yet we default to Self\n+    // and it's accepted, not knowing if Self ineed is Copy\n+    type Output: Copy\n+    //~^ ERROR the trait bound `Self: std::marker::Copy` is not satisfied\n+    + Deref<Target = str>\n+    //~^ ERROR the trait bound `Self: std::ops::Deref` is not satisfied\n+    + AddAssign<&'static str>\n+    //~^ ERROR cannot add-assign `&'static str` to `Self`\n+    + From<Self>\n+    + Display = Self;\n+    //~^ ERROR `Self` doesn't implement `std::fmt::Display`\n+\n+    // We said the Output type was Copy, so we can Copy it freely!\n+    fn unchecked_copy(other: &Self::Output) -> Self::Output {\n+        (*other)\n+    }\n+\n+    fn make_origin(s: Self) -> Self::Output {\n+        s.into()\n+    }\n+}\n+\n+impl<T> UncheckedCopy for T {}\n+//~^ ERROR `T` doesn't implement `std::fmt::Display`\n+//~| ERROR the trait bound `T: std::ops::Deref` is not satisfied\n+//~| ERROR cannot add-assign `&'static str` to `T`\n+//~| ERROR the trait bound `T: std::marker::Copy` is not satisfied\n+\n+fn bug<T: UncheckedCopy>(origin: T) {\n+    let origin = T::make_origin(origin);\n+    let mut copy = T::unchecked_copy(&origin);\n+\n+    // assert we indeed have 2 strings pointing to the same buffer.\n+    assert_eq!(origin.as_ptr(), copy.as_ptr());\n+\n+    // Drop the origin. Any use of `copy` is UB.\n+    drop(origin);\n+\n+    copy += \"This is invalid!\";\n+    println!(\"{}\", copy);\n+}\n+\n+fn main() {\n+    bug(());\n+}"}, {"sha": "4602fbc99fa62945147b0f4e0863eea758c686c4", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,95 @@\n+error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n+  --> $DIR/defaults-unsound-62211-2.rs:21:18\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n+LL |     type Output: Copy\n+   |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n+\n+error[E0277]: cannot add-assign `&'static str` to `Self`\n+  --> $DIR/defaults-unsound-62211-2.rs:25:7\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n+LL |     + AddAssign<&'static str>\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n+   |\n+   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n+\n+error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n+  --> $DIR/defaults-unsound-62211-2.rs:23:7\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n+LL |     + Deref<Target = str>\n+   |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n+\n+error[E0277]: `Self` doesn't implement `std::fmt::Display`\n+  --> $DIR/defaults-unsound-62211-2.rs:28:7\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | -------------------------- required by `UncheckedCopy`\n+...\n+LL |     + Display = Self;\n+   |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `Self`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+\n+error[E0277]: `T` doesn't implement `std::fmt::Display`\n+  --> $DIR/defaults-unsound-62211-2.rs:41:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `T`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+help: consider restricting this type parameter with `T: std::fmt::Display`\n+  --> $DIR/defaults-unsound-62211-2.rs:41:6\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |      ^\n+\n+error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n+  --> $DIR/defaults-unsound-62211-2.rs:41:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::ops::Deref`\n+  --> $DIR/defaults-unsound-62211-2.rs:41:6\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |      ^\n+\n+error[E0277]: cannot add-assign `&'static str` to `T`\n+  --> $DIR/defaults-unsound-62211-2.rs:41:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n+   |\n+   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n+help: consider restricting this type parameter with `T: std::ops::AddAssign<&'static str>`\n+  --> $DIR/defaults-unsound-62211-2.rs:41:6\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |      ^\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/defaults-unsound-62211-2.rs:41:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/defaults-unsound-62211-2.rs:41:6\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |      ^\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a0a8c86d9495488d6b257e6ffe12d65a539fc6c3", "filename": "src/test/ui/associated-types/issue-26681.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-26681.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-26681.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-26681.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,20 @@\n+#![feature(associated_type_defaults)]\n+\n+// This is a partial regression test for #26681, which used to fail to resolve\n+// `Self` in the assoc. constant, and now fails with a type mismatch because\n+// `Self::Fv` cannot be assumed to equal `u8` inside the trait.\n+\n+trait Foo {\n+    type Bar;\n+}\n+\n+impl Foo for u8 {\n+    type Bar = ();\n+}\n+\n+trait Baz {\n+    type Fv: Foo = u8;\n+    const C: <Self::Fv as Foo>::Bar = 6665;  //~ error: mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "da10933df92b0d044443cc497f9bc85139b6eebf", "filename": "src/test/ui/associated-types/issue-26681.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-26681.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-26681.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-26681.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-26681.rs:17:39\n+   |\n+LL |     const C: <Self::Fv as Foo>::Bar = 6665;\n+   |                                       ^^^^ expected associated type, found integer\n+   |\n+   = note: expected associated type `<<Self as Baz>::Fv as Foo>::Bar`\n+                         found type `{integer}`\n+   = note: consider constraining the associated type `<<Self as Baz>::Fv as Foo>::Bar` to `{integer}` or calling a method that returns `<<Self as Baz>::Fv as Foo>::Bar`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "bda21eb0e0ac824aa472dd38f2fa4cd5f352515d", "filename": "src/test/ui/associated-types/issue-32350.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-32350.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-32350.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-32350.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+\n+// This is another instance of the \"normalizations don't work\" issue with\n+// defaulted associated types.\n+\n+#![feature(associated_type_defaults)]\n+\n+pub trait Emitter<'a> {\n+    type Ctxt: 'a;\n+    type CtxtBrw: 'a = &'a Self::Ctxt;\n+\n+    fn get_cx(&'a self) -> Self::CtxtBrw;\n+}\n+\n+struct MyCtxt;\n+\n+struct MyEmitter {\n+    ctxt: MyCtxt\n+}\n+\n+impl <'a> Emitter<'a> for MyEmitter {\n+    type Ctxt = MyCtxt;\n+\n+    fn get_cx(&'a self) -> &'a MyCtxt {\n+        &self.ctxt\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "52bbd1f5d286372a0c06c3b5bef30505eafbd351", "filename": "src/test/ui/associated-types/issue-41868.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-41868.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-41868.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-41868.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+\n+// Defaulted assoc. types should normalize properly in impls that don't\n+// override them.\n+\n+#![feature(associated_type_defaults)]\n+\n+pub struct Foo;\n+\n+pub trait CanDecode: Sized {\n+    type Output = Self;\n+    fn read(rdr: &mut Foo) -> Option<Self::Output>;\n+}\n+\n+impl CanDecode for u8 {\n+    fn read(rdr: &mut Foo) -> Option<Self::Output> { Some(42) }\n+}\n+\n+impl CanDecode for u16 {\n+    fn read(rdr: &mut Foo) -> Option<u16> { Some(17) }\n+}\n+\n+fn main() {}"}, {"sha": "26f1183c6bd768e6ab18ea8671a98a2d62eecdf8", "filename": "src/test/ui/associated-types/issue-43924.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,15 @@\n+#![feature(associated_type_defaults)]\n+\n+// This used to cause an ICE because assoc. type defaults weren't properly\n+// type-checked.\n+\n+trait Foo<T: Default + ToString> {\n+    type Out: Default + ToString + ?Sized = dyn ToString;  //~ error: not satisfied\n+}\n+\n+impl Foo<u32> for () {}  //~ error: not satisfied\n+impl Foo<u64> for () {}  //~ error: not satisfied\n+\n+fn main() {\n+    assert_eq!(<() as Foo<u32>>::Out::default().to_string(), \"false\");\n+}"}, {"sha": "75a5b3f3551cb8d292a8045a8e0e721c76789949", "filename": "src/test/ui/associated-types/issue-43924.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,23 @@\n+error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n+  --> $DIR/issue-43924.rs:7:15\n+   |\n+LL | trait Foo<T: Default + ToString> {\n+   | -------------------------------- required by `Foo`\n+LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n+   |               ^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n+\n+error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n+  --> $DIR/issue-43924.rs:10:6\n+   |\n+LL | impl Foo<u32> for () {}\n+   |      ^^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n+\n+error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n+  --> $DIR/issue-43924.rs:11:6\n+   |\n+LL | impl Foo<u64> for () {}\n+   |      ^^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d43d674e9c3a069661dd429988530a855c586aba", "filename": "src/test/ui/associated-types/issue-47385.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-47385.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-47385.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-47385.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(associated_type_defaults)]\n+\n+pub struct Foo;\n+\n+pub trait Bar: From<<Self as Bar>::Input> {\n+    type Input = Self;\n+}\n+\n+impl Bar for Foo {\n+    // Will compile with explicit type:\n+    // type Input = Self;\n+}\n+\n+fn main() {}"}, {"sha": "1a1e98cbac27f4a74c9aa520a94abcf49aaa9ed9", "filename": "src/test/ui/associated-types/issue-54182-1.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54182-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54182-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54182-1.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,92 @@\n+// run-pass\n+\n+// Tests that the return type of trait methods is correctly normalized when\n+// checking that a method in an impl matches the trait definition when the\n+// return type involves a defaulted associated type.\n+// ie. the trait has a method with return type `-> Self::R`, and `type R = ()`,\n+// but the impl leaves out the return type (resulting in `()`).\n+// Note that specialization is not involved in this test; no items in\n+// implementations may be overridden. If they were, the normalization wouldn't\n+// happen.\n+\n+#![feature(associated_type_defaults)]\n+\n+macro_rules! overload {\n+    ($a:expr, $b:expr) => {\n+        overload::overload2($a, $b)\n+    };\n+    ($a:expr, $b:expr, $c:expr) => {\n+        overload::overload3($a, $b, $c)\n+    }\n+}\n+\n+fn main() {\n+    let () = overload!(42, true);\n+\n+    let r: f32 = overload!(\"Hello world\", 13.0);\n+    assert_eq!(r, 13.0);\n+\n+    let () = overload!(42, true, 42.5);\n+\n+    let r: i32 = overload!(\"Hello world\", 13.0, 42);\n+    assert_eq!(r, 42);\n+}\n+\n+mod overload {\n+    /// This trait has an assoc. type defaulting to `()`, and a required method returning a value\n+    /// of that assoc. type.\n+    pub trait Overload {\n+        // type R;\n+        type R = ();\n+        fn overload(self) -> Self::R;\n+    }\n+\n+    // overloads for 2 args\n+    impl Overload for (i32, bool) {\n+        // type R = ();\n+\n+        /// This function has no return type specified, and so defaults to `()`.\n+        ///\n+        /// This should work, but didn't, until RFC 2532 was implemented.\n+        fn overload(self) /*-> Self::R*/ {\n+            let (a, b) = self; // destructure args\n+            println!(\"i32 and bool {:?}\", (a, b));\n+        }\n+    }\n+    impl<'a> Overload for (&'a str, f32) {\n+        type R = f32;\n+        fn overload(self) -> Self::R {\n+            let (a, b) = self; // destructure args\n+            println!(\"&str and f32 {:?}\", (a, b));\n+            b\n+        }\n+    }\n+\n+    // overloads for 3 args\n+    impl Overload for (i32, bool, f32) {\n+        // type R = ();\n+        fn overload(self) /*-> Self::R*/ {\n+            let (a, b, c) = self; // destructure args\n+            println!(\"i32 and bool and f32 {:?}\", (a, b, c));\n+        }\n+    }\n+    impl<'a> Overload for (&'a str, f32, i32) {\n+        type R = i32;\n+        fn overload(self) -> Self::R {\n+            let (a, b, c) = self; // destructure args\n+            println!(\"&str and f32 and i32: {:?}\", (a, b, c));\n+            c\n+        }\n+    }\n+\n+    // overloads for more args\n+    // ...\n+\n+    pub fn overload2<R, A, B>(a: A, b: B) -> R where (A, B): Overload<R = R> {\n+        (a, b).overload()\n+    }\n+\n+    pub fn overload3<R, A, B, C>(a: A, b: B, c: C) -> R where (A, B, C): Overload<R = R> {\n+        (a, b, c).overload()\n+    }\n+}"}, {"sha": "c88c766313671fb95e07a7a3e9d16c29ea0e57fa", "filename": "src/test/ui/associated-types/issue-54182-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54182-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54182-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54182-2.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+// Before RFC 2532, normalizing a defaulted assoc. type didn't work at all,\n+// unless the impl in question overrides that type, which makes the default\n+// pointless.\n+\n+#![feature(associated_type_defaults)]\n+\n+trait Tr {\n+    type Assoc = ();\n+}\n+\n+impl Tr for () {}\n+\n+fn f(thing: <() as Tr>::Assoc) {\n+    let c: () = thing;\n+}\n+\n+fn main() {}"}, {"sha": "8dbc24c0673209949fa223d73e73bcb2d9a5d83d", "filename": "src/test/ui/associated-types/issue-63593.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,13 @@\n+#![feature(associated_type_defaults)]\n+\n+// Tests that `Self` is not assumed to implement `Sized` when used as an\n+// associated type default.\n+\n+trait Inner<S> {}\n+\n+trait MyTrait {\n+    type This = Self;  //~ error: size for values of type `Self` cannot be known\n+    fn something<I: Inner<Self::This>>(i: I);\n+}\n+\n+fn main() {}"}, {"sha": "c27800f5a3fb1350bfeaa261e4cfe1792c61dc37", "filename": "src/test/ui/associated-types/issue-63593.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/issue-63593.rs:9:5\n+   |\n+LL | trait MyTrait {\n+   | ------------- required by `MyTrait`\n+LL |     type This = Self;\n+   |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `Self`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "0ffd6cc2cf23008507ad17157a103caf62821e52", "filename": "src/test/ui/associated-types/issue-65774-1.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,58 @@\n+#![feature(associated_type_defaults)]\n+\n+trait MyDisplay { fn method(&self) { } }\n+\n+impl<'a, T: MyDisplay> MyDisplay for &'a mut T { }\n+\n+struct T;\n+\n+trait MPU {\n+    type MpuConfig: MyDisplay = T;\n+    //~^ ERROR the trait bound `T: MyDisplay` is not satisfied\n+}\n+\n+struct S;\n+\n+impl MPU for S { }\n+//~^ ERROR the trait bound `T: MyDisplay` is not satisfied\n+\n+trait MyWrite {\n+    fn my_write(&self, _: &dyn MyDisplay) { }\n+}\n+\n+trait ProcessType {\n+    fn process_detail_fmt(&self, _: &mut dyn MyWrite);\n+}\n+\n+struct Process;\n+\n+impl ProcessType for Process {\n+    fn process_detail_fmt(&self, writer: &mut dyn MyWrite)\n+    {\n+\n+        let mut val: Option<<S as MPU>::MpuConfig> = None;\n+        let valref: &mut <S as MPU>::MpuConfig = val.as_mut().unwrap();\n+\n+        // // This causes a different ICE (but its similar if you squint right):\n+        // //\n+        // // `Unimplemented` selecting `Binder(<T as MyDisplay>)` during codegen\n+        //\n+        // writer.my_write(valref)\n+\n+        // This one causes the ICE:\n+        // FulfillmentError(Obligation(predicate=Binder(TraitPredicate(<T as MyDisplay>)),\n+        // depth=1),Unimplemented)\n+        let closure = |config: &mut <S as MPU>::MpuConfig| writer.my_write(&config);\n+        closure(valref);\n+    }\n+}\n+\n+fn create() -> &'static dyn ProcessType {\n+    let input: Option<&mut Process> = None;\n+    let process: &mut Process = input.unwrap();\n+    process\n+}\n+\n+pub fn main() {\n+    create();\n+}"}, {"sha": "559136be705e28de59a639ff4f231611cfc23a1c", "filename": "src/test/ui/associated-types/issue-65774-1.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n+  --> $DIR/issue-65774-1.rs:10:21\n+   |\n+LL | trait MPU {\n+   | --------- required by `MPU`\n+LL |     type MpuConfig: MyDisplay = T;\n+   |                     ^^^^^^^^^ the trait `MyDisplay` is not implemented for `T`\n+\n+error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n+  --> $DIR/issue-65774-1.rs:16:6\n+   |\n+LL | impl MPU for S { }\n+   |      ^^^ the trait `MyDisplay` is not implemented for `T`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "31e203a81d3972bf00a5105c64cb2964d2c43421", "filename": "src/test/ui/associated-types/issue-65774-2.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,58 @@\n+#![feature(associated_type_defaults)]\n+\n+trait MyDisplay { fn method(&self) { } }\n+\n+impl<'a, T: MyDisplay> MyDisplay for &'a mut T { }\n+\n+struct T;\n+\n+trait MPU {\n+    type MpuConfig: MyDisplay = T;\n+    //~^ ERROR the trait bound `T: MyDisplay` is not satisfied\n+}\n+\n+struct S;\n+\n+impl MPU for S { }\n+//~^ ERROR the trait bound `T: MyDisplay` is not satisfied\n+\n+trait MyWrite {\n+    fn my_write(&self, _: &dyn MyDisplay) { }\n+}\n+\n+trait ProcessType {\n+    fn process_detail_fmt(&self, _: &mut dyn MyWrite);\n+}\n+\n+struct Process;\n+\n+impl ProcessType for Process {\n+    fn process_detail_fmt(&self, writer: &mut dyn MyWrite)\n+    {\n+\n+        let mut val: Option<<S as MPU>::MpuConfig> = None;\n+        let valref: &mut <S as MPU>::MpuConfig = val.as_mut().unwrap();\n+\n+        // // This causes a different ICE (but its similar if you squint right):\n+        // //\n+        // // `Unimplemented` selecting `Binder(<T as MyDisplay>)` during codegen\n+        //\n+        writer.my_write(valref)\n+\n+        // This one causes the ICE:\n+        // FulfillmentError(Obligation(predicate=Binder(TraitPredicate(<T as MyDisplay>)),\n+        // depth=1),Unimplemented)\n+        /*let closure = |config: &mut <S as MPU>::MpuConfig| writer.my_write(&config);\n+        closure(valref);*/\n+    }\n+}\n+\n+fn create() -> &'static dyn ProcessType {\n+    let input: Option<&mut Process> = None;\n+    let process: &mut Process = input.unwrap();\n+    process\n+}\n+\n+pub fn main() {\n+    create();\n+}"}, {"sha": "cb515964226a5a3ee5a78a867f71430686174d2f", "filename": "src/test/ui/associated-types/issue-65774-2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n+  --> $DIR/issue-65774-2.rs:10:21\n+   |\n+LL | trait MPU {\n+   | --------- required by `MPU`\n+LL |     type MpuConfig: MyDisplay = T;\n+   |                     ^^^^^^^^^ the trait `MyDisplay` is not implemented for `T`\n+\n+error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n+  --> $DIR/issue-65774-2.rs:16:6\n+   |\n+LL | impl MPU for S { }\n+   |      ^^^ the trait `MyDisplay` is not implemented for `T`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "77f9a3770a3392972657436b0b5d0f8389fabff9", "filename": "src/test/ui/lint/lint-missing-doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Flint%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Flint%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-missing-doc.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -60,7 +60,7 @@ pub trait D {\n }\n \n /// dox\n-pub trait E {\n+pub trait E: Sized {\n     type AssociatedType; //~ ERROR: missing documentation for an associated type\n     type AssociatedTypeDef = Self; //~ ERROR: missing documentation for an associated type\n "}, {"sha": "03347d5b99a3163073511d5498326c46f86fa9e9", "filename": "src/test/ui/privacy/associated-item-privacy-trait.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -23,8 +23,7 @@ mod priv_trait {\n         <Pub as PrivTr>::CONST;\n         //~^ ERROR associated constant `PrivTr::CONST` is private\n         let _: <Pub as PrivTr>::AssocTy;\n-        //~^ ERROR trait `priv_trait::PrivTr` is private\n-        //~| ERROR trait `priv_trait::PrivTr` is private\n+        //~^ ERROR associated type `PrivTr::AssocTy` is private\n         pub type InSignatureTy = <Pub as PrivTr>::AssocTy;\n         //~^ ERROR trait `priv_trait::PrivTr` is private\n         pub trait InSignatureTr: PrivTr {}\n@@ -116,15 +115,11 @@ mod priv_parent_substs {\n         <Priv as PubTr<_>>::CONST;\n         //~^ ERROR type `priv_parent_substs::Priv` is private\n \n-        let _: <Pub as PubTr>::AssocTy;\n-        //~^ ERROR type `priv_parent_substs::Priv` is private\n-        //~| ERROR type `priv_parent_substs::Priv` is private\n+        let _: <Pub as PubTr>::AssocTy;  // FIXME no longer an error?!\n         let _: <Pub as PubTr<_>>::AssocTy;\n         //~^ ERROR type `priv_parent_substs::Priv` is private\n-        //~| ERROR type `priv_parent_substs::Priv` is private\n         let _: <Priv as PubTr<_>>::AssocTy;\n         //~^ ERROR type `priv_parent_substs::Priv` is private\n-        //~| ERROR type `priv_parent_substs::Priv` is private\n \n         pub type InSignatureTy1 = <Pub as PubTr>::AssocTy;\n         //~^ ERROR type `priv_parent_substs::Priv` is private"}, {"sha": "db24e425a01f694e949b22ba697ac53cae5399f1", "filename": "src/test/ui/privacy/associated-item-privacy-trait.stderr", "status": "modified", "additions": 29, "deletions": 84, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -42,18 +42,7 @@ LL |     priv_trait::mac!();\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: trait `priv_trait::PrivTr` is private\n-  --> $DIR/associated-item-privacy-trait.rs:25:13\n-   |\n-LL |         let _: <Pub as PrivTr>::AssocTy;\n-   |             ^\n-...\n-LL |     priv_trait::mac!();\n-   |     ------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: trait `priv_trait::PrivTr` is private\n+error: associated type `PrivTr::AssocTy` is private\n   --> $DIR/associated-item-privacy-trait.rs:25:16\n    |\n LL |         let _: <Pub as PrivTr>::AssocTy;\n@@ -65,7 +54,7 @@ LL |     priv_trait::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n-  --> $DIR/associated-item-privacy-trait.rs:28:34\n+  --> $DIR/associated-item-privacy-trait.rs:27:34\n    |\n LL |         pub type InSignatureTy = <Pub as PrivTr>::AssocTy;\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -76,7 +65,7 @@ LL |     priv_trait::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n-  --> $DIR/associated-item-privacy-trait.rs:30:34\n+  --> $DIR/associated-item-privacy-trait.rs:29:34\n    |\n LL |         pub trait InSignatureTr: PrivTr {}\n    |                                  ^^^^^^\n@@ -87,7 +76,7 @@ LL |     priv_trait::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `priv_trait::PrivTr` is private\n-  --> $DIR/associated-item-privacy-trait.rs:32:14\n+  --> $DIR/associated-item-privacy-trait.rs:31:14\n    |\n LL |         impl PrivTr for u8 {}\n    |              ^^^^^^\n@@ -98,7 +87,7 @@ LL |     priv_trait::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:49:21\n+  --> $DIR/associated-item-privacy-trait.rs:48:21\n    |\n LL |         let value = <Pub as PubTr>::method;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^\n@@ -109,7 +98,7 @@ LL |     priv_signature::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:51:9\n+  --> $DIR/associated-item-privacy-trait.rs:50:9\n    |\n LL |         value;\n    |         ^^^^^\n@@ -120,7 +109,7 @@ LL |     priv_signature::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:53:13\n+  --> $DIR/associated-item-privacy-trait.rs:52:13\n    |\n LL |         Pub.method(loop {});\n    |             ^^^^^^\n@@ -131,7 +120,7 @@ LL |     priv_signature::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:70:21\n+  --> $DIR/associated-item-privacy-trait.rs:69:21\n    |\n LL |         let value = <Pub as PubTr>::method::<Priv>;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -142,7 +131,7 @@ LL |     priv_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:72:9\n+  --> $DIR/associated-item-privacy-trait.rs:71:9\n    |\n LL |         value;\n    |         ^^^^^\n@@ -153,7 +142,7 @@ LL |     priv_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:74:9\n+  --> $DIR/associated-item-privacy-trait.rs:73:9\n    |\n LL |         Pub.method::<Priv>();\n    |         ^^^^^^^^^^^^^^^^^^^^\n@@ -164,7 +153,7 @@ LL |     priv_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:94:21\n+  --> $DIR/associated-item-privacy-trait.rs:93:21\n    |\n LL |         let value = <Pub as PubTr>::method;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^\n@@ -175,7 +164,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:96:9\n+  --> $DIR/associated-item-privacy-trait.rs:95:9\n    |\n LL |         value;\n    |         ^^^^^\n@@ -186,7 +175,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:98:21\n+  --> $DIR/associated-item-privacy-trait.rs:97:21\n    |\n LL |         let value = <Pub as PubTr<_>>::method;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -197,7 +186,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:100:9\n+  --> $DIR/associated-item-privacy-trait.rs:99:9\n    |\n LL |         value;\n    |         ^^^^^\n@@ -208,7 +197,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:102:9\n+  --> $DIR/associated-item-privacy-trait.rs:101:9\n    |\n LL |         Pub.method();\n    |         ^^^^^^^^^^^^\n@@ -219,7 +208,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:105:21\n+  --> $DIR/associated-item-privacy-trait.rs:104:21\n    |\n LL |         let value = <Priv as PubTr<_>>::method;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -230,7 +219,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:107:9\n+  --> $DIR/associated-item-privacy-trait.rs:106:9\n    |\n LL |         value;\n    |         ^^^^^\n@@ -241,7 +230,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:109:9\n+  --> $DIR/associated-item-privacy-trait.rs:108:9\n    |\n LL |         Priv.method();\n    |         ^^^^^^^^^^^^^\n@@ -252,7 +241,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:112:9\n+  --> $DIR/associated-item-privacy-trait.rs:111:9\n    |\n LL |         <Pub as PubTr>::CONST;\n    |         ^^^^^^^^^^^^^^^^^^^^^\n@@ -263,7 +252,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:114:9\n+  --> $DIR/associated-item-privacy-trait.rs:113:9\n    |\n LL |         <Pub as PubTr<_>>::CONST;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -274,7 +263,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:116:9\n+  --> $DIR/associated-item-privacy-trait.rs:115:9\n    |\n LL |         <Priv as PubTr<_>>::CONST;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -285,73 +274,29 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:119:13\n-   |\n-LL |         let _: <Pub as PubTr>::AssocTy;\n-   |             ^\n-...\n-LL |     priv_parent_substs::mac!();\n-   |     --------------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:119:16\n-   |\n-LL |         let _: <Pub as PubTr>::AssocTy;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     priv_parent_substs::mac!();\n-   |     --------------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:122:13\n-   |\n-LL |         let _: <Pub as PubTr<_>>::AssocTy;\n-   |             ^\n-...\n-LL |     priv_parent_substs::mac!();\n-   |     --------------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:122:16\n+  --> $DIR/associated-item-privacy-trait.rs:119:30\n    |\n LL |         let _: <Pub as PubTr<_>>::AssocTy;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     priv_parent_substs::mac!();\n-   |     --------------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:125:13\n-   |\n-LL |         let _: <Priv as PubTr<_>>::AssocTy;\n-   |             ^\n+   |                              ^\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:125:16\n+  --> $DIR/associated-item-privacy-trait.rs:121:17\n    |\n LL |         let _: <Priv as PubTr<_>>::AssocTy;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:129:35\n+  --> $DIR/associated-item-privacy-trait.rs:124:35\n    |\n LL |         pub type InSignatureTy1 = <Pub as PubTr>::AssocTy;\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -362,7 +307,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:131:35\n+  --> $DIR/associated-item-privacy-trait.rs:126:35\n    |\n LL |         pub type InSignatureTy2 = <Priv as PubTr<Pub>>::AssocTy;\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -373,7 +318,7 @@ LL |     priv_parent_substs::mac!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:133:14\n+  --> $DIR/associated-item-privacy-trait.rs:128:14\n    |\n LL |         impl PubTr for u8 {}\n    |              ^^^^^\n@@ -383,5 +328,5 @@ LL |     priv_parent_substs::mac!();\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 35 previous errors\n+error: aborting due to 30 previous errors\n "}, {"sha": "62faae1f399e88e77e88ac9bcfd7f69e74d45b75", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -10,6 +10,11 @@ mod m {\n     impl PrivTr for Priv {}\n     pub trait PubTrAux1<T> {}\n     pub trait PubTrAux2 { type A; }\n+    impl<T> PubTrAux1<T> for u8 {}\n+    impl PubTrAux2 for u8 {\n+        type A = Priv;\n+        //~^ ERROR private type `m::Priv` in public interface\n+    }\n \n     // \"Private-in-public in associated types is hard error\" in RFC 2145\n     // applies only to the aliased types, not bounds."}, {"sha": "c57073a004d8f9e3271c7cac499642341031b14d", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.stderr", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -1,5 +1,14 @@\n+error[E0446]: private type `m::Priv` in public interface\n+  --> $DIR/private-in-public-assoc-ty.rs:15:9\n+   |\n+LL |     struct Priv;\n+   |     - `m::Priv` declared as private\n+...\n+LL |         type A = Priv;\n+   |         ^^^^^^^^^^^^^^ can't leak private type\n+\n warning: private trait `m::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-assoc-ty.rs:16:5\n+  --> $DIR/private-in-public-assoc-ty.rs:21:5\n    |\n LL | /     pub trait PubTr {\n LL | |\n@@ -15,7 +24,7 @@ LL | |     }\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `m::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:16:5\n+  --> $DIR/private-in-public-assoc-ty.rs:21:5\n    |\n LL | /     pub trait PubTr {\n LL | |\n@@ -30,7 +39,7 @@ LL | |     }\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `m::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:16:5\n+  --> $DIR/private-in-public-assoc-ty.rs:21:5\n    |\n LL | /     pub trait PubTr {\n LL | |\n@@ -45,7 +54,7 @@ LL | |     }\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error[E0446]: private type `m::Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:27:9\n+  --> $DIR/private-in-public-assoc-ty.rs:32:9\n    |\n LL |     struct Priv;\n    |     - `m::Priv` declared as private\n@@ -54,7 +63,7 @@ LL |         type Alias4 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `m::Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:34:9\n+  --> $DIR/private-in-public-assoc-ty.rs:39:9\n    |\n LL |     struct Priv;\n    |     - `m::Priv` declared as private\n@@ -63,7 +72,7 @@ LL |         type Alias1 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0445]: private trait `m::PrivTr` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:37:9\n+  --> $DIR/private-in-public-assoc-ty.rs:42:9\n    |\n LL |     trait PrivTr {}\n    |     - `m::PrivTr` declared as private\n@@ -72,15 +81,15 @@ LL |         type Exist = impl PrivTr;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n error[E0445]: private trait `m::PrivTr` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:37:9\n+  --> $DIR/private-in-public-assoc-ty.rs:42:9\n    |\n LL |     trait PrivTr {}\n    |     - `m::PrivTr` declared as private\n ...\n LL |         type Exist = impl PrivTr;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0445, E0446.\n For more information about an error, try `rustc --explain E0445`."}, {"sha": "e8c767b13e9cf8a39918b53195c9584e5fa32836", "filename": "src/test/ui/ufcs/ufcs-partially-resolved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.rs?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -35,7 +35,7 @@ fn main() {\n     <u8 as A>::N::NN; //~ ERROR cannot find associated type `N` in `A`\n     let _: <u8 as Tr>::Y::NN; //~ ERROR ambiguous associated type\n     let _: <u8 as E>::Y::NN; //~ ERROR expected associated type, found variant `E::Y`\n-    <u8 as Tr>::Y::NN; //~ ERROR no associated item named `NN` found\n+    <u8 as Tr>::Y::NN; //~ ERROR no associated item named `NN` found for type `u16`\n     <u8 as E>::Y::NN; //~ ERROR expected associated type, found variant `E::Y`\n \n     let _: <u8 as Tr::N>::NN; //~ ERROR cannot find associated type `NN` in `Tr::N`\n@@ -52,5 +52,5 @@ fn main() {\n     let _: <u8 as Dr>::Z; //~ ERROR expected associated type, found method `Dr::Z`\n     <u8 as Dr>::X; //~ ERROR expected method or associated constant, found associated type `Dr::X`\n     let _: <u8 as Dr>::Z::N; //~ ERROR expected associated type, found method `Dr::Z`\n-    <u8 as Dr>::X::N; //~ ERROR no associated item named `N` found\n+    <u8 as Dr>::X::N; //~ ERROR no associated item named `N` found for type `u16`\n }"}, {"sha": "e5e6ed9fac91142b6b804a293acd86d181d32cea", "filename": "src/test/ui/ufcs/ufcs-partially-resolved.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0d106109d73ed2e45a9925a9512ade2afb7df9/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr?ref=3a0d106109d73ed2e45a9925a9512ade2afb7df9", "patch": "@@ -205,19 +205,19 @@ error[E0223]: ambiguous associated type\n   --> $DIR/ufcs-partially-resolved.rs:36:12\n    |\n LL |     let _: <u8 as Tr>::Y::NN;\n-   |            ^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<<u8 as Tr>::Y as Trait>::NN`\n+   |            ^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<u16 as Trait>::NN`\n \n-error[E0599]: no associated item named `NN` found for associated type `<u8 as Tr>::Y` in the current scope\n+error[E0599]: no associated item named `NN` found for type `u16` in the current scope\n   --> $DIR/ufcs-partially-resolved.rs:38:20\n    |\n LL |     <u8 as Tr>::Y::NN;\n-   |                    ^^ associated item not found in `<u8 as Tr>::Y`\n+   |                    ^^ associated item not found in `u16`\n \n-error[E0599]: no associated item named `N` found for associated type `<u8 as Dr>::X` in the current scope\n+error[E0599]: no associated item named `N` found for type `u16` in the current scope\n   --> $DIR/ufcs-partially-resolved.rs:55:20\n    |\n LL |     <u8 as Dr>::X::N;\n-   |                    ^ associated item not found in `<u8 as Dr>::X`\n+   |                    ^ associated item not found in `u16`\n \n error: aborting due to 32 previous errors\n "}]}