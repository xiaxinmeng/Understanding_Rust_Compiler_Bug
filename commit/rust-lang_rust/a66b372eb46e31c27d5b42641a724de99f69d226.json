{"sha": "a66b372eb46e31c27d5b42641a724de99f69d226", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NmIzNzJlYjQ2ZTMxYzI3ZDViNDI2NDFhNzI0ZGU5OWY2OWQyMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-06T07:36:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-06T07:36:06Z"}, "message": "auto merge of #10306 : alexcrichton/rust/issue-9970-better, r=huonw\n\nThere were a few ambiguous error messages which look like they could have\r\ncropped up from either the rust compiler for the format string parser. To\r\ndifferentiate, the prefix 'invalid format string' is now added in front of all\r\nformat string errors.\r\n\r\ncc #9970", "tree": {"sha": "498a40cc6f96038ae4e594d975431d18c610fac8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/498a40cc6f96038ae4e594d975431d18c610fac8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a66b372eb46e31c27d5b42641a724de99f69d226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a66b372eb46e31c27d5b42641a724de99f69d226", "html_url": "https://github.com/rust-lang/rust/commit/a66b372eb46e31c27d5b42641a724de99f69d226", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a66b372eb46e31c27d5b42641a724de99f69d226/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efaf730347fa7e01f8d1852be7c9a447f147763c", "url": "https://api.github.com/repos/rust-lang/rust/commits/efaf730347fa7e01f8d1852be7c9a447f147763c", "html_url": "https://github.com/rust-lang/rust/commit/efaf730347fa7e01f8d1852be7c9a447f147763c"}, {"sha": "2fc337a7d6f9ee05c0e5cf7df6fd243a649aeb61", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc337a7d6f9ee05c0e5cf7df6fd243a649aeb61", "html_url": "https://github.com/rust-lang/rust/commit/2fc337a7d6f9ee05c0e5cf7df6fd243a649aeb61"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "401ddfe67f50e67c08dee0a33546d395aba7728b", "filename": "src/libstd/fmt/parse.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a66b372eb46e31c27d5b42641a724de99f69d226/src%2Flibstd%2Ffmt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66b372eb46e31c27d5b42641a724de99f69d226/src%2Flibstd%2Ffmt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fparse.rs?ref=a66b372eb46e31c27d5b42641a724de99f69d226", "patch": "@@ -180,7 +180,7 @@ impl<'self> Iterator<Piece<'self>> for Parser<'self> {\n             }\n             Some((_, '}')) if self.depth == 0 => {\n                 self.cur.next();\n-                self.err(~\"unmatched `}` found\");\n+                self.err(\"unmatched `}` found\");\n                 None\n             }\n             Some((_, '}')) | None => { None }\n@@ -204,8 +204,8 @@ impl<'self> Parser<'self> {\n     /// Notifies of an error. The message doesn't actually need to be of type\n     /// ~str, but I think it does when this eventually uses conditions so it\n     /// might as well start using it now.\n-    fn err(&self, msg: ~str) {\n-        parse_error::cond.raise(msg);\n+    fn err(&self, msg: &str) {\n+        parse_error::cond.raise(\"invalid format string: \" + msg);\n     }\n \n     /// Optionally consumes the specified character. If the character is not at\n@@ -230,11 +230,11 @@ impl<'self> Parser<'self> {\n                 self.cur.next();\n             }\n             Some((_, other)) => {\n-                parse_error::cond.raise(\n+                self.err(\n                     format!(\"expected `{}` but found `{}`\", c, other));\n             }\n             None => {\n-                parse_error::cond.raise(\n+                self.err(\n                     format!(\"expected `{}` but string was terminated\", c));\n             }\n         }\n@@ -267,7 +267,7 @@ impl<'self> Parser<'self> {\n                 c\n             }\n             None => {\n-                self.err(~\"expected an escape sequence, but format string was \\\n+                self.err(\"expected an escape sequence, but format string was \\\n                            terminated\");\n                 ' '\n             }\n@@ -411,7 +411,7 @@ impl<'self> Parser<'self> {\n                 Some(self.plural())\n             }\n             \"\" => {\n-                self.err(~\"expected method after comma\");\n+                self.err(\"expected method after comma\");\n                 return None;\n             }\n             method => {\n@@ -430,7 +430,7 @@ impl<'self> Parser<'self> {\n             self.ws();\n             let selector = self.word();\n             if selector == \"\" {\n-                self.err(~\"cannot have an empty selector\");\n+                self.err(\"cannot have an empty selector\");\n                 break\n             }\n             self.must_consume('{');\n@@ -440,7 +440,7 @@ impl<'self> Parser<'self> {\n             self.must_consume('}');\n             if selector == \"other\" {\n                 if !other.is_none() {\n-                    self.err(~\"multiple `other` statements in `select\");\n+                    self.err(\"multiple `other` statements in `select\");\n                 }\n                 other = Some(pieces);\n             } else {\n@@ -456,7 +456,7 @@ impl<'self> Parser<'self> {\n         let other = match other {\n             Some(arm) => { arm }\n             None => {\n-                self.err(~\"`select` statement must provide an `other` case\");\n+                self.err(\"`select` statement must provide an `other` case\");\n                 ~[]\n             }\n         };\n@@ -488,7 +488,7 @@ impl<'self> Parser<'self> {\n                             match self.integer() {\n                                 Some(i) => { offset = Some(i); }\n                                 None => {\n-                                    self.err(~\"offset must be an integer\");\n+                                    self.err(\"offset must be an integer\");\n                                 }\n                             }\n                         }\n@@ -506,8 +506,8 @@ impl<'self> Parser<'self> {\n                 match self.integer() {\n                     Some(i) => Right(i),\n                     None => {\n-                        self.err(~\"plural `=` selectors must be followed by an \\\n-                                   integer\");\n+                        self.err(\"plural `=` selectors must be followed by an \\\n+                                  integer\");\n                         Right(0)\n                     }\n                 }\n@@ -538,7 +538,7 @@ impl<'self> Parser<'self> {\n             self.must_consume('}');\n             if isother {\n                 if !other.is_none() {\n-                    self.err(~\"multiple `other` statements in `select\");\n+                    self.err(\"multiple `other` statements in `select\");\n                 }\n                 other = Some(pieces);\n             } else {\n@@ -554,7 +554,7 @@ impl<'self> Parser<'self> {\n         let other = match other {\n             Some(arm) => { arm }\n             None => {\n-                self.err(~\"`plural` statement must provide an `other` case\");\n+                self.err(\"`plural` statement must provide an `other` case\");\n                 ~[]\n             }\n         };"}]}