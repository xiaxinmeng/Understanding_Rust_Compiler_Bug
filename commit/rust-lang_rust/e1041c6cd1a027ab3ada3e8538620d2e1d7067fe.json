{"sha": "e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMDQxYzZjZDFhMDI3YWIzYWRhM2U4NTM4NjIwZDJlMWQ3MDY3ZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-10T14:51:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-10T14:51:01Z"}, "message": "Auto merge of #54802 - davidtwco:issue-53040, r=pnkfelix\n\n[nll] better error message when returning refs to upvars\n\nFixes #53040.\n\nr? @nikomatsakis", "tree": {"sha": "e28851b594e742084a30a7697ba11802b2c08e00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e28851b594e742084a30a7697ba11802b2c08e00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "html_url": "https://github.com/rust-lang/rust/commit/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2243fabd8f25c46a4a76199f10a2cd9adbb5c418", "url": "https://api.github.com/repos/rust-lang/rust/commits/2243fabd8f25c46a4a76199f10a2cd9adbb5c418", "html_url": "https://github.com/rust-lang/rust/commit/2243fabd8f25c46a4a76199f10a2cd9adbb5c418"}, {"sha": "98633b458b6dbde4afd1b468f35a1b8239b5c15c", "url": "https://api.github.com/repos/rust-lang/rust/commits/98633b458b6dbde4afd1b468f35a1b8239b5c15c", "html_url": "https://github.com/rust-lang/rust/commit/98633b458b6dbde4afd1b468f35a1b8239b5c15c"}], "stats": {"total": 282, "additions": 214, "deletions": 68}, "files": [{"sha": "8191dd720e7b2db1a2abfa419c2940c723d0c15b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 143, "deletions": 17, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "patch": "@@ -10,7 +10,9 @@\n \n use borrow_check::nll::constraints::{OutlivesConstraint};\n use borrow_check::nll::region_infer::RegionInferenceContext;\n+use borrow_check::nll::region_infer::error_reporting::region_name::RegionNameSource;\n use borrow_check::nll::type_check::Locations;\n+use borrow_check::nll::universal_regions::DefiningTy;\n use rustc::hir::def_id::DefId;\n use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc::infer::InferCtxt;\n@@ -263,6 +265,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         debug!(\"report_error: fr_is_local={:?} outlived_fr_is_local={:?} category={:?}\",\n                fr_is_local, outlived_fr_is_local, category);\n         match (category, fr_is_local, outlived_fr_is_local) {\n+            (ConstraintCategory::Return, true, false) if self.is_closure_fn_mut(infcx, fr) =>\n+                self.report_fnmut_error(mir, infcx, mir_def_id, fr, outlived_fr, span,\n+                                        errors_buffer),\n             (ConstraintCategory::Assignment, true, false) |\n             (ConstraintCategory::CallArgument, true, false) =>\n                 self.report_escaping_data_error(mir, infcx, mir_def_id, fr, outlived_fr,\n@@ -274,6 +279,85 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         };\n     }\n \n+    /// Report a specialized error when `FnMut` closures return a reference to a captured variable.\n+    /// This function expects `fr` to be local and `outlived_fr` to not be local.\n+    ///\n+    /// ```text\n+    /// error: captured variable cannot escape `FnMut` closure body\n+    ///   --> $DIR/issue-53040.rs:15:8\n+    ///    |\n+    /// LL |     || &mut v;\n+    ///    |     -- ^^^^^^ creates a reference to a captured variable which escapes the closure body\n+    ///    |     |\n+    ///    |     inferred to be a `FnMut` closure\n+    ///    |\n+    ///    = note: `FnMut` closures only have access to their captured variables while they are\n+    ///            executing...\n+    ///    = note: ...therefore, returned references to captured variables will escape the closure\n+    /// ```\n+    fn report_fnmut_error(\n+        &self,\n+        mir: &Mir<'tcx>,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n+        mir_def_id: DefId,\n+        _fr: RegionVid,\n+        outlived_fr: RegionVid,\n+        span: Span,\n+        errors_buffer: &mut Vec<Diagnostic>,\n+    ) {\n+        let mut diag = infcx.tcx.sess.struct_span_err(\n+            span,\n+            \"captured variable cannot escape `FnMut` closure body\",\n+        );\n+\n+        // We should check if the return type of this closure is in fact a closure - in that\n+        // case, we can special case the error further.\n+        let return_type_is_closure = self.universal_regions.unnormalized_output_ty.is_closure();\n+        let message = if return_type_is_closure {\n+            \"returns a closure that contains a reference to a captured variable, which then \\\n+             escapes the closure body\"\n+        } else {\n+            \"returns a reference to a captured variable which escapes the closure body\"\n+        };\n+\n+        diag.span_label(\n+            span,\n+            message,\n+        );\n+\n+        match self.give_region_a_name(infcx, mir, mir_def_id, outlived_fr, &mut 1).source {\n+            RegionNameSource::NamedEarlyBoundRegion(fr_span) |\n+            RegionNameSource::NamedFreeRegion(fr_span) |\n+            RegionNameSource::SynthesizedFreeEnvRegion(fr_span, _) |\n+            RegionNameSource::CannotMatchHirTy(fr_span, _) |\n+            RegionNameSource::MatchedHirTy(fr_span) |\n+            RegionNameSource::MatchedAdtAndSegment(fr_span) |\n+            RegionNameSource::AnonRegionFromUpvar(fr_span, _) |\n+            RegionNameSource::AnonRegionFromOutput(fr_span, _, _) => {\n+                diag.span_label(fr_span, \"inferred to be a `FnMut` closure\");\n+            },\n+            _ => {},\n+        }\n+\n+        diag.note(\"`FnMut` closures only have access to their captured variables while they are \\\n+                   executing...\");\n+        diag.note(\"...therefore, they cannot allow references to captured variables to escape\");\n+\n+        diag.buffer(errors_buffer);\n+    }\n+\n+    /// Reports a error specifically for when data is escaping a closure.\n+    ///\n+    /// ```text\n+    /// error: borrowed data escapes outside of function\n+    ///   --> $DIR/lifetime-bound-will-change-warning.rs:44:5\n+    ///    |\n+    /// LL | fn test2<'a>(x: &'a Box<Fn()+'a>) {\n+    ///    |              - `x` is a reference that is only valid in the function body\n+    /// LL |     // but ref_obj will not, so warn.\n+    /// LL |     ref_obj(x)\n+    ///    |     ^^^^^^^^^^ `x` escapes the function body here\n+    /// ```\n     fn report_escaping_data_error(\n         &self,\n         mir: &Mir<'tcx>,\n@@ -305,31 +389,46 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             span, &format!(\"borrowed data escapes outside of {}\", escapes_from),\n         );\n \n-        if let Some((outlived_fr_name, outlived_fr_span)) = outlived_fr_name_and_span {\n-            if let Some(name) = outlived_fr_name {\n-                diag.span_label(\n-                    outlived_fr_span,\n-                    format!(\"`{}` is declared here, outside of the {} body\", name, escapes_from),\n-                );\n-            }\n+        if let Some((Some(outlived_fr_name), outlived_fr_span)) = outlived_fr_name_and_span {\n+            diag.span_label(\n+                outlived_fr_span,\n+                format!(\n+                    \"`{}` is declared here, outside of the {} body\",\n+                    outlived_fr_name, escapes_from\n+                ),\n+            );\n         }\n \n-        if let Some((fr_name, fr_span)) = fr_name_and_span {\n-            if let Some(name) = fr_name {\n-                diag.span_label(\n-                    fr_span,\n-                    format!(\"`{}` is a reference that is only valid in the {} body\",\n-                            name, escapes_from),\n-                );\n+        if let Some((Some(fr_name), fr_span)) = fr_name_and_span {\n+            diag.span_label(\n+                fr_span,\n+                format!(\n+                    \"`{}` is a reference that is only valid in the {} body\",\n+                    fr_name, escapes_from\n+                ),\n+            );\n \n-                diag.span_label(span, format!(\"`{}` escapes the {} body here\",\n-                                               name, escapes_from));\n-            }\n+            diag.span_label(span, format!(\"`{}` escapes the {} body here\", fr_name, escapes_from));\n         }\n \n         diag.buffer(errors_buffer);\n     }\n \n+    /// Reports a region inference error for the general case with named/synthesized lifetimes to\n+    /// explain what is happening.\n+    ///\n+    /// ```text\n+    /// error: unsatisfied lifetime constraints\n+    ///   --> $DIR/regions-creating-enums3.rs:17:5\n+    ///    |\n+    /// LL | fn mk_add_bad1<'a,'b>(x: &'a ast<'a>, y: &'b ast<'b>) -> ast<'a> {\n+    ///    |                -- -- lifetime `'b` defined here\n+    ///    |                |\n+    ///    |                lifetime `'a` defined here\n+    /// LL |     ast::add(x, y)\n+    ///    |     ^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it\n+    ///    |                    is returning data with lifetime `'b`\n+    /// ```\n     fn report_general_error(\n         &self,\n         mir: &Mir<'tcx>,\n@@ -380,6 +479,15 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         diag.buffer(errors_buffer);\n     }\n \n+    /// Adds a suggestion to errors where a `impl Trait` is returned.\n+    ///\n+    /// ```text\n+    /// help: to allow this impl Trait to capture borrowed data with lifetime `'1`, add `'_` as\n+    ///       a constraint\n+    ///    |\n+    /// LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + 'a {\n+    ///    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    /// ```\n     fn add_static_impl_trait_suggestion(\n         &self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n@@ -500,4 +608,22 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             .get(&(constraint.sup, constraint.sub));\n         *opt_span_category.unwrap_or(&(constraint.category, mir.source_info(loc).span))\n     }\n+\n+    /// Returns `true` if a closure is inferred to be an `FnMut` closure.\n+    crate fn is_closure_fn_mut(\n+        &self,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n+        fr: RegionVid,\n+    ) -> bool {\n+        if let Some(ty::ReFree(free_region)) = self.to_error_region(fr) {\n+            if let ty::BoundRegion::BrEnv = free_region.bound_region {\n+                if let DefiningTy::Closure(def_id, substs) = self.universal_regions.defining_ty {\n+                    let closure_kind_ty = substs.closure_kind_ty(def_id, infcx.tcx);\n+                    return Some(ty::ClosureKind::FnMut) == closure_kind_ty.to_opt_closure_kind();\n+                }\n+            }\n+        }\n+\n+        false\n+    }\n }"}, {"sha": "65ba2f537bf214c98982c05ce815e9b02bde5652", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "patch": "@@ -27,8 +27,8 @@ use syntax_pos::symbol::InternedString;\n \n #[derive(Debug)]\n crate struct RegionName {\n-    name: InternedString,\n-    source: RegionNameSource,\n+    crate name: InternedString,\n+    crate source: RegionNameSource,\n }\n \n #[derive(Debug)]"}, {"sha": "73fa1b0cfb78de79251ef241b0e46355b3f502f6", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/var_name.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs?ref=e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "patch": "@@ -50,11 +50,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             .defining_ty\n             .upvar_tys(tcx)\n             .position(|upvar_ty| {\n-                debug!(\n-                    \"get_upvar_index_for_region: upvar_ty = {:?}\",\n-                    upvar_ty,\n-                );\n-                tcx.any_free_region_meets(&upvar_ty, |r| r.to_region_vid() == fr)\n+                debug!(\"get_upvar_index_for_region: upvar_ty={:?}\", upvar_ty);\n+                tcx.any_free_region_meets(&upvar_ty, |r| {\n+                    let r = r.to_region_vid();\n+                    debug!(\"get_upvar_index_for_region: r={:?} fr={:?}\", r, fr);\n+                    r == fr\n+                })\n             })?;\n \n         let upvar_ty = self"}, {"sha": "5721c52ba217287063d75333f8032ff8ae8567e0", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.ast.nll.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr?ref=e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "patch": "@@ -20,24 +20,22 @@ LL |                    //[mir]~^ ERROR cannot borrow `x` as mutable more than o\n LL |                    *y = 1;\n    |                    ------ first borrow later used here\n \n-error: unsatisfied lifetime constraints\n+error: captured variable cannot escape `FnMut` closure body\n   --> $DIR/borrowck-describe-lvalue.rs:305:16\n    |\n LL |              || {\n-   |              --\n-   |              ||\n-   |              |return type of closure is [closure@$DIR/borrowck-describe-lvalue.rs:305:16: 311:18 x:&'2 mut i32]\n-   |              lifetime `'1` represents this closure's body\n-LL | /                || { //[mir]~ ERROR unsatisfied lifetime constraints\n+   |               - inferred to be a `FnMut` closure\n+LL | /                || { //[mir]~ ERROR captured variable cannot escape `FnMut` closure body\n LL | |                    let y = &mut x;\n LL | |                    &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than once at a time\n LL | |                    //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n LL | |                    *y = 1;\n LL | |                    drop(y);\n LL | |                 }\n-   | |_________________^ returning this value requires that `'1` must outlive `'2`\n+   | |_________________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n    |\n-   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n \n error[E0503]: cannot use `f.x` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:53:9"}, {"sha": "5721c52ba217287063d75333f8032ff8ae8567e0", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.mir.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr?ref=e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "patch": "@@ -20,24 +20,22 @@ LL |                    //[mir]~^ ERROR cannot borrow `x` as mutable more than o\n LL |                    *y = 1;\n    |                    ------ first borrow later used here\n \n-error: unsatisfied lifetime constraints\n+error: captured variable cannot escape `FnMut` closure body\n   --> $DIR/borrowck-describe-lvalue.rs:305:16\n    |\n LL |              || {\n-   |              --\n-   |              ||\n-   |              |return type of closure is [closure@$DIR/borrowck-describe-lvalue.rs:305:16: 311:18 x:&'2 mut i32]\n-   |              lifetime `'1` represents this closure's body\n-LL | /                || { //[mir]~ ERROR unsatisfied lifetime constraints\n+   |               - inferred to be a `FnMut` closure\n+LL | /                || { //[mir]~ ERROR captured variable cannot escape `FnMut` closure body\n LL | |                    let y = &mut x;\n LL | |                    &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than once at a time\n LL | |                    //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n LL | |                    *y = 1;\n LL | |                    drop(y);\n LL | |                 }\n-   | |_________________^ returning this value requires that `'1` must outlive `'2`\n+   | |_________________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n    |\n-   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n \n error[E0503]: cannot use `f.x` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:53:9"}, {"sha": "649de888ab0a249aa9b073076a105594eeed7b36", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "patch": "@@ -302,7 +302,7 @@ fn main() {\n         // FIXME(#49824) -- the free region error below should probably not be there\n         let mut x = 0;\n            || {\n-               || { //[mir]~ ERROR unsatisfied lifetime constraints\n+               || { //[mir]~ ERROR captured variable cannot escape `FnMut` closure body\n                    let y = &mut x;\n                    &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than once at a time\n                    //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time"}, {"sha": "1aeb1a89ead94f3789bf472efd709b136d98bc3f", "filename": "src/test/ui/issues/issue-40510-1.nll.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr?ref=e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "patch": "@@ -1,15 +1,13 @@\n-error: unsatisfied lifetime constraints\n+error: captured variable cannot escape `FnMut` closure body\n   --> $DIR/issue-40510-1.rs:18:9\n    |\n LL |     || {\n-   |     --\n-   |     ||\n-   |     |return type of closure is &'2 mut std::boxed::Box<()>\n-   |     lifetime `'1` represents this closure's body\n+   |      - inferred to be a `FnMut` closure\n LL |         &mut x\n-   |         ^^^^^^ returning this value requires that `'1` must outlive `'2`\n+   |         ^^^^^^ returns a reference to a captured variable which escapes the closure body\n    |\n-   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n \n error: aborting due to previous error\n "}, {"sha": "c334e592fbc2bb0be5c0fb5ea0d77f364bbf1128", "filename": "src/test/ui/issues/issue-40510-3.nll.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr?ref=e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "patch": "@@ -1,17 +1,15 @@\n-error: unsatisfied lifetime constraints\n+error: captured variable cannot escape `FnMut` closure body\n   --> $DIR/issue-40510-3.rs:18:9\n    |\n LL |       || {\n-   |       --\n-   |       ||\n-   |       |return type of closure is [closure@$DIR/issue-40510-3.rs:18:9: 20:10 x:&'2 mut std::vec::Vec<()>]\n-   |       lifetime `'1` represents this closure's body\n+   |        - inferred to be a `FnMut` closure\n LL | /         || {\n LL | |             x.push(())\n LL | |         }\n-   | |_________^ returning this value requires that `'1` must outlive `'2`\n+   | |_________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n    |\n-   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n \n error: aborting due to previous error\n "}, {"sha": "2e0463fdd1d860b7e2cf72952e6a681a4c43d357", "filename": "src/test/ui/issues/issue-49824.nll.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr?ref=e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "patch": "@@ -1,17 +1,15 @@\n-error: unsatisfied lifetime constraints\n+error: captured variable cannot escape `FnMut` closure body\n   --> $DIR/issue-49824.rs:22:9\n    |\n LL |       || {\n-   |       --\n-   |       ||\n-   |       |return type of closure is [closure@$DIR/issue-49824.rs:22:9: 24:10 x:&'2 mut i32]\n-   |       lifetime `'1` represents this closure's body\n+   |        - inferred to be a `FnMut` closure\n LL | /         || {\n LL | |             let _y = &mut x;\n LL | |         }\n-   | |_________^ returning this value requires that `'1` must outlive `'2`\n+   | |_________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n    |\n-   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n \n error: aborting due to previous error\n "}, {"sha": "2b6e67be6d98d57409eb3931688cfa2bf41e0d7a", "filename": "src/test/ui/nll/issue-53040.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fnll%2Fissue-53040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fnll%2Fissue-53040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53040.rs?ref=e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+fn main() {\n+    let mut v: Vec<()> = Vec::new();\n+    || &mut v;\n+}"}, {"sha": "fac9969f1934a3684143126f82134fefcf3b6d9a", "filename": "src/test/ui/nll/issue-53040.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fnll%2Fissue-53040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fnll%2Fissue-53040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53040.stderr?ref=e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "patch": "@@ -0,0 +1,13 @@\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-53040.rs:15:8\n+   |\n+LL |     || &mut v;\n+   |      - ^^^^^^ returns a reference to a captured variable which escapes the closure body\n+   |      |\n+   |      inferred to be a `FnMut` closure\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+\n+error: aborting due to previous error\n+"}, {"sha": "300a563982253df694561b4d814cb2078446799b", "filename": "src/test/ui/regions/regions-return-ref-to-upvar-issue-17403.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1041c6cd1a027ab3ada3e8538620d2e1d7067fe/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.nll.stderr?ref=e1041c6cd1a027ab3ada3e8538620d2e1d7067fe", "patch": "@@ -1,13 +1,13 @@\n-error: unsatisfied lifetime constraints\n+error: captured variable cannot escape `FnMut` closure body\n   --> $DIR/regions-return-ref-to-upvar-issue-17403.rs:17:24\n    |\n LL |         let mut f = || &mut x; //~ ERROR cannot infer\n-   |                     -- ^^^^^^ returning this value requires that `'1` must outlive `'2`\n-   |                     ||\n-   |                     |return type of closure is &'2 mut i32\n-   |                     lifetime `'1` represents this closure's body\n+   |                      - ^^^^^^ returns a reference to a captured variable which escapes the closure body\n+   |                      |\n+   |                      inferred to be a `FnMut` closure\n    |\n-   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n \n error: aborting due to previous error\n "}]}