{"sha": "f4fb975e4eeb88f5b92b75a5df1e4e6c19856b42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZmI5NzVlNGVlYjg4ZjViOTJiNzVhNWRmMWU0ZTZjMTk4NTZiNDI=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-06-28T00:21:41Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-06T01:09:31Z"}, "message": "Store some span information for stride mismatches errors in MBE TT macros.", "tree": {"sha": "6b7f85d3d9005ac03ad48e25ae291d9258366cea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b7f85d3d9005ac03ad48e25ae291d9258366cea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4fb975e4eeb88f5b92b75a5df1e4e6c19856b42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4fb975e4eeb88f5b92b75a5df1e4e6c19856b42", "html_url": "https://github.com/rust-lang/rust/commit/f4fb975e4eeb88f5b92b75a5df1e4e6c19856b42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4fb975e4eeb88f5b92b75a5df1e4e6c19856b42/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "534270551ea80561dad0b882eb94c354996f3f05", "url": "https://api.github.com/repos/rust-lang/rust/commits/534270551ea80561dad0b882eb94c354996f3f05", "html_url": "https://github.com/rust-lang/rust/commit/534270551ea80561dad0b882eb94c354996f3f05"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "7477969c1e64210e0afbc6f287bb96b867bee8eb", "filename": "src/libsyntax/ext/tt/earley_parser.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f4fb975e4eeb88f5b92b75a5df1e4e6c19856b42/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4fb975e4eeb88f5b92b75a5df1e4e6c19856b42/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs?ref=f4fb975e4eeb88f5b92b75a5df1e4e6c19856b42", "patch": "@@ -9,6 +9,7 @@ import parse::common::*; //resolve bug?\n import parse::parse_sess;\n import dvec::{dvec, extensions};\n import ast::{matcher, mtc_tok, mtc_rep, mtc_bb, ident};\n+import ast_util::mk_sp;\n import std::map::{hashmap, box_str_hash};\n \n /* This is an Earley-like parser, without support for nonterminals.  This\n@@ -39,7 +40,8 @@ type matcher_pos = ~{\n     sep: option<token>,\n     mut idx: uint,\n     mut up: matcher_pos_up, // mutable for swapping only\n-    matches: ~[dvec<@arb_depth>]\n+    matches: ~[dvec<@arb_depth>],\n+    sp_lo: uint,\n };\n \n fn copy_up(&& mpu: matcher_pos_up) -> matcher_pos {\n@@ -58,13 +60,15 @@ fn count_names(ms: &[matcher]) -> uint {\n         }})\n }\n \n-fn new_matcher_pos(ms: ~[matcher], sep: option<token>) -> matcher_pos {\n+fn new_matcher_pos(ms: ~[matcher], sep: option<token>, lo: uint)\n+    -> matcher_pos {\n     ~{elts: ms, sep: sep, mut idx: 0u, mut up: matcher_pos_up(none),\n-      matches: copy vec::from_fn(count_names(ms), |_i| dvec::dvec()) }\n+      matches: copy vec::from_fn(count_names(ms), |_i| dvec::dvec()),\n+      sp_lo: lo}\n }\n \n /* logically, an arb_depth should contain only one kind of nonterminal */\n-enum arb_depth { leaf(whole_nt), seq(~[@arb_depth]) }\n+enum arb_depth { leaf(whole_nt), seq(~[@arb_depth], codemap::span) }\n \n type earley_item = matcher_pos;\n \n@@ -88,21 +92,21 @@ fn nameize(&&p_s: parse_sess, ms: ~[matcher], &&res: ~[@arb_depth])\n         }\n     }\n     let ret_val = box_str_hash::<@arb_depth>();\n-    for ms.each() |m| { n_rec(p_s, m, res, ret_val) };\n+    for ms.each() |m| { n_rec(p_s, m, res, ret_val) }\n     ret ret_val;\n }\n \n fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n     -> hashmap<ident,@arb_depth> {\n     let mut cur_eis = ~[];\n-    vec::push(cur_eis, new_matcher_pos(ms, none));\n+    vec::push(cur_eis, new_matcher_pos(ms, none, rdr.peek().sp.lo));\n \n     loop {\n         let mut bb_eis = ~[]; // black-box parsed by parser.rs\n         let mut next_eis = ~[]; // or proceed normally\n         let mut eof_eis = ~[];\n \n-        let {tok: tok, sp: _} = rdr.peek();\n+        let {tok: tok, sp: sp} = rdr.peek();\n \n         /* we append new items to this while we go */\n         while cur_eis.len() > 0u { /* for each Earley Item */\n@@ -133,7 +137,8 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n                         // doing a lot of array work that will get thrown away\n                         // most of the time.\n                         for ei.matches.eachi() |idx, elt| {\n-                            new_pos.matches[idx].push(@seq(elt.get()));\n+                            new_pos.matches[idx]\n+                                .push(@seq(elt.get(), mk_sp(ei.sp_lo,sp.hi)));\n                         }\n \n                         new_pos.idx += 1u;\n@@ -176,7 +181,7 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n                     vec::push(cur_eis, ~{\n                         elts: matchers, sep: sep, mut idx: 0u,\n                         mut up: matcher_pos_up(some(ei_t)),\n-                        matches: matches\n+                        matches: matches, sp_lo: sp.lo\n                     });\n                   }\n                   mtc_bb(_,_,_) { vec::push(bb_eis, ei) }"}]}