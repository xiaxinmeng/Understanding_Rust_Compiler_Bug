{"sha": "d3cb032f7e81359da943890629e605f6cf294bd3", "node_id": "C_kwDOAAsO6NoAKGQzY2IwMzJmN2U4MTM1OWRhOTQzODkwNjI5ZTYwNWY2Y2YyOTRiZDM", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-12-10T16:05:33Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-12-10T16:05:33Z"}, "message": "Make assoc_resolutions always have a Substitution", "tree": {"sha": "21eb7923d9cb7b72f67342c6f6ddcef145b9d7a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21eb7923d9cb7b72f67342c6f6ddcef145b9d7a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3cb032f7e81359da943890629e605f6cf294bd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3cb032f7e81359da943890629e605f6cf294bd3", "html_url": "https://github.com/rust-lang/rust/commit/d3cb032f7e81359da943890629e605f6cf294bd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3cb032f7e81359da943890629e605f6cf294bd3/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3ea20a14249fe3019d4e3f1063d596e036cd3b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3ea20a14249fe3019d4e3f1063d596e036cd3b7", "html_url": "https://github.com/rust-lang/rust/commit/a3ea20a14249fe3019d4e3f1063d596e036cd3b7"}], "stats": {"total": 42, "additions": 16, "deletions": 26}, "files": [{"sha": "340968525701aae7d738543858f32606b1c5275c", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3cb032f7e81359da943890629e605f6cf294bd3/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cb032f7e81359da943890629e605f6cf294bd3/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=d3cb032f7e81359da943890629e605f6cf294bd3", "patch": "@@ -356,11 +356,12 @@ pub fn eval_const(\n                         hir_def::AssocItemId::FunctionId(_) => {\n                             Err(ConstEvalError::NotSupported(\"assoc function\"))\n                         }\n+                        // FIXME use actual impl for trait assoc const\n                         hir_def::AssocItemId::ConstId(c) => ctx.db.const_eval(c),\n                         hir_def::AssocItemId::TypeAliasId(_) => {\n                             Err(ConstEvalError::NotSupported(\"assoc type alias\"))\n                         }\n-                    }\n+                    };\n                 }\n             };\n             match pr {"}, {"sha": "a42f8a0ac028f6cdf1a4a70ec130485dfbf6bd6d", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d3cb032f7e81359da943890629e605f6cf294bd3/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cb032f7e81359da943890629e605f6cf294bd3/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=d3cb032f7e81359da943890629e605f6cf294bd3", "patch": "@@ -349,7 +349,7 @@ pub struct InferenceResult {\n     /// For each struct literal or pattern, records the variant it resolves to.\n     variant_resolutions: FxHashMap<ExprOrPatId, VariantId>,\n     /// For each associated item record what it resolves to\n-    assoc_resolutions: FxHashMap<ExprOrPatId, (AssocItemId, Option<Substitution>)>,\n+    assoc_resolutions: FxHashMap<ExprOrPatId, (AssocItemId, Substitution)>,\n     pub diagnostics: Vec<InferenceDiagnostic>,\n     pub type_of_expr: ArenaMap<ExprId, Ty>,\n     /// For each pattern record the type it resolves to.\n@@ -379,16 +379,10 @@ impl InferenceResult {\n     pub fn variant_resolution_for_pat(&self, id: PatId) -> Option<VariantId> {\n         self.variant_resolutions.get(&id.into()).copied()\n     }\n-    pub fn assoc_resolutions_for_expr(\n-        &self,\n-        id: ExprId,\n-    ) -> Option<(AssocItemId, Option<Substitution>)> {\n+    pub fn assoc_resolutions_for_expr(&self, id: ExprId) -> Option<(AssocItemId, Substitution)> {\n         self.assoc_resolutions.get(&id.into()).cloned()\n     }\n-    pub fn assoc_resolutions_for_pat(\n-        &self,\n-        id: PatId,\n-    ) -> Option<(AssocItemId, Option<Substitution>)> {\n+    pub fn assoc_resolutions_for_pat(&self, id: PatId) -> Option<(AssocItemId, Substitution)> {\n         self.assoc_resolutions.get(&id.into()).cloned()\n     }\n     pub fn type_mismatch_for_expr(&self, expr: ExprId) -> Option<&TypeMismatch> {\n@@ -653,12 +647,7 @@ impl<'a> InferenceContext<'a> {\n         self.result.variant_resolutions.insert(id, variant);\n     }\n \n-    fn write_assoc_resolution(\n-        &mut self,\n-        id: ExprOrPatId,\n-        item: AssocItemId,\n-        subs: Option<Substitution>,\n-    ) {\n+    fn write_assoc_resolution(&mut self, id: ExprOrPatId, item: AssocItemId, subs: Substitution) {\n         self.result.assoc_resolutions.insert(id, (item, subs));\n     }\n "}, {"sha": "6cad84eb4f27e3a5487c487100b0916df6d2cb6c", "filename": "crates/hir-ty/src/infer/path.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3cb032f7e81359da943890629e605f6cf294bd3/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cb032f7e81359da943890629e605f6cf294bd3/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpath.rs?ref=d3cb032f7e81359da943890629e605f6cf294bd3", "patch": "@@ -7,6 +7,7 @@ use hir_def::{\n     AdtId, AssocItemId, EnumVariantId, ItemContainerId, Lookup,\n };\n use hir_expand::name::Name;\n+use stdx::never;\n \n use crate::{\n     builder::ParamKind,\n@@ -212,7 +213,7 @@ impl<'a> InferenceContext<'a> {\n             AssocItemId::TypeAliasId(_) => unreachable!(),\n         };\n \n-        self.write_assoc_resolution(id, item, Some(trait_ref.substitution.clone()));\n+        self.write_assoc_resolution(id, item, trait_ref.substitution.clone());\n         Some((def, Some(trait_ref.substitution)))\n     }\n \n@@ -259,7 +260,7 @@ impl<'a> InferenceContext<'a> {\n                         let impl_self_ty =\n                             self.db.impl_self_ty(impl_id).substitute(Interner, &impl_substs);\n                         self.unify(&impl_self_ty, &ty);\n-                        Some(impl_substs)\n+                        impl_substs\n                     }\n                     ItemContainerId::TraitId(trait_) => {\n                         // we're picking this method\n@@ -268,13 +269,16 @@ impl<'a> InferenceContext<'a> {\n                             .fill_with_inference_vars(&mut self.table)\n                             .build();\n                         self.push_obligation(trait_ref.clone().cast(Interner));\n-                        Some(trait_ref.substitution)\n+                        trait_ref.substitution\n+                    }\n+                    ItemContainerId::ModuleId(_) | ItemContainerId::ExternBlockId(_) => {\n+                        never!(\"assoc item contained in module/extern block\");\n+                        return None;\n                     }\n-                    ItemContainerId::ModuleId(_) | ItemContainerId::ExternBlockId(_) => None,\n                 };\n \n                 self.write_assoc_resolution(id, item, substs.clone());\n-                Some((def, substs))\n+                Some((def, Some(substs)))\n             },\n         )\n     }"}, {"sha": "5e444db4a14b4d3acc8920d871ab78a1bfd598e0", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3cb032f7e81359da943890629e605f6cf294bd3/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cb032f7e81359da943890629e605f6cf294bd3/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=d3cb032f7e81359da943890629e605f6cf294bd3", "patch": "@@ -502,11 +502,7 @@ impl SourceAnalyzer {\n                             }\n                         }\n                         AssocItemId::ConstId(const_id) => {\n-                            if let Some(subs) = subs {\n-                                self.resolve_impl_const_or_trait_def(db, const_id, subs).into()\n-                            } else {\n-                                assoc\n-                            }\n+                            self.resolve_impl_const_or_trait_def(db, const_id, subs).into()\n                         }\n                         _ => assoc,\n                     };"}]}