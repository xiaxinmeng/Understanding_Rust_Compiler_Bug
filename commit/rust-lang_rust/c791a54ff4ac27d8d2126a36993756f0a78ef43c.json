{"sha": "c791a54ff4ac27d8d2126a36993756f0a78ef43c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3OTFhNTRmZjRhYzI3ZDhkMjEyNmEzNjk5Mzc1NmYwYTc4ZWY0M2M=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-06-07T03:15:59Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-06-07T03:21:52Z"}, "message": "repair break_label format", "tree": {"sha": "0437b8f2713899ecc185499e04d3e49257eded02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0437b8f2713899ecc185499e04d3e49257eded02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c791a54ff4ac27d8d2126a36993756f0a78ef43c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c791a54ff4ac27d8d2126a36993756f0a78ef43c", "html_url": "https://github.com/rust-lang/rust/commit/c791a54ff4ac27d8d2126a36993756f0a78ef43c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c791a54ff4ac27d8d2126a36993756f0a78ef43c/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cd76a3de59077e9d565135e94dace6c5e38da56", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cd76a3de59077e9d565135e94dace6c5e38da56", "html_url": "https://github.com/rust-lang/rust/commit/5cd76a3de59077e9d565135e94dace6c5e38da56"}], "stats": {"total": 48, "additions": 30, "deletions": 18}, "files": [{"sha": "3d0a52de0dcac5f53cfbc0d78484d8ef6913e0d6", "filename": "src/closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c791a54ff4ac27d8d2126a36993756f0a78ef43c/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c791a54ff4ac27d8d2126a36993756f0a78ef43c/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=c791a54ff4ac27d8d2126a36993756f0a78ef43c", "patch": "@@ -140,7 +140,7 @@ fn rewrite_closure_with_block(\n         span: body.span,\n         recovered: false,\n     };\n-    let block = ::expr::rewrite_block_with_visitor(context, \"\", &block, None, shape, false)?;\n+    let block = ::expr::rewrite_block_with_visitor(context, \"\", &block, None, None, shape, false)?;\n     Some(format!(\"{} {}\", prefix, block))\n }\n "}, {"sha": "112383e7e4c20ee93c1d6188e689238bc1bb70a3", "filename": "src/expr.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c791a54ff4ac27d8d2126a36993756f0a78ef43c/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c791a54ff4ac27d8d2126a36993756f0a78ef43c/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=c791a54ff4ac27d8d2126a36993756f0a78ef43c", "patch": "@@ -124,7 +124,7 @@ pub fn format_expr(\n                     if is_unsafe_block(block) {\n                         rewrite_block(block, Some(&expr.attrs), opt_label, context, shape)\n                     } else if let rw @ Some(_) =\n-                        rewrite_empty_block(context, block, Some(&expr.attrs), \"\", shape)\n+                        rewrite_empty_block(context, block, Some(&expr.attrs), opt_label, \"\", shape)\n                     {\n                         // Rewrite block without trying to put it in a single line.\n                         rw\n@@ -136,6 +136,7 @@ pub fn format_expr(\n                             &prefix,\n                             block,\n                             Some(&expr.attrs),\n+                            opt_label,\n                             shape,\n                             true,\n                         )\n@@ -316,9 +317,14 @@ pub fn format_expr(\n         // satisfy our width restrictions.\n         ast::ExprKind::InlineAsm(..) => Some(context.snippet(expr.span).to_owned()),\n         ast::ExprKind::Catch(ref block) => {\n-            if let rw @ Some(_) =\n-                rewrite_single_line_block(context, \"do catch \", block, Some(&expr.attrs), shape)\n-            {\n+            if let rw @ Some(_) = rewrite_single_line_block(\n+                context,\n+                \"do catch \",\n+                block,\n+                Some(&expr.attrs),\n+                None,\n+                shape,\n+            ) {\n                 rw\n             } else {\n                 // 9 = `do catch `\n@@ -543,16 +549,18 @@ fn rewrite_empty_block(\n     context: &RewriteContext,\n     block: &ast::Block,\n     attrs: Option<&[ast::Attribute]>,\n+    label: Option<ast::Label>,\n     prefix: &str,\n     shape: Shape,\n ) -> Option<String> {\n+    let label_str = rewrite_label(label);\n     if attrs.map_or(false, |a| !inner_attributes(a).is_empty()) {\n         return None;\n     }\n \n     if block.stmts.is_empty() && !block_contains_comment(block, context.codemap) && shape.width >= 2\n     {\n-        return Some(format!(\"{}{{}}\", prefix));\n+        return Some(format!(\"{}{}{{}}\", prefix, label_str));\n     }\n \n     // If a block contains only a single-line comment, then leave it on one line.\n@@ -565,7 +573,7 @@ fn rewrite_empty_block(\n             && !comment_str.starts_with(\"//\")\n             && comment_str.len() + 4 <= shape.width\n         {\n-            return Some(format!(\"{}{{ {} }}\", prefix, comment_str));\n+            return Some(format!(\"{}{}{{ {} }}\", prefix, label_str, comment_str));\n         }\n     }\n \n@@ -605,12 +613,14 @@ fn rewrite_single_line_block(\n     prefix: &str,\n     block: &ast::Block,\n     attrs: Option<&[ast::Attribute]>,\n+    label: Option<ast::Label>,\n     shape: Shape,\n ) -> Option<String> {\n     if is_simple_block(block, attrs, context.codemap) {\n         let expr_shape = shape.offset_left(last_line_width(prefix))?;\n         let expr_str = block.stmts[0].rewrite(context, expr_shape)?;\n-        let result = format!(\"{}{{ {} }}\", prefix, expr_str);\n+        let label_str = rewrite_label(label);\n+        let result = format!(\"{}{}{{ {} }}\", prefix, label_str, expr_str);\n         if result.len() <= shape.width && !result.contains('\\n') {\n             return Some(result);\n         }\n@@ -623,10 +633,11 @@ pub fn rewrite_block_with_visitor(\n     prefix: &str,\n     block: &ast::Block,\n     attrs: Option<&[ast::Attribute]>,\n+    label: Option<ast::Label>,\n     shape: Shape,\n     has_braces: bool,\n ) -> Option<String> {\n-    if let rw @ Some(_) = rewrite_empty_block(context, block, attrs, prefix, shape) {\n+    if let rw @ Some(_) = rewrite_empty_block(context, block, attrs, label, prefix, shape) {\n         return rw;\n     }\n \n@@ -643,8 +654,9 @@ pub fn rewrite_block_with_visitor(\n     }\n \n     let inner_attrs = attrs.map(inner_attributes);\n+    let label_str = rewrite_label(label);\n     visitor.visit_block(block, inner_attrs.as_ref().map(|a| &**a), has_braces);\n-    Some(format!(\"{}{}\", prefix, visitor.buffer))\n+    Some(format!(\"{}{}{}\", prefix, label_str, visitor.buffer))\n }\n \n impl Rewrite for ast::Block {\n@@ -660,20 +672,20 @@ fn rewrite_block(\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n-    let unsafe_string = block_prefix(context, block, shape)?;\n-    let label_string = rewrite_label(label);\n-    let prefix = format!(\"{}{}\", unsafe_string, label_string);\n+    let prefix = block_prefix(context, block, shape)?;\n \n     // shape.width is used only for the single line case: either the empty block `{}`,\n     // or an unsafe expression `unsafe { e }`.\n-    if let rw @ Some(_) = rewrite_empty_block(context, block, attrs, &prefix, shape) {\n+    if let rw @ Some(_) = rewrite_empty_block(context, block, attrs, label, &prefix, shape) {\n         return rw;\n     }\n \n-    let result = rewrite_block_with_visitor(context, &prefix, block, attrs, shape, true);\n+    let result = rewrite_block_with_visitor(context, &prefix, block, attrs, label, shape, true);\n     if let Some(ref result_str) = result {\n         if result_str.lines().count() <= 3 {\n-            if let rw @ Some(_) = rewrite_single_line_block(context, &prefix, block, attrs, shape) {\n+            if let rw @ Some(_) =\n+                rewrite_single_line_block(context, &prefix, block, attrs, label, shape)\n+            {\n                 return rw;\n             }\n         }\n@@ -1125,7 +1137,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n         let block_str = {\n             let old_val = context.is_if_else_block.replace(self.else_block.is_some());\n             let result =\n-                rewrite_block_with_visitor(context, \"\", self.block, None, block_shape, true);\n+                rewrite_block_with_visitor(context, \"\", self.block, None, None, block_shape, true);\n             context.is_if_else_block.replace(old_val);\n             result?\n         };"}, {"sha": "728d78137c99ecba6cd3773883d717879dc8e848", "filename": "tests/target/label_break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c791a54ff4ac27d8d2126a36993756f0a78ef43c/tests%2Ftarget%2Flabel_break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c791a54ff4ac27d8d2126a36993756f0a78ef43c/tests%2Ftarget%2Flabel_break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flabel_break.rs?ref=c791a54ff4ac27d8d2126a36993756f0a78ef43c", "patch": "@@ -1,6 +1,6 @@\n // format with label break value.\n fn main() {\n-    'emty_block: {}\n+    'empty_block: {}\n \n     'block: {\n         do_thing();"}]}