{"sha": "7c967afe02dfa9eca81cd58316941be3c5b7ed91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjOTY3YWZlMDJkZmE5ZWNhODFjZDU4MzE2OTQxYmUzYzViN2VkOTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:12:02Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:12:02Z"}, "message": "rollup merge of #21170: Diggsey/issue-21058\n\nWhile it's unstable and will probably be replaced or \"reformed\" at some point, it's useful in the mean time to be able to introspect the type system when debugging, and not be limited to sized types.\n\nFixes #21058", "tree": {"sha": "77ffdba6340e3d953c36452b0253f77e490fd710", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77ffdba6340e3d953c36452b0253f77e490fd710"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c967afe02dfa9eca81cd58316941be3c5b7ed91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c967afe02dfa9eca81cd58316941be3c5b7ed91", "html_url": "https://github.com/rust-lang/rust/commit/7c967afe02dfa9eca81cd58316941be3c5b7ed91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c967afe02dfa9eca81cd58316941be3c5b7ed91/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "132850c81849937c554d687ec1714e57fad6541b", "url": "https://api.github.com/repos/rust-lang/rust/commits/132850c81849937c554d687ec1714e57fad6541b", "html_url": "https://github.com/rust-lang/rust/commit/132850c81849937c554d687ec1714e57fad6541b"}, {"sha": "81c5fd8e1f542bf680e48d1f11d6d9e9d7001563", "url": "https://api.github.com/repos/rust-lang/rust/commits/81c5fd8e1f542bf680e48d1f11d6d9e9d7001563", "html_url": "https://github.com/rust-lang/rust/commit/81c5fd8e1f542bf680e48d1f11d6d9e9d7001563"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "978e8a19737b4a6164f78aeab68dcf55ae824c45", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c967afe02dfa9eca81cd58316941be3c5b7ed91/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c967afe02dfa9eca81cd58316941be3c5b7ed91/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=7c967afe02dfa9eca81cd58316941be3c5b7ed91", "patch": "@@ -198,6 +198,10 @@ extern \"rust-intrinsic\" {\n     pub fn pref_align_of<T>() -> uint;\n \n     /// Get a static pointer to a type descriptor.\n+    #[cfg(not(stage0))]\n+    pub fn get_tydesc<T: ?Sized>() -> *const TyDesc;\n+\n+    #[cfg(stage0)]\n     pub fn get_tydesc<T>() -> *const TyDesc;\n \n     /// Gets an identifier which is globally unique to the specified type. This"}, {"sha": "d3f3f34b76bbb3e3e079df5de26d51c95bc51e11", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7c967afe02dfa9eca81cd58316941be3c5b7ed91/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c967afe02dfa9eca81cd58316941be3c5b7ed91/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=7c967afe02dfa9eca81cd58316941be3c5b7ed91", "patch": "@@ -346,12 +346,14 @@ fn size_and_align_of_dst<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: Ty<'tcx>, info:\n             let align_ptr = GEPi(bcx, info, &[2u]);\n             (Load(bcx, size_ptr), Load(bcx, align_ptr))\n         }\n-        ty::ty_vec(unit_ty, None) => {\n-            // The info in this case is the length of the vec, so the size is that\n+        ty::ty_vec(_, None) | ty::ty_str => {\n+            let unit_ty = ty::sequence_element_type(bcx.tcx(), t);\n+            // The info in this case is the length of the str, so the size is that\n             // times the unit size.\n             let llunit_ty = sizing_type_of(bcx.ccx(), unit_ty);\n+            let unit_align = llalign_of_min(bcx.ccx(), llunit_ty);\n             let unit_size = llsize_of_alloc(bcx.ccx(), llunit_ty);\n-            (Mul(bcx, info, C_uint(bcx.ccx(), unit_size)), C_uint(bcx.ccx(), 8u))\n+            (Mul(bcx, info, C_uint(bcx.ccx(), unit_size)), C_uint(bcx.ccx(), unit_align))\n         }\n         _ => bcx.sess().bug(&format!(\"Unexpected unsized type, found {}\",\n                                     bcx.ty_to_string(t))[])\n@@ -456,8 +458,11 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, t: Ty<'tcx>)\n                  &[PointerCast(bcx, Load(bcx, lluniquevalue), Type::i8p(bcx.ccx()))],\n                  None);\n             bcx\n-        }\n-        ty::ty_vec(ty, None) => tvec::make_drop_glue_unboxed(bcx, v0, ty, false),\n+        },\n+        ty::ty_vec(_, None) | ty::ty_str => {\n+            let unit_ty = ty::sequence_element_type(bcx.tcx(), t);\n+            tvec::make_drop_glue_unboxed(bcx, v0, unit_ty, false)\n+        },\n         _ => {\n             assert!(type_is_sized(bcx.tcx(), t));\n             if type_needs_drop(bcx.tcx(), t) &&"}, {"sha": "cbce577451faf94834d0cd35cfea55d7ebe40676", "filename": "src/test/run-pass/issue-21058.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7c967afe02dfa9eca81cd58316941be3c5b7ed91/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c967afe02dfa9eca81cd58316941be3c5b7ed91/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21058.rs?ref=7c967afe02dfa9eca81cd58316941be3c5b7ed91", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unstable)]\n+\n+struct NT(str);\n+struct DST { a: u32, b: str }\n+\n+fn main() {\n+    // get_tydesc should support unsized types\n+    assert!(unsafe {(\n+        // Slice\n+        (*std::intrinsics::get_tydesc::<[u8]>()).name,\n+        // str\n+        (*std::intrinsics::get_tydesc::<str>()).name,\n+        // Trait\n+        (*std::intrinsics::get_tydesc::<Copy>()).name,\n+        // Newtype\n+        (*std::intrinsics::get_tydesc::<NT>()).name,\n+        // DST\n+        (*std::intrinsics::get_tydesc::<DST>()).name\n+    )} == (\"[u8]\", \"str\", \"core::marker::Copy + 'static\", \"NT\", \"DST\"));\n+}"}]}