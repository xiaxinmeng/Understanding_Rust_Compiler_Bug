{"sha": "e0486769b33f88c545aa702f40b19cb11549b39e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNDg2NzY5YjMzZjg4YzU0NWFhNzAyZjQwYjE5Y2IxMTU0OWIzOWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-02T09:10:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-02T09:10:37Z"}, "message": "Merge pull request #423 from RalfJung/memchr\n\nmem(r)chr is working in miri now", "tree": {"sha": "d5c8698776471e99cc3ce22ddcfa76165b7aee24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5c8698776471e99cc3ce22ddcfa76165b7aee24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0486769b33f88c545aa702f40b19cb11549b39e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYsqNCRBK7hj4Ov3rIwAAdHIIAEccBe+S2WIUQjgZHgyU58Tp\nBLOgnVPHxTwnjwkH81OytsQfQs/y+LhBpYmJnMYohEbQc9vbE9I5p1TFwFnK3N5G\nZMKlUoOV5jvScderS1XAZbVB4QJlFg+KWUyJBAgjjYX097MIWlrDvdQ9b9RiJLbv\nXei21jHcwWMWh5FNrLC7ONrhSVjJOH1V6V+IqrK7LOViRpbp6tDQrzuINogCCh4b\ncN79FGIILCFIXZ3GcqUXCfdj6w/Dhiktf58IyyVUHljUxHszJnFUPjSSwiW4uAIA\nOX+WEVwwAM/qQGZeQeOG618sj5/YX/F+GPQkNo4k+FsvTNY3iI7awxLYQMsRASc=\n=Ot4u\n-----END PGP SIGNATURE-----\n", "payload": "tree d5c8698776471e99cc3ce22ddcfa76165b7aee24\nparent e0526863ed6f5b7e4c63e032a37dfc17f8c6ca26\nparent d844792d761b920fb05aedb6d84e071afe805545\nauthor Ralf Jung <post@ralfj.de> 1533201037 +0200\ncommitter GitHub <noreply@github.com> 1533201037 +0200\n\nMerge pull request #423 from RalfJung/memchr\n\nmem(r)chr is working in miri now"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0486769b33f88c545aa702f40b19cb11549b39e", "html_url": "https://github.com/rust-lang/rust/commit/e0486769b33f88c545aa702f40b19cb11549b39e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0486769b33f88c545aa702f40b19cb11549b39e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0526863ed6f5b7e4c63e032a37dfc17f8c6ca26", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0526863ed6f5b7e4c63e032a37dfc17f8c6ca26", "html_url": "https://github.com/rust-lang/rust/commit/e0526863ed6f5b7e4c63e032a37dfc17f8c6ca26"}, {"sha": "d844792d761b920fb05aedb6d84e071afe805545", "url": "https://api.github.com/repos/rust-lang/rust/commits/d844792d761b920fb05aedb6d84e071afe805545", "html_url": "https://github.com/rust-lang/rust/commit/d844792d761b920fb05aedb6d84e071afe805545"}], "stats": {"total": 93, "additions": 92, "deletions": 1}, "files": [{"sha": "4e1501dd57f27da2fd41c4e7819b2df1401352c2", "filename": "cargo-miri-test/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0486769b33f88c545aa702f40b19cb11549b39e/cargo-miri-test%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0486769b33f88c545aa702f40b19cb11549b39e/cargo-miri-test%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri-test%2Fsrc%2Fmain.rs?ref=e0486769b33f88c545aa702f40b19cb11549b39e", "patch": "@@ -6,6 +6,6 @@ fn main() {\n     let buf = &[1,2,3,4];\n     let n = <BigEndian as ByteOrder>::read_u32(buf);\n     assert_eq!(n, 0x01020304);\n-    //println!(\"{:#x}\", n); FIXME enable once memrchr works in miri\n+    println!(\"{:#010x}\", n);\n     eprintln!(\"standard error\");\n }"}, {"sha": "6710f307cb26daf260543237456b7d44fa2998ab", "filename": "cargo-miri-test/stdout.ref", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0486769b33f88c545aa702f40b19cb11549b39e/cargo-miri-test%2Fstdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/e0486769b33f88c545aa702f40b19cb11549b39e/cargo-miri-test%2Fstdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri-test%2Fstdout.ref?ref=e0486769b33f88c545aa702f40b19cb11549b39e", "patch": "@@ -0,0 +1 @@\n+0x01020304"}, {"sha": "36eb85dcf7e8d68fe08f544390a6ac222add2c58", "filename": "tests/run-pass-fullmir/memchr.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/e0486769b33f88c545aa702f40b19cb11549b39e/tests%2Frun-pass-fullmir%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0486769b33f88c545aa702f40b19cb11549b39e/tests%2Frun-pass-fullmir%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fmemchr.rs?ref=e0486769b33f88c545aa702f40b19cb11549b39e", "patch": "@@ -0,0 +1,90 @@\n+#![feature(slice_internals)]\n+\n+extern crate core;\n+use core::slice::memchr::{memchr, memrchr};\n+\n+// test fallback implementations on all platforms\n+fn matches_one() {\n+    assert_eq!(Some(0), memchr(b'a', b\"a\"));\n+}\n+\n+fn matches_begin() {\n+    assert_eq!(Some(0), memchr(b'a', b\"aaaa\"));\n+}\n+\n+fn matches_end() {\n+    assert_eq!(Some(4), memchr(b'z', b\"aaaaz\"));\n+}\n+\n+fn matches_nul() {\n+    assert_eq!(Some(4), memchr(b'\\x00', b\"aaaa\\x00\"));\n+}\n+\n+fn matches_past_nul() {\n+    assert_eq!(Some(5), memchr(b'z', b\"aaaa\\x00z\"));\n+}\n+\n+fn no_match_empty() {\n+    assert_eq!(None, memchr(b'a', b\"\"));\n+}\n+\n+fn no_match() {\n+    assert_eq!(None, memchr(b'a', b\"xyz\"));\n+}\n+\n+fn matches_one_reversed() {\n+    assert_eq!(Some(0), memrchr(b'a', b\"a\"));\n+}\n+\n+fn matches_begin_reversed() {\n+    assert_eq!(Some(3), memrchr(b'a', b\"aaaa\"));\n+}\n+\n+fn matches_end_reversed() {\n+    assert_eq!(Some(0), memrchr(b'z', b\"zaaaa\"));\n+}\n+\n+fn matches_nul_reversed() {\n+    assert_eq!(Some(4), memrchr(b'\\x00', b\"aaaa\\x00\"));\n+}\n+\n+fn matches_past_nul_reversed() {\n+    assert_eq!(Some(0), memrchr(b'z', b\"z\\x00aaaa\"));\n+}\n+\n+fn no_match_empty_reversed() {\n+    assert_eq!(None, memrchr(b'a', b\"\"));\n+}\n+\n+fn no_match_reversed() {\n+    assert_eq!(None, memrchr(b'a', b\"xyz\"));\n+}\n+\n+fn each_alignment_reversed() {\n+    let mut data = [1u8; 64];\n+    let needle = 2;\n+    let pos = 40;\n+    data[pos] = needle;\n+    for start in 0..16 {\n+        assert_eq!(Some(pos - start), memrchr(needle, &data[start..]));\n+    }\n+}\n+\n+fn main() {\n+    matches_one();\n+    matches_begin();\n+    matches_end();\n+    matches_nul();\n+    matches_past_nul();\n+    no_match_empty();\n+    no_match();\n+\n+    matches_one_reversed();\n+    matches_begin_reversed();\n+    matches_end_reversed();\n+    matches_nul_reversed();\n+    matches_past_nul_reversed();\n+    no_match_empty_reversed();\n+    no_match_reversed();\n+    each_alignment_reversed();\n+}"}]}