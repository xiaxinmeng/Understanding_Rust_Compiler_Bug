{"sha": "caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZWE0MmY2YzhiYThmNWNjNWVkMDQ1NTdlYzVkMDcyYjEwN2U3YjQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-27T03:52:11Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-28T23:32:56Z"}, "message": "Introduce and use `SyntaxContext::outer_expn_info()`.\n\nIt reduces two `hygiene_data` accesses to one on some hot paths.", "tree": {"sha": "9ddcc6be16ffaabb4d5dfbd86340c043c2e08f3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ddcc6be16ffaabb4d5dfbd86340c043c2e08f3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "html_url": "https://github.com/rust-lang/rust/commit/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "828f6fdbe57a7b0e6b7bf7194ee9a2079b2779cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/828f6fdbe57a7b0e6b7bf7194ee9a2079b2779cd", "html_url": "https://github.com/rust-lang/rust/commit/828f6fdbe57a7b0e6b7bf7194ee9a2079b2779cd"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "86dae579ca753d859b3dc04a320a503b53f9e2c5", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyTyKind {\n                             .help(\"try using `Ty` instead\")\n                             .emit();\n                         } else {\n-                            if ty.span.ctxt().outer().expn_info().is_some() {\n+                            if ty.span.ctxt().outer_expn_info().is_some() {\n                                 return;\n                             }\n                             if let Some(t) = is_ty_or_ty_ctxt(cx, ty) {"}, {"sha": "f4eff6121c043b0550b3500c02761ddefbf333f7", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "patch": "@@ -880,7 +880,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n /// This is used to test whether a lint should not even begin to figure out whether it should\n /// be reported on the current node.\n pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n-    let info = match span.ctxt().outer().expn_info() {\n+    let info = match span.ctxt().outer_expn_info() {\n         Some(info) => info,\n         // no ExpnInfo means this span doesn't come from a macro\n         None => return false,\n@@ -908,7 +908,7 @@ pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n \n /// Returns whether `span` originates in a derive macro's expansion\n pub fn in_derive_expansion(span: Span) -> bool {\n-    let info = match span.ctxt().outer().expn_info() {\n+    let info = match span.ctxt().outer_expn_info() {\n         Some(info) => info,\n         // no ExpnInfo means this span doesn't come from a macro\n         None => return false,"}, {"sha": "55b5cba2b02c17689a927f17fa88a265d97d0e6c", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "patch": "@@ -65,7 +65,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 format: ExpnFormat::CompilerDesugaring(_),\n                 def_site: Some(def_span),\n                 ..\n-            }) = span.ctxt().outer().expn_info() {\n+            }) = span.ctxt().outer_expn_info() {\n                 span = def_span;\n             }\n "}, {"sha": "8f4f0b5b23fd99c7052881d9087176c17ed17d8b", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             // at the level above that.\n             let mut span = source_info.span;\n             while span.ctxt() != NO_EXPANSION && span.ctxt() != self.mir.span.ctxt() {\n-                if let Some(info) = span.ctxt().outer().expn_info() {\n+                if let Some(info) = span.ctxt().outer_expn_info() {\n                     span = info.call_site;\n                 } else {\n                     break;"}, {"sha": "44b727c6925d94c544e6f53133e22b7d5e6f91c5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "patch": "@@ -158,7 +158,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n                 if fieldpat.node.is_shorthand {\n                     continue;\n                 }\n-                if fieldpat.span.ctxt().outer().expn_info().is_some() {\n+                if fieldpat.span.ctxt().outer_expn_info().is_some() {\n                     // Don't lint if this is a macro expansion: macro authors\n                     // shouldn't have to worry about this kind of style issue\n                     // (Issue #49588)\n@@ -1003,7 +1003,7 @@ impl UnreachablePub {\n         let mut applicability = Applicability::MachineApplicable;\n         match vis.node {\n             hir::VisibilityKind::Public if !cx.access_levels.is_reachable(id) => {\n-                if span.ctxt().outer().expn_info().is_some() {\n+                if span.ctxt().outer_expn_info().is_some() {\n                     applicability = Applicability::MaybeIncorrect;\n                 }\n                 let def_span = cx.tcx.sess.source_map().def_span(span);"}, {"sha": "036820c6d7fa1386d30ba69fb1720990fec71eef", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "patch": "@@ -391,9 +391,8 @@ impl EarlyLintPass for UnusedParens {\n                 // trigger in situations that macro authors shouldn't have to care about, e.g.,\n                 // when a parenthesized token tree matched in one macro expansion is matched as\n                 // an expression in another and used as a fn/method argument (Issue #47775)\n-                if e.span.ctxt().outer().expn_info()\n-                    .map_or(false, |info| info.call_site.ctxt().outer()\n-                            .expn_info().is_some()) {\n+                if e.span.ctxt().outer_expn_info()\n+                    .map_or(false, |info| info.call_site.ctxt().outer_expn_info().is_some()) {\n                         return;\n                 }\n                 let msg = format!(\"{} argument\", call_kind);"}, {"sha": "9fe201b8c5e1cf9f899f2aa47184cfb0038f6556", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "patch": "@@ -762,7 +762,7 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n                 ItemKind::Use(..) => {\n                     // don't suggest placing a use before the prelude\n                     // import or other generated ones\n-                    if item.span.ctxt().outer().expn_info().is_none() {\n+                    if item.span.ctxt().outer_expn_info().is_none() {\n                         self.span = Some(item.span.shrink_to_lo());\n                         self.found_use = true;\n                         return;\n@@ -772,7 +772,7 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n                 ItemKind::ExternCrate(_) => {}\n                 // but place them before the first other item\n                 _ => if self.span.map_or(true, |span| item.span < span ) {\n-                    if item.span.ctxt().outer().expn_info().is_none() {\n+                    if item.span.ctxt().outer_expn_info().is_none() {\n                         // don't insert between attributes and an item\n                         if item.attrs.is_empty() {\n                             self.span = Some(item.span.shrink_to_lo());"}, {"sha": "08ab5b853252255e996d7fab640b3b5d264731f0", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "patch": "@@ -413,7 +413,7 @@ impl<'a> Resolver<'a> {\n \n         // Possibly apply the macro helper hack\n         if kind == MacroKind::Bang && path.len() == 1 &&\n-           path[0].ident.span.ctxt().outer().expn_info()\n+           path[0].ident.span.ctxt().outer_expn_info()\n                .map_or(false, |info| info.local_inner_macros) {\n             let root = Ident::new(kw::DollarCrate, path[0].ident.span);\n             path.insert(0, Segment::from_ident(root));"}, {"sha": "91c8bb6a74372ad556a1e13627be7342ebddc2a5", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "patch": "@@ -327,7 +327,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // Check the `expn_info()` to see if this is a macro; if so, it's hard to\n         // extract the text and make a good suggestion, so don't bother.\n-        let is_macro = sp.ctxt().outer().expn_info().is_some();\n+        let is_macro = sp.ctxt().outer_expn_info().is_some();\n \n         match (&expr.node, &expected.sty, &checked_ty.sty) {\n             (_, &ty::Ref(_, exp, _), &ty::Ref(_, check, _)) => match (&exp.sty, &check.sty) {"}, {"sha": "a1658fd89cde16939187f4401bcf94194e0b93a0", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "patch": "@@ -892,7 +892,7 @@ impl<'a, 'tcx, 'gcx> hir::intravisit::Visitor<'tcx> for UsePlacementFinder<'a, '\n                 hir::ItemKind::Use(..) => {\n                     // Don't suggest placing a `use` before the prelude\n                     // import or other generated ones.\n-                    if item.span.ctxt().outer().expn_info().is_none() {\n+                    if item.span.ctxt().outer_expn_info().is_none() {\n                         self.span = Some(item.span.shrink_to_lo());\n                         self.found_use = true;\n                         return;\n@@ -902,7 +902,7 @@ impl<'a, 'tcx, 'gcx> hir::intravisit::Visitor<'tcx> for UsePlacementFinder<'a, '\n                 hir::ItemKind::ExternCrate(_) => {}\n                 // ...but do place them before the first other item.\n                 _ => if self.span.map_or(true, |span| item.span < span ) {\n-                    if item.span.ctxt().outer().expn_info().is_none() {\n+                    if item.span.ctxt().outer_expn_info().is_none() {\n                         // Don't insert between attributes and an item.\n                         if item.attrs.is_empty() {\n                             self.span = Some(item.span.shrink_to_lo());"}, {"sha": "4b5b9ff7bbeeee5b9febe53a99f84b9c7184ca29", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "patch": "@@ -872,7 +872,7 @@ impl<'a> ExtCtxt<'a> {\n         let mut ctxt = self.backtrace();\n         let mut last_macro = None;\n         loop {\n-            if ctxt.outer().expn_info().map_or(None, |info| {\n+            if ctxt.outer_expn_info().map_or(None, |info| {\n                 if info.format.name() == sym::include {\n                     // Stop going up the backtrace once include! is encountered\n                     return None;"}, {"sha": "e83cad93d1c4f539b9861a84c8adf11e82772852", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "patch": "@@ -30,8 +30,8 @@ use errors::SourceMapper;\n /// otherwise return the call site span up to the `enclosing_sp` by\n /// following the `expn_info` chain.\n pub fn original_sp(sp: Span, enclosing_sp: Span) -> Span {\n-    let call_site1 = sp.ctxt().outer().expn_info().map(|ei| ei.call_site);\n-    let call_site2 = enclosing_sp.ctxt().outer().expn_info().map(|ei| ei.call_site);\n+    let call_site1 = sp.ctxt().outer_expn_info().map(|ei| ei.call_site);\n+    let call_site2 = enclosing_sp.ctxt().outer_expn_info().map(|ei| ei.call_site);\n     match (call_site1, call_site2) {\n         (None, _) => sp,\n         (Some(call_site1), Some(call_site2)) if call_site1 == call_site2 => sp,"}, {"sha": "cc05ecf8df5a6dc91f92f5a7d339178edd2b586f", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "patch": "@@ -680,7 +680,7 @@ impl server::Span for Rustc<'_> {\n         self.sess.source_map().lookup_char_pos(span.lo()).file\n     }\n     fn parent(&mut self, span: Self::Span) -> Option<Self::Span> {\n-        span.ctxt().outer().expn_info().map(|i| i.call_site)\n+        span.ctxt().outer_expn_info().map(|i| i.call_site)\n     }\n     fn source(&mut self, span: Self::Span) -> Self::Span {\n         span.source_callsite()"}, {"sha": "b4bb6d9c5e84c8e2a9edaf8a6cbc27e671986ddb", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "patch": "@@ -517,6 +517,16 @@ impl SyntaxContext {\n         HygieneData::with(|data| data.syntax_contexts[self.0 as usize].outer_mark)\n     }\n \n+    /// `ctxt.outer_expn_info()` is equivalent to but faster than\n+    /// `ctxt.outer().expn_info()`.\n+    #[inline]\n+    pub fn outer_expn_info(self) -> Option<ExpnInfo> {\n+        HygieneData::with(|data| {\n+            let outer = data.syntax_contexts[self.0 as usize].outer_mark;\n+            data.marks[outer.0 as usize].expn_info.clone()\n+        })\n+    }\n+\n     pub fn dollar_crate_name(self) -> Symbol {\n         HygieneData::with(|data| data.syntax_contexts[self.0 as usize].dollar_crate_name)\n     }"}, {"sha": "30e075a3396133a2b79a4260addd5fa6f7189c2e", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "patch": "@@ -348,18 +348,18 @@ impl Span {\n     /// Returns the source span -- this is either the supplied span, or the span for\n     /// the macro callsite that expanded to it.\n     pub fn source_callsite(self) -> Span {\n-        self.ctxt().outer().expn_info().map(|info| info.call_site.source_callsite()).unwrap_or(self)\n+        self.ctxt().outer_expn_info().map(|info| info.call_site.source_callsite()).unwrap_or(self)\n     }\n \n     /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,\n     /// if any.\n     pub fn parent(self) -> Option<Span> {\n-        self.ctxt().outer().expn_info().map(|i| i.call_site)\n+        self.ctxt().outer_expn_info().map(|i| i.call_site)\n     }\n \n     /// Edition of the crate from which this span came.\n     pub fn edition(self) -> edition::Edition {\n-        self.ctxt().outer().expn_info().map_or_else(|| {\n+        self.ctxt().outer_expn_info().map_or_else(|| {\n             Edition::from_session()\n         }, |einfo| einfo.edition)\n     }\n@@ -381,19 +381,19 @@ impl Span {\n     /// corresponding to the source callsite.\n     pub fn source_callee(self) -> Option<ExpnInfo> {\n         fn source_callee(info: ExpnInfo) -> ExpnInfo {\n-            match info.call_site.ctxt().outer().expn_info() {\n+            match info.call_site.ctxt().outer_expn_info() {\n                 Some(info) => source_callee(info),\n                 None => info,\n             }\n         }\n-        self.ctxt().outer().expn_info().map(source_callee)\n+        self.ctxt().outer_expn_info().map(source_callee)\n     }\n \n     /// Checks if a span is \"internal\" to a macro in which `#[unstable]`\n     /// items can be used (that is, a macro marked with\n     /// `#[allow_internal_unstable]`).\n     pub fn allows_unstable(&self, feature: Symbol) -> bool {\n-        match self.ctxt().outer().expn_info() {\n+        match self.ctxt().outer_expn_info() {\n             Some(info) => info\n                 .allow_internal_unstable\n                 .map_or(false, |features| features.iter().any(|&f|\n@@ -405,7 +405,7 @@ impl Span {\n \n     /// Checks if this span arises from a compiler desugaring of kind `kind`.\n     pub fn is_compiler_desugaring(&self, kind: CompilerDesugaringKind) -> bool {\n-        match self.ctxt().outer().expn_info() {\n+        match self.ctxt().outer_expn_info() {\n             Some(info) => match info.format {\n                 ExpnFormat::CompilerDesugaring(k) => k == kind,\n                 _ => false,\n@@ -417,7 +417,7 @@ impl Span {\n     /// Returns the compiler desugaring that created this span, or `None`\n     /// if this span is not from a desugaring.\n     pub fn compiler_desugaring_kind(&self) -> Option<CompilerDesugaringKind> {\n-        match self.ctxt().outer().expn_info() {\n+        match self.ctxt().outer_expn_info() {\n             Some(info) => match info.format {\n                 ExpnFormat::CompilerDesugaring(k) => Some(k),\n                 _ => None\n@@ -430,7 +430,7 @@ impl Span {\n     /// can be used without triggering the `unsafe_code` lint\n     //  (that is, a macro marked with `#[allow_internal_unsafe]`).\n     pub fn allows_unsafe(&self) -> bool {\n-        match self.ctxt().outer().expn_info() {\n+        match self.ctxt().outer_expn_info() {\n             Some(info) => info.allow_internal_unsafe,\n             None => false,\n         }\n@@ -439,7 +439,7 @@ impl Span {\n     pub fn macro_backtrace(mut self) -> Vec<MacroBacktrace> {\n         let mut prev_span = DUMMY_SP;\n         let mut result = vec![];\n-        while let Some(info) = self.ctxt().outer().expn_info() {\n+        while let Some(info) = self.ctxt().outer_expn_info() {\n             // Don't print recursive invocations.\n             if !info.call_site.source_equal(&prev_span) {\n                 let (pre, post) = match info.format {"}]}