{"sha": "241435737451c521a78faab31c54457b1cb97413", "node_id": "C_kwDOAAsO6NoAKDI0MTQzNTczNzQ1MWM1MjFhNzhmYWFiMzFjNTQ0NTdiMWNiOTc0MTM", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-20T11:40:21Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-20T12:16:27Z"}, "message": "fix assertion failed for break_last_token and trailing token", "tree": {"sha": "dce68bcbaee7a088b7202a225cc992f96dc006af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dce68bcbaee7a088b7202a225cc992f96dc006af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/241435737451c521a78faab31c54457b1cb97413", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/241435737451c521a78faab31c54457b1cb97413", "html_url": "https://github.com/rust-lang/rust/commit/241435737451c521a78faab31c54457b1cb97413", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/241435737451c521a78faab31c54457b1cb97413/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53728ff751df4c271d4ea565b6871057a3504fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/53728ff751df4c271d4ea565b6871057a3504fc5", "html_url": "https://github.com/rust-lang/rust/commit/53728ff751df4c271d4ea565b6871057a3504fc5"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "1b16ecb5ec2d6434a52cfc86a5e7b9fabb966a1f", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/241435737451c521a78faab31c54457b1cb97413/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/241435737451c521a78faab31c54457b1cb97413/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=241435737451c521a78faab31c54457b1cb97413", "patch": "@@ -273,16 +273,23 @@ impl<'a> Parser<'a> {\n         let cursor_snapshot_next_calls = cursor_snapshot.num_next_calls;\n         let mut end_pos = self.token_cursor.num_next_calls;\n \n+        let mut captured_trailing = false;\n+\n         // Capture a trailing token if requested by the callback 'f'\n         match trailing {\n             TrailingToken::None => {}\n+            TrailingToken::Gt => {\n+                assert_eq!(self.token.kind, token::Gt);\n+            }\n             TrailingToken::Semi => {\n                 assert_eq!(self.token.kind, token::Semi);\n                 end_pos += 1;\n+                captured_trailing = true;\n             }\n             TrailingToken::MaybeComma => {\n                 if self.token.kind == token::Comma {\n                     end_pos += 1;\n+                    captured_trailing = true;\n                 }\n             }\n         }\n@@ -292,11 +299,7 @@ impl<'a> Parser<'a> {\n         // was not actually bumped past it. When the `LazyAttrTokenStream` gets converted\n         // into an `AttrTokenStream`, we will create the proper token.\n         if self.token_cursor.break_last_token {\n-            assert_eq!(\n-                trailing,\n-                TrailingToken::None,\n-                \"Cannot set `break_last_token` and have trailing token\"\n-            );\n+            assert!(!captured_trailing, \"Cannot set break_last_token and have trailing token\");\n             end_pos += 1;\n         }\n "}, {"sha": "d9d20195c5f8197e897323955af847bd1335d9f5", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/241435737451c521a78faab31c54457b1cb97413/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/241435737451c521a78faab31c54457b1cb97413/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=241435737451c521a78faab31c54457b1cb97413", "patch": "@@ -3080,6 +3080,8 @@ impl<'a> Parser<'a> {\n                 && this.token.kind == token::Semi\n             {\n                 TrailingToken::Semi\n+            } else if this.token.kind == token::Gt {\n+                TrailingToken::Gt\n             } else {\n                 // FIXME - pass this through from the place where we know\n                 // we need a comma, rather than assuming that `#[attr] expr,`"}, {"sha": "89c24920f857d1e9672e52a92cf47c62ac852bb0", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/241435737451c521a78faab31c54457b1cb97413/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/241435737451c521a78faab31c54457b1cb97413/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=241435737451c521a78faab31c54457b1cb97413", "patch": "@@ -79,6 +79,7 @@ pub enum ForceCollect {\n pub enum TrailingToken {\n     None,\n     Semi,\n+    Gt,\n     /// If the trailing token is a comma, then capture it\n     /// Otherwise, ignore the trailing token\n     MaybeComma,"}, {"sha": "a584274c405140afd2be762eb5e9909f689dcf79", "filename": "src/test/ui/parser/issue-103143.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/241435737451c521a78faab31c54457b1cb97413/src%2Ftest%2Fui%2Fparser%2Fissue-103143.rs", "raw_url": "https://github.com/rust-lang/rust/raw/241435737451c521a78faab31c54457b1cb97413/src%2Ftest%2Fui%2Fparser%2Fissue-103143.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103143.rs?ref=241435737451c521a78faab31c54457b1cb97413", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    x::<#[a]y::<z>>\n+    //~^ ERROR invalid const generic expression\n+    //~| ERROR cannot find value `x` in this scope\n+}"}, {"sha": "4035c69afa712821fc7a2db857a86c7636de421f", "filename": "src/test/ui/parser/issue-103143.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/241435737451c521a78faab31c54457b1cb97413/src%2Ftest%2Fui%2Fparser%2Fissue-103143.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/241435737451c521a78faab31c54457b1cb97413/src%2Ftest%2Fui%2Fparser%2Fissue-103143.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103143.stderr?ref=241435737451c521a78faab31c54457b1cb97413", "patch": "@@ -0,0 +1,20 @@\n+error: invalid const generic expression\n+  --> $DIR/issue-103143.rs:2:13\n+   |\n+LL |     x::<#[a]y::<z>>\n+   |             ^^^^^^\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     x::<#[a]{ y::<z> }>\n+   |             +        +\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/issue-103143.rs:2:5\n+   |\n+LL |     x::<#[a]y::<z>>\n+   |     ^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}]}