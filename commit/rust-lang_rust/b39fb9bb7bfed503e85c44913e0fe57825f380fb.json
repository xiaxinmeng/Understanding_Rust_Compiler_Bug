{"sha": "b39fb9bb7bfed503e85c44913e0fe57825f380fb", "node_id": "C_kwDOAAsO6NoAKGIzOWZiOWJiN2JmZWQ1MDNlODVjNDQ5MTNlMGZlNTc4MjVmMzgwZmI", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2021-11-18T01:53:47Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-01-18T22:25:26Z"}, "message": "Fix control flow handling in generator_interior\n\nAll tests pass now! The issue was that we weren't handling all edges\ncorrectly, but now they are handled consistently.\n\nThis includes code to dump a graphviz file for the CFG we built for drop\ntracking.\n\nAlso removes old DropRanges tests.", "tree": {"sha": "f486c7463062b9fee53bd15e04fe812075104a1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f486c7463062b9fee53bd15e04fe812075104a1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b39fb9bb7bfed503e85c44913e0fe57825f380fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b39fb9bb7bfed503e85c44913e0fe57825f380fb", "html_url": "https://github.com/rust-lang/rust/commit/b39fb9bb7bfed503e85c44913e0fe57825f380fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b39fb9bb7bfed503e85c44913e0fe57825f380fb/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7afaa1686521b1d812646a4ca7005f408dd5d71", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7afaa1686521b1d812646a4ca7005f408dd5d71", "html_url": "https://github.com/rust-lang/rust/commit/c7afaa1686521b1d812646a4ca7005f408dd5d71"}], "stats": {"total": 100, "additions": 78, "deletions": 22}, "files": [{"sha": "cde44f96ce76f7aacef42ffe254069f648db582c", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b39fb9bb7bfed503e85c44913e0fe57825f380fb/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b39fb9bb7bfed503e85c44913e0fe57825f380fb/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b39fb9bb7bfed503e85c44913e0fe57825f380fb", "patch": "@@ -4388,6 +4388,7 @@ dependencies = [\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_graphviz\",\n  \"rustc_hir\",\n  \"rustc_hir_pretty\",\n  \"rustc_index\","}, {"sha": "57930a28a35a159ba9267aac1e0e3a129e47ba62", "filename": "compiler/rustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b39fb9bb7bfed503e85c44913e0fe57825f380fb/compiler%2Frustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b39fb9bb7bfed503e85c44913e0fe57825f380fb/compiler%2Frustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2FCargo.toml?ref=b39fb9bb7bfed503e85c44913e0fe57825f380fb", "patch": "@@ -15,6 +15,7 @@ rustc_middle = { path = \"../rustc_middle\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n+rustc_graphviz = { path = \"../rustc_graphviz\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_hir_pretty = { path = \"../rustc_hir_pretty\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "f26ba875c01d0185d8e7a62805167dded628c077", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b39fb9bb7bfed503e85c44913e0fe57825f380fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b39fb9bb7bfed503e85c44913e0fe57825f380fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=b39fb9bb7bfed503e85c44913e0fe57825f380fb", "patch": "@@ -26,9 +26,6 @@ use rustc_span::Span;\n use smallvec::SmallVec;\n use tracing::debug;\n \n-#[cfg(test)]\n-mod tests;\n-\n mod drop_ranges;\n \n struct InteriorVisitor<'a, 'tcx> {\n@@ -255,6 +252,7 @@ pub fn resolve_interior<'a, 'tcx>(\n         intravisit::walk_body(&mut drop_range_visitor, body);\n \n         drop_range_visitor.drop_ranges.propagate_to_fixpoint();\n+        // drop_range_visitor.drop_ranges.save_graph(\"drop_ranges.dot\");\n \n         InteriorVisitor {\n             fcx,\n@@ -877,18 +875,18 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n                 reinit = Some(lhs);\n             }\n             ExprKind::Loop(body, ..) => {\n-                let loop_begin = self.expr_count;\n+                let loop_begin = self.expr_count + 1;\n                 self.visit_block(body);\n                 self.drop_ranges.add_control_edge(self.expr_count, loop_begin);\n             }\n             ExprKind::Match(scrutinee, arms, ..) => {\n                 self.visit_expr(scrutinee);\n \n-                let fork = self.expr_count - 1;\n+                let fork = self.expr_count;\n                 let arm_end_ids = arms\n                     .iter()\n                     .map(|Arm { pat, body, guard, .. }| {\n-                        self.drop_ranges.add_control_edge(fork, self.expr_count);\n+                        self.drop_ranges.add_control_edge(fork, self.expr_count + 1);\n                         self.visit_pat(pat);\n                         match guard {\n                             Some(Guard::If(expr)) => self.visit_expr(expr),\n@@ -914,8 +912,8 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n             _ => intravisit::walk_expr(self, expr),\n         }\n \n-        self.drop_ranges.add_node_mapping(expr.hir_id, self.expr_count);\n         self.expr_count += 1;\n+        self.drop_ranges.add_node_mapping(expr.hir_id, self.expr_count);\n         self.consume_expr(expr);\n         if let Some(expr) = reinit {\n             self.reinit_expr(expr);"}, {"sha": "5fe3e4088385d81e2e7d0997a16c23771a0c2d33", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges.rs", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b39fb9bb7bfed503e85c44913e0fe57825f380fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b39fb9bb7bfed503e85c44913e0fe57825f380fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs?ref=b39fb9bb7bfed503e85c44913e0fe57825f380fb", "patch": "@@ -2,6 +2,7 @@ use std::collections::BTreeMap;\n use std::fmt::Debug;\n use std::mem::swap;\n \n+use rustc_graphviz as dot;\n use rustc_hir::{HirId, HirIdMap};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n@@ -182,7 +183,9 @@ impl DropRanges {\n             changed\n         };\n \n-        while propagate() {}\n+        while propagate() {\n+            trace!(\"drop_state changed, re-running propagation\");\n+        }\n \n         trace!(\"after fixpoint: {:#?}\", self);\n     }\n@@ -200,6 +203,73 @@ impl DropRanges {\n         }\n         preds\n     }\n+\n+    // pub fn save_graph(&self, filename: &str) {\n+    //     use std::fs::File;\n+    //     dot::render(self, &mut File::create(filename).unwrap()).unwrap();\n+    // }\n+}\n+\n+impl<'a> dot::GraphWalk<'a> for DropRanges {\n+    type Node = PostOrderId;\n+\n+    type Edge = (PostOrderId, PostOrderId);\n+\n+    fn nodes(&'a self) -> dot::Nodes<'a, Self::Node> {\n+        self.nodes.iter_enumerated().map(|(i, _)| i).collect()\n+    }\n+\n+    fn edges(&'a self) -> dot::Edges<'a, Self::Edge> {\n+        self.nodes\n+            .iter_enumerated()\n+            .flat_map(|(i, node)| {\n+                if node.successors.len() == 0 {\n+                    vec![(i, PostOrderId::from_usize(i.index() + 1))]\n+                } else {\n+                    node.successors.iter().map(move |&s| (i, s)).collect()\n+                }\n+            })\n+            .collect()\n+    }\n+\n+    fn source(&'a self, edge: &Self::Edge) -> Self::Node {\n+        edge.0\n+    }\n+\n+    fn target(&'a self, edge: &Self::Edge) -> Self::Node {\n+        edge.1\n+    }\n+}\n+\n+impl<'a> dot::Labeller<'a> for DropRanges {\n+    type Node = PostOrderId;\n+\n+    type Edge = (PostOrderId, PostOrderId);\n+\n+    fn graph_id(&'a self) -> dot::Id<'a> {\n+        dot::Id::new(\"drop_ranges\").unwrap()\n+    }\n+\n+    fn node_id(&'a self, n: &Self::Node) -> dot::Id<'a> {\n+        dot::Id::new(format!(\"id{}\", n.index())).unwrap()\n+    }\n+\n+    fn node_label(&'a self, n: &Self::Node) -> dot::LabelText<'a> {\n+        dot::LabelText::LabelStr(\n+            format!(\n+                \"{:?}, local_id: {}\",\n+                n,\n+                self.post_order_map\n+                    .iter()\n+                    .find(|(_hir_id, &post_order_id)| post_order_id == n.index())\n+                    .map_or(\"<unknown>\".into(), |(hir_id, _)| format!(\n+                        \"{}\",\n+                        hir_id.local_id.index()\n+                    ))\n+            )\n+            .into(),\n+        )\n+    }\n }\n \n #[derive(Debug)]"}, {"sha": "8f973bb94895a3e86649318bd1c4538cf9c0186f", "filename": "compiler/rustc_typeck/src/check/generator_interior/tests.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7afaa1686521b1d812646a4ca7005f408dd5d71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7afaa1686521b1d812646a4ca7005f408dd5d71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Ftests.rs?ref=c7afaa1686521b1d812646a4ca7005f408dd5d71", "patch": "@@ -1,14 +0,0 @@\n-use super::DropRange;\n-\n-#[test]\n-fn drop_range_uses_last_event() {\n-    let mut range = DropRange::empty();\n-    range.drop(10);\n-    range.reinit(10);\n-    assert!(!range.is_dropped_at(10));\n-\n-    let mut range = DropRange::empty();\n-    range.reinit(10);\n-    range.drop(10);\n-    assert!(range.is_dropped_at(10));\n-}"}]}