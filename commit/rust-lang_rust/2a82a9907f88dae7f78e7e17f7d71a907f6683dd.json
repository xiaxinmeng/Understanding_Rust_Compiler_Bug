{"sha": "2a82a9907f88dae7f78e7e17f7d71a907f6683dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhODJhOTkwN2Y4OGRhZTdmNzhlN2UxN2Y3ZDcxYTkwN2Y2NjgzZGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-25T04:38:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-25T04:50:33Z"}, "message": "std: Clean up uv_global_loop", "tree": {"sha": "a11890ac07216510ccaed0676a3a96ff51480c36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a11890ac07216510ccaed0676a3a96ff51480c36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a82a9907f88dae7f78e7e17f7d71a907f6683dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a82a9907f88dae7f78e7e17f7d71a907f6683dd", "html_url": "https://github.com/rust-lang/rust/commit/2a82a9907f88dae7f78e7e17f7d71a907f6683dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a82a9907f88dae7f78e7e17f7d71a907f6683dd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26ed1e91c8eeb56a55508d060bed8933a1702ee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/26ed1e91c8eeb56a55508d060bed8933a1702ee9", "html_url": "https://github.com/rust-lang/rust/commit/26ed1e91c8eeb56a55508d060bed8933a1702ee9"}], "stats": {"total": 168, "additions": 85, "deletions": 83}, "files": [{"sha": "710e439c347d8f6df0faab9ce3d1f36d035b3d86", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 80, "deletions": 82, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/2a82a9907f88dae7f78e7e17f7d71a907f6683dd/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a82a9907f88dae7f78e7e17f7d71a907f6683dd/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=2a82a9907f88dae7f78e7e17f7d71a907f6683dd", "patch": "@@ -2,11 +2,15 @@\n A process-wide libuv event loop for library use.\n \"];\n \n+export get, get_monitor_task_gl;\n+\n import ll = uv_ll;\n import hl = uv_hl;\n import get_gl = get;\n-\n-export get, get_monitor_task_gl;\n+import task::{spawn_sched, single_threaded};\n+import priv::{chan_from_global_ptr, weaken_task};\n+import comm::{port, chan, methods, select2, listen};\n+import either::{left, right};\n \n native mod rustrt {\n     fn rust_uv_get_kernel_global_chan_ptr() -> *libc::uintptr_t;\n@@ -29,114 +33,108 @@ fn get() -> hl::high_level_loop {\n }\n \n #[doc(hidden)]\n-fn get_monitor_task_gl() -> hl::high_level_loop {\n-    let monitor_loop_chan_ptr =\n-        rustrt::rust_uv_get_kernel_global_chan_ptr();\n-    log(debug, #fmt(\"ENTERING global_loop::get() loop chan: %?\",\n-       monitor_loop_chan_ptr));\n+fn get_monitor_task_gl() -> hl::high_level_loop unsafe {\n+\n+    let monitor_loop_chan_ptr = rustrt::rust_uv_get_kernel_global_chan_ptr();\n+\n+    #debug(\"ENTERING global_loop::get() loop chan: %?\",\n+           monitor_loop_chan_ptr);\n+\n     let builder_fn = {||\n         let builder = task::builder();\n-        let opts = {\n+        task::set_opts(builder, {\n             supervise: false,\n-            notify_chan: none,\n-            sched:\n-                some({mode: task::manual_threads(1u),\n-                      native_stack_size: none })\n-        };\n-        task::set_opts(builder, opts);\n+            sched: some({\n+                mode: single_threaded,\n+                native_stack_size: none\n+            })\n+            with task::get_opts(builder)\n+        });\n         builder\n     };\n-    unsafe {\n-        log(debug, \"before priv::chan_from_global_ptr\");\n-        type hl_loop_req_ch = comm::chan<hl::high_level_loop>;\n-        let msg_ch = priv::chan_from_global_ptr::<hl_loop_req_ch>(\n-            monitor_loop_chan_ptr,\n-            builder_fn) {|msg_po|\n-            log(debug, \"global monitor task starting\");\n-            priv::weaken_task() {|weak_exit_po|\n-                log(debug, \"global monitor task is now weak\");\n-                let hl_loop_data = spawn_high_level_loop();\n-                let hl_loop = alt hl_loop_data {\n-                  (async, msg_ch) {\n-                    hl::high_level_loop({async_handle:async, op_chan:msg_ch})\n+\n+    #debug(\"before priv::chan_from_global_ptr\");\n+    type monchan = chan<hl::high_level_loop>;\n+\n+    let monitor_ch = chan_from_global_ptr::<monchan>(monitor_loop_chan_ptr,\n+                                                     builder_fn) {|msg_po|\n+        #debug(\"global monitor task starting\");\n+\n+        // As a weak task the runtime will notify us when to exit\n+        weaken_task() {|weak_exit_po|\n+            #debug(\"global monitor task is now weak\");\n+            let hl_loop = spawn_high_level_loop();\n+            loop {\n+                #debug(\"in outer_loop...\");\n+                alt select2(weak_exit_po, msg_po) {\n+                  left(weak_exit) {\n+                    // all normal tasks have ended, tell the\n+                    // libuv loop to tear_down, then exit\n+                    #debug(\"weak_exit_po recv'd msg: %?\", weak_exit);\n+                    hl::exit(hl_loop);\n+                    break;\n+                  }\n+                  right(fetch_ch) {\n+                    #debug(\"hl_loop req recv'd: %?\", fetch_ch);\n+                    fetch_ch.send(hl_loop);\n                   }\n-                };\n-                loop {\n-                    log(debug, \"in outer_loop...\");\n-                    let continue = either::either(\n-                        {|weak_exit|\n-                            // all normal tasks have ended, tell the\n-                            // libuv loop to tear_down, then exit\n-                            log(debug, #fmt(\"weak_exit_po recv'd msg: %?\",\n-                                           weak_exit));\n-                            let ( a, loop_msg_ch )= hl_loop_data;\n-                            comm::send(loop_msg_ch, hl::teardown_loop);\n-                            ll::async_send(a);\n-                            false\n-                        }, {|fetch_ch|\n-                            log(debug, #fmt(\"hl_loop req recv'd: %?\",\n-                                           fetch_ch));\n-                            comm::send(fetch_ch, copy(hl_loop));\n-                            true\n-                        }, comm::select2(weak_exit_po, msg_po));\n-                    if !continue { break; }\n                 }\n-                log(debug, \"global monitor task is leaving weakend state\");\n-            };\n-            log(debug, \"global monitor task exiting\");\n+            }\n+            #debug(\"global monitor task is leaving weakend state\");\n         };\n-        // once we have a chan to the monitor loop, we ask it for\n-        // the libuv loop's async handle\n-        let fetch_po = comm::port::<hl::high_level_loop>();\n-        let fetch_ch = comm::chan(fetch_po);\n-        comm::send(msg_ch, fetch_ch);\n-        comm::recv(fetch_po)\n+        #debug(\"global monitor task exiting\");\n+    };\n+\n+    // once we have a chan to the monitor loop, we ask it for\n+    // the libuv loop's async handle\n+    listen { |fetch_ch|\n+        monitor_ch.send(fetch_ch);\n+        fetch_ch.recv()\n     }\n }\n \n-unsafe fn spawn_high_level_loop() -> (*ll::uv_async_t,\n-                                      comm::chan<hl::high_level_msg>){\n-    let exit_po = comm::port::<(*ll::uv_async_t,\n-                              comm::chan<hl::high_level_msg>)>();\n-    let exit_ch = comm::chan(exit_po);\n-\n-    task::spawn_sched(task::manual_threads(1u)) {||\n-        log(debug, \"entering global libuv task\");\n-        let loop_ptr = ll::loop_new();\n-        priv::weaken_task() {|weak_exit_po|\n-            log(debug, #fmt(\"global libuv task is now weak %?\",\n-                            weak_exit_po));\n-            let loop_msg_po = comm::port::<hl::high_level_msg>();\n-            let loop_msg_ch = comm::chan(loop_msg_po);\n+fn spawn_high_level_loop() -> hl::high_level_loop unsafe {\n+    let exit_po = port::<hl::high_level_loop>();\n+    let exit_ch = exit_po.chan();\n+\n+    spawn_sched(single_threaded) {||\n+        #debug(\"entering global libuv task\");\n+        weaken_task() {|weak_exit_po|\n+            #debug(\"global libuv task is now weak %?\", weak_exit_po);\n+            let loop_ptr = ll::loop_new();\n+            let loop_msg_po = port::<hl::high_level_msg>();\n+            let loop_msg_ch = loop_msg_po.chan();\n             hl::run_high_level_loop(\n                 loop_ptr,\n                 loop_msg_po,\n                 // before_run\n                 {|async_handle|\n-                    log(debug,#fmt(\"global libuv: before_run %?\",\n-                                  async_handle));\n-                    let out_data = (async_handle, loop_msg_ch);\n-                    comm::send(exit_ch, out_data);\n+                    #debug(\"global libuv: before_run %?\", async_handle);\n+                    let hll = hl::high_level_loop({\n+                        async_handle: async_handle,\n+                        op_chan: loop_msg_ch\n+                    });\n+                    exit_ch.send(hll);\n                 },\n                 // before_msg_process\n                 {|async_handle, loop_active|\n-                    log(debug,#fmt(\"global libuv: before_msg_drain %? %?\",\n-                                  async_handle, loop_active));\n+                    #debug(\"global libuv: before_msg_drain %? %?\",\n+                           async_handle, loop_active);\n                     true\n                 },\n                 // before_tear_down\n                 {|async_handle|\n-                    log(debug,#fmt(\"libuv task: before_tear_down %?\",\n-                                  async_handle));\n+                    #debug(\"libuv task: before_tear_down %?\",\n+                           async_handle);\n                 }\n             );\n-            log(debug, \"global libuv task is leaving weakened state\");\n+            ll::loop_delete(loop_ptr);\n+            #debug(\"global libuv task is leaving weakened state\");\n         };\n-        ll::loop_delete(loop_ptr);\n-        log(debug, \"global libuv task exiting\");\n+        #debug(\"global libuv task exiting\");\n     };\n \n-    comm::recv(exit_po)\n+    exit_po.recv()\n }\n \n #[cfg(test)]"}, {"sha": "0b4e23674a614de763e95a078873da9fe5b50da1", "filename": "src/libstd/uv_hl.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a82a9907f88dae7f78e7e17f7d71a907f6683dd/src%2Flibstd%2Fuv_hl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a82a9907f88dae7f78e7e17f7d71a907f6683dd/src%2Flibstd%2Fuv_hl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_hl.rs?ref=2a82a9907f88dae7f78e7e17f7d71a907f6683dd", "patch": "@@ -7,7 +7,7 @@ libuv functionality.\n \"];\n \n export high_level_loop, high_level_msg;\n-export run_high_level_loop, interact;\n+export run_high_level_loop, interact, exit;\n \n import libc::c_void;\n import ptr::addr_of;\n@@ -119,6 +119,10 @@ unsafe fn interact(hl_loop: high_level_loop,\n     send_high_level_msg(hl_loop, interaction(cb));\n }\n \n+fn exit(hl_loop: high_level_loop) unsafe {\n+    send_high_level_msg(hl_loop, teardown_loop);\n+}\n+\n // INTERNAL API\n \n // data that lives for the lifetime of the high-evel oo"}]}