{"sha": "56d5657880d490a07f85c83a96187cad72e6b31a", "node_id": "C_kwDOAAsO6NoAKDU2ZDU2NTc4ODBkNDkwYTA3Zjg1YzgzYTk2MTg3Y2FkNzJlNmIzMWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-02T05:49:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-02T05:49:26Z"}, "message": "Auto merge of #9962 - mdgaziur:master, r=dswij\n\nFix #9958\n\nThis PR fixes #9958. In order to fix the issue, the lint will now peel reference operators and enclose the expression with parentheses when necessary.\n\nchangelog: [`comparison_to_empty`]: Peel deref operators in suggestions when necessary", "tree": {"sha": "7dd4bf380be5e34a2c0ec25bb5420bedce89ee92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dd4bf380be5e34a2c0ec25bb5420bedce89ee92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56d5657880d490a07f85c83a96187cad72e6b31a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56d5657880d490a07f85c83a96187cad72e6b31a", "html_url": "https://github.com/rust-lang/rust/commit/56d5657880d490a07f85c83a96187cad72e6b31a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56d5657880d490a07f85c83a96187cad72e6b31a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b43c9f76385d379d3f8576473cd7573d06809bfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b43c9f76385d379d3f8576473cd7573d06809bfb", "html_url": "https://github.com/rust-lang/rust/commit/b43c9f76385d379d3f8576473cd7573d06809bfb"}, {"sha": "7a0f0c0e8b79d0dd95e0c97660e327e51fa09c0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0f0c0e8b79d0dd95e0c97660e327e51fa09c0f", "html_url": "https://github.com/rust-lang/rust/commit/7a0f0c0e8b79d0dd95e0c97660e327e51fa09c0f"}], "stats": {"total": 174, "additions": 153, "deletions": 21}, "files": [{"sha": "3babc2a5895952e934fae18a76073805985b1de6", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/56d5657880d490a07f85c83a96187cad72e6b31a/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d5657880d490a07f85c83a96187cad72e6b31a/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=56d5657880d490a07f85c83a96187cad72e6b31a", "patch": "@@ -1,13 +1,13 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{get_item_name, get_parent_as_impl, is_lint_allowed};\n+use clippy_utils::{get_item_name, get_parent_as_impl, is_lint_allowed, peel_ref_operators};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefIdSet;\n use rustc_hir::{\n     def_id::DefId, AssocItemKind, BinOpKind, Expr, ExprKind, FnRetTy, ImplItem, ImplItemKind, ImplicitSelfKind, Item,\n-    ItemKind, Mutability, Node, TraitItemRef, TyKind,\n+    ItemKind, Mutability, Node, TraitItemRef, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, AssocKind, FnSig, Ty};\n@@ -16,6 +16,7 @@ use rustc_span::{\n     source_map::{Span, Spanned, Symbol},\n     symbol::sym,\n };\n+use std::borrow::Cow;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -428,16 +429,23 @@ fn check_len(\n fn check_empty_expr(cx: &LateContext<'_>, span: Span, lit1: &Expr<'_>, lit2: &Expr<'_>, op: &str) {\n     if (is_empty_array(lit2) || is_empty_string(lit2)) && has_is_empty(cx, lit1) {\n         let mut applicability = Applicability::MachineApplicable;\n+\n+        let lit1 = peel_ref_operators(cx, lit1);\n+        let mut lit_str = snippet_with_applicability(cx, lit1.span, \"_\", &mut applicability);\n+\n+        // Wrap the expression in parentheses if it's a deref expression. Otherwise operator precedence will\n+        // cause the code to dereference boolean(won't compile).\n+        if let ExprKind::Unary(UnOp::Deref, _) = lit1.kind {\n+            lit_str = Cow::from(format!(\"({lit_str})\"));\n+        }\n+\n         span_lint_and_sugg(\n             cx,\n             COMPARISON_TO_EMPTY,\n             span,\n             \"comparison to empty slice\",\n             &format!(\"using `{op}is_empty` is clearer and more explicit\"),\n-            format!(\n-                \"{op}{}.is_empty()\",\n-                snippet_with_applicability(cx, lit1.span, \"_\", &mut applicability)\n-            ),\n+            format!(\"{op}{lit_str}.is_empty()\"),\n             applicability,\n         );\n     }"}, {"sha": "c1c0b5ae40f6170b4b9d4daa0dd5424f661b8fa7", "filename": "tests/ui/len_zero.fixed", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/56d5657880d490a07f85c83a96187cad72e6b31a/tests%2Fui%2Flen_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/56d5657880d490a07f85c83a96187cad72e6b31a/tests%2Fui%2Flen_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.fixed?ref=56d5657880d490a07f85c83a96187cad72e6b31a", "patch": "@@ -3,6 +3,9 @@\n #![warn(clippy::len_zero)]\n #![allow(dead_code, unused, clippy::len_without_is_empty)]\n \n+extern crate core;\n+use core::ops::Deref;\n+\n pub struct One;\n struct Wither;\n \n@@ -56,6 +59,26 @@ impl WithIsEmpty for Wither {\n     }\n }\n \n+struct DerefToDerefToString;\n+\n+impl Deref for DerefToDerefToString {\n+    type Target = DerefToString;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &DerefToString {}\n+    }\n+}\n+\n+struct DerefToString;\n+\n+impl Deref for DerefToString {\n+    type Target = str;\n+\n+    fn deref(&self) -> &Self::Target {\n+        \"Hello, world!\"\n+    }\n+}\n+\n fn main() {\n     let x = [1, 2];\n     if x.is_empty() {\n@@ -64,6 +87,23 @@ fn main() {\n \n     if \"\".is_empty() {}\n \n+    let s = \"Hello, world!\";\n+    let s1 = &s;\n+    let s2 = &s1;\n+    let s3 = &s2;\n+    let s4 = &s3;\n+    let s5 = &s4;\n+    let s6 = &s5;\n+    println!(\"{}\", s1.is_empty());\n+    println!(\"{}\", s2.is_empty());\n+    println!(\"{}\", s3.is_empty());\n+    println!(\"{}\", s4.is_empty());\n+    println!(\"{}\", s5.is_empty());\n+    println!(\"{}\", (s6).is_empty());\n+\n+    let d2s = DerefToDerefToString {};\n+    println!(\"{}\", (**d2s).is_empty());\n+\n     let y = One;\n     if y.len() == 0 {\n         // No error; `One` does not have `.is_empty()`."}, {"sha": "cc2eb05b6bfd2ee81c35ea7754118532dd5f7ab9", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/56d5657880d490a07f85c83a96187cad72e6b31a/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d5657880d490a07f85c83a96187cad72e6b31a/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=56d5657880d490a07f85c83a96187cad72e6b31a", "patch": "@@ -3,6 +3,9 @@\n #![warn(clippy::len_zero)]\n #![allow(dead_code, unused, clippy::len_without_is_empty)]\n \n+extern crate core;\n+use core::ops::Deref;\n+\n pub struct One;\n struct Wither;\n \n@@ -56,6 +59,26 @@ impl WithIsEmpty for Wither {\n     }\n }\n \n+struct DerefToDerefToString;\n+\n+impl Deref for DerefToDerefToString {\n+    type Target = DerefToString;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &DerefToString {}\n+    }\n+}\n+\n+struct DerefToString;\n+\n+impl Deref for DerefToString {\n+    type Target = str;\n+\n+    fn deref(&self) -> &Self::Target {\n+        \"Hello, world!\"\n+    }\n+}\n+\n fn main() {\n     let x = [1, 2];\n     if x.len() == 0 {\n@@ -64,6 +87,23 @@ fn main() {\n \n     if \"\".len() == 0 {}\n \n+    let s = \"Hello, world!\";\n+    let s1 = &s;\n+    let s2 = &s1;\n+    let s3 = &s2;\n+    let s4 = &s3;\n+    let s5 = &s4;\n+    let s6 = &s5;\n+    println!(\"{}\", *s1 == \"\");\n+    println!(\"{}\", **s2 == \"\");\n+    println!(\"{}\", ***s3 == \"\");\n+    println!(\"{}\", ****s4 == \"\");\n+    println!(\"{}\", *****s5 == \"\");\n+    println!(\"{}\", ******(s6) == \"\");\n+\n+    let d2s = DerefToDerefToString {};\n+    println!(\"{}\", &**d2s == \"\");\n+\n     let y = One;\n     if y.len() == 0 {\n         // No error; `One` does not have `.is_empty()`."}, {"sha": "b6f13780253c2e526533179cc5602c0ff557f68a", "filename": "tests/ui/len_zero.stderr", "status": "modified", "additions": 59, "deletions": 15, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/56d5657880d490a07f85c83a96187cad72e6b31a/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56d5657880d490a07f85c83a96187cad72e6b31a/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=56d5657880d490a07f85c83a96187cad72e6b31a", "patch": "@@ -1,88 +1,132 @@\n error: length comparison to zero\n-  --> $DIR/len_zero.rs:61:8\n+  --> $DIR/len_zero.rs:84:8\n    |\n LL |     if x.len() == 0 {\n    |        ^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `x.is_empty()`\n    |\n    = note: `-D clippy::len-zero` implied by `-D warnings`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:65:8\n+  --> $DIR/len_zero.rs:88:8\n    |\n LL |     if \"\".len() == 0 {}\n    |        ^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `\"\".is_empty()`\n \n+error: comparison to empty slice\n+  --> $DIR/len_zero.rs:97:20\n+   |\n+LL |     println!(\"{}\", *s1 == \"\");\n+   |                    ^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `s1.is_empty()`\n+   |\n+   = note: `-D clippy::comparison-to-empty` implied by `-D warnings`\n+\n+error: comparison to empty slice\n+  --> $DIR/len_zero.rs:98:20\n+   |\n+LL |     println!(\"{}\", **s2 == \"\");\n+   |                    ^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `s2.is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/len_zero.rs:99:20\n+   |\n+LL |     println!(\"{}\", ***s3 == \"\");\n+   |                    ^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `s3.is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/len_zero.rs:100:20\n+   |\n+LL |     println!(\"{}\", ****s4 == \"\");\n+   |                    ^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `s4.is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/len_zero.rs:101:20\n+   |\n+LL |     println!(\"{}\", *****s5 == \"\");\n+   |                    ^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `s5.is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/len_zero.rs:102:20\n+   |\n+LL |     println!(\"{}\", ******(s6) == \"\");\n+   |                    ^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `(s6).is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/len_zero.rs:105:20\n+   |\n+LL |     println!(\"{}\", &**d2s == \"\");\n+   |                    ^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `(**d2s).is_empty()`\n+\n error: length comparison to zero\n-  --> $DIR/len_zero.rs:80:8\n+  --> $DIR/len_zero.rs:120:8\n    |\n LL |     if has_is_empty.len() == 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:83:8\n+  --> $DIR/len_zero.rs:123:8\n    |\n LL |     if has_is_empty.len() != 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:86:8\n+  --> $DIR/len_zero.rs:126:8\n    |\n LL |     if has_is_empty.len() > 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:89:8\n+  --> $DIR/len_zero.rs:129:8\n    |\n LL |     if has_is_empty.len() < 1 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:92:8\n+  --> $DIR/len_zero.rs:132:8\n    |\n LL |     if has_is_empty.len() >= 1 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:103:8\n+  --> $DIR/len_zero.rs:143:8\n    |\n LL |     if 0 == has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:106:8\n+  --> $DIR/len_zero.rs:146:8\n    |\n LL |     if 0 != has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:109:8\n+  --> $DIR/len_zero.rs:149:8\n    |\n LL |     if 0 < has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:112:8\n+  --> $DIR/len_zero.rs:152:8\n    |\n LL |     if 1 <= has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:115:8\n+  --> $DIR/len_zero.rs:155:8\n    |\n LL |     if 1 > has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:129:8\n+  --> $DIR/len_zero.rs:169:8\n    |\n LL |     if with_is_empty.len() == 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `with_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:142:8\n+  --> $DIR/len_zero.rs:182:8\n    |\n LL |     if b.len() != 0 {}\n    |        ^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!b.is_empty()`\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 21 previous errors\n "}]}