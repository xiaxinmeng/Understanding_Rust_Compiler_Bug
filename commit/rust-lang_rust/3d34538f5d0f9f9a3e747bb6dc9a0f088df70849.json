{"sha": "3d34538f5d0f9f9a3e747bb6dc9a0f088df70849", "node_id": "C_kwDOAAsO6NoAKDNkMzQ1MzhmNWQwZjlmOWEzZTc0N2JiNmRjOWEwZjA4OGRmNzA4NDk", "commit": {"author": {"name": "Patrik K\u00e5rlin", "email": "patrik.karlin@gmail.com", "date": "2023-02-24T10:22:24Z"}, "committer": {"name": "Patrik K\u00e5rlin", "email": "patrik.karlin@gmail.com", "date": "2023-02-24T10:32:41Z"}, "message": "rustc_infer: Consolidate obligation elaboration de-duplication", "tree": {"sha": "e902eda1a1a87b7e8d1f6ff7da9b8b04d6fbe820", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e902eda1a1a87b7e8d1f6ff7da9b8b04d6fbe820"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d34538f5d0f9f9a3e747bb6dc9a0f088df70849", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgh2d+T/QMoKuxUQmn1LuLfU+BwZ\nEuSNYGnaFxqueP1i8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQLvqeCv+PukkSq2mgq4y/ZHwLlNYKKDaWaqg6ihZRDkVRafAjz21pfu3sG48Ij7ySN\noA4rP8nNEoUftArnQmYQQ=\n-----END SSH SIGNATURE-----", "payload": "tree e902eda1a1a87b7e8d1f6ff7da9b8b04d6fbe820\nparent 07c993eba8b76eae497e98433ae075b00f01be10\nauthor Patrik K\u00e5rlin <patrik.karlin@gmail.com> 1677234144 +0100\ncommitter Patrik K\u00e5rlin <patrik.karlin@gmail.com> 1677234761 +0100\n\nrustc_infer: Consolidate obligation elaboration de-duplication\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d34538f5d0f9f9a3e747bb6dc9a0f088df70849", "html_url": "https://github.com/rust-lang/rust/commit/3d34538f5d0f9f9a3e747bb6dc9a0f088df70849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d34538f5d0f9f9a3e747bb6dc9a0f088df70849/comments", "author": {"login": "megakorre", "id": 208460, "node_id": "MDQ6VXNlcjIwODQ2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/208460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/megakorre", "html_url": "https://github.com/megakorre", "followers_url": "https://api.github.com/users/megakorre/followers", "following_url": "https://api.github.com/users/megakorre/following{/other_user}", "gists_url": "https://api.github.com/users/megakorre/gists{/gist_id}", "starred_url": "https://api.github.com/users/megakorre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/megakorre/subscriptions", "organizations_url": "https://api.github.com/users/megakorre/orgs", "repos_url": "https://api.github.com/users/megakorre/repos", "events_url": "https://api.github.com/users/megakorre/events{/privacy}", "received_events_url": "https://api.github.com/users/megakorre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "megakorre", "id": 208460, "node_id": "MDQ6VXNlcjIwODQ2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/208460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/megakorre", "html_url": "https://github.com/megakorre", "followers_url": "https://api.github.com/users/megakorre/followers", "following_url": "https://api.github.com/users/megakorre/following{/other_user}", "gists_url": "https://api.github.com/users/megakorre/gists{/gist_id}", "starred_url": "https://api.github.com/users/megakorre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/megakorre/subscriptions", "organizations_url": "https://api.github.com/users/megakorre/orgs", "repos_url": "https://api.github.com/users/megakorre/repos", "events_url": "https://api.github.com/users/megakorre/events{/privacy}", "received_events_url": "https://api.github.com/users/megakorre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07c993eba8b76eae497e98433ae075b00f01be10", "url": "https://api.github.com/repos/rust-lang/rust/commits/07c993eba8b76eae497e98433ae075b00f01be10", "html_url": "https://github.com/rust-lang/rust/commit/07c993eba8b76eae497e98433ae075b00f01be10"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "c07ff516579947859dd597b946a467b43abf893b", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3d34538f5d0f9f9a3e747bb6dc9a0f088df70849/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d34538f5d0f9f9a3e747bb6dc9a0f088df70849/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=3d34538f5d0f9f9a3e747bb6dc9a0f088df70849", "patch": "@@ -116,11 +116,11 @@ pub fn elaborate_predicates_with_span<'tcx>(\n \n pub fn elaborate_obligations<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    mut obligations: Vec<PredicateObligation<'tcx>>,\n+    obligations: Vec<PredicateObligation<'tcx>>,\n ) -> Elaborator<'tcx> {\n-    let mut visited = PredicateSet::new(tcx);\n-    obligations.retain(|obligation| visited.insert(obligation.predicate));\n-    Elaborator { stack: obligations, visited }\n+    let mut elaborator = Elaborator { stack: Vec::new(), visited: PredicateSet::new(tcx) };\n+    elaborator.extend_deduped(obligations);\n+    elaborator\n }\n \n fn predicate_obligation<'tcx>(\n@@ -132,6 +132,15 @@ fn predicate_obligation<'tcx>(\n }\n \n impl<'tcx> Elaborator<'tcx> {\n+    fn extend_deduped(&mut self, obligations: impl IntoIterator<Item = PredicateObligation<'tcx>>) {\n+        // Only keep those bounds that we haven't already seen.\n+        // This is necessary to prevent infinite recursion in some\n+        // cases. One common case is when people define\n+        // `trait Sized: Sized { }` rather than `trait Sized { }`.\n+        // let visited = &mut self.visited;\n+        self.stack.extend(obligations.into_iter().filter(|o| self.visited.insert(o.predicate)));\n+    }\n+\n     pub fn filter_to_traits(self) -> FilterToTraits<Self> {\n         FilterToTraits::new(self)\n     }\n@@ -172,15 +181,7 @@ impl<'tcx> Elaborator<'tcx> {\n                         )\n                     });\n                 debug!(?data, ?obligations, \"super_predicates\");\n-\n-                // Only keep those bounds that we haven't already seen.\n-                // This is necessary to prevent infinite recursion in some\n-                // cases. One common case is when people define\n-                // `trait Sized: Sized { }` rather than `trait Sized { }`.\n-                let visited = &mut self.visited;\n-                let obligations = obligations.filter(|o| visited.insert(o.predicate));\n-\n-                self.stack.extend(obligations);\n+                self.extend_deduped(obligations);\n             }\n             ty::PredicateKind::WellFormed(..) => {\n                 // Currently, we do not elaborate WF predicates,\n@@ -237,10 +238,9 @@ impl<'tcx> Elaborator<'tcx> {\n                     return;\n                 }\n \n-                let visited = &mut self.visited;\n                 let mut components = smallvec![];\n                 push_outlives_components(tcx, ty_max, &mut components);\n-                self.stack.extend(\n+                self.extend_deduped(\n                     components\n                         .into_iter()\n                         .filter_map(|component| match component {\n@@ -280,7 +280,6 @@ impl<'tcx> Elaborator<'tcx> {\n                         .map(|predicate_kind| {\n                             bound_predicate.rebind(predicate_kind).to_predicate(tcx)\n                         })\n-                        .filter(|&predicate| visited.insert(predicate))\n                         .map(|predicate| {\n                             predicate_obligation(\n                                 predicate,"}]}