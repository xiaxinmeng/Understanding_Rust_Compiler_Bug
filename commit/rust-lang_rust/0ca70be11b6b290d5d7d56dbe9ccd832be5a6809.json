{"sha": "0ca70be11b6b290d5d7d56dbe9ccd832be5a6809", "node_id": "C_kwDOAAsO6NoAKDBjYTcwYmUxMWI2YjI5MGQ1ZDdkNTZkYmU5Y2NkODMyYmU1YTY4MDk", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-05-08T19:06:21Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-05-25T15:15:02Z"}, "message": "rustc_metadata: fix private_dep logic in `register_crate`", "tree": {"sha": "b7b9c62458cd4c56ce78c3a3ece0947cf52c745c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b9c62458cd4c56ce78c3a3ece0947cf52c745c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ca70be11b6b290d5d7d56dbe9ccd832be5a6809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca70be11b6b290d5d7d56dbe9ccd832be5a6809", "html_url": "https://github.com/rust-lang/rust/commit/0ca70be11b6b290d5d7d56dbe9ccd832be5a6809", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ca70be11b6b290d5d7d56dbe9ccd832be5a6809/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "374024336a0dfed4a5cf5e97ccc99648b18cf00c", "url": "https://api.github.com/repos/rust-lang/rust/commits/374024336a0dfed4a5cf5e97ccc99648b18cf00c", "html_url": "https://github.com/rust-lang/rust/commit/374024336a0dfed4a5cf5e97ccc99648b18cf00c"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "63a2dc5aa626f23d167f5f0a02aacad8a3de9aa1", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0ca70be11b6b290d5d7d56dbe9ccd832be5a6809/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca70be11b6b290d5d7d56dbe9ccd832be5a6809/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=0ca70be11b6b290d5d7d56dbe9ccd832be5a6809", "patch": "@@ -365,16 +365,21 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n         lib: Library,\n         dep_kind: CrateDepKind,\n         name: Symbol,\n-        private_dep: bool,\n+        private_dep: Option<bool>,\n     ) -> Result<CrateNum, CrateError> {\n         let _prof_timer = self.sess.prof.generic_activity(\"metadata_register_crate\");\n \n         let Library { source, metadata } = lib;\n         let crate_root = metadata.get_root();\n         let host_hash = host_lib.as_ref().map(|lib| lib.metadata.get_root().hash());\n \n-        let private_dep =\n-            self.sess.opts.externs.get(name.as_str()).is_some_and(|e| e.is_private_dep);\n+        let private_dep = self\n+            .sess\n+            .opts\n+            .externs\n+            .get(name.as_str())\n+            .map_or(private_dep.unwrap_or(false), |e| e.is_private_dep)\n+            && private_dep.unwrap_or(true);\n \n         // Claim this crate number and cache it\n         let cnum = self.cstore.intern_stable_crate_id(&crate_root)?;\n@@ -526,9 +531,9 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n                 dep.host_hash,\n                 Some(&dep.extra_filename[..]),\n                 PathKind::Dependency,\n-                dep.is_private,\n+                Some(dep.is_private),\n             ),\n-            None => (None, None, None, None, PathKind::Crate, false),\n+            None => (None, None, None, None, PathKind::Crate, None),\n         };\n         let result = if let Some(cnum) = self.existing_match(name, hash, path_kind) {\n             (LoadResult::Previous(cnum), None)\n@@ -564,7 +569,9 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n                     dep_kind = CrateDepKind::MacrosOnly;\n                 }\n                 data.update_dep_kind(|data_dep_kind| cmp::max(data_dep_kind, dep_kind));\n-                data.update_private_dep(|p_d| p_d && private_dep);\n+                if let Some(private_dep) = private_dep {\n+                    data.update_private_dep(|p_d| p_d && private_dep);\n+                }\n                 Ok(cnum)\n             }\n             (LoadResult::Loaded(library), host_library) => {"}]}