{"sha": "2b7d8588668bc79a1855a2c335572a1ac8ceaf34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiN2Q4NTg4NjY4YmM3OWExODU1YTJjMzM1NTcyYTFhYzhjZWFmMzQ=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-06-16T21:48:35Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-06-16T21:50:21Z"}, "message": "Add some comments related to place op typeck", "tree": {"sha": "e99e944f435b0bb74bf8d497eb38aa6686f8b44a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e99e944f435b0bb74bf8d497eb38aa6686f8b44a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b7d8588668bc79a1855a2c335572a1ac8ceaf34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b7d8588668bc79a1855a2c335572a1ac8ceaf34", "html_url": "https://github.com/rust-lang/rust/commit/2b7d8588668bc79a1855a2c335572a1ac8ceaf34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b7d8588668bc79a1855a2c335572a1ac8ceaf34/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cedf5dfba1c83f2fe3e2fcb7acbc20c6e34604a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cedf5dfba1c83f2fe3e2fcb7acbc20c6e34604a", "html_url": "https://github.com/rust-lang/rust/commit/5cedf5dfba1c83f2fe3e2fcb7acbc20c6e34604a"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "fa7dd2156edfa8ca9fc89c09b8740204c5e5e3ff", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b7d8588668bc79a1855a2c335572a1ac8ceaf34/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7d8588668bc79a1855a2c335572a1ac8ceaf34/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2b7d8588668bc79a1855a2c335572a1ac8ceaf34", "patch": "@@ -3219,10 +3219,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        // When there is an auto mutable borrow, it is equivalent to `&mut expr`,\n-        // thus `expr` is ought to be typechecked with needs = [`Needs::MutPlace`].\n-        // However in many cases it might not be checked this way originally, e.g.\n-        // the receiver of a method call. We need to fix them up.\n+        // If there is an mutable auto-borrow, it is equivalent to `&mut <expr>`.\n+        // In this case implicit use of `Deref` and `Index` within `<expr>` should\n+        // instead be `DerefMut` and `IndexMut`, so fix those up.\n         if autoborrow_mut {\n             self.convert_place_derefs_to_mutable(expr);\n         }"}, {"sha": "d1c22cd1ac03ebe0d18747d73f5a0b6e38198517", "filename": "src/librustc_typeck/check/place_op.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b7d8588668bc79a1855a2c335572a1ac8ceaf34/src%2Flibrustc_typeck%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7d8588668bc79a1855a2c335572a1ac8ceaf34/src%2Flibrustc_typeck%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fplace_op.rs?ref=2b7d8588668bc79a1855a2c335572a1ac8ceaf34", "patch": "@@ -11,10 +11,11 @@ use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n+    /// Type-check `*oprnd_expr` with `oprnd_expr` type-checked already.\n     pub(super) fn lookup_derefing(\n         &self,\n         expr: &hir::Expr<'_>,\n-        oprnd: &'tcx hir::Expr<'tcx>,\n+        oprnd_expr: &'tcx hir::Expr<'tcx>,\n         oprnd_ty: Ty<'tcx>,\n     ) -> Option<Ty<'tcx>> {\n         if let Some(mt) = oprnd_ty.builtin_deref(true) {\n@@ -25,7 +26,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let method = self.register_infer_ok_obligations(ok);\n         if let ty::Ref(region, _, hir::Mutability::Not) = method.sig.inputs()[0].kind {\n             self.apply_adjustments(\n-                oprnd,\n+                oprnd_expr,\n                 vec![Adjustment {\n                     kind: Adjust::Borrow(AutoBorrow::Ref(region, AutoBorrowMutability::Not)),\n                     target: method.sig.inputs()[0],\n@@ -39,6 +40,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         Some(ty)\n     }\n \n+    /// Type-check `*base_expr[index_expr]` with `base_expr` and `index_expr` type-checked already.\n     pub(super) fn lookup_indexing(\n         &self,\n         expr: &hir::Expr<'_>,"}]}