{"sha": "7bfaeaaf9c41439f9de0cfb03680909de2ca4004", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZmFlYWFmOWM0MTQzOWY5ZGUwY2ZiMDM2ODA5MDlkZTJjYTQwMDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-04-05T18:18:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-04-12T22:55:14Z"}, "message": "tidy: Add a check to ensure Cargo.toml is in sync\n\nThis verifies that the crates listed in the `[dependencies]` section of\n`Cargo.toml` are a subset of the crates listed in `lib.rs` for our in-tree\ncrates. This should help ensure that when we refactor crates over time we keep\nthese dependency lists in sync.", "tree": {"sha": "94319a9f35a586b21c277a424f5a12944e1b4fb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94319a9f35a586b21c277a424f5a12944e1b4fb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bfaeaaf9c41439f9de0cfb03680909de2ca4004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bfaeaaf9c41439f9de0cfb03680909de2ca4004", "html_url": "https://github.com/rust-lang/rust/commit/7bfaeaaf9c41439f9de0cfb03680909de2ca4004", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bfaeaaf9c41439f9de0cfb03680909de2ca4004/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dd3c54a2c787c79037f5c772b12c7d2d2f87b18", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dd3c54a2c787c79037f5c772b12c7d2d2f87b18", "html_url": "https://github.com/rust-lang/rust/commit/9dd3c54a2c787c79037f5c772b12c7d2d2f87b18"}], "stats": {"total": 123, "additions": 115, "deletions": 8}, "files": [{"sha": "2e7b85f57289a728975685e716731d3cf70a3750", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bfaeaaf9c41439f9de0cfb03680909de2ca4004/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7bfaeaaf9c41439f9de0cfb03680909de2ca4004/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=7bfaeaaf9c41439f9de0cfb03680909de2ca4004", "patch": "@@ -242,13 +242,13 @@ cleantestlibs:\n \n .PHONY: tidy\n tidy: $(HBIN0_H_$(CFG_BUILD))/tidy$(X_$(CFG_BUILD))\n-\t$< $(S)src\n+\t$(TARGET_RPATH_VAR0_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $< $(S)src\n \n $(HBIN0_H_$(CFG_BUILD))/tidy$(X_$(CFG_BUILD)): \\\n \t\t$(TSREQ0_T_$(CFG_BUILD)_H_$(CFG_BUILD)) \\\n \t\t$(TLIB0_T_$(CFG_BUILD)_H_$(CFG_BUILD))/stamp.std \\\n \t\t$(call rwildcard,$(S)src/tools/tidy/src,*.rs)\n-\t$(STAGE0_T_$(CFG_BUILD)_H_$(CFG_BUILD)) src/tools/tidy/src/main.rs \\\n+\t$(STAGE0_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(S)src/tools/tidy/src/main.rs \\\n \t\t--out-dir $(@D) --crate-name tidy\n \n ######################################################################"}, {"sha": "45e0cb1101075bc0e68e5d2682a06a3a76e5dac2", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bfaeaaf9c41439f9de0cfb03680909de2ca4004/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bfaeaaf9c41439f9de0cfb03680909de2ca4004/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=7bfaeaaf9c41439f9de0cfb03680909de2ca4004", "patch": "@@ -323,8 +323,7 @@ impl<'a> Step<'a> {\n             }\n \n             Source::ToolLinkchecker { stage } |\n-            Source::ToolTidy { stage } |\n-            Source::ToolCargoTest { stage } => {\n+            Source::ToolTidy { stage } => {\n                 vec![self.libstd(self.compiler(stage))]\n             }\n             Source::ToolErrorIndex { stage } |"}, {"sha": "d614d967e3b07f13566763dc476ad2b71f0fa26c", "filename": "src/rustc/test_shim/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bfaeaaf9c41439f9de0cfb03680909de2ca4004/src%2Frustc%2Ftest_shim%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bfaeaaf9c41439f9de0cfb03680909de2ca4004/src%2Frustc%2Ftest_shim%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ftest_shim%2Flib.rs?ref=7bfaeaaf9c41439f9de0cfb03680909de2ca4004", "patch": "@@ -9,3 +9,7 @@\n // except according to those terms.\n \n // See comments in Cargo.toml for why this exists\n+\n+#![feature(test)]\n+\n+extern crate test;"}, {"sha": "a170ecfdce096d6fef1a28c84611ff06eb9e0fb8", "filename": "src/tools/tidy/src/cargo.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/7bfaeaaf9c41439f9de0cfb03680909de2ca4004/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bfaeaaf9c41439f9de0cfb03680909de2ca4004/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs?ref=7bfaeaaf9c41439f9de0cfb03680909de2ca4004", "patch": "@@ -0,0 +1,95 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Tidy check to ensure that `[dependencies]` and `extern crate` are in sync.\n+//!\n+//! This tidy check ensures that all crates listed in the `[dependencies]`\n+//! section of a `Cargo.toml` are present in the corresponding `lib.rs` as\n+//! `extern crate` declarations. This should help us keep the DAG correctly\n+//! structured through various refactorings to prune out unnecessary edges.\n+\n+use std::io::prelude::*;\n+use std::fs::File;\n+use std::path::Path;\n+\n+pub fn check(path: &Path, bad: &mut bool) {\n+    for entry in t!(path.read_dir()).map(|e| t!(e)) {\n+        // Look for `Cargo.toml` with a sibling `src/lib.rs` or `lib.rs`\n+        if entry.file_name().to_str() == Some(\"Cargo.toml\") {\n+            if path.join(\"src/lib.rs\").is_file() {\n+                verify(&entry.path(), &path.join(\"src/lib.rs\"), bad)\n+            }\n+            if path.join(\"lib.rs\").is_file() {\n+                verify(&entry.path(), &path.join(\"lib.rs\"), bad)\n+            }\n+        } else if t!(entry.file_type()).is_dir() {\n+            check(&entry.path(), bad);\n+        }\n+    }\n+}\n+\n+// Verify that the dependencies in Cargo.toml at `tomlfile` are sync'd with the\n+// `extern crate` annotations in the lib.rs at `libfile`.\n+fn verify(tomlfile: &Path, libfile: &Path, bad: &mut bool) {\n+    let mut toml = String::new();\n+    let mut librs = String::new();\n+    t!(t!(File::open(tomlfile)).read_to_string(&mut toml));\n+    t!(t!(File::open(libfile)).read_to_string(&mut librs));\n+\n+    if toml.contains(\"name = \\\"bootstrap\\\"\") {\n+        return\n+    }\n+\n+    // \"Poor man's TOML parser\", just assume we use one syntax for now\n+    //\n+    // We just look for:\n+    //\n+    //      [dependencies]\n+    //      name = ...\n+    //      name2 = ...\n+    //      name3 = ...\n+    //\n+    // If we encounter a line starting with `[` then we assume it's the end of\n+    // the dependency section and bail out.\n+    let deps = match toml.find(\"[dependencies]\") {\n+        Some(i) => &toml[i+1..],\n+        None => return,\n+    };\n+    let mut lines = deps.lines().peekable();\n+    while let Some(line) = lines.next() {\n+        if line.starts_with(\"[\") {\n+            break\n+        }\n+\n+        let mut parts = line.splitn(2, '=');\n+        let krate = parts.next().unwrap().trim();\n+        if parts.next().is_none() {\n+            continue\n+        }\n+\n+        // Don't worry about depending on core/std but not saying `extern crate\n+        // core/std`, that's intentional.\n+        if krate == \"core\" || krate == \"std\" {\n+            continue\n+        }\n+\n+        // This is intentional, this dependency just makes the crate available\n+        // for others later on.\n+        if krate == \"alloc_jemalloc\" && toml.contains(\"name = \\\"std\\\"\") {\n+            continue\n+        }\n+\n+        if !librs.contains(&format!(\"extern crate {}\", krate)) {\n+            println!(\"{} doesn't have `extern crate {}`, but Cargo.toml \\\n+                      depends on it\", libfile.display(), krate);\n+            *bad = true;\n+        }\n+    }\n+}"}, {"sha": "41869288cc91c70edcf8a407d8702b3d1862863c", "filename": "src/tools/tidy/src/errors.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7bfaeaaf9c41439f9de0cfb03680909de2ca4004/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bfaeaaf9c41439f9de0cfb03680909de2ca4004/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs?ref=7bfaeaaf9c41439f9de0cfb03680909de2ca4004", "patch": "@@ -71,8 +71,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n     });\n \n     let mut max = 0;\n-    println!(\"* {} error codes\", map.len());\n-    for (code, entries) in map {\n+    for (&code, entries) in map.iter() {\n         if code > max {\n             max = code;\n         }\n@@ -81,10 +80,14 @@ pub fn check(path: &Path, bad: &mut bool) {\n         }\n \n         println!(\"duplicate error code: {}\", code);\n-        for (file, line_num, line) in entries {\n+        for &(ref file, line_num, ref line) in entries.iter() {\n             println!(\"{}:{}: {}\", file.display(), line_num, line);\n         }\n         *bad = true;\n     }\n-    println!(\"* highest error code: E{:04}\", max);\n+\n+    if !*bad {\n+        println!(\"* {} error codes\", map.len());\n+        println!(\"* highest error code: E{:04}\", max);\n+    }\n }"}, {"sha": "991cf201d44f0a8289075c39d66cd53d90537402", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bfaeaaf9c41439f9de0cfb03680909de2ca4004/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bfaeaaf9c41439f9de0cfb03680909de2ca4004/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=7bfaeaaf9c41439f9de0cfb03680909de2ca4004", "patch": "@@ -100,6 +100,10 @@ pub fn check(path: &Path, bad: &mut bool) {\n         }\n     });\n \n+    if *bad {\n+        return\n+    }\n+\n     let mut lines = Vec::new();\n     for feature in features {\n         lines.push(format!(\"{:<32} {:<8} {:<12} {:<8}\","}, {"sha": "85b9c345e199c4349728603726d3a50e113c2586", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bfaeaaf9c41439f9de0cfb03680909de2ca4004/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bfaeaaf9c41439f9de0cfb03680909de2ca4004/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=7bfaeaaf9c41439f9de0cfb03680909de2ca4004", "patch": "@@ -29,6 +29,7 @@ mod bins;\n mod style;\n mod errors;\n mod features;\n+mod cargo;\n \n fn main() {\n     let path = env::args_os().skip(1).next().expect(\"need an argument\");\n@@ -38,6 +39,7 @@ fn main() {\n     bins::check(&path, &mut bad);\n     style::check(&path, &mut bad);\n     errors::check(&path, &mut bad);\n+    cargo::check(&path, &mut bad);\n     features::check(&path, &mut bad);\n \n     if bad {"}]}