{"sha": "618c6afe3232d0cc3750178d4f301352684ddde6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOGM2YWZlMzIzMmQwY2MzNzUwMTc4ZDRmMzAxMzUyNjg0ZGRkZTY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-08T22:45:38Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T11:22:44Z"}, "message": "std::rand::os: use the externfn! macro for the Windows RNG.", "tree": {"sha": "9d9de4465695f3d17a7c26f1a475b485655d893a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d9de4465695f3d17a7c26f1a475b485655d893a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/618c6afe3232d0cc3750178d4f301352684ddde6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/618c6afe3232d0cc3750178d4f301352684ddde6", "html_url": "https://github.com/rust-lang/rust/commit/618c6afe3232d0cc3750178d4f301352684ddde6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/618c6afe3232d0cc3750178d4f301352684ddde6/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d86de18b6198547f0a39e217123d8ec9ef4a9988", "url": "https://api.github.com/repos/rust-lang/rust/commits/d86de18b6198547f0a39e217123d8ec9ef4a9988", "html_url": "https://github.com/rust-lang/rust/commit/d86de18b6198547f0a39e217123d8ec9ef4a9988"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "4c8cf06c55e87052f089d93f35439795aa87caa5", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/618c6afe3232d0cc3750178d4f301352684ddde6/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618c6afe3232d0cc3750178d4f301352684ddde6/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=618c6afe3232d0cc3750178d4f301352684ddde6", "patch": "@@ -21,6 +21,13 @@ use rt::io::{file, Open, Read};\n \n #[cfg(windows)]\n use cast;\n+#[cfg(windows)]\n+use libc::{c_long, DWORD, BYTE};\n+#[cfg(windows)]\n+type HCRYPTPROV = c_long;\n+// the extern functions imported from the runtime on Windows are\n+// implemented so that they either succeed or abort(), so we can just\n+// assume they work when we call them.\n \n /// A random number generator that retrieves randomness straight from\n /// the operating system. On Unix-like systems this reads from\n@@ -38,7 +45,7 @@ pub struct OSRng {\n /// This does not block.\n #[cfg(windows)]\n pub struct OSRng {\n-    priv hcryptprov: raw::HCRYPTPROV\n+    priv hcryptprov: HCRYPTPROV\n }\n \n impl OSRng {\n@@ -53,10 +60,11 @@ impl OSRng {\n \n     /// Create a new `OSRng`.\n     #[cfg(windows)]\n-    #[fixed_stack_segment] #[inline(never)]\n     pub fn new() -> OSRng {\n+        externfn!(fn rust_win32_rand_acquire(phProv: *mut HCRYPTPROV))\n+\n         let mut hcp = 0;\n-        unsafe {raw::rust_win32_rand_acquire(&mut hcp)};\n+        unsafe {rust_win32_rand_acquire(&mut hcp)};\n \n         OSRng { hcryptprov: hcp }\n     }\n@@ -87,12 +95,11 @@ impl Rng for OSRng {\n         self.fill_bytes(v);\n         unsafe { cast::transmute(v) }\n     }\n-    #[fixed_stack_segment] #[inline(never)]\n     fn fill_bytes(&mut self, v: &mut [u8]) {\n-        use libc::DWORD;\n+        externfn!(fn rust_win32_rand_gen(hProv: HCRYPTPROV, dwLen: DWORD, pbBuffer: *mut BYTE))\n \n         do v.as_mut_buf |ptr, len| {\n-            unsafe {raw::rust_win32_rand_gen(self.hcryptprov, len as DWORD, ptr)}\n+            unsafe {rust_win32_rand_gen(self.hcryptprov, len as DWORD, ptr)}\n         }\n     }\n }\n@@ -105,27 +112,14 @@ impl Drop for OSRng {\n     }\n \n     #[cfg(windows)]\n-    #[fixed_stack_segment] #[inline(never)]\n     fn drop(&mut self) {\n-        unsafe {raw::rust_win32_rand_release(self.hcryptprov)}\n-    }\n-}\n+        externfn!(fn rust_win32_rand_release(hProv: HCRYPTPROV))\n \n-#[cfg(windows)]\n-mod raw {\n-    use libc::{c_long, DWORD, BYTE};\n-\n-    pub type HCRYPTPROV = c_long;\n-\n-    // these functions are implemented so that they either succeed or\n-    // abort(), so we can just assume they work when we call them.\n-    extern {\n-        pub fn rust_win32_rand_acquire(phProv: *mut HCRYPTPROV);\n-        pub fn rust_win32_rand_gen(hProv: HCRYPTPROV, dwLen: DWORD, pbBuffer: *mut BYTE);\n-        pub fn rust_win32_rand_release(hProv: HCRYPTPROV);\n+        unsafe {rust_win32_rand_release(self.hcryptprov)}\n     }\n }\n \n+\n #[cfg(test)]\n mod test {\n     use super::*;"}]}