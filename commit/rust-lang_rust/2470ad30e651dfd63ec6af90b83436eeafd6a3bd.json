{"sha": "2470ad30e651dfd63ec6af90b83436eeafd6a3bd", "node_id": "C_kwDOAAsO6NoAKDI0NzBhZDMwZTY1MWRmZDYzZWM2YWY5MGI4MzQzNmVlYWZkNmEzYmQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-10-23T13:09:11Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-10-23T13:09:11Z"}, "message": "Allow dyn* upcasting", "tree": {"sha": "53522d5ab5d6f8f2f3081854f3e7f81cac5d1efd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53522d5ab5d6f8f2f3081854f3e7f81cac5d1efd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2470ad30e651dfd63ec6af90b83436eeafd6a3bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2470ad30e651dfd63ec6af90b83436eeafd6a3bd", "html_url": "https://github.com/rust-lang/rust/commit/2470ad30e651dfd63ec6af90b83436eeafd6a3bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2470ad30e651dfd63ec6af90b83436eeafd6a3bd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a9abf5ab29bd91e1dc3d36ab1e46199e5413110", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a9abf5ab29bd91e1dc3d36ab1e46199e5413110", "html_url": "https://github.com/rust-lang/rust/commit/7a9abf5ab29bd91e1dc3d36ab1e46199e5413110"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "9c88f7dbcda33e424db7b163a8f9d3574699543d", "filename": "src/unsize.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2470ad30e651dfd63ec6af90b83436eeafd6a3bd/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2470ad30e651dfd63ec6af90b83436eeafd6a3bd/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=2470ad30e651dfd63ec6af90b83436eeafd6a3bd", "patch": "@@ -25,7 +25,12 @@ pub(crate) fn unsized_info<'tcx>(\n             .bcx\n             .ins()\n             .iconst(fx.pointer_type, len.eval_usize(fx.tcx, ParamEnv::reveal_all()) as i64),\n-        (&ty::Dynamic(ref data_a, ..), &ty::Dynamic(ref data_b, ..)) => {\n+        (\n+            &ty::Dynamic(ref data_a, _, src_dyn_kind),\n+            &ty::Dynamic(ref data_b, _, target_dyn_kind),\n+        ) => {\n+            assert_eq!(src_dyn_kind, target_dyn_kind);\n+\n             let old_info =\n                 old_info.expect(\"unsized_info: missing old info for trait upcasting coercion\");\n             if data_a.principal_def_id() == data_b.principal_def_id() {\n@@ -101,6 +106,21 @@ fn unsize_ptr<'tcx>(\n     }\n }\n \n+/// Coerces `src` to `dst_ty` which is guaranteed to be a `dyn*` type.\n+pub(crate) fn cast_to_dyn_star<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    src: Value,\n+    src_ty_and_layout: TyAndLayout<'tcx>,\n+    dst_ty: Ty<'tcx>,\n+    old_info: Option<Value>,\n+) -> (Value, Value) {\n+    assert!(\n+        matches!(dst_ty.kind(), ty::Dynamic(_, _, ty::DynStar)),\n+        \"destination type must be a dyn*\"\n+    );\n+    (src, unsized_info(fx, src_ty_and_layout.ty, dst_ty, old_info))\n+}\n+\n /// Coerce `src`, which is a reference to a value of type `src_ty`,\n /// to a value of type `dst_ty` and store the result in `dst`\n pub(crate) fn coerce_unsized_into<'tcx>(\n@@ -152,14 +172,16 @@ pub(crate) fn coerce_dyn_star<'tcx>(\n     src: CValue<'tcx>,\n     dst: CPlace<'tcx>,\n ) {\n-    let data = src.load_scalar(fx);\n-\n-    let vtable = if let ty::Dynamic(data, _, ty::DynStar) = dst.layout().ty.kind() {\n-        crate::vtable::get_vtable(fx, src.layout().ty, data.principal())\n+    let (data, extra) = if let ty::Dynamic(_, _, ty::DynStar) = src.layout().ty.kind() {\n+        let (data, vtable) = src.load_scalar_pair(fx);\n+        (data, Some(vtable))\n     } else {\n-        bug!(\"Only valid to do a DynStar cast into a DynStar type\")\n+        let data = src.load_scalar(fx);\n+        (data, None)\n     };\n \n+    let (data, vtable) = cast_to_dyn_star(fx, data, src.layout(), dst.layout().ty, extra);\n+\n     dst.write_cvalue(fx, CValue::by_val_pair(data, vtable, dst.layout()));\n }\n "}]}