{"sha": "385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NWVmMTUxNGM4MGZiOGMwY2IwNjFkYzY5ZWIxZDk1M2E4NGUyYjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-28T23:30:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-28T23:30:15Z"}, "message": "Auto merge of #47663 - malbarbo:mips-crt-static, r=alexcrichton\n\nDo not assume dynamic linking for musl/mips[el] targets\n\nAll musl targets except mips[el] assume static linking by default. This can be [confusing](https://users.rust-lang.org/t/static-cross-compiled-binaries-arent-really-static/6084).\n\nWhen the musl/mips[el] targets was [added](https://github.com/rust-lang/rust/pull/31298), dynamic linking was chosen because of binary size concerns, and probably also because libunwind [didn't](https://users.rust-lang.org/t/static-cross-compiled-binaries-arent-really-static/6084/8) supported mips.\n\nNow that we have `crt-static` target-feature (the user can choose dynamic link for musl targets), and libunwind [6.0](https://github.com/llvm-mirror/libunwind/commits/release_60) add support to mips, we do not need to assume dynamic linking.", "tree": {"sha": "cd6e3660ce89bcbe652f330b5a56ac2bacc14e2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd6e3660ce89bcbe652f330b5a56ac2bacc14e2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "html_url": "https://github.com/rust-lang/rust/commit/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21882aad7299e8e859785845ac12374990f24dae", "url": "https://api.github.com/repos/rust-lang/rust/commits/21882aad7299e8e859785845ac12374990f24dae", "html_url": "https://github.com/rust-lang/rust/commit/21882aad7299e8e859785845ac12374990f24dae"}, {"sha": "2875f825fd5a29d94bbfd78b1019ebdedd8d2444", "url": "https://api.github.com/repos/rust-lang/rust/commits/2875f825fd5a29d94bbfd78b1019ebdedd8d2444", "html_url": "https://github.com/rust-lang/rust/commit/2875f825fd5a29d94bbfd78b1019ebdedd8d2444"}], "stats": {"total": 130, "additions": 56, "deletions": 74}, "files": [{"sha": "cb236cd7e73eb921353f3d6dc0ad789f6c0f3c00", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "patch": "@@ -80,7 +80,7 @@ impl Step for Std {\n \n             // Even if we're not building std this stage, the new sysroot must\n             // still contain the musl startup objects.\n-            if target.contains(\"musl\") && !target.contains(\"mips\") {\n+            if target.contains(\"musl\") {\n                 let libdir = builder.sysroot_libdir(compiler, target);\n                 copy_musl_third_party_objects(build, target, &libdir);\n             }\n@@ -97,7 +97,7 @@ impl Step for Std {\n         println!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n                 &compiler.host, target);\n \n-        if target.contains(\"musl\") && !target.contains(\"mips\") {\n+        if target.contains(\"musl\") {\n             let libdir = builder.sysroot_libdir(compiler, target);\n             copy_musl_third_party_objects(build, target, &libdir);\n         }"}, {"sha": "9a4b5e786e1923f697b24745bfab2c1c9445c344", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "patch": "@@ -120,6 +120,10 @@ def v(*args):\n   \"armv7-unknown-linux-musleabihf install directory\")\n v(\"musl-root-aarch64\", \"target.aarch64-unknown-linux-musl.musl-root\",\n   \"aarch64-unknown-linux-musl install directory\")\n+v(\"musl-root-mips\", \"target.mips-unknown-linux-musl.musl-root\",\n+  \"mips-unknown-linux-musl install directory\")\n+v(\"musl-root-mipsel\", \"target.mipsel-unknown-linux-musl.musl-root\",\n+  \"mipsel-unknown-linux-musl install directory\")\n v(\"qemu-armhf-rootfs\", \"target.arm-unknown-linux-gnueabihf.qemu-rootfs\",\n   \"rootfs in qemu testing, you probably don't want to use this\")\n v(\"qemu-aarch64-rootfs\", \"target.aarch64-unknown-linux-gnu.qemu-rootfs\","}, {"sha": "5184cca653c4b156b55dded68955fff8921897f4", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "patch": "@@ -170,7 +170,7 @@ pub fn check(build: &mut Build) {\n         }\n \n         // Make sure musl-root is valid\n-        if target.contains(\"musl\") && !target.contains(\"mips\") {\n+        if target.contains(\"musl\") {\n             // If this is a native target (host is also musl) and no musl-root is given,\n             // fall back to the system toolchain in /usr before giving up\n             if build.musl_root(*target).is_none() && build.config.build == *target {"}, {"sha": "035846b4f6437bc2abd2c7d068e97900e207bf27", "filename": "src/ci/docker/dist-i586-gnu-i586-i686-musl/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Fci%2Fdocker%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Fci%2Fdocker%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile?ref=385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "patch": "@@ -18,10 +18,10 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n \n WORKDIR /build/\n COPY scripts/musl.sh /build/\n-RUN CC=gcc CFLAGS=\"-m32 -fPIC -Wa,-mrelax-relocations=no\" \\\n+RUN CC=gcc CFLAGS=\"-m32 -Wa,-mrelax-relocations=no\" \\\n     CXX=g++ CXXFLAGS=\"-m32 -Wa,-mrelax-relocations=no\" \\\n     bash musl.sh i686 --target=i686 && \\\n-    CC=gcc CFLAGS=\"-march=pentium -m32 -fPIC -Wa,-mrelax-relocations=no\" \\\n+    CC=gcc CFLAGS=\"-march=pentium -m32 -Wa,-mrelax-relocations=no\" \\\n     CXX=g++ CXXFLAGS=\"-march=pentium -m32 -Wa,-mrelax-relocations=no\" \\\n     bash musl.sh i586 --target=i586 && \\\n     rm -rf /build"}, {"sha": "64c993860d9e198d9b4167063e5ced6bc38649c8", "filename": "src/ci/docker/dist-various-1/Dockerfile", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile?ref=385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "patch": "@@ -30,6 +30,15 @@ RUN ./build-rumprun.sh\n COPY dist-various-1/install-x86_64-redox.sh /build\n RUN ./install-x86_64-redox.sh\n \n+COPY dist-various-1/install-mips-musl.sh /build\n+RUN ./install-mips-musl.sh\n+\n+COPY dist-various-1/install-mipsel-musl.sh /build\n+RUN ./install-mipsel-musl.sh\n+\n+# Suppress some warnings in the openwrt toolchains we downloaded\n+ENV STAGING_DIR=/tmp\n+\n COPY scripts/musl.sh /build\n RUN env \\\n     CC=arm-linux-gnueabi-gcc CFLAGS=\"-march=armv6 -marm\" \\\n@@ -47,14 +56,16 @@ RUN env \\\n     CC=aarch64-linux-gnu-gcc \\\n     CXX=aarch64-linux-gnu-g++ \\\n     bash musl.sh aarch64 && \\\n+    env \\\n+    CC=mips-openwrt-linux-gcc \\\n+    CXX=mips-openwrt-linux-g++ \\\n+    bash musl.sh mips && \\\n+    env \\\n+    CC=mipsel-openwrt-linux-gcc \\\n+    CXX=mipsel-openwrt-linux-g++ \\\n+    bash musl.sh mipsel && \\\n     rm -rf /build/*\n \n-COPY dist-various-1/install-mips-musl.sh /build\n-RUN ./install-mips-musl.sh\n-\n-COPY dist-various-1/install-mipsel-musl.sh /build\n-RUN ./install-mipsel-musl.sh\n-\n ENV TARGETS=asmjs-unknown-emscripten\n ENV TARGETS=$TARGETS,wasm32-unknown-emscripten\n ENV TARGETS=$TARGETS,x86_64-rumprun-netbsd\n@@ -77,16 +88,15 @@ ENV CC_mipsel_unknown_linux_musl=mipsel-openwrt-linux-gcc \\\n     CC_armv5te_unknown_linux_gnueabi=arm-linux-gnueabi-gcc \\\n     CFLAGS_armv5te_unknown_linux_gnueabi=\"-march=armv5te -marm -mfloat-abi=soft\"\n \n-# Suppress some warnings in the openwrt toolchains we downloaded\n-ENV STAGING_DIR=/tmp\n-\n ENV RUST_CONFIGURE_ARGS \\\n-      --enable-extended \\\n       --target=$TARGETS \\\n       --musl-root-arm=/musl-arm \\\n       --musl-root-armhf=/musl-armhf \\\n       --musl-root-armv7=/musl-armv7 \\\n-      --musl-root-aarch64=/musl-aarch64\n+      --musl-root-aarch64=/musl-aarch64 \\\n+      --musl-root-mips=/musl-mips \\\n+      --musl-root-mipsel=/musl-mipsel\n+\n ENV SCRIPT python2.7 ../x.py dist --target $TARGETS\n \n # sccache"}, {"sha": "c1061309c30f85a9b5de068dc901e52b0cce4a45", "filename": "src/ci/docker/dist-x86_64-musl/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile?ref=385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "patch": "@@ -21,7 +21,7 @@ WORKDIR /build/\n COPY scripts/musl.sh /build/\n # We need to mitigate rust-lang/rust#34978 when compiling musl itself as well\n RUN CC=gcc \\\n-    CFLAGS=\"-fPIC -Wa,-mrelax-relocations=no\" \\\n+    CFLAGS=\"-Wa,-mrelax-relocations=no\" \\\n     CXX=g++ \\\n     CXXFLAGS=\"-Wa,-mrelax-relocations=no\" \\\n     bash musl.sh x86_64 && rm -rf /build"}, {"sha": "fb0bd06ce309924458212dcee487bb8daddbca6a", "filename": "src/ci/docker/scripts/musl.sh", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh?ref=385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "patch": "@@ -30,6 +30,8 @@ exit 1\n TAG=$1\n shift\n \n+export CFLAGS=\"-fPIC $CFLAGS\"\n+\n MUSL=musl-1.1.18\n \n # may have been downloaded in a previous run\n@@ -49,42 +51,12 @@ hide_output make clean\n \n cd ..\n \n-LLVM=39\n+LLVM=60\n+\n # may have been downloaded in a previous run\n if [ ! -d libunwind-release_$LLVM ]; then\n   curl -L https://github.com/llvm-mirror/llvm/archive/release_$LLVM.tar.gz | tar xzf -\n   curl -L https://github.com/llvm-mirror/libunwind/archive/release_$LLVM.tar.gz | tar xzf -\n-  # Whoa what's this mysterious patch we're applying to libunwind! Why are we\n-  # swapping the values of ESP/EBP in libunwind?!\n-  #\n-  # Discovered in #35599 it turns out that the vanilla build of libunwind is not\n-  # suitable for unwinding i686 musl. After some investigation it ended up\n-  # looking like the register values for ESP/EBP were indeed incorrect (swapped)\n-  # in the source. Similar commits in libunwind (r280099 and r282589) have noticed\n-  # this for other platforms, and we just need to realize it for musl linux as\n-  # well.\n-  #\n-  # More technical info can be found at #35599\n-  cd libunwind-release_$LLVM\n-  patch -Np1 << EOF\n-diff --git a/include/libunwind.h b/include/libunwind.h\n-index c5b9633..1360eb2 100644\n---- a/include/libunwind.h\n-+++ b/include/libunwind.h\n-@@ -151,8 +151,8 @@ enum {\n-   UNW_X86_ECX = 1,\n-   UNW_X86_EDX = 2,\n-   UNW_X86_EBX = 3,\n--  UNW_X86_EBP = 4,\n--  UNW_X86_ESP = 5,\n-+  UNW_X86_ESP = 4,\n-+  UNW_X86_EBP = 5,\n-   UNW_X86_ESI = 6,\n-   UNW_X86_EDI = 7\n- };\n-fi\n-EOF\n-  cd ..\n fi\n \n mkdir libunwind-build"}, {"sha": "56444a4545bd71430d64b86b8a71714cfdbe9f5d", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "patch": "@@ -1 +1 @@\n-Subproject commit 2b4cd1016bdba92becb4f982a4dcb18fe6653bc4\n+Subproject commit 56444a4545bd71430d64b86b8a71714cfdbe9f5d"}, {"sha": "80168d4af4b1bac77b0b6cdc5b57ce2c46a398b7", "filename": "src/librustc_back/target/mips_unknown_linux_musl.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_musl.rs?ref=385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "patch": "@@ -9,9 +9,16 @@\n // except according to those terms.\n \n use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n+    let mut base = super::linux_musl_base::opts();\n+    base.cpu = \"mips32r2\".to_string();\n+    base.features = \"+mips32r2,+soft-float\".to_string();\n+    base.max_atomic_width = Some(32);\n+    // see #36994\n+    base.exe_allocation_crate = None;\n+    base.crt_static_default = false;\n     Ok(Target {\n         llvm_target: \"mips-unknown-linux-musl\".to_string(),\n         target_endian: \"big\".to_string(),\n@@ -23,15 +30,6 @@ pub fn target() -> TargetResult {\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions {\n-            cpu: \"mips32r2\".to_string(),\n-            features: \"+mips32r2,+soft-float\".to_string(),\n-            max_atomic_width: Some(32),\n-\n-            // see #36994\n-            exe_allocation_crate: None,\n-\n-            ..super::linux_base::opts()\n-        }\n+        options: base,\n     })\n }"}, {"sha": "b09d96eb9cbcbfd264c38adb41feb89f710d2cf3", "filename": "src/librustc_back/target/mipsel_unknown_linux_musl.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_musl.rs?ref=385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "patch": "@@ -9,9 +9,16 @@\n // except according to those terms.\n \n use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n+    let mut base = super::linux_musl_base::opts();\n+    base.cpu = \"mips32\".to_string();\n+    base.features = \"+mips32,+soft-float\".to_string();\n+    base.max_atomic_width = Some(32);\n+    // see #36994\n+    base.exe_allocation_crate = None;\n+    base.crt_static_default = false;\n     Ok(Target {\n         llvm_target: \"mipsel-unknown-linux-musl\".to_string(),\n         target_endian: \"little\".to_string(),\n@@ -23,15 +30,6 @@ pub fn target() -> TargetResult {\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions {\n-            cpu: \"mips32\".to_string(),\n-            features: \"+mips32,+soft-float\".to_string(),\n-            max_atomic_width: Some(32),\n-\n-            // see #36994\n-            exe_allocation_crate: None,\n-\n-            ..super::linux_base::opts()\n-        }\n+        options: base,\n     })\n }"}, {"sha": "11c4c2faf134278e0650a1163b3b54c28c6bfad5", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n \n     if target.contains(\"linux\") {\n-        if target.contains(\"musl\") && !target.contains(\"mips\") {\n+        if target.contains(\"musl\") {\n             // musl is handled in lib.rs\n         } else if !target.contains(\"android\") {\n             println!(\"cargo:rustc-link-lib=gcc_s\");"}, {"sha": "5347c781218ce4b947f10a3d2e11529a686abf04", "filename": "src/libunwind/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Flibunwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3/src%2Flibunwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flib.rs?ref=385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "patch": "@@ -35,7 +35,7 @@ cfg_if! {\n     }\n }\n \n-#[cfg(all(target_env = \"musl\", not(target_arch = \"mips\")))]\n+#[cfg(target_env = \"musl\")]\n #[link(name = \"unwind\", kind = \"static\", cfg(target_feature = \"crt-static\"))]\n #[link(name = \"gcc_s\", cfg(not(target_feature = \"crt-static\")))]\n extern {}"}]}