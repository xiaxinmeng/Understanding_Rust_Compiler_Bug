{"sha": "2083e2a6473ea9d2fc65097844c9e0fec899b225", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwODNlMmE2NDczZWE5ZDJmYzY1MDk3ODQ0YzllMGZlYzg5OWIyMjU=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2019-09-09T22:27:33Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2019-11-26T21:35:33Z"}, "message": "Stabilize nested self receivers\n\nPreviously, only Self, &Self, &mut Self, Arc<Self>, Rc<Self>,\nand Box<Self> were available as stable method receivers.\n\nThis commit stabilizes nested uses of all the above types.\nHowever, nested receivers remain non-object-safe.", "tree": {"sha": "2ee71e41d080a7a5c8f2b1079fb5a816be35f40f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ee71e41d080a7a5c8f2b1079fb5a816be35f40f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2083e2a6473ea9d2fc65097844c9e0fec899b225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2083e2a6473ea9d2fc65097844c9e0fec899b225", "html_url": "https://github.com/rust-lang/rust/commit/2083e2a6473ea9d2fc65097844c9e0fec899b225", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2083e2a6473ea9d2fc65097844c9e0fec899b225/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "797fd92628842c1f5face9fb93b0fe4f1f9d297f", "url": "https://api.github.com/repos/rust-lang/rust/commits/797fd92628842c1f5face9fb93b0fe4f1f9d297f", "html_url": "https://github.com/rust-lang/rust/commit/797fd92628842c1f5face9fb93b0fe4f1f9d297f"}], "stats": {"total": 533, "additions": 214, "deletions": 319}, "files": [{"sha": "f25dfa733c4b85ab946d1c3b694e564400be78f2", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 48, "deletions": 31, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -2,7 +2,7 @@ use crate::check::{Inherited, FnCtxt};\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n use crate::hir::def_id::DefId;\n-use rustc::traits::{self, ObligationCauseCode};\n+use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, TypeFoldable, ToPredicate};\n use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n@@ -895,6 +895,11 @@ fn receiver_is_valid<'fcx, 'tcx>(\n     // The first type is `receiver_ty`, which we know its not equal to `self_ty`; skip it.\n     autoderef.next();\n \n+    let receiver_trait_def_id = fcx.tcx.require_lang_item(\n+        lang_items::ReceiverTraitLangItem,\n+        None,\n+    );\n+\n     // Keep dereferencing `receiver_ty` until we get to `self_ty`.\n     loop {\n         if let Some((potential_self_ty, _)) = autoderef.next() {\n@@ -911,6 +916,19 @@ fn receiver_is_valid<'fcx, 'tcx>(\n                 }\n \n                 break\n+            } else {\n+                // Without `feature(arbitrary_self_types)`, we require that each step in the\n+                // deref chain implement `receiver`\n+                if !arbitrary_self_types_enabled\n+                    && !receiver_is_implemented(\n+                        fcx,\n+                        receiver_trait_def_id,\n+                        cause.clone(),\n+                        potential_self_ty,\n+                    )\n+                {\n+                    return false\n+                }\n             }\n         } else {\n             debug!(\"receiver_is_valid: type `{:?}` does not deref to `{:?}`\",\n@@ -919,43 +937,42 @@ fn receiver_is_valid<'fcx, 'tcx>(\n             // unecessary errors (#58712).\n             return receiver_ty.references_error();\n         }\n-\n-        // Without the `arbitrary_self_types` feature, `receiver_ty` must directly deref to\n-        // `self_ty`. Enforce this by only doing one iteration of the loop.\n-        if !arbitrary_self_types_enabled {\n-            return false\n-        }\n     }\n \n     // Without `feature(arbitrary_self_types)`, we require that `receiver_ty` implements `Receiver`.\n-    if !arbitrary_self_types_enabled {\n-        let trait_def_id = match fcx.tcx.lang_items().receiver_trait() {\n-            Some(did) => did,\n-            None => {\n-                debug!(\"receiver_is_valid: missing Receiver trait\");\n-                return false\n-            }\n-        };\n+    if !arbitrary_self_types_enabled\n+        && !receiver_is_implemented(fcx, receiver_trait_def_id, cause.clone(), receiver_ty)\n+    {\n+        return false\n+    }\n \n-        let trait_ref = ty::TraitRef{\n-            def_id: trait_def_id,\n-            substs: fcx.tcx.mk_substs_trait(receiver_ty, &[]),\n-        };\n+    true\n+}\n+\n+fn receiver_is_implemented(\n+    fcx: &FnCtxt<'_, 'tcx>,\n+    receiver_trait_def_id: DefId,\n+    cause: ObligationCause<'tcx>,\n+    receiver_ty: Ty<'tcx>,\n+) -> bool {\n+    let trait_ref = ty::TraitRef{\n+        def_id: receiver_trait_def_id,\n+        substs: fcx.tcx.mk_substs_trait(receiver_ty, &[]),\n+    };\n \n-        let obligation = traits::Obligation::new(\n-            cause,\n-            fcx.param_env,\n-            trait_ref.to_predicate()\n-        );\n+    let obligation = traits::Obligation::new(\n+        cause,\n+        fcx.param_env,\n+        trait_ref.to_predicate()\n+    );\n \n-        if !fcx.predicate_must_hold_modulo_regions(&obligation) {\n-            debug!(\"receiver_is_valid: type `{:?}` does not implement `Receiver` trait\",\n-                receiver_ty);\n-            return false\n-        }\n+    if fcx.predicate_must_hold_modulo_regions(&obligation) {\n+        true\n+    } else {\n+        debug!(\"receiver_is_implemented: type `{:?}` does not implement `Receiver` trait\",\n+            receiver_ty);\n+        false\n     }\n-\n-    true\n }\n \n fn check_variances_for_type_defn<'tcx>("}, {"sha": "653ccb9db949aceed4a80d236a12d2bc75d6986e", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/arbitrary-self-types-not-object-safe.rs:34:32\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:33:32\n    |\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |        --- method `foo`'s `self` parameter cannot be dispatched on\n@@ -8,7 +8,7 @@ LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |                                ^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n \n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/arbitrary-self-types-not-object-safe.rs:34:13\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:33:13\n    |\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |        --- method `foo`'s `self` parameter cannot be dispatched on"}, {"sha": "33f1fa2e51be3545b548706a2c0f627c352075eb", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/arbitrary-self-types-not-object-safe.rs:34:13\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:33:13\n    |\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |        --- method `foo`'s `self` parameter cannot be dispatched on"}, {"sha": "40e8df3395f6e6294cf19f1c752c784f4529b86d", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,7 +1,6 @@\n // revisions: curr object_safe_for_dispatch\n \n #![cfg_attr(object_safe_for_dispatch, feature(object_safe_for_dispatch))]\n-#![feature(arbitrary_self_types)]\n \n use std::rc::Rc;\n "}, {"sha": "353da8fd20b22131a60f2ec2c8db5184d9a9ddc6", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/arbitrary-self-types-not-object-safe.rs:31:32\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:29:32\n    |\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |        --- method `foo`'s `self` parameter cannot be dispatched on\n@@ -8,7 +8,7 @@ LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |                                ^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n \n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/arbitrary-self-types-not-object-safe.rs:31:13\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:29:13\n    |\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |        --- method `foo`'s `self` parameter cannot be dispatched on"}, {"sha": "680196fbb92f644573259277bc92ade071f64398", "filename": "src/test/ui/self/arbitrary_self_types_nested.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_nested.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -0,0 +1,36 @@\n+// run-pass\n+\n+use {\n+    std::{\n+        rc::Rc,\n+        sync::Arc,\n+    },\n+};\n+\n+#[derive(Default)]\n+struct Ty;\n+\n+trait Trait {\n+    fn receive_trait(self: &Arc<Rc<Box<Self>>>) -> u32;\n+}\n+\n+const TRAIT_MAGIC: u32 = 42;\n+const INHERENT_MAGIC: u32 = 1995;\n+\n+impl Trait for Ty {\n+    fn receive_trait(self: &Arc<Rc<Box<Self>>>) -> u32 {\n+        TRAIT_MAGIC\n+    }\n+}\n+\n+impl Ty {\n+    fn receive_inherent(self: &Arc<Rc<Box<Self>>>) -> u32 {\n+        INHERENT_MAGIC\n+    }\n+}\n+\n+fn main() {\n+    let ty = <Arc<Rc<Box<Ty>>>>::default();\n+    assert_eq!(TRAIT_MAGIC, ty.receive_trait());\n+    assert_eq!(INHERENT_MAGIC, ty.receive_inherent());\n+}"}, {"sha": "905ad83b659d4fafb3efd2b05f3ba10be1d2c97d", "filename": "src/test/ui/self/arbitrary_self_types_struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_struct.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(arbitrary_self_types)]\n \n use std::rc::Rc;\n "}, {"sha": "973c7cae85a94a5168fc2a9f33dfcc850b848890", "filename": "src/test/ui/self/arbitrary_self_types_trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_trait.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(arbitrary_self_types)]\n \n use std::rc::Rc;\n "}, {"sha": "d43f3132890b5ead536e23122d48d4022185f2f2", "filename": "src/test/ui/self/arbitrary_self_types_unsized_struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_unsized_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_unsized_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_unsized_struct.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(arbitrary_self_types)]\n \n use std::rc::Rc;\n "}, {"sha": "7c0dd068623f358f5fb989f839316f221210a1d5", "filename": "src/test/ui/self/elision/alias-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "0c801d7023212b0774a918d3a32be93307924a43", "filename": "src/test/ui/self/elision/alias.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Falias.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "363b7fc2aaeb23c20e43839592b945ef29c12fce", "filename": "src/test/ui/self/elision/assoc-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "fa39a2b478b1ef2c57cac95d92a853c9cbf37072", "filename": "src/test/ui/self/elision/assoc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "3a6f8471e66423622ad1c36bd1c83ee8bf11a876", "filename": "src/test/ui/self/elision/lt-alias-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "bbba88e4e5bb9d7e9dbcfb8cd6e02e11d1d60e88", "filename": "src/test/ui/self/elision/lt-alias.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "0d3ff630d14e7f500e490a544318b6a322dfeaa5", "filename": "src/test/ui/self/elision/lt-assoc-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "8f3543135365c33ec1e2d37156f3292f0dbe504d", "filename": "src/test/ui/self/elision/lt-assoc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "1288759703f69f4679a3b3f023c1f9afa6887e19", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:13:42\n+  --> $DIR/lt-ref-self-async.rs:12:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:14:9\n+  --> $DIR/lt-ref-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -\n@@ -18,15 +18,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:19:48\n+  --> $DIR/lt-ref-self-async.rs:18:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                                ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:20:9\n+  --> $DIR/lt-ref-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -\n@@ -37,15 +37,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:23:57\n+  --> $DIR/lt-ref-self-async.rs:22:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:24:9\n+  --> $DIR/lt-ref-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -\n@@ -56,15 +56,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:27:57\n+  --> $DIR/lt-ref-self-async.rs:26:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:28:9\n+  --> $DIR/lt-ref-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -\n@@ -75,15 +75,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:31:66\n+  --> $DIR/lt-ref-self-async.rs:30:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:32:9\n+  --> $DIR/lt-ref-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -\n@@ -94,15 +94,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:35:62\n+  --> $DIR/lt-ref-self-async.rs:34:62\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                              ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:36:9\n+  --> $DIR/lt-ref-self-async.rs:35:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                         -"}, {"sha": "ef6cbe7772c276cb7960840beda83782113b09f3", "filename": "src/test/ui/self/elision/lt-ref-self-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "badd973c37f088f3437ae8f151dc7847acabaa6e", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:14:9\n+  --> $DIR/lt-ref-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -----              ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:20:9\n+  --> $DIR/lt-ref-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:24:9\n+  --> $DIR/lt-ref-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:28:9\n+  --> $DIR/lt-ref-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:32:9\n+  --> $DIR/lt-ref-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ----\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:36:9\n+  --> $DIR/lt-ref-self-async.rs:35:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                         -----                ----"}, {"sha": "a0c56f2221850e50fd03b9316ae9f7edd5a21115", "filename": "src/test/ui/self/elision/lt-ref-self.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:12:9\n+  --> $DIR/lt-ref-self.rs:11:9\n    |\n LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                 -         - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:18:9\n+  --> $DIR/lt-ref-self.rs:17:9\n    |\n LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                       -         - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:22:9\n+  --> $DIR/lt-ref-self.rs:21:9\n    |\n LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                               -          - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:26:9\n+  --> $DIR/lt-ref-self.rs:25:9\n    |\n LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                               -          - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:30:9\n+  --> $DIR/lt-ref-self.rs:29:9\n    |\n LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                       -           - let's call the lifetime of this reference `'1`\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:34:9\n+  --> $DIR/lt-ref-self.rs:33:9\n    |\n LL |     fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                   -           - let's call the lifetime of this reference `'1`"}, {"sha": "423c7d5822df7389ba8fbf39210a39672caa30d9", "filename": "src/test/ui/self/elision/lt-ref-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,4 +1,3 @@\n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "f392580d422097b18960616012efaa9fa5b7af5c", "filename": "src/test/ui/self/elision/lt-ref-self.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:12:9\n+  --> $DIR/lt-ref-self.rs:11:9\n    |\n LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                           ----     ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:18:9\n+  --> $DIR/lt-ref-self.rs:17:9\n    |\n LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                 ----     ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:22:9\n+  --> $DIR/lt-ref-self.rs:21:9\n    |\n LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                          ----     ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:26:9\n+  --> $DIR/lt-ref-self.rs:25:9\n    |\n LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                          ----     ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:30:9\n+  --> $DIR/lt-ref-self.rs:29:9\n    |\n LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                   ----     ----\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:34:9\n+  --> $DIR/lt-ref-self.rs:33:9\n    |\n LL |     fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                               ----     ----"}, {"sha": "4cedaf79da3a3ede3b2058a4953f370ae0d0c176", "filename": "src/test/ui/self/elision/lt-self-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "cf74f892b8fcec57164d201a6fdad9a0a29031cb", "filename": "src/test/ui/self/elision/lt-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "abbee7fdfcb874e5ae3bf9a8167de4e3004f41ab", "filename": "src/test/ui/self/elision/lt-struct-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "799c6c079b34d6051c362e8b62a8b745782e9aa7", "filename": "src/test/ui/self/elision/lt-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "15f16525b6b1c078d693d4c217e14a5f6c662e87", "filename": "src/test/ui/self/elision/ref-alias-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,7 +1,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "341f5b52df0adfdebec2e08258fe6c2ea9dd9fb6", "filename": "src/test/ui/self/elision/ref-alias.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "ad10d8ba4f4e2b61d3856b10138d66f55c65825b", "filename": "src/test/ui/self/elision/ref-assoc-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,7 +1,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "2f02cb5f3c8af6dce4771b4bcc3717a62b411fc4", "filename": "src/test/ui/self/elision/ref-assoc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "2c3f971d26e8b134aec48083a34ce1d445c637b9", "filename": "src/test/ui/self/elision/ref-mut-alias-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,7 +1,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "ce1ab3ffccaba2c7ad4e11c488f8afd42b4808f1", "filename": "src/test/ui/self/elision/ref-mut-alias.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "24e3f7a098fb1e8966f4cb3bac4b2a73d8b3a97f", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:13:46\n+  --> $DIR/ref-mut-self-async.rs:12:46\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                                              ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:14:9\n+  --> $DIR/ref-mut-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       -\n@@ -18,15 +18,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:19:52\n+  --> $DIR/ref-mut-self-async.rs:18:52\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:20:9\n+  --> $DIR/ref-mut-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             -\n@@ -37,15 +37,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:23:61\n+  --> $DIR/ref-mut-self-async.rs:22:61\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:24:9\n+  --> $DIR/ref-mut-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     -\n@@ -56,15 +56,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:27:61\n+  --> $DIR/ref-mut-self-async.rs:26:61\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:28:9\n+  --> $DIR/ref-mut-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     -\n@@ -75,15 +75,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:31:70\n+  --> $DIR/ref-mut-self-async.rs:30:70\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:32:9\n+  --> $DIR/ref-mut-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             -\n@@ -94,15 +94,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:35:70\n+  --> $DIR/ref-mut-self-async.rs:34:70\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:36:9\n+  --> $DIR/ref-mut-self-async.rs:35:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             -"}, {"sha": "1e65605036d6f0b12ed49876184fc1886cbbb510", "filename": "src/test/ui/self/elision/ref-mut-self-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "73d942a83f89ac32d419f399d8232aefda6619c6", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:14:9\n+  --> $DIR/ref-mut-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       ---------              ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:20:9\n+  --> $DIR/ref-mut-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             ---------              ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:24:9\n+  --> $DIR/ref-mut-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:28:9\n+  --> $DIR/ref-mut-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:32:9\n+  --> $DIR/ref-mut-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ----\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:36:9\n+  --> $DIR/ref-mut-self-async.rs:35:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ----"}, {"sha": "4e7d7f521d2568045c25da8d5874ab0558babbf0", "filename": "src/test/ui/self/elision/ref-mut-self.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:12:9\n+  --> $DIR/ref-mut-self.rs:11:9\n    |\n LL |     fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                 -             - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:18:9\n+  --> $DIR/ref-mut-self.rs:17:9\n    |\n LL |     fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                       -             - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:22:9\n+  --> $DIR/ref-mut-self.rs:21:9\n    |\n LL |     fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                               -              - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:26:9\n+  --> $DIR/ref-mut-self.rs:25:9\n    |\n LL |     fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                               -              - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:30:9\n+  --> $DIR/ref-mut-self.rs:29:9\n    |\n LL |     fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                       -               - let's call the lifetime of this reference `'1`\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:34:9\n+  --> $DIR/ref-mut-self.rs:33:9\n    |\n LL |     fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                       -               - let's call the lifetime of this reference `'1`"}, {"sha": "8d9359dbd94b571c369a8cc34c20c1df2b514b67", "filename": "src/test/ui/self/elision/ref-mut-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,4 +1,3 @@\n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "46d849741ebe3d9fd863c386948de406b2cd31de", "filename": "src/test/ui/self/elision/ref-mut-self.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:12:9\n+  --> $DIR/ref-mut-self.rs:11:9\n    |\n LL |     fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                               ----     ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:18:9\n+  --> $DIR/ref-mut-self.rs:17:9\n    |\n LL |     fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                                     ----     ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:22:9\n+  --> $DIR/ref-mut-self.rs:21:9\n    |\n LL |     fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                              ----     ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:26:9\n+  --> $DIR/ref-mut-self.rs:25:9\n    |\n LL |     fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                              ----     ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:30:9\n+  --> $DIR/ref-mut-self.rs:29:9\n    |\n LL |     fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                                       ----     ----\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:34:9\n+  --> $DIR/ref-mut-self.rs:33:9\n    |\n LL |     fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                                       ----     ----"}, {"sha": "c0423d1d3e6691c94ee3d87d5a2569e6eb9c3d31", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:13:56\n+  --> $DIR/ref-mut-struct-async.rs:12:56\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                                                        ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:14:9\n+  --> $DIR/ref-mut-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               -\n@@ -18,15 +18,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:17:65\n+  --> $DIR/ref-mut-struct-async.rs:16:65\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:18:9\n+  --> $DIR/ref-mut-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -\n@@ -37,15 +37,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:21:65\n+  --> $DIR/ref-mut-struct-async.rs:20:65\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:22:9\n+  --> $DIR/ref-mut-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -\n@@ -56,15 +56,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:25:74\n+  --> $DIR/ref-mut-struct-async.rs:24:74\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:26:9\n+  --> $DIR/ref-mut-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -\n@@ -75,15 +75,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:29:74\n+  --> $DIR/ref-mut-struct-async.rs:28:74\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:30:9\n+  --> $DIR/ref-mut-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -"}, {"sha": "990f485907f8ec70cc9b534e13463af17c7b810b", "filename": "src/test/ui/self/elision/ref-mut-struct-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "7d613c574486ce2e03a48c8f7d29a7b33ef492ce", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:14:9\n+  --> $DIR/ref-mut-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               -----------              ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:18:9\n+  --> $DIR/ref-mut-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -----------               ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:22:9\n+  --> $DIR/ref-mut-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -----------               ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:26:9\n+  --> $DIR/ref-mut-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -----------                ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:30:9\n+  --> $DIR/ref-mut-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -----------                ----"}, {"sha": "cec7034cd9f9d2668ed011d8ec347f1350300427", "filename": "src/test/ui/self/elision/ref-mut-struct.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct.rs:12:9\n+  --> $DIR/ref-mut-struct.rs:11:9\n    |\n LL |     fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                         -               - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct.rs:16:9\n+  --> $DIR/ref-mut-struct.rs:15:9\n    |\n LL |     fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                 -                - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct.rs:20:9\n+  --> $DIR/ref-mut-struct.rs:19:9\n    |\n LL |     fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                 -                - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct.rs:24:9\n+  --> $DIR/ref-mut-struct.rs:23:9\n    |\n LL |     fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                         -                 - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct.rs:28:9\n+  --> $DIR/ref-mut-struct.rs:27:9\n    |\n LL |     fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                         -                 - let's call the lifetime of this reference `'1`"}, {"sha": "05e275b19e4c414d6cb422eed2a4db9ff9c769b6", "filename": "src/test/ui/self/elision/ref-mut-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,4 +1,3 @@\n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "c824f2cac983ea79ac85d7c70e7b081e27fbb0b7", "filename": "src/test/ui/self/elision/ref-mut-struct.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct.rs:12:9\n+  --> $DIR/ref-mut-struct.rs:11:9\n    |\n LL |     fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                                         ----     ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct.rs:16:9\n+  --> $DIR/ref-mut-struct.rs:15:9\n    |\n LL |     fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                                  ----     ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct.rs:20:9\n+  --> $DIR/ref-mut-struct.rs:19:9\n    |\n LL |     fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                                  ----     ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct.rs:24:9\n+  --> $DIR/ref-mut-struct.rs:23:9\n    |\n LL |     fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                           ----     ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct.rs:28:9\n+  --> $DIR/ref-mut-struct.rs:27:9\n    |\n LL |     fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                           ----     ----"}, {"sha": "46468b693ee980a964ce6421168686c445d45cb7", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "modified", "additions": 8, "deletions": 131, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,136 +1,13 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:22:42\n-   |\n-LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                                          ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n-error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:23:9\n-   |\n-LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                       -\n-   |                       |\n-   |                       lifetime `'_` defined here\n-   |                       lifetime `'_` defined here\n-LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:28:48\n-   |\n-LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                                                ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n-error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:29:9\n-   |\n-LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                             -\n-   |                             |\n-   |                             lifetime `'_` defined here\n-   |                             lifetime `'_` defined here\n-LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:32:57\n-   |\n-LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                                         ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n-error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:33:9\n-   |\n-LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                     -\n-   |                                     |\n-   |                                     lifetime `'_` defined here\n-   |                                     lifetime `'_` defined here\n-LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:36:57\n-   |\n-LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                                         ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n-error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:37:9\n-   |\n-LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                     -\n-   |                                     |\n-   |                                     lifetime `'_` defined here\n-   |                                     lifetime `'_` defined here\n-LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:40:66\n-   |\n-LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                                                  ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n-error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:41:9\n-   |\n-LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                             -\n-   |                                             |\n-   |                                             lifetime `'_` defined here\n-   |                                             lifetime `'_` defined here\n-LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:44:66\n-   |\n-LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                                                  ^^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n-error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:45:9\n-   |\n-LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                             -\n-   |                                             |\n-   |                                             lifetime `'_` defined here\n-   |                                             lifetime `'_` defined here\n-LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:48:69\n+error[E0658]: `Wrap<&Struct, Struct>` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n+  --> $DIR/ref-self-async.rs:47:39\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-   |                                                                     ^^^\n-   |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n-\n-error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:49:9\n+   |                                       ^^^^^^^^^^^^^^^^^\n    |\n-LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-   |                                            -\n-   |                                            |\n-   |                                            lifetime `'_` defined here\n-   |                                            lifetime `'_` defined here\n-LL |         f\n-   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n+   = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error: aborting due to 14 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0700`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "6a98b79cb3bbafeb08097042597104c997492fa2", "filename": "src/test/ui/self/elision/ref-self-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::marker::PhantomData;"}, {"sha": "b73290b024f8f285f762e624de7f473cb533ed59", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:23:9\n+  --> $DIR/ref-self-async.rs:22:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -----              ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:29:9\n+  --> $DIR/ref-self-async.rs:28:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:33:9\n+  --> $DIR/ref-self-async.rs:32:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:37:9\n+  --> $DIR/ref-self-async.rs:36:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:41:9\n+  --> $DIR/ref-self-async.rs:40:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ----\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:45:9\n+  --> $DIR/ref-self-async.rs:44:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ----\n@@ -59,7 +59,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:49:9\n+  --> $DIR/ref-self-async.rs:48:9\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                            -----                    ---"}, {"sha": "6f413a7f49fb8db518ebbc46f1df1643a15d915a", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:13:52\n+  --> $DIR/ref-struct-async.rs:12:52\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:14:9\n+  --> $DIR/ref-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               -\n@@ -18,15 +18,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:17:61\n+  --> $DIR/ref-struct-async.rs:16:61\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:18:9\n+  --> $DIR/ref-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       -\n@@ -37,15 +37,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:21:61\n+  --> $DIR/ref-struct-async.rs:20:61\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:22:9\n+  --> $DIR/ref-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       -\n@@ -56,15 +56,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:25:70\n+  --> $DIR/ref-struct-async.rs:24:70\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:26:9\n+  --> $DIR/ref-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               -\n@@ -75,15 +75,15 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:29:66\n+  --> $DIR/ref-struct-async.rs:28:66\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:30:9\n+  --> $DIR/ref-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                           -"}, {"sha": "e6bd5418c8d92b8b6986e41aecd277c12159ef22", "filename": "src/test/ui/self/elision/ref-struct-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "fc85450c4a7cde14668aa951960dc0913e002543", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:14:9\n+  --> $DIR/ref-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               -------              ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:18:9\n+  --> $DIR/ref-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       -------               ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:22:9\n+  --> $DIR/ref-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       -------               ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:26:9\n+  --> $DIR/ref-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               -------                ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:30:9\n+  --> $DIR/ref-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                           -------                ----"}, {"sha": "31bb9f49a6c4d5dea8f5438cf6a60ae4182c4c24", "filename": "src/test/ui/self/elision/ref-struct.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ref-struct.rs:12:9\n+  --> $DIR/ref-struct.rs:11:9\n    |\n LL |     fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                         -           - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct.rs:16:9\n+  --> $DIR/ref-struct.rs:15:9\n    |\n LL |     fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                 -            - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct.rs:20:9\n+  --> $DIR/ref-struct.rs:19:9\n    |\n LL |     fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                 -            - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct.rs:24:9\n+  --> $DIR/ref-struct.rs:23:9\n    |\n LL |     fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                         -             - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct.rs:28:9\n+  --> $DIR/ref-struct.rs:27:9\n    |\n LL |     fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                     -             - let's call the lifetime of this reference `'1`"}, {"sha": "73711a7feead3a8dfab0e6c3968c0647063b94b4", "filename": "src/test/ui/self/elision/ref-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,4 +1,3 @@\n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::pin::Pin;"}, {"sha": "a69673091431c43a6921362a8a8810441eefc37c", "filename": "src/test/ui/self/elision/ref-struct.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct.rs:12:9\n+  --> $DIR/ref-struct.rs:11:9\n    |\n LL |     fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                                     ----     ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct.rs:16:9\n+  --> $DIR/ref-struct.rs:15:9\n    |\n LL |     fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                              ----     ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct.rs:20:9\n+  --> $DIR/ref-struct.rs:19:9\n    |\n LL |     fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                              ----     ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct.rs:24:9\n+  --> $DIR/ref-struct.rs:23:9\n    |\n LL |     fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                                       ----     ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct.rs:28:9\n+  --> $DIR/ref-struct.rs:27:9\n    |\n LL |     fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                                   ----     ----"}, {"sha": "eb01cfc9768e64d06dd77b5b295be53c2206efaf", "filename": "src/test/ui/self/elision/self-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "574b7e7c9b3d66366053c771e44a52b20865c207", "filename": "src/test/ui/self/elision/self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fself.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "e018e0daf9620906d71d17dbd62c2e7bfb4a7930", "filename": "src/test/ui/self/elision/struct-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}, {"sha": "d1ac99d13be7fa039fc6f0a0a4be9ce527427c69", "filename": "src/test/ui/self/elision/struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2083e2a6473ea9d2fc65097844c9e0fec899b225/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct.rs?ref=2083e2a6473ea9d2fc65097844c9e0fec899b225", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n use std::rc::Rc;"}]}