{"sha": "f430e544561a430f267c9fbde20962cef4702332", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MzBlNTQ0NTYxYTQzMGYyNjdjOWZiZGUyMDk2MmNlZjQ3MDIzMzI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-20T14:54:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-20T15:15:37Z"}, "message": "implement mach_absolute_time for macOS", "tree": {"sha": "eab55f26a89e8964ddeaa6c4d3eb0c729002e377", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eab55f26a89e8964ddeaa6c4d3eb0c729002e377"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f430e544561a430f267c9fbde20962cef4702332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f430e544561a430f267c9fbde20962cef4702332", "html_url": "https://github.com/rust-lang/rust/commit/f430e544561a430f267c9fbde20962cef4702332", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f430e544561a430f267c9fbde20962cef4702332/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04c937e2813c5da2b003b272bff26b9d1f9ffca3", "url": "https://api.github.com/repos/rust-lang/rust/commits/04c937e2813c5da2b003b272bff26b9d1f9ffca3", "html_url": "https://github.com/rust-lang/rust/commit/04c937e2813c5da2b003b272bff26b9d1f9ffca3"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "0bb4710769d977675359d73d55efc5b224c3535f", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f430e544561a430f267c9fbde20962cef4702332/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f430e544561a430f267c9fbde20962cef4702332/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=f430e544561a430f267c9fbde20962cef4702332", "patch": "@@ -66,6 +66,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.gettimeofday(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n+            \"mach_absolute_time\" => {\n+                let result = this.mach_absolute_time()?;\n+                this.write_scalar(Scalar::from_uint(result, dest.layout.size), dest)?;\n+            }\n \n             // Other shims\n             \"pthread_attr_get_np\" => {"}, {"sha": "a5aae5ed90c3abd5b74d100e816e72bc54ca45cb", "filename": "src/shims/fs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f430e544561a430f267c9fbde20962cef4702332/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f430e544561a430f267c9fbde20962cef4702332/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=f430e544561a430f267c9fbde20962cef4702332", "patch": "@@ -574,8 +574,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         buf_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        this.check_no_isolation(\"stat\")?;\n         this.assert_platform(\"macos\", \"stat\");\n+        this.check_no_isolation(\"stat\")?;\n         // `stat` always follows symlinks.\n         this.macos_stat_or_lstat(true, path_op, buf_op)\n     }\n@@ -587,8 +587,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         buf_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        this.check_no_isolation(\"lstat\")?;\n         this.assert_platform(\"macos\", \"lstat\");\n+        this.check_no_isolation(\"lstat\")?;\n         this.macos_stat_or_lstat(false, path_op, buf_op)\n     }\n \n@@ -599,8 +599,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"fstat\")?;\n         this.assert_platform(\"macos\", \"fstat\");\n+        this.check_no_isolation(\"fstat\")?;\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n@@ -621,8 +621,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"statx\")?;\n         this.assert_platform(\"linux\", \"statx\");\n+        this.check_no_isolation(\"statx\")?;\n \n         let statxbuf_scalar = this.read_scalar(statxbuf_op)?.not_undef()?;\n         let pathname_scalar = this.read_scalar(pathname_op)?.not_undef()?;\n@@ -880,8 +880,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"readdir64_r\")?;\n         this.assert_platform(\"linux\", \"readdir64_r\");\n+        this.check_no_isolation(\"readdir64_r\")?;\n \n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n \n@@ -967,8 +967,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.check_no_isolation(\"readdir_r\")?;\n         this.assert_platform(\"macos\", \"readdir_r\");\n+        this.check_no_isolation(\"readdir_r\")?;\n \n         let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n "}, {"sha": "b270c9770f809adc555adfbf1293b394731ab075", "filename": "src/shims/time.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f430e544561a430f267c9fbde20962cef4702332/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f430e544561a430f267c9fbde20962cef4702332/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=f430e544561a430f267c9fbde20962cef4702332", "patch": "@@ -1,4 +1,5 @@\n use std::time::{Duration, SystemTime, Instant};\n+use std::convert::TryFrom;\n \n use crate::stacked_borrows::Tag;\n use crate::*;\n@@ -12,16 +13,15 @@ pub fn system_time_to_duration<'tcx>(time: &SystemTime) -> InterpResult<'tcx, Du\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n-    // Foreign function used by linux\n     fn clock_gettime(\n         &mut self,\n         clk_id_op: OpTy<'tcx, Tag>,\n         tp_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        this.assert_platform(\"linux\", \"clock_gettime\");\n         this.check_no_isolation(\"clock_gettime\")?;\n-        this.assert_platform(\"linux\");\n \n         let clk_id = this.read_scalar(clk_id_op)?.to_i32()?;\n         let tp = this.deref_operand(tp_op)?;\n@@ -50,16 +50,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         Ok(0)\n     }\n-    // Foreign function used by generic unix (in particular macOS)\n+\n     fn gettimeofday(\n         &mut self,\n         tv_op: OpTy<'tcx, Tag>,\n         tz_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        this.assert_platform(\"macos\", \"gettimeofday\");\n         this.check_no_isolation(\"gettimeofday\")?;\n-        this.assert_platform(\"macos\");\n \n         // Using tz is obsolete and should always be null\n         let tz = this.read_scalar(tz_op)?.not_undef()?;\n@@ -84,4 +84,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         Ok(0)\n     }\n+\n+    fn mach_absolute_time(&self) -> InterpResult<'tcx, u64> {\n+        let this = self.eval_context_ref();\n+\n+        this.assert_platform(\"macos\", \"mach_absolute_time\");\n+        this.check_no_isolation(\"mach_absolute_time\")?;\n+\n+        // This returns a u64, with time units determined dynamically by `mach_timebase_info`.\n+        // We return plain nanoseconds.\n+        let duration = Instant::now().duration_since(this.machine.time_anchor);\n+        u64::try_from(duration.as_nanos())\n+            .map_err(|_| err_unsup_format!(\"programs running longer than 2^64 nanoseconds are not supported\").into())\n+    }\n }"}]}