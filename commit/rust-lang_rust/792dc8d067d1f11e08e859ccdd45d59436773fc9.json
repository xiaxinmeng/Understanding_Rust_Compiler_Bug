{"sha": "792dc8d067d1f11e08e859ccdd45d59436773fc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MmRjOGQwNjdkMWYxMWUwOGU4NTljY2RkNDVkNTk0MzY3NzNmYzk=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-02-10T13:37:44Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-02-10T13:37:44Z"}, "message": "Made the `ptr::Unique` type accept unsized types, to allow for use cases\nlike sending a raw pointer slice across thread boundaries.", "tree": {"sha": "bec484d643168d295396b11fbdad73d6d80c8826", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec484d643168d295396b11fbdad73d6d80c8826"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/792dc8d067d1f11e08e859ccdd45d59436773fc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/792dc8d067d1f11e08e859ccdd45d59436773fc9", "html_url": "https://github.com/rust-lang/rust/commit/792dc8d067d1f11e08e859ccdd45d59436773fc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/792dc8d067d1f11e08e859ccdd45d59436773fc9/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de8bc44753881aacdaf435f5ba61de3c20916761", "url": "https://api.github.com/repos/rust-lang/rust/commits/de8bc44753881aacdaf435f5ba61de3c20916761", "html_url": "https://github.com/rust-lang/rust/commit/de8bc44753881aacdaf435f5ba61de3c20916761"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "bf801a88ca5b3e3c92961ae23a8e72f928fa962f", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/792dc8d067d1f11e08e859ccdd45d59436773fc9/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/792dc8d067d1f11e08e859ccdd45d59436773fc9/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=792dc8d067d1f11e08e859ccdd45d59436773fc9", "patch": "@@ -522,21 +522,21 @@ impl<T> PartialOrd for *mut T {\n /// Useful for building abstractions like `Vec<T>` or `Box<T>`, which\n /// internally use raw pointers to manage the memory that they own.\n #[unstable(feature = \"core\", reason = \"recently added to this module\")]\n-pub struct Unique<T>(pub *mut T);\n+pub struct Unique<T: ?Sized>(pub *mut T);\n \n /// `Unique` pointers are `Send` if `T` is `Send` because the data they\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n /// `Unique` must enforce it.\n #[unstable(feature = \"core\", reason = \"recently added to this module\")]\n-unsafe impl<T:Send> Send for Unique<T> { }\n+unsafe impl<T: Send + ?Sized> Send for Unique<T> { }\n \n /// `Unique` pointers are `Sync` if `T` is `Sync` because the data they\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n /// `Unique` must enforce it.\n #[unstable(feature = \"core\", reason = \"recently added to this module\")]\n-unsafe impl<T:Sync> Sync for Unique<T> { }\n+unsafe impl<T: Sync + ?Sized> Sync for Unique<T> { }\n \n impl<T> Unique<T> {\n     /// Returns a null Unique."}, {"sha": "2365b907b3ff5ba4468f951eb4ca7b661b9f8535", "filename": "src/libcoretest/ptr.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/792dc8d067d1f11e08e859ccdd45d59436773fc9/src%2Flibcoretest%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/792dc8d067d1f11e08e859ccdd45d59436773fc9/src%2Flibcoretest%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fptr.rs?ref=792dc8d067d1f11e08e859ccdd45d59436773fc9", "patch": "@@ -167,3 +167,12 @@ fn test_set_memory() {\n     unsafe { set_memory(ptr, 5u8, xs.len()); }\n     assert!(xs == [5u8; 20]);\n }\n+\n+#[test]\n+fn test_unsized_unique() {\n+    let xs: &mut [_] = &mut [1, 2, 3];\n+    let ptr = Unique(xs as *mut [_]);\n+    let ys = unsafe { &mut *ptr.0 };\n+    let zs: &mut [_] = &mut [1, 2, 3];\n+    assert!(ys == zs);\n+}"}]}