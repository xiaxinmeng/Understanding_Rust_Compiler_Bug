{"sha": "8fad8e897a8d3a5c2e55d3a00fb8465fb87f86bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYWQ4ZTg5N2E4ZDNhNWMyZTU1ZDNhMDBmYjg0NjVmYjg3Zjg2YmI=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-29T16:39:31Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-29T16:39:31Z"}, "message": "Resolve traits in infer using lang item infrastructure", "tree": {"sha": "45827d5c2e3b3f0fe51bdecb5df03fd1d3de3844", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45827d5c2e3b3f0fe51bdecb5df03fd1d3de3844"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fad8e897a8d3a5c2e55d3a00fb8465fb87f86bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fad8e897a8d3a5c2e55d3a00fb8465fb87f86bb", "html_url": "https://github.com/rust-lang/rust/commit/8fad8e897a8d3a5c2e55d3a00fb8465fb87f86bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fad8e897a8d3a5c2e55d3a00fb8465fb87f86bb/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc3ab03af74cb94a5ec94d84ec15650314f613eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc3ab03af74cb94a5ec94d84ec15650314f613eb", "html_url": "https://github.com/rust-lang/rust/commit/fc3ab03af74cb94a5ec94d84ec15650314f613eb"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "37e69599dae8429063dc1fad6a8e778815985906", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8fad8e897a8d3a5c2e55d3a00fb8465fb87f86bb/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fad8e897a8d3a5c2e55d3a00fb8465fb87f86bb/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=8fad8e897a8d3a5c2e55d3a00fb8465fb87f86bb", "patch": "@@ -24,6 +24,7 @@ use hir_def::{\n     body::Body,\n     data::{ConstData, FunctionData},\n     expr::{BindingAnnotation, ExprId, PatId},\n+    lang_item::LangItemTarget,\n     path::{path, Path},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{Mutability, TypeRef},\n@@ -32,6 +33,7 @@ use hir_def::{\n use hir_expand::{diagnostics::DiagnosticSink, name::name};\n use ra_arena::map::ArenaMap;\n use ra_prof::profile;\n+use ra_syntax::SmolStr;\n use test_utils::tested_by;\n \n use super::{\n@@ -482,6 +484,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.infer_expr_coerce(self.body.body_expr, &Expectation::has_type(self.return_ty.clone()));\n     }\n \n+    fn resolve_lang_item(&self, name: &str) -> Option<LangItemTarget> {\n+        let krate = self.resolver.krate()?;\n+        let name = SmolStr::new_inline_from_ascii(name.len(), name.as_bytes());\n+        self.db.lang_item(krate, name)\n+    }\n+\n     fn resolve_into_iter_item(&self) -> Option<TypeAliasId> {\n         let path = path![std::iter::IntoIterator];\n         let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n@@ -495,26 +503,22 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn resolve_ops_neg_output(&self) -> Option<TypeAliasId> {\n-        let path = path![std::ops::Neg];\n-        let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n+        let trait_ = self.resolve_lang_item(\"neg\")?.as_trait()?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n \n     fn resolve_ops_not_output(&self) -> Option<TypeAliasId> {\n-        let path = path![std::ops::Not];\n-        let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n+        let trait_ = self.resolve_lang_item(\"not\")?.as_trait()?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n \n     fn resolve_future_future_output(&self) -> Option<TypeAliasId> {\n-        let path = path![std::future::Future];\n-        let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n+        let trait_ = self.resolve_lang_item(\"future_trait\")?.as_trait()?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n \n     fn resolve_boxed_box(&self) -> Option<AdtId> {\n-        let path = path![std::boxed::Box];\n-        let struct_ = self.resolver.resolve_known_struct(self.db, &path)?;\n+        let struct_ = self.resolve_lang_item(\"owned_box\")?.as_struct()?;\n         Some(struct_.into())\n     }\n \n@@ -555,8 +559,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn resolve_ops_index_output(&self) -> Option<TypeAliasId> {\n-        let path = path![std::ops::Index];\n-        let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n+        let trait_ = self.resolve_lang_item(\"index\")?.as_trait()?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n }"}, {"sha": "f7e042c12b5b085667ba164f4e96de982cd6d7e4", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8fad8e897a8d3a5c2e55d3a00fb8465fb87f86bb/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fad8e897a8d3a5c2e55d3a00fb8465fb87f86bb/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=8fad8e897a8d3a5c2e55d3a00fb8465fb87f86bb", "patch": "@@ -20,6 +20,7 @@ fn test() {\n mod prelude {}\n \n mod boxed {\n+    #[lang = \"owned_box\"]\n     pub struct Box<T: ?Sized> {\n         inner: *mut T,\n     }"}, {"sha": "4b268510cf0a5d0a9933338f7a9d68c71afc556b", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fad8e897a8d3a5c2e55d3a00fb8465fb87f86bb/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fad8e897a8d3a5c2e55d3a00fb8465fb87f86bb/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=8fad8e897a8d3a5c2e55d3a00fb8465fb87f86bb", "patch": "@@ -27,6 +27,7 @@ fn test() {\n //- /std.rs crate:std\n #[prelude_import] use future::*;\n mod future {\n+    #[lang = \"future_trait\"]\n     trait Future {\n         type Output;\n     }\n@@ -56,6 +57,7 @@ fn test() {\n //- /std.rs crate:std\n #[prelude_import] use future::*;\n mod future {\n+    #[lang = \"future_trait\"]\n     trait Future {\n         type Output;\n     }\n@@ -198,6 +200,7 @@ fn test() {\n \n #[prelude_import] use ops::*;\n mod ops {\n+    #[lang = \"neg\"]\n     pub trait Neg {\n         type Output;\n     }\n@@ -230,6 +233,7 @@ fn test() {\n \n #[prelude_import] use ops::*;\n mod ops {\n+    #[lang = \"not\"]\n     pub trait Not {\n         type Output;\n     }\n@@ -506,6 +510,7 @@ fn test() {\n \n #[prelude_import] use ops::*;\n mod ops {\n+    #[lang = \"index\"]\n     pub trait Index<Idx> {\n         type Output;\n     }"}]}