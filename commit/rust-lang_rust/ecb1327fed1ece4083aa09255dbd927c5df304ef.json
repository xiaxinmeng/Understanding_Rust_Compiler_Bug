{"sha": "ecb1327fed1ece4083aa09255dbd927c5df304ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYjEzMjdmZWQxZWNlNDA4M2FhMDkyNTVkYmQ5MjdjNWRmMzA0ZWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-27T11:35:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-27T11:35:18Z"}, "message": "Overhaul installation process\n\nThe new commands are\n\n$ cargo install-ra --client-code\n$ cargo install-ra --server --jemalloc", "tree": {"sha": "c6a49bf13df5cd5529f9145391c7922ef17eb3a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6a49bf13df5cd5529f9145391c7922ef17eb3a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecb1327fed1ece4083aa09255dbd927c5df304ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecb1327fed1ece4083aa09255dbd927c5df304ef", "html_url": "https://github.com/rust-lang/rust/commit/ecb1327fed1ece4083aa09255dbd927c5df304ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecb1327fed1ece4083aa09255dbd927c5df304ef/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d23a7558702bcffd9c551bea444475f4a76ba201", "url": "https://api.github.com/repos/rust-lang/rust/commits/d23a7558702bcffd9c551bea444475f4a76ba201", "html_url": "https://github.com/rust-lang/rust/commit/d23a7558702bcffd9c551bea444475f4a76ba201"}], "stats": {"total": 186, "additions": 128, "deletions": 58}, "files": [{"sha": "92a3acfd0b743b169bcd0a1aeefce5ead0a21850", "filename": ".cargo/config", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ecb1327fed1ece4083aa09255dbd927c5df304ef/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/ecb1327fed1ece4083aa09255dbd927c5df304ef/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=ecb1327fed1ece4083aa09255dbd927c5df304ef", "patch": "@@ -1,23 +1,23 @@\n [alias]\n # Automatically generates the ast and syntax kinds files\n gen-syntax   = \"run --package ra_tools --bin ra_tools -- gen-syntax\"\n+\n # Extracts the tests from\n gen-tests    = \"run --package ra_tools --bin ra_tools -- gen-tests\"\n-# Installs ra_lsp_server\n-install-lsp = \"install --path crates/ra_lsp_server --force\"\n-# Installs ra_lsp_server with the jemalloc feature\n-jinstall-lsp = \"install --path crates/ra_lsp_server --force --features jemalloc\"\n+\n # Installs the visual studio code extension\n-install-code = \"run --package ra_tools --bin ra_tools -- install-code\"\n+install-ra   = \"run --package ra_tools --bin ra_tools -- install-ra\"\n+install-code = \"run --package ra_tools --bin ra_tools -- install-ra\" # just an alias\n+\n # Formats the full repository or installs the git hook to do it automatically.\n format       = \"run --package ra_tools --bin ra_tools -- format\"\n format-hook  = \"run --package ra_tools --bin ra_tools -- format-hook\"\n+\n # Run clippy\n lint         = \"run --package ra_tools --bin ra_tools -- lint\"\n \n # Runs the fuzzing test suite (currently only parser)\n fuzz-tests   = \"run --package ra_tools --bin ra_tools -- fuzz-tests\"\n \n-render-test  = \"run --package ra_cli -- render-test\"\n # Parse a file. This should be piped the file contents\n parse        = \"run --package ra_cli -- parse\""}, {"sha": "5e9537ef1e7f65598980a086c16578303ab763cf", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecb1327fed1ece4083aa09255dbd927c5df304ef/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/ecb1327fed1ece4083aa09255dbd927c5df304ef/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=ecb1327fed1ece4083aa09255dbd927c5df304ef", "patch": "@@ -32,10 +32,10 @@ For setup for other editors, see [./docs/user](./docs/user).\n $ git clone https://github.com/rust-analyzer/rust-analyzer && cd rust-analyzer\n \n # install both the language server and VS Code extension\n-$ cargo install-code\n+$ cargo install-ra\n \n # alternatively, install only the server. Binary name is `ra_lsp_server`.\n-$ cargo install-lsp\n+$ cargo install-ra --server\n ```\n ## Documentation\n "}, {"sha": "bb7845f7d96284e7c82dbc65f6c5fa03da4fb6de", "filename": "crates/ra_tools/src/lib.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ecb1327fed1ece4083aa09255dbd927c5df304ef/crates%2Fra_tools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb1327fed1ece4083aa09255dbd927c5df304ef/crates%2Fra_tools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Flib.rs?ref=ecb1327fed1ece4083aa09255dbd927c5df304ef", "patch": "@@ -79,6 +79,29 @@ pub fn project_root() -> PathBuf {\n     Path::new(&env!(\"CARGO_MANIFEST_DIR\")).ancestors().nth(2).unwrap().to_path_buf()\n }\n \n+pub struct Cmd {\n+    pub unix: &'static str,\n+    pub windows: &'static str,\n+    pub work_dir: &'static str,\n+}\n+\n+impl Cmd {\n+    pub fn run(self) -> Result<()> {\n+        if cfg!(windows) {\n+            run(self.windows, self.work_dir)\n+        } else {\n+            run(self.unix, self.work_dir)\n+        }\n+    }\n+    pub fn run_with_output(self) -> Result<Output> {\n+        if cfg!(windows) {\n+            run_with_output(self.windows, self.work_dir)\n+        } else {\n+            run_with_output(self.unix, self.work_dir)\n+        }\n+    }\n+}\n+\n pub fn run(cmdline: &str, dir: &str) -> Result<()> {\n     do_run(cmdline, dir, |c| {\n         c.stdout(Stdio::inherit());"}, {"sha": "59d4ea6d34a818f5401c24b32c9f808491621db3", "filename": "crates/ra_tools/src/main.rs", "status": "modified", "additions": 91, "deletions": 44, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/ecb1327fed1ece4083aa09255dbd927c5df304ef/crates%2Fra_tools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb1327fed1ece4083aa09255dbd927c5df304ef/crates%2Fra_tools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fmain.rs?ref=ecb1327fed1ece4083aa09255dbd927c5df304ef", "patch": "@@ -1,70 +1,73 @@\n-use clap::{App, SubCommand};\n+use clap::{App, Arg, SubCommand};\n use core::str;\n use ra_tools::{\n-    gen_tests, generate, install_format_hook, run, run_clippy, run_fuzzer, run_rustfmt,\n-    run_with_output, Overwrite, Result,\n+    gen_tests, generate, install_format_hook, run, run_clippy, run_fuzzer, run_rustfmt, Cmd,\n+    Overwrite, Result,\n };\n use std::{env, path::PathBuf};\n \n+struct InstallOpt {\n+    client: Option<ClientOpt>,\n+    server: Option<ServerOpt>,\n+}\n+\n+enum ClientOpt {\n+    VsCode,\n+}\n+\n+struct ServerOpt {\n+    jemalloc: bool,\n+}\n+\n fn main() -> Result<()> {\n     let matches = App::new(\"tasks\")\n         .setting(clap::AppSettings::SubcommandRequiredElseHelp)\n         .subcommand(SubCommand::with_name(\"gen-syntax\"))\n         .subcommand(SubCommand::with_name(\"gen-tests\"))\n-        .subcommand(SubCommand::with_name(\"install-code\"))\n+        .subcommand(\n+            SubCommand::with_name(\"install-ra\")\n+                .arg(Arg::with_name(\"server\").long(\"--server\"))\n+                .arg(Arg::with_name(\"jemalloc\").long(\"jemalloc\").requires(\"server\"))\n+                .arg(Arg::with_name(\"client-code\").long(\"client-code\").conflicts_with(\"server\")),\n+        )\n+        .alias(\"install-code\")\n         .subcommand(SubCommand::with_name(\"format\"))\n         .subcommand(SubCommand::with_name(\"format-hook\"))\n         .subcommand(SubCommand::with_name(\"fuzz-tests\"))\n         .subcommand(SubCommand::with_name(\"lint\"))\n         .get_matches();\n-    match matches.subcommand_name().expect(\"Subcommand must be specified\") {\n-        \"install-code\" => {\n-            if cfg!(target_os = \"macos\") {\n-                fix_path_for_mac()?;\n-            }\n-            install_code_extension()?;\n+    match matches.subcommand() {\n+        (\"install-ra\", Some(matches)) => {\n+            let opts = InstallOpt {\n+                client: if matches.is_present(\"server\") { None } else { Some(ClientOpt::VsCode) },\n+                server: if matches.is_present(\"client-code\") {\n+                    None\n+                } else {\n+                    Some(ServerOpt { jemalloc: matches.is_present(\"jemalloc\") })\n+                },\n+            };\n+            install(opts)?\n         }\n-        \"gen-tests\" => gen_tests(Overwrite)?,\n-        \"gen-syntax\" => generate(Overwrite)?,\n-        \"format\" => run_rustfmt(Overwrite)?,\n-        \"format-hook\" => install_format_hook()?,\n-        \"lint\" => run_clippy()?,\n-        \"fuzz-tests\" => run_fuzzer()?,\n+        (\"gen-tests\", _) => gen_tests(Overwrite)?,\n+        (\"gen-syntax\", _) => generate(Overwrite)?,\n+        (\"format\", _) => run_rustfmt(Overwrite)?,\n+        (\"format-hook\", _) => install_format_hook()?,\n+        (\"lint\", _) => run_clippy()?,\n+        (\"fuzz-tests\", _) => run_fuzzer()?,\n         _ => unreachable!(),\n     }\n     Ok(())\n }\n \n-fn install_code_extension() -> Result<()> {\n-    run(\"cargo install --path crates/ra_lsp_server --force\", \".\")?;\n-    if cfg!(windows) {\n-        run(r\"cmd.exe /c npm.cmd ci\", \"./editors/code\")?;\n-        run(r\"cmd.exe /c npm.cmd run package\", \"./editors/code\")?;\n-    } else {\n-        run(r\"npm ci\", \"./editors/code\")?;\n-        run(r\"npm run package\", \"./editors/code\")?;\n+fn install(opts: InstallOpt) -> Result<()> {\n+    if cfg!(target_os = \"macos\") {\n+        fix_path_for_mac()?\n     }\n-    if cfg!(windows) {\n-        run(\n-            r\"cmd.exe /c code.cmd --install-extension ./ra-lsp-0.0.1.vsix --force\",\n-            \"./editors/code\",\n-        )?;\n-    } else {\n-        run(r\"code --install-extension ./ra-lsp-0.0.1.vsix --force\", \"./editors/code\")?;\n+    if let Some(client) = opts.client {\n+        install_client(client)?;\n     }\n-    verify_installed_extensions()?;\n-    Ok(())\n-}\n-\n-fn verify_installed_extensions() -> Result<()> {\n-    let exts = if cfg!(windows) {\n-        run_with_output(r\"cmd.exe /c code.cmd --list-extensions\", \".\")?\n-    } else {\n-        run_with_output(r\"code --list-extensions\", \".\")?\n-    };\n-    if !str::from_utf8(&exts.stdout)?.contains(\"ra-lsp\") {\n-        Err(\"Could not install the Visual Studio Code extension. Please make sure you \\\n-             have at least NodeJS 10.x installed and try again.\")?;\n+    if let Some(server) = opts.server {\n+        install_server(server)?;\n     }\n     Ok(())\n }\n@@ -101,3 +104,47 @@ fn fix_path_for_mac() -> Result<()> {\n \n     Ok(())\n }\n+\n+fn install_client(ClientOpt::VsCode: ClientOpt) -> Result<()> {\n+    Cmd { unix: r\"npm ci\", windows: r\"cmd.exe /c npm.cmd ci\", work_dir: \"./editors/code\" }.run()?;\n+\n+    let code_in_path = Cmd {\n+        unix: r\"code --version\",\n+        windows: r\"cmd.exe /c code.cmd --version\",\n+        work_dir: \"./editors/code\",\n+    }\n+    .run()\n+    .is_ok();\n+    if !code_in_path {\n+        Err(\"Can't execute `code --version`. Perhaps it is not in $PATH?\")?;\n+    }\n+\n+    Cmd {\n+        unix: r\"code --install-extension ./ra-lsp-0.0.1.vsix --force\",\n+        windows: r\"cmd.exe /c code.cmd --install-extension ./ra-lsp-0.0.1.vsix --force\",\n+        work_dir: \"./editors/code\",\n+    }\n+    .run()?;\n+\n+    let output = Cmd {\n+        unix: r\"code --list-extensions\",\n+        windows: r\"cmd.exe /c code.cmd --list-extensions\",\n+        work_dir: \".\",\n+    }\n+    .run_with_output()?;\n+\n+    if !str::from_utf8(&output.stdout)?.contains(\"ra-lsp\") {\n+        Err(\"Could not install the Visual Studio Code extension. \\\n+             Please make sure you have at least NodeJS 10.x installed and try again.\")?;\n+    }\n+\n+    Ok(())\n+}\n+\n+fn install_server(opts: ServerOpt) -> Result<()> {\n+    if opts.jemalloc {\n+        run(\"cargo install --path crates/ra_lsp_server --force --features jemalloc\", \".\")\n+    } else {\n+        run(\"cargo install --path crates/ra_lsp_server --force\", \".\")\n+    }\n+}"}, {"sha": "74c58d4afebcfeeb23e4c8d33bc1b5de18d18739", "filename": "docs/dev/README.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecb1327fed1ece4083aa09255dbd927c5df304ef/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/ecb1327fed1ece4083aa09255dbd927c5df304ef/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=ecb1327fed1ece4083aa09255dbd927c5df304ef", "patch": "@@ -66,7 +66,7 @@ typescript) and Emacs (in elisp). The `docs` top-level directory contains both\n developer and user documentation.\n \n We have some automation infra in Rust in the `crates/tool` package. It contains\n-stuff like formatting checking, code generation and powers `cargo install-code`.\n+stuff like formatting checking, code generation and powers `cargo install-ra`.\n The latter syntax is achieved with the help of cargo aliases (see `.cargo`\n directory).\n \n@@ -84,7 +84,7 @@ However, launching a VS Code instance with locally build language server is\n possible. There's even a VS Code task for this, so just <kbd>F5</kbd> should\n work (thanks, [@andrew-w-ross](https://github.com/andrew-w-ross)!).\n \n-I often just install development version with `cargo jinstall-lsp` and\n+I often just install development version with `cargo install-ra --server --jemalloc` and\n restart the host VS Code.\n \n See [./debugging.md](./debugging.md) for how to attach to rust-analyzer with\n@@ -110,7 +110,7 @@ ways:\n \n 2. Run `npm test` from the command line. Although this is initiated from the\n    command line it is not headless; it will also launch a temporary instance of\n-   VS Code. \n+   VS Code.\n \n Due to the requirements of running the tests inside VS Code they are **not run\n on CI**. When making changes to the extension please ensure the tests are not\n@@ -151,7 +151,7 @@ There's also two VS Code commands which might be of interest:\n   $ cargo install --path crates/ra_lsp_server --force --features jemalloc\n   ```\n \n-  There's an alias for this: `cargo jinstall-lsp`.\n+  There's an alias for this: `cargo install-ra --server --jemalloc`.\n \n * `Rust Analyzer: Syntax Tree` shows syntax tree of the current file/selection.\n "}, {"sha": "122388a4270dd9b312c7e9249cec21b33303e72b", "filename": "docs/user/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecb1327fed1ece4083aa09255dbd927c5df304ef/docs%2Fuser%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/ecb1327fed1ece4083aa09255dbd927c5df304ef/docs%2Fuser%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2FREADME.md?ref=ecb1327fed1ece4083aa09255dbd927c5df304ef", "patch": "@@ -1,6 +1,6 @@\n The main interface to rust-analyzer is the\n [LSP](https://microsoft.github.io/language-server-protocol/) implementation. To\n-install lsp server, use `cargo install-lsp`, which is a shorthand for `cargo\n+install lsp server, use `cargo install-ra --server`, which is a shorthand for `cargo\n install --package ra_lsp_server`. The binary is named `ra_lsp_server`, you\n should be able to use it with any LSP-compatible editor. We use custom\n extensions to LSP, so special client-side support is required to take full\n@@ -33,7 +33,7 @@ following commands:\n ```\n $ git clone https://github.com/rust-analyzer/rust-analyzer.git --depth 1\n $ cd rust-analyzer\n-$ cargo install-code\n+$ cargo install-ra\n ```\n \n The automatic installation is expected to *just work* for common cases, if it"}]}