{"sha": "cc4e434854a982e22ca207c298e63f88dc5128aa", "node_id": "C_kwDOAAsO6NoAKGNjNGU0MzQ4NTRhOTgyZTIyY2EyMDdjMjk4ZTYzZjg4ZGM1MTI4YWE", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-12-28T20:28:09Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-12-28T20:29:21Z"}, "message": "Skip LTO in stage0 (again)", "tree": {"sha": "ee77275fb7ec6b4c4bb65c00949ae6f1feffccb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee77275fb7ec6b4c4bb65c00949ae6f1feffccb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc4e434854a982e22ca207c298e63f88dc5128aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4e434854a982e22ca207c298e63f88dc5128aa", "html_url": "https://github.com/rust-lang/rust/commit/cc4e434854a982e22ca207c298e63f88dc5128aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc4e434854a982e22ca207c298e63f88dc5128aa/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbe04502515c0ddadef8a6770fe9c5056caa16e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe04502515c0ddadef8a6770fe9c5056caa16e1", "html_url": "https://github.com/rust-lang/rust/commit/fbe04502515c0ddadef8a6770fe9c5056caa16e1"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "1030247b890c36c742428e10e4465a1bfc1f259a", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cc4e434854a982e22ca207c298e63f88dc5128aa/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4e434854a982e22ca207c298e63f88dc5128aa/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=cc4e434854a982e22ca207c298e63f88dc5128aa", "patch": "@@ -691,23 +691,27 @@ impl Step for Rustc {\n             ));\n         }\n \n-        match builder.config.rust_lto {\n-            RustcLto::Thin | RustcLto::Fat => {\n-                // Since using LTO for optimizing dylibs is currently experimental,\n-                // we need to pass -Zdylib-lto.\n-                cargo.rustflag(\"-Zdylib-lto\");\n-                // Cargo by default passes `-Cembed-bitcode=no` and doesn't pass `-Clto` when\n-                // compiling dylibs (and their dependencies), even when LTO is enabled for the\n-                // crate. Therefore, we need to override `-Clto` and `-Cembed-bitcode` here.\n-                let lto_type = match builder.config.rust_lto {\n-                    RustcLto::Thin => \"thin\",\n-                    RustcLto::Fat => \"fat\",\n-                    _ => unreachable!(),\n-                };\n-                cargo.rustflag(&format!(\"-Clto={}\", lto_type));\n-                cargo.rustflag(\"-Cembed-bitcode=yes\");\n+        // We currently don't support cross-crate LTO in stage0. This also isn't hugely necessary\n+        // and may just be a time sink.\n+        if compiler.stage != 0 {\n+            match builder.config.rust_lto {\n+                RustcLto::Thin | RustcLto::Fat => {\n+                    // Since using LTO for optimizing dylibs is currently experimental,\n+                    // we need to pass -Zdylib-lto.\n+                    cargo.rustflag(\"-Zdylib-lto\");\n+                    // Cargo by default passes `-Cembed-bitcode=no` and doesn't pass `-Clto` when\n+                    // compiling dylibs (and their dependencies), even when LTO is enabled for the\n+                    // crate. Therefore, we need to override `-Clto` and `-Cembed-bitcode` here.\n+                    let lto_type = match builder.config.rust_lto {\n+                        RustcLto::Thin => \"thin\",\n+                        RustcLto::Fat => \"fat\",\n+                        _ => unreachable!(),\n+                    };\n+                    cargo.rustflag(&format!(\"-Clto={}\", lto_type));\n+                    cargo.rustflag(\"-Cembed-bitcode=yes\");\n+                }\n+                RustcLto::ThinLocal => { /* Do nothing, this is the default */ }\n             }\n-            RustcLto::ThinLocal => { /* Do nothing, this is the default */ }\n         }\n \n         builder.info(&format!("}]}