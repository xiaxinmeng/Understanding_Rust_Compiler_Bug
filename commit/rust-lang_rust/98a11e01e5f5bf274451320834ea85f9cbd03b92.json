{"sha": "98a11e01e5f5bf274451320834ea85f9cbd03b92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YTExZTAxZTVmNWJmMjc0NDUxMzIwODM0ZWE4NWY5Y2JkMDNiOTI=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-19T20:39:19Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-19T20:40:20Z"}, "message": "Remove closure_tree", "tree": {"sha": "62ab4b331e54670c810119a450483089f61c19ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62ab4b331e54670c810119a450483089f61c19ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98a11e01e5f5bf274451320834ea85f9cbd03b92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98a11e01e5f5bf274451320834ea85f9cbd03b92", "html_url": "https://github.com/rust-lang/rust/commit/98a11e01e5f5bf274451320834ea85f9cbd03b92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98a11e01e5f5bf274451320834ea85f9cbd03b92/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41f0e13bc53396852f4f1338ce5d8be0d1125b08", "url": "https://api.github.com/repos/rust-lang/rust/commits/41f0e13bc53396852f4f1338ce5d8be0d1125b08", "html_url": "https://github.com/rust-lang/rust/commit/41f0e13bc53396852f4f1338ce5d8be0d1125b08"}], "stats": {"total": 46, "additions": 1, "deletions": 45}, "files": [{"sha": "f44267a404bf301ae3ea8ebf884f52b91319617d", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/98a11e01e5f5bf274451320834ea85f9cbd03b92/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a11e01e5f5bf274451320834ea85f9cbd03b92/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=98a11e01e5f5bf274451320834ea85f9cbd03b92", "patch": "@@ -235,18 +235,6 @@ pub struct ScopeTree {\n     /// escape into 'static and should have no local cleanup scope.\n     rvalue_scopes: FxHashMap<hir::ItemLocalId, Option<Scope>>,\n \n-    /// Encodes the hierarchy of fn bodies. Every fn body (including\n-    /// closures) forms its own distinct region hierarchy, rooted in\n-    /// the block that is the fn body. This map points from the ID of\n-    /// that root block to the ID of the root block for the enclosing\n-    /// fn, if any. Thus the map structures the fn bodies into a\n-    /// hierarchy based on their lexical mapping. This is used to\n-    /// handle the relationships between regions in a fn and in a\n-    /// closure defined by that fn. See the \"Modeling closures\"\n-    /// section of the README in infer::region_constraints for\n-    /// more details.\n-    closure_tree: FxHashMap<hir::ItemLocalId, hir::ItemLocalId>,\n-\n     /// If there are any `yield` nested within a scope, this map\n     /// stores the `Span` of the last one and its index in the\n     /// postorder of the Visitor traversal on the HIR.\n@@ -356,23 +344,6 @@ impl ScopeTree {\n         self.destruction_scopes.get(&n).cloned()\n     }\n \n-    /// Records that `sub_closure` is defined within `sup_closure`. These IDs\n-    /// should be the ID of the block that is the fn body, which is\n-    /// also the root of the region hierarchy for that fn.\n-    pub fn record_closure_parent(\n-        &mut self,\n-        sub_closure: hir::ItemLocalId,\n-        sup_closure: hir::ItemLocalId,\n-    ) {\n-        debug!(\n-            \"record_closure_parent(sub_closure={:?}, sup_closure={:?})\",\n-            sub_closure, sup_closure\n-        );\n-        assert!(sub_closure != sup_closure);\n-        let previous = self.closure_tree.insert(sub_closure, sup_closure);\n-        assert!(previous.is_none());\n-    }\n-\n     pub fn record_var_scope(&mut self, var: hir::ItemLocalId, lifetime: Scope) {\n         debug!(\"record_var_scope(sub={:?}, sup={:?})\", var, lifetime);\n         assert!(var != lifetime.item_local_id());\n@@ -474,7 +445,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for ScopeTree {\n             ref var_map,\n             ref destruction_scopes,\n             ref rvalue_scopes,\n-            ref closure_tree,\n             ref yield_in_scope,\n         } = *self;\n \n@@ -488,7 +458,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for ScopeTree {\n         var_map.hash_stable(hcx, hasher);\n         destruction_scopes.hash_stable(hcx, hasher);\n         rvalue_scopes.hash_stable(hcx, hasher);\n-        closure_tree.hash_stable(hcx, hasher);\n         yield_in_scope.hash_stable(hcx, hasher);\n     }\n }"}, {"sha": "14a373c59423fbbdeef6940bca513eb8d63fd551", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/98a11e01e5f5bf274451320834ea85f9cbd03b92/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a11e01e5f5bf274451320834ea85f9cbd03b92/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=98a11e01e5f5bf274451320834ea85f9cbd03b92", "patch": "@@ -23,14 +23,6 @@ use std::mem;\n \n #[derive(Debug, Copy, Clone)]\n pub struct Context {\n-    /// The root of the current region tree. This is typically the id\n-    /// of the innermost fn body. Each fn forms its own disjoint tree\n-    /// in the region hierarchy. These fn bodies are themselves\n-    /// arranged into a tree. See the \"Modeling closures\" section of\n-    /// the README in `rustc_trait_selection::infer::region_constraints`\n-    /// for more details.\n-    root_id: Option<hir::ItemLocalId>,\n-\n     /// The scope that contains any new variables declared, plus its depth in\n     /// the scope tree.\n     var_parent: Option<(Scope, ScopeDepth)>,\n@@ -743,11 +735,6 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n         let outer_pessimistic_yield = mem::replace(&mut self.pessimistic_yield, false);\n         self.terminating_scopes.insert(body.value.hir_id.local_id);\n \n-        if let Some(root_id) = self.cx.root_id {\n-            self.scope_tree.record_closure_parent(body.value.hir_id.local_id, root_id);\n-        }\n-        self.cx.root_id = Some(body.value.hir_id.local_id);\n-\n         self.enter_scope(Scope { id: body.value.hir_id.local_id, data: ScopeData::CallSite });\n         self.enter_scope(Scope { id: body.value.hir_id.local_id, data: ScopeData::Arguments });\n \n@@ -824,7 +811,7 @@ fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n             tcx,\n             scope_tree: ScopeTree::default(),\n             expr_and_pat_count: 0,\n-            cx: Context { root_id: None, parent: None, var_parent: None },\n+            cx: Context { parent: None, var_parent: None },\n             terminating_scopes: Default::default(),\n             pessimistic_yield: false,\n             fixup_scopes: vec![],"}]}