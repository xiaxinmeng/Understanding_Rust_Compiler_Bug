{"sha": "3adcd1c37e38c57066837152dff02cf0c9ba6e23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZGNkMWMzN2UzOGM1NzA2NjgzNzE1MmRmZjAyY2YwYzliYTZlMjM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-15T02:05:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-15T02:05:42Z"}, "message": "Rollup merge of #41309 - frewsxcv:sg-implement-rfc-1268, r=nikomatsakis\n\nImplement RFC 1268.\n\nRebased version of https://github.com/rust-lang/rust/pull/40097.\n\nTracking issue: https://github.com/rust-lang/rust/issues/29864.", "tree": {"sha": "add43bd1e97808670711899ce2e6a222ccdd51ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/add43bd1e97808670711899ce2e6a222ccdd51ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3adcd1c37e38c57066837152dff02cf0c9ba6e23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3adcd1c37e38c57066837152dff02cf0c9ba6e23", "html_url": "https://github.com/rust-lang/rust/commit/3adcd1c37e38c57066837152dff02cf0c9ba6e23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3adcd1c37e38c57066837152dff02cf0c9ba6e23/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f79bdc0a9828a146e83dc6c2bfa5eacd4edc265", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f79bdc0a9828a146e83dc6c2bfa5eacd4edc265", "html_url": "https://github.com/rust-lang/rust/commit/3f79bdc0a9828a146e83dc6c2bfa5eacd4edc265"}, {"sha": "ae9f571cd11d0b822827547ca6fe192cabb55d0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae9f571cd11d0b822827547ca6fe192cabb55d0d", "html_url": "https://github.com/rust-lang/rust/commit/ae9f571cd11d0b822827547ca6fe192cabb55d0d"}], "stats": {"total": 225, "additions": 203, "deletions": 22}, "files": [{"sha": "a9796fdf01e0d38f9aa79528dedc9fffd731ade7", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -136,6 +136,7 @@\n - [optin_builtin_traits](optin-builtin-traits.md)\n - [option_entry](option-entry.md)\n - [osstring_shrink_to_fit](osstring-shrink-to-fit.md)\n+- [overlapping_marker_traits](overlapping-marker-traits.md)\n - [panic_abort](panic-abort.md)\n - [panic_runtime](panic-runtime.md)\n - [panic_unwind](panic-unwind.md)"}, {"sha": "a4920839c6ca9d8199f3ef4cb3232ac94bd3b1c4", "filename": "src/doc/unstable-book/src/overlapping-marker-traits.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Fdoc%2Funstable-book%2Fsrc%2Foverlapping-marker-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Fdoc%2Funstable-book%2Fsrc%2Foverlapping-marker-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Foverlapping-marker-traits.md?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -0,0 +1,7 @@\n+# `overlapping_marker_traits`\n+\n+The tracking issue for this feature is: [#29864]\n+\n+[#29864]: https://github.com/rust-lang/rust/issues/29864\n+\n+------------------------"}, {"sha": "410eb2b84849e0a830bb0dddf9b90cb7d386cc7d", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -1736,7 +1736,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 if other.evaluation == EvaluatedToOk {\n                     if let ImplCandidate(victim_def) = victim.candidate {\n                         let tcx = self.tcx().global_tcx();\n-                        return traits::specializes(tcx, other_def, victim_def);\n+                        return traits::specializes(tcx, other_def, victim_def) ||\n+                            tcx.impls_are_allowed_to_overlap(other_def, victim_def);\n                     }\n                 }\n "}, {"sha": "6e2c16c82aeb42274fd30c21a4a058a66d607e00", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -113,6 +113,10 @@ impl<'a, 'gcx, 'tcx> Children {\n                                                         possible_sibling,\n                                                         impl_def_id);\n                 if let Some(impl_header) = overlap {\n+                    if tcx.impls_are_allowed_to_overlap(impl_def_id, possible_sibling) {\n+                        return Ok((false, false));\n+                    }\n+\n                     let le = specializes(tcx, impl_def_id, possible_sibling);\n                     let ge = specializes(tcx, possible_sibling, impl_def_id);\n "}, {"sha": "3da9383762bc6c682889daef12a5be762b0215cc", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -2227,6 +2227,25 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         queries::impl_trait_ref::get(self, DUMMY_SP, id)\n     }\n \n+    /// Returns true if the impls are the same polarity and are implementing\n+    /// a trait which contains no items\n+    pub fn impls_are_allowed_to_overlap(self, def_id1: DefId, def_id2: DefId) -> bool {\n+        if !self.sess.features.borrow().overlapping_marker_traits {\n+            return false;\n+        }\n+        let trait1_is_empty = self.impl_trait_ref(def_id1)\n+            .map_or(false, |trait_ref| {\n+                self.associated_item_def_ids(trait_ref.def_id).is_empty()\n+            });\n+        let trait2_is_empty = self.impl_trait_ref(def_id2)\n+            .map_or(false, |trait_ref| {\n+                self.associated_item_def_ids(trait_ref.def_id).is_empty()\n+            });\n+        self.trait_impl_polarity(def_id1) == self.trait_impl_polarity(def_id2)\n+            && trait1_is_empty\n+            && trait2_is_empty\n+    }\n+\n     // Returns `ty::VariantDef` if `def` refers to a struct,\n     // or variant or their constructors, panics otherwise.\n     pub fn expect_variant_def(self, def: Def) -> &'tcx VariantDef {"}, {"sha": "6e455234196d461d6430838a1e6c6bd10be46927", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -349,6 +349,9 @@ declare_features! (\n \n     // Allows module-level inline assembly by way of global_asm!()\n     (active, global_asm, \"1.18.0\", Some(35119)),\n+\n+    // Allows overlapping impls of marker traits\n+    (active, overlapping_marker_traits, \"1.18.0\", Some(29864)),\n );\n \n declare_features! ("}, {"sha": "80cc0d2680f7c5a7456d22ade460122aaf963eeb", "filename": "src/test/compile-fail/E0120.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2FE0120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2FE0120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0120.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait MyTrait {}\n+trait MyTrait { fn foo() {} }\n \n impl Drop for MyTrait {\n               //~^ ERROR E0120"}, {"sha": "3190ce430ad67ca41fc32553745bc6b016e52678", "filename": "src/test/compile-fail/auxiliary/trait_impl_conflict.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Ftrait_impl_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Ftrait_impl_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Ftrait_impl_conflict.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n pub trait Foo {\n+    fn foo() {}\n }\n \n impl Foo for isize {"}, {"sha": "8e9d1eff34580575dc64b4ba6e43c77ae09c6f2c", "filename": "src/test/compile-fail/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(optin_builtin_traits)]\n+#![feature(overlapping_marker_traits)]\n \n trait MyTrait {}\n \n@@ -20,8 +21,8 @@ impl<T: MyTrait> !Send for TestType<T> {}\n //~^ ERROR conflicting implementations of trait `std::marker::Send`\n \n unsafe impl<T:'static> Send for TestType<T> {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Send`\n \n impl !Send for TestType<i32> {}\n+//~^ ERROR conflicting implementations of trait `std::marker::Send`\n \n fn main() {}"}, {"sha": "e6bf068156c2b037fcf4d99a987cfc8a2e6c9c74", "filename": "src/test/compile-fail/coherence-default-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait MyTrait {}\n+trait MyTrait { fn foo() {} }\n \n impl MyTrait for .. {}\n //~^ ERROR redundant default implementations of trait `MyTrait`"}, {"sha": "9caaee41aeb1dba09b2ad576a83cba1a559d3143", "filename": "src/test/compile-fail/coherence-impls-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-send.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(optin_builtin_traits)]\n+#![feature(overlapping_marker_traits)]\n \n use std::marker::Copy;\n \n@@ -34,7 +35,6 @@ unsafe impl Send for [MyType] {}\n \n unsafe impl Send for &'static [NotSync] {}\n //~^ ERROR E0117\n-//~| ERROR E0119\n \n fn main() {\n }"}, {"sha": "47026cd32d411a6f51033000677c775d1e657c7f", "filename": "src/test/compile-fail/coherence-no-direct-lifetime-dispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-no-direct-lifetime-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-no-direct-lifetime-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-no-direct-lifetime-dispatch.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -10,7 +10,7 @@\n \n // Test that you cannot *directly* dispatch on lifetime requirements\n \n-trait MyTrait {}\n+trait MyTrait { fn foo() {} }\n \n impl<T> MyTrait for T {}\n impl<T: 'static> MyTrait for T {} //~ ERROR E0119"}, {"sha": "1fad608db6c3b1a3e52c5c1e62d0f7746a22ad0d", "filename": "src/test/compile-fail/coherence-overlap-all-t-and-tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-all-t-and-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-all-t-and-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-all-t-and-tuple.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -17,6 +17,7 @@\n // Seems pretty basic, but then there was issue #24241. :)\n \n trait From<U> {\n+    fn foo() {}\n }\n \n impl <T> From<T> for T {"}, {"sha": "a10deeafbe67e267f3b7100f3584436696b61cb9", "filename": "src/test/compile-fail/coherence-overlap-messages.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-messages.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -8,22 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo {}\n+trait Foo { fn foo() {} }\n \n impl<T> Foo for T {}\n impl<U> Foo for U {} //~ ERROR conflicting implementations of trait `Foo`:\n \n-trait Bar {}\n+trait Bar { fn bar() {} }\n \n impl<T> Bar for (T, u8) {}\n impl<T> Bar for (u8, T) {} //~ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n \n-trait Baz<T> {}\n+trait Baz<T> { fn baz() {} }\n \n impl<T> Baz<u8> for T {}\n impl<T> Baz<T> for u8 {} //~ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n \n-trait Quux<U, V> {}\n+trait Quux<U, V> { fn quux() {} }\n \n impl<T, U, V> Quux<U, V> for T {}\n impl<T, U> Quux<U, U> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:"}, {"sha": "784ff0cd5e0aa72982f288efcfbaf92cd34d88bc", "filename": "src/test/compile-fail/coherence-projection-conflict-orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-orphan.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -15,7 +15,7 @@\n // due to the orphan rules. Therefore, `A::Item` may yet turn out to\n // be `i32`.\n \n-pub trait Foo<P> {}\n+pub trait Foo<P> { fn foo() {} }\n \n pub trait Bar {\n     type Output: 'static;"}, {"sha": "120d9046389a18fb3a5d834c39b132049b3cb401", "filename": "src/test/compile-fail/coherence-projection-conflict-ty-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-ty-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-ty-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-ty-param.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -13,7 +13,7 @@\n \n use std::marker::PhantomData;\n \n-pub trait Foo<P> {}\n+pub trait Foo<P> { fn foo() {} }\n \n impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n "}, {"sha": "3c32ab38b93dc15da014d66ad612824a6a4c012f", "filename": "src/test/compile-fail/coherence-projection-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -10,7 +10,7 @@\n \n use std::marker::PhantomData;\n \n-pub trait Foo<P> {}\n+pub trait Foo<P> { fn foo() {} }\n \n pub trait Bar {\n     type Output: 'static;"}, {"sha": "9fbb7aa4cb1a7f70a180821a46bd137fdda6503a", "filename": "src/test/compile-fail/coherence_copy_like_err_fundamental_struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -20,7 +20,7 @@ extern crate coherence_copy_like_lib as lib;\n \n struct MyType { x: i32 }\n \n-trait MyTrait { }\n+trait MyTrait { fn foo() {} }\n impl<T: lib::MyCopy> MyTrait for T { }\n \n // `MyFundamentalStruct` is declared fundamental, so we can test that"}, {"sha": "2f6dca4f3c2715ae4915cab7ea847f7dc1f401a6", "filename": "src/test/compile-fail/coherence_copy_like_err_fundamental_struct_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_ref.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -20,7 +20,7 @@ extern crate coherence_copy_like_lib as lib;\n \n struct MyType { x: i32 }\n \n-trait MyTrait { }\n+trait MyTrait { fn foo() {} }\n impl<T: lib::MyCopy> MyTrait for T { }\n \n // `MyFundamentalStruct` is declared fundamental, so we can test that"}, {"sha": "f424e8872010f25d5d4414a5ff07d1e3d636f48f", "filename": "src/test/compile-fail/coherence_copy_like_err_fundamental_struct_tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -19,7 +19,7 @@ extern crate coherence_copy_like_lib as lib;\n \n struct MyType { x: i32 }\n \n-trait MyTrait { }\n+trait MyTrait { fn foo() {} }\n \n impl<T: lib::MyCopy> MyTrait for T { }\n "}, {"sha": "04262e65c5a2afe8d2ff72e4113ce08165ef35ae", "filename": "src/test/compile-fail/coherence_copy_like_err_struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_struct.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -17,7 +17,7 @@ extern crate coherence_copy_like_lib as lib;\n \n struct MyType { x: i32 }\n \n-trait MyTrait { }\n+trait MyTrait { fn foo() {} }\n impl<T: lib::MyCopy> MyTrait for T { }\n \n // `MyStruct` is not declared fundamental, therefore this would"}, {"sha": "378a70864f0eedb93cf06ff9988b8ff55eabccc8", "filename": "src/test/compile-fail/coherence_copy_like_err_tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_tuple.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -17,7 +17,7 @@ extern crate coherence_copy_like_lib as lib;\n \n struct MyType { x: i32 }\n \n-trait MyTrait { }\n+trait MyTrait { fn foo() {} }\n impl<T: lib::MyCopy> MyTrait for T { }\n \n // Tuples are not fundamental, therefore this would require that"}, {"sha": "d2aa4e59b5ba9615455f4feebf4ade3137fc9ada", "filename": "src/test/compile-fail/feature-gate-overlapping_marker_traits.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Ffeature-gate-overlapping_marker_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Ffeature-gate-overlapping_marker_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-overlapping_marker_traits.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt::{Debug, Display};\n+\n+trait MyMarker {}\n+\n+impl<T: Display> MyMarker for T {}\n+impl<T: Debug> MyMarker for T {}\n+//~^ ERROR E0119\n+\n+fn main() {}"}, {"sha": "a649ae25f34ead92744b02549bc24282171dde6a", "filename": "src/test/compile-fail/overlap-marker-trait.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Foverlap-marker-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Foverlap-marker-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foverlap-marker-trait.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test for RFC 1268: we allow overlapping impls of marker traits,\n+// that is, traits without items. In this case, a type `T` is\n+// `MyMarker` if it is either `Debug` or `Display`. This test just\n+// checks that we don't consider **all** types to be `MyMarker`.  See\n+// also the companion test in\n+// `run-pass/overlap-permitted-for-marker-traits.rs`.\n+\n+#![feature(overlapping_marker_traits)]\n+#![feature(optin_builtin_traits)]\n+\n+use std::fmt::{Debug, Display};\n+\n+trait Marker {}\n+\n+impl<T: Debug> Marker for T {}\n+impl<T: Display> Marker for T {}\n+\n+fn is_marker<T: Marker>() { }\n+\n+struct NotDebugOrDisplay;\n+\n+fn main() {\n+    // Debug && Display:\n+    is_marker::<i32>();\n+\n+    // Debug && !Display:\n+    is_marker::<Vec<i32>>();\n+\n+    // !Debug && !Display\n+    is_marker::<NotDebugOrDisplay>(); //~ ERROR\n+}"}, {"sha": "ff12a82db5b7dff2ded854e7a4de119bd7800cd4", "filename": "src/test/compile-fail/specialization/specialization-overlap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-overlap.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -10,19 +10,19 @@\n \n #![feature(specialization)]\n \n-trait Foo {}\n+trait Foo { fn foo() {} }\n impl<T: Clone> Foo for T {}\n impl<T> Foo for Vec<T> {} //~ ERROR E0119\n \n-trait Bar {}\n+trait Bar { fn bar() {} }\n impl<T> Bar for (T, u8) {}\n impl<T> Bar for (u8, T) {} //~ ERROR E0119\n \n-trait Baz<U> {}\n+trait Baz<U> { fn baz() {} }\n impl<T> Baz<T> for u8 {}\n impl<T> Baz<u8> for T {} //~ ERROR E0119\n \n-trait Qux {}\n+trait Qux { fn qux() {} }\n impl<T: Clone> Qux for T {}\n impl<T: Eq> Qux for T {} //~ ERROR E0119\n "}, {"sha": "ed45d81c0d6a155937f7514f4019d8d261f06e56", "filename": "src/test/run-pass/overlap-doesnt-conflict-with-specialization.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Frun-pass%2Foverlap-doesnt-conflict-with-specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Frun-pass%2Foverlap-doesnt-conflict-with-specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverlap-doesnt-conflict-with-specialization.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(overlapping_marker_traits)]\n+#![feature(specialization)]\n+\n+trait MyMarker {}\n+\n+impl<T> MyMarker for T {}\n+impl<T> MyMarker for Vec<T> {}\n+\n+fn foo<T: MyMarker>(t: T) -> T {\n+    t\n+}\n+\n+fn main() {\n+    assert_eq!(1, foo(1));\n+    assert_eq!(2.0, foo(2.0));\n+    assert_eq!(vec![1], foo(vec![1]));\n+}"}, {"sha": "740d5d22ab5078a5290923df174be6a6e2607d51", "filename": "src/test/run-pass/overlap-permitted-for-marker-traits-neg.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Frun-pass%2Foverlap-permitted-for-marker-traits-neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Frun-pass%2Foverlap-permitted-for-marker-traits-neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverlap-permitted-for-marker-traits-neg.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(overlapping_marker_traits)]\n+#![feature(optin_builtin_traits)]\n+\n+// Overlapping negative impls for `MyStruct` are permitted:\n+struct MyStruct;\n+impl !Send for MyStruct {}\n+impl !Send for MyStruct {}\n+\n+fn main() {\n+}"}, {"sha": "11a46299d8c83a2d68ff495a52d17714116cf783", "filename": "src/test/run-pass/overlap-permitted-for-marker-traits.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Frun-pass%2Foverlap-permitted-for-marker-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adcd1c37e38c57066837152dff02cf0c9ba6e23/src%2Ftest%2Frun-pass%2Foverlap-permitted-for-marker-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverlap-permitted-for-marker-traits.rs?ref=3adcd1c37e38c57066837152dff02cf0c9ba6e23", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests for RFC 1268: we allow overlapping impls of marker traits,\n+// that is, traits without items. In this case, a type `T` is\n+// `MyMarker` if it is either `Debug` or `Display`.\n+\n+#![feature(overlapping_marker_traits)]\n+#![feature(optin_builtin_traits)]\n+\n+use std::fmt::{Debug, Display};\n+\n+trait MyMarker {}\n+\n+impl<T: Debug> MyMarker for T {}\n+impl<T: Display> MyMarker for T {}\n+\n+fn foo<T: MyMarker>(t: T) -> T {\n+    t\n+}\n+\n+fn main() {\n+    // Debug && Display:\n+    assert_eq!(1, foo(1));\n+    assert_eq!(2.0, foo(2.0));\n+\n+    // Debug && !Display:\n+    assert_eq!(vec![1], foo(vec![1]));\n+}"}]}