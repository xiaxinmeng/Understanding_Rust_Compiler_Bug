{"sha": "95f296db63d58f82a6a96d8b7baf52efaa26b260", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZjI5NmRiNjNkNThmODJhNmE5NmQ4YjdiYWY1MmVmYWEyNmIyNjA=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-13T15:06:09Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-13T15:06:09Z"}, "message": "Debug log all the things", "tree": {"sha": "d6766593753a9d9d00a4477c1fceaf2014a856f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6766593753a9d9d00a4477c1fceaf2014a856f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95f296db63d58f82a6a96d8b7baf52efaa26b260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95f296db63d58f82a6a96d8b7baf52efaa26b260", "html_url": "https://github.com/rust-lang/rust/commit/95f296db63d58f82a6a96d8b7baf52efaa26b260", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95f296db63d58f82a6a96d8b7baf52efaa26b260/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "692f63803683534ca7ff1c0a0a5e15cbfc61db0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/692f63803683534ca7ff1c0a0a5e15cbfc61db0a", "html_url": "https://github.com/rust-lang/rust/commit/692f63803683534ca7ff1c0a0a5e15cbfc61db0a"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "cfe1a2f56f451bd7d7e5b338f7a5fab85abedf36", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/95f296db63d58f82a6a96d8b7baf52efaa26b260/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f296db63d58f82a6a96d8b7baf52efaa26b260/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=95f296db63d58f82a6a96d8b7baf52efaa26b260", "patch": "@@ -509,11 +509,10 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     }\n }\n \n+#[instrument(skip(tcx), level = \"debug\")]\n fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     use rustc_hir::{Expr, ImplItem, Item, TraitItem};\n \n-    debug!(\"find_opaque_ty_constraints({:?})\", def_id);\n-\n     struct ConstraintLocator<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         def_id: DefId,\n@@ -522,13 +521,11 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     }\n \n     impl ConstraintLocator<'_> {\n+        #[instrument(skip(self), level = \"debug\")]\n         fn check(&mut self, def_id: LocalDefId) {\n             // Don't try to check items that cannot possibly constrain the type.\n             if !self.tcx.has_typeck_results(def_id) {\n-                debug!(\n-                    \"find_opaque_ty_constraints: no constraint for `{:?}` at `{:?}`: no typeck results\",\n-                    self.def_id, def_id,\n-                );\n+                debug!(\"no constraint: no typeck results\");\n                 return;\n             }\n             // Calling `mir_borrowck` can lead to cycle errors through\n@@ -540,10 +537,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n                 .get_by(|(key, _)| key.def_id == self.def_id)\n                 .is_none()\n             {\n-                debug!(\n-                    \"find_opaque_ty_constraints: no constraint for `{:?}` at `{:?}`\",\n-                    self.def_id, def_id,\n-                );\n+                debug!(\"no constraints in typeck results\");\n                 return;\n             }\n             // Use borrowck to get the type with unerased regions.\n@@ -603,7 +597,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n \n                 if let Some((prev_span, prev_ty)) = self.found {\n                     if *concrete_type != prev_ty {\n-                        debug!(\"find_opaque_ty_constraints: span={:?}\", span);\n+                        debug!(?span);\n                         // Found different concrete types for the opaque type.\n                         let mut err = self.tcx.sess.struct_span_err(\n                             span,"}]}