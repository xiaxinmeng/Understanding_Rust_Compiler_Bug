{"sha": "ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMmExMWViNGY5ODZlODdkZjVjMTY4NTBiNzBkNjEyZGQ1ZTljZTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-24T03:25:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T22:53:08Z"}, "message": "Convert std::uint to istrs. Issue #855", "tree": {"sha": "fbb45fe1a3ccbde30eb5d5e4d5c1ddafc68fc837", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbb45fe1a3ccbde30eb5d5e4d5c1ddafc68fc837"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "html_url": "https://github.com/rust-lang/rust/commit/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69e6abf9ceffc3919363e80b246f8b7224e7f3d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/69e6abf9ceffc3919363e80b246f8b7224e7f3d4", "html_url": "https://github.com/rust-lang/rust/commit/69e6abf9ceffc3919363e80b246f8b7224e7f3d4"}], "stats": {"total": 172, "additions": 99, "deletions": 73}, "files": [{"sha": "0a15b9e7346f5fd1c6b1d2e62aa6a098a613f21f", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -1,5 +1,6 @@\n // Type encoding\n \n+import std::istr;\n import std::io;\n import std::map::hashmap;\n import std::option::some;\n@@ -70,9 +71,9 @@ fn enc_ty(w: &io::writer, cx: &@ctxt, t: ty::t) {\n                 // I.e. it's actually an abbreviation.\n \n                 let s =\n-                    \"#\" + uint::to_str(pos, 16u) + \":\" +\n-                        uint::to_str(len, 16u) + \"#\";\n-                let a = {pos: pos, len: len, s: s};\n+                    ~\"#\" + uint::to_str(pos, 16u) + ~\":\" +\n+                    uint::to_str(len, 16u) + ~\"#\";\n+                let a = {pos: pos, len: len, s: istr::to_estr(s)};\n                 abbrevs.insert(t, a);\n             }\n             ret;\n@@ -183,7 +184,7 @@ fn enc_sty(w: &io::writer, cx: &@ctxt, st: &ty::sty) {\n           kind_shared. { w.write_str(\"ps\"); }\n           kind_pinned. { w.write_str(\"pp\"); }\n         }\n-        w.write_str(uint::str(id));\n+        w.write_str(istr::to_estr(uint::str(id)));\n       }\n       ty::ty_type. { w.write_char('Y'); }\n       ty::ty_constr(ty, cs) {"}, {"sha": "13cd2c76e09bbd8f1053be0d064aad5289c54f66", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -14,6 +14,7 @@\n //     int) and rec(x=int, y=int, z=int) will have the same TypeRef.\n import std::int;\n import std::str;\n+import std::istr;\n import std::uint;\n import std::str::rustrt::sbuf;\n import std::map;\n@@ -1048,10 +1049,10 @@ fn get_tydesc(cx: &@block_ctxt, orig_t: ty::t, escapes: bool,\n         } else {\n             bcx_tcx(cx).sess.span_bug(cx.sp,\n                                       \"Unbound typaram in get_tydesc: \" +\n-                                          \"orig_t = \" +\n-                                          ty_to_str(bcx_tcx(cx), orig_t) +\n-                                          \" ty_param = \" +\n-                                          std::uint::str(id));\n+                                      \"orig_t = \" +\n+                                      ty_to_str(bcx_tcx(cx), orig_t) +\n+                                      \" ty_param = \" +\n+                                      istr::to_estr(std::uint::str(id)));\n         }\n       }\n       none. {/* fall through */ }\n@@ -1871,8 +1872,8 @@ fn iter_structural_ty_full(cx: &@block_ctxt, av: ValueRef, t: ty::t,\n         for variant: ty::variant_info in variants {\n             let variant_cx =\n                 new_sub_block_ctxt(bcx,\n-                                   \"tag-iter-variant-\" +\n-                                       uint::to_str(i, 10u));\n+                                   istr::to_estr(~\"tag-iter-variant-\" +\n+                                                 uint::to_str(i, 10u)));\n             llvm::LLVMAddCase(llswitch, C_int(i as int), variant_cx.llbb);\n             variant_cx =\n                 iter_variant(variant_cx, llunion_a_ptr, variant, tps, tid,\n@@ -5517,7 +5518,7 @@ fn trans_tag_variant(cx: @local_ctxt, tag_id: ast::node_id,\n         fn_args +=\n             [{mode: ast::alias(false),\n               ty: varg.ty,\n-              ident: \"arg\" + uint::to_str(i, 10u),\n+              ident: istr::to_estr(~\"arg\" + uint::to_str(i, 10u)),\n               id: varg.id}];\n     }\n     assert (cx.ccx.item_ids.contains_key(variant.node.id));"}, {"sha": "7cc7edd9dcd7978f6a8bc09a9ef39318e365553a", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -6,6 +6,7 @@\n import std::int;\n import std::vec;\n import std::str;\n+import std::istr;\n import std::uint;\n import std::str::rustrt::sbuf;\n import std::map;\n@@ -758,7 +759,7 @@ fn T_opaque_closure_ptr(cx: &crate_ctxt) -> TypeRef {\n }\n \n fn T_tag(tn: &type_names, size: uint) -> TypeRef {\n-    let s = \"tag_\" + uint::to_str(size, 10u);\n+    let s = \"tag_\" + istr::to_estr(uint::to_str(size, 10u));\n     if tn.name_has_type(s) { ret tn.get_type(s); }\n     let t = T_struct([T_int(), T_array(T_i8(), size)]);\n     tn.associate(s, t);"}, {"sha": "946366cd78c46335fc189e11b9c0fca086f4abec", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -4,6 +4,7 @@ import std::option::some;\n import std::option::none;\n import std::int;\n import std::uint;\n+import std::istr;\n import syntax::ast::*;\n import syntax::ast_util::pat_binding_ids;\n import syntax::visit;\n@@ -61,7 +62,7 @@ fn node_ids_in_fn(f: &_fn, tps: &[ty_param], sp: &span, i: &fn_ident,\n \n fn init_vecs(ccx: &crate_ctxt, node_ids: &[node_id], len: uint) {\n     for i: node_id in node_ids {\n-        log int::str(i) + \" |-> \" + uint::str(len);\n+        log int::str(i) + \" |-> \" + istr::to_estr(uint::str(len));\n         add_node(ccx, i, empty_ann(len));\n     }\n }"}, {"sha": "b8d125e59a9d8b39febfec9a6dcfcabe26267d25", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -1,6 +1,7 @@\n import std::vec;\n import std::int::str;\n import std::str;\n+import std::istr;\n import std::option;\n import std::option::*;\n import std::int;\n@@ -678,7 +679,7 @@ fn expr_to_constr(tcx: ty::ctxt, e: &@expr) -> sp_constr {\n }\n \n fn pred_args_to_str(p: &pred_args) -> str {\n-    \"<\" + uint::str(p.node.bit_num) + \", \" +\n+    \"<\" + istr::to_estr(uint::str(p.node.bit_num)) + \", \" +\n         constr_args_to_str(fn (i: &inst) -> str { ret i.ident; }, p.node.args)\n         + \">\"\n }"}, {"sha": "f4729c3182e0aecc5dc2ae8b58cb230af9670c2d", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -1,3 +1,4 @@\n+import std::istr;\n import std::uint;\n import std::int;\n import std::vec;\n@@ -60,7 +61,8 @@ fn find_locals(tcx: &ty::ctxt, f: &_fn, tps: &[ty_param], sp: &span,\n \n fn add_constraint(tcx: &ty::ctxt, c: sp_constr, next: uint, tbl: constr_map)\n    -> uint {\n-    log constraint_to_str(tcx, c) + \" |-> \" + std::uint::str(next);\n+    log constraint_to_str(tcx, c) + \" |-> \"\n+        + istr::to_estr(std::uint::str(next));\n     alt c.node {\n       ninit(id, i) { tbl.insert(local_def(id), cinit(next, c.span, i)); }\n       npred(p, d_id, args) {\n@@ -145,8 +147,9 @@ fn mk_fn_info(ccx: &crate_ctxt, f: &_fn, tp: &[ty_param], f_sp: &span,\n          i_diverge: ninit(diverges_id, diverges_name),\n          used_vars: v};\n     ccx.fm.insert(id, rslt);\n-    log name + \" has \" + std::uint::str(num_constraints(rslt)) +\n-            \" constraints\";\n+    log name + istr::to_estr(~\" has \"\n+                             + std::uint::str(num_constraints(rslt))\n+                             + ~\" constraints\");\n }\n \n "}, {"sha": "3a446c4dc6a346464f2899919d44c269013c0c2f", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -1,6 +1,7 @@\n import std::int;\n import std::vec;\n import std::str;\n+import std::istr;\n import std::uint;\n import std::box;\n import std::ufind;\n@@ -2605,14 +2606,18 @@ fn type_err_to_str(err: &ty::type_err) -> str {\n       terr_box_mutability. { ret \"boxed values differ in mutability\"; }\n       terr_vec_mutability. { ret \"vectors differ in mutability\"; }\n       terr_tuple_size(e_sz, a_sz) {\n-        ret \"expected a tuple with \" + uint::to_str(e_sz, 10u) +\n-                \" elements but found one with \" + uint::to_str(a_sz, 10u) +\n-                \" elements\";\n+        ret istr::to_estr(~\"expected a tuple with \" +\n+                          uint::to_str(e_sz, 10u) +\n+                          ~\" elements but found one with \" +\n+                          uint::to_str(a_sz, 10u) +\n+                          ~\" elements\");\n       }\n       terr_record_size(e_sz, a_sz) {\n-        ret \"expected a record with \" + uint::to_str(e_sz, 10u) +\n-                \" fields but found one with \" + uint::to_str(a_sz, 10u) +\n-                \" fields\";\n+        ret istr::to_estr(~\"expected a record with \" +\n+                          uint::to_str(e_sz, 10u) +\n+                          ~\" fields but found one with \" +\n+                          uint::to_str(a_sz, 10u) +\n+                          ~\" fields\");\n       }\n       terr_record_mutability. { ret \"record elements differ in mutability\"; }\n       terr_record_fields(e_fld, a_fld) {\n@@ -2630,10 +2635,10 @@ fn type_err_to_str(err: &ty::type_err) -> str {\n                 mode_str_1(a_mode);\n       }\n       terr_constr_len(e_len, a_len) {\n-        ret \"Expected a type with \" + uint::str(e_len) +\n-                \" constraints, \\\n-              but found one with \" +\n-                uint::str(a_len) + \" constraints\";\n+        ret istr::to_estr(~\"Expected a type with \" +\n+                          uint::str(e_len) +\n+                          ~\" constraints, but found one with \" +\n+                          uint::str(a_len) + ~\" constraints\");\n       }\n       terr_constr_mismatch(e_constr, a_constr) {\n         ret \"Expected a type with constraint \" + ty_constr_to_str(e_constr) +"}, {"sha": "994c4e03b3424f7eafa392d10933404e232f9491", "filename": "src/comp/syntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -6,6 +6,7 @@ import util::interner;\n import std::int;\n import std::uint;\n import std::str;\n+import std::istr;\n \n type str_num = uint;\n \n@@ -146,7 +147,7 @@ fn to_str(r: lexer::reader, t: token) -> str {\n       LIT_INT(i) {\n         ret int::to_str(i, 10u);\n       }\n-      LIT_UINT(u) { ret uint::to_str(u, 10u); }\n+      LIT_UINT(u) { ret istr::to_estr(uint::to_str(u, 10u)); }\n       LIT_MACH_INT(tm, i) {\n         ret int::to_str(i, 10u) + \"_\" + ty_mach_to_str(tm);\n       }"}, {"sha": "81220647288059a5588b1b6167c58677085b83f9", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -3,6 +3,7 @@ import std::vec;\n import std::int;\n import std::io;\n import std::str;\n+import std::istr;\n import std::uint;\n import std::option;\n import parse::lexer;\n@@ -1498,7 +1499,7 @@ fn print_literal(s: &ps, lit: &@ast::lit) {\n                  \"'\");\n       }\n       ast::lit_int(val) { word(s.s, int::str(val)); }\n-      ast::lit_uint(val) { word(s.s, uint::str(val) + \"u\"); }\n+      ast::lit_uint(val) { word(s.s, istr::to_estr(uint::str(val)) + \"u\"); }\n       ast::lit_float(fstr) { word(s.s, fstr); }\n       ast::lit_mach_int(mach, val) {\n         word(s.s, int::str(val as int));\n@@ -1660,7 +1661,7 @@ fn constr_arg_to_str<T>(f: &fn(&T) -> str, c: &ast::constr_arg_general_<T>) ->\n // needed b/c constr_args_to_str needs\n // something that takes an alias\n // (argh)\n-fn uint_to_str(i: &uint) -> str { ret uint::str(i); }\n+fn uint_to_str(i: &uint) -> str { ret istr::to_estr(uint::str(i)); }\n \n fn ast_ty_fn_constr_to_str(c: &@ast::constr) -> str {\n     ret path_to_str(c.node.path) +"}, {"sha": "f531f4c1e0c4c6c023a777697fd9de69bc0d2bd2", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -1,4 +1,5 @@\n import std::str;\n+import std::istr;\n import std::map;\n import std::map::hashmap;\n import std::uint;\n@@ -163,13 +164,13 @@ fn float_to_str(num: float, digits: uint) -> str {\n     let accum = if num < 0.0 { num = -num; \"-\" } else { \"\" };\n     let trunc = num as uint;\n     let frac = num - (trunc as float);\n-    accum += uint::str(trunc);\n+    accum += istr::to_estr(uint::str(trunc));\n     if frac == 0.0 || digits == 0u { ret accum; }\n     accum += \".\";\n     while digits > 0u && frac > 0.0 {\n         frac *= 10.0;\n         let digit = frac as uint;\n-        accum += uint::str(digit);\n+        accum += istr::to_estr(uint::str(digit));\n         frac -= digit as float;\n         digits -= 1u;\n     }"}, {"sha": "407153fe616d415c3b556a59334403f6be8b409f", "filename": "src/lib/ebml.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Febml.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -67,7 +67,8 @@ fn get_doc(d: doc, tg: uint) -> doc {\n     alt maybe_get_doc(d, tg) {\n       some(d) { ret d; }\n       none. {\n-        log_err \"failed to find block with tag \" + uint::to_str(tg, 10u);\n+        log_err \"failed to find block with tag \"\n+            + istr::to_estr(uint::to_str(tg, 10u));\n         fail;\n       }\n     }"}, {"sha": "d3e507f1b89bf7427d263b55e466fd50f3b34b55", "filename": "src/lib/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fextfmt.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -337,7 +337,7 @@ mod rt {\n         ret if prec == 0u && num == 0u {\n                 \"\"\n             } else {\n-                let s = uint::to_str(num, radix);\n+                let s = istr::to_estr(uint::to_str(num, radix));\n                 let len = str::char_len(s);\n                 if len < prec {\n                     let diff = prec - len;"}, {"sha": "937c60265854f2426a9a4185f3e5a4f9de36e223", "filename": "src/lib/int.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fint.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -44,8 +44,8 @@ iter range(lo: int, hi: int) -> int {\n fn to_str(n: int, radix: uint) -> str {\n     assert (0u < radix && radix <= 16u);\n     ret if n < 0 {\n-            \"-\" + uint::to_str(-n as uint, radix)\n-        } else { uint::to_str(n as uint, radix) };\n+            \"-\" + istr::to_estr(uint::to_str(-n as uint, radix))\n+        } else { istr::to_estr(uint::to_str(n as uint, radix)) };\n }\n fn str(i: int) -> str { ret to_str(i, 10u); }\n "}, {"sha": "b627342d0271aeb5efabc271e7bd95a3a395dd95", "filename": "src/lib/io.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -338,7 +338,8 @@ obj new_writer(out: buf_writer) {\n         out.write(str::bytes(str::from_char(ch)));\n     }\n     fn write_int(n: int) { out.write(str::bytes(int::to_str(n, 10u))); }\n-    fn write_uint(n: uint) { out.write(str::bytes(uint::to_str(n, 10u))); }\n+    fn write_uint(n: uint) { out.write(str::bytes(\n+        istr::to_estr(uint::to_str(n, 10u)))); }\n     fn write_bytes(bytes: &[u8]) { out.write(bytes); }\n     fn write_le_uint(n: uint, size: uint) {\n         out.write(uint_to_le_bytes(n, size));"}, {"sha": "1556065e08716cf36045effe3ed1cf203fd4c640", "filename": "src/lib/istr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fistr.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -2,7 +2,8 @@ export eq, lteq, hash, is_empty, is_not_empty, is_whitespace, byte_len,\n index, rindex, find, starts_with, ends_with, substr, slice, split,\n concat, connect, to_upper, replace, char_slice, trim_left, trim_right, trim,\n unshift_char, shift_char, pop_char, push_char, is_utf8, from_chars, to_chars,\n-char_len, char_at, bytes, is_ascii, shift_byte, pop_byte, unsafe_from_bytes;\n+char_len, char_at, bytes, is_ascii, shift_byte, pop_byte, unsafe_from_byte,\n+unsafe_from_bytes;\n \n export from_estr, to_estr;\n "}, {"sha": "dde47906f2b9cc93a4f47fe5d6427191cd95013c", "filename": "src/lib/net.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fnet.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -14,7 +14,9 @@ fn format_addr(ip: ip_addr) -> str {\n }\n \n fn parse_addr(ip: str) -> ip_addr {\n-    let parts = vec::map(uint::from_str, str::split(ip, \".\"[0]));\n+    let parts = vec::map(\n+        { |&s| uint::from_str(istr::from_estr(s)) },\n+        str::split(ip, \".\"[0]));\n     if vec::len(parts) != 4u { fail \"Too many dots in IP address\"; }\n     for i in parts { if i > 255u { fail \"Invalid IP Address part.\"; } }\n     ipv4(parts[0] as u8, parts[1] as u8, parts[2] as u8, parts[3] as u8)"}, {"sha": "9d5ec605792e96405cd67c0432421b5e8367649a", "filename": "src/lib/sha1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsha1.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -220,7 +220,9 @@ fn mk_sha1() -> sha1 {\n         fn result_str() -> str {\n             let r = mk_result(st);\n             let s = \"\";\n-            for b: u8 in r { s += uint::to_str(b as uint, 16u); }\n+            for b: u8 in r {\n+                s += istr::to_estr(uint::to_str(b as uint, 16u));\n+            }\n             ret s;\n         }\n     }"}, {"sha": "7fb0c5d179c206b0febc814ebc02f81bfd04f97e", "filename": "src/lib/uint.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Flib%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fuint.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -56,9 +56,9 @@ fn parse_buf(buf: &[u8], radix: uint) -> uint {\n     fail;\n }\n \n-fn from_str(s: &str) -> uint { parse_buf(str::bytes(s), 10u) }\n+fn from_str(s: &istr) -> uint { parse_buf(istr::bytes(s), 10u) }\n \n-fn to_str(num: uint, radix: uint) -> str {\n+fn to_str(num: uint, radix: uint) -> istr {\n     let n = num;\n     assert (0u < radix && radix <= 16u);\n     fn digit(n: uint) -> char {\n@@ -82,18 +82,18 @@ fn to_str(num: uint, radix: uint) -> str {\n               _ { fail }\n             };\n     }\n-    if n == 0u { ret \"0\"; }\n-    let s: str = \"\";\n+    if n == 0u { ret ~\"0\"; }\n+    let s: istr = ~\"\";\n     while n != 0u {\n-        s += str::unsafe_from_byte(digit(n % radix) as u8);\n+        s += istr::unsafe_from_byte(digit(n % radix) as u8);\n         n /= radix;\n     }\n-    let s1: str = \"\";\n-    let len: uint = str::byte_len(s);\n-    while len != 0u { len -= 1u; s1 += str::unsafe_from_byte(s[len]); }\n+    let s1: istr = ~\"\";\n+    let len: uint = istr::byte_len(s);\n+    while len != 0u { len -= 1u; s1 += istr::unsafe_from_byte(s[len]); }\n     ret s1;\n }\n-fn str(i: uint) -> str { ret to_str(i, 10u); }\n+fn str(i: uint) -> istr { ret to_str(i, 10u); }\n \n // Local Variables:\n // mode: rust;"}, {"sha": "17e02ae3a709efd8a9d3d9d69c50e501254f7af6", "filename": "src/test/stdtest/map.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Ftest%2Fstdtest%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a11eb4f986e87df5c16850b70d612dd5e9ce9/src%2Ftest%2Fstdtest%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fmap.rs?ref=ee2a11eb4f986e87df5c16850b70d612dd5e9ce9", "patch": "@@ -4,6 +4,7 @@\n use std;\n import std::map;\n import std::str;\n+import std::istr;\n import std::uint;\n import std::util;\n import std::option;\n@@ -92,14 +93,14 @@ fn test_growth() {\n     let i: uint = 0u;\n     while i < num_to_insert {\n         assert (hm_uu.insert(i, i * i));\n-        log \"inserting \" + uint::to_str(i, 10u) + \" -> \" +\n+        log ~\"inserting \" + uint::to_str(i, 10u) + ~\" -> \" +\n                 uint::to_str(i * i, 10u);\n         i += 1u;\n     }\n     log \"-----\";\n     i = 0u;\n     while i < num_to_insert {\n-        log \"get(\" + uint::to_str(i, 10u) + \") = \" +\n+        log ~\"get(\" + uint::to_str(i, 10u) + ~\") = \" +\n                 uint::to_str(hm_uu.get(i), 10u);\n         assert (hm_uu.get(i) == i * i);\n         i += 1u;\n@@ -110,7 +111,7 @@ fn test_growth() {\n     hm_uu.rehash();\n     i = 0u;\n     while i < num_to_insert {\n-        log \"get(\" + uint::to_str(i, 10u) + \") = \" +\n+        log ~\"get(\" + uint::to_str(i, 10u) + ~\") = \" +\n                 uint::to_str(hm_uu.get(i), 10u);\n         assert (hm_uu.get(i) == i * i);\n         i += 1u;\n@@ -122,32 +123,34 @@ fn test_growth() {\n         map::mk_hashmap::<str, str>(hasher_str, eqer_str);\n     i = 0u;\n     while i < num_to_insert {\n-        assert (hm_ss.insert(uint::to_str(i, 2u), uint::to_str(i * i, 2u)));\n-        log \"inserting \\\"\" + uint::to_str(i, 2u) + \"\\\" -> \\\"\" +\n-                uint::to_str(i * i, 2u) + \"\\\"\";\n+        assert (hm_ss.insert(istr::to_estr(uint::to_str(i, 2u)),\n+                             istr::to_estr(uint::to_str(i * i, 2u))));\n+        log ~\"inserting \\\"\" + uint::to_str(i, 2u) + ~\"\\\" -> \\\"\" +\n+                uint::to_str(i * i, 2u) + ~\"\\\"\";\n         i += 1u;\n     }\n     log \"-----\";\n     i = 0u;\n     while i < num_to_insert {\n-        log \"get(\\\"\" + uint::to_str(i, 2u) + \"\\\") = \\\"\" +\n-                hm_ss.get(uint::to_str(i, 2u)) + \"\\\"\";\n-        assert (str::eq(hm_ss.get(uint::to_str(i, 2u)),\n-                        uint::to_str(i * i, 2u)));\n+        log \"get(\\\"\" + istr::to_estr(uint::to_str(i, 2u)) + \"\\\") = \\\"\" +\n+                hm_ss.get(istr::to_estr(uint::to_str(i, 2u))) + \"\\\"\";\n+        assert (str::eq(hm_ss.get(istr::to_estr(uint::to_str(i, 2u))),\n+                        istr::to_estr(uint::to_str(i * i, 2u))));\n         i += 1u;\n     }\n-    assert (hm_ss.insert(uint::to_str(num_to_insert, 2u),\n-                         uint::to_str(17u, 2u)));\n-    assert (str::eq(hm_ss.get(uint::to_str(num_to_insert, 2u)),\n-                    uint::to_str(17u, 2u)));\n+    assert (hm_ss.insert(istr::to_estr(uint::to_str(num_to_insert, 2u)),\n+                         istr::to_estr(uint::to_str(17u, 2u))));\n+    assert (str::eq(hm_ss.get(\n+        istr::to_estr(uint::to_str(num_to_insert, 2u))),\n+                    istr::to_estr(uint::to_str(17u, 2u))));\n     log \"-----\";\n     hm_ss.rehash();\n     i = 0u;\n     while i < num_to_insert {\n-        log \"get(\\\"\" + uint::to_str(i, 2u) + \"\\\") = \\\"\" +\n-                hm_ss.get(uint::to_str(i, 2u)) + \"\\\"\";\n-        assert (str::eq(hm_ss.get(uint::to_str(i, 2u)),\n-                        uint::to_str(i * i, 2u)));\n+        log \"get(\\\"\" + istr::to_estr(uint::to_str(i, 2u)) + \"\\\") = \\\"\" +\n+                hm_ss.get(istr::to_estr(uint::to_str(i, 2u))) + \"\\\"\";\n+        assert (str::eq(hm_ss.get(istr::to_estr(uint::to_str(i, 2u))),\n+                        istr::to_estr(uint::to_str(i * i, 2u))));\n         i += 1u;\n     }\n     log \"*** finished test_growth\";\n@@ -174,7 +177,7 @@ fn test_removal() {\n     let i: uint = 0u;\n     while i < num_to_insert {\n         assert (hm.insert(i, i * i));\n-        log \"inserting \" + uint::to_str(i, 10u) + \" -> \" +\n+        log ~\"inserting \" + uint::to_str(i, 10u) + ~\" -> \" +\n                 uint::to_str(i * i, 10u);\n         i += 1u;\n     }\n@@ -196,7 +199,7 @@ fn test_removal() {\n     log \"-----\";\n     i = 1u;\n     while i < num_to_insert {\n-        log \"get(\" + uint::to_str(i, 10u) + \") = \" +\n+        log ~\"get(\" + uint::to_str(i, 10u) + ~\") = \" +\n                 uint::to_str(hm.get(i), 10u);\n         assert (hm.get(i) == i * i);\n         i += 2u;\n@@ -207,7 +210,7 @@ fn test_removal() {\n     log \"-----\";\n     i = 1u;\n     while i < num_to_insert {\n-        log \"get(\" + uint::to_str(i, 10u) + \") = \" +\n+        log ~\"get(\" + uint::to_str(i, 10u) + ~\") = \" +\n                 uint::to_str(hm.get(i), 10u);\n         assert (hm.get(i) == i * i);\n         i += 2u;\n@@ -216,15 +219,15 @@ fn test_removal() {\n     i = 0u;\n     while i < num_to_insert {\n         assert (hm.insert(i, i * i));\n-        log \"inserting \" + uint::to_str(i, 10u) + \" -> \" +\n+        log ~\"inserting \" + uint::to_str(i, 10u) + ~\" -> \" +\n                 uint::to_str(i * i, 10u);\n         i += 2u;\n     }\n     assert (hm.size() == num_to_insert);\n     log \"-----\";\n     i = 0u;\n     while i < num_to_insert {\n-        log \"get(\" + uint::to_str(i, 10u) + \") = \" +\n+        log ~\"get(\" + uint::to_str(i, 10u) + ~\") = \" +\n                 uint::to_str(hm.get(i), 10u);\n         assert (hm.get(i) == i * i);\n         i += 1u;\n@@ -236,7 +239,7 @@ fn test_removal() {\n     assert (hm.size() == num_to_insert);\n     i = 0u;\n     while i < num_to_insert {\n-        log \"get(\" + uint::to_str(i, 10u) + \") = \" +\n+        log ~\"get(\" + uint::to_str(i, 10u) + ~\") = \" +\n                 uint::to_str(hm.get(i), 10u);\n         assert (hm.get(i) == i * i);\n         i += 1u;"}]}