{"sha": "7c4a84751f8b08068a9a6c4188c88a19f1174dd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNGE4NDc1MWY4YjA4MDY4YTlhNmM0MTg4Yzg4YTE5ZjExNzRkZDg=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-06T13:52:43Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-07T04:57:52Z"}, "message": "Convert '&str' into 'String' whenever necessary", "tree": {"sha": "fa4f3dd7bfa6d642f2a55ce0393947e63a95b00d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa4f3dd7bfa6d642f2a55ce0393947e63a95b00d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c4a84751f8b08068a9a6c4188c88a19f1174dd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4a84751f8b08068a9a6c4188c88a19f1174dd8", "html_url": "https://github.com/rust-lang/rust/commit/7c4a84751f8b08068a9a6c4188c88a19f1174dd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c4a84751f8b08068a9a6c4188c88a19f1174dd8/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69a15b2eee671f76f934f1a2b8901c82c2eeee77", "url": "https://api.github.com/repos/rust-lang/rust/commits/69a15b2eee671f76f934f1a2b8901c82c2eeee77", "html_url": "https://github.com/rust-lang/rust/commit/69a15b2eee671f76f934f1a2b8901c82c2eeee77"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "62ebd8aaeab55160ccafc8b0ac3a30b791e1b7de", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c4a84751f8b08068a9a6c4188c88a19f1174dd8/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4a84751f8b08068a9a6c4188c88a19f1174dd8/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=7c4a84751f8b08068a9a6c4188c88a19f1174dd8", "patch": "@@ -918,7 +918,7 @@ pub fn recover_comment_removed(\n     let snippet = context.snippet(span);\n     if snippet != new && changed_comment_content(&snippet, &new) {\n         // We missed some comments. Keep the original text.\n-        Some(snippet)\n+        Some(snippet.into())\n     } else {\n         Some(new)\n     }"}, {"sha": "8f107888cead996ca2191de446e1a3d342751c6f", "filename": "src/expr.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7c4a84751f8b08068a9a6c4188c88a19f1174dd8/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4a84751f8b08068a9a6c4188c88a19f1174dd8/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=7c4a84751f8b08068a9a6c4188c88a19f1174dd8", "patch": "@@ -58,7 +58,7 @@ pub fn format_expr(\n     skip_out_of_file_lines_range!(context, expr.span);\n \n     if contains_skip(&*expr.attrs) {\n-        return Some(context.snippet(expr.span()));\n+        return Some(context.snippet(expr.span()).into());\n     }\n \n     let expr_rw = match expr.node {\n@@ -168,7 +168,7 @@ pub fn format_expr(\n         ast::ExprKind::Mac(ref mac) => {\n             rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n                 wrap_str(\n-                    context.snippet(expr.span),\n+                    context.snippet(expr.span).into(),\n                     context.config.max_width(),\n                     shape,\n                 )\n@@ -274,7 +274,7 @@ pub fn format_expr(\n         // We do not format these expressions yet, but they should still\n         // satisfy our width restrictions.\n         ast::ExprKind::InPlace(..) | ast::ExprKind::InlineAsm(..) => {\n-            Some(context.snippet(expr.span))\n+            Some(context.snippet(expr.span).into())\n         }\n         ast::ExprKind::Catch(ref block) => {\n             if let rw @ Some(_) = rewrite_single_line_block(context, \"do catch \", block, shape) {\n@@ -1308,7 +1308,7 @@ fn rewrite_match(\n             Some(format!(\"match {} {{}}\", cond_str))\n         } else {\n             // Empty match with comments or inner attributes? We are not going to bother, sorry ;)\n-            Some(context.snippet(span))\n+            Some(context.snippet(span).into())\n         }\n     } else {\n         Some(format!(\n@@ -1767,7 +1767,11 @@ fn can_extend_match_arm_body(body: &ast::Expr) -> bool {\n pub fn rewrite_literal(context: &RewriteContext, l: &ast::Lit, shape: Shape) -> Option<String> {\n     match l.node {\n         ast::LitKind::Str(_, ast::StrStyle::Cooked) => rewrite_string_lit(context, l.span, shape),\n-        _ => wrap_str(context.snippet(l.span), context.config.max_width(), shape),\n+        _ => wrap_str(\n+            context.snippet(l.span).into(),\n+            context.config.max_width(),\n+            shape,\n+        ),\n     }\n }\n \n@@ -1798,7 +1802,7 @@ fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Opt\n             );\n             return wrap_str(indented_string_lit, context.config.max_width(), shape);\n         } else {\n-            return wrap_str(string_lit, context.config.max_width(), shape);\n+            return wrap_str(string_lit.into(), context.config.max_width(), shape);\n         }\n     }\n \n@@ -2530,7 +2534,7 @@ pub fn rewrite_field(\n     prefix_max_width: usize,\n ) -> Option<String> {\n     if contains_skip(&field.attrs) {\n-        return Some(context.snippet(field.span()));\n+        return Some(context.snippet(field.span()).into());\n     }\n     let name = &field.ident.node.to_string();\n     if field.is_shorthand {\n@@ -2738,7 +2742,7 @@ fn rewrite_assignment(\n ) -> Option<String> {\n     let operator_str = match op {\n         Some(op) => context.snippet(op.span),\n-        None => \"=\".to_owned(),\n+        None => \"=\",\n     };\n \n     // 1 = space between lhs and operator."}, {"sha": "9d525f9ba9d5fd3411c3bd457a411544de1cb5cf", "filename": "src/items.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7c4a84751f8b08068a9a6c4188c88a19f1174dd8/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4a84751f8b08068a9a6c4188c88a19f1174dd8/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=7c4a84751f8b08068a9a6c4188c88a19f1174dd8", "patch": "@@ -382,7 +382,7 @@ impl<'a> FmtVisitor<'a> {\n \n                             format_expr(e, ExprType::Statement, &self.get_context(), self.shape())\n                                 .map(|s| s + suffix)\n-                                .or_else(|| Some(self.snippet(e.span)))\n+                                .or_else(|| Some(self.snippet(e.span).into()))\n                         }\n                         None => stmt.rewrite(&self.get_context(), self.shape()),\n                     }\n@@ -526,7 +526,7 @@ impl<'a> FmtVisitor<'a> {\n         if contains_skip(&field.node.attrs) {\n             let lo = field.node.attrs[0].span.lo();\n             let span = mk_sp(lo, field.span.hi());\n-            return Some(self.snippet(span));\n+            return Some(self.snippet(span).into());\n         }\n \n         let context = self.get_context();\n@@ -1429,7 +1429,8 @@ pub fn rewrite_struct_field(\n     lhs_max_width: usize,\n ) -> Option<String> {\n     if contains_skip(&field.attrs) {\n-        return Some(context.snippet(mk_sp(field.attrs[0].span.lo(), field.span.hi())));\n+        let snippet = context.snippet(mk_sp(field.attrs[0].span.lo(), field.span.hi()));\n+        return Some(snippet.into());\n     }\n \n     let type_annotation_spacing = type_annotation_spacing(context.config);"}, {"sha": "a6de1ded8630f62f8964b77ef8df658674a55394", "filename": "src/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c4a84751f8b08068a9a6c4188c88a19f1174dd8/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4a84751f8b08068a9a6c4188c88a19f1174dd8/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=7c4a84751f8b08068a9a6c4188c88a19f1174dd8", "patch": "@@ -162,7 +162,7 @@ pub fn rewrite_macro(\n         loop {\n             match parse_macro_arg(&mut parser) {\n                 Some(arg) => arg_vec.push(arg),\n-                None => return Some(context.snippet(mac.span)),\n+                None => return Some(context.snippet(mac.span).into()),\n             }\n \n             match parser.token {\n@@ -182,13 +182,13 @@ pub fn rewrite_macro(\n                                         break;\n                                     }\n                                 }\n-                                None => return Some(context.snippet(mac.span)),\n+                                None => return Some(context.snippet(mac.span).into()),\n                             }\n                         }\n                     }\n-                    return Some(context.snippet(mac.span));\n+                    return Some(context.snippet(mac.span).into());\n                 }\n-                _ => return Some(context.snippet(mac.span)),\n+                _ => return Some(context.snippet(mac.span).into()),\n             }\n \n             parser.bump();\n@@ -271,7 +271,7 @@ pub fn rewrite_macro(\n         }\n         MacroStyle::Braces => {\n             // Skip macro invocations with braces, for now.\n-            indent_macro_snippet(context, &context.snippet(mac.span), shape.indent)\n+            indent_macro_snippet(context, context.snippet(mac.span), shape.indent)\n         }\n     }\n }"}, {"sha": "2e4c01b7aaaa1f867b55a9b0d9e1f882c45447d9", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c4a84751f8b08068a9a6c4188c88a19f1174dd8/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4a84751f8b08068a9a6c4188c88a19f1174dd8/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=7c4a84751f8b08068a9a6c4188c88a19f1174dd8", "patch": "@@ -122,7 +122,7 @@ impl Rewrite for Pat {\n                 rewrite_struct_pat(path, fields, ellipsis, self.span, context, shape)\n             }\n             // FIXME(#819) format pattern macros.\n-            PatKind::Mac(..) => Some(context.snippet(self.span)),\n+            PatKind::Mac(..) => Some(context.snippet(self.span).into()),\n         }\n     }\n }"}, {"sha": "f7ae9ec103491d4f820d1e4538aa82fc43c67407", "filename": "src/visitor.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7c4a84751f8b08068a9a6c4188c88a19f1174dd8/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4a84751f8b08068a9a6c4188c88a19f1174dd8/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=7c4a84751f8b08068a9a6c4188c88a19f1174dd8", "patch": "@@ -424,7 +424,7 @@ impl<'a> FmtVisitor<'a> {\n                 self.push_rewrite(item.span, rewrite);\n             }\n             ast::ItemKind::GlobalAsm(..) => {\n-                let snippet = Some(self.snippet(item.span));\n+                let snippet = Some(self.snippet(item.span).into());\n                 self.push_rewrite(item.span, snippet);\n             }\n             ast::ItemKind::MacroDef(..) => {\n@@ -525,8 +525,12 @@ impl<'a> FmtVisitor<'a> {\n \n     pub fn push_rewrite(&mut self, span: Span, rewrite: Option<String>) {\n         self.format_missing_with_indent(source!(self, span).lo());\n-        let result = rewrite.unwrap_or_else(|| self.snippet(span));\n-        self.buffer.push_str(&result);\n+        if let Some(ref s) = rewrite {\n+            self.buffer.push_str(s);\n+        } else {\n+            let snippet = self.snippet(span);\n+            self.buffer.push_str(snippet);\n+        }\n         self.last_pos = source!(self, span).hi();\n     }\n \n@@ -826,10 +830,10 @@ impl Rewrite for ast::Attribute {\n                     .unwrap_or(0),\n                 ..shape\n             };\n-            rewrite_comment(&snippet, false, doc_shape, context.config)\n+            rewrite_comment(snippet, false, doc_shape, context.config)\n         } else {\n-            if contains_comment(&snippet) {\n-                return Some(snippet);\n+            if contains_comment(snippet) {\n+                return Some(snippet.into());\n             }\n             // 1 = `[`\n             let shape = shape.offset_left(prefix.len() + 1)?;\n@@ -980,7 +984,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n }\n \n // Format `#[derive(..)]`, using visual indent & mixed style when we need to go multiline.\n-fn format_derive(context: &RewriteContext, derive_args: &[String], shape: Shape) -> Option<String> {\n+fn format_derive(context: &RewriteContext, derive_args: &[&str], shape: Shape) -> Option<String> {\n     let mut result = String::with_capacity(128);\n     result.push_str(\"#[derive(\");\n     // 11 = `#[derive()]`\n@@ -1022,7 +1026,7 @@ fn is_derive(attr: &ast::Attribute) -> bool {\n }\n \n /// Returns the arguments of `#[derive(...)]`.\n-fn get_derive_args(context: &RewriteContext, attr: &ast::Attribute) -> Option<Vec<String>> {\n+fn get_derive_args<'a>(context: &'a RewriteContext, attr: &ast::Attribute) -> Option<Vec<&'a str>> {\n     attr.meta().and_then(|meta_item| match meta_item.node {\n         ast::MetaItemKind::List(ref args) if meta_item.name.as_str() == \"derive\" => {\n             // Every argument of `derive` should be `NestedMetaItemKind::Literal`.\n@@ -1041,7 +1045,7 @@ pub fn rewrite_extern_crate(context: &RewriteContext, item: &ast::Item) -> Optio\n     assert!(is_extern_crate(item));\n     let new_str = context.snippet(item.span);\n     Some(if contains_comment(&new_str) {\n-        new_str\n+        new_str.into()\n     } else {\n         let no_whitespace = &new_str.split_whitespace().collect::<Vec<&str>>().join(\" \");\n         String::from(&*Regex::new(r\"\\s;\").unwrap().replace(no_whitespace, \";\"))"}]}