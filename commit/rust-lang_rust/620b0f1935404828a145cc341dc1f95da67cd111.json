{"sha": "620b0f1935404828a145cc341dc1f95da67cd111", "node_id": "C_kwDOAAsO6NoAKDYyMGIwZjE5MzU0MDQ4MjhhMTQ1Y2MzNDFkYzFmOTVkYTY3Y2QxMTE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-28T13:29:47Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-28T13:29:47Z"}, "message": "improve type mismatch error for functions\n\nThis also fixes the argument names in `report_closure_arg_mismatch`\n(confusing expected/found)", "tree": {"sha": "b3c3bf9197f635c133ca54cb37b51be7b4d453c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3c3bf9197f635c133ca54cb37b51be7b4d453c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/620b0f1935404828a145cc341dc1f95da67cd111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/620b0f1935404828a145cc341dc1f95da67cd111", "html_url": "https://github.com/rust-lang/rust/commit/620b0f1935404828a145cc341dc1f95da67cd111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/620b0f1935404828a145cc341dc1f95da67cd111/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96b9bb4620f4d48aa25c381c7ea77e0cab48ac5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/96b9bb4620f4d48aa25c381c7ea77e0cab48ac5b", "html_url": "https://github.com/rust-lang/rust/commit/96b9bb4620f4d48aa25c381c7ea77e0cab48ac5b"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "2d1b2cefad74ae072a210ac6460080b947a90948", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/620b0f1935404828a145cc341dc1f95da67cd111/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b0f1935404828a145cc341dc1f95da67cd111/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=620b0f1935404828a145cc341dc1f95da67cd111", "patch": "@@ -20,6 +20,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::hir::map;\n use rustc_middle::ty::{\n     self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n@@ -253,8 +254,8 @@ pub trait InferCtxtExt<'tcx> {\n         &self,\n         span: Span,\n         found_span: Option<Span>,\n-        expected_ref: ty::PolyTraitRef<'tcx>,\n         found: ty::PolyTraitRef<'tcx>,\n+        expected: ty::PolyTraitRef<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n \n     fn suggest_fully_qualified_path(\n@@ -1529,13 +1530,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         span: Span,\n         found_span: Option<Span>,\n-        expected_ref: ty::PolyTraitRef<'tcx>,\n         found: ty::PolyTraitRef<'tcx>,\n+        expected: ty::PolyTraitRef<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        pub(crate) fn build_fn_sig_string<'tcx>(\n+        pub(crate) fn build_fn_sig_ty<'tcx>(\n             tcx: TyCtxt<'tcx>,\n             trait_ref: ty::PolyTraitRef<'tcx>,\n-        ) -> String {\n+        ) -> Ty<'tcx> {\n             let inputs = trait_ref.skip_binder().substs.type_at(1);\n             let sig = match inputs.kind() {\n                 ty::Tuple(inputs)\n@@ -1557,10 +1558,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     abi::Abi::Rust,\n                 ),\n             };\n-            trait_ref.rebind(sig).to_string()\n+\n+            tcx.mk_fn_ptr(trait_ref.rebind(sig))\n         }\n \n-        let argument_kind = match expected_ref.skip_binder().self_ty().kind() {\n+        let argument_kind = match expected.skip_binder().self_ty().kind() {\n             ty::Closure(..) => \"closure\",\n             ty::Generator(..) => \"generator\",\n             _ => \"function\",\n@@ -1569,17 +1571,22 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             self.tcx.sess,\n             span,\n             E0631,\n-            \"type mismatch in {} arguments\",\n-            argument_kind\n+            \"type mismatch in {argument_kind} arguments\",\n         );\n \n-        let found_str = format!(\"expected signature of `{}`\", build_fn_sig_string(self.tcx, found));\n-        err.span_label(span, found_str);\n+        err.span_label(span, \"expected due to this\");\n \n         let found_span = found_span.unwrap_or(span);\n-        let expected_str =\n-            format!(\"found signature of `{}`\", build_fn_sig_string(self.tcx, expected_ref));\n-        err.span_label(found_span, expected_str);\n+        err.span_label(found_span, \"found signature defined here\");\n+\n+        let expected = build_fn_sig_ty(self.tcx, expected);\n+        let found = build_fn_sig_ty(self.tcx, found);\n+\n+        let (expected_str, found_str) =\n+            self.tcx.infer_ctxt().enter(|infcx| infcx.cmp(expected, found));\n+\n+        let signature_kind = format!(\"{argument_kind} signature\");\n+        err.note_expected_found(&signature_kind, expected_str, &signature_kind, found_str);\n \n         err\n     }"}]}