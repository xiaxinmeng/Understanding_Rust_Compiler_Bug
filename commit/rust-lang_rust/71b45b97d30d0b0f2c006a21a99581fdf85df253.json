{"sha": "71b45b97d30d0b0f2c006a21a99581fdf85df253", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYjQ1Yjk3ZDMwZDBiMGYyYzAwNmEyMWE5OTU4MWZkZjg1ZGYyNTM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-24T21:40:33Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-30T07:13:56Z"}, "message": "change `skip_binder` to use T by value", "tree": {"sha": "23760d6e6ff7285eb76289ef26dc053770f98765", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23760d6e6ff7285eb76289ef26dc053770f98765"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71b45b97d30d0b0f2c006a21a99581fdf85df253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71b45b97d30d0b0f2c006a21a99581fdf85df253", "html_url": "https://github.com/rust-lang/rust/commit/71b45b97d30d0b0f2c006a21a99581fdf85df253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71b45b97d30d0b0f2c006a21a99581fdf85df253/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d7ba5fcb40362e0c1802a228efbb8dde7f5711d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d7ba5fcb40362e0c1802a228efbb8dde7f5711d", "html_url": "https://github.com/rust-lang/rust/commit/1d7ba5fcb40362e0c1802a228efbb8dde7f5711d"}], "stats": {"total": 161, "additions": 78, "deletions": 83}, "files": [{"sha": "5cba581b9dffb4c2bdc10c07d111e1d532436334", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -302,7 +302,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 // Screen out `'a: 'a` cases -- we skip the binder here but\n                 // only compare the inner values to one another, so they are still at\n                 // consistent binding levels.\n-                let &ty::OutlivesPredicate(k1, r2) = r_c.skip_binder();\n+                let ty::OutlivesPredicate(k1, r2) = r_c.skip_binder();\n                 if k1 != r2.into() { Some(r_c) } else { None }\n             }),\n         );\n@@ -526,7 +526,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     ) -> impl Iterator<Item = PredicateObligation<'tcx>> + 'a + Captures<'tcx> {\n         unsubstituted_region_constraints.iter().map(move |constraint| {\n             let constraint = substitute_value(self.tcx, result_subst, constraint);\n-            let &ty::OutlivesPredicate(k1, r2) = constraint.skip_binder(); // restored below\n+            let ty::OutlivesPredicate(k1, r2) = constraint.skip_binder(); // restored below\n \n             Obligation::new(\n                 cause.clone(),"}, {"sha": "c8d4e9f0e14b9e66c916b3cb84b8927ae24c2a72", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -496,7 +496,7 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n     where\n         T: Relate<'tcx>,\n     {\n-        Ok(ty::Binder::bind(self.relate(*a.skip_binder(), *b.skip_binder())?))\n+        Ok(ty::Binder::bind(self.relate(a.skip_binder(), b.skip_binder())?))\n     }\n \n     fn relate_item_substs("}, {"sha": "7de752d1de0dbe3be10fc0175965ed5b69897fac", "filename": "src/librustc_infer/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_infer%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_infer%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fequate.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -135,7 +135,7 @@ impl TypeRelation<'tcx> for Equate<'combine, 'infcx, 'tcx> {\n             self.fields.higher_ranked_sub(b, a, self.a_is_expected)\n         } else {\n             // Fast path for the common case.\n-            self.relate(*a.skip_binder(), *b.skip_binder())?;\n+            self.relate(a.skip_binder(), b.skip_binder())?;\n             Ok(a)\n         }\n     }"}, {"sha": "cb1f1c08d88f88cce50efd51249bd7482c324e28", "filename": "src/librustc_infer/infer/nll_relate/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -159,10 +159,9 @@ where\n         }\n     }\n \n-    // FIXME: consider taking `ty::Binder` directly, without the reference.\n     fn create_scope(\n         &mut self,\n-        value: &ty::Binder<impl TypeFoldable<'tcx>>,\n+        value: ty::Binder<impl Relate<'tcx>>,\n         universally_quantified: UniversallyQuantified,\n     ) -> BoundRegionScope<'tcx> {\n         let mut scope = BoundRegionScope::default();\n@@ -654,8 +653,8 @@ where\n             // instantiation of B (i.e., B instantiated with\n             // universals).\n \n-            let b_scope = self.create_scope(&b, UniversallyQuantified(true));\n-            let a_scope = self.create_scope(&a, UniversallyQuantified(false));\n+            let b_scope = self.create_scope(b, UniversallyQuantified(true));\n+            let a_scope = self.create_scope(a, UniversallyQuantified(false));\n \n             debug!(\"binders: a_scope = {:?} (existential)\", a_scope);\n             debug!(\"binders: b_scope = {:?} (universal)\", b_scope);\n@@ -683,7 +682,7 @@ where\n             //   subtyping (i.e., `&'b u32 <: &{P} u32`).\n             let variance = ::std::mem::replace(&mut self.ambient_variance, ty::Variance::Covariant);\n \n-            self.relate(*a.skip_binder(), *b.skip_binder())?;\n+            self.relate(a.skip_binder(), b.skip_binder())?;\n \n             self.ambient_variance = variance;\n \n@@ -698,8 +697,8 @@ where\n             // instantiation of B (i.e., B instantiated with\n             // existentials). Opposite of above.\n \n-            let a_scope = self.create_scope(&a, UniversallyQuantified(true));\n-            let b_scope = self.create_scope(&b, UniversallyQuantified(false));\n+            let a_scope = self.create_scope(a, UniversallyQuantified(true));\n+            let b_scope = self.create_scope(b, UniversallyQuantified(false));\n \n             debug!(\"binders: a_scope = {:?} (universal)\", a_scope);\n             debug!(\"binders: b_scope = {:?} (existential)\", b_scope);\n@@ -712,7 +711,7 @@ where\n             let variance =\n                 ::std::mem::replace(&mut self.ambient_variance, ty::Variance::Contravariant);\n \n-            self.relate(*a.skip_binder(), *b.skip_binder())?;\n+            self.relate(a.skip_binder(), b.skip_binder())?;\n \n             self.ambient_variance = variance;\n \n@@ -1010,7 +1009,7 @@ where\n         debug!(\"TypeGeneralizer::binders(a={:?})\", a);\n \n         self.first_free_index.shift_in(1);\n-        let result = self.relate(*a.skip_binder(), *a.skip_binder())?;\n+        let result = self.relate(a.skip_binder(), a.skip_binder())?;\n         self.first_free_index.shift_out(1);\n         Ok(ty::Binder::bind(result))\n     }"}, {"sha": "d55cbbe19c279d9699672b8842762e24bb64b261", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -911,7 +911,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n                 }\n                 let sig = cx.tables().node_type(expr.hir_id).fn_sig(cx.tcx);\n                 let from = sig.inputs().skip_binder()[0];\n-                let to = *sig.output().skip_binder();\n+                let to = sig.output().skip_binder();\n                 return Some((from, to));\n             }\n             None"}, {"sha": "8f15c99f951fe234000288f1a36bc70cbd4b8494", "filename": "src/librustc_middle/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fich%2Fimpls_ty.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -123,7 +123,7 @@ where\n     T: HashStable<StableHashingContext<'a>>,\n {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        self.skip_binder().hash_stable(hcx, hasher);\n+        self.as_ref().skip_binder().hash_stable(hcx, hasher);\n     }\n }\n "}, {"sha": "4693a2f66fb4ccfef2522681a9e436c82a38b916", "filename": "src/librustc_middle/ty/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2F_match.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -118,6 +118,6 @@ impl TypeRelation<'tcx> for Match<'tcx> {\n     where\n         T: Relate<'tcx>,\n     {\n-        Ok(ty::Binder::bind(self.relate(*a.skip_binder(), *b.skip_binder())?))\n+        Ok(ty::Binder::bind(self.relate(a.skip_binder(), b.skip_binder())?))\n     }\n }"}, {"sha": "0e86fcf53b247e0d460ab171e3ab18d45e5f73d5", "filename": "src/librustc_middle/ty/flags.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fflags.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -88,13 +88,13 @@ impl FlagComputation {\n                 self.add_substs(substs);\n             }\n \n-            &ty::GeneratorWitness(ref ts) => {\n+            &ty::GeneratorWitness(ts) => {\n                 let mut computation = FlagComputation::new();\n-                computation.add_tys(&ts.skip_binder()[..]);\n+                computation.add_tys(ts.skip_binder());\n                 self.add_bound_computation(computation);\n             }\n \n-            &ty::Closure(_, ref substs) => {\n+            &ty::Closure(_, substs) => {\n                 self.add_substs(substs);\n             }\n \n@@ -122,7 +122,7 @@ impl FlagComputation {\n                 self.add_substs(substs);\n             }\n \n-            &ty::Projection(ref data) => {\n+            &ty::Projection(data) => {\n                 self.add_flags(TypeFlags::HAS_TY_PROJECTION);\n                 self.add_projection_ty(data);\n             }\n@@ -211,7 +211,7 @@ impl FlagComputation {\n \n                 self.add_bound_computation(computation);\n             }\n-            ty::PredicateKind::Projection(projection) => {\n+            &ty::PredicateKind::Projection(projection) => {\n                 let mut computation = FlagComputation::new();\n                 let ty::ProjectionPredicate { projection_ty, ty } = projection.skip_binder();\n                 computation.add_projection_ty(projection_ty);\n@@ -298,7 +298,7 @@ impl FlagComputation {\n         self.add_ty(projection.ty);\n     }\n \n-    fn add_projection_ty(&mut self, projection_ty: &ty::ProjectionTy<'_>) {\n+    fn add_projection_ty(&mut self, projection_ty: ty::ProjectionTy<'_>) {\n         self.add_substs(projection_ty.substs);\n     }\n "}, {"sha": "492f8ce9ef1a9d1afd832535d5a91b7a7edf1b35", "filename": "src/librustc_middle/ty/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ffold.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -336,7 +336,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         {\n             fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n                 self.outer_index.shift_in(1);\n-                let result = t.skip_binder().visit_with(self);\n+                let result = t.as_ref().skip_binder().visit_with(self);\n                 self.outer_index.shift_out(1);\n                 result\n             }\n@@ -558,7 +558,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let fld_c = |bound_ct, ty| {\n             self.mk_const(ty::Const { val: ty::ConstKind::Bound(ty::INNERMOST, bound_ct), ty })\n         };\n-        self.replace_escaping_bound_vars(value.skip_binder(), fld_r, fld_t, fld_c)\n+        self.replace_escaping_bound_vars(value.as_ref().skip_binder(), fld_r, fld_t, fld_c)\n     }\n \n     /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping\n@@ -617,7 +617,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,\n         T: TypeFoldable<'tcx>,\n     {\n-        self.replace_escaping_bound_vars(value.skip_binder(), fld_r, fld_t, fld_c)\n+        self.replace_escaping_bound_vars(value.as_ref().skip_binder(), fld_r, fld_t, fld_c)\n     }\n \n     /// Replaces any late-bound regions bound in `value` with\n@@ -673,7 +673,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         T: TypeFoldable<'tcx>,\n     {\n         let mut collector = LateBoundRegionsCollector::new(just_constraint);\n-        let result = value.skip_binder().visit_with(&mut collector);\n+        let result = value.as_ref().skip_binder().visit_with(&mut collector);\n         assert!(!result); // should never have stopped early\n         collector.regions\n     }"}, {"sha": "39b8566e7a873a0d9f50d27c02084880babe2428", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -2303,7 +2303,7 @@ impl<'tcx> ty::Instance<'tcx> {\n \n                 let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n                 sig.map_bound(|sig| tcx.mk_fn_sig(\n-                    iter::once(*env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n+                    iter::once(env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n                     sig.output(),\n                     sig.c_variadic,\n                     sig.unsafety,"}, {"sha": "9fa1260f64d7407e8db9de792e944b409dd56f09", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -189,7 +189,7 @@ pub trait PrettyPrinter<'tcx>:\n     where\n         T: Print<'tcx, Self, Output = Self, Error = Self::Error> + TypeFoldable<'tcx>,\n     {\n-        value.skip_binder().print(self)\n+        value.as_ref().skip_binder().print(self)\n     }\n \n     /// Prints comma-separated elements."}, {"sha": "d0d972727bcd8d317810ee57edb05674008131b4", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -514,7 +514,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::PredicateKind<'a> {\n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::Binder<T> {\n     type Lifted = ty::Binder<T::Lifted>;\n     fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(self.skip_binder()).map(ty::Binder::bind)\n+        tcx.lift(self.as_ref().skip_binder()).map(ty::Binder::bind)\n     }\n }\n \n@@ -798,7 +798,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.skip_binder().visit_with(visitor)\n+        self.as_ref().skip_binder().visit_with(visitor)\n     }\n \n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {"}, {"sha": "c7683cefd82f6a6541c65bb6a5b6b0eedb00910f", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -615,7 +615,7 @@ impl<'tcx> ExistentialPredicate<'tcx> {\n impl<'tcx> Binder<ExistentialPredicate<'tcx>> {\n     pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {\n         use crate::ty::ToPredicate;\n-        match *self.skip_binder() {\n+        match self.skip_binder() {\n             ExistentialPredicate::Trait(tr) => {\n                 Binder(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)\n             }\n@@ -776,7 +776,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n \n     pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {\n         // Note that we preserve binding levels\n-        Binder(ty::TraitPredicate { trait_ref: *self.skip_binder() })\n+        Binder(ty::TraitPredicate { trait_ref: self.skip_binder() })\n     }\n }\n \n@@ -880,8 +880,8 @@ impl<T> Binder<T> {\n     /// - extracting the `DefId` from a PolyTraitRef;\n     /// - comparing the self type of a PolyTraitRef to see if it is equal to\n     ///   a type parameter `X`, since the type `X` does not reference any regions\n-    pub fn skip_binder(&self) -> &T {\n-        &self.0\n+    pub fn skip_binder(self) -> T {\n+        self.0\n     }\n \n     pub fn as_ref(&self) -> Binder<&T> {\n@@ -916,11 +916,7 @@ impl<T> Binder<T> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        if self.skip_binder().has_escaping_bound_vars() {\n-            None\n-        } else {\n-            Some(self.skip_binder().clone())\n-        }\n+        if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }\n     }\n \n     /// Given two things that have the same binder level,\n@@ -997,7 +993,7 @@ impl<'tcx> ProjectionTy<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable)]\n pub struct GenSig<'tcx> {\n     pub resume_ty: Ty<'tcx>,\n     pub yield_ty: Ty<'tcx>,"}, {"sha": "82c649b8f543b88c22794ac1ac0e5909c54ca606", "filename": "src/librustc_middle/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fwalk.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -133,7 +133,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n             ty::Dynamic(obj, lt) => {\n                 stack.push(lt.into());\n                 stack.extend(obj.iter().rev().flat_map(|predicate| {\n-                    let (substs, opt_ty) = match *predicate.skip_binder() {\n+                    let (substs, opt_ty) = match predicate.skip_binder() {\n                         ty::ExistentialPredicate::Trait(tr) => (tr.substs, None),\n                         ty::ExistentialPredicate::Projection(p) => (p.substs, Some(p.ty)),\n                         ty::ExistentialPredicate::AutoTrait(_) =>"}, {"sha": "17846055f6c9615290796c931375e39317239e59", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -1923,7 +1923,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 // We use a mix of the HIR and the Ty types to get information\n                 // as the HIR doesn't have full types for closure arguments.\n-                let return_ty = *sig.output().skip_binder();\n+                let return_ty = sig.output().skip_binder();\n                 let mut return_span = fn_decl.output.span();\n                 if let hir::FnRetTy::Return(ty) = &fn_decl.output {\n                     if let hir::TyKind::Rptr(lifetime, _) = ty.kind {\n@@ -1965,7 +1965,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let argument_ty = sig.inputs().skip_binder().first()?;\n \n                 let return_span = fn_decl.output.span();\n-                let return_ty = *sig.output().skip_binder();\n+                let return_ty = sig.output().skip_binder();\n \n                 // We expect the first argument to be a reference.\n                 match argument_ty.kind {"}, {"sha": "e4f4885690fd92045d423a777b701c73bffcaba4", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -422,7 +422,7 @@ impl Visitor<'tcx> for ExprVisitor<'tcx> {\n                         let typ = self.tables.node_type(expr.hir_id);\n                         let sig = typ.fn_sig(self.tcx);\n                         let from = sig.inputs().skip_binder()[0];\n-                        let to = *sig.output().skip_binder();\n+                        let to = sig.output().skip_binder();\n                         self.check_transmute(expr.span, from, to);\n                     }\n                 }"}, {"sha": "20f09ef52f00bd741abeeb182ee0f75cc9c2119f", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -92,14 +92,14 @@ where\n         for (predicate, _span) in predicates {\n             match predicate.kind() {\n                 ty::PredicateKind::Trait(poly_predicate, _) => {\n-                    let ty::TraitPredicate { trait_ref } = *poly_predicate.skip_binder();\n+                    let ty::TraitPredicate { trait_ref } = poly_predicate.skip_binder();\n                     if self.visit_trait(trait_ref) {\n                         return true;\n                     }\n                 }\n                 ty::PredicateKind::Projection(poly_predicate) => {\n                     let ty::ProjectionPredicate { projection_ty, ty } =\n-                        *poly_predicate.skip_binder();\n+                        poly_predicate.skip_binder();\n                     if ty.visit_with(self) {\n                         return true;\n                     }\n@@ -108,7 +108,7 @@ where\n                     }\n                 }\n                 ty::PredicateKind::TypeOutlives(poly_predicate) => {\n-                    let ty::OutlivesPredicate(ty, _region) = *poly_predicate.skip_binder();\n+                    let ty::OutlivesPredicate(ty, _region) = poly_predicate.skip_binder();\n                     if ty.visit_with(self) {\n                         return true;\n                     }\n@@ -175,7 +175,7 @@ where\n             ty::Dynamic(predicates, ..) => {\n                 // All traits in the list are considered the \"primary\" part of the type\n                 // and are visited by shallow visitors.\n-                for predicate in *predicates.skip_binder() {\n+                for predicate in predicates.skip_binder() {\n                     let trait_ref = match predicate {\n                         ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,\n                         ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),\n@@ -1270,7 +1270,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             );\n \n             for (trait_predicate, _, _) in bounds.trait_bounds {\n-                if self.visit_trait(*trait_predicate.skip_binder()) {\n+                if self.visit_trait(trait_predicate.skip_binder()) {\n                     return;\n                 }\n             }"}, {"sha": "ecf27fbf54220a00d1205a3382e73394713b594a", "filename": "src/librustc_symbol_mangling/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_symbol_mangling%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_symbol_mangling%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Fv0.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -219,7 +219,7 @@ impl SymbolMangler<'tcx> {\n         lifetime_depths.end += lifetimes;\n \n         self.binders.push(BinderLevel { lifetime_depths });\n-        self = print_value(self, value.skip_binder())?;\n+        self = print_value(self, value.as_ref().skip_binder())?;\n         self.binders.pop();\n \n         Ok(self)"}, {"sha": "ce478de7c755c64e071ceff53ef6998307d83311", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -691,7 +691,7 @@ where\n     OP: FnMut(ty::Region<'tcx>),\n {\n     fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> bool {\n-        t.skip_binder().visit_with(self);\n+        t.as_ref().skip_binder().visit_with(self);\n         false // keep visiting\n     }\n "}, {"sha": "49e43873df759d652118a863a2370d36d7286300", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -1569,7 +1569,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     // no need to overload user in such cases\n                     return;\n                 }\n-                let &SubtypePredicate { a_is_expected: _, a, b } = data.skip_binder();\n+                let SubtypePredicate { a_is_expected: _, a, b } = data.skip_binder();\n                 // both must be type variables, or the other would've been instantiated\n                 assert!(a.is_ty_var() && b.is_ty_var());\n                 self.need_type_info_err(body_id, span, a, ErrorCode::E0282)"}, {"sha": "ec51dddc2c8102265469b2fb08cc6b842eafbbf3", "filename": "src/librustc_trait_selection/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -122,7 +122,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) -> OnUnimplementedNote {\n         let def_id =\n             self.impl_similar_to(trait_ref, obligation).unwrap_or_else(|| trait_ref.def_id());\n-        let trait_ref = *trait_ref.skip_binder();\n+        let trait_ref = trait_ref.skip_binder();\n \n         let mut flags = vec![];\n         flags.push((\n@@ -219,7 +219,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         }\n         if let ty::Dynamic(traits, _) = self_ty.kind {\n-            for t in *traits.skip_binder() {\n+            for t in traits.skip_binder() {\n                 if let ty::ExistentialPredicate::Trait(trait_ref) = t {\n                     flags.push((sym::_Self, Some(self.tcx.def_path_str(trait_ref.def_id))))\n                 }"}, {"sha": "1fafa9ec035cebb544c3f7e41ec2b3d8ad938724", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -1179,7 +1179,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) -> DiagnosticBuilder<'tcx> {\n         crate fn build_fn_sig_string<'tcx>(\n             tcx: TyCtxt<'tcx>,\n-            trait_ref: &ty::TraitRef<'tcx>,\n+            trait_ref: ty::TraitRef<'tcx>,\n         ) -> String {\n             let inputs = trait_ref.substs.type_at(1);\n             let sig = if let ty::Tuple(inputs) = inputs.kind {\n@@ -1360,7 +1360,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         }\n                         ty::GeneratorWitness(..) => {}\n                         _ if generator.is_none() => {\n-                            trait_ref = Some(*derived_obligation.parent_trait_ref.skip_binder());\n+                            trait_ref = Some(derived_obligation.parent_trait_ref.skip_binder());\n                             target_ty = Some(ty);\n                         }\n                         _ => {}"}, {"sha": "91c162872b21572226891f30a46c2ba5d8e9c5e4", "filename": "src/librustc_trait_selection/traits/select/candidate_assembly.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -220,7 +220,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Okay to skip binder because the substs on generator types never\n         // touch bound regions, they just capture the in-scope\n         // type/region parameters.\n-        let self_ty = *obligation.self_ty().skip_binder();\n+        let self_ty = obligation.self_ty().skip_binder();\n         match self_ty.kind {\n             ty::Generator(..) => {\n                 debug!(\n@@ -299,7 +299,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         // Okay to skip binder because what we are inspecting doesn't involve bound regions.\n-        let self_ty = *obligation.self_ty().skip_binder();\n+        let self_ty = obligation.self_ty().skip_binder();\n         match self_ty.kind {\n             ty::Infer(ty::TyVar(_)) => {\n                 debug!(\"assemble_fn_pointer_candidates: ambiguous self-type\");\n@@ -362,7 +362,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) -> Result<(), SelectionError<'tcx>> {\n         // Okay to skip binder here because the tests we do below do not involve bound regions.\n-        let self_ty = *obligation.self_ty().skip_binder();\n+        let self_ty = obligation.self_ty().skip_binder();\n         debug!(\"assemble_candidates_from_auto_impls(self_ty={:?})\", self_ty);\n \n         let def_id = obligation.predicate.def_id();\n@@ -583,7 +583,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) -> Result<(), SelectionError<'tcx>> {\n         // Okay to skip binder here because the tests we do below do not involve bound regions.\n-        let self_ty = *obligation.self_ty().skip_binder();\n+        let self_ty = obligation.self_ty().skip_binder();\n         debug!(\"assemble_candidates_for_trait_alias(self_ty={:?})\", self_ty);\n \n         let def_id = obligation.predicate.def_id();"}, {"sha": "fa970589bbbf60399b801884cd6ccb94db9572da", "filename": "src/librustc_trait_selection/traits/select/confirmation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -326,7 +326,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // probably flatten the binder from the obligation and the binder\n         // from the object. Have to try to make a broken test case that\n         // results.\n-        let self_ty = self.infcx.shallow_resolve(*obligation.self_ty().skip_binder());\n+        let self_ty = self.infcx.shallow_resolve(obligation.self_ty().skip_binder());\n         let poly_trait_ref = match self_ty.kind {\n             ty::Dynamic(ref data, ..) => data\n                 .principal()\n@@ -379,7 +379,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         debug!(\"confirm_fn_pointer_candidate({:?})\", obligation);\n \n         // Okay to skip binder; it is reintroduced below.\n-        let self_ty = self.infcx.shallow_resolve(*obligation.self_ty().skip_binder());\n+        let self_ty = self.infcx.shallow_resolve(obligation.self_ty().skip_binder());\n         let sig = self_ty.fn_sig(self.tcx());\n         let trait_ref = closure_trait_ref_and_return_type(\n             self.tcx(),\n@@ -448,7 +448,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Okay to skip binder because the substs on generator types never\n         // touch bound regions, they just capture the in-scope\n         // type/region parameters.\n-        let self_ty = self.infcx.shallow_resolve(*obligation.self_ty().skip_binder());\n+        let self_ty = self.infcx.shallow_resolve(obligation.self_ty().skip_binder());\n         let (generator_def_id, substs) = match self_ty.kind {\n             ty::Generator(id, substs, _) => (id, substs),\n             _ => bug!(\"closure candidate for non-closure {:?}\", obligation),\n@@ -497,7 +497,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Okay to skip binder because the substs on closure types never\n         // touch bound regions, they just capture the in-scope\n         // type/region parameters.\n-        let self_ty = self.infcx.shallow_resolve(*obligation.self_ty().skip_binder());\n+        let self_ty = self.infcx.shallow_resolve(obligation.self_ty().skip_binder());\n         let (closure_def_id, substs) = match self_ty.kind {\n             ty::Closure(id, substs) => (id, substs),\n             _ => bug!(\"closure candidate for non-closure {:?}\", obligation),"}, {"sha": "ebff2dd9b23c1e3e46780d2933bce28348e97524", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -695,7 +695,7 @@ pub fn object_region_bounds<'tcx>(\n     let open_ty = tcx.mk_ty_infer(ty::FreshTy(0));\n \n     let predicates = existential_predicates.iter().filter_map(|predicate| {\n-        if let ty::ExistentialPredicate::Projection(_) = *predicate.skip_binder() {\n+        if let ty::ExistentialPredicate::Projection(_) = predicate.skip_binder() {\n             None\n         } else {\n             Some(predicate.with_self_ty(tcx, open_ty))"}, {"sha": "ed021e5b9de1b8431e4698ce26177e53a6b65e84", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -615,7 +615,7 @@ crate fn collect_bound_vars<'a, 'tcx, T: TypeFoldable<'tcx>>(\n     ty: &'a Binder<T>,\n ) -> (T, chalk_ir::VariableKinds<RustInterner<'tcx>>, BTreeMap<DefId, u32>) {\n     let mut bound_vars_collector = BoundVarsCollector::new();\n-    ty.skip_binder().visit_with(&mut bound_vars_collector);\n+    ty.as_ref().skip_binder().visit_with(&mut bound_vars_collector);\n     let mut parameters = bound_vars_collector.parameters;\n     let named_parameters: BTreeMap<DefId, u32> = bound_vars_collector\n         .named_parameters\n@@ -625,7 +625,7 @@ crate fn collect_bound_vars<'a, 'tcx, T: TypeFoldable<'tcx>>(\n         .collect();\n \n     let mut bound_var_substitutor = NamedBoundVarSubstitutor::new(tcx, &named_parameters);\n-    let new_ty = ty.skip_binder().fold_with(&mut bound_var_substitutor);\n+    let new_ty = ty.as_ref().skip_binder().fold_with(&mut bound_var_substitutor);\n \n     for var in named_parameters.values() {\n         parameters.insert(*var, chalk_ir::VariableKind::Lifetime);"}, {"sha": "5d1949626dd84e82a24bb0dc482b19993bacf35e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -1802,15 +1802,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         // Calling `skip_binder` is okay because the predicates are re-bound.\n         let regular_trait_predicates = existential_trait_refs\n-            .map(|trait_ref| ty::ExistentialPredicate::Trait(*trait_ref.skip_binder()));\n+            .map(|trait_ref| ty::ExistentialPredicate::Trait(trait_ref.skip_binder()));\n         let auto_trait_predicates = auto_traits\n             .into_iter()\n             .map(|trait_ref| ty::ExistentialPredicate::AutoTrait(trait_ref.trait_ref().def_id()));\n         let mut v = regular_trait_predicates\n             .chain(auto_trait_predicates)\n             .chain(\n                 existential_projections\n-                    .map(|x| ty::ExistentialPredicate::Projection(*x.skip_binder())),\n+                    .map(|x| ty::ExistentialPredicate::Projection(x.skip_binder())),\n             )\n             .collect::<SmallVec<[_; 8]>>();\n         v.sort_by(|a, b| a.stable_cmp(tcx, b));"}, {"sha": "fce2b18b782fb3a0794695f215d2d1d69ae18b45", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -188,7 +188,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ty::Infer(ty::TyVar(vid)) => self.deduce_expectations_from_obligations(vid),\n             ty::FnPtr(sig) => {\n-                let expected_sig = ExpectedSig { cause_span: None, sig: *sig.skip_binder() };\n+                let expected_sig = ExpectedSig { cause_span: None, sig: sig.skip_binder() };\n                 (Some(expected_sig), Some(ty::ClosureKind::Fn))\n             }\n             _ => (None, None),\n@@ -501,7 +501,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             for ((hir_ty, &supplied_ty), expected_ty) in decl\n                 .inputs\n                 .iter()\n-                .zip(*supplied_sig.inputs().skip_binder()) // binder moved to (*) below\n+                .zip(supplied_sig.inputs().skip_binder()) // binder moved to (*) below\n                 .zip(expected_sigs.liberated_sig.inputs())\n             // `liberated_sig` is E'.\n             {"}, {"sha": "e6217e0cc1b6eceb45f10a1d9dc44e1f7f4ad115", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -502,7 +502,7 @@ fn compare_self_type<'tcx>(\n             ty::ImplContainer(_) => impl_trait_ref.self_ty(),\n             ty::TraitContainer(_) => tcx.types.self_param,\n         };\n-        let self_arg_ty = *tcx.fn_sig(method.def_id).input(0).skip_binder();\n+        let self_arg_ty = tcx.fn_sig(method.def_id).input(0).skip_binder();\n         let param_env = ty::ParamEnv::reveal_all();\n \n         tcx.infer_ctxt().enter(|infcx| {"}, {"sha": "f6991120f347989da516a95e7cd58c979805d0d6", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -366,7 +366,7 @@ impl TypeRelation<'tcx> for SimpleEqRelation<'tcx> {\n         // After we do so, it should be totally fine to skip the binders.\n         let anon_a = self.tcx.anonymize_late_bound_regions(&a);\n         let anon_b = self.tcx.anonymize_late_bound_regions(&b);\n-        self.relate(*anon_a.skip_binder(), *anon_b.skip_binder())?;\n+        self.relate(anon_a.skip_binder(), anon_b.skip_binder())?;\n \n         Ok(a.clone())\n     }"}, {"sha": "b75dac52b93e51eca8a9278758f5c870bee05fc2", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -608,7 +608,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             ty::Adt(def, _) => bound_spans.push((def_span(def.did), msg)),\n                             // Point at the trait object that couldn't satisfy the bound.\n                             ty::Dynamic(preds, _) => {\n-                                for pred in *preds.skip_binder() {\n+                                for pred in preds.skip_binder() {\n                                     match pred {\n                                         ty::ExistentialPredicate::Trait(tr) => {\n                                             bound_spans.push((def_span(tr.def_id), msg.clone()))"}, {"sha": "b617937d6bd542d43324e485e1a843f546de6112", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -2446,7 +2446,7 @@ fn bounds_from_generic_predicates(\n /// Return placeholder code for the given function.\n fn fn_sig_suggestion(\n     tcx: TyCtxt<'_>,\n-    sig: &ty::FnSig<'_>,\n+    sig: ty::FnSig<'_>,\n     ident: Ident,\n     predicates: ty::GenericPredicates<'_>,\n     assoc: &ty::AssocItem,"}, {"sha": "a1e060b97ad2815a6b527ba48b3541910f3f70d9", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -500,7 +500,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return false;\n             }\n             // We're emitting a suggestion, so we can just ignore regions\n-            let fn_sig = *self.tcx.fn_sig(def_id).skip_binder();\n+            let fn_sig = self.tcx.fn_sig(def_id).skip_binder();\n \n             let other_ty = if let FnDef(def_id, _) = other_ty.kind {\n                 if !self.tcx.has_typeck_tables(def_id) {"}, {"sha": "3b203dd222afbbd15e2a737e9071c801449ece6e", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -216,7 +216,7 @@ fn check_object_overlap<'tcx>(\n         let component_def_ids = data.iter().flat_map(|predicate| {\n             match predicate.skip_binder() {\n                 ty::ExistentialPredicate::Trait(tr) => Some(tr.def_id),\n-                ty::ExistentialPredicate::AutoTrait(def_id) => Some(*def_id),\n+                ty::ExistentialPredicate::AutoTrait(def_id) => Some(def_id),\n                 // An associated type projection necessarily comes with\n                 // an additional `Trait` requirement.\n                 ty::ExistentialPredicate::Projection(..) => None,"}, {"sha": "8920203e6af400a46e133816d8ffb3d2f53fcc81", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -2102,11 +2102,11 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n                     .emit();\n             }\n         };\n-        for (input, ty) in decl.inputs.iter().zip(*fty.inputs().skip_binder()) {\n+        for (input, ty) in decl.inputs.iter().zip(fty.inputs().skip_binder()) {\n             check(&input, ty)\n         }\n         if let hir::FnRetTy::Return(ref ty) = decl.output {\n-            check(&ty, *fty.output().skip_binder())\n+            check(&ty, fty.output().skip_binder())\n         }\n     }\n "}, {"sha": "bfe8464347d2986b7982e7f7cd3ac7482ddbac72", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b45b97d30d0b0f2c006a21a99581fdf85df253/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=71b45b97d30d0b0f2c006a21a99581fdf85df253", "patch": "@@ -347,7 +347,7 @@ impl Clean<GenericBound> for (ty::PolyTraitRef<'_>, &[TypeBinding]) {\n \n         GenericBound::TraitBound(\n             PolyTrait {\n-                trait_: (*poly_trait_ref.skip_binder(), bounds).clean(cx),\n+                trait_: (poly_trait_ref.skip_binder(), bounds).clean(cx),\n                 generic_params: late_bound_regions,\n             },\n             hir::TraitBoundModifier::None,\n@@ -549,7 +549,7 @@ impl<'tcx> Clean<Option<WherePredicate>> for ty::PolyOutlivesPredicate<Ty<'tcx>,\n \n impl<'tcx> Clean<WherePredicate> for ty::PolyProjectionPredicate<'tcx> {\n     fn clean(&self, cx: &DocContext<'_>) -> WherePredicate {\n-        let ty::ProjectionPredicate { projection_ty, ty } = *self.skip_binder();\n+        let ty::ProjectionPredicate { projection_ty, ty } = self.skip_binder();\n         WherePredicate::EqPredicate { lhs: projection_ty.clean(cx), rhs: ty.clean(cx) }\n     }\n }\n@@ -1177,7 +1177,7 @@ impl Clean<Item> for ty::AssocItem {\n                         ty::ImplContainer(def_id) => cx.tcx.type_of(def_id),\n                         ty::TraitContainer(_) => cx.tcx.types.self_param,\n                     };\n-                    let self_arg_ty = *sig.input(0).skip_binder();\n+                    let self_arg_ty = sig.input(0).skip_binder();\n                     if self_arg_ty == self_ty {\n                         decl.inputs.values[0].type_ = Generic(String::from(\"Self\"));\n                     } else if let ty::Ref(_, ty, _) = self_arg_ty.kind {\n@@ -1679,7 +1679,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                                 if let ty::PredicateKind::Projection(proj) = pred.kind() {\n                                     let proj = proj.skip_binder();\n                                     if proj.projection_ty.trait_ref(cx.tcx)\n-                                        == *trait_ref.skip_binder()\n+                                        == trait_ref.skip_binder()\n                                     {\n                                         Some(TypeBinding {\n                                             name: cx"}]}