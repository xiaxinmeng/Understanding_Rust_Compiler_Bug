{"sha": "fb91c76586a3a01fef6a8c49edb9e4598fbd138f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiOTFjNzY1ODZhM2EwMWZlZjZhOGM0OWVkYjllNDU5OGZiZDEzOGY=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-15T14:33:27Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-15T14:33:27Z"}, "message": "Add more tests for default_numeric_fallback", "tree": {"sha": "0ce0ff91916b72ee705d73de33b2e3610ce6853e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ce0ff91916b72ee705d73de33b2e3610ce6853e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb91c76586a3a01fef6a8c49edb9e4598fbd138f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb91c76586a3a01fef6a8c49edb9e4598fbd138f", "html_url": "https://github.com/rust-lang/rust/commit/fb91c76586a3a01fef6a8c49edb9e4598fbd138f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb91c76586a3a01fef6a8c49edb9e4598fbd138f/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0198ac7bdd807abeb8f6b423c22b1e594fb0b4bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0198ac7bdd807abeb8f6b423c22b1e594fb0b4bf", "html_url": "https://github.com/rust-lang/rust/commit/0198ac7bdd807abeb8f6b423c22b1e594fb0b4bf"}], "stats": {"total": 232, "additions": 169, "deletions": 63}, "files": [{"sha": "d755112a178e0cd1dcefcf66f5b04d220abf3d33", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb91c76586a3a01fef6a8c49edb9e4598fbd138f/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91c76586a3a01fef6a8c49edb9e4598fbd138f/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=fb91c76586a3a01fef6a8c49edb9e4598fbd138f", "patch": "@@ -27,7 +27,7 @@ declare_clippy_lint! {\n     /// **Why is this bad?** For those who are very careful about types, default numeric fallback\n     /// can be a pitfall that cause unexpected runtime behavior.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** This lint can only be allowed at the function level or above.\n     ///\n     /// **Example:**\n     /// ```rust"}, {"sha": "c488109446936c4a663d2ec8bf982e5cc850021c", "filename": "tests/ui/default_numeric_fallback.rs", "status": "modified", "additions": 77, "deletions": 35, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/fb91c76586a3a01fef6a8c49edb9e4598fbd138f/tests%2Fui%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91c76586a3a01fef6a8c49edb9e4598fbd138f/tests%2Fui%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback.rs?ref=fb91c76586a3a01fef6a8c49edb9e4598fbd138f", "patch": "@@ -4,55 +4,97 @@\n #![allow(clippy::no_effect)]\n #![allow(clippy::unnecessary_operation)]\n \n-fn concrete_arg(x: i32) {}\n+mod basic_expr {\n+    fn test() {\n+        // Should lint unsuffixed literals typed `i32`.\n+        let x = 22;\n+        let x = [1, 2, 3];\n+        let x = if true { (1, 2) } else { (3, 4) };\n+        let x = match 1 {\n+            1 => 1,\n+            _ => 2,\n+        };\n \n-fn generic_arg<T>(t: T) {}\n+        // Should lint unsuffixed literals typed `f64`.\n+        let x = 0.12;\n \n-struct ConcreteStruct {\n-    x: i32,\n+        // Should NOT lint suffixed literals.\n+        let x = 22_i32;\n+        let x = 0.12_f64;\n+\n+        // Should NOT lint literals in init expr if `Local` has a type annotation.\n+        let x: f64 = 0.1;\n+        let x: [i32; 3] = [1, 2, 3];\n+        let x: (i32, i32) = if true { (1, 2) } else { (3, 4) };\n+        let x: _ = 1;\n+    }\n }\n \n-struct StructForMethodCallTest {\n-    x: i32,\n+mod nested_local {\n+    fn test() {\n+        let x: _ = {\n+            // Should lint this because this literal is not bound to any types.\n+            let y = 1;\n+\n+            // Should NOT lint this because this literal is bound to `_` of outer `Local`.\n+            1\n+        };\n+    }\n }\n \n-impl StructForMethodCallTest {\n-    fn concrete_arg(&self, x: i32) {}\n+mod function_def {\n+    fn ret_i32() -> i32 {\n+        // Even though the output type is specified,\n+        // this unsuffixed literal is linted to reduce heuristics and keep codebase simple.\n+        23\n+    }\n \n-    fn generic_arg<T>(&self, t: T) {}\n+    fn test() {\n+        // Should lint this because return type is inferred to `i32` and NOT bound to a concrete\n+        // type.\n+        let f = || -> _ { 1 };\n+\n+        // Even though the output type is specified,\n+        // this unsuffixed literal is linted to reduce heuristics and keep codebase simple.\n+        let f = || -> i32 { 1 };\n+    }\n }\n \n-fn main() {\n-    let s = StructForMethodCallTest { x: 10_i32 };\n+mod function_calls {\n+    fn concrete_arg(x: i32) {}\n+\n+    fn generic_arg<T>(t: T) {}\n \n-    // Bad.\n-    let x = 1;\n-    let x = 0.1;\n+    fn test() {\n+        // Should NOT lint this because the argument type is bound to a concrete type.\n+        concrete_arg(1);\n \n-    let x = if true { 1 } else { 2 };\n+        // Should lint this because the argument type is inferred to `i32` and NOT bound to a concrete type.\n+        generic_arg(1);\n \n-    let x: _ = {\n-        let y = 1;\n-        1\n-    };\n+        // Should lint this because the argument type is inferred to `i32` and NOT bound to a concrete type.\n+        let x: _ = generic_arg(1);\n+    }\n+}\n+\n+mod method_calls {\n+    struct StructForMethodCallTest {}\n \n-    generic_arg(10);\n-    s.generic_arg(10);\n-    let x: _ = generic_arg(10);\n-    let x: _ = s.generic_arg(10);\n+    impl StructForMethodCallTest {\n+        fn concrete_arg(&self, x: i32) {}\n \n-    // Good.\n-    let x = 1_i32;\n-    let x: i32 = 1;\n-    let x: _ = 1;\n-    let x = 0.1_f64;\n-    let x: f64 = 0.1;\n-    let x: _ = 0.1;\n+        fn generic_arg<T>(&self, t: T) {}\n+    }\n \n-    let x: _ = if true { 1 } else { 2 };\n+    fn test() {\n+        let s = StructForMethodCallTest {};\n \n-    concrete_arg(10);\n-    s.concrete_arg(10);\n-    let x = concrete_arg(10);\n-    let x = s.concrete_arg(10);\n+        // Should NOT lint this because the argument type is bound to a concrete type.\n+        s.concrete_arg(1);\n+\n+        // Should lint this because the argument type is bound to a concrete type.\n+        s.generic_arg(1);\n+    }\n }\n+\n+fn main() {}"}, {"sha": "c71d05d79934b299fae5e85afe1a623f6a5256b4", "filename": "tests/ui/default_numeric_fallback.stderr", "status": "modified", "additions": 91, "deletions": 27, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/fb91c76586a3a01fef6a8c49edb9e4598fbd138f/tests%2Fui%2Fdefault_numeric_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb91c76586a3a01fef6a8c49edb9e4598fbd138f/tests%2Fui%2Fdefault_numeric_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback.stderr?ref=fb91c76586a3a01fef6a8c49edb9e4598fbd138f", "patch": "@@ -1,75 +1,139 @@\n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:29:13\n+  --> $DIR/default_numeric_fallback.rs:10:17\n    |\n-LL |     let x = 1;\n-   |             ^\n+LL |         let x = 22;\n+   |                 ^^\n    |\n    = note: `-D clippy::default-numeric-fallback` implied by `-D warnings`\n    = help: consider adding suffix to avoid default numeric fallback\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:30:13\n+  --> $DIR/default_numeric_fallback.rs:11:18\n+   |\n+LL |         let x = [1, 2, 3];\n+   |                  ^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:11:21\n+   |\n+LL |         let x = [1, 2, 3];\n+   |                     ^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:11:24\n    |\n-LL |     let x = 0.1;\n-   |             ^^^\n+LL |         let x = [1, 2, 3];\n+   |                        ^\n    |\n    = help: consider adding suffix to avoid default numeric fallback\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:32:23\n+  --> $DIR/default_numeric_fallback.rs:12:28\n+   |\n+LL |         let x = if true { (1, 2) } else { (3, 4) };\n+   |                            ^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:12:31\n+   |\n+LL |         let x = if true { (1, 2) } else { (3, 4) };\n+   |                               ^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:12:44\n+   |\n+LL |         let x = if true { (1, 2) } else { (3, 4) };\n+   |                                            ^\n    |\n-LL |     let x = if true { 1 } else { 2 };\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:12:47\n+   |\n+LL |         let x = if true { (1, 2) } else { (3, 4) };\n+   |                                               ^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:13:23\n+   |\n+LL |         let x = match 1 {\n    |                       ^\n    |\n    = help: consider adding suffix to avoid default numeric fallback\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:32:34\n+  --> $DIR/default_numeric_fallback.rs:14:13\n    |\n-LL |     let x = if true { 1 } else { 2 };\n-   |                                  ^\n+LL |             1 => 1,\n+   |             ^\n    |\n    = help: consider adding suffix to avoid default numeric fallback\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:35:17\n+  --> $DIR/default_numeric_fallback.rs:14:18\n    |\n-LL |         let y = 1;\n-   |                 ^\n+LL |             1 => 1,\n+   |                  ^\n    |\n    = help: consider adding suffix to avoid default numeric fallback\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:39:17\n+  --> $DIR/default_numeric_fallback.rs:15:18\n    |\n-LL |     generic_arg(10);\n-   |                 ^^\n+LL |             _ => 2,\n+   |                  ^\n    |\n    = help: consider adding suffix to avoid default numeric fallback\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:40:19\n+  --> $DIR/default_numeric_fallback.rs:19:17\n    |\n-LL |     s.generic_arg(10);\n-   |                   ^^\n+LL |         let x = 0.12;\n+   |                 ^^^^\n    |\n    = help: consider adding suffix to avoid default numeric fallback\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:41:28\n+  --> $DIR/default_numeric_fallback.rs:37:21\n    |\n-LL |     let x: _ = generic_arg(10);\n-   |                            ^^\n+LL |             let y = 1;\n+   |                     ^\n    |\n    = help: consider adding suffix to avoid default numeric fallback\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:42:30\n+  --> $DIR/default_numeric_fallback.rs:73:21\n    |\n-LL |     let x: _ = s.generic_arg(10);\n-   |                              ^^\n+LL |         generic_arg(1);\n+   |                     ^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:76:32\n+   |\n+LL |         let x: _ = generic_arg(1);\n+   |                                ^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:96:23\n+   |\n+LL |         s.generic_arg(1);\n+   |                       ^\n    |\n    = help: consider adding suffix to avoid default numeric fallback\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 17 previous errors\n "}]}