{"sha": "a8a829deb491db3b87bbe715eece7a7dd5cd288c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YTgyOWRlYjQ5MWRiM2I4N2JiZTcxNWVlY2U3YTdkZDVjZDI4OGM=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-09-16T11:35:54Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-09-16T11:35:54Z"}, "message": "Add intra-doc-links to BinaryHeap rustdoc", "tree": {"sha": "5bb4e80470368b366970a0783ea9036f7437b358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bb4e80470368b366970a0783ea9036f7437b358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8a829deb491db3b87bbe715eece7a7dd5cd288c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a829deb491db3b87bbe715eece7a7dd5cd288c", "html_url": "https://github.com/rust-lang/rust/commit/a8a829deb491db3b87bbe715eece7a7dd5cd288c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8a829deb491db3b87bbe715eece7a7dd5cd288c/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52ab3e8e76afde6c6b5059816f641e49ef008c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/52ab3e8e76afde6c6b5059816f641e49ef008c30", "html_url": "https://github.com/rust-lang/rust/commit/52ab3e8e76afde6c6b5059816f641e49ef008c30"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "ca289502379ab357ceb48786b2da6815d4147bc3", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8a829deb491db3b87bbe715eece7a7dd5cd288c/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a829deb491db3b87bbe715eece7a7dd5cd288c/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=a8a829deb491db3b87bbe715eece7a7dd5cd288c", "patch": "@@ -159,9 +159,9 @@ use super::SpecExtend;\n /// This will be a max-heap.\n ///\n /// It is a logic error for an item to be modified in such a way that the\n-/// item's ordering relative to any other item, as determined by the `Ord`\n+/// item's ordering relative to any other item, as determined by the [`Ord`]\n /// trait, changes while it is in the heap. This is normally only possible\n-/// through `Cell`, `RefCell`, global state, I/O, or unsafe code. The\n+/// through [`Cell`], [`RefCell`], global state, I/O, or unsafe code. The\n /// behavior resulting from such a logic error is not specified, but will\n /// not result in undefined behavior. This could include panics, incorrect\n /// results, aborts, memory leaks, and non-termination.\n@@ -219,7 +219,7 @@ use super::SpecExtend;\n ///\n /// ## Min-heap\n ///\n-/// Either `std::cmp::Reverse` or a custom `Ord` implementation can be used to\n+/// Either [`core::cmp::Reverse`] or a custom [`Ord`] implementation can be used to\n /// make `BinaryHeap` a min-heap. This makes `heap.pop()` return the smallest\n /// value instead of the greatest one.\n ///\n@@ -250,6 +250,10 @@ use super::SpecExtend;\n /// The value for `push` is an expected cost; the method documentation gives a\n /// more detailed analysis.\n ///\n+/// [`core::cmp::Reverse`]: core::cmp::Reverse\n+/// [`Ord`]: core::cmp::Ord\n+/// [`Cell`]: core::cell::Cell\n+/// [`RefCell`]: core::cell::RefCell\n /// [push]: BinaryHeap::push\n /// [pop]: BinaryHeap::pop\n /// [peek]: BinaryHeap::peek"}]}