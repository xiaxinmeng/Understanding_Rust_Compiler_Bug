{"sha": "6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYjA2MjdiNDllZGIwM2QyNzcyMmNhYjRkMTNmOTJhOWE2NWExYzg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-31T03:33:31Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-21T13:55:33Z"}, "message": "Gate fallback via `#![feature(never_type_fallback)]`.", "tree": {"sha": "b73c47e447179b1b05cdf593ecbeb0b2340cdded", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b73c47e447179b1b05cdf593ecbeb0b2340cdded"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "html_url": "https://github.com/rust-lang/rust/commit/6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "html_url": "https://github.com/rust-lang/rust/commit/8f6197f39f7d468dfc5b2bd41dae4769992a2f83"}], "stats": {"total": 83, "additions": 64, "deletions": 19}, "files": [{"sha": "d0767a1fc4c38a2767d19649f3147b0d57675b2e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -2440,7 +2440,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_diverging_default(self) -> Ty<'tcx> {\n-        self.types.never\n+        if self.features().never_type_fallback {\n+            self.types.never\n+        } else {\n+            self.types.unit\n+        }\n     }\n \n     #[inline]"}, {"sha": "512a49d13e7cf6601e246dbc0595eda06ff09f16", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -3129,8 +3129,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     // Tries to apply a fallback to `ty` if it is an unsolved variable.\n-    // Non-numerics get replaced with `!`, unconstrained ints with `i32`,\n-    // unconstrained floats with `f64`.\n+    //\n+    // - Unconstrained ints are replaced with `i32`.\n+    //\n+    // - Unconstrained floats are replaced with with `f64`.\n+    //\n+    // - Non-numerics get replaced with `!` when `#![feature(never_type_fallback)]`\n+    //   is enabled. Otherwise, they are replaced with `()`.\n+    //\n     // Fallback becomes very dubious if we have encountered type-checking errors.\n     // In that case, fallback to Error.\n     // The return value indicates whether fallback has occurred."}, {"sha": "bd029514a95245aef7d522e44cab8fba329cb7a0", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -520,6 +520,9 @@ declare_features! (\n     /// Allows using the `efiapi` ABI.\n     (active, abi_efiapi, \"1.40.0\", Some(65815), None),\n \n+    /// Allows diverging expressions to fall back to `!` rather than `()`.\n+    (active, never_type_fallback, \"1.41.0\", Some(65992), None),\n+\n     /// Allows using the `#[register_attr]` attribute.\n     (active, register_attr, \"1.41.0\", Some(66080), None),\n "}, {"sha": "979074f17c7e0561be76bd76560663a27d917dfe", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -444,6 +444,7 @@ symbols! {\n         negate_unsigned,\n         never,\n         never_type,\n+        never_type_fallback,\n         new,\n         next,\n         __next,"}, {"sha": "707bcac78bf92c79658597003202d13ef978e93f", "filename": "src/test/ui/associated-types/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -21,5 +21,5 @@ trait Add<RHS=Self> {\n fn ice<A>(a: A) {\n     let r = loop {};\n     r = r + a;\n-    //~^ ERROR the trait bound `!: Add<A>` is not satisfied\n+    //~^ ERROR the trait bound `(): Add<A>` is not satisfied\n }"}, {"sha": "8c3463a2832e029ef00d5f4b965088c5ae816f6d", "filename": "src/test/ui/associated-types/associated-types-ICE-when-projecting-out-of-err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.stderr?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `!: Add<A>` is not satisfied\n+error[E0277]: the trait bound `(): Add<A>` is not satisfied\n   --> $DIR/associated-types-ICE-when-projecting-out-of-err.rs:23:11\n    |\n LL |     r = r + a;\n-   |           ^ the trait `Add<A>` is not implemented for `!`\n+   |           ^ the trait `Add<A>` is not implemented for `()`\n \n error: aborting due to previous error\n "}, {"sha": "1864d4bb8205b7cd16da2ca581b1d73416d8de9d", "filename": "src/test/ui/binding/empty-types-in-patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fbinding%2Fempty-types-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fbinding%2Fempty-types-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fempty-types-in-patterns.rs?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![feature(never_type_fallback)]\n #![feature(exhaustive_patterns)]\n #![feature(slice_patterns)]\n #![allow(unreachable_patterns)]"}, {"sha": "55beb7c252895a13f91cded9dc6c8ed18ccb9b7d", "filename": "src/test/ui/coercion/coerce-issue-49593-box-never.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-\n+#![feature(never_type_fallback)]\n #![allow(unreachable_code)]\n \n use std::error::Error;"}, {"sha": "c58b611748423400b8c14d2b2522efe61af8ef2e", "filename": "src/test/ui/never_type/defaulted-never-note.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -1,3 +1,7 @@\n+// We need to opt into the `never_type_fallback` feature\n+// to trigger the requirement that this is testing.\n+#![feature(never_type_fallback)]\n+\n #![allow(unused)]\n \n trait Deserialize: Sized {"}, {"sha": "28c9da059edaaa47d760948a20dedc08195f9ef6", "filename": "src/test/ui/never_type/defaulted-never-note.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.stderr?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `!: ImplementedForUnitButNotNever` is not satisfied\n-  --> $DIR/defaulted-never-note.rs:23:5\n+  --> $DIR/defaulted-never-note.rs:27:5\n    |\n LL | fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n    |    ---    ----------------------------- required by this bound in `foo`"}, {"sha": "df04437b1ae20d05da23d7b2eb0915ec525f1fe0", "filename": "src/test/ui/never_type/diverging-fallback-control-flow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -11,6 +11,8 @@\n // These represent current behavior, but are pretty dubious.  I would\n // like to revisit these and potentially change them. --nmatsakis\n \n+#![feature(never_type_fallback)]\n+\n trait BadDefault {\n     fn default() -> Self;\n }"}, {"sha": "3b896ec9d70c2b1200b37bf22bd922d8e618cfb6", "filename": "src/test/ui/never_type/feature-gate-never_type_fallback.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.rs?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -0,0 +1,12 @@\n+// This is a feature gate test for `never_type_fallback`.\n+// It works by using a scenario where the type fall backs to `()` rather than \u00b4!`\n+// in the case where `#![feature(never_type_fallback)]` would change it to `!`.\n+\n+fn main() {}\n+\n+trait T {}\n+\n+fn should_ret_unit() -> impl T {\n+    //~^ ERROR the trait bound `(): T` is not satisfied\n+    panic!()\n+}"}, {"sha": "837e90d6ceb9b687994a9006a1aa2bc53723c33b", "filename": "src/test/ui/never_type/feature-gate-never_type_fallback.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `(): T` is not satisfied\n+  --> $DIR/feature-gate-never_type_fallback.rs:9:25\n+   |\n+LL | fn should_ret_unit() -> impl T {\n+   |                         ^^^^^^ the trait `T` is not implemented for `()`\n+   |\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "58ac74be3e3b7a9798ce675c3838bdaab0c7457c", "filename": "src/test/ui/never_type/issue-13352.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: cannot add `!` to `usize`\n+error[E0277]: cannot add `()` to `usize`\n   --> $DIR/issue-13352.rs:9:13\n    |\n LL |     2_usize + (loop {});\n-   |             ^ no implementation for `usize + !`\n+   |             ^ no implementation for `usize + ()`\n    |\n-   = help: the trait `std::ops::Add<!>` is not implemented for `usize`\n+   = help: the trait `std::ops::Add<()>` is not implemented for `usize`\n \n error: aborting due to previous error\n "}, {"sha": "8ce2ba033321e2e28caec3836bea032654484492", "filename": "src/test/ui/never_type/issue-2149.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fnever_type%2Fissue-2149.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Fnever_type%2Fissue-2149.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-2149.stderr?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: cannot add `std::vec::Vec<B>` to `!`\n+error[E0277]: cannot add `std::vec::Vec<B>` to `()`\n   --> $DIR/issue-2149.rs:8:33\n    |\n LL |         for elt in self { r = r + f(*elt); }\n-   |                                 ^ no implementation for `! + std::vec::Vec<B>`\n+   |                                 ^ no implementation for `() + std::vec::Vec<B>`\n    |\n-   = help: the trait `std::ops::Add<std::vec::Vec<B>>` is not implemented for `!`\n+   = help: the trait `std::ops::Add<std::vec::Vec<B>>` is not implemented for `()`\n \n error[E0599]: no method named `bind` found for type `[&str; 1]` in the current scope\n   --> $DIR/issue-2149.rs:13:12"}, {"sha": "c8ff56539116fe44ad487e58af42e42cfb91fdd2", "filename": "src/test/ui/reachable/unreachable-loop-patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.rs?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -1,3 +1,4 @@\n+#![feature(never_type_fallback)]\n #![feature(exhaustive_patterns)]\n \n #![allow(unreachable_code)]"}, {"sha": "bb5103320d2cf9f551c58c3d727b321cb16edcf3", "filename": "src/test/ui/reachable/unreachable-loop-patterns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.stderr?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -1,17 +1,17 @@\n error: unreachable pattern\n-  --> $DIR/unreachable-loop-patterns.rs:17:9\n+  --> $DIR/unreachable-loop-patterns.rs:18:9\n    |\n LL |     for _ in unimplemented!() as Void {}\n    |         ^\n    |\n note: lint level defined here\n-  --> $DIR/unreachable-loop-patterns.rs:4:9\n+  --> $DIR/unreachable-loop-patterns.rs:5:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/unreachable-loop-patterns.rs:17:14\n+  --> $DIR/unreachable-loop-patterns.rs:18:14\n    |\n LL |     for _ in unimplemented!() as Void {}\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5be656e8f446169c989a181a4028562ce7bf66c3", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0627b49edb03d27722cab4d13f92a9a65a1c8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr?ref=6eb0627b49edb03d27722cab4d13f92a9a65a1c8", "patch": "@@ -4,7 +4,7 @@ error: concrete type differs from previous defining opaque type use\n LL | / fn bar() -> Foo {\n LL | |     panic!()\n LL | | }\n-   | |_^ expected `&'static str`, got `!`\n+   | |_^ expected `&'static str`, got `()`\n    |\n note: previous use here\n   --> $DIR/different_defining_uses_never_type.rs:8:1\n@@ -20,7 +20,7 @@ error: concrete type differs from previous defining opaque type use\n LL | / fn boo() -> Foo {\n LL | |     loop {}\n LL | | }\n-   | |_^ expected `&'static str`, got `!`\n+   | |_^ expected `&'static str`, got `()`\n    |\n note: previous use here\n   --> $DIR/different_defining_uses_never_type.rs:8:1"}]}