{"sha": "3d80dd983d4048f0a480a76421cf30773d2a9081", "node_id": "C_kwDOAAsO6NoAKDNkODBkZDk4M2Q0MDQ4ZjBhNDgwYTc2NDIxY2YzMDc3M2QyYTkwODE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-26T23:07:16Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-27T00:57:22Z"}, "message": "Clean up some builtin operator typeck logic", "tree": {"sha": "13ef2529579d37889c0db0d3020bfe5d26d55244", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13ef2529579d37889c0db0d3020bfe5d26d55244"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d80dd983d4048f0a480a76421cf30773d2a9081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d80dd983d4048f0a480a76421cf30773d2a9081", "html_url": "https://github.com/rust-lang/rust/commit/3d80dd983d4048f0a480a76421cf30773d2a9081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d80dd983d4048f0a480a76421cf30773d2a9081/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c42cb4ef0544fbfaa500216e53382d6b079c001", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c42cb4ef0544fbfaa500216e53382d6b079c001", "html_url": "https://github.com/rust-lang/rust/commit/1c42cb4ef0544fbfaa500216e53382d6b079c001"}], "stats": {"total": 77, "additions": 39, "deletions": 38}, "files": [{"sha": "46318043b78cf095646757e14d9081a86249bc37", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d80dd983d4048f0a480a76421cf30773d2a9081/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d80dd983d4048f0a480a76421cf30773d2a9081/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=3d80dd983d4048f0a480a76421cf30773d2a9081", "patch": "@@ -461,15 +461,9 @@ fn fatally_break_rust(sess: &Session) {\n     ));\n }\n \n-fn has_expected_num_generic_args(\n-    tcx: TyCtxt<'_>,\n-    trait_did: Option<DefId>,\n-    expected: usize,\n-) -> bool {\n-    trait_did.map_or(true, |trait_did| {\n-        let generics = tcx.generics_of(trait_did);\n-        generics.count() == expected + if generics.has_self { 1 } else { 0 }\n-    })\n+fn has_expected_num_generic_args(tcx: TyCtxt<'_>, trait_did: DefId, expected: usize) -> bool {\n+    let generics = tcx.generics_of(trait_did);\n+    generics.count() == expected + if generics.has_self { 1 } else { 0 }\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "9b6c1077a4002505afed59d57a80c16db2afa215", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d80dd983d4048f0a480a76421cf30773d2a9081/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d80dd983d4048f0a480a76421cf30773d2a9081/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=3d80dd983d4048f0a480a76421cf30773d2a9081", "patch": "@@ -719,7 +719,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Op::Binary(op, _) => op.span,\n             Op::Unary(_, span) => span,\n         };\n-        let (opname, trait_did) = lang_item_for_op(self.tcx, op, span);\n+        let (opname, Some(trait_did)) = lang_item_for_op(self.tcx, op, span) else {\n+            // Bail if the operator trait is not defined.\n+            return Err(vec![]);\n+        };\n \n         debug!(\n             \"lookup_op_method(lhs_ty={:?}, op={:?}, opname={:?}, trait_did={:?})\",\n@@ -759,18 +762,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             },\n         );\n \n-        let method = trait_did.and_then(|trait_did| {\n-            self.lookup_method_in_trait(cause.clone(), opname, trait_did, lhs_ty, Some(input_types))\n-        });\n-\n-        match (method, trait_did) {\n-            (Some(ok), _) => {\n+        let method = self.lookup_method_in_trait(\n+            cause.clone(),\n+            opname,\n+            trait_did,\n+            lhs_ty,\n+            Some(input_types),\n+        );\n+        match method {\n+            Some(ok) => {\n                 let method = self.register_infer_ok_obligations(ok);\n                 self.select_obligations_where_possible(|_| {});\n                 Ok(method)\n             }\n-            (None, None) => Err(vec![]),\n-            (None, Some(trait_did)) => {\n+            None => {\n                 let (obligation, _) =\n                     self.obligation_for_method(cause, trait_did, lhs_ty, Some(input_types));\n                 // FIXME: This should potentially just add the obligation to the `FnCtxt`"}, {"sha": "1f7e7ba9f5b2d0ed900b3603ca70e1867d02bbca", "filename": "compiler/rustc_hir_typeck/src/place_op.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3d80dd983d4048f0a480a76421cf30773d2a9081/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d80dd983d4048f0a480a76421cf30773d2a9081/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs?ref=3d80dd983d4048f0a480a76421cf30773d2a9081", "patch": "@@ -200,9 +200,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Option<InferOk<'tcx, MethodCallee<'tcx>>> {\n         debug!(\"try_overloaded_place_op({:?},{:?},{:?})\", span, base_ty, op);\n \n-        let (imm_tr, imm_op) = match op {\n+        let (Some(imm_tr), imm_op) = (match op {\n             PlaceOp::Deref => (self.tcx.lang_items().deref_trait(), sym::deref),\n             PlaceOp::Index => (self.tcx.lang_items().index_trait(), sym::index),\n+        }) else {\n+            // Bail if `Deref` or `Index` isn't defined.\n+            return None;\n         };\n \n         // If the lang item was declared incorrectly, stop here so that we don't\n@@ -219,15 +222,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return None;\n         }\n \n-        imm_tr.and_then(|trait_did| {\n-            self.lookup_method_in_trait(\n-                self.misc(span),\n-                Ident::with_dummy_span(imm_op),\n-                trait_did,\n-                base_ty,\n-                Some(arg_tys),\n-            )\n-        })\n+        self.lookup_method_in_trait(\n+            self.misc(span),\n+            Ident::with_dummy_span(imm_op),\n+            imm_tr,\n+            base_ty,\n+            Some(arg_tys),\n+        )\n     }\n \n     fn try_mutable_overloaded_place_op(\n@@ -239,9 +240,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Option<InferOk<'tcx, MethodCallee<'tcx>>> {\n         debug!(\"try_mutable_overloaded_place_op({:?},{:?},{:?})\", span, base_ty, op);\n \n-        let (mut_tr, mut_op) = match op {\n+        let (Some(mut_tr), mut_op) = (match op {\n             PlaceOp::Deref => (self.tcx.lang_items().deref_mut_trait(), sym::deref_mut),\n             PlaceOp::Index => (self.tcx.lang_items().index_mut_trait(), sym::index_mut),\n+        }) else {\n+            // Bail if `DerefMut` or `IndexMut` isn't defined.\n+            return None;\n         };\n \n         // If the lang item was declared incorrectly, stop here so that we don't\n@@ -258,15 +262,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return None;\n         }\n \n-        mut_tr.and_then(|trait_did| {\n-            self.lookup_method_in_trait(\n-                self.misc(span),\n-                Ident::with_dummy_span(mut_op),\n-                trait_did,\n-                base_ty,\n-                Some(arg_tys),\n-            )\n-        })\n+        self.lookup_method_in_trait(\n+            self.misc(span),\n+            Ident::with_dummy_span(mut_op),\n+            mut_tr,\n+            base_ty,\n+            Some(arg_tys),\n+        )\n     }\n \n     /// Convert auto-derefs, indices, etc of an expression from `Deref` and `Index`"}]}