{"sha": "691d054e05e37ab000a78ddf580ccb8cc96a41e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MWQwNTRlMDVlMzdhYjAwMGE3OGRkZjU4MGNjYjhjYzk2YTQxZTI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:11:37Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:08:44Z"}, "message": "Take const generics into account when monomorphising\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "8ce71cb9d6ad06626983cc0320aa5e2e44345c47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ce71cb9d6ad06626983cc0320aa5e2e44345c47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/691d054e05e37ab000a78ddf580ccb8cc96a41e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/691d054e05e37ab000a78ddf580ccb8cc96a41e2", "html_url": "https://github.com/rust-lang/rust/commit/691d054e05e37ab000a78ddf580ccb8cc96a41e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/691d054e05e37ab000a78ddf580ccb8cc96a41e2/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ce19ae3d196043281c7572290ee09f502d8384c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce19ae3d196043281c7572290ee09f502d8384c", "html_url": "https://github.com/rust-lang/rust/commit/2ce19ae3d196043281c7572290ee09f502d8384c"}], "stats": {"total": 82, "additions": 60, "deletions": 22}, "files": [{"sha": "2ce3bf43cfc775d2f0100a5953d692a60dfda3ba", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/691d054e05e37ab000a78ddf580ccb8cc96a41e2/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691d054e05e37ab000a78ddf580ccb8cc96a41e2/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=691d054e05e37ab000a78ddf580ccb8cc96a41e2", "patch": "@@ -466,7 +466,17 @@ fn check_type_length_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                      instance: Instance<'tcx>)\n {\n     let type_length = instance.substs.types().flat_map(|ty| ty.walk()).count();\n-    debug!(\" => type length={}\", type_length);\n+    let const_length = instance.substs.consts()\n+        .filter_map(|ct| {\n+            if let ty::LazyConst::Evaluated(ct) = ct {\n+                Some(ct.ty.walk())\n+            } else {\n+                None\n+            }\n+        })\n+        .flatten()\n+        .count();\n+    debug!(\" => type length={}, const length={}\", type_length, const_length);\n \n     // Rust code can easily create exponentially-long types using only a\n     // polynomial recursion depth. Even with the default recursion\n@@ -475,7 +485,9 @@ fn check_type_length_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     //\n     // Bail out in these cases to avoid that bad user experience.\n     let type_length_limit = *tcx.sess.type_length_limit.get();\n-    if type_length > type_length_limit {\n+    // We include the const length in the type length, as it's better\n+    // to be overly conservative.\n+    if type_length + const_length > type_length_limit {\n         // The instance name is already known to be too long for rustc. Use\n         // `{:.64}` to avoid blasting the user's terminal with thousands of\n         // lines of type-name.\n@@ -490,7 +502,7 @@ fn check_type_length_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         diag.note(&format!(\n             \"consider adding a `#![type_length_limit=\\\"{}\\\"]` attribute to your crate\",\n-            type_length_limit*2));\n+            type_length_limit * 2));\n         diag.emit();\n         tcx.sess.abort_if_errors();\n     }\n@@ -759,10 +771,10 @@ fn should_monomorphize_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance:\n             return false\n         }\n \n-        // If this instance has no type parameters, it cannot be a shared\n+        // If this instance has non-erasable parameters, it cannot be a shared\n         // monomorphization. Non-generic instances are already handled above\n         // by `is_reachable_non_generic()`\n-        if substs.types().next().is_none() {\n+        if substs.non_erasable_generics().next().is_none() {\n             return false\n         }\n \n@@ -1113,14 +1125,16 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         continue;\n                     }\n \n-                    if tcx.generics_of(method.def_id).own_counts().types != 0 {\n+                    let counts = tcx.generics_of(method.def_id).own_counts();\n+                    if counts.types + counts.consts != 0 {\n                         continue;\n                     }\n \n                     let substs = InternalSubsts::for_item(tcx, method.def_id, |param, _| {\n                         match param.kind {\n                             GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n-                            GenericParamDefKind::Type {..} => {\n+                            GenericParamDefKind::Type { .. } |\n+                            GenericParamDefKind::Const => {\n                                 trait_ref.substs[param.index as usize]\n                             }\n                         }"}, {"sha": "f0d19ec8bf2fa71ca70a7976b3d1c510b3897aca", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/691d054e05e37ab000a78ddf580ccb8cc96a41e2/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691d054e05e37ab000a78ddf580ccb8cc96a41e2/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=691d054e05e37ab000a78ddf580ccb8cc96a41e2", "patch": "@@ -1,8 +1,9 @@\n use crate::monomorphize::Instance;\n use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::mir::interpret::ConstValue;\n use rustc::session::config::OptLevel;\n-use rustc::ty::{self, Ty, TyCtxt, ClosureSubsts, GeneratorSubsts};\n+use rustc::ty::{self, Ty, TyCtxt, Const, ClosureSubsts, GeneratorSubsts, LazyConst, ParamConst};\n use rustc::ty::subst::{SubstsRef, InternalSubsts};\n use syntax::ast;\n use syntax::attr::InlineAttr;\n@@ -44,7 +45,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n     fn is_generic_fn(&self) -> bool {\n         match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => {\n-                instance.substs.types().next().is_some()\n+                instance.substs.non_erasable_generics().next().is_some()\n             }\n             MonoItem::Static(..) |\n             MonoItem::GlobalAsm(..) => false,\n@@ -267,7 +268,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             ty::Float(ast::FloatTy::F64) => output.push_str(\"f64\"),\n             ty::Adt(adt_def, substs) => {\n                 self.push_def_path(adt_def.did, output);\n-                self.push_type_params(substs, iter::empty(), output, debug);\n+                self.push_generic_params(substs, iter::empty(), output, debug);\n             },\n             ty::Tuple(component_types) => {\n                 output.push('(');\n@@ -312,7 +313,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             ty::Dynamic(ref trait_data, ..) => {\n                 if let Some(principal) = trait_data.principal() {\n                     self.push_def_path(principal.def_id(), output);\n-                    self.push_type_params(\n+                    self.push_generic_params(\n                         principal.skip_binder().substs,\n                         trait_data.projection_bounds(),\n                         output,\n@@ -373,7 +374,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                 self.push_def_path(def_id, output);\n                 let generics = self.tcx.generics_of(self.tcx.closure_base_def_id(def_id));\n                 let substs = substs.truncate_to(self.tcx, generics);\n-                self.push_type_params(substs, iter::empty(), output, debug);\n+                self.push_generic_params(substs, iter::empty(), output, debug);\n             }\n             ty::Error |\n             ty::Bound(..) |\n@@ -394,6 +395,24 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n         }\n     }\n \n+    // FIXME(const_generics): handle debug printing.\n+    pub fn push_const_name(&self, c: &LazyConst<'tcx>, output: &mut String, debug: bool) {\n+        match c {\n+            LazyConst::Unevaluated(..) => output.push_str(\"_: _\"),\n+            LazyConst::Evaluated(Const { ty, val }) => {\n+                match val {\n+                    ConstValue::Infer(..) => output.push_str(\"_\"),\n+                    ConstValue::Param(ParamConst { name, .. }) => {\n+                        write!(output, \"{}\", name).unwrap();\n+                    }\n+                    _ => write!(output, \"{:?}\", c).unwrap(),\n+                }\n+                output.push_str(\": \");\n+                self.push_type_name(ty, output, debug);\n+            }\n+        }\n+    }\n+\n     pub fn push_def_path(&self,\n                          def_id: DefId,\n                          output: &mut String) {\n@@ -421,15 +440,15 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n         output.pop();\n     }\n \n-    fn push_type_params<I>(&self,\n-                            substs: SubstsRef<'tcx>,\n-                            projections: I,\n-                            output: &mut String,\n-                            debug: bool)\n-        where I: Iterator<Item=ty::PolyExistentialProjection<'tcx>>\n-    {\n+    fn push_generic_params<I>(\n+        &self,\n+        substs: SubstsRef<'tcx>,\n+        projections: I,\n+        output: &mut String,\n+        debug: bool,\n+    ) where I: Iterator<Item=ty::PolyExistentialProjection<'tcx>> {\n         let mut projections = projections.peekable();\n-        if substs.types().next().is_none() && projections.peek().is_none() {\n+        if substs.non_erasable_generics().next().is_none() && projections.peek().is_none() {\n             return;\n         }\n \n@@ -449,6 +468,11 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             output.push_str(\", \");\n         }\n \n+        for const_parameter in substs.consts() {\n+            self.push_const_name(const_parameter, output, debug);\n+            output.push_str(\", \");\n+        }\n+\n         output.pop();\n         output.pop();\n \n@@ -460,6 +484,6 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                                    output: &mut String,\n                                    debug: bool) {\n         self.push_def_path(instance.def_id(), output);\n-        self.push_type_params(instance.substs, iter::empty(), output, debug);\n+        self.push_generic_params(instance.substs, iter::empty(), output, debug);\n     }\n }"}, {"sha": "f98bc476aafec872d40e0c85e67d20e92b795cb7", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691d054e05e37ab000a78ddf580ccb8cc96a41e2/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691d054e05e37ab000a78ddf580ccb8cc96a41e2/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=691d054e05e37ab000a78ddf580ccb8cc96a41e2", "patch": "@@ -448,7 +448,7 @@ fn mono_item_visibility(\n         return Visibility::Hidden\n     }\n \n-    let is_generic = instance.substs.types().next().is_some();\n+    let is_generic = instance.substs.non_erasable_generics().next().is_some();\n \n     // Upstream `DefId` instances get different handling than local ones\n     if !def_id.is_local() {"}]}