{"sha": "a82692d6134b228c9d09396ce5e7e58d680e6d4f", "node_id": "C_kwDOAAsO6NoAKGE4MjY5MmQ2MTM0YjIyOGM5ZDA5Mzk2Y2U1ZTdlNThkNjgwZTZkNGY", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-11-11T20:57:00Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-11-11T23:11:38Z"}, "message": "Use `Iterator::collect` instead of calling `Vec::push` in a loop", "tree": {"sha": "9ac0e7198d1bdfd9e766ff8d94bbbb40cd03bb5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ac0e7198d1bdfd9e766ff8d94bbbb40cd03bb5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a82692d6134b228c9d09396ce5e7e58d680e6d4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a82692d6134b228c9d09396ce5e7e58d680e6d4f", "html_url": "https://github.com/rust-lang/rust/commit/a82692d6134b228c9d09396ce5e7e58d680e6d4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a82692d6134b228c9d09396ce5e7e58d680e6d4f/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0fd642de61f23e0913c8476840e5921d7802309", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0fd642de61f23e0913c8476840e5921d7802309", "html_url": "https://github.com/rust-lang/rust/commit/b0fd642de61f23e0913c8476840e5921d7802309"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "896c25436086561c75ba8c6b5938b797603efc7a", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a82692d6134b228c9d09396ce5e7e58d680e6d4f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a82692d6134b228c9d09396ce5e7e58d680e6d4f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=a82692d6134b228c9d09396ce5e7e58d680e6d4f", "patch": "@@ -26,7 +26,6 @@ crate enum ExternalLocation {\n /// Builds the search index from the collected metadata\n crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<'tcx>) -> String {\n     let mut defid_to_pathid = FxHashMap::default();\n-    let mut crate_items = Vec::with_capacity(cache.search_index.len());\n     let mut crate_paths = vec![];\n \n     // Attach all orphan items to the type's definition if the type\n@@ -77,34 +76,38 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n \n     // Reduce `DefId` in paths into smaller sequential numbers,\n     // and prune the paths that do not appear in the index.\n-    let mut lastpath = String::new();\n+    let mut lastpath = \"\";\n     let mut lastpathid = 0usize;\n \n-    for item in search_index {\n-        item.parent_idx = item.parent.and_then(|defid| match defid_to_pathid.entry(defid) {\n-            Entry::Occupied(entry) => Some(*entry.get()),\n-            Entry::Vacant(entry) => {\n-                let pathid = lastpathid;\n-                entry.insert(pathid);\n-                lastpathid += 1;\n+    let crate_items: Vec<&IndexItem> = search_index\n+        .iter_mut()\n+        .map(|item| {\n+            item.parent_idx = item.parent.and_then(|defid| match defid_to_pathid.entry(defid) {\n+                Entry::Occupied(entry) => Some(*entry.get()),\n+                Entry::Vacant(entry) => {\n+                    let pathid = lastpathid;\n+                    entry.insert(pathid);\n+                    lastpathid += 1;\n \n-                if let Some(&(ref fqp, short)) = paths.get(&defid) {\n-                    crate_paths.push((short, fqp.last().unwrap().clone()));\n-                    Some(pathid)\n-                } else {\n-                    None\n+                    if let Some(&(ref fqp, short)) = paths.get(&defid) {\n+                        crate_paths.push((short, fqp.last().unwrap().clone()));\n+                        Some(pathid)\n+                    } else {\n+                        None\n+                    }\n                 }\n+            });\n+\n+            // Omit the parent path if it is same to that of the prior item.\n+            if lastpath == &item.path {\n+                item.path.clear();\n+            } else {\n+                lastpath = &item.path;\n             }\n-        });\n \n-        // Omit the parent path if it is same to that of the prior item.\n-        if lastpath == item.path {\n-            item.path.clear();\n-        } else {\n-            lastpath = item.path.clone();\n-        }\n-        crate_items.push(&*item);\n-    }\n+            &*item\n+        })\n+        .collect();\n \n     struct CrateData<'a> {\n         doc: String,"}]}