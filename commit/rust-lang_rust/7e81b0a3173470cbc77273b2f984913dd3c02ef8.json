{"sha": "7e81b0a3173470cbc77273b2f984913dd3c02ef8", "node_id": "C_kwDOAAsO6NoAKDdlODFiMGEzMTczNDcwY2JjNzcyNzNiMmY5ODQ5MTNkZDNjMDJlZjg", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-01-22T23:32:19Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-03-28T01:10:49Z"}, "message": "Improve Rustdoc UI for scraped examples with multiline arguments, fix\noverflow in line numbers", "tree": {"sha": "882e757854c57874bbf9258340e8d9151167762f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/882e757854c57874bbf9258340e8d9151167762f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e81b0a3173470cbc77273b2f984913dd3c02ef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e81b0a3173470cbc77273b2f984913dd3c02ef8", "html_url": "https://github.com/rust-lang/rust/commit/7e81b0a3173470cbc77273b2f984913dd3c02ef8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e81b0a3173470cbc77273b2f984913dd3c02ef8/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62523045ec681ee8c2ecb8d395fbcaccf336284b", "url": "https://api.github.com/repos/rust-lang/rust/commits/62523045ec681ee8c2ecb8d395fbcaccf336284b", "html_url": "https://github.com/rust-lang/rust/commit/62523045ec681ee8c2ecb8d395fbcaccf336284b"}], "stats": {"total": 69, "additions": 54, "deletions": 15}, "files": [{"sha": "23ce3b131bbd7c811669cb2a2a989989b4e6bbcf", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7e81b0a3173470cbc77273b2f984913dd3c02ef8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e81b0a3173470cbc77273b2f984913dd3c02ef8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=7e81b0a3173470cbc77273b2f984913dd3c02ef8", "patch": "@@ -2717,6 +2717,30 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item) {\n         // The output code is limited to that byte range.\n         let contents_subset = &contents[(byte_min as usize)..(byte_max as usize)];\n \n+        // Given a call-site range, return the set of sub-ranges that exclude leading whitespace\n+        // when the range spans multiple lines.\n+        let strip_leading_whitespace = |(lo, hi): (u32, u32)| -> Vec<(u32, u32)> {\n+            let contents_range = &contents_subset[(lo as usize)..(hi as usize)];\n+            let mut ignoring_whitespace = false;\n+            let mut ranges = Vec::new();\n+            let mut cur_lo = 0;\n+            for (idx, chr) in contents_range.char_indices() {\n+                let idx = idx as u32;\n+                if ignoring_whitespace {\n+                    if !chr.is_whitespace() {\n+                        ignoring_whitespace = false;\n+                        cur_lo = idx;\n+                    }\n+                } else if chr == '\\n' {\n+                    ranges.push((lo + cur_lo, lo + idx));\n+                    cur_lo = idx;\n+                    ignoring_whitespace = true;\n+                }\n+            }\n+            ranges.push((lo + cur_lo, hi));\n+            ranges\n+        };\n+\n         // The call locations need to be updated to reflect that the size of the program has changed.\n         // Specifically, the ranges are all subtracted by `byte_min` since that's the new zero point.\n         let (mut byte_ranges, line_ranges): (Vec<_>, Vec<_>) = call_data\n@@ -2726,10 +2750,12 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item) {\n                 let (byte_lo, byte_hi) = loc.call_expr.byte_span;\n                 let (line_lo, line_hi) = loc.call_expr.line_span;\n                 let byte_range = (byte_lo - byte_min, byte_hi - byte_min);\n+                let byte_ranges = strip_leading_whitespace(byte_range);\n+\n                 let line_range = (line_lo - line_min, line_hi - line_min);\n                 let (line_url, line_title) = link_to_loc(call_data, loc);\n \n-                (byte_range, (line_range, line_url, line_title))\n+                (byte_ranges, (line_range, line_url, line_title))\n             })\n             .unzip();\n \n@@ -2784,8 +2810,8 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item) {\n         let root_path = vec![\"../\"; cx.current.len() - 1].join(\"\");\n \n         let mut decoration_info = FxHashMap::default();\n-        decoration_info.insert(\"highlight focus\", vec![byte_ranges.remove(0)]);\n-        decoration_info.insert(\"highlight\", byte_ranges);\n+        decoration_info.insert(\"highlight focus\", byte_ranges.remove(0));\n+        decoration_info.insert(\"highlight\", byte_ranges.into_iter().flatten().collect());\n \n         sources::print_src(\n             w,"}, {"sha": "42b66c70c4cb41274067cd7b8d4532c23042917a", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e81b0a3173470cbc77273b2f984913dd3c02ef8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/7e81b0a3173470cbc77273b2f984913dd3c02ef8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=7e81b0a3173470cbc77273b2f984913dd3c02ef8", "patch": "@@ -2038,17 +2038,16 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \tfont-family: 'Fira Sans';\n }\n \n-.scraped-example:not(.expanded) .code-wrapper pre.line-numbers {\n-\toverflow: hidden;\n-\tmax-height: 240px;\n-}\n-\n-.scraped-example:not(.expanded) .code-wrapper .example-wrap pre.rust {\n+.scraped-example:not(.expanded) .code-wrapper pre {\n \toverflow-y: hidden;\n \tmax-height: 240px;\n \tpadding-bottom: 0;\n }\n \n+.scraped-example:not(.expanded) .code-wrapper pre.line-numbers {\n+\toverflow-x: hidden;\n+}\n+\n .scraped-example .code-wrapper .prev {\n \tposition: absolute;\n \ttop: 0.25em;"}, {"sha": "383ae001bc21ff0eb9d5c9e06670892afddac2f2", "filename": "src/librustdoc/html/static/js/scrape-examples.js", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7e81b0a3173470cbc77273b2f984913dd3c02ef8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "raw_url": "https://github.com/rust-lang/rust/raw/7e81b0a3173470cbc77273b2f984913dd3c02ef8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js?ref=7e81b0a3173470cbc77273b2f984913dd3c02ef8", "patch": "@@ -1,14 +1,28 @@\n /* global addClass, hasClass, removeClass, onEach */\n \n (function () {\n-    // Scroll code block to put the given code location in the middle of the viewer\n+    // Number of lines shown when code viewer is not expanded\n+    const MAX_LINES = 10;\n+\n+    // Scroll code block to the given code location\n     function scrollToLoc(elt, loc) {\n-        var wrapper = elt.querySelector(\".code-wrapper\");\n-        var halfHeight = wrapper.offsetHeight / 2;\n         var lines = elt.querySelector('.line-numbers');\n-        var offsetMid = (lines.children[loc[0]].offsetTop\n-                         + lines.children[loc[1]].offsetTop) / 2;\n-        var scrollOffset = offsetMid - halfHeight;\n+        var scrollOffset;\n+\n+        // If the block is greater than the size of the viewer,\n+        // then scroll to the top of the block. Otherwise scroll\n+        // to the middle of the block.\n+        if (loc[1] - loc[0] > MAX_LINES) {\n+            var line = Math.max(0, loc[0] - 1);\n+            scrollOffset = lines.children[line].offsetTop;\n+        } else {\n+            var wrapper = elt.querySelector(\".code-wrapper\");\n+            var halfHeight = wrapper.offsetHeight / 2;\n+            var offsetMid = (lines.children[loc[0]].offsetTop\n+                             + lines.children[loc[1]].offsetTop) / 2;\n+            scrollOffset = offsetMid - halfHeight;\n+        }\n+\n         lines.scrollTo(0, scrollOffset);\n         elt.querySelector(\".rust\").scrollTo(0, scrollOffset);\n     }"}]}