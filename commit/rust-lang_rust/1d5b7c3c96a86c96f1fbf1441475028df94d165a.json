{"sha": "1d5b7c3c96a86c96f1fbf1441475028df94d165a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNWI3YzNjOTZhODZjOTZmMWZiZjE0NDE0NzUwMjhkZjk0ZDE2NWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-01T06:49:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-01T06:49:16Z"}, "message": "Auto merge of #78420 - estebank:suggest-assoc-fn, r=petrochenkov\n\nSuggest calling associated `fn` inside `trait`s\n\nWhen calling a function that doesn't exist inside of a trait's\nassociated `fn`, and another associated `fn` in that trait has that\nname, suggest calling it with the appropriate fully-qualified path.\n\nExpand the label to be more descriptive.\n\nPrompted by the following user experience:\nhttps://users.rust-lang.org/t/cannot-find-function/50663", "tree": {"sha": "1cbf16c1b8969310534a9f5bbcc225f2c1974fae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cbf16c1b8969310534a9f5bbcc225f2c1974fae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d5b7c3c96a86c96f1fbf1441475028df94d165a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d5b7c3c96a86c96f1fbf1441475028df94d165a", "html_url": "https://github.com/rust-lang/rust/commit/1d5b7c3c96a86c96f1fbf1441475028df94d165a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d5b7c3c96a86c96f1fbf1441475028df94d165a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6403b0f04b58a35cb9f3e544b2847ee09bcf3a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6403b0f04b58a35cb9f3e544b2847ee09bcf3a4", "html_url": "https://github.com/rust-lang/rust/commit/a6403b0f04b58a35cb9f3e544b2847ee09bcf3a4"}, {"sha": "9e16213610f606de0e44ac2b26ab9666bf0e83bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e16213610f606de0e44ac2b26ab9666bf0e83bf", "html_url": "https://github.com/rust-lang/rust/commit/9e16213610f606de0e44ac2b26ab9666bf0e83bf"}], "stats": {"total": 173, "additions": 124, "deletions": 49}, "files": [{"sha": "2337f0d09abb740e3622026b38a8aa7f8960ce8c", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1d5b7c3c96a86c96f1fbf1441475028df94d165a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5b7c3c96a86c96f1fbf1441475028df94d165a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=1d5b7c3c96a86c96f1fbf1441475028df94d165a", "patch": "@@ -339,8 +339,8 @@ impl<'a> PathSource<'a> {\n \n #[derive(Default)]\n struct DiagnosticMetadata<'ast> {\n-    /// The current trait's associated types' ident, used for diagnostic suggestions.\n-    current_trait_assoc_types: Vec<Ident>,\n+    /// The current trait's associated items' ident, used for diagnostic suggestions.\n+    current_trait_assoc_items: Option<&'ast [P<AssocItem>]>,\n \n     /// The current self type if inside an impl (used for better errors).\n     current_self_type: Option<Ty>,\n@@ -1157,26 +1157,18 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         result\n     }\n \n-    /// When evaluating a `trait` use its associated types' idents for suggestionsa in E0412.\n+    /// When evaluating a `trait` use its associated types' idents for suggestions in E0412.\n     fn with_trait_items<T>(\n         &mut self,\n-        trait_items: &Vec<P<AssocItem>>,\n+        trait_items: &'ast Vec<P<AssocItem>>,\n         f: impl FnOnce(&mut Self) -> T,\n     ) -> T {\n-        let trait_assoc_types = replace(\n-            &mut self.diagnostic_metadata.current_trait_assoc_types,\n-            trait_items\n-                .iter()\n-                .filter_map(|item| match &item.kind {\n-                    AssocItemKind::TyAlias(_, _, bounds, _) if bounds.is_empty() => {\n-                        Some(item.ident)\n-                    }\n-                    _ => None,\n-                })\n-                .collect(),\n+        let trait_assoc_items = replace(\n+            &mut self.diagnostic_metadata.current_trait_assoc_items,\n+            Some(&trait_items[..]),\n         );\n         let result = f(self);\n-        self.diagnostic_metadata.current_trait_assoc_types = trait_assoc_types;\n+        self.diagnostic_metadata.current_trait_assoc_items = trait_assoc_items;\n         result\n     }\n "}, {"sha": "a3e0028dc75d7e4259b3be4745991cb04fb53fa6", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 47, "deletions": 11, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1d5b7c3c96a86c96f1fbf1441475028df94d165a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5b7c3c96a86c96f1fbf1441475028df94d165a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=1d5b7c3c96a86c96f1fbf1441475028df94d165a", "patch": "@@ -30,7 +30,21 @@ type Res = def::Res<ast::NodeId>;\n enum AssocSuggestion {\n     Field,\n     MethodWithSelf,\n-    AssocItem,\n+    AssocFn,\n+    AssocType,\n+    AssocConst,\n+}\n+\n+impl AssocSuggestion {\n+    fn action(&self) -> &'static str {\n+        match self {\n+            AssocSuggestion::Field => \"use the available field\",\n+            AssocSuggestion::MethodWithSelf => \"call the method with the fully-qualified path\",\n+            AssocSuggestion::AssocFn => \"call the associated function\",\n+            AssocSuggestion::AssocConst => \"use the associated `const`\",\n+            AssocSuggestion::AssocType => \"use the associated type\",\n+        }\n+    }\n }\n \n crate enum MissingLifetimeSpot<'tcx> {\n@@ -386,15 +400,18 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     AssocSuggestion::MethodWithSelf if self_is_available => {\n                         err.span_suggestion(\n                             span,\n-                            \"try\",\n+                            \"you might have meant to call the method\",\n                             format!(\"self.{}\", path_str),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n-                    AssocSuggestion::MethodWithSelf | AssocSuggestion::AssocItem => {\n+                    AssocSuggestion::MethodWithSelf\n+                    | AssocSuggestion::AssocFn\n+                    | AssocSuggestion::AssocConst\n+                    | AssocSuggestion::AssocType => {\n                         err.span_suggestion(\n                             span,\n-                            \"try\",\n+                            &format!(\"you might have meant to {}\", candidate.action()),\n                             format!(\"Self::{}\", path_str),\n                             Applicability::MachineApplicable,\n                         );\n@@ -1062,9 +1079,19 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             }\n         }\n \n-        for assoc_type_ident in &self.diagnostic_metadata.current_trait_assoc_types {\n-            if *assoc_type_ident == ident {\n-                return Some(AssocSuggestion::AssocItem);\n+        if let Some(items) = self.diagnostic_metadata.current_trait_assoc_items {\n+            for assoc_item in &items[..] {\n+                if assoc_item.ident == ident {\n+                    return Some(match &assoc_item.kind {\n+                        ast::AssocItemKind::Const(..) => AssocSuggestion::AssocConst,\n+                        ast::AssocItemKind::Fn(_, sig, ..) if sig.decl.has_self() => {\n+                            AssocSuggestion::MethodWithSelf\n+                        }\n+                        ast::AssocItemKind::Fn(..) => AssocSuggestion::AssocFn,\n+                        ast::AssocItemKind::TyAlias(..) => AssocSuggestion::AssocType,\n+                        ast::AssocItemKind::MacCall(_) => continue,\n+                    });\n+                }\n             }\n         }\n \n@@ -1080,11 +1107,20 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             ) {\n                 let res = binding.res();\n                 if filter_fn(res) {\n-                    return Some(if self.r.has_self.contains(&res.def_id()) {\n-                        AssocSuggestion::MethodWithSelf\n+                    if self.r.has_self.contains(&res.def_id()) {\n+                        return Some(AssocSuggestion::MethodWithSelf);\n                     } else {\n-                        AssocSuggestion::AssocItem\n-                    });\n+                        match res {\n+                            Res::Def(DefKind::AssocFn, _) => return Some(AssocSuggestion::AssocFn),\n+                            Res::Def(DefKind::AssocConst, _) => {\n+                                return Some(AssocSuggestion::AssocConst);\n+                            }\n+                            Res::Def(DefKind::AssocTy, _) => {\n+                                return Some(AssocSuggestion::AssocType);\n+                            }\n+                            _ => {}\n+                        }\n+                    }\n                 }\n             }\n         }"}, {"sha": "f31f3d67b5be537d9bb98a6fb292516a58d2004b", "filename": "src/test/ui/resolve/associated-fn-called-as-fn.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Fresolve%2Fassociated-fn-called-as-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Fresolve%2Fassociated-fn-called-as-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fassociated-fn-called-as-fn.rs?ref=1d5b7c3c96a86c96f1fbf1441475028df94d165a", "patch": "@@ -0,0 +1,32 @@\n+struct S;\n+impl Foo for S {\n+    fn parse(s:&str) {\n+        for c in s.chars() {\n+            match c {\n+                '0'..='9' => collect_primary(&c), //~ ERROR cannot find function `collect_primary`\n+                //~^ HELP you might have meant to call the associated function\n+                '+' | '-' => println!(\"We got a sign: {}\", c),\n+                _ => println!(\"Not a number!\")\n+            }\n+        }\n+    }\n+}\n+trait Foo {\n+    fn collect_primary(ch:&char) { }\n+    fn parse(s:&str);\n+}\n+trait Bar {\n+    fn collect_primary(ch:&char) { }\n+    fn parse(s:&str) {\n+        for c in s.chars() {\n+            match c {\n+                '0'..='9' => collect_primary(&c), //~ ERROR cannot find function `collect_primary`\n+                //~^ HELP you might have meant to call the associated function\n+                '+' | '-' => println!(\"We got a sign: {}\", c),\n+                _ => println!(\"Not a number!\")\n+            }\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "fbdea30d551fdd2add2da637870a3935b7d2e622", "filename": "src/test/ui/resolve/associated-fn-called-as-fn.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Fresolve%2Fassociated-fn-called-as-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Fresolve%2Fassociated-fn-called-as-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fassociated-fn-called-as-fn.stderr?ref=1d5b7c3c96a86c96f1fbf1441475028df94d165a", "patch": "@@ -0,0 +1,15 @@\n+error[E0425]: cannot find function `collect_primary` in this scope\n+  --> $DIR/associated-fn-called-as-fn.rs:6:30\n+   |\n+LL |                 '0'..='9' => collect_primary(&c),\n+   |                              ^^^^^^^^^^^^^^^ help: you might have meant to call the associated function: `Self::collect_primary`\n+\n+error[E0425]: cannot find function `collect_primary` in this scope\n+  --> $DIR/associated-fn-called-as-fn.rs:23:30\n+   |\n+LL |                 '0'..='9' => collect_primary(&c),\n+   |                              ^^^^^^^^^^^^^^^ help: you might have meant to call the associated function: `Self::collect_primary`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "b1f45adb8b714e9a8fc60c33379c861e70540e3e", "filename": "src/test/ui/resolve/issue-14254.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr?ref=1d5b7c3c96a86c96f1fbf1441475028df94d165a", "patch": "@@ -2,7 +2,7 @@ error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:19:9\n    |\n LL |         baz();\n-   |         ^^^ help: try: `self.baz`\n+   |         ^^^ help: you might have meant to call the method: `self.baz`\n \n error[E0425]: cannot find value `a` in this scope\n   --> $DIR/issue-14254.rs:21:9\n@@ -14,7 +14,7 @@ error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:28:9\n    |\n LL |         baz();\n-   |         ^^^ help: try: `self.baz`\n+   |         ^^^ help: you might have meant to call the method: `self.baz`\n \n error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-14254.rs:30:9\n@@ -38,7 +38,7 @@ error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:36:9\n    |\n LL |         bah;\n-   |         ^^^ help: try: `Self::bah`\n+   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n \n error[E0425]: cannot find value `b` in this scope\n   --> $DIR/issue-14254.rs:38:9\n@@ -50,7 +50,7 @@ error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:45:9\n    |\n LL |         baz();\n-   |         ^^^ help: try: `self.baz`\n+   |         ^^^ help: you might have meant to call the method: `self.baz`\n \n error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-14254.rs:47:9\n@@ -74,7 +74,7 @@ error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:53:9\n    |\n LL |         bah;\n-   |         ^^^ help: try: `Self::bah`\n+   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n \n error[E0425]: cannot find value `b` in this scope\n   --> $DIR/issue-14254.rs:55:9\n@@ -86,61 +86,61 @@ error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:62:9\n    |\n LL |         baz();\n-   |         ^^^ help: try: `self.baz`\n+   |         ^^^ help: you might have meant to call the method: `self.baz`\n \n error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:64:9\n    |\n LL |         bah;\n-   |         ^^^ help: try: `Self::bah`\n+   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n \n error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:71:9\n    |\n LL |         baz();\n-   |         ^^^ help: try: `self.baz`\n+   |         ^^^ help: you might have meant to call the method: `self.baz`\n \n error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:73:9\n    |\n LL |         bah;\n-   |         ^^^ help: try: `Self::bah`\n+   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n \n error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:80:9\n    |\n LL |         baz();\n-   |         ^^^ help: try: `self.baz`\n+   |         ^^^ help: you might have meant to call the method: `self.baz`\n \n error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:82:9\n    |\n LL |         bah;\n-   |         ^^^ help: try: `Self::bah`\n+   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n \n error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:89:9\n    |\n LL |         baz();\n-   |         ^^^ help: try: `self.baz`\n+   |         ^^^ help: you might have meant to call the method: `self.baz`\n \n error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:91:9\n    |\n LL |         bah;\n-   |         ^^^ help: try: `Self::bah`\n+   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n \n error[E0425]: cannot find function `baz` in this scope\n   --> $DIR/issue-14254.rs:98:9\n    |\n LL |         baz();\n-   |         ^^^ help: try: `self.baz`\n+   |         ^^^ help: you might have meant to call the method: `self.baz`\n \n error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/issue-14254.rs:100:9\n    |\n LL |         bah;\n-   |         ^^^ help: try: `Self::bah`\n+   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n \n error: aborting due to 24 previous errors\n "}, {"sha": "8083233c01b92ec431d7da3394d23404b2a7054d", "filename": "src/test/ui/resolve/issue-2356.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr?ref=1d5b7c3c96a86c96f1fbf1441475028df94d165a", "patch": "@@ -8,15 +8,15 @@ error[E0425]: cannot find function `clone` in this scope\n   --> $DIR/issue-2356.rs:24:5\n    |\n LL |     clone();\n-   |     ^^^^^ help: try: `self.clone`\n+   |     ^^^^^ help: you might have meant to call the method: `self.clone`\n \n error[E0425]: cannot find function `default` in this scope\n   --> $DIR/issue-2356.rs:31:5\n    |\n LL |     default();\n    |     ^^^^^^^\n    |\n-help: try\n+help: you might have meant to call the associated function\n    |\n LL |     Self::default();\n    |     ^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ error[E0425]: cannot find function `shave` in this scope\n   --> $DIR/issue-2356.rs:41:5\n    |\n LL |     shave(4);\n-   |     ^^^^^ help: try: `Self::shave`\n+   |     ^^^^^ help: you might have meant to call the associated function: `Self::shave`\n \n error[E0425]: cannot find function `purr` in this scope\n   --> $DIR/issue-2356.rs:43:5"}, {"sha": "b6acaeb8cc23209b550e4f4ef703739467b7a391", "filename": "src/test/ui/resolve/resolve-assoc-suggestions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr?ref=1d5b7c3c96a86c96f1fbf1441475028df94d165a", "patch": "@@ -20,7 +20,7 @@ error[E0412]: cannot find type `Type` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:23:16\n    |\n LL |         let _: Type;\n-   |                ^^^^ help: try: `Self::Type`\n+   |                ^^^^ help: you might have meant to use the associated type: `Self::Type`\n \n error[E0531]: cannot find tuple struct or tuple variant `Type` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:25:13\n@@ -50,7 +50,7 @@ error[E0425]: cannot find value `method` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:34:9\n    |\n LL |         method;\n-   |         ^^^^^^ help: try: `self.method`\n+   |         ^^^^^^ help: you might have meant to call the method: `self.method`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "1c34af6d0ffe5430f428190898a93c294b33e089", "filename": "src/test/ui/resolve/resolve-speculative-adjustment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr?ref=1d5b7c3c96a86c96f1fbf1441475028df94d165a", "patch": "@@ -20,7 +20,7 @@ error[E0425]: cannot find function `method` in this scope\n   --> $DIR/resolve-speculative-adjustment.rs:25:9\n    |\n LL |         method();\n-   |         ^^^^^^ help: try: `self.method`\n+   |         ^^^^^^ help: you might have meant to call the method: `self.method`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "202e4a16eada71911c8d1c99aafd21fe71538c40", "filename": "src/test/ui/suggestions/assoc-type-in-method-return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Fsuggestions%2Fassoc-type-in-method-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d5b7c3c96a86c96f1fbf1441475028df94d165a/src%2Ftest%2Fui%2Fsuggestions%2Fassoc-type-in-method-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fassoc-type-in-method-return.stderr?ref=1d5b7c3c96a86c96f1fbf1441475028df94d165a", "patch": "@@ -2,7 +2,7 @@ error[E0412]: cannot find type `Bla` in this scope\n   --> $DIR/assoc-type-in-method-return.rs:3:25\n    |\n LL |     fn to_bla(&self) -> Bla;\n-   |                         ^^^ help: try: `Self::Bla`\n+   |                         ^^^ help: you might have meant to use the associated type: `Self::Bla`\n \n error: aborting due to previous error\n "}]}