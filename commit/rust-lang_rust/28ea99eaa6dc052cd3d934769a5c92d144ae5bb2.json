{"sha": "28ea99eaa6dc052cd3d934769a5c92d144ae5bb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZWE5OWVhYTZkYzA1MmNkM2Q5MzQ3NjlhNWM5MmQxNDRhZTViYjI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-31T01:55:22Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T03:50:26Z"}, "message": "rustc_borrowck: unbox closures used in let bindings", "tree": {"sha": "ed2a9b74786eece3e5aa3fb8e2b76a06af1a11f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed2a9b74786eece3e5aa3fb8e2b76a06af1a11f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ea99eaa6dc052cd3d934769a5c92d144ae5bb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ea99eaa6dc052cd3d934769a5c92d144ae5bb2", "html_url": "https://github.com/rust-lang/rust/commit/28ea99eaa6dc052cd3d934769a5c92d144ae5bb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ea99eaa6dc052cd3d934769a5c92d144ae5bb2/comments", "author": null, "committer": null, "parents": [{"sha": "a6f30532081fe2eab4b8f24008d494ff2ced9b7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6f30532081fe2eab4b8f24008d494ff2ced9b7f", "html_url": "https://github.com/rust-lang/rust/commit/a6f30532081fe2eab4b8f24008d494ff2ced9b7f"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "90da8906a6fa08e19be3a7da742d7aaeb8c21da1", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/28ea99eaa6dc052cd3d934769a5c92d144ae5bb2/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ea99eaa6dc052cd3d934769a5c92d144ae5bb2/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=28ea99eaa6dc052cd3d934769a5c92d144ae5bb2", "patch": "@@ -44,7 +44,7 @@ enum Fragment {\n \n impl Fragment {\n     fn loan_path_repr<'tcx>(&self, move_data: &MoveData<'tcx>, tcx: &ty::ctxt<'tcx>) -> String {\n-        let repr = |mpi| move_data.path_loan_path(mpi).repr(tcx);\n+        let repr = |&: mpi| move_data.path_loan_path(mpi).repr(tcx);\n         match *self {\n             Just(mpi) => repr(mpi),\n             AllButOneFrom(mpi) => format!(\"$(allbutone {})\", repr(mpi)),\n@@ -54,7 +54,7 @@ impl Fragment {\n     fn loan_path_user_string<'tcx>(&self,\n                                    move_data: &MoveData<'tcx>,\n                                    tcx: &ty::ctxt<'tcx>) -> String {\n-        let user_string = |mpi| move_data.path_loan_path(mpi).user_string(tcx);\n+        let user_string = |&: mpi| move_data.path_loan_path(mpi).user_string(tcx);\n         match *self {\n             Just(mpi) => user_string(mpi),\n             AllButOneFrom(mpi) => format!(\"$(allbutone {})\", user_string(mpi)),\n@@ -140,9 +140,9 @@ pub fn instrument_move_fragments<'tcx>(this: &MoveData<'tcx>,\n \n     if !span_err && !print { return; }\n \n-    let instrument_all_paths = |kind, vec_rc: &Vec<MovePathIndex>| {\n+    let instrument_all_paths = |&: kind, vec_rc: &Vec<MovePathIndex>| {\n         for (i, mpi) in vec_rc.iter().enumerate() {\n-            let render = || this.path_loan_path(*mpi).user_string(tcx);\n+            let render = |&:| this.path_loan_path(*mpi).user_string(tcx);\n             if span_err {\n                 tcx.sess.span_err(sp, format!(\"{}: `{}`\", kind, render())[]);\n             }\n@@ -152,9 +152,9 @@ pub fn instrument_move_fragments<'tcx>(this: &MoveData<'tcx>,\n         }\n     };\n \n-    let instrument_all_fragments = |kind, vec_rc: &Vec<Fragment>| {\n+    let instrument_all_fragments = |&: kind, vec_rc: &Vec<Fragment>| {\n         for (i, f) in vec_rc.iter().enumerate() {\n-            let render = || f.loan_path_user_string(this, tcx);\n+            let render = |&:| f.loan_path_user_string(this, tcx);\n             if span_err {\n                 tcx.sess.span_err(sp, format!(\"{}: `{}`\", kind, render())[]);\n             }\n@@ -187,11 +187,11 @@ pub fn fixup_fragment_sets<'tcx>(this: &MoveData<'tcx>, tcx: &ty::ctxt<'tcx>) {\n     let mut moved = mem::replace(&mut fragments.moved_leaf_paths, vec![]);\n     let mut assigned = mem::replace(&mut fragments.assigned_leaf_paths, vec![]);\n \n-    let path_lps = |mpis: &[MovePathIndex]| -> Vec<String> {\n+    let path_lps = |&: mpis: &[MovePathIndex]| -> Vec<String> {\n         mpis.iter().map(|mpi| this.path_loan_path(*mpi).repr(tcx)).collect()\n     };\n \n-    let frag_lps = |fs: &[Fragment]| -> Vec<String> {\n+    let frag_lps = |&: fs: &[Fragment]| -> Vec<String> {\n         fs.iter().map(|f| f.loan_path_repr(this, tcx)).collect()\n     };\n \n@@ -344,7 +344,7 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n                                                                         Rc<LoanPath<'tcx>>)>) {\n     let parent_ty = parent_lp.to_type();\n \n-    let add_fragment_sibling_local = |field_name, variant_did| {\n+    let mut add_fragment_sibling_local = |&mut : field_name, variant_did| {\n         add_fragment_sibling_core(\n             this, tcx, gathered_fragments, parent_lp.clone(), mc, field_name, origin_lp,\n             variant_did);"}, {"sha": "ad31c52ca34f0eb150e0fdf259c06657b4674224", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ea99eaa6dc052cd3d934769a5c92d144ae5bb2/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ea99eaa6dc052cd3d934769a5c92d144ae5bb2/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=28ea99eaa6dc052cd3d934769a5c92d144ae5bb2", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                 cmt: mc::cmt<'tcx>) -> RestrictionResult<'tcx> {\n         debug!(\"restrict(cmt={})\", cmt.repr(self.bccx.tcx));\n \n-        let new_lp = |v: LoanPathKind<'tcx>| Rc::new(LoanPath::new(v, cmt.ty));\n+        let new_lp = |&: v: LoanPathKind<'tcx>| Rc::new(LoanPath::new(v, cmt.ty));\n \n         match cmt.cat.clone() {\n             mc::cat_rvalue(..) => {"}, {"sha": "c27b7b30e1345fdf6997c1368b1957936c67f232", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ea99eaa6dc052cd3d934769a5c92d144ae5bb2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ea99eaa6dc052cd3d934769a5c92d144ae5bb2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=28ea99eaa6dc052cd3d934769a5c92d144ae5bb2", "patch": "@@ -431,7 +431,7 @@ pub fn opt_loan_path<'tcx>(cmt: &mc::cmt<'tcx>) -> Option<Rc<LoanPath<'tcx>>> {\n     //! which allows it to share common loan path pieces as it\n     //! traverses the CMT.\n \n-    let new_lp = |v: LoanPathKind<'tcx>| Rc::new(LoanPath::new(v, cmt.ty));\n+    let new_lp = |&: v: LoanPathKind<'tcx>| Rc::new(LoanPath::new(v, cmt.ty));\n \n     match cmt.cat {\n         mc::cat_rvalue(..) |"}]}