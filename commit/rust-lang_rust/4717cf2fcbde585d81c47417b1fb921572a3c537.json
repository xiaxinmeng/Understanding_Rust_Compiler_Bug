{"sha": "4717cf2fcbde585d81c47417b1fb921572a3c537", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MTdjZjJmY2JkZTU4NWQ4MWM0NzQxN2IxZmI5MjE1NzJhM2M1Mzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-18T07:39:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-18T07:39:48Z"}, "message": "Auto merge of #75566 - alasher:master, r=oli-obk\n\nSuppress verbose MIR comments for trivial types\n\nAddresses #74508\n\nThis is my first contribution to the Rust project! Please let me know if anything needs revising, I'm happy to make changes.", "tree": {"sha": "dbe26bfff89d442dc570272f48034900a19c103a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbe26bfff89d442dc570272f48034900a19c103a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4717cf2fcbde585d81c47417b1fb921572a3c537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4717cf2fcbde585d81c47417b1fb921572a3c537", "html_url": "https://github.com/rust-lang/rust/commit/4717cf2fcbde585d81c47417b1fb921572a3c537", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4717cf2fcbde585d81c47417b1fb921572a3c537/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "515c9fa505e18a65d7f61bc3e9eb833b79a68618", "url": "https://api.github.com/repos/rust-lang/rust/commits/515c9fa505e18a65d7f61bc3e9eb833b79a68618", "html_url": "https://github.com/rust-lang/rust/commit/515c9fa505e18a65d7f61bc3e9eb833b79a68618"}, {"sha": "28ac141b72053ae21c9337e761ef339803c958df", "url": "https://api.github.com/repos/rust-lang/rust/commits/28ac141b72053ae21c9337e761ef339803c958df", "html_url": "https://github.com/rust-lang/rust/commit/28ac141b72053ae21c9337e761ef339803c958df"}], "stats": {"total": 3735, "additions": 48, "deletions": 3687}, "files": [{"sha": "0294a7cd7aff1ecb5577316e4b50f725433c9a92", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -387,20 +387,30 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.super_constant(constant, location);\n         let Constant { span, user_ty, literal } = constant;\n-        self.push(\"mir::Constant\");\n-        self.push(&format!(\"+ span: {}\", self.tcx.sess.source_map().span_to_string(*span)));\n-        if let Some(user_ty) = user_ty {\n-            self.push(&format!(\"+ user_ty: {:?}\", user_ty));\n+        match literal.ty.kind {\n+            ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char => {}\n+            _ => {\n+                self.push(\"mir::Constant\");\n+                self.push(&format!(\"+ span: {}\", self.tcx.sess.source_map().span_to_string(*span)));\n+                if let Some(user_ty) = user_ty {\n+                    self.push(&format!(\"+ user_ty: {:?}\", user_ty));\n+                }\n+                self.push(&format!(\"+ literal: {:?}\", literal));\n+            }\n         }\n-        self.push(&format!(\"+ literal: {:?}\", literal));\n     }\n \n     fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, _: Location) {\n         self.super_const(constant);\n         let ty::Const { ty, val, .. } = constant;\n-        self.push(\"ty::Const\");\n-        self.push(&format!(\"+ ty: {:?}\", ty));\n-        self.push(&format!(\"+ val: {:?}\", val));\n+        match ty.kind {\n+            ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char => {}\n+            _ => {\n+                self.push(\"ty::Const\");\n+                self.push(&format!(\"+ ty: {:?}\", ty));\n+                self.push(&format!(\"+ val: {:?}\", val));\n+            }\n+        }\n     }\n \n     fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {"}, {"sha": "d9b5094f1e1982945289b1eb3023e5a06962e743", "filename": "src/test/mir-opt/address_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -129,23 +129,11 @@ fn address_of_reborrow() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/address-of.rs:4:9: 4:10\n         StorageLive(_2);                 // scope 0 at $DIR/address-of.rs:4:14: 4:21\n         _2 = [const 0_i32; 10];          // scope 0 at $DIR/address-of.rs:4:14: 4:21\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/address-of.rs:4:15: 4:16\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n         _1 = &_2;                        // scope 0 at $DIR/address-of.rs:4:13: 4:21\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/address-of.rs:4:9: 4:10\n         StorageLive(_3);                 // scope 1 at $DIR/address-of.rs:5:9: 5:14\n         StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:5:22: 5:29\n         _4 = [const 0_i32; 10];          // scope 1 at $DIR/address-of.rs:5:22: 5:29\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/address-of.rs:5:23: 5:24\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n         _3 = &mut _4;                    // scope 1 at $DIR/address-of.rs:5:17: 5:29\n         FakeRead(ForLet, _3);            // scope 1 at $DIR/address-of.rs:5:9: 5:14\n         StorageLive(_5);                 // scope 2 at $DIR/address-of.rs:7:5: 7:18"}, {"sha": "895824947e93d5517dcd8108a9d6a9e52862f452", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.32bit", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -26,32 +26,8 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n         _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at $DIR/array-index-is-temporary.rs:13:17: 13:29\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x0000002a))\n-                                         // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:13:18: 13:20\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x0000002b))\n-                                         // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:13:22: 13:24\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002b)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x0000002c))\n-                                         // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:13:26: 13:28\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002c)) }\n         StorageLive(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n         _2 = const 1_usize;              // scope 1 at $DIR/array-index-is-temporary.rs:14:17: 14:18\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:14:17: 14:18\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n         StorageLive(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n         StorageLive(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n         _4 = &mut _2;                    // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31"}, {"sha": "895824947e93d5517dcd8108a9d6a9e52862f452", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.64bit", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -26,32 +26,8 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n         _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at $DIR/array-index-is-temporary.rs:13:17: 13:29\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x0000002a))\n-                                         // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:13:18: 13:20\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x0000002b))\n-                                         // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:13:22: 13:24\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002b)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x0000002c))\n-                                         // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:13:26: 13:28\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002c)) }\n         StorageLive(_2);                 // scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n         _2 = const 1_usize;              // scope 1 at $DIR/array-index-is-temporary.rs:14:17: 14:18\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:14:17: 14:18\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n         StorageLive(_3);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n         StorageLive(_4);                 // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n         _4 = &mut _2;                    // scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31"}, {"sha": "4bb91169cb584c18f63d38a18727de9b6ba087ba", "filename": "src/test/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -28,12 +28,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n         _1 = const false;                // scope 0 at $DIR/basic_assignment.rs:11:20: 11:25\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/basic_assignment.rs:11:20: 11:25\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n         StorageLive(_2);                 // scope 1 at $DIR/basic_assignment.rs:12:9: 12:17\n         StorageLive(_3);                 // scope 2 at $DIR/basic_assignment.rs:16:16: 16:24"}, {"sha": "9e3f6cff4b3311f4baa0e2ca28cd62868a0501e0", "filename": "src/test/mir-opt/byte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -22,18 +22,6 @@ fn main() -> () {\n                                          // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc0)) }\n         StorageLive(_2);                 // scope 1 at $DIR/byte_slice.rs:6:9: 6:10\n         _2 = [const 5_u8, const 120_u8]; // scope 1 at $DIR/byte_slice.rs:6:13: 6:24\n-                                         // ty::Const\n-                                         // + ty: u8\n-                                         // + val: Value(Scalar(0x05))\n-                                         // mir::Constant\n-                                         // + span: $DIR/byte_slice.rs:6:14: 6:17\n-                                         // + literal: Const { ty: u8, val: Value(Scalar(0x05)) }\n-                                         // ty::Const\n-                                         // + ty: u8\n-                                         // + val: Value(Scalar(0x78))\n-                                         // mir::Constant\n-                                         // + span: $DIR/byte_slice.rs:6:19: 6:23\n-                                         // + literal: Const { ty: u8, val: Value(Scalar(0x78)) }\n         _0 = const ();                   // scope 0 at $DIR/byte_slice.rs:4:11: 7:2\n                                          // ty::Const\n                                          // + ty: ()"}, {"sha": "61e987cc685168a00188771f55fb4ee5e6ffb075", "filename": "src/test/mir-opt/combine_array_len.norm2.InstCombine.diff.32bit", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -29,20 +29,8 @@\n           StorageLive(_2);                 // scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n           StorageLive(_3);                 // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n           _3 = const 0_usize;              // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/combine_array_len.rs:5:15: 5:16\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n -         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n +         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/combine_array_len.rs:5:13: 5:17\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n           _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n           assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n       }\n@@ -53,20 +41,8 @@\n           StorageLive(_6);                 // scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n           StorageLive(_7);                 // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n           _7 = const 1_usize;              // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/combine_array_len.rs:6:15: 6:16\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n -         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n +         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/combine_array_len.rs:6:13: 6:17\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n           _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n           assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n       }"}, {"sha": "61e987cc685168a00188771f55fb4ee5e6ffb075", "filename": "src/test/mir-opt/combine_array_len.norm2.InstCombine.diff.64bit", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -29,20 +29,8 @@\n           StorageLive(_2);                 // scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n           StorageLive(_3);                 // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n           _3 = const 0_usize;              // scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x0000000000000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/combine_array_len.rs:5:15: 5:16\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n -         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n +         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/combine_array_len.rs:5:13: 5:17\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n           _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n           assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n       }\n@@ -53,20 +41,8 @@\n           StorageLive(_6);                 // scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n           StorageLive(_7);                 // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n           _7 = const 1_usize;              // scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x0000000000000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/combine_array_len.rs:6:15: 6:16\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n -         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n +         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/combine_array_len.rs:6:13: 6:17\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n           _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n           assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n       }"}, {"sha": "f44025bd523b2db999194a8c7b64d00b42b37f48", "filename": "src/test/mir-opt/const_prop/aggregate.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -15,45 +15,12 @@\n           StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n           StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n           (_3.0: i32) = const 0_i32;       // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/aggregate.rs:5:14: 5:15\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           (_3.1: i32) = const 1_i32;       // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/aggregate.rs:5:17: 5:18\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           (_3.2: i32) = const 2_i32;       // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/aggregate.rs:5:20: 5:21\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n -         _2 = (_3.1: i32);                // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n -         _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/aggregate.rs:5:13: 5:28\n +         _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n-                                           // ty::Const\n-                                           // + ty: i32\n--                                          // + val: Value(Scalar(0x00000000))\n-+                                          // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n--                                          // + span: $DIR/aggregate.rs:5:27: 5:28\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-+                                          // + span: $DIR/aggregate.rs:5:13: 5:24\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n +         _1 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:5:13: 5:28\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000001))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/aggregate.rs:5:13: 5:28\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:5:27: 5:28\n           StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:5:28: 5:29\n           _0 = const ();                   // scope 0 at $DIR/aggregate.rs:4:11: 6:2"}, {"sha": "9b456b6529ad1c45290e11c65ded6661cd315374", "filename": "src/test/mir-opt/const_prop/array_index.main.ConstProp.diff.32bit", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -16,84 +16,18 @@\n           StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:5:9: 5:10\n           StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:5:18: 5:30\n           _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:5:18: 5:30\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/array_index.rs:5:19: 5:20\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/array_index.rs:5:22: 5:23\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/array_index.rs:5:25: 5:26\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000003))\n-                                           // mir::Constant\n-                                           // + span: $DIR/array_index.rs:5:28: 5:29\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n           StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:5:31: 5:32\n           _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:5:31: 5:32\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/array_index.rs:5:31: 5:32\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n           _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x00000004))\n-                                           // mir::Constant\n-                                           // + span: $DIR/array_index.rs:5:18: 5:33\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000004)) }\n -         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n -         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +         _5 = const true;                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/array_index.rs:5:18: 5:33\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n +         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 4_usize, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/array_index.rs:5:18: 5:33\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000004))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/array_index.rs:5:18: 5:33\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000004)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/array_index.rs:5:18: 5:33\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n       }\n   \n       bb1: {\n -         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/array_index.rs:5:18: 5:33\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n           StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n           StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n           _0 = const ();                   // scope 0 at $DIR/array_index.rs:4:11: 6:2"}, {"sha": "9b456b6529ad1c45290e11c65ded6661cd315374", "filename": "src/test/mir-opt/const_prop/array_index.main.ConstProp.diff.64bit", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -16,84 +16,18 @@\n           StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:5:9: 5:10\n           StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:5:18: 5:30\n           _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:5:18: 5:30\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/array_index.rs:5:19: 5:20\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/array_index.rs:5:22: 5:23\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/array_index.rs:5:25: 5:26\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000003))\n-                                           // mir::Constant\n-                                           // + span: $DIR/array_index.rs:5:28: 5:29\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n           StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:5:31: 5:32\n           _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:5:31: 5:32\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x0000000000000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/array_index.rs:5:31: 5:32\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n           _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x0000000000000004))\n-                                           // mir::Constant\n-                                           // + span: $DIR/array_index.rs:5:18: 5:33\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000004)) }\n -         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n -         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +         _5 = const true;                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/array_index.rs:5:18: 5:33\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n +         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 4_usize, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/array_index.rs:5:18: 5:33\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000004))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/array_index.rs:5:18: 5:33\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000004)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/array_index.rs:5:18: 5:33\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n       }\n   \n       bb1: {\n -         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/array_index.rs:5:18: 5:33\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n           StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n           StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:5:33: 5:34\n           _0 = const ();                   // scope 0 at $DIR/array_index.rs:4:11: 6:2"}, {"sha": "cb3951c162378dcabeee9b00491760be2a7d2543", "filename": "src/test/mir-opt/const_prop/bad_op_div_by_zero.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 93, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -20,119 +20,30 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:4:9: 4:10\n           _1 = const 0_i32;                // scope 0 at $DIR/bad_op_div_by_zero.rs:4:13: 4:14\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_div_by_zero.rs:4:13: 4:14\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageLive(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:9: 5:11\n           StorageLive(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n -         _3 = _1;                         // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n -         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n--                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+                                          // + span: $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n -         assert(!move _4, \"attempt to divide {} by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n +         _4 = const true;                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-                                           // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n +         assert(!const true, \"attempt to divide {} by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+                                          // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:15\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb1: {\n -         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+         _5 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-                                           // ty::Const\n--                                          // + ty: i32\n--                                          // + val: Value(Scalar(0xffffffff))\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0xffffffff)) }\n -         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         _6 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-                                           // ty::Const\n--                                          // + ty: i32\n--                                          // + val: Value(Scalar(0x00000001))\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n--                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:15\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-+                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         _7 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-                                           // ty::Const\n--                                          // + ty: i32\n--                                          // + val: Value(Scalar(0x80000000))\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x80000000)) }\n -         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n -         assert(!move _7, \"attempt to compute `{} / {}` which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         _5 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++         _6 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++         _7 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +         assert(!const false, \"attempt to compute `{} / {}` which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-                                           // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+                                          // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:15\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000000))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n       }\n   \n       bb2: {\n -         _2 = Div(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +         _2 = Div(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:15\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000000))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageDead(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n           _0 = const ();                   // scope 0 at $DIR/bad_op_div_by_zero.rs:3:11: 6:2\n                                            // ty::Const"}, {"sha": "d0757aa8a851b2bb7310da40fe6ac4837256792d", "filename": "src/test/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 93, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -20,119 +20,30 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:4:9: 4:10\n           _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:4:13: 4:14\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_mod_by_zero.rs:4:13: 4:14\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:9: 5:11\n           StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n -         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n -         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n--                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n -         assert(!move _4, \"attempt to calculate the remainder of {} with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n +         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-                                           // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n +         assert(!const true, \"attempt to calculate the remainder of {} with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+                                          // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:15\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb1: {\n -         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-                                           // ty::Const\n--                                          // + ty: i32\n--                                          // + val: Value(Scalar(0xffffffff))\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0xffffffff)) }\n -         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-                                           // ty::Const\n--                                          // + ty: i32\n--                                          // + val: Value(Scalar(0x00000001))\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n--                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:15\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-+                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-                                           // ty::Const\n--                                          // + ty: i32\n--                                          // + val: Value(Scalar(0x80000000))\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x80000000)) }\n -         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n -         assert(!move _7, \"attempt to compute the remainder of `{} % {}` which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +         assert(!const false, \"attempt to compute the remainder of `{} % {}` which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-                                           // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+                                          // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:15\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000000))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n       }\n   \n       bb2: {\n -         _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +         _2 = Rem(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:15\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000000))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n           _0 = const ();                   // scope 0 at $DIR/bad_op_mod_by_zero.rs:3:11: 6:2\n                                            // ty::Const"}, {"sha": "6584bcddc47b22531301d5145de1f18df46fa536", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.diff.32bit", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -40,29 +40,11 @@\n           StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n           StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n           _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x00000003))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n           _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n -         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n -         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n +         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000003))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n +         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000003))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n       }\n   \n       bb1: {"}, {"sha": "6584bcddc47b22531301d5145de1f18df46fa536", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.diff.64bit", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -40,29 +40,11 @@\n           StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:13: 7:15\n           StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n           _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x0000000000000003))\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n           _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n -         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n -         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n +         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000003))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n +         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000003))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n       }\n   \n       bb1: {"}, {"sha": "8a6d16a3a15c17cb8eb928c5e14d7b1483aa54c3", "filename": "src/test/mir-opt/const_prop/boolean_identities.test.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboolean_identities.test.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboolean_identities.test.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboolean_identities.test.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -16,35 +16,15 @@\n           _4 = _2;                         // scope 0 at $DIR/boolean_identities.rs:5:6: 5:7\n -         _3 = BitOr(move _4, const true); // scope 0 at $DIR/boolean_identities.rs:5:5: 5:15\n +         _3 = const true;                 // scope 0 at $DIR/boolean_identities.rs:5:5: 5:15\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n--                                          // + span: $DIR/boolean_identities.rs:5:10: 5:14\n-+                                          // + span: $DIR/boolean_identities.rs:5:5: 5:15\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           StorageDead(_4);                 // scope 0 at $DIR/boolean_identities.rs:5:14: 5:15\n           StorageLive(_5);                 // scope 0 at $DIR/boolean_identities.rs:5:18: 5:29\n           StorageLive(_6);                 // scope 0 at $DIR/boolean_identities.rs:5:19: 5:20\n           _6 = _1;                         // scope 0 at $DIR/boolean_identities.rs:5:19: 5:20\n -         _5 = BitAnd(move _6, const false); // scope 0 at $DIR/boolean_identities.rs:5:18: 5:29\n +         _5 = const false;                // scope 0 at $DIR/boolean_identities.rs:5:18: 5:29\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n--                                          // + span: $DIR/boolean_identities.rs:5:23: 5:28\n-+                                          // + span: $DIR/boolean_identities.rs:5:18: 5:29\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n           StorageDead(_6);                 // scope 0 at $DIR/boolean_identities.rs:5:28: 5:29\n -         _0 = BitAnd(move _3, move _5);   // scope 0 at $DIR/boolean_identities.rs:5:5: 5:29\n +         _0 = const false;                // scope 0 at $DIR/boolean_identities.rs:5:5: 5:29\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/boolean_identities.rs:5:5: 5:29\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n           StorageDead(_5);                 // scope 0 at $DIR/boolean_identities.rs:5:28: 5:29\n           StorageDead(_3);                 // scope 0 at $DIR/boolean_identities.rs:5:28: 5:29\n           return;                          // scope 0 at $DIR/boolean_identities.rs:6:2: 6:2"}, {"sha": "aa47c645da58969d107f9e03e42724ed0ee789a1", "filename": "src/test/mir-opt/const_prop/boxes.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -18,22 +18,10 @@\n           StorageLive(_4);                 // scope 0 at $DIR/boxes.rs:12:14: 12:22\n           _4 = Box(i32);                   // scope 0 at $DIR/boxes.rs:12:14: 12:22\n           (*_4) = const 42_i32;            // scope 0 at $DIR/boxes.rs:12:19: 12:21\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/boxes.rs:12:19: 12:21\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n           _3 = move _4;                    // scope 0 at $DIR/boxes.rs:12:14: 12:22\n           StorageDead(_4);                 // scope 0 at $DIR/boxes.rs:12:21: 12:22\n           _2 = (*_3);                      // scope 0 at $DIR/boxes.rs:12:13: 12:22\n           _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:12:13: 12:26\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/boxes.rs:12:25: 12:26\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:12:25: 12:26\n           drop(_3) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/boxes.rs:12:26: 12:27\n       }"}, {"sha": "895df6ee4cb39fa65db8dcbc0629c74441926fed", "filename": "src/test/mir-opt/const_prop/cast.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -16,29 +16,9 @@\n           StorageLive(_1);                 // scope 0 at $DIR/cast.rs:4:9: 4:10\n -         _1 = const 42_u8 as u32 (Misc);  // scope 0 at $DIR/cast.rs:4:13: 4:24\n +         _1 = const 42_u32;               // scope 0 at $DIR/cast.rs:4:13: 4:24\n-                                           // ty::Const\n--                                          // + ty: u8\n--                                          // + val: Value(Scalar(0x2a))\n--                                          // mir::Constant\n--                                          // + span: $DIR/cast.rs:4:13: 4:17\n--                                          // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n--         StorageLive(_2);                 // scope 1 at $DIR/cast.rs:6:9: 6:10\n+          StorageLive(_2);                 // scope 1 at $DIR/cast.rs:6:9: 6:10\n -         _2 = const 42_u32 as u8 (Misc);  // scope 1 at $DIR/cast.rs:6:13: 6:24\n--                                          // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n--                                          // + span: $DIR/cast.rs:6:13: 6:18\n-+                                          // + span: $DIR/cast.rs:4:13: 4:24\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-+         StorageLive(_2);                 // scope 1 at $DIR/cast.rs:6:9: 6:10\n +         _2 = const 42_u8;                // scope 1 at $DIR/cast.rs:6:13: 6:24\n-+                                          // ty::Const\n-+                                          // + ty: u8\n-+                                          // + val: Value(Scalar(0x2a))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/cast.rs:6:13: 6:24\n-+                                          // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n           _0 = const ();                   // scope 0 at $DIR/cast.rs:3:11: 7:2\n                                            // ty::Const\n                                            // + ty: ()"}, {"sha": "9510f0dad34e1a89c60696c4ab00d4b9bca6bb7c", "filename": "src/test/mir-opt/const_prop/checked_add.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -12,57 +12,14 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/checked_add.rs:5:9: 5:10\n -         _2 = CheckedAdd(const 1_u32, const 1_u32); // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n-+         _2 = (const 2_u32, const false); // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n-                                           // ty::Const\n-                                           // + ty: u32\n--                                          // + val: Value(Scalar(0x00000001))\n-+                                          // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n--                                          // + span: $DIR/checked_add.rs:5:18: 5:19\n--                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-+                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-                                           // ty::Const\n--                                          // + ty: u32\n--                                          // + val: Value(Scalar(0x00000001))\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n--                                          // + span: $DIR/checked_add.rs:5:22: 5:23\n--                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n -         assert(!move (_2.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n-+                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         _2 = (const 2_u32, const false); // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n +         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n-                                           // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+                                          // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/checked_add.rs:5:18: 5:19\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/checked_add.rs:5:22: 5:23\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb1: {\n -         _1 = move (_2.0: u32);           // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n +         _1 = const 2_u32;                // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n           _0 = const ();                   // scope 0 at $DIR/checked_add.rs:4:11: 6:2\n                                            // ty::Const\n                                            // + ty: ()"}, {"sha": "e004b29f504f0aaf7fc9dacbc9b5ca96252e9f08", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -9,23 +9,9 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n -         _1 = const <bool as NeedsDrop>::NEEDS; // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n-+         _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n-                                           // ty::Const\n-                                           // + ty: bool\n--                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ control_flow_simplification[317d]::NeedsDrop[0]::NEEDS[0]), const_param_did: None }, [bool], None)\n-+                                          // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/control-flow-simplification.rs:12:8: 12:21\n--                                          // + literal: Const { ty: bool, val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ control_flow_simplification[317d]::NeedsDrop[0]::NEEDS[0]), const_param_did: None }, [bool], None) }\n -         switchInt(_1) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n +         switchInt(const false) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/control-flow-simplification.rs:12:5: 14:6\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n       }\n   \n       bb1: {"}, {"sha": "f114eab1e0f845074cadcf70878f9747de8d29ff", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.diff.32bit", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -16,39 +16,15 @@\n           StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n           StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n           ((_3 as Some).0: bool) = const true; // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:11:39: 11:43\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           discriminant(_3) = 1;            // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n -         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n -         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +         _4 = const 1_isize;              // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n-+                                          // ty::Const\n-+                                          // + ty: isize\n-+                                          // + val: Value(Scalar(0x00000001))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:11:21: 11:31\n-+                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000001)) }\n +         switchInt(const 1_isize) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n-+                                          // ty::Const\n-+                                          // + ty: isize\n-+                                          // + val: Value(Scalar(0x00000001))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:11:21: 11:31\n-+                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb1: {\n           _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x0000000a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:11:59: 11:61\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n           goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   \n@@ -58,23 +34,11 @@\n   \n       bb3: {\n           _2 = const 42_i32;               // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:11:47: 11:49\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n           goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   \n       bb4: {\n           _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/discriminant.rs:11:13: 11:68\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:11:67: 11:68\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:11:67: 11:68\n           StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:11:68: 11:69\n           _0 = const ();                   // scope 0 at $DIR/discriminant.rs:10:11: 12:2"}, {"sha": "f114eab1e0f845074cadcf70878f9747de8d29ff", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.diff.64bit", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -16,39 +16,15 @@\n           StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n           StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n           ((_3 as Some).0: bool) = const true; // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:11:39: 11:43\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           discriminant(_3) = 1;            // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n -         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n -         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +         _4 = const 1_isize;              // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n-+                                          // ty::Const\n-+                                          // + ty: isize\n-+                                          // + val: Value(Scalar(0x0000000000000001))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:11:21: 11:31\n-+                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }\n +         switchInt(const 1_isize) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n-+                                          // ty::Const\n-+                                          // + ty: isize\n-+                                          // + val: Value(Scalar(0x0000000000000001))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:11:21: 11:31\n-+                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }\n       }\n   \n       bb1: {\n           _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:11:59: 11:61\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x0000000a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:11:59: 11:61\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n           goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   \n@@ -58,23 +34,11 @@\n   \n       bb3: {\n           _2 = const 42_i32;               // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:11:47: 11:49\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n           goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   \n       bb4: {\n           _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/discriminant.rs:11:13: 11:68\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:11:67: 11:68\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:11:67: 11:68\n           StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:11:68: 11:69\n           _0 = const ();                   // scope 0 at $DIR/discriminant.rs:10:11: 12:2"}, {"sha": "fde3c1244ea58e5d39f0b1890313e19f8bc6a7f0", "filename": "src/test/mir-opt/const_prop/indirect.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 51, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -14,65 +14,16 @@\n           StorageLive(_1);                 // scope 0 at $DIR/indirect.rs:5:9: 5:10\n           StorageLive(_2);                 // scope 0 at $DIR/indirect.rs:5:13: 5:25\n -         _2 = const 2_u32 as u8 (Misc);   // scope 0 at $DIR/indirect.rs:5:13: 5:25\n-+         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:5:13: 5:25\n-                                           // ty::Const\n--                                          // + ty: u32\n--                                          // + val: Value(Scalar(0x00000002))\n-+                                          // + ty: u8\n-+                                          // + val: Value(Scalar(0x02))\n-                                           // mir::Constant\n--                                          // + span: $DIR/indirect.rs:5:14: 5:18\n--                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n -         _3 = CheckedAdd(_2, const 1_u8); // scope 0 at $DIR/indirect.rs:5:13: 5:29\n-+                                          // + span: $DIR/indirect.rs:5:13: 5:25\n-+                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n-+         _3 = (const 3_u8, const false);  // scope 0 at $DIR/indirect.rs:5:13: 5:29\n-                                           // ty::Const\n-                                           // + ty: u8\n--                                          // + val: Value(Scalar(0x01))\n-+                                          // + val: Value(Scalar(0x03))\n-                                           // mir::Constant\n--                                          // + span: $DIR/indirect.rs:5:28: 5:29\n--                                          // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }\n -         assert(!move (_3.1: bool), \"attempt to compute `{} + {}` which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n-+                                          // + span: $DIR/indirect.rs:5:13: 5:29\n-+                                          // + literal: Const { ty: u8, val: Value(Scalar(0x03)) }\n-                                           // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/indirect.rs:5:13: 5:29\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:5:13: 5:25\n++         _3 = (const 3_u8, const false);  // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 2_u8, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/indirect.rs:5:13: 5:29\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+                                          // ty::Const\n-                                           // + ty: u8\n-+                                          // + val: Value(Scalar(0x02))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/indirect.rs:5:13: 5:29\n-+                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n-+                                          // ty::Const\n-+                                          // + ty: u8\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/indirect.rs:5:28: 5:29\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }\n       }\n   \n       bb1: {\n -         _1 = move (_3.0: u8);            // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +         _1 = const 3_u8;                 // scope 0 at $DIR/indirect.rs:5:13: 5:29\n-+                                          // ty::Const\n-+                                          // + ty: u8\n-+                                          // + val: Value(Scalar(0x03))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/indirect.rs:5:13: 5:29\n-+                                          // + literal: Const { ty: u8, val: Value(Scalar(0x03)) }\n           StorageDead(_2);                 // scope 0 at $DIR/indirect.rs:5:28: 5:29\n           _0 = const ();                   // scope 0 at $DIR/indirect.rs:4:11: 6:2\n                                            // ty::Const"}, {"sha": "236cbfe63036d4b9f4d95526f08103099c4524a1", "filename": "src/test/mir-opt/const_prop/issue_66971.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -20,19 +20,7 @@\n +                                          // + span: $DIR/issue-66971.rs:16:12: 16:22\n +                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           (_2.1: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-66971.rs:16:17: 16:18\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n           (_2.2: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-66971.rs:16:20: 16:21\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n           StorageDead(_3);                 // scope 0 at $DIR/issue-66971.rs:16:21: 16:22\n           _1 = const encode(move _2) -> bb1; // scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n                                            // ty::Const"}, {"sha": "8b47f66a1178b714ead3ac78e72fe367f3544ae1", "filename": "src/test/mir-opt/const_prop/issue_67019.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -12,33 +12,9 @@\n           StorageLive(_2);                 // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n           StorageLive(_3);                 // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n           (_3.0: u8) = const 1_u8;         // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-67019.rs:11:12: 11:13\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }\n           (_3.1: u8) = const 2_u8;         // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x02))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-67019.rs:11:15: 11:16\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n -         (_2.0: (u8, u8)) = move _3;      // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n +         (_2.0: (u8, u8)) = (const 1_u8, const 2_u8); // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n-+                                          // ty::Const\n-+                                          // + ty: u8\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/issue-67019.rs:11:10: 11:19\n-+                                          // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }\n-+                                          // ty::Const\n-+                                          // + ty: u8\n-+                                          // + val: Value(Scalar(0x02))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/issue-67019.rs:11:10: 11:19\n-+                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n           StorageDead(_3);                 // scope 0 at $DIR/issue-67019.rs:11:18: 11:19\n           _1 = const test(move _2) -> bb1; // scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n                                            // ty::Const"}, {"sha": "cb55efe20784dfdf34ca53aa9b51f8cd1e23f13d", "filename": "src/test/mir-opt/const_prop/large_array_index.main.ConstProp.diff.32bit", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -16,55 +16,13 @@\n           StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:6:9: 6:10\n           StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n           _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/large_array_index.rs:6:18: 6:22\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n           StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n           _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/large_array_index.rs:6:30: 6:31\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n           _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x00001388))\n-                                           // mir::Constant\n-                                           // + span: $DIR/large_array_index.rs:6:17: 6:32\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00001388)) }\n -         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n -         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n +         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n +         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00001388))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00001388)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n       }\n   \n       bb1: {"}, {"sha": "cb55efe20784dfdf34ca53aa9b51f8cd1e23f13d", "filename": "src/test/mir-opt/const_prop/large_array_index.main.ConstProp.diff.64bit", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -16,55 +16,13 @@\n           StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:6:9: 6:10\n           StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n           _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:6:17: 6:29\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/large_array_index.rs:6:18: 6:22\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n           StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n           _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x0000000000000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/large_array_index.rs:6:30: 6:31\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n           _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x0000000000001388))\n-                                           // mir::Constant\n-                                           // + span: $DIR/large_array_index.rs:6:17: 6:32\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000001388)) }\n -         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n -         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n +         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n +         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000001388))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000001388)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/large_array_index.rs:6:17: 6:32\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n       }\n   \n       bb1: {"}, {"sha": "84ae8cc7477e37b6e3d4f3eac82a2d33ceb6cdc4", "filename": "src/test/mir-opt/const_prop/mult_by_zero.test.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -11,13 +11,6 @@\n           _2 = _1;                         // scope 0 at $DIR/mult_by_zero.rs:5:3: 5:4\n -         _0 = Mul(move _2, const 0_i32);  // scope 0 at $DIR/mult_by_zero.rs:5:3: 5:8\n +         _0 = const 0_i32;                // scope 0 at $DIR/mult_by_zero.rs:5:3: 5:8\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n--                                          // + span: $DIR/mult_by_zero.rs:5:7: 5:8\n-+                                          // + span: $DIR/mult_by_zero.rs:5:3: 5:8\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageDead(_2);                 // scope 0 at $DIR/mult_by_zero.rs:5:7: 5:8\n           return;                          // scope 0 at $DIR/mult_by_zero.rs:6:2: 6:2\n       }"}, {"sha": "edbb1e57c7d37172f3fa1a5a0be738bbf3020cad", "filename": "src/test/mir-opt/const_prop/mutable_variable.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -15,28 +15,10 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable.rs:5:9: 5:14\n           _1 = const 42_i32;               // scope 0 at $DIR/mutable_variable.rs:5:17: 5:19\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable.rs:5:17: 5:19\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n           _1 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:6:5: 6:11\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000063))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable.rs:6:9: 6:11\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable.rs:7:9: 7:10\n -         _2 = _1;                         // scope 1 at $DIR/mutable_variable.rs:7:13: 7:14\n +         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:7:13: 7:14\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000063))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/mutable_variable.rs:7:13: 7:14\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n           _0 = const ();                   // scope 0 at $DIR/mutable_variable.rs:4:11: 8:2\n                                            // ty::Const\n                                            // + ty: ()"}, {"sha": "05c618b3a1279e091a6c458621adf3c6841a3714", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -15,41 +15,11 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:5:9: 5:14\n           (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate.rs:5:18: 5:20\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n           (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x0000002b))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate.rs:5:22: 5:24\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002b)) }\n           (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:6:5: 6:13\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000063))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate.rs:6:11: 6:13\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:7:9: 7:10\n -         _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n +         _2 = (const 42_i32, const 99_i32); // scope 1 at $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x0000002a))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000063))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n           _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate.rs:4:11: 8:2\n                                            // ty::Const\n                                            // + ty: ()"}, {"sha": "d8f066c7b9b17dae5e44c62637109811da3afde5", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -19,28 +19,10 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:9: 5:14\n           (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:18: 5:20\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n           (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x0000002b))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:22: 5:24\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002b)) }\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:9: 6:10\n           _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:13: 6:19\n           ((*_2).1: i32) = const 99_i32;   // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:7:5: 7:13\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000063))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:7:11: 7:13\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:8:9: 8:10\n           _3 = _1;                         // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:8:13: 8:14\n           _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:4:11: 9:2"}, {"sha": "59a43bda35ade2cea1dba0f7362da151a71caa0e", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_partial_read.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -25,28 +25,10 @@\n   \n       bb1: {\n           (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:6:5: 6:13\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000063))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:6:11: 6:13\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n           (_1.0: i32) = const 42_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:7:5: 7:13\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:7:11: 7:13\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:9: 8:10\n -         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n +         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000063))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/mutable_variable_aggregate_partial_read.rs:8:13: 8:16\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000063)) }\n           _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:4:11: 9:2\n                                            // ty::Const\n                                            // + ty: ()"}, {"sha": "945aeaf1e88b0f079e2724f8ce209814e5892c81", "filename": "src/test/mir-opt/const_prop/mutable_variable_no_prop.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -20,12 +20,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:7:9: 7:14\n           _1 = const 42_u32;               // scope 0 at $DIR/mutable_variable_no_prop.rs:7:17: 7:19\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_no_prop.rs:7:17: 7:19\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:8:5: 10:6\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n           StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19"}, {"sha": "5812814a0ec4f884009dd1f762f78216a60f630b", "filename": "src/test/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -35,19 +35,7 @@\n       bb1: {\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:9: 6:14\n           (_2.0: i32) = const 1_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_unprop_assign.rs:6:30: 6:31\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           (_2.1: i32) = const 2_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_unprop_assign.rs:6:33: 6:34\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:7:11: 7:12\n           _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:7:11: 7:12\n           (_2.1: i32) = move _3;           // scope 2 at $DIR/mutable_variable_unprop_assign.rs:7:5: 7:12"}, {"sha": "3bdf9e753c044579d43442f75af46d7727e38eb4", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.diff.32bit", "status": "modified", "additions": 1, "deletions": 140, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -25,176 +25,37 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n -         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         _2 = (const 4_i32, const false); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-                                           // ty::Const\n-                                           // + ty: i32\n--                                          // + val: Value(Scalar(0x00000002))\n-+                                          // + val: Value(Scalar(0x00000004))\n-                                           // mir::Constant\n--                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:14\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-+                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-                                           // ty::Const\n--                                          // + ty: i32\n--                                          // + val: Value(Scalar(0x00000002))\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n--                                          // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n -         assert(!move (_2.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         _2 = (const 4_i32, const false); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-                                           // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+                                          // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:12:13: 12:14\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n       }\n   \n       bb1: {\n -         _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +         _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000004))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n           StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n           StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n           _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:14: 13:15\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:17: 13:18\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:20: 13:21\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000003))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:23: 13:24\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000004))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:26: 13:27\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000005))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:29: 13:30\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n           StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n           _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x00000003))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:32: 13:33\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n           _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x00000006))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000006)) }\n -         _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n -         assert(move _7, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +         _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n +         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000006))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000006)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000003))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n       }\n   \n       bb2: {\n -         _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +         _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000003))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n           StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n           (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x0000000c))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:14:25: 14:27\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x0000000c)) }\n           (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:14:32: 14:34\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n -         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n +         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x0000002a))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n           StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:38: 14:39\n           _0 = const ();                   // scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                            // ty::Const"}, {"sha": "3bdf9e753c044579d43442f75af46d7727e38eb4", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.diff.64bit", "status": "modified", "additions": 1, "deletions": 140, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -25,176 +25,37 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n -         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+         _2 = (const 4_i32, const false); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-                                           // ty::Const\n-                                           // + ty: i32\n--                                          // + val: Value(Scalar(0x00000002))\n-+                                          // + val: Value(Scalar(0x00000004))\n-                                           // mir::Constant\n--                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:14\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-+                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-                                           // ty::Const\n--                                          // + ty: i32\n--                                          // + val: Value(Scalar(0x00000002))\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n--                                          // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n -         assert(!move (_2.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         _2 = (const 4_i32, const false); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-                                           // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+                                          // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:12:13: 12:14\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n       }\n   \n       bb1: {\n -         _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +         _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000004))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n           StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n           StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n           _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:14: 13:15\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:17: 13:18\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:20: 13:21\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000003))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:23: 13:24\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000004))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:26: 13:27\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000005))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:29: 13:30\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n           StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n           _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x0000000000000003))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:32: 13:33\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n           _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x0000000000000006))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000006)) }\n -         _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n -         assert(move _7, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +         _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n +         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000006))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000006)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000003))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n       }\n   \n       bb2: {\n -         _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +         _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000003))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n           StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n           (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x0000000c))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:14:25: 14:27\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x0000000c)) }\n           (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:14:32: 14:34\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n -         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n +         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x0000002a))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n           StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:38: 14:39\n           _0 = const ();                   // scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                            // ty::Const"}, {"sha": "91d9c9aa0836cb0bb657a175d5f8fbd973407e3c", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals.after.mir.32bit", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.mir.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -18,28 +18,10 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n         _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000004))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n         StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n         _2 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n         _3 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x0000002a))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n         _0 = const ();                   // scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                          // ty::Const\n                                          // + ty: ()"}, {"sha": "91d9c9aa0836cb0bb657a175d5f8fbd973407e3c", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals.after.mir.64bit", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.mir.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -18,28 +18,10 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n         _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000004))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n         StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n         _2 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n         _3 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x0000002a))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n         _0 = const ();                   // scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                          // ty::Const\n                                          // + ty: ()"}, {"sha": "53d10f01eac7f33934335b2bf47f9e8bd772c455", "filename": "src/test/mir-opt/const_prop/read_immutable_static.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -25,12 +25,6 @@\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc0)) }\n -         _2 = (*_3);                      // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n +         _2 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-+                                          // ty::Const\n-+                                          // + ty: u8\n-+                                          // + val: Value(Scalar(0x02))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n-+                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n           StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n           StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n           _5 = const {alloc0: &u8};        // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n@@ -43,19 +37,7 @@\n -         _4 = (*_5);                      // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n -         _1 = Add(move _2, move _4);      // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n +         _4 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n-+                                          // ty::Const\n-+                                          // + ty: u8\n-+                                          // + val: Value(Scalar(0x02))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n-+                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n +         _1 = const 4_u8;                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n-+                                          // ty::Const\n-+                                          // + ty: u8\n-+                                          // + val: Value(Scalar(0x04))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/read_immutable_static.rs:7:13: 7:22\n-+                                          // + literal: Const { ty: u8, val: Value(Scalar(0x04)) }\n           StorageDead(_4);                 // scope 0 at $DIR/read_immutable_static.rs:7:21: 7:22\n           StorageDead(_2);                 // scope 0 at $DIR/read_immutable_static.rs:7:21: 7:22\n           StorageDead(_5);                 // scope 0 at $DIR/read_immutable_static.rs:7:22: 7:23"}, {"sha": "f8f9b5ce59c82645f46d3c8f45fe73fba4fc3525", "filename": "src/test/mir-opt/const_prop/ref_deref.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -21,12 +21,6 @@\n           _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n -         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n +         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000004))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/ref_deref.rs:5:5: 5:10\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n           StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n           _0 = const ();                   // scope 0 at $DIR/ref_deref.rs:4:11: 6:2"}, {"sha": "019bb63a020814817a655e9914afb8237e4e1b58", "filename": "src/test/mir-opt/const_prop/ref_deref.main.PromoteTemps.diff", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -13,16 +13,12 @@\n           StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n -         StorageLive(_3);                 // scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n -         _3 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n+-         _2 = &_3;                        // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n +         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n-                                           // ty::Const\n--                                          // + ty: i32\n--                                          // + val: Value(Scalar(0x00000004))\n++                                          // ty::Const\n +                                          // + ty: &i32\n +                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n-                                           // mir::Constant\n--                                          // + span: $DIR/ref_deref.rs:5:8: 5:9\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n--         _2 = &_3;                        // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n++                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n +                                          // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:5:6: 5:10"}, {"sha": "d7b3ff7d0c22b534e85af730d86543b606267ee1", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.PromoteTemps.diff", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -13,22 +13,12 @@\n           StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n -         StorageLive(_3);                 // scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n -         _3 = (const 4_i32, const 5_i32); // scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n+-         _2 = &(_3.1: i32);               // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n +         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n-                                           // ty::Const\n--                                          // + ty: i32\n--                                          // + val: Value(Scalar(0x00000004))\n++                                          // ty::Const\n +                                          // + ty: &(i32, i32)\n +                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n-                                           // mir::Constant\n--                                          // + span: $DIR/ref_deref_project.rs:5:9: 5:10\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n--                                          // ty::Const\n--                                          // + ty: i32\n--                                          // + val: Value(Scalar(0x00000005))\n--                                          // mir::Constant\n--                                          // + span: $DIR/ref_deref_project.rs:5:12: 5:13\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n--         _2 = &(_3.1: i32);               // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n++                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n +                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17"}, {"sha": "61e3606ef83290e8e6b9f55a6f2283e6ea16bbc0", "filename": "src/test/mir-opt/const_prop/repeat.main.ConstProp.diff.32bit", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -18,77 +18,20 @@\n           StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n           StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:6:18: 6:25\n           _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:6:18: 6:25\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/repeat.rs:6:19: 6:21\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n           StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:6:26: 6:27\n           _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:6:26: 6:27\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/repeat.rs:6:26: 6:27\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n           _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x00000008))\n-                                           // mir::Constant\n-                                           // + span: $DIR/repeat.rs:6:18: 6:28\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000008)) }\n -         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n -         assert(move _6, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n +         _6 = const true;                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/repeat.rs:6:18: 6:28\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n +         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/repeat.rs:6:18: 6:28\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000008))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/repeat.rs:6:18: 6:28\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000008)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/repeat.rs:6:18: 6:28\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n       }\n   \n       bb1: {\n -         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:6:18: 6:28\n -         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:6:18: 6:32\n +         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-                                           // ty::Const\n-                                           // + ty: u32\n--                                          // + val: Value(Scalar(0x00000000))\n-+                                          // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n--                                          // + span: $DIR/repeat.rs:6:31: 6:32\n--                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-+                                          // + span: $DIR/repeat.rs:6:18: 6:28\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n +         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:6:18: 6:32\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x0000002a))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/repeat.rs:6:18: 6:32\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n           StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:6:31: 6:32\n           StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33\n           StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33"}, {"sha": "61e3606ef83290e8e6b9f55a6f2283e6ea16bbc0", "filename": "src/test/mir-opt/const_prop/repeat.main.ConstProp.diff.64bit", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -18,77 +18,20 @@\n           StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n           StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:6:18: 6:25\n           _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:6:18: 6:25\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/repeat.rs:6:19: 6:21\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n           StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:6:26: 6:27\n           _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:6:26: 6:27\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x0000000000000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/repeat.rs:6:26: 6:27\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n           _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x0000000000000008))\n-                                           // mir::Constant\n-                                           // + span: $DIR/repeat.rs:6:18: 6:28\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000008)) }\n -         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n -         assert(move _6, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n +         _6 = const true;                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/repeat.rs:6:18: 6:28\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n +         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/repeat.rs:6:18: 6:28\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000008))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/repeat.rs:6:18: 6:28\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000008)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/repeat.rs:6:18: 6:28\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n       }\n   \n       bb1: {\n -         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:6:18: 6:28\n -         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:6:18: 6:32\n +         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-                                           // ty::Const\n-                                           // + ty: u32\n--                                          // + val: Value(Scalar(0x00000000))\n-+                                          // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n--                                          // + span: $DIR/repeat.rs:6:31: 6:32\n--                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-+                                          // + span: $DIR/repeat.rs:6:18: 6:28\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n +         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:6:18: 6:32\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x0000002a))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/repeat.rs:6:18: 6:32\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n           StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:6:31: 6:32\n           StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33\n           StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:6:32: 6:33"}, {"sha": "99893aa19cff354791f46bee022fb3aa54d29976", "filename": "src/test/mir-opt/const_prop/return_place.add.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -7,57 +7,14 @@\n   \n       bb0: {\n -         _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:6:5: 6:10\n-+         _1 = (const 4_u32, const false); // scope 0 at $DIR/return_place.rs:6:5: 6:10\n-                                           // ty::Const\n-                                           // + ty: u32\n--                                          // + val: Value(Scalar(0x00000002))\n-+                                          // + val: Value(Scalar(0x00000004))\n-                                           // mir::Constant\n--                                          // + span: $DIR/return_place.rs:6:5: 6:6\n--                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-+                                          // + span: $DIR/return_place.rs:6:5: 6:10\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000004)) }\n-                                           // ty::Const\n--                                          // + ty: u32\n--                                          // + val: Value(Scalar(0x00000002))\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n--                                          // + span: $DIR/return_place.rs:6:9: 6:10\n--                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n -         assert(!move (_1.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n-+                                          // + span: $DIR/return_place.rs:6:5: 6:10\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         _1 = (const 4_u32, const false); // scope 0 at $DIR/return_place.rs:6:5: 6:10\n +         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n-                                           // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/return_place.rs:6:5: 6:10\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+                                          // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/return_place.rs:6:5: 6:6\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/return_place.rs:6:9: 6:10\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n       }\n   \n       bb1: {\n -         _0 = move (_1.0: u32);           // scope 0 at $DIR/return_place.rs:6:5: 6:10\n +         _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:6:5: 6:10\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000004))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/return_place.rs:6:5: 6:10\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000004)) }\n           return;                          // scope 0 at $DIR/return_place.rs:7:2: 7:2\n       }\n   }"}, {"sha": "e6dd096e1c0e35fb3bfa6ab2b60bc8bb0e681bfb", "filename": "src/test/mir-opt/const_prop/return_place.add.PreCodegen.before.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -5,12 +5,6 @@ fn add() -> u32 {\n \n     bb0: {\n         _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:6:5: 6:10\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000004))\n-                                         // mir::Constant\n-                                         // + span: $DIR/return_place.rs:6:5: 6:10\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000004)) }\n         return;                          // scope 0 at $DIR/return_place.rs:7:2: 7:2\n     }\n }"}, {"sha": "569e2f8ec2efe5463bc34dcdb1a65fceca33ae38", "filename": "src/test/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -13,36 +13,18 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:3:9: 3:10\n           _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:3:13: 3:14\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/scalar_literal_propagation.rs:3:13: 3:14\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n           StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n           StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n -         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n -         _2 = const consume(move _3) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n +         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n-                                           // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000001))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/scalar_literal_propagation.rs:4:13: 4:14\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n +         _2 = const consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n-+                                          // ty::Const\n+                                           // ty::Const\n                                            // + ty: fn(u32) {consume}\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:12\n                                            // + literal: Const { ty: fn(u32) {consume}, val: Value(Scalar(<ZST>)) }\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000001))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:15\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb1: {"}, {"sha": "100e37d368186fcf920d798f9664a9e0c9e80d6e", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.diff.32bit", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -31,59 +31,17 @@\n           StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:5:18: 5:19\n           StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:5:31: 5:32\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n -         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000003))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n +         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n +         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000003))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000001))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb1: {\n -         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n           StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n           StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n           StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34"}, {"sha": "100e37d368186fcf920d798f9664a9e0c9e80d6e", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.diff.64bit", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -31,59 +31,17 @@\n           StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:5:18: 5:19\n           StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n-                                           // ty::Const\n-                                           // + ty: usize\n-                                           // + val: Value(Scalar(0x0000000000000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:5:31: 5:32\n-                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n -         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000003))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n +         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n +         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000003))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000001))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n       }\n   \n       bb1: {\n -         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n           StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n           StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34\n           StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34"}, {"sha": "5fcf830479e247578e740a9606c1199397507e39", "filename": "src/test/mir-opt/const_prop/switch_int.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -8,20 +8,8 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n           _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:7:11: 7:12\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n -         switchInt(_1) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n +         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000001))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/switch_int.rs:8:9: 8:10\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb1: {\n@@ -32,12 +20,6 @@\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:9:14: 9:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0xffffffff))\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:9:18: 9:20\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0xffffffff)) }\n       }\n   \n       bb2: {\n@@ -48,12 +30,6 @@\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:8:14: 8:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:8:18: 8:19\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n       }\n   \n       bb3: {"}, {"sha": "0337d0e061b08e74a8325478c141c8558840591a", "filename": "src/test/mir-opt/const_prop/switch_int.main.SimplifyBranches-after-const-prop.diff", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyBranches-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyBranches-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyBranches-after-const-prop.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -8,19 +8,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n           _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:7:11: 7:12\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n -         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n--                                          // ty::Const\n--                                          // + ty: i32\n--                                          // + val: Value(Scalar(0x00000001))\n--                                          // mir::Constant\n--                                          // + span: $DIR/switch_int.rs:8:9: 8:10\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n +         goto -> bb2;                     // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n       }\n   \n@@ -32,12 +20,6 @@\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:9:14: 9:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0xffffffff))\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:9:18: 9:20\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0xffffffff)) }\n       }\n   \n       bb2: {\n@@ -48,12 +30,6 @@\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:8:14: 8:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:8:18: 8:19\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n       }\n   \n       bb3: {"}, {"sha": "83cdd6b5836aec9293f0cd080a509ffc30a57fcf", "filename": "src/test/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -13,35 +13,11 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:3:9: 3:10\n           (_1.0: u32) = const 1_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/tuple_literal_propagation.rs:3:14: 3:15\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n           (_1.1: u32) = const 2_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/tuple_literal_propagation.rs:3:17: 3:18\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n           StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:5: 5:15\n           StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n -         _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n +         _3 = (const 1_u32, const 2_u32); // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000001))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/tuple_literal_propagation.rs:5:13: 5:14\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000002))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/tuple_literal_propagation.rs:5:13: 5:14\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n           _2 = const consume(move _3) -> bb1; // scope 1 at $DIR/tuple_literal_propagation.rs:5:5: 5:15\n                                            // ty::Const\n                                            // + ty: fn((u32, u32)) {consume}"}, {"sha": "666ab74e72f6e9145af3c1f08abb494ac1e7bc40", "filename": "src/test/mir-opt/const_prop_miscompile.bar.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -20,22 +20,10 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:12:9: 12:14\n           (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_miscompile.rs:12:18: 12:19\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:13:5: 15:6\n           StorageLive(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:14:10: 14:22\n           _3 = &raw mut (_1.0: i32);       // scope 2 at $DIR/const_prop_miscompile.rs:14:10: 14:22\n           (*_3) = const 5_i32;             // scope 2 at $DIR/const_prop_miscompile.rs:14:9: 14:26\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000005))\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_miscompile.rs:14:25: 14:26\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n           StorageDead(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:14:26: 14:27\n           _2 = const ();                   // scope 2 at $DIR/const_prop_miscompile.rs:13:5: 15:6\n                                            // ty::Const\n@@ -49,12 +37,6 @@\n           StorageLive(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:16:13: 16:20\n           _5 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:16:15: 16:18\n           _4 = Eq(move _5, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:16:13: 16:25\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000005))\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_miscompile.rs:16:24: 16:25\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n           StorageDead(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:16:24: 16:25\n           _0 = const ();                   // scope 0 at $DIR/const_prop_miscompile.rs:11:10: 17:2\n                                            // ty::Const"}, {"sha": "ef458c50741cdd46b998590e3c5ae42613e30b1c", "filename": "src/test/mir-opt/const_prop_miscompile.foo.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -17,32 +17,14 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:5:9: 5:14\n           (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_miscompile.rs:5:18: 5:19\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:6:6: 6:14\n           _2 = &mut (_1.0: i32);           // scope 1 at $DIR/const_prop_miscompile.rs:6:6: 6:14\n           (*_2) = const 5_i32;             // scope 1 at $DIR/const_prop_miscompile.rs:6:5: 6:18\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000005))\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_miscompile.rs:6:17: 6:18\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n           StorageDead(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:6:18: 6:19\n           StorageLive(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:7:9: 7:10\n           StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:7:13: 7:20\n           _4 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:7:15: 7:18\n           _3 = Eq(move _4, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:7:13: 7:25\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000005))\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_miscompile.rs:7:24: 7:25\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n           StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:7:24: 7:25\n           _0 = const ();                   // scope 0 at $DIR/const_prop_miscompile.rs:4:10: 8:2\n                                            // ty::Const"}, {"sha": "a4d60ae25d0c4078c5c68c88c66bd1f6d936872a", "filename": "src/test/mir-opt/copy_propagation_arg.arg_src.CopyPropagation.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.arg_src.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.arg_src.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.arg_src.CopyPropagation.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -13,12 +13,6 @@\n           StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n           _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:28:13: 28:14\n           _1 = const 123_i32;              // scope 1 at $DIR/copy_propagation_arg.rs:29:5: 29:12\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x0000007b))\n-                                           // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:29:9: 29:12\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000007b)) }\n           _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:30:5: 30:6\n           StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:31:1: 31:2\n           return;                          // scope 0 at $DIR/copy_propagation_arg.rs:31:2: 31:2"}, {"sha": "fccb5bb16c07e58c99f37ea98972751350441703", "filename": "src/test/mir-opt/copy_propagation_arg.bar.CopyPropagation.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.bar.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.bar.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.bar.CopyPropagation.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -24,12 +24,6 @@\n           StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:12: 16:13\n           StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:13: 16:14\n           _1 = const 5_u8;                 // scope 0 at $DIR/copy_propagation_arg.rs:17:5: 17:10\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x05))\n-                                           // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:17:9: 17:10\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x05)) }\n           _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:15:19: 18:2\n                                            // ty::Const\n                                            // + ty: ()"}, {"sha": "ebe76e8e270cdc4096ce4ebb28ca422bd145aa39", "filename": "src/test/mir-opt/deaggregator_test.bar.Deaggregator.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.bar.Deaggregator.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -19,12 +19,6 @@\n                                            // + span: $DIR/deaggregator_test.rs:9:20: 9:23\n                                            // + literal: Const { ty: f32, val: Value(Scalar(0x00000000)) }\n +         (_0.2: bool) = const false;      // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/deaggregator_test.rs:9:28: 9:33\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n           StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test.rs:9:34: 9:35\n           return;                          // scope 0 at $DIR/deaggregator_test.rs:10:2: 10:2\n       }"}, {"sha": "28364d4fbfb40addcf03a674cfa68050a2359eb3", "filename": "src/test/mir-opt/exponential_or.match_tuple.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -24,12 +24,6 @@ fn match_tuple(_1: (u32, bool, std::option::Option<i32>, u32)) -> u32 {\n \n     bb1: {\n         _0 = const 0_u32;                // scope 0 at $DIR/exponential-or.rs:9:14: 9:15\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/exponential-or.rs:9:14: 9:15\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n         goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:7:5: 10:6\n     }\n \n@@ -44,45 +38,21 @@ fn match_tuple(_1: (u32, bool, std::option::Option<i32>, u32)) -> u32 {\n \n     bb4: {\n         _5 = Le(const 6_u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000006))\n-                                         // mir::Constant\n-                                         // + span: $DIR/exponential-or.rs:8:62: 8:67\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000006)) }\n         switchInt(move _5) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n     }\n \n     bb5: {\n         _6 = Le((_1.3: u32), const 9_u32); // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000009))\n-                                         // mir::Constant\n-                                         // + span: $DIR/exponential-or.rs:8:62: 8:67\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000009)) }\n         switchInt(move _6) -> [false: bb6, otherwise: bb8]; // scope 0 at $DIR/exponential-or.rs:8:62: 8:67\n     }\n \n     bb6: {\n         _3 = Le(const 13_u32, (_1.3: u32)); // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x0000000d))\n-                                         // mir::Constant\n-                                         // + span: $DIR/exponential-or.rs:8:70: 8:77\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000000d)) }\n         switchInt(move _3) -> [false: bb1, otherwise: bb7]; // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n     }\n \n     bb7: {\n         _4 = Le((_1.3: u32), const 16_u32); // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000010))\n-                                         // mir::Constant\n-                                         // + span: $DIR/exponential-or.rs:8:70: 8:77\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000010)) }\n         switchInt(move _4) -> [false: bb1, otherwise: bb8]; // scope 0 at $DIR/exponential-or.rs:8:70: 8:77\n     }\n "}, {"sha": "4291e580bbfa668457ba461015ad2b94d86dc63e", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -116,12 +116,6 @@\n           _15 = move _16 as u32 (Misc);    // scope 3 at $DIR/funky_arms.rs:26:59: 26:75\n           StorageDead(_16);                // scope 3 at $DIR/funky_arms.rs:26:74: 26:75\n           _14 = Add(move _15, const 1_u32); // scope 3 at $DIR/funky_arms.rs:26:59: 26:79\n-                                           // ty::Const\n-                                           // + ty: u32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/funky_arms.rs:26:78: 26:79\n-                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n           StorageDead(_15);                // scope 3 at $DIR/funky_arms.rs:26:78: 26:79\n           StorageLive(_17);                // scope 3 at $DIR/funky_arms.rs:26:81: 26:86\n           _17 = _3;                        // scope 3 at $DIR/funky_arms.rs:26:81: 26:86"}, {"sha": "6d7e7b6a627465b3cf03797a25513220085da183", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{{closure}}.StateTransform.before.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -22,20 +22,8 @@ yields ()\n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n         (_3.0: i32) = const 5_i32;       // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000005))\n-                                         // mir::Constant\n-                                         // + span: $DIR/generator-storage-dead-unwind.rs:23:21: 23:22\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n         StorageLive(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n         (_4.0: i32) = const 6_i32;       // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000006))\n-                                         // mir::Constant\n-                                         // + span: $DIR/generator-storage-dead-unwind.rs:24:21: 24:22\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000006)) }\n         StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n         StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n         _5 = yield(move _6) -> [resume: bb2, drop: bb4]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14"}, {"sha": "a31e7aaf272717d0fe0787398e46dd75ef625aa2", "filename": "src/test/mir-opt/inline/inline_any_operand.bar.Inline.after.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -26,19 +26,7 @@ fn bar() -> bool {\n         StorageLive(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n         _2 = _1;                         // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n         _3 = const 1_i32;                // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/inline-any-operand.rs:12:7: 12:8\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         _4 = const -1_i32;               // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0xffffffff))\n-                                         // mir::Constant\n-                                         // + span: $DIR/inline-any-operand.rs:12:10: 12:12\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0xffffffff)) }\n         _0 = Eq(move _3, move _4);       // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:11\n         StorageDead(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:12: 12:13\n         StorageDead(_1);                 // scope 0 at $DIR/inline-any-operand.rs:13:1: 13:2"}, {"sha": "73ce79992202b67dcac5647c0735ffce3d77ab20", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.diff.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -40,12 +40,6 @@\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         ((*_4).1: usize) = const 0_usize; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000000))\n-+                                          // mir::Constant\n-+                                          // + span: $SRC_DIR/alloc/src/vec.rs:LL:COL\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n           _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n           _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2"}, {"sha": "27ecaefd87574ae0bcfb7cef1ad951aa623a6fb6", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.diff.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -40,12 +40,6 @@\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         ((*_4).1: usize) = const 0_usize; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000000))\n-+                                          // mir::Constant\n-+                                          // + span: $SRC_DIR/alloc/src/vec.rs:LL:COL\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n           _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n           _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2"}, {"sha": "fc0b40a84511db1a41dfdfe8dd2ebb2017d24da5", "filename": "src/test/mir-opt/inline/inline_specialization.main.Inline.diff", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -13,20 +13,16 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-specialization.rs:5:9: 5:10\n -         _1 = const <std::vec::Vec<()> as Foo>::bar() -> bb1; // scope 0 at $DIR/inline-specialization.rs:5:13: 5:38\n-+         _1 = const 123_u32;              // scope 2 at $DIR/inline-specialization.rs:14:31: 14:34\n-                                           // ty::Const\n+-                                          // ty::Const\n -                                          // + ty: fn() -> u32 {<std::vec::Vec<()> as Foo>::bar}\n -                                          // + val: Value(Scalar(<ZST>))\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x0000007b))\n-                                           // mir::Constant\n+-                                          // mir::Constant\n -                                          // + span: $DIR/inline-specialization.rs:5:13: 5:36\n -                                          // + literal: Const { ty: fn() -> u32 {<std::vec::Vec<()> as Foo>::bar}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n -     bb1: {\n-+                                          // + span: $DIR/inline-specialization.rs:14:31: 14:34\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000007b)) }\n++         _1 = const 123_u32;              // scope 2 at $DIR/inline-specialization.rs:14:31: 14:34\n           _0 = const ();                   // scope 0 at $DIR/inline-specialization.rs:4:11: 6:2\n                                            // ty::Const\n                                            // + ty: ()"}, {"sha": "f048757ad861e422d6a6f43a831f8565786f678e", "filename": "src/test/mir-opt/instrument_coverage.bar.InstrumentCoverage.diff", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Finstrument_coverage.bar.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Finstrument_coverage.bar.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.bar.InstrumentCoverage.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -15,47 +15,11 @@\n +                                          // + span: /the/src/instrument_coverage.rs:19:18: 19:18\n +                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u64, u32, &'static str, u32, u32, u32, u32) {std::intrinsics::count_code_region}, val: Value(Scalar(<ZST>)) }\n +                                          // ty::Const\n-+                                          // + ty: u64\n-+                                          // + val: Value(Scalar(0x8dabe565aaa2aefd))\n-+                                          // mir::Constant\n-+                                          // + span: /the/src/instrument_coverage.rs:19:18: 19:18\n-+                                          // + literal: Const { ty: u64, val: Value(Scalar(0x8dabe565aaa2aefd)) }\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000000))\n-+                                          // mir::Constant\n-+                                          // + span: /the/src/instrument_coverage.rs:19:18: 19:18\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-+                                          // ty::Const\n +                                          // + ty: &str\n +                                          // + val: Value(Slice { data: Allocation { bytes: [47, 116, 104, 101, 47, 115, 114, 99, 47, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 99, 111, 118, 101, 114, 97, 103, 101, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2147483647], len: Size { raw: 31 } }, size: Size { raw: 31 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 31 })\n +                                          // mir::Constant\n +                                          // + span: /the/src/instrument_coverage.rs:19:18: 19:18\n +                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [47, 116, 104, 101, 47, 115, 114, 99, 47, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 99, 111, 118, 101, 114, 97, 103, 101, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2147483647], len: Size { raw: 31 } }, size: Size { raw: 31 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 31 }) }\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000013))\n-+                                          // mir::Constant\n-+                                          // + span: /the/src/instrument_coverage.rs:19:18: 19:18\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000013)) }\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000012))\n-+                                          // mir::Constant\n-+                                          // + span: /the/src/instrument_coverage.rs:19:18: 19:18\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000012)) }\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000015))\n-+                                          // mir::Constant\n-+                                          // + span: /the/src/instrument_coverage.rs:19:18: 19:18\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000015)) }\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000002))\n-+                                          // mir::Constant\n-+                                          // + span: /the/src/instrument_coverage.rs:19:18: 19:18\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n +     }\n + \n +     bb1 (cleanup): {\n@@ -65,12 +29,6 @@\n +     bb2: {\n +         StorageDead(_1);                 // scope 0 at /the/src/instrument_coverage.rs:20:5: 20:9\n           _0 = const true;                 // scope 0 at /the/src/instrument_coverage.rs:20:5: 20:9\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: /the/src/instrument_coverage.rs:20:5: 20:9\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           return;                          // scope 0 at /the/src/instrument_coverage.rs:21:2: 21:2\n       }\n   }"}, {"sha": "931ebf5e1404e020412bea43b30247a9943e1e5b", "filename": "src/test/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -19,47 +19,11 @@\n +                                          // + span: /the/src/instrument_coverage.rs:10:11: 10:11\n +                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u64, u32, &'static str, u32, u32, u32, u32) {std::intrinsics::count_code_region}, val: Value(Scalar(<ZST>)) }\n +                                          // ty::Const\n-+                                          // + ty: u64\n-+                                          // + val: Value(Scalar(0xde1b3f75a72fc7f7))\n-+                                          // mir::Constant\n-+                                          // + span: /the/src/instrument_coverage.rs:10:11: 10:11\n-+                                          // + literal: Const { ty: u64, val: Value(Scalar(0xde1b3f75a72fc7f7)) }\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000000))\n-+                                          // mir::Constant\n-+                                          // + span: /the/src/instrument_coverage.rs:10:11: 10:11\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-+                                          // ty::Const\n +                                          // + ty: &str\n +                                          // + val: Value(Slice { data: Allocation { bytes: [47, 116, 104, 101, 47, 115, 114, 99, 47, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 99, 111, 118, 101, 114, 97, 103, 101, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2147483647], len: Size { raw: 31 } }, size: Size { raw: 31 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 31 })\n +                                          // mir::Constant\n +                                          // + span: /the/src/instrument_coverage.rs:10:11: 10:11\n +                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [47, 116, 104, 101, 47, 115, 114, 99, 47, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 99, 111, 118, 101, 114, 97, 103, 101, 46, 114, 115], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2147483647], len: Size { raw: 31 } }, size: Size { raw: 31 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 31 }) }\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x0000000a))\n-+                                          // mir::Constant\n-+                                          // + span: /the/src/instrument_coverage.rs:10:11: 10:11\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000000a)) }\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x0000000b))\n-+                                          // mir::Constant\n-+                                          // + span: /the/src/instrument_coverage.rs:10:11: 10:11\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000000b)) }\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000010))\n-+                                          // mir::Constant\n-+                                          // + span: /the/src/instrument_coverage.rs:10:11: 10:11\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000010)) }\n-+                                          // ty::Const\n-+                                          // + ty: u32\n-+                                          // + val: Value(Scalar(0x00000002))\n-+                                          // mir::Constant\n-+                                          // + span: /the/src/instrument_coverage.rs:10:11: 10:11\n-+                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n       }\n   \n       bb1: {"}, {"sha": "3dabc41f195203f3c71efedb6e8fc18f559966d5", "filename": "src/test/mir-opt/issue_38669.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -14,12 +14,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n         _1 = const false;                // scope 0 at $DIR/issue-38669.rs:5:28: 5:33\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-38669.rs:5:28: 5:33\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n         goto -> bb2;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n@@ -55,12 +49,6 @@ fn main() -> () {\n         StorageDead(_4);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         StorageDead(_3);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         _1 = const true;                 // scope 1 at $DIR/issue-38669.rs:10:9: 10:28\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x01))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-38669.rs:10:24: 10:28\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         _2 = const ();                   // scope 1 at $DIR/issue-38669.rs:6:10: 11:6\n                                          // ty::Const\n                                          // + ty: ()"}, {"sha": "70eaf8170216249aa48306eedb1158f6fc1b044d", "filename": "src/test/mir-opt/issue_41110.main.ElaborateDrops.after.mir", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -13,21 +13,9 @@ fn main() -> () {\n \n     bb0: {\n         _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:9: 8:10\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41110.rs:8:9: 8:10\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         StorageLive(_1);                 // scope 0 at $DIR/issue-41110.rs:8:9: 8:10\n         StorageLive(_2);                 // scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n         _5 = const true;                 // scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x01))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41110.rs:8:13: 8:14\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         _2 = S;                          // scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n         StorageLive(_3);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n         StorageLive(_4);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n@@ -48,12 +36,6 @@ fn main() -> () {\n     bb2: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n         _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41110.rs:8:13: 8:28\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         _1 = const S::other(move _2, move _3) -> [return: bb6, unwind: bb5]; // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n                                          // ty::Const\n                                          // + ty: fn(S, S) {S::other}\n@@ -78,12 +60,6 @@ fn main() -> () {\n     bb6: {\n         StorageDead(_3);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n         _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41110.rs:8:27: 8:28\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         StorageDead(_2);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n         _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:7:11: 9:2\n                                          // ty::Const\n@@ -102,12 +78,6 @@ fn main() -> () {\n \n     bb8 (cleanup): {\n         _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41110.rs:8:27: 8:28\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         goto -> bb7;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n "}, {"sha": "6b4f641b1f0bc68ce0022d976965b18d5a9aa88f", "filename": "src/test/mir-opt/issue_41110.test.ElaborateDrops.after.mir", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -17,20 +17,8 @@ fn test() -> () {\n \n     bb0: {\n         _6 = const false;                // scope 0 at $DIR/issue-41110.rs:15:9: 15:10\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41110.rs:15:9: 15:10\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         StorageLive(_1);                 // scope 0 at $DIR/issue-41110.rs:15:9: 15:10\n         _6 = const true;                 // scope 0 at $DIR/issue-41110.rs:15:13: 15:14\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x01))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41110.rs:15:13: 15:14\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         _1 = S;                          // scope 0 at $DIR/issue-41110.rs:15:13: 15:14\n         StorageLive(_2);                 // scope 1 at $DIR/issue-41110.rs:16:9: 16:14\n         _2 = S;                          // scope 1 at $DIR/issue-41110.rs:16:17: 16:18\n@@ -55,12 +43,6 @@ fn test() -> () {\n         StorageDead(_3);                 // scope 2 at $DIR/issue-41110.rs:17:12: 17:13\n         StorageLive(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n         _6 = const false;                // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41110.rs:18:9: 18:10\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         _5 = move _1;                    // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n         goto -> bb12;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n@@ -104,12 +86,6 @@ fn test() -> () {\n \n     bb10: {\n         _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41110.rs:19:1: 19:2\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n         return;                          // scope 0 at $DIR/issue-41110.rs:19:2: 19:2\n     }\n@@ -130,12 +106,6 @@ fn test() -> () {\n \n     bb14 (cleanup): {\n         _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41110.rs:19:1: 19:2\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         goto -> bb13;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n "}, {"sha": "14ece035f34af6445984e9e6966ee3e58639fd99", "filename": "src/test/mir-opt/issue_41697.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir.32bit", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_41697.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_41697.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -6,31 +6,7 @@\n \n     bb0: {\n         _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41697.rs:18:19: 18:20\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41697.rs:18:21: 18:22\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n         assert(!move (_1.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 1_usize, const 1_usize) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41697.rs:18:19: 18:20\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41697.rs:18:21: 18:22\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n     }\n \n     bb1 (cleanup): {"}, {"sha": "14ece035f34af6445984e9e6966ee3e58639fd99", "filename": "src/test/mir-opt/issue_41697.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir.64bit", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_41697.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_41697.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -6,31 +6,7 @@\n \n     bb0: {\n         _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41697.rs:18:19: 18:20\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41697.rs:18:21: 18:22\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n         assert(!move (_1.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 1_usize, const 1_usize) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41697.rs:18:19: 18:20\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41697.rs:18:21: 18:22\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n     }\n \n     bb1 (cleanup): {"}, {"sha": "cb8057eb75b52544998130a1b83914d0d5f3f67f", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -22,26 +22,8 @@ fn main() -> () {\n \n     bb0: {\n         _9 = const false;                // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:7:9: 7:10\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:7:9: 7:10\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         _8 = const false;                // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:7:9: 7:10\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         StorageLive(_1);                 // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n         _2 = const cond() -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n@@ -113,12 +95,6 @@ fn main() -> () {\n     bb10: {\n         StorageLive(_6);                 // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _9 = const false;                // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:10:21: 10:23\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         _6 = move ((_1 as F).0: K);      // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _0 = const ();                   // scope 2 at $DIR/issue-41888.rs:10:29: 13:10\n                                          // ty::Const\n@@ -137,102 +113,36 @@ fn main() -> () {\n \n     bb12: {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:15:1: 15:2\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         _8 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:15:1: 15:2\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         _9 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:15:1: 15:2\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         StorageDead(_1);                 // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         StorageDead(_2);                 // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         return;                          // scope 0 at $DIR/issue-41888.rs:15:2: 15:2\n     }\n \n     bb13 (cleanup): {\n         _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x01))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:9:9: 9:10\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x01))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:9:9: 9:10\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x01))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:9:9: 9:10\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         goto -> bb7;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb14: {\n         _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x01))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:9:9: 9:10\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x01))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:9:9: 9:10\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x01))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:9:9: 9:10\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         goto -> bb6;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb15: {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:15:1: 15:2\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb16 (cleanup): {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x00))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-41888.rs:15:1: 15:2\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         goto -> bb1;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n "}, {"sha": "4b6cdbf264497bfb432ab0c72ff2c76f92cf8bfd", "filename": "src/test/mir-opt/issue_49232.main.mir_map.0.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -28,12 +28,6 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n         StorageLive(_3);                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         _3 = const true;                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x01))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-49232.rs:8:19: 8:23\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         FakeRead(ForMatchedPlace, _3);   // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         switchInt(_3) -> [false: bb5, otherwise: bb6]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n     }\n@@ -59,12 +53,6 @@ fn main() -> () {\n \n     bb7: {\n         _2 = const 4_i32;                // scope 0 at $DIR/issue-49232.rs:9:26: 9:27\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000004))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-49232.rs:9:26: 9:27\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n         goto -> bb12;                    // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n     }\n "}, {"sha": "972a36a30a127e7266cf414df758dbbadeb149b5", "filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.mir.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.mir.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -10,12 +10,6 @@ fn foo(_1: [(Never, u32); 1]) -> u32 {\n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n         _2 = const 0_usize;              // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-72181.rs:16:43: 16:44\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n         _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n         _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n         assert(move _4, \"index out of bounds: the len is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45"}, {"sha": "972a36a30a127e7266cf414df758dbbadeb149b5", "filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.mir.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.mir.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -10,12 +10,6 @@ fn foo(_1: [(Never, u32); 1]) -> u32 {\n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n         _2 = const 0_usize;              // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-72181.rs:16:43: 16:44\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n         _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n         _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n         assert(move _4, \"index out of bounds: the len is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45"}, {"sha": "71a70d2d211376f72b5c096e55c47439788da8d0", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.mir.32bit", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -40,33 +40,15 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n         _3 = Foo { a: const 42_u64 };    // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n-                                         // ty::Const\n-                                         // + ty: u64\n-                                         // + val: Value(Scalar(0x000000000000002a))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-72181.rs:26:23: 26:25\n-                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000002a)) }\n         StorageLive(_4);                 // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n         _4 = Foo { a: const 10_u64 };    // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n-                                         // ty::Const\n-                                         // + ty: u64\n-                                         // + val: Value(Scalar(0x000000000000000a))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-72181.rs:26:38: 26:40\n-                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000000a)) }\n         _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:26:13: 26:43\n         StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n         StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n         FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:27:13: 27:30\n         StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n         _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-72181.rs:27:24: 27:25\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n         _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n         _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26"}, {"sha": "71a70d2d211376f72b5c096e55c47439788da8d0", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.mir.64bit", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -40,33 +40,15 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n         _3 = Foo { a: const 42_u64 };    // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n-                                         // ty::Const\n-                                         // + ty: u64\n-                                         // + val: Value(Scalar(0x000000000000002a))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-72181.rs:26:23: 26:25\n-                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000002a)) }\n         StorageLive(_4);                 // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n         _4 = Foo { a: const 10_u64 };    // scope 1 at $DIR/issue-72181.rs:26:29: 26:42\n-                                         // ty::Const\n-                                         // + ty: u64\n-                                         // + val: Value(Scalar(0x000000000000000a))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-72181.rs:26:38: 26:40\n-                                         // + literal: Const { ty: u64, val: Value(Scalar(0x000000000000000a)) }\n         _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:26:13: 26:43\n         StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n         StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n         FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:27:13: 27:30\n         StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n         _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-72181.rs:27:24: 27:25\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n         _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n         _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26"}, {"sha": "f7db1626016c4103c8d0ec149ad74a057079b08c", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.diff.32bit", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -72,12 +72,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           ((_1 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-73223.rs:2:28: 2:29\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           discriminant(_1) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           _2 = ((_1 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n@@ -107,12 +101,6 @@\n           StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _11 = (*_7);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _10 = Eq(move _11, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _9 = Not(move _10);              // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "f7db1626016c4103c8d0ec149ad74a057079b08c", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.diff.64bit", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -72,12 +72,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           ((_1 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-73223.rs:2:28: 2:29\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           discriminant(_1) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           _2 = ((_1 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n@@ -107,12 +101,6 @@\n           StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _11 = (*_7);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _10 = Eq(move _11, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _9 = Not(move _10);              // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "957d33e2461f3a2c6ba5a7897a1efa89cac84c3a", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff.32bit", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -97,20 +97,8 @@\n           StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n           StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-73223.rs:2:28: 2:29\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n-                                           // ty::Const\n-                                           // + ty: isize\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-73223.rs:3:9: 3:16\n-                                           // + literal: Const { ty: isize, val: Value(Scalar(0x00000001)) }\n           goto -> bb2;                     // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n       }\n   \n@@ -166,19 +154,7 @@\n           _17 = (*_13);                    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _18 = const 1_i32;               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           _16 = Eq(move _17, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _15 = Not(move _16);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "957d33e2461f3a2c6ba5a7897a1efa89cac84c3a", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff.64bit", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -97,20 +97,8 @@\n           StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n           StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-73223.rs:2:28: 2:29\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n-                                           // ty::Const\n-                                           // + ty: isize\n-                                           // + val: Value(Scalar(0x0000000000000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue-73223.rs:3:9: 3:16\n-                                           // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }\n           goto -> bb2;                     // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n       }\n   \n@@ -166,19 +154,7 @@\n           _17 = (*_13);                    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _18 = const 1_i32;               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           _16 = Eq(move _17, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _15 = Not(move _16);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "77bd8846812721075fba96396623e5993315d631", "filename": "src/test/mir-opt/loop_test.main.SimplifyCfg-qualify-consts.after.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-qualify-consts.after.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -16,12 +16,6 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n         StorageLive(_2);                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n         _2 = const true;                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x01))\n-                                         // mir::Constant\n-                                         // + span: $DIR/loop_test.rs:10:8: 10:12\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n         switchInt(_2) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n     }\n@@ -68,12 +62,6 @@ fn main() -> () {\n     bb6: {\n         StorageLive(_6);                 // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         _6 = const 1_i32;                // scope 0 at $DIR/loop_test.rs:14:17: 14:18\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/loop_test.rs:14:17: 14:18\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         FakeRead(ForLet, _6);            // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         StorageDead(_6);                 // scope 0 at $DIR/loop_test.rs:16:5: 16:6\n         goto -> bb5;                     // scope 0 at $DIR/loop_test.rs:15:9: 15:17"}, {"sha": "7a7d86f98ac2677cc4dfb7d9ad12682f62372d8a", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -74,12 +74,6 @@\n -     bb8: {\n +     bb5: {\n           _0 = const 1_i32;                // scope 1 at $DIR/match-arm-scopes.rs:15:77: 15:78\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/match-arm-scopes.rs:15:77: 15:78\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n -         drop(_7) -> [return: bb24, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n +         drop(_7) -> [return: bb19, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n       }\n@@ -115,12 +109,6 @@\n -     bb12: {\n +     bb8: {\n           _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000003))\n-                                           // mir::Constant\n-                                           // + span: $DIR/match-arm-scopes.rs:15:59: 15:60\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n           StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n           StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n@@ -201,12 +189,6 @@\n -     bb21: {\n +     bb16: {\n           _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000003))\n-                                           // mir::Constant\n-                                           // + span: $DIR/match-arm-scopes.rs:15:59: 15:60\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n           StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n           StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n@@ -252,12 +234,6 @@\n -     bb25: {\n +     bb20: {\n           _0 = const 2_i32;                // scope 2 at $DIR/match-arm-scopes.rs:16:41: 16:42\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000002))\n-                                           // mir::Constant\n-                                           // + span: $DIR/match-arm-scopes.rs:16:41: 16:42\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n -         drop(_16) -> [return: bb27, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n +         drop(_16) -> [return: bb22, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n       }"}, {"sha": "dbf1f1ead2cdba0445a62e98bfaa54b169604194", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -27,12 +27,6 @@ fn full_tested_match() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         _2 = std::option::Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x0000002a))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:15:24: 15:26\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n         switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n@@ -44,18 +38,6 @@ fn full_tested_match() -> () {\n \n     bb2: {\n         _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:18:18: 18:19\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:18:21: 18:22\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n@@ -105,12 +87,6 @@ fn full_tested_match() -> () {\n         StorageLive(_8);                 // scope 2 at $DIR/match_false_edges.rs:16:35: 16:36\n         _8 = _5;                         // scope 2 at $DIR/match_false_edges.rs:16:35: 16:36\n         _1 = (const 1_i32, move _8);     // scope 2 at $DIR/match_false_edges.rs:16:31: 16:37\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:16:32: 16:33\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:16:36: 16:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n@@ -129,12 +105,6 @@ fn full_tested_match() -> () {\n         StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n         _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n         _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:17:20: 17:26\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:17:21: 17:22\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:17:25: 17:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:17:25: 17:26\n         goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6"}, {"sha": "c2805968029c8fc024f7d41d70e0af33da5c2270", "filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -26,12 +26,6 @@ fn full_tested_match2() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         _2 = std::option::Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x0000002a))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:26:24: 26:26\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n         switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n@@ -55,12 +49,6 @@ fn full_tested_match2() -> () {\n         StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n         _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n         _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:29:20: 29:26\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:29:21: 29:22\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:29:25: 29:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:29:25: 29:26\n         goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n@@ -97,12 +85,6 @@ fn full_tested_match2() -> () {\n         StorageLive(_8);                 // scope 2 at $DIR/match_false_edges.rs:27:35: 27:36\n         _8 = _5;                         // scope 2 at $DIR/match_false_edges.rs:27:35: 27:36\n         _1 = (const 1_i32, move _8);     // scope 2 at $DIR/match_false_edges.rs:27:31: 27:37\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:27:32: 27:33\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:27:36: 27:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n@@ -117,18 +99,6 @@ fn full_tested_match2() -> () {\n \n     bb10: {\n         _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:28:17: 28:23\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:28:18: 28:19\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:28:21: 28:22\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n "}, {"sha": "66cac95b7e87f81258c38acce5fd69e037377e1a", "filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -37,12 +37,6 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         _2 = std::option::Option::<i32>::Some(const 1_i32); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:35:24: 35:25\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n         switchInt(move _4) -> [1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n@@ -64,12 +58,6 @@ fn main() -> () {\n         StorageLive(_14);                // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n         _14 = _2;                        // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n         _1 = const 4_i32;                // scope 5 at $DIR/match_false_edges.rs:39:15: 39:16\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000004))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:39:15: 39:16\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n         StorageDead(_14);                // scope 0 at $DIR/match_false_edges.rs:39:15: 39:16\n         goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n@@ -103,12 +91,6 @@ fn main() -> () {\n         StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n         _6 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n         _1 = const 1_i32;                // scope 2 at $DIR/match_false_edges.rs:36:32: 36:33\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:36:32: 36:33\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n         goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n@@ -124,12 +106,6 @@ fn main() -> () {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n         _9 = _2;                         // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n         _1 = const 2_i32;                // scope 3 at $DIR/match_false_edges.rs:37:15: 37:16\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:37:15: 37:16\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:15: 37:16\n         goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n@@ -162,12 +138,6 @@ fn main() -> () {\n         StorageLive(_10);                // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n         _10 = ((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n         _1 = const 3_i32;                // scope 4 at $DIR/match_false_edges.rs:38:33: 38:34\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:38:33: 38:34\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         StorageDead(_10);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n         goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6"}, {"sha": "c72e6542470cf0436a8ca08c3c3d4d26ac1bf6ce", "filename": "src/test/mir-opt/match_test.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -21,42 +21,18 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/match_test.rs:7:9: 7:10\n         _1 = const 3_i32;                // scope 0 at $DIR/match_test.rs:7:13: 7:14\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_test.rs:7:13: 7:14\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/match_test.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 1 at $DIR/match_test.rs:8:9: 8:10\n         _2 = const true;                 // scope 1 at $DIR/match_test.rs:8:13: 8:17\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x01))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_test.rs:8:13: 8:17\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         FakeRead(ForLet, _2);            // scope 1 at $DIR/match_test.rs:8:9: 8:10\n         StorageLive(_3);                 // scope 2 at $DIR/match_test.rs:12:5: 17:6\n         FakeRead(ForMatchedPlace, _1);   // scope 2 at $DIR/match_test.rs:12:11: 12:12\n         _6 = Le(const 0_i32, _1);        // scope 2 at $DIR/match_test.rs:13:9: 13:14\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_test.rs:13:9: 13:14\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n         switchInt(move _6) -> [false: bb4, otherwise: bb1]; // scope 2 at $DIR/match_test.rs:13:9: 13:14\n     }\n \n     bb1: {\n         _7 = Lt(_1, const 10_i32);       // scope 2 at $DIR/match_test.rs:13:9: 13:14\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x0000000a))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_test.rs:13:9: 13:14\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n         switchInt(move _7) -> [false: bb4, otherwise: bb2]; // scope 2 at $DIR/match_test.rs:13:9: 13:14\n     }\n \n@@ -66,34 +42,16 @@ fn main() -> () {\n \n     bb3: {\n         _3 = const 3_i32;                // scope 2 at $DIR/match_test.rs:16:14: 16:15\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_test.rs:16:14: 16:15\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         goto -> bb14;                    // scope 2 at $DIR/match_test.rs:12:5: 17:6\n     }\n \n     bb4: {\n         _4 = Le(const 10_i32, _1);       // scope 2 at $DIR/match_test.rs:14:9: 14:16\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x0000000a))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_test.rs:14:9: 14:16\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n         switchInt(move _4) -> [false: bb7, otherwise: bb5]; // scope 2 at $DIR/match_test.rs:14:9: 14:16\n     }\n \n     bb5: {\n         _5 = Le(_1, const 20_i32);       // scope 2 at $DIR/match_test.rs:14:9: 14:16\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000014))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_test.rs:14:9: 14:16\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000014)) }\n         switchInt(move _5) -> [false: bb7, otherwise: bb6]; // scope 2 at $DIR/match_test.rs:14:9: 14:16\n     }\n \n@@ -120,12 +78,6 @@ fn main() -> () {\n         StorageDead(_9);                 // scope 2 at $DIR/match_test.rs:13:23: 13:24\n         FakeRead(ForMatchGuard, _8);     // scope 2 at $DIR/match_test.rs:13:18: 13:19\n         _3 = const 0_i32;                // scope 2 at $DIR/match_test.rs:13:23: 13:24\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_test.rs:13:23: 13:24\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n         goto -> bb14;                    // scope 2 at $DIR/match_test.rs:12:5: 17:6\n     }\n \n@@ -136,23 +88,11 @@ fn main() -> () {\n \n     bb12: {\n         _3 = const 1_i32;                // scope 2 at $DIR/match_test.rs:14:20: 14:21\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_test.rs:14:20: 14:21\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         goto -> bb14;                    // scope 2 at $DIR/match_test.rs:12:5: 17:6\n     }\n \n     bb13: {\n         _3 = const 2_i32;                // scope 2 at $DIR/match_test.rs:15:15: 15:16\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_test.rs:15:15: 15:16\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         goto -> bb14;                    // scope 2 at $DIR/match_test.rs:12:5: 17:6\n     }\n "}, {"sha": "3f01719e01bfc9867264ced9ce1408b69bb27302", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.diff.32bit", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -34,97 +34,25 @@\n           StorageLive(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:17:5: 32:6\n -         switchInt(_1) -> [7_i32: bb2, otherwise: bb1]; // scope 4 at $DIR/matches_reduce_branches.rs:18:9: 18:10\n +         _2 = Ne(_1, const 7_i32);        // scope 4 at $DIR/matches_reduce_branches.rs:19:13: 19:22\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000007))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000007)) }\n +         _3 = Eq(_1, const 7_i32);        // scope 4 at $DIR/matches_reduce_branches.rs:20:13: 20:21\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000007))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000007)) }\n +         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:22\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/matches_reduce_branches.rs:21:17: 21:22\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n +         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/matches_reduce_branches.rs:22:17: 22:21\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n +         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:18:9: 18:10\n       }\n   \n       bb1: {\n           _2 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:26:13: 26:21\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:26:17: 26:21\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           _3 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:27:13: 27:22\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:27:17: 27:22\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n           _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:28:13: 28:22\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:28:17: 28:22\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n           _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:29:13: 29:21\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:29:17: 29:21\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:17:5: 32:6\n       }\n   \n       bb2: {\n           _2 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:19:13: 19:22\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:19:17: 19:22\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n           _3 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:20:13: 20:21\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:20:17: 20:21\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:22\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:21:17: 21:22\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n           _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:22:17: 22:21\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:17:5: 32:6\n       }\n   "}, {"sha": "3f01719e01bfc9867264ced9ce1408b69bb27302", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.diff.64bit", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -34,97 +34,25 @@\n           StorageLive(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:17:5: 32:6\n -         switchInt(_1) -> [7_i32: bb2, otherwise: bb1]; // scope 4 at $DIR/matches_reduce_branches.rs:18:9: 18:10\n +         _2 = Ne(_1, const 7_i32);        // scope 4 at $DIR/matches_reduce_branches.rs:19:13: 19:22\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000007))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000007)) }\n +         _3 = Eq(_1, const 7_i32);        // scope 4 at $DIR/matches_reduce_branches.rs:20:13: 20:21\n-+                                          // ty::Const\n-+                                          // + ty: i32\n-+                                          // + val: Value(Scalar(0x00000007))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n-+                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000007)) }\n +         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:22\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/matches_reduce_branches.rs:21:17: 21:22\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n +         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/matches_reduce_branches.rs:22:17: 22:21\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n +         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:18:9: 18:10\n       }\n   \n       bb1: {\n           _2 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:26:13: 26:21\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:26:17: 26:21\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           _3 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:27:13: 27:22\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:27:17: 27:22\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n           _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:28:13: 28:22\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:28:17: 28:22\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n           _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:29:13: 29:21\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:29:17: 29:21\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:17:5: 32:6\n       }\n   \n       bb2: {\n           _2 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:19:13: 19:22\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:19:17: 19:22\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n           _3 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:20:13: 20:21\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:20:17: 20:21\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:22\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:21:17: 21:22\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n           _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_reduce_branches.rs:22:17: 22:21\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:17:5: 32:6\n       }\n   "}, {"sha": "cff899bcb56714a4fac42d03f53ba8a6ba955da9", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff.32bit", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -12,34 +12,16 @@\n           _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:6:22: 6:26\n -         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:6:22: 6:26\n +         _2 = Eq(_3, const 0_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+                                          // ty::Const\n-+                                          // + ty: isize\n-+                                          // + val: Value(Scalar(0x00000000))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n-+                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000000)) }\n +         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:6:22: 6:26\n       }\n   \n       bb1: {\n           _2 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n           goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb2: {\n           _2 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   "}, {"sha": "cff899bcb56714a4fac42d03f53ba8a6ba955da9", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.diff.64bit", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -12,34 +12,16 @@\n           _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:6:22: 6:26\n -         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:6:22: 6:26\n +         _2 = Eq(_3, const 0_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+                                          // ty::Const\n-+                                          // + ty: isize\n-+                                          // + val: Value(Scalar(0x0000000000000000))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1\n-+                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000000)) }\n +         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:6:22: 6:26\n       }\n   \n       bb1: {\n           _2 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n           goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb2: {\n           _2 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   "}, {"sha": "9fde4888809d165972579a47539fb615341c9a95", "filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.diff.32bit", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -13,23 +13,11 @@\n   \n       bb1: {\n           _0 = const 1_u8;                 // scope 0 at $DIR/matches_u8.rs:14:17: 14:18\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_u8.rs:14:17: 14:18\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }\n           goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:12:5: 15:6\n       }\n   \n       bb2: {\n           _0 = const 0_u8;                 // scope 0 at $DIR/matches_u8.rs:13:17: 13:18\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_u8.rs:13:17: 13:18\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n           goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:12:5: 15:6\n       }\n   "}, {"sha": "9fde4888809d165972579a47539fb615341c9a95", "filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.diff.64bit", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -13,23 +13,11 @@\n   \n       bb1: {\n           _0 = const 1_u8;                 // scope 0 at $DIR/matches_u8.rs:14:17: 14:18\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_u8.rs:14:17: 14:18\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }\n           goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:12:5: 15:6\n       }\n   \n       bb2: {\n           _0 = const 0_u8;                 // scope 0 at $DIR/matches_u8.rs:13:17: 13:18\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_u8.rs:13:17: 13:18\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n           goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:12:5: 15:6\n       }\n   "}, {"sha": "2dd0a3edb479a9c9db3c774a25391cdbb73e72c3", "filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.32bit", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -13,23 +13,11 @@\n   \n       bb1: {\n           _0 = const 1_i8;                 // scope 0 at $DIR/matches_u8.rs:22:17: 22:18\n-                                           // ty::Const\n-                                           // + ty: i8\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_u8.rs:22:17: 22:18\n-                                           // + literal: Const { ty: i8, val: Value(Scalar(0x01)) }\n           goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:20:5: 23:6\n       }\n   \n       bb2: {\n           _0 = const 0_i8;                 // scope 0 at $DIR/matches_u8.rs:21:17: 21:18\n-                                           // ty::Const\n-                                           // + ty: i8\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_u8.rs:21:17: 21:18\n-                                           // + literal: Const { ty: i8, val: Value(Scalar(0x00)) }\n           goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:20:5: 23:6\n       }\n   "}, {"sha": "2dd0a3edb479a9c9db3c774a25391cdbb73e72c3", "filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.64bit", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -13,23 +13,11 @@\n   \n       bb1: {\n           _0 = const 1_i8;                 // scope 0 at $DIR/matches_u8.rs:22:17: 22:18\n-                                           // ty::Const\n-                                           // + ty: i8\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_u8.rs:22:17: 22:18\n-                                           // + literal: Const { ty: i8, val: Value(Scalar(0x01)) }\n           goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:20:5: 23:6\n       }\n   \n       bb2: {\n           _0 = const 0_i8;                 // scope 0 at $DIR/matches_u8.rs:21:17: 21:18\n-                                           // ty::Const\n-                                           // + ty: i8\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/matches_u8.rs:21:17: 21:18\n-                                           // + literal: Const { ty: i8, val: Value(Scalar(0x00)) }\n           goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:20:5: 23:6\n       }\n   "}, {"sha": "bfc85e98786b86f0e49d20c9a81dc61e87d25698", "filename": "src/test/mir-opt/nll/named_lifetimes_basic.use_x.nll.0.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -43,12 +43,6 @@ fn use_x(_1: &'_#6r mut i32, _2: &'_#7r u32, _3: &'_#8r u32, _4: &'_#9r u32) ->\n \n     bb0: {\n         _0 = const Const(Value(Scalar(0x01)): bool); // bb0[0]: scope 0 at $DIR/named-lifetimes-basic.rs:12:88: 12:92\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x01))\n-                                         // mir::Constant\n-                                         // + span: $DIR/named-lifetimes-basic.rs:12:88: 12:92\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         return;                          // bb0[1]: scope 0 at $DIR/named-lifetimes-basic.rs:12:94: 12:94\n     }\n }"}, {"sha": "3a8426a41a34f2991f160d892ce25886f561493f", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.mir.32bit", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -46,34 +46,10 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         _1 = [const Const(Value(Scalar(0x00000001)): usize), const Const(Value(Scalar(0x00000002)): usize), const Const(Value(Scalar(0x00000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:17:17: 17:26\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:17:18: 17:19\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:17:21: 17:22\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:17:24: 17:25\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n         FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _3 = const Const(Value(Scalar(0x00000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:18:16: 18:17\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n@@ -91,12 +67,6 @@ fn main() -> () {\n         FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x01))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:20:8: 20:12\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n@@ -114,12 +84,6 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000016))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:23:15: 23:17\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000016)) }\n     }\n \n     bb5: {"}, {"sha": "5220ab4cae8f1d8a0e75f31608497e241e53a98d", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.mir.64bit", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -46,34 +46,10 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         _1 = [const Const(Value(Scalar(0x0000000000000001)): usize), const Const(Value(Scalar(0x0000000000000002)): usize), const Const(Value(Scalar(0x0000000000000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:17:17: 17:26\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:17:18: 17:19\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:17:21: 17:22\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:17:24: 17:25\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n         FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:18:16: 18:17\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n@@ -91,12 +67,6 @@ fn main() -> () {\n         FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-                                         // ty::Const\n-                                         // + ty: bool\n-                                         // + val: Value(Scalar(0x01))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:20:8: 20:12\n-                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n@@ -114,12 +84,6 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000016))\n-                                         // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:23:15: 23:17\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000016)) }\n     }\n \n     bb5: {"}, {"sha": "924e87ea8c0add79d6e1f8b22c0857405fa43857", "filename": "src/test/mir-opt/nrvo_simple.nrvo.RenameReturnPlace.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnrvo_simple.nrvo.RenameReturnPlace.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -19,12 +19,6 @@\n -         StorageLive(_2);                 // scope 0 at $DIR/nrvo-simple.rs:3:9: 3:16\n -         _2 = [const 0_u8; 1024];         // scope 0 at $DIR/nrvo-simple.rs:3:19: 3:28\n +         _0 = [const 0_u8; 1024];         // scope 0 at $DIR/nrvo-simple.rs:3:19: 3:28\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/nrvo-simple.rs:3:20: 3:21\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n           StorageLive(_3);                 // scope 1 at $DIR/nrvo-simple.rs:4:5: 4:19\n           StorageLive(_5);                 // scope 1 at $DIR/nrvo-simple.rs:4:10: 4:18\n           StorageLive(_6);                 // scope 1 at $DIR/nrvo-simple.rs:4:10: 4:18"}, {"sha": "a0214e5b9c501060104828aa1557287c9cf0e25d", "filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.32bit", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -17,25 +17,13 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n         StorageLive(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n         _3 = Droppy(const 0_usize);      // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/packed-struct-drop-aligned.rs:6:39: 6:40\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n         _2 = Aligned(move _3);           // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n         StorageDead(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:41: 6:42\n         _1 = Packed(move _2);            // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:17: 6:43\n         StorageDead(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:42: 6:43\n         StorageLive(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n         StorageLive(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n         _5 = Droppy(const 0_usize);      // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/packed-struct-drop-aligned.rs:7:26: 7:27\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n         _4 = Aligned(move _5);           // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n         StorageDead(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n         StorageLive(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8"}, {"sha": "a0214e5b9c501060104828aa1557287c9cf0e25d", "filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.64bit", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -17,25 +17,13 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n         StorageLive(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n         _3 = Droppy(const 0_usize);      // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/packed-struct-drop-aligned.rs:6:39: 6:40\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n         _2 = Aligned(move _3);           // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n         StorageDead(_3);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:41: 6:42\n         _1 = Packed(move _2);            // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:17: 6:43\n         StorageDead(_2);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:6:42: 6:43\n         StorageLive(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n         StorageLive(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n         _5 = Droppy(const 0_usize);      // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/packed-struct-drop-aligned.rs:7:26: 7:27\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n         _4 = Aligned(move _5);           // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n         StorageDead(_5);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n         StorageLive(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8"}, {"sha": "2b7e4bbffe9e0478799266c4e1b295730e7e17f2", "filename": "src/test/mir-opt/remove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -21,12 +21,6 @@\n   \n       bb1: {\n           _0 = const 1_i32;                // scope 0 at $DIR/remove_fake_borrows.rs:9:14: 9:15\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/remove_fake_borrows.rs:9:14: 9:15\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           goto -> bb7;                     // scope 0 at $DIR/remove_fake_borrows.rs:7:5: 10:6\n       }\n   \n@@ -63,12 +57,6 @@\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n           _0 = const 0_i32;                // scope 0 at $DIR/remove_fake_borrows.rs:8:25: 8:26\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/remove_fake_borrows.rs:8:25: 8:26\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           goto -> bb7;                     // scope 0 at $DIR/remove_fake_borrows.rs:7:5: 10:6\n       }\n   "}, {"sha": "5521ead29dbe82d631633f2d6b81931c50f0f08b", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -57,23 +57,11 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/retag.rs:30:9: 30:14\n         _1 = const 0_i32;                // scope 0 at $DIR/retag.rs:30:17: 30:18\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/retag.rs:30:17: 30:18\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n         StorageLive(_2);                 // scope 1 at $DIR/retag.rs:31:5: 37:6\n         StorageLive(_3);                 // scope 1 at $DIR/retag.rs:32:13: 32:14\n         StorageLive(_4);                 // scope 1 at $DIR/retag.rs:32:17: 32:24\n         StorageLive(_5);                 // scope 1 at $DIR/retag.rs:32:17: 32:24\n         _5 = Test(const 0_i32);          // scope 1 at $DIR/retag.rs:32:17: 32:24\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/retag.rs:32:22: 32:23\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n         _4 = &_5;                        // scope 1 at $DIR/retag.rs:32:17: 32:24\n         Retag(_4);                       // scope 1 at $DIR/retag.rs:32:17: 32:24\n         StorageLive(_6);                 // scope 1 at $DIR/retag.rs:32:29: 32:35\n@@ -171,12 +159,6 @@ fn main() -> () {\n         StorageLive(_20);                // scope 7 at $DIR/retag.rs:47:5: 47:12\n         StorageLive(_21);                // scope 7 at $DIR/retag.rs:47:5: 47:12\n         _21 = Test(const 0_i32);         // scope 7 at $DIR/retag.rs:47:5: 47:12\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/retag.rs:47:10: 47:11\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n         _20 = &_21;                      // scope 7 at $DIR/retag.rs:47:5: 47:12\n         Retag(_20);                      // scope 7 at $DIR/retag.rs:47:5: 47:12\n         StorageLive(_22);                // scope 7 at $DIR/retag.rs:47:21: 47:23"}, {"sha": "64ca4b578036df9dfb30e26cf5c450918f9e69b9", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.mir.32bit", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.mir.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -19,23 +19,11 @@ fn match_bool(_1: bool) -> usize {\n \n     bb3: {\n         _0 = const 20_usize;             // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000014))\n-                                         // mir::Constant\n-                                         // + span: $DIR/simple-match.rs:8:14: 8:16\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000014)) }\n         goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n     bb4: {\n         _0 = const 10_usize;             // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000a))\n-                                         // mir::Constant\n-                                         // + span: $DIR/simple-match.rs:7:17: 7:19\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000a)) }\n         goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n "}, {"sha": "64ca4b578036df9dfb30e26cf5c450918f9e69b9", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.mir.64bit", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.mir.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -19,23 +19,11 @@ fn match_bool(_1: bool) -> usize {\n \n     bb3: {\n         _0 = const 20_usize;             // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000014))\n-                                         // mir::Constant\n-                                         // + span: $DIR/simple-match.rs:8:14: 8:16\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000014)) }\n         goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n     bb4: {\n         _0 = const 10_usize;             // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x000000000000000a))\n-                                         // mir::Constant\n-                                         // + span: $DIR/simple-match.rs:7:17: 7:19\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x000000000000000a)) }\n         goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n "}, {"sha": "db42c5ad8ba8af7f0648755e7659e3097e9c1bb3", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.diff.32bit", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -20,32 +20,14 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:18:9: 18:10\n           ((_1 as Foo).0: u8) = const 0_u8; // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:18:27: 18:28\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n           discriminant(_1) = 0;            // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           StorageLive(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n           _3 = const 0_isize;              // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n-                                           // ty::Const\n-                                           // + ty: isize\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:20:9: 20:20\n-                                           // + literal: Const { ty: isize, val: Value(Scalar(0x00000000)) }\n           goto -> bb3;                     // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n       }\n   \n       bb1: {\n           ((_2 as Foo).0: u8) = const 0_u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:21:30: 21:31\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n           discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n       }"}, {"sha": "db42c5ad8ba8af7f0648755e7659e3097e9c1bb3", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.diff.64bit", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -20,32 +20,14 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:18:9: 18:10\n           ((_1 as Foo).0: u8) = const 0_u8; // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:18:27: 18:28\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n           discriminant(_1) = 0;            // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           StorageLive(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n           _3 = const 0_isize;              // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n-                                           // ty::Const\n-                                           // + ty: isize\n-                                           // + val: Value(Scalar(0x0000000000000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:20:9: 20:20\n-                                           // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000000)) }\n           goto -> bb3;                     // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n       }\n   \n       bb1: {\n           ((_2 as Foo).0: u8) = const 0_u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:21:30: 21:31\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n           discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n       }"}, {"sha": "44bf4400e159e1604532b1183566a75a84feda68", "filename": "src/test/mir-opt/simplify_if.main.SimplifyBranches-after-const-prop.diff", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyBranches-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyBranches-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyBranches-after-const-prop.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -9,19 +9,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n           _1 = const false;                // scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify_if.rs:6:8: 6:13\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n -         switchInt(const false) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n--                                          // ty::Const\n--                                          // + ty: bool\n--                                          // + val: Value(Scalar(0x00))\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify_if.rs:6:5: 8:6\n--                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n +         goto -> bb1;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n       }\n   "}, {"sha": "8a3fd7d9709443e95f9e869cc1bf1b8e306d0bc3", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -52,12 +52,6 @@\n           StorageLive(_8);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n           _8 = _6;                         // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n           _7 = Gt(move _8, const 42_u8);   // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x2a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-locals-fixedpoint.rs:5:16: 5:20\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n           StorageDead(_8);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:19: 5:20\n           switchInt(_7) -> [false: bb4, otherwise: bb5]; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n       }"}, {"sha": "99b38f3c57a998ed247fa6b0d9940a9e7454a961", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -85,43 +85,19 @@\n -         StorageLive(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -         StorageLive(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n -         (_11.0: u8) = const 40_u8;       // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n-+         StorageDead(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n-+         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n-+         _2 = const use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n-                                           // ty::Const\n--                                          // + ty: u8\n--                                          // + val: Value(Scalar(0x28))\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:23: 16:25\n--                                          // + literal: Const { ty: u8, val: Value(Scalar(0x28)) }\n -         _10 = const 40_u8;               // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n--                                          // ty::Const\n--                                          // + ty: u8\n--                                          // + val: Value(Scalar(0x28))\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n--                                          // + literal: Const { ty: u8, val: Value(Scalar(0x28)) }\n -         _9 = const 42_u8;                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n--                                          // ty::Const\n--                                          // + ty: u8\n--                                          // + val: Value(Scalar(0x2a))\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n--                                          // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n -         StorageDead(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:33: 16:34\n -         _8 = const use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n--                                          // ty::Const\n++         StorageDead(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n++         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n++         _2 = const use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n+                                           // ty::Const\n                                            // + ty: fn(u8) {use_u8}\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:11\n                                            // + literal: Const { ty: fn(u8) {use_u8}, val: Value(Scalar(<ZST>)) }\n-                                           // ty::Const\n-                                           // + ty: u8\n-                                           // + val: Value(Scalar(0x2a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n       }\n   \n       bb2: {"}, {"sha": "4418c9f12b392a6f3c298f82b96684aea866c396", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -16,19 +16,7 @@\n   \n       bb0: {\n -         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--                                          // ty::Const\n--                                          // + ty: bool\n--                                          // + val: Value(Scalar(0x00))\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n -         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--                                          // ty::Const\n--                                          // + ty: bool\n--                                          // + val: Value(Scalar(0x01))\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n -         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n           _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n -         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2"}, {"sha": "4418c9f12b392a6f3c298f82b96684aea866c396", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -16,19 +16,7 @@\n   \n       bb0: {\n -         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--                                          // ty::Const\n--                                          // + ty: bool\n--                                          // + val: Value(Scalar(0x00))\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n -         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--                                          // ty::Const\n--                                          // + ty: bool\n--                                          // + val: Value(Scalar(0x01))\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n -         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n           _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n -         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2"}, {"sha": "aba5fafa3a47626618a5965ce3bde08658121ec8", "filename": "src/test/mir-opt/simplify_match.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -13,29 +13,11 @@\n           StorageLive(_1);                 // scope 0 at $DIR/simplify_match.rs:6:11: 6:31\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_match.rs:6:17: 6:18\n           _2 = const false;                // scope 0 at $DIR/simplify_match.rs:6:21: 6:26\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x00))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify_match.rs:6:21: 6:26\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n -         _1 = _2;                         // scope 1 at $DIR/simplify_match.rs:6:28: 6:29\n +         _1 = const false;                // scope 1 at $DIR/simplify_match.rs:6:28: 6:29\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/simplify_match.rs:6:28: 6:29\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_match.rs:6:30: 6:31\n -         switchInt(_1) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:7:9: 7:13\n +         switchInt(const false) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:7:9: 7:13\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/simplify_match.rs:7:9: 7:13\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n       }\n   \n       bb1: {"}, {"sha": "50cfe19974a7cdd08c962d421df0e76dfc0b268f", "filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir.32bit", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -32,12 +32,6 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n     bb3 (cleanup): {\n         _5 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _4 = Add(move _4, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n         drop((*_5)) -> bb4;              // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n@@ -49,12 +43,6 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n     bb5: {\n         _7 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _4 = Add(move _4, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n         drop((*_7)) -> [return: bb6, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n@@ -65,12 +53,6 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n \n     bb7: {\n         _4 = const 0_usize;              // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n         goto -> bb6;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n@@ -81,12 +63,6 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n     bb9 (cleanup): {\n         _11 = _9;                        // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _9 = Offset(move _9, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n         drop((*_11)) -> bb10;            // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n@@ -98,12 +74,6 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n     bb11: {\n         _13 = _9;                        // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _9 = Offset(move _9, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n         drop((*_13)) -> [return: bb12, unwind: bb10]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n "}, {"sha": "50cfe19974a7cdd08c962d421df0e76dfc0b268f", "filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir.64bit", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -32,12 +32,6 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n     bb3 (cleanup): {\n         _5 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _4 = Add(move _4, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000001))\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n         drop((*_5)) -> bb4;              // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n@@ -49,12 +43,6 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n     bb5: {\n         _7 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _4 = Add(move _4, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000001))\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n         drop((*_7)) -> [return: bb6, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n@@ -65,12 +53,6 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n \n     bb7: {\n         _4 = const 0_usize;              // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000000))\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n         goto -> bb6;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n@@ -81,12 +63,6 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n     bb9 (cleanup): {\n         _11 = _9;                        // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _9 = Offset(move _9, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000001))\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n         drop((*_11)) -> bb10;            // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n@@ -98,12 +74,6 @@ fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n     bb11: {\n         _13 = _9;                        // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _9 = Offset(move _9, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: usize\n-                                         // + val: Value(Scalar(0x0000000000000001))\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n         drop((*_13)) -> [return: bb12, unwind: bb10]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n "}, {"sha": "09ce2bdc95da148542d03c4eb4e7480530f02b26", "filename": "src/test/mir-opt/storage_live_dead_in_statics.XXX.mir_map.0.mir", "status": "modified", "additions": 0, "deletions": 504, "changes": 504, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -60,592 +60,88 @@ static XXX: &Foo = {\n         StorageLive(_6);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:12: 22:6\n         StorageLive(_7);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:9: 8:15\n         _7 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:9: 8:15\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:8:10: 8:11\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:8:13: 8:14\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_8);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:17: 8:23\n         _8 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:17: 8:23\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:8:18: 8:19\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:8:21: 8:22\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_9);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:25: 8:31\n         _9 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:8:25: 8:31\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:8:26: 8:27\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:8:29: 8:30\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_10);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:9: 9:15\n         _10 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:9: 9:15\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:9:10: 9:11\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:9:13: 9:14\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_11);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:17: 9:23\n         _11 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:17: 9:23\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:9:18: 9:19\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:9:21: 9:22\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_12);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:25: 9:31\n         _12 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:9:25: 9:31\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:9:26: 9:27\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:9:29: 9:30\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_13);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:9: 10:15\n         _13 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:9: 10:15\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:10:10: 10:11\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:10:13: 10:14\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_14);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:17: 10:23\n         _14 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:17: 10:23\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:10:18: 10:19\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:10:21: 10:22\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_15);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:25: 10:31\n         _15 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:10:25: 10:31\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:10:26: 10:27\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:10:29: 10:30\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_16);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:9: 11:15\n         _16 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:9: 11:15\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:11:10: 11:11\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:11:13: 11:14\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_17);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:17: 11:23\n         _17 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:17: 11:23\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:11:18: 11:19\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:11:21: 11:22\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_18);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:25: 11:31\n         _18 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:11:25: 11:31\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:11:26: 11:27\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:11:29: 11:30\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_19);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:9: 12:15\n         _19 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:9: 12:15\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:12:10: 12:11\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:12:13: 12:14\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_20);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:17: 12:23\n         _20 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:17: 12:23\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:12:18: 12:19\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:12:21: 12:22\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_21);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:25: 12:31\n         _21 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:12:25: 12:31\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:12:26: 12:27\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:12:29: 12:30\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_22);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:9: 13:15\n         _22 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:9: 13:15\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:13:10: 13:11\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:13:13: 13:14\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_23);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:17: 13:23\n         _23 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:17: 13:23\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:13:18: 13:19\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:13:21: 13:22\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_24);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:25: 13:31\n         _24 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:13:25: 13:31\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:13:26: 13:27\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:13:29: 13:30\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_25);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:9: 14:15\n         _25 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:9: 14:15\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:14:10: 14:11\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:14:13: 14:14\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_26);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:17: 14:23\n         _26 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:17: 14:23\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:14:18: 14:19\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:14:21: 14:22\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_27);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:25: 14:31\n         _27 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:14:25: 14:31\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:14:26: 14:27\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:14:29: 14:30\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_28);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:9: 15:15\n         _28 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:9: 15:15\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:15:10: 15:11\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:15:13: 15:14\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_29);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:17: 15:23\n         _29 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:17: 15:23\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:15:18: 15:19\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:15:21: 15:22\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_30);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:25: 15:31\n         _30 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:15:25: 15:31\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:15:26: 15:27\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:15:29: 15:30\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_31);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:9: 16:15\n         _31 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:9: 16:15\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:16:10: 16:11\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:16:13: 16:14\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_32);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:17: 16:23\n         _32 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:17: 16:23\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:16:18: 16:19\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:16:21: 16:22\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_33);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:25: 16:31\n         _33 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:16:25: 16:31\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:16:26: 16:27\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:16:29: 16:30\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_34);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:9: 17:15\n         _34 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:9: 17:15\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:17:10: 17:11\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:17:13: 17:14\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_35);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:17: 17:23\n         _35 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:17: 17:23\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:17:18: 17:19\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:17:21: 17:22\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_36);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:25: 17:31\n         _36 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:17:25: 17:31\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:17:26: 17:27\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:17:29: 17:30\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_37);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:9: 18:15\n         _37 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:9: 18:15\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:18:10: 18:11\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:18:13: 18:14\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_38);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:17: 18:23\n         _38 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:17: 18:23\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:18:18: 18:19\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:18:21: 18:22\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_39);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:25: 18:31\n         _39 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:18:25: 18:31\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:18:26: 18:27\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:18:29: 18:30\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_40);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:9: 19:15\n         _40 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:9: 19:15\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:19:10: 19:11\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:19:13: 19:14\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_41);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:17: 19:23\n         _41 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:17: 19:23\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:19:18: 19:19\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:19:21: 19:22\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_42);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:25: 19:31\n         _42 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:19:25: 19:31\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:19:26: 19:27\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:19:29: 19:30\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_43);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:9: 20:15\n         _43 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:9: 20:15\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:20:10: 20:11\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:20:13: 20:14\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_44);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:17: 20:23\n         _44 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:17: 20:23\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:20:18: 20:19\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:20:21: 20:22\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_45);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:25: 20:31\n         _45 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:20:25: 20:31\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:20:26: 20:27\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:20:29: 20:30\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         StorageLive(_46);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:9: 21:15\n         _46 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:9: 21:15\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:21:10: 21:11\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:21:13: 21:14\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n         StorageLive(_47);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:17: 21:23\n         _47 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:17: 21:23\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:21:18: 21:19\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:21:21: 21:22\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n         StorageLive(_48);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:25: 21:31\n         _48 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:25: 21:31\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:21:26: 21:27\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: u32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:21:29: 21:30\n-                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n         _6 = [move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25, move _26, move _27, move _28, move _29, move _30, move _31, move _32, move _33, move _34, move _35, move _36, move _37, move _38, move _39, move _40, move _41, move _42, move _43, move _44, move _45, move _46, move _47, move _48]; // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:12: 22:6\n         _5 = &_6;                        // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n         _4 = &(*_5);                     // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6"}, {"sha": "d51afe3d9030764c0febbdfcef828c30ba12b5cf", "filename": "src/test/mir-opt/storage_ranges.main.nll.0.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -39,12 +39,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n         _1 = const 0_i32;                // scope 0 at $DIR/storage_ranges.rs:4:13: 4:14\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_ranges.rs:4:13: 4:14\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n         StorageLive(_2);                 // scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n         StorageLive(_3);                 // scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n@@ -67,12 +61,6 @@ fn main() -> () {\n         StorageDead(_2);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageLive(_6);                 // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n         _6 = const 1_i32;                // scope 1 at $DIR/storage_ranges.rs:8:13: 8:14\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_ranges.rs:8:13: 8:14\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         FakeRead(ForLet, _6);            // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n         _0 = const ();                   // scope 0 at $DIR/storage_ranges.rs:3:11: 9:2\n                                          // ty::Const"}, {"sha": "6591328423f5a7bb20654324847d4f66b6c1541d", "filename": "src/test/mir-opt/tls_access.main.SimplifyCfg-final.after.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Ftls_access.main.SimplifyCfg-final.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Ftls_access.main.SimplifyCfg-final.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftls_access.main.SimplifyCfg-final.after.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -19,12 +19,6 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 2 at $DIR/tls-access.rs:9:9: 9:12\n         _3 = &/*tls*/ mut FOO;           // scope 2 at $DIR/tls-access.rs:9:9: 9:12\n         (*_3) = const 42_u8;             // scope 2 at $DIR/tls-access.rs:9:9: 9:17\n-                                         // ty::Const\n-                                         // + ty: u8\n-                                         // + val: Value(Scalar(0x2a))\n-                                         // mir::Constant\n-                                         // + span: $DIR/tls-access.rs:9:15: 9:17\n-                                         // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n         StorageDead(_3);                 // scope 2 at $DIR/tls-access.rs:9:17: 9:18\n         _0 = const ();                   // scope 1 at $DIR/tls-access.rs:7:5: 10:6\n                                          // ty::Const"}, {"sha": "41d4f75bd3aadc703e9e1db45e3b1a7827388788", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -21,12 +21,6 @@ fn move_out_by_subslice() -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n         _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n         (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/uniform_array_move_out.rs:11:18: 11:19\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n         drop(_3) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n     }\n@@ -49,12 +43,6 @@ fn move_out_by_subslice() -> () {\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/uniform_array_move_out.rs:11:25: 11:26\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         drop(_5) -> [return: bb7, unwind: bb5]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n     }"}, {"sha": "1f29ea152b03fbf87fa074361163bcd75a193fdb", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -21,12 +21,6 @@ fn move_out_from_end() -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n         _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n         (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/uniform_array_move_out.rs:5:18: 5:19\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n         drop(_3) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n     }\n@@ -49,12 +43,6 @@ fn move_out_from_end() -> () {\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/uniform_array_move_out.rs:5:25: 5:26\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         drop(_5) -> [return: bb7, unwind: bb5]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n     }"}, {"sha": "16c27fff7e62f5101abe3f7ddb07f197eba81c61", "filename": "src/test/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -53,23 +53,11 @@\n -         StorageLive(_5);                 // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -         StorageLive(_6);                 // scope 2 at $DIR/unreachable.rs:12:12: 12:16\n -         _6 = const true;                 // scope 2 at $DIR/unreachable.rs:12:12: 12:16\n--                                          // ty::Const\n--                                          // + ty: bool\n--                                          // + val: Value(Scalar(0x01))\n--                                          // mir::Constant\n--                                          // + span: $DIR/unreachable.rs:12:12: 12:16\n--                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n -         switchInt(_6) -> [false: bb4, otherwise: bb5]; // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -     }\n - \n -     bb4: {\n -         _4 = const 42_i32;               // scope 2 at $DIR/unreachable.rs:15:13: 15:20\n--                                          // ty::Const\n--                                          // + ty: i32\n--                                          // + val: Value(Scalar(0x0000002a))\n--                                          // mir::Constant\n--                                          // + span: $DIR/unreachable.rs:15:18: 15:20\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n -         _5 = const ();                   // scope 2 at $DIR/unreachable.rs:14:16: 16:10\n -                                          // ty::Const\n -                                          // + ty: ()\n@@ -82,12 +70,6 @@\n - \n -     bb5: {\n -         _4 = const 21_i32;               // scope 2 at $DIR/unreachable.rs:13:13: 13:20\n--                                          // ty::Const\n--                                          // + ty: i32\n--                                          // + val: Value(Scalar(0x00000015))\n--                                          // mir::Constant\n--                                          // + span: $DIR/unreachable.rs:13:18: 13:20\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000015)) }\n -         _5 = const ();                   // scope 2 at $DIR/unreachable.rs:12:17: 14:10\n -                                          // ty::Const\n -                                          // + ty: ()"}, {"sha": "bd5346f663fe9196218fe770f03116d9fefe6aae", "filename": "src/test/mir-opt/unreachable_asm.main.UnreachablePropagation.diff", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -55,23 +55,11 @@\n           StorageLive(_5);                 // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n           StorageLive(_6);                 // scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n           _6 = const true;                 // scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm.rs:14:12: 14:16\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           switchInt(_6) -> [false: bb4, otherwise: bb5]; // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n       }\n   \n       bb4: {\n           _4 = const 42_i32;               // scope 2 at $DIR/unreachable_asm.rs:17:13: 17:20\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm.rs:17:18: 17:20\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n           _5 = const ();                   // scope 2 at $DIR/unreachable_asm.rs:16:16: 18:10\n                                            // ty::Const\n                                            // + ty: ()\n@@ -84,12 +72,6 @@\n   \n       bb5: {\n           _4 = const 21_i32;               // scope 2 at $DIR/unreachable_asm.rs:15:13: 15:20\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000015))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm.rs:15:18: 15:20\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000015)) }\n           _5 = const ();                   // scope 2 at $DIR/unreachable_asm.rs:14:17: 16:10\n                                            // ty::Const\n                                            // + ty: ()"}, {"sha": "41c60b9c95784b5864931eeb204e317af139fe7b", "filename": "src/test/mir-opt/unreachable_asm_2.main.UnreachablePropagation.diff", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -58,12 +58,6 @@\n           StorageLive(_5);                 // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n           StorageLive(_6);                 // scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n           _6 = const true;                 // scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm_2.rs:14:12: 14:16\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           switchInt(_6) -> [false: bb4, otherwise: bb5]; // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n       }\n   \n@@ -79,12 +73,6 @@\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_8);                 // scope 2 at $DIR/unreachable_asm_2.rs:20:40: 20:41\n           _4 = const 42_i32;               // scope 2 at $DIR/unreachable_asm_2.rs:21:13: 21:20\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x0000002a))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm_2.rs:21:18: 21:20\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n           _5 = const ();                   // scope 2 at $DIR/unreachable_asm_2.rs:18:16: 22:10\n                                            // ty::Const\n                                            // + ty: ()\n@@ -108,12 +96,6 @@\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_7);                 // scope 2 at $DIR/unreachable_asm_2.rs:16:40: 16:41\n           _4 = const 21_i32;               // scope 2 at $DIR/unreachable_asm_2.rs:17:13: 17:20\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000015))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm_2.rs:17:18: 17:20\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000015)) }\n           _5 = const ();                   // scope 2 at $DIR/unreachable_asm_2.rs:14:17: 18:10\n                                            // ty::Const\n                                            // + ty: ()"}, {"sha": "e1c195ad303e4598557a614a3d8109ce47f2057a", "filename": "src/test/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -20,12 +20,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/unreachable_diverging.rs:13:9: 13:10\n           _1 = const true;                 // scope 0 at $DIR/unreachable_diverging.rs:13:13: 13:17\n-                                           // ty::Const\n-                                           // + ty: bool\n-                                           // + val: Value(Scalar(0x01))\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_diverging.rs:13:13: 13:17\n-                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           StorageLive(_2);                 // scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n           _2 = const empty() -> bb1;       // scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n                                            // ty::Const"}, {"sha": "315525e08c21c96b263d9d2c120412877192d07d", "filename": "src/test/mir-opt/unusual_item_types.E-V-{{constant}}.mir_map.0.mir.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -5,12 +5,6 @@ E::V::{{constant}}#0: isize = {\n \n     bb0: {\n         _0 = const 5_isize;              // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n-                                         // ty::Const\n-                                         // + ty: isize\n-                                         // + val: Value(Scalar(0x00000005))\n-                                         // mir::Constant\n-                                         // + span: $DIR/unusual-item-types.rs:22:9: 22:10\n-                                         // + literal: Const { ty: isize, val: Value(Scalar(0x00000005)) }\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n "}, {"sha": "315525e08c21c96b263d9d2c120412877192d07d", "filename": "src/test/mir-opt/unusual_item_types.E-V-{{constant}}.mir_map.0.mir.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -5,12 +5,6 @@ E::V::{{constant}}#0: isize = {\n \n     bb0: {\n         _0 = const 5_isize;              // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n-                                         // ty::Const\n-                                         // + ty: isize\n-                                         // + val: Value(Scalar(0x0000000000000005))\n-                                         // mir::Constant\n-                                         // + span: $DIR/unusual-item-types.rs:22:9: 22:10\n-                                         // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000005)) }\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n "}, {"sha": "fd3d707d539696d3b379f1ed67b7cf265343de9e", "filename": "src/test/mir-opt/unusual_item_types.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -5,12 +5,6 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 =\n \n     bb0: {\n         _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/unusual-item-types.rs:10:38: 10:39\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n "}, {"sha": "fd3d707d539696d3b379f1ed67b7cf265343de9e", "filename": "src/test/mir-opt/unusual_item_types.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -5,12 +5,6 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 =\n \n     bb0: {\n         _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/unusual-item-types.rs:10:38: 10:39\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n "}, {"sha": "4705309e746244cfe293a228c2383116622902f2", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.diff.32bit", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -16,30 +16,12 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n           _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/while_let_loops.rs:6:18: 6:19\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageLive(_3);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n           discriminant(_3) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n -         _4 = discriminant(_3);           // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n -         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n +         _4 = const 0_isize;              // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n-+                                          // ty::Const\n-+                                          // + ty: isize\n-+                                          // + val: Value(Scalar(0x00000000))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/while_let_loops.rs:7:15: 7:25\n-+                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000000)) }\n +         switchInt(const 0_isize) -> [1_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n-+                                          // ty::Const\n-+                                          // + ty: isize\n-+                                          // + val: Value(Scalar(0x00000000))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/while_let_loops.rs:7:15: 7:25\n-+                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000000)) }\n       }\n   \n       bb1: {\n@@ -59,12 +41,6 @@\n   \n       bb3: {\n           _1 = const 1_i32;                // scope 1 at $DIR/while_let_loops.rs:8:9: 8:15\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/while_let_loops.rs:8:14: 8:15\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n                                            // ty::Const\n                                            // + ty: ()"}, {"sha": "4705309e746244cfe293a228c2383116622902f2", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.diff.64bit", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -16,30 +16,12 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n           _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/while_let_loops.rs:6:18: 6:19\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageLive(_3);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n           discriminant(_3) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n -         _4 = discriminant(_3);           // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n -         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n +         _4 = const 0_isize;              // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n-+                                          // ty::Const\n-+                                          // + ty: isize\n-+                                          // + val: Value(Scalar(0x0000000000000000))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/while_let_loops.rs:7:15: 7:25\n-+                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000000)) }\n +         switchInt(const 0_isize) -> [1_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n-+                                          // ty::Const\n-+                                          // + ty: isize\n-+                                          // + val: Value(Scalar(0x0000000000000000))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/while_let_loops.rs:7:15: 7:25\n-+                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000000)) }\n       }\n   \n       bb1: {\n@@ -59,12 +41,6 @@\n   \n       bb3: {\n           _1 = const 1_i32;                // scope 1 at $DIR/while_let_loops.rs:8:9: 8:15\n-                                           // ty::Const\n-                                           // + ty: i32\n-                                           // + val: Value(Scalar(0x00000001))\n-                                           // mir::Constant\n-                                           // + span: $DIR/while_let_loops.rs:8:14: 8:15\n-                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n                                            // ty::Const\n                                            // + ty: ()"}, {"sha": "5c4b18e6f522f40461fc96d30f75d715597afda0", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.mir.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.32bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -11,12 +11,6 @@ fn change_loop_body() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n         _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/while_let_loops.rs:6:18: 6:19\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n         StorageLive(_2);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n         discriminant(_2) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n         _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6"}, {"sha": "5c4b18e6f522f40461fc96d30f75d715597afda0", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.mir.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/4717cf2fcbde585d81c47417b1fb921572a3c537/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.64bit?ref=4717cf2fcbde585d81c47417b1fb921572a3c537", "patch": "@@ -11,12 +11,6 @@ fn change_loop_body() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n         _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/while_let_loops.rs:6:18: 6:19\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n         StorageLive(_2);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n         discriminant(_2) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n         _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6"}]}