{"sha": "3e3aeab0ed29e7da7aa151465d5ed63d6689069b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlM2FlYWIwZWQyOWU3ZGE3YWExNTE0NjVkNWVkNjNkNjY4OTA2OWI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-20T15:16:45Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-20T15:16:45Z"}, "message": "implement bit masks as the compiler would translate them", "tree": {"sha": "689ed5bfc373cd1517cbc60f725f102066d4685c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/689ed5bfc373cd1517cbc60f725f102066d4685c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e3aeab0ed29e7da7aa151465d5ed63d6689069b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXaAjdAAoJEFbW7qD8Z6xGbr0P/iXjGXQ7rKrsfhXx34LLLv+T\nD3yJSmppWXdm+jmqbzlhOUX/H8VRpkCsrg+kjpC9T9hEmJ91MtSMY7lBQmBhSkUh\npkxBIr5DyLCxesTS4yc9g5C2clHNEfeBbpktqdHuLTn1GYnU6umq3m4EU5HCXsZ3\neMunLuWjh1SWf5y2D4sxlvNaZmHaM3pyQPNE32WwW1dDi4EFPTooh6YjzaYrEITw\nHNxcO7pKgB/rjfT4MdfNpdqgp3deFNRr8y4Qt2CmhImcMDiQMwLtJsKssTp+pj6c\nhm1oHVz7jZVW8QtLm3NOIFdhLJuGuO8Lme2oRvxs7rXFXRjuJ45geTbx8O/R9SDj\nz2GV0WynxABr7VuVpWldgYf/cmd1gdMVLhMArCUaVas58kXOtl9wiYx6Zk5z+w23\njSGCMkDJ2z64Jnrgw8vRT0Crr3icg5Tpogmep1lM6ryriGBSFVgZ0cCqAORsvWQi\nryAnr24LvHBZnWyuTXVp4NxQg/SqdAvWYHHoc3X8KIIMuShcRgxQPtaMOAgh3NbK\nbBB5kvWHvYMrhwbi67z3KGFqAR1R4Th6cdZfXBwdklGW8p+EOhcm5UUa9rlO1Q3Z\n6jwo3bW6uD4RRE0O8S06sIYjg1fJu8hB4qKc3tOd5BNucMaqLn55yN0sD1rSD59h\nIjulZY7qwwbeTLh6zNXZ\n=NPQ7\n-----END PGP SIGNATURE-----", "payload": "tree 689ed5bfc373cd1517cbc60f725f102066d4685c\nparent 0821a15476ad85975445fdfde3bb8016b8d8c848\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466435805 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466435805 +0200\n\nimplement bit masks as the compiler would translate them"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e3aeab0ed29e7da7aa151465d5ed63d6689069b", "html_url": "https://github.com/rust-lang/rust/commit/3e3aeab0ed29e7da7aa151465d5ed63d6689069b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e3aeab0ed29e7da7aa151465d5ed63d6689069b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0821a15476ad85975445fdfde3bb8016b8d8c848", "url": "https://api.github.com/repos/rust-lang/rust/commits/0821a15476ad85975445fdfde3bb8016b8d8c848", "html_url": "https://github.com/rust-lang/rust/commit/0821a15476ad85975445fdfde3bb8016b8d8c848"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "9e5e8997468eac7807995ab13efd36b821c38ce3", "filename": "src/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e3aeab0ed29e7da7aa151465d5ed63d6689069b/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3aeab0ed29e7da7aa151465d5ed63d6689069b/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=3e3aeab0ed29e7da7aa151465d5ed63d6689069b", "patch": "@@ -69,7 +69,7 @@ impl<'tcx> Error for EvalError<'tcx> {\n             EvalError::Math(..) =>\n                 \"mathematical operation failed\",\n             EvalError::InvalidBitShiftRhs(..) =>\n-                \"bit shift rhs negative or not an int\",\n+                \"bit shift rhs not an int\",\n         }\n     }\n "}, {"sha": "586aaeee4e92511bd3c16514fcd05b02f97a0474", "filename": "src/primval.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3e3aeab0ed29e7da7aa151465d5ed63d6689069b/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3aeab0ed29e7da7aa151465d5ed63d6689069b/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=3e3aeab0ed29e7da7aa151465d5ed63d6689069b", "patch": "@@ -69,15 +69,26 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n     match bin_op {\n         // can have rhs with a different numeric type\n         Shl | Shr => {\n+            let mask_bits = match left {\n+                I8(_) => 3,\n+                I16(_) => 4,\n+                I32(_) => 5,\n+                I64(_) => 6,\n+                U8(_) => 3,\n+                U16(_) => 4,\n+                U32(_) => 5,\n+                U64(_) => 6,\n+                _ => unreachable!(),\n+            };\n             let r = match right {\n-                I8(i) if i >= 0 => i as u32,\n-                I16(i) if i >= 0 => i as u32,\n-                I32(i) if i >= 0 => i as u32,\n-                I64(i) if i >= 0 && i as i32 as i64 == i => i as u32,\n-                U8(i) => i as u32,\n-                U16(i) => i as u32,\n-                U32(i) => i,\n-                U64(i) if i as u32 as u64 == i => i as u32,\n+                I8(i) => (i & ((1 << mask_bits) - 1)) as u32,\n+                I16(i) => (i & ((1 << mask_bits) - 1)) as u32,\n+                I32(i) => (i & ((1 << mask_bits) - 1)) as u32,\n+                I64(i) => (i & ((1 << mask_bits) - 1)) as u32,\n+                U8(i) => (i & ((1 << mask_bits) - 1)) as u32,\n+                U16(i) => (i & ((1 << mask_bits) - 1)) as u32,\n+                U32(i) => (i & ((1 << mask_bits) - 1)) as u32,\n+                U64(i) => (i & ((1 << mask_bits) - 1)) as u32,\n                 _ => return Err(EvalError::InvalidBitShiftRhs(right)),\n             };\n             macro_rules! shift {"}]}