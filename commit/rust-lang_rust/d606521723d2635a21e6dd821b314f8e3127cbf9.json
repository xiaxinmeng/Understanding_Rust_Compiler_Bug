{"sha": "d606521723d2635a21e6dd821b314f8e3127cbf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MDY1MjE3MjNkMjYzNWEyMWU2ZGQ4MjFiMzE0ZjhlMzEyN2NiZjk=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-24T20:45:55Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-24T20:45:55Z"}, "message": "Use visibility_of in search", "tree": {"sha": "268ca130f293fd9a4345620e2546554613829610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/268ca130f293fd9a4345620e2546554613829610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d606521723d2635a21e6dd821b314f8e3127cbf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d606521723d2635a21e6dd821b314f8e3127cbf9", "html_url": "https://github.com/rust-lang/rust/commit/d606521723d2635a21e6dd821b314f8e3127cbf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d606521723d2635a21e6dd821b314f8e3127cbf9/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcfb3700ce5249d79368eda974b738617a83f894", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcfb3700ce5249d79368eda974b738617a83f894", "html_url": "https://github.com/rust-lang/rust/commit/bcfb3700ce5249d79368eda974b738617a83f894"}], "stats": {"total": 66, "additions": 31, "deletions": 35}, "files": [{"sha": "05a0eed30a8b516e39ce981073ff8c3619a82a43", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d606521723d2635a21e6dd821b314f8e3127cbf9/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606521723d2635a21e6dd821b314f8e3127cbf9/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=d606521723d2635a21e6dd821b314f8e3127cbf9", "patch": "@@ -6,7 +6,7 @@\n \n use std::mem;\n \n-use hir::{DefWithBody, HasSource, ModuleSource, Semantics};\n+use hir::{DefWithBody, HasSource, Module, ModuleSource, Semantics, Visibility};\n use once_cell::unsync::Lazy;\n use ra_db::{FileId, FileRange, SourceDatabaseExt};\n use ra_prof::profile;\n@@ -123,51 +123,47 @@ impl Definition {\n             return SearchScope::new(res);\n         }\n \n-        let vis = self.visibility(db).as_ref().map(|v| v.syntax().to_string()).unwrap_or_default();\n+        let vis = self.visibility(db);\n \n-        if vis.as_str() == \"pub(super)\" {\n-            if let Some(parent_module) = module.parent(db) {\n-                let mut res = FxHashMap::default();\n-                let parent_src = parent_module.definition_source(db);\n-                let file_id = parent_src.file_id.original_file(db);\n+        // FIXME:\n+        // The following logic are wrong that it does not search\n+        // for submodules within other files recursively.\n \n-                match parent_src.value {\n-                    ModuleSource::Module(m) => {\n-                        let range = Some(m.syntax().text_range());\n-                        res.insert(file_id, range);\n-                    }\n-                    ModuleSource::SourceFile(_) => {\n-                        res.insert(file_id, None);\n-                        res.extend(parent_module.children(db).map(|m| {\n-                            let src = m.definition_source(db);\n-                            (src.file_id.original_file(db), None)\n-                        }));\n-                    }\n+        if let Some(Visibility::Module(module)) = vis.and_then(|it| it.into()) {\n+            let module: Module = module.into();\n+            let mut res = FxHashMap::default();\n+            let src = module.definition_source(db);\n+            let file_id = src.file_id.original_file(db);\n+\n+            match src.value {\n+                ModuleSource::Module(m) => {\n+                    let range = Some(m.syntax().text_range());\n+                    res.insert(file_id, range);\n+                }\n+                ModuleSource::SourceFile(_) => {\n+                    res.insert(file_id, None);\n+                    res.extend(module.children(db).map(|m| {\n+                        let src = m.definition_source(db);\n+                        (src.file_id.original_file(db), None)\n+                    }));\n                 }\n-                return SearchScope::new(res);\n             }\n+            return SearchScope::new(res);\n         }\n \n-        if vis.as_str() != \"\" {\n+        if let Some(Visibility::Public) = vis {\n             let source_root_id = db.file_source_root(file_id);\n             let source_root = db.source_root(source_root_id);\n             let mut res = source_root.walk().map(|id| (id, None)).collect::<FxHashMap<_, _>>();\n \n-            // FIXME: add \"pub(in path)\"\n-\n-            if vis.as_str() == \"pub(crate)\" {\n-                return SearchScope::new(res);\n-            }\n-            if vis.as_str() == \"pub\" {\n-                let krate = module.krate();\n-                for rev_dep in krate.reverse_dependencies(db) {\n-                    let root_file = rev_dep.root_file(db);\n-                    let source_root_id = db.file_source_root(root_file);\n-                    let source_root = db.source_root(source_root_id);\n-                    res.extend(source_root.walk().map(|id| (id, None)));\n-                }\n-                return SearchScope::new(res);\n+            let krate = module.krate();\n+            for rev_dep in krate.reverse_dependencies(db) {\n+                let root_file = rev_dep.root_file(db);\n+                let source_root_id = db.file_source_root(root_file);\n+                let source_root = db.source_root(source_root_id);\n+                res.extend(source_root.walk().map(|id| (id, None)));\n             }\n+            return SearchScope::new(res);\n         }\n \n         let mut res = FxHashMap::default();"}]}