{"sha": "fbd7e0cf0e31ab612343311a61fe4f58a76a1698", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZDdlMGNmMGUzMWFiNjEyMzQzMzExYTYxZmU0ZjU4YTc2YTE2OTg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-08-02T02:40:16Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-08-02T20:13:58Z"}, "message": "Fix broken test and nit", "tree": {"sha": "baa075e31207de42149d2053d9fa7ca70ae73424", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baa075e31207de42149d2053d9fa7ca70ae73424"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbd7e0cf0e31ab612343311a61fe4f58a76a1698", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd7e0cf0e31ab612343311a61fe4f58a76a1698", "html_url": "https://github.com/rust-lang/rust/commit/fbd7e0cf0e31ab612343311a61fe4f58a76a1698", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbd7e0cf0e31ab612343311a61fe4f58a76a1698/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b04922184457b1f3b5457b73051d128d39e6beec", "url": "https://api.github.com/repos/rust-lang/rust/commits/b04922184457b1f3b5457b73051d128d39e6beec", "html_url": "https://github.com/rust-lang/rust/commit/b04922184457b1f3b5457b73051d128d39e6beec"}], "stats": {"total": 80, "additions": 43, "deletions": 37}, "files": [{"sha": "a8760438fc02079d3d9639e456547ea16f095971", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 35, "deletions": 32, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/fbd7e0cf0e31ab612343311a61fe4f58a76a1698/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd7e0cf0e31ab612343311a61fe4f58a76a1698/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=fbd7e0cf0e31ab612343311a61fe4f58a76a1698", "patch": "@@ -450,6 +450,24 @@ impl<'a> State<'a> {\n         self.s.word(\";\")\n     }\n \n+    fn print_item_type(\n+        &mut self,\n+        item: &hir::Item,\n+        generics: &hir::Generics,\n+        inner: impl Fn(&mut Self),\n+    ) {\n+        self.head(visibility_qualified(&item.vis, \"type\"));\n+        self.print_ident(item.ident);\n+        self.print_generic_params(&generics.params);\n+        self.end(); // end the inner ibox\n+\n+        self.print_where_clause(&generics.where_clause);\n+        self.s.space();\n+        inner(self);\n+        self.s.word(\";\");\n+        self.end(); // end the outer ibox\n+    }\n+\n     /// Pretty-print an item\n     pub fn print_item(&mut self, item: &hir::Item) {\n         self.hardbreak_if_not_bol();\n@@ -553,43 +571,28 @@ impl<'a> State<'a> {\n                 self.end()\n             }\n             hir::ItemKind::Ty(ref ty, ref generics) => {\n-                self.head(visibility_qualified(&item.vis, \"type\"));\n-                self.print_ident(item.ident);\n-                self.print_generic_params(&generics.params);\n-                self.end(); // end the inner ibox\n-\n-                self.print_where_clause(&generics.where_clause);\n-                self.s.space();\n-                self.word_space(\"=\");\n-                self.print_type(&ty);\n-                self.s.word(\";\");\n-                self.end(); // end the outer ibox\n+                self.print_item_type(item, &generics, |state| {\n+                    state.word_space(\"=\");\n+                    state.print_type(&ty);\n+                });\n             }\n             hir::ItemKind::OpaqueTy(ref opaque_ty) => {\n-                self.head(visibility_qualified(&item.vis, \"type\"));\n-                self.print_ident(item.ident);\n-                self.print_generic_params(&opaque_ty.generics.params);\n-                let mut real_bounds = Vec::with_capacity(opaque_ty.bounds.len());\n-                for b in opaque_ty.bounds.iter() {\n-                    if let GenericBound::Trait(ref ptr, hir::TraitBoundModifier::Maybe) = *b {\n-                        self.s.space();\n-                        self.word_space(\"for ?\");\n-                        self.print_trait_ref(&ptr.trait_ref);\n-                    } else {\n-                        real_bounds.push(b);\n+                self.print_item_type(item, &opaque_ty.generics, |state| {\n+                    let mut real_bounds = Vec::with_capacity(opaque_ty.bounds.len());\n+                    for b in opaque_ty.bounds.iter() {\n+                        if let GenericBound::Trait(ref ptr, hir::TraitBoundModifier::Maybe) = *b {\n+                            state.s.space();\n+                            state.word_space(\"for ?\");\n+                            state.print_trait_ref(&ptr.trait_ref);\n+                        } else {\n+                            real_bounds.push(b);\n+                        }\n                     }\n-                }\n-                self.print_bounds(\" = impl\", real_bounds);\n-\n-                self.end(); // end the inner ibox\n-\n-                self.print_where_clause(&opaque_ty.generics.where_clause);\n-                self.s.word(\";\");\n-                self.end(); // end the outer ibox\n+                    state.print_bounds(\"= impl\", real_bounds);\n+                });\n             }\n             hir::ItemKind::Enum(ref enum_definition, ref params) => {\n-                self.print_enum_def(enum_definition, params, item.ident.name, item.span,\n-                                    &item.vis);\n+                self.print_enum_def(enum_definition, params, item.ident.name, item.span, &item.vis);\n             }\n             hir::ItemKind::Struct(ref struct_def, ref generics) => {\n                 self.head(visibility_qualified(&item.vis, \"struct\"));"}, {"sha": "3f25d5fbd9c463033cd891ca71099444b5bbe1fb", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fbd7e0cf0e31ab612343311a61fe4f58a76a1698/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbd7e0cf0e31ab612343311a61fe4f58a76a1698/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=fbd7e0cf0e31ab612343311a61fe4f58a76a1698", "patch": "@@ -1,8 +1,8 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:35\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:29\n    |\n-LL | existential type WrongGeneric<T>: 'static;\n-   |                                   ^^^^^^^\n+LL | type WrongGeneric<T> = impl 'static;\n+   |                             ^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/generic_type_does_not_live_long_enough.rs:6:18"}, {"sha": "3416c6745bb0d0fc9033ec46150247998fe8132d", "filename": "src/test/ui/type-alias-impl-trait/issue-58951.rs", "status": "renamed", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fbd7e0cf0e31ab612343311a61fe4f58a76a1698/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd7e0cf0e31ab612343311a61fe4f58a76a1698/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.rs?ref=fbd7e0cf0e31ab612343311a61fe4f58a76a1698", "patch": "@@ -1,8 +1,11 @@\n // check-pass\n-#![feature(existential_type)]\n \n-existential type A: Iterator;\n+#![feature(type_alias_impl_trait)]\n+\n+type A = impl Iterator;\n+\n fn def_a() -> A { 0..1 }\n+\n pub fn use_a() {\n     def_a().map(|x| x);\n }", "previous_filename": "src/test/ui/existential_types/issue-58951.rs"}]}