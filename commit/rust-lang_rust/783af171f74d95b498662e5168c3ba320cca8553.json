{"sha": "783af171f74d95b498662e5168c3ba320cca8553", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4M2FmMTcxZjc0ZDk1YjQ5ODY2MmU1MTY4YzNiYTMyMGNjYTg1NTM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-07T11:14:12Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-07T11:18:12Z"}, "message": "Clean up inlay_hints", "tree": {"sha": "8f031e5938b2765271665a91b0d7afd56c211435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f031e5938b2765271665a91b0d7afd56c211435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/783af171f74d95b498662e5168c3ba320cca8553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/783af171f74d95b498662e5168c3ba320cca8553", "html_url": "https://github.com/rust-lang/rust/commit/783af171f74d95b498662e5168c3ba320cca8553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/783af171f74d95b498662e5168c3ba320cca8553/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e106857e80d1ea304b00b5ff8a3294ca9bacd959", "url": "https://api.github.com/repos/rust-lang/rust/commits/e106857e80d1ea304b00b5ff8a3294ca9bacd959", "html_url": "https://github.com/rust-lang/rust/commit/e106857e80d1ea304b00b5ff8a3294ca9bacd959"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "c1847f601d5cb1f53ab9224acb28500950a3e120", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/783af171f74d95b498662e5168c3ba320cca8553/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783af171f74d95b498662e5168c3ba320cca8553/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=783af171f74d95b498662e5168c3ba320cca8553", "patch": "@@ -3,7 +3,7 @@ pub(crate) mod insert_use;\n \n use std::{iter, ops};\n \n-use hir::{Adt, Crate, Enum, ScopeDef, Semantics, Trait, Type};\n+use hir::{Adt, Crate, Enum, Module, ScopeDef, Semantics, Trait, Type};\n use ide_db::RootDatabase;\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n@@ -373,6 +373,10 @@ pub use prelude::*;\n         self.find_trait(\"core:iter:traits:iterator:Iterator\")\n     }\n \n+    pub fn core_iter(&self) -> Option<Module> {\n+        self.find_module(\"core:iter\")\n+    }\n+\n     fn find_trait(&self, path: &str) -> Option<Trait> {\n         match self.find_def(path)? {\n             hir::ScopeDef::ModuleDef(hir::ModuleDef::Trait(it)) => Some(it),\n@@ -387,6 +391,13 @@ pub use prelude::*;\n         }\n     }\n \n+    fn find_module(&self, path: &str) -> Option<Module> {\n+        match self.find_def(path)? {\n+            hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(it)) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n     fn find_def(&self, path: &str) -> Option<ScopeDef> {\n         let db = self.0.db;\n         let mut path = path.split(':');"}, {"sha": "7d716577e2b9b9807b0d87d9e1e859155e6aa871", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/783af171f74d95b498662e5168c3ba320cca8553/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783af171f74d95b498662e5168c3ba320cca8553/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=783af171f74d95b498662e5168c3ba320cca8553", "patch": "@@ -1,5 +1,5 @@\n use assists::utils::FamousDefs;\n-use hir::{known, Adt, AssocItem, Callable, HirDisplay, Semantics, Type};\n+use hir::{known, HirDisplay, Semantics};\n use ide_db::RootDatabase;\n use stdx::to_lower_snake_case;\n use syntax::{\n@@ -120,7 +120,7 @@ fn get_chaining_hints(\n             return None;\n         }\n         if matches!(expr, ast::Expr::PathExpr(_)) {\n-            if let Some(Adt::Struct(st)) = ty.as_adt() {\n+            if let Some(hir::Adt::Struct(st)) = ty.as_adt() {\n                 if st.fields(sema.db).is_empty() {\n                     return None;\n                 }\n@@ -208,7 +208,7 @@ fn get_bind_pat_hints(\n fn hint_iterator(\n     sema: &Semantics<RootDatabase>,\n     config: &InlayHintsConfig,\n-    ty: &Type,\n+    ty: &hir::Type,\n ) -> Option<SmolStr> {\n     let db = sema.db;\n     let strukt = std::iter::successors(Some(ty.clone()), |ty| ty.remove_ref())\n@@ -218,17 +218,13 @@ fn hint_iterator(\n     if krate.declaration_name(db).as_deref() != Some(\"core\") {\n         return None;\n     }\n-    // assert this type comes from `core::iter`\n-    strukt\n-        .module(db)\n-        .path_to_root(db)\n-        .into_iter()\n-        .rev()\n-        .find(|module| module.name(db) == Some(known::iter))?;\n     let iter_trait = FamousDefs(sema, krate).core_iter_Iterator()?;\n+    let iter_mod = FamousDefs(sema, krate).core_iter()?;\n+    // assert this type comes from `core::iter`\n+    iter_mod.visibility_of(db, &iter_trait.into()).filter(|&vis| vis == hir::Visibility::Public)?;\n     if ty.impls_trait(db, iter_trait, &[]) {\n         let assoc_type_item = iter_trait.items(db).into_iter().find_map(|item| match item {\n-            AssocItem::TypeAlias(alias) if alias.name(db) == known::Item => Some(alias),\n+            hir::AssocItem::TypeAlias(alias) if alias.name(db) == known::Item => Some(alias),\n             _ => None,\n         })?;\n         if let Some(ty) = ty.normalize_trait_assoc_type(db, iter_trait, &[], assoc_type_item) {\n@@ -248,8 +244,8 @@ fn hint_iterator(\n     None\n }\n \n-fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &Type) -> bool {\n-    if let Some(Adt::Enum(enum_data)) = pat_ty.as_adt() {\n+fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &hir::Type) -> bool {\n+    if let Some(hir::Adt::Enum(enum_data)) = pat_ty.as_adt() {\n         let pat_text = bind_pat.to_string();\n         enum_data\n             .variants(db)\n@@ -264,15 +260,15 @@ fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &Typ\n fn should_not_display_type_hint(\n     sema: &Semantics<RootDatabase>,\n     bind_pat: &ast::IdentPat,\n-    pat_ty: &Type,\n+    pat_ty: &hir::Type,\n ) -> bool {\n     let db = sema.db;\n \n     if pat_ty.is_unknown() {\n         return true;\n     }\n \n-    if let Some(Adt::Struct(s)) = pat_ty.as_adt() {\n+    if let Some(hir::Adt::Struct(s)) = pat_ty.as_adt() {\n         if s.fields(db).is_empty() && s.name(db).to_string() == bind_pat.to_string() {\n             return true;\n         }\n@@ -316,7 +312,7 @@ fn should_not_display_type_hint(\n \n fn should_show_param_name_hint(\n     sema: &Semantics<RootDatabase>,\n-    callable: &Callable,\n+    callable: &hir::Callable,\n     param_name: &str,\n     argument: &ast::Expr,\n ) -> bool {\n@@ -363,7 +359,7 @@ fn is_enum_name_similar_to_param_name(\n     param_name: &str,\n ) -> bool {\n     match sema.type_of_expr(argument).and_then(|t| t.as_adt()) {\n-        Some(Adt::Enum(e)) => to_lower_snake_case(&e.name(sema.db).to_string()) == param_name,\n+        Some(hir::Adt::Enum(e)) => to_lower_snake_case(&e.name(sema.db).to_string()) == param_name,\n         _ => false,\n     }\n }\n@@ -384,7 +380,7 @@ fn is_obvious_param(param_name: &str) -> bool {\n     param_name.len() == 1 || is_obvious_param_name\n }\n \n-fn get_callable(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<Callable> {\n+fn get_callable(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<hir::Callable> {\n     match expr {\n         ast::Expr::CallExpr(expr) => sema.type_of_expr(&expr.expr()?)?.as_callable(sema.db),\n         ast::Expr::MethodCallExpr(expr) => sema.resolve_method_call_as_callable(expr),"}]}