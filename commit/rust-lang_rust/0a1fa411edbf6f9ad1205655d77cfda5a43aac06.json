{"sha": "0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "node_id": "C_kwDOAAsO6NoAKDBhMWZhNDExZWRiZjZmOWFkMTIwNTY1NWQ3N2NmZGE1YTQzYWFjMDY", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-06-06T13:47:00Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-06-15T19:19:11Z"}, "message": "Remove comments from mir-opt MIR dumps", "tree": {"sha": "35f05b194635642648301bb16e271ce4ae6860a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35f05b194635642648301bb16e271ce4ae6860a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "html_url": "https://github.com/rust-lang/rust/commit/0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "331249a94930adb3d2a7243d946733b63324b2d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/331249a94930adb3d2a7243d946733b63324b2d6", "html_url": "https://github.com/rust-lang/rust/commit/331249a94930adb3d2a7243d946733b63324b2d6"}], "stats": {"total": 46019, "additions": 21875, "deletions": 24144}, "files": [{"sha": "9d0c9ec9742311ac3b1ecb53af2d5b27c07c52e8", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -685,7 +685,7 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(ls, true);\n     untracked!(macro_backtrace, true);\n     untracked!(meta_stats, true);\n-    untracked!(mir_pretty_relative_line_numbers, true);\n+    untracked!(mir_include_spans, true);\n     untracked!(nll_facts, true);\n     untracked!(no_analysis, true);\n     untracked!(no_leak_check, true);"}, {"sha": "ffa7a5400d358975104d33fb1f1ceda116ec8dc2", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 71, "deletions": 50, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -353,14 +353,22 @@ where\n     for statement in &data.statements {\n         extra_data(PassWhere::BeforeLocation(current_location), w)?;\n         let indented_body = format!(\"{0}{0}{1:?};\", INDENT, statement);\n-        writeln!(\n-            w,\n-            \"{:A$} // {}{}\",\n-            indented_body,\n-            if tcx.sess.verbose() { format!(\"{:?}: \", current_location) } else { String::new() },\n-            comment(tcx, statement.source_info, body.span),\n-            A = ALIGN,\n-        )?;\n+        if tcx.sess.opts.unstable_opts.mir_include_spans {\n+            writeln!(\n+                w,\n+                \"{:A$} // {}{}\",\n+                indented_body,\n+                if tcx.sess.verbose() {\n+                    format!(\"{:?}: \", current_location)\n+                } else {\n+                    String::new()\n+                },\n+                comment(tcx, statement.source_info),\n+                A = ALIGN,\n+            )?;\n+        } else {\n+            writeln!(w, \"{}\", indented_body)?;\n+        }\n \n         write_extra(tcx, w, |visitor| {\n             visitor.visit_statement(statement, current_location);\n@@ -374,14 +382,18 @@ where\n     // Terminator at the bottom.\n     extra_data(PassWhere::BeforeLocation(current_location), w)?;\n     let indented_terminator = format!(\"{0}{0}{1:?};\", INDENT, data.terminator().kind);\n-    writeln!(\n-        w,\n-        \"{:A$} // {}{}\",\n-        indented_terminator,\n-        if tcx.sess.verbose() { format!(\"{:?}: \", current_location) } else { String::new() },\n-        comment(tcx, data.terminator().source_info, body.span),\n-        A = ALIGN,\n-    )?;\n+    if tcx.sess.opts.unstable_opts.mir_include_spans {\n+        writeln!(\n+            w,\n+            \"{:A$} // {}{}\",\n+            indented_terminator,\n+            if tcx.sess.verbose() { format!(\"{:?}: \", current_location) } else { String::new() },\n+            comment(tcx, data.terminator().source_info),\n+            A = ALIGN,\n+        )?;\n+    } else {\n+        writeln!(w, \"{}\", indented_terminator)?;\n+    }\n \n     write_extra(tcx, w, |visitor| {\n         visitor.visit_terminator(data.terminator(), current_location);\n@@ -400,10 +412,12 @@ fn write_extra<'tcx, F>(tcx: TyCtxt<'tcx>, write: &mut dyn Write, mut visit_op:\n where\n     F: FnMut(&mut ExtraComments<'tcx>),\n {\n-    let mut extra_comments = ExtraComments { tcx, comments: vec![] };\n-    visit_op(&mut extra_comments);\n-    for comment in extra_comments.comments {\n-        writeln!(write, \"{:A$} // {}\", \"\", comment, A = ALIGN)?;\n+    if tcx.sess.opts.unstable_opts.mir_include_spans {\n+        let mut extra_comments = ExtraComments { tcx, comments: vec![] };\n+        visit_op(&mut extra_comments);\n+        for comment in extra_comments.comments {\n+            writeln!(write, \"{:A$} // {}\", \"\", comment, A = ALIGN)?;\n+        }\n     }\n     Ok(())\n }\n@@ -522,13 +536,8 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n     }\n }\n \n-fn comment(tcx: TyCtxt<'_>, SourceInfo { span, scope }: SourceInfo, function_span: Span) -> String {\n-    let location = if tcx.sess.opts.unstable_opts.mir_pretty_relative_line_numbers {\n-        tcx.sess.source_map().span_to_relative_line_string(span, function_span)\n-    } else {\n-        tcx.sess.source_map().span_to_embeddable_string(span)\n-    };\n-\n+fn comment(tcx: TyCtxt<'_>, SourceInfo { span, scope }: SourceInfo) -> String {\n+    let location = tcx.sess.source_map().span_to_embeddable_string(span);\n     format!(\"scope {} at {}\", scope.index(), location,)\n }\n \n@@ -560,13 +569,17 @@ fn write_scope_tree(\n             var_debug_info.value,\n         );\n \n-        writeln!(\n-            w,\n-            \"{0:1$} // in {2}\",\n-            indented_debug_info,\n-            ALIGN,\n-            comment(tcx, var_debug_info.source_info, body.span),\n-        )?;\n+        if tcx.sess.opts.unstable_opts.mir_include_spans {\n+            writeln!(\n+                w,\n+                \"{0:1$} // in {2}\",\n+                indented_debug_info,\n+                ALIGN,\n+                comment(tcx, var_debug_info.source_info),\n+            )?;\n+        } else {\n+            writeln!(w, \"{}\", indented_debug_info)?;\n+        }\n     }\n \n     // Local variable types.\n@@ -594,14 +607,18 @@ fn write_scope_tree(\n \n         let local_name = if local == RETURN_PLACE { \" return place\" } else { \"\" };\n \n-        writeln!(\n-            w,\n-            \"{0:1$} //{2} in {3}\",\n-            indented_decl,\n-            ALIGN,\n-            local_name,\n-            comment(tcx, local_decl.source_info, body.span),\n-        )?;\n+        if tcx.sess.opts.unstable_opts.mir_include_spans {\n+            writeln!(\n+                w,\n+                \"{0:1$} //{2} in {3}\",\n+                indented_decl,\n+                ALIGN,\n+                local_name,\n+                comment(tcx, local_decl.source_info),\n+            )?;\n+        } else {\n+            writeln!(w, \"{}\", indented_decl,)?;\n+        }\n     }\n \n     let Some(children) = scope_tree.get(&parent) else {\n@@ -627,14 +644,18 @@ fn write_scope_tree(\n \n         let indented_header = format!(\"{0:1$}scope {2}{3} {{\", \"\", indent, child.index(), special);\n \n-        if let Some(span) = span {\n-            writeln!(\n-                w,\n-                \"{0:1$} // at {2}\",\n-                indented_header,\n-                ALIGN,\n-                tcx.sess.source_map().span_to_embeddable_string(span),\n-            )?;\n+        if tcx.sess.opts.unstable_opts.mir_include_spans {\n+            if let Some(span) = span {\n+                writeln!(\n+                    w,\n+                    \"{0:1$} // at {2}\",\n+                    indented_header,\n+                    ALIGN,\n+                    tcx.sess.source_map().span_to_embeddable_string(span),\n+                )?;\n+            } else {\n+                writeln!(w, \"{}\", indented_header)?;\n+            }\n         } else {\n             writeln!(w, \"{}\", indented_header)?;\n         }"}, {"sha": "3d9f0a4e26855c5e8e62d86c24cd8ae19d9bbb7b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1558,14 +1558,14 @@ options! {\n         \"use like `-Zmir-enable-passes=+DestinationPropagation,-InstSimplify`. Forces the specified passes to be \\\n         enabled, overriding all other checks. Passes that are not specified are enabled or \\\n         disabled by other flags as usual.\"),\n+    mir_include_spans: bool = (false, parse_bool, [UNTRACKED],\n+        \"use line numbers relative to the function in mir pretty printing\"),\n     mir_keep_place_mention: bool = (false, parse_bool, [TRACKED],\n         \"keep place mention MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n         (default: no)\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::mir_opt_level` instead of this field\")]\n     mir_opt_level: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\"),\n-    mir_pretty_relative_line_numbers: bool = (false, parse_bool, [UNTRACKED],\n-        \"use line numbers relative to the function in mir pretty printing\"),\n     move_size_limit: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"the size at which the `large_assignments` lint starts to be emitted\"),\n     mutable_noalias: bool = (true, parse_bool, [TRACKED],"}, {"sha": "8c744d5d3c450b86bd55d6c0bec5cdea0de8d109", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2044,7 +2044,6 @@ impl<'test> TestCx<'test> {\n                     &zdump_arg,\n                     \"-Zvalidate-mir\",\n                     \"-Zdump-mir-exclude-pass-number\",\n-                    \"-Zmir-pretty-relative-line-numbers=yes\",\n                 ]);\n                 if let Some(pass) = &self.props.mir_unit_test {\n                     rustc.args(&[\"-Zmir-opt-level=0\", &format!(\"-Zmir-enable-passes=+{}\", pass)]);"}, {"sha": "93bf2b64deb4c619db04c5467fbb13eaf0b25bf5", "filename": "tests/mir-opt/address_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 241, "deletions": 241, "changes": 482, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -33,83 +33,83 @@\n | 29: user_ty: Canonical { value: Ty(*mut [i32]), max_universe: U0, variables: [] }, span: $DIR/address_of.rs:36:12: 36:22, inferred_ty: *mut [i32]\n |\n fn address_of_reborrow() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/address_of.rs:+0:26: +0:26\n-    let _1: &[i32; 10];                  // in scope 0 at $DIR/address_of.rs:+1:9: +1:10\n-    let _2: [i32; 10];                   // in scope 0 at $DIR/address_of.rs:+1:14: +1:21\n-    let mut _4: [i32; 10];               // in scope 0 at $DIR/address_of.rs:+2:22: +2:29\n-    let _5: *const [i32; 10];            // in scope 0 at $DIR/address_of.rs:+4:5: +4:18\n-    let mut _6: *const [i32; 10];        // in scope 0 at $DIR/address_of.rs:+4:5: +4:18\n-    let _7: *const [i32; 10];            // in scope 0 at $DIR/address_of.rs:+5:5: +5:26\n-    let _8: *const dyn std::marker::Send; // in scope 0 at $DIR/address_of.rs:+6:5: +6:25\n-    let mut _9: *const dyn std::marker::Send; // in scope 0 at $DIR/address_of.rs:+6:5: +6:25\n-    let mut _10: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+6:5: +6:6\n-    let _11: *const [i32];               // in scope 0 at $DIR/address_of.rs:+7:5: +7:22\n-    let mut _12: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+7:5: +7:6\n-    let _13: *const i32;                 // in scope 0 at $DIR/address_of.rs:+8:5: +8:20\n-    let mut _14: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+8:5: +8:6\n-    let mut _18: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+12:30: +12:31\n-    let mut _20: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+13:27: +13:28\n-    let _21: *const [i32; 10];           // in scope 0 at $DIR/address_of.rs:+15:5: +15:18\n-    let mut _22: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+15:5: +15:18\n-    let _23: *const [i32; 10];           // in scope 0 at $DIR/address_of.rs:+16:5: +16:26\n-    let _24: *const dyn std::marker::Send; // in scope 0 at $DIR/address_of.rs:+17:5: +17:25\n-    let mut _25: *const dyn std::marker::Send; // in scope 0 at $DIR/address_of.rs:+17:5: +17:25\n-    let mut _26: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+17:5: +17:6\n-    let _27: *const [i32];               // in scope 0 at $DIR/address_of.rs:+18:5: +18:22\n-    let mut _28: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+18:5: +18:6\n-    let mut _32: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+22:30: +22:31\n-    let mut _34: *const [i32; 10];       // in scope 0 at $DIR/address_of.rs:+23:27: +23:28\n-    let _35: *mut [i32; 10];             // in scope 0 at $DIR/address_of.rs:+25:5: +25:16\n-    let mut _36: *mut [i32; 10];         // in scope 0 at $DIR/address_of.rs:+25:5: +25:16\n-    let _37: *mut [i32; 10];             // in scope 0 at $DIR/address_of.rs:+26:5: +26:24\n-    let _38: *mut dyn std::marker::Send; // in scope 0 at $DIR/address_of.rs:+27:5: +27:23\n-    let mut _39: *mut dyn std::marker::Send; // in scope 0 at $DIR/address_of.rs:+27:5: +27:23\n-    let mut _40: *mut [i32; 10];         // in scope 0 at $DIR/address_of.rs:+27:5: +27:6\n-    let _41: *mut [i32];                 // in scope 0 at $DIR/address_of.rs:+28:5: +28:20\n-    let mut _42: *mut [i32; 10];         // in scope 0 at $DIR/address_of.rs:+28:5: +28:6\n-    let mut _46: *mut [i32; 10];         // in scope 0 at $DIR/address_of.rs:+32:28: +32:29\n-    let mut _48: *mut [i32; 10];         // in scope 0 at $DIR/address_of.rs:+33:25: +33:26\n+    let mut _0: ();\n+    let _1: &[i32; 10];\n+    let _2: [i32; 10];\n+    let mut _4: [i32; 10];\n+    let _5: *const [i32; 10];\n+    let mut _6: *const [i32; 10];\n+    let _7: *const [i32; 10];\n+    let _8: *const dyn std::marker::Send;\n+    let mut _9: *const dyn std::marker::Send;\n+    let mut _10: *const [i32; 10];\n+    let _11: *const [i32];\n+    let mut _12: *const [i32; 10];\n+    let _13: *const i32;\n+    let mut _14: *const [i32; 10];\n+    let mut _18: *const [i32; 10];\n+    let mut _20: *const [i32; 10];\n+    let _21: *const [i32; 10];\n+    let mut _22: *const [i32; 10];\n+    let _23: *const [i32; 10];\n+    let _24: *const dyn std::marker::Send;\n+    let mut _25: *const dyn std::marker::Send;\n+    let mut _26: *const [i32; 10];\n+    let _27: *const [i32];\n+    let mut _28: *const [i32; 10];\n+    let mut _32: *const [i32; 10];\n+    let mut _34: *const [i32; 10];\n+    let _35: *mut [i32; 10];\n+    let mut _36: *mut [i32; 10];\n+    let _37: *mut [i32; 10];\n+    let _38: *mut dyn std::marker::Send;\n+    let mut _39: *mut dyn std::marker::Send;\n+    let mut _40: *mut [i32; 10];\n+    let _41: *mut [i32];\n+    let mut _42: *mut [i32; 10];\n+    let mut _46: *mut [i32; 10];\n+    let mut _48: *mut [i32; 10];\n     scope 1 {\n-        debug y => _1;                   // in scope 1 at $DIR/address_of.rs:+1:9: +1:10\n-        let mut _3: &mut [i32; 10];      // in scope 1 at $DIR/address_of.rs:+2:9: +2:14\n+        debug y => _1;\n+        let mut _3: &mut [i32; 10];\n         scope 2 {\n-            debug z => _3;               // in scope 2 at $DIR/address_of.rs:+2:9: +2:14\n-            let _15: *const [i32; 10] as UserTypeProjection { base: UserType(2), projs: [] }; // in scope 2 at $DIR/address_of.rs:+10:9: +10:10\n+            debug z => _3;\n+            let _15: *const [i32; 10] as UserTypeProjection { base: UserType(2), projs: [] };\n             scope 3 {\n-                debug p => _15;          // in scope 3 at $DIR/address_of.rs:+10:9: +10:10\n-                let _16: *const [i32; 10] as UserTypeProjection { base: UserType(4), projs: [] }; // in scope 3 at $DIR/address_of.rs:+11:9: +11:10\n+                debug p => _15;\n+                let _16: *const [i32; 10] as UserTypeProjection { base: UserType(4), projs: [] };\n                 scope 4 {\n-                    debug p => _16;      // in scope 4 at $DIR/address_of.rs:+11:9: +11:10\n-                    let _17: *const dyn std::marker::Send as UserTypeProjection { base: UserType(6), projs: [] }; // in scope 4 at $DIR/address_of.rs:+12:9: +12:10\n+                    debug p => _16;\n+                    let _17: *const dyn std::marker::Send as UserTypeProjection { base: UserType(6), projs: [] };\n                     scope 5 {\n-                        debug p => _17;  // in scope 5 at $DIR/address_of.rs:+12:9: +12:10\n-                        let _19: *const [i32] as UserTypeProjection { base: UserType(8), projs: [] }; // in scope 5 at $DIR/address_of.rs:+13:9: +13:10\n+                        debug p => _17;\n+                        let _19: *const [i32] as UserTypeProjection { base: UserType(8), projs: [] };\n                         scope 6 {\n-                            debug p => _19; // in scope 6 at $DIR/address_of.rs:+13:9: +13:10\n-                            let _29: *const [i32; 10] as UserTypeProjection { base: UserType(12), projs: [] }; // in scope 6 at $DIR/address_of.rs:+20:9: +20:10\n+                            debug p => _19;\n+                            let _29: *const [i32; 10] as UserTypeProjection { base: UserType(12), projs: [] };\n                             scope 7 {\n-                                debug p => _29; // in scope 7 at $DIR/address_of.rs:+20:9: +20:10\n-                                let _30: *const [i32; 10] as UserTypeProjection { base: UserType(14), projs: [] }; // in scope 7 at $DIR/address_of.rs:+21:9: +21:10\n+                                debug p => _29;\n+                                let _30: *const [i32; 10] as UserTypeProjection { base: UserType(14), projs: [] };\n                                 scope 8 {\n-                                    debug p => _30; // in scope 8 at $DIR/address_of.rs:+21:9: +21:10\n-                                    let _31: *const dyn std::marker::Send as UserTypeProjection { base: UserType(16), projs: [] }; // in scope 8 at $DIR/address_of.rs:+22:9: +22:10\n+                                    debug p => _30;\n+                                    let _31: *const dyn std::marker::Send as UserTypeProjection { base: UserType(16), projs: [] };\n                                     scope 9 {\n-                                        debug p => _31; // in scope 9 at $DIR/address_of.rs:+22:9: +22:10\n-                                        let _33: *const [i32] as UserTypeProjection { base: UserType(18), projs: [] }; // in scope 9 at $DIR/address_of.rs:+23:9: +23:10\n+                                        debug p => _31;\n+                                        let _33: *const [i32] as UserTypeProjection { base: UserType(18), projs: [] };\n                                         scope 10 {\n-                                            debug p => _33; // in scope 10 at $DIR/address_of.rs:+23:9: +23:10\n-                                            let _43: *mut [i32; 10] as UserTypeProjection { base: UserType(22), projs: [] }; // in scope 10 at $DIR/address_of.rs:+30:9: +30:10\n+                                            debug p => _33;\n+                                            let _43: *mut [i32; 10] as UserTypeProjection { base: UserType(22), projs: [] };\n                                             scope 11 {\n-                                                debug p => _43; // in scope 11 at $DIR/address_of.rs:+30:9: +30:10\n-                                                let _44: *mut [i32; 10] as UserTypeProjection { base: UserType(24), projs: [] }; // in scope 11 at $DIR/address_of.rs:+31:9: +31:10\n+                                                debug p => _43;\n+                                                let _44: *mut [i32; 10] as UserTypeProjection { base: UserType(24), projs: [] };\n                                                 scope 12 {\n-                                                    debug p => _44; // in scope 12 at $DIR/address_of.rs:+31:9: +31:10\n-                                                    let _45: *mut dyn std::marker::Send as UserTypeProjection { base: UserType(26), projs: [] }; // in scope 12 at $DIR/address_of.rs:+32:9: +32:10\n+                                                    debug p => _44;\n+                                                    let _45: *mut dyn std::marker::Send as UserTypeProjection { base: UserType(26), projs: [] };\n                                                     scope 13 {\n-                                                        debug p => _45; // in scope 13 at $DIR/address_of.rs:+32:9: +32:10\n-                                                        let _47: *mut [i32] as UserTypeProjection { base: UserType(28), projs: [] }; // in scope 13 at $DIR/address_of.rs:+33:9: +33:10\n+                                                        debug p => _45;\n+                                                        let _47: *mut [i32] as UserTypeProjection { base: UserType(28), projs: [] };\n                                                         scope 14 {\n-                                                            debug p => _47; // in scope 14 at $DIR/address_of.rs:+33:9: +33:10\n+                                                            debug p => _47;\n                                                         }\n                                                     }\n                                                 }\n@@ -126,183 +126,183 @@ fn address_of_reborrow() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/address_of.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 0 at $DIR/address_of.rs:+1:14: +1:21\n-        _2 = [const 0_i32; 10];          // scope 0 at $DIR/address_of.rs:+1:14: +1:21\n-        _1 = &_2;                        // scope 0 at $DIR/address_of.rs:+1:13: +1:21\n-        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/address_of.rs:+1:9: +1:10\n-        StorageLive(_3);                 // scope 1 at $DIR/address_of.rs:+2:9: +2:14\n-        StorageLive(_4);                 // scope 1 at $DIR/address_of.rs:+2:22: +2:29\n-        _4 = [const 0_i32; 10];          // scope 1 at $DIR/address_of.rs:+2:22: +2:29\n-        _3 = &mut _4;                    // scope 1 at $DIR/address_of.rs:+2:17: +2:29\n-        FakeRead(ForLet(None), _3);      // scope 1 at $DIR/address_of.rs:+2:9: +2:14\n-        StorageLive(_5);                 // scope 2 at $DIR/address_of.rs:+4:5: +4:18\n-        StorageLive(_6);                 // scope 2 at $DIR/address_of.rs:+4:5: +4:18\n-        _6 = &raw const (*_1);           // scope 2 at $DIR/address_of.rs:+4:5: +4:6\n-        AscribeUserType(_6, o, UserTypeProjection { base: UserType(0), projs: [] }); // scope 2 at $DIR/address_of.rs:+4:5: +4:18\n-        _5 = _6;                         // scope 2 at $DIR/address_of.rs:+4:5: +4:18\n-        StorageDead(_6);                 // scope 2 at $DIR/address_of.rs:+4:18: +4:19\n-        StorageDead(_5);                 // scope 2 at $DIR/address_of.rs:+4:18: +4:19\n-        StorageLive(_7);                 // scope 2 at $DIR/address_of.rs:+5:5: +5:26\n-        _7 = &raw const (*_1);           // scope 2 at $DIR/address_of.rs:+5:5: +5:6\n-        StorageDead(_7);                 // scope 2 at $DIR/address_of.rs:+5:26: +5:27\n-        StorageLive(_8);                 // scope 2 at $DIR/address_of.rs:+6:5: +6:25\n-        StorageLive(_9);                 // scope 2 at $DIR/address_of.rs:+6:5: +6:25\n-        StorageLive(_10);                // scope 2 at $DIR/address_of.rs:+6:5: +6:6\n-        _10 = &raw const (*_1);          // scope 2 at $DIR/address_of.rs:+6:5: +6:6\n-        _9 = move _10 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 2 at $DIR/address_of.rs:+6:5: +6:6\n-        StorageDead(_10);                // scope 2 at $DIR/address_of.rs:+6:5: +6:6\n-        AscribeUserType(_9, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 2 at $DIR/address_of.rs:+6:5: +6:25\n-        _8 = _9;                         // scope 2 at $DIR/address_of.rs:+6:5: +6:25\n-        StorageDead(_9);                 // scope 2 at $DIR/address_of.rs:+6:25: +6:26\n-        StorageDead(_8);                 // scope 2 at $DIR/address_of.rs:+6:25: +6:26\n-        StorageLive(_11);                // scope 2 at $DIR/address_of.rs:+7:5: +7:22\n-        StorageLive(_12);                // scope 2 at $DIR/address_of.rs:+7:5: +7:6\n-        _12 = &raw const (*_1);          // scope 2 at $DIR/address_of.rs:+7:5: +7:6\n-        _11 = move _12 as *const [i32] (Pointer(Unsize)); // scope 2 at $DIR/address_of.rs:+7:5: +7:6\n-        StorageDead(_12);                // scope 2 at $DIR/address_of.rs:+7:5: +7:6\n-        StorageDead(_11);                // scope 2 at $DIR/address_of.rs:+7:22: +7:23\n-        StorageLive(_13);                // scope 2 at $DIR/address_of.rs:+8:5: +8:20\n-        StorageLive(_14);                // scope 2 at $DIR/address_of.rs:+8:5: +8:6\n-        _14 = &raw const (*_1);          // scope 2 at $DIR/address_of.rs:+8:5: +8:6\n-        _13 = move _14 as *const i32 (Pointer(ArrayToPointer)); // scope 2 at $DIR/address_of.rs:+8:5: +8:20\n-        StorageDead(_14);                // scope 2 at $DIR/address_of.rs:+8:19: +8:20\n-        StorageDead(_13);                // scope 2 at $DIR/address_of.rs:+8:20: +8:21\n-        StorageLive(_15);                // scope 2 at $DIR/address_of.rs:+10:9: +10:10\n-        _15 = &raw const (*_1);          // scope 2 at $DIR/address_of.rs:+10:23: +10:24\n-        FakeRead(ForLet(None), _15);     // scope 2 at $DIR/address_of.rs:+10:9: +10:10\n-        AscribeUserType(_15, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 2 at $DIR/address_of.rs:+10:12: +10:20\n-        StorageLive(_16);                // scope 3 at $DIR/address_of.rs:+11:9: +11:10\n-        _16 = &raw const (*_1);          // scope 3 at $DIR/address_of.rs:+11:31: +11:32\n-        FakeRead(ForLet(None), _16);     // scope 3 at $DIR/address_of.rs:+11:9: +11:10\n-        AscribeUserType(_16, o, UserTypeProjection { base: UserType(5), projs: [] }); // scope 3 at $DIR/address_of.rs:+11:12: +11:28\n-        StorageLive(_17);                // scope 4 at $DIR/address_of.rs:+12:9: +12:10\n-        StorageLive(_18);                // scope 4 at $DIR/address_of.rs:+12:30: +12:31\n-        _18 = &raw const (*_1);          // scope 4 at $DIR/address_of.rs:+12:30: +12:31\n-        _17 = move _18 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 4 at $DIR/address_of.rs:+12:30: +12:31\n-        StorageDead(_18);                // scope 4 at $DIR/address_of.rs:+12:30: +12:31\n-        FakeRead(ForLet(None), _17);     // scope 4 at $DIR/address_of.rs:+12:9: +12:10\n-        AscribeUserType(_17, o, UserTypeProjection { base: UserType(7), projs: [] }); // scope 4 at $DIR/address_of.rs:+12:12: +12:27\n-        StorageLive(_19);                // scope 5 at $DIR/address_of.rs:+13:9: +13:10\n-        StorageLive(_20);                // scope 5 at $DIR/address_of.rs:+13:27: +13:28\n-        _20 = &raw const (*_1);          // scope 5 at $DIR/address_of.rs:+13:27: +13:28\n-        _19 = move _20 as *const [i32] (Pointer(Unsize)); // scope 5 at $DIR/address_of.rs:+13:27: +13:28\n-        StorageDead(_20);                // scope 5 at $DIR/address_of.rs:+13:27: +13:28\n-        FakeRead(ForLet(None), _19);     // scope 5 at $DIR/address_of.rs:+13:9: +13:10\n-        AscribeUserType(_19, o, UserTypeProjection { base: UserType(9), projs: [] }); // scope 5 at $DIR/address_of.rs:+13:12: +13:24\n-        StorageLive(_21);                // scope 6 at $DIR/address_of.rs:+15:5: +15:18\n-        StorageLive(_22);                // scope 6 at $DIR/address_of.rs:+15:5: +15:18\n-        _22 = &raw const (*_3);          // scope 6 at $DIR/address_of.rs:+15:5: +15:6\n-        AscribeUserType(_22, o, UserTypeProjection { base: UserType(10), projs: [] }); // scope 6 at $DIR/address_of.rs:+15:5: +15:18\n-        _21 = _22;                       // scope 6 at $DIR/address_of.rs:+15:5: +15:18\n-        StorageDead(_22);                // scope 6 at $DIR/address_of.rs:+15:18: +15:19\n-        StorageDead(_21);                // scope 6 at $DIR/address_of.rs:+15:18: +15:19\n-        StorageLive(_23);                // scope 6 at $DIR/address_of.rs:+16:5: +16:26\n-        _23 = &raw const (*_3);          // scope 6 at $DIR/address_of.rs:+16:5: +16:6\n-        StorageDead(_23);                // scope 6 at $DIR/address_of.rs:+16:26: +16:27\n-        StorageLive(_24);                // scope 6 at $DIR/address_of.rs:+17:5: +17:25\n-        StorageLive(_25);                // scope 6 at $DIR/address_of.rs:+17:5: +17:25\n-        StorageLive(_26);                // scope 6 at $DIR/address_of.rs:+17:5: +17:6\n-        _26 = &raw const (*_3);          // scope 6 at $DIR/address_of.rs:+17:5: +17:6\n-        _25 = move _26 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 6 at $DIR/address_of.rs:+17:5: +17:6\n-        StorageDead(_26);                // scope 6 at $DIR/address_of.rs:+17:5: +17:6\n-        AscribeUserType(_25, o, UserTypeProjection { base: UserType(11), projs: [] }); // scope 6 at $DIR/address_of.rs:+17:5: +17:25\n-        _24 = _25;                       // scope 6 at $DIR/address_of.rs:+17:5: +17:25\n-        StorageDead(_25);                // scope 6 at $DIR/address_of.rs:+17:25: +17:26\n-        StorageDead(_24);                // scope 6 at $DIR/address_of.rs:+17:25: +17:26\n-        StorageLive(_27);                // scope 6 at $DIR/address_of.rs:+18:5: +18:22\n-        StorageLive(_28);                // scope 6 at $DIR/address_of.rs:+18:5: +18:6\n-        _28 = &raw const (*_3);          // scope 6 at $DIR/address_of.rs:+18:5: +18:6\n-        _27 = move _28 as *const [i32] (Pointer(Unsize)); // scope 6 at $DIR/address_of.rs:+18:5: +18:6\n-        StorageDead(_28);                // scope 6 at $DIR/address_of.rs:+18:5: +18:6\n-        StorageDead(_27);                // scope 6 at $DIR/address_of.rs:+18:22: +18:23\n-        StorageLive(_29);                // scope 6 at $DIR/address_of.rs:+20:9: +20:10\n-        _29 = &raw const (*_3);          // scope 6 at $DIR/address_of.rs:+20:23: +20:24\n-        FakeRead(ForLet(None), _29);     // scope 6 at $DIR/address_of.rs:+20:9: +20:10\n-        AscribeUserType(_29, o, UserTypeProjection { base: UserType(13), projs: [] }); // scope 6 at $DIR/address_of.rs:+20:12: +20:20\n-        StorageLive(_30);                // scope 7 at $DIR/address_of.rs:+21:9: +21:10\n-        _30 = &raw const (*_3);          // scope 7 at $DIR/address_of.rs:+21:31: +21:32\n-        FakeRead(ForLet(None), _30);     // scope 7 at $DIR/address_of.rs:+21:9: +21:10\n-        AscribeUserType(_30, o, UserTypeProjection { base: UserType(15), projs: [] }); // scope 7 at $DIR/address_of.rs:+21:12: +21:28\n-        StorageLive(_31);                // scope 8 at $DIR/address_of.rs:+22:9: +22:10\n-        StorageLive(_32);                // scope 8 at $DIR/address_of.rs:+22:30: +22:31\n-        _32 = &raw const (*_3);          // scope 8 at $DIR/address_of.rs:+22:30: +22:31\n-        _31 = move _32 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 8 at $DIR/address_of.rs:+22:30: +22:31\n-        StorageDead(_32);                // scope 8 at $DIR/address_of.rs:+22:30: +22:31\n-        FakeRead(ForLet(None), _31);     // scope 8 at $DIR/address_of.rs:+22:9: +22:10\n-        AscribeUserType(_31, o, UserTypeProjection { base: UserType(17), projs: [] }); // scope 8 at $DIR/address_of.rs:+22:12: +22:27\n-        StorageLive(_33);                // scope 9 at $DIR/address_of.rs:+23:9: +23:10\n-        StorageLive(_34);                // scope 9 at $DIR/address_of.rs:+23:27: +23:28\n-        _34 = &raw const (*_3);          // scope 9 at $DIR/address_of.rs:+23:27: +23:28\n-        _33 = move _34 as *const [i32] (Pointer(Unsize)); // scope 9 at $DIR/address_of.rs:+23:27: +23:28\n-        StorageDead(_34);                // scope 9 at $DIR/address_of.rs:+23:27: +23:28\n-        FakeRead(ForLet(None), _33);     // scope 9 at $DIR/address_of.rs:+23:9: +23:10\n-        AscribeUserType(_33, o, UserTypeProjection { base: UserType(19), projs: [] }); // scope 9 at $DIR/address_of.rs:+23:12: +23:24\n-        StorageLive(_35);                // scope 10 at $DIR/address_of.rs:+25:5: +25:16\n-        StorageLive(_36);                // scope 10 at $DIR/address_of.rs:+25:5: +25:16\n-        _36 = &raw mut (*_3);            // scope 10 at $DIR/address_of.rs:+25:5: +25:6\n-        AscribeUserType(_36, o, UserTypeProjection { base: UserType(20), projs: [] }); // scope 10 at $DIR/address_of.rs:+25:5: +25:16\n-        _35 = _36;                       // scope 10 at $DIR/address_of.rs:+25:5: +25:16\n-        StorageDead(_36);                // scope 10 at $DIR/address_of.rs:+25:16: +25:17\n-        StorageDead(_35);                // scope 10 at $DIR/address_of.rs:+25:16: +25:17\n-        StorageLive(_37);                // scope 10 at $DIR/address_of.rs:+26:5: +26:24\n-        _37 = &raw mut (*_3);            // scope 10 at $DIR/address_of.rs:+26:5: +26:6\n-        StorageDead(_37);                // scope 10 at $DIR/address_of.rs:+26:24: +26:25\n-        StorageLive(_38);                // scope 10 at $DIR/address_of.rs:+27:5: +27:23\n-        StorageLive(_39);                // scope 10 at $DIR/address_of.rs:+27:5: +27:23\n-        StorageLive(_40);                // scope 10 at $DIR/address_of.rs:+27:5: +27:6\n-        _40 = &raw mut (*_3);            // scope 10 at $DIR/address_of.rs:+27:5: +27:6\n-        _39 = move _40 as *mut dyn std::marker::Send (Pointer(Unsize)); // scope 10 at $DIR/address_of.rs:+27:5: +27:6\n-        StorageDead(_40);                // scope 10 at $DIR/address_of.rs:+27:5: +27:6\n-        AscribeUserType(_39, o, UserTypeProjection { base: UserType(21), projs: [] }); // scope 10 at $DIR/address_of.rs:+27:5: +27:23\n-        _38 = _39;                       // scope 10 at $DIR/address_of.rs:+27:5: +27:23\n-        StorageDead(_39);                // scope 10 at $DIR/address_of.rs:+27:23: +27:24\n-        StorageDead(_38);                // scope 10 at $DIR/address_of.rs:+27:23: +27:24\n-        StorageLive(_41);                // scope 10 at $DIR/address_of.rs:+28:5: +28:20\n-        StorageLive(_42);                // scope 10 at $DIR/address_of.rs:+28:5: +28:6\n-        _42 = &raw mut (*_3);            // scope 10 at $DIR/address_of.rs:+28:5: +28:6\n-        _41 = move _42 as *mut [i32] (Pointer(Unsize)); // scope 10 at $DIR/address_of.rs:+28:5: +28:6\n-        StorageDead(_42);                // scope 10 at $DIR/address_of.rs:+28:5: +28:6\n-        StorageDead(_41);                // scope 10 at $DIR/address_of.rs:+28:20: +28:21\n-        StorageLive(_43);                // scope 10 at $DIR/address_of.rs:+30:9: +30:10\n-        _43 = &raw mut (*_3);            // scope 10 at $DIR/address_of.rs:+30:21: +30:22\n-        FakeRead(ForLet(None), _43);     // scope 10 at $DIR/address_of.rs:+30:9: +30:10\n-        AscribeUserType(_43, o, UserTypeProjection { base: UserType(23), projs: [] }); // scope 10 at $DIR/address_of.rs:+30:12: +30:18\n-        StorageLive(_44);                // scope 11 at $DIR/address_of.rs:+31:9: +31:10\n-        _44 = &raw mut (*_3);            // scope 11 at $DIR/address_of.rs:+31:29: +31:30\n-        FakeRead(ForLet(None), _44);     // scope 11 at $DIR/address_of.rs:+31:9: +31:10\n-        AscribeUserType(_44, o, UserTypeProjection { base: UserType(25), projs: [] }); // scope 11 at $DIR/address_of.rs:+31:12: +31:26\n-        StorageLive(_45);                // scope 12 at $DIR/address_of.rs:+32:9: +32:10\n-        StorageLive(_46);                // scope 12 at $DIR/address_of.rs:+32:28: +32:29\n-        _46 = &raw mut (*_3);            // scope 12 at $DIR/address_of.rs:+32:28: +32:29\n-        _45 = move _46 as *mut dyn std::marker::Send (Pointer(Unsize)); // scope 12 at $DIR/address_of.rs:+32:28: +32:29\n-        StorageDead(_46);                // scope 12 at $DIR/address_of.rs:+32:28: +32:29\n-        FakeRead(ForLet(None), _45);     // scope 12 at $DIR/address_of.rs:+32:9: +32:10\n-        AscribeUserType(_45, o, UserTypeProjection { base: UserType(27), projs: [] }); // scope 12 at $DIR/address_of.rs:+32:12: +32:25\n-        StorageLive(_47);                // scope 13 at $DIR/address_of.rs:+33:9: +33:10\n-        StorageLive(_48);                // scope 13 at $DIR/address_of.rs:+33:25: +33:26\n-        _48 = &raw mut (*_3);            // scope 13 at $DIR/address_of.rs:+33:25: +33:26\n-        _47 = move _48 as *mut [i32] (Pointer(Unsize)); // scope 13 at $DIR/address_of.rs:+33:25: +33:26\n-        StorageDead(_48);                // scope 13 at $DIR/address_of.rs:+33:25: +33:26\n-        FakeRead(ForLet(None), _47);     // scope 13 at $DIR/address_of.rs:+33:9: +33:10\n-        AscribeUserType(_47, o, UserTypeProjection { base: UserType(29), projs: [] }); // scope 13 at $DIR/address_of.rs:+33:12: +33:22\n-        _0 = const ();                   // scope 0 at $DIR/address_of.rs:+0:26: +34:2\n-        StorageDead(_47);                // scope 13 at $DIR/address_of.rs:+34:1: +34:2\n-        StorageDead(_45);                // scope 12 at $DIR/address_of.rs:+34:1: +34:2\n-        StorageDead(_44);                // scope 11 at $DIR/address_of.rs:+34:1: +34:2\n-        StorageDead(_43);                // scope 10 at $DIR/address_of.rs:+34:1: +34:2\n-        StorageDead(_33);                // scope 9 at $DIR/address_of.rs:+34:1: +34:2\n-        StorageDead(_31);                // scope 8 at $DIR/address_of.rs:+34:1: +34:2\n-        StorageDead(_30);                // scope 7 at $DIR/address_of.rs:+34:1: +34:2\n-        StorageDead(_29);                // scope 6 at $DIR/address_of.rs:+34:1: +34:2\n-        StorageDead(_19);                // scope 5 at $DIR/address_of.rs:+34:1: +34:2\n-        StorageDead(_17);                // scope 4 at $DIR/address_of.rs:+34:1: +34:2\n-        StorageDead(_16);                // scope 3 at $DIR/address_of.rs:+34:1: +34:2\n-        StorageDead(_15);                // scope 2 at $DIR/address_of.rs:+34:1: +34:2\n-        StorageDead(_4);                 // scope 1 at $DIR/address_of.rs:+34:1: +34:2\n-        StorageDead(_3);                 // scope 1 at $DIR/address_of.rs:+34:1: +34:2\n-        StorageDead(_2);                 // scope 0 at $DIR/address_of.rs:+34:1: +34:2\n-        StorageDead(_1);                 // scope 0 at $DIR/address_of.rs:+34:1: +34:2\n-        return;                          // scope 0 at $DIR/address_of.rs:+34:2: +34:2\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        _2 = [const 0_i32; 10];\n+        _1 = &_2;\n+        FakeRead(ForLet(None), _1);\n+        StorageLive(_3);\n+        StorageLive(_4);\n+        _4 = [const 0_i32; 10];\n+        _3 = &mut _4;\n+        FakeRead(ForLet(None), _3);\n+        StorageLive(_5);\n+        StorageLive(_6);\n+        _6 = &raw const (*_1);\n+        AscribeUserType(_6, o, UserTypeProjection { base: UserType(0), projs: [] });\n+        _5 = _6;\n+        StorageDead(_6);\n+        StorageDead(_5);\n+        StorageLive(_7);\n+        _7 = &raw const (*_1);\n+        StorageDead(_7);\n+        StorageLive(_8);\n+        StorageLive(_9);\n+        StorageLive(_10);\n+        _10 = &raw const (*_1);\n+        _9 = move _10 as *const dyn std::marker::Send (Pointer(Unsize));\n+        StorageDead(_10);\n+        AscribeUserType(_9, o, UserTypeProjection { base: UserType(1), projs: [] });\n+        _8 = _9;\n+        StorageDead(_9);\n+        StorageDead(_8);\n+        StorageLive(_11);\n+        StorageLive(_12);\n+        _12 = &raw const (*_1);\n+        _11 = move _12 as *const [i32] (Pointer(Unsize));\n+        StorageDead(_12);\n+        StorageDead(_11);\n+        StorageLive(_13);\n+        StorageLive(_14);\n+        _14 = &raw const (*_1);\n+        _13 = move _14 as *const i32 (Pointer(ArrayToPointer));\n+        StorageDead(_14);\n+        StorageDead(_13);\n+        StorageLive(_15);\n+        _15 = &raw const (*_1);\n+        FakeRead(ForLet(None), _15);\n+        AscribeUserType(_15, o, UserTypeProjection { base: UserType(3), projs: [] });\n+        StorageLive(_16);\n+        _16 = &raw const (*_1);\n+        FakeRead(ForLet(None), _16);\n+        AscribeUserType(_16, o, UserTypeProjection { base: UserType(5), projs: [] });\n+        StorageLive(_17);\n+        StorageLive(_18);\n+        _18 = &raw const (*_1);\n+        _17 = move _18 as *const dyn std::marker::Send (Pointer(Unsize));\n+        StorageDead(_18);\n+        FakeRead(ForLet(None), _17);\n+        AscribeUserType(_17, o, UserTypeProjection { base: UserType(7), projs: [] });\n+        StorageLive(_19);\n+        StorageLive(_20);\n+        _20 = &raw const (*_1);\n+        _19 = move _20 as *const [i32] (Pointer(Unsize));\n+        StorageDead(_20);\n+        FakeRead(ForLet(None), _19);\n+        AscribeUserType(_19, o, UserTypeProjection { base: UserType(9), projs: [] });\n+        StorageLive(_21);\n+        StorageLive(_22);\n+        _22 = &raw const (*_3);\n+        AscribeUserType(_22, o, UserTypeProjection { base: UserType(10), projs: [] });\n+        _21 = _22;\n+        StorageDead(_22);\n+        StorageDead(_21);\n+        StorageLive(_23);\n+        _23 = &raw const (*_3);\n+        StorageDead(_23);\n+        StorageLive(_24);\n+        StorageLive(_25);\n+        StorageLive(_26);\n+        _26 = &raw const (*_3);\n+        _25 = move _26 as *const dyn std::marker::Send (Pointer(Unsize));\n+        StorageDead(_26);\n+        AscribeUserType(_25, o, UserTypeProjection { base: UserType(11), projs: [] });\n+        _24 = _25;\n+        StorageDead(_25);\n+        StorageDead(_24);\n+        StorageLive(_27);\n+        StorageLive(_28);\n+        _28 = &raw const (*_3);\n+        _27 = move _28 as *const [i32] (Pointer(Unsize));\n+        StorageDead(_28);\n+        StorageDead(_27);\n+        StorageLive(_29);\n+        _29 = &raw const (*_3);\n+        FakeRead(ForLet(None), _29);\n+        AscribeUserType(_29, o, UserTypeProjection { base: UserType(13), projs: [] });\n+        StorageLive(_30);\n+        _30 = &raw const (*_3);\n+        FakeRead(ForLet(None), _30);\n+        AscribeUserType(_30, o, UserTypeProjection { base: UserType(15), projs: [] });\n+        StorageLive(_31);\n+        StorageLive(_32);\n+        _32 = &raw const (*_3);\n+        _31 = move _32 as *const dyn std::marker::Send (Pointer(Unsize));\n+        StorageDead(_32);\n+        FakeRead(ForLet(None), _31);\n+        AscribeUserType(_31, o, UserTypeProjection { base: UserType(17), projs: [] });\n+        StorageLive(_33);\n+        StorageLive(_34);\n+        _34 = &raw const (*_3);\n+        _33 = move _34 as *const [i32] (Pointer(Unsize));\n+        StorageDead(_34);\n+        FakeRead(ForLet(None), _33);\n+        AscribeUserType(_33, o, UserTypeProjection { base: UserType(19), projs: [] });\n+        StorageLive(_35);\n+        StorageLive(_36);\n+        _36 = &raw mut (*_3);\n+        AscribeUserType(_36, o, UserTypeProjection { base: UserType(20), projs: [] });\n+        _35 = _36;\n+        StorageDead(_36);\n+        StorageDead(_35);\n+        StorageLive(_37);\n+        _37 = &raw mut (*_3);\n+        StorageDead(_37);\n+        StorageLive(_38);\n+        StorageLive(_39);\n+        StorageLive(_40);\n+        _40 = &raw mut (*_3);\n+        _39 = move _40 as *mut dyn std::marker::Send (Pointer(Unsize));\n+        StorageDead(_40);\n+        AscribeUserType(_39, o, UserTypeProjection { base: UserType(21), projs: [] });\n+        _38 = _39;\n+        StorageDead(_39);\n+        StorageDead(_38);\n+        StorageLive(_41);\n+        StorageLive(_42);\n+        _42 = &raw mut (*_3);\n+        _41 = move _42 as *mut [i32] (Pointer(Unsize));\n+        StorageDead(_42);\n+        StorageDead(_41);\n+        StorageLive(_43);\n+        _43 = &raw mut (*_3);\n+        FakeRead(ForLet(None), _43);\n+        AscribeUserType(_43, o, UserTypeProjection { base: UserType(23), projs: [] });\n+        StorageLive(_44);\n+        _44 = &raw mut (*_3);\n+        FakeRead(ForLet(None), _44);\n+        AscribeUserType(_44, o, UserTypeProjection { base: UserType(25), projs: [] });\n+        StorageLive(_45);\n+        StorageLive(_46);\n+        _46 = &raw mut (*_3);\n+        _45 = move _46 as *mut dyn std::marker::Send (Pointer(Unsize));\n+        StorageDead(_46);\n+        FakeRead(ForLet(None), _45);\n+        AscribeUserType(_45, o, UserTypeProjection { base: UserType(27), projs: [] });\n+        StorageLive(_47);\n+        StorageLive(_48);\n+        _48 = &raw mut (*_3);\n+        _47 = move _48 as *mut [i32] (Pointer(Unsize));\n+        StorageDead(_48);\n+        FakeRead(ForLet(None), _47);\n+        AscribeUserType(_47, o, UserTypeProjection { base: UserType(29), projs: [] });\n+        _0 = const ();\n+        StorageDead(_47);\n+        StorageDead(_45);\n+        StorageDead(_44);\n+        StorageDead(_43);\n+        StorageDead(_33);\n+        StorageDead(_31);\n+        StorageDead(_30);\n+        StorageDead(_29);\n+        StorageDead(_19);\n+        StorageDead(_17);\n+        StorageDead(_16);\n+        StorageDead(_15);\n+        StorageDead(_4);\n+        StorageDead(_3);\n+        StorageDead(_2);\n+        StorageDead(_1);\n+        return;\n     }\n }"}, {"sha": "a07ccd4605ead95b43a1d57ed9f50bd9d4583965", "filename": "tests/mir-opt/address_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,47 +1,47 @@\n // MIR for `borrow_and_cast` after SimplifyCfg-initial\n \n fn borrow_and_cast(_1: i32) -> () {\n-    debug x => _1;                       // in scope 0 at $DIR/address_of.rs:+0:20: +0:25\n-    let mut _0: ();                      // return place in scope 0 at $DIR/address_of.rs:+0:32: +0:32\n-    let _2: *const i32;                  // in scope 0 at $DIR/address_of.rs:+1:9: +1:10\n-    let _3: &i32;                        // in scope 0 at $DIR/address_of.rs:+1:13: +1:15\n-    let _5: &mut i32;                    // in scope 0 at $DIR/address_of.rs:+2:13: +2:19\n-    let mut _7: &mut i32;                // in scope 0 at $DIR/address_of.rs:+3:13: +3:19\n+    debug x => _1;\n+    let mut _0: ();\n+    let _2: *const i32;\n+    let _3: &i32;\n+    let _5: &mut i32;\n+    let mut _7: &mut i32;\n     scope 1 {\n-        debug p => _2;                   // in scope 1 at $DIR/address_of.rs:+1:9: +1:10\n-        let _4: *const i32;              // in scope 1 at $DIR/address_of.rs:+2:9: +2:10\n+        debug p => _2;\n+        let _4: *const i32;\n         scope 2 {\n-            debug q => _4;               // in scope 2 at $DIR/address_of.rs:+2:9: +2:10\n-            let _6: *mut i32;            // in scope 2 at $DIR/address_of.rs:+3:9: +3:10\n+            debug q => _4;\n+            let _6: *mut i32;\n             scope 3 {\n-                debug r => _6;           // in scope 3 at $DIR/address_of.rs:+3:9: +3:10\n+                debug r => _6;\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/address_of.rs:+1:9: +1:10\n-        StorageLive(_3);                 // scope 0 at $DIR/address_of.rs:+1:13: +1:15\n-        _3 = &_1;                        // scope 0 at $DIR/address_of.rs:+1:13: +1:15\n-        _2 = &raw const (*_3);           // scope 0 at $DIR/address_of.rs:+1:13: +1:15\n-        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/address_of.rs:+1:9: +1:10\n-        StorageDead(_3);                 // scope 0 at $DIR/address_of.rs:+1:29: +1:30\n-        StorageLive(_4);                 // scope 1 at $DIR/address_of.rs:+2:9: +2:10\n-        StorageLive(_5);                 // scope 1 at $DIR/address_of.rs:+2:13: +2:19\n-        _5 = &mut _1;                    // scope 1 at $DIR/address_of.rs:+2:13: +2:19\n-        _4 = &raw const (*_5);           // scope 1 at $DIR/address_of.rs:+2:13: +2:19\n-        FakeRead(ForLet(None), _4);      // scope 1 at $DIR/address_of.rs:+2:9: +2:10\n-        StorageDead(_5);                 // scope 1 at $DIR/address_of.rs:+2:33: +2:34\n-        StorageLive(_6);                 // scope 2 at $DIR/address_of.rs:+3:9: +3:10\n-        StorageLive(_7);                 // scope 2 at $DIR/address_of.rs:+3:13: +3:19\n-        _7 = &mut _1;                    // scope 2 at $DIR/address_of.rs:+3:13: +3:19\n-        _6 = &raw mut (*_7);             // scope 2 at $DIR/address_of.rs:+3:13: +3:19\n-        FakeRead(ForLet(None), _6);      // scope 2 at $DIR/address_of.rs:+3:9: +3:10\n-        StorageDead(_7);                 // scope 2 at $DIR/address_of.rs:+3:31: +3:32\n-        _0 = const ();                   // scope 0 at $DIR/address_of.rs:+0:32: +4:2\n-        StorageDead(_6);                 // scope 2 at $DIR/address_of.rs:+4:1: +4:2\n-        StorageDead(_4);                 // scope 1 at $DIR/address_of.rs:+4:1: +4:2\n-        StorageDead(_2);                 // scope 0 at $DIR/address_of.rs:+4:1: +4:2\n-        return;                          // scope 0 at $DIR/address_of.rs:+4:2: +4:2\n+        StorageLive(_2);\n+        StorageLive(_3);\n+        _3 = &_1;\n+        _2 = &raw const (*_3);\n+        FakeRead(ForLet(None), _2);\n+        StorageDead(_3);\n+        StorageLive(_4);\n+        StorageLive(_5);\n+        _5 = &mut _1;\n+        _4 = &raw const (*_5);\n+        FakeRead(ForLet(None), _4);\n+        StorageDead(_5);\n+        StorageLive(_6);\n+        StorageLive(_7);\n+        _7 = &mut _1;\n+        _6 = &raw mut (*_7);\n+        FakeRead(ForLet(None), _6);\n+        StorageDead(_7);\n+        _0 = const ();\n+        StorageDead(_6);\n+        StorageDead(_4);\n+        StorageDead(_2);\n+        return;\n     }\n }"}, {"sha": "9b4c221df73d3ca2d1d5401d90885697223daf0d", "filename": "tests/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-abort.mir", "status": "modified", "additions": 40, "deletions": 43, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-abort.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,64 +1,61 @@\n // MIR for `main` after SimplifyCfg-elaborate-drops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/array_index_is_temporary.rs:+0:11: +0:11\n-    let mut _1: [u32; 3];                // in scope 0 at $DIR/array_index_is_temporary.rs:+1:9: +1:14\n-    let mut _4: &mut usize;              // in scope 0 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n-    let mut _5: u32;                     // in scope 0 at $DIR/array_index_is_temporary.rs:+4:12: +4:29\n-    let mut _6: *mut usize;              // in scope 0 at $DIR/array_index_is_temporary.rs:+4:25: +4:26\n-    let _7: usize;                       // in scope 0 at $DIR/array_index_is_temporary.rs:+4:7: +4:8\n-    let mut _8: usize;                   // in scope 0 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n-    let mut _9: bool;                    // in scope 0 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n+    let mut _0: ();\n+    let mut _1: [u32; 3];\n+    let mut _4: &mut usize;\n+    let mut _5: u32;\n+    let mut _6: *mut usize;\n+    let _7: usize;\n+    let mut _8: usize;\n+    let mut _9: bool;\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/array_index_is_temporary.rs:+1:9: +1:14\n-        let mut _2: usize;               // in scope 1 at $DIR/array_index_is_temporary.rs:+2:9: +2:14\n+        debug x => _1;\n+        let mut _2: usize;\n         scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/array_index_is_temporary.rs:+2:9: +2:14\n-            let _3: *mut usize;          // in scope 2 at $DIR/array_index_is_temporary.rs:+3:9: +3:10\n+            debug y => _2;\n+            let _3: *mut usize;\n             scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/array_index_is_temporary.rs:+3:9: +3:10\n+                debug z => _3;\n                 scope 4 {\n                 }\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/array_index_is_temporary.rs:+1:9: +1:14\n-        _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at $DIR/array_index_is_temporary.rs:+1:17: +1:29\n-        StorageLive(_2);                 // scope 1 at $DIR/array_index_is_temporary.rs:+2:9: +2:14\n-        _2 = const 1_usize;              // scope 1 at $DIR/array_index_is_temporary.rs:+2:17: +2:18\n-        StorageLive(_3);                 // scope 2 at $DIR/array_index_is_temporary.rs:+3:9: +3:10\n-        StorageLive(_4);                 // scope 2 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n-        _4 = &mut _2;                    // scope 2 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n-        _3 = &raw mut (*_4);             // scope 2 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n-        StorageDead(_4);                 // scope 2 at $DIR/array_index_is_temporary.rs:+3:31: +3:32\n-        StorageLive(_5);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:12: +4:29\n-        StorageLive(_6);                 // scope 4 at $DIR/array_index_is_temporary.rs:+4:25: +4:26\n-        _6 = _3;                         // scope 4 at $DIR/array_index_is_temporary.rs:+4:25: +4:26\n-        _5 = foo(move _6) -> [return: bb1, unwind unreachable]; // scope 4 at $DIR/array_index_is_temporary.rs:+4:21: +4:27\n-                                         // mir::Constant\n-                                         // + span: $DIR/array_index_is_temporary.rs:17:21: 17:24\n-                                         // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(<ZST>) }\n+        StorageLive(_1);\n+        _1 = [const 42_u32, const 43_u32, const 44_u32];\n+        StorageLive(_2);\n+        _2 = const 1_usize;\n+        StorageLive(_3);\n+        StorageLive(_4);\n+        _4 = &mut _2;\n+        _3 = &raw mut (*_4);\n+        StorageDead(_4);\n+        StorageLive(_5);\n+        StorageLive(_6);\n+        _6 = _3;\n+        _5 = foo(move _6) -> [return: bb1, unwind unreachable];\n     }\n \n     bb1: {\n-        StorageDead(_6);                 // scope 4 at $DIR/array_index_is_temporary.rs:+4:26: +4:27\n-        StorageLive(_7);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:7: +4:8\n-        _7 = _2;                         // scope 3 at $DIR/array_index_is_temporary.rs:+4:7: +4:8\n-        _8 = Len(_1);                    // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n-        _9 = Lt(_7, _8);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n-        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> [success: bb2, unwind unreachable]; // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n+        StorageDead(_6);\n+        StorageLive(_7);\n+        _7 = _2;\n+        _8 = Len(_1);\n+        _9 = Lt(_7, _8);\n+        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> [success: bb2, unwind unreachable];\n     }\n \n     bb2: {\n-        _1[_7] = move _5;                // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:29\n-        StorageDead(_5);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:28: +4:29\n-        StorageDead(_7);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:29: +4:30\n-        _0 = const ();                   // scope 0 at $DIR/array_index_is_temporary.rs:+0:11: +5:2\n-        StorageDead(_3);                 // scope 2 at $DIR/array_index_is_temporary.rs:+5:1: +5:2\n-        StorageDead(_2);                 // scope 1 at $DIR/array_index_is_temporary.rs:+5:1: +5:2\n-        StorageDead(_1);                 // scope 0 at $DIR/array_index_is_temporary.rs:+5:1: +5:2\n-        return;                          // scope 0 at $DIR/array_index_is_temporary.rs:+5:2: +5:2\n+        _1[_7] = move _5;\n+        StorageDead(_5);\n+        StorageDead(_7);\n+        _0 = const ();\n+        StorageDead(_3);\n+        StorageDead(_2);\n+        StorageDead(_1);\n+        return;\n     }\n }"}, {"sha": "2f6c92d9e859d8ee2e23727799568281577294e4", "filename": "tests/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-unwind.mir", "status": "modified", "additions": 40, "deletions": 43, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-unwind.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,64 +1,61 @@\n // MIR for `main` after SimplifyCfg-elaborate-drops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/array_index_is_temporary.rs:+0:11: +0:11\n-    let mut _1: [u32; 3];                // in scope 0 at $DIR/array_index_is_temporary.rs:+1:9: +1:14\n-    let mut _4: &mut usize;              // in scope 0 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n-    let mut _5: u32;                     // in scope 0 at $DIR/array_index_is_temporary.rs:+4:12: +4:29\n-    let mut _6: *mut usize;              // in scope 0 at $DIR/array_index_is_temporary.rs:+4:25: +4:26\n-    let _7: usize;                       // in scope 0 at $DIR/array_index_is_temporary.rs:+4:7: +4:8\n-    let mut _8: usize;                   // in scope 0 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n-    let mut _9: bool;                    // in scope 0 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n+    let mut _0: ();\n+    let mut _1: [u32; 3];\n+    let mut _4: &mut usize;\n+    let mut _5: u32;\n+    let mut _6: *mut usize;\n+    let _7: usize;\n+    let mut _8: usize;\n+    let mut _9: bool;\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/array_index_is_temporary.rs:+1:9: +1:14\n-        let mut _2: usize;               // in scope 1 at $DIR/array_index_is_temporary.rs:+2:9: +2:14\n+        debug x => _1;\n+        let mut _2: usize;\n         scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/array_index_is_temporary.rs:+2:9: +2:14\n-            let _3: *mut usize;          // in scope 2 at $DIR/array_index_is_temporary.rs:+3:9: +3:10\n+            debug y => _2;\n+            let _3: *mut usize;\n             scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/array_index_is_temporary.rs:+3:9: +3:10\n+                debug z => _3;\n                 scope 4 {\n                 }\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/array_index_is_temporary.rs:+1:9: +1:14\n-        _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at $DIR/array_index_is_temporary.rs:+1:17: +1:29\n-        StorageLive(_2);                 // scope 1 at $DIR/array_index_is_temporary.rs:+2:9: +2:14\n-        _2 = const 1_usize;              // scope 1 at $DIR/array_index_is_temporary.rs:+2:17: +2:18\n-        StorageLive(_3);                 // scope 2 at $DIR/array_index_is_temporary.rs:+3:9: +3:10\n-        StorageLive(_4);                 // scope 2 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n-        _4 = &mut _2;                    // scope 2 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n-        _3 = &raw mut (*_4);             // scope 2 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n-        StorageDead(_4);                 // scope 2 at $DIR/array_index_is_temporary.rs:+3:31: +3:32\n-        StorageLive(_5);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:12: +4:29\n-        StorageLive(_6);                 // scope 4 at $DIR/array_index_is_temporary.rs:+4:25: +4:26\n-        _6 = _3;                         // scope 4 at $DIR/array_index_is_temporary.rs:+4:25: +4:26\n-        _5 = foo(move _6) -> bb1;        // scope 4 at $DIR/array_index_is_temporary.rs:+4:21: +4:27\n-                                         // mir::Constant\n-                                         // + span: $DIR/array_index_is_temporary.rs:17:21: 17:24\n-                                         // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(<ZST>) }\n+        StorageLive(_1);\n+        _1 = [const 42_u32, const 43_u32, const 44_u32];\n+        StorageLive(_2);\n+        _2 = const 1_usize;\n+        StorageLive(_3);\n+        StorageLive(_4);\n+        _4 = &mut _2;\n+        _3 = &raw mut (*_4);\n+        StorageDead(_4);\n+        StorageLive(_5);\n+        StorageLive(_6);\n+        _6 = _3;\n+        _5 = foo(move _6) -> bb1;\n     }\n \n     bb1: {\n-        StorageDead(_6);                 // scope 4 at $DIR/array_index_is_temporary.rs:+4:26: +4:27\n-        StorageLive(_7);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:7: +4:8\n-        _7 = _2;                         // scope 3 at $DIR/array_index_is_temporary.rs:+4:7: +4:8\n-        _8 = Len(_1);                    // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n-        _9 = Lt(_7, _8);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n-        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n+        StorageDead(_6);\n+        StorageLive(_7);\n+        _7 = _2;\n+        _8 = Len(_1);\n+        _9 = Lt(_7, _8);\n+        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2;\n     }\n \n     bb2: {\n-        _1[_7] = move _5;                // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:29\n-        StorageDead(_5);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:28: +4:29\n-        StorageDead(_7);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:29: +4:30\n-        _0 = const ();                   // scope 0 at $DIR/array_index_is_temporary.rs:+0:11: +5:2\n-        StorageDead(_3);                 // scope 2 at $DIR/array_index_is_temporary.rs:+5:1: +5:2\n-        StorageDead(_2);                 // scope 1 at $DIR/array_index_is_temporary.rs:+5:1: +5:2\n-        StorageDead(_1);                 // scope 0 at $DIR/array_index_is_temporary.rs:+5:1: +5:2\n-        return;                          // scope 0 at $DIR/array_index_is_temporary.rs:+5:2: +5:2\n+        _1[_7] = move _5;\n+        StorageDead(_5);\n+        StorageDead(_7);\n+        _0 = const ();\n+        StorageDead(_3);\n+        StorageDead(_2);\n+        StorageDead(_1);\n+        return;\n     }\n }"}, {"sha": "a59ffe97bf01394751d0f51fddeaea9da20465de", "filename": "tests/mir-opt/asm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fasm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fasm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fasm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,20 +1,20 @@\n // MIR for `main` after AbortUnwindingCalls\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/asm_unwind_panic_abort.rs:+0:11: +0:11\n-    let _1: ();                          // in scope 0 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n+    let mut _0: ();\n+    let _1: ();\n     scope 1 {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n-        _1 = const ();                   // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n-        asm!(\"\", options(MAY_UNWIND)) -> [return: bb1, unwind terminate]; // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n+        StorageLive(_1);\n+        _1 = const ();\n+        asm!(\"\", options(MAY_UNWIND)) -> [return: bb1, unwind terminate];\n     }\n \n     bb1: {\n-        StorageDead(_1);                 // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:48: +2:49\n-        _0 = const ();                   // scope 1 at $DIR/asm_unwind_panic_abort.rs:+1:5: +3:6\n-        return;                          // scope 0 at $DIR/asm_unwind_panic_abort.rs:+4:2: +4:2\n+        StorageDead(_1);\n+        _0 = const ();\n+        return;\n     }\n }"}, {"sha": "41732211628eaff2ddd4aeff3e96a53e803904dc", "filename": "tests/mir-opt/basic_assignment.main.ElaborateDrops.diff", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbasic_assignment.main.ElaborateDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbasic_assignment.main.ElaborateDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbasic_assignment.main.ElaborateDrops.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,88 +2,88 @@\n + // MIR for `main` after ElaborateDrops\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/basic_assignment.rs:+0:11: +0:11\n-      let _1: bool;                        // in scope 0 at $DIR/basic_assignment.rs:+1:9: +1:17\n-      let mut _3: bool;                    // in scope 0 at $DIR/basic_assignment.rs:+6:16: +6:24\n-      let mut _6: std::option::Option<std::boxed::Box<u32>>; // in scope 0 at $DIR/basic_assignment.rs:+13:14: +13:20\n+      let mut _0: ();\n+      let _1: bool;\n+      let mut _3: bool;\n+      let mut _6: std::option::Option<std::boxed::Box<u32>>;\n       scope 1 {\n-          debug nodrop_x => _1;            // in scope 1 at $DIR/basic_assignment.rs:+1:9: +1:17\n-          let _2: bool;                    // in scope 1 at $DIR/basic_assignment.rs:+2:9: +2:17\n+          debug nodrop_x => _1;\n+          let _2: bool;\n           scope 2 {\n-              debug nodrop_y => _2;        // in scope 2 at $DIR/basic_assignment.rs:+2:9: +2:17\n-              let _4: std::option::Option<std::boxed::Box<u32>>; // in scope 2 at $DIR/basic_assignment.rs:+8:9: +8:15\n+              debug nodrop_y => _2;\n+              let _4: std::option::Option<std::boxed::Box<u32>>;\n               scope 3 {\n-                  debug drop_x => _4;      // in scope 3 at $DIR/basic_assignment.rs:+8:9: +8:15\n-                  let _5: std::option::Option<std::boxed::Box<u32>>; // in scope 3 at $DIR/basic_assignment.rs:+9:9: +9:15\n+                  debug drop_x => _4;\n+                  let _5: std::option::Option<std::boxed::Box<u32>>;\n                   scope 4 {\n-                      debug drop_y => _5;  // in scope 4 at $DIR/basic_assignment.rs:+9:9: +9:15\n+                      debug drop_y => _5;\n                   }\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/basic_assignment.rs:+1:9: +1:17\n-          _1 = const false;                // scope 0 at $DIR/basic_assignment.rs:+1:20: +1:25\n-          StorageLive(_2);                 // scope 1 at $DIR/basic_assignment.rs:+2:9: +2:17\n-          StorageLive(_3);                 // scope 2 at $DIR/basic_assignment.rs:+6:16: +6:24\n-          _3 = _1;                         // scope 2 at $DIR/basic_assignment.rs:+6:16: +6:24\n-          _2 = move _3;                    // scope 2 at $DIR/basic_assignment.rs:+6:5: +6:24\n-          StorageDead(_3);                 // scope 2 at $DIR/basic_assignment.rs:+6:23: +6:24\n-          StorageLive(_4);                 // scope 2 at $DIR/basic_assignment.rs:+8:9: +8:15\n-          _4 = Option::<Box<u32>>::None;   // scope 2 at $DIR/basic_assignment.rs:+8:36: +8:40\n-          StorageLive(_5);                 // scope 3 at $DIR/basic_assignment.rs:+9:9: +9:15\n-          StorageLive(_6);                 // scope 4 at $DIR/basic_assignment.rs:+13:14: +13:20\n-          _6 = move _4;                    // scope 4 at $DIR/basic_assignment.rs:+13:14: +13:20\n--         drop(_5) -> [return: bb1, unwind: bb2]; // scope 4 at $DIR/basic_assignment.rs:+13:5: +13:11\n-+         goto -> bb1;                     // scope 4 at $DIR/basic_assignment.rs:+13:5: +13:11\n+          StorageLive(_1);\n+          _1 = const false;\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = _1;\n+          _2 = move _3;\n+          StorageDead(_3);\n+          StorageLive(_4);\n+          _4 = Option::<Box<u32>>::None;\n+          StorageLive(_5);\n+          StorageLive(_6);\n+          _6 = move _4;\n+-         drop(_5) -> [return: bb1, unwind: bb2];\n++         goto -> bb1;\n       }\n   \n       bb1: {\n-          _5 = move _6;                    // scope 4 at $DIR/basic_assignment.rs:+13:5: +13:11\n--         drop(_6) -> [return: bb3, unwind: bb6]; // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n-+         goto -> bb3;                     // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n+          _5 = move _6;\n+-         drop(_6) -> [return: bb3, unwind: bb6];\n++         goto -> bb3;\n       }\n   \n       bb2 (cleanup): {\n-          _5 = move _6;                    // scope 4 at $DIR/basic_assignment.rs:+13:5: +13:11\n-          drop(_6) -> [return: bb6, unwind terminate]; // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n+          _5 = move _6;\n+          drop(_6) -> [return: bb6, unwind terminate];\n       }\n   \n       bb3: {\n-          StorageDead(_6);                 // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n-          _0 = const ();                   // scope 0 at $DIR/basic_assignment.rs:+0:11: +14:2\n-          drop(_5) -> [return: bb4, unwind: bb7]; // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n+          StorageDead(_6);\n+          _0 = const ();\n+          drop(_5) -> [return: bb4, unwind: bb7];\n       }\n   \n       bb4: {\n-          StorageDead(_5);                 // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n--         drop(_4) -> bb5;                 // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n-+         goto -> bb5;                     // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n+          StorageDead(_5);\n+-         drop(_4) -> bb5;\n++         goto -> bb5;\n       }\n   \n       bb5: {\n-          StorageDead(_4);                 // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n-          StorageDead(_2);                 // scope 1 at $DIR/basic_assignment.rs:+14:1: +14:2\n-          StorageDead(_1);                 // scope 0 at $DIR/basic_assignment.rs:+14:1: +14:2\n-          return;                          // scope 0 at $DIR/basic_assignment.rs:+14:2: +14:2\n+          StorageDead(_4);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   \n       bb6 (cleanup): {\n-          drop(_5) -> [return: bb7, unwind terminate]; // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n+          drop(_5) -> [return: bb7, unwind terminate];\n       }\n   \n       bb7 (cleanup): {\n--         drop(_4) -> [return: bb8, unwind terminate]; // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n-+         goto -> bb8;                     // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n+-         drop(_4) -> [return: bb8, unwind terminate];\n++         goto -> bb8;\n       }\n   \n       bb8 (cleanup): {\n-          resume;                          // scope 0 at $DIR/basic_assignment.rs:+0:1: +14:2\n+          resume;\n +     }\n + \n +     bb9 (cleanup): {\n-+         unreachable;                     // scope 0 at $DIR/basic_assignment.rs:+0:1: +14:2\n++         unreachable;\n       }\n   }\n   "}, {"sha": "a9bc2e890344835bcea337f6b8dbbcf53f348b3e", "filename": "tests/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -5,82 +5,82 @@\n | 1: user_ty: Canonical { value: Ty(std::option::Option<std::boxed::Box<u32>>), max_universe: U0, variables: [] }, span: $DIR/basic_assignment.rs:20:17: 20:33, inferred_ty: std::option::Option<std::boxed::Box<u32>>\n |\n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/basic_assignment.rs:+0:11: +0:11\n-    let _1: bool;                        // in scope 0 at $DIR/basic_assignment.rs:+1:9: +1:17\n-    let mut _3: bool;                    // in scope 0 at $DIR/basic_assignment.rs:+6:16: +6:24\n-    let mut _6: std::option::Option<std::boxed::Box<u32>>; // in scope 0 at $DIR/basic_assignment.rs:+13:14: +13:20\n+    let mut _0: ();\n+    let _1: bool;\n+    let mut _3: bool;\n+    let mut _6: std::option::Option<std::boxed::Box<u32>>;\n     scope 1 {\n-        debug nodrop_x => _1;            // in scope 1 at $DIR/basic_assignment.rs:+1:9: +1:17\n-        let _2: bool;                    // in scope 1 at $DIR/basic_assignment.rs:+2:9: +2:17\n+        debug nodrop_x => _1;\n+        let _2: bool;\n         scope 2 {\n-            debug nodrop_y => _2;        // in scope 2 at $DIR/basic_assignment.rs:+2:9: +2:17\n-            let _4: std::option::Option<std::boxed::Box<u32>> as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 2 at $DIR/basic_assignment.rs:+8:9: +8:15\n+            debug nodrop_y => _2;\n+            let _4: std::option::Option<std::boxed::Box<u32>> as UserTypeProjection { base: UserType(0), projs: [] };\n             scope 3 {\n-                debug drop_x => _4;      // in scope 3 at $DIR/basic_assignment.rs:+8:9: +8:15\n-                let _5: std::option::Option<std::boxed::Box<u32>>; // in scope 3 at $DIR/basic_assignment.rs:+9:9: +9:15\n+                debug drop_x => _4;\n+                let _5: std::option::Option<std::boxed::Box<u32>>;\n                 scope 4 {\n-                    debug drop_y => _5;  // in scope 4 at $DIR/basic_assignment.rs:+9:9: +9:15\n+                    debug drop_y => _5;\n                 }\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/basic_assignment.rs:+1:9: +1:17\n-        _1 = const false;                // scope 0 at $DIR/basic_assignment.rs:+1:20: +1:25\n-        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/basic_assignment.rs:+1:9: +1:17\n-        StorageLive(_2);                 // scope 1 at $DIR/basic_assignment.rs:+2:9: +2:17\n-        StorageLive(_3);                 // scope 2 at $DIR/basic_assignment.rs:+6:16: +6:24\n-        _3 = _1;                         // scope 2 at $DIR/basic_assignment.rs:+6:16: +6:24\n-        _2 = move _3;                    // scope 2 at $DIR/basic_assignment.rs:+6:5: +6:24\n-        StorageDead(_3);                 // scope 2 at $DIR/basic_assignment.rs:+6:23: +6:24\n-        StorageLive(_4);                 // scope 2 at $DIR/basic_assignment.rs:+8:9: +8:15\n-        _4 = Option::<Box<u32>>::None;   // scope 2 at $DIR/basic_assignment.rs:+8:36: +8:40\n-        FakeRead(ForLet(None), _4);      // scope 2 at $DIR/basic_assignment.rs:+8:9: +8:15\n-        AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 2 at $DIR/basic_assignment.rs:+8:17: +8:33\n-        StorageLive(_5);                 // scope 3 at $DIR/basic_assignment.rs:+9:9: +9:15\n-        StorageLive(_6);                 // scope 4 at $DIR/basic_assignment.rs:+13:14: +13:20\n-        _6 = move _4;                    // scope 4 at $DIR/basic_assignment.rs:+13:14: +13:20\n-        drop(_5) -> [return: bb1, unwind: bb2]; // scope 4 at $DIR/basic_assignment.rs:+13:5: +13:11\n+        StorageLive(_1);\n+        _1 = const false;\n+        FakeRead(ForLet(None), _1);\n+        StorageLive(_2);\n+        StorageLive(_3);\n+        _3 = _1;\n+        _2 = move _3;\n+        StorageDead(_3);\n+        StorageLive(_4);\n+        _4 = Option::<Box<u32>>::None;\n+        FakeRead(ForLet(None), _4);\n+        AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] });\n+        StorageLive(_5);\n+        StorageLive(_6);\n+        _6 = move _4;\n+        drop(_5) -> [return: bb1, unwind: bb2];\n     }\n \n     bb1: {\n-        _5 = move _6;                    // scope 4 at $DIR/basic_assignment.rs:+13:5: +13:11\n-        drop(_6) -> [return: bb3, unwind: bb6]; // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n+        _5 = move _6;\n+        drop(_6) -> [return: bb3, unwind: bb6];\n     }\n \n     bb2 (cleanup): {\n-        _5 = move _6;                    // scope 4 at $DIR/basic_assignment.rs:+13:5: +13:11\n-        drop(_6) -> [return: bb6, unwind terminate]; // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n+        _5 = move _6;\n+        drop(_6) -> [return: bb6, unwind terminate];\n     }\n \n     bb3: {\n-        StorageDead(_6);                 // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n-        _0 = const ();                   // scope 0 at $DIR/basic_assignment.rs:+0:11: +14:2\n-        drop(_5) -> [return: bb4, unwind: bb7]; // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n+        StorageDead(_6);\n+        _0 = const ();\n+        drop(_5) -> [return: bb4, unwind: bb7];\n     }\n \n     bb4: {\n-        StorageDead(_5);                 // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n-        drop(_4) -> [return: bb5, unwind: bb8]; // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n+        StorageDead(_5);\n+        drop(_4) -> [return: bb5, unwind: bb8];\n     }\n \n     bb5: {\n-        StorageDead(_4);                 // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n-        StorageDead(_2);                 // scope 1 at $DIR/basic_assignment.rs:+14:1: +14:2\n-        StorageDead(_1);                 // scope 0 at $DIR/basic_assignment.rs:+14:1: +14:2\n-        return;                          // scope 0 at $DIR/basic_assignment.rs:+14:2: +14:2\n+        StorageDead(_4);\n+        StorageDead(_2);\n+        StorageDead(_1);\n+        return;\n     }\n \n     bb6 (cleanup): {\n-        drop(_5) -> [return: bb7, unwind terminate]; // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n+        drop(_5) -> [return: bb7, unwind terminate];\n     }\n \n     bb7 (cleanup): {\n-        drop(_4) -> [return: bb8, unwind terminate]; // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n+        drop(_4) -> [return: bb8, unwind terminate];\n     }\n \n     bb8 (cleanup): {\n-        resume;                          // scope 0 at $DIR/basic_assignment.rs:+0:1: +14:2\n+        resume;\n     }\n }"}, {"sha": "8d0011d5067f7eab9a57be6ee1d94e928b9466f7", "filename": "tests/mir-opt/bool_compare.opt1.InstSimplify.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbool_compare.opt1.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbool_compare.opt1.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbool_compare.opt1.InstSimplify.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `opt1` after InstSimplify\n   \n   fn opt1(_1: bool) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:+0:9: +0:10\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:+0:21: +0:24\n-      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n-      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:8: +1:9\n+      debug x => _1;\n+      let mut _0: u32;\n+      let mut _2: bool;\n+      let mut _3: bool;\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n-          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:8: +1:9\n-          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:+1:8: +1:9\n--         _2 = Ne(move _3, const true);    // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n-+         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n-          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:16: +1:17\n-          switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = _1;\n+-         _2 = Ne(move _3, const true);\n++         _2 = Not(move _3);\n+          StorageDead(_3);\n+          switchInt(move _2) -> [0: bb2, otherwise: bb1];\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:+1:20: +1:21\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:34\n+          _0 = const 0_u32;\n+          goto -> bb3;\n       }\n   \n       bb2: {\n-          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:+1:31: +1:32\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:34\n+          _0 = const 1_u32;\n+          goto -> bb3;\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:33: +1:34\n-          return;                          // scope 0 at $DIR/bool_compare.rs:+2:2: +2:2\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "35f1068709b263ddf482332f5e796cea7707bde7", "filename": "tests/mir-opt/bool_compare.opt2.InstSimplify.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbool_compare.opt2.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbool_compare.opt2.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbool_compare.opt2.InstSimplify.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `opt2` after InstSimplify\n   \n   fn opt2(_1: bool) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:+0:9: +0:10\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:+0:21: +0:24\n-      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n-      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:16: +1:17\n+      debug x => _1;\n+      let mut _0: u32;\n+      let mut _2: bool;\n+      let mut _3: bool;\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n-          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:16: +1:17\n-          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:+1:16: +1:17\n--         _2 = Ne(const true, move _3);    // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n-+         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n-          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:16: +1:17\n-          switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = _1;\n+-         _2 = Ne(const true, move _3);\n++         _2 = Not(move _3);\n+          StorageDead(_3);\n+          switchInt(move _2) -> [0: bb2, otherwise: bb1];\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:+1:20: +1:21\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:34\n+          _0 = const 0_u32;\n+          goto -> bb3;\n       }\n   \n       bb2: {\n-          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:+1:31: +1:32\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:34\n+          _0 = const 1_u32;\n+          goto -> bb3;\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:33: +1:34\n-          return;                          // scope 0 at $DIR/bool_compare.rs:+2:2: +2:2\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "ab15c30ca1185bc7c97365a6b1a50db07daab3f0", "filename": "tests/mir-opt/bool_compare.opt3.InstSimplify.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbool_compare.opt3.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbool_compare.opt3.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbool_compare.opt3.InstSimplify.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `opt3` after InstSimplify\n   \n   fn opt3(_1: bool) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:+0:9: +0:10\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:+0:21: +0:24\n-      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n-      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:8: +1:9\n+      debug x => _1;\n+      let mut _0: u32;\n+      let mut _2: bool;\n+      let mut _3: bool;\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n-          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:8: +1:9\n-          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:+1:8: +1:9\n--         _2 = Eq(move _3, const false);   // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n-+         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n-          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:17: +1:18\n-          switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = _1;\n+-         _2 = Eq(move _3, const false);\n++         _2 = Not(move _3);\n+          StorageDead(_3);\n+          switchInt(move _2) -> [0: bb2, otherwise: bb1];\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:+1:21: +1:22\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:35\n+          _0 = const 0_u32;\n+          goto -> bb3;\n       }\n   \n       bb2: {\n-          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:+1:32: +1:33\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:35\n+          _0 = const 1_u32;\n+          goto -> bb3;\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:34: +1:35\n-          return;                          // scope 0 at $DIR/bool_compare.rs:+2:2: +2:2\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "40fd1cfe112d23489d9ba25ae6d4f3519547a430", "filename": "tests/mir-opt/bool_compare.opt4.InstSimplify.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbool_compare.opt4.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbool_compare.opt4.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbool_compare.opt4.InstSimplify.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `opt4` after InstSimplify\n   \n   fn opt4(_1: bool) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:+0:9: +0:10\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:+0:21: +0:24\n-      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n-      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:17: +1:18\n+      debug x => _1;\n+      let mut _0: u32;\n+      let mut _2: bool;\n+      let mut _3: bool;\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n-          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:17: +1:18\n-          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:+1:17: +1:18\n--         _2 = Eq(const false, move _3);   // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n-+         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n-          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:17: +1:18\n-          switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:18\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = _1;\n+-         _2 = Eq(const false, move _3);\n++         _2 = Not(move _3);\n+          StorageDead(_3);\n+          switchInt(move _2) -> [0: bb2, otherwise: bb1];\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:+1:21: +1:22\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:35\n+          _0 = const 0_u32;\n+          goto -> bb3;\n       }\n   \n       bb2: {\n-          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:+1:32: +1:33\n-          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:35\n+          _0 = const 1_u32;\n+          goto -> bb3;\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:34: +1:35\n-          return;                          // scope 0 at $DIR/bool_compare.rs:+2:2: +2:2\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "d196b045a1b8e64fc2a4b1ccbbe5439dfd22a3e1", "filename": "tests/mir-opt/box_expr.main.ElaborateDrops.before.panic-abort.mir", "status": "modified", "additions": 33, "deletions": 42, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.panic-abort.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,80 +1,71 @@\n // MIR for `main` before ElaborateDrops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/box_expr.rs:+0:11: +0:11\n-    let _1: std::boxed::Box<S>;          // in scope 0 at $DIR/box_expr.rs:+1:9: +1:10\n-    let mut _2: usize;                   // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n-    let mut _3: usize;                   // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n-    let mut _4: *mut u8;                 // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n-    let mut _5: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n-    let _6: ();                          // in scope 0 at $DIR/box_expr.rs:+3:5: +3:12\n-    let mut _7: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:+3:10: +3:11\n+    let mut _0: ();\n+    let _1: std::boxed::Box<S>;\n+    let mut _2: usize;\n+    let mut _3: usize;\n+    let mut _4: *mut u8;\n+    let mut _5: std::boxed::Box<S>;\n+    let _6: ();\n+    let mut _7: std::boxed::Box<S>;\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/box_expr.rs:+1:9: +1:10\n+        debug x => _1;\n     }\n     scope 2 {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:+1:9: +1:10\n-        _2 = SizeOf(S);                  // scope 2 at $DIR/box_expr.rs:+2:5: +2:23\n-        _3 = AlignOf(S);                 // scope 2 at $DIR/box_expr.rs:+2:5: +2:23\n-        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> [return: bb1, unwind: bb9]; // scope 2 at $DIR/box_expr.rs:+2:5: +2:23\n-                                         // mir::Constant\n-                                         // + span: $DIR/box_expr.rs:8:5: 8:23\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n+        StorageLive(_1);\n+        _2 = SizeOf(S);\n+        _3 = AlignOf(S);\n+        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> [return: bb1, unwind: bb9];\n     }\n \n     bb1: {\n-        StorageLive(_5);                 // scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n-        _5 = ShallowInitBox(move _4, S); // scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n-        (*_5) = S::new() -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/box_expr.rs:+2:14: +2:22\n-                                         // mir::Constant\n-                                         // + span: $DIR/box_expr.rs:8:14: 8:20\n-                                         // + literal: Const { ty: fn() -> S {S::new}, val: Value(<ZST>) }\n+        StorageLive(_5);\n+        _5 = ShallowInitBox(move _4, S);\n+        (*_5) = S::new() -> [return: bb2, unwind: bb8];\n     }\n \n     bb2: {\n-        _1 = move _5;                    // scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n-        drop(_5) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n+        _1 = move _5;\n+        drop(_5) -> [return: bb3, unwind: bb9];\n     }\n \n     bb3: {\n-        StorageDead(_5);                 // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n-        StorageLive(_6);                 // scope 1 at $DIR/box_expr.rs:+3:5: +3:12\n-        StorageLive(_7);                 // scope 1 at $DIR/box_expr.rs:+3:10: +3:11\n-        _7 = move _1;                    // scope 1 at $DIR/box_expr.rs:+3:10: +3:11\n-        _6 = std::mem::drop::<Box<S>>(move _7) -> [return: bb4, unwind: bb6]; // scope 1 at $DIR/box_expr.rs:+3:5: +3:12\n-                                         // mir::Constant\n-                                         // + span: $DIR/box_expr.rs:9:5: 9:9\n-                                         // + literal: Const { ty: fn(Box<S>) {std::mem::drop::<Box<S>>}, val: Value(<ZST>) }\n+        StorageDead(_5);\n+        StorageLive(_6);\n+        StorageLive(_7);\n+        _7 = move _1;\n+        _6 = std::mem::drop::<Box<S>>(move _7) -> [return: bb4, unwind: bb6];\n     }\n \n     bb4: {\n-        StorageDead(_7);                 // scope 1 at $DIR/box_expr.rs:+3:11: +3:12\n-        StorageDead(_6);                 // scope 1 at $DIR/box_expr.rs:+3:12: +3:13\n-        _0 = const ();                   // scope 0 at $DIR/box_expr.rs:+0:11: +4:2\n-        drop(_1) -> [return: bb5, unwind: bb9]; // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n+        StorageDead(_7);\n+        StorageDead(_6);\n+        _0 = const ();\n+        drop(_1) -> [return: bb5, unwind: bb9];\n     }\n \n     bb5: {\n-        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n-        return;                          // scope 0 at $DIR/box_expr.rs:+4:2: +4:2\n+        StorageDead(_1);\n+        return;\n     }\n \n     bb6 (cleanup): {\n-        drop(_7) -> [return: bb7, unwind terminate]; // scope 1 at $DIR/box_expr.rs:+3:11: +3:12\n+        drop(_7) -> [return: bb7, unwind terminate];\n     }\n \n     bb7 (cleanup): {\n-        drop(_1) -> [return: bb9, unwind terminate]; // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n+        drop(_1) -> [return: bb9, unwind terminate];\n     }\n \n     bb8 (cleanup): {\n-        drop(_5) -> [return: bb9, unwind terminate]; // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n+        drop(_5) -> [return: bb9, unwind terminate];\n     }\n \n     bb9 (cleanup): {\n-        resume;                          // scope 0 at $DIR/box_expr.rs:+0:1: +4:2\n+        resume;\n     }\n }"}, {"sha": "cf63c4f19dacd9fefd323d2d73c7a49f5f628808", "filename": "tests/mir-opt/box_expr.main.ElaborateDrops.before.panic-unwind.mir", "status": "modified", "additions": 33, "deletions": 42, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.panic-unwind.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,80 +1,71 @@\n // MIR for `main` before ElaborateDrops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/box_expr.rs:+0:11: +0:11\n-    let _1: std::boxed::Box<S>;          // in scope 0 at $DIR/box_expr.rs:+1:9: +1:10\n-    let mut _2: usize;                   // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n-    let mut _3: usize;                   // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n-    let mut _4: *mut u8;                 // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n-    let mut _5: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n-    let _6: ();                          // in scope 0 at $DIR/box_expr.rs:+3:5: +3:12\n-    let mut _7: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:+3:10: +3:11\n+    let mut _0: ();\n+    let _1: std::boxed::Box<S>;\n+    let mut _2: usize;\n+    let mut _3: usize;\n+    let mut _4: *mut u8;\n+    let mut _5: std::boxed::Box<S>;\n+    let _6: ();\n+    let mut _7: std::boxed::Box<S>;\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/box_expr.rs:+1:9: +1:10\n+        debug x => _1;\n     }\n     scope 2 {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:+1:9: +1:10\n-        _2 = SizeOf(S);                  // scope 2 at $DIR/box_expr.rs:+2:5: +2:23\n-        _3 = AlignOf(S);                 // scope 2 at $DIR/box_expr.rs:+2:5: +2:23\n-        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/box_expr.rs:+2:5: +2:23\n-                                         // mir::Constant\n-                                         // + span: $DIR/box_expr.rs:8:5: 8:23\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n+        StorageLive(_1);\n+        _2 = SizeOf(S);\n+        _3 = AlignOf(S);\n+        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1;\n     }\n \n     bb1: {\n-        StorageLive(_5);                 // scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n-        _5 = ShallowInitBox(move _4, S); // scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n-        (*_5) = S::new() -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/box_expr.rs:+2:14: +2:22\n-                                         // mir::Constant\n-                                         // + span: $DIR/box_expr.rs:8:14: 8:20\n-                                         // + literal: Const { ty: fn() -> S {S::new}, val: Value(<ZST>) }\n+        StorageLive(_5);\n+        _5 = ShallowInitBox(move _4, S);\n+        (*_5) = S::new() -> [return: bb2, unwind: bb8];\n     }\n \n     bb2: {\n-        _1 = move _5;                    // scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n-        drop(_5) -> bb3;                 // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n+        _1 = move _5;\n+        drop(_5) -> bb3;\n     }\n \n     bb3: {\n-        StorageDead(_5);                 // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n-        StorageLive(_6);                 // scope 1 at $DIR/box_expr.rs:+3:5: +3:12\n-        StorageLive(_7);                 // scope 1 at $DIR/box_expr.rs:+3:10: +3:11\n-        _7 = move _1;                    // scope 1 at $DIR/box_expr.rs:+3:10: +3:11\n-        _6 = std::mem::drop::<Box<S>>(move _7) -> [return: bb4, unwind: bb6]; // scope 1 at $DIR/box_expr.rs:+3:5: +3:12\n-                                         // mir::Constant\n-                                         // + span: $DIR/box_expr.rs:9:5: 9:9\n-                                         // + literal: Const { ty: fn(Box<S>) {std::mem::drop::<Box<S>>}, val: Value(<ZST>) }\n+        StorageDead(_5);\n+        StorageLive(_6);\n+        StorageLive(_7);\n+        _7 = move _1;\n+        _6 = std::mem::drop::<Box<S>>(move _7) -> [return: bb4, unwind: bb6];\n     }\n \n     bb4: {\n-        StorageDead(_7);                 // scope 1 at $DIR/box_expr.rs:+3:11: +3:12\n-        StorageDead(_6);                 // scope 1 at $DIR/box_expr.rs:+3:12: +3:13\n-        _0 = const ();                   // scope 0 at $DIR/box_expr.rs:+0:11: +4:2\n-        drop(_1) -> bb5;                 // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n+        StorageDead(_7);\n+        StorageDead(_6);\n+        _0 = const ();\n+        drop(_1) -> bb5;\n     }\n \n     bb5: {\n-        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n-        return;                          // scope 0 at $DIR/box_expr.rs:+4:2: +4:2\n+        StorageDead(_1);\n+        return;\n     }\n \n     bb6 (cleanup): {\n-        drop(_7) -> [return: bb7, unwind terminate]; // scope 1 at $DIR/box_expr.rs:+3:11: +3:12\n+        drop(_7) -> [return: bb7, unwind terminate];\n     }\n \n     bb7 (cleanup): {\n-        drop(_1) -> [return: bb9, unwind terminate]; // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n+        drop(_1) -> [return: bb9, unwind terminate];\n     }\n \n     bb8 (cleanup): {\n-        drop(_5) -> [return: bb9, unwind terminate]; // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n+        drop(_5) -> [return: bb9, unwind terminate];\n     }\n \n     bb9 (cleanup): {\n-        resume;                          // scope 0 at $DIR/box_expr.rs:+0:1: +4:2\n+        resume;\n     }\n }"}, {"sha": "7e8206b02fcbf58818ede547608034d79f000d75", "filename": "tests/mir-opt/building/async_await.a-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fasync_await.a-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fasync_await.a-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.a-%7Bclosure%230%7D.generator_resume.0.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -10,30 +10,30 @@\n } */\n \n fn a::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:11:14: 11:16]>, _2: &mut Context<'_>) -> Poll<()> {\n-    debug _task_context => _4;           // in scope 0 at $DIR/async_await.rs:+0:14: +0:16\n-    let mut _0: std::task::Poll<()>;     // return place in scope 0 at $DIR/async_await.rs:+0:14: +0:16\n-    let mut _3: ();                      // in scope 0 at $DIR/async_await.rs:+0:14: +0:16\n-    let mut _4: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+0:14: +0:16\n-    let mut _5: u32;                     // in scope 0 at $DIR/async_await.rs:+0:14: +0:16\n+    debug _task_context => _4;\n+    let mut _0: std::task::Poll<()>;\n+    let mut _3: ();\n+    let mut _4: &mut std::task::Context<'_>;\n+    let mut _5: u32;\n \n     bb0: {\n-        _5 = discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:11:14: 11:16]))); // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n-        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n+        _5 = discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:11:14: 11:16])));\n+        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3];\n     }\n \n     bb1: {\n-        _4 = move _2;                    // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n-        _3 = const ();                   // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n-        _0 = Poll::<()>::Ready(move _3); // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n-        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:11:14: 11:16]))) = 1; // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n-        return;                          // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n+        _4 = move _2;\n+        _3 = const ();\n+        _0 = Poll::<()>::Ready(move _3);\n+        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:11:14: 11:16]))) = 1;\n+        return;\n     }\n \n     bb2: {\n-        assert(const false, \"`async fn` resumed after completion\") -> bb2; // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n+        assert(const false, \"`async fn` resumed after completion\") -> bb2;\n     }\n \n     bb3: {\n-        unreachable;                     // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n+        unreachable;\n     }\n }"}, {"sha": "ed1388718519f7a5f22969c550ebde5413276f27", "filename": "tests/mir-opt/building/async_await.b-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 182, "deletions": 206, "changes": 388, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -32,312 +32,288 @@\n } */\n \n fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>, _2: &mut Context<'_>) -> Poll<()> {\n-    debug _task_context => _38;          // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-    let mut _0: std::task::Poll<()>;     // return place in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-    let _3: ();                          // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n-    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n-    let mut _5: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:5: +1:8\n-    let mut _6: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n-    let mut _7: ();                      // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-    let _8: ();                          // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n-    let mut _9: std::task::Poll<()>;     // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n-    let mut _10: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n-    let mut _11: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n-    let mut _12: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n-    let mut _13: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n-    let mut _14: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n-    let mut _15: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n-    let mut _16: isize;                  // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n-    let mut _18: !;                      // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n-    let mut _19: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n-    let mut _20: ();                     // in scope 0 at $DIR/async_await.rs:+1:9: +1:14\n-    let mut _21: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n-    let mut _22: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:5: +2:8\n-    let mut _23: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n-    let _24: ();                         // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n-    let mut _25: std::task::Poll<()>;    // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n-    let mut _26: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n-    let mut _27: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n-    let mut _28: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n-    let mut _29: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:5: +2:14\n-    let mut _30: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:5: +2:14\n-    let mut _31: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n-    let mut _32: isize;                  // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n-    let mut _34: !;                      // in scope 0 at $DIR/async_await.rs:+2:5: +2:14\n-    let mut _35: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n-    let mut _36: ();                     // in scope 0 at $DIR/async_await.rs:+2:9: +2:14\n-    let mut _37: ();                     // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-    let mut _38: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-    let mut _39: u32;                    // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+    debug _task_context => _38;\n+    let mut _0: std::task::Poll<()>;\n+    let _3: ();\n+    let mut _4: impl std::future::Future<Output = ()>;\n+    let mut _5: impl std::future::Future<Output = ()>;\n+    let mut _6: impl std::future::Future<Output = ()>;\n+    let mut _7: ();\n+    let _8: ();\n+    let mut _9: std::task::Poll<()>;\n+    let mut _10: std::pin::Pin<&mut impl std::future::Future<Output = ()>>;\n+    let mut _11: &mut impl std::future::Future<Output = ()>;\n+    let mut _12: &mut impl std::future::Future<Output = ()>;\n+    let mut _13: &mut std::task::Context<'_>;\n+    let mut _14: &mut std::task::Context<'_>;\n+    let mut _15: &mut std::task::Context<'_>;\n+    let mut _16: isize;\n+    let mut _18: !;\n+    let mut _19: &mut std::task::Context<'_>;\n+    let mut _20: ();\n+    let mut _21: impl std::future::Future<Output = ()>;\n+    let mut _22: impl std::future::Future<Output = ()>;\n+    let mut _23: impl std::future::Future<Output = ()>;\n+    let _24: ();\n+    let mut _25: std::task::Poll<()>;\n+    let mut _26: std::pin::Pin<&mut impl std::future::Future<Output = ()>>;\n+    let mut _27: &mut impl std::future::Future<Output = ()>;\n+    let mut _28: &mut impl std::future::Future<Output = ()>;\n+    let mut _29: &mut std::task::Context<'_>;\n+    let mut _30: &mut std::task::Context<'_>;\n+    let mut _31: &mut std::task::Context<'_>;\n+    let mut _32: isize;\n+    let mut _34: !;\n+    let mut _35: &mut std::task::Context<'_>;\n+    let mut _36: ();\n+    let mut _37: ();\n+    let mut _38: &mut std::task::Context<'_>;\n+    let mut _39: u32;\n     scope 1 {\n-        debug __awaitee => (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 1 at $DIR/async_await.rs:+1:9: +1:14\n-        let _17: ();                     // in scope 1 at $DIR/async_await.rs:+1:5: +1:14\n+        debug __awaitee => (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>);\n+        let _17: ();\n         scope 2 {\n         }\n         scope 3 {\n-            debug result => _17;         // in scope 3 at $DIR/async_await.rs:+1:5: +1:14\n+            debug result => _17;\n         }\n     }\n     scope 4 {\n-        debug __awaitee => (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>); // in scope 4 at $DIR/async_await.rs:+2:9: +2:14\n-        let _33: ();                     // in scope 4 at $DIR/async_await.rs:+2:5: +2:14\n+        debug __awaitee => (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>);\n+        let _33: ();\n         scope 5 {\n         }\n         scope 6 {\n-            debug result => _33;         // in scope 6 at $DIR/async_await.rs:+2:5: +2:14\n+            debug result => _33;\n         }\n     }\n \n     bb0: {\n-        _39 = discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))); // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-        switchInt(move _39) -> [0: bb1, 1: bb28, 3: bb26, 4: bb27, otherwise: bb29]; // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        _39 = discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])));\n+        switchInt(move _39) -> [0: bb1, 1: bb28, 3: bb26, 4: bb27, otherwise: bb29];\n     }\n \n     bb1: {\n-        _38 = move _2;                   // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-        StorageLive(_3);                 // scope 0 at $DIR/async_await.rs:+1:5: +1:14\n-        StorageLive(_4);                 // scope 0 at $DIR/async_await.rs:+1:9: +1:14\n-        StorageLive(_5);                 // scope 0 at $DIR/async_await.rs:+1:5: +1:8\n-        _5 = a() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+1:5: +1:8\n-                                         // mir::Constant\n-                                         // + span: $DIR/async_await.rs:15:5: 15:6\n-                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {a}, val: Value(<ZST>) }\n+        _38 = move _2;\n+        StorageLive(_3);\n+        StorageLive(_4);\n+        StorageLive(_5);\n+        _5 = a() -> [return: bb2, unwind unreachable];\n     }\n \n     bb2: {\n-        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+1:9: +1:14\n-                                         // mir::Constant\n-                                         // + span: $DIR/async_await.rs:15:9: 15:14\n-                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }\n+        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> [return: bb3, unwind unreachable];\n     }\n \n     bb3: {\n-        StorageDead(_5);                 // scope 0 at $DIR/async_await.rs:+1:13: +1:14\n-        nop;                             // scope 0 at $DIR/async_await.rs:+1:9: +1:14\n-        (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>) = move _4; // scope 0 at $DIR/async_await.rs:+1:9: +1:14\n-        goto -> bb4;                     // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        StorageDead(_5);\n+        nop;\n+        (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>) = move _4;\n+        goto -> bb4;\n     }\n \n     bb4: {\n-        StorageLive(_8);                 // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n-        StorageLive(_9);                 // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n-        StorageLive(_10);                // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n-        StorageLive(_11);                // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n-        StorageLive(_12);                // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n-        _12 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>); // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n-        _11 = &mut (*_12);               // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n-        _10 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _11) -> [return: bb5, unwind unreachable]; // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n-                                         // mir::Constant\n-                                         // + span: $DIR/async_await.rs:15:9: 15:14\n-                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }\n+        StorageLive(_8);\n+        StorageLive(_9);\n+        StorageLive(_10);\n+        StorageLive(_11);\n+        StorageLive(_12);\n+        _12 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>);\n+        _11 = &mut (*_12);\n+        _10 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _11) -> [return: bb5, unwind unreachable];\n     }\n \n     bb5: {\n-        StorageDead(_11);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n-        StorageLive(_13);                // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n-        StorageLive(_14);                // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n-        StorageLive(_15);                // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n-        _15 = _38;                       // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n-        _14 = move _15;                  // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n-        goto -> bb6;                     // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n+        StorageDead(_11);\n+        StorageLive(_13);\n+        StorageLive(_14);\n+        StorageLive(_15);\n+        _15 = _38;\n+        _14 = move _15;\n+        goto -> bb6;\n     }\n \n     bb6: {\n-        _13 = &mut (*_14);               // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n-        StorageDead(_15);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n-        _9 = <impl Future<Output = ()> as Future>::poll(move _10, move _13) -> [return: bb7, unwind unreachable]; // scope 2 at $DIR/async_await.rs:+1:9: +1:14\n-                                         // mir::Constant\n-                                         // + span: $DIR/async_await.rs:15:9: 15:14\n-                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }\n+        _13 = &mut (*_14);\n+        StorageDead(_15);\n+        _9 = <impl Future<Output = ()> as Future>::poll(move _10, move _13) -> [return: bb7, unwind unreachable];\n     }\n \n     bb7: {\n-        StorageDead(_13);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n-        StorageDead(_10);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n-        _16 = discriminant(_9);          // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n-        switchInt(move _16) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        StorageDead(_13);\n+        StorageDead(_10);\n+        _16 = discriminant(_9);\n+        switchInt(move _16) -> [0: bb10, 1: bb8, otherwise: bb9];\n     }\n \n     bb8: {\n-        _8 = const ();                   // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n-        StorageDead(_14);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        StorageDead(_12);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        StorageDead(_9);                 // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        StorageDead(_8);                 // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        StorageLive(_19);                // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n-        StorageLive(_20);                // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n-        _20 = ();                        // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n-        _0 = Poll::<()>::Pending;        // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n-        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 3; // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n-        return;                          // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        _8 = const ();\n+        StorageDead(_14);\n+        StorageDead(_12);\n+        StorageDead(_9);\n+        StorageDead(_8);\n+        StorageLive(_19);\n+        StorageLive(_20);\n+        _20 = ();\n+        _0 = Poll::<()>::Pending;\n+        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 3;\n+        return;\n     }\n \n     bb9: {\n-        unreachable;                     // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        unreachable;\n     }\n \n     bb10: {\n-        StorageLive(_17);                // scope 1 at $DIR/async_await.rs:+1:5: +1:14\n-        _17 = ((_9 as Ready).0: ());     // scope 1 at $DIR/async_await.rs:+1:5: +1:14\n-        _3 = _17;                        // scope 3 at $DIR/async_await.rs:+1:5: +1:14\n-        StorageDead(_17);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        StorageDead(_14);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        StorageDead(_12);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        StorageDead(_9);                 // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        StorageDead(_8);                 // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        goto -> bb12;                    // scope 0 at $DIR/async_await.rs:+1:13: +1:14\n+        StorageLive(_17);\n+        _17 = ((_9 as Ready).0: ());\n+        _3 = _17;\n+        StorageDead(_17);\n+        StorageDead(_14);\n+        StorageDead(_12);\n+        StorageDead(_9);\n+        StorageDead(_8);\n+        goto -> bb12;\n     }\n \n     bb11: {\n-        StorageDead(_20);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        _38 = move _19;                  // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n-        StorageDead(_19);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n-        _7 = const ();                   // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n-        goto -> bb4;                     // scope 1 at $DIR/async_await.rs:+1:9: +1:14\n+        StorageDead(_20);\n+        _38 = move _19;\n+        StorageDead(_19);\n+        _7 = const ();\n+        goto -> bb4;\n     }\n \n     bb12: {\n-        nop;                             // scope 0 at $DIR/async_await.rs:+1:13: +1:14\n-        goto -> bb13;                    // scope 0 at $DIR/async_await.rs:+1:14: +1:15\n+        nop;\n+        goto -> bb13;\n     }\n \n     bb13: {\n-        StorageDead(_4);                 // scope 0 at $DIR/async_await.rs:+1:14: +1:15\n-        StorageDead(_3);                 // scope 0 at $DIR/async_await.rs:+1:14: +1:15\n-        StorageLive(_21);                // scope 0 at $DIR/async_await.rs:+2:9: +2:14\n-        StorageLive(_22);                // scope 0 at $DIR/async_await.rs:+2:5: +2:8\n-        _22 = a() -> [return: bb14, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+2:5: +2:8\n-                                         // mir::Constant\n-                                         // + span: $DIR/async_await.rs:16:5: 16:6\n-                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {a}, val: Value(<ZST>) }\n+        StorageDead(_4);\n+        StorageDead(_3);\n+        StorageLive(_21);\n+        StorageLive(_22);\n+        _22 = a() -> [return: bb14, unwind unreachable];\n     }\n \n     bb14: {\n-        _21 = <impl Future<Output = ()> as IntoFuture>::into_future(move _22) -> [return: bb15, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+2:9: +2:14\n-                                         // mir::Constant\n-                                         // + span: $DIR/async_await.rs:16:9: 16:14\n-                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }\n+        _21 = <impl Future<Output = ()> as IntoFuture>::into_future(move _22) -> [return: bb15, unwind unreachable];\n     }\n \n     bb15: {\n-        StorageDead(_22);                // scope 0 at $DIR/async_await.rs:+2:13: +2:14\n-        nop;                             // scope 0 at $DIR/async_await.rs:+2:9: +2:14\n-        (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>) = move _21; // scope 0 at $DIR/async_await.rs:+2:9: +2:14\n-        goto -> bb16;                    // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        StorageDead(_22);\n+        nop;\n+        (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>) = move _21;\n+        goto -> bb16;\n     }\n \n     bb16: {\n-        StorageLive(_24);                // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n-        StorageLive(_25);                // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n-        StorageLive(_26);                // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n-        StorageLive(_27);                // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n-        StorageLive(_28);                // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n-        _28 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>); // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n-        _27 = &mut (*_28);               // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n-        _26 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _27) -> [return: bb17, unwind unreachable]; // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n-                                         // mir::Constant\n-                                         // + span: $DIR/async_await.rs:16:9: 16:14\n-                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }\n+        StorageLive(_24);\n+        StorageLive(_25);\n+        StorageLive(_26);\n+        StorageLive(_27);\n+        StorageLive(_28);\n+        _28 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>);\n+        _27 = &mut (*_28);\n+        _26 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _27) -> [return: bb17, unwind unreachable];\n     }\n \n     bb17: {\n-        StorageDead(_27);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n-        StorageLive(_29);                // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n-        StorageLive(_30);                // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n-        StorageLive(_31);                // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n-        _31 = _38;                       // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n-        _30 = move _31;                  // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n-        goto -> bb18;                    // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n+        StorageDead(_27);\n+        StorageLive(_29);\n+        StorageLive(_30);\n+        StorageLive(_31);\n+        _31 = _38;\n+        _30 = move _31;\n+        goto -> bb18;\n     }\n \n     bb18: {\n-        _29 = &mut (*_30);               // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n-        StorageDead(_31);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n-        _25 = <impl Future<Output = ()> as Future>::poll(move _26, move _29) -> [return: bb19, unwind unreachable]; // scope 5 at $DIR/async_await.rs:+2:9: +2:14\n-                                         // mir::Constant\n-                                         // + span: $DIR/async_await.rs:16:9: 16:14\n-                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }\n+        _29 = &mut (*_30);\n+        StorageDead(_31);\n+        _25 = <impl Future<Output = ()> as Future>::poll(move _26, move _29) -> [return: bb19, unwind unreachable];\n     }\n \n     bb19: {\n-        StorageDead(_29);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n-        StorageDead(_26);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n-        _32 = discriminant(_25);         // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n-        switchInt(move _32) -> [0: bb21, 1: bb20, otherwise: bb9]; // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        StorageDead(_29);\n+        StorageDead(_26);\n+        _32 = discriminant(_25);\n+        switchInt(move _32) -> [0: bb21, 1: bb20, otherwise: bb9];\n     }\n \n     bb20: {\n-        _24 = const ();                  // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n-        StorageDead(_30);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        StorageDead(_28);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        StorageDead(_25);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        StorageDead(_24);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        StorageLive(_35);                // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n-        StorageLive(_36);                // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n-        _36 = ();                        // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n-        _0 = Poll::<()>::Pending;        // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n-        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 4; // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n-        return;                          // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        _24 = const ();\n+        StorageDead(_30);\n+        StorageDead(_28);\n+        StorageDead(_25);\n+        StorageDead(_24);\n+        StorageLive(_35);\n+        StorageLive(_36);\n+        _36 = ();\n+        _0 = Poll::<()>::Pending;\n+        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 4;\n+        return;\n     }\n \n     bb21: {\n-        StorageLive(_33);                // scope 4 at $DIR/async_await.rs:+2:5: +2:14\n-        _33 = ((_25 as Ready).0: ());    // scope 4 at $DIR/async_await.rs:+2:5: +2:14\n-        _37 = _33;                       // scope 6 at $DIR/async_await.rs:+2:5: +2:14\n-        StorageDead(_33);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        StorageDead(_30);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        StorageDead(_28);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        StorageDead(_25);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        StorageDead(_24);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        goto -> bb23;                    // scope 0 at $DIR/async_await.rs:+2:13: +2:14\n+        StorageLive(_33);\n+        _33 = ((_25 as Ready).0: ());\n+        _37 = _33;\n+        StorageDead(_33);\n+        StorageDead(_30);\n+        StorageDead(_28);\n+        StorageDead(_25);\n+        StorageDead(_24);\n+        goto -> bb23;\n     }\n \n     bb22: {\n-        StorageDead(_36);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        _38 = move _35;                  // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n-        StorageDead(_35);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        _7 = const ();                   // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n-        goto -> bb16;                    // scope 4 at $DIR/async_await.rs:+2:9: +2:14\n+        StorageDead(_36);\n+        _38 = move _35;\n+        StorageDead(_35);\n+        _7 = const ();\n+        goto -> bb16;\n     }\n \n     bb23: {\n-        nop;                             // scope 0 at $DIR/async_await.rs:+2:13: +2:14\n-        goto -> bb24;                    // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n+        nop;\n+        goto -> bb24;\n     }\n \n     bb24: {\n-        StorageDead(_21);                // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n-        goto -> bb25;                    // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n+        StorageDead(_21);\n+        goto -> bb25;\n     }\n \n     bb25: {\n-        _0 = Poll::<()>::Ready(move _37); // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n-        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 1; // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n-        return;                          // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n+        _0 = Poll::<()>::Ready(move _37);\n+        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 1;\n+        return;\n     }\n \n     bb26: {\n-        StorageLive(_3);                 // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-        StorageLive(_4);                 // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-        StorageLive(_19);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-        StorageLive(_20);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-        _19 = move _2;                   // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-        goto -> bb11;                    // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        StorageLive(_3);\n+        StorageLive(_4);\n+        StorageLive(_19);\n+        StorageLive(_20);\n+        _19 = move _2;\n+        goto -> bb11;\n     }\n \n     bb27: {\n-        StorageLive(_21);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-        StorageLive(_35);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-        StorageLive(_36);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-        _35 = move _2;                   // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-        goto -> bb22;                    // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        StorageLive(_21);\n+        StorageLive(_35);\n+        StorageLive(_36);\n+        _35 = move _2;\n+        goto -> bb22;\n     }\n \n     bb28: {\n-        assert(const false, \"`async fn` resumed after completion\") -> bb28; // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        assert(const false, \"`async fn` resumed after completion\") -> bb28;\n     }\n \n     bb29: {\n-        unreachable;                     // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        unreachable;\n     }\n }"}, {"sha": "c14882142f56f8d554c2cfad74468e9637503ae7", "filename": "tests/mir-opt/building/custom/aggregate_exprs.adt.built.after.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.adt.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.adt.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.adt.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,16 +1,16 @@\n // MIR for `adt` after built\n \n fn adt() -> Onion {\n-    let mut _0: Onion;                   // return place in scope 0 at $DIR/aggregate_exprs.rs:+0:13: +0:18\n-    let mut _1: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-    let mut _2: Foo;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-    let mut _3: Bar;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _0: Onion;\n+    let mut _1: i32;\n+    let mut _2: Foo;\n+    let mut _3: Bar;\n \n     bb0: {\n-        _1 = const 1_i32;                // scope 0 at $DIR/aggregate_exprs.rs:+6:13: +6:20\n-        _2 = Foo { a: const 1_i32, b: const 2_i32 }; // scope 0 at $DIR/aggregate_exprs.rs:+7:13: +10:14\n-        _3 = Bar::Foo(move _2, _1);      // scope 0 at $DIR/aggregate_exprs.rs:+11:13: +11:39\n-        _0 = Onion { neon: ((_3 as variant#0).1: i32) }; // scope 0 at $DIR/aggregate_exprs.rs:+12:13: +12:58\n-        return;                          // scope 0 at $DIR/aggregate_exprs.rs:+13:13: +13:21\n+        _1 = const 1_i32;\n+        _2 = Foo { a: const 1_i32, b: const 2_i32 };\n+        _3 = Bar::Foo(move _2, _1);\n+        _0 = Onion { neon: ((_3 as variant#0).1: i32) };\n+        return;\n     }\n }"}, {"sha": "fde007abab0ac50ac8993630f0d32422374264e3", "filename": "tests/mir-opt/building/custom/aggregate_exprs.array.built.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.array.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.array.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.array.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,15 +1,15 @@\n // MIR for `array` after built\n \n fn array() -> [i32; 2] {\n-    let mut _0: [i32; 2];                // return place in scope 0 at $DIR/aggregate_exprs.rs:+0:15: +0:23\n-    let mut _1: [i32; 2];                // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-    let mut _2: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _0: [i32; 2];\n+    let mut _1: [i32; 2];\n+    let mut _2: i32;\n \n     bb0: {\n-        _1 = [const 42_i32, const 43_i32]; // scope 0 at $DIR/aggregate_exprs.rs:+5:13: +5:25\n-        _2 = const 1_i32;                // scope 0 at $DIR/aggregate_exprs.rs:+6:13: +6:20\n-        _1 = [_2, const 2_i32];          // scope 0 at $DIR/aggregate_exprs.rs:+7:13: +7:25\n-        _0 = move _1;                    // scope 0 at $DIR/aggregate_exprs.rs:+8:13: +8:26\n-        return;                          // scope 0 at $DIR/aggregate_exprs.rs:+9:13: +9:21\n+        _1 = [const 42_i32, const 43_i32];\n+        _2 = const 1_i32;\n+        _1 = [_2, const 2_i32];\n+        _0 = move _1;\n+        return;\n     }\n }"}, {"sha": "060f72c9c48c4d4db90d16dd824cbef5e6011941", "filename": "tests/mir-opt/building/custom/aggregate_exprs.tuple.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.tuple.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.tuple.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Faggregate_exprs.tuple.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,10 +1,10 @@\n // MIR for `tuple` after built\n \n fn tuple() -> (i32, bool) {\n-    let mut _0: (i32, bool);             // return place in scope 0 at $DIR/aggregate_exprs.rs:+0:15: +0:26\n+    let mut _0: (i32, bool);\n \n     bb0: {\n-        _0 = (const 1_i32, const true);  // scope 0 at $DIR/aggregate_exprs.rs:+3:13: +3:28\n-        return;                          // scope 0 at $DIR/aggregate_exprs.rs:+4:13: +4:21\n+        _0 = (const 1_i32, const true);\n+        return;\n     }\n }"}, {"sha": "189996f1179826c2a4dea53c663e1ca1de1a62ac", "filename": "tests/mir-opt/building/custom/arbitrary_let.arbitrary_let.built.after.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Farbitrary_let.arbitrary_let.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Farbitrary_let.arbitrary_let.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Farbitrary_let.arbitrary_let.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,22 +1,22 @@\n // MIR for `arbitrary_let` after built\n \n fn arbitrary_let(_1: i32) -> i32 {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/arbitrary_let.rs:+0:29: +0:32\n-    let mut _2: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-    let mut _3: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _0: i32;\n+    let mut _2: i32;\n+    let mut _3: i32;\n \n     bb0: {\n-        _2 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-        goto -> bb2;                     // scope 0 at $DIR/arbitrary_let.rs:+4:13: +4:25\n+        _2 = _1;\n+        goto -> bb2;\n     }\n \n     bb1: {\n-        _0 = _3;                         // scope 0 at $DIR/arbitrary_let.rs:+7:13: +7:20\n-        return;                          // scope 0 at $DIR/arbitrary_let.rs:+8:13: +8:21\n+        _0 = _3;\n+        return;\n     }\n \n     bb2: {\n-        _3 = _2;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-        goto -> bb1;                     // scope 0 at $DIR/arbitrary_let.rs:+12:13: +12:24\n+        _3 = _2;\n+        goto -> bb1;\n     }\n }"}, {"sha": "eaeba302f1510b93384f6bea35b90c81998c0fe5", "filename": "tests/mir-opt/building/custom/arrays.arrays.built.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Farrays.arrays.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Farrays.arrays.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Farrays.arrays.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,14 +1,14 @@\n // MIR for `arrays` after built\n \n fn arrays() -> usize {\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/arrays.rs:+0:32: +0:37\n-    let mut _1: [i32; C];                // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-    let mut _2: usize;                   // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _0: usize;\n+    let mut _1: [i32; C];\n+    let mut _2: usize;\n \n     bb0: {\n-        _1 = [const 5_i32; C];           // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-        _2 = Len(_1);                    // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-        _0 = _2;                         // scope 0 at $DIR/arrays.rs:+4:9: +4:16\n-        return;                          // scope 0 at $DIR/arrays.rs:+5:9: +5:17\n+        _1 = [const 5_i32; C];\n+        _2 = Len(_1);\n+        _0 = _2;\n+        return;\n     }\n }"}, {"sha": "e3334bc7dbee4f0fb3dffaeeaa611dc5fdd1108f", "filename": "tests/mir-opt/building/custom/as_cast.float_to_int.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.float_to_int.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.float_to_int.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.float_to_int.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,10 +1,10 @@\n // MIR for `float_to_int` after built\n \n fn float_to_int(_1: f32) -> i32 {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/as_cast.rs:+0:28: +0:31\n+    let mut _0: i32;\n \n     bb0: {\n-        _0 = _1 as i32 (FloatToInt);     // scope 0 at $DIR/as_cast.rs:+3:13: +3:27\n-        return;                          // scope 0 at $DIR/as_cast.rs:+4:13: +4:21\n+        _0 = _1 as i32 (FloatToInt);\n+        return;\n     }\n }"}, {"sha": "d71cb9d78d3385327041d0a60fa603adabf42d0b", "filename": "tests/mir-opt/building/custom/as_cast.int_to_int.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_int.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_int.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_int.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,10 +1,10 @@\n // MIR for `int_to_int` after built\n \n fn int_to_int(_1: u32) -> i32 {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/as_cast.rs:+0:26: +0:29\n+    let mut _0: i32;\n \n     bb0: {\n-        _0 = _1 as i32 (IntToInt);       // scope 0 at $DIR/as_cast.rs:+3:13: +3:27\n-        return;                          // scope 0 at $DIR/as_cast.rs:+4:13: +4:21\n+        _0 = _1 as i32 (IntToInt);\n+        return;\n     }\n }"}, {"sha": "0dc46d61effb7bc44addfa4dbac64e8c3b47faae", "filename": "tests/mir-opt/building/custom/as_cast.int_to_ptr.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_ptr.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_ptr.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_ptr.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,10 +1,10 @@\n // MIR for `int_to_ptr` after built\n \n fn int_to_ptr(_1: usize) -> *const i32 {\n-    let mut _0: *const i32;              // return place in scope 0 at $DIR/as_cast.rs:+0:28: +0:38\n+    let mut _0: *const i32;\n \n     bb0: {\n-        _0 = _1 as *const i32 (PointerFromExposedAddress); // scope 0 at $DIR/as_cast.rs:+3:13: +3:34\n-        return;                          // scope 0 at $DIR/as_cast.rs:+4:13: +4:21\n+        _0 = _1 as *const i32 (PointerFromExposedAddress);\n+        return;\n     }\n }"}, {"sha": "836622ec2f5e8ae0e3dbf4cb0f961d282a1f41a8", "filename": "tests/mir-opt/building/custom/composite_return.tuple.built.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.tuple.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.tuple.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.tuple.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,11 +1,11 @@\n // MIR for `tuple` after built\n \n fn tuple() -> (i32, bool) {\n-    let mut _0: (i32, bool);             // return place in scope 0 at $DIR/composite_return.rs:+0:15: +0:26\n+    let mut _0: (i32, bool);\n \n     bb0: {\n-        (_0.0: i32) = const 1_i32;       // scope 0 at $DIR/composite_return.rs:+4:13: +4:22\n-        (_0.1: bool) = const true;       // scope 0 at $DIR/composite_return.rs:+5:13: +5:25\n-        return;                          // scope 0 at $DIR/composite_return.rs:+6:13: +6:21\n+        (_0.0: i32) = const 1_i32;\n+        (_0.1: bool) = const true;\n+        return;\n     }\n }"}, {"sha": "05de272afe4f46bd54f34ff08a9f6d6327120231", "filename": "tests/mir-opt/building/custom/consts.consts.built.after.mir", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.consts.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.consts.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.consts.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,22 +1,19 @@\n // MIR for `consts` after built\n \n fn consts() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/consts.rs:+0:27: +0:27\n-    let mut _1: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-    let mut _2: i8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-    let mut _3: u32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-    let mut _4: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-    let mut _5: fn() {consts::<10>};     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _0: ();\n+    let mut _1: u8;\n+    let mut _2: i8;\n+    let mut _3: u32;\n+    let mut _4: i32;\n+    let mut _5: fn() {consts::<10>};\n \n     bb0: {\n-        _1 = const 5_u8;                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-        _2 = const _;                    // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-        _3 = const C;                    // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-        _4 = const _;                    // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-        _5 = consts::<10>;               // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $DIR/consts.rs:16:18: 16:30\n-                                         // + literal: Const { ty: fn() {consts::<10>}, val: Value(<ZST>) }\n-        return;                          // scope 0 at $DIR/consts.rs:+7:9: +7:17\n+        _1 = const 5_u8;\n+        _2 = const _;\n+        _3 = const C;\n+        _4 = const _;\n+        _5 = consts::<10>;\n+        return;\n     }\n }"}, {"sha": "ea394c5b7276d014e849de3bc1fd0120b522df3d", "filename": "tests/mir-opt/building/custom/consts.statics.built.after.mir", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.statics.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.statics.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.statics.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,20 +1,14 @@\n // MIR for `statics` after built\n \n fn statics() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/consts.rs:+0:14: +0:14\n-    let mut _1: &i32;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-    let mut _2: *mut i32;                // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _0: ();\n+    let mut _1: &i32;\n+    let mut _2: *mut i32;\n \n     bb0: {\n-        _1 = const {alloc1: &i32};       // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $DIR/consts.rs:27:31: 27:32\n-                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n-        _2 = const {alloc2: *mut i32};   // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $DIR/consts.rs:28:38: 28:39\n-                                         // + literal: Const { ty: *mut i32, val: Value(Scalar(alloc2)) }\n-        return;                          // scope 0 at $DIR/consts.rs:+4:9: +4:17\n+        _1 = const {alloc1: &i32};\n+        _2 = const {alloc2: *mut i32};\n+        return;\n     }\n }\n "}, {"sha": "8cc66e7e50d6a7f1627b38561e5404859f489673", "filename": "tests/mir-opt/building/custom/enums.set_discr.built.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.set_discr.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.set_discr.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.set_discr.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,11 +1,11 @@\n // MIR for `set_discr` after built\n \n fn set_discr(_1: &mut Option<()>) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/enums.rs:+0:39: +0:39\n+    let mut _0: ();\n \n     bb0: {\n-        Deinit((*_1));                   // scope 0 at $DIR/enums.rs:+2:9: +2:24\n-        discriminant((*_1)) = 0;         // scope 0 at $DIR/enums.rs:+3:9: +3:36\n-        return;                          // scope 0 at $DIR/enums.rs:+4:9: +4:17\n+        Deinit((*_1));\n+        discriminant((*_1)) = 0;\n+        return;\n     }\n }"}, {"sha": "55ade43ed115c3c8aa3c58e5f6c4bbe9a6002b93", "filename": "tests/mir-opt/building/custom/enums.set_discr_repr.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.set_discr_repr.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.set_discr_repr.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.set_discr_repr.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,10 +1,10 @@\n // MIR for `set_discr_repr` after built\n \n fn set_discr_repr(_1: &mut Bool) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/enums.rs:+0:33: +0:33\n+    let mut _0: ();\n \n     bb0: {\n-        discriminant((*_1)) = 0;         // scope 0 at $DIR/enums.rs:+2:9: +2:31\n-        return;                          // scope 0 at $DIR/enums.rs:+3:9: +3:17\n+        discriminant((*_1)) = 0;\n+        return;\n     }\n }"}, {"sha": "f82e5f1c6fd0a78b261bff73cb71debe7401804e", "filename": "tests/mir-opt/building/custom/enums.switch_bool.built.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_bool.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_bool.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_bool.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,19 +1,19 @@\n // MIR for `switch_bool` after built\n \n fn switch_bool(_1: bool) -> u32 {\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/enums.rs:+0:32: +0:35\n+    let mut _0: u32;\n \n     bb0: {\n-        switchInt(_1) -> [1: bb1, 0: bb2, otherwise: bb2]; // scope 0 at $DIR/enums.rs:+3:13: +7:14\n+        switchInt(_1) -> [1: bb1, 0: bb2, otherwise: bb2];\n     }\n \n     bb1: {\n-        _0 = const 5_u32;                // scope 0 at $DIR/enums.rs:+11:13: +11:20\n-        return;                          // scope 0 at $DIR/enums.rs:+12:13: +12:21\n+        _0 = const 5_u32;\n+        return;\n     }\n \n     bb2: {\n-        _0 = const 10_u32;               // scope 0 at $DIR/enums.rs:+16:13: +16:21\n-        return;                          // scope 0 at $DIR/enums.rs:+17:13: +17:21\n+        _0 = const 10_u32;\n+        return;\n     }\n }"}, {"sha": "fa03f274be340e62e5945db41900f90ab711024e", "filename": "tests/mir-opt/building/custom/enums.switch_option.built.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_option.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_option.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_option.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,21 +1,21 @@\n // MIR for `switch_option` after built\n \n fn switch_option(_1: Option<()>) -> bool {\n-    let mut _0: bool;                    // return place in scope 0 at $DIR/enums.rs:+0:45: +0:49\n-    let mut _2: isize;                   // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _0: bool;\n+    let mut _2: isize;\n \n     bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-        switchInt(_2) -> [0: bb1, 1: bb2, otherwise: bb2]; // scope 0 at $DIR/enums.rs:+4:13: +8:14\n+        _2 = discriminant(_1);\n+        switchInt(_2) -> [0: bb1, 1: bb2, otherwise: bb2];\n     }\n \n     bb1: {\n-        _0 = const false;                // scope 0 at $DIR/enums.rs:+12:13: +12:24\n-        return;                          // scope 0 at $DIR/enums.rs:+13:13: +13:21\n+        _0 = const false;\n+        return;\n     }\n \n     bb2: {\n-        _0 = const true;                 // scope 0 at $DIR/enums.rs:+17:13: +17:23\n-        return;                          // scope 0 at $DIR/enums.rs:+18:13: +18:21\n+        _0 = const true;\n+        return;\n     }\n }"}, {"sha": "eec2197a8bd3a5db7e59c2753ccf10e0facbbe93", "filename": "tests/mir-opt/building/custom/enums.switch_option_repr.built.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_option_repr.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_option_repr.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_option_repr.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,21 +1,21 @@\n // MIR for `switch_option_repr` after built\n \n fn switch_option_repr(_1: Bool) -> bool {\n-    let mut _0: bool;                    // return place in scope 0 at $DIR/enums.rs:+0:40: +0:44\n-    let mut _2: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _0: bool;\n+    let mut _2: u8;\n \n     bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-        switchInt(_2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/enums.rs:+4:13: +7:14\n+        _2 = discriminant(_1);\n+        switchInt(_2) -> [0: bb2, otherwise: bb1];\n     }\n \n     bb1: {\n-        _0 = const true;                 // scope 0 at $DIR/enums.rs:+11:13: +11:23\n-        return;                          // scope 0 at $DIR/enums.rs:+12:13: +12:21\n+        _0 = const true;\n+        return;\n     }\n \n     bb2: {\n-        _0 = const false;                // scope 0 at $DIR/enums.rs:+16:13: +16:24\n-        return;                          // scope 0 at $DIR/enums.rs:+17:13: +17:21\n+        _0 = const false;\n+        return;\n     }\n }"}, {"sha": "33eb6b720e87cc702b4b85150bbf29f8ca20cfc9", "filename": "tests/mir-opt/building/custom/operators.f.built.after.mir", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Foperators.f.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Foperators.f.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Foperators.f.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,30 +1,30 @@\n // MIR for `f` after built\n \n fn f(_1: i32, _2: bool) -> i32 {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/operators.rs:+0:30: +0:33\n-    let mut _3: (i32, bool);             // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _0: i32;\n+    let mut _3: (i32, bool);\n \n     bb0: {\n-        _1 = Neg(_1);                    // scope 0 at $DIR/operators.rs:+2:9: +2:15\n-        _2 = Not(_2);                    // scope 0 at $DIR/operators.rs:+3:9: +3:15\n-        _1 = Add(_1, _1);                // scope 0 at $DIR/operators.rs:+4:9: +4:18\n-        _1 = Sub(_1, _1);                // scope 0 at $DIR/operators.rs:+5:9: +5:18\n-        _1 = Mul(_1, _1);                // scope 0 at $DIR/operators.rs:+6:9: +6:18\n-        _1 = Div(_1, _1);                // scope 0 at $DIR/operators.rs:+7:9: +7:18\n-        _1 = Rem(_1, _1);                // scope 0 at $DIR/operators.rs:+8:9: +8:18\n-        _1 = BitXor(_1, _1);             // scope 0 at $DIR/operators.rs:+9:9: +9:18\n-        _1 = BitAnd(_1, _1);             // scope 0 at $DIR/operators.rs:+10:9: +10:18\n-        _1 = Shl(_1, _1);                // scope 0 at $DIR/operators.rs:+11:9: +11:19\n-        _1 = Shr(_1, _1);                // scope 0 at $DIR/operators.rs:+12:9: +12:19\n-        _2 = Eq(_1, _1);                 // scope 0 at $DIR/operators.rs:+13:9: +13:19\n-        _2 = Lt(_1, _1);                 // scope 0 at $DIR/operators.rs:+14:9: +14:18\n-        _2 = Le(_1, _1);                 // scope 0 at $DIR/operators.rs:+15:9: +15:19\n-        _2 = Ge(_1, _1);                 // scope 0 at $DIR/operators.rs:+16:9: +16:19\n-        _2 = Gt(_1, _1);                 // scope 0 at $DIR/operators.rs:+17:9: +17:18\n-        _3 = CheckedAdd(_1, _1);         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-        _2 = (_3.1: bool);               // scope 0 at $DIR/operators.rs:+19:9: +19:18\n-        _1 = (_3.0: i32);                // scope 0 at $DIR/operators.rs:+20:9: +20:18\n-        _0 = _1;                         // scope 0 at $DIR/operators.rs:+21:9: +21:16\n-        return;                          // scope 0 at $DIR/operators.rs:+22:9: +22:17\n+        _1 = Neg(_1);\n+        _2 = Not(_2);\n+        _1 = Add(_1, _1);\n+        _1 = Sub(_1, _1);\n+        _1 = Mul(_1, _1);\n+        _1 = Div(_1, _1);\n+        _1 = Rem(_1, _1);\n+        _1 = BitXor(_1, _1);\n+        _1 = BitAnd(_1, _1);\n+        _1 = Shl(_1, _1);\n+        _1 = Shr(_1, _1);\n+        _2 = Eq(_1, _1);\n+        _2 = Lt(_1, _1);\n+        _2 = Le(_1, _1);\n+        _2 = Ge(_1, _1);\n+        _2 = Gt(_1, _1);\n+        _3 = CheckedAdd(_1, _1);\n+        _2 = (_3.1: bool);\n+        _1 = (_3.0: i32);\n+        _0 = _1;\n+        return;\n     }\n }"}, {"sha": "b1ba5f9314d5102bd8a79d28120ccda147ae0db3", "filename": "tests/mir-opt/building/custom/projections.copy_for_deref.built.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.copy_for_deref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.copy_for_deref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.copy_for_deref.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,12 +1,12 @@\n // MIR for `copy_for_deref` after built\n \n fn copy_for_deref(_1: (&i32, i32)) -> i32 {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/projections.rs:+0:38: +0:41\n-    let mut _2: &i32;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _0: i32;\n+    let mut _2: &i32;\n \n     bb0: {\n-        _2 = deref_copy (_1.0: &i32);    // scope 0 at $DIR/projections.rs:+4:13: +4:37\n-        _0 = (*_2);                      // scope 0 at $DIR/projections.rs:+5:13: +5:24\n-        return;                          // scope 0 at $DIR/projections.rs:+6:13: +6:21\n+        _2 = deref_copy (_1.0: &i32);\n+        _0 = (*_2);\n+        return;\n     }\n }"}, {"sha": "9e756c50458a33d45d8b572f350156f1b667d652", "filename": "tests/mir-opt/building/custom/projections.set.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.set.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.set.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.set.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,10 +1,10 @@\n // MIR for `set` after built\n \n fn set(_1: &mut Option<i32>) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/projections.rs:+0:31: +0:31\n+    let mut _0: ();\n \n     bb0: {\n-        (((*_1) as variant#1).0: i32) = const 10_i32; // scope 0 at $DIR/projections.rs:+2:9: +2:48\n-        return;                          // scope 0 at $DIR/projections.rs:+3:9: +3:17\n+        (((*_1) as variant#1).0: i32) = const 10_i32;\n+        return;\n     }\n }"}, {"sha": "f74c61009d341d354e94e49ddd37794753c63092", "filename": "tests/mir-opt/building/custom/projections.simple_index.built.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.simple_index.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.simple_index.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.simple_index.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,13 +1,13 @@\n // MIR for `simple_index` after built\n \n fn simple_index(_1: [i32; 10], _2: &[i32]) -> i32 {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/projections.rs:+0:45: +0:48\n-    let mut _3: usize;                   // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _0: i32;\n+    let mut _3: usize;\n \n     bb0: {\n-        _3 = const 3_usize;              // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-        _0 = _1[_3];                     // scope 0 at $DIR/projections.rs:+3:9: +3:22\n-        _0 = (*_2)[_3];                  // scope 0 at $DIR/projections.rs:+4:9: +4:25\n-        return;                          // scope 0 at $DIR/projections.rs:+5:9: +5:17\n+        _3 = const 3_usize;\n+        _0 = _1[_3];\n+        _0 = (*_2)[_3];\n+        return;\n     }\n }"}, {"sha": "a370de2ed8439e504aae252655a81bf1604acf6d", "filename": "tests/mir-opt/building/custom/projections.tuples.built.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,11 +1,11 @@\n // MIR for `tuples` after built\n \n fn tuples(_1: (u32, i32)) -> (u32, i32) {\n-    let mut _0: (u32, i32);              // return place in scope 0 at $DIR/projections.rs:+0:29: +0:39\n+    let mut _0: (u32, i32);\n \n     bb0: {\n-        (_0.0: u32) = (_1.0: u32);       // scope 0 at $DIR/projections.rs:+4:13: +4:24\n-        (_0.1: i32) = (_1.1: i32);       // scope 0 at $DIR/projections.rs:+5:13: +5:24\n-        return;                          // scope 0 at $DIR/projections.rs:+6:13: +6:21\n+        (_0.0: u32) = (_1.0: u32);\n+        (_0.1: i32) = (_1.1: i32);\n+        return;\n     }\n }"}, {"sha": "4189b329e8cc56b8ded04a85a855d974d1c03d11", "filename": "tests/mir-opt/building/custom/projections.unions.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unions.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unions.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unions.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,10 +1,10 @@\n // MIR for `unions` after built\n \n fn unions(_1: U) -> i32 {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/projections.rs:+0:20: +0:23\n+    let mut _0: i32;\n \n     bb0: {\n-        _0 = (_1.0: i32);                // scope 0 at $DIR/projections.rs:+2:9: +2:18\n-        return;                          // scope 0 at $DIR/projections.rs:+3:9: +3:17\n+        _0 = (_1.0: i32);\n+        return;\n     }\n }"}, {"sha": "0c43bdc9d24d00fae8cc54fc95911533549a7624", "filename": "tests/mir-opt/building/custom/projections.unwrap.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unwrap.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unwrap.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unwrap.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,10 +1,10 @@\n // MIR for `unwrap` after built\n \n fn unwrap(_1: Option<i32>) -> i32 {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/projections.rs:+0:32: +0:35\n+    let mut _0: i32;\n \n     bb0: {\n-        _0 = ((_1 as variant#1).0: i32); // scope 0 at $DIR/projections.rs:+2:9: +2:40\n-        return;                          // scope 0 at $DIR/projections.rs:+3:9: +3:17\n+        _0 = ((_1 as variant#1).0: i32);\n+        return;\n     }\n }"}, {"sha": "39e9785134380536a103b171a704e713765cae8f", "filename": "tests/mir-opt/building/custom/projections.unwrap_deref.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unwrap_deref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unwrap_deref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.unwrap_deref.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,10 +1,10 @@\n // MIR for `unwrap_deref` after built\n \n fn unwrap_deref(_1: Option<&i32>) -> i32 {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/projections.rs:+0:39: +0:42\n+    let mut _0: i32;\n \n     bb0: {\n-        _0 = (*((_1 as variant#1).0: &i32)); // scope 0 at $DIR/projections.rs:+2:9: +2:49\n-        return;                          // scope 0 at $DIR/projections.rs:+3:9: +3:17\n+        _0 = (*((_1 as variant#1).0: &i32));\n+        return;\n     }\n }"}, {"sha": "d1e1aab99d180f637bd8c137cedb95f4bc6c94d6", "filename": "tests/mir-opt/building/custom/references.immut_ref.built.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.immut_ref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.immut_ref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.immut_ref.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,13 +1,13 @@\n // MIR for `immut_ref` after built\n \n fn immut_ref(_1: &i32) -> &i32 {\n-    let mut _0: &i32;                    // return place in scope 0 at $DIR/references.rs:+0:30: +0:34\n-    let mut _2: *const i32;              // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _0: &i32;\n+    let mut _2: *const i32;\n \n     bb0: {\n-        _2 = &raw const (*_1);           // scope 0 at $DIR/references.rs:+5:13: +5:29\n-        _0 = &(*_2);                     // scope 0 at $DIR/references.rs:+6:13: +6:23\n-        Retag(_0);                       // scope 0 at $DIR/references.rs:+7:13: +7:23\n-        return;                          // scope 0 at $DIR/references.rs:+8:13: +8:21\n+        _2 = &raw const (*_1);\n+        _0 = &(*_2);\n+        Retag(_0);\n+        return;\n     }\n }"}, {"sha": "c82cb3274d607a3e07c698aba9eae96a8c6aba96", "filename": "tests/mir-opt/building/custom/references.mut_ref.built.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.mut_ref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.mut_ref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.mut_ref.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,13 +1,13 @@\n // MIR for `mut_ref` after built\n \n fn mut_ref(_1: &mut i32) -> &mut i32 {\n-    let mut _0: &mut i32;                // return place in scope 0 at $DIR/references.rs:+0:32: +0:40\n-    let mut _2: *mut i32;                // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _0: &mut i32;\n+    let mut _2: *mut i32;\n \n     bb0: {\n-        _2 = &raw mut (*_1);             // scope 0 at $DIR/references.rs:+5:13: +5:33\n-        _0 = &mut (*_2);                 // scope 0 at $DIR/references.rs:+6:13: +6:26\n-        Retag(_0);                       // scope 0 at $DIR/references.rs:+7:13: +7:23\n-        return;                          // scope 0 at $DIR/references.rs:+8:13: +8:21\n+        _2 = &raw mut (*_1);\n+        _0 = &mut (*_2);\n+        Retag(_0);\n+        return;\n     }\n }"}, {"sha": "57c7f92a399591999993522b73044e5184f3b7db", "filename": "tests/mir-opt/building/custom/references.raw_pointer.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.raw_pointer.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.raw_pointer.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.raw_pointer.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,10 +1,10 @@\n // MIR for `raw_pointer` after built\n \n fn raw_pointer(_1: *const i32) -> *const i32 {\n-    let mut _0: *const i32;              // return place in scope 0 at $DIR/references.rs:+0:38: +0:48\n+    let mut _0: *const i32;\n \n     bb0: {\n-        _0 = &raw const (*_1);           // scope 0 at $DIR/references.rs:+4:9: +4:27\n-        return;                          // scope 0 at $DIR/references.rs:+5:9: +5:17\n+        _0 = &raw const (*_1);\n+        return;\n     }\n }"}, {"sha": "8046b543eefc96483ae1d9ae871829b6ee3cde4d", "filename": "tests/mir-opt/building/custom/references.raw_pointer_offset.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.raw_pointer_offset.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.raw_pointer_offset.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.raw_pointer_offset.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,10 +1,10 @@\n // MIR for `raw_pointer_offset` after built\n \n fn raw_pointer_offset(_1: *const i32) -> *const i32 {\n-    let mut _0: *const i32;              // return place in scope 0 at $DIR/references.rs:+0:45: +0:55\n+    let mut _0: *const i32;\n \n     bb0: {\n-        _0 = Offset(_1, const 1_isize);  // scope 0 at $DIR/references.rs:+2:9: +2:33\n-        return;                          // scope 0 at $DIR/references.rs:+3:9: +3:17\n+        _0 = Offset(_1, const 1_isize);\n+        return;\n     }\n }"}, {"sha": "6f7aaeed979904f7f8e174974a59494689224771", "filename": "tests/mir-opt/building/custom/simple_assign.simple.built.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,20 +1,20 @@\n // MIR for `simple` after built\n \n fn simple(_1: i32) -> i32 {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/simple_assign.rs:+0:26: +0:29\n-    let mut _2: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-    let mut _3: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _0: i32;\n+    let mut _2: i32;\n+    let mut _3: i32;\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/simple_assign.rs:+6:13: +6:31\n-        _2 = _1;                         // scope 0 at $DIR/simple_assign.rs:+7:13: +7:22\n-        goto -> bb1;                     // scope 0 at $DIR/simple_assign.rs:+8:13: +8:23\n+        StorageLive(_2);\n+        _2 = _1;\n+        goto -> bb1;\n     }\n \n     bb1: {\n-        _3 = move _2;                    // scope 0 at $DIR/simple_assign.rs:+12:13: +12:32\n-        StorageDead(_2);                 // scope 0 at $DIR/simple_assign.rs:+13:13: +13:31\n-        _0 = _3;                         // scope 0 at $DIR/simple_assign.rs:+14:13: +14:24\n-        return;                          // scope 0 at $DIR/simple_assign.rs:+15:13: +15:21\n+        _3 = move _2;\n+        StorageDead(_2);\n+        _0 = _3;\n+        return;\n     }\n }"}, {"sha": "b6d8229988e3f7247fc0c86d0aff43ae24486eb9", "filename": "tests/mir-opt/building/custom/simple_assign.simple_ref.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple_ref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple_ref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple_ref.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,10 +1,10 @@\n // MIR for `simple_ref` after built\n \n fn simple_ref(_1: &mut i32) -> &mut i32 {\n-    let mut _0: &mut i32;                // return place in scope 0 at $DIR/simple_assign.rs:+0:35: +0:43\n+    let mut _0: &mut i32;\n \n     bb0: {\n-        _0 = move _1;                    // scope 0 at $DIR/simple_assign.rs:+2:9: +2:22\n-        return;                          // scope 0 at $DIR/simple_assign.rs:+3:9: +3:17\n+        _0 = move _1;\n+        return;\n     }\n }"}, {"sha": "9cf26dff35033588e4af115b0d66249ebee8009d", "filename": "tests/mir-opt/building/custom/terminators.assert_nonzero.built.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.assert_nonzero.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.assert_nonzero.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.assert_nonzero.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,17 +1,17 @@\n // MIR for `assert_nonzero` after built\n \n fn assert_nonzero(_1: i32) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/terminators.rs:+0:27: +0:27\n+    let mut _0: ();\n \n     bb0: {\n-        switchInt(_1) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/terminators.rs:+3:13: +6:14\n+        switchInt(_1) -> [0: bb1, otherwise: bb2];\n     }\n \n     bb1: {\n-        unreachable;                     // scope 0 at $DIR/terminators.rs:+10:13: +10:26\n+        unreachable;\n     }\n \n     bb2: {\n-        return;                          // scope 0 at $DIR/terminators.rs:+14:13: +14:21\n+        return;\n     }\n }"}, {"sha": "534d7615180afc320d2e0a3a71087b28efda8326", "filename": "tests/mir-opt/building/custom/terminators.direct_call.built.after.mir", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.direct_call.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.direct_call.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.direct_call.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,16 +1,13 @@\n // MIR for `direct_call` after built\n \n fn direct_call(_1: i32) -> i32 {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/terminators.rs:+0:27: +0:30\n+    let mut _0: i32;\n \n     bb0: {\n-        _0 = ident::<i32>(_1) -> bb1;    // scope 0 at $DIR/terminators.rs:+3:13: +3:42\n-                                         // mir::Constant\n-                                         // + span: $DIR/terminators.rs:15:33: 15:38\n-                                         // + literal: Const { ty: fn(i32) -> i32 {ident::<i32>}, val: Value(<ZST>) }\n+        _0 = ident::<i32>(_1) -> bb1;\n     }\n \n     bb1: {\n-        return;                          // scope 0 at $DIR/terminators.rs:+7:13: +7:21\n+        return;\n     }\n }"}, {"sha": "aba724a4b0d33aeb550a59e41579f76732d5af4b", "filename": "tests/mir-opt/building/custom/terminators.drop_first.built.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_first.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_first.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_first.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,14 +1,14 @@\n // MIR for `drop_first` after built\n \n fn drop_first(_1: WriteOnDrop<'_>, _2: WriteOnDrop<'_>) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/terminators.rs:+0:59: +0:59\n+    let mut _0: ();\n \n     bb0: {\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/terminators.rs:+3:13: +3:30\n+        drop(_1) -> bb1;\n     }\n \n     bb1: {\n-        _1 = move _2;                    // scope 0 at $DIR/terminators.rs:+7:13: +7:24\n-        return;                          // scope 0 at $DIR/terminators.rs:+8:13: +8:21\n+        _1 = move _2;\n+        return;\n     }\n }"}, {"sha": "32d770bb0c139384378a35e97688c9af2232f470", "filename": "tests/mir-opt/building/custom/terminators.drop_second.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_second.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_second.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_second.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,13 +1,13 @@\n // MIR for `drop_second` after built\n \n fn drop_second(_1: WriteOnDrop<'_>, _2: WriteOnDrop<'_>) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/terminators.rs:+0:60: +0:60\n+    let mut _0: ();\n \n     bb0: {\n-        drop(_2) -> bb1;                 // scope 0 at $DIR/terminators.rs:+3:13: +3:30\n+        drop(_2) -> bb1;\n     }\n \n     bb1: {\n-        return;                          // scope 0 at $DIR/terminators.rs:+7:13: +7:21\n+        return;\n     }\n }"}, {"sha": "56371c78666054c69ce5975141cc3f08ddc745d1", "filename": "tests/mir-opt/building/custom/terminators.indirect_call.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.indirect_call.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.indirect_call.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.indirect_call.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,13 +1,13 @@\n // MIR for `indirect_call` after built\n \n fn indirect_call(_1: i32, _2: fn(i32) -> i32) -> i32 {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/terminators.rs:+0:48: +0:51\n+    let mut _0: i32;\n \n     bb0: {\n-        _0 = _2(_1) -> bb1;              // scope 0 at $DIR/terminators.rs:+3:13: +3:38\n+        _0 = _2(_1) -> bb1;\n     }\n \n     bb1: {\n-        return;                          // scope 0 at $DIR/terminators.rs:+7:13: +7:21\n+        return;\n     }\n }"}, {"sha": "512c73216198ebc39a50c5b26c70a7b9b8770dd1", "filename": "tests/mir-opt/building/enum_cast.bar.built.after.mir", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.bar.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.bar.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.bar.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,22 +1,22 @@\n // MIR for `bar` after built\n \n fn bar(_1: Bar) -> usize {\n-    debug bar => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n-    let _2: Bar;                         // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-    let mut _3: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-    let mut _4: u8;                      // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-    let mut _5: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+    debug bar => _1;\n+    let mut _0: usize;\n+    let _2: Bar;\n+    let mut _3: isize;\n+    let mut _4: u8;\n+    let mut _5: bool;\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _4 = _3 as u8 (IntToInt);        // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _5 = Le(_4, const 1_u8);         // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        assume(move _5);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _3 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:16: +1:17\n-        return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n+        StorageLive(_2);\n+        _2 = move _1;\n+        _3 = discriminant(_2);\n+        _4 = _3 as u8 (IntToInt);\n+        _5 = Le(_4, const 1_u8);\n+        assume(move _5);\n+        _0 = move _3 as usize (IntToInt);\n+        StorageDead(_2);\n+        return;\n     }\n }"}, {"sha": "ad0adf14e4ac8b69fd89bf54120026848e45b229", "filename": "tests/mir-opt/building/enum_cast.boo.built.after.mir", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.boo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.boo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.boo.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,22 +1,22 @@\n // MIR for `boo` after built\n \n fn boo(_1: Boo) -> usize {\n-    debug boo => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n-    let _2: Boo;                         // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-    let mut _3: u8;                      // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-    let mut _4: u8;                      // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-    let mut _5: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+    debug boo => _1;\n+    let mut _0: usize;\n+    let _2: Boo;\n+    let mut _3: u8;\n+    let mut _4: u8;\n+    let mut _5: bool;\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _4 = _3 as u8 (IntToInt);        // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _5 = Le(_4, const 1_u8);         // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        assume(move _5);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _3 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:16: +1:17\n-        return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n+        StorageLive(_2);\n+        _2 = move _1;\n+        _3 = discriminant(_2);\n+        _4 = _3 as u8 (IntToInt);\n+        _5 = Le(_4, const 1_u8);\n+        assume(move _5);\n+        _0 = move _3 as usize (IntToInt);\n+        StorageDead(_2);\n+        return;\n     }\n }"}, {"sha": "1caf9e4a523c75b85e5d5f11549ae844696b3acc", "filename": "tests/mir-opt/building/enum_cast.droppy.built.after.mir", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,71 +1,71 @@\n // MIR for `droppy` after built\n \n fn droppy() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/enum_cast.rs:+0:13: +0:13\n-    let _1: ();                          // in scope 0 at $DIR/enum_cast.rs:+1:5: +6:6\n-    let _2: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+2:13: +2:14\n-    let _4: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:18\n-    let mut _5: isize;                   // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:18\n-    let mut _6: u8;                      // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:27\n-    let mut _7: bool;                    // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:27\n-    let _8: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n+    let mut _0: ();\n+    let _1: ();\n+    let _2: Droppy;\n+    let _4: Droppy;\n+    let mut _5: isize;\n+    let mut _6: u8;\n+    let mut _7: bool;\n+    let _8: Droppy;\n     scope 1 {\n-        debug x => _2;                   // in scope 1 at $DIR/enum_cast.rs:+2:13: +2:14\n+        debug x => _2;\n         scope 2 {\n-            debug y => _3;               // in scope 2 at $DIR/enum_cast.rs:+5:13: +5:14\n+            debug y => _3;\n         }\n         scope 3 {\n-            let _3: usize;               // in scope 3 at $DIR/enum_cast.rs:+5:13: +5:14\n+            let _3: usize;\n         }\n     }\n     scope 4 {\n-        debug z => _8;                   // in scope 4 at $DIR/enum_cast.rs:+7:9: +7:10\n+        debug z => _8;\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +6:6\n-        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+2:13: +2:14\n-        _2 = Droppy::C;                  // scope 0 at $DIR/enum_cast.rs:+2:17: +2:26\n-        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/enum_cast.rs:+2:13: +2:14\n-        StorageLive(_3);                 // scope 3 at $DIR/enum_cast.rs:+5:13: +5:14\n-        StorageLive(_4);                 // scope 3 at $DIR/enum_cast.rs:+5:17: +5:18\n-        _4 = move _2;                    // scope 3 at $DIR/enum_cast.rs:+5:17: +5:18\n-        _5 = discriminant(_4);           // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n-        _6 = _5 as u8 (IntToInt);        // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n-        _7 = Le(_6, const 2_u8);         // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n-        assume(move _7);                 // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n-        _3 = move _5 as usize (IntToInt); // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n-        drop(_4) -> [return: bb1, unwind: bb4]; // scope 3 at $DIR/enum_cast.rs:+5:26: +5:27\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        _2 = Droppy::C;\n+        FakeRead(ForLet(None), _2);\n+        StorageLive(_3);\n+        StorageLive(_4);\n+        _4 = move _2;\n+        _5 = discriminant(_4);\n+        _6 = _5 as u8 (IntToInt);\n+        _7 = Le(_6, const 2_u8);\n+        assume(move _7);\n+        _3 = move _5 as usize (IntToInt);\n+        drop(_4) -> [return: bb1, unwind: bb4];\n     }\n \n     bb1: {\n-        StorageDead(_4);                 // scope 3 at $DIR/enum_cast.rs:+5:26: +5:27\n-        FakeRead(ForLet(None), _3);      // scope 3 at $DIR/enum_cast.rs:+5:13: +5:14\n-        _1 = const ();                   // scope 0 at $DIR/enum_cast.rs:+1:5: +6:6\n-        StorageDead(_3);                 // scope 1 at $DIR/enum_cast.rs:+6:5: +6:6\n-        drop(_2) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n+        StorageDead(_4);\n+        FakeRead(ForLet(None), _3);\n+        _1 = const ();\n+        StorageDead(_3);\n+        drop(_2) -> [return: bb2, unwind: bb5];\n     }\n \n     bb2: {\n-        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n-        StorageDead(_1);                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n-        StorageLive(_8);                 // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n-        _8 = Droppy::B;                  // scope 0 at $DIR/enum_cast.rs:+7:13: +7:22\n-        FakeRead(ForLet(None), _8);      // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n-        _0 = const ();                   // scope 0 at $DIR/enum_cast.rs:+0:13: +8:2\n-        drop(_8) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n+        StorageDead(_2);\n+        StorageDead(_1);\n+        StorageLive(_8);\n+        _8 = Droppy::B;\n+        FakeRead(ForLet(None), _8);\n+        _0 = const ();\n+        drop(_8) -> [return: bb3, unwind: bb5];\n     }\n \n     bb3: {\n-        StorageDead(_8);                 // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n-        return;                          // scope 0 at $DIR/enum_cast.rs:+8:2: +8:2\n+        StorageDead(_8);\n+        return;\n     }\n \n     bb4 (cleanup): {\n-        drop(_2) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n+        drop(_2) -> [return: bb5, unwind terminate];\n     }\n \n     bb5 (cleanup): {\n-        resume;                          // scope 0 at $DIR/enum_cast.rs:+0:1: +8:2\n+        resume;\n     }\n }"}, {"sha": "e75803c706daf6f45cef83f448aeb30dfaf990f1", "filename": "tests/mir-opt/building/enum_cast.far.built.after.mir", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.far.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.far.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.far.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,22 +1,22 @@\n // MIR for `far` after built\n \n fn far(_1: Far) -> isize {\n-    debug far => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11\n-    let mut _0: isize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n-    let _2: Far;                         // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-    let mut _3: i16;                     // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-    let mut _4: u16;                     // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-    let mut _5: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+    debug far => _1;\n+    let mut _0: isize;\n+    let _2: Far;\n+    let mut _3: i16;\n+    let mut _4: u16;\n+    let mut _5: bool;\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _4 = _3 as u16 (IntToInt);       // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _5 = Le(_4, const 1_u16);        // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        assume(move _5);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _3 as isize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:16: +1:17\n-        return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n+        StorageLive(_2);\n+        _2 = move _1;\n+        _3 = discriminant(_2);\n+        _4 = _3 as u16 (IntToInt);\n+        _5 = Le(_4, const 1_u16);\n+        assume(move _5);\n+        _0 = move _3 as isize (IntToInt);\n+        StorageDead(_2);\n+        return;\n     }\n }"}, {"sha": "d4eea0534f830e586c7e05a7ef87f24b827ffbd1", "filename": "tests/mir-opt/building/enum_cast.foo.built.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.foo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.foo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.foo.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,17 +1,17 @@\n // MIR for `foo` after built\n \n fn foo(_1: Foo) -> usize {\n-    debug foo => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n-    let _2: Foo;                         // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-    let mut _3: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    debug foo => _1;\n+    let mut _0: usize;\n+    let _2: Foo;\n+    let mut _3: isize;\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _3 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:16: +1:17\n-        return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n+        StorageLive(_2);\n+        _2 = move _1;\n+        _3 = discriminant(_2);\n+        _0 = move _3 as usize (IntToInt);\n+        StorageDead(_2);\n+        return;\n     }\n }"}, {"sha": "282859d7cd0142bbc03727c6a24f999bc8ba8f8e", "filename": "tests/mir-opt/building/enum_cast.offsetty.built.after.mir", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.offsetty.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.offsetty.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.offsetty.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,26 +1,26 @@\n // MIR for `offsetty` after built\n \n fn offsetty(_1: NotStartingAtZero) -> u32 {\n-    debug x => _1;                       // in scope 0 at $DIR/enum_cast.rs:+0:13: +0:14\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/enum_cast.rs:+0:38: +0:41\n-    let _2: NotStartingAtZero;           // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n-    let mut _3: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n-    let mut _4: u8;                      // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-    let mut _5: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-    let mut _6: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-    let mut _7: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+    debug x => _1;\n+    let mut _0: u32;\n+    let _2: NotStartingAtZero;\n+    let mut _3: isize;\n+    let mut _4: u8;\n+    let mut _5: bool;\n+    let mut _6: bool;\n+    let mut _7: bool;\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n-        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n-        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-        _4 = _3 as u8 (IntToInt);        // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-        _5 = Ge(_4, const 4_u8);         // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-        _6 = Le(_4, const 8_u8);         // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-        _7 = BitAnd(move _5, move _6);   // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-        assume(move _7);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-        _0 = move _3 as u32 (IntToInt);  // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:12: +1:13\n-        return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n+        StorageLive(_2);\n+        _2 = move _1;\n+        _3 = discriminant(_2);\n+        _4 = _3 as u8 (IntToInt);\n+        _5 = Ge(_4, const 4_u8);\n+        _6 = Le(_4, const 8_u8);\n+        _7 = BitAnd(move _5, move _6);\n+        assume(move _7);\n+        _0 = move _3 as u32 (IntToInt);\n+        StorageDead(_2);\n+        return;\n     }\n }"}, {"sha": "a9f7d6c78007acd33cf1c9a78859bed3ae3f12cc", "filename": "tests/mir-opt/building/enum_cast.signy.built.after.mir", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.signy.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.signy.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.signy.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,26 +1,26 @@\n // MIR for `signy` after built\n \n fn signy(_1: SignedAroundZero) -> i16 {\n-    debug x => _1;                       // in scope 0 at $DIR/enum_cast.rs:+0:10: +0:11\n-    let mut _0: i16;                     // return place in scope 0 at $DIR/enum_cast.rs:+0:34: +0:37\n-    let _2: SignedAroundZero;            // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n-    let mut _3: i16;                     // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n-    let mut _4: u16;                     // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-    let mut _5: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-    let mut _6: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-    let mut _7: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+    debug x => _1;\n+    let mut _0: i16;\n+    let _2: SignedAroundZero;\n+    let mut _3: i16;\n+    let mut _4: u16;\n+    let mut _5: bool;\n+    let mut _6: bool;\n+    let mut _7: bool;\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n-        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n-        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-        _4 = _3 as u16 (IntToInt);       // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-        _5 = Ge(_4, const 65534_u16);    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-        _6 = Le(_4, const 2_u16);        // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-        _7 = BitOr(move _5, move _6);    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-        assume(move _7);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-        _0 = move _3 as i16 (IntToInt);  // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n-        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:12: +1:13\n-        return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n+        StorageLive(_2);\n+        _2 = move _1;\n+        _3 = discriminant(_2);\n+        _4 = _3 as u16 (IntToInt);\n+        _5 = Ge(_4, const 65534_u16);\n+        _6 = Le(_4, const 2_u16);\n+        _7 = BitOr(move _5, move _6);\n+        assume(move _7);\n+        _0 = move _3 as i16 (IntToInt);\n+        StorageDead(_2);\n+        return;\n     }\n }"}, {"sha": "a232ab942b7ae2937c26fb2e81cc951b8ba620f9", "filename": "tests/mir-opt/building/enum_cast.unsigny.built.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.unsigny.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.unsigny.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.unsigny.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,17 +1,17 @@\n // MIR for `unsigny` after built\n \n fn unsigny(_1: UnsignedAroundZero) -> u16 {\n-    debug x => _1;                       // in scope 0 at $DIR/enum_cast.rs:+0:12: +0:13\n-    let mut _0: u16;                     // return place in scope 0 at $DIR/enum_cast.rs:+0:38: +0:41\n-    let _2: UnsignedAroundZero;          // in scope 0 at $DIR/enum_cast.rs:+2:5: +2:6\n-    let mut _3: u16;                     // in scope 0 at $DIR/enum_cast.rs:+2:5: +2:6\n+    debug x => _1;\n+    let mut _0: u16;\n+    let _2: UnsignedAroundZero;\n+    let mut _3: u16;\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+2:5: +2:6\n-        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+2:5: +2:6\n-        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+2:5: +2:13\n-        _0 = move _3 as u16 (IntToInt);  // scope 0 at $DIR/enum_cast.rs:+2:5: +2:13\n-        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+2:12: +2:13\n-        return;                          // scope 0 at $DIR/enum_cast.rs:+3:2: +3:2\n+        StorageLive(_2);\n+        _2 = move _1;\n+        _3 = discriminant(_2);\n+        _0 = move _3 as u16 (IntToInt);\n+        StorageDead(_2);\n+        return;\n     }\n }"}, {"sha": "915c5ef112c39722a5923cd28f13eab9b1f0e416", "filename": "tests/mir-opt/building/issue_101867.main.built.after.mir", "status": "modified", "additions": 33, "deletions": 39, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -5,71 +5,65 @@\n | 1: user_ty: Canonical { value: Ty(std::option::Option<u8>), max_universe: U0, variables: [] }, span: $DIR/issue_101867.rs:3:12: 3:22, inferred_ty: std::option::Option<u8>\n |\n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue_101867.rs:+0:11: +0:11\n-    let _1: std::option::Option<u8> as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/issue_101867.rs:+1:9: +1:10\n-    let mut _2: !;                       // in scope 0 at $DIR/issue_101867.rs:+2:26: +4:6\n-    let _3: ();                          // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n-    let mut _4: !;                       // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n-    let mut _6: isize;                   // in scope 0 at $DIR/issue_101867.rs:+2:9: +2:16\n+    let mut _0: ();\n+    let _1: std::option::Option<u8> as UserTypeProjection { base: UserType(0), projs: [] };\n+    let mut _2: !;\n+    let _3: ();\n+    let mut _4: !;\n+    let mut _6: isize;\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/issue_101867.rs:+1:9: +1:10\n-        let _5: u8;                      // in scope 1 at $DIR/issue_101867.rs:+2:14: +2:15\n+        debug x => _1;\n+        let _5: u8;\n         scope 2 {\n-            debug y => _5;               // in scope 2 at $DIR/issue_101867.rs:+2:14: +2:15\n+            debug y => _5;\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/issue_101867.rs:+1:9: +1:10\n-        _1 = Option::<u8>::Some(const 1_u8); // scope 0 at $DIR/issue_101867.rs:+1:25: +1:32\n-        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/issue_101867.rs:+1:9: +1:10\n-        AscribeUserType(_1, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/issue_101867.rs:+1:12: +1:22\n-        StorageLive(_5);                 // scope 1 at $DIR/issue_101867.rs:+2:14: +2:15\n-        FakeRead(ForMatchedPlace(None), _1); // scope 1 at $DIR/issue_101867.rs:+2:19: +2:20\n-        _6 = discriminant(_1);           // scope 1 at $DIR/issue_101867.rs:+2:19: +2:20\n-        switchInt(move _6) -> [1: bb4, otherwise: bb3]; // scope 1 at $DIR/issue_101867.rs:+2:9: +2:16\n+        StorageLive(_1);\n+        _1 = Option::<u8>::Some(const 1_u8);\n+        FakeRead(ForLet(None), _1);\n+        AscribeUserType(_1, o, UserTypeProjection { base: UserType(1), projs: [] });\n+        StorageLive(_5);\n+        FakeRead(ForMatchedPlace(None), _1);\n+        _6 = discriminant(_1);\n+        switchInt(move _6) -> [1: bb4, otherwise: bb3];\n     }\n \n     bb1: {\n-        StorageLive(_3);                 // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n-        StorageLive(_4);                 // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n-        _4 = begin_panic::<&str>(const \"explicit panic\") -> bb7; // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+        StorageLive(_3);\n+        StorageLive(_4);\n+        _4 = begin_panic::<&str>(const \"explicit panic\") -> bb7;\n     }\n \n     bb2: {\n-        StorageDead(_4);                 // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n-        StorageDead(_3);                 // scope 1 at $DIR/issue_101867.rs:+3:16: +3:17\n-        unreachable;                     // scope 1 at $DIR/issue_101867.rs:+2:26: +4:6\n+        StorageDead(_4);\n+        StorageDead(_3);\n+        unreachable;\n     }\n \n     bb3: {\n-        goto -> bb6;                     // scope 1 at $DIR/issue_101867.rs:+2:19: +2:20\n+        goto -> bb6;\n     }\n \n     bb4: {\n-        falseEdge -> [real: bb5, imaginary: bb3]; // scope 1 at $DIR/issue_101867.rs:+2:9: +2:16\n+        falseEdge -> [real: bb5, imaginary: bb3];\n     }\n \n     bb5: {\n-        _5 = ((_1 as Some).0: u8);       // scope 1 at $DIR/issue_101867.rs:+2:14: +2:15\n-        _0 = const ();                   // scope 0 at $DIR/issue_101867.rs:+0:11: +5:2\n-        StorageDead(_5);                 // scope 1 at $DIR/issue_101867.rs:+5:1: +5:2\n-        StorageDead(_1);                 // scope 0 at $DIR/issue_101867.rs:+5:1: +5:2\n-        return;                          // scope 0 at $DIR/issue_101867.rs:+5:2: +5:2\n+        _5 = ((_1 as Some).0: u8);\n+        _0 = const ();\n+        StorageDead(_5);\n+        StorageDead(_1);\n+        return;\n     }\n \n     bb6: {\n-        StorageDead(_5);                 // scope 1 at $DIR/issue_101867.rs:+5:1: +5:2\n-        goto -> bb1;                     // scope 0 at $DIR/issue_101867.rs:+0:11: +5:2\n+        StorageDead(_5);\n+        goto -> bb1;\n     }\n \n     bb7 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue_101867.rs:+0:1: +5:2\n+        resume;\n     }\n }"}, {"sha": "f809132bc63f71dc0dba241610dc3702e5e3da4a", "filename": "tests/mir-opt/building/issue_49232.main.built.after.mir", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,82 +1,79 @@\n // MIR for `main` after built\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue_49232.rs:+0:11: +0:11\n-    let mut _1: ();                      // in scope 0 at $DIR/issue_49232.rs:+0:1: +10:2\n-    let _2: i32;                         // in scope 0 at $DIR/issue_49232.rs:+2:13: +2:19\n-    let mut _3: bool;                    // in scope 0 at $DIR/issue_49232.rs:+3:19: +3:23\n-    let mut _4: !;                       // in scope 0 at $DIR/issue_49232.rs:+5:25: +5:30\n-    let _5: ();                          // in scope 0 at $DIR/issue_49232.rs:+8:9: +8:22\n-    let mut _6: &i32;                    // in scope 0 at $DIR/issue_49232.rs:+8:14: +8:21\n+    let mut _0: ();\n+    let mut _1: ();\n+    let _2: i32;\n+    let mut _3: bool;\n+    let mut _4: !;\n+    let _5: ();\n+    let mut _6: &i32;\n     scope 1 {\n-        debug beacon => _2;              // in scope 1 at $DIR/issue_49232.rs:+2:13: +2:19\n+        debug beacon => _2;\n     }\n \n     bb0: {\n-        goto -> bb1;                     // scope 0 at $DIR/issue_49232.rs:+1:5: +9:6\n+        goto -> bb1;\n     }\n \n     bb1: {\n-        falseUnwind -> [real: bb2, unwind: bb11]; // scope 0 at $DIR/issue_49232.rs:+1:5: +9:6\n+        falseUnwind -> [real: bb2, unwind: bb11];\n     }\n \n     bb2: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue_49232.rs:+2:13: +2:19\n-        StorageLive(_3);                 // scope 0 at $DIR/issue_49232.rs:+3:19: +3:23\n-        _3 = const true;                 // scope 0 at $DIR/issue_49232.rs:+3:19: +3:23\n-        FakeRead(ForMatchedPlace(None), _3); // scope 0 at $DIR/issue_49232.rs:+3:19: +3:23\n-        switchInt(_3) -> [0: bb3, otherwise: bb4]; // scope 0 at $DIR/issue_49232.rs:+3:13: +3:23\n+        StorageLive(_2);\n+        StorageLive(_3);\n+        _3 = const true;\n+        FakeRead(ForMatchedPlace(None), _3);\n+        switchInt(_3) -> [0: bb3, otherwise: bb4];\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb5, imaginary: bb4]; // scope 0 at $DIR/issue_49232.rs:+4:17: +4:22\n+        falseEdge -> [real: bb5, imaginary: bb4];\n     }\n \n     bb4: {\n-        _0 = const ();                   // scope 0 at $DIR/issue_49232.rs:+5:25: +5:30\n-        goto -> bb10;                    // scope 0 at $DIR/issue_49232.rs:+5:25: +5:30\n+        _0 = const ();\n+        goto -> bb10;\n     }\n \n     bb5: {\n-        _2 = const 4_i32;                // scope 0 at $DIR/issue_49232.rs:+4:26: +4:27\n-        goto -> bb8;                     // scope 0 at $DIR/issue_49232.rs:+4:26: +4:27\n+        _2 = const 4_i32;\n+        goto -> bb8;\n     }\n \n     bb6: {\n-        unreachable;                     // scope 0 at $DIR/issue_49232.rs:+5:25: +5:30\n+        unreachable;\n     }\n \n     bb7: {\n-        goto -> bb8;                     // scope 0 at $DIR/issue_49232.rs:+6:13: +6:14\n+        goto -> bb8;\n     }\n \n     bb8: {\n-        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue_49232.rs:+2:13: +2:19\n-        StorageDead(_3);                 // scope 0 at $DIR/issue_49232.rs:+7:10: +7:11\n-        StorageLive(_5);                 // scope 1 at $DIR/issue_49232.rs:+8:9: +8:22\n-        StorageLive(_6);                 // scope 1 at $DIR/issue_49232.rs:+8:14: +8:21\n-        _6 = &_2;                        // scope 1 at $DIR/issue_49232.rs:+8:14: +8:21\n-        _5 = std::mem::drop::<&i32>(move _6) -> [return: bb9, unwind: bb11]; // scope 1 at $DIR/issue_49232.rs:+8:9: +8:22\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue_49232.rs:13:9: 13:13\n-                                         // + literal: Const { ty: fn(&i32) {std::mem::drop::<&i32>}, val: Value(<ZST>) }\n+        FakeRead(ForLet(None), _2);\n+        StorageDead(_3);\n+        StorageLive(_5);\n+        StorageLive(_6);\n+        _6 = &_2;\n+        _5 = std::mem::drop::<&i32>(move _6) -> [return: bb9, unwind: bb11];\n     }\n \n     bb9: {\n-        StorageDead(_6);                 // scope 1 at $DIR/issue_49232.rs:+8:21: +8:22\n-        StorageDead(_5);                 // scope 1 at $DIR/issue_49232.rs:+8:22: +8:23\n-        _1 = const ();                   // scope 0 at $DIR/issue_49232.rs:+1:10: +9:6\n-        StorageDead(_2);                 // scope 0 at $DIR/issue_49232.rs:+9:5: +9:6\n-        goto -> bb1;                     // scope 0 at $DIR/issue_49232.rs:+1:5: +9:6\n+        StorageDead(_6);\n+        StorageDead(_5);\n+        _1 = const ();\n+        StorageDead(_2);\n+        goto -> bb1;\n     }\n \n     bb10: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue_49232.rs:+7:10: +7:11\n-        StorageDead(_2);                 // scope 0 at $DIR/issue_49232.rs:+9:5: +9:6\n-        return;                          // scope 0 at $DIR/issue_49232.rs:+10:2: +10:2\n+        StorageDead(_3);\n+        StorageDead(_2);\n+        return;\n     }\n \n     bb11 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue_49232.rs:+0:1: +10:2\n+        resume;\n     }\n }"}, {"sha": "bd4cd4eb6789ad045c3213700b06d55005784a09", "filename": "tests/mir-opt/building/match_false_edges.full_tested_match.built.after.mir", "status": "modified", "additions": 61, "deletions": 64, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,113 +1,110 @@\n // MIR for `full_tested_match` after built\n \n fn full_tested_match() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:+0:28: +0:28\n-    let mut _1: (i32, i32);              // in scope 0 at $DIR/match_false_edges.rs:+1:13: +5:6\n-    let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-    let mut _3: isize;                   // in scope 0 at $DIR/match_false_edges.rs:+2:9: +2:16\n-    let mut _4: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-    let _5: i32;                         // in scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-    let _6: &i32;                        // in scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-    let mut _7: bool;                    // in scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n-    let mut _8: i32;                     // in scope 0 at $DIR/match_false_edges.rs:+2:35: +2:36\n-    let _9: i32;                         // in scope 0 at $DIR/match_false_edges.rs:+3:14: +3:15\n-    let mut _10: i32;                    // in scope 0 at $DIR/match_false_edges.rs:+3:24: +3:25\n+    let mut _0: ();\n+    let mut _1: (i32, i32);\n+    let mut _2: std::option::Option<i32>;\n+    let mut _3: isize;\n+    let mut _4: &std::option::Option<i32>;\n+    let _5: i32;\n+    let _6: &i32;\n+    let mut _7: bool;\n+    let mut _8: i32;\n+    let _9: i32;\n+    let mut _10: i32;\n     scope 1 {\n     }\n     scope 2 {\n-        debug x => _5;                   // in scope 2 at $DIR/match_false_edges.rs:+2:14: +2:15\n-        debug x => _6;                   // in scope 2 at $DIR/match_false_edges.rs:+2:14: +2:15\n+        debug x => _5;\n+        debug x => _6;\n     }\n     scope 3 {\n-        debug y => _9;                   // in scope 3 at $DIR/match_false_edges.rs:+3:14: +3:15\n+        debug y => _9;\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:+1:13: +5:6\n-        StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-        _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-        _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-        switchInt(move _3) -> [0: bb1, 1: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:27\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        _2 = Option::<i32>::Some(const 42_i32);\n+        FakeRead(ForMatchedPlace(None), _2);\n+        _3 = discriminant(_2);\n+        switchInt(move _3) -> [0: bb1, 1: bb2, otherwise: bb4];\n     }\n \n     bb1: {\n-        _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:+4:17: +4:23\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+4:17: +4:23\n+        _1 = (const 3_i32, const 3_i32);\n+        goto -> bb11;\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb5, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:+2:9: +2:16\n+        falseEdge -> [real: bb5, imaginary: bb3];\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb10, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:16\n+        falseEdge -> [real: bb10, imaginary: bb1];\n     }\n \n     bb4: {\n-        unreachable;                     // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n+        unreachable;\n     }\n \n     bb5: {\n-        StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-        _6 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-        _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-        StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n-        _7 = guard() -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:14:20: 14:25\n-                                         // + literal: Const { ty: fn() -> bool {guard}, val: Value(<ZST>) }\n+        StorageLive(_6);\n+        _6 = &((_2 as Some).0: i32);\n+        _4 = &shallow _2;\n+        StorageLive(_7);\n+        _7 = guard() -> [return: bb6, unwind: bb12];\n     }\n \n     bb6: {\n-        switchInt(move _7) -> [0: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+        switchInt(move _7) -> [0: bb8, otherwise: bb7];\n     }\n \n     bb7: {\n-        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:26: +2:27\n-        FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:+2:26: +2:27\n-        FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:+2:26: +2:27\n-        StorageLive(_5);                 // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-        _5 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-        StorageLive(_8);                 // scope 2 at $DIR/match_false_edges.rs:+2:35: +2:36\n-        _8 = _5;                         // scope 2 at $DIR/match_false_edges.rs:+2:35: +2:36\n-        _1 = (const 1_i32, move _8);     // scope 2 at $DIR/match_false_edges.rs:+2:31: +2:37\n-        StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:+2:36: +2:37\n-        StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n-        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n+        StorageDead(_7);\n+        FakeRead(ForMatchGuard, _4);\n+        FakeRead(ForGuardBinding, _6);\n+        StorageLive(_5);\n+        _5 = ((_2 as Some).0: i32);\n+        StorageLive(_8);\n+        _8 = _5;\n+        _1 = (const 1_i32, move _8);\n+        StorageDead(_8);\n+        StorageDead(_5);\n+        StorageDead(_6);\n+        goto -> bb11;\n     }\n \n     bb8: {\n-        goto -> bb9;                     // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+        goto -> bb9;\n     }\n \n     bb9: {\n-        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:26: +2:27\n-        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n-        goto -> bb3;                     // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+        StorageDead(_7);\n+        StorageDead(_6);\n+        goto -> bb3;\n     }\n \n     bb10: {\n-        StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:+3:14: +3:15\n-        _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:+3:14: +3:15\n-        StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:+3:24: +3:25\n-        _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:+3:24: +3:25\n-        _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:+3:20: +3:26\n-        StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:+3:25: +3:26\n-        StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:+3:25: +3:26\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+3:25: +3:26\n+        StorageLive(_9);\n+        _9 = ((_2 as Some).0: i32);\n+        StorageLive(_10);\n+        _10 = _9;\n+        _1 = (const 2_i32, move _10);\n+        StorageDead(_10);\n+        StorageDead(_9);\n+        goto -> bb11;\n     }\n \n     bb11: {\n-        PlaceMention(_1);                // scope 0 at $DIR/match_false_edges.rs:+1:13: +5:6\n-        StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n-        StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n-        _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:+0:28: +6:2\n-        return;                          // scope 0 at $DIR/match_false_edges.rs:+6:2: +6:2\n+        PlaceMention(_1);\n+        StorageDead(_2);\n+        StorageDead(_1);\n+        _0 = const ();\n+        return;\n     }\n \n     bb12 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:+0:1: +6:2\n+        resume;\n     }\n }"}, {"sha": "595e3ab9224d95217bfa5f04c637b6e34c0d15d7", "filename": "tests/mir-opt/building/match_false_edges.full_tested_match2.built.after.mir", "status": "modified", "additions": 61, "deletions": 64, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match2.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match2.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.full_tested_match2.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,113 +1,110 @@\n // MIR for `full_tested_match2` after built\n \n fn full_tested_match2() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:+0:29: +0:29\n-    let mut _1: (i32, i32);              // in scope 0 at $DIR/match_false_edges.rs:+1:13: +5:6\n-    let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-    let mut _3: isize;                   // in scope 0 at $DIR/match_false_edges.rs:+2:9: +2:16\n-    let mut _4: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-    let _5: i32;                         // in scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-    let _6: &i32;                        // in scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-    let mut _7: bool;                    // in scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n-    let mut _8: i32;                     // in scope 0 at $DIR/match_false_edges.rs:+2:35: +2:36\n-    let _9: i32;                         // in scope 0 at $DIR/match_false_edges.rs:+4:14: +4:15\n-    let mut _10: i32;                    // in scope 0 at $DIR/match_false_edges.rs:+4:24: +4:25\n+    let mut _0: ();\n+    let mut _1: (i32, i32);\n+    let mut _2: std::option::Option<i32>;\n+    let mut _3: isize;\n+    let mut _4: &std::option::Option<i32>;\n+    let _5: i32;\n+    let _6: &i32;\n+    let mut _7: bool;\n+    let mut _8: i32;\n+    let _9: i32;\n+    let mut _10: i32;\n     scope 1 {\n     }\n     scope 2 {\n-        debug x => _5;                   // in scope 2 at $DIR/match_false_edges.rs:+2:14: +2:15\n-        debug x => _6;                   // in scope 2 at $DIR/match_false_edges.rs:+2:14: +2:15\n+        debug x => _5;\n+        debug x => _6;\n     }\n     scope 3 {\n-        debug y => _9;                   // in scope 3 at $DIR/match_false_edges.rs:+4:14: +4:15\n+        debug y => _9;\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:+1:13: +5:6\n-        StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-        _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-        _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-        switchInt(move _3) -> [0: bb1, 1: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:27\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        _2 = Option::<i32>::Some(const 42_i32);\n+        FakeRead(ForMatchedPlace(None), _2);\n+        _3 = discriminant(_2);\n+        switchInt(move _3) -> [0: bb1, 1: bb2, otherwise: bb4];\n     }\n \n     bb1: {\n-        falseEdge -> [real: bb10, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:13\n+        falseEdge -> [real: bb10, imaginary: bb3];\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb5, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+2:9: +2:16\n+        falseEdge -> [real: bb5, imaginary: bb1];\n     }\n \n     bb3: {\n-        StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:+4:14: +4:15\n-        _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:+4:14: +4:15\n-        StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:+4:24: +4:25\n-        _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:+4:24: +4:25\n-        _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:+4:20: +4:26\n-        StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:+4:25: +4:26\n-        StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:+4:25: +4:26\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+4:25: +4:26\n+        StorageLive(_9);\n+        _9 = ((_2 as Some).0: i32);\n+        StorageLive(_10);\n+        _10 = _9;\n+        _1 = (const 2_i32, move _10);\n+        StorageDead(_10);\n+        StorageDead(_9);\n+        goto -> bb11;\n     }\n \n     bb4: {\n-        unreachable;                     // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n+        unreachable;\n     }\n \n     bb5: {\n-        StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-        _6 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-        _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:27\n-        StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n-        _7 = guard() -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:25:20: 25:25\n-                                         // + literal: Const { ty: fn() -> bool {guard}, val: Value(<ZST>) }\n+        StorageLive(_6);\n+        _6 = &((_2 as Some).0: i32);\n+        _4 = &shallow _2;\n+        StorageLive(_7);\n+        _7 = guard() -> [return: bb6, unwind: bb12];\n     }\n \n     bb6: {\n-        switchInt(move _7) -> [0: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+        switchInt(move _7) -> [0: bb8, otherwise: bb7];\n     }\n \n     bb7: {\n-        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:26: +2:27\n-        FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:+2:26: +2:27\n-        FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:+2:26: +2:27\n-        StorageLive(_5);                 // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-        _5 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-        StorageLive(_8);                 // scope 2 at $DIR/match_false_edges.rs:+2:35: +2:36\n-        _8 = _5;                         // scope 2 at $DIR/match_false_edges.rs:+2:35: +2:36\n-        _1 = (const 1_i32, move _8);     // scope 2 at $DIR/match_false_edges.rs:+2:31: +2:37\n-        StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:+2:36: +2:37\n-        StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n-        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n+        StorageDead(_7);\n+        FakeRead(ForMatchGuard, _4);\n+        FakeRead(ForGuardBinding, _6);\n+        StorageLive(_5);\n+        _5 = ((_2 as Some).0: i32);\n+        StorageLive(_8);\n+        _8 = _5;\n+        _1 = (const 1_i32, move _8);\n+        StorageDead(_8);\n+        StorageDead(_5);\n+        StorageDead(_6);\n+        goto -> bb11;\n     }\n \n     bb8: {\n-        goto -> bb9;                     // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+        goto -> bb9;\n     }\n \n     bb9: {\n-        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:26: +2:27\n-        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:36: +2:37\n-        falseEdge -> [real: bb3, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+2:20: +2:27\n+        StorageDead(_7);\n+        StorageDead(_6);\n+        falseEdge -> [real: bb3, imaginary: bb1];\n     }\n \n     bb10: {\n-        _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:+3:17: +3:23\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:+3:17: +3:23\n+        _1 = (const 3_i32, const 3_i32);\n+        goto -> bb11;\n     }\n \n     bb11: {\n-        PlaceMention(_1);                // scope 0 at $DIR/match_false_edges.rs:+1:13: +5:6\n-        StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n-        StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:+5:6: +5:7\n-        _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:+0:29: +6:2\n-        return;                          // scope 0 at $DIR/match_false_edges.rs:+6:2: +6:2\n+        PlaceMention(_1);\n+        StorageDead(_2);\n+        StorageDead(_1);\n+        _0 = const ();\n+        return;\n     }\n \n     bb12 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:+0:1: +6:2\n+        resume;\n     }\n }"}, {"sha": "91fe2f90e35b2e97e855c85104057b885da4f3a0", "filename": "tests/mir-opt/building/match_false_edges.main.built.after.mir", "status": "modified", "additions": 92, "deletions": 98, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fmatch_false_edges.main.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,175 +1,169 @@\n // MIR for `main` after built\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:+0:11: +0:11\n-    let mut _1: i32;                     // in scope 0 at $DIR/match_false_edges.rs:+1:13: +6:6\n-    let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n-    let mut _3: isize;                   // in scope 0 at $DIR/match_false_edges.rs:+4:9: +4:16\n-    let mut _4: isize;                   // in scope 0 at $DIR/match_false_edges.rs:+2:9: +2:17\n-    let mut _5: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n-    let _6: i32;                         // in scope 0 at $DIR/match_false_edges.rs:+2:14: +2:16\n-    let _7: &i32;                        // in scope 0 at $DIR/match_false_edges.rs:+2:14: +2:16\n-    let mut _8: bool;                    // in scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n-    let _9: std::option::Option<i32>;    // in scope 0 at $DIR/match_false_edges.rs:+3:9: +3:11\n-    let _10: i32;                        // in scope 0 at $DIR/match_false_edges.rs:+4:14: +4:15\n-    let _11: &i32;                       // in scope 0 at $DIR/match_false_edges.rs:+4:14: +4:15\n-    let mut _12: bool;                   // in scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n-    let mut _13: i32;                    // in scope 0 at $DIR/match_false_edges.rs:+4:27: +4:28\n-    let _14: std::option::Option<i32>;   // in scope 0 at $DIR/match_false_edges.rs:+5:9: +5:11\n+    let mut _0: ();\n+    let mut _1: i32;\n+    let mut _2: std::option::Option<i32>;\n+    let mut _3: isize;\n+    let mut _4: isize;\n+    let mut _5: &std::option::Option<i32>;\n+    let _6: i32;\n+    let _7: &i32;\n+    let mut _8: bool;\n+    let _9: std::option::Option<i32>;\n+    let _10: i32;\n+    let _11: &i32;\n+    let mut _12: bool;\n+    let mut _13: i32;\n+    let _14: std::option::Option<i32>;\n     scope 1 {\n     }\n     scope 2 {\n-        debug _w => _6;                  // in scope 2 at $DIR/match_false_edges.rs:+2:14: +2:16\n-        debug _w => _7;                  // in scope 2 at $DIR/match_false_edges.rs:+2:14: +2:16\n+        debug _w => _6;\n+        debug _w => _7;\n     }\n     scope 3 {\n-        debug _x => _9;                  // in scope 3 at $DIR/match_false_edges.rs:+3:9: +3:11\n+        debug _x => _9;\n     }\n     scope 4 {\n-        debug y => _10;                  // in scope 4 at $DIR/match_false_edges.rs:+4:14: +4:15\n-        debug y => _11;                  // in scope 4 at $DIR/match_false_edges.rs:+4:14: +4:15\n+        debug y => _10;\n+        debug y => _11;\n     }\n     scope 5 {\n-        debug _z => _14;                 // in scope 5 at $DIR/match_false_edges.rs:+5:9: +5:11\n+        debug _z => _14;\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:+1:13: +6:6\n-        StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n-        _2 = Option::<i32>::Some(const 1_i32); // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n-        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n-        _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n-        switchInt(move _4) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:26\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        _2 = Option::<i32>::Some(const 1_i32);\n+        FakeRead(ForMatchedPlace(None), _2);\n+        _4 = discriminant(_2);\n+        switchInt(move _4) -> [1: bb2, otherwise: bb1];\n     }\n \n     bb1: {\n-        falseEdge -> [real: bb13, imaginary: bb6]; // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:11\n+        falseEdge -> [real: bb13, imaginary: bb6];\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb8, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+2:9: +2:17\n+        falseEdge -> [real: bb8, imaginary: bb1];\n     }\n \n     bb3: {\n-        goto -> bb1;                     // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:26\n+        goto -> bb1;\n     }\n \n     bb4: {\n-        _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n-        switchInt(move _3) -> [1: bb6, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:26\n+        _3 = discriminant(_2);\n+        switchInt(move _3) -> [1: bb6, otherwise: bb5];\n     }\n \n     bb5: {\n-        StorageLive(_14);                // scope 0 at $DIR/match_false_edges.rs:+5:9: +5:11\n-        _14 = _2;                        // scope 0 at $DIR/match_false_edges.rs:+5:9: +5:11\n-        _1 = const 4_i32;                // scope 5 at $DIR/match_false_edges.rs:+5:15: +5:16\n-        StorageDead(_14);                // scope 0 at $DIR/match_false_edges.rs:+5:15: +5:16\n-        goto -> bb19;                    // scope 0 at $DIR/match_false_edges.rs:+5:15: +5:16\n+        StorageLive(_14);\n+        _14 = _2;\n+        _1 = const 4_i32;\n+        StorageDead(_14);\n+        goto -> bb19;\n     }\n \n     bb6: {\n-        falseEdge -> [real: bb14, imaginary: bb5]; // scope 0 at $DIR/match_false_edges.rs:+4:9: +4:16\n+        falseEdge -> [real: bb14, imaginary: bb5];\n     }\n \n     bb7: {\n-        goto -> bb5;                     // scope 0 at $DIR/match_false_edges.rs:+1:13: +1:26\n+        goto -> bb5;\n     }\n \n     bb8: {\n-        StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:16\n-        _7 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:16\n-        _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n-        StorageLive(_8);                 // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n-        _8 = guard() -> [return: bb9, unwind: bb20]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:34:21: 34:26\n-                                         // + literal: Const { ty: fn() -> bool {guard}, val: Value(<ZST>) }\n+        StorageLive(_7);\n+        _7 = &((_2 as Some).0: i32);\n+        _5 = &shallow _2;\n+        StorageLive(_8);\n+        _8 = guard() -> [return: bb9, unwind: bb20];\n     }\n \n     bb9: {\n-        switchInt(move _8) -> [0: bb11, otherwise: bb10]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n+        switchInt(move _8) -> [0: bb11, otherwise: bb10];\n     }\n \n     bb10: {\n-        StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:+2:27: +2:28\n-        FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:+2:27: +2:28\n-        FakeRead(ForGuardBinding, _7);   // scope 0 at $DIR/match_false_edges.rs:+2:27: +2:28\n-        StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:16\n-        _6 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:16\n-        _1 = const 1_i32;                // scope 2 at $DIR/match_false_edges.rs:+2:32: +2:33\n-        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:32: +2:33\n-        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:32: +2:33\n-        goto -> bb19;                    // scope 0 at $DIR/match_false_edges.rs:+2:32: +2:33\n+        StorageDead(_8);\n+        FakeRead(ForMatchGuard, _5);\n+        FakeRead(ForGuardBinding, _7);\n+        StorageLive(_6);\n+        _6 = ((_2 as Some).0: i32);\n+        _1 = const 1_i32;\n+        StorageDead(_6);\n+        StorageDead(_7);\n+        goto -> bb19;\n     }\n \n     bb11: {\n-        goto -> bb12;                    // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n+        goto -> bb12;\n     }\n \n     bb12: {\n-        StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:+2:27: +2:28\n-        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:+2:32: +2:33\n-        falseEdge -> [real: bb3, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:+2:21: +2:28\n+        StorageDead(_8);\n+        StorageDead(_7);\n+        falseEdge -> [real: bb3, imaginary: bb1];\n     }\n \n     bb13: {\n-        StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:11\n-        _9 = _2;                         // scope 0 at $DIR/match_false_edges.rs:+3:9: +3:11\n-        _1 = const 2_i32;                // scope 3 at $DIR/match_false_edges.rs:+3:15: +3:16\n-        StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:+3:15: +3:16\n-        goto -> bb19;                    // scope 0 at $DIR/match_false_edges.rs:+3:15: +3:16\n+        StorageLive(_9);\n+        _9 = _2;\n+        _1 = const 2_i32;\n+        StorageDead(_9);\n+        goto -> bb19;\n     }\n \n     bb14: {\n-        StorageLive(_11);                // scope 0 at $DIR/match_false_edges.rs:+4:14: +4:15\n-        _11 = &((_2 as Some).0: i32);    // scope 0 at $DIR/match_false_edges.rs:+4:14: +4:15\n-        _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:+1:19: +1:26\n-        StorageLive(_12);                // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n-        StorageLive(_13);                // scope 0 at $DIR/match_false_edges.rs:+4:27: +4:28\n-        _13 = (*_11);                    // scope 0 at $DIR/match_false_edges.rs:+4:27: +4:28\n-        _12 = guard2(move _13) -> [return: bb15, unwind: bb20]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n-                                         // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:36:20: 36:26\n-                                         // + literal: Const { ty: fn(i32) -> bool {guard2}, val: Value(<ZST>) }\n+        StorageLive(_11);\n+        _11 = &((_2 as Some).0: i32);\n+        _5 = &shallow _2;\n+        StorageLive(_12);\n+        StorageLive(_13);\n+        _13 = (*_11);\n+        _12 = guard2(move _13) -> [return: bb15, unwind: bb20];\n     }\n \n     bb15: {\n-        switchInt(move _12) -> [0: bb17, otherwise: bb16]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n+        switchInt(move _12) -> [0: bb17, otherwise: bb16];\n     }\n \n     bb16: {\n-        StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n-        StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n-        FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n-        FakeRead(ForGuardBinding, _11);  // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n-        StorageLive(_10);                // scope 0 at $DIR/match_false_edges.rs:+4:14: +4:15\n-        _10 = ((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:+4:14: +4:15\n-        _1 = const 3_i32;                // scope 4 at $DIR/match_false_edges.rs:+4:33: +4:34\n-        StorageDead(_10);                // scope 0 at $DIR/match_false_edges.rs:+4:33: +4:34\n-        StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:+4:33: +4:34\n-        goto -> bb19;                    // scope 0 at $DIR/match_false_edges.rs:+4:33: +4:34\n+        StorageDead(_13);\n+        StorageDead(_12);\n+        FakeRead(ForMatchGuard, _5);\n+        FakeRead(ForGuardBinding, _11);\n+        StorageLive(_10);\n+        _10 = ((_2 as Some).0: i32);\n+        _1 = const 3_i32;\n+        StorageDead(_10);\n+        StorageDead(_11);\n+        goto -> bb19;\n     }\n \n     bb17: {\n-        goto -> bb18;                    // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n+        goto -> bb18;\n     }\n \n     bb18: {\n-        StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n-        StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:+4:28: +4:29\n-        StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:+4:33: +4:34\n-        falseEdge -> [real: bb7, imaginary: bb5]; // scope 0 at $DIR/match_false_edges.rs:+4:20: +4:29\n+        StorageDead(_13);\n+        StorageDead(_12);\n+        StorageDead(_11);\n+        falseEdge -> [real: bb7, imaginary: bb5];\n     }\n \n     bb19: {\n-        PlaceMention(_1);                // scope 0 at $DIR/match_false_edges.rs:+1:13: +6:6\n-        StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:+6:6: +6:7\n-        StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:+6:6: +6:7\n-        _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:+0:11: +7:2\n-        return;                          // scope 0 at $DIR/match_false_edges.rs:+7:2: +7:2\n+        PlaceMention(_1);\n+        StorageDead(_2);\n+        StorageDead(_1);\n+        _0 = const ();\n+        return;\n     }\n \n     bb20 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:+0:1: +7:2\n+        resume;\n     }\n }"}, {"sha": "b3db1d76ca7065658441e3d189b3ec9cd85ccfa6", "filename": "tests/mir-opt/building/receiver_ptr_mutability.main.built.after.mir", "status": "modified", "additions": 58, "deletions": 67, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.main.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -7,90 +7,81 @@\n | 3: user_ty: Canonical { value: Ty(&&&&*mut Test), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }] }, span: $DIR/receiver_ptr_mutability.rs:18:18: 18:31, inferred_ty: &&&&*mut Test\n |\n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/receiver_ptr_mutability.rs:+0:11: +0:11\n-    let _1: *mut Test as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/receiver_ptr_mutability.rs:+1:9: +1:12\n-    let _2: ();                          // in scope 0 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:12\n-    let mut _3: *const Test;             // in scope 0 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:12\n-    let mut _4: *mut Test;               // in scope 0 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:8\n-    let _6: &&&&*mut Test;               // in scope 0 at $DIR/receiver_ptr_mutability.rs:+5:34: +5:41\n-    let _7: &&&*mut Test;                // in scope 0 at $DIR/receiver_ptr_mutability.rs:+5:35: +5:41\n-    let _8: &&*mut Test;                 // in scope 0 at $DIR/receiver_ptr_mutability.rs:+5:36: +5:41\n-    let _9: &*mut Test;                  // in scope 0 at $DIR/receiver_ptr_mutability.rs:+5:37: +5:41\n-    let _10: ();                         // in scope 0 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n-    let mut _11: *const Test;            // in scope 0 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n-    let mut _12: *mut Test;              // in scope 0 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n+    let mut _0: ();\n+    let _1: *mut Test as UserTypeProjection { base: UserType(0), projs: [] };\n+    let _2: ();\n+    let mut _3: *const Test;\n+    let mut _4: *mut Test;\n+    let _6: &&&&*mut Test;\n+    let _7: &&&*mut Test;\n+    let _8: &&*mut Test;\n+    let _9: &*mut Test;\n+    let _10: ();\n+    let mut _11: *const Test;\n+    let mut _12: *mut Test;\n     scope 1 {\n-        debug ptr => _1;                 // in scope 1 at $DIR/receiver_ptr_mutability.rs:+1:9: +1:12\n-        let _5: &&&&*mut Test as UserTypeProjection { base: UserType(2), projs: [] }; // in scope 1 at $DIR/receiver_ptr_mutability.rs:+5:9: +5:16\n+        debug ptr => _1;\n+        let _5: &&&&*mut Test as UserTypeProjection { base: UserType(2), projs: [] };\n         scope 2 {\n-            debug ptr_ref => _5;         // in scope 2 at $DIR/receiver_ptr_mutability.rs:+5:9: +5:16\n+            debug ptr_ref => _5;\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/receiver_ptr_mutability.rs:+1:9: +1:12\n-        _1 = null_mut::<Test>() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/receiver_ptr_mutability.rs:+1:26: +1:46\n-                                         // mir::Constant\n-                                         // + span: $DIR/receiver_ptr_mutability.rs:14:26: 14:44\n-                                         // + literal: Const { ty: fn() -> *mut Test {null_mut::<Test>}, val: Value(<ZST>) }\n+        StorageLive(_1);\n+        _1 = null_mut::<Test>() -> [return: bb1, unwind: bb4];\n     }\n \n     bb1: {\n-        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/receiver_ptr_mutability.rs:+1:9: +1:12\n-        AscribeUserType(_1, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/receiver_ptr_mutability.rs:+1:14: +1:23\n-        StorageLive(_2);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:12\n-        StorageLive(_3);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:12\n-        StorageLive(_4);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:8\n-        _4 = _1;                         // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:8\n-        _3 = move _4 as *const Test (Pointer(MutToConstPointer)); // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:12\n-        StorageDead(_4);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:7: +2:8\n-        _2 = Test::x(move _3) -> [return: bb2, unwind: bb4]; // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:5: +2:12\n-                                         // mir::Constant\n-                                         // + span: $DIR/receiver_ptr_mutability.rs:15:9: 15:10\n-                                         // + literal: Const { ty: fn(*const Test) {Test::x}, val: Value(<ZST>) }\n+        FakeRead(ForLet(None), _1);\n+        AscribeUserType(_1, o, UserTypeProjection { base: UserType(1), projs: [] });\n+        StorageLive(_2);\n+        StorageLive(_3);\n+        StorageLive(_4);\n+        _4 = _1;\n+        _3 = move _4 as *const Test (Pointer(MutToConstPointer));\n+        StorageDead(_4);\n+        _2 = Test::x(move _3) -> [return: bb2, unwind: bb4];\n     }\n \n     bb2: {\n-        StorageDead(_3);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:11: +2:12\n-        StorageDead(_2);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+2:12: +2:13\n-        StorageLive(_5);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:9: +5:16\n-        StorageLive(_6);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:34: +5:41\n-        StorageLive(_7);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:35: +5:41\n-        StorageLive(_8);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:36: +5:41\n-        StorageLive(_9);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:37: +5:41\n-        _9 = &_1;                        // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:37: +5:41\n-        _8 = &_9;                        // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:36: +5:41\n-        _7 = &_8;                        // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:35: +5:41\n-        _6 = &_7;                        // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:34: +5:41\n-        _5 = &(*_6);                     // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:34: +5:41\n-        FakeRead(ForLet(None), _5);      // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:9: +5:16\n-        AscribeUserType(_5, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:18: +5:31\n-        StorageDead(_6);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+5:41: +5:42\n-        StorageLive(_10);                // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n-        StorageLive(_11);                // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n-        StorageLive(_12);                // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n-        _12 = (*(*(*(*_5))));            // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n-        _11 = move _12 as *const Test (Pointer(MutToConstPointer)); // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n-        StorageDead(_12);                // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:11: +6:12\n-        _10 = Test::x(move _11) -> [return: bb3, unwind: bb4]; // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:5: +6:16\n-                                         // mir::Constant\n-                                         // + span: $DIR/receiver_ptr_mutability.rs:19:13: 19:14\n-                                         // + literal: Const { ty: fn(*const Test) {Test::x}, val: Value(<ZST>) }\n+        StorageDead(_3);\n+        StorageDead(_2);\n+        StorageLive(_5);\n+        StorageLive(_6);\n+        StorageLive(_7);\n+        StorageLive(_8);\n+        StorageLive(_9);\n+        _9 = &_1;\n+        _8 = &_9;\n+        _7 = &_8;\n+        _6 = &_7;\n+        _5 = &(*_6);\n+        FakeRead(ForLet(None), _5);\n+        AscribeUserType(_5, o, UserTypeProjection { base: UserType(3), projs: [] });\n+        StorageDead(_6);\n+        StorageLive(_10);\n+        StorageLive(_11);\n+        StorageLive(_12);\n+        _12 = (*(*(*(*_5))));\n+        _11 = move _12 as *const Test (Pointer(MutToConstPointer));\n+        StorageDead(_12);\n+        _10 = Test::x(move _11) -> [return: bb3, unwind: bb4];\n     }\n \n     bb3: {\n-        StorageDead(_11);                // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:15: +6:16\n-        StorageDead(_10);                // scope 2 at $DIR/receiver_ptr_mutability.rs:+6:16: +6:17\n-        _0 = const ();                   // scope 0 at $DIR/receiver_ptr_mutability.rs:+0:11: +7:2\n-        StorageDead(_9);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+7:1: +7:2\n-        StorageDead(_8);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+7:1: +7:2\n-        StorageDead(_7);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+7:1: +7:2\n-        StorageDead(_5);                 // scope 1 at $DIR/receiver_ptr_mutability.rs:+7:1: +7:2\n-        StorageDead(_1);                 // scope 0 at $DIR/receiver_ptr_mutability.rs:+7:1: +7:2\n-        return;                          // scope 0 at $DIR/receiver_ptr_mutability.rs:+7:2: +7:2\n+        StorageDead(_11);\n+        StorageDead(_10);\n+        _0 = const ();\n+        StorageDead(_9);\n+        StorageDead(_8);\n+        StorageDead(_7);\n+        StorageDead(_5);\n+        StorageDead(_1);\n+        return;\n     }\n \n     bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/receiver_ptr_mutability.rs:+0:1: +7:2\n+        resume;\n     }\n }"}, {"sha": "8706ee9d4463638a10b7cc21370a7de51ed03c24", "filename": "tests/mir-opt/building/shifts.shift_signed.built.after.mir", "status": "modified", "additions": 119, "deletions": 119, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fshifts.shift_signed.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fshifts.shift_signed.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fshifts.shift_signed.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,147 +1,147 @@\n // MIR for `shift_signed` after built\n \n fn shift_signed(_1: i8, _2: u128, _3: i8, _4: i32, _5: i128) -> ([i8; 3], [u128; 3]) {\n-    debug small => _1;                   // in scope 0 at $DIR/shifts.rs:+0:17: +0:22\n-    debug big => _2;                     // in scope 0 at $DIR/shifts.rs:+0:28: +0:31\n-    debug a => _3;                       // in scope 0 at $DIR/shifts.rs:+0:39: +0:40\n-    debug b => _4;                       // in scope 0 at $DIR/shifts.rs:+0:46: +0:47\n-    debug c => _5;                       // in scope 0 at $DIR/shifts.rs:+0:54: +0:55\n-    let mut _0: ([i8; 3], [u128; 3]);    // return place in scope 0 at $DIR/shifts.rs:+0:66: +0:86\n-    let mut _6: [i8; 3];                 // in scope 0 at $DIR/shifts.rs:+2:9: +2:45\n-    let mut _7: i8;                      // in scope 0 at $DIR/shifts.rs:+2:10: +2:20\n-    let mut _8: i8;                      // in scope 0 at $DIR/shifts.rs:+2:10: +2:15\n-    let mut _9: i8;                      // in scope 0 at $DIR/shifts.rs:+2:19: +2:20\n-    let mut _10: u8;                     // in scope 0 at $DIR/shifts.rs:+2:10: +2:20\n-    let mut _11: bool;                   // in scope 0 at $DIR/shifts.rs:+2:10: +2:20\n-    let mut _12: i8;                     // in scope 0 at $DIR/shifts.rs:+2:22: +2:32\n-    let mut _13: i8;                     // in scope 0 at $DIR/shifts.rs:+2:22: +2:27\n-    let mut _14: i32;                    // in scope 0 at $DIR/shifts.rs:+2:31: +2:32\n-    let mut _15: u32;                    // in scope 0 at $DIR/shifts.rs:+2:22: +2:32\n-    let mut _16: bool;                   // in scope 0 at $DIR/shifts.rs:+2:22: +2:32\n-    let mut _17: i8;                     // in scope 0 at $DIR/shifts.rs:+2:34: +2:44\n-    let mut _18: i8;                     // in scope 0 at $DIR/shifts.rs:+2:34: +2:39\n-    let mut _19: i128;                   // in scope 0 at $DIR/shifts.rs:+2:43: +2:44\n-    let mut _20: u128;                   // in scope 0 at $DIR/shifts.rs:+2:34: +2:44\n-    let mut _21: bool;                   // in scope 0 at $DIR/shifts.rs:+2:34: +2:44\n-    let mut _22: [u128; 3];              // in scope 0 at $DIR/shifts.rs:+3:9: +3:39\n-    let mut _23: u128;                   // in scope 0 at $DIR/shifts.rs:+3:10: +3:18\n-    let mut _24: u128;                   // in scope 0 at $DIR/shifts.rs:+3:10: +3:13\n-    let mut _25: i8;                     // in scope 0 at $DIR/shifts.rs:+3:17: +3:18\n-    let mut _26: u8;                     // in scope 0 at $DIR/shifts.rs:+3:10: +3:18\n-    let mut _27: bool;                   // in scope 0 at $DIR/shifts.rs:+3:10: +3:18\n-    let mut _28: u128;                   // in scope 0 at $DIR/shifts.rs:+3:20: +3:28\n-    let mut _29: u128;                   // in scope 0 at $DIR/shifts.rs:+3:20: +3:23\n-    let mut _30: i32;                    // in scope 0 at $DIR/shifts.rs:+3:27: +3:28\n-    let mut _31: u32;                    // in scope 0 at $DIR/shifts.rs:+3:20: +3:28\n-    let mut _32: bool;                   // in scope 0 at $DIR/shifts.rs:+3:20: +3:28\n-    let mut _33: u128;                   // in scope 0 at $DIR/shifts.rs:+3:30: +3:38\n-    let mut _34: u128;                   // in scope 0 at $DIR/shifts.rs:+3:30: +3:33\n-    let mut _35: i128;                   // in scope 0 at $DIR/shifts.rs:+3:37: +3:38\n-    let mut _36: u128;                   // in scope 0 at $DIR/shifts.rs:+3:30: +3:38\n-    let mut _37: bool;                   // in scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+    debug small => _1;\n+    debug big => _2;\n+    debug a => _3;\n+    debug b => _4;\n+    debug c => _5;\n+    let mut _0: ([i8; 3], [u128; 3]);\n+    let mut _6: [i8; 3];\n+    let mut _7: i8;\n+    let mut _8: i8;\n+    let mut _9: i8;\n+    let mut _10: u8;\n+    let mut _11: bool;\n+    let mut _12: i8;\n+    let mut _13: i8;\n+    let mut _14: i32;\n+    let mut _15: u32;\n+    let mut _16: bool;\n+    let mut _17: i8;\n+    let mut _18: i8;\n+    let mut _19: i128;\n+    let mut _20: u128;\n+    let mut _21: bool;\n+    let mut _22: [u128; 3];\n+    let mut _23: u128;\n+    let mut _24: u128;\n+    let mut _25: i8;\n+    let mut _26: u8;\n+    let mut _27: bool;\n+    let mut _28: u128;\n+    let mut _29: u128;\n+    let mut _30: i32;\n+    let mut _31: u32;\n+    let mut _32: bool;\n+    let mut _33: u128;\n+    let mut _34: u128;\n+    let mut _35: i128;\n+    let mut _36: u128;\n+    let mut _37: bool;\n \n     bb0: {\n-        StorageLive(_6);                 // scope 0 at $DIR/shifts.rs:+2:9: +2:45\n-        StorageLive(_7);                 // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n-        StorageLive(_8);                 // scope 0 at $DIR/shifts.rs:+2:10: +2:15\n-        _8 = _1;                         // scope 0 at $DIR/shifts.rs:+2:10: +2:15\n-        StorageLive(_9);                 // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n-        _9 = _3;                         // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n-        _10 = _9 as u8 (IntToInt);       // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n-        _11 = Lt(move _10, const 8_u8);  // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n-        assert(move _11, \"attempt to shift right by `{}`, which would overflow\", _9) -> [success: bb1, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+        StorageLive(_6);\n+        StorageLive(_7);\n+        StorageLive(_8);\n+        _8 = _1;\n+        StorageLive(_9);\n+        _9 = _3;\n+        _10 = _9 as u8 (IntToInt);\n+        _11 = Lt(move _10, const 8_u8);\n+        assert(move _11, \"attempt to shift right by `{}`, which would overflow\", _9) -> [success: bb1, unwind: bb7];\n     }\n \n     bb1: {\n-        _7 = Shr(move _8, move _9);      // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n-        StorageDead(_9);                 // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n-        StorageDead(_8);                 // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n-        StorageLive(_12);                // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n-        StorageLive(_13);                // scope 0 at $DIR/shifts.rs:+2:22: +2:27\n-        _13 = _1;                        // scope 0 at $DIR/shifts.rs:+2:22: +2:27\n-        StorageLive(_14);                // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n-        _14 = _4;                        // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n-        _15 = _14 as u32 (IntToInt);     // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n-        _16 = Lt(move _15, const 8_u32); // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n-        assert(move _16, \"attempt to shift right by `{}`, which would overflow\", _14) -> [success: bb2, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+        _7 = Shr(move _8, move _9);\n+        StorageDead(_9);\n+        StorageDead(_8);\n+        StorageLive(_12);\n+        StorageLive(_13);\n+        _13 = _1;\n+        StorageLive(_14);\n+        _14 = _4;\n+        _15 = _14 as u32 (IntToInt);\n+        _16 = Lt(move _15, const 8_u32);\n+        assert(move _16, \"attempt to shift right by `{}`, which would overflow\", _14) -> [success: bb2, unwind: bb7];\n     }\n \n     bb2: {\n-        _12 = Shr(move _13, move _14);   // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n-        StorageDead(_14);                // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n-        StorageDead(_13);                // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n-        StorageLive(_17);                // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n-        StorageLive(_18);                // scope 0 at $DIR/shifts.rs:+2:34: +2:39\n-        _18 = _1;                        // scope 0 at $DIR/shifts.rs:+2:34: +2:39\n-        StorageLive(_19);                // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n-        _19 = _5;                        // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n-        _20 = _19 as u128 (IntToInt);    // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n-        _21 = Lt(move _20, const 8_u128); // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n-        assert(move _21, \"attempt to shift right by `{}`, which would overflow\", _19) -> [success: bb3, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+        _12 = Shr(move _13, move _14);\n+        StorageDead(_14);\n+        StorageDead(_13);\n+        StorageLive(_17);\n+        StorageLive(_18);\n+        _18 = _1;\n+        StorageLive(_19);\n+        _19 = _5;\n+        _20 = _19 as u128 (IntToInt);\n+        _21 = Lt(move _20, const 8_u128);\n+        assert(move _21, \"attempt to shift right by `{}`, which would overflow\", _19) -> [success: bb3, unwind: bb7];\n     }\n \n     bb3: {\n-        _17 = Shr(move _18, move _19);   // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n-        StorageDead(_19);                // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n-        StorageDead(_18);                // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n-        _6 = [move _7, move _12, move _17]; // scope 0 at $DIR/shifts.rs:+2:9: +2:45\n-        StorageDead(_17);                // scope 0 at $DIR/shifts.rs:+2:44: +2:45\n-        StorageDead(_12);                // scope 0 at $DIR/shifts.rs:+2:44: +2:45\n-        StorageDead(_7);                 // scope 0 at $DIR/shifts.rs:+2:44: +2:45\n-        StorageLive(_22);                // scope 0 at $DIR/shifts.rs:+3:9: +3:39\n-        StorageLive(_23);                // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n-        StorageLive(_24);                // scope 0 at $DIR/shifts.rs:+3:10: +3:13\n-        _24 = _2;                        // scope 0 at $DIR/shifts.rs:+3:10: +3:13\n-        StorageLive(_25);                // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n-        _25 = _3;                        // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n-        _26 = _25 as u8 (IntToInt);      // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n-        _27 = Lt(move _26, const 128_u8); // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n-        assert(move _27, \"attempt to shift left by `{}`, which would overflow\", _25) -> [success: bb4, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+        _17 = Shr(move _18, move _19);\n+        StorageDead(_19);\n+        StorageDead(_18);\n+        _6 = [move _7, move _12, move _17];\n+        StorageDead(_17);\n+        StorageDead(_12);\n+        StorageDead(_7);\n+        StorageLive(_22);\n+        StorageLive(_23);\n+        StorageLive(_24);\n+        _24 = _2;\n+        StorageLive(_25);\n+        _25 = _3;\n+        _26 = _25 as u8 (IntToInt);\n+        _27 = Lt(move _26, const 128_u8);\n+        assert(move _27, \"attempt to shift left by `{}`, which would overflow\", _25) -> [success: bb4, unwind: bb7];\n     }\n \n     bb4: {\n-        _23 = Shl(move _24, move _25);   // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n-        StorageDead(_25);                // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n-        StorageDead(_24);                // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n-        StorageLive(_28);                // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n-        StorageLive(_29);                // scope 0 at $DIR/shifts.rs:+3:20: +3:23\n-        _29 = _2;                        // scope 0 at $DIR/shifts.rs:+3:20: +3:23\n-        StorageLive(_30);                // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n-        _30 = _4;                        // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n-        _31 = _30 as u32 (IntToInt);     // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n-        _32 = Lt(move _31, const 128_u32); // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n-        assert(move _32, \"attempt to shift left by `{}`, which would overflow\", _30) -> [success: bb5, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+        _23 = Shl(move _24, move _25);\n+        StorageDead(_25);\n+        StorageDead(_24);\n+        StorageLive(_28);\n+        StorageLive(_29);\n+        _29 = _2;\n+        StorageLive(_30);\n+        _30 = _4;\n+        _31 = _30 as u32 (IntToInt);\n+        _32 = Lt(move _31, const 128_u32);\n+        assert(move _32, \"attempt to shift left by `{}`, which would overflow\", _30) -> [success: bb5, unwind: bb7];\n     }\n \n     bb5: {\n-        _28 = Shl(move _29, move _30);   // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n-        StorageDead(_30);                // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n-        StorageDead(_29);                // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n-        StorageLive(_33);                // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n-        StorageLive(_34);                // scope 0 at $DIR/shifts.rs:+3:30: +3:33\n-        _34 = _2;                        // scope 0 at $DIR/shifts.rs:+3:30: +3:33\n-        StorageLive(_35);                // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n-        _35 = _5;                        // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n-        _36 = _35 as u128 (IntToInt);    // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n-        _37 = Lt(move _36, const 128_u128); // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n-        assert(move _37, \"attempt to shift left by `{}`, which would overflow\", _35) -> [success: bb6, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+        _28 = Shl(move _29, move _30);\n+        StorageDead(_30);\n+        StorageDead(_29);\n+        StorageLive(_33);\n+        StorageLive(_34);\n+        _34 = _2;\n+        StorageLive(_35);\n+        _35 = _5;\n+        _36 = _35 as u128 (IntToInt);\n+        _37 = Lt(move _36, const 128_u128);\n+        assert(move _37, \"attempt to shift left by `{}`, which would overflow\", _35) -> [success: bb6, unwind: bb7];\n     }\n \n     bb6: {\n-        _33 = Shl(move _34, move _35);   // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n-        StorageDead(_35);                // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n-        StorageDead(_34);                // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n-        _22 = [move _23, move _28, move _33]; // scope 0 at $DIR/shifts.rs:+3:9: +3:39\n-        StorageDead(_33);                // scope 0 at $DIR/shifts.rs:+3:38: +3:39\n-        StorageDead(_28);                // scope 0 at $DIR/shifts.rs:+3:38: +3:39\n-        StorageDead(_23);                // scope 0 at $DIR/shifts.rs:+3:38: +3:39\n-        _0 = (move _6, move _22);        // scope 0 at $DIR/shifts.rs:+1:5: +4:6\n-        StorageDead(_22);                // scope 0 at $DIR/shifts.rs:+4:5: +4:6\n-        StorageDead(_6);                 // scope 0 at $DIR/shifts.rs:+4:5: +4:6\n-        return;                          // scope 0 at $DIR/shifts.rs:+5:2: +5:2\n+        _33 = Shl(move _34, move _35);\n+        StorageDead(_35);\n+        StorageDead(_34);\n+        _22 = [move _23, move _28, move _33];\n+        StorageDead(_33);\n+        StorageDead(_28);\n+        StorageDead(_23);\n+        _0 = (move _6, move _22);\n+        StorageDead(_22);\n+        StorageDead(_6);\n+        return;\n     }\n \n     bb7 (cleanup): {\n-        resume;                          // scope 0 at $DIR/shifts.rs:+0:1: +5:2\n+        resume;\n     }\n }"}, {"sha": "dfd3b5b35ad599716170ac769e7737b1c27f02d9", "filename": "tests/mir-opt/building/shifts.shift_unsigned.built.after.mir", "status": "modified", "additions": 107, "deletions": 107, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fshifts.shift_unsigned.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fshifts.shift_unsigned.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fshifts.shift_unsigned.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,135 +1,135 @@\n // MIR for `shift_unsigned` after built\n \n fn shift_unsigned(_1: u8, _2: i128, _3: u8, _4: u32, _5: u128) -> ([u8; 3], [i128; 3]) {\n-    debug small => _1;                   // in scope 0 at $DIR/shifts.rs:+0:19: +0:24\n-    debug big => _2;                     // in scope 0 at $DIR/shifts.rs:+0:30: +0:33\n-    debug a => _3;                       // in scope 0 at $DIR/shifts.rs:+0:41: +0:42\n-    debug b => _4;                       // in scope 0 at $DIR/shifts.rs:+0:48: +0:49\n-    debug c => _5;                       // in scope 0 at $DIR/shifts.rs:+0:56: +0:57\n-    let mut _0: ([u8; 3], [i128; 3]);    // return place in scope 0 at $DIR/shifts.rs:+0:68: +0:88\n-    let mut _6: [u8; 3];                 // in scope 0 at $DIR/shifts.rs:+2:9: +2:45\n-    let mut _7: u8;                      // in scope 0 at $DIR/shifts.rs:+2:10: +2:20\n-    let mut _8: u8;                      // in scope 0 at $DIR/shifts.rs:+2:10: +2:15\n-    let mut _9: u8;                      // in scope 0 at $DIR/shifts.rs:+2:19: +2:20\n-    let mut _10: bool;                   // in scope 0 at $DIR/shifts.rs:+2:10: +2:20\n-    let mut _11: u8;                     // in scope 0 at $DIR/shifts.rs:+2:22: +2:32\n-    let mut _12: u8;                     // in scope 0 at $DIR/shifts.rs:+2:22: +2:27\n-    let mut _13: u32;                    // in scope 0 at $DIR/shifts.rs:+2:31: +2:32\n-    let mut _14: bool;                   // in scope 0 at $DIR/shifts.rs:+2:22: +2:32\n-    let mut _15: u8;                     // in scope 0 at $DIR/shifts.rs:+2:34: +2:44\n-    let mut _16: u8;                     // in scope 0 at $DIR/shifts.rs:+2:34: +2:39\n-    let mut _17: u128;                   // in scope 0 at $DIR/shifts.rs:+2:43: +2:44\n-    let mut _18: bool;                   // in scope 0 at $DIR/shifts.rs:+2:34: +2:44\n-    let mut _19: [i128; 3];              // in scope 0 at $DIR/shifts.rs:+3:9: +3:39\n-    let mut _20: i128;                   // in scope 0 at $DIR/shifts.rs:+3:10: +3:18\n-    let mut _21: i128;                   // in scope 0 at $DIR/shifts.rs:+3:10: +3:13\n-    let mut _22: u8;                     // in scope 0 at $DIR/shifts.rs:+3:17: +3:18\n-    let mut _23: bool;                   // in scope 0 at $DIR/shifts.rs:+3:10: +3:18\n-    let mut _24: i128;                   // in scope 0 at $DIR/shifts.rs:+3:20: +3:28\n-    let mut _25: i128;                   // in scope 0 at $DIR/shifts.rs:+3:20: +3:23\n-    let mut _26: u32;                    // in scope 0 at $DIR/shifts.rs:+3:27: +3:28\n-    let mut _27: bool;                   // in scope 0 at $DIR/shifts.rs:+3:20: +3:28\n-    let mut _28: i128;                   // in scope 0 at $DIR/shifts.rs:+3:30: +3:38\n-    let mut _29: i128;                   // in scope 0 at $DIR/shifts.rs:+3:30: +3:33\n-    let mut _30: u128;                   // in scope 0 at $DIR/shifts.rs:+3:37: +3:38\n-    let mut _31: bool;                   // in scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+    debug small => _1;\n+    debug big => _2;\n+    debug a => _3;\n+    debug b => _4;\n+    debug c => _5;\n+    let mut _0: ([u8; 3], [i128; 3]);\n+    let mut _6: [u8; 3];\n+    let mut _7: u8;\n+    let mut _8: u8;\n+    let mut _9: u8;\n+    let mut _10: bool;\n+    let mut _11: u8;\n+    let mut _12: u8;\n+    let mut _13: u32;\n+    let mut _14: bool;\n+    let mut _15: u8;\n+    let mut _16: u8;\n+    let mut _17: u128;\n+    let mut _18: bool;\n+    let mut _19: [i128; 3];\n+    let mut _20: i128;\n+    let mut _21: i128;\n+    let mut _22: u8;\n+    let mut _23: bool;\n+    let mut _24: i128;\n+    let mut _25: i128;\n+    let mut _26: u32;\n+    let mut _27: bool;\n+    let mut _28: i128;\n+    let mut _29: i128;\n+    let mut _30: u128;\n+    let mut _31: bool;\n \n     bb0: {\n-        StorageLive(_6);                 // scope 0 at $DIR/shifts.rs:+2:9: +2:45\n-        StorageLive(_7);                 // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n-        StorageLive(_8);                 // scope 0 at $DIR/shifts.rs:+2:10: +2:15\n-        _8 = _1;                         // scope 0 at $DIR/shifts.rs:+2:10: +2:15\n-        StorageLive(_9);                 // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n-        _9 = _3;                         // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n-        _10 = Lt(_9, const 8_u8);        // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n-        assert(move _10, \"attempt to shift right by `{}`, which would overflow\", _9) -> [success: bb1, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n+        StorageLive(_6);\n+        StorageLive(_7);\n+        StorageLive(_8);\n+        _8 = _1;\n+        StorageLive(_9);\n+        _9 = _3;\n+        _10 = Lt(_9, const 8_u8);\n+        assert(move _10, \"attempt to shift right by `{}`, which would overflow\", _9) -> [success: bb1, unwind: bb7];\n     }\n \n     bb1: {\n-        _7 = Shr(move _8, move _9);      // scope 0 at $DIR/shifts.rs:+2:10: +2:20\n-        StorageDead(_9);                 // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n-        StorageDead(_8);                 // scope 0 at $DIR/shifts.rs:+2:19: +2:20\n-        StorageLive(_11);                // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n-        StorageLive(_12);                // scope 0 at $DIR/shifts.rs:+2:22: +2:27\n-        _12 = _1;                        // scope 0 at $DIR/shifts.rs:+2:22: +2:27\n-        StorageLive(_13);                // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n-        _13 = _4;                        // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n-        _14 = Lt(_13, const 8_u32);      // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n-        assert(move _14, \"attempt to shift right by `{}`, which would overflow\", _13) -> [success: bb2, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n+        _7 = Shr(move _8, move _9);\n+        StorageDead(_9);\n+        StorageDead(_8);\n+        StorageLive(_11);\n+        StorageLive(_12);\n+        _12 = _1;\n+        StorageLive(_13);\n+        _13 = _4;\n+        _14 = Lt(_13, const 8_u32);\n+        assert(move _14, \"attempt to shift right by `{}`, which would overflow\", _13) -> [success: bb2, unwind: bb7];\n     }\n \n     bb2: {\n-        _11 = Shr(move _12, move _13);   // scope 0 at $DIR/shifts.rs:+2:22: +2:32\n-        StorageDead(_13);                // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n-        StorageDead(_12);                // scope 0 at $DIR/shifts.rs:+2:31: +2:32\n-        StorageLive(_15);                // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n-        StorageLive(_16);                // scope 0 at $DIR/shifts.rs:+2:34: +2:39\n-        _16 = _1;                        // scope 0 at $DIR/shifts.rs:+2:34: +2:39\n-        StorageLive(_17);                // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n-        _17 = _5;                        // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n-        _18 = Lt(_17, const 8_u128);     // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n-        assert(move _18, \"attempt to shift right by `{}`, which would overflow\", _17) -> [success: bb3, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n+        _11 = Shr(move _12, move _13);\n+        StorageDead(_13);\n+        StorageDead(_12);\n+        StorageLive(_15);\n+        StorageLive(_16);\n+        _16 = _1;\n+        StorageLive(_17);\n+        _17 = _5;\n+        _18 = Lt(_17, const 8_u128);\n+        assert(move _18, \"attempt to shift right by `{}`, which would overflow\", _17) -> [success: bb3, unwind: bb7];\n     }\n \n     bb3: {\n-        _15 = Shr(move _16, move _17);   // scope 0 at $DIR/shifts.rs:+2:34: +2:44\n-        StorageDead(_17);                // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n-        StorageDead(_16);                // scope 0 at $DIR/shifts.rs:+2:43: +2:44\n-        _6 = [move _7, move _11, move _15]; // scope 0 at $DIR/shifts.rs:+2:9: +2:45\n-        StorageDead(_15);                // scope 0 at $DIR/shifts.rs:+2:44: +2:45\n-        StorageDead(_11);                // scope 0 at $DIR/shifts.rs:+2:44: +2:45\n-        StorageDead(_7);                 // scope 0 at $DIR/shifts.rs:+2:44: +2:45\n-        StorageLive(_19);                // scope 0 at $DIR/shifts.rs:+3:9: +3:39\n-        StorageLive(_20);                // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n-        StorageLive(_21);                // scope 0 at $DIR/shifts.rs:+3:10: +3:13\n-        _21 = _2;                        // scope 0 at $DIR/shifts.rs:+3:10: +3:13\n-        StorageLive(_22);                // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n-        _22 = _3;                        // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n-        _23 = Lt(_22, const 128_u8);     // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n-        assert(move _23, \"attempt to shift left by `{}`, which would overflow\", _22) -> [success: bb4, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n+        _15 = Shr(move _16, move _17);\n+        StorageDead(_17);\n+        StorageDead(_16);\n+        _6 = [move _7, move _11, move _15];\n+        StorageDead(_15);\n+        StorageDead(_11);\n+        StorageDead(_7);\n+        StorageLive(_19);\n+        StorageLive(_20);\n+        StorageLive(_21);\n+        _21 = _2;\n+        StorageLive(_22);\n+        _22 = _3;\n+        _23 = Lt(_22, const 128_u8);\n+        assert(move _23, \"attempt to shift left by `{}`, which would overflow\", _22) -> [success: bb4, unwind: bb7];\n     }\n \n     bb4: {\n-        _20 = Shl(move _21, move _22);   // scope 0 at $DIR/shifts.rs:+3:10: +3:18\n-        StorageDead(_22);                // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n-        StorageDead(_21);                // scope 0 at $DIR/shifts.rs:+3:17: +3:18\n-        StorageLive(_24);                // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n-        StorageLive(_25);                // scope 0 at $DIR/shifts.rs:+3:20: +3:23\n-        _25 = _2;                        // scope 0 at $DIR/shifts.rs:+3:20: +3:23\n-        StorageLive(_26);                // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n-        _26 = _4;                        // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n-        _27 = Lt(_26, const 128_u32);    // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n-        assert(move _27, \"attempt to shift left by `{}`, which would overflow\", _26) -> [success: bb5, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n+        _20 = Shl(move _21, move _22);\n+        StorageDead(_22);\n+        StorageDead(_21);\n+        StorageLive(_24);\n+        StorageLive(_25);\n+        _25 = _2;\n+        StorageLive(_26);\n+        _26 = _4;\n+        _27 = Lt(_26, const 128_u32);\n+        assert(move _27, \"attempt to shift left by `{}`, which would overflow\", _26) -> [success: bb5, unwind: bb7];\n     }\n \n     bb5: {\n-        _24 = Shl(move _25, move _26);   // scope 0 at $DIR/shifts.rs:+3:20: +3:28\n-        StorageDead(_26);                // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n-        StorageDead(_25);                // scope 0 at $DIR/shifts.rs:+3:27: +3:28\n-        StorageLive(_28);                // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n-        StorageLive(_29);                // scope 0 at $DIR/shifts.rs:+3:30: +3:33\n-        _29 = _2;                        // scope 0 at $DIR/shifts.rs:+3:30: +3:33\n-        StorageLive(_30);                // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n-        _30 = _5;                        // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n-        _31 = Lt(_30, const 128_u128);   // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n-        assert(move _31, \"attempt to shift left by `{}`, which would overflow\", _30) -> [success: bb6, unwind: bb7]; // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n+        _24 = Shl(move _25, move _26);\n+        StorageDead(_26);\n+        StorageDead(_25);\n+        StorageLive(_28);\n+        StorageLive(_29);\n+        _29 = _2;\n+        StorageLive(_30);\n+        _30 = _5;\n+        _31 = Lt(_30, const 128_u128);\n+        assert(move _31, \"attempt to shift left by `{}`, which would overflow\", _30) -> [success: bb6, unwind: bb7];\n     }\n \n     bb6: {\n-        _28 = Shl(move _29, move _30);   // scope 0 at $DIR/shifts.rs:+3:30: +3:38\n-        StorageDead(_30);                // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n-        StorageDead(_29);                // scope 0 at $DIR/shifts.rs:+3:37: +3:38\n-        _19 = [move _20, move _24, move _28]; // scope 0 at $DIR/shifts.rs:+3:9: +3:39\n-        StorageDead(_28);                // scope 0 at $DIR/shifts.rs:+3:38: +3:39\n-        StorageDead(_24);                // scope 0 at $DIR/shifts.rs:+3:38: +3:39\n-        StorageDead(_20);                // scope 0 at $DIR/shifts.rs:+3:38: +3:39\n-        _0 = (move _6, move _19);        // scope 0 at $DIR/shifts.rs:+1:5: +4:6\n-        StorageDead(_19);                // scope 0 at $DIR/shifts.rs:+4:5: +4:6\n-        StorageDead(_6);                 // scope 0 at $DIR/shifts.rs:+4:5: +4:6\n-        return;                          // scope 0 at $DIR/shifts.rs:+5:2: +5:2\n+        _28 = Shl(move _29, move _30);\n+        StorageDead(_30);\n+        StorageDead(_29);\n+        _19 = [move _20, move _24, move _28];\n+        StorageDead(_28);\n+        StorageDead(_24);\n+        StorageDead(_20);\n+        _0 = (move _6, move _19);\n+        StorageDead(_19);\n+        StorageDead(_6);\n+        return;\n     }\n \n     bb7 (cleanup): {\n-        resume;                          // scope 0 at $DIR/shifts.rs:+0:1: +5:2\n+        resume;\n     }\n }"}, {"sha": "c89ea2b6c85bf6143f63eb9002889c91663ecf62", "filename": "tests/mir-opt/building/simple_match.match_bool.built.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fsimple_match.match_bool.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fsimple_match.match_bool.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fsimple_match.match_bool.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,29 +1,29 @@\n // MIR for `match_bool` after built\n \n fn match_bool(_1: bool) -> usize {\n-    debug x => _1;                       // in scope 0 at $DIR/simple_match.rs:+0:15: +0:16\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/simple_match.rs:+0:27: +0:32\n+    debug x => _1;\n+    let mut _0: usize;\n \n     bb0: {\n-        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/simple_match.rs:+1:11: +1:12\n-        switchInt(_1) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/simple_match.rs:+1:5: +1:12\n+        FakeRead(ForMatchedPlace(None), _1);\n+        switchInt(_1) -> [0: bb2, otherwise: bb1];\n     }\n \n     bb1: {\n-        falseEdge -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/simple_match.rs:+2:9: +2:13\n+        falseEdge -> [real: bb3, imaginary: bb2];\n     }\n \n     bb2: {\n-        _0 = const 20_usize;             // scope 0 at $DIR/simple_match.rs:+3:14: +3:16\n-        goto -> bb4;                     // scope 0 at $DIR/simple_match.rs:+3:14: +3:16\n+        _0 = const 20_usize;\n+        goto -> bb4;\n     }\n \n     bb3: {\n-        _0 = const 10_usize;             // scope 0 at $DIR/simple_match.rs:+2:17: +2:19\n-        goto -> bb4;                     // scope 0 at $DIR/simple_match.rs:+2:17: +2:19\n+        _0 = const 10_usize;\n+        goto -> bb4;\n     }\n \n     bb4: {\n-        return;                          // scope 0 at $DIR/simple_match.rs:+5:2: +5:2\n+        return;\n     }\n }"}, {"sha": "1d7adfde4edea8311837c0c088f5a5e3c8b806f6", "filename": "tests/mir-opt/building/storage_live_dead_in_statics.XXX.built.after.mir", "status": "modified", "additions": 193, "deletions": 196, "changes": 389, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fstorage_live_dead_in_statics.XXX.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Fstorage_live_dead_in_statics.XXX.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fstorage_live_dead_in_statics.XXX.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,203 +1,200 @@\n // MIR for `XXX` after built\n \n static XXX: &Foo = {\n-    let mut _0: &Foo;                    // return place in scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:13: +0:25\n-    let _1: &Foo;                        // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:28: +18:2\n-    let _2: Foo;                         // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:29: +18:2\n-    let mut _3: &[(u32, u32)];           // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+2:11: +17:6\n-    let mut _4: &[(u32, u32); 42];       // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+2:11: +17:6\n-    let _5: &[(u32, u32); 42];           // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+2:11: +17:6\n-    let _6: [(u32, u32); 42];            // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+2:12: +17:6\n-    let mut _7: (u32, u32);              // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+3:9: +3:15\n-    let mut _8: (u32, u32);              // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+3:17: +3:23\n-    let mut _9: (u32, u32);              // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+3:25: +3:31\n-    let mut _10: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+4:9: +4:15\n-    let mut _11: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+4:17: +4:23\n-    let mut _12: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+4:25: +4:31\n-    let mut _13: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+5:9: +5:15\n-    let mut _14: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+5:17: +5:23\n-    let mut _15: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+5:25: +5:31\n-    let mut _16: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+6:9: +6:15\n-    let mut _17: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+6:17: +6:23\n-    let mut _18: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+6:25: +6:31\n-    let mut _19: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+7:9: +7:15\n-    let mut _20: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+7:17: +7:23\n-    let mut _21: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+7:25: +7:31\n-    let mut _22: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+8:9: +8:15\n-    let mut _23: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+8:17: +8:23\n-    let mut _24: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+8:25: +8:31\n-    let mut _25: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+9:9: +9:15\n-    let mut _26: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+9:17: +9:23\n-    let mut _27: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+9:25: +9:31\n-    let mut _28: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+10:9: +10:15\n-    let mut _29: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+10:17: +10:23\n-    let mut _30: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+10:25: +10:31\n-    let mut _31: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+11:9: +11:15\n-    let mut _32: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+11:17: +11:23\n-    let mut _33: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+11:25: +11:31\n-    let mut _34: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+12:9: +12:15\n-    let mut _35: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+12:17: +12:23\n-    let mut _36: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+12:25: +12:31\n-    let mut _37: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+13:9: +13:15\n-    let mut _38: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+13:17: +13:23\n-    let mut _39: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+13:25: +13:31\n-    let mut _40: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+14:9: +14:15\n-    let mut _41: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+14:17: +14:23\n-    let mut _42: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+14:25: +14:31\n-    let mut _43: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+15:9: +15:15\n-    let mut _44: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+15:17: +15:23\n-    let mut _45: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+15:25: +15:31\n-    let mut _46: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+16:9: +16:15\n-    let mut _47: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+16:17: +16:23\n-    let mut _48: (u32, u32);             // in scope 0 at $DIR/storage_live_dead_in_statics.rs:+16:25: +16:31\n+    let mut _0: &Foo;\n+    let _1: &Foo;\n+    let _2: Foo;\n+    let mut _3: &[(u32, u32)];\n+    let mut _4: &[(u32, u32); 42];\n+    let _5: &[(u32, u32); 42];\n+    let _6: [(u32, u32); 42];\n+    let mut _7: (u32, u32);\n+    let mut _8: (u32, u32);\n+    let mut _9: (u32, u32);\n+    let mut _10: (u32, u32);\n+    let mut _11: (u32, u32);\n+    let mut _12: (u32, u32);\n+    let mut _13: (u32, u32);\n+    let mut _14: (u32, u32);\n+    let mut _15: (u32, u32);\n+    let mut _16: (u32, u32);\n+    let mut _17: (u32, u32);\n+    let mut _18: (u32, u32);\n+    let mut _19: (u32, u32);\n+    let mut _20: (u32, u32);\n+    let mut _21: (u32, u32);\n+    let mut _22: (u32, u32);\n+    let mut _23: (u32, u32);\n+    let mut _24: (u32, u32);\n+    let mut _25: (u32, u32);\n+    let mut _26: (u32, u32);\n+    let mut _27: (u32, u32);\n+    let mut _28: (u32, u32);\n+    let mut _29: (u32, u32);\n+    let mut _30: (u32, u32);\n+    let mut _31: (u32, u32);\n+    let mut _32: (u32, u32);\n+    let mut _33: (u32, u32);\n+    let mut _34: (u32, u32);\n+    let mut _35: (u32, u32);\n+    let mut _36: (u32, u32);\n+    let mut _37: (u32, u32);\n+    let mut _38: (u32, u32);\n+    let mut _39: (u32, u32);\n+    let mut _40: (u32, u32);\n+    let mut _41: (u32, u32);\n+    let mut _42: (u32, u32);\n+    let mut _43: (u32, u32);\n+    let mut _44: (u32, u32);\n+    let mut _45: (u32, u32);\n+    let mut _46: (u32, u32);\n+    let mut _47: (u32, u32);\n+    let mut _48: (u32, u32);\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:28: +18:2\n-        StorageLive(_2);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:29: +18:2\n-        StorageLive(_3);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+2:11: +17:6\n-        StorageLive(_4);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+2:11: +17:6\n-        StorageLive(_5);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+2:11: +17:6\n-        StorageLive(_6);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+2:12: +17:6\n-        StorageLive(_7);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+3:9: +3:15\n-        _7 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+3:9: +3:15\n-        StorageLive(_8);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+3:17: +3:23\n-        _8 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+3:17: +3:23\n-        StorageLive(_9);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+3:25: +3:31\n-        _9 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+3:25: +3:31\n-        StorageLive(_10);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+4:9: +4:15\n-        _10 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+4:9: +4:15\n-        StorageLive(_11);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+4:17: +4:23\n-        _11 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+4:17: +4:23\n-        StorageLive(_12);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+4:25: +4:31\n-        _12 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+4:25: +4:31\n-        StorageLive(_13);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+5:9: +5:15\n-        _13 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+5:9: +5:15\n-        StorageLive(_14);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+5:17: +5:23\n-        _14 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+5:17: +5:23\n-        StorageLive(_15);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+5:25: +5:31\n-        _15 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+5:25: +5:31\n-        StorageLive(_16);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+6:9: +6:15\n-        _16 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+6:9: +6:15\n-        StorageLive(_17);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+6:17: +6:23\n-        _17 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+6:17: +6:23\n-        StorageLive(_18);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+6:25: +6:31\n-        _18 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+6:25: +6:31\n-        StorageLive(_19);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+7:9: +7:15\n-        _19 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+7:9: +7:15\n-        StorageLive(_20);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+7:17: +7:23\n-        _20 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+7:17: +7:23\n-        StorageLive(_21);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+7:25: +7:31\n-        _21 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+7:25: +7:31\n-        StorageLive(_22);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+8:9: +8:15\n-        _22 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+8:9: +8:15\n-        StorageLive(_23);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+8:17: +8:23\n-        _23 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+8:17: +8:23\n-        StorageLive(_24);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+8:25: +8:31\n-        _24 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+8:25: +8:31\n-        StorageLive(_25);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+9:9: +9:15\n-        _25 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+9:9: +9:15\n-        StorageLive(_26);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+9:17: +9:23\n-        _26 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+9:17: +9:23\n-        StorageLive(_27);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+9:25: +9:31\n-        _27 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+9:25: +9:31\n-        StorageLive(_28);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+10:9: +10:15\n-        _28 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+10:9: +10:15\n-        StorageLive(_29);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+10:17: +10:23\n-        _29 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+10:17: +10:23\n-        StorageLive(_30);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+10:25: +10:31\n-        _30 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+10:25: +10:31\n-        StorageLive(_31);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+11:9: +11:15\n-        _31 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+11:9: +11:15\n-        StorageLive(_32);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+11:17: +11:23\n-        _32 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+11:17: +11:23\n-        StorageLive(_33);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+11:25: +11:31\n-        _33 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+11:25: +11:31\n-        StorageLive(_34);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+12:9: +12:15\n-        _34 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+12:9: +12:15\n-        StorageLive(_35);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+12:17: +12:23\n-        _35 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+12:17: +12:23\n-        StorageLive(_36);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+12:25: +12:31\n-        _36 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+12:25: +12:31\n-        StorageLive(_37);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+13:9: +13:15\n-        _37 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+13:9: +13:15\n-        StorageLive(_38);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+13:17: +13:23\n-        _38 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+13:17: +13:23\n-        StorageLive(_39);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+13:25: +13:31\n-        _39 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+13:25: +13:31\n-        StorageLive(_40);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+14:9: +14:15\n-        _40 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+14:9: +14:15\n-        StorageLive(_41);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+14:17: +14:23\n-        _41 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+14:17: +14:23\n-        StorageLive(_42);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+14:25: +14:31\n-        _42 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+14:25: +14:31\n-        StorageLive(_43);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+15:9: +15:15\n-        _43 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+15:9: +15:15\n-        StorageLive(_44);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+15:17: +15:23\n-        _44 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+15:17: +15:23\n-        StorageLive(_45);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+15:25: +15:31\n-        _45 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+15:25: +15:31\n-        StorageLive(_46);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+16:9: +16:15\n-        _46 = (const 0_u32, const 1_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+16:9: +16:15\n-        StorageLive(_47);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+16:17: +16:23\n-        _47 = (const 0_u32, const 2_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+16:17: +16:23\n-        StorageLive(_48);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+16:25: +16:31\n-        _48 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+16:25: +16:31\n-        _6 = [move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25, move _26, move _27, move _28, move _29, move _30, move _31, move _32, move _33, move _34, move _35, move _36, move _37, move _38, move _39, move _40, move _41, move _42, move _43, move _44, move _45, move _46, move _47, move _48]; // scope 0 at $DIR/storage_live_dead_in_statics.rs:+2:12: +17:6\n-        StorageDead(_48);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_47);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_46);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_45);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_44);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_43);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_42);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_41);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_40);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_39);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_38);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_37);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_36);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_35);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_34);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_33);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_32);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_31);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_30);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_29);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_28);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_27);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_26);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_25);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_24);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_23);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_22);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_21);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_20);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_19);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_18);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_17);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_16);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_15);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_14);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_13);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_12);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_11);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_10);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_9);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_8);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        StorageDead(_7);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        _5 = &_6;                        // scope 0 at $DIR/storage_live_dead_in_statics.rs:+2:11: +17:6\n-        _4 = &(*_5);                     // scope 0 at $DIR/storage_live_dead_in_statics.rs:+2:11: +17:6\n-        _3 = move _4 as &[(u32, u32)] (Pointer(Unsize)); // scope 0 at $DIR/storage_live_dead_in_statics.rs:+2:11: +17:6\n-        StorageDead(_4);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+17:5: +17:6\n-        _2 = Foo { tup: const \"hi\", data: move _3 }; // scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:29: +18:2\n-                                         // mir::Constant\n-                                         // + span: $DIR/storage_live_dead_in_statics.rs:6:10: 6:14\n-                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-        StorageDead(_3);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+18:1: +18:2\n-        _1 = &_2;                        // scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:28: +18:2\n-        _0 = &(*_1);                     // scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:28: +18:2\n-        StorageDead(_5);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+18:1: +18:2\n-        StorageDead(_1);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+18:1: +18:2\n-        return;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:1: +18:3\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        StorageLive(_3);\n+        StorageLive(_4);\n+        StorageLive(_5);\n+        StorageLive(_6);\n+        StorageLive(_7);\n+        _7 = (const 0_u32, const 1_u32);\n+        StorageLive(_8);\n+        _8 = (const 0_u32, const 2_u32);\n+        StorageLive(_9);\n+        _9 = (const 0_u32, const 3_u32);\n+        StorageLive(_10);\n+        _10 = (const 0_u32, const 1_u32);\n+        StorageLive(_11);\n+        _11 = (const 0_u32, const 2_u32);\n+        StorageLive(_12);\n+        _12 = (const 0_u32, const 3_u32);\n+        StorageLive(_13);\n+        _13 = (const 0_u32, const 1_u32);\n+        StorageLive(_14);\n+        _14 = (const 0_u32, const 2_u32);\n+        StorageLive(_15);\n+        _15 = (const 0_u32, const 3_u32);\n+        StorageLive(_16);\n+        _16 = (const 0_u32, const 1_u32);\n+        StorageLive(_17);\n+        _17 = (const 0_u32, const 2_u32);\n+        StorageLive(_18);\n+        _18 = (const 0_u32, const 3_u32);\n+        StorageLive(_19);\n+        _19 = (const 0_u32, const 1_u32);\n+        StorageLive(_20);\n+        _20 = (const 0_u32, const 2_u32);\n+        StorageLive(_21);\n+        _21 = (const 0_u32, const 3_u32);\n+        StorageLive(_22);\n+        _22 = (const 0_u32, const 1_u32);\n+        StorageLive(_23);\n+        _23 = (const 0_u32, const 2_u32);\n+        StorageLive(_24);\n+        _24 = (const 0_u32, const 3_u32);\n+        StorageLive(_25);\n+        _25 = (const 0_u32, const 1_u32);\n+        StorageLive(_26);\n+        _26 = (const 0_u32, const 2_u32);\n+        StorageLive(_27);\n+        _27 = (const 0_u32, const 3_u32);\n+        StorageLive(_28);\n+        _28 = (const 0_u32, const 1_u32);\n+        StorageLive(_29);\n+        _29 = (const 0_u32, const 2_u32);\n+        StorageLive(_30);\n+        _30 = (const 0_u32, const 3_u32);\n+        StorageLive(_31);\n+        _31 = (const 0_u32, const 1_u32);\n+        StorageLive(_32);\n+        _32 = (const 0_u32, const 2_u32);\n+        StorageLive(_33);\n+        _33 = (const 0_u32, const 3_u32);\n+        StorageLive(_34);\n+        _34 = (const 0_u32, const 1_u32);\n+        StorageLive(_35);\n+        _35 = (const 0_u32, const 2_u32);\n+        StorageLive(_36);\n+        _36 = (const 0_u32, const 3_u32);\n+        StorageLive(_37);\n+        _37 = (const 0_u32, const 1_u32);\n+        StorageLive(_38);\n+        _38 = (const 0_u32, const 2_u32);\n+        StorageLive(_39);\n+        _39 = (const 0_u32, const 3_u32);\n+        StorageLive(_40);\n+        _40 = (const 0_u32, const 1_u32);\n+        StorageLive(_41);\n+        _41 = (const 0_u32, const 2_u32);\n+        StorageLive(_42);\n+        _42 = (const 0_u32, const 3_u32);\n+        StorageLive(_43);\n+        _43 = (const 0_u32, const 1_u32);\n+        StorageLive(_44);\n+        _44 = (const 0_u32, const 2_u32);\n+        StorageLive(_45);\n+        _45 = (const 0_u32, const 3_u32);\n+        StorageLive(_46);\n+        _46 = (const 0_u32, const 1_u32);\n+        StorageLive(_47);\n+        _47 = (const 0_u32, const 2_u32);\n+        StorageLive(_48);\n+        _48 = (const 0_u32, const 3_u32);\n+        _6 = [move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25, move _26, move _27, move _28, move _29, move _30, move _31, move _32, move _33, move _34, move _35, move _36, move _37, move _38, move _39, move _40, move _41, move _42, move _43, move _44, move _45, move _46, move _47, move _48];\n+        StorageDead(_48);\n+        StorageDead(_47);\n+        StorageDead(_46);\n+        StorageDead(_45);\n+        StorageDead(_44);\n+        StorageDead(_43);\n+        StorageDead(_42);\n+        StorageDead(_41);\n+        StorageDead(_40);\n+        StorageDead(_39);\n+        StorageDead(_38);\n+        StorageDead(_37);\n+        StorageDead(_36);\n+        StorageDead(_35);\n+        StorageDead(_34);\n+        StorageDead(_33);\n+        StorageDead(_32);\n+        StorageDead(_31);\n+        StorageDead(_30);\n+        StorageDead(_29);\n+        StorageDead(_28);\n+        StorageDead(_27);\n+        StorageDead(_26);\n+        StorageDead(_25);\n+        StorageDead(_24);\n+        StorageDead(_23);\n+        StorageDead(_22);\n+        StorageDead(_21);\n+        StorageDead(_20);\n+        StorageDead(_19);\n+        StorageDead(_18);\n+        StorageDead(_17);\n+        StorageDead(_16);\n+        StorageDead(_15);\n+        StorageDead(_14);\n+        StorageDead(_13);\n+        StorageDead(_12);\n+        StorageDead(_11);\n+        StorageDead(_10);\n+        StorageDead(_9);\n+        StorageDead(_8);\n+        StorageDead(_7);\n+        _5 = &_6;\n+        _4 = &(*_5);\n+        _3 = move _4 as &[(u32, u32)] (Pointer(Unsize));\n+        StorageDead(_4);\n+        _2 = Foo { tup: const \"hi\", data: move _3 };\n+        StorageDead(_3);\n+        _1 = &_2;\n+        _0 = &(*_1);\n+        StorageDead(_5);\n+        StorageDead(_1);\n+        return;\n     }\n }"}, {"sha": "fea1138ba8d925242e6469d62b781a7c2f8292a9", "filename": "tests/mir-opt/building/uniform_array_move_out.move_out_by_subslice.built.after.mir", "status": "modified", "additions": 55, "deletions": 61, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,23 +1,23 @@\n // MIR for `move_out_by_subslice` after built\n \n fn move_out_by_subslice() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/uniform_array_move_out.rs:+0:27: +0:27\n-    let _1: [std::boxed::Box<i32>; 2];   // in scope 0 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-    let mut _2: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-    let mut _3: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-    let mut _4: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-    let mut _5: *mut u8;                 // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-    let mut _6: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-    let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-    let mut _8: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-    let mut _9: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-    let mut _10: *mut u8;                // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-    let mut _11: std::boxed::Box<i32>;   // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+    let mut _0: ();\n+    let _1: [std::boxed::Box<i32>; 2];\n+    let mut _2: std::boxed::Box<i32>;\n+    let mut _3: usize;\n+    let mut _4: usize;\n+    let mut _5: *mut u8;\n+    let mut _6: std::boxed::Box<i32>;\n+    let mut _7: std::boxed::Box<i32>;\n+    let mut _8: usize;\n+    let mut _9: usize;\n+    let mut _10: *mut u8;\n+    let mut _11: std::boxed::Box<i32>;\n     scope 1 {\n-        debug a => _1;                   // in scope 1 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-        let _12: [std::boxed::Box<i32>; 2]; // in scope 1 at $DIR/uniform_array_move_out.rs:+7:10: +7:12\n+        debug a => _1;\n+        let _12: [std::boxed::Box<i32>; 2];\n         scope 4 {\n-            debug _y => _12;             // in scope 4 at $DIR/uniform_array_move_out.rs:+7:10: +7:12\n+            debug _y => _12;\n         }\n     }\n     scope 2 {\n@@ -26,87 +26,81 @@ fn move_out_by_subslice() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-        _3 = SizeOf(i32);                // scope 2 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-        _4 = AlignOf(i32);               // scope 2 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-                                         // mir::Constant\n-                                         // + span: $DIR/uniform_array_move_out.rs:18:9: 18:20\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        _3 = SizeOf(i32);\n+        _4 = AlignOf(i32);\n+        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12];\n     }\n \n     bb1: {\n-        StorageLive(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-        _6 = ShallowInitBox(move _5, i32); // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-        (*_6) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:+3:18: +3:19\n-        _2 = move _6;                    // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-        drop(_6) -> [return: bb2, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:+3:19: +3:20\n+        StorageLive(_6);\n+        _6 = ShallowInitBox(move _5, i32);\n+        (*_6) = const 1_i32;\n+        _2 = move _6;\n+        drop(_6) -> [return: bb2, unwind: bb11];\n     }\n \n     bb2: {\n-        StorageDead(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:+3:19: +3:20\n-        StorageLive(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-        _8 = SizeOf(i32);                // scope 3 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-        _9 = AlignOf(i32);               // scope 3 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-                                         // mir::Constant\n-                                         // + span: $DIR/uniform_array_move_out.rs:20:9: 20:20\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n+        StorageDead(_6);\n+        StorageLive(_7);\n+        _8 = SizeOf(i32);\n+        _9 = AlignOf(i32);\n+        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11];\n     }\n \n     bb3: {\n-        StorageLive(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-        _11 = ShallowInitBox(move _10, i32); // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-        (*_11) = const 2_i32;            // scope 0 at $DIR/uniform_array_move_out.rs:+5:18: +5:19\n-        _7 = move _11;                   // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-        drop(_11) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:+5:19: +5:20\n+        StorageLive(_11);\n+        _11 = ShallowInitBox(move _10, i32);\n+        (*_11) = const 2_i32;\n+        _7 = move _11;\n+        drop(_11) -> [return: bb4, unwind: bb10];\n     }\n \n     bb4: {\n-        StorageDead(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:+5:19: +5:20\n-        _1 = [move _2, move _7];         // scope 0 at $DIR/uniform_array_move_out.rs:+1:13: +6:6\n-        drop(_7) -> [return: bb5, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        StorageDead(_11);\n+        _1 = [move _2, move _7];\n+        drop(_7) -> [return: bb5, unwind: bb11];\n     }\n \n     bb5: {\n-        StorageDead(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n-        drop(_2) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        StorageDead(_7);\n+        drop(_2) -> [return: bb6, unwind: bb12];\n     }\n \n     bb6: {\n-        StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n-        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-        PlaceMention(_1);                // scope 1 at $DIR/uniform_array_move_out.rs:+7:21: +7:22\n-        StorageLive(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+7:10: +7:12\n-        _12 = move _1[0..2];             // scope 1 at $DIR/uniform_array_move_out.rs:+7:10: +7:12\n-        _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:+0:27: +8:2\n-        drop(_12) -> [return: bb7, unwind: bb9]; // scope 1 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n+        StorageDead(_2);\n+        FakeRead(ForLet(None), _1);\n+        PlaceMention(_1);\n+        StorageLive(_12);\n+        _12 = move _1[0..2];\n+        _0 = const ();\n+        drop(_12) -> [return: bb7, unwind: bb9];\n     }\n \n     bb7: {\n-        StorageDead(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n-        drop(_1) -> [return: bb8, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n+        StorageDead(_12);\n+        drop(_1) -> [return: bb8, unwind: bb12];\n     }\n \n     bb8: {\n-        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n-        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:+8:2: +8:2\n+        StorageDead(_1);\n+        return;\n     }\n \n     bb9 (cleanup): {\n-        drop(_1) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n+        drop(_1) -> [return: bb12, unwind terminate];\n     }\n \n     bb10 (cleanup): {\n-        drop(_7) -> [return: bb11, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        drop(_7) -> [return: bb11, unwind terminate];\n     }\n \n     bb11 (cleanup): {\n-        drop(_2) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        drop(_2) -> [return: bb12, unwind terminate];\n     }\n \n     bb12 (cleanup): {\n-        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:+0:1: +8:2\n+        resume;\n     }\n }"}, {"sha": "3def40a8578f9b07bc97a7a542a3c970f2a9d16b", "filename": "tests/mir-opt/building/uniform_array_move_out.move_out_from_end.built.after.mir", "status": "modified", "additions": 55, "deletions": 61, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,23 +1,23 @@\n // MIR for `move_out_from_end` after built\n \n fn move_out_from_end() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/uniform_array_move_out.rs:+0:24: +0:24\n-    let _1: [std::boxed::Box<i32>; 2];   // in scope 0 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-    let mut _2: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-    let mut _3: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-    let mut _4: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-    let mut _5: *mut u8;                 // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-    let mut _6: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-    let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-    let mut _8: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-    let mut _9: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-    let mut _10: *mut u8;                // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-    let mut _11: std::boxed::Box<i32>;   // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+    let mut _0: ();\n+    let _1: [std::boxed::Box<i32>; 2];\n+    let mut _2: std::boxed::Box<i32>;\n+    let mut _3: usize;\n+    let mut _4: usize;\n+    let mut _5: *mut u8;\n+    let mut _6: std::boxed::Box<i32>;\n+    let mut _7: std::boxed::Box<i32>;\n+    let mut _8: usize;\n+    let mut _9: usize;\n+    let mut _10: *mut u8;\n+    let mut _11: std::boxed::Box<i32>;\n     scope 1 {\n-        debug a => _1;                   // in scope 1 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-        let _12: std::boxed::Box<i32>;   // in scope 1 at $DIR/uniform_array_move_out.rs:+7:14: +7:16\n+        debug a => _1;\n+        let _12: std::boxed::Box<i32>;\n         scope 4 {\n-            debug _y => _12;             // in scope 4 at $DIR/uniform_array_move_out.rs:+7:14: +7:16\n+            debug _y => _12;\n         }\n     }\n     scope 2 {\n@@ -26,87 +26,81 @@ fn move_out_from_end() -> () {\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-        _3 = SizeOf(i32);                // scope 2 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-        _4 = AlignOf(i32);               // scope 2 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-                                         // mir::Constant\n-                                         // + span: $DIR/uniform_array_move_out.rs:7:9: 7:20\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        _3 = SizeOf(i32);\n+        _4 = AlignOf(i32);\n+        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12];\n     }\n \n     bb1: {\n-        StorageLive(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-        _6 = ShallowInitBox(move _5, i32); // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-        (*_6) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:+3:18: +3:19\n-        _2 = move _6;                    // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n-        drop(_6) -> [return: bb2, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:+3:19: +3:20\n+        StorageLive(_6);\n+        _6 = ShallowInitBox(move _5, i32);\n+        (*_6) = const 1_i32;\n+        _2 = move _6;\n+        drop(_6) -> [return: bb2, unwind: bb11];\n     }\n \n     bb2: {\n-        StorageDead(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:+3:19: +3:20\n-        StorageLive(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-        _8 = SizeOf(i32);                // scope 3 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-        _9 = AlignOf(i32);               // scope 3 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-                                         // mir::Constant\n-                                         // + span: $DIR/uniform_array_move_out.rs:9:9: 9:20\n-                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n+        StorageDead(_6);\n+        StorageLive(_7);\n+        _8 = SizeOf(i32);\n+        _9 = AlignOf(i32);\n+        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11];\n     }\n \n     bb3: {\n-        StorageLive(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-        _11 = ShallowInitBox(move _10, i32); // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-        (*_11) = const 2_i32;            // scope 0 at $DIR/uniform_array_move_out.rs:+5:18: +5:19\n-        _7 = move _11;                   // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n-        drop(_11) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:+5:19: +5:20\n+        StorageLive(_11);\n+        _11 = ShallowInitBox(move _10, i32);\n+        (*_11) = const 2_i32;\n+        _7 = move _11;\n+        drop(_11) -> [return: bb4, unwind: bb10];\n     }\n \n     bb4: {\n-        StorageDead(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:+5:19: +5:20\n-        _1 = [move _2, move _7];         // scope 0 at $DIR/uniform_array_move_out.rs:+1:13: +6:6\n-        drop(_7) -> [return: bb5, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        StorageDead(_11);\n+        _1 = [move _2, move _7];\n+        drop(_7) -> [return: bb5, unwind: bb11];\n     }\n \n     bb5: {\n-        StorageDead(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n-        drop(_2) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        StorageDead(_7);\n+        drop(_2) -> [return: bb6, unwind: bb12];\n     }\n \n     bb6: {\n-        StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n-        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-        PlaceMention(_1);                // scope 1 at $DIR/uniform_array_move_out.rs:+7:20: +7:21\n-        StorageLive(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+7:14: +7:16\n-        _12 = move _1[1 of 2];           // scope 1 at $DIR/uniform_array_move_out.rs:+7:14: +7:16\n-        _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:+0:24: +8:2\n-        drop(_12) -> [return: bb7, unwind: bb9]; // scope 1 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n+        StorageDead(_2);\n+        FakeRead(ForLet(None), _1);\n+        PlaceMention(_1);\n+        StorageLive(_12);\n+        _12 = move _1[1 of 2];\n+        _0 = const ();\n+        drop(_12) -> [return: bb7, unwind: bb9];\n     }\n \n     bb7: {\n-        StorageDead(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n-        drop(_1) -> [return: bb8, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n+        StorageDead(_12);\n+        drop(_1) -> [return: bb8, unwind: bb12];\n     }\n \n     bb8: {\n-        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n-        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:+8:2: +8:2\n+        StorageDead(_1);\n+        return;\n     }\n \n     bb9 (cleanup): {\n-        drop(_1) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n+        drop(_1) -> [return: bb12, unwind terminate];\n     }\n \n     bb10 (cleanup): {\n-        drop(_7) -> [return: bb11, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        drop(_7) -> [return: bb11, unwind terminate];\n     }\n \n     bb11 (cleanup): {\n-        drop(_2) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        drop(_2) -> [return: bb12, unwind terminate];\n     }\n \n     bb12 (cleanup): {\n-        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:+0:1: +8:2\n+        resume;\n     }\n }"}, {"sha": "9b17b4b63dd36d4a267ae7d8c18708cec82e2f0c", "filename": "tests/mir-opt/byte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,28 +1,25 @@\n // MIR for `main` after SimplifyCfg-elaborate-drops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/byte_slice.rs:+0:11: +0:11\n-    let _1: &[u8; 3];                    // in scope 0 at $DIR/byte_slice.rs:+1:9: +1:10\n+    let mut _0: ();\n+    let _1: &[u8; 3];\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/byte_slice.rs:+1:9: +1:10\n-        let _2: [u8; 2];                 // in scope 1 at $DIR/byte_slice.rs:+2:9: +2:10\n+        debug x => _1;\n+        let _2: [u8; 2];\n         scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/byte_slice.rs:+2:9: +2:10\n+            debug y => _2;\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/byte_slice.rs:+1:9: +1:10\n-        _1 = const b\"foo\";               // scope 0 at $DIR/byte_slice.rs:+1:13: +1:19\n-                                         // mir::Constant\n-                                         // + span: $DIR/byte_slice.rs:5:13: 5:19\n-                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc1)) }\n-        StorageLive(_2);                 // scope 1 at $DIR/byte_slice.rs:+2:9: +2:10\n-        _2 = [const 5_u8, const 120_u8]; // scope 1 at $DIR/byte_slice.rs:+2:13: +2:24\n-        _0 = const ();                   // scope 0 at $DIR/byte_slice.rs:+0:11: +3:2\n-        StorageDead(_2);                 // scope 1 at $DIR/byte_slice.rs:+3:1: +3:2\n-        StorageDead(_1);                 // scope 0 at $DIR/byte_slice.rs:+3:1: +3:2\n-        return;                          // scope 0 at $DIR/byte_slice.rs:+3:2: +3:2\n+        StorageLive(_1);\n+        _1 = const b\"foo\";\n+        StorageLive(_2);\n+        _2 = [const 5_u8, const 120_u8];\n+        _0 = const ();\n+        StorageDead(_2);\n+        StorageDead(_1);\n+        return;\n     }\n }\n "}, {"sha": "ff6d11c4596d44c22ea4e34effc1969f7a3e51cc", "filename": "tests/mir-opt/casts.redundant.InstSimplify.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcasts.redundant.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcasts.redundant.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcasts.redundant.InstSimplify.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,24 +2,24 @@\n + // MIR for `redundant` after InstSimplify\n   \n   fn redundant(_1: *const &u8) -> *const &u8 {\n-      debug x => _1;                       // in scope 0 at $DIR/casts.rs:+0:30: +0:31\n-      let mut _0: *const &u8;              // return place in scope 0 at $DIR/casts.rs:+0:51: +0:64\n-      let mut _2: *const &u8;              // in scope 0 at $DIR/casts.rs:+1:5: +1:55\n-      let mut _3: *const &u8;              // in scope 0 at $DIR/casts.rs:+1:36: +1:37\n-      scope 1 (inlined generic_cast::<&u8, &u8>) { // at $DIR/casts.rs:6:5: 6:38\n-          debug x => _3;                   // in scope 1 at $DIR/casts.rs:10:23: 10:24\n+      debug x => _1;\n+      let mut _0: *const &u8;\n+      let mut _2: *const &u8;\n+      let mut _3: *const &u8;\n+      scope 1 (inlined generic_cast::<&u8, &u8>) {\n+          debug x => _3;\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/casts.rs:+1:5: +1:55\n-          StorageLive(_3);                 // scope 0 at $DIR/casts.rs:+1:36: +1:37\n-          _3 = _1;                         // scope 0 at $DIR/casts.rs:+1:36: +1:37\n--         _2 = _3 as *const &u8 (PtrToPtr); // scope 1 at $DIR/casts.rs:11:5: 11:18\n-+         _2 = _3;                         // scope 1 at $DIR/casts.rs:11:5: 11:18\n-          StorageDead(_3);                 // scope 0 at $DIR/casts.rs:+1:37: +1:38\n-          _0 = _2;                         // scope 0 at $DIR/casts.rs:+1:5: +1:55\n-          StorageDead(_2);                 // scope 0 at $DIR/casts.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/casts.rs:+2:2: +2:2\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = _1;\n+-         _2 = _3 as *const &u8 (PtrToPtr);\n++         _2 = _3;\n+          StorageDead(_3);\n+          _0 = _2;\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "2084f44f24861fc9f368c12500c13bfe0da0c99f", "filename": "tests/mir-opt/casts.redundant.PreCodegen.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcasts.redundant.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcasts.redundant.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcasts.redundant.PreCodegen.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,14 +1,14 @@\n // MIR for `redundant` after PreCodegen\n \n fn redundant(_1: *const &u8) -> *const &u8 {\n-    debug x => _1;                       // in scope 0 at $DIR/casts.rs:+0:30: +0:31\n-    let mut _0: *const &u8;              // return place in scope 0 at $DIR/casts.rs:+0:51: +0:64\n-    scope 1 (inlined generic_cast::<&u8, &u8>) { // at $DIR/casts.rs:6:5: 6:38\n-        debug x => _1;                   // in scope 1 at $DIR/casts.rs:10:23: 10:24\n+    debug x => _1;\n+    let mut _0: *const &u8;\n+    scope 1 (inlined generic_cast::<&u8, &u8>) {\n+        debug x => _1;\n     }\n \n     bb0: {\n-        _0 = _1;                         // scope 0 at $DIR/casts.rs:+1:5: +1:55\n-        return;                          // scope 0 at $DIR/casts.rs:+2:2: +2:2\n+        _0 = _1;\n+        return;\n     }\n }"}, {"sha": "aca7b12c4c6d20dc4a2f907aa5e05266262928b6", "filename": "tests/mir-opt/casts.roundtrip.PreCodegen.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcasts.roundtrip.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcasts.roundtrip.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcasts.roundtrip.PreCodegen.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,15 +1,15 @@\n // MIR for `roundtrip` after PreCodegen\n \n fn roundtrip(_1: *const u8) -> *const u8 {\n-    debug x => _1;                       // in scope 0 at $DIR/casts.rs:+0:18: +0:19\n-    let mut _0: *const u8;               // return place in scope 0 at $DIR/casts.rs:+0:35: +0:44\n-    let mut _2: *mut u8;                 // in scope 0 at $DIR/casts.rs:+1:5: +1:17\n+    debug x => _1;\n+    let mut _0: *const u8;\n+    let mut _2: *mut u8;\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/casts.rs:+1:5: +1:17\n-        _2 = _1 as *mut u8 (PtrToPtr);   // scope 0 at $DIR/casts.rs:+1:5: +1:17\n-        _0 = move _2 as *const u8 (Pointer(MutToConstPointer)); // scope 0 at $DIR/casts.rs:+1:5: +1:17\n-        StorageDead(_2);                 // scope 0 at $DIR/casts.rs:+1:16: +1:17\n-        return;                          // scope 0 at $DIR/casts.rs:+2:2: +2:2\n+        StorageLive(_2);\n+        _2 = _1 as *mut u8 (PtrToPtr);\n+        _0 = move _2 as *const u8 (Pointer(MutToConstPointer));\n+        StorageDead(_2);\n+        return;\n     }\n }"}, {"sha": "3e7d0ce51e2ebd6eb067c3d6378c723db332a9ef", "filename": "tests/mir-opt/combine_array_len.norm2.InstSimplify.panic-abort.diff", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcombine_array_len.norm2.InstSimplify.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcombine_array_len.norm2.InstSimplify.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_array_len.norm2.InstSimplify.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,76 +2,76 @@\n + // MIR for `norm2` after InstSimplify\n   \n   fn norm2(_1: [f32; 2]) -> f32 {\n-      debug x => _1;                       // in scope 0 at $DIR/combine_array_len.rs:+0:10: +0:11\n-      let mut _0: f32;                     // return place in scope 0 at $DIR/combine_array_len.rs:+0:26: +0:29\n-      let _2: f32;                         // in scope 0 at $DIR/combine_array_len.rs:+1:9: +1:10\n-      let _3: usize;                       // in scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n-      let mut _4: usize;                   // in scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-      let mut _5: bool;                    // in scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-      let _7: usize;                       // in scope 0 at $DIR/combine_array_len.rs:+2:15: +2:16\n-      let mut _8: usize;                   // in scope 0 at $DIR/combine_array_len.rs:+2:13: +2:17\n-      let mut _9: bool;                    // in scope 0 at $DIR/combine_array_len.rs:+2:13: +2:17\n-      let mut _10: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:5: +3:8\n-      let mut _11: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:5: +3:6\n-      let mut _12: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:7: +3:8\n-      let mut _13: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:11: +3:14\n-      let mut _14: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:11: +3:12\n-      let mut _15: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:13: +3:14\n+      debug x => _1;\n+      let mut _0: f32;\n+      let _2: f32;\n+      let _3: usize;\n+      let mut _4: usize;\n+      let mut _5: bool;\n+      let _7: usize;\n+      let mut _8: usize;\n+      let mut _9: bool;\n+      let mut _10: f32;\n+      let mut _11: f32;\n+      let mut _12: f32;\n+      let mut _13: f32;\n+      let mut _14: f32;\n+      let mut _15: f32;\n       scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/combine_array_len.rs:+1:9: +1:10\n-          let _6: f32;                     // in scope 1 at $DIR/combine_array_len.rs:+2:9: +2:10\n+          debug a => _2;\n+          let _6: f32;\n           scope 2 {\n-              debug b => _6;               // in scope 2 at $DIR/combine_array_len.rs:+2:9: +2:10\n+              debug b => _6;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/combine_array_len.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n-          _3 = const 0_usize;              // scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n--         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-+         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-          _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-          assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = const 0_usize;\n+-         _4 = Len(_1);\n++         _4 = const 2_usize;\n+          _5 = Lt(_3, _4);\n+          assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          _2 = _1[_3];                     // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-          StorageDead(_3);                 // scope 0 at $DIR/combine_array_len.rs:+1:17: +1:18\n-          StorageLive(_6);                 // scope 1 at $DIR/combine_array_len.rs:+2:9: +2:10\n-          StorageLive(_7);                 // scope 1 at $DIR/combine_array_len.rs:+2:15: +2:16\n-          _7 = const 1_usize;              // scope 1 at $DIR/combine_array_len.rs:+2:15: +2:16\n--         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-+         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-          _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> [success: bb2, unwind unreachable]; // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n+          _2 = _1[_3];\n+          StorageDead(_3);\n+          StorageLive(_6);\n+          StorageLive(_7);\n+          _7 = const 1_usize;\n+-         _8 = Len(_1);\n++         _8 = const 2_usize;\n+          _9 = Lt(_7, _8);\n+          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> [success: bb2, unwind unreachable];\n       }\n   \n       bb2: {\n-          _6 = _1[_7];                     // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-          StorageDead(_7);                 // scope 1 at $DIR/combine_array_len.rs:+2:17: +2:18\n-          StorageLive(_10);                // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:8\n-          StorageLive(_11);                // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:6\n-          _11 = _2;                        // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:6\n-          StorageLive(_12);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          _12 = _2;                        // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          _10 = Mul(move _11, move _12);   // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:8\n-          StorageDead(_12);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          StorageDead(_11);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          StorageLive(_13);                // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:14\n-          StorageLive(_14);                // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:12\n-          _14 = _6;                        // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:12\n-          StorageLive(_15);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          _15 = _6;                        // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          _13 = Mul(move _14, move _15);   // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:14\n-          StorageDead(_15);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          StorageDead(_14);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          _0 = Add(move _10, move _13);    // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:14\n-          StorageDead(_13);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          StorageDead(_10);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          StorageDead(_6);                 // scope 1 at $DIR/combine_array_len.rs:+4:1: +4:2\n-          StorageDead(_2);                 // scope 0 at $DIR/combine_array_len.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/combine_array_len.rs:+4:2: +4:2\n+          _6 = _1[_7];\n+          StorageDead(_7);\n+          StorageLive(_10);\n+          StorageLive(_11);\n+          _11 = _2;\n+          StorageLive(_12);\n+          _12 = _2;\n+          _10 = Mul(move _11, move _12);\n+          StorageDead(_12);\n+          StorageDead(_11);\n+          StorageLive(_13);\n+          StorageLive(_14);\n+          _14 = _6;\n+          StorageLive(_15);\n+          _15 = _6;\n+          _13 = Mul(move _14, move _15);\n+          StorageDead(_15);\n+          StorageDead(_14);\n+          _0 = Add(move _10, move _13);\n+          StorageDead(_13);\n+          StorageDead(_10);\n+          StorageDead(_6);\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "ab7a34f840d5a62dcde92064f49100aedfeb4d0f", "filename": "tests/mir-opt/combine_array_len.norm2.InstSimplify.panic-unwind.diff", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcombine_array_len.norm2.InstSimplify.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcombine_array_len.norm2.InstSimplify.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_array_len.norm2.InstSimplify.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,76 +2,76 @@\n + // MIR for `norm2` after InstSimplify\n   \n   fn norm2(_1: [f32; 2]) -> f32 {\n-      debug x => _1;                       // in scope 0 at $DIR/combine_array_len.rs:+0:10: +0:11\n-      let mut _0: f32;                     // return place in scope 0 at $DIR/combine_array_len.rs:+0:26: +0:29\n-      let _2: f32;                         // in scope 0 at $DIR/combine_array_len.rs:+1:9: +1:10\n-      let _3: usize;                       // in scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n-      let mut _4: usize;                   // in scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-      let mut _5: bool;                    // in scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-      let _7: usize;                       // in scope 0 at $DIR/combine_array_len.rs:+2:15: +2:16\n-      let mut _8: usize;                   // in scope 0 at $DIR/combine_array_len.rs:+2:13: +2:17\n-      let mut _9: bool;                    // in scope 0 at $DIR/combine_array_len.rs:+2:13: +2:17\n-      let mut _10: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:5: +3:8\n-      let mut _11: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:5: +3:6\n-      let mut _12: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:7: +3:8\n-      let mut _13: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:11: +3:14\n-      let mut _14: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:11: +3:12\n-      let mut _15: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:13: +3:14\n+      debug x => _1;\n+      let mut _0: f32;\n+      let _2: f32;\n+      let _3: usize;\n+      let mut _4: usize;\n+      let mut _5: bool;\n+      let _7: usize;\n+      let mut _8: usize;\n+      let mut _9: bool;\n+      let mut _10: f32;\n+      let mut _11: f32;\n+      let mut _12: f32;\n+      let mut _13: f32;\n+      let mut _14: f32;\n+      let mut _15: f32;\n       scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/combine_array_len.rs:+1:9: +1:10\n-          let _6: f32;                     // in scope 1 at $DIR/combine_array_len.rs:+2:9: +2:10\n+          debug a => _2;\n+          let _6: f32;\n           scope 2 {\n-              debug b => _6;               // in scope 2 at $DIR/combine_array_len.rs:+2:9: +2:10\n+              debug b => _6;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/combine_array_len.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n-          _3 = const 0_usize;              // scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n--         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-+         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-          _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-          assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = const 0_usize;\n+-         _4 = Len(_1);\n++         _4 = const 2_usize;\n+          _5 = Lt(_3, _4);\n+          assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1;\n       }\n   \n       bb1: {\n-          _2 = _1[_3];                     // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n-          StorageDead(_3);                 // scope 0 at $DIR/combine_array_len.rs:+1:17: +1:18\n-          StorageLive(_6);                 // scope 1 at $DIR/combine_array_len.rs:+2:9: +2:10\n-          StorageLive(_7);                 // scope 1 at $DIR/combine_array_len.rs:+2:15: +2:16\n-          _7 = const 1_usize;              // scope 1 at $DIR/combine_array_len.rs:+2:15: +2:16\n--         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-+         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-          _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n+          _2 = _1[_3];\n+          StorageDead(_3);\n+          StorageLive(_6);\n+          StorageLive(_7);\n+          _7 = const 1_usize;\n+-         _8 = Len(_1);\n++         _8 = const 2_usize;\n+          _9 = Lt(_7, _8);\n+          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2;\n       }\n   \n       bb2: {\n-          _6 = _1[_7];                     // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n-          StorageDead(_7);                 // scope 1 at $DIR/combine_array_len.rs:+2:17: +2:18\n-          StorageLive(_10);                // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:8\n-          StorageLive(_11);                // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:6\n-          _11 = _2;                        // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:6\n-          StorageLive(_12);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          _12 = _2;                        // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          _10 = Mul(move _11, move _12);   // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:8\n-          StorageDead(_12);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          StorageDead(_11);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n-          StorageLive(_13);                // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:14\n-          StorageLive(_14);                // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:12\n-          _14 = _6;                        // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:12\n-          StorageLive(_15);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          _15 = _6;                        // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          _13 = Mul(move _14, move _15);   // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:14\n-          StorageDead(_15);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          StorageDead(_14);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          _0 = Add(move _10, move _13);    // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:14\n-          StorageDead(_13);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          StorageDead(_10);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n-          StorageDead(_6);                 // scope 1 at $DIR/combine_array_len.rs:+4:1: +4:2\n-          StorageDead(_2);                 // scope 0 at $DIR/combine_array_len.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/combine_array_len.rs:+4:2: +4:2\n+          _6 = _1[_7];\n+          StorageDead(_7);\n+          StorageLive(_10);\n+          StorageLive(_11);\n+          _11 = _2;\n+          StorageLive(_12);\n+          _12 = _2;\n+          _10 = Mul(move _11, move _12);\n+          StorageDead(_12);\n+          StorageDead(_11);\n+          StorageLive(_13);\n+          StorageLive(_14);\n+          _14 = _6;\n+          StorageLive(_15);\n+          _15 = _6;\n+          _13 = Mul(move _14, move _15);\n+          StorageDead(_15);\n+          StorageDead(_14);\n+          _0 = Add(move _10, move _13);\n+          StorageDead(_13);\n+          StorageDead(_10);\n+          StorageDead(_6);\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "124c2dc7e4bbf7846ec838547a72629f179c702d", "filename": "tests/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstSimplify.panic-abort.diff", "status": "modified", "additions": 47, "deletions": 56, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstSimplify.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstSimplify.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstSimplify.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,73 +2,64 @@\n + // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone` after InstSimplify\n   \n   fn <impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone(_1: &MyThing<T>) -> MyThing<T> {\n-      debug self => _1;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n-      let mut _0: MyThing<T>;              // return place in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n-      let mut _2: T;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-      let mut _3: &T;                      // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-      let _4: &T;                          // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-      let mut _5: u64;                     // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-      let mut _6: &u64;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-      let _7: &u64;                        // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-      let mut _8: [f32; 3];                // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-      let mut _9: &[f32; 3];               // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-      let _10: &[f32; 3];                  // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      debug self => _1;\n+      let mut _0: MyThing<T>;\n+      let mut _2: T;\n+      let mut _3: &T;\n+      let _4: &T;\n+      let mut _5: u64;\n+      let mut _6: &u64;\n+      let _7: &u64;\n+      let mut _8: [f32; 3];\n+      let mut _9: &[f32; 3];\n+      let _10: &[f32; 3];\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-          StorageLive(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-          StorageLive(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-          _4 = &((*_1).0: T);              // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n--         _3 = &(*_4);                     // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-+         _3 = _4;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-          _2 = <T as Clone>::clone(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-                                           // mir::Constant\n-                                           // + span: $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-                                           // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          _4 = &((*_1).0: T);\n+-         _3 = &(*_4);\n++         _3 = _4;\n+          _2 = <T as Clone>::clone(move _3) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:8: 8:9\n-          StorageLive(_5);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-          StorageLive(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-          StorageLive(_7);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-          _7 = &((*_1).1: u64);            // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n--         _6 = &(*_7);                     // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n--         _5 = <u64 as Clone>::clone(move _6) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n--                                          // mir::Constant\n--                                          // + span: $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n--                                          // + literal: Const { ty: for<'a> fn(&'a u64) -> u64 {<u64 as Clone>::clone}, val: Value(<ZST>) }\n-+         _6 = _7;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-+         _5 = (*_6);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-+         goto -> bb2;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          StorageDead(_3);\n+          StorageLive(_5);\n+          StorageLive(_6);\n+          StorageLive(_7);\n+          _7 = &((*_1).1: u64);\n+-         _6 = &(*_7);\n+-         _5 = <u64 as Clone>::clone(move _6) -> [return: bb2, unwind unreachable];\n++         _6 = _7;\n++         _5 = (*_6);\n++         goto -> bb2;\n       }\n   \n       bb2: {\n-          StorageDead(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:10: 9:11\n-          StorageLive(_8);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-          StorageLive(_9);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-          StorageLive(_10);                // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-          _10 = &((*_1).2: [f32; 3]);      // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n--         _9 = &(*_10);                    // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n--         _8 = <[f32; 3] as Clone>::clone(move _9) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n--                                          // mir::Constant\n--                                          // + span: $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n--                                          // + literal: Const { ty: for<'a> fn(&'a [f32; 3]) -> [f32; 3] {<[f32; 3] as Clone>::clone}, val: Value(<ZST>) }\n-+         _9 = _10;                        // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-+         _8 = (*_9);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-+         goto -> bb3;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+          StorageDead(_6);\n+          StorageLive(_8);\n+          StorageLive(_9);\n+          StorageLive(_10);\n+          _10 = &((*_1).2: [f32; 3]);\n+-         _9 = &(*_10);\n+-         _8 = <[f32; 3] as Clone>::clone(move _9) -> [return: bb3, unwind unreachable];\n++         _9 = _10;\n++         _8 = (*_9);\n++         goto -> bb3;\n       }\n   \n       bb3: {\n-          StorageDead(_9);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:15: 10:16\n-          _0 = MyThing::<T> { v: move _2, i: move _5, a: move _8 }; // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n-          StorageDead(_8);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n-          StorageDead(_5);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n-          StorageDead(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n-          StorageDead(_10);                // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n-          StorageDead(_7);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n-          StorageDead(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n-          return;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:15: +0:15\n+          StorageDead(_9);\n+          _0 = MyThing::<T> { v: move _2, i: move _5, a: move _8 };\n+          StorageDead(_8);\n+          StorageDead(_5);\n+          StorageDead(_2);\n+          StorageDead(_10);\n+          StorageDead(_7);\n+          StorageDead(_4);\n+          return;\n       }\n   }\n   "}, {"sha": "ee0f9fbf828946f6407095c9a33825ca7b81300a", "filename": "tests/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstSimplify.panic-unwind.diff", "status": "modified", "additions": 49, "deletions": 58, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstSimplify.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstSimplify.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstSimplify.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,81 +2,72 @@\n + // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone` after InstSimplify\n   \n   fn <impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone(_1: &MyThing<T>) -> MyThing<T> {\n-      debug self => _1;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n-      let mut _0: MyThing<T>;              // return place in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n-      let mut _2: T;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-      let mut _3: &T;                      // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-      let _4: &T;                          // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-      let mut _5: u64;                     // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-      let mut _6: &u64;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-      let _7: &u64;                        // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-      let mut _8: [f32; 3];                // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-      let mut _9: &[f32; 3];               // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-      let _10: &[f32; 3];                  // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      debug self => _1;\n+      let mut _0: MyThing<T>;\n+      let mut _2: T;\n+      let mut _3: &T;\n+      let _4: &T;\n+      let mut _5: u64;\n+      let mut _6: &u64;\n+      let _7: &u64;\n+      let mut _8: [f32; 3];\n+      let mut _9: &[f32; 3];\n+      let _10: &[f32; 3];\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-          StorageLive(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-          StorageLive(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-          _4 = &((*_1).0: T);              // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n--         _3 = &(*_4);                     // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-+         _3 = _4;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-          _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-                                           // mir::Constant\n-                                           // + span: $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n-                                           // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          _4 = &((*_1).0: T);\n+-         _3 = &(*_4);\n++         _3 = _4;\n+          _2 = <T as Clone>::clone(move _3) -> bb1;\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:8: 8:9\n-          StorageLive(_5);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-          StorageLive(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-          StorageLive(_7);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-          _7 = &((*_1).1: u64);            // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n--         _6 = &(*_7);                     // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n--         _5 = <u64 as Clone>::clone(move _6) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n--                                          // mir::Constant\n--                                          // + span: $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n--                                          // + literal: Const { ty: for<'a> fn(&'a u64) -> u64 {<u64 as Clone>::clone}, val: Value(<ZST>) }\n-+         _6 = _7;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-+         _5 = (*_6);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n-+         goto -> bb2;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          StorageDead(_3);\n+          StorageLive(_5);\n+          StorageLive(_6);\n+          StorageLive(_7);\n+          _7 = &((*_1).1: u64);\n+-         _6 = &(*_7);\n+-         _5 = <u64 as Clone>::clone(move _6) -> [return: bb2, unwind: bb4];\n++         _6 = _7;\n++         _5 = (*_6);\n++         goto -> bb2;\n       }\n   \n       bb2: {\n-          StorageDead(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:10: 9:11\n-          StorageLive(_8);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-          StorageLive(_9);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-          StorageLive(_10);                // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-          _10 = &((*_1).2: [f32; 3]);      // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n--         _9 = &(*_10);                    // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n--         _8 = <[f32; 3] as Clone>::clone(move _9) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n--                                          // mir::Constant\n--                                          // + span: $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n--                                          // + literal: Const { ty: for<'a> fn(&'a [f32; 3]) -> [f32; 3] {<[f32; 3] as Clone>::clone}, val: Value(<ZST>) }\n-+         _9 = _10;                        // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-+         _8 = (*_9);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n-+         goto -> bb3;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+          StorageDead(_6);\n+          StorageLive(_8);\n+          StorageLive(_9);\n+          StorageLive(_10);\n+          _10 = &((*_1).2: [f32; 3]);\n+-         _9 = &(*_10);\n+-         _8 = <[f32; 3] as Clone>::clone(move _9) -> [return: bb3, unwind: bb4];\n++         _9 = _10;\n++         _8 = (*_9);\n++         goto -> bb3;\n       }\n   \n       bb3: {\n-          StorageDead(_9);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:15: 10:16\n-          _0 = MyThing::<T> { v: move _2, i: move _5, a: move _8 }; // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n-          StorageDead(_8);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n-          StorageDead(_5);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n-          StorageDead(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n-          StorageDead(_10);                // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n-          StorageDead(_7);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n-          StorageDead(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n-          return;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:15: +0:15\n+          StorageDead(_9);\n+          _0 = MyThing::<T> { v: move _2, i: move _5, a: move _8 };\n+          StorageDead(_8);\n+          StorageDead(_5);\n+          StorageDead(_2);\n+          StorageDead(_10);\n+          StorageDead(_7);\n+          StorageDead(_4);\n+          return;\n       }\n   \n       bb4 (cleanup): {\n-          drop(_2) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n+          drop(_2) -> [return: bb5, unwind terminate];\n       }\n   \n       bb5 (cleanup): {\n-          resume;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n+          resume;\n       }\n   }\n   "}, {"sha": "cb623e83f5298bf5b070136ed8ac3cf5022bea2b", "filename": "tests/mir-opt/combine_transmutes.adt_transmutes.InstSimplify.diff", "status": "modified", "additions": 59, "deletions": 66, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstSimplify.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,31 +2,31 @@\n + // MIR for `adt_transmutes` after InstSimplify\n   \n   fn adt_transmutes() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/combine_transmutes.rs:+0:32: +0:32\n-      let _1: u8;                          // in scope 0 at $DIR/combine_transmutes.rs:+1:9: +1:11\n-      let mut _2: std::option::Option<std::num::NonZeroU8>; // in scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:58\n-      let mut _4: std::num::Wrapping<i16>; // in scope 0 at $DIR/combine_transmutes.rs:+2:29: +2:54\n-      let mut _6: std::num::Wrapping<i16>; // in scope 0 at $DIR/combine_transmutes.rs:+3:29: +3:54\n-      let mut _8: Union32;                 // in scope 0 at $DIR/combine_transmutes.rs:+4:29: +4:47\n-      let mut _10: Union32;                // in scope 0 at $DIR/combine_transmutes.rs:+5:29: +5:47\n-      let mut _12: std::mem::MaybeUninit<std::string::String>; // in scope 0 at $DIR/combine_transmutes.rs:+6:46: +6:77\n+      let mut _0: ();\n+      let _1: u8;\n+      let mut _2: std::option::Option<std::num::NonZeroU8>;\n+      let mut _4: std::num::Wrapping<i16>;\n+      let mut _6: std::num::Wrapping<i16>;\n+      let mut _8: Union32;\n+      let mut _10: Union32;\n+      let mut _12: std::mem::MaybeUninit<std::string::String>;\n       scope 1 {\n-          debug _a => _1;                  // in scope 1 at $DIR/combine_transmutes.rs:+1:9: +1:11\n-          let _3: i16;                     // in scope 1 at $DIR/combine_transmutes.rs:+2:9: +2:11\n+          debug _a => _1;\n+          let _3: i16;\n           scope 2 {\n-              debug _a => _3;              // in scope 2 at $DIR/combine_transmutes.rs:+2:9: +2:11\n-              let _5: u16;                 // in scope 2 at $DIR/combine_transmutes.rs:+3:9: +3:11\n+              debug _a => _3;\n+              let _5: u16;\n               scope 3 {\n-                  debug _a => _5;          // in scope 3 at $DIR/combine_transmutes.rs:+3:9: +3:11\n-                  let _7: u32;             // in scope 3 at $DIR/combine_transmutes.rs:+4:9: +4:11\n+                  debug _a => _5;\n+                  let _7: u32;\n                   scope 4 {\n-                      debug _a => _7;      // in scope 4 at $DIR/combine_transmutes.rs:+4:9: +4:11\n-                      let _9: i32;         // in scope 4 at $DIR/combine_transmutes.rs:+5:9: +5:11\n+                      debug _a => _7;\n+                      let _9: i32;\n                       scope 5 {\n-                          debug _a => _9;  // in scope 5 at $DIR/combine_transmutes.rs:+5:9: +5:11\n-                          let _11: std::mem::ManuallyDrop<std::string::String>; // in scope 5 at $DIR/combine_transmutes.rs:+6:9: +6:11\n+                          debug _a => _9;\n+                          let _11: std::mem::ManuallyDrop<std::string::String>;\n                           scope 6 {\n-                              debug _a => _11; // in scope 6 at $DIR/combine_transmutes.rs:+6:9: +6:11\n+                              debug _a => _11;\n                           }\n                       }\n                   }\n@@ -35,56 +35,49 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/combine_transmutes.rs:+1:9: +1:11\n-          StorageLive(_2);                 // scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:58\n-          _2 = Option::<NonZeroU8>::Some(const _); // scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:58\n-                                           // mir::Constant\n-                                           // + span: $DIR/combine_transmutes.rs:35:33: 35:57\n-                                           // + literal: Const { ty: NonZeroU8, val: Unevaluated(NonZeroU8::MAX, [], None) }\n-          _1 = move _2 as u8 (Transmute);  // scope 0 at $DIR/combine_transmutes.rs:+1:18: +1:59\n-          StorageDead(_2);                 // scope 0 at $DIR/combine_transmutes.rs:+1:58: +1:59\n-          StorageLive(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+2:9: +2:11\n-          StorageLive(_4);                 // scope 1 at $DIR/combine_transmutes.rs:+2:29: +2:54\n-          _4 = Wrapping::<i16>(const 0_i16); // scope 1 at $DIR/combine_transmutes.rs:+2:29: +2:54\n--         _3 = move _4 as i16 (Transmute); // scope 1 at $DIR/combine_transmutes.rs:+2:19: +2:55\n-+         _3 = move (_4.0: i16);           // scope 1 at $DIR/combine_transmutes.rs:+2:19: +2:55\n-          StorageDead(_4);                 // scope 1 at $DIR/combine_transmutes.rs:+2:54: +2:55\n-          StorageLive(_5);                 // scope 2 at $DIR/combine_transmutes.rs:+3:9: +3:11\n-          StorageLive(_6);                 // scope 2 at $DIR/combine_transmutes.rs:+3:29: +3:54\n-          _6 = Wrapping::<i16>(const 0_i16); // scope 2 at $DIR/combine_transmutes.rs:+3:29: +3:54\n-          _5 = move _6 as u16 (Transmute); // scope 2 at $DIR/combine_transmutes.rs:+3:19: +3:55\n-          StorageDead(_6);                 // scope 2 at $DIR/combine_transmutes.rs:+3:54: +3:55\n-          StorageLive(_7);                 // scope 3 at $DIR/combine_transmutes.rs:+4:9: +4:11\n-          StorageLive(_8);                 // scope 3 at $DIR/combine_transmutes.rs:+4:29: +4:47\n-          _8 = Union32 { u32: const 0_i32 }; // scope 3 at $DIR/combine_transmutes.rs:+4:29: +4:47\n-          _7 = move _8 as u32 (Transmute); // scope 3 at $DIR/combine_transmutes.rs:+4:19: +4:48\n-          StorageDead(_8);                 // scope 3 at $DIR/combine_transmutes.rs:+4:47: +4:48\n-          StorageLive(_9);                 // scope 4 at $DIR/combine_transmutes.rs:+5:9: +5:11\n-          StorageLive(_10);                // scope 4 at $DIR/combine_transmutes.rs:+5:29: +5:47\n-          _10 = Union32 { u32: const 0_u32 }; // scope 4 at $DIR/combine_transmutes.rs:+5:29: +5:47\n-          _9 = move _10 as i32 (Transmute); // scope 4 at $DIR/combine_transmutes.rs:+5:19: +5:48\n-          StorageDead(_10);                // scope 4 at $DIR/combine_transmutes.rs:+5:47: +5:48\n-          StorageLive(_11);                // scope 5 at $DIR/combine_transmutes.rs:+6:9: +6:11\n-          StorageLive(_12);                // scope 5 at $DIR/combine_transmutes.rs:+6:46: +6:77\n-          _12 = MaybeUninit::<String>::uninit() -> [return: bb1, unwind unreachable]; // scope 5 at $DIR/combine_transmutes.rs:+6:46: +6:77\n-                                           // mir::Constant\n-                                           // + span: $DIR/combine_transmutes.rs:40:46: 40:75\n-                                           // + user_ty: UserType(11)\n-                                           // + literal: Const { ty: fn() -> MaybeUninit<String> {MaybeUninit::<String>::uninit}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = Option::<NonZeroU8>::Some(const _);\n+          _1 = move _2 as u8 (Transmute);\n+          StorageDead(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          _4 = Wrapping::<i16>(const 0_i16);\n+-         _3 = move _4 as i16 (Transmute);\n++         _3 = move (_4.0: i16);\n+          StorageDead(_4);\n+          StorageLive(_5);\n+          StorageLive(_6);\n+          _6 = Wrapping::<i16>(const 0_i16);\n+          _5 = move _6 as u16 (Transmute);\n+          StorageDead(_6);\n+          StorageLive(_7);\n+          StorageLive(_8);\n+          _8 = Union32 { u32: const 0_i32 };\n+          _7 = move _8 as u32 (Transmute);\n+          StorageDead(_8);\n+          StorageLive(_9);\n+          StorageLive(_10);\n+          _10 = Union32 { u32: const 0_u32 };\n+          _9 = move _10 as i32 (Transmute);\n+          StorageDead(_10);\n+          StorageLive(_11);\n+          StorageLive(_12);\n+          _12 = MaybeUninit::<String>::uninit() -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _11 = move _12 as std::mem::ManuallyDrop<std::string::String> (Transmute); // scope 5 at $DIR/combine_transmutes.rs:+6:36: +6:78\n-+         _11 = move (_12.1: std::mem::ManuallyDrop<std::string::String>); // scope 5 at $DIR/combine_transmutes.rs:+6:36: +6:78\n-          StorageDead(_12);                // scope 5 at $DIR/combine_transmutes.rs:+6:77: +6:78\n-          _0 = const ();                   // scope 0 at $DIR/combine_transmutes.rs:+0:32: +7:2\n-          StorageDead(_11);                // scope 5 at $DIR/combine_transmutes.rs:+7:1: +7:2\n-          StorageDead(_9);                 // scope 4 at $DIR/combine_transmutes.rs:+7:1: +7:2\n-          StorageDead(_7);                 // scope 3 at $DIR/combine_transmutes.rs:+7:1: +7:2\n-          StorageDead(_5);                 // scope 2 at $DIR/combine_transmutes.rs:+7:1: +7:2\n-          StorageDead(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+7:1: +7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/combine_transmutes.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/combine_transmutes.rs:+7:2: +7:2\n+-         _11 = move _12 as std::mem::ManuallyDrop<std::string::String> (Transmute);\n++         _11 = move (_12.1: std::mem::ManuallyDrop<std::string::String>);\n+          StorageDead(_12);\n+          _0 = const ();\n+          StorageDead(_11);\n+          StorageDead(_9);\n+          StorageDead(_7);\n+          StorageDead(_5);\n+          StorageDead(_3);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "58ae5919071aff0f24f8e12c46dc09dedd82858d", "filename": "tests/mir-opt/combine_transmutes.identity_transmutes.InstSimplify.diff", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcombine_transmutes.identity_transmutes.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcombine_transmutes.identity_transmutes.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.identity_transmutes.InstSimplify.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,42 +2,38 @@\n + // MIR for `identity_transmutes` after InstSimplify\n   \n   fn identity_transmutes() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/combine_transmutes.rs:+0:37: +0:37\n-      let _1: i32;                         // in scope 0 at $DIR/combine_transmutes.rs:+2:9: +2:11\n-      let mut _3: std::vec::Vec<i32>;      // in scope 0 at $DIR/combine_transmutes.rs:+3:46: +3:56\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _3: std::vec::Vec<i32>;\n       scope 1 {\n-          debug _a => _1;                  // in scope 1 at $DIR/combine_transmutes.rs:+2:9: +2:11\n-          let _2: std::vec::Vec<i32>;      // in scope 1 at $DIR/combine_transmutes.rs:+3:9: +3:11\n+          debug _a => _1;\n+          let _2: std::vec::Vec<i32>;\n           scope 2 {\n-              debug _a => _2;              // in scope 2 at $DIR/combine_transmutes.rs:+3:9: +3:11\n+              debug _a => _2;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/combine_transmutes.rs:+2:9: +2:11\n--         _1 = const 1_i32 as i32 (Transmute); // scope 0 at $DIR/combine_transmutes.rs:+2:14: +2:38\n-+         _1 = const 1_i32;                // scope 0 at $DIR/combine_transmutes.rs:+2:14: +2:38\n-          StorageLive(_2);                 // scope 1 at $DIR/combine_transmutes.rs:+3:9: +3:11\n-          StorageLive(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+3:46: +3:56\n-          _3 = Vec::<i32>::new() -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/combine_transmutes.rs:+3:46: +3:56\n-                                           // mir::Constant\n-                                           // + span: $DIR/combine_transmutes.rs:15:46: 15:54\n-                                           // + user_ty: UserType(0)\n-                                           // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+-         _1 = const 1_i32 as i32 (Transmute);\n++         _1 = const 1_i32;\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = Vec::<i32>::new() -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _2 = move _3 as std::vec::Vec<i32> (Transmute); // scope 1 at $DIR/combine_transmutes.rs:+3:14: +3:57\n-+         _2 = move _3;                    // scope 1 at $DIR/combine_transmutes.rs:+3:14: +3:57\n-          StorageDead(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+3:56: +3:57\n-          _0 = const ();                   // scope 0 at $DIR/combine_transmutes.rs:+0:37: +4:2\n-          drop(_2) -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/combine_transmutes.rs:+4:1: +4:2\n+-         _2 = move _3 as std::vec::Vec<i32> (Transmute);\n++         _2 = move _3;\n+          StorageDead(_3);\n+          _0 = const ();\n+          drop(_2) -> [return: bb2, unwind unreachable];\n       }\n   \n       bb2: {\n-          StorageDead(_2);                 // scope 1 at $DIR/combine_transmutes.rs:+4:1: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/combine_transmutes.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/combine_transmutes.rs:+4:2: +4:2\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "8eff802dd3c4bc4715d6015cc394c236bb0edaa5", "filename": "tests/mir-opt/combine_transmutes.integer_transmutes.InstSimplify.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcombine_transmutes.integer_transmutes.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcombine_transmutes.integer_transmutes.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.integer_transmutes.InstSimplify.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,23 +2,23 @@\n + // MIR for `integer_transmutes` after InstSimplify\n   \n   fn integer_transmutes() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/combine_transmutes.rs:+0:36: +0:36\n-      let mut _1: u32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _2: i64;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _3: i64;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _4: u32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _5: usize;                   // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _0: ();\n+      let mut _1: u32;\n+      let mut _2: i64;\n+      let mut _3: i64;\n+      let mut _4: u32;\n+      let mut _5: usize;\n   \n       bb0: {\n--         _1 = const 1_i32 as u32 (Transmute); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-+         _1 = const 1_i32 as u32 (IntToInt); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-          _2 = const 1_i32 as i64 (Transmute); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n--         _3 = const 1_u64 as i64 (Transmute); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-+         _3 = const 1_u64 as i64 (IntToInt); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-          _4 = const 1_u64 as u32 (Transmute); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n--         _5 = const 1_isize as usize (Transmute); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-+         _5 = const 1_isize as usize (IntToInt); // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-          return;                          // scope 0 at $DIR/combine_transmutes.rs:+8:13: +8:21\n+-         _1 = const 1_i32 as u32 (Transmute);\n++         _1 = const 1_i32 as u32 (IntToInt);\n+          _2 = const 1_i32 as i64 (Transmute);\n+-         _3 = const 1_u64 as i64 (Transmute);\n++         _3 = const 1_u64 as i64 (IntToInt);\n+          _4 = const 1_u64 as u32 (Transmute);\n+-         _5 = const 1_isize as usize (Transmute);\n++         _5 = const 1_isize as usize (IntToInt);\n+          return;\n       }\n   }\n   "}, {"sha": "3797dbabb3c1b691f6c365cf82818bf4bea16856", "filename": "tests/mir-opt/const_allocation.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,22 +1,19 @@\n // MIR for `main` after ConstProp\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation.rs:+0:11: +0:11\n-    let _1: &[(std::option::Option<i32>, &[&str])]; // in scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n-    let mut _2: &&[(std::option::Option<i32>, &[&str])]; // in scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n+    let mut _0: ();\n+    let _1: &[(std::option::Option<i32>, &[&str])];\n+    let mut _2: &&[(std::option::Option<i32>, &[&str])];\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n-        StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n-        _2 = const {alloc1: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n-                                         // mir::Constant\n-                                         // + span: $DIR/const_allocation.rs:9:5: 9:8\n-                                         // + literal: Const { ty: &&[(Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n-        _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n-        StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:+1:8: +1:9\n-        StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:+1:8: +1:9\n-        _0 = const ();                   // scope 0 at $DIR/const_allocation.rs:+0:11: +2:2\n-        return;                          // scope 0 at $DIR/const_allocation.rs:+2:2: +2:2\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        _2 = const {alloc1: &&[(Option<i32>, &[&str])]};\n+        _1 = (*_2);\n+        StorageDead(_2);\n+        StorageDead(_1);\n+        _0 = const ();\n+        return;\n     }\n }\n "}, {"sha": "dc16c064009d76bb0a9bf8d814a58452a6c15220", "filename": "tests/mir-opt/const_allocation.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,22 +1,19 @@\n // MIR for `main` after ConstProp\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation.rs:+0:11: +0:11\n-    let _1: &[(std::option::Option<i32>, &[&str])]; // in scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n-    let mut _2: &&[(std::option::Option<i32>, &[&str])]; // in scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n+    let mut _0: ();\n+    let _1: &[(std::option::Option<i32>, &[&str])];\n+    let mut _2: &&[(std::option::Option<i32>, &[&str])];\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n-        StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n-        _2 = const {alloc1: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n-                                         // mir::Constant\n-                                         // + span: $DIR/const_allocation.rs:9:5: 9:8\n-                                         // + literal: Const { ty: &&[(Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n-        _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:+1:5: +1:8\n-        StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:+1:8: +1:9\n-        StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:+1:8: +1:9\n-        _0 = const ();                   // scope 0 at $DIR/const_allocation.rs:+0:11: +2:2\n-        return;                          // scope 0 at $DIR/const_allocation.rs:+2:2: +2:2\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        _2 = const {alloc1: &&[(Option<i32>, &[&str])]};\n+        _1 = (*_2);\n+        StorageDead(_2);\n+        StorageDead(_1);\n+        _0 = const ();\n+        return;\n     }\n }\n "}, {"sha": "c5f6902b4b48a8404bc139d4921ea160022c61b5", "filename": "tests/mir-opt/const_allocation2.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,22 +1,19 @@\n // MIR for `main` after ConstProp\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation2.rs:+0:11: +0:11\n-    let _1: &[(std::option::Option<i32>, &[&u8])]; // in scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n-    let mut _2: &&[(std::option::Option<i32>, &[&u8])]; // in scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n+    let mut _0: ();\n+    let _1: &[(std::option::Option<i32>, &[&u8])];\n+    let mut _2: &&[(std::option::Option<i32>, &[&u8])];\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n-        StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n-        _2 = const {alloc1: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n-                                         // mir::Constant\n-                                         // + span: $DIR/const_allocation2.rs:6:5: 6:8\n-                                         // + literal: Const { ty: &&[(Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n-        _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n-        StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:+1:8: +1:9\n-        StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:+1:8: +1:9\n-        _0 = const ();                   // scope 0 at $DIR/const_allocation2.rs:+0:11: +2:2\n-        return;                          // scope 0 at $DIR/const_allocation2.rs:+2:2: +2:2\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        _2 = const {alloc1: &&[(Option<i32>, &[&u8])]};\n+        _1 = (*_2);\n+        StorageDead(_2);\n+        StorageDead(_1);\n+        _0 = const ();\n+        return;\n     }\n }\n "}, {"sha": "b95b8c787487891e235000bf800db572c2683f9c", "filename": "tests/mir-opt/const_allocation2.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,22 +1,19 @@\n // MIR for `main` after ConstProp\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation2.rs:+0:11: +0:11\n-    let _1: &[(std::option::Option<i32>, &[&u8])]; // in scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n-    let mut _2: &&[(std::option::Option<i32>, &[&u8])]; // in scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n+    let mut _0: ();\n+    let _1: &[(std::option::Option<i32>, &[&u8])];\n+    let mut _2: &&[(std::option::Option<i32>, &[&u8])];\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n-        StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n-        _2 = const {alloc1: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n-                                         // mir::Constant\n-                                         // + span: $DIR/const_allocation2.rs:6:5: 6:8\n-                                         // + literal: Const { ty: &&[(Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n-        _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:+1:5: +1:8\n-        StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:+1:8: +1:9\n-        StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:+1:8: +1:9\n-        _0 = const ();                   // scope 0 at $DIR/const_allocation2.rs:+0:11: +2:2\n-        return;                          // scope 0 at $DIR/const_allocation2.rs:+2:2: +2:2\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        _2 = const {alloc1: &&[(Option<i32>, &[&u8])]};\n+        _1 = (*_2);\n+        StorageDead(_2);\n+        StorageDead(_1);\n+        _0 = const ();\n+        return;\n     }\n }\n "}, {"sha": "e172c7540014d39f25a98173e9ec56c751a38914", "filename": "tests/mir-opt/const_allocation3.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,22 +1,19 @@\n // MIR for `main` after ConstProp\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation3.rs:+0:11: +0:11\n-    let _1: &Packed;                     // in scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n-    let mut _2: &&Packed;                // in scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n+    let mut _0: ();\n+    let _1: &Packed;\n+    let mut _2: &&Packed;\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n-        StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n-        _2 = const {alloc1: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n-                                         // mir::Constant\n-                                         // + span: $DIR/const_allocation3.rs:6:5: 6:8\n-                                         // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc1)) }\n-        _1 = (*_2);                      // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n-        StorageDead(_2);                 // scope 0 at $DIR/const_allocation3.rs:+1:8: +1:9\n-        StorageDead(_1);                 // scope 0 at $DIR/const_allocation3.rs:+1:8: +1:9\n-        _0 = const ();                   // scope 0 at $DIR/const_allocation3.rs:+0:11: +2:2\n-        return;                          // scope 0 at $DIR/const_allocation3.rs:+2:2: +2:2\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        _2 = const {alloc1: &&Packed};\n+        _1 = (*_2);\n+        StorageDead(_2);\n+        StorageDead(_1);\n+        _0 = const ();\n+        return;\n     }\n }\n "}, {"sha": "d5feea723e7cd7d9faa30495ac07a888e811e4c3", "filename": "tests/mir-opt/const_allocation3.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,22 +1,19 @@\n // MIR for `main` after ConstProp\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/const_allocation3.rs:+0:11: +0:11\n-    let _1: &Packed;                     // in scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n-    let mut _2: &&Packed;                // in scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n+    let mut _0: ();\n+    let _1: &Packed;\n+    let mut _2: &&Packed;\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n-        StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n-        _2 = const {alloc1: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n-                                         // mir::Constant\n-                                         // + span: $DIR/const_allocation3.rs:6:5: 6:8\n-                                         // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc1)) }\n-        _1 = (*_2);                      // scope 0 at $DIR/const_allocation3.rs:+1:5: +1:8\n-        StorageDead(_2);                 // scope 0 at $DIR/const_allocation3.rs:+1:8: +1:9\n-        StorageDead(_1);                 // scope 0 at $DIR/const_allocation3.rs:+1:8: +1:9\n-        _0 = const ();                   // scope 0 at $DIR/const_allocation3.rs:+0:11: +2:2\n-        return;                          // scope 0 at $DIR/const_allocation3.rs:+2:2: +2:2\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        _2 = const {alloc1: &&Packed};\n+        _1 = (*_2);\n+        StorageDead(_2);\n+        StorageDead(_1);\n+        _0 = const ();\n+        return;\n     }\n }\n "}, {"sha": "255ec94816c3e5bb8c3040775e95ef325063e904", "filename": "tests/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 64, "deletions": 67, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,49 +2,49 @@\n + // MIR for `main` after ConstDebugInfo\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/const_debuginfo.rs:+0:11: +0:11\n-      let _1: u8;                          // in scope 0 at $DIR/const_debuginfo.rs:+1:9: +1:10\n-      let mut _5: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:15: +4:20\n-      let mut _6: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:15: +4:16\n-      let mut _7: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:19: +4:20\n-      let mut _8: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:23: +4:24\n-      let mut _12: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:13: +13:16\n-      let mut _13: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:19: +13:22\n+      let mut _0: ();\n+      let _1: u8;\n+      let mut _5: u8;\n+      let mut _6: u8;\n+      let mut _7: u8;\n+      let mut _8: u8;\n+      let mut _12: u32;\n+      let mut _13: u32;\n       scope 1 {\n--         debug x => _1;                   // in scope 1 at $DIR/const_debuginfo.rs:+1:9: +1:10\n-+         debug x => const 1_u8;           // in scope 1 at $DIR/const_debuginfo.rs:+1:9: +1:10\n-          let _2: u8;                      // in scope 1 at $DIR/const_debuginfo.rs:+2:9: +2:10\n+-         debug x => _1;\n++         debug x => const 1_u8;\n+          let _2: u8;\n           scope 2 {\n--             debug y => _2;               // in scope 2 at $DIR/const_debuginfo.rs:+2:9: +2:10\n-+             debug y => const 2_u8;       // in scope 2 at $DIR/const_debuginfo.rs:+2:9: +2:10\n-              let _3: u8;                  // in scope 2 at $DIR/const_debuginfo.rs:+3:9: +3:10\n+-             debug y => _2;\n++             debug y => const 2_u8;\n+              let _3: u8;\n               scope 3 {\n--                 debug z => _3;           // in scope 3 at $DIR/const_debuginfo.rs:+3:9: +3:10\n-+                 debug z => const 3_u8;   // in scope 3 at $DIR/const_debuginfo.rs:+3:9: +3:10\n-                  let _4: u8;              // in scope 3 at $DIR/const_debuginfo.rs:+4:9: +4:12\n+-                 debug z => _3;\n++                 debug z => const 3_u8;\n+                  let _4: u8;\n                   scope 4 {\n--                     debug sum => _4;     // in scope 4 at $DIR/const_debuginfo.rs:+4:9: +4:12\n-+                     debug sum => const 6_u8; // in scope 4 at $DIR/const_debuginfo.rs:+4:9: +4:12\n-                      let _9: &str;        // in scope 4 at $DIR/const_debuginfo.rs:+6:9: +6:10\n+-                     debug sum => _4;\n++                     debug sum => const 6_u8;\n+                      let _9: &str;\n                       scope 5 {\n--                         debug s => _9;   // in scope 5 at $DIR/const_debuginfo.rs:+6:9: +6:10\n-+                         debug s => const \"hello, world!\"; // in scope 5 at $DIR/const_debuginfo.rs:+6:9: +6:10\n-                          let _14: bool;   // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-                          let _15: bool;   // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-                          let _16: u32;    // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+-                         debug s => _9;\n++                         debug s => const \"hello, world!\";\n+                          let _14: bool;\n+                          let _15: bool;\n+                          let _16: u32;\n                           scope 6 {\n-                              debug f => (bool, bool, u32){ .0 => _14, .1 => _15, .2 => _16, }; // in scope 6 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-                              let _10: std::option::Option<u16>; // in scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n+                              debug f => (bool, bool, u32){ .0 => _14, .1 => _15, .2 => _16, };\n+                              let _10: std::option::Option<u16>;\n                               scope 7 {\n-                                  debug o => _10; // in scope 7 at $DIR/const_debuginfo.rs:+10:9: +10:10\n-                                  let _17: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-                                  let _18: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                  debug o => _10;\n+                                  let _17: u32;\n+                                  let _18: u32;\n                                   scope 8 {\n-                                      debug p => Point{ .0 => _17, .1 => _18, }; // in scope 8 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-                                      let _11: u32; // in scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+                                      debug p => Point{ .0 => _17, .1 => _18, };\n+                                      let _11: u32;\n                                       scope 9 {\n--                                         debug a => _11; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n-+                                         debug a => const 64_u32; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+-                                         debug a => _11;\n++                                         debug a => const 64_u32;\n                                       }\n                                   }\n                               }\n@@ -56,39 +56,36 @@\n       }\n   \n       bb0: {\n-          _1 = const 1_u8;                 // scope 0 at $DIR/const_debuginfo.rs:+1:13: +1:16\n-          _2 = const 2_u8;                 // scope 1 at $DIR/const_debuginfo.rs:+2:13: +2:16\n-          _3 = const 3_u8;                 // scope 2 at $DIR/const_debuginfo.rs:+3:13: +3:16\n-          StorageLive(_4);                 // scope 3 at $DIR/const_debuginfo.rs:+4:9: +4:12\n-          StorageLive(_5);                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:20\n-          _5 = const 3_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:20\n-          _4 = const 6_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:24\n-          StorageDead(_5);                 // scope 3 at $DIR/const_debuginfo.rs:+4:23: +4:24\n-          StorageLive(_9);                 // scope 4 at $DIR/const_debuginfo.rs:+6:9: +6:10\n-          _9 = const \"hello, world!\";      // scope 4 at $DIR/const_debuginfo.rs:+6:13: +6:28\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_debuginfo.rs:14:13: 14:28\n-                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-          StorageLive(_14);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-          StorageLive(_15);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-          StorageLive(_16);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-          _14 = const true;                // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          _15 = const false;               // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          _16 = const 123_u32;             // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          StorageLive(_10);                // scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n-          _10 = Option::<u16>::Some(const 99_u16); // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n-          _17 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          _18 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          StorageLive(_11);                // scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n-          _11 = const 64_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:22\n-          StorageDead(_11);                // scope 8 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_10);                // scope 6 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_14);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_15);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_16);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_9);                 // scope 4 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_4);                 // scope 3 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          return;                          // scope 0 at $DIR/const_debuginfo.rs:+14:2: +14:2\n+          _1 = const 1_u8;\n+          _2 = const 2_u8;\n+          _3 = const 3_u8;\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          _5 = const 3_u8;\n+          _4 = const 6_u8;\n+          StorageDead(_5);\n+          StorageLive(_9);\n+          _9 = const \"hello, world!\";\n+          StorageLive(_14);\n+          StorageLive(_15);\n+          StorageLive(_16);\n+          _14 = const true;\n+          _15 = const false;\n+          _16 = const 123_u32;\n+          StorageLive(_10);\n+          _10 = Option::<u16>::Some(const 99_u16);\n+          _17 = const 32_u32;\n+          _18 = const 32_u32;\n+          StorageLive(_11);\n+          _11 = const 64_u32;\n+          StorageDead(_11);\n+          StorageDead(_10);\n+          StorageDead(_14);\n+          StorageDead(_15);\n+          StorageDead(_16);\n+          StorageDead(_9);\n+          StorageDead(_4);\n+          return;\n       }\n   }\n   "}, {"sha": "43bdb431129e699fd99682f8a1bab8890ec18fae", "filename": "tests/mir-opt/const_goto.issue_77355_opt.ConstGoto.diff", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,51 +2,49 @@\n + // MIR for `issue_77355_opt` after ConstGoto\n   \n   fn issue_77355_opt(_1: Foo) -> u64 {\n-      debug num => _1;                     // in scope 0 at $DIR/const_goto.rs:+0:20: +0:23\n-      let mut _0: u64;                     // return place in scope 0 at $DIR/const_goto.rs:+0:33: +0:36\n--     let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--     let mut _3: isize;                   // in scope 0 at $DIR/const_goto.rs:+1:22: +1:28\n-+     let mut _2: isize;                   // in scope 0 at $DIR/const_goto.rs:+1:22: +1:28\n+      debug num => _1;\n+      let mut _0: u64;\n+-     let mut _2: bool;\n+-     let mut _3: isize;\n++     let mut _2: isize;\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--         _3 = discriminant(_1);           // scope 0 at $DIR/const_goto.rs:+1:17: +1:20\n--         switchInt(move _3) -> [1: bb2, 2: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         _2 = discriminant(_1);           // scope 0 at $DIR/const_goto.rs:+1:17: +1:20\n-+         switchInt(move _2) -> [1: bb2, 2: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         StorageLive(_2);\n+-         _3 = discriminant(_1);\n+-         switchInt(move _3) -> [1: bb2, 2: bb2, otherwise: bb1];\n++         _2 = discriminant(_1);\n++         switchInt(move _2) -> [1: bb2, 2: bb2, otherwise: bb1];\n       }\n   \n       bb1: {\n--         _2 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--         goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         _0 = const 42_u64;               // scope 0 at $DIR/const_goto.rs:+1:53: +1:55\n-+         goto -> bb3;                     // scope 0 at $DIR/const_goto.rs:+1:5: +1:57\n+-         _2 = const false;\n++         _0 = const 42_u64;\n+          goto -> bb3;\n       }\n   \n       bb2: {\n--         _2 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--         goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         _2 = const true;\n++         _0 = const 23_u64;\n+          goto -> bb3;\n+      }\n+  \n+      bb3: {\n+-         switchInt(move _2) -> [0: bb5, otherwise: bb4];\n -     }\n - \n--     bb3: {\n--         switchInt(move _2) -> [0: bb5, otherwise: bb4]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-     bb4: {\n+-         _0 = const 23_u64;\n+-         goto -> bb6;\n -     }\n - \n--     bb4: {\n-          _0 = const 23_u64;               // scope 0 at $DIR/const_goto.rs:+1:41: +1:43\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto.rs:+1:5: +1:57\n-+         goto -> bb3;                     // scope 0 at $DIR/const_goto.rs:+1:5: +1:57\n-      }\n-  \n -     bb5: {\n--         _0 = const 42_u64;               // scope 0 at $DIR/const_goto.rs:+1:53: +1:55\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto.rs:+1:5: +1:57\n+-         _0 = const 42_u64;\n+-         goto -> bb6;\n -     }\n - \n -     bb6: {\n--         StorageDead(_2);                 // scope 0 at $DIR/const_goto.rs:+1:56: +1:57\n-+     bb3: {\n-          return;                          // scope 0 at $DIR/const_goto.rs:+2:2: +2:2\n+-         StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "84a13f28a313d3172bc0e20557aa74c7e627412e", "filename": "tests/mir-opt/const_goto_const_eval_fail.f.ConstGoto.diff", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_goto_const_eval_fail.f.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_goto_const_eval_fail.f.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_goto_const_eval_fail.f.ConstGoto.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,50 +2,50 @@\n + // MIR for `f` after ConstGoto\n   \n   fn f() -> u64 {\n-      let mut _0: u64;                     // return place in scope 0 at $DIR/const_goto_const_eval_fail.rs:+0:44: +0:47\n-      let mut _1: bool;                    // in scope 0 at $DIR/const_goto_const_eval_fail.rs:+1:11: +6:6\n-      let mut _2: i32;                     // in scope 0 at $DIR/const_goto_const_eval_fail.rs:+2:15: +2:16\n+      let mut _0: u64;\n+      let mut _1: bool;\n+      let mut _2: i32;\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:+1:11: +6:6\n-          StorageLive(_2);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:+2:15: +2:16\n-          _2 = const A;                    // scope 0 at $DIR/const_goto_const_eval_fail.rs:+2:15: +2:16\n-          switchInt(_2) -> [1: bb2, 2: bb2, 3: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:+2:9: +2:16\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = const A;\n+          switchInt(_2) -> [1: bb2, 2: bb2, 3: bb2, otherwise: bb1];\n       }\n   \n       bb1: {\n-          _1 = const true;                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:+4:18: +4:22\n-          goto -> bb3;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:+4:18: +4:22\n+          _1 = const true;\n+          goto -> bb3;\n       }\n   \n       bb2: {\n-          _1 = const B;                    // scope 0 at $DIR/const_goto_const_eval_fail.rs:+3:26: +3:27\n--         goto -> bb3;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:+3:26: +3:27\n-+         switchInt(_1) -> [0: bb4, otherwise: bb3]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:+1:5: +6:6\n+          _1 = const B;\n+-         goto -> bb3;\n++         switchInt(_1) -> [0: bb4, otherwise: bb3];\n       }\n   \n       bb3: {\n--         switchInt(_1) -> [0: bb5, otherwise: bb4]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:+1:5: +6:6\n+-         switchInt(_1) -> [0: bb5, otherwise: bb4];\n -     }\n - \n -     bb4: {\n-          _0 = const 2_u64;                // scope 0 at $DIR/const_goto_const_eval_fail.rs:+8:17: +8:18\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:+8:17: +8:18\n-+         goto -> bb5;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:+8:17: +8:18\n+          _0 = const 2_u64;\n+-         goto -> bb6;\n++         goto -> bb5;\n       }\n   \n -     bb5: {\n +     bb4: {\n-          _0 = const 1_u64;                // scope 0 at $DIR/const_goto_const_eval_fail.rs:+7:18: +7:19\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:+7:18: +7:19\n-+         goto -> bb5;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:+7:18: +7:19\n+          _0 = const 1_u64;\n+-         goto -> bb6;\n++         goto -> bb5;\n       }\n   \n -     bb6: {\n +     bb5: {\n-          StorageDead(_2);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:+10:1: +10:2\n-          StorageDead(_1);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:+10:1: +10:2\n-          return;                          // scope 0 at $DIR/const_goto_const_eval_fail.rs:+10:2: +10:2\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "d1dbc7089a1cdc6b7b618bb6ee2cdacc0218ea22", "filename": "tests/mir-opt/const_goto_storage.match_nested_if.ConstGoto.diff", "status": "modified", "additions": 63, "deletions": 66, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,102 +2,99 @@\n + // MIR for `match_nested_if` after ConstGoto\n   \n   fn match_nested_if() -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/const_goto_storage.rs:+0:25: +0:29\n-      let _1: bool;                        // in scope 0 at $DIR/const_goto_storage.rs:+1:9: +1:12\n--     let mut _2: ();                      // in scope 0 at $DIR/const_goto_storage.rs:+1:21: +1:23\n--     let mut _3: bool;                    // in scope 0 at $DIR/const_goto_storage.rs:+2:15: +6:10\n--     let mut _4: bool;                    // in scope 0 at $DIR/const_goto_storage.rs:+2:18: +2:76\n--     let mut _5: bool;                    // in scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52\n--     let mut _6: bool;                    // in scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n-+     let mut _2: bool;                    // in scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n+      let mut _0: bool;\n+      let _1: bool;\n+-     let mut _2: ();\n+-     let mut _3: bool;\n+-     let mut _4: bool;\n+-     let mut _5: bool;\n+-     let mut _6: bool;\n++     let mut _2: bool;\n       scope 1 {\n-          debug val => _1;                 // in scope 1 at $DIR/const_goto_storage.rs:+1:9: +1:12\n+          debug val => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_goto_storage.rs:+1:9: +1:12\n--         StorageLive(_2);                 // scope 0 at $DIR/const_goto_storage.rs:+1:21: +1:23\n--         _2 = ();                         // scope 0 at $DIR/const_goto_storage.rs:+1:21: +1:23\n--         StorageLive(_3);                 // scope 0 at $DIR/const_goto_storage.rs:+2:15: +6:10\n--         StorageLive(_4);                 // scope 0 at $DIR/const_goto_storage.rs:+2:18: +2:76\n--         StorageLive(_5);                 // scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52\n--         StorageLive(_6);                 // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n--         _6 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n--         switchInt(move _6) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n-+         StorageLive(_2);                 // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n-+         _2 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n-+         switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_storage.rs:+2:24: +2:28\n+          StorageLive(_1);\n+          StorageLive(_2);\n+-         _2 = ();\n+-         StorageLive(_3);\n+-         StorageLive(_4);\n+-         StorageLive(_5);\n+-         StorageLive(_6);\n+-         _6 = const true;\n+-         switchInt(move _6) -> [0: bb2, otherwise: bb1];\n++         _2 = const true;\n++         switchInt(move _2) -> [0: bb2, otherwise: bb1];\n       }\n   \n       bb1: {\n--         _5 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:+2:31: +2:35\n--         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52\n--     }\n-- \n--     bb2: {\n--         _5 = const false;                // scope 0 at $DIR/const_goto_storage.rs:+2:45: +2:50\n--         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52\n--     }\n-- \n--     bb3: {\n--         StorageDead(_6);                 // scope 0 at $DIR/const_goto_storage.rs:+2:51: +2:52\n--         switchInt(move _5) -> [0: bb5, otherwise: bb4]; // scope 0 at $DIR/const_goto_storage.rs:+2:21: +2:52\n+-         _5 = const true;\n++         StorageDead(_2);\n++         _1 = const true;\n+          goto -> bb3;\n+      }\n+  \n+      bb2: {\n+-         _5 = const false;\n++         StorageDead(_2);\n++         _1 = const false;\n+          goto -> bb3;\n+      }\n+  \n+      bb3: {\n+-         StorageDead(_6);\n+-         switchInt(move _5) -> [0: bb5, otherwise: bb4];\n -     }\n - \n -     bb4: {\n--         _4 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:+2:55: +2:59\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto_storage.rs:+2:18: +2:76\n+-         _4 = const true;\n+-         goto -> bb6;\n -     }\n - \n -     bb5: {\n--         _4 = const false;                // scope 0 at $DIR/const_goto_storage.rs:+2:69: +2:74\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto_storage.rs:+2:18: +2:76\n+-         _4 = const false;\n+-         goto -> bb6;\n -     }\n - \n -     bb6: {\n--         StorageDead(_5);                 // scope 0 at $DIR/const_goto_storage.rs:+2:75: +2:76\n--         switchInt(move _4) -> [0: bb8, otherwise: bb7]; // scope 0 at $DIR/const_goto_storage.rs:+2:18: +2:76\n+-         StorageDead(_5);\n+-         switchInt(move _4) -> [0: bb8, otherwise: bb7];\n -     }\n - \n -     bb7: {\n--         _3 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:+3:13: +3:17\n--         goto -> bb9;                     // scope 0 at $DIR/const_goto_storage.rs:+2:15: +6:10\n+-         _3 = const true;\n+-         goto -> bb9;\n -     }\n - \n -     bb8: {\n--         _3 = const false;                // scope 0 at $DIR/const_goto_storage.rs:+5:13: +5:18\n--         goto -> bb9;                     // scope 0 at $DIR/const_goto_storage.rs:+2:15: +6:10\n+-         _3 = const false;\n+-         goto -> bb9;\n -     }\n - \n -     bb9: {\n--         switchInt(move _3) -> [0: bb11, otherwise: bb10]; // scope 0 at $DIR/const_goto_storage.rs:+2:15: +6:10\n+-         switchInt(move _3) -> [0: bb11, otherwise: bb10];\n -     }\n - \n -     bb10: {\n--         StorageDead(_4);                 // scope 0 at $DIR/const_goto_storage.rs:+6:9: +6:10\n--         StorageDead(_3);                 // scope 0 at $DIR/const_goto_storage.rs:+6:9: +6:10\n-+         StorageDead(_2);                 // scope 0 at $DIR/const_goto_storage.rs:+2:51: +2:52\n-          _1 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:+8:17: +8:21\n--         goto -> bb12;                    // scope 0 at $DIR/const_goto_storage.rs:+8:17: +8:21\n-+         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:+8:17: +8:21\n-      }\n-  \n+-         StorageDead(_4);\n+-         StorageDead(_3);\n+-         _1 = const true;\n+-         goto -> bb12;\n+-     }\n+- \n -     bb11: {\n--         StorageDead(_4);                 // scope 0 at $DIR/const_goto_storage.rs:+6:9: +6:10\n--         StorageDead(_3);                 // scope 0 at $DIR/const_goto_storage.rs:+6:9: +6:10\n-+     bb2: {\n-+         StorageDead(_2);                 // scope 0 at $DIR/const_goto_storage.rs:+2:51: +2:52\n-          _1 = const false;                // scope 0 at $DIR/const_goto_storage.rs:+10:14: +10:19\n--         goto -> bb12;                    // scope 0 at $DIR/const_goto_storage.rs:+10:14: +10:19\n-+         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:+10:14: +10:19\n-      }\n-  \n+-         StorageDead(_4);\n+-         StorageDead(_3);\n+-         _1 = const false;\n+-         goto -> bb12;\n+-     }\n+- \n -     bb12: {\n--         StorageDead(_2);                 // scope 0 at $DIR/const_goto_storage.rs:+11:6: +11:7\n-+     bb3: {\n-          _0 = _1;                         // scope 1 at $DIR/const_goto_storage.rs:+12:5: +12:8\n-          StorageDead(_1);                 // scope 0 at $DIR/const_goto_storage.rs:+13:1: +13:2\n-          return;                          // scope 0 at $DIR/const_goto_storage.rs:+13:2: +13:2\n+-         StorageDead(_2);\n+          _0 = _1;\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "5b8d3ca78e3fd981f8127c7df95fd26394e1fcf0", "filename": "tests/mir-opt/const_promotion_extern_static.BAR-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,20 +1,17 @@\n // MIR for `BAR::promoted[0]` after SimplifyCfg-elaborate-drops\n \n promoted[0] in BAR: &[&i32; 1] = {\n-    let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n-    let mut _1: [&i32; 1];               // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:35\n-    let mut _2: &i32;                    // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:34\n-    let mut _3: &i32;                    // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:33: +0:34\n+    let mut _0: &[&i32; 1];\n+    let mut _1: [&i32; 1];\n+    let mut _2: &i32;\n+    let mut _3: &i32;\n \n     bb0: {\n-        _3 = const {alloc1: &i32};       // scope 0 at $DIR/const_promotion_extern_static.rs:+0:33: +0:34\n-                                         // mir::Constant\n-                                         // + span: $DIR/const_promotion_extern_static.rs:9:33: 9:34\n-                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n-        _2 = &(*_3);                     // scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:34\n-        _1 = [move _2];                  // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:35\n-        _0 = &_1;                        // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n-        return;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n+        _3 = const {alloc1: &i32};\n+        _2 = &(*_3);\n+        _1 = [move _2];\n+        _0 = &_1;\n+        return;\n     }\n }\n "}, {"sha": "0eee91469e648dd8034c5335c4e62f19c050ad73", "filename": "tests/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 27, "deletions": 35, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,49 +2,41 @@\n + // MIR for `BAR` after PromoteTemps\n   \n   static mut BAR: *const &i32 = {\n-      let mut _0: *const &i32;             // return place in scope 0 at $DIR/const_promotion_extern_static.rs:+0:17: +0:28\n-      let mut _1: &[&i32];                 // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n-      let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n-      let _3: [&i32; 1];                   // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:35\n-      let mut _4: &i32;                    // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:34\n-      let _5: &i32;                        // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:33: +0:34\n-+     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n+      let mut _0: *const &i32;\n+      let mut _1: &[&i32];\n+      let mut _2: &[&i32; 1];\n+      let _3: [&i32; 1];\n+      let mut _4: &i32;\n+      let _5: &i32;\n++     let mut _6: &[&i32; 1];\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n-          StorageLive(_2);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n--         StorageLive(_3);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:35\n--         StorageLive(_4);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:34\n--         StorageLive(_5);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:33: +0:34\n--         _5 = const {alloc1: &i32};       // scope 0 at $DIR/const_promotion_extern_static.rs:+0:33: +0:34\n-+         _6 = const _;                    // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n-                                           // mir::Constant\n--                                          // + span: $DIR/const_promotion_extern_static.rs:9:33: 9:34\n--                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n--         _4 = &(*_5);                     // scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:34\n--         _3 = [move _4];                  // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:35\n--         _2 = &_3;                        // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n-+                                          // + span: $DIR/const_promotion_extern_static.rs:9:31: 9:44\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(BAR, [], Some(promoted[0])) }\n-+         _2 = &(*_6);                     // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n-          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n--         StorageDead(_4);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:34: +0:35\n-          StorageDead(_2);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:34: +0:35\n-          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:44\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_promotion_extern_static.rs:9:36: 9:42\n-                                           // + literal: Const { ty: for<'a> fn(&'a [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          StorageLive(_2);\n+-         StorageLive(_3);\n+-         StorageLive(_4);\n+-         StorageLive(_5);\n+-         _5 = const {alloc1: &i32};\n+-         _4 = &(*_5);\n+-         _3 = [move _4];\n+-         _2 = &_3;\n++         _6 = const _;\n++         _2 = &(*_6);\n+          _1 = move _2 as &[&i32] (Pointer(Unsize));\n+-         StorageDead(_4);\n+          StorageDead(_2);\n+          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2];\n       }\n   \n       bb1: {\n--         StorageDead(_5);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:43: +0:44\n--         StorageDead(_3);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:43: +0:44\n-          StorageDead(_1);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:43: +0:44\n-          return;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:1: +0:45\n+-         StorageDead(_5);\n+-         StorageDead(_3);\n+          StorageDead(_1);\n+          return;\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:1: +0:45\n+          resume;\n       }\n - }\n - "}, {"sha": "ff80d5eedab915dd10ad9d164c0d9ce2627b4738", "filename": "tests/mir-opt/const_promotion_extern_static.BOP.built.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_promotion_extern_static.BOP.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_promotion_extern_static.BOP.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_promotion_extern_static.BOP.built.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,17 +1,17 @@\n // MIR for `BOP` after built\n \n static BOP: &i32 = {\n-    let mut _0: &i32;                    // return place in scope 0 at $DIR/const_promotion_extern_static.rs:+0:13: +0:17\n-    let _1: &i32;                        // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:20: +0:23\n-    let _2: i32;                         // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:21: +0:23\n+    let mut _0: &i32;\n+    let _1: &i32;\n+    let _2: i32;\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:20: +0:23\n-        StorageLive(_2);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:21: +0:23\n-        _2 = const 13_i32;               // scope 0 at $DIR/const_promotion_extern_static.rs:+0:21: +0:23\n-        _1 = &_2;                        // scope 0 at $DIR/const_promotion_extern_static.rs:+0:20: +0:23\n-        _0 = &(*_1);                     // scope 0 at $DIR/const_promotion_extern_static.rs:+0:20: +0:23\n-        StorageDead(_1);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:22: +0:23\n-        return;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:1: +0:24\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        _2 = const 13_i32;\n+        _1 = &_2;\n+        _0 = &(*_1);\n+        StorageDead(_1);\n+        return;\n     }\n }"}, {"sha": "85355389be5ee38e6703f220b03e5b25fcd527fb", "filename": "tests/mir-opt/const_promotion_extern_static.FOO-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,20 +1,17 @@\n // MIR for `FOO::promoted[0]` after SimplifyCfg-elaborate-drops\n \n promoted[0] in FOO: &[&i32; 1] = {\n-    let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n-    let mut _1: [&i32; 1];               // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n-    let mut _2: &i32;                    // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:45\n-    let mut _3: *const i32;              // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n+    let mut _0: &[&i32; 1];\n+    let mut _1: [&i32; 1];\n+    let mut _2: &i32;\n+    let mut _3: *const i32;\n \n     bb0: {\n-        _3 = const {alloc3: *const i32}; // scope 0 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n-                                         // mir::Constant\n-                                         // + span: $DIR/const_promotion_extern_static.rs:13:42: 13:43\n-                                         // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }\n-        _2 = &(*_3);                     // scope 0 at $DIR/const_promotion_extern_static.rs:+0:41: +0:43\n-        _1 = [move _2];                  // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n-        _0 = &_1;                        // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n-        return;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n+        _3 = const {alloc3: *const i32};\n+        _2 = &(*_3);\n+        _1 = [move _2];\n+        _0 = &_1;\n+        return;\n     }\n }\n "}, {"sha": "0b117f4aaa51bf39d48c9962a55659448c4de391", "filename": "tests/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 27, "deletions": 35, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,51 +2,43 @@\n + // MIR for `FOO` after PromoteTemps\n   \n   static mut FOO: *const &i32 = {\n-      let mut _0: *const &i32;             // return place in scope 0 at $DIR/const_promotion_extern_static.rs:+0:17: +0:28\n-      let mut _1: &[&i32];                 // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n-      let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n-      let _3: [&i32; 1];                   // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n-      let mut _4: &i32;                    // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:45\n-      let _5: *const i32;                  // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n-+     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n+      let mut _0: *const &i32;\n+      let mut _1: &[&i32];\n+      let mut _2: &[&i32; 1];\n+      let _3: [&i32; 1];\n+      let mut _4: &i32;\n+      let _5: *const i32;\n++     let mut _6: &[&i32; 1];\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n-          StorageLive(_2);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n--         StorageLive(_3);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n--         StorageLive(_4);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:45\n--         StorageLive(_5);                 // scope 1 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n--         _5 = const {alloc3: *const i32}; // scope 1 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n-+         _6 = const _;                    // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n-                                           // mir::Constant\n--                                          // + span: $DIR/const_promotion_extern_static.rs:13:42: 13:43\n--                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }\n--         _4 = &(*_5);                     // scope 1 at $DIR/const_promotion_extern_static.rs:+0:41: +0:43\n--         _3 = [move _4];                  // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n--         _2 = &_3;                        // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n-+                                          // + span: $DIR/const_promotion_extern_static.rs:13:31: 13:55\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(FOO, [], Some(promoted[0])) }\n-+         _2 = &(*_6);                     // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n-          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n--         StorageDead(_4);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:45: +0:46\n-          StorageDead(_2);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:45: +0:46\n-          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_promotion_extern_static.rs:13:47: 13:53\n-                                           // + literal: Const { ty: for<'a> fn(&'a [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          StorageLive(_2);\n+-         StorageLive(_3);\n+-         StorageLive(_4);\n+-         StorageLive(_5);\n+-         _5 = const {alloc3: *const i32};\n+-         _4 = &(*_5);\n+-         _3 = [move _4];\n+-         _2 = &_3;\n++         _6 = const _;\n++         _2 = &(*_6);\n+          _1 = move _2 as &[&i32] (Pointer(Unsize));\n+-         StorageDead(_4);\n+          StorageDead(_2);\n+          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2];\n       }\n   \n       bb1: {\n--         StorageDead(_5);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:54: +0:55\n--         StorageDead(_3);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:54: +0:55\n-          StorageDead(_1);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:54: +0:55\n-          return;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:1: +0:56\n+-         StorageDead(_5);\n+-         StorageDead(_3);\n+          StorageDead(_1);\n+          return;\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:1: +0:56\n+          resume;\n       }\n   }\n - "}, {"sha": "6b96c24d46063c7ab3d5a7bf2999ddf0f761ecb7", "filename": "tests/mir-opt/const_prop/address_of_pair.fn0.ConstProp.diff", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.fn0.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.fn0.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.fn0.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,45 +2,45 @@\n + // MIR for `fn0` after ConstProp\n   \n   fn fn0() -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/address_of_pair.rs:+0:17: +0:21\n-      let mut _1: !;                       // in scope 0 at $DIR/address_of_pair.rs:+0:22: +9:2\n-      let mut _2: (i32, bool);             // in scope 0 at $DIR/address_of_pair.rs:+1:9: +1:17\n-      let _4: ();                          // in scope 0 at $DIR/address_of_pair.rs:+4:5: +6:6\n-      let mut _6: bool;                    // in scope 0 at $DIR/address_of_pair.rs:+7:16: +7:22\n+      let mut _0: bool;\n+      let mut _1: !;\n+      let mut _2: (i32, bool);\n+      let _4: ();\n+      let mut _6: bool;\n       scope 1 {\n-          debug pair => _2;                // in scope 1 at $DIR/address_of_pair.rs:+1:9: +1:17\n-          let _3: *mut bool;               // in scope 1 at $DIR/address_of_pair.rs:+2:9: +2:12\n+          debug pair => _2;\n+          let _3: *mut bool;\n           scope 2 {\n-              debug ptr => _3;             // in scope 2 at $DIR/address_of_pair.rs:+2:9: +2:12\n-              let _5: bool;                // in scope 2 at $DIR/address_of_pair.rs:+7:9: +7:12\n+              debug ptr => _3;\n+              let _5: bool;\n               scope 3 {\n               }\n               scope 4 {\n-                  debug ret => _5;         // in scope 4 at $DIR/address_of_pair.rs:+7:9: +7:12\n+                  debug ret => _5;\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/address_of_pair.rs:+1:9: +1:17\n-          _2 = (const 1_i32, const false); // scope 0 at $DIR/address_of_pair.rs:+1:20: +1:30\n-          StorageLive(_3);                 // scope 1 at $DIR/address_of_pair.rs:+2:9: +2:12\n-          _3 = &raw mut (_2.1: bool);      // scope 1 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-          _2 = (const 1_i32, const false); // scope 2 at $DIR/address_of_pair.rs:+3:5: +3:22\n-          StorageLive(_4);                 // scope 2 at $DIR/address_of_pair.rs:+4:5: +6:6\n-          (*_3) = const true;              // scope 3 at $DIR/address_of_pair.rs:+5:9: +5:20\n-          _4 = const ();                   // scope 3 at $DIR/address_of_pair.rs:+4:5: +6:6\n-          StorageDead(_4);                 // scope 2 at $DIR/address_of_pair.rs:+6:5: +6:6\n-          StorageLive(_5);                 // scope 2 at $DIR/address_of_pair.rs:+7:9: +7:12\n-          StorageLive(_6);                 // scope 2 at $DIR/address_of_pair.rs:+7:16: +7:22\n-          _6 = (_2.1: bool);               // scope 2 at $DIR/address_of_pair.rs:+7:16: +7:22\n-          _5 = Not(move _6);               // scope 2 at $DIR/address_of_pair.rs:+7:15: +7:22\n-          StorageDead(_6);                 // scope 2 at $DIR/address_of_pair.rs:+7:21: +7:22\n-          _0 = _5;                         // scope 4 at $DIR/address_of_pair.rs:+8:12: +8:15\n-          StorageDead(_5);                 // scope 2 at $DIR/address_of_pair.rs:+9:1: +9:2\n-          StorageDead(_3);                 // scope 1 at $DIR/address_of_pair.rs:+9:1: +9:2\n-          StorageDead(_2);                 // scope 0 at $DIR/address_of_pair.rs:+9:1: +9:2\n-          return;                          // scope 0 at $DIR/address_of_pair.rs:+9:2: +9:2\n+          StorageLive(_2);\n+          _2 = (const 1_i32, const false);\n+          StorageLive(_3);\n+          _3 = &raw mut (_2.1: bool);\n+          _2 = (const 1_i32, const false);\n+          StorageLive(_4);\n+          (*_3) = const true;\n+          _4 = const ();\n+          StorageDead(_4);\n+          StorageLive(_5);\n+          StorageLive(_6);\n+          _6 = (_2.1: bool);\n+          _5 = Not(move _6);\n+          StorageDead(_6);\n+          _0 = _5;\n+          StorageDead(_5);\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "5e2db148de83b12ad9fb269190fccde260874253", "filename": "tests/mir-opt/const_prop/aggregate.foo.ConstProp.panic-abort.diff", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,54 +2,54 @@\n + // MIR for `foo` after ConstProp\n   \n   fn foo(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/aggregate.rs:+0:8: +0:9\n-      let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:15: +0:15\n-      let _2: i32;                         // in scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n-      let mut _3: i32;                     // in scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n-      let mut _4: (i32, u8);               // in scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n-      let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n-      let mut _7: i32;                     // in scope 0 at $DIR/aggregate.rs:+3:18: +3:26\n-      let mut _8: (u8, i32);               // in scope 0 at $DIR/aggregate.rs:+3:18: +3:24\n-      let mut _9: u8;                      // in scope 0 at $DIR/aggregate.rs:+3:19: +3:20\n+      debug x => _1;\n+      let mut _0: ();\n+      let _2: i32;\n+      let mut _3: i32;\n+      let mut _4: (i32, u8);\n+      let mut _5: u8;\n+      let mut _7: i32;\n+      let mut _8: (u8, i32);\n+      let mut _9: u8;\n       scope 1 {\n-          debug first => _2;               // in scope 1 at $DIR/aggregate.rs:+2:9: +2:14\n-          let _6: i32;                     // in scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+          debug first => _2;\n+          let _6: i32;\n           scope 2 {\n-              debug second => _6;          // in scope 2 at $DIR/aggregate.rs:+3:9: +3:15\n+              debug second => _6;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n-          StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n-          StorageLive(_4);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n-          StorageLive(_5);                 // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n-          _5 = _1;                         // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n-          _4 = (const 0_i32, move _5);     // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n-          StorageDead(_5);                 // scope 0 at $DIR/aggregate.rs:+2:22: +2:23\n--         _3 = (_4.0: i32);                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n--         _2 = Add(move _3, const 1_i32);  // scope 0 at $DIR/aggregate.rs:+2:17: +2:29\n-+         _3 = const 0_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n-+         _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:29\n-          StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+2:28: +2:29\n-          StorageDead(_4);                 // scope 0 at $DIR/aggregate.rs:+2:29: +2:30\n-          StorageLive(_6);                 // scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n-          StorageLive(_7);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n-          StorageLive(_8);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n-          StorageLive(_9);                 // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n-          _9 = _1;                         // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n-          _8 = (move _9, const 1_i32);     // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n-          StorageDead(_9);                 // scope 1 at $DIR/aggregate.rs:+3:23: +3:24\n--         _7 = (_8.1: i32);                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n--         _6 = Add(move _7, const 2_i32);  // scope 1 at $DIR/aggregate.rs:+3:18: +3:30\n-+         _7 = const 1_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n-+         _6 = const 3_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:30\n-          StorageDead(_7);                 // scope 1 at $DIR/aggregate.rs:+3:29: +3:30\n-          StorageDead(_8);                 // scope 1 at $DIR/aggregate.rs:+3:30: +3:31\n-          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:15: +4:2\n-          StorageDead(_6);                 // scope 1 at $DIR/aggregate.rs:+4:1: +4:2\n-          StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/aggregate.rs:+4:2: +4:2\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          _5 = _1;\n+          _4 = (const 0_i32, move _5);\n+          StorageDead(_5);\n+-         _3 = (_4.0: i32);\n+-         _2 = Add(move _3, const 1_i32);\n++         _3 = const 0_i32;\n++         _2 = const 1_i32;\n+          StorageDead(_3);\n+          StorageDead(_4);\n+          StorageLive(_6);\n+          StorageLive(_7);\n+          StorageLive(_8);\n+          StorageLive(_9);\n+          _9 = _1;\n+          _8 = (move _9, const 1_i32);\n+          StorageDead(_9);\n+-         _7 = (_8.1: i32);\n+-         _6 = Add(move _7, const 2_i32);\n++         _7 = const 1_i32;\n++         _6 = const 3_i32;\n+          StorageDead(_7);\n+          StorageDead(_8);\n+          _0 = const ();\n+          StorageDead(_6);\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "5e2db148de83b12ad9fb269190fccde260874253", "filename": "tests/mir-opt/const_prop/aggregate.foo.ConstProp.panic-unwind.diff", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,54 +2,54 @@\n + // MIR for `foo` after ConstProp\n   \n   fn foo(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/aggregate.rs:+0:8: +0:9\n-      let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:15: +0:15\n-      let _2: i32;                         // in scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n-      let mut _3: i32;                     // in scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n-      let mut _4: (i32, u8);               // in scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n-      let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n-      let mut _7: i32;                     // in scope 0 at $DIR/aggregate.rs:+3:18: +3:26\n-      let mut _8: (u8, i32);               // in scope 0 at $DIR/aggregate.rs:+3:18: +3:24\n-      let mut _9: u8;                      // in scope 0 at $DIR/aggregate.rs:+3:19: +3:20\n+      debug x => _1;\n+      let mut _0: ();\n+      let _2: i32;\n+      let mut _3: i32;\n+      let mut _4: (i32, u8);\n+      let mut _5: u8;\n+      let mut _7: i32;\n+      let mut _8: (u8, i32);\n+      let mut _9: u8;\n       scope 1 {\n-          debug first => _2;               // in scope 1 at $DIR/aggregate.rs:+2:9: +2:14\n-          let _6: i32;                     // in scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+          debug first => _2;\n+          let _6: i32;\n           scope 2 {\n-              debug second => _6;          // in scope 2 at $DIR/aggregate.rs:+3:9: +3:15\n+              debug second => _6;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n-          StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n-          StorageLive(_4);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n-          StorageLive(_5);                 // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n-          _5 = _1;                         // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n-          _4 = (const 0_i32, move _5);     // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n-          StorageDead(_5);                 // scope 0 at $DIR/aggregate.rs:+2:22: +2:23\n--         _3 = (_4.0: i32);                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n--         _2 = Add(move _3, const 1_i32);  // scope 0 at $DIR/aggregate.rs:+2:17: +2:29\n-+         _3 = const 0_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n-+         _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:29\n-          StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+2:28: +2:29\n-          StorageDead(_4);                 // scope 0 at $DIR/aggregate.rs:+2:29: +2:30\n-          StorageLive(_6);                 // scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n-          StorageLive(_7);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n-          StorageLive(_8);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n-          StorageLive(_9);                 // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n-          _9 = _1;                         // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n-          _8 = (move _9, const 1_i32);     // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n-          StorageDead(_9);                 // scope 1 at $DIR/aggregate.rs:+3:23: +3:24\n--         _7 = (_8.1: i32);                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n--         _6 = Add(move _7, const 2_i32);  // scope 1 at $DIR/aggregate.rs:+3:18: +3:30\n-+         _7 = const 1_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n-+         _6 = const 3_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:30\n-          StorageDead(_7);                 // scope 1 at $DIR/aggregate.rs:+3:29: +3:30\n-          StorageDead(_8);                 // scope 1 at $DIR/aggregate.rs:+3:30: +3:31\n-          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:15: +4:2\n-          StorageDead(_6);                 // scope 1 at $DIR/aggregate.rs:+4:1: +4:2\n-          StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/aggregate.rs:+4:2: +4:2\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          _5 = _1;\n+          _4 = (const 0_i32, move _5);\n+          StorageDead(_5);\n+-         _3 = (_4.0: i32);\n+-         _2 = Add(move _3, const 1_i32);\n++         _3 = const 0_i32;\n++         _2 = const 1_i32;\n+          StorageDead(_3);\n+          StorageDead(_4);\n+          StorageLive(_6);\n+          StorageLive(_7);\n+          StorageLive(_8);\n+          StorageLive(_9);\n+          _9 = _1;\n+          _8 = (move _9, const 1_i32);\n+          StorageDead(_9);\n+-         _7 = (_8.1: i32);\n+-         _6 = Add(move _7, const 2_i32);\n++         _7 = const 1_i32;\n++         _6 = const 3_i32;\n+          StorageDead(_7);\n+          StorageDead(_8);\n+          _0 = const ();\n+          StorageDead(_6);\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "b9c5859cade4f02c1927b5bfd5e5c656858399a3", "filename": "tests/mir-opt/const_prop/aggregate.foo.PreCodegen.after.panic-abort.mir", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.panic-abort.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,49 +1,49 @@\n // MIR for `foo` after PreCodegen\n \n fn foo(_1: u8) -> () {\n-    debug x => _1;                       // in scope 0 at $DIR/aggregate.rs:+0:8: +0:9\n-    let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:15: +0:15\n-    let _2: i32;                         // in scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n-    let mut _3: i32;                     // in scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n-    let mut _4: (i32, u8);               // in scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n-    let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n-    let mut _7: i32;                     // in scope 0 at $DIR/aggregate.rs:+3:18: +3:26\n-    let mut _8: (u8, i32);               // in scope 0 at $DIR/aggregate.rs:+3:18: +3:24\n-    let mut _9: u8;                      // in scope 0 at $DIR/aggregate.rs:+3:19: +3:20\n+    debug x => _1;\n+    let mut _0: ();\n+    let _2: i32;\n+    let mut _3: i32;\n+    let mut _4: (i32, u8);\n+    let mut _5: u8;\n+    let mut _7: i32;\n+    let mut _8: (u8, i32);\n+    let mut _9: u8;\n     scope 1 {\n-        debug first => _2;               // in scope 1 at $DIR/aggregate.rs:+2:9: +2:14\n-        let _6: i32;                     // in scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+        debug first => _2;\n+        let _6: i32;\n         scope 2 {\n-            debug second => _6;          // in scope 2 at $DIR/aggregate.rs:+3:9: +3:15\n+            debug second => _6;\n         }\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n-        StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n-        StorageLive(_4);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n-        StorageLive(_5);                 // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n-        _5 = _1;                         // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n-        _4 = (const 0_i32, move _5);     // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n-        StorageDead(_5);                 // scope 0 at $DIR/aggregate.rs:+2:22: +2:23\n-        _3 = const 0_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n-        _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:29\n-        StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+2:28: +2:29\n-        StorageDead(_4);                 // scope 0 at $DIR/aggregate.rs:+2:29: +2:30\n-        StorageLive(_6);                 // scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n-        StorageLive(_7);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n-        StorageLive(_8);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n-        StorageLive(_9);                 // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n-        _9 = _1;                         // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n-        _8 = (move _9, const 1_i32);     // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n-        StorageDead(_9);                 // scope 1 at $DIR/aggregate.rs:+3:23: +3:24\n-        _7 = const 1_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n-        _6 = const 3_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:30\n-        StorageDead(_7);                 // scope 1 at $DIR/aggregate.rs:+3:29: +3:30\n-        StorageDead(_8);                 // scope 1 at $DIR/aggregate.rs:+3:30: +3:31\n-        _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:15: +4:2\n-        StorageDead(_6);                 // scope 1 at $DIR/aggregate.rs:+4:1: +4:2\n-        StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+4:1: +4:2\n-        return;                          // scope 0 at $DIR/aggregate.rs:+4:2: +4:2\n+        StorageLive(_2);\n+        StorageLive(_3);\n+        StorageLive(_4);\n+        StorageLive(_5);\n+        _5 = _1;\n+        _4 = (const 0_i32, move _5);\n+        StorageDead(_5);\n+        _3 = const 0_i32;\n+        _2 = const 1_i32;\n+        StorageDead(_3);\n+        StorageDead(_4);\n+        StorageLive(_6);\n+        StorageLive(_7);\n+        StorageLive(_8);\n+        StorageLive(_9);\n+        _9 = _1;\n+        _8 = (move _9, const 1_i32);\n+        StorageDead(_9);\n+        _7 = const 1_i32;\n+        _6 = const 3_i32;\n+        StorageDead(_7);\n+        StorageDead(_8);\n+        _0 = const ();\n+        StorageDead(_6);\n+        StorageDead(_2);\n+        return;\n     }\n }"}, {"sha": "b9c5859cade4f02c1927b5bfd5e5c656858399a3", "filename": "tests/mir-opt/const_prop/aggregate.foo.PreCodegen.after.panic-unwind.mir", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.panic-unwind.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,49 +1,49 @@\n // MIR for `foo` after PreCodegen\n \n fn foo(_1: u8) -> () {\n-    debug x => _1;                       // in scope 0 at $DIR/aggregate.rs:+0:8: +0:9\n-    let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:15: +0:15\n-    let _2: i32;                         // in scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n-    let mut _3: i32;                     // in scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n-    let mut _4: (i32, u8);               // in scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n-    let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n-    let mut _7: i32;                     // in scope 0 at $DIR/aggregate.rs:+3:18: +3:26\n-    let mut _8: (u8, i32);               // in scope 0 at $DIR/aggregate.rs:+3:18: +3:24\n-    let mut _9: u8;                      // in scope 0 at $DIR/aggregate.rs:+3:19: +3:20\n+    debug x => _1;\n+    let mut _0: ();\n+    let _2: i32;\n+    let mut _3: i32;\n+    let mut _4: (i32, u8);\n+    let mut _5: u8;\n+    let mut _7: i32;\n+    let mut _8: (u8, i32);\n+    let mut _9: u8;\n     scope 1 {\n-        debug first => _2;               // in scope 1 at $DIR/aggregate.rs:+2:9: +2:14\n-        let _6: i32;                     // in scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+        debug first => _2;\n+        let _6: i32;\n         scope 2 {\n-            debug second => _6;          // in scope 2 at $DIR/aggregate.rs:+3:9: +3:15\n+            debug second => _6;\n         }\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n-        StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n-        StorageLive(_4);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n-        StorageLive(_5);                 // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n-        _5 = _1;                         // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n-        _4 = (const 0_i32, move _5);     // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n-        StorageDead(_5);                 // scope 0 at $DIR/aggregate.rs:+2:22: +2:23\n-        _3 = const 0_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n-        _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:29\n-        StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+2:28: +2:29\n-        StorageDead(_4);                 // scope 0 at $DIR/aggregate.rs:+2:29: +2:30\n-        StorageLive(_6);                 // scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n-        StorageLive(_7);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n-        StorageLive(_8);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n-        StorageLive(_9);                 // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n-        _9 = _1;                         // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n-        _8 = (move _9, const 1_i32);     // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n-        StorageDead(_9);                 // scope 1 at $DIR/aggregate.rs:+3:23: +3:24\n-        _7 = const 1_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n-        _6 = const 3_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:30\n-        StorageDead(_7);                 // scope 1 at $DIR/aggregate.rs:+3:29: +3:30\n-        StorageDead(_8);                 // scope 1 at $DIR/aggregate.rs:+3:30: +3:31\n-        _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:15: +4:2\n-        StorageDead(_6);                 // scope 1 at $DIR/aggregate.rs:+4:1: +4:2\n-        StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+4:1: +4:2\n-        return;                          // scope 0 at $DIR/aggregate.rs:+4:2: +4:2\n+        StorageLive(_2);\n+        StorageLive(_3);\n+        StorageLive(_4);\n+        StorageLive(_5);\n+        _5 = _1;\n+        _4 = (const 0_i32, move _5);\n+        StorageDead(_5);\n+        _3 = const 0_i32;\n+        _2 = const 1_i32;\n+        StorageDead(_3);\n+        StorageDead(_4);\n+        StorageLive(_6);\n+        StorageLive(_7);\n+        StorageLive(_8);\n+        StorageLive(_9);\n+        _9 = _1;\n+        _8 = (move _9, const 1_i32);\n+        StorageDead(_9);\n+        _7 = const 1_i32;\n+        _6 = const 3_i32;\n+        StorageDead(_7);\n+        StorageDead(_8);\n+        _0 = const ();\n+        StorageDead(_6);\n+        StorageDead(_2);\n+        return;\n     }\n }"}, {"sha": "0fad2310442909ee3aac0885717d0e3261ccc42b", "filename": "tests/mir-opt/const_prop/aggregate.main.ConstProp.panic-abort.diff", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,43 +2,40 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:11: +0:11\n-      let _1: u8;                          // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n-      let mut _2: u8;                      // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-      let mut _3: (i32, u8, i32);          // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-      let _4: ();                          // in scope 0 at $DIR/aggregate.rs:+2:5: +2:11\n-      let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:9: +2:10\n+      let mut _0: ();\n+      let _1: u8;\n+      let mut _2: u8;\n+      let mut _3: (i32, u8, i32);\n+      let _4: ();\n+      let mut _5: u8;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-          StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-          _3 = (const 0_i32, const 1_u8, const 2_i32); // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n--         _2 = (_3.1: u8);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n--         _1 = Add(move _2, const 0_u8);   // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n-+         _2 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-+         _1 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n-          StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+1:27: +1:28\n-          StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+1:28: +1:29\n-          StorageLive(_4);                 // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n-          StorageLive(_5);                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n--         _5 = _1;                         // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n-+         _5 = const 1_u8;                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n-          _4 = foo(move _5) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n-                                           // mir::Constant\n-                                           // + span: $DIR/aggregate.rs:9:5: 9:8\n-                                           // + literal: Const { ty: fn(u8) {foo}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = (const 0_i32, const 1_u8, const 2_i32);\n+-         _2 = (_3.1: u8);\n+-         _1 = Add(move _2, const 0_u8);\n++         _2 = const 1_u8;\n++         _1 = const 1_u8;\n+          StorageDead(_2);\n+          StorageDead(_3);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+-         _5 = _1;\n++         _5 = const 1_u8;\n+          _4 = foo(move _5) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageDead(_5);                 // scope 1 at $DIR/aggregate.rs:+2:10: +2:11\n-          StorageDead(_4);                 // scope 1 at $DIR/aggregate.rs:+2:11: +2:12\n-          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/aggregate.rs:+3:2: +3:2\n+          StorageDead(_5);\n+          StorageDead(_4);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "73b5baafb3323b2fe605f4a61f42837cdd7832a1", "filename": "tests/mir-opt/const_prop/aggregate.main.ConstProp.panic-unwind.diff", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,43 +2,40 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:11: +0:11\n-      let _1: u8;                          // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n-      let mut _2: u8;                      // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-      let mut _3: (i32, u8, i32);          // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-      let _4: ();                          // in scope 0 at $DIR/aggregate.rs:+2:5: +2:11\n-      let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:9: +2:10\n+      let mut _0: ();\n+      let _1: u8;\n+      let mut _2: u8;\n+      let mut _3: (i32, u8, i32);\n+      let _4: ();\n+      let mut _5: u8;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-          StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-          _3 = (const 0_i32, const 1_u8, const 2_i32); // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n--         _2 = (_3.1: u8);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n--         _1 = Add(move _2, const 0_u8);   // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n-+         _2 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-+         _1 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n-          StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+1:27: +1:28\n-          StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+1:28: +1:29\n-          StorageLive(_4);                 // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n-          StorageLive(_5);                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n--         _5 = _1;                         // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n-+         _5 = const 1_u8;                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n-          _4 = foo(move _5) -> bb1;        // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n-                                           // mir::Constant\n-                                           // + span: $DIR/aggregate.rs:9:5: 9:8\n-                                           // + literal: Const { ty: fn(u8) {foo}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = (const 0_i32, const 1_u8, const 2_i32);\n+-         _2 = (_3.1: u8);\n+-         _1 = Add(move _2, const 0_u8);\n++         _2 = const 1_u8;\n++         _1 = const 1_u8;\n+          StorageDead(_2);\n+          StorageDead(_3);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+-         _5 = _1;\n++         _5 = const 1_u8;\n+          _4 = foo(move _5) -> bb1;\n       }\n   \n       bb1: {\n-          StorageDead(_5);                 // scope 1 at $DIR/aggregate.rs:+2:10: +2:11\n-          StorageDead(_4);                 // scope 1 at $DIR/aggregate.rs:+2:11: +2:12\n-          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/aggregate.rs:+3:2: +3:2\n+          StorageDead(_5);\n+          StorageDead(_4);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "2ab6c1bf34dc177e65afc4b9e7a7d79f96cbc2c0", "filename": "tests/mir-opt/const_prop/aggregate.main.PreCodegen.after.panic-abort.mir", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.panic-abort.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,39 +1,36 @@\n // MIR for `main` after PreCodegen\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:11: +0:11\n-    let _1: u8;                          // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n-    let mut _2: u8;                      // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-    let mut _3: (i32, u8, i32);          // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-    let _4: ();                          // in scope 0 at $DIR/aggregate.rs:+2:5: +2:11\n-    let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:9: +2:10\n+    let mut _0: ();\n+    let _1: u8;\n+    let mut _2: u8;\n+    let mut _3: (i32, u8, i32);\n+    let _4: ();\n+    let mut _5: u8;\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:+1:9: +1:10\n+        debug x => _1;\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-        StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-        _3 = (const 0_i32, const 1_u8, const 2_i32); // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-        _2 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-        _1 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n-        StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+1:27: +1:28\n-        StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+1:28: +1:29\n-        StorageLive(_4);                 // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n-        StorageLive(_5);                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n-        _5 = const 1_u8;                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n-        _4 = foo(move _5) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n-                                         // mir::Constant\n-                                         // + span: $DIR/aggregate.rs:9:5: 9:8\n-                                         // + literal: Const { ty: fn(u8) {foo}, val: Value(<ZST>) }\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        StorageLive(_3);\n+        _3 = (const 0_i32, const 1_u8, const 2_i32);\n+        _2 = const 1_u8;\n+        _1 = const 1_u8;\n+        StorageDead(_2);\n+        StorageDead(_3);\n+        StorageLive(_4);\n+        StorageLive(_5);\n+        _5 = const 1_u8;\n+        _4 = foo(move _5) -> [return: bb1, unwind unreachable];\n     }\n \n     bb1: {\n-        StorageDead(_5);                 // scope 1 at $DIR/aggregate.rs:+2:10: +2:11\n-        StorageDead(_4);                 // scope 1 at $DIR/aggregate.rs:+2:11: +2:12\n-        _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +3:2\n-        StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+3:1: +3:2\n-        return;                          // scope 0 at $DIR/aggregate.rs:+3:2: +3:2\n+        StorageDead(_5);\n+        StorageDead(_4);\n+        _0 = const ();\n+        StorageDead(_1);\n+        return;\n     }\n }"}, {"sha": "93d461a38c4ae86a1285f29b41487de1465a43a1", "filename": "tests/mir-opt/const_prop/aggregate.main.PreCodegen.after.panic-unwind.mir", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.panic-unwind.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,39 +1,36 @@\n // MIR for `main` after PreCodegen\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:11: +0:11\n-    let _1: u8;                          // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n-    let mut _2: u8;                      // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-    let mut _3: (i32, u8, i32);          // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-    let _4: ();                          // in scope 0 at $DIR/aggregate.rs:+2:5: +2:11\n-    let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:9: +2:10\n+    let mut _0: ();\n+    let _1: u8;\n+    let mut _2: u8;\n+    let mut _3: (i32, u8, i32);\n+    let _4: ();\n+    let mut _5: u8;\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:+1:9: +1:10\n+        debug x => _1;\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-        StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-        _3 = (const 0_i32, const 1_u8, const 2_i32); // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-        _2 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-        _1 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n-        StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+1:27: +1:28\n-        StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+1:28: +1:29\n-        StorageLive(_4);                 // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n-        StorageLive(_5);                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n-        _5 = const 1_u8;                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n-        _4 = foo(move _5) -> bb1;        // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n-                                         // mir::Constant\n-                                         // + span: $DIR/aggregate.rs:9:5: 9:8\n-                                         // + literal: Const { ty: fn(u8) {foo}, val: Value(<ZST>) }\n+        StorageLive(_1);\n+        StorageLive(_2);\n+        StorageLive(_3);\n+        _3 = (const 0_i32, const 1_u8, const 2_i32);\n+        _2 = const 1_u8;\n+        _1 = const 1_u8;\n+        StorageDead(_2);\n+        StorageDead(_3);\n+        StorageLive(_4);\n+        StorageLive(_5);\n+        _5 = const 1_u8;\n+        _4 = foo(move _5) -> bb1;\n     }\n \n     bb1: {\n-        StorageDead(_5);                 // scope 1 at $DIR/aggregate.rs:+2:10: +2:11\n-        StorageDead(_4);                 // scope 1 at $DIR/aggregate.rs:+2:11: +2:12\n-        _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +3:2\n-        StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+3:1: +3:2\n-        return;                          // scope 0 at $DIR/aggregate.rs:+3:2: +3:2\n+        StorageDead(_5);\n+        StorageDead(_4);\n+        _0 = const ();\n+        StorageDead(_1);\n+        return;\n     }\n }"}, {"sha": "012b11e0e38a33aef324be38f87e1e389b5e072c", "filename": "tests/mir-opt/const_prop/array_index.main.ConstProp.32bit.panic-abort.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/array_index.rs:+1:9: +1:10\n-      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:+1:31: +1:32\n-      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      let mut _0: ();\n+      let _1: u32;\n+      let mut _2: [u32; 4];\n+      let _3: usize;\n+      let mut _4: usize;\n+      let mut _5: bool;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n-          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n--         _4 = Len(_2);                    // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _5 = const true;                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32];\n+          StorageLive(_3);\n+          _3 = const 2_usize;\n+-         _4 = Len(_2);\n+-         _5 = Lt(_3, _4);\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable];\n++         _4 = const 4_usize;\n++         _5 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n-          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n-          _0 = const ();                   // scope 0 at $DIR/array_index.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/array_index.rs:+2:2: +2:2\n+-         _1 = _2[_3];\n++         _1 = const 2_u32;\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "9ac2fac6c004573a22b61223d15eeb79b69d470c", "filename": "tests/mir-opt/const_prop/array_index.main.ConstProp.32bit.panic-unwind.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/array_index.rs:+1:9: +1:10\n-      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:+1:31: +1:32\n-      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      let mut _0: ();\n+      let _1: u32;\n+      let mut _2: [u32; 4];\n+      let _3: usize;\n+      let mut _4: usize;\n+      let mut _5: bool;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n-          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n--         _4 = Len(_2);                    // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _5 = const true;                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32];\n+          StorageLive(_3);\n+          _3 = const 2_usize;\n+-         _4 = Len(_2);\n+-         _5 = Lt(_3, _4);\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1;\n++         _4 = const 4_usize;\n++         _5 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1;\n       }\n   \n       bb1: {\n--         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n-          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n-          _0 = const ();                   // scope 0 at $DIR/array_index.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/array_index.rs:+2:2: +2:2\n+-         _1 = _2[_3];\n++         _1 = const 2_u32;\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "012b11e0e38a33aef324be38f87e1e389b5e072c", "filename": "tests/mir-opt/const_prop/array_index.main.ConstProp.64bit.panic-abort.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/array_index.rs:+1:9: +1:10\n-      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:+1:31: +1:32\n-      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      let mut _0: ();\n+      let _1: u32;\n+      let mut _2: [u32; 4];\n+      let _3: usize;\n+      let mut _4: usize;\n+      let mut _5: bool;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n-          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n--         _4 = Len(_2);                    // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _5 = const true;                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32];\n+          StorageLive(_3);\n+          _3 = const 2_usize;\n+-         _4 = Len(_2);\n+-         _5 = Lt(_3, _4);\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable];\n++         _4 = const 4_usize;\n++         _5 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n-          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n-          _0 = const ();                   // scope 0 at $DIR/array_index.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/array_index.rs:+2:2: +2:2\n+-         _1 = _2[_3];\n++         _1 = const 2_u32;\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "9ac2fac6c004573a22b61223d15eeb79b69d470c", "filename": "tests/mir-opt/const_prop/array_index.main.ConstProp.64bit.panic-unwind.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/array_index.rs:+1:9: +1:10\n-      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:+1:31: +1:32\n-      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      let mut _0: ();\n+      let _1: u32;\n+      let mut _2: [u32; 4];\n+      let _3: usize;\n+      let mut _4: usize;\n+      let mut _5: bool;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n-          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n--         _4 = Len(_2);                    // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _5 = const true;                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32];\n+          StorageLive(_3);\n+          _3 = const 2_usize;\n+-         _4 = Len(_2);\n+-         _5 = Lt(_3, _4);\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1;\n++         _4 = const 4_usize;\n++         _5 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1;\n       }\n   \n       bb1: {\n--         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n-          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n-          _0 = const ();                   // scope 0 at $DIR/array_index.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/array_index.rs:+2:2: +2:2\n+-         _1 = _2[_3];\n++         _1 = const 2_u32;\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "34163d4d84a79fd01d3cbd15ab0f33f27373f1b9", "filename": "tests/mir-opt/const_prop/bad_op_div_by_zero.main.ConstProp.panic-abort.diff", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,52 +2,52 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_div_by_zero.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n-      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _3: i32;\n+      let mut _4: bool;\n+      let mut _5: bool;\n+      let mut _6: bool;\n+      let mut _7: bool;\n       scope 1 {\n-          debug y => _1;                   // in scope 1 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n-          let _2: i32;                     // in scope 1 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n+          debug y => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug _z => _2;              // in scope 2 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n+              debug _z => _2;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n-          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_div_by_zero.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n-          StorageLive(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n--         _3 = _1;                         // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n--         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n--         assert(!move _4, \"attempt to divide `{}` by zero\", const 1_i32) -> [success: bb1, unwind unreachable]; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n-+         _4 = const true;                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         assert(!const true, \"attempt to divide `{}` by zero\", const 1_i32) -> [success: bb1, unwind unreachable]; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+          StorageLive(_1);\n+          _1 = const 0_i32;\n+          StorageLive(_2);\n+          StorageLive(_3);\n+-         _3 = _1;\n+-         _4 = Eq(_3, const 0_i32);\n+-         assert(!move _4, \"attempt to divide `{}` by zero\", const 1_i32) -> [success: bb1, unwind unreachable];\n++         _3 = const 0_i32;\n++         _4 = const true;\n++         assert(!const true, \"attempt to divide `{}` by zero\", const 1_i32) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n--         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n--         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n--         assert(!move _7, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> [success: bb2, unwind unreachable]; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         _5 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         _6 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         _7 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         assert(!const false, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> [success: bb2, unwind unreachable]; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+-         _5 = Eq(_3, const -1_i32);\n+-         _6 = Eq(const 1_i32, const i32::MIN);\n+-         _7 = BitAnd(move _5, move _6);\n+-         assert(!move _7, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> [success: bb2, unwind unreachable];\n++         _5 = const false;\n++         _6 = const false;\n++         _7 = const false;\n++         assert(!const false, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> [success: bb2, unwind unreachable];\n       }\n   \n       bb2: {\n-          _2 = Div(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-          StorageDead(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n-          _0 = const ();                   // scope 0 at $DIR/bad_op_div_by_zero.rs:+0:11: +3:2\n-          StorageDead(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+3:1: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/bad_op_div_by_zero.rs:+3:2: +3:2\n+          _2 = Div(const 1_i32, move _3);\n+          StorageDead(_3);\n+          _0 = const ();\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "2aff357cc3e66f505487a75b6de5821bfbdf70d8", "filename": "tests/mir-opt/const_prop/bad_op_div_by_zero.main.ConstProp.panic-unwind.diff", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,52 +2,52 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_div_by_zero.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n-      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _3: i32;\n+      let mut _4: bool;\n+      let mut _5: bool;\n+      let mut _6: bool;\n+      let mut _7: bool;\n       scope 1 {\n-          debug y => _1;                   // in scope 1 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n-          let _2: i32;                     // in scope 1 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n+          debug y => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug _z => _2;              // in scope 2 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n+              debug _z => _2;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n-          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_div_by_zero.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n-          StorageLive(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n--         _3 = _1;                         // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n--         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n--         assert(!move _4, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n-+         _4 = const true;                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         assert(!const true, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+          StorageLive(_1);\n+          _1 = const 0_i32;\n+          StorageLive(_2);\n+          StorageLive(_3);\n+-         _3 = _1;\n+-         _4 = Eq(_3, const 0_i32);\n+-         assert(!move _4, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1;\n++         _3 = const 0_i32;\n++         _4 = const true;\n++         assert(!const true, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1;\n       }\n   \n       bb1: {\n--         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n--         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n--         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n--         assert(!move _7, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         _5 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         _6 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         _7 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         assert(!const false, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+-         _5 = Eq(_3, const -1_i32);\n+-         _6 = Eq(const 1_i32, const i32::MIN);\n+-         _7 = BitAnd(move _5, move _6);\n+-         assert(!move _7, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> bb2;\n++         _5 = const false;\n++         _6 = const false;\n++         _7 = const false;\n++         assert(!const false, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> bb2;\n       }\n   \n       bb2: {\n-          _2 = Div(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-          StorageDead(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n-          _0 = const ();                   // scope 0 at $DIR/bad_op_div_by_zero.rs:+0:11: +3:2\n-          StorageDead(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+3:1: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/bad_op_div_by_zero.rs:+3:2: +3:2\n+          _2 = Div(const 1_i32, move _3);\n+          StorageDead(_3);\n+          _0 = const ();\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "eb1c7d34f0f58a00713e7b0f96de8b42ab6b6764", "filename": "tests/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.panic-abort.diff", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,52 +2,52 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n-      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _3: i32;\n+      let mut _4: bool;\n+      let mut _5: bool;\n+      let mut _6: bool;\n+      let mut _7: bool;\n       scope 1 {\n-          debug y => _1;                   // in scope 1 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n-          let _2: i32;                     // in scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n+          debug y => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug _z => _2;              // in scope 2 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n+              debug _z => _2;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n-          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n-          StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n--         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n--         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> [success: bb1, unwind unreachable]; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n-+         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> [success: bb1, unwind unreachable]; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          StorageLive(_1);\n+          _1 = const 0_i32;\n+          StorageLive(_2);\n+          StorageLive(_3);\n+-         _3 = _1;\n+-         _4 = Eq(_3, const 0_i32);\n+-         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> [success: bb1, unwind unreachable];\n++         _3 = const 0_i32;\n++         _4 = const true;\n++         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> [success: bb2, unwind unreachable]; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> [success: bb2, unwind unreachable]; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _5 = Eq(_3, const -1_i32);\n+-         _6 = Eq(const 1_i32, const i32::MIN);\n+-         _7 = BitAnd(move _5, move _6);\n+-         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> [success: bb2, unwind unreachable];\n++         _5 = const false;\n++         _6 = const false;\n++         _7 = const false;\n++         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> [success: bb2, unwind unreachable];\n       }\n   \n       bb2: {\n-          _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-          StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n-          _0 = const ();                   // scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +3:2\n-          StorageDead(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:2: +3:2\n+          _2 = Rem(const 1_i32, move _3);\n+          StorageDead(_3);\n+          _0 = const ();\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "db93de9630b533cfe156444a4c0991e58e665643", "filename": "tests/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.panic-unwind.diff", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,52 +2,52 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n-      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _3: i32;\n+      let mut _4: bool;\n+      let mut _5: bool;\n+      let mut _6: bool;\n+      let mut _7: bool;\n       scope 1 {\n-          debug y => _1;                   // in scope 1 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n-          let _2: i32;                     // in scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n+          debug y => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug _z => _2;              // in scope 2 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n+              debug _z => _2;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n-          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n-          StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n--         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n--         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n-+         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          StorageLive(_1);\n+          _1 = const 0_i32;\n+          StorageLive(_2);\n+          StorageLive(_3);\n+-         _3 = _1;\n+-         _4 = Eq(_3, const 0_i32);\n+-         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1;\n++         _3 = const 0_i32;\n++         _4 = const true;\n++         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1;\n       }\n   \n       bb1: {\n--         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _5 = Eq(_3, const -1_i32);\n+-         _6 = Eq(const 1_i32, const i32::MIN);\n+-         _7 = BitAnd(move _5, move _6);\n+-         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2;\n++         _5 = const false;\n++         _6 = const false;\n++         _7 = const false;\n++         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2;\n       }\n   \n       bb2: {\n-          _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-          StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n-          _0 = const ();                   // scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +3:2\n-          StorageDead(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:2: +3:2\n+          _2 = Rem(const 1_i32, move _3);\n+          StorageDead(_3);\n+          _0 = const ();\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "6d5e34f23e845326c1c0d40f719d495c55892a74", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-abort.diff", "status": "modified", "additions": 36, "deletions": 39, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,56 +2,53 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+0:11: +0:11\n-      let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n-      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n-      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let mut _0: ();\n+      let _1: *const [i32];\n+      let mut _2: *const [i32; 3];\n+      let _3: &[i32; 3];\n+      let _4: [i32; 3];\n+      let _6: usize;\n+      let mut _7: usize;\n+      let mut _8: bool;\n+      let mut _9: &[i32; 3];\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+          debug a => _1;\n           scope 2 {\n-              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              let _5: i32;\n               scope 3 {\n-                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+                  debug _b => _5;\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:9:25: 9:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = &(*_9);                     // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n-          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n-          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n-          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _7 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _8 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         assert(const false, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _9 = const _;\n+          _3 = &(*_9);\n+          _2 = &raw const (*_3);\n+          _1 = move _2 as *const [i32] (Pointer(Unsize));\n+          StorageDead(_2);\n+          StorageDead(_3);\n+          StorageLive(_5);\n+          StorageLive(_6);\n+          _6 = const 3_usize;\n+          _7 = const 3_usize;\n+-         _8 = Lt(_6, _7);\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable];\n++         _8 = const false;\n++         assert(const false, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _5 = (*_1)[3 of 4];              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n-          _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n-          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n+-         _5 = (*_1)[_6];\n++         _5 = (*_1)[3 of 4];\n+          StorageDead(_6);\n+          _0 = const ();\n+          StorageDead(_5);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "f39468d9684bc6c2b3ccae3f14914bfd281657e3", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-unwind.diff", "status": "modified", "additions": 36, "deletions": 39, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,56 +2,53 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+0:11: +0:11\n-      let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n-      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n-      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let mut _0: ();\n+      let _1: *const [i32];\n+      let mut _2: *const [i32; 3];\n+      let _3: &[i32; 3];\n+      let _4: [i32; 3];\n+      let _6: usize;\n+      let mut _7: usize;\n+      let mut _8: bool;\n+      let mut _9: &[i32; 3];\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+          debug a => _1;\n           scope 2 {\n-              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              let _5: i32;\n               scope 3 {\n-                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+                  debug _b => _5;\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:9:25: 9:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = &(*_9);                     // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n-          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n-          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n-          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _7 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _8 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         assert(const false, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _9 = const _;\n+          _3 = &(*_9);\n+          _2 = &raw const (*_3);\n+          _1 = move _2 as *const [i32] (Pointer(Unsize));\n+          StorageDead(_2);\n+          StorageDead(_3);\n+          StorageLive(_5);\n+          StorageLive(_6);\n+          _6 = const 3_usize;\n+          _7 = const 3_usize;\n+-         _8 = Lt(_6, _7);\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1;\n++         _8 = const false;\n++         assert(const false, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1;\n       }\n   \n       bb1: {\n--         _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _5 = (*_1)[3 of 4];              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n-          _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n-          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n+-         _5 = (*_1)[_6];\n++         _5 = (*_1)[3 of 4];\n+          StorageDead(_6);\n+          _0 = const ();\n+          StorageDead(_5);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "6d5e34f23e845326c1c0d40f719d495c55892a74", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-abort.diff", "status": "modified", "additions": 36, "deletions": 39, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,56 +2,53 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+0:11: +0:11\n-      let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n-      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n-      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let mut _0: ();\n+      let _1: *const [i32];\n+      let mut _2: *const [i32; 3];\n+      let _3: &[i32; 3];\n+      let _4: [i32; 3];\n+      let _6: usize;\n+      let mut _7: usize;\n+      let mut _8: bool;\n+      let mut _9: &[i32; 3];\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+          debug a => _1;\n           scope 2 {\n-              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              let _5: i32;\n               scope 3 {\n-                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+                  debug _b => _5;\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:9:25: 9:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = &(*_9);                     // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n-          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n-          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n-          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _7 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _8 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         assert(const false, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _9 = const _;\n+          _3 = &(*_9);\n+          _2 = &raw const (*_3);\n+          _1 = move _2 as *const [i32] (Pointer(Unsize));\n+          StorageDead(_2);\n+          StorageDead(_3);\n+          StorageLive(_5);\n+          StorageLive(_6);\n+          _6 = const 3_usize;\n+          _7 = const 3_usize;\n+-         _8 = Lt(_6, _7);\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable];\n++         _8 = const false;\n++         assert(const false, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _5 = (*_1)[3 of 4];              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n-          _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n-          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n+-         _5 = (*_1)[_6];\n++         _5 = (*_1)[3 of 4];\n+          StorageDead(_6);\n+          _0 = const ();\n+          StorageDead(_5);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "f39468d9684bc6c2b3ccae3f14914bfd281657e3", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-unwind.diff", "status": "modified", "additions": 36, "deletions": 39, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,56 +2,53 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+0:11: +0:11\n-      let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n-      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n-      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let mut _0: ();\n+      let _1: *const [i32];\n+      let mut _2: *const [i32; 3];\n+      let _3: &[i32; 3];\n+      let _4: [i32; 3];\n+      let _6: usize;\n+      let mut _7: usize;\n+      let mut _8: bool;\n+      let mut _9: &[i32; 3];\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+          debug a => _1;\n           scope 2 {\n-              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              let _5: i32;\n               scope 3 {\n-                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+                  debug _b => _5;\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-                                           // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:9:25: 9:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = &(*_9);                     // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n-          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n-          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n-          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _7 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _8 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         assert(const false, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _9 = const _;\n+          _3 = &(*_9);\n+          _2 = &raw const (*_3);\n+          _1 = move _2 as *const [i32] (Pointer(Unsize));\n+          StorageDead(_2);\n+          StorageDead(_3);\n+          StorageLive(_5);\n+          StorageLive(_6);\n+          _6 = const 3_usize;\n+          _7 = const 3_usize;\n+-         _8 = Lt(_6, _7);\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1;\n++         _8 = const false;\n++         assert(const false, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1;\n       }\n   \n       bb1: {\n--         _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _5 = (*_1)[3 of 4];              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n-          _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n-          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n+-         _5 = (*_1)[_6];\n++         _5 = (*_1)[3 of 4];\n+          StorageDead(_6);\n+          _0 = const ();\n+          StorageDead(_5);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "d805341991d8363e437470c61855b1a9f58cd952", "filename": "tests/mir-opt/const_prop/boolean_identities.test.ConstProp.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fboolean_identities.test.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fboolean_identities.test.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fboolean_identities.test.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,26 +2,26 @@\n + // MIR for `test` after ConstProp\n   \n   fn test(_1: bool, _2: bool) -> bool {\n-      debug x => _1;                       // in scope 0 at $DIR/boolean_identities.rs:+0:13: +0:14\n-      debug y => _2;                       // in scope 0 at $DIR/boolean_identities.rs:+0:22: +0:23\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/boolean_identities.rs:+0:34: +0:38\n-      let mut _3: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n-      let mut _4: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n-      let mut _5: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n-      let mut _6: bool;                    // in scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n+      debug x => _1;\n+      debug y => _2;\n+      let mut _0: bool;\n+      let mut _3: bool;\n+      let mut _4: bool;\n+      let mut _5: bool;\n+      let mut _6: bool;\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n--         _3 = BitOr(_2, const true);      // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n-+         _3 = const true;                 // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n-          StorageLive(_5);                 // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n--         _5 = BitAnd(_1, const false);    // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n--         _0 = BitAnd(move _3, move _5);   // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:29\n-+         _5 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n-+         _0 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:29\n-          StorageDead(_5);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n-          StorageDead(_3);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n-          return;                          // scope 0 at $DIR/boolean_identities.rs:+2:2: +2:2\n+          StorageLive(_3);\n+-         _3 = BitOr(_2, const true);\n++         _3 = const true;\n+          StorageLive(_5);\n+-         _5 = BitAnd(_1, const false);\n+-         _0 = BitAnd(move _3, move _5);\n++         _5 = const false;\n++         _0 = const false;\n+          StorageDead(_5);\n+          StorageDead(_3);\n+          return;\n       }\n   }\n   "}, {"sha": "24b4796949aeb40749f338fc4ed7babb23a43638", "filename": "tests/mir-opt/const_prop/boxes.main.ConstProp.panic-abort.diff", "status": "modified", "additions": 34, "deletions": 37, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,55 +2,52 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/boxes.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/boxes.rs:+1:9: +1:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/boxes.rs:+1:13: +2:18\n-      let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-      let mut _4: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-      let mut _5: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-      let mut _6: *mut u8;                 // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-      let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-      let mut _8: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-      let mut _9: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _2: i32;\n+      let mut _3: std::boxed::Box<i32>;\n+      let mut _4: usize;\n+      let mut _5: usize;\n+      let mut _6: *mut u8;\n+      let mut _7: std::boxed::Box<i32>;\n+      let mut _8: *const i32;\n+      let mut _9: *const i32;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/boxes.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/boxes.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/boxes.rs:+1:13: +2:18\n-          StorageLive(_3);                 // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n--         _4 = SizeOf(i32);                // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n--         _5 = AlignOf(i32);               // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n-+         _4 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n-+         _5 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n-          _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/boxes.rs:13:14: 14:18\n-                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+-         _4 = SizeOf(i32);\n+-         _5 = AlignOf(i32);\n++         _4 = const 4_usize;\n++         _5 = const 4_usize;\n+          _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageLive(_7);                 // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-          _7 = ShallowInitBox(move _6, i32); // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-          _8 = (((_7.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+2:14: +2:16\n-          (*_8) = const 42_i32;            // scope 0 at $DIR/boxes.rs:+2:14: +2:16\n-          _3 = move _7;                    // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-          StorageDead(_7);                 // scope 0 at $DIR/boxes.rs:+2:17: +2:18\n-          _9 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+1:13: +2:18\n-          _2 = (*_9);                      // scope 0 at $DIR/boxes.rs:+1:13: +2:18\n-          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:+1:13: +3:12\n-          StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:+3:11: +3:12\n-          drop(_3) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/boxes.rs:+3:12: +3:13\n+          StorageLive(_7);\n+          _7 = ShallowInitBox(move _6, i32);\n+          _8 = (((_7.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);\n+          (*_8) = const 42_i32;\n+          _3 = move _7;\n+          StorageDead(_7);\n+          _9 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);\n+          _2 = (*_9);\n+          _1 = Add(move _2, const 0_i32);\n+          StorageDead(_2);\n+          drop(_3) -> [return: bb2, unwind unreachable];\n       }\n   \n       bb2: {\n-          StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:+3:12: +3:13\n-          _0 = const ();                   // scope 0 at $DIR/boxes.rs:+0:11: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/boxes.rs:+4:2: +4:2\n+          StorageDead(_3);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "8e3c2f6c8448a9c860169d2b0560f21f49a5faf5", "filename": "tests/mir-opt/const_prop/boxes.main.ConstProp.panic-unwind.diff", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,59 +2,56 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/boxes.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/boxes.rs:+1:9: +1:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/boxes.rs:+1:13: +2:18\n-      let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-      let mut _4: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-      let mut _5: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-      let mut _6: *mut u8;                 // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-      let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-      let mut _8: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-      let mut _9: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _2: i32;\n+      let mut _3: std::boxed::Box<i32>;\n+      let mut _4: usize;\n+      let mut _5: usize;\n+      let mut _6: *mut u8;\n+      let mut _7: std::boxed::Box<i32>;\n+      let mut _8: *const i32;\n+      let mut _9: *const i32;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/boxes.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/boxes.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/boxes.rs:+1:13: +2:18\n-          StorageLive(_3);                 // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n--         _4 = SizeOf(i32);                // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n--         _5 = AlignOf(i32);               // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n-+         _4 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n-+         _5 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n-          _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/boxes.rs:13:14: 14:18\n-                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+-         _4 = SizeOf(i32);\n+-         _5 = AlignOf(i32);\n++         _4 = const 4_usize;\n++         _5 = const 4_usize;\n+          _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1;\n       }\n   \n       bb1: {\n-          StorageLive(_7);                 // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-          _7 = ShallowInitBox(move _6, i32); // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-          _8 = (((_7.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+2:14: +2:16\n-          (*_8) = const 42_i32;            // scope 0 at $DIR/boxes.rs:+2:14: +2:16\n-          _3 = move _7;                    // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n-          StorageDead(_7);                 // scope 0 at $DIR/boxes.rs:+2:17: +2:18\n-          _9 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+1:13: +2:18\n-          _2 = (*_9);                      // scope 0 at $DIR/boxes.rs:+1:13: +2:18\n-          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:+1:13: +3:12\n-          StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:+3:11: +3:12\n-          drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/boxes.rs:+3:12: +3:13\n+          StorageLive(_7);\n+          _7 = ShallowInitBox(move _6, i32);\n+          _8 = (((_7.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);\n+          (*_8) = const 42_i32;\n+          _3 = move _7;\n+          StorageDead(_7);\n+          _9 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);\n+          _2 = (*_9);\n+          _1 = Add(move _2, const 0_i32);\n+          StorageDead(_2);\n+          drop(_3) -> [return: bb2, unwind: bb3];\n       }\n   \n       bb2: {\n-          StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:+3:12: +3:13\n-          _0 = const ();                   // scope 0 at $DIR/boxes.rs:+0:11: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/boxes.rs:+4:2: +4:2\n+          StorageDead(_3);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   \n       bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/boxes.rs:+0:1: +4:2\n+          resume;\n       }\n   }\n   "}, {"sha": "c63adcf1191e021edaecd62a1f50250f9f5e61ca", "filename": "tests/mir-opt/const_prop/cast.main.ConstProp.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,27 +2,27 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/cast.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/cast.rs:+1:9: +1:10\n+      let mut _0: ();\n+      let _1: u32;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/cast.rs:+1:9: +1:10\n-          let _2: u8;                      // in scope 1 at $DIR/cast.rs:+3:9: +3:10\n+          debug x => _1;\n+          let _2: u8;\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/cast.rs:+3:9: +3:10\n+              debug y => _2;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/cast.rs:+1:9: +1:10\n--         _1 = const 42_u8 as u32 (IntToInt); // scope 0 at $DIR/cast.rs:+1:13: +1:24\n-+         _1 = const 42_u32;               // scope 0 at $DIR/cast.rs:+1:13: +1:24\n-          StorageLive(_2);                 // scope 1 at $DIR/cast.rs:+3:9: +3:10\n--         _2 = const 42_u32 as u8 (IntToInt); // scope 1 at $DIR/cast.rs:+3:13: +3:24\n-+         _2 = const 42_u8;                // scope 1 at $DIR/cast.rs:+3:13: +3:24\n-          _0 = const ();                   // scope 0 at $DIR/cast.rs:+0:11: +4:2\n-          StorageDead(_2);                 // scope 1 at $DIR/cast.rs:+4:1: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/cast.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/cast.rs:+4:2: +4:2\n+          StorageLive(_1);\n+-         _1 = const 42_u8 as u32 (IntToInt);\n++         _1 = const 42_u32;\n+          StorageLive(_2);\n+-         _2 = const 42_u32 as u8 (IntToInt);\n++         _2 = const 42_u8;\n+          _0 = const ();\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "6daef87dd2c73a125268f23fc00a9006d17e31d6", "filename": "tests/mir-opt/const_prop/checked_add.main.ConstProp.panic-abort.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,27 +2,27 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/checked_add.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/checked_add.rs:+1:9: +1:10\n-      let mut _2: (u32, bool);             // in scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n+      let mut _0: ();\n+      let _1: u32;\n+      let mut _2: (u32, bool);\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/checked_add.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/checked_add.rs:+1:9: +1:10\n--         _2 = CheckedAdd(const 1_u32, const 1_u32); // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n--         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n-+         _2 = const (2_u32, false);       // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n+          StorageLive(_1);\n+-         _2 = CheckedAdd(const 1_u32, const 1_u32);\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> [success: bb1, unwind unreachable];\n++         _2 = const (2_u32, false);\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _1 = move (_2.0: u32);           // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n-+         _1 = const 2_u32;                // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n-          _0 = const ();                   // scope 0 at $DIR/checked_add.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/checked_add.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/checked_add.rs:+2:2: +2:2\n+-         _1 = move (_2.0: u32);\n++         _1 = const 2_u32;\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "175e2b51a37c68ac758517692074edeb84f854a9", "filename": "tests/mir-opt/const_prop/checked_add.main.ConstProp.panic-unwind.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,27 +2,27 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/checked_add.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/checked_add.rs:+1:9: +1:10\n-      let mut _2: (u32, bool);             // in scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n+      let mut _0: ();\n+      let _1: u32;\n+      let mut _2: (u32, bool);\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/checked_add.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/checked_add.rs:+1:9: +1:10\n--         _2 = CheckedAdd(const 1_u32, const 1_u32); // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n--         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n-+         _2 = const (2_u32, false);       // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n+          StorageLive(_1);\n+-         _2 = CheckedAdd(const 1_u32, const 1_u32);\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1;\n++         _2 = const (2_u32, false);\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1;\n       }\n   \n       bb1: {\n--         _1 = move (_2.0: u32);           // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n-+         _1 = const 2_u32;                // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n-          _0 = const ();                   // scope 0 at $DIR/checked_add.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/checked_add.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/checked_add.rs:+2:2: +2:2\n+-         _1 = move (_2.0: u32);\n++         _1 = const 2_u32;\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "bd1de7476a2cc6e0cc75b61f9daf57286fc883e2", "filename": "tests/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.panic-abort.diff", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,43 +2,37 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_fails_gracefully.rs:+0:11: +0:11\n-      let _1: usize;                       // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n-      let mut _2: *const i32;              // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:30\n-      let _3: &i32;                        // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n-      let _4: ();                          // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n-      let mut _5: usize;                   // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n+      let mut _0: ();\n+      let _1: usize;\n+      let mut _2: *const i32;\n+      let _3: &i32;\n+      let _4: ();\n+      let mut _5: usize;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n-          StorageLive(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:30\n-          StorageLive(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n-          _3 = const _;                    // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_fails_gracefully.rs:9:13: 9:16\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(FOO, [], None) }\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n-          _1 = move _2 as usize (PointerExposeAddress); // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:39\n-          StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:38: +2:39\n-          StorageDead(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:39: +2:40\n-          StorageLive(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n-          StorageLive(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n-          _5 = _1;                         // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n-          _4 = read(move _5) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_fails_gracefully.rs:10:5: 10:9\n-                                           // + literal: Const { ty: fn(usize) {read}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = const _;\n+          _2 = &raw const (*_3);\n+          _1 = move _2 as usize (PointerExposeAddress);\n+          StorageDead(_2);\n+          StorageDead(_3);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          _5 = _1;\n+          _4 = read(move _5) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageDead(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:11: +3:12\n-          StorageDead(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:12: +3:13\n-          _0 = const ();                   // scope 0 at $DIR/const_prop_fails_gracefully.rs:+0:11: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/const_prop_fails_gracefully.rs:+4:2: +4:2\n+          StorageDead(_5);\n+          StorageDead(_4);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "01ec24916c895a549e31be74fb4e3fac312b6eb0", "filename": "tests/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.panic-unwind.diff", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,43 +2,37 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_fails_gracefully.rs:+0:11: +0:11\n-      let _1: usize;                       // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n-      let mut _2: *const i32;              // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:30\n-      let _3: &i32;                        // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n-      let _4: ();                          // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n-      let mut _5: usize;                   // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n+      let mut _0: ();\n+      let _1: usize;\n+      let mut _2: *const i32;\n+      let _3: &i32;\n+      let _4: ();\n+      let mut _5: usize;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n-          StorageLive(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:30\n-          StorageLive(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n-          _3 = const _;                    // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_fails_gracefully.rs:9:13: 9:16\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(FOO, [], None) }\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n-          _1 = move _2 as usize (PointerExposeAddress); // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:39\n-          StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:38: +2:39\n-          StorageDead(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:39: +2:40\n-          StorageLive(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n-          StorageLive(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n-          _5 = _1;                         // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n-          _4 = read(move _5) -> bb1;       // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n-                                           // mir::Constant\n-                                           // + span: $DIR/const_prop_fails_gracefully.rs:10:5: 10:9\n-                                           // + literal: Const { ty: fn(usize) {read}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = const _;\n+          _2 = &raw const (*_3);\n+          _1 = move _2 as usize (PointerExposeAddress);\n+          StorageDead(_2);\n+          StorageDead(_3);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          _5 = _1;\n+          _4 = read(move _5) -> bb1;\n       }\n   \n       bb1: {\n-          StorageDead(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:11: +3:12\n-          StorageDead(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:12: +3:13\n-          _0 = const ();                   // scope 0 at $DIR/const_prop_fails_gracefully.rs:+0:11: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/const_prop_fails_gracefully.rs:+4:2: +4:2\n+          StorageDead(_5);\n+          StorageDead(_4);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "e77c09848b7b89fcfbfed85eb942214ca304d5bf", "filename": "tests/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.panic-abort.diff", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,30 +2,24 @@\n + // MIR for `hello` after ConstProp\n   \n   fn hello() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/control_flow_simplification.rs:+0:14: +0:14\n-      let mut _1: bool;                    // in scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n-      let mut _2: !;                       // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n+      let mut _0: ();\n+      let mut _1: bool;\n+      let mut _2: !;\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n-          _1 = const _;                    // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n--         switchInt(move _1) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n-+         switchInt(const false) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n+          StorageLive(_1);\n+          _1 = const _;\n+-         switchInt(move _1) -> [0: bb2, otherwise: bb1];\n++         switchInt(const false) -> [0: bb2, otherwise: bb1];\n       }\n   \n       bb1: {\n-          _2 = begin_panic::<&str>(const \"explicit panic\") -> unwind unreachable; // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+          _2 = begin_panic::<&str>(const \"explicit panic\") -> unwind unreachable;\n       }\n   \n       bb2: {\n-          StorageDead(_1);                 // scope 0 at $DIR/control_flow_simplification.rs:+3:5: +3:6\n-          return;                          // scope 0 at $DIR/control_flow_simplification.rs:+4:2: +4:2\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "4593ffaac2bd120258e4fc1599719efbda35e0a2", "filename": "tests/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.panic-unwind.diff", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,30 +2,24 @@\n + // MIR for `hello` after ConstProp\n   \n   fn hello() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/control_flow_simplification.rs:+0:14: +0:14\n-      let mut _1: bool;                    // in scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n-      let mut _2: !;                       // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n+      let mut _0: ();\n+      let mut _1: bool;\n+      let mut _2: !;\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n-          _1 = const _;                    // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n--         switchInt(move _1) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n-+         switchInt(const false) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n+          StorageLive(_1);\n+          _1 = const _;\n+-         switchInt(move _1) -> [0: bb2, otherwise: bb1];\n++         switchInt(const false) -> [0: bb2, otherwise: bb1];\n       }\n   \n       bb1: {\n-          _2 = begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+          _2 = begin_panic::<&str>(const \"explicit panic\");\n       }\n   \n       bb2: {\n-          StorageDead(_1);                 // scope 0 at $DIR/control_flow_simplification.rs:+3:5: +3:6\n-          return;                          // scope 0 at $DIR/control_flow_simplification.rs:+4:2: +4:2\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "2b90410f95d9690f4ae32c8a2a29e65075c7c0ed", "filename": "tests/mir-opt/const_prop/control_flow_simplification.hello.PreCodegen.before.panic-abort.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.panic-abort.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,9 +1,9 @@\n // MIR for `hello` before PreCodegen\n \n fn hello() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/control_flow_simplification.rs:+0:14: +0:14\n+    let mut _0: ();\n \n     bb0: {\n-        return;                          // scope 0 at $DIR/control_flow_simplification.rs:+4:2: +4:2\n+        return;\n     }\n }"}, {"sha": "2b90410f95d9690f4ae32c8a2a29e65075c7c0ed", "filename": "tests/mir-opt/const_prop/control_flow_simplification.hello.PreCodegen.before.panic-unwind.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.panic-unwind.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,9 +1,9 @@\n // MIR for `hello` before PreCodegen\n \n fn hello() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/control_flow_simplification.rs:+0:14: +0:14\n+    let mut _0: ();\n \n     bb0: {\n-        return;                          // scope 0 at $DIR/control_flow_simplification.rs:+4:2: +4:2\n+        return;\n     }\n }"}, {"sha": "e02e7f320b86567ad556c5a9180f2fe5f923c6b8", "filename": "tests/mir-opt/const_prop/discriminant.main.ConstProp.32bit.diff", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,54 +2,51 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n-      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:+1:34: +1:44\n-      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:+1:21: +1:31\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _2: i32;\n+      let mut _3: std::option::Option<bool>;\n+      let mut _4: isize;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n-          StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n--         _3 = Option::<bool>::Some(const true); // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n--         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n--         switchInt(move _4) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-+         _3 = const Option::<bool>::Some(true); // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-+                                          // mir::Constant\n-+                                          // + span: no-location\n-+                                          // + literal: Const { ty: Option<bool>, val: Value(Scalar(0x01)) }\n-+         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-+         switchInt(const 1_isize) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+-         _3 = Option::<bool>::Some(const true);\n+-         _4 = discriminant(_3);\n+-         switchInt(move _4) -> [1: bb1, otherwise: bb3];\n++         _3 = const Option::<bool>::Some(true);\n++         _4 = const 1_isize;\n++         switchInt(const 1_isize) -> [1: bb1, otherwise: bb3];\n       }\n   \n       bb1: {\n--         switchInt(((_3 as Some).0: bool)) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-+         switchInt(const true) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+-         switchInt(((_3 as Some).0: bool)) -> [0: bb3, otherwise: bb2];\n++         switchInt(const true) -> [0: bb3, otherwise: bb2];\n       }\n   \n       bb2: {\n-          _2 = const 42_i32;               // scope 2 at $DIR/discriminant.rs:+1:47: +1:49\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+          _2 = const 42_i32;\n+          goto -> bb4;\n       }\n   \n       bb3: {\n-          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:+1:59: +1:61\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+          _2 = const 10_i32;\n+          goto -> bb4;\n       }\n   \n       bb4: {\n-          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/discriminant.rs:+1:13: +1:68\n-          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:+1:67: +1:68\n-          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:+1:68: +1:69\n-          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/discriminant.rs:+2:2: +2:2\n+          _1 = Add(move _2, const 0_i32);\n+          StorageDead(_2);\n+          StorageDead(_3);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "e02e7f320b86567ad556c5a9180f2fe5f923c6b8", "filename": "tests/mir-opt/const_prop/discriminant.main.ConstProp.64bit.diff", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,54 +2,51 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n-      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:+1:34: +1:44\n-      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:+1:21: +1:31\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _2: i32;\n+      let mut _3: std::option::Option<bool>;\n+      let mut _4: isize;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n-          StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n--         _3 = Option::<bool>::Some(const true); // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n--         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n--         switchInt(move _4) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-+         _3 = const Option::<bool>::Some(true); // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n-+                                          // mir::Constant\n-+                                          // + span: no-location\n-+                                          // + literal: Const { ty: Option<bool>, val: Value(Scalar(0x01)) }\n-+         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-+         switchInt(const 1_isize) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+-         _3 = Option::<bool>::Some(const true);\n+-         _4 = discriminant(_3);\n+-         switchInt(move _4) -> [1: bb1, otherwise: bb3];\n++         _3 = const Option::<bool>::Some(true);\n++         _4 = const 1_isize;\n++         switchInt(const 1_isize) -> [1: bb1, otherwise: bb3];\n       }\n   \n       bb1: {\n--         switchInt(((_3 as Some).0: bool)) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-+         switchInt(const true) -> [0: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+-         switchInt(((_3 as Some).0: bool)) -> [0: bb3, otherwise: bb2];\n++         switchInt(const true) -> [0: bb3, otherwise: bb2];\n       }\n   \n       bb2: {\n-          _2 = const 42_i32;               // scope 2 at $DIR/discriminant.rs:+1:47: +1:49\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+          _2 = const 42_i32;\n+          goto -> bb4;\n       }\n   \n       bb3: {\n-          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:+1:59: +1:61\n-          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64\n+          _2 = const 10_i32;\n+          goto -> bb4;\n       }\n   \n       bb4: {\n-          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/discriminant.rs:+1:13: +1:68\n-          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:+1:67: +1:68\n-          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:+1:68: +1:69\n-          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/discriminant.rs:+2:2: +2:2\n+          _1 = Add(move _2, const 0_i32);\n+          StorageDead(_2);\n+          StorageDead(_3);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "eef9282c2cf0744513c9c6fb590bcd508704dc2e", "filename": "tests/mir-opt/const_prop/indirect.main.ConstProp.panic-abort.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,32 +2,32 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/indirect.rs:+0:11: +0:11\n-      let _1: u8;                          // in scope 0 at $DIR/indirect.rs:+1:9: +1:10\n-      let mut _2: u8;                      // in scope 0 at $DIR/indirect.rs:+1:13: +1:25\n-      let mut _3: (u8, bool);              // in scope 0 at $DIR/indirect.rs:+1:13: +1:29\n+      let mut _0: ();\n+      let _1: u8;\n+      let mut _2: u8;\n+      let mut _3: (u8, bool);\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/indirect.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/indirect.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n--         _2 = const 2_u32 as u8 (IntToInt); // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n--         _3 = CheckedAdd(_2, const 1_u8); // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n--         assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n-+         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n-+         _3 = const (3_u8, false);        // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n+          StorageLive(_1);\n+          StorageLive(_2);\n+-         _2 = const 2_u32 as u8 (IntToInt);\n+-         _3 = CheckedAdd(_2, const 1_u8);\n+-         assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> [success: bb1, unwind unreachable];\n++         _2 = const 2_u8;\n++         _3 = const (3_u8, false);\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _1 = move (_3.0: u8);            // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n-+         _1 = const 3_u8;                 // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n-          StorageDead(_2);                 // scope 0 at $DIR/indirect.rs:+1:28: +1:29\n-          _0 = const ();                   // scope 0 at $DIR/indirect.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/indirect.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/indirect.rs:+2:2: +2:2\n+-         _1 = move (_3.0: u8);\n++         _1 = const 3_u8;\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "affef00bb73278ab99c0d39142b66e65ed19f04b", "filename": "tests/mir-opt/const_prop/indirect.main.ConstProp.panic-unwind.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,32 +2,32 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/indirect.rs:+0:11: +0:11\n-      let _1: u8;                          // in scope 0 at $DIR/indirect.rs:+1:9: +1:10\n-      let mut _2: u8;                      // in scope 0 at $DIR/indirect.rs:+1:13: +1:25\n-      let mut _3: (u8, bool);              // in scope 0 at $DIR/indirect.rs:+1:13: +1:29\n+      let mut _0: ();\n+      let _1: u8;\n+      let mut _2: u8;\n+      let mut _3: (u8, bool);\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/indirect.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/indirect.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n--         _2 = const 2_u32 as u8 (IntToInt); // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n--         _3 = CheckedAdd(_2, const 1_u8); // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n--         assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n-+         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n-+         _3 = const (3_u8, false);        // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n+          StorageLive(_1);\n+          StorageLive(_2);\n+-         _2 = const 2_u32 as u8 (IntToInt);\n+-         _3 = CheckedAdd(_2, const 1_u8);\n+-         assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1;\n++         _2 = const 2_u8;\n++         _3 = const (3_u8, false);\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1;\n       }\n   \n       bb1: {\n--         _1 = move (_3.0: u8);            // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n-+         _1 = const 3_u8;                 // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n-          StorageDead(_2);                 // scope 0 at $DIR/indirect.rs:+1:28: +1:29\n-          _0 = const ();                   // scope 0 at $DIR/indirect.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/indirect.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/indirect.rs:+2:2: +2:2\n+-         _1 = move (_3.0: u8);\n++         _1 = const 3_u8;\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "e0467e3fcff00848c440d65c70213611a3475b2d", "filename": "tests/mir-opt/const_prop/inherit_overflow.main.ConstProp.panic-abort.diff", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inherit_overflow.rs:+0:11: +0:11\n-      let mut _1: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-      let mut _2: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-      let mut _3: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+      let mut _0: ();\n+      let mut _1: u8;\n+      let mut _2: u8;\n+      let mut _3: u8;\n       scope 1 {\n       }\n-      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:9:13: 9:47\n-          debug self => _2;                // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          debug other => _3;               // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          let mut _4: (u8, bool);          // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+      scope 2 (inlined <u8 as Add>::add) {\n+          debug self => _2;\n+          debug other => _3;\n+          let mut _4: (u8, bool);\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageLive(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          _2 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageLive(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          _3 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n--         _4 = CheckedAdd(_2, _3);         // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n--         assert(!move (_4.1: bool), \"attempt to compute `{} + {}`, which would overflow\", _2, _3) -> [success: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-+         _4 = const (0_u8, true);         // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-+         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", _2, _3) -> [success: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = const u8::MAX;\n+          StorageLive(_3);\n+          _3 = const 1_u8;\n+-         _4 = CheckedAdd(_2, _3);\n+-         assert(!move (_4.1: bool), \"attempt to compute `{} + {}`, which would overflow\", _2, _3) -> [success: bb1, unwind unreachable];\n++         _4 = const (0_u8, true);\n++         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", _2, _3) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _1 = move (_4.0: u8);            // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-+         _1 = const 0_u8;                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          StorageDead(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageDead(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageDead(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:47: +3:48\n-          _0 = const ();                   // scope 0 at $DIR/inherit_overflow.rs:+0:11: +4:2\n-          return;                          // scope 0 at $DIR/inherit_overflow.rs:+4:2: +4:2\n+-         _1 = move (_4.0: u8);\n++         _1 = const 0_u8;\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "9dae4b404aad227623e38e1a4312fed0e6ae55cb", "filename": "tests/mir-opt/const_prop/inherit_overflow.main.ConstProp.panic-unwind.diff", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inherit_overflow.rs:+0:11: +0:11\n-      let mut _1: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-      let mut _2: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-      let mut _3: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+      let mut _0: ();\n+      let mut _1: u8;\n+      let mut _2: u8;\n+      let mut _3: u8;\n       scope 1 {\n       }\n-      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:9:13: 9:47\n-          debug self => _2;                // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          debug other => _3;               // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          let mut _4: (u8, bool);          // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+      scope 2 (inlined <u8 as Add>::add) {\n+          debug self => _2;\n+          debug other => _3;\n+          let mut _4: (u8, bool);\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageLive(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          _2 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageLive(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          _3 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n--         _4 = CheckedAdd(_2, _3);         // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n--         assert(!move (_4.1: bool), \"attempt to compute `{} + {}`, which would overflow\", _2, _3) -> bb1; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-+         _4 = const (0_u8, true);         // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-+         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", _2, _3) -> bb1; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = const u8::MAX;\n+          StorageLive(_3);\n+          _3 = const 1_u8;\n+-         _4 = CheckedAdd(_2, _3);\n+-         assert(!move (_4.1: bool), \"attempt to compute `{} + {}`, which would overflow\", _2, _3) -> bb1;\n++         _4 = const (0_u8, true);\n++         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", _2, _3) -> bb1;\n       }\n   \n       bb1: {\n--         _1 = move (_4.0: u8);            // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-+         _1 = const 0_u8;                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          StorageDead(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageDead(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageDead(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:47: +3:48\n-          _0 = const ();                   // scope 0 at $DIR/inherit_overflow.rs:+0:11: +4:2\n-          return;                          // scope 0 at $DIR/inherit_overflow.rs:+4:2: +4:2\n+-         _1 = move (_4.0: u8);\n++         _1 = const 0_u8;\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "0c9d1f4a38a4ccd0c0fd3006c002bb0de12a3803", "filename": "tests/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 44, "deletions": 47, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,24 +2,24 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:+0:11: +0:11\n-      let _1: char;                        // in scope 0 at $DIR/invalid_constant.rs:+6:9: +6:22\n-      let mut _2: main::InvalidChar;       // in scope 0 at $DIR/invalid_constant.rs:+6:34: +6:63\n-      let mut _4: E;                       // in scope 0 at $DIR/invalid_constant.rs:+13:25: +13:59\n-      let mut _5: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:+13:34: +13:55\n-      let mut _7: Empty;                   // in scope 0 at $DIR/invalid_constant.rs:+20:35: +20:73\n-      let mut _8: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:+20:44: +20:65\n+      let mut _0: ();\n+      let _1: char;\n+      let mut _2: main::InvalidChar;\n+      let mut _4: E;\n+      let mut _5: main::InvalidTag;\n+      let mut _7: Empty;\n+      let mut _8: main::NoVariants;\n       scope 1 {\n-          debug _invalid_char => _1;       // in scope 1 at $DIR/invalid_constant.rs:+6:9: +6:22\n-          let _3: [E; 1];                  // in scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n+          debug _invalid_char => _1;\n+          let _3: [E; 1];\n           scope 3 {\n-              debug _invalid_tag => _3;    // in scope 3 at $DIR/invalid_constant.rs:+13:9: +13:21\n-              let _6: [Empty; 1];          // in scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n+              debug _invalid_tag => _3;\n+              let _6: [Empty; 1];\n               scope 5 {\n-                  debug _enum_without_variants => const [ZeroSized: Empty]; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n-                  let _9: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n+                  debug _enum_without_variants => const [ZeroSized: Empty];\n+                  let _9: main::Str<\"\ufffd\ufffd\ufffd\">;\n                   scope 7 {\n-                      debug _non_utf8_str => const Str::<\"\ufffd\ufffd\ufffd\">; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n+                      debug _non_utf8_str => const Str::<\"\ufffd\ufffd\ufffd\">;\n                   }\n               }\n               scope 6 {\n@@ -32,39 +32,36 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:+6:9: +6:22\n-          StorageLive(_2);                 // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n-          _2 = InvalidChar { int: const 1114113_u32 }; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n--         _1 = (_2.1: char);               // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:67\n-+         _1 = const {transmute(0x00110001): char}; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:67\n-          StorageDead(_2);                 // scope 0 at $DIR/invalid_constant.rs:+6:69: +6:70\n-          StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n-          StorageLive(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:25: +13:59\n-          StorageLive(_5);                 // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n-          _5 = InvalidTag { int: const 4_u32 }; // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n--         _4 = (_5.1: E);                  // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n-+         _4 = const Scalar(0x00000004): E; // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n-+                                          // mir::Constant\n-+                                          // + span: no-location\n-+                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n-          _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n-          StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:59: +13:60\n-          StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:+13:60: +13:61\n-          nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n-          nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:35: +20:73\n-          StorageLive(_8);                 // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n-          _8 = NoVariants { int: const 0_u32 }; // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n-          nop;                             // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:71\n-          nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:34: +20:74\n-          nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:73: +20:74\n-          StorageDead(_8);                 // scope 3 at $DIR/invalid_constant.rs:+20:74: +20:75\n-          nop;                             // scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n-          nop;                             // scope 0 at $DIR/invalid_constant.rs:+0:11: +27:2\n-          nop;                             // scope 5 at $DIR/invalid_constant.rs:+27:1: +27:2\n-          nop;                             // scope 3 at $DIR/invalid_constant.rs:+27:1: +27:2\n-          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:+27:1: +27:2\n-          StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:+27:1: +27:2\n-          return;                          // scope 0 at $DIR/invalid_constant.rs:+27:2: +27:2\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = InvalidChar { int: const 1114113_u32 };\n+-         _1 = (_2.1: char);\n++         _1 = const {transmute(0x00110001): char};\n+          StorageDead(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          _5 = InvalidTag { int: const 4_u32 };\n+-         _4 = (_5.1: E);\n++         _4 = const Scalar(0x00000004): E;\n+          _3 = [move _4];\n+          StorageDead(_4);\n+          StorageDead(_5);\n+          nop;\n+          nop;\n+          StorageLive(_8);\n+          _8 = NoVariants { int: const 0_u32 };\n+          nop;\n+          nop;\n+          nop;\n+          StorageDead(_8);\n+          nop;\n+          nop;\n+          nop;\n+          nop;\n+          StorageDead(_3);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "455c2375eff9a046d142434c90fb6d60bbf6770b", "filename": "tests/mir-opt/const_prop/invalid_constant.main.RemoveZsts.diff", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.RemoveZsts.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.RemoveZsts.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.RemoveZsts.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,26 +2,26 @@\n + // MIR for `main` after RemoveZsts\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:+0:11: +0:11\n-      let _1: char;                        // in scope 0 at $DIR/invalid_constant.rs:+6:9: +6:22\n-      let mut _2: main::InvalidChar;       // in scope 0 at $DIR/invalid_constant.rs:+6:34: +6:63\n-      let mut _4: E;                       // in scope 0 at $DIR/invalid_constant.rs:+13:25: +13:59\n-      let mut _5: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:+13:34: +13:55\n-      let mut _7: Empty;                   // in scope 0 at $DIR/invalid_constant.rs:+20:35: +20:73\n-      let mut _8: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:+20:44: +20:65\n+      let mut _0: ();\n+      let _1: char;\n+      let mut _2: main::InvalidChar;\n+      let mut _4: E;\n+      let mut _5: main::InvalidTag;\n+      let mut _7: Empty;\n+      let mut _8: main::NoVariants;\n       scope 1 {\n-          debug _invalid_char => _1;       // in scope 1 at $DIR/invalid_constant.rs:+6:9: +6:22\n-          let _3: [E; 1];                  // in scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n+          debug _invalid_char => _1;\n+          let _3: [E; 1];\n           scope 3 {\n-              debug _invalid_tag => _3;    // in scope 3 at $DIR/invalid_constant.rs:+13:9: +13:21\n-              let _6: [Empty; 1];          // in scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n+              debug _invalid_tag => _3;\n+              let _6: [Empty; 1];\n               scope 5 {\n--                 debug _enum_without_variants => _6; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n-+                 debug _enum_without_variants => const [ZeroSized: Empty]; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n-                  let _9: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n+-                 debug _enum_without_variants => _6;\n++                 debug _enum_without_variants => const [ZeroSized: Empty];\n+                  let _9: main::Str<\"\ufffd\ufffd\ufffd\">;\n                   scope 7 {\n--                     debug _non_utf8_str => _9; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n-+                     debug _non_utf8_str => const Str::<\"\ufffd\ufffd\ufffd\">; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n+-                     debug _non_utf8_str => _9;\n++                     debug _non_utf8_str => const Str::<\"\ufffd\ufffd\ufffd\">;\n                   }\n               }\n               scope 6 {\n@@ -34,43 +34,43 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:+6:9: +6:22\n-          StorageLive(_2);                 // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n-          _2 = InvalidChar { int: const 1114113_u32 }; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n-          _1 = (_2.1: char);               // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:67\n-          StorageDead(_2);                 // scope 0 at $DIR/invalid_constant.rs:+6:69: +6:70\n-          StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n-          StorageLive(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:25: +13:59\n-          StorageLive(_5);                 // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n-          _5 = InvalidTag { int: const 4_u32 }; // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n-          _4 = (_5.1: E);                  // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n-          _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n-          StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:59: +13:60\n-          StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:+13:60: +13:61\n--         StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n--         StorageLive(_7);                 // scope 3 at $DIR/invalid_constant.rs:+20:35: +20:73\n-+         nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n-+         nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:35: +20:73\n-          StorageLive(_8);                 // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n-          _8 = NoVariants { int: const 0_u32 }; // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n--         _7 = (_8.1: Empty);              // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:71\n--         _6 = [move _7];                  // scope 3 at $DIR/invalid_constant.rs:+20:34: +20:74\n--         StorageDead(_7);                 // scope 3 at $DIR/invalid_constant.rs:+20:73: +20:74\n-+         nop;                             // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:71\n-+         nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:34: +20:74\n-+         nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:73: +20:74\n-          StorageDead(_8);                 // scope 3 at $DIR/invalid_constant.rs:+20:74: +20:75\n--         StorageLive(_9);                 // scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n--         _0 = const ();                   // scope 0 at $DIR/invalid_constant.rs:+0:11: +27:2\n--         StorageDead(_9);                 // scope 5 at $DIR/invalid_constant.rs:+27:1: +27:2\n--         StorageDead(_6);                 // scope 3 at $DIR/invalid_constant.rs:+27:1: +27:2\n-+         nop;                             // scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n-+         nop;                             // scope 0 at $DIR/invalid_constant.rs:+0:11: +27:2\n-+         nop;                             // scope 5 at $DIR/invalid_constant.rs:+27:1: +27:2\n-+         nop;                             // scope 3 at $DIR/invalid_constant.rs:+27:1: +27:2\n-          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:+27:1: +27:2\n-          StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:+27:1: +27:2\n-          return;                          // scope 0 at $DIR/invalid_constant.rs:+27:2: +27:2\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = InvalidChar { int: const 1114113_u32 };\n+          _1 = (_2.1: char);\n+          StorageDead(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          _5 = InvalidTag { int: const 4_u32 };\n+          _4 = (_5.1: E);\n+          _3 = [move _4];\n+          StorageDead(_4);\n+          StorageDead(_5);\n+-         StorageLive(_6);\n+-         StorageLive(_7);\n++         nop;\n++         nop;\n+          StorageLive(_8);\n+          _8 = NoVariants { int: const 0_u32 };\n+-         _7 = (_8.1: Empty);\n+-         _6 = [move _7];\n+-         StorageDead(_7);\n++         nop;\n++         nop;\n++         nop;\n+          StorageDead(_8);\n+-         StorageLive(_9);\n+-         _0 = const ();\n+-         StorageDead(_9);\n+-         StorageDead(_6);\n++         nop;\n++         nop;\n++         nop;\n++         nop;\n+          StorageDead(_3);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "516f13586d3ff3cba020ade71a681ca5c69d001c", "filename": "tests/mir-opt/const_prop/issue_66971.main.ConstProp.panic-abort.diff", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,22 +2,19 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue_66971.rs:+0:11: +0:11\n-      let _1: ();                          // in scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n-      let mut _2: ((), u8, u8);            // in scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n+      let mut _0: ();\n+      let _1: ();\n+      let mut _2: ((), u8, u8);\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-          _2 = (const (), const 0_u8, const 0_u8); // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-          _1 = encode(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue_66971.rs:18:5: 18:11\n-                                           // + literal: Const { ty: fn(((), u8, u8)) {encode}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          _2 = (const (), const 0_u8, const 0_u8);\n+          _1 = encode(move _2) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/issue_66971.rs:+1:22: +1:23\n-          return;                          // scope 0 at $DIR/issue_66971.rs:+2:2: +2:2\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "e83c18735b6127a0aaedee462e75a152d8fb11af", "filename": "tests/mir-opt/const_prop/issue_66971.main.ConstProp.panic-unwind.diff", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,22 +2,19 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue_66971.rs:+0:11: +0:11\n-      let _1: ();                          // in scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n-      let mut _2: ((), u8, u8);            // in scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n+      let mut _0: ();\n+      let _1: ();\n+      let mut _2: ((), u8, u8);\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-          _2 = (const (), const 0_u8, const 0_u8); // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-          _1 = encode(move _2) -> bb1;     // scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue_66971.rs:18:5: 18:11\n-                                           // + literal: Const { ty: fn(((), u8, u8)) {encode}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          _2 = (const (), const 0_u8, const 0_u8);\n+          _1 = encode(move _2) -> bb1;\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/issue_66971.rs:+1:22: +1:23\n-          return;                          // scope 0 at $DIR/issue_66971.rs:+2:2: +2:2\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "96b4093726c88c7172b71ef4c62b19d9850f736d", "filename": "tests/mir-opt/const_prop/issue_67019.main.ConstProp.panic-abort.diff", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,27 +2,24 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue_67019.rs:+0:11: +0:11\n-      let _1: ();                          // in scope 0 at $DIR/issue_67019.rs:+1:5: +1:20\n-      let mut _2: ((u8, u8),);             // in scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n-      let mut _3: (u8, u8);                // in scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n+      let mut _0: ();\n+      let _1: ();\n+      let mut _2: ((u8, u8),);\n+      let mut _3: (u8, u8);\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n-          StorageLive(_3);                 // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n--         _3 = (const 1_u8, const 2_u8);   // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n-+         _3 = const (1_u8, 2_u8);         // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n-          _2 = (move _3,);                 // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n-          StorageDead(_3);                 // scope 0 at $DIR/issue_67019.rs:+1:18: +1:19\n-          _1 = test(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/issue_67019.rs:+1:5: +1:20\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue_67019.rs:13:5: 13:9\n-                                           // + literal: Const { ty: fn(((u8, u8),)) {test}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          StorageLive(_3);\n+-         _3 = (const 1_u8, const 2_u8);\n++         _3 = const (1_u8, 2_u8);\n+          _2 = (move _3,);\n+          StorageDead(_3);\n+          _1 = test(move _2) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/issue_67019.rs:+1:19: +1:20\n-          return;                          // scope 0 at $DIR/issue_67019.rs:+2:2: +2:2\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "cbbc2582973a7e703dc705915a6b6cd7d182a583", "filename": "tests/mir-opt/const_prop/issue_67019.main.ConstProp.panic-unwind.diff", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,27 +2,24 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue_67019.rs:+0:11: +0:11\n-      let _1: ();                          // in scope 0 at $DIR/issue_67019.rs:+1:5: +1:20\n-      let mut _2: ((u8, u8),);             // in scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n-      let mut _3: (u8, u8);                // in scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n+      let mut _0: ();\n+      let _1: ();\n+      let mut _2: ((u8, u8),);\n+      let mut _3: (u8, u8);\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n-          StorageLive(_3);                 // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n--         _3 = (const 1_u8, const 2_u8);   // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n-+         _3 = const (1_u8, 2_u8);         // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n-          _2 = (move _3,);                 // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n-          StorageDead(_3);                 // scope 0 at $DIR/issue_67019.rs:+1:18: +1:19\n-          _1 = test(move _2) -> bb1;       // scope 0 at $DIR/issue_67019.rs:+1:5: +1:20\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue_67019.rs:13:5: 13:9\n-                                           // + literal: Const { ty: fn(((u8, u8),)) {test}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          StorageLive(_3);\n+-         _3 = (const 1_u8, const 2_u8);\n++         _3 = const (1_u8, 2_u8);\n+          _2 = (move _3,);\n+          StorageDead(_3);\n+          _1 = test(move _2) -> bb1;\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/issue_67019.rs:+1:19: +1:20\n-          return;                          // scope 0 at $DIR/issue_67019.rs:+2:2: +2:2\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "61ba52fb0d6fb393f46c807d1432b3184a84420f", "filename": "tests/mir-opt/const_prop/large_array_index.main.ConstProp.32bit.panic-abort.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:+0:11: +0:11\n-      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n-      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      let mut _0: ();\n+      let _1: u8;\n+      let mut _2: [u8; 5000];\n+      let _3: usize;\n+      let mut _4: usize;\n+      let mut _5: bool;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:+2:9: +2:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n-          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n--         _4 = Len(_2);                    // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = [const 0_u8; 5000];\n+          StorageLive(_3);\n+          _3 = const 2_usize;\n+-         _4 = Len(_2);\n+-         _5 = Lt(_3, _4);\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable];\n++         _4 = const 5000_usize;\n++         _5 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         _1 = _2[2 of 3];                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n-          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n-          _0 = const ();                   // scope 0 at $DIR/large_array_index.rs:+0:11: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/large_array_index.rs:+3:2: +3:2\n+-         _1 = _2[_3];\n++         _1 = _2[2 of 3];\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "be245b424c14cd433a15cd5bd2eb5b242539a6e3", "filename": "tests/mir-opt/const_prop/large_array_index.main.ConstProp.32bit.panic-unwind.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:+0:11: +0:11\n-      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n-      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      let mut _0: ();\n+      let _1: u8;\n+      let mut _2: [u8; 5000];\n+      let _3: usize;\n+      let mut _4: usize;\n+      let mut _5: bool;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:+2:9: +2:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n-          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n--         _4 = Len(_2);                    // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = [const 0_u8; 5000];\n+          StorageLive(_3);\n+          _3 = const 2_usize;\n+-         _4 = Len(_2);\n+-         _5 = Lt(_3, _4);\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1;\n++         _4 = const 5000_usize;\n++         _5 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1;\n       }\n   \n       bb1: {\n--         _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         _1 = _2[2 of 3];                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n-          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n-          _0 = const ();                   // scope 0 at $DIR/large_array_index.rs:+0:11: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/large_array_index.rs:+3:2: +3:2\n+-         _1 = _2[_3];\n++         _1 = _2[2 of 3];\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "61ba52fb0d6fb393f46c807d1432b3184a84420f", "filename": "tests/mir-opt/const_prop/large_array_index.main.ConstProp.64bit.panic-abort.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:+0:11: +0:11\n-      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n-      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      let mut _0: ();\n+      let _1: u8;\n+      let mut _2: [u8; 5000];\n+      let _3: usize;\n+      let mut _4: usize;\n+      let mut _5: bool;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:+2:9: +2:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n-          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n--         _4 = Len(_2);                    // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = [const 0_u8; 5000];\n+          StorageLive(_3);\n+          _3 = const 2_usize;\n+-         _4 = Len(_2);\n+-         _5 = Lt(_3, _4);\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable];\n++         _4 = const 5000_usize;\n++         _5 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         _1 = _2[2 of 3];                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n-          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n-          _0 = const ();                   // scope 0 at $DIR/large_array_index.rs:+0:11: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/large_array_index.rs:+3:2: +3:2\n+-         _1 = _2[_3];\n++         _1 = _2[2 of 3];\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "be245b424c14cd433a15cd5bd2eb5b242539a6e3", "filename": "tests/mir-opt/const_prop/large_array_index.main.ConstProp.64bit.panic-unwind.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:+0:11: +0:11\n-      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n-      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      let mut _0: ();\n+      let _1: u8;\n+      let mut _2: [u8; 5000];\n+      let _3: usize;\n+      let mut _4: usize;\n+      let mut _5: bool;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:+2:9: +2:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n-          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n-          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n--         _4 = Len(_2);                    // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = [const 0_u8; 5000];\n+          StorageLive(_3);\n+          _3 = const 2_usize;\n+-         _4 = Len(_2);\n+-         _5 = Lt(_3, _4);\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1;\n++         _4 = const 5000_usize;\n++         _5 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1;\n       }\n   \n       bb1: {\n--         _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         _1 = _2[2 of 3];                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n-          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n-          _0 = const ();                   // scope 0 at $DIR/large_array_index.rs:+0:11: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/large_array_index.rs:+3:2: +3:2\n+-         _1 = _2[_3];\n++         _1 = _2[2 of 3];\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "73b1da064237a714421a60a701e22bb550ea5449", "filename": "tests/mir-opt/const_prop/mult_by_zero.test.ConstProp.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,17 +2,17 @@\n + // MIR for `test` after ConstProp\n   \n   fn test(_1: i32) -> i32 {\n-      debug x => _1;                       // in scope 0 at $DIR/mult_by_zero.rs:+0:9: +0:10\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/mult_by_zero.rs:+0:21: +0:24\n-      let mut _2: i32;                     // in scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n+      debug x => _1;\n+      let mut _0: i32;\n+      let mut _2: i32;\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n-          _2 = _1;                         // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n--         _0 = Mul(move _2, const 0_i32);  // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n-+         _0 = const 0_i32;                // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n-          StorageDead(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:7: +1:8\n-          return;                          // scope 0 at $DIR/mult_by_zero.rs:+2:2: +2:2\n+          StorageLive(_2);\n+          _2 = _1;\n+-         _0 = Mul(move _2, const 0_i32);\n++         _0 = const 0_i32;\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "ad8d9ddb0743f07f02804d2f312c926aac0ac080", "filename": "tests/mir-opt/const_prop/mutable_variable.main.ConstProp.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,27 +2,27 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/mutable_variable.rs:+1:9: +1:14\n+      let mut _0: ();\n+      let mut _1: i32;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable.rs:+1:9: +1:14\n-          let _2: i32;                     // in scope 1 at $DIR/mutable_variable.rs:+3:9: +3:10\n+          debug x => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/mutable_variable.rs:+3:9: +3:10\n+              debug y => _2;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable.rs:+1:9: +1:14\n-          _1 = const 42_i32;               // scope 0 at $DIR/mutable_variable.rs:+1:17: +1:19\n-          _1 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+2:5: +2:11\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable.rs:+3:9: +3:10\n--         _2 = _1;                         // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n-+         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n-          _0 = const ();                   // scope 0 at $DIR/mutable_variable.rs:+0:11: +4:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable.rs:+4:1: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/mutable_variable.rs:+4:2: +4:2\n+          StorageLive(_1);\n+          _1 = const 42_i32;\n+          _1 = const 99_i32;\n+          StorageLive(_2);\n+-         _2 = _1;\n++         _2 = const 99_i32;\n+          _0 = const ();\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "0f118c7f59fdff8a028dbddbd5156da306e79be6", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate.main.ConstProp.diff", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,28 +2,28 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +0:11\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+      let mut _0: ();\n+      let mut _1: (i32, i32);\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n-          let _2: (i32, i32);              // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+          debug x => _1;\n+          let _2: (i32, i32);\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+              debug y => _2;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n--         _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n-+         _1 = const (42_i32, 43_i32);     // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n-          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n--         _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n-+         _2 = const (42_i32, 99_i32);     // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n-          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +4:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:2: +4:2\n+          StorageLive(_1);\n+-         _1 = (const 42_i32, const 43_i32);\n++         _1 = const (42_i32, 43_i32);\n+          (_1.1: i32) = const 99_i32;\n+          StorageLive(_2);\n+-         _2 = _1;\n++         _2 = const (42_i32, 99_i32);\n+          _0 = const ();\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "106e27f8f27681fd0f4508195336751bf2ac75f1", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.main.ConstProp.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,33 +2,33 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+0:11: +0:11\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:9: +1:14\n+      let mut _0: ();\n+      let mut _1: (i32, i32);\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:9: +1:14\n-          let _2: &mut (i32, i32);         // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n+          debug x => _1;\n+          let _2: &mut (i32, i32);\n           scope 2 {\n-              debug z => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n-              let _3: (i32, i32);          // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+              debug z => _2;\n+              let _3: (i32, i32);\n               scope 3 {\n-                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+                  debug y => _3;\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:9: +1:14\n-          _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+1:17: +1:25\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n-          _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:13: +2:19\n-          ((*_2).1: i32) = const 99_i32;   // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+3:5: +3:13\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n-          _3 = _1;                         // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n-          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+0:11: +5:2\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:2: +5:2\n+          StorageLive(_1);\n+          _1 = (const 42_i32, const 43_i32);\n+          StorageLive(_2);\n+          _2 = &mut _1;\n+          ((*_2).1: i32) = const 99_i32;\n+          StorageLive(_3);\n+          _3 = _1;\n+          _0 = const ();\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "34288c62fee120804ffafbbfa844a9a0da7371e2", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_partial_read.main.ConstProp.panic-abort.diff", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,34 +2,31 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +0:11\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n+      let mut _0: ();\n+      let mut _1: (i32, i32);\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n-          let _2: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n+          debug x => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n+              debug y => _2;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n-          _1 = foo() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:29: +1:34\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:6:29: 6:32\n-                                           // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = foo() -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+2:5: +2:13\n-          (_1.0: i32) = const 42_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+3:5: +3:13\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n--         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n-+         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n-          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +5:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:2: +5:2\n+          (_1.1: i32) = const 99_i32;\n+          (_1.0: i32) = const 42_i32;\n+          StorageLive(_2);\n+-         _2 = (_1.1: i32);\n++         _2 = const 99_i32;\n+          _0 = const ();\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "50006f5f5b5a1a2d9dc2c1381e2518a90b5ea0b6", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_partial_read.main.ConstProp.panic-unwind.diff", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,34 +2,31 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +0:11\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n+      let mut _0: ();\n+      let mut _1: (i32, i32);\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n-          let _2: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n+          debug x => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n+              debug y => _2;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n-          _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:29: +1:34\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:6:29: 6:32\n-                                           // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = foo() -> bb1;\n       }\n   \n       bb1: {\n-          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+2:5: +2:13\n-          (_1.0: i32) = const 42_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+3:5: +3:13\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n--         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n-+         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n-          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +5:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:2: +5:2\n+          (_1.1: i32) = const 99_i32;\n+          (_1.0: i32) = const 42_i32;\n+          StorageLive(_2);\n+-         _2 = (_1.1: i32);\n++         _2 = const 99_i32;\n+          _0 = const ();\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "ac26f8ef4aeffe979fc6aee8cda36a73210afb95", "filename": "tests/mir-opt/const_prop/mutable_variable_no_prop.main.ConstProp.diff", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,43 +2,40 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +0:11\n-      let mut _1: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n-      let _2: ();                          // in scope 0 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n-      let mut _3: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-      let mut _4: *mut u32;                // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+      let mut _0: ();\n+      let mut _1: u32;\n+      let _2: ();\n+      let mut _3: u32;\n+      let mut _4: *mut u32;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n-          let _5: u32;                     // in scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n+          debug x => _1;\n+          let _5: u32;\n           scope 2 {\n           }\n           scope 3 {\n-              debug y => _5;               // in scope 3 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n+              debug y => _5;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n-          _1 = const 42_u32;               // scope 0 at $DIR/mutable_variable_no_prop.rs:+1:17: +1:19\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-          _4 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n-                                           // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc1)) }\n-          _3 = (*_4);                      // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-          _1 = move _3;                    // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:9: +3:19\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:18: +3:19\n-          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:19: +3:20\n-          _2 = const ();                   // scope 2 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+4:5: +4:6\n-          StorageLive(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n-          _5 = _1;                         // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:13: +5:14\n-          _0 = const ();                   // scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +6:2\n-          StorageDead(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:2: +6:2\n+          StorageLive(_1);\n+          _1 = const 42_u32;\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          _4 = const {alloc1: *mut u32};\n+          _3 = (*_4);\n+          _1 = move _3;\n+          StorageDead(_3);\n+          StorageDead(_4);\n+          _2 = const ();\n+          StorageDead(_2);\n+          StorageLive(_5);\n+          _5 = _1;\n+          _0 = const ();\n+          StorageDead(_5);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "a85dcf9c7edf7589c888394b55d81a66c35356e4", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.panic-abort.diff", "status": "modified", "additions": 30, "deletions": 33, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,52 +2,49 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _3: i32;\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-          let mut _2: (i32, i32);          // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          debug a => _1;\n+          let mut _2: (i32, i32);\n           scope 2 {\n-              debug x => _2;               // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+              debug x => _2;\n+              let _4: i32;\n               scope 3 {\n-                  debug y => _4;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-                  let _5: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                  debug y => _4;\n+                  let _5: i32;\n                   scope 4 {\n-                      debug z => _5;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                      debug z => _5;\n                   }\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-          _1 = foo() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:13: +1:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_unprop_assign.rs:6:13: 6:16\n-                                           // + literal: Const { ty: fn() -> i32 {foo}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = foo() -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n--         _2 = (const 1_i32, const 2_i32); // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-+         _2 = const (1_i32, 2_i32);       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          (_2.1: i32) = move _3;           // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-          _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n-          StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n--         _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n-+         _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n-          _0 = const ();                   // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +6:2\n-          StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:2: +6:2\n+          StorageLive(_2);\n+-         _2 = (const 1_i32, const 2_i32);\n++         _2 = const (1_i32, 2_i32);\n+          StorageLive(_3);\n+          _3 = _1;\n+          (_2.1: i32) = move _3;\n+          StorageDead(_3);\n+          StorageLive(_4);\n+          _4 = (_2.1: i32);\n+          StorageLive(_5);\n+-         _5 = (_2.0: i32);\n++         _5 = const 1_i32;\n+          _0 = const ();\n+          StorageDead(_5);\n+          StorageDead(_4);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "69a0c3e2429e45699aeae1bc510a41b8bc921616", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.panic-unwind.diff", "status": "modified", "additions": 30, "deletions": 33, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,52 +2,49 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _3: i32;\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-          let mut _2: (i32, i32);          // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          debug a => _1;\n+          let mut _2: (i32, i32);\n           scope 2 {\n-              debug x => _2;               // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+              debug x => _2;\n+              let _4: i32;\n               scope 3 {\n-                  debug y => _4;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-                  let _5: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                  debug y => _4;\n+                  let _5: i32;\n                   scope 4 {\n-                      debug z => _5;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                      debug z => _5;\n                   }\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-          _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:13: +1:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/mutable_variable_unprop_assign.rs:6:13: 6:16\n-                                           // + literal: Const { ty: fn() -> i32 {foo}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = foo() -> bb1;\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n--         _2 = (const 1_i32, const 2_i32); // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-+         _2 = const (1_i32, 2_i32);       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          (_2.1: i32) = move _3;           // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-          _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n-          StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n--         _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n-+         _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n-          _0 = const ();                   // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +6:2\n-          StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:2: +6:2\n+          StorageLive(_2);\n+-         _2 = (const 1_i32, const 2_i32);\n++         _2 = const (1_i32, 2_i32);\n+          StorageLive(_3);\n+          _3 = _1;\n+          (_2.1: i32) = move _3;\n+          StorageDead(_3);\n+          StorageLive(_4);\n+          _4 = (_2.1: i32);\n+          StorageLive(_5);\n+-         _5 = (_2.0: i32);\n++         _5 = const 1_i32;\n+          _0 = const ();\n+          StorageDead(_5);\n+          StorageDead(_4);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "b510cecd9e07ac51da84a507516be957a893afe1", "filename": "tests/mir-opt/const_prop/offset_of.concrete.ConstProp.diff", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.concrete.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.concrete.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.concrete.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,43 +2,43 @@\n + // MIR for `concrete` after ConstProp\n   \n   fn concrete() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/offset_of.rs:+0:15: +0:15\n-      let _1: usize;                       // in scope 0 at $DIR/offset_of.rs:+1:9: +1:10\n+      let mut _0: ();\n+      let _1: usize;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/offset_of.rs:+1:9: +1:10\n-          let _2: usize;                   // in scope 1 at $DIR/offset_of.rs:+2:9: +2:10\n+          debug x => _1;\n+          let _2: usize;\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/offset_of.rs:+2:9: +2:10\n-              let _3: usize;               // in scope 2 at $DIR/offset_of.rs:+3:9: +3:11\n+              debug y => _2;\n+              let _3: usize;\n               scope 3 {\n-                  debug z0 => _3;          // in scope 3 at $DIR/offset_of.rs:+3:9: +3:11\n-                  let _4: usize;           // in scope 3 at $DIR/offset_of.rs:+4:9: +4:11\n+                  debug z0 => _3;\n+                  let _4: usize;\n                   scope 4 {\n-                      debug z1 => _4;      // in scope 4 at $DIR/offset_of.rs:+4:9: +4:11\n+                      debug z1 => _4;\n                   }\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/offset_of.rs:+1:9: +1:10\n--         _1 = OffsetOf(Alpha, [0]);       // scope 0 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-+         _1 = const 4_usize;              // scope 0 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-          StorageLive(_2);                 // scope 1 at $DIR/offset_of.rs:+2:9: +2:10\n--         _2 = OffsetOf(Alpha, [1]);       // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-+         _2 = const 0_usize;              // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-          StorageLive(_3);                 // scope 2 at $DIR/offset_of.rs:+3:9: +3:11\n--         _3 = OffsetOf(Alpha, [2, 0]);    // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-+         _3 = const 2_usize;              // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-          StorageLive(_4);                 // scope 3 at $DIR/offset_of.rs:+4:9: +4:11\n--         _4 = OffsetOf(Alpha, [2, 1]);    // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-+         _4 = const 3_usize;              // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-          _0 = const ();                   // scope 0 at $DIR/offset_of.rs:+0:15: +5:2\n-          StorageDead(_4);                 // scope 3 at $DIR/offset_of.rs:+5:1: +5:2\n-          StorageDead(_3);                 // scope 2 at $DIR/offset_of.rs:+5:1: +5:2\n-          StorageDead(_2);                 // scope 1 at $DIR/offset_of.rs:+5:1: +5:2\n-          StorageDead(_1);                 // scope 0 at $DIR/offset_of.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/offset_of.rs:+5:2: +5:2\n+          StorageLive(_1);\n+-         _1 = OffsetOf(Alpha, [0]);\n++         _1 = const 4_usize;\n+          StorageLive(_2);\n+-         _2 = OffsetOf(Alpha, [1]);\n++         _2 = const 0_usize;\n+          StorageLive(_3);\n+-         _3 = OffsetOf(Alpha, [2, 0]);\n++         _3 = const 2_usize;\n+          StorageLive(_4);\n+-         _4 = OffsetOf(Alpha, [2, 1]);\n++         _4 = const 3_usize;\n+          _0 = const ();\n+          StorageDead(_4);\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "8e0adb427550915feb5d8fb4179dec9841196e3b", "filename": "tests/mir-opt/const_prop/offset_of.generic.ConstProp.diff", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.generic.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.generic.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.generic.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,39 +2,39 @@\n + // MIR for `generic` after ConstProp\n   \n   fn generic() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/offset_of.rs:+0:17: +0:17\n-      let _1: usize;                       // in scope 0 at $DIR/offset_of.rs:+1:9: +1:11\n+      let mut _0: ();\n+      let _1: usize;\n       scope 1 {\n-          debug gx => _1;                  // in scope 1 at $DIR/offset_of.rs:+1:9: +1:11\n-          let _2: usize;                   // in scope 1 at $DIR/offset_of.rs:+2:9: +2:11\n+          debug gx => _1;\n+          let _2: usize;\n           scope 2 {\n-              debug gy => _2;              // in scope 2 at $DIR/offset_of.rs:+2:9: +2:11\n-              let _3: usize;               // in scope 2 at $DIR/offset_of.rs:+3:9: +3:11\n+              debug gy => _2;\n+              let _3: usize;\n               scope 3 {\n-                  debug dx => _3;          // in scope 3 at $DIR/offset_of.rs:+3:9: +3:11\n-                  let _4: usize;           // in scope 3 at $DIR/offset_of.rs:+4:9: +4:11\n+                  debug dx => _3;\n+                  let _4: usize;\n                   scope 4 {\n-                      debug dy => _4;      // in scope 4 at $DIR/offset_of.rs:+4:9: +4:11\n+                      debug dy => _4;\n                   }\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/offset_of.rs:+1:9: +1:11\n-          _1 = OffsetOf(Gamma<T>, [0]);    // scope 0 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-          StorageLive(_2);                 // scope 1 at $DIR/offset_of.rs:+2:9: +2:11\n-          _2 = OffsetOf(Gamma<T>, [1]);    // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-          StorageLive(_3);                 // scope 2 at $DIR/offset_of.rs:+3:9: +3:11\n-          _3 = OffsetOf(Delta<T>, [1]);    // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-          StorageLive(_4);                 // scope 3 at $DIR/offset_of.rs:+4:9: +4:11\n-          _4 = OffsetOf(Delta<T>, [2]);    // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-          _0 = const ();                   // scope 0 at $DIR/offset_of.rs:+0:17: +5:2\n-          StorageDead(_4);                 // scope 3 at $DIR/offset_of.rs:+5:1: +5:2\n-          StorageDead(_3);                 // scope 2 at $DIR/offset_of.rs:+5:1: +5:2\n-          StorageDead(_2);                 // scope 1 at $DIR/offset_of.rs:+5:1: +5:2\n-          StorageDead(_1);                 // scope 0 at $DIR/offset_of.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/offset_of.rs:+5:2: +5:2\n+          StorageLive(_1);\n+          _1 = OffsetOf(Gamma<T>, [0]);\n+          StorageLive(_2);\n+          _2 = OffsetOf(Gamma<T>, [1]);\n+          StorageLive(_3);\n+          _3 = OffsetOf(Delta<T>, [1]);\n+          StorageLive(_4);\n+          _4 = OffsetOf(Delta<T>, [2]);\n+          _0 = const ();\n+          StorageDead(_4);\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "29c455f35b35ab47ce61e6efc7d89e66842806d0", "filename": "tests/mir-opt/const_prop/read_immutable_static.main.ConstProp.diff", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,43 +2,37 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/read_immutable_static.rs:+0:11: +0:11\n-      let _1: u8;                          // in scope 0 at $DIR/read_immutable_static.rs:+1:9: +1:10\n-      let mut _2: u8;                      // in scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n-      let mut _3: &u8;                     // in scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n-      let mut _4: u8;                      // in scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n-      let mut _5: &u8;                     // in scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n+      let mut _0: ();\n+      let _1: u8;\n+      let mut _2: u8;\n+      let mut _3: &u8;\n+      let mut _4: u8;\n+      let mut _5: &u8;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/read_immutable_static.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/read_immutable_static.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n-          StorageLive(_3);                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n-          _3 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n-                                           // mir::Constant\n-                                           // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n-                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n--         _2 = (*_3);                      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n-+         _2 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n-          StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n-          StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n-          _5 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n-                                           // mir::Constant\n-                                           // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n-                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n--         _4 = (*_5);                      // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n--         _1 = Add(move _2, move _4);      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:22\n-+         _4 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n-+         _1 = const 4_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:22\n-          StorageDead(_4);                 // scope 0 at $DIR/read_immutable_static.rs:+1:21: +1:22\n-          StorageDead(_2);                 // scope 0 at $DIR/read_immutable_static.rs:+1:21: +1:22\n-          StorageDead(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:22: +1:23\n-          StorageDead(_3);                 // scope 0 at $DIR/read_immutable_static.rs:+1:22: +1:23\n-          _0 = const ();                   // scope 0 at $DIR/read_immutable_static.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/read_immutable_static.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/read_immutable_static.rs:+2:2: +2:2\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = const {alloc1: &u8};\n+-         _2 = (*_3);\n++         _2 = const 2_u8;\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          _5 = const {alloc1: &u8};\n+-         _4 = (*_5);\n+-         _1 = Add(move _2, move _4);\n++         _4 = const 2_u8;\n++         _1 = const 4_u8;\n+          StorageDead(_4);\n+          StorageDead(_2);\n+          StorageDead(_5);\n+          StorageDead(_3);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "6b897a88181b8b56f59b13d67d840ee9e70e78b8", "filename": "tests/mir-opt/const_prop/ref_deref.main.ConstProp.diff", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,25 +2,22 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n-      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-      let _3: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n-      let mut _4: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _2: &i32;\n+      let _3: i32;\n+      let mut _4: &i32;\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-          _4 = const _;                    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref_deref.rs:5:6: 5:10\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-          _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n-          StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n-          _0 = const ();                   // scope 0 at $DIR/ref_deref.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/ref_deref.rs:+2:2: +2:2\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _4 = const _;\n+          _2 = &(*_4);\n+          _1 = (*_2);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "7f616166573cdf5fb045ebf440d86e594119997f", "filename": "tests/mir-opt/const_prop/ref_deref_project.main.ConstProp.diff", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,25 +2,22 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref_project.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n-      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-      let _3: (i32, i32);                  // in scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n-      let mut _4: &(i32, i32);             // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _2: &i32;\n+      let _3: (i32, i32);\n+      let mut _4: &(i32, i32);\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n-          StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-          _4 = const _;                    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }\n-          _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-          _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n-          StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n-          _0 = const ();                   // scope 0 at $DIR/ref_deref_project.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/ref_deref_project.rs:+2:2: +2:2\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _4 = const _;\n+          _2 = &((*_4).1: i32);\n+          _1 = (*_2);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "533a92f78a50db9db58dbf4e0002a84c6be6a44b", "filename": "tests/mir-opt/const_prop/reify_fn_ptr.main.ConstProp.diff", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,28 +2,25 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/reify_fn_ptr.rs:+0:11: +0:11\n-      let mut _1: *const fn();             // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n-      let mut _2: usize;                   // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n-      let mut _3: fn();                    // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n+      let mut _0: ();\n+      let mut _1: *const fn();\n+      let mut _2: usize;\n+      let mut _3: fn();\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n-          StorageLive(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n-          StorageLive(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n-          _3 = main as fn() (Pointer(ReifyFnPointer)); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n-                                           // mir::Constant\n-                                           // + span: $DIR/reify_fn_ptr.rs:5:13: 5:17\n-                                           // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n-          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n-          StorageDead(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:25: +1:26\n-          _1 = move _2 as *const fn() (PointerFromExposedAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n-          StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:40: +1:41\n-          StorageDead(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:41: +1:42\n-          _0 = const ();                   // scope 0 at $DIR/reify_fn_ptr.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/reify_fn_ptr.rs:+2:2: +2:2\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = main as fn() (Pointer(ReifyFnPointer));\n+          _2 = move _3 as usize (PointerExposeAddress);\n+          StorageDead(_3);\n+          _1 = move _2 as *const fn() (PointerFromExposedAddress);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "e095dd01da674477f1c26bdaaae05e7ab7f01d78", "filename": "tests/mir-opt/const_prop/repeat.main.ConstProp.32bit.panic-abort.diff", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,43 +2,43 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/repeat.rs:+1:9: +1:10\n-      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _0: ();\n+      let _1: u32;\n+      let mut _2: u32;\n+      let mut _3: [u32; 8];\n+      let _4: usize;\n+      let mut _5: usize;\n+      let mut _6: bool;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n--         _5 = Len(_3);                    // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = [const 42_u32; 8];\n+          StorageLive(_4);\n+          _4 = const 2_usize;\n+-         _5 = Len(_3);\n+-         _6 = Lt(_4, _5);\n+-         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind unreachable];\n++         _5 = const 8_usize;\n++         _6 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n-+         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n-          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n-          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n-          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n-          _0 = const ();                   // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n+-         _2 = _3[_4];\n+-         _1 = Add(move _2, const 0_u32);\n++         _2 = const 42_u32;\n++         _1 = const 42_u32;\n+          StorageDead(_2);\n+          StorageDead(_4);\n+          StorageDead(_3);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "f94708605eef84b787d5cb3a0e1d998bbc71a072", "filename": "tests/mir-opt/const_prop/repeat.main.ConstProp.32bit.panic-unwind.diff", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,43 +2,43 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/repeat.rs:+1:9: +1:10\n-      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _0: ();\n+      let _1: u32;\n+      let mut _2: u32;\n+      let mut _3: [u32; 8];\n+      let _4: usize;\n+      let mut _5: usize;\n+      let mut _6: bool;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n--         _5 = Len(_3);                    // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = [const 42_u32; 8];\n+          StorageLive(_4);\n+          _4 = const 2_usize;\n+-         _5 = Len(_3);\n+-         _6 = Lt(_4, _5);\n+-         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1;\n++         _5 = const 8_usize;\n++         _6 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1;\n       }\n   \n       bb1: {\n--         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n-+         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n-          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n-          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n-          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n-          _0 = const ();                   // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n+-         _2 = _3[_4];\n+-         _1 = Add(move _2, const 0_u32);\n++         _2 = const 42_u32;\n++         _1 = const 42_u32;\n+          StorageDead(_2);\n+          StorageDead(_4);\n+          StorageDead(_3);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "e095dd01da674477f1c26bdaaae05e7ab7f01d78", "filename": "tests/mir-opt/const_prop/repeat.main.ConstProp.64bit.panic-abort.diff", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,43 +2,43 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/repeat.rs:+1:9: +1:10\n-      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _0: ();\n+      let _1: u32;\n+      let mut _2: u32;\n+      let mut _3: [u32; 8];\n+      let _4: usize;\n+      let mut _5: usize;\n+      let mut _6: bool;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n--         _5 = Len(_3);                    // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = [const 42_u32; 8];\n+          StorageLive(_4);\n+          _4 = const 2_usize;\n+-         _5 = Len(_3);\n+-         _6 = Lt(_4, _5);\n+-         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind unreachable];\n++         _5 = const 8_usize;\n++         _6 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n-+         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n-          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n-          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n-          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n-          _0 = const ();                   // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n+-         _2 = _3[_4];\n+-         _1 = Add(move _2, const 0_u32);\n++         _2 = const 42_u32;\n++         _1 = const 42_u32;\n+          StorageDead(_2);\n+          StorageDead(_4);\n+          StorageDead(_3);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "f94708605eef84b787d5cb3a0e1d998bbc71a072", "filename": "tests/mir-opt/const_prop/repeat.main.ConstProp.64bit.panic-unwind.diff", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,43 +2,43 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/repeat.rs:+1:9: +1:10\n-      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _0: ();\n+      let _1: u32;\n+      let mut _2: u32;\n+      let mut _3: [u32; 8];\n+      let _4: usize;\n+      let mut _5: usize;\n+      let mut _6: bool;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n-          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n--         _5 = Len(_3);                    // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = [const 42_u32; 8];\n+          StorageLive(_4);\n+          _4 = const 2_usize;\n+-         _5 = Len(_3);\n+-         _6 = Lt(_4, _5);\n+-         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1;\n++         _5 = const 8_usize;\n++         _6 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1;\n       }\n   \n       bb1: {\n--         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n-+         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n-          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n-          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n-          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n-          _0 = const ();                   // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n+-         _2 = _3[_4];\n+-         _1 = Add(move _2, const 0_u32);\n++         _2 = const 42_u32;\n++         _1 = const 42_u32;\n+          StorageDead(_2);\n+          StorageDead(_4);\n+          StorageDead(_3);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "f3b30e0dcde4698552db15b7f8b690a5888cee11", "filename": "tests/mir-opt/const_prop/return_place.add.ConstProp.panic-abort.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,20 +2,20 @@\n + // MIR for `add` after ConstProp\n   \n   fn add() -> u32 {\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:+0:13: +0:16\n-      let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+      let mut _0: u32;\n+      let mut _1: (u32, bool);\n   \n       bb0: {\n--         _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n--         assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-+         _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+-         _1 = CheckedAdd(const 2_u32, const 2_u32);\n+-         assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> [success: bb1, unwind unreachable];\n++         _1 = const (4_u32, false);\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _0 = move (_1.0: u32);           // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-+         _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-          return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n+-         _0 = move (_1.0: u32);\n++         _0 = const 4_u32;\n+          return;\n       }\n   }\n   "}, {"sha": "f89e9dd5b635652efca374e3b342b0d923955f7c", "filename": "tests/mir-opt/const_prop/return_place.add.ConstProp.panic-unwind.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,20 +2,20 @@\n + // MIR for `add` after ConstProp\n   \n   fn add() -> u32 {\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:+0:13: +0:16\n-      let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+      let mut _0: u32;\n+      let mut _1: (u32, bool);\n   \n       bb0: {\n--         _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n--         assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-+         _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+-         _1 = CheckedAdd(const 2_u32, const 2_u32);\n+-         assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1;\n++         _1 = const (4_u32, false);\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1;\n       }\n   \n       bb1: {\n--         _0 = move (_1.0: u32);           // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-+         _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-          return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n+-         _0 = move (_1.0: u32);\n++         _0 = const 4_u32;\n+          return;\n       }\n   }\n   "}, {"sha": "c8f3f641a6d759f11d7c38860e8de8be6ba2ce62", "filename": "tests/mir-opt/const_prop/return_place.add.PreCodegen.before.panic-abort.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.panic-abort.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,16 +1,16 @@\n // MIR for `add` before PreCodegen\n \n fn add() -> u32 {\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:+0:13: +0:16\n-    let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+    let mut _0: u32;\n+    let mut _1: (u32, bool);\n \n     bb0: {\n-        _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-        assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+        _1 = const (4_u32, false);\n+        assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> [success: bb1, unwind unreachable];\n     }\n \n     bb1: {\n-        _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-        return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n+        _0 = const 4_u32;\n+        return;\n     }\n }"}, {"sha": "148f16c7ee2da025d27c92b8cfadcb2f1c1b6b7a", "filename": "tests/mir-opt/const_prop/return_place.add.PreCodegen.before.panic-unwind.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.panic-unwind.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,16 +1,16 @@\n // MIR for `add` before PreCodegen\n \n fn add() -> u32 {\n-    let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:+0:13: +0:16\n-    let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+    let mut _0: u32;\n+    let mut _1: (u32, bool);\n \n     bb0: {\n-        _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-        assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+        _1 = const (4_u32, false);\n+        assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1;\n     }\n \n     bb1: {\n-        _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-        return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n+        _0 = const 4_u32;\n+        return;\n     }\n }"}, {"sha": "0677295d0785c2137a54dcc0b3a83ba37ad4f517", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.panic-abort.diff", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,33 +2,30 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/scalar_literal_propagation.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n-      let _2: ();                          // in scope 0 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-      let mut _3: u32;                     // in scope 0 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+      let mut _0: ();\n+      let _1: u32;\n+      let _2: ();\n+      let mut _3: u32;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n-          _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-          StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n--         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n-+         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n-          _2 = consume(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-                                           // mir::Constant\n-                                           // + span: $DIR/scalar_literal_propagation.rs:6:5: 6:12\n-                                           // + literal: Const { ty: fn(u32) {consume}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = const 1_u32;\n+          StorageLive(_2);\n+          StorageLive(_3);\n+-         _3 = _1;\n++         _3 = const 1_u32;\n+          _2 = consume(move _3) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:14: +2:15\n-          StorageDead(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:15: +2:16\n-          _0 = const ();                   // scope 0 at $DIR/scalar_literal_propagation.rs:+0:11: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/scalar_literal_propagation.rs:+3:2: +3:2\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "d7d6e8e435e240309e632516c81c1b581874568e", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.panic-unwind.diff", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,33 +2,30 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/scalar_literal_propagation.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n-      let _2: ();                          // in scope 0 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-      let mut _3: u32;                     // in scope 0 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+      let mut _0: ();\n+      let _1: u32;\n+      let _2: ();\n+      let mut _3: u32;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n-          _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-          StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n--         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n-+         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n-          _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-                                           // mir::Constant\n-                                           // + span: $DIR/scalar_literal_propagation.rs:6:5: 6:12\n-                                           // + literal: Const { ty: fn(u32) {consume}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = const 1_u32;\n+          StorageLive(_2);\n+          StorageLive(_3);\n+-         _3 = _1;\n++         _3 = const 1_u32;\n+          _2 = consume(move _3) -> bb1;\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:14: +2:15\n-          StorageDead(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:15: +2:16\n-          _0 = const ();                   // scope 0 at $DIR/scalar_literal_propagation.rs:+0:11: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/scalar_literal_propagation.rs:+3:2: +3:2\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "2f64a185106588c1374ee9306bb84cf33de15bf3", "filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.32bit.panic-abort.diff", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,49 +2,46 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n-      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:+1:7: +1:19\n-      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let mut _0: ();\n+      let _1: u32;\n+      let mut _2: &[u32];\n+      let mut _3: &[u32; 3];\n+      let _4: &[u32; 3];\n+      let _5: [u32; 3];\n+      let _6: usize;\n+      let mut _7: usize;\n+      let mut _8: bool;\n+      let mut _9: &[u32; 3];\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-                                           // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:8:6: 8:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n--         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          _9 = const _;\n+          _4 = _9;\n+          _3 = _4;\n+          _2 = move _3 as &[u32] (Pointer(Unsize));\n+          StorageDead(_3);\n+          StorageLive(_6);\n+          _6 = const 1_usize;\n+-         _7 = Len((*_2));\n+-         _8 = Lt(_6, _7);\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable];\n++         _7 = const 3_usize;\n++         _8 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          _0 = const ();                   // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n+-         _1 = (*_2)[_6];\n++         _1 = const 2_u32;\n+          StorageDead(_6);\n+          StorageDead(_4);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "b07ec0ad50251a4000eb8462c7ccfd79cb2c3937", "filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.32bit.panic-unwind.diff", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,49 +2,46 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n-      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:+1:7: +1:19\n-      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let mut _0: ();\n+      let _1: u32;\n+      let mut _2: &[u32];\n+      let mut _3: &[u32; 3];\n+      let _4: &[u32; 3];\n+      let _5: [u32; 3];\n+      let _6: usize;\n+      let mut _7: usize;\n+      let mut _8: bool;\n+      let mut _9: &[u32; 3];\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-                                           // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:8:6: 8:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n--         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          _9 = const _;\n+          _4 = _9;\n+          _3 = _4;\n+          _2 = move _3 as &[u32] (Pointer(Unsize));\n+          StorageDead(_3);\n+          StorageLive(_6);\n+          _6 = const 1_usize;\n+-         _7 = Len((*_2));\n+-         _8 = Lt(_6, _7);\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1;\n++         _7 = const 3_usize;\n++         _8 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1;\n       }\n   \n       bb1: {\n--         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          _0 = const ();                   // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n+-         _1 = (*_2)[_6];\n++         _1 = const 2_u32;\n+          StorageDead(_6);\n+          StorageDead(_4);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "2f64a185106588c1374ee9306bb84cf33de15bf3", "filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.64bit.panic-abort.diff", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,49 +2,46 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n-      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:+1:7: +1:19\n-      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let mut _0: ();\n+      let _1: u32;\n+      let mut _2: &[u32];\n+      let mut _3: &[u32; 3];\n+      let _4: &[u32; 3];\n+      let _5: [u32; 3];\n+      let _6: usize;\n+      let mut _7: usize;\n+      let mut _8: bool;\n+      let mut _9: &[u32; 3];\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-                                           // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:8:6: 8:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n--         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          _9 = const _;\n+          _4 = _9;\n+          _3 = _4;\n+          _2 = move _3 as &[u32] (Pointer(Unsize));\n+          StorageDead(_3);\n+          StorageLive(_6);\n+          _6 = const 1_usize;\n+-         _7 = Len((*_2));\n+-         _8 = Lt(_6, _7);\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable];\n++         _7 = const 3_usize;\n++         _8 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          _0 = const ();                   // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n+-         _1 = (*_2)[_6];\n++         _1 = const 2_u32;\n+          StorageDead(_6);\n+          StorageDead(_4);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "b07ec0ad50251a4000eb8462c7ccfd79cb2c3937", "filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.64bit.panic-unwind.diff", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,49 +2,46 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:+0:11: +0:11\n-      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n-      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:+1:7: +1:19\n-      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let mut _0: ();\n+      let _1: u32;\n+      let mut _2: &[u32];\n+      let mut _3: &[u32; 3];\n+      let _4: &[u32; 3];\n+      let _5: [u32; 3];\n+      let _6: usize;\n+      let mut _7: usize;\n+      let mut _8: bool;\n+      let mut _9: &[u32; 3];\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-                                           // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:8:6: 8:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n--         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          _9 = const _;\n+          _4 = _9;\n+          _3 = _4;\n+          _2 = move _3 as &[u32] (Pointer(Unsize));\n+          StorageDead(_3);\n+          StorageLive(_6);\n+          _6 = const 1_usize;\n+-         _7 = Len((*_2));\n+-         _8 = Lt(_6, _7);\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1;\n++         _7 = const 3_usize;\n++         _8 = const true;\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1;\n       }\n   \n       bb1: {\n--         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          _0 = const ();                   // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n+-         _1 = (*_2)[_6];\n++         _1 = const 2_u32;\n+          StorageDead(_6);\n+          StorageDead(_4);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "508cc15732c0c4bf3085c7d51b005476fe35979a", "filename": "tests/mir-opt/const_prop/switch_int.main.ConstProp.panic-abort.diff", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,33 +2,27 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+      let mut _0: ();\n+      let mut _1: i32;\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n-          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n--         switchInt(_1) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n-+         switchInt(const 1_i32) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n+          StorageLive(_1);\n+          _1 = const 1_i32;\n+-         switchInt(_1) -> [1: bb2, otherwise: bb1];\n++         switchInt(const 1_i32) -> [1: bb2, otherwise: bb1];\n       }\n   \n       bb1: {\n-          _0 = foo(const -1_i32) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:12:14: 12:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+          _0 = foo(const -1_i32) -> [return: bb3, unwind unreachable];\n       }\n   \n       bb2: {\n-          _0 = foo(const 0_i32) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:11:14: 11:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+          _0 = foo(const 0_i32) -> [return: bb3, unwind unreachable];\n       }\n   \n       bb3: {\n-          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/switch_int.rs:+5:2: +5:2\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "02dca4d3dea56c1f27b74456e6c38b9c1d58d875", "filename": "tests/mir-opt/const_prop/switch_int.main.ConstProp.panic-unwind.diff", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,33 +2,27 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+      let mut _0: ();\n+      let mut _1: i32;\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n-          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n--         switchInt(_1) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n-+         switchInt(const 1_i32) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n+          StorageLive(_1);\n+          _1 = const 1_i32;\n+-         switchInt(_1) -> [1: bb2, otherwise: bb1];\n++         switchInt(const 1_i32) -> [1: bb2, otherwise: bb1];\n       }\n   \n       bb1: {\n-          _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:12:14: 12:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+          _0 = foo(const -1_i32) -> bb3;\n       }\n   \n       bb2: {\n-          _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:11:14: 11:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+          _0 = foo(const 0_i32) -> bb3;\n       }\n   \n       bb3: {\n-          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/switch_int.rs:+5:2: +5:2\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "ced5e500d946b82f92114f8a0fe5aed74c79e05d", "filename": "tests/mir-opt/const_prop/switch_int.main.SimplifyConstCondition-after-const-prop.panic-abort.diff", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,33 +2,27 @@\n + // MIR for `main` after SimplifyConstCondition-after-const-prop\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+      let mut _0: ();\n+      let mut _1: i32;\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n-          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n--         switchInt(const 1_i32) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n-+         goto -> bb2;                     // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n+          StorageLive(_1);\n+          _1 = const 1_i32;\n+-         switchInt(const 1_i32) -> [1: bb2, otherwise: bb1];\n++         goto -> bb2;\n       }\n   \n       bb1: {\n-          _0 = foo(const -1_i32) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:12:14: 12:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+          _0 = foo(const -1_i32) -> [return: bb3, unwind unreachable];\n       }\n   \n       bb2: {\n-          _0 = foo(const 0_i32) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:11:14: 11:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+          _0 = foo(const 0_i32) -> [return: bb3, unwind unreachable];\n       }\n   \n       bb3: {\n-          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/switch_int.rs:+5:2: +5:2\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "72ce94e142950d97768e20c69665df28460a7b0e", "filename": "tests/mir-opt/const_prop/switch_int.main.SimplifyConstCondition-after-const-prop.panic-unwind.diff", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,33 +2,27 @@\n + // MIR for `main` after SimplifyConstCondition-after-const-prop\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+      let mut _0: ();\n+      let mut _1: i32;\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n-          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n--         switchInt(const 1_i32) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n-+         goto -> bb2;                     // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n+          StorageLive(_1);\n+          _1 = const 1_i32;\n+-         switchInt(const 1_i32) -> [1: bb2, otherwise: bb1];\n++         goto -> bb2;\n       }\n   \n       bb1: {\n-          _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:12:14: 12:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+          _0 = foo(const -1_i32) -> bb3;\n       }\n   \n       bb2: {\n-          _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n-                                           // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:11:14: 11:17\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+          _0 = foo(const 0_i32) -> bb3;\n       }\n   \n       bb3: {\n-          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/switch_int.rs:+5:2: +5:2\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "febfebc85347ce33ec3fc4442db55030773a038f", "filename": "tests/mir-opt/const_prop/transmute.from_char.ConstProp.32bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.from_char.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.from_char.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.from_char.ConstProp.32bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,14 +2,14 @@\n + // MIR for `from_char` after ConstProp\n   \n   fn from_char() -> i32 {\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/transmute.rs:+0:23: +0:26\n+      let mut _0: i32;\n       scope 1 {\n       }\n   \n       bb0: {\n--         _0 = const 'R' as i32 (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:28\n-+         _0 = const 82_i32;               // scope 1 at $DIR/transmute.rs:+1:14: +1:28\n-          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+-         _0 = const 'R' as i32 (Transmute);\n++         _0 = const 82_i32;\n+          return;\n       }\n   }\n   "}, {"sha": "febfebc85347ce33ec3fc4442db55030773a038f", "filename": "tests/mir-opt/const_prop/transmute.from_char.ConstProp.64bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.from_char.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.from_char.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.from_char.ConstProp.64bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,14 +2,14 @@\n + // MIR for `from_char` after ConstProp\n   \n   fn from_char() -> i32 {\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/transmute.rs:+0:23: +0:26\n+      let mut _0: i32;\n       scope 1 {\n       }\n   \n       bb0: {\n--         _0 = const 'R' as i32 (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:28\n-+         _0 = const 82_i32;               // scope 1 at $DIR/transmute.rs:+1:14: +1:28\n-          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+-         _0 = const 'R' as i32 (Transmute);\n++         _0 = const 82_i32;\n+          return;\n       }\n   }\n   "}, {"sha": "38a1eb5a15b5770df83a4a170433706203be5d7e", "filename": "tests/mir-opt/const_prop/transmute.invalid_bool.ConstProp.32bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_bool.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_bool.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_bool.ConstProp.32bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,14 +2,14 @@\n + // MIR for `invalid_bool` after ConstProp\n   \n   fn invalid_bool() -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/transmute.rs:+0:33: +0:37\n+      let mut _0: bool;\n       scope 1 {\n       }\n   \n       bb0: {\n--         _0 = const -1_i8 as bool (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:30\n-+         _0 = const {transmute(0xff): bool}; // scope 1 at $DIR/transmute.rs:+1:14: +1:30\n-          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+-         _0 = const -1_i8 as bool (Transmute);\n++         _0 = const {transmute(0xff): bool};\n+          return;\n       }\n   }\n   "}, {"sha": "38a1eb5a15b5770df83a4a170433706203be5d7e", "filename": "tests/mir-opt/const_prop/transmute.invalid_bool.ConstProp.64bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_bool.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_bool.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_bool.ConstProp.64bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,14 +2,14 @@\n + // MIR for `invalid_bool` after ConstProp\n   \n   fn invalid_bool() -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/transmute.rs:+0:33: +0:37\n+      let mut _0: bool;\n       scope 1 {\n       }\n   \n       bb0: {\n--         _0 = const -1_i8 as bool (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:30\n-+         _0 = const {transmute(0xff): bool}; // scope 1 at $DIR/transmute.rs:+1:14: +1:30\n-          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+-         _0 = const -1_i8 as bool (Transmute);\n++         _0 = const {transmute(0xff): bool};\n+          return;\n       }\n   }\n   "}, {"sha": "2c0998f77eaee6de443185c1f55256c5884bbe56", "filename": "tests/mir-opt/const_prop/transmute.invalid_char.ConstProp.32bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_char.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_char.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_char.ConstProp.32bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,14 +2,14 @@\n + // MIR for `invalid_char` after ConstProp\n   \n   fn invalid_char() -> char {\n-      let mut _0: char;                    // return place in scope 0 at $DIR/transmute.rs:+0:33: +0:37\n+      let mut _0: char;\n       scope 1 {\n       }\n   \n       bb0: {\n--         _0 = const _ as char (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n-+         _0 = const {transmute(0x7fffffff): char}; // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n-          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+-         _0 = const _ as char (Transmute);\n++         _0 = const {transmute(0x7fffffff): char};\n+          return;\n       }\n   }\n   "}, {"sha": "2c0998f77eaee6de443185c1f55256c5884bbe56", "filename": "tests/mir-opt/const_prop/transmute.invalid_char.ConstProp.64bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_char.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_char.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_char.ConstProp.64bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,14 +2,14 @@\n + // MIR for `invalid_char` after ConstProp\n   \n   fn invalid_char() -> char {\n-      let mut _0: char;                    // return place in scope 0 at $DIR/transmute.rs:+0:33: +0:37\n+      let mut _0: char;\n       scope 1 {\n       }\n   \n       bb0: {\n--         _0 = const _ as char (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n-+         _0 = const {transmute(0x7fffffff): char}; // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n-          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+-         _0 = const _ as char (Transmute);\n++         _0 = const {transmute(0x7fffffff): char};\n+          return;\n       }\n   }\n   "}, {"sha": "7ac7bed8a5f70af47c00d1ab0e1f0b3d018356d2", "filename": "tests/mir-opt/const_prop/transmute.less_as_i8.ConstProp.32bit.diff", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.less_as_i8.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.less_as_i8.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.less_as_i8.ConstProp.32bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,22 +2,19 @@\n + // MIR for `less_as_i8` after ConstProp\n   \n   fn less_as_i8() -> i8 {\n-      let mut _0: i8;                      // return place in scope 0 at $DIR/transmute.rs:+0:24: +0:26\n-      let mut _1: std::cmp::Ordering;      // in scope 0 at $DIR/transmute.rs:+1:24: +1:48\n+      let mut _0: i8;\n+      let mut _1: std::cmp::Ordering;\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 1 at $DIR/transmute.rs:+1:24: +1:48\n--         _1 = Less;                       // scope 1 at $DIR/transmute.rs:+1:24: +1:48\n--         _0 = move _1 as i8 (Transmute);  // scope 1 at $DIR/transmute.rs:+1:14: +1:49\n-+         _1 = const Less;                 // scope 1 at $DIR/transmute.rs:+1:24: +1:48\n-+                                          // mir::Constant\n-+                                          // + span: no-location\n-+                                          // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0xff)) }\n-+         _0 = const -1_i8;                // scope 1 at $DIR/transmute.rs:+1:14: +1:49\n-          StorageDead(_1);                 // scope 1 at $DIR/transmute.rs:+1:48: +1:49\n-          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+          StorageLive(_1);\n+-         _1 = Less;\n+-         _0 = move _1 as i8 (Transmute);\n++         _1 = const Less;\n++         _0 = const -1_i8;\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "7ac7bed8a5f70af47c00d1ab0e1f0b3d018356d2", "filename": "tests/mir-opt/const_prop/transmute.less_as_i8.ConstProp.64bit.diff", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.less_as_i8.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.less_as_i8.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.less_as_i8.ConstProp.64bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,22 +2,19 @@\n + // MIR for `less_as_i8` after ConstProp\n   \n   fn less_as_i8() -> i8 {\n-      let mut _0: i8;                      // return place in scope 0 at $DIR/transmute.rs:+0:24: +0:26\n-      let mut _1: std::cmp::Ordering;      // in scope 0 at $DIR/transmute.rs:+1:24: +1:48\n+      let mut _0: i8;\n+      let mut _1: std::cmp::Ordering;\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 1 at $DIR/transmute.rs:+1:24: +1:48\n--         _1 = Less;                       // scope 1 at $DIR/transmute.rs:+1:24: +1:48\n--         _0 = move _1 as i8 (Transmute);  // scope 1 at $DIR/transmute.rs:+1:14: +1:49\n-+         _1 = const Less;                 // scope 1 at $DIR/transmute.rs:+1:24: +1:48\n-+                                          // mir::Constant\n-+                                          // + span: no-location\n-+                                          // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0xff)) }\n-+         _0 = const -1_i8;                // scope 1 at $DIR/transmute.rs:+1:14: +1:49\n-          StorageDead(_1);                 // scope 1 at $DIR/transmute.rs:+1:48: +1:49\n-          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+          StorageLive(_1);\n+-         _1 = Less;\n+-         _0 = move _1 as i8 (Transmute);\n++         _1 = const Less;\n++         _0 = const -1_i8;\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "afedf2a3061371905756d71456fce66afaa99d33", "filename": "tests/mir-opt/const_prop/transmute.undef_union_as_integer.ConstProp.32bit.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.undef_union_as_integer.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.undef_union_as_integer.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.undef_union_as_integer.ConstProp.32bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `undef_union_as_integer` after ConstProp\n   \n   fn undef_union_as_integer() -> u32 {\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/transmute.rs:+0:43: +0:46\n-      let mut _1: undef_union_as_integer::Union32; // in scope 0 at $DIR/transmute.rs:+2:24: +2:44\n-      let mut _2: ();                      // in scope 0 at $DIR/transmute.rs:+2:40: +2:42\n+      let mut _0: u32;\n+      let mut _1: undef_union_as_integer::Union32;\n+      let mut _2: ();\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 1 at $DIR/transmute.rs:+2:24: +2:44\n-          StorageLive(_2);                 // scope 1 at $DIR/transmute.rs:+2:40: +2:42\n-          _2 = ();                         // scope 1 at $DIR/transmute.rs:+2:40: +2:42\n-          _1 = Union32 { value: move _2 }; // scope 1 at $DIR/transmute.rs:+2:24: +2:44\n-          StorageDead(_2);                 // scope 1 at $DIR/transmute.rs:+2:43: +2:44\n-          _0 = move _1 as u32 (Transmute); // scope 1 at $DIR/transmute.rs:+2:14: +2:45\n-          StorageDead(_1);                 // scope 1 at $DIR/transmute.rs:+2:44: +2:45\n-          return;                          // scope 0 at $DIR/transmute.rs:+3:2: +3:2\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = ();\n+          _1 = Union32 { value: move _2 };\n+          StorageDead(_2);\n+          _0 = move _1 as u32 (Transmute);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "afedf2a3061371905756d71456fce66afaa99d33", "filename": "tests/mir-opt/const_prop/transmute.undef_union_as_integer.ConstProp.64bit.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.undef_union_as_integer.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.undef_union_as_integer.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.undef_union_as_integer.ConstProp.64bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `undef_union_as_integer` after ConstProp\n   \n   fn undef_union_as_integer() -> u32 {\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/transmute.rs:+0:43: +0:46\n-      let mut _1: undef_union_as_integer::Union32; // in scope 0 at $DIR/transmute.rs:+2:24: +2:44\n-      let mut _2: ();                      // in scope 0 at $DIR/transmute.rs:+2:40: +2:42\n+      let mut _0: u32;\n+      let mut _1: undef_union_as_integer::Union32;\n+      let mut _2: ();\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 1 at $DIR/transmute.rs:+2:24: +2:44\n-          StorageLive(_2);                 // scope 1 at $DIR/transmute.rs:+2:40: +2:42\n-          _2 = ();                         // scope 1 at $DIR/transmute.rs:+2:40: +2:42\n-          _1 = Union32 { value: move _2 }; // scope 1 at $DIR/transmute.rs:+2:24: +2:44\n-          StorageDead(_2);                 // scope 1 at $DIR/transmute.rs:+2:43: +2:44\n-          _0 = move _1 as u32 (Transmute); // scope 1 at $DIR/transmute.rs:+2:14: +2:45\n-          StorageDead(_1);                 // scope 1 at $DIR/transmute.rs:+2:44: +2:45\n-          return;                          // scope 0 at $DIR/transmute.rs:+3:2: +3:2\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = ();\n+          _1 = Union32 { value: move _2 };\n+          StorageDead(_2);\n+          _0 = move _1 as u32 (Transmute);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "100982382ddbfe959326fb4b2a05669185fc7cb8", "filename": "tests/mir-opt/const_prop/transmute.unreachable_box.ConstProp.32bit.diff", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.32bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,22 +2,19 @@\n + // MIR for `unreachable_box` after ConstProp\n   \n   fn unreachable_box() -> ! {\n-      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let _1: std::boxed::Box<Never>;      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _0: !;\n+      let _1: std::boxed::Box<Never>;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n--         _1 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+         _1 = const Box::<Never>(Unique::<Never> {{ pointer: NonNull::<Never> {{ pointer: {0x1 as *const Never} }}, _marker: PhantomData::<Never> }}, std::alloc::Global); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+                                          // mir::Constant\n-+                                          // + span: no-location\n-+                                          // + literal: Const { ty: Box<Never>, val: Value(Scalar(0x00000001)) }\n-          unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n+          StorageLive(_1);\n+-         _1 = const 1_usize as std::boxed::Box<Never> (Transmute);\n++         _1 = const Box::<Never>(Unique::<Never> {{ pointer: NonNull::<Never> {{ pointer: {0x1 as *const Never} }}, _marker: PhantomData::<Never> }}, std::alloc::Global);\n+          unreachable;\n       }\n   }\n   "}, {"sha": "100982382ddbfe959326fb4b2a05669185fc7cb8", "filename": "tests/mir-opt/const_prop/transmute.unreachable_box.ConstProp.64bit.diff", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.64bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,22 +2,19 @@\n + // MIR for `unreachable_box` after ConstProp\n   \n   fn unreachable_box() -> ! {\n-      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let _1: std::boxed::Box<Never>;      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _0: !;\n+      let _1: std::boxed::Box<Never>;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n--         _1 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+         _1 = const Box::<Never>(Unique::<Never> {{ pointer: NonNull::<Never> {{ pointer: {0x1 as *const Never} }}, _marker: PhantomData::<Never> }}, std::alloc::Global); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+                                          // mir::Constant\n-+                                          // + span: no-location\n-+                                          // + literal: Const { ty: Box<Never>, val: Value(Scalar(0x0000000000000001)) }\n-          unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n+          StorageLive(_1);\n+-         _1 = const 1_usize as std::boxed::Box<Never> (Transmute);\n++         _1 = const Box::<Never>(Unique::<Never> {{ pointer: NonNull::<Never> {{ pointer: {0x1 as *const Never} }}, _marker: PhantomData::<Never> }}, std::alloc::Global);\n+          unreachable;\n       }\n   }\n   "}, {"sha": "896608e7eff5d4f9ca7d48cbe756e9d832ff171c", "filename": "tests/mir-opt/const_prop/transmute.unreachable_direct.ConstProp.32bit.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.32bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `unreachable_direct` after ConstProp\n   \n   fn unreachable_direct() -> ! {\n-      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:39: +0:40\n-      let _1: Never;                       // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _2: ();                      // in scope 0 at $DIR/transmute.rs:+1:39: +1:41\n+      let mut _0: !;\n+      let _1: Never;\n+      let mut _2: ();\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n-          _2 = ();                         // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n-          _1 = move _2 as Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n-          unreachable;                     // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = ();\n+          _1 = move _2 as Never (Transmute);\n+          unreachable;\n       }\n   }\n   "}, {"sha": "896608e7eff5d4f9ca7d48cbe756e9d832ff171c", "filename": "tests/mir-opt/const_prop/transmute.unreachable_direct.ConstProp.64bit.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.64bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `unreachable_direct` after ConstProp\n   \n   fn unreachable_direct() -> ! {\n-      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:39: +0:40\n-      let _1: Never;                       // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _2: ();                      // in scope 0 at $DIR/transmute.rs:+1:39: +1:41\n+      let mut _0: !;\n+      let _1: Never;\n+      let mut _2: ();\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n-          _2 = ();                         // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n-          _1 = move _2 as Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n-          unreachable;                     // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = ();\n+          _1 = move _2 as Never (Transmute);\n+          unreachable;\n       }\n   }\n   "}, {"sha": "c9d5ccf0bfdd191cdc0398276bc0feb078e48a9d", "filename": "tests/mir-opt/const_prop/transmute.unreachable_mut.ConstProp.32bit.diff", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.32bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,26 +2,23 @@\n + // MIR for `unreachable_mut` after ConstProp\n   \n   fn unreachable_mut() -> ! {\n-      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let _1: &mut Never;                  // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _2: &mut Never;              // in scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+      let mut _0: !;\n+      let _1: &mut Never;\n+      let mut _2: &mut Never;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n--         _2 = const 1_usize as &mut Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+         _2 = const {0x1 as &mut Never};  // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+                                          // mir::Constant\n-+                                          // + span: no-location\n-+                                          // + literal: Const { ty: &mut Never, val: Value(Scalar(0x00000001)) }\n-          _1 = &mut (*_2);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n-          StorageDead(_2);                 // scope 0 at $DIR/transmute.rs:+1:54: +1:55\n-          unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n+          StorageLive(_1);\n+          StorageLive(_2);\n+-         _2 = const 1_usize as &mut Never (Transmute);\n++         _2 = const {0x1 as &mut Never};\n+          _1 = &mut (*_2);\n+          StorageDead(_2);\n+          unreachable;\n       }\n   }\n   "}, {"sha": "c9d5ccf0bfdd191cdc0398276bc0feb078e48a9d", "filename": "tests/mir-opt/const_prop/transmute.unreachable_mut.ConstProp.64bit.diff", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.64bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,26 +2,23 @@\n + // MIR for `unreachable_mut` after ConstProp\n   \n   fn unreachable_mut() -> ! {\n-      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let _1: &mut Never;                  // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-      let mut _2: &mut Never;              // in scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+      let mut _0: !;\n+      let _1: &mut Never;\n+      let mut _2: &mut Never;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n--         _2 = const 1_usize as &mut Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+         _2 = const {0x1 as &mut Never};  // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n-+                                          // mir::Constant\n-+                                          // + span: no-location\n-+                                          // + literal: Const { ty: &mut Never, val: Value(Scalar(0x0000000000000001)) }\n-          _1 = &mut (*_2);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n-          StorageDead(_2);                 // scope 0 at $DIR/transmute.rs:+1:54: +1:55\n-          unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n+          StorageLive(_1);\n+          StorageLive(_2);\n+-         _2 = const 1_usize as &mut Never (Transmute);\n++         _2 = const {0x1 as &mut Never};\n+          _1 = &mut (*_2);\n+          StorageDead(_2);\n+          unreachable;\n       }\n   }\n   "}, {"sha": "b684ba34c691a7bbda43fcf091fa4788cd59264b", "filename": "tests/mir-opt/const_prop/transmute.unreachable_ref.ConstProp.32bit.diff", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.32bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,22 +2,19 @@\n + // MIR for `unreachable_ref` after ConstProp\n   \n   fn unreachable_ref() -> ! {\n-      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let _1: &Never;                      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _0: !;\n+      let _1: &Never;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n--         _1 = const 1_usize as &Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n-+         _1 = const {0x1 as &Never};      // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n-+                                          // mir::Constant\n-+                                          // + span: no-location\n-+                                          // + literal: Const { ty: &Never, val: Value(Scalar(0x00000001)) }\n-          unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n+          StorageLive(_1);\n+-         _1 = const 1_usize as &Never (Transmute);\n++         _1 = const {0x1 as &Never};\n+          unreachable;\n       }\n   }\n   "}, {"sha": "b684ba34c691a7bbda43fcf091fa4788cd59264b", "filename": "tests/mir-opt/const_prop/transmute.unreachable_ref.ConstProp.64bit.diff", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.64bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,22 +2,19 @@\n + // MIR for `unreachable_ref` after ConstProp\n   \n   fn unreachable_ref() -> ! {\n-      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n-      let _1: &Never;                      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _0: !;\n+      let _1: &Never;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n       scope 2 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n--         _1 = const 1_usize as &Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n-+         _1 = const {0x1 as &Never};      // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n-+                                          // mir::Constant\n-+                                          // + span: no-location\n-+                                          // + literal: Const { ty: &Never, val: Value(Scalar(0x0000000000000001)) }\n-          unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n+          StorageLive(_1);\n+-         _1 = const 1_usize as &Never (Transmute);\n++         _1 = const {0x1 as &Never};\n+          unreachable;\n       }\n   }\n   "}, {"sha": "f215b3ca398a70103e76768861916037024488bd", "filename": "tests/mir-opt/const_prop/transmute.valid_char.ConstProp.32bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.valid_char.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.valid_char.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.valid_char.ConstProp.32bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,14 +2,14 @@\n + // MIR for `valid_char` after ConstProp\n   \n   fn valid_char() -> char {\n-      let mut _0: char;                    // return place in scope 0 at $DIR/transmute.rs:+0:24: +0:28\n+      let mut _0: char;\n       scope 1 {\n       }\n   \n       bb0: {\n--         _0 = const 82_u32 as char (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n-+         _0 = const 'R';                  // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n-          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+-         _0 = const 82_u32 as char (Transmute);\n++         _0 = const 'R';\n+          return;\n       }\n   }\n   "}, {"sha": "f215b3ca398a70103e76768861916037024488bd", "filename": "tests/mir-opt/const_prop/transmute.valid_char.ConstProp.64bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.valid_char.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.valid_char.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.valid_char.ConstProp.64bit.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,14 +2,14 @@\n + // MIR for `valid_char` after ConstProp\n   \n   fn valid_char() -> char {\n-      let mut _0: char;                    // return place in scope 0 at $DIR/transmute.rs:+0:24: +0:28\n+      let mut _0: char;\n       scope 1 {\n       }\n   \n       bb0: {\n--         _0 = const 82_u32 as char (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n-+         _0 = const 'R';                  // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n-          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+-         _0 = const 82_u32 as char (Transmute);\n++         _0 = const 'R';\n+          return;\n       }\n   }\n   "}, {"sha": "a72f24152fb4bad5a076f1aeab4cd2f8e9ca2b02", "filename": "tests/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.panic-abort.diff", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,34 +2,31 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/tuple_literal_propagation.rs:+0:11: +0:11\n-      let _1: (u32, u32);                  // in scope 0 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n-      let _2: ();                          // in scope 0 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n-      let mut _3: (u32, u32);              // in scope 0 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n+      let mut _0: ();\n+      let _1: (u32, u32);\n+      let _2: ();\n+      let mut _3: (u32, u32);\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n--         _1 = (const 1_u32, const 2_u32); // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n-+         _1 = const (1_u32, 2_u32);       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n-          StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n-          StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n--         _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n-+         _3 = const (1_u32, 2_u32);       // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n-          _2 = consume(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n-                                           // mir::Constant\n-                                           // + span: $DIR/tuple_literal_propagation.rs:7:5: 7:12\n-                                           // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+-         _1 = (const 1_u32, const 2_u32);\n++         _1 = const (1_u32, 2_u32);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+-         _3 = _1;\n++         _3 = const (1_u32, 2_u32);\n+          _2 = consume(move _3) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:14: +3:15\n-          StorageDead(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:15: +3:16\n-          _0 = const ();                   // scope 0 at $DIR/tuple_literal_propagation.rs:+0:11: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/tuple_literal_propagation.rs:+4:2: +4:2\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "d44c69ca44038cc8eceac410eba4d069bb032620", "filename": "tests/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.panic-unwind.diff", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,34 +2,31 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/tuple_literal_propagation.rs:+0:11: +0:11\n-      let _1: (u32, u32);                  // in scope 0 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n-      let _2: ();                          // in scope 0 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n-      let mut _3: (u32, u32);              // in scope 0 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n+      let mut _0: ();\n+      let _1: (u32, u32);\n+      let _2: ();\n+      let mut _3: (u32, u32);\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n+          debug x => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n--         _1 = (const 1_u32, const 2_u32); // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n-+         _1 = const (1_u32, 2_u32);       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n-          StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n-          StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n--         _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n-+         _3 = const (1_u32, 2_u32);       // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n-          _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n-                                           // mir::Constant\n-                                           // + span: $DIR/tuple_literal_propagation.rs:7:5: 7:12\n-                                           // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+-         _1 = (const 1_u32, const 2_u32);\n++         _1 = const (1_u32, 2_u32);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+-         _3 = _1;\n++         _3 = const (1_u32, 2_u32);\n+          _2 = consume(move _3) -> bb1;\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:14: +3:15\n-          StorageDead(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:15: +3:16\n-          _0 = const ();                   // scope 0 at $DIR/tuple_literal_propagation.rs:+0:11: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/tuple_literal_propagation.rs:+4:2: +4:2\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "f54908b4a38a6201acac5b55747839c041d40af6", "filename": "tests/mir-opt/const_prop/while_let_loops.change_loop_body.ConstProp.diff", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fwhile_let_loops.change_loop_body.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,53 +2,53 @@\n + // MIR for `change_loop_body` after ConstProp\n   \n   fn change_loop_body() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/while_let_loops.rs:+0:27: +0:27\n-      let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n-      let mut _2: ();                      // in scope 0 at $DIR/while_let_loops.rs:+0:1: +6:2\n-      let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/while_let_loops.rs:+2:28: +2:32\n-      let mut _4: isize;                   // in scope 0 at $DIR/while_let_loops.rs:+2:15: +2:25\n-      let mut _5: !;                       // in scope 0 at $DIR/while_let_loops.rs:+2:33: +5:6\n-      let mut _6: !;                       // in scope 0 at $DIR/while_let_loops.rs:+2:5: +5:6\n-      let _7: ();                          // in scope 0 at $DIR/while_let_loops.rs:+2:5: +5:6\n-      let mut _8: !;                       // in scope 0 at $DIR/while_let_loops.rs:+2:5: +5:6\n+      let mut _0: ();\n+      let mut _1: i32;\n+      let mut _2: ();\n+      let mut _3: std::option::Option<u32>;\n+      let mut _4: isize;\n+      let mut _5: !;\n+      let mut _6: !;\n+      let _7: ();\n+      let mut _8: !;\n       scope 1 {\n-          debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:+1:9: +1:15\n+          debug _x => _1;\n           scope 2 {\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n-          _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:+1:18: +1:19\n-          StorageLive(_3);                 // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n-          _3 = Option::<u32>::None;        // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n--         _4 = discriminant(_3);           // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n--         switchInt(move _4) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n-+         _4 = const 0_isize;              // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n-+         switchInt(const 0_isize) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n+          StorageLive(_1);\n+          _1 = const 0_i32;\n+          StorageLive(_3);\n+          _3 = Option::<u32>::None;\n+-         _4 = discriminant(_3);\n+-         switchInt(move _4) -> [1: bb1, otherwise: bb3];\n++         _4 = const 0_isize;\n++         switchInt(const 0_isize) -> [1: bb1, otherwise: bb3];\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: u32)) -> [0: bb2, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n+          switchInt(((_3 as Some).0: u32)) -> [0: bb2, otherwise: bb3];\n       }\n   \n       bb2: {\n-          _1 = const 1_i32;                // scope 2 at $DIR/while_let_loops.rs:+3:9: +3:15\n-          _0 = const ();                   // scope 2 at $DIR/while_let_loops.rs:+4:9: +4:14\n-          goto -> bb4;                     // scope 2 at $DIR/while_let_loops.rs:+4:9: +4:14\n+          _1 = const 1_i32;\n+          _0 = const ();\n+          goto -> bb4;\n       }\n   \n       bb3: {\n-          StorageLive(_7);                 // scope 1 at $DIR/while_let_loops.rs:+2:5: +5:6\n-          _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:+2:5: +5:6\n-          StorageDead(_7);                 // scope 1 at $DIR/while_let_loops.rs:+5:5: +5:6\n-          goto -> bb4;                     // scope 1 at no-location\n+          StorageLive(_7);\n+          _0 = const ();\n+          StorageDead(_7);\n+          goto -> bb4;\n       }\n   \n       bb4: {\n-          StorageDead(_3);                 // scope 1 at $DIR/while_let_loops.rs:+5:5: +5:6\n-          StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/while_let_loops.rs:+6:2: +6:2\n+          StorageDead(_3);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "4eafb8d09178e615469dad3f16e5ec391ea59317", "filename": "tests/mir-opt/const_prop_miscompile.bar.ConstProp.diff", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,40 +2,40 @@\n + // MIR for `bar` after ConstProp\n   \n   fn bar() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_miscompile.rs:+0:10: +0:10\n-      let mut _1: (i32,);                  // in scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n-      let _2: ();                          // in scope 0 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n-      let mut _3: *mut i32;                // in scope 0 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n-      let mut _5: i32;                     // in scope 0 at $DIR/const_prop_miscompile.rs:+5:13: +5:20\n+      let mut _0: ();\n+      let mut _1: (i32,);\n+      let _2: ();\n+      let mut _3: *mut i32;\n+      let mut _5: i32;\n       scope 1 {\n-          debug v => _1;                   // in scope 1 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n-          let _4: bool;                    // in scope 1 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n+          debug v => _1;\n+          let _4: bool;\n           scope 2 {\n           }\n           scope 3 {\n-              debug y => _4;               // in scope 3 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n+              debug y => _4;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n-          _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n-          StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n-          StorageLive(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n-          _3 = &raw mut (_1.0: i32);       // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n-          (*_3) = const 5_i32;             // scope 2 at $DIR/const_prop_miscompile.rs:+3:9: +3:26\n-          StorageDead(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:26: +3:27\n-          _2 = const ();                   // scope 2 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n-          StorageDead(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+4:5: +4:6\n-          StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n-          StorageLive(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:13: +5:20\n-          _5 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:+5:15: +5:18\n-          _4 = Eq(move _5, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:+5:13: +5:25\n-          StorageDead(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:24: +5:25\n-          _0 = const ();                   // scope 0 at $DIR/const_prop_miscompile.rs:+0:10: +6:2\n-          StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+6:1: +6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/const_prop_miscompile.rs:+6:2: +6:2\n+          StorageLive(_1);\n+          _1 = (const 1_i32,);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = &raw mut (_1.0: i32);\n+          (*_3) = const 5_i32;\n+          StorageDead(_3);\n+          _2 = const ();\n+          StorageDead(_2);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          _5 = (_1.0: i32);\n+          _4 = Eq(move _5, const 5_i32);\n+          StorageDead(_5);\n+          _0 = const ();\n+          StorageDead(_4);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "445d9895d6a8f4d2061ec6f845561b3b42a821ef", "filename": "tests/mir-opt/const_prop_miscompile.foo.ConstProp.diff", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `foo` after ConstProp\n   \n   fn foo() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_miscompile.rs:+0:10: +0:10\n-      let mut _1: (i32,);                  // in scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n-      let mut _2: &mut i32;                // in scope 0 at $DIR/const_prop_miscompile.rs:+2:6: +2:14\n-      let mut _4: i32;                     // in scope 0 at $DIR/const_prop_miscompile.rs:+3:13: +3:20\n+      let mut _0: ();\n+      let mut _1: (i32,);\n+      let mut _2: &mut i32;\n+      let mut _4: i32;\n       scope 1 {\n-          debug u => _1;                   // in scope 1 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n-          let _3: bool;                    // in scope 1 at $DIR/const_prop_miscompile.rs:+3:9: +3:10\n+          debug u => _1;\n+          let _3: bool;\n           scope 2 {\n-              debug y => _3;               // in scope 2 at $DIR/const_prop_miscompile.rs:+3:9: +3:10\n+              debug y => _3;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n-          _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n-          StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:6: +2:14\n-          _2 = &mut (_1.0: i32);           // scope 1 at $DIR/const_prop_miscompile.rs:+2:6: +2:14\n-          (*_2) = const 5_i32;             // scope 1 at $DIR/const_prop_miscompile.rs:+2:5: +2:18\n-          StorageDead(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:18: +2:19\n-          StorageLive(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:+3:9: +3:10\n-          StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+3:13: +3:20\n-          _4 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:+3:15: +3:18\n-          _3 = Eq(move _4, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:+3:13: +3:25\n-          StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+3:24: +3:25\n-          _0 = const ();                   // scope 0 at $DIR/const_prop_miscompile.rs:+0:10: +4:2\n-          StorageDead(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:+4:1: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/const_prop_miscompile.rs:+4:2: +4:2\n+          StorageLive(_1);\n+          _1 = (const 1_i32,);\n+          StorageLive(_2);\n+          _2 = &mut (_1.0: i32);\n+          (*_2) = const 5_i32;\n+          StorageDead(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          _4 = (_1.0: i32);\n+          _3 = Eq(move _4, const 5_i32);\n+          StorageDead(_4);\n+          _0 = const ();\n+          StorageDead(_3);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "46534076c293be6f0f04d690cd01dc386f1c6883", "filename": "tests/mir-opt/copy-prop/borrowed_local.f.CopyProp.panic-abort.diff", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,32 +2,26 @@\n + // MIR for `f` after CopyProp\n   \n   fn f() -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/borrowed_local.rs:+0:11: +0:15\n-      let mut _1: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _2: &u8;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _3: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _4: &u8;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _0: bool;\n+      let mut _1: u8;\n+      let mut _2: &u8;\n+      let mut _3: u8;\n+      let mut _4: &u8;\n   \n       bb0: {\n-          _1 = const 5_u8;                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-          _2 = &_1;                        // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-          _3 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-          _4 = &_3;                        // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-          _0 = cmp_ref(_2, _4) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/borrowed_local.rs:+8:13: +8:45\n-                                           // mir::Constant\n-                                           // + span: $DIR/borrowed_local.rs:24:29: 24:36\n-                                           // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> bool {cmp_ref}, val: Value(<ZST>) }\n+          _1 = const 5_u8;\n+          _2 = &_1;\n+          _3 = _1;\n+          _4 = &_3;\n+          _0 = cmp_ref(_2, _4) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          _0 = opaque::<u8>(_3) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n-                                           // mir::Constant\n-                                           // + span: $DIR/borrowed_local.rs:28:28: 28:34\n-                                           // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }\n+          _0 = opaque::<u8>(_3) -> [return: bb2, unwind unreachable];\n       }\n   \n       bb2: {\n-          return;                          // scope 0 at $DIR/borrowed_local.rs:+15:13: +15:21\n+          return;\n       }\n   }\n   "}, {"sha": "074f82702418966c2d2b3bc2fb1c48c5f6bd4f4d", "filename": "tests/mir-opt/copy-prop/borrowed_local.f.CopyProp.panic-unwind.diff", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,32 +2,26 @@\n + // MIR for `f` after CopyProp\n   \n   fn f() -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/borrowed_local.rs:+0:11: +0:15\n-      let mut _1: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _2: &u8;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _3: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _4: &u8;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _0: bool;\n+      let mut _1: u8;\n+      let mut _2: &u8;\n+      let mut _3: u8;\n+      let mut _4: &u8;\n   \n       bb0: {\n-          _1 = const 5_u8;                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-          _2 = &_1;                        // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-          _3 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-          _4 = &_3;                        // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-          _0 = cmp_ref(_2, _4) -> bb1;     // scope 0 at $DIR/borrowed_local.rs:+8:13: +8:45\n-                                           // mir::Constant\n-                                           // + span: $DIR/borrowed_local.rs:24:29: 24:36\n-                                           // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> bool {cmp_ref}, val: Value(<ZST>) }\n+          _1 = const 5_u8;\n+          _2 = &_1;\n+          _3 = _1;\n+          _4 = &_3;\n+          _0 = cmp_ref(_2, _4) -> bb1;\n       }\n   \n       bb1: {\n-          _0 = opaque::<u8>(_3) -> bb2;    // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n-                                           // mir::Constant\n-                                           // + span: $DIR/borrowed_local.rs:28:28: 28:34\n-                                           // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }\n+          _0 = opaque::<u8>(_3) -> bb2;\n       }\n   \n       bb2: {\n-          return;                          // scope 0 at $DIR/borrowed_local.rs:+15:13: +15:21\n+          return;\n       }\n   }\n   "}, {"sha": "3334cdf92e7d78e669152f60743145322a9c9706", "filename": "tests/mir-opt/copy-prop/branch.foo.CopyProp.panic-abort.diff", "status": "modified", "additions": 25, "deletions": 34, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,64 +2,55 @@\n + // MIR for `foo` after CopyProp\n   \n   fn foo() -> i32 {\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/branch.rs:+0:13: +0:16\n-      let _1: i32;                         // in scope 0 at $DIR/branch.rs:+1:9: +1:10\n-      let mut _3: bool;                    // in scope 0 at $DIR/branch.rs:+3:16: +3:22\n-      let _4: i32;                         // in scope 0 at $DIR/branch.rs:+6:9: +6:14\n+      let mut _0: i32;\n+      let _1: i32;\n+      let mut _3: bool;\n+      let _4: i32;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/branch.rs:+1:9: +1:10\n-          let _2: i32;                     // in scope 1 at $DIR/branch.rs:+3:9: +3:10\n+          debug x => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/branch.rs:+3:9: +3:10\n+              debug y => _2;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/branch.rs:+1:9: +1:10\n-          _1 = val() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/branch.rs:+1:13: +1:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/branch.rs:14:13: 14:16\n-                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = val() -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/branch.rs:+3:9: +3:10\n-          StorageLive(_3);                 // scope 1 at $DIR/branch.rs:+3:16: +3:22\n-          _3 = cond() -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/branch.rs:+3:16: +3:22\n-                                           // mir::Constant\n-                                           // + span: $DIR/branch.rs:16:16: 16:20\n-                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = cond() -> [return: bb2, unwind unreachable];\n       }\n   \n       bb2: {\n-          switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+          switchInt(move _3) -> [0: bb4, otherwise: bb3];\n       }\n   \n       bb3: {\n-          _2 = _1;                         // scope 1 at $DIR/branch.rs:+4:9: +4:10\n-          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+          _2 = _1;\n+          goto -> bb6;\n       }\n   \n       bb4: {\n-          StorageLive(_4);                 // scope 1 at $DIR/branch.rs:+6:9: +6:14\n-          _4 = val() -> [return: bb5, unwind unreachable]; // scope 1 at $DIR/branch.rs:+6:9: +6:14\n-                                           // mir::Constant\n-                                           // + span: $DIR/branch.rs:19:9: 19:12\n-                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+          StorageLive(_4);\n+          _4 = val() -> [return: bb5, unwind unreachable];\n       }\n   \n       bb5: {\n-          StorageDead(_4);                 // scope 1 at $DIR/branch.rs:+6:14: +6:15\n-          _2 = _1;                         // scope 1 at $DIR/branch.rs:+7:9: +7:10\n-          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+          StorageDead(_4);\n+          _2 = _1;\n+          goto -> bb6;\n       }\n   \n       bb6: {\n-          StorageDead(_3);                 // scope 1 at $DIR/branch.rs:+8:5: +8:6\n-          _0 = _2;                         // scope 2 at $DIR/branch.rs:+10:5: +10:6\n-          StorageDead(_2);                 // scope 1 at $DIR/branch.rs:+11:1: +11:2\n-          StorageDead(_1);                 // scope 0 at $DIR/branch.rs:+11:1: +11:2\n-          return;                          // scope 0 at $DIR/branch.rs:+11:2: +11:2\n+          StorageDead(_3);\n+          _0 = _2;\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "0dcc5cef7340a5c62c69b5f172baf6e4c6714db8", "filename": "tests/mir-opt/copy-prop/branch.foo.CopyProp.panic-unwind.diff", "status": "modified", "additions": 25, "deletions": 34, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,64 +2,55 @@\n + // MIR for `foo` after CopyProp\n   \n   fn foo() -> i32 {\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/branch.rs:+0:13: +0:16\n-      let _1: i32;                         // in scope 0 at $DIR/branch.rs:+1:9: +1:10\n-      let mut _3: bool;                    // in scope 0 at $DIR/branch.rs:+3:16: +3:22\n-      let _4: i32;                         // in scope 0 at $DIR/branch.rs:+6:9: +6:14\n+      let mut _0: i32;\n+      let _1: i32;\n+      let mut _3: bool;\n+      let _4: i32;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/branch.rs:+1:9: +1:10\n-          let _2: i32;                     // in scope 1 at $DIR/branch.rs:+3:9: +3:10\n+          debug x => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/branch.rs:+3:9: +3:10\n+              debug y => _2;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/branch.rs:+1:9: +1:10\n-          _1 = val() -> bb1;               // scope 0 at $DIR/branch.rs:+1:13: +1:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/branch.rs:14:13: 14:16\n-                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = val() -> bb1;\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/branch.rs:+3:9: +3:10\n-          StorageLive(_3);                 // scope 1 at $DIR/branch.rs:+3:16: +3:22\n-          _3 = cond() -> bb2;              // scope 1 at $DIR/branch.rs:+3:16: +3:22\n-                                           // mir::Constant\n-                                           // + span: $DIR/branch.rs:16:16: 16:20\n-                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = cond() -> bb2;\n       }\n   \n       bb2: {\n-          switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+          switchInt(move _3) -> [0: bb4, otherwise: bb3];\n       }\n   \n       bb3: {\n-          _2 = _1;                         // scope 1 at $DIR/branch.rs:+4:9: +4:10\n-          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+          _2 = _1;\n+          goto -> bb6;\n       }\n   \n       bb4: {\n-          StorageLive(_4);                 // scope 1 at $DIR/branch.rs:+6:9: +6:14\n-          _4 = val() -> bb5;               // scope 1 at $DIR/branch.rs:+6:9: +6:14\n-                                           // mir::Constant\n-                                           // + span: $DIR/branch.rs:19:9: 19:12\n-                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+          StorageLive(_4);\n+          _4 = val() -> bb5;\n       }\n   \n       bb5: {\n-          StorageDead(_4);                 // scope 1 at $DIR/branch.rs:+6:14: +6:15\n-          _2 = _1;                         // scope 1 at $DIR/branch.rs:+7:9: +7:10\n-          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+          StorageDead(_4);\n+          _2 = _1;\n+          goto -> bb6;\n       }\n   \n       bb6: {\n-          StorageDead(_3);                 // scope 1 at $DIR/branch.rs:+8:5: +8:6\n-          _0 = _2;                         // scope 2 at $DIR/branch.rs:+10:5: +10:6\n-          StorageDead(_2);                 // scope 1 at $DIR/branch.rs:+11:1: +11:2\n-          StorageDead(_1);                 // scope 0 at $DIR/branch.rs:+11:1: +11:2\n-          return;                          // scope 0 at $DIR/branch.rs:+11:2: +11:2\n+          StorageDead(_3);\n+          _0 = _2;\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "70674a912edd28b8a70de979901d6ac494920d3a", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.arg_src.CopyProp.panic-abort.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,22 +2,22 @@\n + // MIR for `arg_src` after CopyProp\n   \n   fn arg_src(_1: i32) -> i32 {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:12: +0:17\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:27: +0:30\n-      let _2: i32;                         // in scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+      debug x => _1;\n+      let mut _0: i32;\n+      let _2: i32;\n       scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n-+         debug y => _0;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+-         debug y => _2;\n++         debug y => _0;\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n--         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n-+         _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n-          _1 = const 123_i32;              // scope 1 at $DIR/copy_propagation_arg.rs:+2:5: +2:12\n--         _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n--         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n+-         StorageLive(_2);\n+-         _2 = _1;\n++         _0 = _1;\n+          _1 = const 123_i32;\n+-         _0 = _2;\n+-         StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "70674a912edd28b8a70de979901d6ac494920d3a", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.arg_src.CopyProp.panic-unwind.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,22 +2,22 @@\n + // MIR for `arg_src` after CopyProp\n   \n   fn arg_src(_1: i32) -> i32 {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:12: +0:17\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:27: +0:30\n-      let _2: i32;                         // in scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+      debug x => _1;\n+      let mut _0: i32;\n+      let _2: i32;\n       scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n-+         debug y => _0;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+-         debug y => _2;\n++         debug y => _0;\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n--         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n-+         _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n-          _1 = const 123_i32;              // scope 1 at $DIR/copy_propagation_arg.rs:+2:5: +2:12\n--         _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n--         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n+-         StorageLive(_2);\n+-         _2 = _1;\n++         _0 = _1;\n+          _1 = const 123_i32;\n+-         _0 = _2;\n+-         StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "9ec014e2b256bdf1b4fcc519e68ae4fdec0f4a83", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.bar.CopyProp.panic-abort.diff", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,27 +2,24 @@\n + // MIR for `bar` after CopyProp\n   \n   fn bar(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n-      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n-      let _2: u8;                          // in scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n-      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+      debug x => _1;\n+      let mut _0: ();\n+      let _2: u8;\n+      let mut _3: u8;\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n-          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n-          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n-          _2 = dummy(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n-                                           // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:17:5: 17:10\n-                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = _1;\n+          _2 = dummy(move _3) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:12: +1:13\n-          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n-          _1 = const 5_u8;                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n-          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _1 = const 5_u8;\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "95c1c12ee6920031a2d2b4d734f6d7750369e5d5", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.bar.CopyProp.panic-unwind.diff", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,27 +2,24 @@\n + // MIR for `bar` after CopyProp\n   \n   fn bar(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n-      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n-      let _2: u8;                          // in scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n-      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+      debug x => _1;\n+      let mut _0: ();\n+      let _2: u8;\n+      let mut _3: u8;\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n-          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n-          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n-          _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n-                                           // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:17:5: 17:10\n-                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = _1;\n+          _2 = dummy(move _3) -> bb1;\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:12: +1:13\n-          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n-          _1 = const 5_u8;                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n-          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _1 = const 5_u8;\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "71facf91df78c21756edea4a7729d77a77911ce9", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.baz.CopyProp.panic-abort.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,17 +2,17 @@\n + // MIR for `baz` after CopyProp\n   \n   fn baz(_1: i32) -> i32 {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:23: +0:26\n-      let mut _2: i32;                     // in scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+      debug x => _1;\n+      let mut _0: i32;\n+      let mut _2: i32;\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n-          _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n-          _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n-          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n-          _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n+          StorageLive(_2);\n+          _2 = _1;\n+          _1 = move _2;\n+          StorageDead(_2);\n+          _0 = _1;\n+          return;\n       }\n   }\n   "}, {"sha": "71facf91df78c21756edea4a7729d77a77911ce9", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.baz.CopyProp.panic-unwind.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,17 +2,17 @@\n + // MIR for `baz` after CopyProp\n   \n   fn baz(_1: i32) -> i32 {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:23: +0:26\n-      let mut _2: i32;                     // in scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+      debug x => _1;\n+      let mut _0: i32;\n+      let mut _2: i32;\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n-          _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n-          _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n-          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n-          _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n+          StorageLive(_2);\n+          _2 = _1;\n+          _1 = move _2;\n+          StorageDead(_2);\n+          _0 = _1;\n+          return;\n       }\n   }\n   "}, {"sha": "81b73e18763fde00eb3df174be91d038b605d758", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.foo.CopyProp.panic-abort.diff", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,27 +2,24 @@\n + // MIR for `foo` after CopyProp\n   \n   fn foo(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n-      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n-      let mut _2: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n-      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+      debug x => _1;\n+      let mut _0: ();\n+      let mut _2: u8;\n+      let mut _3: u8;\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n-          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n-          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n-          _2 = dummy(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n-                                           // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:12:9: 12:14\n-                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = _1;\n+          _2 = dummy(move _3) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:16: +2:17\n-          _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:17\n-          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:16: +2:17\n-          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n+          StorageDead(_3);\n+          _1 = move _2;\n+          StorageDead(_2);\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "e16d6220ef2c6b160fe51e57291a33e73c6ed693", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.foo.CopyProp.panic-unwind.diff", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,27 +2,24 @@\n + // MIR for `foo` after CopyProp\n   \n   fn foo(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n-      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n-      let mut _2: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n-      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+      debug x => _1;\n+      let mut _0: ();\n+      let mut _2: u8;\n+      let mut _3: u8;\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n-          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n-          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n-          _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n-                                           // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:12:9: 12:14\n-                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = _1;\n+          _2 = dummy(move _3) -> bb1;\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:16: +2:17\n-          _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:17\n-          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:16: +2:17\n-          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n+          StorageDead(_3);\n+          _1 = move _2;\n+          StorageDead(_2);\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "7ba85301051795d28a02424a307e0531d07fb175", "filename": "tests/mir-opt/copy-prop/custom_move_arg.f.CopyProp.panic-abort.diff", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,30 +2,24 @@\n + // MIR for `f` after CopyProp\n   \n   fn f(_1: NotCopy) -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/custom_move_arg.rs:+0:19: +0:19\n-      let mut _2: NotCopy;                 // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _3: NotCopy;                 // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _0: ();\n+      let mut _2: NotCopy;\n+      let mut _3: NotCopy;\n   \n       bb0: {\n--         _2 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n--         _0 = opaque::<NotCopy>(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/custom_move_arg.rs:+3:9: +3:41\n-+         _0 = opaque::<NotCopy>(_1) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/custom_move_arg.rs:+3:9: +3:41\n-                                           // mir::Constant\n-                                           // + span: $DIR/custom_move_arg.rs:16:24: 16:30\n-                                           // + literal: Const { ty: fn(NotCopy) {opaque::<NotCopy>}, val: Value(<ZST>) }\n+-         _2 = _1;\n+-         _0 = opaque::<NotCopy>(move _1) -> [return: bb1, unwind unreachable];\n++         _0 = opaque::<NotCopy>(_1) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _3 = move _2;                    // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n--         _0 = opaque::<NotCopy>(_3) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/custom_move_arg.rs:+7:9: +7:35\n-+         _0 = opaque::<NotCopy>(_1) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/custom_move_arg.rs:+7:9: +7:35\n-                                           // mir::Constant\n-                                           // + span: $DIR/custom_move_arg.rs:20:24: 20:30\n-                                           // + literal: Const { ty: fn(NotCopy) {opaque::<NotCopy>}, val: Value(<ZST>) }\n+-         _3 = move _2;\n+-         _0 = opaque::<NotCopy>(_3) -> [return: bb2, unwind unreachable];\n++         _0 = opaque::<NotCopy>(_1) -> [return: bb2, unwind unreachable];\n       }\n   \n       bb2: {\n-          return;                          // scope 0 at $DIR/custom_move_arg.rs:+10:9: +10:17\n+          return;\n       }\n   }\n   "}, {"sha": "2d7e34f2d6e3c92f5561b6e7ef3100a950274fa2", "filename": "tests/mir-opt/copy-prop/custom_move_arg.f.CopyProp.panic-unwind.diff", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,30 +2,24 @@\n + // MIR for `f` after CopyProp\n   \n   fn f(_1: NotCopy) -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/custom_move_arg.rs:+0:19: +0:19\n-      let mut _2: NotCopy;                 // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _3: NotCopy;                 // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _0: ();\n+      let mut _2: NotCopy;\n+      let mut _3: NotCopy;\n   \n       bb0: {\n--         _2 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n--         _0 = opaque::<NotCopy>(move _1) -> bb1; // scope 0 at $DIR/custom_move_arg.rs:+3:9: +3:41\n-+         _0 = opaque::<NotCopy>(_1) -> bb1; // scope 0 at $DIR/custom_move_arg.rs:+3:9: +3:41\n-                                           // mir::Constant\n-                                           // + span: $DIR/custom_move_arg.rs:16:24: 16:30\n-                                           // + literal: Const { ty: fn(NotCopy) {opaque::<NotCopy>}, val: Value(<ZST>) }\n+-         _2 = _1;\n+-         _0 = opaque::<NotCopy>(move _1) -> bb1;\n++         _0 = opaque::<NotCopy>(_1) -> bb1;\n       }\n   \n       bb1: {\n--         _3 = move _2;                    // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n--         _0 = opaque::<NotCopy>(_3) -> bb2; // scope 0 at $DIR/custom_move_arg.rs:+7:9: +7:35\n-+         _0 = opaque::<NotCopy>(_1) -> bb2; // scope 0 at $DIR/custom_move_arg.rs:+7:9: +7:35\n-                                           // mir::Constant\n-                                           // + span: $DIR/custom_move_arg.rs:20:24: 20:30\n-                                           // + literal: Const { ty: fn(NotCopy) {opaque::<NotCopy>}, val: Value(<ZST>) }\n+-         _3 = move _2;\n+-         _0 = opaque::<NotCopy>(_3) -> bb2;\n++         _0 = opaque::<NotCopy>(_1) -> bb2;\n       }\n   \n       bb2: {\n-          return;                          // scope 0 at $DIR/custom_move_arg.rs:+10:9: +10:17\n+          return;\n       }\n   }\n   "}, {"sha": "8f97c4e439e9d5d82b7fedef166a1a3098c7ea6f", "filename": "tests/mir-opt/copy-prop/cycle.main.CopyProp.panic-abort.diff", "status": "modified", "additions": 33, "deletions": 39, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,59 +2,53 @@\n + // MIR for `main` after CopyProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/cycle.rs:+1:9: +1:14\n-      let mut _4: i32;                     // in scope 0 at $DIR/cycle.rs:+4:9: +4:10\n-      let _5: ();                          // in scope 0 at $DIR/cycle.rs:+6:5: +6:12\n-      let mut _6: i32;                     // in scope 0 at $DIR/cycle.rs:+6:10: +6:11\n+      let mut _0: ();\n+      let mut _1: i32;\n+      let mut _4: i32;\n+      let _5: ();\n+      let mut _6: i32;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/cycle.rs:+1:9: +1:14\n-          let _2: i32;                     // in scope 1 at $DIR/cycle.rs:+2:9: +2:10\n+          debug x => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/cycle.rs:+2:9: +2:10\n-              let _3: i32;                 // in scope 2 at $DIR/cycle.rs:+3:9: +3:10\n+              debug y => _2;\n+              let _3: i32;\n               scope 3 {\n--                 debug z => _3;           // in scope 3 at $DIR/cycle.rs:+3:9: +3:10\n-+                 debug z => _2;           // in scope 3 at $DIR/cycle.rs:+3:9: +3:10\n+-                 debug z => _3;\n++                 debug z => _2;\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:+1:9: +1:14\n-          _1 = val() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/cycle.rs:+1:17: +1:22\n-                                           // mir::Constant\n-                                           // + span: $DIR/cycle.rs:10:17: 10:20\n-                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = val() -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:+2:9: +2:10\n-          _2 = _1;                         // scope 1 at $DIR/cycle.rs:+2:13: +2:14\n--         StorageLive(_3);                 // scope 2 at $DIR/cycle.rs:+3:9: +3:10\n--         _3 = _2;                         // scope 2 at $DIR/cycle.rs:+3:13: +3:14\n--         StorageLive(_4);                 // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n--         _4 = _3;                         // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n--         _1 = move _4;                    // scope 3 at $DIR/cycle.rs:+4:5: +4:10\n--         StorageDead(_4);                 // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n-+         _1 = _2;                         // scope 3 at $DIR/cycle.rs:+4:5: +4:10\n-          StorageLive(_5);                 // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n-          StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n-          _6 = _1;                         // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n-          _5 = std::mem::drop::<i32>(move _6) -> [return: bb2, unwind unreachable]; // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n-                                           // mir::Constant\n-                                           // + span: $DIR/cycle.rs:15:5: 15:9\n-                                           // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n+-         StorageLive(_2);\n+          _2 = _1;\n+-         StorageLive(_3);\n+-         _3 = _2;\n+-         StorageLive(_4);\n+-         _4 = _3;\n+-         _1 = move _4;\n+-         StorageDead(_4);\n++         _1 = _2;\n+          StorageLive(_5);\n+          StorageLive(_6);\n+          _6 = _1;\n+          _5 = std::mem::drop::<i32>(move _6) -> [return: bb2, unwind unreachable];\n       }\n   \n       bb2: {\n-          StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:+6:11: +6:12\n-          StorageDead(_5);                 // scope 3 at $DIR/cycle.rs:+6:12: +6:13\n-          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:11: +7:2\n--         StorageDead(_3);                 // scope 2 at $DIR/cycle.rs:+7:1: +7:2\n--         StorageDead(_2);                 // scope 1 at $DIR/cycle.rs:+7:1: +7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/cycle.rs:+7:2: +7:2\n+          StorageDead(_6);\n+          StorageDead(_5);\n+          _0 = const ();\n+-         StorageDead(_3);\n+-         StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "bf9e941c7b6530c1b02f1e1c9a7a72d21412fd46", "filename": "tests/mir-opt/copy-prop/cycle.main.CopyProp.panic-unwind.diff", "status": "modified", "additions": 33, "deletions": 39, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,59 +2,53 @@\n + // MIR for `main` after CopyProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/cycle.rs:+1:9: +1:14\n-      let mut _4: i32;                     // in scope 0 at $DIR/cycle.rs:+4:9: +4:10\n-      let _5: ();                          // in scope 0 at $DIR/cycle.rs:+6:5: +6:12\n-      let mut _6: i32;                     // in scope 0 at $DIR/cycle.rs:+6:10: +6:11\n+      let mut _0: ();\n+      let mut _1: i32;\n+      let mut _4: i32;\n+      let _5: ();\n+      let mut _6: i32;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/cycle.rs:+1:9: +1:14\n-          let _2: i32;                     // in scope 1 at $DIR/cycle.rs:+2:9: +2:10\n+          debug x => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/cycle.rs:+2:9: +2:10\n-              let _3: i32;                 // in scope 2 at $DIR/cycle.rs:+3:9: +3:10\n+              debug y => _2;\n+              let _3: i32;\n               scope 3 {\n--                 debug z => _3;           // in scope 3 at $DIR/cycle.rs:+3:9: +3:10\n-+                 debug z => _2;           // in scope 3 at $DIR/cycle.rs:+3:9: +3:10\n+-                 debug z => _3;\n++                 debug z => _2;\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:+1:9: +1:14\n-          _1 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:+1:17: +1:22\n-                                           // mir::Constant\n-                                           // + span: $DIR/cycle.rs:10:17: 10:20\n-                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = val() -> bb1;\n       }\n   \n       bb1: {\n--         StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:+2:9: +2:10\n-          _2 = _1;                         // scope 1 at $DIR/cycle.rs:+2:13: +2:14\n--         StorageLive(_3);                 // scope 2 at $DIR/cycle.rs:+3:9: +3:10\n--         _3 = _2;                         // scope 2 at $DIR/cycle.rs:+3:13: +3:14\n--         StorageLive(_4);                 // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n--         _4 = _3;                         // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n--         _1 = move _4;                    // scope 3 at $DIR/cycle.rs:+4:5: +4:10\n--         StorageDead(_4);                 // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n-+         _1 = _2;                         // scope 3 at $DIR/cycle.rs:+4:5: +4:10\n-          StorageLive(_5);                 // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n-          StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n-          _6 = _1;                         // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n-          _5 = std::mem::drop::<i32>(move _6) -> bb2; // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n-                                           // mir::Constant\n-                                           // + span: $DIR/cycle.rs:15:5: 15:9\n-                                           // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n+-         StorageLive(_2);\n+          _2 = _1;\n+-         StorageLive(_3);\n+-         _3 = _2;\n+-         StorageLive(_4);\n+-         _4 = _3;\n+-         _1 = move _4;\n+-         StorageDead(_4);\n++         _1 = _2;\n+          StorageLive(_5);\n+          StorageLive(_6);\n+          _6 = _1;\n+          _5 = std::mem::drop::<i32>(move _6) -> bb2;\n       }\n   \n       bb2: {\n-          StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:+6:11: +6:12\n-          StorageDead(_5);                 // scope 3 at $DIR/cycle.rs:+6:12: +6:13\n-          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:11: +7:2\n--         StorageDead(_3);                 // scope 2 at $DIR/cycle.rs:+7:1: +7:2\n--         StorageDead(_2);                 // scope 1 at $DIR/cycle.rs:+7:1: +7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/cycle.rs:+7:2: +7:2\n+          StorageDead(_6);\n+          StorageDead(_5);\n+          _0 = const ();\n+-         StorageDead(_3);\n+-         StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "02b88d1400353be6efe62444523b1349398d88d1", "filename": "tests/mir-opt/copy-prop/dead_stores_79191.f.CopyProp.after.panic-abort.mir", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.panic-abort.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,29 +1,26 @@\n // MIR for `f` after CopyProp\n \n fn f(_1: usize) -> usize {\n-    debug a => _1;                       // in scope 0 at $DIR/dead_stores_79191.rs:+0:6: +0:11\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/dead_stores_79191.rs:+0:23: +0:28\n-    let _2: usize;                       // in scope 0 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n-    let mut _3: usize;                   // in scope 0 at $DIR/dead_stores_79191.rs:+3:9: +3:10\n-    let mut _4: usize;                   // in scope 0 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n+    debug a => _1;\n+    let mut _0: usize;\n+    let _2: usize;\n+    let mut _3: usize;\n+    let mut _4: usize;\n     scope 1 {\n-        debug b => _2;                   // in scope 1 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n+        debug b => _2;\n     }\n \n     bb0: {\n-        _2 = _1;                         // scope 0 at $DIR/dead_stores_79191.rs:+1:13: +1:14\n-        _1 = const 5_usize;              // scope 1 at $DIR/dead_stores_79191.rs:+2:5: +2:10\n-        _1 = _2;                         // scope 1 at $DIR/dead_stores_79191.rs:+3:5: +3:10\n-        StorageLive(_4);                 // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n-        _4 = _1;                         // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n-        _0 = id::<usize>(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/dead_stores_79191.rs:+4:5: +4:10\n-                                         // mir::Constant\n-                                         // + span: $DIR/dead_stores_79191.rs:13:5: 13:7\n-                                         // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n+        _2 = _1;\n+        _1 = const 5_usize;\n+        _1 = _2;\n+        StorageLive(_4);\n+        _4 = _1;\n+        _0 = id::<usize>(move _4) -> [return: bb1, unwind unreachable];\n     }\n \n     bb1: {\n-        StorageDead(_4);                 // scope 1 at $DIR/dead_stores_79191.rs:+4:9: +4:10\n-        return;                          // scope 0 at $DIR/dead_stores_79191.rs:+5:2: +5:2\n+        StorageDead(_4);\n+        return;\n     }\n }"}, {"sha": "617e57d884bfaff9a63daf3132628eaf9b2f01ec", "filename": "tests/mir-opt/copy-prop/dead_stores_79191.f.CopyProp.after.panic-unwind.mir", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.panic-unwind.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,29 +1,26 @@\n // MIR for `f` after CopyProp\n \n fn f(_1: usize) -> usize {\n-    debug a => _1;                       // in scope 0 at $DIR/dead_stores_79191.rs:+0:6: +0:11\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/dead_stores_79191.rs:+0:23: +0:28\n-    let _2: usize;                       // in scope 0 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n-    let mut _3: usize;                   // in scope 0 at $DIR/dead_stores_79191.rs:+3:9: +3:10\n-    let mut _4: usize;                   // in scope 0 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n+    debug a => _1;\n+    let mut _0: usize;\n+    let _2: usize;\n+    let mut _3: usize;\n+    let mut _4: usize;\n     scope 1 {\n-        debug b => _2;                   // in scope 1 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n+        debug b => _2;\n     }\n \n     bb0: {\n-        _2 = _1;                         // scope 0 at $DIR/dead_stores_79191.rs:+1:13: +1:14\n-        _1 = const 5_usize;              // scope 1 at $DIR/dead_stores_79191.rs:+2:5: +2:10\n-        _1 = _2;                         // scope 1 at $DIR/dead_stores_79191.rs:+3:5: +3:10\n-        StorageLive(_4);                 // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n-        _4 = _1;                         // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n-        _0 = id::<usize>(move _4) -> bb1; // scope 1 at $DIR/dead_stores_79191.rs:+4:5: +4:10\n-                                         // mir::Constant\n-                                         // + span: $DIR/dead_stores_79191.rs:13:5: 13:7\n-                                         // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n+        _2 = _1;\n+        _1 = const 5_usize;\n+        _1 = _2;\n+        StorageLive(_4);\n+        _4 = _1;\n+        _0 = id::<usize>(move _4) -> bb1;\n     }\n \n     bb1: {\n-        StorageDead(_4);                 // scope 1 at $DIR/dead_stores_79191.rs:+4:9: +4:10\n-        return;                          // scope 0 at $DIR/dead_stores_79191.rs:+5:2: +5:2\n+        StorageDead(_4);\n+        return;\n     }\n }"}, {"sha": "02b88d1400353be6efe62444523b1349398d88d1", "filename": "tests/mir-opt/copy-prop/dead_stores_better.f.CopyProp.after.panic-abort.mir", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.panic-abort.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,29 +1,26 @@\n // MIR for `f` after CopyProp\n \n fn f(_1: usize) -> usize {\n-    debug a => _1;                       // in scope 0 at $DIR/dead_stores_better.rs:+0:10: +0:15\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/dead_stores_better.rs:+0:27: +0:32\n-    let _2: usize;                       // in scope 0 at $DIR/dead_stores_better.rs:+1:9: +1:10\n-    let mut _3: usize;                   // in scope 0 at $DIR/dead_stores_better.rs:+3:9: +3:10\n-    let mut _4: usize;                   // in scope 0 at $DIR/dead_stores_better.rs:+4:8: +4:9\n+    debug a => _1;\n+    let mut _0: usize;\n+    let _2: usize;\n+    let mut _3: usize;\n+    let mut _4: usize;\n     scope 1 {\n-        debug b => _2;                   // in scope 1 at $DIR/dead_stores_better.rs:+1:9: +1:10\n+        debug b => _2;\n     }\n \n     bb0: {\n-        _2 = _1;                         // scope 0 at $DIR/dead_stores_better.rs:+1:13: +1:14\n-        _1 = const 5_usize;              // scope 1 at $DIR/dead_stores_better.rs:+2:5: +2:10\n-        _1 = _2;                         // scope 1 at $DIR/dead_stores_better.rs:+3:5: +3:10\n-        StorageLive(_4);                 // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n-        _4 = _1;                         // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n-        _0 = id::<usize>(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/dead_stores_better.rs:+4:5: +4:10\n-                                         // mir::Constant\n-                                         // + span: $DIR/dead_stores_better.rs:17:5: 17:7\n-                                         // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n+        _2 = _1;\n+        _1 = const 5_usize;\n+        _1 = _2;\n+        StorageLive(_4);\n+        _4 = _1;\n+        _0 = id::<usize>(move _4) -> [return: bb1, unwind unreachable];\n     }\n \n     bb1: {\n-        StorageDead(_4);                 // scope 1 at $DIR/dead_stores_better.rs:+4:9: +4:10\n-        return;                          // scope 0 at $DIR/dead_stores_better.rs:+5:2: +5:2\n+        StorageDead(_4);\n+        return;\n     }\n }"}, {"sha": "617e57d884bfaff9a63daf3132628eaf9b2f01ec", "filename": "tests/mir-opt/copy-prop/dead_stores_better.f.CopyProp.after.panic-unwind.mir", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.panic-unwind.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,29 +1,26 @@\n // MIR for `f` after CopyProp\n \n fn f(_1: usize) -> usize {\n-    debug a => _1;                       // in scope 0 at $DIR/dead_stores_better.rs:+0:10: +0:15\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/dead_stores_better.rs:+0:27: +0:32\n-    let _2: usize;                       // in scope 0 at $DIR/dead_stores_better.rs:+1:9: +1:10\n-    let mut _3: usize;                   // in scope 0 at $DIR/dead_stores_better.rs:+3:9: +3:10\n-    let mut _4: usize;                   // in scope 0 at $DIR/dead_stores_better.rs:+4:8: +4:9\n+    debug a => _1;\n+    let mut _0: usize;\n+    let _2: usize;\n+    let mut _3: usize;\n+    let mut _4: usize;\n     scope 1 {\n-        debug b => _2;                   // in scope 1 at $DIR/dead_stores_better.rs:+1:9: +1:10\n+        debug b => _2;\n     }\n \n     bb0: {\n-        _2 = _1;                         // scope 0 at $DIR/dead_stores_better.rs:+1:13: +1:14\n-        _1 = const 5_usize;              // scope 1 at $DIR/dead_stores_better.rs:+2:5: +2:10\n-        _1 = _2;                         // scope 1 at $DIR/dead_stores_better.rs:+3:5: +3:10\n-        StorageLive(_4);                 // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n-        _4 = _1;                         // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n-        _0 = id::<usize>(move _4) -> bb1; // scope 1 at $DIR/dead_stores_better.rs:+4:5: +4:10\n-                                         // mir::Constant\n-                                         // + span: $DIR/dead_stores_better.rs:17:5: 17:7\n-                                         // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n+        _2 = _1;\n+        _1 = const 5_usize;\n+        _1 = _2;\n+        StorageLive(_4);\n+        _4 = _1;\n+        _0 = id::<usize>(move _4) -> bb1;\n     }\n \n     bb1: {\n-        StorageDead(_4);                 // scope 1 at $DIR/dead_stores_better.rs:+4:9: +4:10\n-        return;                          // scope 0 at $DIR/dead_stores_better.rs:+5:2: +5:2\n+        StorageDead(_4);\n+        return;\n     }\n }"}, {"sha": "a16d79d0e64f681929f96fe0512b3c1853c3f080", "filename": "tests/mir-opt/copy-prop/issue_107511.main.CopyProp.panic-abort.diff", "status": "modified", "additions": 88, "deletions": 97, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,137 +2,128 @@\n + // MIR for `main` after CopyProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue_107511.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/issue_107511.rs:+1:9: +1:16\n-      let mut _3: std::ops::Range<usize>;  // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n-      let mut _4: std::ops::Range<usize>;  // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n-      let mut _5: usize;                   // in scope 0 at $DIR/issue_107511.rs:+6:17: +6:24\n-      let mut _6: &[i32];                  // in scope 0 at $DIR/issue_107511.rs:+6:17: +6:24\n-      let mut _7: &[i32; 4];               // in scope 0 at $DIR/issue_107511.rs:+6:17: +6:24\n-      let mut _9: ();                      // in scope 0 at $DIR/issue_107511.rs:+0:1: +9:2\n-      let _10: ();                         // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n-      let mut _11: std::option::Option<usize>; // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n-      let mut _12: &mut std::ops::Range<usize>; // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n-      let mut _13: &mut std::ops::Range<usize>; // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n-      let mut _14: isize;                  // in scope 0 at $DIR/issue_107511.rs:+6:5: +8:6\n-      let mut _15: !;                      // in scope 0 at $DIR/issue_107511.rs:+6:5: +8:6\n-      let mut _17: i32;                    // in scope 0 at $DIR/issue_107511.rs:+7:16: +7:20\n-      let _18: usize;                      // in scope 0 at $DIR/issue_107511.rs:+7:18: +7:19\n-      let mut _19: usize;                  // in scope 0 at $DIR/issue_107511.rs:+7:16: +7:20\n-      let mut _20: bool;                   // in scope 0 at $DIR/issue_107511.rs:+7:16: +7:20\n+      let mut _0: ();\n+      let mut _1: i32;\n+      let mut _3: std::ops::Range<usize>;\n+      let mut _4: std::ops::Range<usize>;\n+      let mut _5: usize;\n+      let mut _6: &[i32];\n+      let mut _7: &[i32; 4];\n+      let mut _9: ();\n+      let _10: ();\n+      let mut _11: std::option::Option<usize>;\n+      let mut _12: &mut std::ops::Range<usize>;\n+      let mut _13: &mut std::ops::Range<usize>;\n+      let mut _14: isize;\n+      let mut _15: !;\n+      let mut _17: i32;\n+      let _18: usize;\n+      let mut _19: usize;\n+      let mut _20: bool;\n       scope 1 {\n-          debug sum => _1;                 // in scope 1 at $DIR/issue_107511.rs:+1:9: +1:16\n-          let _2: [i32; 4];                // in scope 1 at $DIR/issue_107511.rs:+2:9: +2:10\n+          debug sum => _1;\n+          let _2: [i32; 4];\n           scope 2 {\n-              debug a => _2;               // in scope 2 at $DIR/issue_107511.rs:+2:9: +2:10\n-              let mut _8: std::ops::Range<usize>; // in scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+              debug a => _2;\n+              let mut _8: std::ops::Range<usize>;\n               scope 3 {\n-                  debug iter => _8;        // in scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-                  let _16: usize;          // in scope 3 at $DIR/issue_107511.rs:+6:9: +6:10\n+                  debug iter => _8;\n+                  let _16: usize;\n                   scope 4 {\n-                      debug i => _16;      // in scope 4 at $DIR/issue_107511.rs:+6:9: +6:10\n+                      debug i => _16;\n                   }\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue_107511.rs:+1:9: +1:16\n-          _1 = const 0_i32;                // scope 0 at $DIR/issue_107511.rs:+1:19: +1:20\n-          StorageLive(_2);                 // scope 1 at $DIR/issue_107511.rs:+2:9: +2:10\n-          _2 = [const 0_i32, const 10_i32, const 20_i32, const 30_i32]; // scope 1 at $DIR/issue_107511.rs:+2:13: +2:28\n-          StorageLive(_3);                 // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n-          StorageLive(_4);                 // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n-          StorageLive(_5);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n-          StorageLive(_6);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n-          StorageLive(_7);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n-          _7 = &_2;                        // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n-          _6 = move _7 as &[i32] (Pointer(Unsize)); // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n-          StorageDead(_7);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:18\n-          _5 = core::slice::<impl [i32]>::len(move _6) -> [return: bb1, unwind unreachable]; // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue_107511.rs:11:19: 11:22\n-                                           // + literal: Const { ty: for<'a> fn(&'a [i32]) -> usize {core::slice::<impl [i32]>::len}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = const 0_i32;\n+          StorageLive(_2);\n+          _2 = [const 0_i32, const 10_i32, const 20_i32, const 30_i32];\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          StorageLive(_6);\n+          StorageLive(_7);\n+          _7 = &_2;\n+          _6 = move _7 as &[i32] (Pointer(Unsize));\n+          StorageDead(_7);\n+          _5 = core::slice::<impl [i32]>::len(move _6) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageDead(_6);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n-          _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _5 }; // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n-          StorageDead(_5);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n-          _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind unreachable]; // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue_107511.rs:11:14: 11:24\n-                                           // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }\n+          StorageDead(_6);\n+          _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _5 };\n+          StorageDead(_5);\n+          _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind unreachable];\n       }\n   \n       bb2: {\n-          StorageDead(_4);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n-          StorageLive(_8);                 // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n-          _8 = move _3;                    // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n-          goto -> bb3;                     // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+          StorageDead(_4);\n+          StorageLive(_8);\n+          _8 = move _3;\n+          goto -> bb3;\n       }\n   \n       bb3: {\n--         StorageLive(_10);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-          StorageLive(_11);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-          StorageLive(_12);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-          StorageLive(_13);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-          _13 = &mut _8;                   // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-          _12 = &mut (*_13);               // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-          _11 = <std::ops::Range<usize> as Iterator>::next(move _12) -> [return: bb4, unwind unreachable]; // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue_107511.rs:11:14: 11:24\n-                                           // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }\n+-         StorageLive(_10);\n+          StorageLive(_11);\n+          StorageLive(_12);\n+          StorageLive(_13);\n+          _13 = &mut _8;\n+          _12 = &mut (*_13);\n+          _11 = <std::ops::Range<usize> as Iterator>::next(move _12) -> [return: bb4, unwind unreachable];\n       }\n   \n       bb4: {\n-          StorageDead(_12);                // scope 3 at $DIR/issue_107511.rs:+6:23: +6:24\n-          _14 = discriminant(_11);         // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-          switchInt(move _14) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageDead(_12);\n+          _14 = discriminant(_11);\n+          switchInt(move _14) -> [0: bb7, 1: bb5, otherwise: bb6];\n       }\n   \n       bb5: {\n--         StorageLive(_16);                // scope 3 at $DIR/issue_107511.rs:+6:9: +6:10\n-          _16 = ((_11 as Some).0: usize);  // scope 3 at $DIR/issue_107511.rs:+6:9: +6:10\n-          StorageLive(_17);                // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n--         StorageLive(_18);                // scope 4 at $DIR/issue_107511.rs:+7:18: +7:19\n--         _18 = _16;                       // scope 4 at $DIR/issue_107511.rs:+7:18: +7:19\n-          _19 = Len(_2);                   // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n--         _20 = Lt(_18, _19);              // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n--         assert(move _20, \"index out of bounds: the length is {} but the index is {}\", move _19, _18) -> [success: bb8, unwind unreachable]; // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n-+         _20 = Lt(_16, _19);              // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n-+         assert(move _20, \"index out of bounds: the length is {} but the index is {}\", move _19, _16) -> [success: bb8, unwind unreachable]; // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+-         StorageLive(_16);\n+          _16 = ((_11 as Some).0: usize);\n+          StorageLive(_17);\n+-         StorageLive(_18);\n+-         _18 = _16;\n+          _19 = Len(_2);\n+-         _20 = Lt(_18, _19);\n+-         assert(move _20, \"index out of bounds: the length is {} but the index is {}\", move _19, _18) -> [success: bb8, unwind unreachable];\n++         _20 = Lt(_16, _19);\n++         assert(move _20, \"index out of bounds: the length is {} but the index is {}\", move _19, _16) -> [success: bb8, unwind unreachable];\n       }\n   \n       bb6: {\n-          unreachable;                     // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          unreachable;\n       }\n   \n       bb7: {\n-          _0 = const ();                   // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n-          StorageDead(_13);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n-          StorageDead(_11);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n--         StorageDead(_10);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n-          StorageDead(_8);                 // scope 2 at $DIR/issue_107511.rs:+8:5: +8:6\n-          StorageDead(_3);                 // scope 2 at $DIR/issue_107511.rs:+8:5: +8:6\n-          StorageDead(_2);                 // scope 1 at $DIR/issue_107511.rs:+9:1: +9:2\n-          StorageDead(_1);                 // scope 0 at $DIR/issue_107511.rs:+9:1: +9:2\n-          return;                          // scope 0 at $DIR/issue_107511.rs:+9:2: +9:2\n+          _0 = const ();\n+          StorageDead(_13);\n+          StorageDead(_11);\n+-         StorageDead(_10);\n+          StorageDead(_8);\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   \n       bb8: {\n--         _17 = _2[_18];                   // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n-+         _17 = _2[_16];                   // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n-          _1 = Add(_1, move _17);          // scope 4 at $DIR/issue_107511.rs:+7:9: +7:20\n-          StorageDead(_17);                // scope 4 at $DIR/issue_107511.rs:+7:19: +7:20\n--         StorageDead(_18);                // scope 4 at $DIR/issue_107511.rs:+7:20: +7:21\n--         _10 = const ();                  // scope 4 at $DIR/issue_107511.rs:+6:25: +8:6\n--         StorageDead(_16);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n-          StorageDead(_13);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n-          StorageDead(_11);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n--         StorageDead(_10);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n--         _9 = const ();                   // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n-          goto -> bb3;                     // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+-         _17 = _2[_18];\n++         _17 = _2[_16];\n+          _1 = Add(_1, move _17);\n+          StorageDead(_17);\n+-         StorageDead(_18);\n+-         _10 = const ();\n+-         StorageDead(_16);\n+          StorageDead(_13);\n+          StorageDead(_11);\n+-         StorageDead(_10);\n+-         _9 = const ();\n+          goto -> bb3;\n       }\n   }\n   "}, {"sha": "69f399bf1fa19dd1060ff16c8ae2b3f2133075cb", "filename": "tests/mir-opt/copy-prop/issue_107511.main.CopyProp.panic-unwind.diff", "status": "modified", "additions": 88, "deletions": 97, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,137 +2,128 @@\n + // MIR for `main` after CopyProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue_107511.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/issue_107511.rs:+1:9: +1:16\n-      let mut _3: std::ops::Range<usize>;  // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n-      let mut _4: std::ops::Range<usize>;  // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n-      let mut _5: usize;                   // in scope 0 at $DIR/issue_107511.rs:+6:17: +6:24\n-      let mut _6: &[i32];                  // in scope 0 at $DIR/issue_107511.rs:+6:17: +6:24\n-      let mut _7: &[i32; 4];               // in scope 0 at $DIR/issue_107511.rs:+6:17: +6:24\n-      let mut _9: ();                      // in scope 0 at $DIR/issue_107511.rs:+0:1: +9:2\n-      let _10: ();                         // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n-      let mut _11: std::option::Option<usize>; // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n-      let mut _12: &mut std::ops::Range<usize>; // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n-      let mut _13: &mut std::ops::Range<usize>; // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n-      let mut _14: isize;                  // in scope 0 at $DIR/issue_107511.rs:+6:5: +8:6\n-      let mut _15: !;                      // in scope 0 at $DIR/issue_107511.rs:+6:5: +8:6\n-      let mut _17: i32;                    // in scope 0 at $DIR/issue_107511.rs:+7:16: +7:20\n-      let _18: usize;                      // in scope 0 at $DIR/issue_107511.rs:+7:18: +7:19\n-      let mut _19: usize;                  // in scope 0 at $DIR/issue_107511.rs:+7:16: +7:20\n-      let mut _20: bool;                   // in scope 0 at $DIR/issue_107511.rs:+7:16: +7:20\n+      let mut _0: ();\n+      let mut _1: i32;\n+      let mut _3: std::ops::Range<usize>;\n+      let mut _4: std::ops::Range<usize>;\n+      let mut _5: usize;\n+      let mut _6: &[i32];\n+      let mut _7: &[i32; 4];\n+      let mut _9: ();\n+      let _10: ();\n+      let mut _11: std::option::Option<usize>;\n+      let mut _12: &mut std::ops::Range<usize>;\n+      let mut _13: &mut std::ops::Range<usize>;\n+      let mut _14: isize;\n+      let mut _15: !;\n+      let mut _17: i32;\n+      let _18: usize;\n+      let mut _19: usize;\n+      let mut _20: bool;\n       scope 1 {\n-          debug sum => _1;                 // in scope 1 at $DIR/issue_107511.rs:+1:9: +1:16\n-          let _2: [i32; 4];                // in scope 1 at $DIR/issue_107511.rs:+2:9: +2:10\n+          debug sum => _1;\n+          let _2: [i32; 4];\n           scope 2 {\n-              debug a => _2;               // in scope 2 at $DIR/issue_107511.rs:+2:9: +2:10\n-              let mut _8: std::ops::Range<usize>; // in scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+              debug a => _2;\n+              let mut _8: std::ops::Range<usize>;\n               scope 3 {\n-                  debug iter => _8;        // in scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-                  let _16: usize;          // in scope 3 at $DIR/issue_107511.rs:+6:9: +6:10\n+                  debug iter => _8;\n+                  let _16: usize;\n                   scope 4 {\n-                      debug i => _16;      // in scope 4 at $DIR/issue_107511.rs:+6:9: +6:10\n+                      debug i => _16;\n                   }\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue_107511.rs:+1:9: +1:16\n-          _1 = const 0_i32;                // scope 0 at $DIR/issue_107511.rs:+1:19: +1:20\n-          StorageLive(_2);                 // scope 1 at $DIR/issue_107511.rs:+2:9: +2:10\n-          _2 = [const 0_i32, const 10_i32, const 20_i32, const 30_i32]; // scope 1 at $DIR/issue_107511.rs:+2:13: +2:28\n-          StorageLive(_3);                 // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n-          StorageLive(_4);                 // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n-          StorageLive(_5);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n-          StorageLive(_6);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n-          StorageLive(_7);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n-          _7 = &_2;                        // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n-          _6 = move _7 as &[i32] (Pointer(Unsize)); // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n-          StorageDead(_7);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:18\n-          _5 = core::slice::<impl [i32]>::len(move _6) -> bb1; // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue_107511.rs:11:19: 11:22\n-                                           // + literal: Const { ty: for<'a> fn(&'a [i32]) -> usize {core::slice::<impl [i32]>::len}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = const 0_i32;\n+          StorageLive(_2);\n+          _2 = [const 0_i32, const 10_i32, const 20_i32, const 30_i32];\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          StorageLive(_6);\n+          StorageLive(_7);\n+          _7 = &_2;\n+          _6 = move _7 as &[i32] (Pointer(Unsize));\n+          StorageDead(_7);\n+          _5 = core::slice::<impl [i32]>::len(move _6) -> bb1;\n       }\n   \n       bb1: {\n-          StorageDead(_6);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n-          _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _5 }; // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n-          StorageDead(_5);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n-          _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> bb2; // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue_107511.rs:11:14: 11:24\n-                                           // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }\n+          StorageDead(_6);\n+          _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _5 };\n+          StorageDead(_5);\n+          _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> bb2;\n       }\n   \n       bb2: {\n-          StorageDead(_4);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n-          StorageLive(_8);                 // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n-          _8 = move _3;                    // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n-          goto -> bb3;                     // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+          StorageDead(_4);\n+          StorageLive(_8);\n+          _8 = move _3;\n+          goto -> bb3;\n       }\n   \n       bb3: {\n--         StorageLive(_10);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-          StorageLive(_11);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-          StorageLive(_12);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-          StorageLive(_13);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-          _13 = &mut _8;                   // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-          _12 = &mut (*_13);               // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-          _11 = <std::ops::Range<usize> as Iterator>::next(move _12) -> bb4; // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue_107511.rs:11:14: 11:24\n-                                           // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }\n+-         StorageLive(_10);\n+          StorageLive(_11);\n+          StorageLive(_12);\n+          StorageLive(_13);\n+          _13 = &mut _8;\n+          _12 = &mut (*_13);\n+          _11 = <std::ops::Range<usize> as Iterator>::next(move _12) -> bb4;\n       }\n   \n       bb4: {\n-          StorageDead(_12);                // scope 3 at $DIR/issue_107511.rs:+6:23: +6:24\n-          _14 = discriminant(_11);         // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n-          switchInt(move _14) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageDead(_12);\n+          _14 = discriminant(_11);\n+          switchInt(move _14) -> [0: bb7, 1: bb5, otherwise: bb6];\n       }\n   \n       bb5: {\n--         StorageLive(_16);                // scope 3 at $DIR/issue_107511.rs:+6:9: +6:10\n-          _16 = ((_11 as Some).0: usize);  // scope 3 at $DIR/issue_107511.rs:+6:9: +6:10\n-          StorageLive(_17);                // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n--         StorageLive(_18);                // scope 4 at $DIR/issue_107511.rs:+7:18: +7:19\n--         _18 = _16;                       // scope 4 at $DIR/issue_107511.rs:+7:18: +7:19\n-          _19 = Len(_2);                   // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n--         _20 = Lt(_18, _19);              // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n--         assert(move _20, \"index out of bounds: the length is {} but the index is {}\", move _19, _18) -> bb8; // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n-+         _20 = Lt(_16, _19);              // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n-+         assert(move _20, \"index out of bounds: the length is {} but the index is {}\", move _19, _16) -> bb8; // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+-         StorageLive(_16);\n+          _16 = ((_11 as Some).0: usize);\n+          StorageLive(_17);\n+-         StorageLive(_18);\n+-         _18 = _16;\n+          _19 = Len(_2);\n+-         _20 = Lt(_18, _19);\n+-         assert(move _20, \"index out of bounds: the length is {} but the index is {}\", move _19, _18) -> bb8;\n++         _20 = Lt(_16, _19);\n++         assert(move _20, \"index out of bounds: the length is {} but the index is {}\", move _19, _16) -> bb8;\n       }\n   \n       bb6: {\n-          unreachable;                     // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          unreachable;\n       }\n   \n       bb7: {\n-          _0 = const ();                   // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n-          StorageDead(_13);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n-          StorageDead(_11);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n--         StorageDead(_10);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n-          StorageDead(_8);                 // scope 2 at $DIR/issue_107511.rs:+8:5: +8:6\n-          StorageDead(_3);                 // scope 2 at $DIR/issue_107511.rs:+8:5: +8:6\n-          StorageDead(_2);                 // scope 1 at $DIR/issue_107511.rs:+9:1: +9:2\n-          StorageDead(_1);                 // scope 0 at $DIR/issue_107511.rs:+9:1: +9:2\n-          return;                          // scope 0 at $DIR/issue_107511.rs:+9:2: +9:2\n+          _0 = const ();\n+          StorageDead(_13);\n+          StorageDead(_11);\n+-         StorageDead(_10);\n+          StorageDead(_8);\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   \n       bb8: {\n--         _17 = _2[_18];                   // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n-+         _17 = _2[_16];                   // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n-          _1 = Add(_1, move _17);          // scope 4 at $DIR/issue_107511.rs:+7:9: +7:20\n-          StorageDead(_17);                // scope 4 at $DIR/issue_107511.rs:+7:19: +7:20\n--         StorageDead(_18);                // scope 4 at $DIR/issue_107511.rs:+7:20: +7:21\n--         _10 = const ();                  // scope 4 at $DIR/issue_107511.rs:+6:25: +8:6\n--         StorageDead(_16);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n-          StorageDead(_13);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n-          StorageDead(_11);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n--         StorageDead(_10);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n--         _9 = const ();                   // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n-          goto -> bb3;                     // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+-         _17 = _2[_18];\n++         _17 = _2[_16];\n+          _1 = Add(_1, move _17);\n+          StorageDead(_17);\n+-         StorageDead(_18);\n+-         _10 = const ();\n+-         StorageDead(_16);\n+          StorageDead(_13);\n+          StorageDead(_11);\n+-         StorageDead(_10);\n+-         _9 = const ();\n+          goto -> bb3;\n       }\n   }\n   "}, {"sha": "cf04f213efb91435e0814180d55fc37d67aaa9c7", "filename": "tests/mir-opt/copy-prop/move_arg.f.CopyProp.panic-abort.diff", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,39 +2,36 @@\n + // MIR for `f` after CopyProp\n   \n   fn f(_1: T) -> () {\n-      debug a => _1;                       // in scope 0 at $DIR/move_arg.rs:+0:19: +0:20\n-      let mut _0: ();                      // return place in scope 0 at $DIR/move_arg.rs:+0:25: +0:25\n-      let _2: T;                           // in scope 0 at $DIR/move_arg.rs:+1:9: +1:10\n-      let _3: ();                          // in scope 0 at $DIR/move_arg.rs:+2:5: +2:12\n-      let mut _4: T;                       // in scope 0 at $DIR/move_arg.rs:+2:7: +2:8\n-      let mut _5: T;                       // in scope 0 at $DIR/move_arg.rs:+2:10: +2:11\n+      debug a => _1;\n+      let mut _0: ();\n+      let _2: T;\n+      let _3: ();\n+      let mut _4: T;\n+      let mut _5: T;\n       scope 1 {\n--         debug b => _2;                   // in scope 1 at $DIR/move_arg.rs:+1:9: +1:10\n-+         debug b => _1;                   // in scope 1 at $DIR/move_arg.rs:+1:9: +1:10\n+-         debug b => _2;\n++         debug b => _1;\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/move_arg.rs:+1:9: +1:10\n--         _2 = _1;                         // scope 0 at $DIR/move_arg.rs:+1:13: +1:14\n-          StorageLive(_3);                 // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n--         StorageLive(_4);                 // scope 1 at $DIR/move_arg.rs:+2:7: +2:8\n--         _4 = _1;                         // scope 1 at $DIR/move_arg.rs:+2:7: +2:8\n--         StorageLive(_5);                 // scope 1 at $DIR/move_arg.rs:+2:10: +2:11\n--         _5 = _2;                         // scope 1 at $DIR/move_arg.rs:+2:10: +2:11\n--         _3 = g::<T>(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n-+         _3 = g::<T>(_1, _1) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n-                                           // mir::Constant\n-                                           // + span: $DIR/move_arg.rs:8:5: 8:6\n-                                           // + literal: Const { ty: fn(T, T) {g::<T>}, val: Value(<ZST>) }\n+-         StorageLive(_2);\n+-         _2 = _1;\n+          StorageLive(_3);\n+-         StorageLive(_4);\n+-         _4 = _1;\n+-         StorageLive(_5);\n+-         _5 = _2;\n+-         _3 = g::<T>(move _4, move _5) -> [return: bb1, unwind unreachable];\n++         _3 = g::<T>(_1, _1) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         StorageDead(_5);                 // scope 1 at $DIR/move_arg.rs:+2:11: +2:12\n--         StorageDead(_4);                 // scope 1 at $DIR/move_arg.rs:+2:11: +2:12\n-          StorageDead(_3);                 // scope 1 at $DIR/move_arg.rs:+2:12: +2:13\n-          _0 = const ();                   // scope 0 at $DIR/move_arg.rs:+0:25: +3:2\n--         StorageDead(_2);                 // scope 0 at $DIR/move_arg.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/move_arg.rs:+3:2: +3:2\n+-         StorageDead(_5);\n+-         StorageDead(_4);\n+          StorageDead(_3);\n+          _0 = const ();\n+-         StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "cbbf6686b0492c57d9866fc52a9f0e7091123efc", "filename": "tests/mir-opt/copy-prop/move_arg.f.CopyProp.panic-unwind.diff", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,39 +2,36 @@\n + // MIR for `f` after CopyProp\n   \n   fn f(_1: T) -> () {\n-      debug a => _1;                       // in scope 0 at $DIR/move_arg.rs:+0:19: +0:20\n-      let mut _0: ();                      // return place in scope 0 at $DIR/move_arg.rs:+0:25: +0:25\n-      let _2: T;                           // in scope 0 at $DIR/move_arg.rs:+1:9: +1:10\n-      let _3: ();                          // in scope 0 at $DIR/move_arg.rs:+2:5: +2:12\n-      let mut _4: T;                       // in scope 0 at $DIR/move_arg.rs:+2:7: +2:8\n-      let mut _5: T;                       // in scope 0 at $DIR/move_arg.rs:+2:10: +2:11\n+      debug a => _1;\n+      let mut _0: ();\n+      let _2: T;\n+      let _3: ();\n+      let mut _4: T;\n+      let mut _5: T;\n       scope 1 {\n--         debug b => _2;                   // in scope 1 at $DIR/move_arg.rs:+1:9: +1:10\n-+         debug b => _1;                   // in scope 1 at $DIR/move_arg.rs:+1:9: +1:10\n+-         debug b => _2;\n++         debug b => _1;\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/move_arg.rs:+1:9: +1:10\n--         _2 = _1;                         // scope 0 at $DIR/move_arg.rs:+1:13: +1:14\n-          StorageLive(_3);                 // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n--         StorageLive(_4);                 // scope 1 at $DIR/move_arg.rs:+2:7: +2:8\n--         _4 = _1;                         // scope 1 at $DIR/move_arg.rs:+2:7: +2:8\n--         StorageLive(_5);                 // scope 1 at $DIR/move_arg.rs:+2:10: +2:11\n--         _5 = _2;                         // scope 1 at $DIR/move_arg.rs:+2:10: +2:11\n--         _3 = g::<T>(move _4, move _5) -> bb1; // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n-+         _3 = g::<T>(_1, _1) -> bb1;      // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n-                                           // mir::Constant\n-                                           // + span: $DIR/move_arg.rs:8:5: 8:6\n-                                           // + literal: Const { ty: fn(T, T) {g::<T>}, val: Value(<ZST>) }\n+-         StorageLive(_2);\n+-         _2 = _1;\n+          StorageLive(_3);\n+-         StorageLive(_4);\n+-         _4 = _1;\n+-         StorageLive(_5);\n+-         _5 = _2;\n+-         _3 = g::<T>(move _4, move _5) -> bb1;\n++         _3 = g::<T>(_1, _1) -> bb1;\n       }\n   \n       bb1: {\n--         StorageDead(_5);                 // scope 1 at $DIR/move_arg.rs:+2:11: +2:12\n--         StorageDead(_4);                 // scope 1 at $DIR/move_arg.rs:+2:11: +2:12\n-          StorageDead(_3);                 // scope 1 at $DIR/move_arg.rs:+2:12: +2:13\n-          _0 = const ();                   // scope 0 at $DIR/move_arg.rs:+0:25: +3:2\n--         StorageDead(_2);                 // scope 0 at $DIR/move_arg.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/move_arg.rs:+3:2: +3:2\n+-         StorageDead(_5);\n+-         StorageDead(_4);\n+          StorageDead(_3);\n+          _0 = const ();\n+-         StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "b2b89968d70b034500b95229a9d42e60d011adb8", "filename": "tests/mir-opt/copy-prop/move_projection.f.CopyProp.panic-abort.diff", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,30 +2,24 @@\n + // MIR for `f` after CopyProp\n   \n   fn f(_1: Foo) -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/move_projection.rs:+0:17: +0:21\n-      let mut _2: Foo;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _3: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _0: bool;\n+      let mut _2: Foo;\n+      let mut _3: u8;\n   \n       bb0: {\n--         _2 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n--         _3 = move (_2.0: u8);            // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n--         _0 = opaque::<Foo>(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/move_projection.rs:+6:13: +6:44\n-+         _3 = (_1.0: u8);                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-+         _0 = opaque::<Foo>(_1) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/move_projection.rs:+6:13: +6:44\n-                                           // mir::Constant\n-                                           // + span: $DIR/move_projection.rs:20:28: 20:34\n-                                           // + literal: Const { ty: fn(Foo) -> bool {opaque::<Foo>}, val: Value(<ZST>) }\n+-         _2 = _1;\n+-         _3 = move (_2.0: u8);\n+-         _0 = opaque::<Foo>(move _1) -> [return: bb1, unwind unreachable];\n++         _3 = (_1.0: u8);\n++         _0 = opaque::<Foo>(_1) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          _0 = opaque::<u8>(move _3) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/move_projection.rs:+9:13: +9:44\n-                                           // mir::Constant\n-                                           // + span: $DIR/move_projection.rs:23:28: 23:34\n-                                           // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }\n+          _0 = opaque::<u8>(move _3) -> [return: bb2, unwind unreachable];\n       }\n   \n       bb2: {\n-          return;                          // scope 0 at $DIR/move_projection.rs:+12:13: +12:21\n+          return;\n       }\n   }\n   "}, {"sha": "3ebee0ed80d4247109428418debee45b2c971ceb", "filename": "tests/mir-opt/copy-prop/move_projection.f.CopyProp.panic-unwind.diff", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,30 +2,24 @@\n + // MIR for `f` after CopyProp\n   \n   fn f(_1: Foo) -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/move_projection.rs:+0:17: +0:21\n-      let mut _2: Foo;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _3: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _0: bool;\n+      let mut _2: Foo;\n+      let mut _3: u8;\n   \n       bb0: {\n--         _2 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n--         _3 = move (_2.0: u8);            // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n--         _0 = opaque::<Foo>(move _1) -> bb1; // scope 0 at $DIR/move_projection.rs:+6:13: +6:44\n-+         _3 = (_1.0: u8);                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-+         _0 = opaque::<Foo>(_1) -> bb1;   // scope 0 at $DIR/move_projection.rs:+6:13: +6:44\n-                                           // mir::Constant\n-                                           // + span: $DIR/move_projection.rs:20:28: 20:34\n-                                           // + literal: Const { ty: fn(Foo) -> bool {opaque::<Foo>}, val: Value(<ZST>) }\n+-         _2 = _1;\n+-         _3 = move (_2.0: u8);\n+-         _0 = opaque::<Foo>(move _1) -> bb1;\n++         _3 = (_1.0: u8);\n++         _0 = opaque::<Foo>(_1) -> bb1;\n       }\n   \n       bb1: {\n-          _0 = opaque::<u8>(move _3) -> bb2; // scope 0 at $DIR/move_projection.rs:+9:13: +9:44\n-                                           // mir::Constant\n-                                           // + span: $DIR/move_projection.rs:23:28: 23:34\n-                                           // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }\n+          _0 = opaque::<u8>(move _3) -> bb2;\n       }\n   \n       bb2: {\n-          return;                          // scope 0 at $DIR/move_projection.rs:+12:13: +12:21\n+          return;\n       }\n   }\n   "}, {"sha": "7f6802beeae2fd395c33c48d3ffad3806060dd9c", "filename": "tests/mir-opt/copy-prop/mutate_through_pointer.f.CopyProp.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fmutate_through_pointer.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fmutate_through_pointer.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmutate_through_pointer.f.CopyProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,18 +2,18 @@\n + // MIR for `f` after CopyProp\n   \n   fn f(_1: bool) -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/mutate_through_pointer.rs:+0:18: +0:22\n-      let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _3: *const bool;             // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _4: *mut bool;               // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _0: bool;\n+      let mut _2: bool;\n+      let mut _3: *const bool;\n+      let mut _4: *mut bool;\n   \n       bb0: {\n-          _2 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-          _3 = &raw const _2;              // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-          _4 = &raw mut (*_3);             // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-          (*_4) = const false;             // scope 0 at $DIR/mutate_through_pointer.rs:+5:9: +5:20\n-          _0 = _1;                         // scope 0 at $DIR/mutate_through_pointer.rs:+6:9: +6:16\n-          return;                          // scope 0 at $DIR/mutate_through_pointer.rs:+7:9: +7:17\n+          _2 = _1;\n+          _3 = &raw const _2;\n+          _4 = &raw mut (*_3);\n+          (*_4) = const false;\n+          _0 = _1;\n+          return;\n       }\n   }\n   "}, {"sha": "5bf2335943cf626034811ec271b691cd8e00441b", "filename": "tests/mir-opt/copy-prop/non_dominate.f.CopyProp.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fnon_dominate.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fnon_dominate.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fnon_dominate.f.CopyProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,28 +2,28 @@\n + // MIR for `f` after CopyProp\n   \n   fn f(_1: bool) -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/non_dominate.rs:+0:18: +0:22\n-      let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _3: bool;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _0: bool;\n+      let mut _2: bool;\n+      let mut _3: bool;\n   \n       bb0: {\n-          goto -> bb1;                     // scope 0 at $DIR/non_dominate.rs:+4:11: +4:20\n+          goto -> bb1;\n       }\n   \n       bb1: {\n-          _3 = _1;                         // scope 0 at $DIR/non_dominate.rs:+5:17: +5:22\n-          switchInt(_3) -> [0: bb3, otherwise: bb2]; // scope 0 at $DIR/non_dominate.rs:+5:24: +5:58\n+          _3 = _1;\n+          switchInt(_3) -> [0: bb3, otherwise: bb2];\n       }\n   \n       bb2: {\n-          _2 = _3;                         // scope 0 at $DIR/non_dominate.rs:+8:17: +8:22\n-          _1 = const false;                // scope 0 at $DIR/non_dominate.rs:+8:24: +8:33\n-          goto -> bb1;                     // scope 0 at $DIR/non_dominate.rs:+8:35: +8:44\n+          _2 = _3;\n+          _1 = const false;\n+          goto -> bb1;\n       }\n   \n       bb3: {\n-          _0 = _2;                         // scope 0 at $DIR/non_dominate.rs:+9:17: +9:24\n-          return;                          // scope 0 at $DIR/non_dominate.rs:+9:26: +9:34\n+          _0 = _2;\n+          return;\n       }\n   }\n   "}, {"sha": "7094ee39192137d9c3f11a45993bf7b5b513b43f", "filename": "tests/mir-opt/copy-prop/partial_init.main.CopyProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fpartial_init.main.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Fpartial_init.main.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fpartial_init.main.CopyProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,12 +2,12 @@\n + // MIR for `main` after CopyProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/partial_init.rs:+0:15: +0:15\n-      let mut _1: (isize,);                // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _0: ();\n+      let mut _1: (isize,);\n   \n       bb0: {\n-          (_1.0: isize) = const 1_isize;   // scope 0 at $DIR/partial_init.rs:+4:13: +4:20\n-          return;                          // scope 0 at $DIR/partial_init.rs:+5:13: +5:21\n+          (_1.0: isize) = const 1_isize;\n+          return;\n       }\n   }\n   "}, {"sha": "ffb0c4b23fb27babce0d105f851e0ba631ccb59f", "filename": "tests/mir-opt/copy-prop/reborrow.demiraw.CopyProp.panic-abort.diff", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,55 +2,52 @@\n + // MIR for `demiraw` after CopyProp\n   \n   fn demiraw(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:12: +0:17\n-      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:23: +0:23\n-      let _2: *mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-      let mut _4: &mut u8;                 // in scope 0 at $DIR/reborrow.rs:+2:22: +2:29\n-      let _6: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n-      let mut _7: *mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n+      debug x => _1;\n+      let mut _0: ();\n+      let _2: *mut u8;\n+      let mut _4: &mut u8;\n+      let _6: ();\n+      let mut _7: *mut u8;\n       scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n-          let _3: &mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          debug a => _2;\n+          let _3: &mut u8;\n           scope 2 {\n-              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n-              let _5: *mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              debug b => _3;\n+              let _5: *mut u8;\n               scope 4 {\n--                 debug c => _5;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n-+                 debug c => _2;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n+-                 debug c => _5;\n++                 debug c => _2;\n               }\n           }\n           scope 3 {\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-          _2 = &raw mut _1;                // scope 0 at $DIR/reborrow.rs:+1:13: +1:23\n-          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n-          StorageLive(_4);                 // scope 1 at $DIR/reborrow.rs:+2:22: +2:29\n-          _4 = &mut (*_2);                 // scope 3 at $DIR/reborrow.rs:+2:22: +2:29\n-          _3 = &mut (*_4);                 // scope 1 at $DIR/reborrow.rs:+2:22: +2:29\n-          StorageDead(_4);                 // scope 1 at $DIR/reborrow.rs:+2:31: +2:32\n--         StorageLive(_5);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n--         _5 = _2;                         // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n-          StorageLive(_6);                 // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n--         StorageLive(_7);                 // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n--         _7 = _5;                         // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n--         _6 = opaque::<*mut u8>(move _7) -> [return: bb1, unwind unreachable]; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n-+         _6 = opaque::<*mut u8>(_2) -> [return: bb1, unwind unreachable]; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n-                                           // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:39:5: 39:11\n-                                           // + literal: Const { ty: fn(*mut u8) {opaque::<*mut u8>}, val: Value(<ZST>) }\n+-         StorageLive(_2);\n+          _2 = &raw mut _1;\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          _4 = &mut (*_2);\n+          _3 = &mut (*_4);\n+          StorageDead(_4);\n+-         StorageLive(_5);\n+-         _5 = _2;\n+          StorageLive(_6);\n+-         StorageLive(_7);\n+-         _7 = _5;\n+-         _6 = opaque::<*mut u8>(move _7) -> [return: bb1, unwind unreachable];\n++         _6 = opaque::<*mut u8>(_2) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         StorageDead(_7);                 // scope 4 at $DIR/reborrow.rs:+4:13: +4:14\n-          StorageDead(_6);                 // scope 4 at $DIR/reborrow.rs:+4:14: +4:15\n-          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:23: +5:2\n--         StorageDead(_5);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n-          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n--         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n+-         StorageDead(_7);\n+          StorageDead(_6);\n+          _0 = const ();\n+-         StorageDead(_5);\n+          StorageDead(_3);\n+-         StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "0f14b53e9ade789b89f06cf1588ddf35c6ba363c", "filename": "tests/mir-opt/copy-prop/reborrow.demiraw.CopyProp.panic-unwind.diff", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,55 +2,52 @@\n + // MIR for `demiraw` after CopyProp\n   \n   fn demiraw(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:12: +0:17\n-      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:23: +0:23\n-      let _2: *mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-      let mut _4: &mut u8;                 // in scope 0 at $DIR/reborrow.rs:+2:22: +2:29\n-      let _6: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n-      let mut _7: *mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n+      debug x => _1;\n+      let mut _0: ();\n+      let _2: *mut u8;\n+      let mut _4: &mut u8;\n+      let _6: ();\n+      let mut _7: *mut u8;\n       scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n-          let _3: &mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          debug a => _2;\n+          let _3: &mut u8;\n           scope 2 {\n-              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n-              let _5: *mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              debug b => _3;\n+              let _5: *mut u8;\n               scope 4 {\n--                 debug c => _5;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n-+                 debug c => _2;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n+-                 debug c => _5;\n++                 debug c => _2;\n               }\n           }\n           scope 3 {\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-          _2 = &raw mut _1;                // scope 0 at $DIR/reborrow.rs:+1:13: +1:23\n-          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n-          StorageLive(_4);                 // scope 1 at $DIR/reborrow.rs:+2:22: +2:29\n-          _4 = &mut (*_2);                 // scope 3 at $DIR/reborrow.rs:+2:22: +2:29\n-          _3 = &mut (*_4);                 // scope 1 at $DIR/reborrow.rs:+2:22: +2:29\n-          StorageDead(_4);                 // scope 1 at $DIR/reborrow.rs:+2:31: +2:32\n--         StorageLive(_5);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n--         _5 = _2;                         // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n-          StorageLive(_6);                 // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n--         StorageLive(_7);                 // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n--         _7 = _5;                         // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n--         _6 = opaque::<*mut u8>(move _7) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n-+         _6 = opaque::<*mut u8>(_2) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n-                                           // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:39:5: 39:11\n-                                           // + literal: Const { ty: fn(*mut u8) {opaque::<*mut u8>}, val: Value(<ZST>) }\n+-         StorageLive(_2);\n+          _2 = &raw mut _1;\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          _4 = &mut (*_2);\n+          _3 = &mut (*_4);\n+          StorageDead(_4);\n+-         StorageLive(_5);\n+-         _5 = _2;\n+          StorageLive(_6);\n+-         StorageLive(_7);\n+-         _7 = _5;\n+-         _6 = opaque::<*mut u8>(move _7) -> bb1;\n++         _6 = opaque::<*mut u8>(_2) -> bb1;\n       }\n   \n       bb1: {\n--         StorageDead(_7);                 // scope 4 at $DIR/reborrow.rs:+4:13: +4:14\n-          StorageDead(_6);                 // scope 4 at $DIR/reborrow.rs:+4:14: +4:15\n-          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:23: +5:2\n--         StorageDead(_5);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n-          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n--         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n+-         StorageDead(_7);\n+          StorageDead(_6);\n+          _0 = const ();\n+-         StorageDead(_5);\n+          StorageDead(_3);\n+-         StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "0777a9135235f7e464b87431ef247dcf2311a3c2", "filename": "tests/mir-opt/copy-prop/reborrow.miraw.CopyProp.panic-abort.diff", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,51 +2,48 @@\n + // MIR for `miraw` after CopyProp\n   \n   fn miraw(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:10: +0:15\n-      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:21: +0:21\n-      let _2: *mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-      let _5: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n-      let mut _6: *mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n+      debug x => _1;\n+      let mut _0: ();\n+      let _2: *mut u8;\n+      let _5: ();\n+      let mut _6: *mut u8;\n       scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n-          let _3: *mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          debug a => _2;\n+          let _3: *mut u8;\n           scope 2 {\n-              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n-              let _4: *mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              debug b => _3;\n+              let _4: *mut u8;\n               scope 4 {\n--                 debug c => _4;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n-+                 debug c => _2;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n+-                 debug c => _4;\n++                 debug c => _2;\n               }\n           }\n           scope 3 {\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-          _2 = &raw mut _1;                // scope 0 at $DIR/reborrow.rs:+1:13: +1:23\n-          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n-          _3 = &raw mut (*_2);             // scope 3 at $DIR/reborrow.rs:+2:22: +2:33\n--         StorageLive(_4);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n--         _4 = _2;                         // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n-          StorageLive(_5);                 // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n--         StorageLive(_6);                 // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n--         _6 = _4;                         // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n--         _5 = opaque::<*mut u8>(move _6) -> [return: bb1, unwind unreachable]; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n-+         _5 = opaque::<*mut u8>(_2) -> [return: bb1, unwind unreachable]; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n-                                           // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:31:5: 31:11\n-                                           // + literal: Const { ty: fn(*mut u8) {opaque::<*mut u8>}, val: Value(<ZST>) }\n+-         StorageLive(_2);\n+          _2 = &raw mut _1;\n+          StorageLive(_3);\n+          _3 = &raw mut (*_2);\n+-         StorageLive(_4);\n+-         _4 = _2;\n+          StorageLive(_5);\n+-         StorageLive(_6);\n+-         _6 = _4;\n+-         _5 = opaque::<*mut u8>(move _6) -> [return: bb1, unwind unreachable];\n++         _5 = opaque::<*mut u8>(_2) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         StorageDead(_6);                 // scope 4 at $DIR/reborrow.rs:+4:13: +4:14\n-          StorageDead(_5);                 // scope 4 at $DIR/reborrow.rs:+4:14: +4:15\n-          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +5:2\n--         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n-          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n--         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n+-         StorageDead(_6);\n+          StorageDead(_5);\n+          _0 = const ();\n+-         StorageDead(_4);\n+          StorageDead(_3);\n+-         StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "ba6e09fa95c6fc210abf6786000fbd55ebbba04a", "filename": "tests/mir-opt/copy-prop/reborrow.miraw.CopyProp.panic-unwind.diff", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,51 +2,48 @@\n + // MIR for `miraw` after CopyProp\n   \n   fn miraw(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:10: +0:15\n-      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:21: +0:21\n-      let _2: *mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-      let _5: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n-      let mut _6: *mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n+      debug x => _1;\n+      let mut _0: ();\n+      let _2: *mut u8;\n+      let _5: ();\n+      let mut _6: *mut u8;\n       scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n-          let _3: *mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          debug a => _2;\n+          let _3: *mut u8;\n           scope 2 {\n-              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n-              let _4: *mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              debug b => _3;\n+              let _4: *mut u8;\n               scope 4 {\n--                 debug c => _4;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n-+                 debug c => _2;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n+-                 debug c => _4;\n++                 debug c => _2;\n               }\n           }\n           scope 3 {\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-          _2 = &raw mut _1;                // scope 0 at $DIR/reborrow.rs:+1:13: +1:23\n-          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n-          _3 = &raw mut (*_2);             // scope 3 at $DIR/reborrow.rs:+2:22: +2:33\n--         StorageLive(_4);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n--         _4 = _2;                         // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n-          StorageLive(_5);                 // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n--         StorageLive(_6);                 // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n--         _6 = _4;                         // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n--         _5 = opaque::<*mut u8>(move _6) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n-+         _5 = opaque::<*mut u8>(_2) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n-                                           // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:31:5: 31:11\n-                                           // + literal: Const { ty: fn(*mut u8) {opaque::<*mut u8>}, val: Value(<ZST>) }\n+-         StorageLive(_2);\n+          _2 = &raw mut _1;\n+          StorageLive(_3);\n+          _3 = &raw mut (*_2);\n+-         StorageLive(_4);\n+-         _4 = _2;\n+          StorageLive(_5);\n+-         StorageLive(_6);\n+-         _6 = _4;\n+-         _5 = opaque::<*mut u8>(move _6) -> bb1;\n++         _5 = opaque::<*mut u8>(_2) -> bb1;\n       }\n   \n       bb1: {\n--         StorageDead(_6);                 // scope 4 at $DIR/reborrow.rs:+4:13: +4:14\n-          StorageDead(_5);                 // scope 4 at $DIR/reborrow.rs:+4:14: +4:15\n-          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +5:2\n--         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n-          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n--         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n+-         StorageDead(_6);\n+          StorageDead(_5);\n+          _0 = const ();\n+-         StorageDead(_4);\n+          StorageDead(_3);\n+-         StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "2026c1982f299cf382c592c3cbcd7ae8cd59e22a", "filename": "tests/mir-opt/copy-prop/reborrow.remut.CopyProp.panic-abort.diff", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,49 +2,46 @@\n + // MIR for `remut` after CopyProp\n   \n   fn remut(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:10: +0:15\n-      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:21: +0:21\n-      let _2: &mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-      let _5: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n-      let mut _6: &mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n+      debug x => _1;\n+      let mut _0: ();\n+      let _2: &mut u8;\n+      let _5: ();\n+      let mut _6: &mut u8;\n       scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n-          let _3: &mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          debug a => _2;\n+          let _3: &mut u8;\n           scope 2 {\n-              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n-              let _4: &mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              debug b => _3;\n+              let _4: &mut u8;\n               scope 3 {\n--                 debug c => _4;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n-+                 debug c => _2;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n+-                 debug c => _4;\n++                 debug c => _2;\n               }\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-          _2 = &mut _1;                    // scope 0 at $DIR/reborrow.rs:+1:13: +1:19\n-          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n-          _3 = &mut (*_2);                 // scope 1 at $DIR/reborrow.rs:+2:13: +2:20\n--         StorageLive(_4);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n--         _4 = move _2;                    // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n-          StorageLive(_5);                 // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n--         StorageLive(_6);                 // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n--         _6 = move _4;                    // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n--         _5 = opaque::<&mut u8>(move _6) -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n-+         _5 = opaque::<&mut u8>(move _2) -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n-                                           // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:15:5: 15:11\n-                                           // + literal: Const { ty: fn(&mut u8) {opaque::<&mut u8>}, val: Value(<ZST>) }\n+-         StorageLive(_2);\n+          _2 = &mut _1;\n+          StorageLive(_3);\n+          _3 = &mut (*_2);\n+-         StorageLive(_4);\n+-         _4 = move _2;\n+          StorageLive(_5);\n+-         StorageLive(_6);\n+-         _6 = move _4;\n+-         _5 = opaque::<&mut u8>(move _6) -> [return: bb1, unwind unreachable];\n++         _5 = opaque::<&mut u8>(move _2) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         StorageDead(_6);                 // scope 3 at $DIR/reborrow.rs:+4:13: +4:14\n-          StorageDead(_5);                 // scope 3 at $DIR/reborrow.rs:+4:14: +4:15\n-          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +5:2\n--         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n-          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n--         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n+-         StorageDead(_6);\n+          StorageDead(_5);\n+          _0 = const ();\n+-         StorageDead(_4);\n+          StorageDead(_3);\n+-         StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "4379aa06385e912429bab8303ceb06e34a322d4d", "filename": "tests/mir-opt/copy-prop/reborrow.remut.CopyProp.panic-unwind.diff", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,49 +2,46 @@\n + // MIR for `remut` after CopyProp\n   \n   fn remut(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:10: +0:15\n-      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:21: +0:21\n-      let _2: &mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-      let _5: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n-      let mut _6: &mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n+      debug x => _1;\n+      let mut _0: ();\n+      let _2: &mut u8;\n+      let _5: ();\n+      let mut _6: &mut u8;\n       scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n-          let _3: &mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          debug a => _2;\n+          let _3: &mut u8;\n           scope 2 {\n-              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n-              let _4: &mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              debug b => _3;\n+              let _4: &mut u8;\n               scope 3 {\n--                 debug c => _4;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n-+                 debug c => _2;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n+-                 debug c => _4;\n++                 debug c => _2;\n               }\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-          _2 = &mut _1;                    // scope 0 at $DIR/reborrow.rs:+1:13: +1:19\n-          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n-          _3 = &mut (*_2);                 // scope 1 at $DIR/reborrow.rs:+2:13: +2:20\n--         StorageLive(_4);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n--         _4 = move _2;                    // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n-          StorageLive(_5);                 // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n--         StorageLive(_6);                 // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n--         _6 = move _4;                    // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n--         _5 = opaque::<&mut u8>(move _6) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n-+         _5 = opaque::<&mut u8>(move _2) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n-                                           // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:15:5: 15:11\n-                                           // + literal: Const { ty: fn(&mut u8) {opaque::<&mut u8>}, val: Value(<ZST>) }\n+-         StorageLive(_2);\n+          _2 = &mut _1;\n+          StorageLive(_3);\n+          _3 = &mut (*_2);\n+-         StorageLive(_4);\n+-         _4 = move _2;\n+          StorageLive(_5);\n+-         StorageLive(_6);\n+-         _6 = move _4;\n+-         _5 = opaque::<&mut u8>(move _6) -> bb1;\n++         _5 = opaque::<&mut u8>(move _2) -> bb1;\n       }\n   \n       bb1: {\n--         StorageDead(_6);                 // scope 3 at $DIR/reborrow.rs:+4:13: +4:14\n-          StorageDead(_5);                 // scope 3 at $DIR/reborrow.rs:+4:14: +4:15\n-          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +5:2\n--         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n-          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n--         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n+-         StorageDead(_6);\n+          StorageDead(_5);\n+          _0 = const ();\n+-         StorageDead(_4);\n+          StorageDead(_3);\n+-         StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "dfc8dd097563820a7b924233c2bb16f8d610ce32", "filename": "tests/mir-opt/copy-prop/reborrow.reraw.CopyProp.panic-abort.diff", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,49 +2,46 @@\n + // MIR for `reraw` after CopyProp\n   \n   fn reraw(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:10: +0:15\n-      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:21: +0:21\n-      let _2: &mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-      let _5: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n-      let mut _6: &mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n+      debug x => _1;\n+      let mut _0: ();\n+      let _2: &mut u8;\n+      let _5: ();\n+      let mut _6: &mut u8;\n       scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n-          let _3: *mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          debug a => _2;\n+          let _3: *mut u8;\n           scope 2 {\n-              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n-              let _4: &mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              debug b => _3;\n+              let _4: &mut u8;\n               scope 3 {\n--                 debug c => _4;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n-+                 debug c => _2;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n+-                 debug c => _4;\n++                 debug c => _2;\n               }\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-          _2 = &mut _1;                    // scope 0 at $DIR/reborrow.rs:+1:13: +1:19\n-          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n-          _3 = &raw mut (*_2);             // scope 1 at $DIR/reborrow.rs:+2:13: +2:24\n--         StorageLive(_4);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n--         _4 = move _2;                    // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n-          StorageLive(_5);                 // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n--         StorageLive(_6);                 // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n--         _6 = move _4;                    // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n--         _5 = opaque::<&mut u8>(move _6) -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n-+         _5 = opaque::<&mut u8>(move _2) -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n-                                           // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:23:5: 23:11\n-                                           // + literal: Const { ty: fn(&mut u8) {opaque::<&mut u8>}, val: Value(<ZST>) }\n+-         StorageLive(_2);\n+          _2 = &mut _1;\n+          StorageLive(_3);\n+          _3 = &raw mut (*_2);\n+-         StorageLive(_4);\n+-         _4 = move _2;\n+          StorageLive(_5);\n+-         StorageLive(_6);\n+-         _6 = move _4;\n+-         _5 = opaque::<&mut u8>(move _6) -> [return: bb1, unwind unreachable];\n++         _5 = opaque::<&mut u8>(move _2) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         StorageDead(_6);                 // scope 3 at $DIR/reborrow.rs:+4:13: +4:14\n-          StorageDead(_5);                 // scope 3 at $DIR/reborrow.rs:+4:14: +4:15\n-          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +5:2\n--         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n-          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n--         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n+-         StorageDead(_6);\n+          StorageDead(_5);\n+          _0 = const ();\n+-         StorageDead(_4);\n+          StorageDead(_3);\n+-         StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "53332f8161eae0aa1ee46df520e8796a6ceed806", "filename": "tests/mir-opt/copy-prop/reborrow.reraw.CopyProp.panic-unwind.diff", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,49 +2,46 @@\n + // MIR for `reraw` after CopyProp\n   \n   fn reraw(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:10: +0:15\n-      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:21: +0:21\n-      let _2: &mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-      let _5: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n-      let mut _6: &mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n+      debug x => _1;\n+      let mut _0: ();\n+      let _2: &mut u8;\n+      let _5: ();\n+      let mut _6: &mut u8;\n       scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n-          let _3: *mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          debug a => _2;\n+          let _3: *mut u8;\n           scope 2 {\n-              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n-              let _4: &mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              debug b => _3;\n+              let _4: &mut u8;\n               scope 3 {\n--                 debug c => _4;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n-+                 debug c => _2;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n+-                 debug c => _4;\n++                 debug c => _2;\n               }\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n-          _2 = &mut _1;                    // scope 0 at $DIR/reborrow.rs:+1:13: +1:19\n-          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n-          _3 = &raw mut (*_2);             // scope 1 at $DIR/reborrow.rs:+2:13: +2:24\n--         StorageLive(_4);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n--         _4 = move _2;                    // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n-          StorageLive(_5);                 // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n--         StorageLive(_6);                 // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n--         _6 = move _4;                    // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n--         _5 = opaque::<&mut u8>(move _6) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n-+         _5 = opaque::<&mut u8>(move _2) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n-                                           // mir::Constant\n-                                           // + span: $DIR/reborrow.rs:23:5: 23:11\n-                                           // + literal: Const { ty: fn(&mut u8) {opaque::<&mut u8>}, val: Value(<ZST>) }\n+-         StorageLive(_2);\n+          _2 = &mut _1;\n+          StorageLive(_3);\n+          _3 = &raw mut (*_2);\n+-         StorageLive(_4);\n+-         _4 = move _2;\n+          StorageLive(_5);\n+-         StorageLive(_6);\n+-         _6 = move _4;\n+-         _5 = opaque::<&mut u8>(move _6) -> bb1;\n++         _5 = opaque::<&mut u8>(move _2) -> bb1;\n       }\n   \n       bb1: {\n--         StorageDead(_6);                 // scope 3 at $DIR/reborrow.rs:+4:13: +4:14\n-          StorageDead(_5);                 // scope 3 at $DIR/reborrow.rs:+4:14: +4:15\n-          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +5:2\n--         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n-          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n--         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n+-         StorageDead(_6);\n+          StorageDead(_5);\n+          _0 = const ();\n+-         StorageDead(_4);\n+          StorageDead(_3);\n+-         StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "0ca446c89f2e096f7733e8930c363c9159c5d24f", "filename": "tests/mir-opt/dataflow-const-prop/cast.main.DataflowConstProp.diff", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fcast.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fcast.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fcast.main.DataflowConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,36 +2,36 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/cast.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/cast.rs:+1:9: +1:10\n-      let mut _3: u8;                      // in scope 0 at $DIR/cast.rs:+2:13: +2:20\n-      let mut _4: i32;                     // in scope 0 at $DIR/cast.rs:+2:13: +2:14\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _3: u8;\n+      let mut _4: i32;\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/cast.rs:+1:9: +1:10\n-          let _2: u8;                      // in scope 1 at $DIR/cast.rs:+2:9: +2:10\n+          debug a => _1;\n+          let _2: u8;\n           scope 2 {\n-              debug b => _2;               // in scope 2 at $DIR/cast.rs:+2:9: +2:10\n+              debug b => _2;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/cast.rs:+1:9: +1:10\n-          _1 = const 257_i32;              // scope 0 at $DIR/cast.rs:+1:13: +1:16\n-          StorageLive(_2);                 // scope 1 at $DIR/cast.rs:+2:9: +2:10\n-          StorageLive(_3);                 // scope 1 at $DIR/cast.rs:+2:13: +2:20\n-          StorageLive(_4);                 // scope 1 at $DIR/cast.rs:+2:13: +2:14\n--         _4 = _1;                         // scope 1 at $DIR/cast.rs:+2:13: +2:14\n--         _3 = move _4 as u8 (IntToInt);   // scope 1 at $DIR/cast.rs:+2:13: +2:20\n-+         _4 = const 257_i32;              // scope 1 at $DIR/cast.rs:+2:13: +2:14\n-+         _3 = const 1_u8;                 // scope 1 at $DIR/cast.rs:+2:13: +2:20\n-          StorageDead(_4);                 // scope 1 at $DIR/cast.rs:+2:19: +2:20\n--         _2 = Add(move _3, const 1_u8);   // scope 1 at $DIR/cast.rs:+2:13: +2:24\n-+         _2 = const 2_u8;                 // scope 1 at $DIR/cast.rs:+2:13: +2:24\n-          StorageDead(_3);                 // scope 1 at $DIR/cast.rs:+2:23: +2:24\n-          _0 = const ();                   // scope 0 at $DIR/cast.rs:+0:11: +3:2\n-          StorageDead(_2);                 // scope 1 at $DIR/cast.rs:+3:1: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/cast.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/cast.rs:+3:2: +3:2\n+          StorageLive(_1);\n+          _1 = const 257_i32;\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+-         _4 = _1;\n+-         _3 = move _4 as u8 (IntToInt);\n++         _4 = const 257_i32;\n++         _3 = const 1_u8;\n+          StorageDead(_4);\n+-         _2 = Add(move _3, const 1_u8);\n++         _2 = const 2_u8;\n+          StorageDead(_3);\n+          _0 = const ();\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "2f1a70f32d03aed5f32a5e26e7c3ac9f6efa6e0a", "filename": "tests/mir-opt/dataflow-const-prop/checked.main.DataflowConstProp.panic-abort.diff", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,79 +2,79 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/checked.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/checked.rs:+1:9: +1:10\n-      let mut _4: i32;                     // in scope 0 at $DIR/checked.rs:+3:13: +3:14\n-      let mut _5: i32;                     // in scope 0 at $DIR/checked.rs:+3:17: +3:18\n-      let mut _6: (i32, bool);             // in scope 0 at $DIR/checked.rs:+3:13: +3:18\n-      let mut _9: i32;                     // in scope 0 at $DIR/checked.rs:+6:13: +6:14\n-      let mut _10: (i32, bool);            // in scope 0 at $DIR/checked.rs:+6:13: +6:18\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _4: i32;\n+      let mut _5: i32;\n+      let mut _6: (i32, bool);\n+      let mut _9: i32;\n+      let mut _10: (i32, bool);\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/checked.rs:+1:9: +1:10\n-          let _2: i32;                     // in scope 1 at $DIR/checked.rs:+2:9: +2:10\n+          debug a => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug b => _2;               // in scope 2 at $DIR/checked.rs:+2:9: +2:10\n-              let _3: i32;                 // in scope 2 at $DIR/checked.rs:+3:9: +3:10\n+              debug b => _2;\n+              let _3: i32;\n               scope 3 {\n-                  debug c => _3;           // in scope 3 at $DIR/checked.rs:+3:9: +3:10\n-                  let _7: i32;             // in scope 3 at $DIR/checked.rs:+5:9: +5:10\n+                  debug c => _3;\n+                  let _7: i32;\n                   scope 4 {\n-                      debug d => _7;       // in scope 4 at $DIR/checked.rs:+5:9: +5:10\n-                      let _8: i32;         // in scope 4 at $DIR/checked.rs:+6:9: +6:10\n+                      debug d => _7;\n+                      let _8: i32;\n                       scope 5 {\n-                          debug e => _8;   // in scope 5 at $DIR/checked.rs:+6:9: +6:10\n+                          debug e => _8;\n                       }\n                   }\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/checked.rs:+1:9: +1:10\n-          _1 = const 1_i32;                // scope 0 at $DIR/checked.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/checked.rs:+2:9: +2:10\n-          _2 = const 2_i32;                // scope 1 at $DIR/checked.rs:+2:13: +2:14\n-          StorageLive(_3);                 // scope 2 at $DIR/checked.rs:+3:9: +3:10\n-          StorageLive(_4);                 // scope 2 at $DIR/checked.rs:+3:13: +3:14\n--         _4 = _1;                         // scope 2 at $DIR/checked.rs:+3:13: +3:14\n-+         _4 = const 1_i32;                // scope 2 at $DIR/checked.rs:+3:13: +3:14\n-          StorageLive(_5);                 // scope 2 at $DIR/checked.rs:+3:17: +3:18\n--         _5 = _2;                         // scope 2 at $DIR/checked.rs:+3:17: +3:18\n--         _6 = CheckedAdd(_4, _5);         // scope 2 at $DIR/checked.rs:+3:13: +3:18\n--         assert(!move (_6.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _4, move _5) -> [success: bb1, unwind unreachable]; // scope 2 at $DIR/checked.rs:+3:13: +3:18\n-+         _5 = const 2_i32;                // scope 2 at $DIR/checked.rs:+3:17: +3:18\n-+         _6 = CheckedAdd(const 1_i32, const 2_i32); // scope 2 at $DIR/checked.rs:+3:13: +3:18\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_i32, const 2_i32) -> [success: bb1, unwind unreachable]; // scope 2 at $DIR/checked.rs:+3:13: +3:18\n+          StorageLive(_1);\n+          _1 = const 1_i32;\n+          StorageLive(_2);\n+          _2 = const 2_i32;\n+          StorageLive(_3);\n+          StorageLive(_4);\n+-         _4 = _1;\n++         _4 = const 1_i32;\n+          StorageLive(_5);\n+-         _5 = _2;\n+-         _6 = CheckedAdd(_4, _5);\n+-         assert(!move (_6.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _4, move _5) -> [success: bb1, unwind unreachable];\n++         _5 = const 2_i32;\n++         _6 = CheckedAdd(const 1_i32, const 2_i32);\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_i32, const 2_i32) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _3 = move (_6.0: i32);           // scope 2 at $DIR/checked.rs:+3:13: +3:18\n-+         _3 = const 3_i32;                // scope 2 at $DIR/checked.rs:+3:13: +3:18\n-          StorageDead(_5);                 // scope 2 at $DIR/checked.rs:+3:17: +3:18\n-          StorageDead(_4);                 // scope 2 at $DIR/checked.rs:+3:17: +3:18\n-          StorageLive(_7);                 // scope 3 at $DIR/checked.rs:+5:9: +5:10\n-          _7 = const _;                    // scope 3 at $DIR/checked.rs:+5:13: +5:21\n-          StorageLive(_8);                 // scope 4 at $DIR/checked.rs:+6:9: +6:10\n-          StorageLive(_9);                 // scope 4 at $DIR/checked.rs:+6:13: +6:14\n--         _9 = _7;                         // scope 4 at $DIR/checked.rs:+6:13: +6:14\n--         _10 = CheckedAdd(_9, const 1_i32); // scope 4 at $DIR/checked.rs:+6:13: +6:18\n--         assert(!move (_10.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _9, const 1_i32) -> [success: bb2, unwind unreachable]; // scope 4 at $DIR/checked.rs:+6:13: +6:18\n-+         _9 = const i32::MAX;             // scope 4 at $DIR/checked.rs:+6:13: +6:14\n-+         _10 = CheckedAdd(const i32::MAX, const 1_i32); // scope 4 at $DIR/checked.rs:+6:13: +6:18\n-+         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", const i32::MAX, const 1_i32) -> [success: bb2, unwind unreachable]; // scope 4 at $DIR/checked.rs:+6:13: +6:18\n+-         _3 = move (_6.0: i32);\n++         _3 = const 3_i32;\n+          StorageDead(_5);\n+          StorageDead(_4);\n+          StorageLive(_7);\n+          _7 = const _;\n+          StorageLive(_8);\n+          StorageLive(_9);\n+-         _9 = _7;\n+-         _10 = CheckedAdd(_9, const 1_i32);\n+-         assert(!move (_10.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _9, const 1_i32) -> [success: bb2, unwind unreachable];\n++         _9 = const i32::MAX;\n++         _10 = CheckedAdd(const i32::MAX, const 1_i32);\n++         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", const i32::MAX, const 1_i32) -> [success: bb2, unwind unreachable];\n       }\n   \n       bb2: {\n--         _8 = move (_10.0: i32);          // scope 4 at $DIR/checked.rs:+6:13: +6:18\n-+         _8 = const i32::MIN;             // scope 4 at $DIR/checked.rs:+6:13: +6:18\n-          StorageDead(_9);                 // scope 4 at $DIR/checked.rs:+6:17: +6:18\n-          _0 = const ();                   // scope 0 at $DIR/checked.rs:+0:11: +7:2\n-          StorageDead(_8);                 // scope 4 at $DIR/checked.rs:+7:1: +7:2\n-          StorageDead(_7);                 // scope 3 at $DIR/checked.rs:+7:1: +7:2\n-          StorageDead(_3);                 // scope 2 at $DIR/checked.rs:+7:1: +7:2\n-          StorageDead(_2);                 // scope 1 at $DIR/checked.rs:+7:1: +7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/checked.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/checked.rs:+7:2: +7:2\n+-         _8 = move (_10.0: i32);\n++         _8 = const i32::MIN;\n+          StorageDead(_9);\n+          _0 = const ();\n+          StorageDead(_8);\n+          StorageDead(_7);\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "784841eacbfad64a845c4eb97d7aa9a92b1dd388", "filename": "tests/mir-opt/dataflow-const-prop/checked.main.DataflowConstProp.panic-unwind.diff", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,79 +2,79 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/checked.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/checked.rs:+1:9: +1:10\n-      let mut _4: i32;                     // in scope 0 at $DIR/checked.rs:+3:13: +3:14\n-      let mut _5: i32;                     // in scope 0 at $DIR/checked.rs:+3:17: +3:18\n-      let mut _6: (i32, bool);             // in scope 0 at $DIR/checked.rs:+3:13: +3:18\n-      let mut _9: i32;                     // in scope 0 at $DIR/checked.rs:+6:13: +6:14\n-      let mut _10: (i32, bool);            // in scope 0 at $DIR/checked.rs:+6:13: +6:18\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _4: i32;\n+      let mut _5: i32;\n+      let mut _6: (i32, bool);\n+      let mut _9: i32;\n+      let mut _10: (i32, bool);\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/checked.rs:+1:9: +1:10\n-          let _2: i32;                     // in scope 1 at $DIR/checked.rs:+2:9: +2:10\n+          debug a => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug b => _2;               // in scope 2 at $DIR/checked.rs:+2:9: +2:10\n-              let _3: i32;                 // in scope 2 at $DIR/checked.rs:+3:9: +3:10\n+              debug b => _2;\n+              let _3: i32;\n               scope 3 {\n-                  debug c => _3;           // in scope 3 at $DIR/checked.rs:+3:9: +3:10\n-                  let _7: i32;             // in scope 3 at $DIR/checked.rs:+5:9: +5:10\n+                  debug c => _3;\n+                  let _7: i32;\n                   scope 4 {\n-                      debug d => _7;       // in scope 4 at $DIR/checked.rs:+5:9: +5:10\n-                      let _8: i32;         // in scope 4 at $DIR/checked.rs:+6:9: +6:10\n+                      debug d => _7;\n+                      let _8: i32;\n                       scope 5 {\n-                          debug e => _8;   // in scope 5 at $DIR/checked.rs:+6:9: +6:10\n+                          debug e => _8;\n                       }\n                   }\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/checked.rs:+1:9: +1:10\n-          _1 = const 1_i32;                // scope 0 at $DIR/checked.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/checked.rs:+2:9: +2:10\n-          _2 = const 2_i32;                // scope 1 at $DIR/checked.rs:+2:13: +2:14\n-          StorageLive(_3);                 // scope 2 at $DIR/checked.rs:+3:9: +3:10\n-          StorageLive(_4);                 // scope 2 at $DIR/checked.rs:+3:13: +3:14\n--         _4 = _1;                         // scope 2 at $DIR/checked.rs:+3:13: +3:14\n-+         _4 = const 1_i32;                // scope 2 at $DIR/checked.rs:+3:13: +3:14\n-          StorageLive(_5);                 // scope 2 at $DIR/checked.rs:+3:17: +3:18\n--         _5 = _2;                         // scope 2 at $DIR/checked.rs:+3:17: +3:18\n--         _6 = CheckedAdd(_4, _5);         // scope 2 at $DIR/checked.rs:+3:13: +3:18\n--         assert(!move (_6.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _4, move _5) -> bb1; // scope 2 at $DIR/checked.rs:+3:13: +3:18\n-+         _5 = const 2_i32;                // scope 2 at $DIR/checked.rs:+3:17: +3:18\n-+         _6 = CheckedAdd(const 1_i32, const 2_i32); // scope 2 at $DIR/checked.rs:+3:13: +3:18\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_i32, const 2_i32) -> bb1; // scope 2 at $DIR/checked.rs:+3:13: +3:18\n+          StorageLive(_1);\n+          _1 = const 1_i32;\n+          StorageLive(_2);\n+          _2 = const 2_i32;\n+          StorageLive(_3);\n+          StorageLive(_4);\n+-         _4 = _1;\n++         _4 = const 1_i32;\n+          StorageLive(_5);\n+-         _5 = _2;\n+-         _6 = CheckedAdd(_4, _5);\n+-         assert(!move (_6.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _4, move _5) -> bb1;\n++         _5 = const 2_i32;\n++         _6 = CheckedAdd(const 1_i32, const 2_i32);\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_i32, const 2_i32) -> bb1;\n       }\n   \n       bb1: {\n--         _3 = move (_6.0: i32);           // scope 2 at $DIR/checked.rs:+3:13: +3:18\n-+         _3 = const 3_i32;                // scope 2 at $DIR/checked.rs:+3:13: +3:18\n-          StorageDead(_5);                 // scope 2 at $DIR/checked.rs:+3:17: +3:18\n-          StorageDead(_4);                 // scope 2 at $DIR/checked.rs:+3:17: +3:18\n-          StorageLive(_7);                 // scope 3 at $DIR/checked.rs:+5:9: +5:10\n-          _7 = const _;                    // scope 3 at $DIR/checked.rs:+5:13: +5:21\n-          StorageLive(_8);                 // scope 4 at $DIR/checked.rs:+6:9: +6:10\n-          StorageLive(_9);                 // scope 4 at $DIR/checked.rs:+6:13: +6:14\n--         _9 = _7;                         // scope 4 at $DIR/checked.rs:+6:13: +6:14\n--         _10 = CheckedAdd(_9, const 1_i32); // scope 4 at $DIR/checked.rs:+6:13: +6:18\n--         assert(!move (_10.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _9, const 1_i32) -> bb2; // scope 4 at $DIR/checked.rs:+6:13: +6:18\n-+         _9 = const i32::MAX;             // scope 4 at $DIR/checked.rs:+6:13: +6:14\n-+         _10 = CheckedAdd(const i32::MAX, const 1_i32); // scope 4 at $DIR/checked.rs:+6:13: +6:18\n-+         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", const i32::MAX, const 1_i32) -> bb2; // scope 4 at $DIR/checked.rs:+6:13: +6:18\n+-         _3 = move (_6.0: i32);\n++         _3 = const 3_i32;\n+          StorageDead(_5);\n+          StorageDead(_4);\n+          StorageLive(_7);\n+          _7 = const _;\n+          StorageLive(_8);\n+          StorageLive(_9);\n+-         _9 = _7;\n+-         _10 = CheckedAdd(_9, const 1_i32);\n+-         assert(!move (_10.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _9, const 1_i32) -> bb2;\n++         _9 = const i32::MAX;\n++         _10 = CheckedAdd(const i32::MAX, const 1_i32);\n++         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", const i32::MAX, const 1_i32) -> bb2;\n       }\n   \n       bb2: {\n--         _8 = move (_10.0: i32);          // scope 4 at $DIR/checked.rs:+6:13: +6:18\n-+         _8 = const i32::MIN;             // scope 4 at $DIR/checked.rs:+6:13: +6:18\n-          StorageDead(_9);                 // scope 4 at $DIR/checked.rs:+6:17: +6:18\n-          _0 = const ();                   // scope 0 at $DIR/checked.rs:+0:11: +7:2\n-          StorageDead(_8);                 // scope 4 at $DIR/checked.rs:+7:1: +7:2\n-          StorageDead(_7);                 // scope 3 at $DIR/checked.rs:+7:1: +7:2\n-          StorageDead(_3);                 // scope 2 at $DIR/checked.rs:+7:1: +7:2\n-          StorageDead(_2);                 // scope 1 at $DIR/checked.rs:+7:1: +7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/checked.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/checked.rs:+7:2: +7:2\n+-         _8 = move (_10.0: i32);\n++         _8 = const i32::MIN;\n+          StorageDead(_9);\n+          _0 = const ();\n+          StorageDead(_8);\n+          StorageDead(_7);\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "775325c4d0626bd819e89b4054003b1c0318f504", "filename": "tests/mir-opt/dataflow-const-prop/enum.multiple.DataflowConstProp.diff", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.multiple.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.multiple.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.multiple.DataflowConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,81 +2,81 @@\n + // MIR for `multiple` after DataflowConstProp\n   \n   fn multiple(_1: bool, _2: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/enum.rs:+0:13: +0:14\n-      debug i => _2;                       // in scope 0 at $DIR/enum.rs:+0:22: +0:23\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum.rs:+0:29: +0:29\n-      let _3: std::option::Option<u8>;     // in scope 0 at $DIR/enum.rs:+1:9: +1:10\n-      let mut _4: bool;                    // in scope 0 at $DIR/enum.rs:+1:16: +1:17\n-      let mut _5: u8;                      // in scope 0 at $DIR/enum.rs:+2:14: +2:15\n-      let mut _7: isize;                   // in scope 0 at $DIR/enum.rs:+9:23: +9:30\n+      debug x => _1;\n+      debug i => _2;\n+      let mut _0: ();\n+      let _3: std::option::Option<u8>;\n+      let mut _4: bool;\n+      let mut _5: u8;\n+      let mut _7: isize;\n       scope 1 {\n-          debug e => _3;                   // in scope 1 at $DIR/enum.rs:+1:9: +1:10\n-          let _6: u8;                      // in scope 1 at $DIR/enum.rs:+9:9: +9:10\n-          let _8: u8;                      // in scope 1 at $DIR/enum.rs:+9:28: +9:29\n+          debug e => _3;\n+          let _6: u8;\n+          let _8: u8;\n           scope 2 {\n-              debug x => _6;               // in scope 2 at $DIR/enum.rs:+9:9: +9:10\n-              let _9: u8;                  // in scope 2 at $DIR/enum.rs:+11:9: +11:10\n+              debug x => _6;\n+              let _9: u8;\n               scope 4 {\n-                  debug y => _9;           // in scope 4 at $DIR/enum.rs:+11:9: +11:10\n+                  debug y => _9;\n               }\n           }\n           scope 3 {\n-              debug i => _8;               // in scope 3 at $DIR/enum.rs:+9:28: +9:29\n+              debug i => _8;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/enum.rs:+1:9: +1:10\n-          StorageLive(_4);                 // scope 0 at $DIR/enum.rs:+1:16: +1:17\n-          _4 = _1;                         // scope 0 at $DIR/enum.rs:+1:16: +1:17\n-          switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/enum.rs:+1:16: +1:17\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          _4 = _1;\n+          switchInt(move _4) -> [0: bb2, otherwise: bb1];\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/enum.rs:+2:14: +2:15\n-          _5 = _2;                         // scope 0 at $DIR/enum.rs:+2:14: +2:15\n-          _3 = Option::<u8>::Some(move _5); // scope 0 at $DIR/enum.rs:+2:9: +2:16\n-          StorageDead(_5);                 // scope 0 at $DIR/enum.rs:+2:15: +2:16\n-          goto -> bb3;                     // scope 0 at $DIR/enum.rs:+1:13: +5:6\n+          StorageLive(_5);\n+          _5 = _2;\n+          _3 = Option::<u8>::Some(move _5);\n+          StorageDead(_5);\n+          goto -> bb3;\n       }\n   \n       bb2: {\n-          _3 = Option::<u8>::None;         // scope 0 at $DIR/enum.rs:+4:9: +4:13\n-          goto -> bb3;                     // scope 0 at $DIR/enum.rs:+1:13: +5:6\n+          _3 = Option::<u8>::None;\n+          goto -> bb3;\n       }\n   \n       bb3: {\n-          StorageDead(_4);                 // scope 0 at $DIR/enum.rs:+5:5: +5:6\n-          StorageLive(_6);                 // scope 1 at $DIR/enum.rs:+9:9: +9:10\n-          _7 = discriminant(_3);           // scope 1 at $DIR/enum.rs:+9:19: +9:20\n-          switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 1 at $DIR/enum.rs:+9:13: +9:20\n+          StorageDead(_4);\n+          StorageLive(_6);\n+          _7 = discriminant(_3);\n+          switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];\n       }\n   \n       bb4: {\n-          _6 = const 0_u8;                 // scope 1 at $DIR/enum.rs:+9:45: +9:46\n-          goto -> bb7;                     // scope 1 at $DIR/enum.rs:+9:45: +9:46\n+          _6 = const 0_u8;\n+          goto -> bb7;\n       }\n   \n       bb5: {\n-          unreachable;                     // scope 1 at $DIR/enum.rs:+9:19: +9:20\n+          unreachable;\n       }\n   \n       bb6: {\n-          StorageLive(_8);                 // scope 1 at $DIR/enum.rs:+9:28: +9:29\n-          _8 = ((_3 as Some).0: u8);       // scope 1 at $DIR/enum.rs:+9:28: +9:29\n-          _6 = _8;                         // scope 3 at $DIR/enum.rs:+9:34: +9:35\n-          StorageDead(_8);                 // scope 1 at $DIR/enum.rs:+9:34: +9:35\n-          goto -> bb7;                     // scope 1 at $DIR/enum.rs:+9:34: +9:35\n+          StorageLive(_8);\n+          _8 = ((_3 as Some).0: u8);\n+          _6 = _8;\n+          StorageDead(_8);\n+          goto -> bb7;\n       }\n   \n       bb7: {\n-          StorageLive(_9);                 // scope 2 at $DIR/enum.rs:+11:9: +11:10\n-          _9 = _6;                         // scope 2 at $DIR/enum.rs:+11:13: +11:14\n-          _0 = const ();                   // scope 0 at $DIR/enum.rs:+0:29: +12:2\n-          StorageDead(_9);                 // scope 2 at $DIR/enum.rs:+12:1: +12:2\n-          StorageDead(_6);                 // scope 1 at $DIR/enum.rs:+12:1: +12:2\n-          StorageDead(_3);                 // scope 0 at $DIR/enum.rs:+12:1: +12:2\n-          return;                          // scope 0 at $DIR/enum.rs:+12:2: +12:2\n+          StorageLive(_9);\n+          _9 = _6;\n+          _0 = const ();\n+          StorageDead(_9);\n+          StorageDead(_6);\n+          StorageDead(_3);\n+          return;\n       }\n   }\n   "}, {"sha": "960e69ee9165e213180e5c98b7ab12ae153eea80", "filename": "tests/mir-opt/dataflow-const-prop/enum.mutate_discriminant.DataflowConstProp.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.mutate_discriminant.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.mutate_discriminant.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.mutate_discriminant.DataflowConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `mutate_discriminant` after DataflowConstProp\n   \n   fn mutate_discriminant() -> u8 {\n-      let mut _0: u8;                      // return place in scope 0 at $DIR/enum.rs:+0:29: +0:31\n-      let mut _1: std::option::Option<NonZeroUsize>; // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-      let mut _2: isize;                   // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _0: u8;\n+      let mut _1: std::option::Option<NonZeroUsize>;\n+      let mut _2: isize;\n   \n       bb0: {\n-          discriminant(_1) = 1;            // scope 0 at $DIR/enum.rs:+4:13: +4:34\n-          (((_1 as variant#1).0: NonZeroUsize).0: usize) = const 0_usize; // scope 0 at $DIR/enum.rs:+6:13: +6:64\n-          _2 = discriminant(_1);           // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n-          switchInt(_2) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/enum.rs:+9:13: +12:14\n+          discriminant(_1) = 1;\n+          (((_1 as variant#1).0: NonZeroUsize).0: usize) = const 0_usize;\n+          _2 = discriminant(_1);\n+          switchInt(_2) -> [0: bb1, otherwise: bb2];\n       }\n   \n       bb1: {\n-          _0 = const 1_u8;                 // scope 0 at $DIR/enum.rs:+15:13: +15:20\n-          return;                          // scope 0 at $DIR/enum.rs:+16:13: +16:21\n+          _0 = const 1_u8;\n+          return;\n       }\n   \n       bb2: {\n-          _0 = const 2_u8;                 // scope 0 at $DIR/enum.rs:+19:13: +19:20\n-          unreachable;                     // scope 0 at $DIR/enum.rs:+20:13: +20:26\n+          _0 = const 2_u8;\n+          unreachable;\n       }\n   }\n   "}, {"sha": "3946e7c7d96c12067c0004ce61aa5c10bf9170a3", "filename": "tests/mir-opt/dataflow-const-prop/enum.simple.DataflowConstProp.diff", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.simple.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.simple.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.simple.DataflowConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,62 +2,62 @@\n + // MIR for `simple` after DataflowConstProp\n   \n   fn simple() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/enum.rs:+0:13: +0:13\n-      let _1: E;                           // in scope 0 at $DIR/enum.rs:+1:9: +1:10\n-      let mut _3: isize;                   // in scope 0 at $DIR/enum.rs:+2:23: +2:31\n+      let mut _0: ();\n+      let _1: E;\n+      let mut _3: isize;\n       scope 1 {\n-          debug e => _1;                   // in scope 1 at $DIR/enum.rs:+1:9: +1:10\n-          let _2: i32;                     // in scope 1 at $DIR/enum.rs:+2:9: +2:10\n-          let _4: i32;                     // in scope 1 at $DIR/enum.rs:+2:29: +2:30\n-          let _5: i32;                     // in scope 1 at $DIR/enum.rs:+2:44: +2:45\n+          debug e => _1;\n+          let _2: i32;\n+          let _4: i32;\n+          let _5: i32;\n           scope 2 {\n-              debug x => _2;               // in scope 2 at $DIR/enum.rs:+2:9: +2:10\n+              debug x => _2;\n           }\n           scope 3 {\n-              debug x => _4;               // in scope 3 at $DIR/enum.rs:+2:29: +2:30\n+              debug x => _4;\n           }\n           scope 4 {\n-              debug x => _5;               // in scope 4 at $DIR/enum.rs:+2:44: +2:45\n+              debug x => _5;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/enum.rs:+1:9: +1:10\n-          _1 = E::V1(const 0_i32);         // scope 0 at $DIR/enum.rs:+1:13: +1:21\n-          StorageLive(_2);                 // scope 1 at $DIR/enum.rs:+2:9: +2:10\n--         _3 = discriminant(_1);           // scope 1 at $DIR/enum.rs:+2:19: +2:20\n--         switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 1 at $DIR/enum.rs:+2:13: +2:20\n-+         _3 = const 0_isize;              // scope 1 at $DIR/enum.rs:+2:19: +2:20\n-+         switchInt(const 0_isize) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 1 at $DIR/enum.rs:+2:13: +2:20\n+          StorageLive(_1);\n+          _1 = E::V1(const 0_i32);\n+          StorageLive(_2);\n+-         _3 = discriminant(_1);\n+-         switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];\n++         _3 = const 0_isize;\n++         switchInt(const 0_isize) -> [0: bb3, 1: bb1, otherwise: bb2];\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // scope 1 at $DIR/enum.rs:+2:44: +2:45\n-          _5 = ((_1 as V2).0: i32);        // scope 1 at $DIR/enum.rs:+2:44: +2:45\n-          _2 = _5;                         // scope 4 at $DIR/enum.rs:+2:50: +2:51\n-          StorageDead(_5);                 // scope 1 at $DIR/enum.rs:+2:50: +2:51\n-          goto -> bb4;                     // scope 1 at $DIR/enum.rs:+2:50: +2:51\n+          StorageLive(_5);\n+          _5 = ((_1 as V2).0: i32);\n+          _2 = _5;\n+          StorageDead(_5);\n+          goto -> bb4;\n       }\n   \n       bb2: {\n-          unreachable;                     // scope 1 at $DIR/enum.rs:+2:19: +2:20\n+          unreachable;\n       }\n   \n       bb3: {\n-          StorageLive(_4);                 // scope 1 at $DIR/enum.rs:+2:29: +2:30\n--         _4 = ((_1 as V1).0: i32);        // scope 1 at $DIR/enum.rs:+2:29: +2:30\n--         _2 = _4;                         // scope 3 at $DIR/enum.rs:+2:35: +2:36\n-+         _4 = const 0_i32;                // scope 1 at $DIR/enum.rs:+2:29: +2:30\n-+         _2 = const 0_i32;                // scope 3 at $DIR/enum.rs:+2:35: +2:36\n-          StorageDead(_4);                 // scope 1 at $DIR/enum.rs:+2:35: +2:36\n-          goto -> bb4;                     // scope 1 at $DIR/enum.rs:+2:35: +2:36\n+          StorageLive(_4);\n+-         _4 = ((_1 as V1).0: i32);\n+-         _2 = _4;\n++         _4 = const 0_i32;\n++         _2 = const 0_i32;\n+          StorageDead(_4);\n+          goto -> bb4;\n       }\n   \n       bb4: {\n-          _0 = const ();                   // scope 0 at $DIR/enum.rs:+0:13: +3:2\n-          StorageDead(_2);                 // scope 1 at $DIR/enum.rs:+3:1: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/enum.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/enum.rs:+3:2: +3:2\n+          _0 = const ();\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "08b599f9f5d0d9f6f28e23834a91eb2336772881", "filename": "tests/mir-opt/dataflow-const-prop/if.main.DataflowConstProp.diff", "status": "modified", "additions": 75, "deletions": 75, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fif.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fif.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fif.main.DataflowConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,111 +2,111 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/if.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/if.rs:+1:9: +1:10\n-      let mut _3: bool;                    // in scope 0 at $DIR/if.rs:+2:16: +2:22\n-      let mut _4: i32;                     // in scope 0 at $DIR/if.rs:+2:16: +2:17\n-      let mut _6: i32;                     // in scope 0 at $DIR/if.rs:+3:13: +3:14\n-      let mut _8: bool;                    // in scope 0 at $DIR/if.rs:+5:16: +5:22\n-      let mut _9: i32;                     // in scope 0 at $DIR/if.rs:+5:16: +5:17\n-      let mut _10: i32;                    // in scope 0 at $DIR/if.rs:+5:36: +5:37\n-      let mut _12: i32;                    // in scope 0 at $DIR/if.rs:+6:13: +6:14\n+      let mut _0: ();\n+      let _1: i32;\n+      let mut _3: bool;\n+      let mut _4: i32;\n+      let mut _6: i32;\n+      let mut _8: bool;\n+      let mut _9: i32;\n+      let mut _10: i32;\n+      let mut _12: i32;\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/if.rs:+1:9: +1:10\n-          let _2: i32;                     // in scope 1 at $DIR/if.rs:+2:9: +2:10\n+          debug a => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug b => _2;               // in scope 2 at $DIR/if.rs:+2:9: +2:10\n-              let _5: i32;                 // in scope 2 at $DIR/if.rs:+3:9: +3:10\n+              debug b => _2;\n+              let _5: i32;\n               scope 3 {\n-                  debug c => _5;           // in scope 3 at $DIR/if.rs:+3:9: +3:10\n-                  let _7: i32;             // in scope 3 at $DIR/if.rs:+5:9: +5:10\n+                  debug c => _5;\n+                  let _7: i32;\n                   scope 4 {\n-                      debug d => _7;       // in scope 4 at $DIR/if.rs:+5:9: +5:10\n-                      let _11: i32;        // in scope 4 at $DIR/if.rs:+6:9: +6:10\n+                      debug d => _7;\n+                      let _11: i32;\n                       scope 5 {\n-                          debug e => _11;  // in scope 5 at $DIR/if.rs:+6:9: +6:10\n+                          debug e => _11;\n                       }\n                   }\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/if.rs:+1:9: +1:10\n-          _1 = const 1_i32;                // scope 0 at $DIR/if.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/if.rs:+2:9: +2:10\n-          StorageLive(_3);                 // scope 1 at $DIR/if.rs:+2:16: +2:22\n-          StorageLive(_4);                 // scope 1 at $DIR/if.rs:+2:16: +2:17\n--         _4 = _1;                         // scope 1 at $DIR/if.rs:+2:16: +2:17\n--         _3 = Eq(move _4, const 1_i32);   // scope 1 at $DIR/if.rs:+2:16: +2:22\n-+         _4 = const 1_i32;                // scope 1 at $DIR/if.rs:+2:16: +2:17\n-+         _3 = const true;                 // scope 1 at $DIR/if.rs:+2:16: +2:22\n-          StorageDead(_4);                 // scope 1 at $DIR/if.rs:+2:21: +2:22\n--         switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/if.rs:+2:16: +2:22\n-+         switchInt(const true) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/if.rs:+2:16: +2:22\n+          StorageLive(_1);\n+          _1 = const 1_i32;\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+-         _4 = _1;\n+-         _3 = Eq(move _4, const 1_i32);\n++         _4 = const 1_i32;\n++         _3 = const true;\n+          StorageDead(_4);\n+-         switchInt(move _3) -> [0: bb2, otherwise: bb1];\n++         switchInt(const true) -> [0: bb2, otherwise: bb1];\n       }\n   \n       bb1: {\n-          _2 = const 2_i32;                // scope 1 at $DIR/if.rs:+2:25: +2:26\n-          goto -> bb3;                     // scope 1 at $DIR/if.rs:+2:13: +2:39\n+          _2 = const 2_i32;\n+          goto -> bb3;\n       }\n   \n       bb2: {\n-          _2 = const 3_i32;                // scope 1 at $DIR/if.rs:+2:36: +2:37\n-          goto -> bb3;                     // scope 1 at $DIR/if.rs:+2:13: +2:39\n+          _2 = const 3_i32;\n+          goto -> bb3;\n       }\n   \n       bb3: {\n-          StorageDead(_3);                 // scope 1 at $DIR/if.rs:+2:38: +2:39\n-          StorageLive(_5);                 // scope 2 at $DIR/if.rs:+3:9: +3:10\n-          StorageLive(_6);                 // scope 2 at $DIR/if.rs:+3:13: +3:14\n--         _6 = _2;                         // scope 2 at $DIR/if.rs:+3:13: +3:14\n--         _5 = Add(move _6, const 1_i32);  // scope 2 at $DIR/if.rs:+3:13: +3:18\n-+         _6 = const 2_i32;                // scope 2 at $DIR/if.rs:+3:13: +3:14\n-+         _5 = const 3_i32;                // scope 2 at $DIR/if.rs:+3:13: +3:18\n-          StorageDead(_6);                 // scope 2 at $DIR/if.rs:+3:17: +3:18\n-          StorageLive(_7);                 // scope 3 at $DIR/if.rs:+5:9: +5:10\n-          StorageLive(_8);                 // scope 3 at $DIR/if.rs:+5:16: +5:22\n-          StorageLive(_9);                 // scope 3 at $DIR/if.rs:+5:16: +5:17\n--         _9 = _1;                         // scope 3 at $DIR/if.rs:+5:16: +5:17\n--         _8 = Eq(move _9, const 1_i32);   // scope 3 at $DIR/if.rs:+5:16: +5:22\n-+         _9 = const 1_i32;                // scope 3 at $DIR/if.rs:+5:16: +5:17\n-+         _8 = const true;                 // scope 3 at $DIR/if.rs:+5:16: +5:22\n-          StorageDead(_9);                 // scope 3 at $DIR/if.rs:+5:21: +5:22\n--         switchInt(move _8) -> [0: bb5, otherwise: bb4]; // scope 3 at $DIR/if.rs:+5:16: +5:22\n-+         switchInt(const true) -> [0: bb5, otherwise: bb4]; // scope 3 at $DIR/if.rs:+5:16: +5:22\n+          StorageDead(_3);\n+          StorageLive(_5);\n+          StorageLive(_6);\n+-         _6 = _2;\n+-         _5 = Add(move _6, const 1_i32);\n++         _6 = const 2_i32;\n++         _5 = const 3_i32;\n+          StorageDead(_6);\n+          StorageLive(_7);\n+          StorageLive(_8);\n+          StorageLive(_9);\n+-         _9 = _1;\n+-         _8 = Eq(move _9, const 1_i32);\n++         _9 = const 1_i32;\n++         _8 = const true;\n+          StorageDead(_9);\n+-         switchInt(move _8) -> [0: bb5, otherwise: bb4];\n++         switchInt(const true) -> [0: bb5, otherwise: bb4];\n       }\n   \n       bb4: {\n--         _7 = _1;                         // scope 3 at $DIR/if.rs:+5:25: +5:26\n-+         _7 = const 1_i32;                // scope 3 at $DIR/if.rs:+5:25: +5:26\n-          goto -> bb6;                     // scope 3 at $DIR/if.rs:+5:13: +5:43\n+-         _7 = _1;\n++         _7 = const 1_i32;\n+          goto -> bb6;\n       }\n   \n       bb5: {\n-          StorageLive(_10);                // scope 3 at $DIR/if.rs:+5:36: +5:37\n-          _10 = _1;                        // scope 3 at $DIR/if.rs:+5:36: +5:37\n-          _7 = Add(move _10, const 1_i32); // scope 3 at $DIR/if.rs:+5:36: +5:41\n-          StorageDead(_10);                // scope 3 at $DIR/if.rs:+5:40: +5:41\n-          goto -> bb6;                     // scope 3 at $DIR/if.rs:+5:13: +5:43\n+          StorageLive(_10);\n+          _10 = _1;\n+          _7 = Add(move _10, const 1_i32);\n+          StorageDead(_10);\n+          goto -> bb6;\n       }\n   \n       bb6: {\n-          StorageDead(_8);                 // scope 3 at $DIR/if.rs:+5:42: +5:43\n-          StorageLive(_11);                // scope 4 at $DIR/if.rs:+6:9: +6:10\n-          StorageLive(_12);                // scope 4 at $DIR/if.rs:+6:13: +6:14\n--         _12 = _7;                        // scope 4 at $DIR/if.rs:+6:13: +6:14\n--         _11 = Add(move _12, const 1_i32); // scope 4 at $DIR/if.rs:+6:13: +6:18\n-+         _12 = const 1_i32;               // scope 4 at $DIR/if.rs:+6:13: +6:14\n-+         _11 = const 2_i32;               // scope 4 at $DIR/if.rs:+6:13: +6:18\n-          StorageDead(_12);                // scope 4 at $DIR/if.rs:+6:17: +6:18\n-          _0 = const ();                   // scope 0 at $DIR/if.rs:+0:11: +7:2\n-          StorageDead(_11);                // scope 4 at $DIR/if.rs:+7:1: +7:2\n-          StorageDead(_7);                 // scope 3 at $DIR/if.rs:+7:1: +7:2\n-          StorageDead(_5);                 // scope 2 at $DIR/if.rs:+7:1: +7:2\n-          StorageDead(_2);                 // scope 1 at $DIR/if.rs:+7:1: +7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/if.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/if.rs:+7:2: +7:2\n+          StorageDead(_8);\n+          StorageLive(_11);\n+          StorageLive(_12);\n+-         _12 = _7;\n+-         _11 = Add(move _12, const 1_i32);\n++         _12 = const 1_i32;\n++         _11 = const 2_i32;\n+          StorageDead(_12);\n+          _0 = const ();\n+          StorageDead(_11);\n+          StorageDead(_7);\n+          StorageDead(_5);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "9a68d3b51b561437487a1956cc932a044844b2ca", "filename": "tests/mir-opt/dataflow-const-prop/inherit_overflow.main.DataflowConstProp.panic-abort.diff", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inherit_overflow.rs:+0:11: +0:11\n-      let mut _1: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-      let mut _2: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-      let mut _3: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+      let mut _0: ();\n+      let mut _1: u8;\n+      let mut _2: u8;\n+      let mut _3: u8;\n       scope 1 {\n       }\n-      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:9:13: 9:47\n-          debug self => _2;                // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          debug other => _3;               // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          let mut _4: (u8, bool);          // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+      scope 2 (inlined <u8 as Add>::add) {\n+          debug self => _2;\n+          debug other => _3;\n+          let mut _4: (u8, bool);\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageLive(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          _2 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageLive(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          _3 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n--         _4 = CheckedAdd(_2, _3);         // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n--         assert(!move (_4.1: bool), \"attempt to compute `{} + {}`, which would overflow\", _2, _3) -> [success: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-+         _4 = CheckedAdd(const u8::MAX, const 1_u8); // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-+         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", const u8::MAX, const 1_u8) -> [success: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = const u8::MAX;\n+          StorageLive(_3);\n+          _3 = const 1_u8;\n+-         _4 = CheckedAdd(_2, _3);\n+-         assert(!move (_4.1: bool), \"attempt to compute `{} + {}`, which would overflow\", _2, _3) -> [success: bb1, unwind unreachable];\n++         _4 = CheckedAdd(const u8::MAX, const 1_u8);\n++         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", const u8::MAX, const 1_u8) -> [success: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         _1 = move (_4.0: u8);            // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-+         _1 = const 0_u8;                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          StorageDead(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageDead(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageDead(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:47: +3:48\n-          _0 = const ();                   // scope 0 at $DIR/inherit_overflow.rs:+0:11: +4:2\n-          return;                          // scope 0 at $DIR/inherit_overflow.rs:+4:2: +4:2\n+-         _1 = move (_4.0: u8);\n++         _1 = const 0_u8;\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "d79a2da1ddb78f9b0f854dfd0764cf1b40996534", "filename": "tests/mir-opt/dataflow-const-prop/inherit_overflow.main.DataflowConstProp.panic-unwind.diff", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,38 +2,38 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inherit_overflow.rs:+0:11: +0:11\n-      let mut _1: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-      let mut _2: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-      let mut _3: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+      let mut _0: ();\n+      let mut _1: u8;\n+      let mut _2: u8;\n+      let mut _3: u8;\n       scope 1 {\n       }\n-      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:9:13: 9:47\n-          debug self => _2;                // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          debug other => _3;               // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          let mut _4: (u8, bool);          // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+      scope 2 (inlined <u8 as Add>::add) {\n+          debug self => _2;\n+          debug other => _3;\n+          let mut _4: (u8, bool);\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageLive(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          _2 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageLive(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          _3 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n--         _4 = CheckedAdd(_2, _3);         // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n--         assert(!move (_4.1: bool), \"attempt to compute `{} + {}`, which would overflow\", _2, _3) -> bb1; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-+         _4 = CheckedAdd(const u8::MAX, const 1_u8); // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-+         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", const u8::MAX, const 1_u8) -> bb1; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = const u8::MAX;\n+          StorageLive(_3);\n+          _3 = const 1_u8;\n+-         _4 = CheckedAdd(_2, _3);\n+-         assert(!move (_4.1: bool), \"attempt to compute `{} + {}`, which would overflow\", _2, _3) -> bb1;\n++         _4 = CheckedAdd(const u8::MAX, const 1_u8);\n++         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", const u8::MAX, const 1_u8) -> bb1;\n       }\n   \n       bb1: {\n--         _1 = move (_4.0: u8);            // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-+         _1 = const 0_u8;                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          StorageDead(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageDead(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageDead(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:47: +3:48\n-          _0 = const ();                   // scope 0 at $DIR/inherit_overflow.rs:+0:11: +4:2\n-          return;                          // scope 0 at $DIR/inherit_overflow.rs:+4:2: +4:2\n+-         _1 = move (_4.0: u8);\n++         _1 = const 0_u8;\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "3f65d3fff7e4b8e078f99c7f7146a74d2f1313cb", "filename": "tests/mir-opt/dataflow-const-prop/issue_81605.f.DataflowConstProp.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fissue_81605.f.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fissue_81605.f.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fissue_81605.f.DataflowConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `f` after DataflowConstProp\n   \n   fn f() -> usize {\n-      let mut _0: usize;                   // return place in scope 0 at $DIR/issue_81605.rs:+0:11: +0:16\n-      let mut _1: usize;                   // in scope 0 at $DIR/issue_81605.rs:+1:9: +1:33\n-      let mut _2: bool;                    // in scope 0 at $DIR/issue_81605.rs:+1:12: +1:16\n+      let mut _0: usize;\n+      let mut _1: usize;\n+      let mut _2: bool;\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue_81605.rs:+1:9: +1:33\n-          StorageLive(_2);                 // scope 0 at $DIR/issue_81605.rs:+1:12: +1:16\n-          _2 = const true;                 // scope 0 at $DIR/issue_81605.rs:+1:12: +1:16\n--         switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/issue_81605.rs:+1:12: +1:16\n-+         switchInt(const true) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/issue_81605.rs:+1:12: +1:16\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = const true;\n+-         switchInt(move _2) -> [0: bb2, otherwise: bb1];\n++         switchInt(const true) -> [0: bb2, otherwise: bb1];\n       }\n   \n       bb1: {\n-          _1 = const 1_usize;              // scope 0 at $DIR/issue_81605.rs:+1:19: +1:20\n-          goto -> bb3;                     // scope 0 at $DIR/issue_81605.rs:+1:9: +1:33\n+          _1 = const 1_usize;\n+          goto -> bb3;\n       }\n   \n       bb2: {\n-          _1 = const 2_usize;              // scope 0 at $DIR/issue_81605.rs:+1:30: +1:31\n-          goto -> bb3;                     // scope 0 at $DIR/issue_81605.rs:+1:9: +1:33\n+          _1 = const 2_usize;\n+          goto -> bb3;\n       }\n   \n       bb3: {\n-          StorageDead(_2);                 // scope 0 at $DIR/issue_81605.rs:+1:32: +1:33\n--         _0 = Add(const 1_usize, move _1); // scope 0 at $DIR/issue_81605.rs:+1:5: +1:33\n-+         _0 = const 2_usize;              // scope 0 at $DIR/issue_81605.rs:+1:5: +1:33\n-          StorageDead(_1);                 // scope 0 at $DIR/issue_81605.rs:+1:32: +1:33\n-          return;                          // scope 0 at $DIR/issue_81605.rs:+2:2: +2:2\n+          StorageDead(_2);\n+-         _0 = Add(const 1_usize, move _1);\n++         _0 = const 2_usize;\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "fbbfd61bbedc129fb1fab0461a71d8c8bb926af0", "filename": "tests/mir-opt/dataflow-const-prop/ref_without_sb.main.DataflowConstProp.panic-abort.diff", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,54 +2,48 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_without_sb.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/ref_without_sb.rs:+1:9: +1:14\n-      let _2: ();                          // in scope 0 at $DIR/ref_without_sb.rs:+2:5: +2:15\n-      let mut _3: &i32;                    // in scope 0 at $DIR/ref_without_sb.rs:+2:12: +2:14\n-      let _4: &i32;                        // in scope 0 at $DIR/ref_without_sb.rs:+2:12: +2:14\n-      let _5: ();                          // in scope 0 at $DIR/ref_without_sb.rs:+4:5: +4:20\n+      let mut _0: ();\n+      let mut _1: i32;\n+      let _2: ();\n+      let mut _3: &i32;\n+      let _4: &i32;\n+      let _5: ();\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/ref_without_sb.rs:+1:9: +1:14\n-          let _6: i32;                     // in scope 1 at $DIR/ref_without_sb.rs:+6:9: +6:10\n+          debug a => _1;\n+          let _6: i32;\n           scope 2 {\n-              debug b => _6;               // in scope 2 at $DIR/ref_without_sb.rs:+6:9: +6:10\n+              debug b => _6;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_without_sb.rs:+1:9: +1:14\n-          _1 = const 0_i32;                // scope 0 at $DIR/ref_without_sb.rs:+1:17: +1:18\n-          StorageLive(_2);                 // scope 1 at $DIR/ref_without_sb.rs:+2:5: +2:15\n-          StorageLive(_3);                 // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n-          StorageLive(_4);                 // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n-          _4 = &_1;                        // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n-          _3 = &(*_4);                     // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n-          _2 = escape::<i32>(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/ref_without_sb.rs:+2:5: +2:15\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref_without_sb.rs:13:5: 13:11\n-                                           // + literal: Const { ty: for<'a> fn(&'a i32) {escape::<i32>}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = const 0_i32;\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          _4 = &_1;\n+          _3 = &(*_4);\n+          _2 = escape::<i32>(move _3) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/ref_without_sb.rs:+2:14: +2:15\n-          StorageDead(_4);                 // scope 1 at $DIR/ref_without_sb.rs:+2:15: +2:16\n-          StorageDead(_2);                 // scope 1 at $DIR/ref_without_sb.rs:+2:15: +2:16\n-          _1 = const 1_i32;                // scope 1 at $DIR/ref_without_sb.rs:+3:5: +3:10\n-          StorageLive(_5);                 // scope 1 at $DIR/ref_without_sb.rs:+4:5: +4:20\n-          _5 = some_function() -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/ref_without_sb.rs:+4:5: +4:20\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref_without_sb.rs:15:5: 15:18\n-                                           // + literal: Const { ty: fn() {some_function}, val: Value(<ZST>) }\n+          StorageDead(_3);\n+          StorageDead(_4);\n+          StorageDead(_2);\n+          _1 = const 1_i32;\n+          StorageLive(_5);\n+          _5 = some_function() -> [return: bb2, unwind unreachable];\n       }\n   \n       bb2: {\n-          StorageDead(_5);                 // scope 1 at $DIR/ref_without_sb.rs:+4:20: +4:21\n-          StorageLive(_6);                 // scope 1 at $DIR/ref_without_sb.rs:+6:9: +6:10\n-          _6 = _1;                         // scope 1 at $DIR/ref_without_sb.rs:+6:13: +6:14\n-          _0 = const ();                   // scope 0 at $DIR/ref_without_sb.rs:+0:11: +7:2\n-          StorageDead(_6);                 // scope 1 at $DIR/ref_without_sb.rs:+7:1: +7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_without_sb.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/ref_without_sb.rs:+7:2: +7:2\n+          StorageDead(_5);\n+          StorageLive(_6);\n+          _6 = _1;\n+          _0 = const ();\n+          StorageDead(_6);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "83d2f78323e7663784199bd8e6ffed4f62024525", "filename": "tests/mir-opt/dataflow-const-prop/ref_without_sb.main.DataflowConstProp.panic-unwind.diff", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,54 +2,48 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_without_sb.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/ref_without_sb.rs:+1:9: +1:14\n-      let _2: ();                          // in scope 0 at $DIR/ref_without_sb.rs:+2:5: +2:15\n-      let mut _3: &i32;                    // in scope 0 at $DIR/ref_without_sb.rs:+2:12: +2:14\n-      let _4: &i32;                        // in scope 0 at $DIR/ref_without_sb.rs:+2:12: +2:14\n-      let _5: ();                          // in scope 0 at $DIR/ref_without_sb.rs:+4:5: +4:20\n+      let mut _0: ();\n+      let mut _1: i32;\n+      let _2: ();\n+      let mut _3: &i32;\n+      let _4: &i32;\n+      let _5: ();\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/ref_without_sb.rs:+1:9: +1:14\n-          let _6: i32;                     // in scope 1 at $DIR/ref_without_sb.rs:+6:9: +6:10\n+          debug a => _1;\n+          let _6: i32;\n           scope 2 {\n-              debug b => _6;               // in scope 2 at $DIR/ref_without_sb.rs:+6:9: +6:10\n+              debug b => _6;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_without_sb.rs:+1:9: +1:14\n-          _1 = const 0_i32;                // scope 0 at $DIR/ref_without_sb.rs:+1:17: +1:18\n-          StorageLive(_2);                 // scope 1 at $DIR/ref_without_sb.rs:+2:5: +2:15\n-          StorageLive(_3);                 // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n-          StorageLive(_4);                 // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n-          _4 = &_1;                        // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n-          _3 = &(*_4);                     // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n-          _2 = escape::<i32>(move _3) -> bb1; // scope 1 at $DIR/ref_without_sb.rs:+2:5: +2:15\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref_without_sb.rs:13:5: 13:11\n-                                           // + literal: Const { ty: for<'a> fn(&'a i32) {escape::<i32>}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = const 0_i32;\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          _4 = &_1;\n+          _3 = &(*_4);\n+          _2 = escape::<i32>(move _3) -> bb1;\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/ref_without_sb.rs:+2:14: +2:15\n-          StorageDead(_4);                 // scope 1 at $DIR/ref_without_sb.rs:+2:15: +2:16\n-          StorageDead(_2);                 // scope 1 at $DIR/ref_without_sb.rs:+2:15: +2:16\n-          _1 = const 1_i32;                // scope 1 at $DIR/ref_without_sb.rs:+3:5: +3:10\n-          StorageLive(_5);                 // scope 1 at $DIR/ref_without_sb.rs:+4:5: +4:20\n-          _5 = some_function() -> bb2;     // scope 1 at $DIR/ref_without_sb.rs:+4:5: +4:20\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref_without_sb.rs:15:5: 15:18\n-                                           // + literal: Const { ty: fn() {some_function}, val: Value(<ZST>) }\n+          StorageDead(_3);\n+          StorageDead(_4);\n+          StorageDead(_2);\n+          _1 = const 1_i32;\n+          StorageLive(_5);\n+          _5 = some_function() -> bb2;\n       }\n   \n       bb2: {\n-          StorageDead(_5);                 // scope 1 at $DIR/ref_without_sb.rs:+4:20: +4:21\n-          StorageLive(_6);                 // scope 1 at $DIR/ref_without_sb.rs:+6:9: +6:10\n-          _6 = _1;                         // scope 1 at $DIR/ref_without_sb.rs:+6:13: +6:14\n-          _0 = const ();                   // scope 0 at $DIR/ref_without_sb.rs:+0:11: +7:2\n-          StorageDead(_6);                 // scope 1 at $DIR/ref_without_sb.rs:+7:1: +7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_without_sb.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/ref_without_sb.rs:+7:2: +7:2\n+          StorageDead(_5);\n+          StorageLive(_6);\n+          _6 = _1;\n+          _0 = const ();\n+          StorageDead(_6);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "4b1a8d932c65124af5ffa28b3d7fdcbe55a4eff3", "filename": "tests/mir-opt/dataflow-const-prop/repr_transparent.main.DataflowConstProp.diff", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Frepr_transparent.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Frepr_transparent.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Frepr_transparent.main.DataflowConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,41 +2,41 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/repr_transparent.rs:+0:11: +0:11\n-      let _1: I32;                         // in scope 0 at $DIR/repr_transparent.rs:+1:9: +1:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/repr_transparent.rs:+2:17: +2:26\n-      let mut _4: i32;                     // in scope 0 at $DIR/repr_transparent.rs:+2:17: +2:20\n-      let mut _5: i32;                     // in scope 0 at $DIR/repr_transparent.rs:+2:23: +2:26\n+      let mut _0: ();\n+      let _1: I32;\n+      let mut _3: i32;\n+      let mut _4: i32;\n+      let mut _5: i32;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/repr_transparent.rs:+1:9: +1:10\n-          let _2: I32;                     // in scope 1 at $DIR/repr_transparent.rs:+2:9: +2:10\n+          debug x => _1;\n+          let _2: I32;\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/repr_transparent.rs:+2:9: +2:10\n+              debug y => _2;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/repr_transparent.rs:+1:9: +1:10\n-          _1 = I32(const 0_i32);           // scope 0 at $DIR/repr_transparent.rs:+1:13: +1:19\n-          StorageLive(_2);                 // scope 1 at $DIR/repr_transparent.rs:+2:9: +2:10\n-          StorageLive(_3);                 // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:26\n-          StorageLive(_4);                 // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:20\n--         _4 = (_1.0: i32);                // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:20\n-+         _4 = const 0_i32;                // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:20\n-          StorageLive(_5);                 // scope 1 at $DIR/repr_transparent.rs:+2:23: +2:26\n--         _5 = (_1.0: i32);                // scope 1 at $DIR/repr_transparent.rs:+2:23: +2:26\n--         _3 = Add(move _4, move _5);      // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:26\n-+         _5 = const 0_i32;                // scope 1 at $DIR/repr_transparent.rs:+2:23: +2:26\n-+         _3 = const 0_i32;                // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:26\n-          StorageDead(_5);                 // scope 1 at $DIR/repr_transparent.rs:+2:25: +2:26\n-          StorageDead(_4);                 // scope 1 at $DIR/repr_transparent.rs:+2:25: +2:26\n--         _2 = I32(move _3);               // scope 1 at $DIR/repr_transparent.rs:+2:13: +2:27\n-+         _2 = I32(const 0_i32);           // scope 1 at $DIR/repr_transparent.rs:+2:13: +2:27\n-          StorageDead(_3);                 // scope 1 at $DIR/repr_transparent.rs:+2:26: +2:27\n-          _0 = const ();                   // scope 0 at $DIR/repr_transparent.rs:+0:11: +3:2\n-          StorageDead(_2);                 // scope 1 at $DIR/repr_transparent.rs:+3:1: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/repr_transparent.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/repr_transparent.rs:+3:2: +3:2\n+          StorageLive(_1);\n+          _1 = I32(const 0_i32);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+-         _4 = (_1.0: i32);\n++         _4 = const 0_i32;\n+          StorageLive(_5);\n+-         _5 = (_1.0: i32);\n+-         _3 = Add(move _4, move _5);\n++         _5 = const 0_i32;\n++         _3 = const 0_i32;\n+          StorageDead(_5);\n+          StorageDead(_4);\n+-         _2 = I32(move _3);\n++         _2 = I32(const 0_i32);\n+          StorageDead(_3);\n+          _0 = const ();\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "fbdbb3fa35cafe498a0db771af56d5c7eb23d051", "filename": "tests/mir-opt/dataflow-const-prop/self_assign.main.DataflowConstProp.diff", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign.main.DataflowConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,45 +2,45 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/self_assign.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/self_assign.rs:+1:9: +1:14\n-      let mut _2: i32;                     // in scope 0 at $DIR/self_assign.rs:+2:9: +2:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/self_assign.rs:+3:9: +3:10\n-      let mut _5: &i32;                    // in scope 0 at $DIR/self_assign.rs:+6:9: +6:10\n-      let mut _6: i32;                     // in scope 0 at $DIR/self_assign.rs:+7:9: +7:11\n+      let mut _0: ();\n+      let mut _1: i32;\n+      let mut _2: i32;\n+      let mut _3: i32;\n+      let mut _5: &i32;\n+      let mut _6: i32;\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/self_assign.rs:+1:9: +1:14\n-          let mut _4: &i32;                // in scope 1 at $DIR/self_assign.rs:+5:9: +5:14\n+          debug a => _1;\n+          let mut _4: &i32;\n           scope 2 {\n-              debug b => _4;               // in scope 2 at $DIR/self_assign.rs:+5:9: +5:14\n+              debug b => _4;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/self_assign.rs:+1:9: +1:14\n-          _1 = const 0_i32;                // scope 0 at $DIR/self_assign.rs:+1:17: +1:18\n-          StorageLive(_2);                 // scope 1 at $DIR/self_assign.rs:+2:9: +2:10\n-          _2 = _1;                         // scope 1 at $DIR/self_assign.rs:+2:9: +2:10\n-          _1 = Add(move _2, const 1_i32);  // scope 1 at $DIR/self_assign.rs:+2:5: +2:14\n-          StorageDead(_2);                 // scope 1 at $DIR/self_assign.rs:+2:13: +2:14\n-          StorageLive(_3);                 // scope 1 at $DIR/self_assign.rs:+3:9: +3:10\n-          _3 = _1;                         // scope 1 at $DIR/self_assign.rs:+3:9: +3:10\n-          _1 = move _3;                    // scope 1 at $DIR/self_assign.rs:+3:5: +3:10\n-          StorageDead(_3);                 // scope 1 at $DIR/self_assign.rs:+3:9: +3:10\n-          StorageLive(_4);                 // scope 1 at $DIR/self_assign.rs:+5:9: +5:14\n-          _4 = &_1;                        // scope 1 at $DIR/self_assign.rs:+5:17: +5:19\n-          StorageLive(_5);                 // scope 2 at $DIR/self_assign.rs:+6:9: +6:10\n-          _5 = _4;                         // scope 2 at $DIR/self_assign.rs:+6:9: +6:10\n-          _4 = move _5;                    // scope 2 at $DIR/self_assign.rs:+6:5: +6:10\n-          StorageDead(_5);                 // scope 2 at $DIR/self_assign.rs:+6:9: +6:10\n-          StorageLive(_6);                 // scope 2 at $DIR/self_assign.rs:+7:9: +7:11\n-          _6 = (*_4);                      // scope 2 at $DIR/self_assign.rs:+7:9: +7:11\n-          _1 = move _6;                    // scope 2 at $DIR/self_assign.rs:+7:5: +7:11\n-          StorageDead(_6);                 // scope 2 at $DIR/self_assign.rs:+7:10: +7:11\n-          _0 = const ();                   // scope 0 at $DIR/self_assign.rs:+0:11: +8:2\n-          StorageDead(_4);                 // scope 1 at $DIR/self_assign.rs:+8:1: +8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/self_assign.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/self_assign.rs:+8:2: +8:2\n+          StorageLive(_1);\n+          _1 = const 0_i32;\n+          StorageLive(_2);\n+          _2 = _1;\n+          _1 = Add(move _2, const 1_i32);\n+          StorageDead(_2);\n+          StorageLive(_3);\n+          _3 = _1;\n+          _1 = move _3;\n+          StorageDead(_3);\n+          StorageLive(_4);\n+          _4 = &_1;\n+          StorageLive(_5);\n+          _5 = _4;\n+          _4 = move _5;\n+          StorageDead(_5);\n+          StorageLive(_6);\n+          _6 = (*_4);\n+          _1 = move _6;\n+          StorageDead(_6);\n+          _0 = const ();\n+          StorageDead(_4);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "e2468a9645d6125ce6f225ca9edbbf7a6a31e0c9", "filename": "tests/mir-opt/dataflow-const-prop/self_assign_add.main.DataflowConstProp.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign_add.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign_add.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign_add.main.DataflowConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,22 +2,22 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/self_assign_add.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/self_assign_add.rs:+1:9: +1:14\n+      let mut _0: ();\n+      let mut _1: i32;\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/self_assign_add.rs:+1:9: +1:14\n+          debug a => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/self_assign_add.rs:+1:9: +1:14\n-          _1 = const 0_i32;                // scope 0 at $DIR/self_assign_add.rs:+1:17: +1:18\n--         _1 = Add(_1, const 1_i32);       // scope 1 at $DIR/self_assign_add.rs:+2:5: +2:11\n--         _1 = Add(_1, const 1_i32);       // scope 1 at $DIR/self_assign_add.rs:+3:5: +3:11\n-+         _1 = const 1_i32;                // scope 1 at $DIR/self_assign_add.rs:+2:5: +2:11\n-+         _1 = const 2_i32;                // scope 1 at $DIR/self_assign_add.rs:+3:5: +3:11\n-          _0 = const ();                   // scope 0 at $DIR/self_assign_add.rs:+0:11: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/self_assign_add.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/self_assign_add.rs:+4:2: +4:2\n+          StorageLive(_1);\n+          _1 = const 0_i32;\n+-         _1 = Add(_1, const 1_i32);\n+-         _1 = Add(_1, const 1_i32);\n++         _1 = const 1_i32;\n++         _1 = const 2_i32;\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "cc96cbef2f519b94e930eb54c3e9243dbc286540", "filename": "tests/mir-opt/dataflow-const-prop/sibling_ptr.main.DataflowConstProp.panic-abort.diff", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,53 +2,50 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/sibling_ptr.rs:+0:11: +0:11\n-      let mut _1: (u8, u8);                // in scope 0 at $DIR/sibling_ptr.rs:+1:9: +1:14\n-      let _2: ();                          // in scope 0 at $DIR/sibling_ptr.rs:+2:5: +5:6\n-      let mut _4: *mut u8;                 // in scope 0 at $DIR/sibling_ptr.rs:+4:10: +4:18\n-      let mut _5: *mut u8;                 // in scope 0 at $DIR/sibling_ptr.rs:+4:10: +4:11\n+      let mut _0: ();\n+      let mut _1: (u8, u8);\n+      let _2: ();\n+      let mut _4: *mut u8;\n+      let mut _5: *mut u8;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/sibling_ptr.rs:+1:9: +1:14\n-          let _6: u8;                      // in scope 1 at $DIR/sibling_ptr.rs:+6:9: +6:11\n+          debug x => _1;\n+          let _6: u8;\n           scope 2 {\n-              let _3: *mut u8;             // in scope 2 at $DIR/sibling_ptr.rs:+3:13: +3:14\n+              let _3: *mut u8;\n               scope 3 {\n-                  debug p => _3;           // in scope 3 at $DIR/sibling_ptr.rs:+3:13: +3:14\n+                  debug p => _3;\n               }\n           }\n           scope 4 {\n-              debug x1 => _6;              // in scope 4 at $DIR/sibling_ptr.rs:+6:9: +6:11\n+              debug x1 => _6;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/sibling_ptr.rs:+1:9: +1:14\n-          _1 = (const 0_u8, const 0_u8);   // scope 0 at $DIR/sibling_ptr.rs:+1:27: +1:33\n-          StorageLive(_2);                 // scope 1 at $DIR/sibling_ptr.rs:+2:5: +5:6\n-          StorageLive(_3);                 // scope 2 at $DIR/sibling_ptr.rs:+3:13: +3:14\n-          _3 = &raw mut (_1.0: u8);        // scope 2 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-          StorageLive(_4);                 // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:18\n-          StorageLive(_5);                 // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:11\n-          _5 = _3;                         // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:11\n-          _4 = ptr::mut_ptr::<impl *mut u8>::add(move _5, const 1_usize) -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/sibling_ptr.rs:16:12: 16:15\n-                                           // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = (const 0_u8, const 0_u8);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = &raw mut (_1.0: u8);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          _5 = _3;\n+          _4 = ptr::mut_ptr::<impl *mut u8>::add(move _5, const 1_usize) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageDead(_5);                 // scope 3 at $DIR/sibling_ptr.rs:+4:17: +4:18\n-          (*_4) = const 1_u8;              // scope 3 at $DIR/sibling_ptr.rs:+4:9: +4:22\n-          StorageDead(_4);                 // scope 3 at $DIR/sibling_ptr.rs:+4:22: +4:23\n-          _2 = const ();                   // scope 2 at $DIR/sibling_ptr.rs:+2:5: +5:6\n-          StorageDead(_3);                 // scope 2 at $DIR/sibling_ptr.rs:+5:5: +5:6\n-          StorageDead(_2);                 // scope 1 at $DIR/sibling_ptr.rs:+5:5: +5:6\n-          StorageLive(_6);                 // scope 1 at $DIR/sibling_ptr.rs:+6:9: +6:11\n-          _6 = (_1.1: u8);                 // scope 1 at $DIR/sibling_ptr.rs:+6:14: +6:17\n-          _0 = const ();                   // scope 0 at $DIR/sibling_ptr.rs:+0:11: +7:2\n-          StorageDead(_6);                 // scope 1 at $DIR/sibling_ptr.rs:+7:1: +7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/sibling_ptr.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/sibling_ptr.rs:+7:2: +7:2\n+          StorageDead(_5);\n+          (*_4) = const 1_u8;\n+          StorageDead(_4);\n+          _2 = const ();\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          StorageLive(_6);\n+          _6 = (_1.1: u8);\n+          _0 = const ();\n+          StorageDead(_6);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "927ca0124bbce3d33c0ca6a9c19fc915390245d4", "filename": "tests/mir-opt/dataflow-const-prop/sibling_ptr.main.DataflowConstProp.panic-unwind.diff", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,53 +2,50 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/sibling_ptr.rs:+0:11: +0:11\n-      let mut _1: (u8, u8);                // in scope 0 at $DIR/sibling_ptr.rs:+1:9: +1:14\n-      let _2: ();                          // in scope 0 at $DIR/sibling_ptr.rs:+2:5: +5:6\n-      let mut _4: *mut u8;                 // in scope 0 at $DIR/sibling_ptr.rs:+4:10: +4:18\n-      let mut _5: *mut u8;                 // in scope 0 at $DIR/sibling_ptr.rs:+4:10: +4:11\n+      let mut _0: ();\n+      let mut _1: (u8, u8);\n+      let _2: ();\n+      let mut _4: *mut u8;\n+      let mut _5: *mut u8;\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/sibling_ptr.rs:+1:9: +1:14\n-          let _6: u8;                      // in scope 1 at $DIR/sibling_ptr.rs:+6:9: +6:11\n+          debug x => _1;\n+          let _6: u8;\n           scope 2 {\n-              let _3: *mut u8;             // in scope 2 at $DIR/sibling_ptr.rs:+3:13: +3:14\n+              let _3: *mut u8;\n               scope 3 {\n-                  debug p => _3;           // in scope 3 at $DIR/sibling_ptr.rs:+3:13: +3:14\n+                  debug p => _3;\n               }\n           }\n           scope 4 {\n-              debug x1 => _6;              // in scope 4 at $DIR/sibling_ptr.rs:+6:9: +6:11\n+              debug x1 => _6;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/sibling_ptr.rs:+1:9: +1:14\n-          _1 = (const 0_u8, const 0_u8);   // scope 0 at $DIR/sibling_ptr.rs:+1:27: +1:33\n-          StorageLive(_2);                 // scope 1 at $DIR/sibling_ptr.rs:+2:5: +5:6\n-          StorageLive(_3);                 // scope 2 at $DIR/sibling_ptr.rs:+3:13: +3:14\n-          _3 = &raw mut (_1.0: u8);        // scope 2 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-          StorageLive(_4);                 // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:18\n-          StorageLive(_5);                 // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:11\n-          _5 = _3;                         // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:11\n-          _4 = ptr::mut_ptr::<impl *mut u8>::add(move _5, const 1_usize) -> bb1; // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/sibling_ptr.rs:16:12: 16:15\n-                                           // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = (const 0_u8, const 0_u8);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = &raw mut (_1.0: u8);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          _5 = _3;\n+          _4 = ptr::mut_ptr::<impl *mut u8>::add(move _5, const 1_usize) -> bb1;\n       }\n   \n       bb1: {\n-          StorageDead(_5);                 // scope 3 at $DIR/sibling_ptr.rs:+4:17: +4:18\n-          (*_4) = const 1_u8;              // scope 3 at $DIR/sibling_ptr.rs:+4:9: +4:22\n-          StorageDead(_4);                 // scope 3 at $DIR/sibling_ptr.rs:+4:22: +4:23\n-          _2 = const ();                   // scope 2 at $DIR/sibling_ptr.rs:+2:5: +5:6\n-          StorageDead(_3);                 // scope 2 at $DIR/sibling_ptr.rs:+5:5: +5:6\n-          StorageDead(_2);                 // scope 1 at $DIR/sibling_ptr.rs:+5:5: +5:6\n-          StorageLive(_6);                 // scope 1 at $DIR/sibling_ptr.rs:+6:9: +6:11\n-          _6 = (_1.1: u8);                 // scope 1 at $DIR/sibling_ptr.rs:+6:14: +6:17\n-          _0 = const ();                   // scope 0 at $DIR/sibling_ptr.rs:+0:11: +7:2\n-          StorageDead(_6);                 // scope 1 at $DIR/sibling_ptr.rs:+7:1: +7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/sibling_ptr.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/sibling_ptr.rs:+7:2: +7:2\n+          StorageDead(_5);\n+          (*_4) = const 1_u8;\n+          StorageDead(_4);\n+          _2 = const ();\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          StorageLive(_6);\n+          _6 = (_1.1: u8);\n+          _0 = const ();\n+          StorageDead(_6);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "914bc8ac47e95f38adba49da4b76fa2f3208e90d", "filename": "tests/mir-opt/dataflow-const-prop/struct.main.DataflowConstProp.diff", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fstruct.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fstruct.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fstruct.main.DataflowConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,50 +2,50 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/struct.rs:+0:11: +0:11\n-      let mut _1: S;                       // in scope 0 at $DIR/struct.rs:+1:9: +1:14\n-      let mut _3: i32;                     // in scope 0 at $DIR/struct.rs:+2:13: +2:16\n-      let mut _5: i32;                     // in scope 0 at $DIR/struct.rs:+4:13: +4:14\n-      let mut _6: i32;                     // in scope 0 at $DIR/struct.rs:+4:17: +4:20\n+      let mut _0: ();\n+      let mut _1: S;\n+      let mut _3: i32;\n+      let mut _5: i32;\n+      let mut _6: i32;\n       scope 1 {\n-          debug s => _1;                   // in scope 1 at $DIR/struct.rs:+1:9: +1:14\n-          let _2: i32;                     // in scope 1 at $DIR/struct.rs:+2:9: +2:10\n+          debug s => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug a => _2;               // in scope 2 at $DIR/struct.rs:+2:9: +2:10\n-              let _4: i32;                 // in scope 2 at $DIR/struct.rs:+4:9: +4:10\n+              debug a => _2;\n+              let _4: i32;\n               scope 3 {\n-                  debug b => _4;           // in scope 3 at $DIR/struct.rs:+4:9: +4:10\n+                  debug b => _4;\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/struct.rs:+1:9: +1:14\n-          _1 = S(const 1_i32);             // scope 0 at $DIR/struct.rs:+1:17: +1:21\n-          StorageLive(_2);                 // scope 1 at $DIR/struct.rs:+2:9: +2:10\n-          StorageLive(_3);                 // scope 1 at $DIR/struct.rs:+2:13: +2:16\n--         _3 = (_1.0: i32);                // scope 1 at $DIR/struct.rs:+2:13: +2:16\n--         _2 = Add(move _3, const 2_i32);  // scope 1 at $DIR/struct.rs:+2:13: +2:20\n-+         _3 = const 1_i32;                // scope 1 at $DIR/struct.rs:+2:13: +2:16\n-+         _2 = const 3_i32;                // scope 1 at $DIR/struct.rs:+2:13: +2:20\n-          StorageDead(_3);                 // scope 1 at $DIR/struct.rs:+2:19: +2:20\n-          (_1.0: i32) = const 3_i32;       // scope 2 at $DIR/struct.rs:+3:5: +3:12\n-          StorageLive(_4);                 // scope 2 at $DIR/struct.rs:+4:9: +4:10\n-          StorageLive(_5);                 // scope 2 at $DIR/struct.rs:+4:13: +4:14\n--         _5 = _2;                         // scope 2 at $DIR/struct.rs:+4:13: +4:14\n-+         _5 = const 3_i32;                // scope 2 at $DIR/struct.rs:+4:13: +4:14\n-          StorageLive(_6);                 // scope 2 at $DIR/struct.rs:+4:17: +4:20\n--         _6 = (_1.0: i32);                // scope 2 at $DIR/struct.rs:+4:17: +4:20\n--         _4 = Add(move _5, move _6);      // scope 2 at $DIR/struct.rs:+4:13: +4:20\n-+         _6 = const 3_i32;                // scope 2 at $DIR/struct.rs:+4:17: +4:20\n-+         _4 = const 6_i32;                // scope 2 at $DIR/struct.rs:+4:13: +4:20\n-          StorageDead(_6);                 // scope 2 at $DIR/struct.rs:+4:19: +4:20\n-          StorageDead(_5);                 // scope 2 at $DIR/struct.rs:+4:19: +4:20\n-          _0 = const ();                   // scope 0 at $DIR/struct.rs:+0:11: +5:2\n-          StorageDead(_4);                 // scope 2 at $DIR/struct.rs:+5:1: +5:2\n-          StorageDead(_2);                 // scope 1 at $DIR/struct.rs:+5:1: +5:2\n-          StorageDead(_1);                 // scope 0 at $DIR/struct.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/struct.rs:+5:2: +5:2\n+          StorageLive(_1);\n+          _1 = S(const 1_i32);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+-         _3 = (_1.0: i32);\n+-         _2 = Add(move _3, const 2_i32);\n++         _3 = const 1_i32;\n++         _2 = const 3_i32;\n+          StorageDead(_3);\n+          (_1.0: i32) = const 3_i32;\n+          StorageLive(_4);\n+          StorageLive(_5);\n+-         _5 = _2;\n++         _5 = const 3_i32;\n+          StorageLive(_6);\n+-         _6 = (_1.0: i32);\n+-         _4 = Add(move _5, move _6);\n++         _6 = const 3_i32;\n++         _4 = const 6_i32;\n+          StorageDead(_6);\n+          StorageDead(_5);\n+          _0 = const ();\n+          StorageDead(_4);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "c0f378cc21f88dc8123e5fde39214090dc6c96ee", "filename": "tests/mir-opt/dataflow-const-prop/terminator.main.DataflowConstProp.panic-abort.diff", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,39 +2,36 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/terminator.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/terminator.rs:+1:9: +1:10\n-      let _2: ();                          // in scope 0 at $DIR/terminator.rs:+3:5: +3:15\n-      let mut _3: i32;                     // in scope 0 at $DIR/terminator.rs:+3:9: +3:14\n-      let mut _4: i32;                     // in scope 0 at $DIR/terminator.rs:+3:9: +3:10\n+      let mut _0: ();\n+      let _1: i32;\n+      let _2: ();\n+      let mut _3: i32;\n+      let mut _4: i32;\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/terminator.rs:+1:9: +1:10\n+          debug a => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/terminator.rs:+1:9: +1:10\n-          _1 = const 1_i32;                // scope 0 at $DIR/terminator.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n-          StorageLive(_3);                 // scope 1 at $DIR/terminator.rs:+3:9: +3:14\n-          StorageLive(_4);                 // scope 1 at $DIR/terminator.rs:+3:9: +3:10\n--         _4 = _1;                         // scope 1 at $DIR/terminator.rs:+3:9: +3:10\n--         _3 = Add(move _4, const 1_i32);  // scope 1 at $DIR/terminator.rs:+3:9: +3:14\n-+         _4 = const 1_i32;                // scope 1 at $DIR/terminator.rs:+3:9: +3:10\n-+         _3 = const 2_i32;                // scope 1 at $DIR/terminator.rs:+3:9: +3:14\n-          StorageDead(_4);                 // scope 1 at $DIR/terminator.rs:+3:13: +3:14\n--         _2 = foo(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n-+         _2 = foo(const 2_i32) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n-                                           // mir::Constant\n-                                           // + span: $DIR/terminator.rs:10:5: 10:8\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = const 1_i32;\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+-         _4 = _1;\n+-         _3 = Add(move _4, const 1_i32);\n++         _4 = const 1_i32;\n++         _3 = const 2_i32;\n+          StorageDead(_4);\n+-         _2 = foo(move _3) -> [return: bb1, unwind unreachable];\n++         _2 = foo(const 2_i32) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/terminator.rs:+3:14: +3:15\n-          StorageDead(_2);                 // scope 1 at $DIR/terminator.rs:+3:15: +3:16\n-          _0 = const ();                   // scope 0 at $DIR/terminator.rs:+0:11: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/terminator.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/terminator.rs:+4:2: +4:2\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "f9723a049830411e3c9ba3858d990512488d668a", "filename": "tests/mir-opt/dataflow-const-prop/terminator.main.DataflowConstProp.panic-unwind.diff", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,39 +2,36 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/terminator.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/terminator.rs:+1:9: +1:10\n-      let _2: ();                          // in scope 0 at $DIR/terminator.rs:+3:5: +3:15\n-      let mut _3: i32;                     // in scope 0 at $DIR/terminator.rs:+3:9: +3:14\n-      let mut _4: i32;                     // in scope 0 at $DIR/terminator.rs:+3:9: +3:10\n+      let mut _0: ();\n+      let _1: i32;\n+      let _2: ();\n+      let mut _3: i32;\n+      let mut _4: i32;\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/terminator.rs:+1:9: +1:10\n+          debug a => _1;\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/terminator.rs:+1:9: +1:10\n-          _1 = const 1_i32;                // scope 0 at $DIR/terminator.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n-          StorageLive(_3);                 // scope 1 at $DIR/terminator.rs:+3:9: +3:14\n-          StorageLive(_4);                 // scope 1 at $DIR/terminator.rs:+3:9: +3:10\n--         _4 = _1;                         // scope 1 at $DIR/terminator.rs:+3:9: +3:10\n--         _3 = Add(move _4, const 1_i32);  // scope 1 at $DIR/terminator.rs:+3:9: +3:14\n-+         _4 = const 1_i32;                // scope 1 at $DIR/terminator.rs:+3:9: +3:10\n-+         _3 = const 2_i32;                // scope 1 at $DIR/terminator.rs:+3:9: +3:14\n-          StorageDead(_4);                 // scope 1 at $DIR/terminator.rs:+3:13: +3:14\n--         _2 = foo(move _3) -> bb1;        // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n-+         _2 = foo(const 2_i32) -> bb1;    // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n-                                           // mir::Constant\n-                                           // + span: $DIR/terminator.rs:10:5: 10:8\n-                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = const 1_i32;\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+-         _4 = _1;\n+-         _3 = Add(move _4, const 1_i32);\n++         _4 = const 1_i32;\n++         _3 = const 2_i32;\n+          StorageDead(_4);\n+-         _2 = foo(move _3) -> bb1;\n++         _2 = foo(const 2_i32) -> bb1;\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/terminator.rs:+3:14: +3:15\n-          StorageDead(_2);                 // scope 1 at $DIR/terminator.rs:+3:15: +3:16\n-          _0 = const ();                   // scope 0 at $DIR/terminator.rs:+0:11: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/terminator.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/terminator.rs:+4:2: +4:2\n+          StorageDead(_3);\n+          StorageDead(_2);\n+          _0 = const ();\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "5e385d21ec6028581904e911e3e44bb54f5383bf", "filename": "tests/mir-opt/dataflow-const-prop/tuple.main.DataflowConstProp.diff", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.main.DataflowConstProp.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,70 +2,70 @@\n + // MIR for `main` after DataflowConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/tuple.rs:+0:11: +0:11\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/tuple.rs:+1:9: +1:14\n-      let mut _3: i32;                     // in scope 0 at $DIR/tuple.rs:+2:13: +2:22\n-      let mut _4: i32;                     // in scope 0 at $DIR/tuple.rs:+2:13: +2:16\n-      let mut _5: i32;                     // in scope 0 at $DIR/tuple.rs:+2:19: +2:22\n-      let mut _7: i32;                     // in scope 0 at $DIR/tuple.rs:+4:13: +4:22\n-      let mut _8: i32;                     // in scope 0 at $DIR/tuple.rs:+4:13: +4:16\n-      let mut _9: i32;                     // in scope 0 at $DIR/tuple.rs:+4:19: +4:22\n-      let mut _10: i32;                    // in scope 0 at $DIR/tuple.rs:+4:25: +4:26\n+      let mut _0: ();\n+      let mut _1: (i32, i32);\n+      let mut _3: i32;\n+      let mut _4: i32;\n+      let mut _5: i32;\n+      let mut _7: i32;\n+      let mut _8: i32;\n+      let mut _9: i32;\n+      let mut _10: i32;\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/tuple.rs:+1:9: +1:14\n-          let _2: i32;                     // in scope 1 at $DIR/tuple.rs:+2:9: +2:10\n+          debug a => _1;\n+          let _2: i32;\n           scope 2 {\n-              debug b => _2;               // in scope 2 at $DIR/tuple.rs:+2:9: +2:10\n-              let _6: i32;                 // in scope 2 at $DIR/tuple.rs:+4:9: +4:10\n+              debug b => _2;\n+              let _6: i32;\n               scope 3 {\n-                  debug c => _6;           // in scope 3 at $DIR/tuple.rs:+4:9: +4:10\n+                  debug c => _6;\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/tuple.rs:+1:9: +1:14\n-          _1 = (const 1_i32, const 2_i32); // scope 0 at $DIR/tuple.rs:+1:17: +1:23\n-          StorageLive(_2);                 // scope 1 at $DIR/tuple.rs:+2:9: +2:10\n-          StorageLive(_3);                 // scope 1 at $DIR/tuple.rs:+2:13: +2:22\n-          StorageLive(_4);                 // scope 1 at $DIR/tuple.rs:+2:13: +2:16\n--         _4 = (_1.0: i32);                // scope 1 at $DIR/tuple.rs:+2:13: +2:16\n-+         _4 = const 1_i32;                // scope 1 at $DIR/tuple.rs:+2:13: +2:16\n-          StorageLive(_5);                 // scope 1 at $DIR/tuple.rs:+2:19: +2:22\n--         _5 = (_1.1: i32);                // scope 1 at $DIR/tuple.rs:+2:19: +2:22\n--         _3 = Add(move _4, move _5);      // scope 1 at $DIR/tuple.rs:+2:13: +2:22\n-+         _5 = const 2_i32;                // scope 1 at $DIR/tuple.rs:+2:19: +2:22\n-+         _3 = const 3_i32;                // scope 1 at $DIR/tuple.rs:+2:13: +2:22\n-          StorageDead(_5);                 // scope 1 at $DIR/tuple.rs:+2:21: +2:22\n-          StorageDead(_4);                 // scope 1 at $DIR/tuple.rs:+2:21: +2:22\n--         _2 = Add(move _3, const 3_i32);  // scope 1 at $DIR/tuple.rs:+2:13: +2:26\n-+         _2 = const 6_i32;                // scope 1 at $DIR/tuple.rs:+2:13: +2:26\n-          StorageDead(_3);                 // scope 1 at $DIR/tuple.rs:+2:25: +2:26\n-          _1 = (const 2_i32, const 3_i32); // scope 2 at $DIR/tuple.rs:+3:5: +3:15\n-          StorageLive(_6);                 // scope 2 at $DIR/tuple.rs:+4:9: +4:10\n-          StorageLive(_7);                 // scope 2 at $DIR/tuple.rs:+4:13: +4:22\n-          StorageLive(_8);                 // scope 2 at $DIR/tuple.rs:+4:13: +4:16\n--         _8 = (_1.0: i32);                // scope 2 at $DIR/tuple.rs:+4:13: +4:16\n-+         _8 = const 2_i32;                // scope 2 at $DIR/tuple.rs:+4:13: +4:16\n-          StorageLive(_9);                 // scope 2 at $DIR/tuple.rs:+4:19: +4:22\n--         _9 = (_1.1: i32);                // scope 2 at $DIR/tuple.rs:+4:19: +4:22\n--         _7 = Add(move _8, move _9);      // scope 2 at $DIR/tuple.rs:+4:13: +4:22\n-+         _9 = const 3_i32;                // scope 2 at $DIR/tuple.rs:+4:19: +4:22\n-+         _7 = const 5_i32;                // scope 2 at $DIR/tuple.rs:+4:13: +4:22\n-          StorageDead(_9);                 // scope 2 at $DIR/tuple.rs:+4:21: +4:22\n-          StorageDead(_8);                 // scope 2 at $DIR/tuple.rs:+4:21: +4:22\n-          StorageLive(_10);                // scope 2 at $DIR/tuple.rs:+4:25: +4:26\n--         _10 = _2;                        // scope 2 at $DIR/tuple.rs:+4:25: +4:26\n--         _6 = Add(move _7, move _10);     // scope 2 at $DIR/tuple.rs:+4:13: +4:26\n-+         _10 = const 6_i32;               // scope 2 at $DIR/tuple.rs:+4:25: +4:26\n-+         _6 = const 11_i32;               // scope 2 at $DIR/tuple.rs:+4:13: +4:26\n-          StorageDead(_10);                // scope 2 at $DIR/tuple.rs:+4:25: +4:26\n-          StorageDead(_7);                 // scope 2 at $DIR/tuple.rs:+4:25: +4:26\n-          _0 = const ();                   // scope 0 at $DIR/tuple.rs:+0:11: +5:2\n-          StorageDead(_6);                 // scope 2 at $DIR/tuple.rs:+5:1: +5:2\n-          StorageDead(_2);                 // scope 1 at $DIR/tuple.rs:+5:1: +5:2\n-          StorageDead(_1);                 // scope 0 at $DIR/tuple.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/tuple.rs:+5:2: +5:2\n+          StorageLive(_1);\n+          _1 = (const 1_i32, const 2_i32);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          StorageLive(_4);\n+-         _4 = (_1.0: i32);\n++         _4 = const 1_i32;\n+          StorageLive(_5);\n+-         _5 = (_1.1: i32);\n+-         _3 = Add(move _4, move _5);\n++         _5 = const 2_i32;\n++         _3 = const 3_i32;\n+          StorageDead(_5);\n+          StorageDead(_4);\n+-         _2 = Add(move _3, const 3_i32);\n++         _2 = const 6_i32;\n+          StorageDead(_3);\n+          _1 = (const 2_i32, const 3_i32);\n+          StorageLive(_6);\n+          StorageLive(_7);\n+          StorageLive(_8);\n+-         _8 = (_1.0: i32);\n++         _8 = const 2_i32;\n+          StorageLive(_9);\n+-         _9 = (_1.1: i32);\n+-         _7 = Add(move _8, move _9);\n++         _9 = const 3_i32;\n++         _7 = const 5_i32;\n+          StorageDead(_9);\n+          StorageDead(_8);\n+          StorageLive(_10);\n+-         _10 = _2;\n+-         _6 = Add(move _7, move _10);\n++         _10 = const 6_i32;\n++         _6 = const 11_i32;\n+          StorageDead(_10);\n+          StorageDead(_7);\n+          _0 = const ();\n+          StorageDead(_6);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "6221d478041a2554ded3db476e49f70de28d6514", "filename": "tests/mir-opt/dead-store-elimination/cycle.cycle.DeadStoreElimination.panic-abort.diff", "status": "modified", "additions": 50, "deletions": 53, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,75 +2,72 @@\n + // MIR for `cycle` after DeadStoreElimination\n   \n   fn cycle(_1: i32, _2: i32, _3: i32) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/cycle.rs:+0:10: +0:15\n-      debug y => _2;                       // in scope 0 at $DIR/cycle.rs:+0:22: +0:27\n-      debug z => _3;                       // in scope 0 at $DIR/cycle.rs:+0:34: +0:39\n-      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:46: +0:46\n--     let mut _4: ();                      // in scope 0 at $DIR/cycle.rs:+0:1: +9:2\n--     let mut _5: bool;                    // in scope 0 at $DIR/cycle.rs:+3:11: +3:17\n--     let _6: i32;                         // in scope 0 at $DIR/cycle.rs:+4:13: +4:17\n--     let mut _7: i32;                     // in scope 0 at $DIR/cycle.rs:+5:13: +5:14\n--     let mut _8: i32;                     // in scope 0 at $DIR/cycle.rs:+6:13: +6:14\n--     let mut _9: i32;                     // in scope 0 at $DIR/cycle.rs:+7:13: +7:17\n--     let mut _10: !;                      // in scope 0 at $DIR/cycle.rs:+3:5: +8:6\n--     let _11: ();                         // in scope 0 at $DIR/cycle.rs:+3:5: +8:6\n--     let mut _12: !;                      // in scope 0 at $DIR/cycle.rs:+3:5: +8:6\n-+     let mut _4: bool;                    // in scope 0 at $DIR/cycle.rs:+3:11: +3:17\n-+     let _5: i32;                         // in scope 0 at $DIR/cycle.rs:+4:13: +4:17\n+      debug x => _1;\n+      debug y => _2;\n+      debug z => _3;\n+      let mut _0: ();\n+-     let mut _4: ();\n+-     let mut _5: bool;\n+-     let _6: i32;\n+-     let mut _7: i32;\n+-     let mut _8: i32;\n+-     let mut _9: i32;\n+-     let mut _10: !;\n+-     let _11: ();\n+-     let mut _12: !;\n++     let mut _4: bool;\n++     let _5: i32;\n       scope 1 {\n--         debug temp => _6;                // in scope 1 at $DIR/cycle.rs:+4:13: +4:17\n-+         debug temp => _5;                // in scope 1 at $DIR/cycle.rs:+4:13: +4:17\n+-         debug temp => _6;\n++         debug temp => _5;\n       }\n   \n       bb0: {\n-          goto -> bb1;                     // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n+          goto -> bb1;\n       }\n   \n       bb1: {\n--         StorageLive(_5);                 // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n--         _5 = cond() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n-+         StorageLive(_4);                 // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n-+         _4 = cond() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n-                                           // mir::Constant\n-                                           // + span: $DIR/cycle.rs:13:11: 13:15\n-                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n+-         StorageLive(_5);\n+-         _5 = cond() -> [return: bb2, unwind unreachable];\n++         StorageLive(_4);\n++         _4 = cond() -> [return: bb2, unwind unreachable];\n       }\n   \n       bb2: {\n--         switchInt(move _5) -> [0: bb4, otherwise: bb3]; // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n-+         switchInt(move _4) -> [0: bb4, otherwise: bb3]; // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n+-         switchInt(move _5) -> [0: bb4, otherwise: bb3];\n++         switchInt(move _4) -> [0: bb4, otherwise: bb3];\n       }\n   \n       bb3: {\n--         StorageLive(_6);                 // scope 0 at $DIR/cycle.rs:+4:13: +4:17\n--         _6 = _3;                         // scope 0 at $DIR/cycle.rs:+4:20: +4:21\n--         StorageLive(_7);                 // scope 1 at $DIR/cycle.rs:+5:13: +5:14\n--         _7 = _2;                         // scope 1 at $DIR/cycle.rs:+5:13: +5:14\n--         _3 = move _7;                    // scope 1 at $DIR/cycle.rs:+5:9: +5:14\n--         StorageDead(_7);                 // scope 1 at $DIR/cycle.rs:+5:13: +5:14\n--         StorageLive(_8);                 // scope 1 at $DIR/cycle.rs:+6:13: +6:14\n--         _8 = _1;                         // scope 1 at $DIR/cycle.rs:+6:13: +6:14\n--         _2 = move _8;                    // scope 1 at $DIR/cycle.rs:+6:9: +6:14\n--         StorageDead(_8);                 // scope 1 at $DIR/cycle.rs:+6:13: +6:14\n--         StorageLive(_9);                 // scope 1 at $DIR/cycle.rs:+7:13: +7:17\n--         _9 = _6;                         // scope 1 at $DIR/cycle.rs:+7:13: +7:17\n--         _1 = move _9;                    // scope 1 at $DIR/cycle.rs:+7:9: +7:17\n--         StorageDead(_9);                 // scope 1 at $DIR/cycle.rs:+7:16: +7:17\n--         _4 = const ();                   // scope 0 at $DIR/cycle.rs:+3:18: +8:6\n--         StorageDead(_6);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n-+         StorageLive(_5);                 // scope 0 at $DIR/cycle.rs:+4:13: +4:17\n-          StorageDead(_5);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n-+         StorageDead(_4);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n-          goto -> bb1;                     // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n+-         StorageLive(_6);\n+-         _6 = _3;\n+-         StorageLive(_7);\n+-         _7 = _2;\n+-         _3 = move _7;\n+-         StorageDead(_7);\n+-         StorageLive(_8);\n+-         _8 = _1;\n+-         _2 = move _8;\n+-         StorageDead(_8);\n+-         StorageLive(_9);\n+-         _9 = _6;\n+-         _1 = move _9;\n+-         StorageDead(_9);\n+-         _4 = const ();\n+-         StorageDead(_6);\n++         StorageLive(_5);\n+          StorageDead(_5);\n++         StorageDead(_4);\n+          goto -> bb1;\n       }\n   \n       bb4: {\n--         StorageLive(_11);                // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n-          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n--         StorageDead(_11);                // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n--         StorageDead(_5);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n-+         StorageDead(_4);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n-          return;                          // scope 0 at $DIR/cycle.rs:+9:2: +9:2\n+-         StorageLive(_11);\n+          _0 = const ();\n+-         StorageDead(_11);\n+-         StorageDead(_5);\n++         StorageDead(_4);\n+          return;\n       }\n   }\n   "}, {"sha": "80a4dd371839c62a3bd669209481f67595889269", "filename": "tests/mir-opt/dead-store-elimination/cycle.cycle.DeadStoreElimination.panic-unwind.diff", "status": "modified", "additions": 50, "deletions": 53, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,75 +2,72 @@\n + // MIR for `cycle` after DeadStoreElimination\n   \n   fn cycle(_1: i32, _2: i32, _3: i32) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/cycle.rs:+0:10: +0:15\n-      debug y => _2;                       // in scope 0 at $DIR/cycle.rs:+0:22: +0:27\n-      debug z => _3;                       // in scope 0 at $DIR/cycle.rs:+0:34: +0:39\n-      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:46: +0:46\n--     let mut _4: ();                      // in scope 0 at $DIR/cycle.rs:+0:1: +9:2\n--     let mut _5: bool;                    // in scope 0 at $DIR/cycle.rs:+3:11: +3:17\n--     let _6: i32;                         // in scope 0 at $DIR/cycle.rs:+4:13: +4:17\n--     let mut _7: i32;                     // in scope 0 at $DIR/cycle.rs:+5:13: +5:14\n--     let mut _8: i32;                     // in scope 0 at $DIR/cycle.rs:+6:13: +6:14\n--     let mut _9: i32;                     // in scope 0 at $DIR/cycle.rs:+7:13: +7:17\n--     let mut _10: !;                      // in scope 0 at $DIR/cycle.rs:+3:5: +8:6\n--     let _11: ();                         // in scope 0 at $DIR/cycle.rs:+3:5: +8:6\n--     let mut _12: !;                      // in scope 0 at $DIR/cycle.rs:+3:5: +8:6\n-+     let mut _4: bool;                    // in scope 0 at $DIR/cycle.rs:+3:11: +3:17\n-+     let _5: i32;                         // in scope 0 at $DIR/cycle.rs:+4:13: +4:17\n+      debug x => _1;\n+      debug y => _2;\n+      debug z => _3;\n+      let mut _0: ();\n+-     let mut _4: ();\n+-     let mut _5: bool;\n+-     let _6: i32;\n+-     let mut _7: i32;\n+-     let mut _8: i32;\n+-     let mut _9: i32;\n+-     let mut _10: !;\n+-     let _11: ();\n+-     let mut _12: !;\n++     let mut _4: bool;\n++     let _5: i32;\n       scope 1 {\n--         debug temp => _6;                // in scope 1 at $DIR/cycle.rs:+4:13: +4:17\n-+         debug temp => _5;                // in scope 1 at $DIR/cycle.rs:+4:13: +4:17\n+-         debug temp => _6;\n++         debug temp => _5;\n       }\n   \n       bb0: {\n-          goto -> bb1;                     // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n+          goto -> bb1;\n       }\n   \n       bb1: {\n--         StorageLive(_5);                 // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n--         _5 = cond() -> bb2;              // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n-+         StorageLive(_4);                 // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n-+         _4 = cond() -> bb2;              // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n-                                           // mir::Constant\n-                                           // + span: $DIR/cycle.rs:13:11: 13:15\n-                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n+-         StorageLive(_5);\n+-         _5 = cond() -> bb2;\n++         StorageLive(_4);\n++         _4 = cond() -> bb2;\n       }\n   \n       bb2: {\n--         switchInt(move _5) -> [0: bb4, otherwise: bb3]; // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n-+         switchInt(move _4) -> [0: bb4, otherwise: bb3]; // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n+-         switchInt(move _5) -> [0: bb4, otherwise: bb3];\n++         switchInt(move _4) -> [0: bb4, otherwise: bb3];\n       }\n   \n       bb3: {\n--         StorageLive(_6);                 // scope 0 at $DIR/cycle.rs:+4:13: +4:17\n--         _6 = _3;                         // scope 0 at $DIR/cycle.rs:+4:20: +4:21\n--         StorageLive(_7);                 // scope 1 at $DIR/cycle.rs:+5:13: +5:14\n--         _7 = _2;                         // scope 1 at $DIR/cycle.rs:+5:13: +5:14\n--         _3 = move _7;                    // scope 1 at $DIR/cycle.rs:+5:9: +5:14\n--         StorageDead(_7);                 // scope 1 at $DIR/cycle.rs:+5:13: +5:14\n--         StorageLive(_8);                 // scope 1 at $DIR/cycle.rs:+6:13: +6:14\n--         _8 = _1;                         // scope 1 at $DIR/cycle.rs:+6:13: +6:14\n--         _2 = move _8;                    // scope 1 at $DIR/cycle.rs:+6:9: +6:14\n--         StorageDead(_8);                 // scope 1 at $DIR/cycle.rs:+6:13: +6:14\n--         StorageLive(_9);                 // scope 1 at $DIR/cycle.rs:+7:13: +7:17\n--         _9 = _6;                         // scope 1 at $DIR/cycle.rs:+7:13: +7:17\n--         _1 = move _9;                    // scope 1 at $DIR/cycle.rs:+7:9: +7:17\n--         StorageDead(_9);                 // scope 1 at $DIR/cycle.rs:+7:16: +7:17\n--         _4 = const ();                   // scope 0 at $DIR/cycle.rs:+3:18: +8:6\n--         StorageDead(_6);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n-+         StorageLive(_5);                 // scope 0 at $DIR/cycle.rs:+4:13: +4:17\n-          StorageDead(_5);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n-+         StorageDead(_4);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n-          goto -> bb1;                     // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n+-         StorageLive(_6);\n+-         _6 = _3;\n+-         StorageLive(_7);\n+-         _7 = _2;\n+-         _3 = move _7;\n+-         StorageDead(_7);\n+-         StorageLive(_8);\n+-         _8 = _1;\n+-         _2 = move _8;\n+-         StorageDead(_8);\n+-         StorageLive(_9);\n+-         _9 = _6;\n+-         _1 = move _9;\n+-         StorageDead(_9);\n+-         _4 = const ();\n+-         StorageDead(_6);\n++         StorageLive(_5);\n+          StorageDead(_5);\n++         StorageDead(_4);\n+          goto -> bb1;\n       }\n   \n       bb4: {\n--         StorageLive(_11);                // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n-          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n--         StorageDead(_11);                // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n--         StorageDead(_5);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n-+         StorageDead(_4);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n-          return;                          // scope 0 at $DIR/cycle.rs:+9:2: +9:2\n+-         StorageLive(_11);\n+          _0 = const ();\n+-         StorageDead(_11);\n+-         StorageDead(_5);\n++         StorageDead(_4);\n+          return;\n       }\n   }\n   "}, {"sha": "2130518771a58f8fb8d8b3db998466ee4cb1b42c", "filename": "tests/mir-opt/dead-store-elimination/place_mention.main.DeadStoreElimination.diff", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.main.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.main.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.main.DeadStoreElimination.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,24 +2,18 @@\n + // MIR for `main` after DeadStoreElimination\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/place_mention.rs:+0:11: +0:11\n-      let mut _1: (&str, &str);            // in scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n+      let mut _0: ();\n+      let mut _1: (&str, &str);\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n-          _1 = (const \"Hello\", const \"World\"); // scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n-                                           // mir::Constant\n-                                           // + span: $DIR/place_mention.rs:8:19: 8:26\n-                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-                                           // mir::Constant\n-                                           // + span: $DIR/place_mention.rs:8:28: 8:35\n-                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-          PlaceMention(_1);                // scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n-          StorageDead(_1);                 // scope 0 at $DIR/place_mention.rs:+3:36: +3:37\n-          _0 = const ();                   // scope 0 at $DIR/place_mention.rs:+0:11: +4:2\n-          return;                          // scope 0 at $DIR/place_mention.rs:+4:2: +4:2\n+          StorageLive(_1);\n+          _1 = (const \"Hello\", const \"World\");\n+          PlaceMention(_1);\n+          StorageDead(_1);\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "31f727e5fb350444a518be8ca123618ee448ec55", "filename": "tests/mir-opt/dead-store-elimination/provenance_soundness.pointer_to_int.DeadStoreElimination.diff", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.pointer_to_int.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.pointer_to_int.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.pointer_to_int.DeadStoreElimination.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `pointer_to_int` after DeadStoreElimination\n   \n   fn pointer_to_int(_1: *mut i32) -> () {\n-      debug p => _1;                       // in scope 0 at $DIR/provenance_soundness.rs:+0:19: +0:20\n-      let mut _0: ();                      // return place in scope 0 at $DIR/provenance_soundness.rs:+0:32: +0:32\n-      let _2: usize;                       // in scope 0 at $DIR/provenance_soundness.rs:+1:9: +1:11\n-      let mut _3: *mut i32;                // in scope 0 at $DIR/provenance_soundness.rs:+1:14: +1:15\n-      let mut _5: *mut i32;                // in scope 0 at $DIR/provenance_soundness.rs:+2:14: +2:15\n+      debug p => _1;\n+      let mut _0: ();\n+      let _2: usize;\n+      let mut _3: *mut i32;\n+      let mut _5: *mut i32;\n       scope 1 {\n-          debug _x => _2;                  // in scope 1 at $DIR/provenance_soundness.rs:+1:9: +1:11\n-          let _4: isize;                   // in scope 1 at $DIR/provenance_soundness.rs:+2:9: +2:11\n+          debug _x => _2;\n+          let _4: isize;\n           scope 2 {\n-              debug _y => _4;              // in scope 2 at $DIR/provenance_soundness.rs:+2:9: +2:11\n+              debug _y => _4;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/provenance_soundness.rs:+1:9: +1:11\n-          StorageLive(_3);                 // scope 0 at $DIR/provenance_soundness.rs:+1:14: +1:15\n-          _3 = _1;                         // scope 0 at $DIR/provenance_soundness.rs:+1:14: +1:15\n-          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/provenance_soundness.rs:+1:14: +1:24\n-          StorageDead(_3);                 // scope 0 at $DIR/provenance_soundness.rs:+1:23: +1:24\n-          StorageLive(_4);                 // scope 1 at $DIR/provenance_soundness.rs:+2:9: +2:11\n-          StorageLive(_5);                 // scope 1 at $DIR/provenance_soundness.rs:+2:14: +2:15\n-          _5 = _1;                         // scope 1 at $DIR/provenance_soundness.rs:+2:14: +2:15\n-          _4 = move _5 as isize (PointerExposeAddress); // scope 1 at $DIR/provenance_soundness.rs:+2:14: +2:24\n-          StorageDead(_5);                 // scope 1 at $DIR/provenance_soundness.rs:+2:23: +2:24\n-          _0 = const ();                   // scope 0 at $DIR/provenance_soundness.rs:+0:32: +3:2\n-          StorageDead(_4);                 // scope 1 at $DIR/provenance_soundness.rs:+3:1: +3:2\n-          StorageDead(_2);                 // scope 0 at $DIR/provenance_soundness.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/provenance_soundness.rs:+3:2: +3:2\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = _1;\n+          _2 = move _3 as usize (PointerExposeAddress);\n+          StorageDead(_3);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          _5 = _1;\n+          _4 = move _5 as isize (PointerExposeAddress);\n+          StorageDead(_5);\n+          _0 = const ();\n+          StorageDead(_4);\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "e1ebc39aacc4a942219ced571e2ef0cc2d6d80bd", "filename": "tests/mir-opt/dead-store-elimination/provenance_soundness.retags.DeadStoreElimination.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.retags.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.retags.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.retags.DeadStoreElimination.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,13 +2,13 @@\n + // MIR for `retags` after DeadStoreElimination\n   \n   fn retags(_1: &mut i32) -> () {\n-      debug _r => _1;                      // in scope 0 at $DIR/provenance_soundness.rs:+0:11: +0:13\n-      let mut _0: ();                      // return place in scope 0 at $DIR/provenance_soundness.rs:+0:25: +0:25\n+      debug _r => _1;\n+      let mut _0: ();\n   \n       bb0: {\n-          Retag([fn entry] _1);            // scope 0 at $DIR/provenance_soundness.rs:+0:11: +0:13\n-          _0 = const ();                   // scope 0 at $DIR/provenance_soundness.rs:+0:25: +0:27\n-          return;                          // scope 0 at $DIR/provenance_soundness.rs:+0:27: +0:27\n+          Retag([fn entry] _1);\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "5c4fc06a2baecd4ac1216fbef47de6afdce4226d", "filename": "tests/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-abort.diff", "status": "modified", "additions": 49, "deletions": 53, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,99 +2,95 @@\n + // MIR for `is_line_doc_comment_2` after DeduplicateBlocks\n   \n   fn is_line_doc_comment_2(_1: &str) -> bool {\n-      debug s => _1;                       // in scope 0 at $DIR/deduplicate_blocks.rs:+0:36: +0:37\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/deduplicate_blocks.rs:+0:48: +0:52\n-      let mut _2: &[u8];                   // in scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-      let mut _3: &str;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-      let mut _4: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-      let mut _5: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-      let mut _6: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-      let mut _7: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-      let mut _8: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-      let mut _9: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+      debug s => _1;\n+      let mut _0: bool;\n+      let mut _2: &[u8];\n+      let mut _3: &str;\n+      let mut _4: usize;\n+      let mut _5: usize;\n+      let mut _6: bool;\n+      let mut _7: usize;\n+      let mut _8: usize;\n+      let mut _9: bool;\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-          StorageLive(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-          _3 = &(*_1);                     // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-          _2 = core::str::<impl str>::as_bytes(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-                                           // mir::Constant\n-                                           // + span: $DIR/deduplicate_blocks.rs:6:13: 6:21\n-                                           // + literal: Const { ty: for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = &(*_1);\n+          _2 = core::str::<impl str>::as_bytes(move _3) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:22: +1:23\n-          _7 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-          _8 = const 4_usize;              // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-          _9 = Ge(move _7, move _8);       // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-          switchInt(move _9) -> [0: bb6, otherwise: bb2]; // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          StorageDead(_3);\n+          _7 = Len((*_2));\n+          _8 = const 4_usize;\n+          _9 = Ge(move _7, move _8);\n+          switchInt(move _9) -> [0: bb6, otherwise: bb2];\n       }\n   \n       bb2: {\n-          switchInt((*_2)[0 of 4]) -> [47: bb3, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[0 of 4]) -> [47: bb3, otherwise: bb6];\n       }\n   \n       bb3: {\n-          switchInt((*_2)[1 of 4]) -> [47: bb4, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[1 of 4]) -> [47: bb4, otherwise: bb6];\n       }\n   \n       bb4: {\n-          switchInt((*_2)[2 of 4]) -> [47: bb5, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[2 of 4]) -> [47: bb5, otherwise: bb6];\n       }\n   \n       bb5: {\n--         switchInt((*_2)[3 of 4]) -> [47: bb11, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n-+         switchInt((*_2)[3 of 4]) -> [47: bb10, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+-         switchInt((*_2)[3 of 4]) -> [47: bb11, otherwise: bb6];\n++         switchInt((*_2)[3 of 4]) -> [47: bb10, otherwise: bb6];\n       }\n   \n       bb6: {\n-          _4 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-          _5 = const 3_usize;              // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-          _6 = Ge(move _4, move _5);       // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-          switchInt(move _6) -> [0: bb10, otherwise: bb7]; // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+          _4 = Len((*_2));\n+          _5 = const 3_usize;\n+          _6 = Ge(move _4, move _5);\n+          switchInt(move _6) -> [0: bb10, otherwise: bb7];\n       }\n   \n       bb7: {\n-          switchInt((*_2)[0 of 3]) -> [47: bb8, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[0 of 3]) -> [47: bb8, otherwise: bb10];\n       }\n   \n       bb8: {\n-          switchInt((*_2)[1 of 3]) -> [47: bb9, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[1 of 3]) -> [47: bb9, otherwise: bb10];\n       }\n   \n       bb9: {\n--         switchInt((*_2)[2 of 3]) -> [47: bb12, 33: bb13, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n-+         switchInt((*_2)[2 of 3]) -> [47: bb11, 33: bb11, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+-         switchInt((*_2)[2 of 3]) -> [47: bb12, 33: bb13, otherwise: bb10];\n++         switchInt((*_2)[2 of 3]) -> [47: bb11, 33: bb11, otherwise: bb10];\n       }\n   \n       bb10: {\n--         _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:+5:14: +5:19\n--         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+5:14: +5:19\n--     }\n-- \n--     bb11: {\n-          _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n--         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n-+         goto -> bb12;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n+          _0 = const false;\n+-         goto -> bb14;\n++         goto -> bb12;\n       }\n   \n--     bb12: {\n--         _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:+3:35: +3:39\n--         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+3:35: +3:39\n+      bb11: {\n+-         _0 = const false;\n+-         goto -> bb14;\n -     }\n - \n--     bb13: {\n-+     bb11: {\n-          _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n--         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n-+         goto -> bb12;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n+-     bb12: {\n+          _0 = const true;\n+-         goto -> bb14;\n++         goto -> bb12;\n       }\n   \n+-     bb13: {\n+-         _0 = const true;\n+-         goto -> bb14;\n+-     }\n+- \n -     bb14: {\n +     bb12: {\n-          StorageDead(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/deduplicate_blocks.rs:+7:2: +7:2\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "66396d28e704e2e7798f27c91f78957049ab1c1f", "filename": "tests/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-unwind.diff", "status": "modified", "additions": 49, "deletions": 53, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,99 +2,95 @@\n + // MIR for `is_line_doc_comment_2` after DeduplicateBlocks\n   \n   fn is_line_doc_comment_2(_1: &str) -> bool {\n-      debug s => _1;                       // in scope 0 at $DIR/deduplicate_blocks.rs:+0:36: +0:37\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/deduplicate_blocks.rs:+0:48: +0:52\n-      let mut _2: &[u8];                   // in scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-      let mut _3: &str;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-      let mut _4: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-      let mut _5: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-      let mut _6: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-      let mut _7: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-      let mut _8: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-      let mut _9: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+      debug s => _1;\n+      let mut _0: bool;\n+      let mut _2: &[u8];\n+      let mut _3: &str;\n+      let mut _4: usize;\n+      let mut _5: usize;\n+      let mut _6: bool;\n+      let mut _7: usize;\n+      let mut _8: usize;\n+      let mut _9: bool;\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-          StorageLive(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-          _3 = &(*_1);                     // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-          _2 = core::str::<impl str>::as_bytes(move _3) -> bb1; // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n-                                           // mir::Constant\n-                                           // + span: $DIR/deduplicate_blocks.rs:6:13: 6:21\n-                                           // + literal: Const { ty: for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = &(*_1);\n+          _2 = core::str::<impl str>::as_bytes(move _3) -> bb1;\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:22: +1:23\n-          _7 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-          _8 = const 4_usize;              // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-          _9 = Ge(move _7, move _8);       // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n-          switchInt(move _9) -> [0: bb6, otherwise: bb2]; // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          StorageDead(_3);\n+          _7 = Len((*_2));\n+          _8 = const 4_usize;\n+          _9 = Ge(move _7, move _8);\n+          switchInt(move _9) -> [0: bb6, otherwise: bb2];\n       }\n   \n       bb2: {\n-          switchInt((*_2)[0 of 4]) -> [47: bb3, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[0 of 4]) -> [47: bb3, otherwise: bb6];\n       }\n   \n       bb3: {\n-          switchInt((*_2)[1 of 4]) -> [47: bb4, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[1 of 4]) -> [47: bb4, otherwise: bb6];\n       }\n   \n       bb4: {\n-          switchInt((*_2)[2 of 4]) -> [47: bb5, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[2 of 4]) -> [47: bb5, otherwise: bb6];\n       }\n   \n       bb5: {\n--         switchInt((*_2)[3 of 4]) -> [47: bb11, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n-+         switchInt((*_2)[3 of 4]) -> [47: bb10, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+-         switchInt((*_2)[3 of 4]) -> [47: bb11, otherwise: bb6];\n++         switchInt((*_2)[3 of 4]) -> [47: bb10, otherwise: bb6];\n       }\n   \n       bb6: {\n-          _4 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-          _5 = const 3_usize;              // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-          _6 = Ge(move _4, move _5);       // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n-          switchInt(move _6) -> [0: bb10, otherwise: bb7]; // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+          _4 = Len((*_2));\n+          _5 = const 3_usize;\n+          _6 = Ge(move _4, move _5);\n+          switchInt(move _6) -> [0: bb10, otherwise: bb7];\n       }\n   \n       bb7: {\n-          switchInt((*_2)[0 of 3]) -> [47: bb8, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[0 of 3]) -> [47: bb8, otherwise: bb10];\n       }\n   \n       bb8: {\n-          switchInt((*_2)[1 of 3]) -> [47: bb9, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+          switchInt((*_2)[1 of 3]) -> [47: bb9, otherwise: bb10];\n       }\n   \n       bb9: {\n--         switchInt((*_2)[2 of 3]) -> [47: bb12, 33: bb13, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n-+         switchInt((*_2)[2 of 3]) -> [47: bb11, 33: bb11, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+-         switchInt((*_2)[2 of 3]) -> [47: bb12, 33: bb13, otherwise: bb10];\n++         switchInt((*_2)[2 of 3]) -> [47: bb11, 33: bb11, otherwise: bb10];\n       }\n   \n       bb10: {\n--         _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:+5:14: +5:19\n--         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+5:14: +5:19\n--     }\n-- \n--     bb11: {\n-          _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n--         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n-+         goto -> bb12;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n+          _0 = const false;\n+-         goto -> bb14;\n++         goto -> bb12;\n       }\n   \n--     bb12: {\n--         _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:+3:35: +3:39\n--         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+3:35: +3:39\n+      bb11: {\n+-         _0 = const false;\n+-         goto -> bb14;\n -     }\n - \n--     bb13: {\n-+     bb11: {\n-          _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n--         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n-+         goto -> bb12;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n+-     bb12: {\n+          _0 = const true;\n+-         goto -> bb14;\n++         goto -> bb12;\n       }\n   \n+-     bb13: {\n+-         _0 = const true;\n+-         goto -> bb14;\n+-     }\n+- \n -     bb14: {\n +     bb12: {\n-          StorageDead(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/deduplicate_blocks.rs:+7:2: +7:2\n+          StorageDead(_2);\n+          return;\n       }\n   }\n   "}, {"sha": "1e4f7485089ec7d629e131ea763d1283d2f4b78c", "filename": "tests/mir-opt/deref-patterns/string.foo.PreCodegen.after.mir", "status": "modified", "additions": 29, "deletions": 38, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -1,74 +1,65 @@\n // MIR for `foo` after PreCodegen\n \n fn foo(_1: Option<String>) -> i32 {\n-    debug s => _1;                       // in scope 0 at $DIR/string.rs:+0:12: +0:13\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/string.rs:+0:34: +0:37\n-    let mut _2: bool;                    // in scope 0 at $DIR/string.rs:+5:1: +5:2\n-    let mut _3: isize;                   // in scope 0 at $DIR/string.rs:+2:9: +2:18\n-    let mut _4: &std::string::String;    // in scope 0 at $DIR/string.rs:+2:14: +2:17\n-    let mut _5: &str;                    // in scope 0 at $DIR/string.rs:+2:14: +2:17\n-    let mut _6: bool;                    // in scope 0 at $DIR/string.rs:+2:14: +2:17\n-    let _7: std::option::Option<std::string::String>; // in scope 0 at $DIR/string.rs:+3:9: +3:10\n+    debug s => _1;\n+    let mut _0: i32;\n+    let mut _2: bool;\n+    let mut _3: isize;\n+    let mut _4: &std::string::String;\n+    let mut _5: &str;\n+    let mut _6: bool;\n+    let _7: std::option::Option<std::string::String>;\n     scope 1 {\n-        debug s => _7;                   // in scope 1 at $DIR/string.rs:+3:9: +3:10\n+        debug s => _7;\n     }\n \n     bb0: {\n-        _2 = const false;                // scope 0 at $DIR/string.rs:+1:11: +1:12\n-        _2 = const true;                 // scope 0 at $DIR/string.rs:+1:11: +1:12\n-        _3 = discriminant(_1);           // scope 0 at $DIR/string.rs:+1:11: +1:12\n-        switchInt(move _3) -> [1: bb1, otherwise: bb5]; // scope 0 at $DIR/string.rs:+1:5: +1:12\n+        _2 = const false;\n+        _2 = const true;\n+        _3 = discriminant(_1);\n+        switchInt(move _3) -> [1: bb1, otherwise: bb5];\n     }\n \n     bb1: {\n-        _4 = &((_1 as Some).0: std::string::String); // scope 0 at $DIR/string.rs:+2:14: +2:17\n-        _5 = <String as Deref>::deref(move _4) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n-                                         // mir::Constant\n-                                         // + span: $DIR/string.rs:9:14: 9:17\n-                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }\n+        _4 = &((_1 as Some).0: std::string::String);\n+        _5 = <String as Deref>::deref(move _4) -> [return: bb2, unwind unreachable];\n     }\n \n     bb2: {\n-        _6 = <str as PartialEq>::eq(_5, const \"a\") -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n-                                         // mir::Constant\n-                                         // + span: $DIR/string.rs:9:14: 9:17\n-                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }\n-                                         // mir::Constant\n-                                         // + span: $DIR/string.rs:9:14: 9:17\n-                                         // + literal: Const { ty: &str, val: Value(ValTree::Branch(..)) }\n+        _6 = <str as PartialEq>::eq(_5, const \"a\") -> [return: bb3, unwind unreachable];\n     }\n \n     bb3: {\n-        switchInt(move _6) -> [0: bb5, otherwise: bb4]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n+        switchInt(move _6) -> [0: bb5, otherwise: bb4];\n     }\n \n     bb4: {\n-        _0 = const 1234_i32;             // scope 0 at $DIR/string.rs:+2:22: +2:26\n-        goto -> bb7;                     // scope 0 at $DIR/string.rs:+2:22: +2:26\n+        _0 = const 1234_i32;\n+        goto -> bb7;\n     }\n \n     bb5: {\n-        StorageLive(_7);                 // scope 0 at $DIR/string.rs:+3:9: +3:10\n-        _2 = const false;                // scope 0 at $DIR/string.rs:+3:9: +3:10\n-        _7 = move _1;                    // scope 0 at $DIR/string.rs:+3:9: +3:10\n-        _0 = const 4321_i32;             // scope 1 at $DIR/string.rs:+3:14: +3:18\n-        drop(_7) -> [return: bb6, unwind unreachable]; // scope 0 at $DIR/string.rs:+3:17: +3:18\n+        StorageLive(_7);\n+        _2 = const false;\n+        _7 = move _1;\n+        _0 = const 4321_i32;\n+        drop(_7) -> [return: bb6, unwind unreachable];\n     }\n \n     bb6: {\n-        StorageDead(_7);                 // scope 0 at $DIR/string.rs:+3:17: +3:18\n-        goto -> bb7;                     // scope 0 at $DIR/string.rs:+3:17: +3:18\n+        StorageDead(_7);\n+        goto -> bb7;\n     }\n \n     bb7: {\n-        switchInt(_2) -> [0: bb9, otherwise: bb8]; // scope 0 at $DIR/string.rs:+5:1: +5:2\n+        switchInt(_2) -> [0: bb9, otherwise: bb8];\n     }\n \n     bb8: {\n-        drop(_1) -> [return: bb9, unwind unreachable]; // scope 0 at $DIR/string.rs:+5:1: +5:2\n+        drop(_1) -> [return: bb9, unwind unreachable];\n     }\n \n     bb9: {\n-        return;                          // scope 0 at $DIR/string.rs:+5:2: +5:2\n+        return;\n     }\n }"}, {"sha": "1f3b3ad649d6c176ceb06ea14824ad53f72b9e9c", "filename": "tests/mir-opt/derefer_complex_case.main.Derefer.panic-abort.diff", "status": "modified", "additions": 60, "deletions": 72, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_complex_case.main.Derefer.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_complex_case.main.Derefer.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_complex_case.main.Derefer.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,108 +2,96 @@\n + // MIR for `main` after Derefer\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_complex_case.rs:+0:11: +0:11\n-      let mut _1: std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let mut _2: &[i32; 2];               // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let _3: [i32; 2];                    // in scope 0 at $DIR/derefer_complex_case.rs:+1:18: +1:26\n-      let mut _4: std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let mut _5: ();                      // in scope 0 at $DIR/derefer_complex_case.rs:+0:1: +2:2\n-      let _6: ();                          // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let mut _7: std::option::Option<&i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let mut _8: &mut std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let mut _9: &mut std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let mut _10: isize;                  // in scope 0 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n-      let mut _11: !;                      // in scope 0 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n-      let mut _13: i32;                    // in scope 0 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n-      let mut _14: &[i32; 2];              // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-+     let mut _15: &i32;                   // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _0: ();\n+      let mut _1: std::slice::Iter<'_, i32>;\n+      let mut _2: &[i32; 2];\n+      let _3: [i32; 2];\n+      let mut _4: std::slice::Iter<'_, i32>;\n+      let mut _5: ();\n+      let _6: ();\n+      let mut _7: std::option::Option<&i32>;\n+      let mut _8: &mut std::slice::Iter<'_, i32>;\n+      let mut _9: &mut std::slice::Iter<'_, i32>;\n+      let mut _10: isize;\n+      let mut _11: !;\n+      let mut _13: i32;\n+      let mut _14: &[i32; 2];\n++     let mut _15: &i32;\n       scope 1 {\n-          debug iter => _4;                // in scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          let _12: i32;                    // in scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n+          debug iter => _4;\n+          let _12: i32;\n           scope 2 {\n-              debug foo => _12;            // in scope 2 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n+              debug foo => _12;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          StorageLive(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          _14 = const _;                   // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n-                                           // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _2 = &(*_14);                    // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          _1 = <&[i32; 2] as IntoIterator>::into_iter(move _2) -> [return: bb1, unwind: bb8]; // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n-                                           // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _14 = const _;\n+          _2 = &(*_14);\n+          _1 = <&[i32; 2] as IntoIterator>::into_iter(move _2) -> [return: bb1, unwind: bb8];\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:25: +1:26\n-          StorageLive(_4);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          _4 = move _1;                    // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          goto -> bb2;                     // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n+          StorageDead(_2);\n+          StorageLive(_4);\n+          _4 = move _1;\n+          goto -> bb2;\n       }\n   \n       bb2: {\n-          StorageLive(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          StorageLive(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          StorageLive(_8);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          StorageLive(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          _9 = &mut _4;                    // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          _8 = &mut (*_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          _7 = <std::slice::Iter<'_, i32> as Iterator>::next(move _8) -> [return: bb3, unwind: bb8]; // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n-                                           // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, i32>) -> Option<<std::slice::Iter<'_, i32> as Iterator>::Item> {<std::slice::Iter<'_, i32> as Iterator>::next}, val: Value(<ZST>) }\n+          StorageLive(_6);\n+          StorageLive(_7);\n+          StorageLive(_8);\n+          StorageLive(_9);\n+          _9 = &mut _4;\n+          _8 = &mut (*_9);\n+          _7 = <std::slice::Iter<'_, i32> as Iterator>::next(move _8) -> [return: bb3, unwind: bb8];\n       }\n   \n       bb3: {\n-          StorageDead(_8);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:25: +1:26\n-          _10 = discriminant(_7);          // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          StorageDead(_8);\n+          _10 = discriminant(_7);\n+          switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5];\n       }\n   \n       bb4: {\n-          StorageLive(_12);                // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n--         _12 = (*((_7 as Some).0: &i32)); // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n-+         _15 = deref_copy ((_7 as Some).0: &i32); // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n-+         _12 = (*_15);                    // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n-          StorageLive(_13);                // scope 2 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n-          _13 = _12;                       // scope 2 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n-          _6 = std::mem::drop::<i32>(move _13) -> [return: bb7, unwind: bb8]; // scope 2 at $DIR/derefer_complex_case.rs:+1:29: +1:38\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:6:29: 6:33\n-                                           // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n+          StorageLive(_12);\n+-         _12 = (*((_7 as Some).0: &i32));\n++         _15 = deref_copy ((_7 as Some).0: &i32);\n++         _12 = (*_15);\n+          StorageLive(_13);\n+          _13 = _12;\n+          _6 = std::mem::drop::<i32>(move _13) -> [return: bb7, unwind: bb8];\n       }\n   \n       bb5: {\n-          unreachable;                     // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          unreachable;\n       }\n   \n       bb6: {\n-          _0 = const ();                   // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n-          StorageDead(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          StorageDead(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          StorageDead(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          StorageDead(_4);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          return;                          // scope 0 at $DIR/derefer_complex_case.rs:+2:2: +2:2\n+          _0 = const ();\n+          StorageDead(_9);\n+          StorageDead(_7);\n+          StorageDead(_6);\n+          StorageDead(_4);\n+          StorageDead(_1);\n+          return;\n       }\n   \n       bb7: {\n-          StorageDead(_13);                // scope 2 at $DIR/derefer_complex_case.rs:+1:37: +1:38\n-          StorageDead(_12);                // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          StorageDead(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          StorageDead(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          StorageDead(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          _5 = const ();                   // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n-          goto -> bb2;                     // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n+          StorageDead(_13);\n+          StorageDead(_12);\n+          StorageDead(_9);\n+          StorageDead(_7);\n+          StorageDead(_6);\n+          _5 = const ();\n+          goto -> bb2;\n       }\n   \n       bb8 (cleanup): {\n-          resume;                          // scope 0 at $DIR/derefer_complex_case.rs:+0:1: +2:2\n+          resume;\n       }\n   }\n   "}, {"sha": "62085341d378c01b3b4f5568577248bebd2b715d", "filename": "tests/mir-opt/derefer_complex_case.main.Derefer.panic-unwind.diff", "status": "modified", "additions": 59, "deletions": 71, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_complex_case.main.Derefer.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_complex_case.main.Derefer.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_complex_case.main.Derefer.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,104 +2,92 @@\n + // MIR for `main` after Derefer\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_complex_case.rs:+0:11: +0:11\n-      let mut _1: std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let mut _2: &[i32; 2];               // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let _3: [i32; 2];                    // in scope 0 at $DIR/derefer_complex_case.rs:+1:18: +1:26\n-      let mut _4: std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let mut _5: ();                      // in scope 0 at $DIR/derefer_complex_case.rs:+0:1: +2:2\n-      let _6: ();                          // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let mut _7: std::option::Option<&i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let mut _8: &mut std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let mut _9: &mut std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-      let mut _10: isize;                  // in scope 0 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n-      let mut _11: !;                      // in scope 0 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n-      let mut _13: i32;                    // in scope 0 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n-      let mut _14: &[i32; 2];              // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-+     let mut _15: &i32;                   // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _0: ();\n+      let mut _1: std::slice::Iter<'_, i32>;\n+      let mut _2: &[i32; 2];\n+      let _3: [i32; 2];\n+      let mut _4: std::slice::Iter<'_, i32>;\n+      let mut _5: ();\n+      let _6: ();\n+      let mut _7: std::option::Option<&i32>;\n+      let mut _8: &mut std::slice::Iter<'_, i32>;\n+      let mut _9: &mut std::slice::Iter<'_, i32>;\n+      let mut _10: isize;\n+      let mut _11: !;\n+      let mut _13: i32;\n+      let mut _14: &[i32; 2];\n++     let mut _15: &i32;\n       scope 1 {\n-          debug iter => _4;                // in scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          let _12: i32;                    // in scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n+          debug iter => _4;\n+          let _12: i32;\n           scope 2 {\n-              debug foo => _12;            // in scope 2 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n+              debug foo => _12;\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          StorageLive(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          _14 = const _;                   // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n-                                           // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _2 = &(*_14);                    // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          _1 = <&[i32; 2] as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n-                                           // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _14 = const _;\n+          _2 = &(*_14);\n+          _1 = <&[i32; 2] as IntoIterator>::into_iter(move _2) -> bb1;\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:25: +1:26\n-          StorageLive(_4);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          _4 = move _1;                    // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          goto -> bb2;                     // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n+          StorageDead(_2);\n+          StorageLive(_4);\n+          _4 = move _1;\n+          goto -> bb2;\n       }\n   \n       bb2: {\n-          StorageLive(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          StorageLive(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          StorageLive(_8);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          StorageLive(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          _9 = &mut _4;                    // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          _8 = &mut (*_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          _7 = <std::slice::Iter<'_, i32> as Iterator>::next(move _8) -> bb3; // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n-                                           // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, i32>) -> Option<<std::slice::Iter<'_, i32> as Iterator>::Item> {<std::slice::Iter<'_, i32> as Iterator>::next}, val: Value(<ZST>) }\n+          StorageLive(_6);\n+          StorageLive(_7);\n+          StorageLive(_8);\n+          StorageLive(_9);\n+          _9 = &mut _4;\n+          _8 = &mut (*_9);\n+          _7 = <std::slice::Iter<'_, i32> as Iterator>::next(move _8) -> bb3;\n       }\n   \n       bb3: {\n-          StorageDead(_8);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:25: +1:26\n-          _10 = discriminant(_7);          // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          StorageDead(_8);\n+          _10 = discriminant(_7);\n+          switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5];\n       }\n   \n       bb4: {\n-          StorageLive(_12);                // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n--         _12 = (*((_7 as Some).0: &i32)); // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n-+         _15 = deref_copy ((_7 as Some).0: &i32); // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n-+         _12 = (*_15);                    // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n-          StorageLive(_13);                // scope 2 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n-          _13 = _12;                       // scope 2 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n-          _6 = std::mem::drop::<i32>(move _13) -> bb7; // scope 2 at $DIR/derefer_complex_case.rs:+1:29: +1:38\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:6:29: 6:33\n-                                           // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n+          StorageLive(_12);\n+-         _12 = (*((_7 as Some).0: &i32));\n++         _15 = deref_copy ((_7 as Some).0: &i32);\n++         _12 = (*_15);\n+          StorageLive(_13);\n+          _13 = _12;\n+          _6 = std::mem::drop::<i32>(move _13) -> bb7;\n       }\n   \n       bb5: {\n-          unreachable;                     // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          unreachable;\n       }\n   \n       bb6: {\n-          _0 = const ();                   // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n-          StorageDead(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          StorageDead(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          StorageDead(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          StorageDead(_4);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          return;                          // scope 0 at $DIR/derefer_complex_case.rs:+2:2: +2:2\n+          _0 = const ();\n+          StorageDead(_9);\n+          StorageDead(_7);\n+          StorageDead(_6);\n+          StorageDead(_4);\n+          StorageDead(_1);\n+          return;\n       }\n   \n       bb7: {\n-          StorageDead(_13);                // scope 2 at $DIR/derefer_complex_case.rs:+1:37: +1:38\n-          StorageDead(_12);                // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          StorageDead(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          StorageDead(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          StorageDead(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n-          _5 = const ();                   // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n-          goto -> bb2;                     // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n+          StorageDead(_13);\n+          StorageDead(_12);\n+          StorageDead(_9);\n+          StorageDead(_7);\n+          StorageDead(_6);\n+          _5 = const ();\n+          goto -> bb2;\n       }\n   }\n   "}, {"sha": "024d9bc7f5141536b3ae670edc6906a404a9f369", "filename": "tests/mir-opt/derefer_inline_test.main.Derefer.panic-abort.diff", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,44 +2,37 @@\n + // MIR for `main` after Derefer\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_inline_test.rs:+0:11: +0:11\n-      let _1: std::boxed::Box<std::boxed::Box<u32>>; // in scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:18\n-      let mut _2: std::boxed::Box<u32>;    // in scope 0 at $DIR/derefer_inline_test.rs:+1:14: +1:17\n+      let mut _0: ();\n+      let _1: std::boxed::Box<std::boxed::Box<u32>>;\n+      let mut _2: std::boxed::Box<u32>;\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:18\n-          StorageLive(_2);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:14: +1:17\n-          _2 = f() -> [return: bb1, unwind: bb5]; // scope 0 at $DIR/derefer_inline_test.rs:+1:14: +1:17\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_inline_test.rs:10:14: 10:15\n-                                           // + literal: Const { ty: fn() -> Box<u32> {f}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = f() -> [return: bb1, unwind: bb5];\n       }\n   \n       bb1: {\n-          _1 = Box::<Box<u32>>::new(move _2) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_inline_test.rs:10:5: 10:13\n-                                           // + user_ty: UserType(0)\n-                                           // + literal: Const { ty: fn(Box<u32>) -> Box<Box<u32>> {Box::<Box<u32>>::new}, val: Value(<ZST>) }\n+          _1 = Box::<Box<u32>>::new(move _2) -> [return: bb2, unwind: bb4];\n       }\n   \n       bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:17: +1:18\n-          drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/derefer_inline_test.rs:+1:18: +1:19\n+          StorageDead(_2);\n+          drop(_1) -> [return: bb3, unwind: bb5];\n       }\n   \n       bb3: {\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:18: +1:19\n-          _0 = const ();                   // scope 0 at $DIR/derefer_inline_test.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/derefer_inline_test.rs:+2:2: +2:2\n+          StorageDead(_1);\n+          _0 = const ();\n+          return;\n       }\n   \n       bb4 (cleanup): {\n-          drop(_2) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/derefer_inline_test.rs:+1:17: +1:18\n+          drop(_2) -> [return: bb5, unwind terminate];\n       }\n   \n       bb5 (cleanup): {\n-          resume;                          // scope 0 at $DIR/derefer_inline_test.rs:+0:1: +2:2\n+          resume;\n       }\n   }\n   "}, {"sha": "50683837097acdf6385694c15e025fa24d7f0423", "filename": "tests/mir-opt/derefer_inline_test.main.Derefer.panic-unwind.diff", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,44 +2,37 @@\n + // MIR for `main` after Derefer\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_inline_test.rs:+0:11: +0:11\n-      let _1: std::boxed::Box<std::boxed::Box<u32>>; // in scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:18\n-      let mut _2: std::boxed::Box<u32>;    // in scope 0 at $DIR/derefer_inline_test.rs:+1:14: +1:17\n+      let mut _0: ();\n+      let _1: std::boxed::Box<std::boxed::Box<u32>>;\n+      let mut _2: std::boxed::Box<u32>;\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:18\n-          StorageLive(_2);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:14: +1:17\n-          _2 = f() -> bb1;                 // scope 0 at $DIR/derefer_inline_test.rs:+1:14: +1:17\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_inline_test.rs:10:14: 10:15\n-                                           // + literal: Const { ty: fn() -> Box<u32> {f}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          StorageLive(_2);\n+          _2 = f() -> bb1;\n       }\n   \n       bb1: {\n-          _1 = Box::<Box<u32>>::new(move _2) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_inline_test.rs:10:5: 10:13\n-                                           // + user_ty: UserType(0)\n-                                           // + literal: Const { ty: fn(Box<u32>) -> Box<Box<u32>> {Box::<Box<u32>>::new}, val: Value(<ZST>) }\n+          _1 = Box::<Box<u32>>::new(move _2) -> [return: bb2, unwind: bb4];\n       }\n   \n       bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:17: +1:18\n-          drop(_1) -> bb3;                 // scope 0 at $DIR/derefer_inline_test.rs:+1:18: +1:19\n+          StorageDead(_2);\n+          drop(_1) -> bb3;\n       }\n   \n       bb3: {\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:18: +1:19\n-          _0 = const ();                   // scope 0 at $DIR/derefer_inline_test.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/derefer_inline_test.rs:+2:2: +2:2\n+          StorageDead(_1);\n+          _0 = const ();\n+          return;\n       }\n   \n       bb4 (cleanup): {\n-          drop(_2) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/derefer_inline_test.rs:+1:17: +1:18\n+          drop(_2) -> [return: bb5, unwind terminate];\n       }\n   \n       bb5 (cleanup): {\n-          resume;                          // scope 0 at $DIR/derefer_inline_test.rs:+0:1: +2:2\n+          resume;\n       }\n   }\n   "}, {"sha": "895dcf5798ebba7daeaa982aa587b287143ac2db", "filename": "tests/mir-opt/derefer_terminator_test.main.Derefer.panic-abort.diff", "status": "modified", "additions": 55, "deletions": 61, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,95 +2,89 @@\n + // MIR for `main` after Derefer\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_terminator_test.rs:+0:11: +0:11\n-      let _1: bool;                        // in scope 0 at $DIR/derefer_terminator_test.rs:+1:9: +1:10\n-      let _3: ();                          // in scope 0 at $DIR/derefer_terminator_test.rs:+3:5: +6:6\n-      let mut _4: &&&&bool;                // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n-      let _5: &&&bool;                     // in scope 0 at $DIR/derefer_terminator_test.rs:+3:17: +3:21\n-      let _6: &&bool;                      // in scope 0 at $DIR/derefer_terminator_test.rs:+3:18: +3:21\n-      let _7: &bool;                       // in scope 0 at $DIR/derefer_terminator_test.rs:+3:19: +3:21\n-+     let mut _10: &&&bool;                // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n-+     let mut _11: &&bool;                 // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n-+     let mut _12: &bool;                  // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n+      let mut _0: ();\n+      let _1: bool;\n+      let _3: ();\n+      let mut _4: &&&&bool;\n+      let _5: &&&bool;\n+      let _6: &&bool;\n+      let _7: &bool;\n++     let mut _10: &&&bool;\n++     let mut _11: &&bool;\n++     let mut _12: &bool;\n       scope 1 {\n-          debug b => _1;                   // in scope 1 at $DIR/derefer_terminator_test.rs:+1:9: +1:10\n-          let _2: bool;                    // in scope 1 at $DIR/derefer_terminator_test.rs:+2:9: +2:10\n+          debug b => _1;\n+          let _2: bool;\n           scope 2 {\n-              debug d => _2;               // in scope 2 at $DIR/derefer_terminator_test.rs:+2:9: +2:10\n-              let _8: i32;                 // in scope 2 at $DIR/derefer_terminator_test.rs:+4:22: +4:23\n-              let _9: i32;                 // in scope 2 at $DIR/derefer_terminator_test.rs:+7:9: +7:10\n+              debug d => _2;\n+              let _8: i32;\n+              let _9: i32;\n               scope 3 {\n-                  debug x => _8;           // in scope 3 at $DIR/derefer_terminator_test.rs:+4:22: +4:23\n+                  debug x => _8;\n               }\n               scope 4 {\n-                  debug y => _9;           // in scope 4 at $DIR/derefer_terminator_test.rs:+7:9: +7:10\n+                  debug y => _9;\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:+1:9: +1:10\n-          _1 = foo() -> [return: bb1, unwind: bb6]; // scope 0 at $DIR/derefer_terminator_test.rs:+1:13: +1:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_terminator_test.rs:6:13: 6:16\n-                                           // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = foo() -> [return: bb1, unwind: bb6];\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:+2:9: +2:10\n-          _2 = foo() -> [return: bb2, unwind: bb6]; // scope 1 at $DIR/derefer_terminator_test.rs:+2:13: +2:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_terminator_test.rs:7:13: 7:16\n-                                           // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          _2 = foo() -> [return: bb2, unwind: bb6];\n       }\n   \n       bb2: {\n-          StorageLive(_3);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +6:6\n-          StorageLive(_4);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n-          StorageLive(_5);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:17: +3:21\n-          StorageLive(_6);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:18: +3:21\n-          StorageLive(_7);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:19: +3:21\n-          _7 = &_1;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:19: +3:21\n-          _6 = &_7;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:18: +3:21\n-          _5 = &_6;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:17: +3:21\n-          _4 = &_5;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n--         switchInt((*(*(*(*_4))))) -> [0: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n-+         _10 = deref_copy (*_4);          // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n-+         _11 = deref_copy (*_10);         // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n-+         _12 = deref_copy (*_11);         // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n-+         switchInt((*_12)) -> [0: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          StorageLive(_6);\n+          StorageLive(_7);\n+          _7 = &_1;\n+          _6 = &_7;\n+          _5 = &_6;\n+          _4 = &_5;\n+-         switchInt((*(*(*(*_4))))) -> [0: bb3, otherwise: bb4];\n++         _10 = deref_copy (*_4);\n++         _11 = deref_copy (*_10);\n++         _12 = deref_copy (*_11);\n++         switchInt((*_12)) -> [0: bb3, otherwise: bb4];\n       }\n   \n       bb3: {\n-          _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:+5:18: +5:20\n-          goto -> bb5;                     // scope 2 at $DIR/derefer_terminator_test.rs:+5:18: +5:20\n+          _3 = const ();\n+          goto -> bb5;\n       }\n   \n       bb4: {\n-          StorageLive(_8);                 // scope 2 at $DIR/derefer_terminator_test.rs:+4:22: +4:23\n-          _8 = const 5_i32;                // scope 2 at $DIR/derefer_terminator_test.rs:+4:26: +4:27\n-          _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:+4:17: +4:29\n-          StorageDead(_8);                 // scope 2 at $DIR/derefer_terminator_test.rs:+4:28: +4:29\n-          goto -> bb5;                     // scope 2 at $DIR/derefer_terminator_test.rs:+4:28: +4:29\n+          StorageLive(_8);\n+          _8 = const 5_i32;\n+          _3 = const ();\n+          StorageDead(_8);\n+          goto -> bb5;\n       }\n   \n       bb5: {\n-          StorageDead(_7);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n-          StorageDead(_6);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n-          StorageDead(_5);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n-          StorageDead(_4);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n-          StorageDead(_3);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n-          StorageLive(_9);                 // scope 2 at $DIR/derefer_terminator_test.rs:+7:9: +7:10\n-          _9 = const 42_i32;               // scope 2 at $DIR/derefer_terminator_test.rs:+7:13: +7:15\n-          _0 = const ();                   // scope 0 at $DIR/derefer_terminator_test.rs:+0:11: +8:2\n-          StorageDead(_9);                 // scope 2 at $DIR/derefer_terminator_test.rs:+8:1: +8:2\n-          StorageDead(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:+8:1: +8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/derefer_terminator_test.rs:+8:2: +8:2\n+          StorageDead(_7);\n+          StorageDead(_6);\n+          StorageDead(_5);\n+          StorageDead(_4);\n+          StorageDead(_3);\n+          StorageLive(_9);\n+          _9 = const 42_i32;\n+          _0 = const ();\n+          StorageDead(_9);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   \n       bb6 (cleanup): {\n-          resume;                          // scope 0 at $DIR/derefer_terminator_test.rs:+0:1: +8:2\n+          resume;\n       }\n   }\n   "}, {"sha": "59168eda2f3e70a67ec0d60516d67d509784820e", "filename": "tests/mir-opt/derefer_terminator_test.main.Derefer.panic-unwind.diff", "status": "modified", "additions": 54, "deletions": 60, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,91 +2,85 @@\n + // MIR for `main` after Derefer\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_terminator_test.rs:+0:11: +0:11\n-      let _1: bool;                        // in scope 0 at $DIR/derefer_terminator_test.rs:+1:9: +1:10\n-      let _3: ();                          // in scope 0 at $DIR/derefer_terminator_test.rs:+3:5: +6:6\n-      let mut _4: &&&&bool;                // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n-      let _5: &&&bool;                     // in scope 0 at $DIR/derefer_terminator_test.rs:+3:17: +3:21\n-      let _6: &&bool;                      // in scope 0 at $DIR/derefer_terminator_test.rs:+3:18: +3:21\n-      let _7: &bool;                       // in scope 0 at $DIR/derefer_terminator_test.rs:+3:19: +3:21\n-+     let mut _10: &&&bool;                // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n-+     let mut _11: &&bool;                 // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n-+     let mut _12: &bool;                  // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n+      let mut _0: ();\n+      let _1: bool;\n+      let _3: ();\n+      let mut _4: &&&&bool;\n+      let _5: &&&bool;\n+      let _6: &&bool;\n+      let _7: &bool;\n++     let mut _10: &&&bool;\n++     let mut _11: &&bool;\n++     let mut _12: &bool;\n       scope 1 {\n-          debug b => _1;                   // in scope 1 at $DIR/derefer_terminator_test.rs:+1:9: +1:10\n-          let _2: bool;                    // in scope 1 at $DIR/derefer_terminator_test.rs:+2:9: +2:10\n+          debug b => _1;\n+          let _2: bool;\n           scope 2 {\n-              debug d => _2;               // in scope 2 at $DIR/derefer_terminator_test.rs:+2:9: +2:10\n-              let _8: i32;                 // in scope 2 at $DIR/derefer_terminator_test.rs:+4:22: +4:23\n-              let _9: i32;                 // in scope 2 at $DIR/derefer_terminator_test.rs:+7:9: +7:10\n+              debug d => _2;\n+              let _8: i32;\n+              let _9: i32;\n               scope 3 {\n-                  debug x => _8;           // in scope 3 at $DIR/derefer_terminator_test.rs:+4:22: +4:23\n+                  debug x => _8;\n               }\n               scope 4 {\n-                  debug y => _9;           // in scope 4 at $DIR/derefer_terminator_test.rs:+7:9: +7:10\n+                  debug y => _9;\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:+1:9: +1:10\n-          _1 = foo() -> bb1;               // scope 0 at $DIR/derefer_terminator_test.rs:+1:13: +1:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_terminator_test.rs:6:13: 6:16\n-                                           // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n+          StorageLive(_1);\n+          _1 = foo() -> bb1;\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:+2:9: +2:10\n-          _2 = foo() -> bb2;               // scope 1 at $DIR/derefer_terminator_test.rs:+2:13: +2:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_terminator_test.rs:7:13: 7:16\n-                                           // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+          _2 = foo() -> bb2;\n       }\n   \n       bb2: {\n-          StorageLive(_3);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +6:6\n-          StorageLive(_4);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n-          StorageLive(_5);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:17: +3:21\n-          StorageLive(_6);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:18: +3:21\n-          StorageLive(_7);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:19: +3:21\n-          _7 = &_1;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:19: +3:21\n-          _6 = &_7;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:18: +3:21\n-          _5 = &_6;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:17: +3:21\n-          _4 = &_5;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n--         switchInt((*(*(*(*_4))))) -> [0: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n-+         _10 = deref_copy (*_4);          // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n-+         _11 = deref_copy (*_10);         // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n-+         _12 = deref_copy (*_11);         // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n-+         switchInt((*_12)) -> [0: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n+          StorageLive(_3);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          StorageLive(_6);\n+          StorageLive(_7);\n+          _7 = &_1;\n+          _6 = &_7;\n+          _5 = &_6;\n+          _4 = &_5;\n+-         switchInt((*(*(*(*_4))))) -> [0: bb3, otherwise: bb4];\n++         _10 = deref_copy (*_4);\n++         _11 = deref_copy (*_10);\n++         _12 = deref_copy (*_11);\n++         switchInt((*_12)) -> [0: bb3, otherwise: bb4];\n       }\n   \n       bb3: {\n-          _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:+5:18: +5:20\n-          goto -> bb5;                     // scope 2 at $DIR/derefer_terminator_test.rs:+5:18: +5:20\n+          _3 = const ();\n+          goto -> bb5;\n       }\n   \n       bb4: {\n-          StorageLive(_8);                 // scope 2 at $DIR/derefer_terminator_test.rs:+4:22: +4:23\n-          _8 = const 5_i32;                // scope 2 at $DIR/derefer_terminator_test.rs:+4:26: +4:27\n-          _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:+4:17: +4:29\n-          StorageDead(_8);                 // scope 2 at $DIR/derefer_terminator_test.rs:+4:28: +4:29\n-          goto -> bb5;                     // scope 2 at $DIR/derefer_terminator_test.rs:+4:28: +4:29\n+          StorageLive(_8);\n+          _8 = const 5_i32;\n+          _3 = const ();\n+          StorageDead(_8);\n+          goto -> bb5;\n       }\n   \n       bb5: {\n-          StorageDead(_7);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n-          StorageDead(_6);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n-          StorageDead(_5);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n-          StorageDead(_4);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n-          StorageDead(_3);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n-          StorageLive(_9);                 // scope 2 at $DIR/derefer_terminator_test.rs:+7:9: +7:10\n-          _9 = const 42_i32;               // scope 2 at $DIR/derefer_terminator_test.rs:+7:13: +7:15\n-          _0 = const ();                   // scope 0 at $DIR/derefer_terminator_test.rs:+0:11: +8:2\n-          StorageDead(_9);                 // scope 2 at $DIR/derefer_terminator_test.rs:+8:1: +8:2\n-          StorageDead(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:+8:1: +8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/derefer_terminator_test.rs:+8:2: +8:2\n+          StorageDead(_7);\n+          StorageDead(_6);\n+          StorageDead(_5);\n+          StorageDead(_4);\n+          StorageDead(_3);\n+          StorageLive(_9);\n+          _9 = const 42_i32;\n+          _0 = const ();\n+          StorageDead(_9);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "c50b74051fd54860917afe2e57a0722bc141e3d2", "filename": "tests/mir-opt/derefer_test.main.Derefer.diff", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_test.main.Derefer.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,49 +2,49 @@\n + // MIR for `main` after Derefer\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_test.rs:+0:11: +0:11\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/derefer_test.rs:+1:9: +1:14\n-      let mut _3: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test.rs:+2:22: +2:28\n-+     let mut _6: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test.rs:+2:9: +2:14\n-+     let mut _7: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test.rs:+2:9: +2:14\n+      let mut _0: ();\n+      let mut _1: (i32, i32);\n+      let mut _3: &mut (i32, i32);\n++     let mut _6: &mut (i32, i32);\n++     let mut _7: &mut (i32, i32);\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/derefer_test.rs:+1:9: +1:14\n-          let mut _2: (i32, &mut (i32, i32)); // in scope 1 at $DIR/derefer_test.rs:+2:9: +2:14\n+          debug a => _1;\n+          let mut _2: (i32, &mut (i32, i32));\n           scope 2 {\n-              debug b => _2;               // in scope 2 at $DIR/derefer_test.rs:+2:9: +2:14\n-              let _4: &mut i32;            // in scope 2 at $DIR/derefer_test.rs:+3:9: +3:10\n+              debug b => _2;\n+              let _4: &mut i32;\n               scope 3 {\n-                  debug x => _4;           // in scope 3 at $DIR/derefer_test.rs:+3:9: +3:10\n-                  let _5: &mut i32;        // in scope 3 at $DIR/derefer_test.rs:+4:9: +4:10\n+                  debug x => _4;\n+                  let _5: &mut i32;\n                   scope 4 {\n-                      debug y => _5;       // in scope 4 at $DIR/derefer_test.rs:+4:9: +4:10\n+                      debug y => _5;\n                   }\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_test.rs:+1:9: +1:14\n-          _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/derefer_test.rs:+1:17: +1:24\n-          StorageLive(_2);                 // scope 1 at $DIR/derefer_test.rs:+2:9: +2:14\n-          StorageLive(_3);                 // scope 1 at $DIR/derefer_test.rs:+2:22: +2:28\n-          _3 = &mut _1;                    // scope 1 at $DIR/derefer_test.rs:+2:22: +2:28\n-          _2 = (const 99_i32, move _3);    // scope 1 at $DIR/derefer_test.rs:+2:17: +2:29\n-          StorageDead(_3);                 // scope 1 at $DIR/derefer_test.rs:+2:28: +2:29\n-          StorageLive(_4);                 // scope 2 at $DIR/derefer_test.rs:+3:9: +3:10\n--         _4 = &mut ((*(_2.1: &mut (i32, i32))).0: i32); // scope 2 at $DIR/derefer_test.rs:+3:13: +3:26\n-+         _6 = deref_copy (_2.1: &mut (i32, i32)); // scope 2 at $DIR/derefer_test.rs:+3:13: +3:26\n-+         _4 = &mut ((*_6).0: i32);        // scope 2 at $DIR/derefer_test.rs:+3:13: +3:26\n-          StorageLive(_5);                 // scope 3 at $DIR/derefer_test.rs:+4:9: +4:10\n--         _5 = &mut ((*(_2.1: &mut (i32, i32))).1: i32); // scope 3 at $DIR/derefer_test.rs:+4:13: +4:26\n-+         _7 = deref_copy (_2.1: &mut (i32, i32)); // scope 3 at $DIR/derefer_test.rs:+4:13: +4:26\n-+         _5 = &mut ((*_7).1: i32);        // scope 3 at $DIR/derefer_test.rs:+4:13: +4:26\n-          _0 = const ();                   // scope 0 at $DIR/derefer_test.rs:+0:11: +5:2\n-          StorageDead(_5);                 // scope 3 at $DIR/derefer_test.rs:+5:1: +5:2\n-          StorageDead(_4);                 // scope 2 at $DIR/derefer_test.rs:+5:1: +5:2\n-          StorageDead(_2);                 // scope 1 at $DIR/derefer_test.rs:+5:1: +5:2\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_test.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/derefer_test.rs:+5:2: +5:2\n+          StorageLive(_1);\n+          _1 = (const 42_i32, const 43_i32);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = &mut _1;\n+          _2 = (const 99_i32, move _3);\n+          StorageDead(_3);\n+          StorageLive(_4);\n+-         _4 = &mut ((*(_2.1: &mut (i32, i32))).0: i32);\n++         _6 = deref_copy (_2.1: &mut (i32, i32));\n++         _4 = &mut ((*_6).0: i32);\n+          StorageLive(_5);\n+-         _5 = &mut ((*(_2.1: &mut (i32, i32))).1: i32);\n++         _7 = deref_copy (_2.1: &mut (i32, i32));\n++         _5 = &mut ((*_7).1: i32);\n+          _0 = const ();\n+          StorageDead(_5);\n+          StorageDead(_4);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "7961316969a3b368eda06684e3838f3d856ea60d", "filename": "tests/mir-opt/derefer_test_multiple.main.Derefer.diff", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `main` after Derefer\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_test_multiple.rs:+0:12: +0:12\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/derefer_test_multiple.rs:+1:9: +1:14\n-      let mut _3: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test_multiple.rs:+2:22: +2:28\n-      let mut _5: &mut (i32, &mut (i32, i32)); // in scope 0 at $DIR/derefer_test_multiple.rs:+3:22: +3:28\n-      let mut _7: &mut (i32, &mut (i32, &mut (i32, i32))); // in scope 0 at $DIR/derefer_test_multiple.rs:+4:22: +4:28\n-+     let mut _10: &mut (i32, &mut (i32, &mut (i32, i32))); // in scope 0 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n-+     let mut _11: &mut (i32, &mut (i32, i32)); // in scope 0 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n-+     let mut _12: &mut (i32, i32);        // in scope 0 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n-+     let mut _13: &mut (i32, &mut (i32, &mut (i32, i32))); // in scope 0 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n-+     let mut _14: &mut (i32, &mut (i32, i32)); // in scope 0 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n-+     let mut _15: &mut (i32, i32);        // in scope 0 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n+      let mut _0: ();\n+      let mut _1: (i32, i32);\n+      let mut _3: &mut (i32, i32);\n+      let mut _5: &mut (i32, &mut (i32, i32));\n+      let mut _7: &mut (i32, &mut (i32, &mut (i32, i32)));\n++     let mut _10: &mut (i32, &mut (i32, &mut (i32, i32)));\n++     let mut _11: &mut (i32, &mut (i32, i32));\n++     let mut _12: &mut (i32, i32);\n++     let mut _13: &mut (i32, &mut (i32, &mut (i32, i32)));\n++     let mut _14: &mut (i32, &mut (i32, i32));\n++     let mut _15: &mut (i32, i32);\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/derefer_test_multiple.rs:+1:9: +1:14\n-          let mut _2: (i32, &mut (i32, i32)); // in scope 1 at $DIR/derefer_test_multiple.rs:+2:9: +2:14\n+          debug a => _1;\n+          let mut _2: (i32, &mut (i32, i32));\n           scope 2 {\n-              debug b => _2;               // in scope 2 at $DIR/derefer_test_multiple.rs:+2:9: +2:14\n-              let mut _4: (i32, &mut (i32, &mut (i32, i32))); // in scope 2 at $DIR/derefer_test_multiple.rs:+3:9: +3:14\n+              debug b => _2;\n+              let mut _4: (i32, &mut (i32, &mut (i32, i32)));\n               scope 3 {\n-                  debug c => _4;           // in scope 3 at $DIR/derefer_test_multiple.rs:+3:9: +3:14\n-                  let mut _6: (i32, &mut (i32, &mut (i32, &mut (i32, i32)))); // in scope 3 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n+                  debug c => _4;\n+                  let mut _6: (i32, &mut (i32, &mut (i32, &mut (i32, i32))));\n                   scope 4 {\n-                      debug d => _6;       // in scope 4 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n-                      let _8: &mut i32;    // in scope 4 at $DIR/derefer_test_multiple.rs:+5:9: +5:10\n+                      debug d => _6;\n+                      let _8: &mut i32;\n                       scope 5 {\n-                          debug x => _8;   // in scope 5 at $DIR/derefer_test_multiple.rs:+5:9: +5:10\n-                          let _9: &mut i32; // in scope 5 at $DIR/derefer_test_multiple.rs:+6:9: +6:10\n+                          debug x => _8;\n+                          let _9: &mut i32;\n                           scope 6 {\n-                              debug y => _9; // in scope 6 at $DIR/derefer_test_multiple.rs:+6:9: +6:10\n+                              debug y => _9;\n                           }\n                       }\n                   }\n@@ -38,43 +38,43 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_test_multiple.rs:+1:9: +1:14\n-          _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/derefer_test_multiple.rs:+1:17: +1:25\n-          StorageLive(_2);                 // scope 1 at $DIR/derefer_test_multiple.rs:+2:9: +2:14\n-          StorageLive(_3);                 // scope 1 at $DIR/derefer_test_multiple.rs:+2:22: +2:28\n-          _3 = &mut _1;                    // scope 1 at $DIR/derefer_test_multiple.rs:+2:22: +2:28\n-          _2 = (const 99_i32, move _3);    // scope 1 at $DIR/derefer_test_multiple.rs:+2:17: +2:29\n-          StorageDead(_3);                 // scope 1 at $DIR/derefer_test_multiple.rs:+2:28: +2:29\n-          StorageLive(_4);                 // scope 2 at $DIR/derefer_test_multiple.rs:+3:9: +3:14\n-          StorageLive(_5);                 // scope 2 at $DIR/derefer_test_multiple.rs:+3:22: +3:28\n-          _5 = &mut _2;                    // scope 2 at $DIR/derefer_test_multiple.rs:+3:22: +3:28\n-          _4 = (const 11_i32, move _5);    // scope 2 at $DIR/derefer_test_multiple.rs:+3:17: +3:29\n-          StorageDead(_5);                 // scope 2 at $DIR/derefer_test_multiple.rs:+3:28: +3:29\n-          StorageLive(_6);                 // scope 3 at $DIR/derefer_test_multiple.rs:+4:9: +4:14\n-          StorageLive(_7);                 // scope 3 at $DIR/derefer_test_multiple.rs:+4:22: +4:28\n-          _7 = &mut _4;                    // scope 3 at $DIR/derefer_test_multiple.rs:+4:22: +4:28\n-          _6 = (const 13_i32, move _7);    // scope 3 at $DIR/derefer_test_multiple.rs:+4:17: +4:29\n-          StorageDead(_7);                 // scope 3 at $DIR/derefer_test_multiple.rs:+4:28: +4:29\n-          StorageLive(_8);                 // scope 4 at $DIR/derefer_test_multiple.rs:+5:9: +5:10\n--         _8 = &mut ((*((*((*(_6.1: &mut (i32, &mut (i32, &mut (i32, i32))))).1: &mut (i32, &mut (i32, i32)))).1: &mut (i32, i32))).1: i32); // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n-+         _10 = deref_copy (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))); // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n-+         _11 = deref_copy ((*_10).1: &mut (i32, &mut (i32, i32))); // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n-+         _12 = deref_copy ((*_11).1: &mut (i32, i32)); // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n-+         _8 = &mut ((*_12).1: i32);       // scope 4 at $DIR/derefer_test_multiple.rs:+5:13: +5:30\n-          StorageLive(_9);                 // scope 5 at $DIR/derefer_test_multiple.rs:+6:9: +6:10\n--         _9 = &mut ((*((*((*(_6.1: &mut (i32, &mut (i32, &mut (i32, i32))))).1: &mut (i32, &mut (i32, i32)))).1: &mut (i32, i32))).1: i32); // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n-+         _13 = deref_copy (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))); // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n-+         _14 = deref_copy ((*_13).1: &mut (i32, &mut (i32, i32))); // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n-+         _15 = deref_copy ((*_14).1: &mut (i32, i32)); // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n-+         _9 = &mut ((*_15).1: i32);       // scope 5 at $DIR/derefer_test_multiple.rs:+6:13: +6:30\n-          _0 = const ();                   // scope 0 at $DIR/derefer_test_multiple.rs:+0:12: +7:2\n-          StorageDead(_9);                 // scope 5 at $DIR/derefer_test_multiple.rs:+7:1: +7:2\n-          StorageDead(_8);                 // scope 4 at $DIR/derefer_test_multiple.rs:+7:1: +7:2\n-          StorageDead(_6);                 // scope 3 at $DIR/derefer_test_multiple.rs:+7:1: +7:2\n-          StorageDead(_4);                 // scope 2 at $DIR/derefer_test_multiple.rs:+7:1: +7:2\n-          StorageDead(_2);                 // scope 1 at $DIR/derefer_test_multiple.rs:+7:1: +7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_test_multiple.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/derefer_test_multiple.rs:+7:2: +7:2\n+          StorageLive(_1);\n+          _1 = (const 42_i32, const 43_i32);\n+          StorageLive(_2);\n+          StorageLive(_3);\n+          _3 = &mut _1;\n+          _2 = (const 99_i32, move _3);\n+          StorageDead(_3);\n+          StorageLive(_4);\n+          StorageLive(_5);\n+          _5 = &mut _2;\n+          _4 = (const 11_i32, move _5);\n+          StorageDead(_5);\n+          StorageLive(_6);\n+          StorageLive(_7);\n+          _7 = &mut _4;\n+          _6 = (const 13_i32, move _7);\n+          StorageDead(_7);\n+          StorageLive(_8);\n+-         _8 = &mut ((*((*((*(_6.1: &mut (i32, &mut (i32, &mut (i32, i32))))).1: &mut (i32, &mut (i32, i32)))).1: &mut (i32, i32))).1: i32);\n++         _10 = deref_copy (_6.1: &mut (i32, &mut (i32, &mut (i32, i32))));\n++         _11 = deref_copy ((*_10).1: &mut (i32, &mut (i32, i32)));\n++         _12 = deref_copy ((*_11).1: &mut (i32, i32));\n++         _8 = &mut ((*_12).1: i32);\n+          StorageLive(_9);\n+-         _9 = &mut ((*((*((*(_6.1: &mut (i32, &mut (i32, &mut (i32, i32))))).1: &mut (i32, &mut (i32, i32)))).1: &mut (i32, i32))).1: i32);\n++         _13 = deref_copy (_6.1: &mut (i32, &mut (i32, &mut (i32, i32))));\n++         _14 = deref_copy ((*_13).1: &mut (i32, &mut (i32, i32)));\n++         _15 = deref_copy ((*_14).1: &mut (i32, i32));\n++         _9 = &mut ((*_15).1: i32);\n+          _0 = const ();\n+          StorageDead(_9);\n+          StorageDead(_8);\n+          StorageDead(_6);\n+          StorageDead(_4);\n+          StorageDead(_2);\n+          StorageDead(_1);\n+          return;\n       }\n   }\n   "}, {"sha": "10ec3aa555ee1123b517dd30aec40170aa7754f6", "filename": "tests/mir-opt/dest-prop/branch.foo.DestinationPropagation.panic-abort.diff", "status": "modified", "additions": 35, "deletions": 44, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,74 +2,65 @@\n + // MIR for `foo` after DestinationPropagation\n   \n   fn foo() -> i32 {\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/branch.rs:+0:13: +0:16\n-      let _1: i32;                         // in scope 0 at $DIR/branch.rs:+1:9: +1:10\n-      let mut _3: bool;                    // in scope 0 at $DIR/branch.rs:+3:16: +3:22\n-      let _4: i32;                         // in scope 0 at $DIR/branch.rs:+6:9: +6:14\n+      let mut _0: i32;\n+      let _1: i32;\n+      let mut _3: bool;\n+      let _4: i32;\n       scope 1 {\n--         debug x => _1;                   // in scope 1 at $DIR/branch.rs:+1:9: +1:10\n-+         debug x => _0;                   // in scope 1 at $DIR/branch.rs:+1:9: +1:10\n-          let _2: i32;                     // in scope 1 at $DIR/branch.rs:+3:9: +3:10\n+-         debug x => _1;\n++         debug x => _0;\n+          let _2: i32;\n           scope 2 {\n--             debug y => _2;               // in scope 2 at $DIR/branch.rs:+3:9: +3:10\n-+             debug y => _0;               // in scope 2 at $DIR/branch.rs:+3:9: +3:10\n+-             debug y => _2;\n++             debug y => _0;\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/branch.rs:+1:9: +1:10\n--         _1 = val() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/branch.rs:+1:13: +1:18\n-+         nop;                             // scope 0 at $DIR/branch.rs:+1:9: +1:10\n-+         _0 = val() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/branch.rs:+1:13: +1:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/branch.rs:14:13: 14:16\n-                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+-         StorageLive(_1);\n+-         _1 = val() -> [return: bb1, unwind unreachable];\n++         nop;\n++         _0 = val() -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         StorageLive(_2);                 // scope 1 at $DIR/branch.rs:+3:9: +3:10\n-+         nop;                             // scope 1 at $DIR/branch.rs:+3:9: +3:10\n-          StorageLive(_3);                 // scope 1 at $DIR/branch.rs:+3:16: +3:22\n-          _3 = cond() -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/branch.rs:+3:16: +3:22\n-                                           // mir::Constant\n-                                           // + span: $DIR/branch.rs:16:16: 16:20\n-                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n+-         StorageLive(_2);\n++         nop;\n+          StorageLive(_3);\n+          _3 = cond() -> [return: bb2, unwind unreachable];\n       }\n   \n       bb2: {\n-          switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+          switchInt(move _3) -> [0: bb4, otherwise: bb3];\n       }\n   \n       bb3: {\n--         _2 = _1;                         // scope 1 at $DIR/branch.rs:+4:9: +4:10\n-+         nop;                             // scope 1 at $DIR/branch.rs:+4:9: +4:10\n-          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+-         _2 = _1;\n++         nop;\n+          goto -> bb6;\n       }\n   \n       bb4: {\n-          StorageLive(_4);                 // scope 1 at $DIR/branch.rs:+6:9: +6:14\n-          _4 = val() -> [return: bb5, unwind unreachable]; // scope 1 at $DIR/branch.rs:+6:9: +6:14\n-                                           // mir::Constant\n-                                           // + span: $DIR/branch.rs:19:9: 19:12\n-                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+          StorageLive(_4);\n+          _4 = val() -> [return: bb5, unwind unreachable];\n       }\n   \n       bb5: {\n-          StorageDead(_4);                 // scope 1 at $DIR/branch.rs:+6:14: +6:15\n--         _2 = _1;                         // scope 1 at $DIR/branch.rs:+7:9: +7:10\n-+         nop;                             // scope 1 at $DIR/branch.rs:+7:9: +7:10\n-          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+          StorageDead(_4);\n+-         _2 = _1;\n++         nop;\n+          goto -> bb6;\n       }\n   \n       bb6: {\n-          StorageDead(_3);                 // scope 1 at $DIR/branch.rs:+8:5: +8:6\n--         _0 = _2;                         // scope 2 at $DIR/branch.rs:+10:5: +10:6\n--         StorageDead(_2);                 // scope 1 at $DIR/branch.rs:+11:1: +11:2\n--         StorageDead(_1);                 // scope 0 at $DIR/branch.rs:+11:1: +11:2\n-+         nop;                             // scope 2 at $DIR/branch.rs:+10:5: +10:6\n-+         nop;                             // scope 1 at $DIR/branch.rs:+11:1: +11:2\n-+         nop;                             // scope 0 at $DIR/branch.rs:+11:1: +11:2\n-          return;                          // scope 0 at $DIR/branch.rs:+11:2: +11:2\n+          StorageDead(_3);\n+-         _0 = _2;\n+-         StorageDead(_2);\n+-         StorageDead(_1);\n++         nop;\n++         nop;\n++         nop;\n+          return;\n       }\n   }\n   "}, {"sha": "e0734f47de2a000995e7927d44f709cd90556211", "filename": "tests/mir-opt/dest-prop/branch.foo.DestinationPropagation.panic-unwind.diff", "status": "modified", "additions": 35, "deletions": 44, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,74 +2,65 @@\n + // MIR for `foo` after DestinationPropagation\n   \n   fn foo() -> i32 {\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/branch.rs:+0:13: +0:16\n-      let _1: i32;                         // in scope 0 at $DIR/branch.rs:+1:9: +1:10\n-      let mut _3: bool;                    // in scope 0 at $DIR/branch.rs:+3:16: +3:22\n-      let _4: i32;                         // in scope 0 at $DIR/branch.rs:+6:9: +6:14\n+      let mut _0: i32;\n+      let _1: i32;\n+      let mut _3: bool;\n+      let _4: i32;\n       scope 1 {\n--         debug x => _1;                   // in scope 1 at $DIR/branch.rs:+1:9: +1:10\n-+         debug x => _0;                   // in scope 1 at $DIR/branch.rs:+1:9: +1:10\n-          let _2: i32;                     // in scope 1 at $DIR/branch.rs:+3:9: +3:10\n+-         debug x => _1;\n++         debug x => _0;\n+          let _2: i32;\n           scope 2 {\n--             debug y => _2;               // in scope 2 at $DIR/branch.rs:+3:9: +3:10\n-+             debug y => _0;               // in scope 2 at $DIR/branch.rs:+3:9: +3:10\n+-             debug y => _2;\n++             debug y => _0;\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/branch.rs:+1:9: +1:10\n--         _1 = val() -> bb1;               // scope 0 at $DIR/branch.rs:+1:13: +1:18\n-+         nop;                             // scope 0 at $DIR/branch.rs:+1:9: +1:10\n-+         _0 = val() -> bb1;               // scope 0 at $DIR/branch.rs:+1:13: +1:18\n-                                           // mir::Constant\n-                                           // + span: $DIR/branch.rs:14:13: 14:16\n-                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+-         StorageLive(_1);\n+-         _1 = val() -> bb1;\n++         nop;\n++         _0 = val() -> bb1;\n       }\n   \n       bb1: {\n--         StorageLive(_2);                 // scope 1 at $DIR/branch.rs:+3:9: +3:10\n-+         nop;                             // scope 1 at $DIR/branch.rs:+3:9: +3:10\n-          StorageLive(_3);                 // scope 1 at $DIR/branch.rs:+3:16: +3:22\n-          _3 = cond() -> bb2;              // scope 1 at $DIR/branch.rs:+3:16: +3:22\n-                                           // mir::Constant\n-                                           // + span: $DIR/branch.rs:16:16: 16:20\n-                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n+-         StorageLive(_2);\n++         nop;\n+          StorageLive(_3);\n+          _3 = cond() -> bb2;\n       }\n   \n       bb2: {\n-          switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+          switchInt(move _3) -> [0: bb4, otherwise: bb3];\n       }\n   \n       bb3: {\n--         _2 = _1;                         // scope 1 at $DIR/branch.rs:+4:9: +4:10\n-+         nop;                             // scope 1 at $DIR/branch.rs:+4:9: +4:10\n-          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+-         _2 = _1;\n++         nop;\n+          goto -> bb6;\n       }\n   \n       bb4: {\n-          StorageLive(_4);                 // scope 1 at $DIR/branch.rs:+6:9: +6:14\n-          _4 = val() -> bb5;               // scope 1 at $DIR/branch.rs:+6:9: +6:14\n-                                           // mir::Constant\n-                                           // + span: $DIR/branch.rs:19:9: 19:12\n-                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+          StorageLive(_4);\n+          _4 = val() -> bb5;\n       }\n   \n       bb5: {\n-          StorageDead(_4);                 // scope 1 at $DIR/branch.rs:+6:14: +6:15\n--         _2 = _1;                         // scope 1 at $DIR/branch.rs:+7:9: +7:10\n-+         nop;                             // scope 1 at $DIR/branch.rs:+7:9: +7:10\n-          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+          StorageDead(_4);\n+-         _2 = _1;\n++         nop;\n+          goto -> bb6;\n       }\n   \n       bb6: {\n-          StorageDead(_3);                 // scope 1 at $DIR/branch.rs:+8:5: +8:6\n--         _0 = _2;                         // scope 2 at $DIR/branch.rs:+10:5: +10:6\n--         StorageDead(_2);                 // scope 1 at $DIR/branch.rs:+11:1: +11:2\n--         StorageDead(_1);                 // scope 0 at $DIR/branch.rs:+11:1: +11:2\n-+         nop;                             // scope 2 at $DIR/branch.rs:+10:5: +10:6\n-+         nop;                             // scope 1 at $DIR/branch.rs:+11:1: +11:2\n-+         nop;                             // scope 0 at $DIR/branch.rs:+11:1: +11:2\n-          return;                          // scope 0 at $DIR/branch.rs:+11:2: +11:2\n+          StorageDead(_3);\n+-         _0 = _2;\n+-         StorageDead(_2);\n+-         StorageDead(_1);\n++         nop;\n++         nop;\n++         nop;\n+          return;\n       }\n   }\n   "}, {"sha": "1aed07f9e6ab1760ec777debe626e3b05709c0f3", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.arg_src.DestinationPropagation.panic-abort.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `arg_src` after DestinationPropagation\n   \n   fn arg_src(_1: i32) -> i32 {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:12: +0:17\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:27: +0:30\n-      let _2: i32;                         // in scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+      debug x => _1;\n+      let mut _0: i32;\n+      let _2: i32;\n       scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n-+         debug y => _0;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+-         debug y => _2;\n++         debug y => _0;\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n--         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n-+         _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n-          _1 = const 123_i32;              // scope 1 at $DIR/copy_propagation_arg.rs:+2:5: +2:12\n--         _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n--         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+4:1: +4:2\n-+         nop;                             // scope 1 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n+-         StorageLive(_2);\n+-         _2 = _1;\n++         nop;\n++         _0 = _1;\n+          _1 = const 123_i32;\n+-         _0 = _2;\n+-         StorageDead(_2);\n++         nop;\n++         nop;\n+          return;\n       }\n   }\n   "}, {"sha": "1aed07f9e6ab1760ec777debe626e3b05709c0f3", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.arg_src.DestinationPropagation.panic-unwind.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `arg_src` after DestinationPropagation\n   \n   fn arg_src(_1: i32) -> i32 {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:12: +0:17\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:27: +0:30\n-      let _2: i32;                         // in scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+      debug x => _1;\n+      let mut _0: i32;\n+      let _2: i32;\n       scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n-+         debug y => _0;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+-         debug y => _2;\n++         debug y => _0;\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n--         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n-+         _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n-          _1 = const 123_i32;              // scope 1 at $DIR/copy_propagation_arg.rs:+2:5: +2:12\n--         _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n--         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+4:1: +4:2\n-+         nop;                             // scope 1 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n+-         StorageLive(_2);\n+-         _2 = _1;\n++         nop;\n++         _0 = _1;\n+          _1 = const 123_i32;\n+-         _0 = _2;\n+-         StorageDead(_2);\n++         nop;\n++         nop;\n+          return;\n       }\n   }\n   "}, {"sha": "641dea594e11908fecde16a71d00325122af9c51", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.bar.DestinationPropagation.panic-abort.diff", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,31 +2,28 @@\n + // MIR for `bar` after DestinationPropagation\n   \n   fn bar(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n-      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n-      let _2: u8;                          // in scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n-      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+      debug x => _1;\n+      let mut _0: ();\n+      let _2: u8;\n+      let mut _3: u8;\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n--         StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n--         _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n--         _2 = dummy(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n-+         _2 = dummy(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n-                                           // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:17:5: 17:10\n-                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+-         StorageLive(_3);\n+-         _3 = _1;\n+-         _2 = dummy(move _3) -> [return: bb1, unwind unreachable];\n++         nop;\n++         nop;\n++         _2 = dummy(move _1) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n--         StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:12: +1:13\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+1:12: +1:13\n-          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n-          _1 = const 5_u8;                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n-          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n+-         StorageDead(_3);\n++         nop;\n+          StorageDead(_2);\n+          _1 = const 5_u8;\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "b181066df0470d0f18c57db47e3c1e5e2de83441", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.bar.DestinationPropagation.panic-unwind.diff", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,31 +2,28 @@\n + // MIR for `bar` after DestinationPropagation\n   \n   fn bar(_1: u8) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n-      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n-      let _2: u8;                          // in scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n-      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+      debug x => _1;\n+      let mut _0: ();\n+      let _2: u8;\n+      let mut _3: u8;\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n--         StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n--         _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n--         _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n-+         _2 = dummy(move _1) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n-                                           // mir::Constant\n-                                           // + span: $DIR/copy_propagation_arg.rs:17:5: 17:10\n-                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n+          StorageLive(_2);\n+-         StorageLive(_3);\n+-         _3 = _1;\n+-         _2 = dummy(move _3) -> bb1;\n++         nop;\n++         nop;\n++         _2 = dummy(move _1) -> bb1;\n       }\n   \n       bb1: {\n--         StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:12: +1:13\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+1:12: +1:13\n-          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n-          _1 = const 5_u8;                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n-          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n+-         StorageDead(_3);\n++         nop;\n+          StorageDead(_2);\n+          _1 = const 5_u8;\n+          _0 = const ();\n+          return;\n       }\n   }\n   "}, {"sha": "4cddaec01d2d316c0872bddb4380ed2c37cfc1b1", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.baz.DestinationPropagation.panic-abort.diff", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `baz` after DestinationPropagation\n   \n   fn baz(_1: i32) -> i32 {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:23: +0:26\n-      let mut _2: i32;                     // in scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+      debug x => _1;\n+      let mut _0: i32;\n+      let mut _2: i32;\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n--         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n--         _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n--         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n-          _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n+-         StorageLive(_2);\n+-         _2 = _1;\n+-         _1 = move _2;\n+-         StorageDead(_2);\n++         nop;\n++         nop;\n++         nop;\n++         nop;\n+          _0 = _1;\n+          return;\n       }\n   }\n   "}, {"sha": "4cddaec01d2d316c0872bddb4380ed2c37cfc1b1", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.baz.DestinationPropagation.panic-unwind.diff", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06"}, {"sha": "54875cadec5b637cc567c812f2a57dbebeb81503", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.foo.DestinationPropagation.panic-abort.diff", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06"}, {"sha": "f19728669368e1e2d286d70d6a445a4e2b0c389a", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.foo.DestinationPropagation.panic-unwind.diff", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06"}, {"sha": "98b4ee866d2b67ca65ee832d0ae1f3f8f0cf1b18", "filename": "tests/mir-opt/dest-prop/cycle.main.DestinationPropagation.panic-abort.diff", "status": "modified", "additions": 50, "deletions": 56, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06"}, {"sha": "0dc7de31cc47b8867829789c29b601f2af1d83f1", "filename": "tests/mir-opt/dest-prop/cycle.main.DestinationPropagation.panic-unwind.diff", "status": "modified", "additions": 50, "deletions": 56, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06"}, {"sha": "eb160fc194a81babff9262badc27ef07424f5745", "filename": "tests/mir-opt/dest-prop/dead_stores_79191.f.DestinationPropagation.after.panic-abort.mir", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.panic-abort.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06"}, {"sha": "bf515d328aef8917fba6498e04e292012db4395c", "filename": "tests/mir-opt/dest-prop/dead_stores_79191.f.DestinationPropagation.after.panic-unwind.mir", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.panic-unwind.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06"}, {"sha": "a3ec090107514e1d80bd78fa1d8964e8aeea9103", "filename": "tests/mir-opt/dest-prop/dead_stores_better.f.DestinationPropagation.after.panic-abort.mir", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.panic-abort.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06"}, {"sha": "038bd4b6da9d46a34b5660d9caa480b3e1e93627", "filename": "tests/mir-opt/dest-prop/dead_stores_better.f.DestinationPropagation.after.panic-unwind.mir", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.panic-unwind.mir?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06"}, {"sha": "4d34f43fd5ce6009981985735894fa78bb6b227a", "filename": "tests/mir-opt/dest-prop/simple.nrvo.DestinationPropagation.panic-abort.diff", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06"}, {"sha": "4e32823c1ee91afcc1b711c2ce7f0479b2f23009", "filename": "tests/mir-opt/dest-prop/simple.nrvo.DestinationPropagation.panic-unwind.diff", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.panic-unwind.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06"}, {"sha": "459a9c442b3e9535a4f62413e465625f94907d13", "filename": "tests/mir-opt/dest-prop/union.main.DestinationPropagation.panic-abort.diff", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a1fa411edbf6f9ad1205655d77cfda5a43aac06/tests%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.panic-abort.diff?ref=0a1fa411edbf6f9ad1205655d77cfda5a43aac06"}]}