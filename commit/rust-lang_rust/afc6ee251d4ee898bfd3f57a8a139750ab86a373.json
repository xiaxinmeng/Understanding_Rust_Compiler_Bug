{"sha": "afc6ee251d4ee898bfd3f57a8a139750ab86a373", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYzZlZTI1MWQ0ZWU4OThiZmQzZjU3YThhMTM5NzUwYWI4NmEzNzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-23T14:41:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-23T14:41:15Z"}, "message": "minor cleanup", "tree": {"sha": "30bf15cb9661f979f854688e0b517534442c362a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30bf15cb9661f979f854688e0b517534442c362a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afc6ee251d4ee898bfd3f57a8a139750ab86a373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afc6ee251d4ee898bfd3f57a8a139750ab86a373", "html_url": "https://github.com/rust-lang/rust/commit/afc6ee251d4ee898bfd3f57a8a139750ab86a373", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afc6ee251d4ee898bfd3f57a8a139750ab86a373/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2e1f9f6da01132fd23394b5b789e4ef96ccc444", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e1f9f6da01132fd23394b5b789e4ef96ccc444", "html_url": "https://github.com/rust-lang/rust/commit/d2e1f9f6da01132fd23394b5b789e4ef96ccc444"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "9c95adc53c52793c7562c76b482fd0a0c59c2529", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/afc6ee251d4ee898bfd3f57a8a139750ab86a373/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc6ee251d4ee898bfd3f57a8a139750ab86a373/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=afc6ee251d4ee898bfd3f57a8a139750ab86a373", "patch": "@@ -1,44 +1,62 @@\n-//! FIXME: write short doc here\n+//! Assist: `convert_to_guarded_return`\n+//!\n+//! Replace a large conditional with a guarded return.\n+//!\n+//! ```notrust\n+//! fn <|>main() {\n+//!     if cond {\n+//!         foo();\n+//!         bar();\n+//!     }\n+//! }\n+//! ```\n+//! ->\n+//! ```notrust\n+//! fn main() {\n+//!     if !cond {\n+//!         return;\n+//!     }\n+//!     foo();\n+//!     bar();\n+//! }\n+//! ```\n+\n+use std::ops::RangeInclusive;\n \n-use crate::{\n-    assist_ctx::{Assist, AssistCtx},\n-    AssistId,\n-};\n use hir::db::HirDatabase;\n use ra_syntax::{\n     algo::replace_children,\n-    ast::edit::IndentLevel,\n-    ast::make,\n-    ast::Block,\n-    ast::ContinueExpr,\n-    ast::IfExpr,\n-    ast::ReturnExpr,\n+    ast::{self, edit::IndentLevel, make},\n     AstNode,\n     SyntaxKind::{FN_DEF, LOOP_EXPR, L_CURLY, R_CURLY, WHILE_EXPR, WHITESPACE},\n };\n-use std::ops::RangeInclusive;\n+\n+use crate::{\n+    assist_ctx::{Assist, AssistCtx},\n+    AssistId,\n+};\n \n pub(crate) fn convert_to_guarded_return(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let if_expr: IfExpr = ctx.node_at_offset()?;\n+    let if_expr: ast::IfExpr = ctx.node_at_offset()?;\n     let expr = if_expr.condition()?.expr()?;\n     let then_block = if_expr.then_branch()?.block()?;\n     if if_expr.else_branch().is_some() {\n         return None;\n     }\n \n-    let parent_block = if_expr.syntax().parent()?.ancestors().find_map(Block::cast)?;\n+    let parent_block = if_expr.syntax().parent()?.ancestors().find_map(ast::Block::cast)?;\n \n     if parent_block.expr()? != if_expr.clone().into() {\n         return None;\n     }\n \n     // check for early return and continue\n     let first_in_then_block = then_block.syntax().first_child()?.clone();\n-    if ReturnExpr::can_cast(first_in_then_block.kind())\n-        || ContinueExpr::can_cast(first_in_then_block.kind())\n+    if ast::ReturnExpr::can_cast(first_in_then_block.kind())\n+        || ast::ContinueExpr::can_cast(first_in_then_block.kind())\n         || first_in_then_block\n             .children()\n-            .any(|x| ReturnExpr::can_cast(x.kind()) || ContinueExpr::can_cast(x.kind()))\n+            .any(|x| ast::ReturnExpr::can_cast(x.kind()) || ast::ContinueExpr::can_cast(x.kind()))\n     {\n         return None;\n     }\n@@ -86,7 +104,7 @@ pub(crate) fn convert_to_guarded_return(mut ctx: AssistCtx<impl HirDatabase>) ->\n             &mut new_if_and_then_statements,\n         );\n         edit.target(if_expr.syntax().text_range());\n-        edit.replace_ast(parent_block, Block::cast(new_block).unwrap());\n+        edit.replace_ast(parent_block, ast::Block::cast(new_block).unwrap());\n         edit.set_cursor(cursor_position);\n     });\n     ctx.build()"}]}