{"sha": "413f07438eb18cbb8973d47a516a78d258876346", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxM2YwNzQzOGViMThjYmI4OTczZDQ3YTUxNmE3OGQyNTg4NzYzNDY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T16:16:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T16:16:25Z"}, "message": "remove `generator_sigs` from `TypeckTables`", "tree": {"sha": "18e07f9fbe13f00242322b95ca774567a5e17240", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18e07f9fbe13f00242322b95ca774567a5e17240"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/413f07438eb18cbb8973d47a516a78d258876346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/413f07438eb18cbb8973d47a516a78d258876346", "html_url": "https://github.com/rust-lang/rust/commit/413f07438eb18cbb8973d47a516a78d258876346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/413f07438eb18cbb8973d47a516a78d258876346/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8969815cf98b247b94fa832be038e4483fd293d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8969815cf98b247b94fa832be038e4483fd293d", "html_url": "https://github.com/rust-lang/rust/commit/d8969815cf98b247b94fa832be038e4483fd293d"}], "stats": {"total": 79, "additions": 21, "deletions": 58}, "files": [{"sha": "862d3e9bb8aa7130594ab5d6eecffc2e4ed294d9", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/413f07438eb18cbb8973d47a516a78d258876346/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413f07438eb18cbb8973d47a516a78d258876346/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=413f07438eb18cbb8973d47a516a78d258876346", "patch": "@@ -360,8 +360,6 @@ pub struct TypeckTables<'tcx> {\n     /// not all closures are present in the map.\n     closure_kind_origins: ItemLocalMap<(Span, ast::Name)>,\n \n-    generator_sigs: ItemLocalMap<Option<ty::GenSig<'tcx>>>,\n-\n     generator_interiors: ItemLocalMap<ty::GeneratorInterior<'tcx>>,\n \n     /// For each fn, records the \"liberated\" types of its arguments\n@@ -408,7 +406,6 @@ impl<'tcx> TypeckTables<'tcx> {\n             pat_binding_modes: ItemLocalMap(),\n             pat_adjustments: ItemLocalMap(),\n             upvar_capture_map: FxHashMap(),\n-            generator_sigs: ItemLocalMap(),\n             generator_interiors: ItemLocalMap(),\n             closure_kind_origins: ItemLocalMap(),\n             liberated_fn_sigs: ItemLocalMap(),\n@@ -661,24 +658,6 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n-    pub fn generator_sigs(&self)\n-        -> LocalTableInContext<Option<ty::GenSig<'tcx>>>\n-    {\n-        LocalTableInContext {\n-            local_id_root: self.local_id_root,\n-            data: &self.generator_sigs,\n-        }\n-    }\n-\n-    pub fn generator_sigs_mut(&mut self)\n-        -> LocalTableInContextMut<Option<ty::GenSig<'tcx>>>\n-    {\n-        LocalTableInContextMut {\n-            local_id_root: self.local_id_root,\n-            data: &mut self.generator_sigs,\n-        }\n-    }\n-\n     pub fn generator_interiors(&self)\n         -> LocalTableInContext<ty::GeneratorInterior<'tcx>>\n     {\n@@ -720,7 +699,6 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for TypeckTables<'gcx> {\n             ref used_trait_imports,\n             tainted_by_errors,\n             ref free_region_map,\n-            ref generator_sigs,\n             ref generator_interiors,\n         } = *self;\n \n@@ -757,7 +735,6 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for TypeckTables<'gcx> {\n             liberated_fn_sigs.hash_stable(hcx, hasher);\n             fru_field_types.hash_stable(hcx, hasher);\n             cast_kinds.hash_stable(hcx, hasher);\n-            generator_sigs.hash_stable(hcx, hasher);\n             generator_interiors.hash_stable(hcx, hasher);\n             used_trait_imports.hash_stable(hcx, hasher);\n             tainted_by_errors.hash_stable(hcx, hasher);"}, {"sha": "7406fbf820893ed2804ced1e142f08bcc1a0e475", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/413f07438eb18cbb8973d47a516a78d258876346/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413f07438eb18cbb8973d47a516a78d258876346/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=413f07438eb18cbb8973d47a516a78d258876346", "patch": "@@ -335,16 +335,20 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     /// Return the \"generator signature\", which consists of its yield\n     /// and return types.\n     ///\n-    /// NB. We treat this as a `PolyGenSig`, but since it only\n-    /// contains associated types of the generator, at present it\n-    /// never binds any regions.\n+    /// NB. Some bits of the code prefers to see this wrapped in a\n+    /// binder, but it never contains bound regions. Probably this\n+    /// function should be removed.\n     pub fn generator_poly_sig(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> PolyGenSig<'tcx> {\n-        ty::Binder(\n-            ty::GenSig {\n-                yield_ty: self.generator_yield_ty(def_id, tcx),\n-                return_ty: self.generator_return_ty(def_id, tcx),\n-            }\n-        )\n+        ty::Binder(self.generator_sig(def_id, tcx))\n+    }\n+\n+    /// Return the \"generator signature\", which consists of its yield\n+    /// and return types.\n+    pub fn generator_sig(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> GenSig<'tcx> {\n+        ty::GenSig {\n+            yield_ty: self.generator_yield_ty(def_id, tcx),\n+            return_ty: self.generator_return_ty(def_id, tcx),\n+        }\n     }\n }\n "}, {"sha": "65abbe8a081d362d1ade5ee48d8d2bd7dc5920d1", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/413f07438eb18cbb8973d47a516a78d258876346/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413f07438eb18cbb8973d47a516a78d258876346/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=413f07438eb18cbb8973d47a516a78d258876346", "patch": "@@ -103,7 +103,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n                     Some((closure_self_ty(tcx, id, body_id), None))\n                 }\n                 ty::TyGenerator(..) => {\n-                    let gen_ty =  tcx.body_tables(body_id).node_id_to_type(fn_hir_id);\n+                    let gen_ty = tcx.body_tables(body_id).node_id_to_type(fn_hir_id);\n                     Some((gen_ty, None))\n                 }\n                 _ => None,\n@@ -127,7 +127,12 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n             let arguments = implicit_argument.into_iter().chain(explicit_arguments);\n \n             let (yield_ty, return_ty) = if body.is_generator {\n-                let gen_sig = cx.tables().generator_sigs()[fn_hir_id].clone().unwrap();\n+                let gen_sig = match ty.sty {\n+                    ty::TyGenerator(gen_def_id, gen_substs, ..) =>\n+                        gen_substs.generator_sig(gen_def_id, tcx),\n+                    _ =>\n+                        span_bug!(tcx.hir.span(id), \"generator w/o generator type: {:?}\", ty),\n+                };\n                 (Some(gen_sig.yield_ty), gen_sig.return_ty)\n             } else {\n                 (None, fn_sig.output())"}, {"sha": "2a23a6f82af870a590d1e1006cecfa1112ed5b4e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/413f07438eb18cbb8973d47a516a78d258876346/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413f07438eb18cbb8973d47a516a78d258876346/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=413f07438eb18cbb8973d47a516a78d258876346", "patch": "@@ -1037,21 +1037,14 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n \n     let fn_hir_id = fcx.tcx.hir.node_to_hir_id(fn_id);\n     let gen_ty = if can_be_generator && body.is_generator {\n-        let gen_sig = ty::GenSig {\n-            yield_ty: fcx.yield_ty.unwrap(),\n-            return_ty: ret_ty,\n-        };\n-        inherited.tables.borrow_mut().generator_sigs_mut().insert(fn_hir_id, Some(gen_sig));\n-\n         let witness = fcx.next_ty_var(TypeVariableOrigin::MiscVariable(span));\n         fcx.deferred_generator_interiors.borrow_mut().push((body.id(), witness));\n         let interior = ty::GeneratorInterior::new(witness);\n \n         inherited.tables.borrow_mut().generator_interiors_mut().insert(fn_hir_id, interior);\n \n-        Some(GeneratorTypes { yield_ty: gen_sig.yield_ty, interior: interior })\n+        Some(GeneratorTypes { yield_ty: fcx.yield_ty.unwrap(), interior: interior })\n     } else {\n-        inherited.tables.borrow_mut().generator_sigs_mut().insert(fn_hir_id, None);\n         None\n     };\n     inherited.tables.borrow_mut().liberated_fn_sigs_mut().insert(fn_hir_id, fn_sig);"}, {"sha": "57cebc12a4458fa340d07248a36b9a691a3367e1", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/413f07438eb18cbb8973d47a516a78d258876346/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413f07438eb18cbb8973d47a516a78d258876346/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=413f07438eb18cbb8973d47a516a78d258876346", "patch": "@@ -46,7 +46,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_anon_types();\n         wbcx.visit_cast_types();\n         wbcx.visit_free_region_map();\n-        wbcx.visit_generator_sigs();\n         wbcx.visit_generator_interiors();\n \n         let used_trait_imports = mem::replace(&mut self.tables.borrow_mut().used_trait_imports,\n@@ -391,21 +390,6 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn visit_generator_sigs(&mut self) {\n-        let common_local_id_root = self.fcx.tables.borrow().local_id_root.unwrap();\n-        for (&id, gen_sig) in self.fcx.tables.borrow().generator_sigs().iter() {\n-            let hir_id = hir::HirId {\n-                owner: common_local_id_root.index,\n-                local_id: id,\n-            };\n-            let gen_sig = gen_sig.map(|s| ty::GenSig {\n-                yield_ty: self.resolve(&s.yield_ty, &hir_id),\n-                return_ty: self.resolve(&s.return_ty, &hir_id),\n-            });\n-            self.tables.generator_sigs_mut().insert(hir_id, gen_sig);\n-        }\n-    }\n-\n     fn visit_liberated_fn_sigs(&mut self) {\n         let fcx_tables = self.fcx.tables.borrow();\n         debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);"}]}