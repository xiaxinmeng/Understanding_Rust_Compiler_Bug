{"sha": "2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMjg3MzdlYmVhNWEzMzBiOWZkOTViNjdkMGY1ZmE2YTdkYWM3Y2Y=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-06-11T16:55:30Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-06-30T18:53:10Z"}, "message": "Move AST crate.", "tree": {"sha": "ff2a4b37a539dba11db90143c1487a8eb17e34d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff2a4b37a539dba11db90143c1487a8eb17e34d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf", "html_url": "https://github.com/rust-lang/rust/commit/2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c520cf225310e0d1d3ebf513034255cee3f76e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/c520cf225310e0d1d3ebf513034255cee3f76e30", "html_url": "https://github.com/rust-lang/rust/commit/c520cf225310e0d1d3ebf513034255cee3f76e30"}], "stats": {"total": 50, "additions": 21, "deletions": 29}, "files": [{"sha": "2733cd29909547e7c3bdbb5098d01db169435975", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf", "patch": "@@ -46,7 +46,6 @@ use std::ffi::OsString;\n use std::fs;\n use std::io::{self, Read, Write};\n use std::lazy::SyncLazy;\n-use std::mem;\n use std::panic::{self, catch_unwind};\n use std::path::PathBuf;\n use std::process::{self, Command, Stdio};\n@@ -316,12 +315,12 @@ fn run_compiler(\n \n             if let Some(ppm) = &sess.opts.pretty {\n                 if ppm.needs_ast_map() {\n+                    let expanded_crate = { &queries.expansion()?.peek().0 };\n                     queries.global_ctxt()?.peek_mut().enter(|tcx| {\n-                        let expanded_crate = queries.expansion()?.take().0;\n                         pretty::print_after_hir_lowering(\n                             tcx,\n                             compiler.input(),\n-                            &expanded_crate,\n+                            expanded_crate,\n                             *ppm,\n                             compiler.output_file().as_ref().map(|p| &**p),\n                         );\n@@ -377,12 +376,6 @@ fn run_compiler(\n \n             queries.global_ctxt()?;\n \n-            // Drop AST after creating GlobalCtxt to free memory\n-            {\n-                let _timer = sess.prof.generic_activity(\"drop_ast\");\n-                mem::drop(queries.expansion()?.take());\n-            }\n-\n             if sess.opts.debugging_opts.no_analysis || sess.opts.debugging_opts.ast_json {\n                 return early_exit();\n             }"}, {"sha": "98394bee22c42d9418a4f8f0943abdf2feb55080", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf", "patch": "@@ -7,7 +7,6 @@ use rustc_ast::{self as ast, visit};\n use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n-use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{par_iter, Lrc, OnceCell, ParallelIterator, WorkerLocal};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::{ErrorReported, PResult};\n@@ -458,7 +457,7 @@ pub fn lower_to_hir<'res, 'tcx>(\n     sess: &'tcx Session,\n     lint_store: &LintStore,\n     resolver: &'res mut Resolver<'_>,\n-    krate: &'res ast::Crate,\n+    krate: ast::Crate,\n     arena: &'tcx rustc_ast_lowering::Arena<'tcx>,\n ) -> &'tcx Crate<'tcx> {\n     // Lower AST to HIR.\n@@ -485,6 +484,9 @@ pub fn lower_to_hir<'res, 'tcx>(\n         )\n     });\n \n+    // Drop AST to free memory\n+    sess.time(\"drop_ast\", || std::mem::drop(krate));\n+\n     // Discard hygiene data, which isn't required after lowering to HIR.\n     if !sess.opts.debugging_opts.keep_hygiene_data {\n         rustc_span::hygiene::clear_syntax_context_map();\n@@ -577,7 +579,7 @@ fn escape_dep_env(symbol: Symbol) -> String {\n \n fn write_out_deps(\n     sess: &Session,\n-    boxed_resolver: &Steal<Rc<RefCell<BoxedResolver>>>,\n+    boxed_resolver: &RefCell<BoxedResolver>,\n     outputs: &OutputFilenames,\n     out_filenames: &[PathBuf],\n ) {\n@@ -604,7 +606,7 @@ fn write_out_deps(\n         }\n \n         if sess.binary_dep_depinfo() {\n-            boxed_resolver.borrow().borrow_mut().access(|resolver| {\n+            boxed_resolver.borrow_mut().access(|resolver| {\n                 for cnum in resolver.cstore().crates_untracked() {\n                     let source = resolver.cstore().crate_source_untracked(cnum);\n                     if let Some((path, _)) = source.dylib {\n@@ -673,7 +675,7 @@ pub fn prepare_outputs(\n     sess: &Session,\n     compiler: &Compiler,\n     krate: &ast::Crate,\n-    boxed_resolver: &Steal<Rc<RefCell<BoxedResolver>>>,\n+    boxed_resolver: &RefCell<BoxedResolver>,\n     crate_name: &str,\n ) -> Result<OutputFilenames> {\n     let _timer = sess.timer(\"prepare_outputs\");\n@@ -777,7 +779,7 @@ impl<'tcx> QueryContext<'tcx> {\n pub fn create_global_ctxt<'tcx>(\n     compiler: &'tcx Compiler,\n     lint_store: Lrc<LintStore>,\n-    krate: &ast::Crate,\n+    krate: ast::Crate,\n     dep_graph: DepGraph,\n     resolver: Rc<RefCell<BoxedResolver>>,\n     outputs: OutputFilenames,"}, {"sha": "b5fe8af1fd7238c57cd382ebe131c641fa901a9a", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf", "patch": "@@ -3,7 +3,6 @@ use crate::passes::{self, BoxedResolver, QueryContext};\n \n use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n-use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::ErrorReported;\n@@ -80,7 +79,7 @@ pub struct Queries<'tcx> {\n     parse: Query<ast::Crate>,\n     crate_name: Query<String>,\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n-    expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>,\n+    expansion: Query<(ast::Crate, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n     prepare_outputs: Query<OutputFilenames>,\n     global_ctxt: Query<QueryContext<'tcx>>,\n@@ -168,7 +167,7 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn expansion(\n         &self,\n-    ) -> Result<&Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>> {\n+    ) -> Result<&Query<(ast::Crate, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>> {\n         tracing::trace!(\"expansion\");\n         self.expansion.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n@@ -184,7 +183,7 @@ impl<'tcx> Queries<'tcx> {\n             let krate = resolver.access(|resolver| {\n                 passes::configure_and_expand(&sess, &lint_store, krate, &crate_name, resolver)\n             })?;\n-            Ok((krate, Steal::new(Rc::new(RefCell::new(resolver))), lint_store))\n+            Ok((krate, Rc::new(RefCell::new(resolver)), lint_store))\n         })\n     }\n \n@@ -206,14 +205,13 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn prepare_outputs(&self) -> Result<&Query<OutputFilenames>> {\n         self.prepare_outputs.compute(|| {\n-            let expansion_result = self.expansion()?;\n-            let (krate, boxed_resolver, _) = &*expansion_result.peek();\n+            let (krate, boxed_resolver, _) = &*self.expansion()?.peek();\n             let crate_name = self.crate_name()?.peek();\n             passes::prepare_outputs(\n                 self.session(),\n                 self.compiler,\n-                &krate,\n-                &boxed_resolver,\n+                krate,\n+                &*boxed_resolver,\n                 &crate_name,\n             )\n         })\n@@ -223,14 +221,14 @@ impl<'tcx> Queries<'tcx> {\n         self.global_ctxt.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let outputs = self.prepare_outputs()?.peek().clone();\n-            let (ref krate, ref resolver, ref lint_store) = &*self.expansion()?.peek();\n             let dep_graph = self.dep_graph()?.peek().clone();\n+            let (krate, resolver, lint_store) = self.expansion()?.take();\n             Ok(passes::create_global_ctxt(\n                 self.compiler,\n-                lint_store.clone(),\n+                lint_store,\n                 krate,\n                 dep_graph,\n-                resolver.steal(),\n+                resolver,\n                 outputs,\n                 &crate_name,\n                 &self.queries,"}, {"sha": "71fcde8bca89f51566251db2bddc5f2903874f70", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=2f28737ebea5a330b9fd95b67d0f5fa6a7dac7cf", "patch": "@@ -303,9 +303,8 @@ crate fn create_resolver<'a>(\n     queries: &Queries<'a>,\n     sess: &Session,\n ) -> Rc<RefCell<interface::BoxedResolver>> {\n-    let parts = abort_on_err(queries.expansion(), sess).peek();\n-    let (krate, resolver, _) = &*parts;\n-    let resolver = resolver.borrow().clone();\n+    let (krate, resolver, _) = &*abort_on_err(queries.expansion(), sess).peek();\n+    let resolver = resolver.clone();\n \n     let mut loader = crate::passes::collect_intra_doc_links::IntraLinkCrateLoader::new(resolver);\n     ast::visit::walk_crate(&mut loader, krate);"}]}