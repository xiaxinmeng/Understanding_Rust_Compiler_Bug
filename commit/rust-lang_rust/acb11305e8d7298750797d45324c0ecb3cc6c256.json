{"sha": "acb11305e8d7298750797d45324c0ecb3cc6c256", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYjExMzA1ZThkNzI5ODc1MDc5N2Q0NTMyNGMwZWNiM2NjNmMyNTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-25T04:15:11Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-25T04:15:11Z"}, "message": "parser: TopLevel -> RecoverComma.", "tree": {"sha": "bbb0aac5180a54b90c512c3adfcaea26743288ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbb0aac5180a54b90c512c3adfcaea26743288ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acb11305e8d7298750797d45324c0ecb3cc6c256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acb11305e8d7298750797d45324c0ecb3cc6c256", "html_url": "https://github.com/rust-lang/rust/commit/acb11305e8d7298750797d45324c0ecb3cc6c256", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acb11305e8d7298750797d45324c0ecb3cc6c256/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a73199da6c06c0b71ed6eeca578b00925137664", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a73199da6c06c0b71ed6eeca578b00925137664", "html_url": "https://github.com/rust-lang/rust/commit/6a73199da6c06c0b71ed6eeca578b00925137664"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "f2e269e03baf9ece106edb9b3e6b92e85821f036", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/acb11305e8d7298750797d45324c0ecb3cc6c256/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb11305e8d7298750797d45324c0ecb3cc6c256/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=acb11305e8d7298750797d45324c0ecb3cc6c256", "patch": "@@ -21,9 +21,9 @@ pub(super) const PARAM_EXPECTED: Expected = Some(\"parameter name\");\n #[derive(PartialEq)]\n pub enum GateOr { Yes, No }\n \n-/// Whether or not this is the top level pattern context.\n+/// Whether or not to recover a `,` when parsing or-patterns.\n #[derive(PartialEq, Copy, Clone)]\n-enum TopLevel { Yes, No }\n+enum RecoverComma { Yes, No }\n \n impl<'a> Parser<'a> {\n     /// Parses a pattern.\n@@ -52,7 +52,7 @@ impl<'a> Parser<'a> {\n         let gated_leading_vert = self.eat_or_separator() && gate_or == GateOr::Yes;\n \n         // Parse the possibly-or-pattern.\n-        let pat = self.parse_pat_with_or(None, gate_or, TopLevel::Yes)?;\n+        let pat = self.parse_pat_with_or(None, gate_or, RecoverComma::Yes)?;\n \n         // If we parsed a leading `|` which should be gated,\n         // and no other gated or-pattern has been parsed thus far,\n@@ -72,7 +72,7 @@ impl<'a> Parser<'a> {\n     /// Special recovery is provided for or-patterns and leading `|`.\n     pub(super) fn parse_fn_param_pat(&mut self) -> PResult<'a, P<Pat>> {\n         self.recover_leading_vert(\"not allowed in a parameter pattern\");\n-        let pat = self.parse_pat_with_or(PARAM_EXPECTED, GateOr::No, TopLevel::No)?;\n+        let pat = self.parse_pat_with_or(PARAM_EXPECTED, GateOr::No, RecoverComma::No)?;\n \n         if let PatKind::Or(..) = &pat.node {\n             self.ban_illegal_fn_param_or_pat(&pat);\n@@ -96,11 +96,11 @@ impl<'a> Parser<'a> {\n         &mut self,\n         expected: Expected,\n         gate_or: GateOr,\n-        top_level: TopLevel,\n+        rc: RecoverComma,\n     ) -> PResult<'a, P<Pat>> {\n         // Parse the first pattern.\n         let first_pat = self.parse_pat(expected)?;\n-        self.maybe_recover_unexpected_comma(first_pat.span, top_level)?;\n+        self.maybe_recover_unexpected_comma(first_pat.span, rc)?;\n \n         // If the next token is not a `|`,\n         // this is not an or-pattern and we should exit here.\n@@ -115,7 +115,7 @@ impl<'a> Parser<'a> {\n                 err.span_label(lo, \"while parsing this or-pattern staring here\");\n                 err\n             })?;\n-            self.maybe_recover_unexpected_comma(pat.span, top_level)?;\n+            self.maybe_recover_unexpected_comma(pat.span, rc)?;\n             pats.push(pat);\n         }\n         let or_pattern_span = lo.to(self.prev_span);\n@@ -156,8 +156,8 @@ impl<'a> Parser<'a> {\n \n     /// Some special error handling for the \"top-level\" patterns in a match arm,\n     /// `for` loop, `let`, &c. (in contrast to subpatterns within such).\n-    fn maybe_recover_unexpected_comma(&mut self, lo: Span, top_level: TopLevel) -> PResult<'a, ()> {\n-        if top_level == TopLevel::No || self.token != token::Comma {\n+    fn maybe_recover_unexpected_comma(&mut self, lo: Span, rc: RecoverComma) -> PResult<'a, ()> {\n+        if rc == RecoverComma::No || self.token != token::Comma {\n             return Ok(());\n         }\n \n@@ -207,7 +207,7 @@ impl<'a> Parser<'a> {\n     /// See `parse_pat_with_or` for details on parsing or-patterns.\n     fn parse_pat_with_or_inner(&mut self) -> PResult<'a, P<Pat>> {\n         self.recover_leading_vert(\"only allowed in a top-level pattern\");\n-        self.parse_pat_with_or(None, GateOr::Yes, TopLevel::No)\n+        self.parse_pat_with_or(None, GateOr::Yes, RecoverComma::No)\n     }\n \n     /// Recover if `|` or `||` is here."}]}