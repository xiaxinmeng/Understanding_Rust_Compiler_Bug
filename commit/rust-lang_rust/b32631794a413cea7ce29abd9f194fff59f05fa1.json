{"sha": "b32631794a413cea7ce29abd9f194fff59f05fa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMjYzMTc5NGE0MTNjZWE3Y2UyOWFiZDlmMTk0ZmZmNTlmMDVmYTE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-05T10:53:52Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-05T10:53:52Z"}, "message": "Rustfmt for_loop.rs and add false positive tests", "tree": {"sha": "25fe7cb3aca16399e171cbd7d0e9a8e149b64ef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25fe7cb3aca16399e171cbd7d0e9a8e149b64ef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b32631794a413cea7ce29abd9f194fff59f05fa1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmuglcACgkQpp+NIls6\n19lXkhAAl/4kfFii2SOkXZrmYwzOBiF+X6p8OA+YOGqwRGCdP6MQ/VSAlCmtrLgk\nbd98KS3aBS9WDIkc9H+HSl4RVRf+3FsgN4r2SyUFikxsjfFd5dIvnbuvRJKIO4BB\nDELK6tQessJ+nY1StExopYr3Sxa9v3COppXhSVBG0p9pHVFTDnHrBJ9TyS25JugM\nZ7c8+Y9r8sbP//2vZ+R81mf+4UuursVnDt+Tt08RmFuc2nJJFD3UwL+4XxCGl3xg\nW7jeqB6nO4N/ZScPYw4AygELe/mM3QyQOIMgRewoEXvticRMhxfvonKpqqn7HcxX\n+G5ukJBmYTyC2zUW80/3nycI9zuj+di6psnt4jZbKUsqvcpMwRqFLhXhoBlHDkpE\n7orCVtedYDRAQ1WzxaTciSDMbD7y/C0ge497Q0orN5xcJtJwh0iTvXm9cR1W3YY2\nyXPJJSwlY3ma6Cer5KhJKb9/tl0gVae3qM6FzMDW7ANx9TTo0S/3ktaBnQV95eCN\nOk/zP/hP1s86mHBSQEPLVBvn3Fxs88vjjnK4mcIy1fW3iBH/E7tNQFBAA5H5PZcT\nWEoiHUMQaMLjGNQM8Qi0ZYGdtBh3mOjHfoh/I8UKESSaUU2ysTcrORzJIbQhvqYI\nEJZHVomSQkzWTQ1fbBcaLT7wsKQT7dZZ8XDy7bXHdqz+mOdzKRE=\n=OqME\n-----END PGP SIGNATURE-----", "payload": "tree 25fe7cb3aca16399e171cbd7d0e9a8e149b64ef9\nparent e4524ac4de5327a4c25a3ba8f0fcdd0ccfc7523d\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1504608832 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1504608832 +0200\n\nRustfmt for_loop.rs and add false positive tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b32631794a413cea7ce29abd9f194fff59f05fa1", "html_url": "https://github.com/rust-lang/rust/commit/b32631794a413cea7ce29abd9f194fff59f05fa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b32631794a413cea7ce29abd9f194fff59f05fa1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4524ac4de5327a4c25a3ba8f0fcdd0ccfc7523d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4524ac4de5327a4c25a3ba8f0fcdd0ccfc7523d", "html_url": "https://github.com/rust-lang/rust/commit/e4524ac4de5327a4c25a3ba8f0fcdd0ccfc7523d"}], "stats": {"total": 720, "additions": 468, "deletions": 252}, "files": [{"sha": "b4aee6d8ce23fef5e85ba94ea49df3387b494b3a", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 222, "deletions": 65, "changes": 287, "blob_url": "https://github.com/rust-lang/rust/blob/b32631794a413cea7ce29abd9f194fff59f05fa1/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32631794a413cea7ce29abd9f194fff59f05fa1/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=b32631794a413cea7ce29abd9f194fff59f05fa1", "patch": "@@ -4,14 +4,14 @@\n use std::collections::*;\n use std::rc::Rc;\n \n-static STATIC: [usize; 4] = [ 0,  1,  8, 16 ];\n-const CONST: [usize; 4] = [ 0,  1,  8, 16 ];\n+static STATIC: [usize; 4] = [0, 1, 8, 16];\n+const CONST: [usize; 4] = [0, 1, 8, 16];\n \n #[warn(clippy)]\n fn for_loop_over_option_and_result() {\n     let option = Some(1);\n     let result = option.ok_or(\"x not found\");\n-    let v = vec![0,1,2];\n+    let v = vec![0, 1, 2];\n \n     // check FOR_LOOP_OVER_OPTION lint\n     for x in option {\n@@ -27,7 +27,8 @@ fn for_loop_over_option_and_result() {\n         println!(\"{}\", x);\n     }\n \n-    // make sure LOOP_OVER_NEXT lint takes precedence when next() is the last call in the chain\n+    // make sure LOOP_OVER_NEXT lint takes precedence when next() is the last call\n+    // in the chain\n     for x in v.iter().next() {\n         println!(\"{}\", x);\n     }\n@@ -72,7 +73,8 @@ impl Unrelated {\n     }\n }\n \n-#[warn(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+#[warn(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop,\n+       explicit_counter_loop, for_kv_map)]\n #[warn(unused_collect)]\n #[allow(linkedlist, shadow_unrelated, unnecessary_mut_passed, cyclomatic_complexity, similar_names)]\n #[allow(many_single_char_names, unused_variables)]\n@@ -90,7 +92,9 @@ fn main() {\n         println!(\"{}\", vec[i]); // ok, not the `i` of the for-loop\n     }\n \n-    for i in 0..vec.len() { let _ = vec[i]; }\n+    for i in 0..vec.len() {\n+        let _ = vec[i];\n+    }\n \n     // ICE #746\n     for j in 0..4 {\n@@ -104,7 +108,8 @@ fn main() {\n     for i in 0..vec.len() {\n         println!(\"{} {}\", vec[i], i);\n     }\n-    for i in 0..vec.len() {      // not an error, indexing more than one variable\n+    for i in 0..vec.len() {\n+        // not an error, indexing more than one variable\n         println!(\"{} {}\", vec[i], vec2[i]);\n     }\n \n@@ -156,180 +161,240 @@ fn main() {\n         println!(\"{}\", i);\n     }\n \n-    for i in 5...5 { // not an error, this is the range with only one element \u201c5\u201d\n+    for i in 5...5 {\n+        // not an error, this is the range with only one element \u201c5\u201d\n         println!(\"{}\", i);\n     }\n \n-    for i in 0..10 { // not an error, the start index is less than the end index\n+    for i in 0..10 {\n+        // not an error, the start index is less than the end index\n         println!(\"{}\", i);\n     }\n \n-    for i in -10..0 { // not an error\n+    for i in -10..0 {\n+        // not an error\n         println!(\"{}\", i);\n     }\n \n-    for i in (10..0).map(|x| x * 2) { // not an error, it can't be known what arbitrary methods do to a range\n+    for i in (10..0).map(|x| x * 2) {\n+        // not an error, it can't be known what arbitrary methods do to a range\n         println!(\"{}\", i);\n     }\n \n     // testing that the empty range lint folds constants\n-    for i in 10..5+4 {\n+    for i in 10..5 + 4 {\n         println!(\"{}\", i);\n     }\n \n-    for i in (5+2)..(3-1) {\n+    for i in (5 + 2)..(3 - 1) {\n         println!(\"{}\", i);\n     }\n \n-    for i in (5+2)..(8-1) {\n+    for i in (5 + 2)..(8 - 1) {\n         println!(\"{}\", i);\n     }\n \n-    for i in (2*2)..(2*3) { // no error, 4..6 is fine\n+    for i in (2 * 2)..(2 * 3) {\n+        // no error, 4..6 is fine\n         println!(\"{}\", i);\n     }\n \n     let x = 42;\n-    for i in x..10 { // no error, not constant-foldable\n+    for i in x..10 {\n+        // no error, not constant-foldable\n         println!(\"{}\", i);\n     }\n \n     // See #601\n-    for i in 0..10 { // no error, id_col does not exist outside the loop\n+    for i in 0..10 {\n+        // no error, id_col does not exist outside the loop\n         let mut id_col = vec![0f64; 10];\n         id_col[i] = 1f64;\n     }\n \n-    for _v in vec.iter() { }\n+    for _v in vec.iter() {}\n \n-    for _v in vec.iter_mut() { }\n+    for _v in vec.iter_mut() {}\n \n-    let out_vec = vec![1,2,3];\n-    for _v in out_vec.into_iter() { }\n+    let out_vec = vec![1, 2, 3];\n+    for _v in out_vec.into_iter() {}\n \n     let array = [1, 2, 3];\n     for _v in array.into_iter() {}\n \n-    for _v in &vec { } // these are fine\n-    for _v in &mut vec { } // these are fine\n+    for _v in &vec {} // these are fine\n+    for _v in &mut vec {} // these are fine\n \n-    for _v in [1, 2, 3].iter() { }\n+    for _v in [1, 2, 3].iter() {}\n \n-    for _v in (&mut [1, 2, 3]).iter() { } // no error\n+    for _v in (&mut [1, 2, 3]).iter() {} // no error\n \n     for _v in [0; 32].iter() {}\n \n     for _v in [0; 33].iter() {} // no error\n \n     let ll: LinkedList<()> = LinkedList::new();\n-    for _v in ll.iter() { }\n+    for _v in ll.iter() {}\n \n     let vd: VecDeque<()> = VecDeque::new();\n-    for _v in vd.iter() { }\n+    for _v in vd.iter() {}\n \n     let bh: BinaryHeap<()> = BinaryHeap::new();\n-    for _v in bh.iter() { }\n+    for _v in bh.iter() {}\n \n     let hm: HashMap<(), ()> = HashMap::new();\n-    for _v in hm.iter() { }\n+    for _v in hm.iter() {}\n \n     let bt: BTreeMap<(), ()> = BTreeMap::new();\n-    for _v in bt.iter() { }\n+    for _v in bt.iter() {}\n \n     let hs: HashSet<()> = HashSet::new();\n-    for _v in hs.iter() { }\n+    for _v in hs.iter() {}\n \n     let bs: BTreeSet<()> = BTreeSet::new();\n-    for _v in bs.iter() { }\n+    for _v in bs.iter() {}\n \n-    for _v in vec.iter().next() { }\n+    for _v in vec.iter().next() {}\n \n     let u = Unrelated(vec![]);\n-    for _v in u.next() { } // no error\n-    for _v in u.iter() { } // no error\n+    for _v in u.next() {} // no error\n+    for _v in u.iter() {} // no error\n \n     let mut out = vec![];\n     vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>();\n     let _y = vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>(); // this is fine\n \n     // Loop with explicit counter variable\n     let mut _index = 0;\n-    for _v in &vec { _index += 1 }\n+    for _v in &vec {\n+        _index += 1\n+    }\n \n     let mut _index = 1;\n     _index = 0;\n-    for _v in &vec { _index += 1 }\n+    for _v in &vec {\n+        _index += 1\n+    }\n \n     // Potential false positives\n     let mut _index = 0;\n     _index = 1;\n-    for _v in &vec { _index += 1 }\n+    for _v in &vec {\n+        _index += 1\n+    }\n \n     let mut _index = 0;\n     _index += 1;\n-    for _v in &vec { _index += 1 }\n+    for _v in &vec {\n+        _index += 1\n+    }\n \n     let mut _index = 0;\n-    if true { _index = 1 }\n-    for _v in &vec { _index += 1 }\n+    if true {\n+        _index = 1\n+    }\n+    for _v in &vec {\n+        _index += 1\n+    }\n \n     let mut _index = 0;\n     let mut _index = 1;\n-    for _v in &vec { _index += 1 }\n+    for _v in &vec {\n+        _index += 1\n+    }\n \n     let mut _index = 0;\n-    for _v in &vec { _index += 1; _index += 1 }\n+    for _v in &vec {\n+        _index += 1;\n+        _index += 1\n+    }\n \n     let mut _index = 0;\n-    for _v in &vec { _index *= 2; _index += 1 }\n+    for _v in &vec {\n+        _index *= 2;\n+        _index += 1\n+    }\n \n     let mut _index = 0;\n-    for _v in &vec { _index = 1; _index += 1 }\n+    for _v in &vec {\n+        _index = 1;\n+        _index += 1\n+    }\n \n     let mut _index = 0;\n \n-    for _v in &vec { let mut _index = 0; _index += 1 }\n+    for _v in &vec {\n+        let mut _index = 0;\n+        _index += 1\n+    }\n \n     let mut _index = 0;\n-    for _v in &vec { _index += 1; _index = 0; }\n+    for _v in &vec {\n+        _index += 1;\n+        _index = 0;\n+    }\n \n     let mut _index = 0;\n-    for _v in &vec { for _x in 0..1 { _index += 1; }; _index += 1 }\n+    for _v in &vec {\n+        for _x in 0..1 {\n+            _index += 1;\n+        }\n+        _index += 1\n+    }\n \n     let mut _index = 0;\n-    for x in &vec { if *x == 1 { _index += 1 } }\n+    for x in &vec {\n+        if *x == 1 {\n+            _index += 1\n+        }\n+    }\n \n     let mut _index = 0;\n-    if true { _index = 1 };\n-    for _v in &vec { _index += 1 }\n+    if true {\n+        _index = 1\n+    };\n+    for _v in &vec {\n+        _index += 1\n+    }\n \n     let mut _index = 1;\n-    if false { _index = 0 };\n-    for _v in &vec { _index += 1 }\n+    if false {\n+        _index = 0\n+    };\n+    for _v in &vec {\n+        _index += 1\n+    }\n \n     let mut index = 0;\n-    { let mut _x = &mut index; }\n-    for _v in &vec { _index += 1 }\n+    {\n+        let mut _x = &mut index;\n+    }\n+    for _v in &vec {\n+        _index += 1\n+    }\n \n     let mut index = 0;\n-    for _v in &vec { index += 1 }\n+    for _v in &vec {\n+        index += 1\n+    }\n     println!(\"index: {}\", index);\n \n     for_loop_over_option_and_result();\n \n-    let m : HashMap<u64, u64> = HashMap::new();\n+    let m: HashMap<u64, u64> = HashMap::new();\n     for (_, v) in &m {\n         let _v = v;\n     }\n \n-    let m : Rc<HashMap<u64, u64>> = Rc::new(HashMap::new());\n+    let m: Rc<HashMap<u64, u64>> = Rc::new(HashMap::new());\n     for (_, v) in &*m {\n         let _v = v;\n-        // Here the `*` is not actually necesarry, but the test tests that we don't suggest\n+        // Here the `*` is not actually necesarry, but the test tests that we don't\n+        // suggest\n         // `in *m.values()` as we used to\n     }\n \n-    let mut m : HashMap<u64, u64> = HashMap::new();\n+    let mut m: HashMap<u64, u64> = HashMap::new();\n     for (_, v) in &mut m {\n         let _v = v;\n     }\n@@ -339,16 +404,20 @@ fn main() {\n         let _v = v;\n     }\n \n-    let m : HashMap<u64, u64> = HashMap::new();\n+    let m: HashMap<u64, u64> = HashMap::new();\n     let rm = &m;\n     for (k, _value) in rm {\n         let _k = k;\n     }\n \n     test_for_kv_map();\n \n-    fn f<T>(_: &T, _: &T) -> bool { unimplemented!() }\n-    fn g<T>(_: &mut [T], _: usize, _: usize) { unimplemented!() }\n+    fn f<T>(_: &T, _: &T) -> bool {\n+        unimplemented!()\n+    }\n+    fn g<T>(_: &mut [T], _: usize, _: usize) {\n+        unimplemented!()\n+    }\n     for i in 1..vec.len() {\n         if f(&vec[i - 1], &vec[i]) {\n             g(&mut vec, i - 1, i);\n@@ -362,7 +431,7 @@ fn main() {\n \n #[allow(used_underscore_binding)]\n fn test_for_kv_map() {\n-    let m : HashMap<u64, u64> = HashMap::new();\n+    let m: HashMap<u64, u64> = HashMap::new();\n \n     // No error, _value is actually used\n     for (k, _value) in &m {\n@@ -372,7 +441,7 @@ fn test_for_kv_map() {\n }\n \n #[allow(dead_code)]\n-fn partition<T:PartialOrd+Send>(v: &mut [T]) -> usize {\n+fn partition<T: PartialOrd + Send>(v: &mut [T]) -> usize {\n     let pivot = v.len() - 1;\n     let mut i = 0;\n     for j in 0..pivot {\n@@ -384,3 +453,91 @@ fn partition<T:PartialOrd+Send>(v: &mut [T]) -> usize {\n     v.swap(i, pivot);\n     i\n }\n+\n+const LOOP_OFFSET: usize = 5000;\n+\n+#[warn(needless_range_loop)]\n+pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {\n+    // plain manual memcpy\n+    for i in 0..src.len() {\n+        dst[i] = src[i];\n+    }\n+\n+    // dst offset memcpy\n+    for i in 0..src.len() {\n+        dst[i + 10] = src[i];\n+    }\n+\n+    // src offset memcpy\n+    for i in 0..src.len() {\n+        dst[i] = src[i + 10];\n+    }\n+\n+    // src offset memcpy\n+    for i in 11..src.len() {\n+        dst[i] = src[i - 10];\n+    }\n+\n+    // overwrite entire dst\n+    for i in 0..dst.len() {\n+        dst[i] = src[i];\n+    }\n+\n+    // manual copy with branch - can't easily convert to memcpy!\n+    for i in 0..src.len() {\n+        dst[i] = src[i];\n+        if dst[i] > 5 {\n+            break;\n+        }\n+    }\n+\n+    // multiple copies - suggest two memcpy statements\n+    for i in 10..256 {\n+        dst[i] = src[i - 5];\n+        dst2[i + 500] = src[i]\n+    }\n+\n+    // this is a reversal - the copy lint shouldn't be triggered\n+    for i in 10..LOOP_OFFSET {\n+        dst[i + LOOP_OFFSET] = src[LOOP_OFFSET - i];\n+    }\n+\n+    let some_var = 5;\n+    // Offset in variable\n+    for i in 10..LOOP_OFFSET {\n+        dst[i + LOOP_OFFSET] = src[i - some_var];\n+    }\n+\n+    // Non continuous copy - don't trigger lint\n+    for i in 0..10 {\n+        dst[i + i] = src[i];\n+    }\n+\n+    let src_vec = vec![1, 2, 3, 4, 5];\n+    let mut dst_vec = vec![0, 0, 0, 0, 0];\n+\n+    // make sure vectors are supported\n+    for i in 0..src_vec.len() {\n+        dst_vec[i] = src_vec[i];\n+    }\n+\n+    // lint should not trigger when either\n+    // source or destination type is not\n+    // slice-like, like DummyStruct\n+    struct DummyStruct(i32);\n+\n+    impl ::std::ops::Index<usize> for DummyStruct {\n+        type Output = i32;\n+\n+        fn index(&self, _: usize) -> &i32 {\n+            &self.0\n+        }\n+    }\n+\n+    let src = DummyStruct(5);\n+    let mut dst_vec = vec![0; 10];\n+\n+    for i in 0..10 {\n+        dst_vec[i] = src[i];\n+    }\n+}"}, {"sha": "090caf1779a5e74b7cbeb52e232ede9caf84740b", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 246, "deletions": 187, "changes": 433, "blob_url": "https://github.com/rust-lang/rust/blob/b32631794a413cea7ce29abd9f194fff59f05fa1/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b32631794a413cea7ce29abd9f194fff59f05fa1/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=b32631794a413cea7ce29abd9f194fff59f05fa1", "patch": "@@ -25,478 +25,537 @@ error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is\n    = help: consider replacing `for x in option.ok_or(\"x not found\")` with `if let Ok(x) = option.ok_or(\"x not found\")`\n \n error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loop.rs:31:5\n+  --> $DIR/for_loop.rs:32:5\n    |\n-31 | /     for x in v.iter().next() {\n-32 | |         println!(\"{}\", x);\n-33 | |     }\n+32 | /     for x in v.iter().next() {\n+33 | |         println!(\"{}\", x);\n+34 | |     }\n    | |_____^\n    |\n    = note: `-D iter-next-loop` implied by `-D warnings`\n \n error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop.rs:36:14\n+  --> $DIR/for_loop.rs:37:14\n    |\n-36 |     for x in v.iter().next().and(Some(0)) {\n+37 |     for x in v.iter().next().and(Some(0)) {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n \n error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop.rs:40:14\n+  --> $DIR/for_loop.rs:41:14\n    |\n-40 |     for x in v.iter().next().ok_or(\"x not found\") {\n+41 |     for x in v.iter().next().ok_or(\"x not found\") {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n \n error: this loop never actually loops\n-  --> $DIR/for_loop.rs:52:5\n+  --> $DIR/for_loop.rs:53:5\n    |\n-52 | /     while let Some(x) = option {\n-53 | |         println!(\"{}\", x);\n-54 | |         break;\n-55 | |     }\n+53 | /     while let Some(x) = option {\n+54 | |         println!(\"{}\", x);\n+55 | |         break;\n+56 | |     }\n    | |_____^\n    |\n    = note: `-D never-loop` implied by `-D warnings`\n \n error: this loop never actually loops\n-  --> $DIR/for_loop.rs:58:5\n+  --> $DIR/for_loop.rs:59:5\n    |\n-58 | /     while let Ok(x) = result {\n-59 | |         println!(\"{}\", x);\n-60 | |         break;\n-61 | |     }\n+59 | /     while let Ok(x) = result {\n+60 | |         println!(\"{}\", x);\n+61 | |         break;\n+62 | |     }\n    | |_____^\n \n error: the loop variable `i` is only used to index `vec`.\n-  --> $DIR/for_loop.rs:84:5\n+  --> $DIR/for_loop.rs:86:5\n    |\n-84 | /     for i in 0..vec.len() {\n-85 | |         println!(\"{}\", vec[i]);\n-86 | |     }\n+86 | /     for i in 0..vec.len() {\n+87 | |         println!(\"{}\", vec[i]);\n+88 | |     }\n    | |_____^\n    |\n    = note: `-D needless-range-loop` implied by `-D warnings`\n help: consider using an iterator\n    |\n-84 |     for <item> in &vec {\n+86 |     for <item> in &vec {\n    |         ^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n-  --> $DIR/for_loop.rs:93:5\n+  --> $DIR/for_loop.rs:95:5\n    |\n-93 |     for i in 0..vec.len() { let _ = vec[i]; }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider using an iterator\n-   |\n-93 |     for <item> in &vec { let _ = vec[i]; }\n-   |         ^^^^^^\n-\n-error: the loop variable `j` is only used to index `STATIC`.\n-  --> $DIR/for_loop.rs:96:5\n-   |\n-96 | /     for j in 0..4 {\n-97 | |         println!(\"{:?}\", STATIC[j]);\n-98 | |     }\n+95 | /     for i in 0..vec.len() {\n+96 | |         let _ = vec[i];\n+97 | |     }\n    | |_____^\n    |\n help: consider using an iterator\n    |\n-96 |     for <item> in STATIC.iter().take(4) {\n+95 |     for <item> in &vec {\n    |         ^^^^^^\n \n-error: the loop variable `j` is only used to index `CONST`.\n+error: the loop variable `j` is only used to index `STATIC`.\n    --> $DIR/for_loop.rs:100:5\n     |\n 100 | /     for j in 0..4 {\n-101 | |         println!(\"{:?}\", CONST[j]);\n+101 | |         println!(\"{:?}\", STATIC[j]);\n 102 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |\n-100 |     for <item> in CONST.iter().take(4) {\n+100 |     for <item> in STATIC.iter().take(4) {\n     |         ^^^^^^\n \n-error: the loop variable `i` is used to index `vec`\n+error: the loop variable `j` is only used to index `CONST`.\n    --> $DIR/for_loop.rs:104:5\n     |\n-104 | /     for i in 0..vec.len() {\n-105 | |         println!(\"{} {}\", vec[i], i);\n+104 | /     for j in 0..4 {\n+105 | |         println!(\"{:?}\", CONST[j]);\n 106 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |\n-104 |     for (i, <item>) in vec.iter().enumerate() {\n+104 |     for <item> in CONST.iter().take(4) {\n+    |         ^^^^^^\n+\n+error: the loop variable `i` is used to index `vec`\n+   --> $DIR/for_loop.rs:108:5\n+    |\n+108 | /     for i in 0..vec.len() {\n+109 | |         println!(\"{} {}\", vec[i], i);\n+110 | |     }\n+    | |_____^\n+    |\n+help: consider using an iterator\n+    |\n+108 |     for (i, <item>) in vec.iter().enumerate() {\n     |         ^^^^^^^^^^^\n \n error: the loop variable `i` is only used to index `vec2`.\n-   --> $DIR/for_loop.rs:111:5\n+   --> $DIR/for_loop.rs:116:5\n     |\n-111 | /     for i in 0..vec.len() {\n-112 | |         println!(\"{}\", vec2[i]);\n-113 | |     }\n+116 | /     for i in 0..vec.len() {\n+117 | |         println!(\"{}\", vec2[i]);\n+118 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |\n-111 |     for <item> in vec2.iter().take(vec.len()) {\n+116 |     for <item> in vec2.iter().take(vec.len()) {\n     |         ^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:115:5\n+   --> $DIR/for_loop.rs:120:5\n     |\n-115 | /     for i in 5..vec.len() {\n-116 | |         println!(\"{}\", vec[i]);\n-117 | |     }\n+120 | /     for i in 5..vec.len() {\n+121 | |         println!(\"{}\", vec[i]);\n+122 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |\n-115 |     for <item> in vec.iter().skip(5) {\n+120 |     for <item> in vec.iter().skip(5) {\n     |         ^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:119:5\n+   --> $DIR/for_loop.rs:124:5\n     |\n-119 | /     for i in 0..MAX_LEN {\n-120 | |         println!(\"{}\", vec[i]);\n-121 | |     }\n+124 | /     for i in 0..MAX_LEN {\n+125 | |         println!(\"{}\", vec[i]);\n+126 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |\n-119 |     for <item> in vec.iter().take(MAX_LEN) {\n+124 |     for <item> in vec.iter().take(MAX_LEN) {\n     |         ^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:123:5\n+   --> $DIR/for_loop.rs:128:5\n     |\n-123 | /     for i in 0...MAX_LEN {\n-124 | |         println!(\"{}\", vec[i]);\n-125 | |     }\n+128 | /     for i in 0...MAX_LEN {\n+129 | |         println!(\"{}\", vec[i]);\n+130 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |\n-123 |     for <item> in vec.iter().take(MAX_LEN + 1) {\n+128 |     for <item> in vec.iter().take(MAX_LEN + 1) {\n     |         ^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:127:5\n+   --> $DIR/for_loop.rs:132:5\n     |\n-127 | /     for i in 5..10 {\n-128 | |         println!(\"{}\", vec[i]);\n-129 | |     }\n+132 | /     for i in 5..10 {\n+133 | |         println!(\"{}\", vec[i]);\n+134 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |\n-127 |     for <item> in vec.iter().take(10).skip(5) {\n+132 |     for <item> in vec.iter().take(10).skip(5) {\n     |         ^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:131:5\n+   --> $DIR/for_loop.rs:136:5\n     |\n-131 | /     for i in 5...10 {\n-132 | |         println!(\"{}\", vec[i]);\n-133 | |     }\n+136 | /     for i in 5...10 {\n+137 | |         println!(\"{}\", vec[i]);\n+138 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |\n-131 |     for <item> in vec.iter().take(10 + 1).skip(5) {\n+136 |     for <item> in vec.iter().take(10 + 1).skip(5) {\n     |         ^^^^^^\n \n error: the loop variable `i` is used to index `vec`\n-   --> $DIR/for_loop.rs:135:5\n+   --> $DIR/for_loop.rs:140:5\n     |\n-135 | /     for i in 5..vec.len() {\n-136 | |         println!(\"{} {}\", vec[i], i);\n-137 | |     }\n+140 | /     for i in 5..vec.len() {\n+141 | |         println!(\"{} {}\", vec[i], i);\n+142 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |\n-135 |     for (i, <item>) in vec.iter().enumerate().skip(5) {\n+140 |     for (i, <item>) in vec.iter().enumerate().skip(5) {\n     |         ^^^^^^^^^^^\n \n error: the loop variable `i` is used to index `vec`\n-   --> $DIR/for_loop.rs:139:5\n+   --> $DIR/for_loop.rs:144:5\n     |\n-139 | /     for i in 5..10 {\n-140 | |         println!(\"{} {}\", vec[i], i);\n-141 | |     }\n+144 | /     for i in 5..10 {\n+145 | |         println!(\"{} {}\", vec[i], i);\n+146 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |\n-139 |     for (i, <item>) in vec.iter().enumerate().take(10).skip(5) {\n+144 |     for (i, <item>) in vec.iter().enumerate().take(10).skip(5) {\n     |         ^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:143:5\n+   --> $DIR/for_loop.rs:148:5\n     |\n-143 | /     for i in 10..0 {\n-144 | |         println!(\"{}\", i);\n-145 | |     }\n+148 | /     for i in 10..0 {\n+149 | |         println!(\"{}\", i);\n+150 | |     }\n     | |_____^\n     |\n     = note: `-D reverse-range-loop` implied by `-D warnings`\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |\n-143 |     for i in (0..10).rev() {\n+148 |     for i in (0..10).rev() {\n     |              ^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:147:5\n+   --> $DIR/for_loop.rs:152:5\n     |\n-147 | /     for i in 10...0 {\n-148 | |         println!(\"{}\", i);\n-149 | |     }\n+152 | /     for i in 10...0 {\n+153 | |         println!(\"{}\", i);\n+154 | |     }\n     | |_____^\n     |\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |\n-147 |     for i in (0...10).rev() {\n+152 |     for i in (0...10).rev() {\n     |              ^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:151:5\n+   --> $DIR/for_loop.rs:156:5\n     |\n-151 | /     for i in MAX_LEN..0 {\n-152 | |         println!(\"{}\", i);\n-153 | |     }\n+156 | /     for i in MAX_LEN..0 {\n+157 | |         println!(\"{}\", i);\n+158 | |     }\n     | |_____^\n     |\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |\n-151 |     for i in (0..MAX_LEN).rev() {\n+156 |     for i in (0..MAX_LEN).rev() {\n     |              ^^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:155:5\n+   --> $DIR/for_loop.rs:160:5\n     |\n-155 | /     for i in 5..5 {\n-156 | |         println!(\"{}\", i);\n-157 | |     }\n+160 | /     for i in 5..5 {\n+161 | |         println!(\"{}\", i);\n+162 | |     }\n     | |_____^\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:176:5\n+   --> $DIR/for_loop.rs:185:5\n     |\n-176 | /     for i in 10..5+4 {\n-177 | |         println!(\"{}\", i);\n-178 | |     }\n+185 | /     for i in 10..5 + 4 {\n+186 | |         println!(\"{}\", i);\n+187 | |     }\n     | |_____^\n     |\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |\n-176 |     for i in (5+4..10).rev() {\n-    |              ^^^^^^^^^^^^^^^\n+185 |     for i in (5 + 4..10).rev() {\n+    |              ^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:180:5\n+   --> $DIR/for_loop.rs:189:5\n     |\n-180 | /     for i in (5+2)..(3-1) {\n-181 | |         println!(\"{}\", i);\n-182 | |     }\n+189 | /     for i in (5 + 2)..(3 - 1) {\n+190 | |         println!(\"{}\", i);\n+191 | |     }\n     | |_____^\n     |\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |\n-180 |     for i in ((3-1)..(5+2)).rev() {\n-    |              ^^^^^^^^^^^^^^^^^^^^\n+189 |     for i in ((3 - 1)..(5 + 2)).rev() {\n+    |              ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:184:5\n+   --> $DIR/for_loop.rs:193:5\n     |\n-184 | /     for i in (5+2)..(8-1) {\n-185 | |         println!(\"{}\", i);\n-186 | |     }\n+193 | /     for i in (5 + 2)..(8 - 1) {\n+194 | |         println!(\"{}\", i);\n+195 | |     }\n     | |_____^\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:203:15\n+   --> $DIR/for_loop.rs:215:15\n     |\n-203 |     for _v in vec.iter() { }\n+215 |     for _v in vec.iter() {}\n     |               ^^^^^^^^^^ help: to write this more concisely, try: `&vec`\n     |\n     = note: `-D explicit-iter-loop` implied by `-D warnings`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:205:15\n+   --> $DIR/for_loop.rs:217:15\n     |\n-205 |     for _v in vec.iter_mut() { }\n+217 |     for _v in vec.iter_mut() {}\n     |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&mut vec`\n \n error: it is more idiomatic to loop over containers instead of using explicit iteration methods`\n-   --> $DIR/for_loop.rs:208:15\n+   --> $DIR/for_loop.rs:220:15\n     |\n-208 |     for _v in out_vec.into_iter() { }\n+220 |     for _v in out_vec.into_iter() {}\n     |               ^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `out_vec`\n     |\n     = note: `-D explicit-into-iter-loop` implied by `-D warnings`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:211:15\n+   --> $DIR/for_loop.rs:223:15\n     |\n-211 |     for _v in array.into_iter() {}\n+223 |     for _v in array.into_iter() {}\n     |               ^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&array`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:216:15\n+   --> $DIR/for_loop.rs:228:15\n     |\n-216 |     for _v in [1, 2, 3].iter() { }\n+228 |     for _v in [1, 2, 3].iter() {}\n     |               ^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[1, 2, 3]`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:220:15\n+   --> $DIR/for_loop.rs:232:15\n     |\n-220 |     for _v in [0; 32].iter() {}\n+232 |     for _v in [0; 32].iter() {}\n     |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[0; 32]`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:225:15\n+   --> $DIR/for_loop.rs:237:15\n     |\n-225 |     for _v in ll.iter() { }\n+237 |     for _v in ll.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&ll`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:228:15\n+   --> $DIR/for_loop.rs:240:15\n     |\n-228 |     for _v in vd.iter() { }\n+240 |     for _v in vd.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&vd`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:231:15\n+   --> $DIR/for_loop.rs:243:15\n     |\n-231 |     for _v in bh.iter() { }\n+243 |     for _v in bh.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&bh`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:234:15\n+   --> $DIR/for_loop.rs:246:15\n     |\n-234 |     for _v in hm.iter() { }\n+246 |     for _v in hm.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&hm`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:237:15\n+   --> $DIR/for_loop.rs:249:15\n     |\n-237 |     for _v in bt.iter() { }\n+249 |     for _v in bt.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&bt`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:240:15\n+   --> $DIR/for_loop.rs:252:15\n     |\n-240 |     for _v in hs.iter() { }\n+252 |     for _v in hs.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&hs`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:243:15\n+   --> $DIR/for_loop.rs:255:15\n     |\n-243 |     for _v in bs.iter() { }\n+255 |     for _v in bs.iter() {}\n     |               ^^^^^^^^^ help: to write this more concisely, try: `&bs`\n \n error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-   --> $DIR/for_loop.rs:245:5\n+   --> $DIR/for_loop.rs:257:5\n     |\n-245 |     for _v in vec.iter().next() { }\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+257 |     for _v in vec.iter().next() {}\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you are collect()ing an iterator and throwing away the result. Consider using an explicit for loop to exhaust the iterator\n-   --> $DIR/for_loop.rs:252:5\n+   --> $DIR/for_loop.rs:264:5\n     |\n-252 |     vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>();\n+264 |     vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D unused-collect` implied by `-D warnings`\n \n error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n-   --> $DIR/for_loop.rs:257:5\n+   --> $DIR/for_loop.rs:269:5\n     |\n-257 |     for _v in &vec { _index += 1 }\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+269 | /     for _v in &vec {\n+270 | |         _index += 1\n+271 | |     }\n+    | |_____^\n     |\n     = note: `-D explicit-counter-loop` implied by `-D warnings`\n \n error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n-   --> $DIR/for_loop.rs:261:5\n+   --> $DIR/for_loop.rs:275:5\n     |\n-261 |     for _v in &vec { _index += 1 }\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+275 | /     for _v in &vec {\n+276 | |         _index += 1\n+277 | |     }\n+    | |_____^\n \n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:321:5\n+   --> $DIR/for_loop.rs:385:5\n     |\n-321 | /     for (_, v) in &m {\n-322 | |         let _v = v;\n-323 | |     }\n+385 | /     for (_, v) in &m {\n+386 | |         let _v = v;\n+387 | |     }\n     | |_____^\n     |\n     = note: `-D for-kv-map` implied by `-D warnings`\n help: use the corresponding method\n     |\n-321 |     for v in m.values() {\n+385 |     for v in m.values() {\n     |         ^\n \n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:326:5\n-    |\n-326 | /     for (_, v) in &*m {\n-327 | |         let _v = v;\n-328 | |         // Here the `*` is not actually necesarry, but the test tests that we don't suggest\n-329 | |         // `in *m.values()` as we used to\n-330 | |     }\n+   --> $DIR/for_loop.rs:390:5\n+    |\n+390 | /     for (_, v) in &*m {\n+391 | |         let _v = v;\n+392 | |         // Here the `*` is not actually necesarry, but the test tests that we don't\n+393 | |         // suggest\n+394 | |         // `in *m.values()` as we used to\n+395 | |     }\n     | |_____^\n     |\n help: use the corresponding method\n     |\n-326 |     for v in (*m).values() {\n+390 |     for v in (*m).values() {\n     |         ^\n \n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:333:5\n+   --> $DIR/for_loop.rs:398:5\n     |\n-333 | /     for (_, v) in &mut m {\n-334 | |         let _v = v;\n-335 | |     }\n+398 | /     for (_, v) in &mut m {\n+399 | |         let _v = v;\n+400 | |     }\n     | |_____^\n     |\n help: use the corresponding method\n     |\n-333 |     for v in m.values_mut() {\n+398 |     for v in m.values_mut() {\n     |         ^\n \n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:338:5\n+   --> $DIR/for_loop.rs:403:5\n     |\n-338 | /     for (_, v) in &mut *m {\n-339 | |         let _v = v;\n-340 | |     }\n+403 | /     for (_, v) in &mut *m {\n+404 | |         let _v = v;\n+405 | |     }\n     | |_____^\n     |\n help: use the corresponding method\n     |\n-338 |     for v in (*m).values_mut() {\n+403 |     for v in (*m).values_mut() {\n     |         ^\n \n error: you seem to want to iterate on a map's keys\n-   --> $DIR/for_loop.rs:344:5\n+   --> $DIR/for_loop.rs:409:5\n     |\n-344 | /     for (k, _value) in rm {\n-345 | |         let _k = k;\n-346 | |     }\n+409 | /     for (k, _value) in rm {\n+410 | |         let _k = k;\n+411 | |     }\n     | |_____^\n     |\n help: use the corresponding method\n     |\n-344 |     for k in rm.keys() {\n+409 |     for k in rm.keys() {\n     |         ^\n \n-error: aborting due to 50 previous errors\n+error: the loop variable `i` is used to index `src`\n+   --> $DIR/for_loop.rs:467:5\n+    |\n+467 | /     for i in 0..src.len() {\n+468 | |         dst[i + 10] = src[i];\n+469 | |     }\n+    | |_____^\n+    |\n+help: consider using an iterator\n+    |\n+467 |     for (i, <item>) in src.iter().enumerate() {\n+    |         ^^^^^^^^^^^\n+\n+error: the loop variable `i` is used to index `dst`\n+   --> $DIR/for_loop.rs:472:5\n+    |\n+472 | /     for i in 0..src.len() {\n+473 | |         dst[i] = src[i + 10];\n+474 | |     }\n+    | |_____^\n+    |\n+help: consider using an iterator\n+    |\n+472 |     for (i, <item>) in dst.iter().enumerate().take(src.len()) {\n+    |         ^^^^^^^^^^^\n+\n+error: the loop variable `i` is used to index `dst`\n+   --> $DIR/for_loop.rs:477:5\n+    |\n+477 | /     for i in 11..src.len() {\n+478 | |         dst[i] = src[i - 10];\n+479 | |     }\n+    | |_____^\n+    |\n+help: consider using an iterator\n+    |\n+477 |     for (i, <item>) in dst.iter().enumerate().take(src.len()).skip(11) {\n+    |         ^^^^^^^^^^^\n+\n+error: the loop variable `i` is used to index `src`\n+   --> $DIR/for_loop.rs:512:5\n+    |\n+512 | /     for i in 0..10 {\n+513 | |         dst[i + i] = src[i];\n+514 | |     }\n+    | |_____^\n+    |\n+help: consider using an iterator\n+    |\n+512 |     for (i, <item>) in src.iter().enumerate().take(10) {\n+    |         ^^^^^^^^^^^\n+\n+error: aborting due to 54 previous errors\n "}]}