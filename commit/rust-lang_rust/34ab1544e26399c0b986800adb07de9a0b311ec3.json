{"sha": "34ab1544e26399c0b986800adb07de9a0b311ec3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YWIxNTQ0ZTI2Mzk5YzBiOTg2ODAwYWRiMDdkZTlhMGIzMTFlYzM=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-23T19:11:59Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-23T19:11:59Z"}, "message": "rollup merge of #19230: nick29581/dxr-values\n\nr?", "tree": {"sha": "6e4a0a0633b1931d444483840040ee13212298af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e4a0a0633b1931d444483840040ee13212298af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34ab1544e26399c0b986800adb07de9a0b311ec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34ab1544e26399c0b986800adb07de9a0b311ec3", "html_url": "https://github.com/rust-lang/rust/commit/34ab1544e26399c0b986800adb07de9a0b311ec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34ab1544e26399c0b986800adb07de9a0b311ec3/comments", "author": null, "committer": null, "parents": [{"sha": "11700cb1d4442e8bdfded6edb51e060cf4d5563d", "url": "https://api.github.com/repos/rust-lang/rust/commits/11700cb1d4442e8bdfded6edb51e060cf4d5563d", "html_url": "https://github.com/rust-lang/rust/commit/11700cb1d4442e8bdfded6edb51e060cf4d5563d"}, {"sha": "34c76646b53741687d75daecc445623a1d65bddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/34c76646b53741687d75daecc445623a1d65bddc", "html_url": "https://github.com/rust-lang/rust/commit/34c76646b53741687d75daecc445623a1d65bddc"}], "stats": {"total": 69, "additions": 43, "deletions": 26}, "files": [{"sha": "ba6292f8975da45f487bfffee3870c37d8f528fd", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/34ab1544e26399c0b986800adb07de9a0b311ec3/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ab1544e26399c0b986800adb07de9a0b311ec3/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=34ab1544e26399c0b986800adb07de9a0b311ec3", "patch": "@@ -560,13 +560,15 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             Some(node_id) => node_id,\n             None => -1,\n         };\n+        let val = self.span.snippet(item.span);\n         let sub_span = self.span.sub_span_after_keyword(item.span, keywords::Struct);\n         self.fmt.struct_str(item.span,\n                             sub_span,\n                             item.id,\n                             ctor_id,\n                             qualname.as_slice(),\n-                            self.cur_scope);\n+                            self.cur_scope,\n+                            val.as_slice());\n \n         // fields\n         for field in def.fields.iter() {\n@@ -581,21 +583,23 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                     item: &ast::Item,\n                     enum_definition: &ast::EnumDef,\n                     ty_params: &ast::Generics) {\n-        let qualname = self.analysis.ty_cx.map.path_to_string(item.id);\n+        let enum_name = self.analysis.ty_cx.map.path_to_string(item.id);\n+        let val = self.span.snippet(item.span);\n         match self.span.sub_span_after_keyword(item.span, keywords::Enum) {\n             Some(sub_span) => self.fmt.enum_str(item.span,\n                                                 Some(sub_span),\n                                                 item.id,\n-                                                qualname.as_slice(),\n-                                                self.cur_scope),\n+                                                enum_name.as_slice(),\n+                                                self.cur_scope,\n+                                                val.as_slice()),\n             None => self.sess.span_bug(item.span,\n                                        format!(\"Could not find subspan for enum {}\",\n-                                               qualname).as_slice()),\n+                                               enum_name).as_slice()),\n         }\n         for variant in enum_definition.variants.iter() {\n             let name = get_ident(variant.node.name);\n             let name = name.get();\n-            let mut qualname = qualname.clone();\n+            let mut qualname = enum_name.clone();\n             qualname.push_str(\"::\");\n             qualname.push_str(name);\n             let val = self.span.snippet(variant.span);\n@@ -607,6 +611,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                                                variant.node.id,\n                                                name,\n                                                qualname.as_slice(),\n+                                               enum_name.as_slice(),\n                                                val.as_slice(),\n                                                item.id);\n                     for arg in args.iter() {\n@@ -624,18 +629,19 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                         variant.node.id,\n                         ctor_id,\n                         qualname.as_slice(),\n+                        enum_name.as_slice(),\n                         val.as_slice(),\n                         item.id);\n \n                     for field in struct_def.fields.iter() {\n-                        self.process_struct_field_def(field, qualname.as_slice(), variant.node.id);\n+                        self.process_struct_field_def(field, enum_name.as_slice(), variant.node.id);\n                         self.visit_ty(&*field.node.ty);\n                     }\n                 }\n             }\n         }\n \n-        self.process_generic_params(ty_params, item.span, qualname.as_slice(), item.id);\n+        self.process_generic_params(ty_params, item.span, enum_name.as_slice(), item.id);\n     }\n \n     fn process_impl(&mut self,\n@@ -690,13 +696,14 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                      trait_refs: &OwnedSlice<ast::TyParamBound>,\n                      methods: &Vec<ast::TraitItem>) {\n         let qualname = self.analysis.ty_cx.map.path_to_string(item.id);\n-\n+        let val = self.span.snippet(item.span);\n         let sub_span = self.span.sub_span_after_keyword(item.span, keywords::Trait);\n         self.fmt.trait_str(item.span,\n                            sub_span,\n                            item.id,\n                            qualname.as_slice(),\n-                           self.cur_scope);\n+                           self.cur_scope,\n+                           val.as_slice());\n \n         // super-traits\n         for super_bound in trait_refs.iter() {"}, {"sha": "8eda199af3bb59f355ebed0a7a761c81a70b0284", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/34ab1544e26399c0b986800adb07de9a0b311ec3/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ab1544e26399c0b986800adb07de9a0b311ec3/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=34ab1544e26399c0b986800adb07de9a0b311ec3", "patch": "@@ -106,15 +106,19 @@ impl<'a> FmtStrs<'a> {\n             Variable => (\"variable\",\n                          vec!(\"id\",\"name\",\"qualname\",\"value\",\"type\",\"scopeid\"),\n                          true, true),\n-            Enum => (\"enum\", vec!(\"id\",\"qualname\",\"scopeid\"), true, true),\n-            Variant => (\"variant\", vec!(\"id\",\"name\",\"qualname\",\"value\",\"scopeid\"), true, true),\n+            Enum => (\"enum\", vec!(\"id\",\"qualname\",\"scopeid\",\"value\"), true, true),\n+            Variant => (\"variant\",\n+                        vec!(\"id\",\"name\",\"qualname\",\"type\",\"value\",\"scopeid\"),\n+                        true, true),\n             VariantStruct => (\"variant_struct\",\n-                              vec!(\"id\",\"ctor_id\",\"qualname\",\"value\",\"scopeid\"), true, true),\n-            Function => (\"function\", vec!(\"id\",\"qualname\",\"declid\",\"declidcrate\",\"scopeid\"),\n+                              vec!(\"id\",\"ctor_id\",\"qualname\",\"type\",\"value\",\"scopeid\"),\n+                              true, true),\n+            Function => (\"function\",\n+                         vec!(\"id\",\"qualname\",\"declid\",\"declidcrate\",\"scopeid\"),\n                          true, true),\n             MethodDecl => (\"method_decl\", vec!(\"id\",\"qualname\",\"scopeid\"), true, true),\n-            Struct => (\"struct\", vec!(\"id\",\"ctor_id\",\"qualname\",\"scopeid\"), true, true),\n-            Trait => (\"trait\", vec!(\"id\",\"qualname\",\"scopeid\"), true, true),\n+            Struct => (\"struct\", vec!(\"id\",\"ctor_id\",\"qualname\",\"scopeid\",\"value\"), true, true),\n+            Trait => (\"trait\", vec!(\"id\",\"qualname\",\"scopeid\",\"value\"), true, true),\n             Impl => (\"impl\", vec!(\"id\",\"refid\",\"refidcrate\",\"scopeid\"), true, true),\n             Module => (\"module\", vec!(\"id\",\"qualname\",\"scopeid\",\"def_file\"), true, false),\n             UseAlias => (\"use_alias\",\n@@ -128,7 +132,7 @@ impl<'a> FmtStrs<'a> {\n                             true, false),\n             MethodCall => (\"method_call\",\n                            vec!(\"refid\",\"refidcrate\",\"declid\",\"declidcrate\",\"scopeid\"),\n-                            true, true),\n+                           true, true),\n             Typedef => (\"typedef\", vec!(\"id\",\"qualname\",\"value\"), true, true),\n             ExternalCrate => (\"external_crate\", vec!(\"name\",\"crate\",\"file_name\"), false, false),\n             Crate => (\"crate\", vec!(\"name\"), true, false),\n@@ -140,7 +144,7 @@ impl<'a> FmtStrs<'a> {\n                         true, true),\n             StructRef => (\"struct_ref\",\n                           vec!(\"refid\",\"refidcrate\",\"qualname\",\"scopeid\"),\n-                           true, true),\n+                          true, true),\n             FnRef => (\"fn_ref\", vec!(\"refid\",\"refidcrate\",\"qualname\",\"scopeid\"), true, true)\n         }\n     }\n@@ -157,6 +161,7 @@ impl<'a> FmtStrs<'a> {\n         }\n \n         let values = values.iter().map(|s| {\n+            // Never take more than 1020 chars\n             if s.len() > 1020 {\n                 s.as_slice().slice_to(1020)\n             } else {\n@@ -323,11 +328,12 @@ impl<'a> FmtStrs<'a> {\n                     sub_span: Option<Span>,\n                     id: NodeId,\n                     name: &str,\n-                    scope_id: NodeId) {\n+                    scope_id: NodeId,\n+                    value: &str) {\n         self.check_and_record(Enum,\n                               span,\n                               sub_span,\n-                              svec!(id, name, scope_id));\n+                              svec!(id, name, scope_id, value));\n     }\n \n     pub fn tuple_variant_str(&mut self,\n@@ -336,12 +342,13 @@ impl<'a> FmtStrs<'a> {\n                              id: NodeId,\n                              name: &str,\n                              qualname: &str,\n+                             typ: &str,\n                              val: &str,\n                              scope_id: NodeId) {\n         self.check_and_record(Variant,\n                               span,\n                               sub_span,\n-                              svec!(id, name, qualname, val, scope_id));\n+                              svec!(id, name, qualname, typ, val, scope_id));\n     }\n \n     pub fn struct_variant_str(&mut self,\n@@ -350,12 +357,13 @@ impl<'a> FmtStrs<'a> {\n                               id: NodeId,\n                               ctor_id: NodeId,\n                               name: &str,\n+                              typ: &str,\n                               val: &str,\n                               scope_id: NodeId) {\n         self.check_and_record(VariantStruct,\n                               span,\n                               sub_span,\n-                              svec!(id, ctor_id, name, val, scope_id));\n+                              svec!(id, ctor_id, name, typ, val, scope_id));\n     }\n \n     pub fn fn_str(&mut self,\n@@ -405,23 +413,25 @@ impl<'a> FmtStrs<'a> {\n                       id: NodeId,\n                       ctor_id: NodeId,\n                       name: &str,\n-                      scope_id: NodeId) {\n+                      scope_id: NodeId,\n+                      value: &str) {\n         self.check_and_record(Struct,\n                               span,\n                               sub_span,\n-                              svec!(id, ctor_id, name, scope_id));\n+                              svec!(id, ctor_id, name, scope_id, value));\n     }\n \n     pub fn trait_str(&mut self,\n                      span: Span,\n                      sub_span: Option<Span>,\n                      id: NodeId,\n                      name: &str,\n-                     scope_id: NodeId) {\n+                     scope_id: NodeId,\n+                     value: &str) {\n         self.check_and_record(Trait,\n                               span,\n                               sub_span,\n-                              svec!(id, name, scope_id));\n+                              svec!(id, name, scope_id, value));\n     }\n \n     pub fn impl_str(&mut self,"}]}