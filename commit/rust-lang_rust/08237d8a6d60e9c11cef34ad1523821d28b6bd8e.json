{"sha": "08237d8a6d60e9c11cef34ad1523821d28b6bd8e", "node_id": "C_kwDOAAsO6NoAKDA4MjM3ZDhhNmQ2MGU5YzExY2VmMzRhZDE1MjM4MjFkMjhiNmJkOGU", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-05-19T23:26:28Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-05-21T14:55:13Z"}, "message": "Shrink GenericArgs/PathSegment with boxed slices", "tree": {"sha": "72e4954fec689f5f15b194be00a63f585686a3dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72e4954fec689f5f15b194be00a63f585686a3dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08237d8a6d60e9c11cef34ad1523821d28b6bd8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08237d8a6d60e9c11cef34ad1523821d28b6bd8e", "html_url": "https://github.com/rust-lang/rust/commit/08237d8a6d60e9c11cef34ad1523821d28b6bd8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08237d8a6d60e9c11cef34ad1523821d28b6bd8e/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855e320fe2211c7ce3b2122819dd42ad78f5448e", "url": "https://api.github.com/repos/rust-lang/rust/commits/855e320fe2211c7ce3b2122819dd42ad78f5448e", "html_url": "https://github.com/rust-lang/rust/commit/855e320fe2211c7ce3b2122819dd42ad78f5448e"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "8b2f4455b8e3460f3a739b6eb2a173cb86d57ecd", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08237d8a6d60e9c11cef34ad1523821d28b6bd8e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08237d8a6d60e9c11cef34ad1523821d28b6bd8e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=08237d8a6d60e9c11cef34ad1523821d28b6bd8e", "patch": "@@ -544,7 +544,7 @@ fn build_module(\n                                 segments: vec![clean::PathSegment {\n                                     name: prim_ty.as_sym(),\n                                     args: clean::GenericArgs::AngleBracketed {\n-                                        args: Vec::new(),\n+                                        args: Default::default(),\n                                         bindings: ThinVec::new(),\n                                     },\n                                 }],"}, {"sha": "bd30489f27ca3f19abe046fb4eca4d5c41bccc5c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/08237d8a6d60e9c11cef34ad1523821d28b6bd8e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08237d8a6d60e9c11cef34ad1523821d28b6bd8e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=08237d8a6d60e9c11cef34ad1523821d28b6bd8e", "patch": "@@ -420,7 +420,7 @@ fn projection_to_path_segment(ty: ty::ProjectionTy<'_>, cx: &mut DocContext<'_>)\n     PathSegment {\n         name: item.name,\n         args: GenericArgs::AngleBracketed {\n-            args: substs_to_args(cx, &ty.substs[generics.parent_count..], false),\n+            args: substs_to_args(cx, &ty.substs[generics.parent_count..], false).into(),\n             bindings: Default::default(),\n         },\n     }\n@@ -1205,7 +1205,7 @@ impl Clean<Item> for ty::AssocItem {\n                                             || generics\n                                                 .params\n                                                 .iter()\n-                                                .zip(args)\n+                                                .zip(&args[..])\n                                                 .any(|(param, arg)| !param_eq_arg(param, arg))\n                                         {\n                                             return false;\n@@ -1837,7 +1837,7 @@ impl Clean<GenericArgs> for hir::GenericArgs<'_> {\n             let output = self.bindings[0].ty().clean(cx);\n             let output =\n                 if output != Type::Tuple(Vec::new()) { Some(Box::new(output)) } else { None };\n-            let inputs = self.inputs().iter().map(|x| x.clean(cx)).collect();\n+            let inputs = self.inputs().iter().map(|x| x.clean(cx)).collect::<Vec<_>>().into();\n             GenericArgs::Parenthesized { inputs, output }\n         } else {\n             let args = self\n@@ -1852,8 +1852,9 @@ impl Clean<GenericArgs> for hir::GenericArgs<'_> {\n                     hir::GenericArg::Const(ct) => GenericArg::Const(Box::new(ct.clean(cx))),\n                     hir::GenericArg::Infer(_inf) => GenericArg::Infer,\n                 })\n-                .collect();\n-            let bindings = self.bindings.iter().map(|x| x.clean(cx)).collect();\n+                .collect::<Vec<_>>()\n+                .into();\n+            let bindings = self.bindings.iter().map(|x| x.clean(cx)).collect::<Vec<_>>().into();\n             GenericArgs::AngleBracketed { args, bindings }\n         }\n     }"}, {"sha": "7fc6381a79a7e0b6cf32bb83eb0c3fff66d3b8af", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08237d8a6d60e9c11cef34ad1523821d28b6bd8e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08237d8a6d60e9c11cef34ad1523821d28b6bd8e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=08237d8a6d60e9c11cef34ad1523821d28b6bd8e", "patch": "@@ -2182,14 +2182,14 @@ rustc_data_structures::static_assert_size!(GenericArg, 80);\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub(crate) enum GenericArgs {\n-    AngleBracketed { args: Vec<GenericArg>, bindings: ThinVec<TypeBinding> },\n-    Parenthesized { inputs: Vec<Type>, output: Option<Box<Type>> },\n+    AngleBracketed { args: Box<[GenericArg]>, bindings: ThinVec<TypeBinding> },\n+    Parenthesized { inputs: Box<[Type]>, output: Option<Box<Type>> },\n }\n \n // `GenericArgs` is in every `PathSegment`, so its size can significantly\n // affect rustdoc's memory usage.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(GenericArgs, 40);\n+rustc_data_structures::static_assert_size!(GenericArgs, 32);\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub(crate) struct PathSegment {\n@@ -2200,7 +2200,7 @@ pub(crate) struct PathSegment {\n // `PathSegment` usually occurs multiple times in every `Path`, so its size can\n // significantly affect rustdoc's memory usage.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(PathSegment, 48);\n+rustc_data_structures::static_assert_size!(PathSegment, 40);\n \n #[derive(Clone, Debug)]\n pub(crate) struct Typedef {"}, {"sha": "4f8db980ad4045efb962fcdb26d72b1d10d6bd02", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08237d8a6d60e9c11cef34ad1523821d28b6bd8e/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08237d8a6d60e9c11cef34ad1523821d28b6bd8e/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=08237d8a6d60e9c11cef34ad1523821d28b6bd8e", "patch": "@@ -112,8 +112,8 @@ fn external_generic_args(\n         let inputs =\n             // The trait's first substitution is the one after self, if there is one.\n             match substs.iter().nth(if has_self { 1 } else { 0 }).unwrap().expect_ty().kind() {\n-                ty::Tuple(tys) => tys.iter().map(|t| t.clean(cx)).collect(),\n-                _ => return GenericArgs::AngleBracketed { args, bindings: bindings.into() },\n+                ty::Tuple(tys) => tys.iter().map(|t| t.clean(cx)).collect::<Vec<_>>().into(),\n+                _ => return GenericArgs::AngleBracketed { args: args.into(), bindings: bindings.into() },\n             };\n         let output = None;\n         // FIXME(#20299) return type comes from a projection now\n@@ -123,7 +123,7 @@ fn external_generic_args(\n         // };\n         GenericArgs::Parenthesized { inputs, output }\n     } else {\n-        GenericArgs::AngleBracketed { args, bindings: bindings.into() }\n+        GenericArgs::AngleBracketed { args: args.into(), bindings: bindings.into() }\n     }\n }\n \n@@ -148,7 +148,7 @@ pub(super) fn external_path(\n /// Remove the generic arguments from a path.\n pub(crate) fn strip_path_generics(mut path: Path) -> Path {\n     for ps in path.segments.iter_mut() {\n-        ps.args = GenericArgs::AngleBracketed { args: vec![], bindings: ThinVec::new() }\n+        ps.args = GenericArgs::AngleBracketed { args: Default::default(), bindings: ThinVec::new() }\n     }\n \n     path"}, {"sha": "4130815069f9ab96a8d10cf9b93f57b5cbd5f880", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08237d8a6d60e9c11cef34ad1523821d28b6bd8e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08237d8a6d60e9c11cef34ad1523821d28b6bd8e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=08237d8a6d60e9c11cef34ad1523821d28b6bd8e", "patch": "@@ -457,7 +457,7 @@ impl clean::GenericArgs {\n                             f.write_str(\"&lt;\")?;\n                         }\n                         let mut comma = false;\n-                        for arg in args {\n+                        for arg in &args[..] {\n                             if comma {\n                                 f.write_str(\", \")?;\n                             }\n@@ -468,7 +468,7 @@ impl clean::GenericArgs {\n                                 write!(f, \"{}\", arg.print(cx))?;\n                             }\n                         }\n-                        for binding in bindings {\n+                        for binding in &bindings[..] {\n                             if comma {\n                                 f.write_str(\", \")?;\n                             }\n@@ -489,7 +489,7 @@ impl clean::GenericArgs {\n                 clean::GenericArgs::Parenthesized { inputs, output } => {\n                     f.write_str(\"(\")?;\n                     let mut comma = false;\n-                    for ty in inputs {\n+                    for ty in &inputs[..] {\n                         if comma {\n                             f.write_str(\", \")?;\n                         }"}, {"sha": "bc9920730dd3c55c4f75d3afeed3bd211cf7d084", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08237d8a6d60e9c11cef34ad1523821d28b6bd8e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08237d8a6d60e9c11cef34ad1523821d28b6bd8e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=08237d8a6d60e9c11cef34ad1523821d28b6bd8e", "patch": "@@ -119,11 +119,11 @@ impl FromWithTcx<clean::GenericArgs> for GenericArgs {\n         use clean::GenericArgs::*;\n         match args {\n             AngleBracketed { args, bindings } => GenericArgs::AngleBracketed {\n-                args: args.into_iter().map(|a| a.into_tcx(tcx)).collect(),\n+                args: args.into_vec().into_iter().map(|a| a.into_tcx(tcx)).collect(),\n                 bindings: bindings.into_iter().map(|a| a.into_tcx(tcx)).collect(),\n             },\n             Parenthesized { inputs, output } => GenericArgs::Parenthesized {\n-                inputs: inputs.into_iter().map(|a| a.into_tcx(tcx)).collect(),\n+                inputs: inputs.into_vec().into_iter().map(|a| a.into_tcx(tcx)).collect(),\n                 output: output.map(|a| (*a).into_tcx(tcx)),\n             },\n         }"}]}