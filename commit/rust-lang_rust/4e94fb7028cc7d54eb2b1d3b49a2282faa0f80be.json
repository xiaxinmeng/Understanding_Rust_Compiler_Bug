{"sha": "4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be", "node_id": "C_kwDOAAsO6NoAKDRlOTRmYjcwMjhjYzdkNTRlYjJiMWQzYjQ5YTIyODJmYWEwZjgwYmU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-09T00:13:38Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-09T00:13:38Z"}, "message": "Fix ProcMacroData recording wrong name for derives", "tree": {"sha": "e25ced5739d1bb05ecde17f26984af929b7c4f56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e25ced5739d1bb05ecde17f26984af929b7c4f56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be", "html_url": "https://github.com/rust-lang/rust/commit/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c37fe779c657091ac4cb0fcfff43659972987303", "url": "https://api.github.com/repos/rust-lang/rust/commits/c37fe779c657091ac4cb0fcfff43659972987303", "html_url": "https://github.com/rust-lang/rust/commit/c37fe779c657091ac4cb0fcfff43659972987303"}], "stats": {"total": 73, "additions": 43, "deletions": 30}, "files": [{"sha": "1c52ed579559dfc6f837d1cad4db0867c8fdce92", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be", "patch": "@@ -1383,27 +1383,19 @@ impl Function {\n         db.function_data(self.id).has_body()\n     }\n \n-    pub fn as_proc_macro(self, _db: &dyn HirDatabase) -> Option<Macro> {\n-        // let function_data = db.function_data(self.id);\n-        // let attrs = &function_data.attrs;\n-        // if !(attrs.is_proc_macro()\n-        //     || attrs.is_proc_macro_attribute()\n-        //     || attrs.is_proc_macro_derive())\n-        // {\n-        //     return None;\n-        // }\n-        // let loc = self.id.lookup(db.upcast());\n-        // let krate = loc.krate(db);\n-        // let def_map = db.crate_def_map(krate.into());\n-        // let ast_id =\n-        //     InFile::new(loc.id.file_id(), loc.id.item_tree(db.upcast())[loc.id.value].ast_id);\n-\n-        // let mut exported_proc_macros = def_map.exported_proc_macros();\n-        // exported_proc_macros\n-        //     .find(|&(id, _)| matches!(id.kind, MacroDefKind::ProcMacro(_, _, id) if id == ast_id))\n-        //     .map(|(id, _)| Macro { id })\n-        // FIXME\n-        None\n+    pub fn as_proc_macro(self, db: &dyn HirDatabase) -> Option<Macro> {\n+        let function_data = db.function_data(self.id);\n+        let attrs = &function_data.attrs;\n+        // FIXME: Store this in FunctionData flags?\n+        if !(attrs.is_proc_macro()\n+            || attrs.is_proc_macro_attribute()\n+            || attrs.is_proc_macro_derive())\n+        {\n+            return None;\n+        }\n+        let loc = self.id.lookup(db.upcast());\n+        let def_map = db.crate_def_map(loc.krate(db).into());\n+        def_map.fn_as_proc_macro(loc.id).map(|id| Macro { id: id.into() })\n     }\n \n     /// A textual representation of the HIR of this function for debugging purposes."}, {"sha": "bb3a34a7c1e51b2824934db1eec2eb19c4d25616", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be", "patch": "@@ -332,6 +332,7 @@ impl MacroRulesData {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ProcMacroData {\n     pub name: Name,\n+    // FIXME: Record deriver helper here?\n }\n \n impl ProcMacroData {\n@@ -343,7 +344,17 @@ impl ProcMacroData {\n         let item_tree = loc.id.item_tree(db);\n         let makro = &item_tree[loc.id.value];\n \n-        Arc::new(ProcMacroData { name: makro.name.clone() })\n+        let name = if let Some(def) = item_tree\n+            .attrs(db, loc.container.krate(), ModItem::from(loc.id.value).into())\n+            .parse_proc_macro_decl(&makro.name)\n+        {\n+            def.name\n+        } else {\n+            // eeeh...\n+            stdx::never!(\"proc macro declaration is not a proc macro\");\n+            makro.name.clone()\n+        };\n+        Arc::new(ProcMacroData { name })\n     }\n }\n "}, {"sha": "279784952d3d3dc06114ce1169dea245e9153094", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be", "patch": "@@ -70,12 +70,12 @@ use syntax::{ast, SmolStr};\n use crate::{\n     db::DefDatabase,\n     item_scope::{BuiltinShadowMode, ItemScope},\n-    item_tree::TreeId,\n+    item_tree::{self, ItemTreeId, TreeId},\n     nameres::{diagnostics::DefDiagnostic, path_resolution::ResolveMode},\n     path::ModPath,\n     per_ns::PerNs,\n     visibility::Visibility,\n-    AstId, BlockId, BlockLoc, LocalModuleId, ModuleDefId, ModuleId,\n+    AstId, BlockId, BlockLoc, LocalModuleId, ModuleDefId, ModuleId, ProcMacroId,\n };\n \n /// Contains the results of (early) name resolution.\n@@ -102,6 +102,7 @@ pub struct DefMap {\n \n     /// Side table for resolving derive helpers.\n     exported_derives: FxHashMap<MacroDefId, Box<[Name]>>,\n+    fn_proc_macro_mapping: FxHashMap<ItemTreeId<item_tree::Function>, ProcMacroId>,\n \n     /// Custom attributes registered with `#![register_attr]`.\n     registered_attrs: Vec<SmolStr>,\n@@ -271,6 +272,7 @@ impl DefMap {\n             recursion_limit: None,\n             extern_prelude: FxHashMap::default(),\n             exported_derives: FxHashMap::default(),\n+            fn_proc_macro_mapping: FxHashMap::default(),\n             prelude: None,\n             root,\n             modules,\n@@ -300,6 +302,11 @@ impl DefMap {\n         self.root\n     }\n \n+    // FIXME: This is an odd interface....\n+    pub fn fn_as_proc_macro(&self, id: ItemTreeId<item_tree::Function>) -> Option<ProcMacroId> {\n+        self.fn_proc_macro_mapping.get(&id).copied()\n+    }\n+\n     pub(crate) fn krate(&self) -> CrateId {\n         self.krate\n     }\n@@ -453,6 +460,7 @@ impl DefMap {\n             modules,\n             registered_attrs,\n             registered_tools,\n+            fn_proc_macro_mapping,\n             block: _,\n             edition: _,\n             recursion_limit: _,\n@@ -467,6 +475,7 @@ impl DefMap {\n         modules.shrink_to_fit();\n         registered_attrs.shrink_to_fit();\n         registered_tools.shrink_to_fit();\n+        fn_proc_macro_mapping.shrink_to_fit();\n         for (_, module) in modules.iter_mut() {\n             module.children.shrink_to_fit();\n             module.scope.shrink_to_fit();"}, {"sha": "a8928d07e79622d91e249f64fb89bc8a974b32ed", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be", "patch": "@@ -570,6 +570,7 @@ impl DefCollector<'_> {\n                 .exported_derives\n                 .insert(macro_id_to_def_id(self.db, proc_macro_id.into()), helpers);\n         }\n+        self.def_map.fn_proc_macro_mapping.insert(id, proc_macro_id);\n     }\n \n     /// Define a macro with `macro_rules`."}, {"sha": "5089ef2d8171769685a419f8b4e3b0eb15dd1d5a", "filename": "crates/hir_def/src/nameres/proc_macro.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be/crates%2Fhir_def%2Fsrc%2Fnameres%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be/crates%2Fhir_def%2Fsrc%2Fnameres%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fproc_macro.rs?ref=4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be", "patch": "@@ -6,13 +6,13 @@ use tt::{Leaf, TokenTree};\n use crate::attr::Attrs;\n \n #[derive(Debug, PartialEq, Eq)]\n-pub(super) struct ProcMacroDef {\n-    pub(super) name: Name,\n-    pub(super) kind: ProcMacroKind,\n+pub struct ProcMacroDef {\n+    pub name: Name,\n+    pub kind: ProcMacroKind,\n }\n \n #[derive(Debug, PartialEq, Eq)]\n-pub(super) enum ProcMacroKind {\n+pub enum ProcMacroKind {\n     CustomDerive { helpers: Box<[Name]> },\n     FnLike,\n     Attr,\n@@ -30,7 +30,7 @@ impl ProcMacroKind {\n \n impl Attrs {\n     #[rustfmt::skip]\n-    pub(super) fn parse_proc_macro_decl(&self, func_name: &Name) -> Option<ProcMacroDef> {\n+    pub fn parse_proc_macro_decl(&self, func_name: &Name) -> Option<ProcMacroDef> {\n         if self.is_proc_macro() {\n             Some(ProcMacroDef { name: func_name.clone(), kind: ProcMacroKind::FnLike })\n         } else if self.is_proc_macro_attribute() {"}, {"sha": "2ec7802394f37e34a288d82c492832d0b31117e2", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=4e94fb7028cc7d54eb2b1d3b49a2282faa0f80be", "patch": "@@ -4151,7 +4151,7 @@ struct Foo;\n                 *Copy*\n \n                 ```rust\n-                test\n+                test::foo\n                 ```\n \n                 ```rust"}]}