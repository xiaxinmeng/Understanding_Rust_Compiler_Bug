{"sha": "e78c51adc2a51fbec1d254d2ba8d8718688c7429", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3OGM1MWFkYzJhNTFmYmVjMWQyNTRkMmJhOGQ4NzE4Njg4Yzc0Mjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-04T05:38:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-04T05:38:18Z"}, "message": "Auto merge of #50398 - llogiq:memchr-nano-opt, r=nagisa\n\nnano-optimization for memchr::repeat_byte\n\nThis replaces the multiple shifts & bitwise or with a single multiplication\n\nIn my benchmarks this performs equally well or better, especially on 64bit systems (it shaves a stable nanosecond on my skylake). This may go against conventional wisdom, but the shifts and bitwise ors cannot be pipelined because of hard data dependencies.\n\nWhile it may or may not be worthwile from an optimization standpoint, it also reduces code size, so there's basically no downside.", "tree": {"sha": "9a564a890765082384bf4332fd9c12f8a45bf7e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a564a890765082384bf4332fd9c12f8a45bf7e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e78c51adc2a51fbec1d254d2ba8d8718688c7429", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e78c51adc2a51fbec1d254d2ba8d8718688c7429", "html_url": "https://github.com/rust-lang/rust/commit/e78c51adc2a51fbec1d254d2ba8d8718688c7429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e78c51adc2a51fbec1d254d2ba8d8718688c7429/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "841e0ccb4cabaaf20041e3ba5c3e927cb95d86ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/841e0ccb4cabaaf20041e3ba5c3e927cb95d86ce", "html_url": "https://github.com/rust-lang/rust/commit/841e0ccb4cabaaf20041e3ba5c3e927cb95d86ce"}, {"sha": "1cefb5ce310fe7f799d0926d2644a25a567d2ddb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cefb5ce310fe7f799d0926d2644a25a567d2ddb", "html_url": "https://github.com/rust-lang/rust/commit/1cefb5ce310fe7f799d0926d2644a25a567d2ddb"}], "stats": {"total": 15, "additions": 2, "deletions": 13}, "files": [{"sha": "469404f7f6bb080d7c55209bc89cd6c884ff4597", "filename": "src/libcore/slice/memchr.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e78c51adc2a51fbec1d254d2ba8d8718688c7429/src%2Flibcore%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78c51adc2a51fbec1d254d2ba8d8718688c7429/src%2Flibcore%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmemchr.rs?ref=e78c51adc2a51fbec1d254d2ba8d8718688c7429", "patch": "@@ -39,21 +39,10 @@ fn repeat_byte(b: u8) -> usize {\n     (b as usize) << 8 | b as usize\n }\n \n-#[cfg(target_pointer_width = \"32\")]\n+#[cfg(not(target_pointer_width = \"16\"))]\n #[inline]\n fn repeat_byte(b: u8) -> usize {\n-    let mut rep = (b as usize) << 8 | b as usize;\n-    rep = rep << 16 | rep;\n-    rep\n-}\n-\n-#[cfg(target_pointer_width = \"64\")]\n-#[inline]\n-fn repeat_byte(b: u8) -> usize {\n-    let mut rep = (b as usize) << 8 | b as usize;\n-    rep = rep << 16 | rep;\n-    rep = rep << 32 | rep;\n-    rep\n+    (b as usize) * (::usize::MAX / 255)\n }\n \n /// Return the first index matching the byte `x` in `text`."}]}