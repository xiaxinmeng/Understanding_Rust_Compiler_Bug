{"sha": "23f9b92c5e3fd6dcff19fb185b64990f0336a8bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZjliOTJjNWUzZmQ2ZGNmZjE5ZmIxODViNjQ5OTBmMDMzNmE4YmY=", "commit": {"author": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-05-29T07:36:30Z"}, "committer": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-05-29T07:36:30Z"}, "message": "Add `String::extend_from_within`\n\nThis patch adds `String::extend_from_within` function under the\n`string_extend_from_within` feature gate similar to the\n`Vec::extend_from_within` function.", "tree": {"sha": "c5e38deb6914dafc45d1808a4c15fe9b49a7b960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5e38deb6914dafc45d1808a4c15fe9b49a7b960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23f9b92c5e3fd6dcff19fb185b64990f0336a8bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23f9b92c5e3fd6dcff19fb185b64990f0336a8bf", "html_url": "https://github.com/rust-lang/rust/commit/23f9b92c5e3fd6dcff19fb185b64990f0336a8bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23f9b92c5e3fd6dcff19fb185b64990f0336a8bf/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4664725ae03ef9becae413a1e56b5010f88fdc46", "url": "https://api.github.com/repos/rust-lang/rust/commits/4664725ae03ef9becae413a1e56b5010f88fdc46", "html_url": "https://github.com/rust-lang/rust/commit/4664725ae03ef9becae413a1e56b5010f88fdc46"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "7bc9aa69be98eac13c970ee5ab9494dad8a7e91f", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23f9b92c5e3fd6dcff19fb185b64990f0336a8bf/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f9b92c5e3fd6dcff19fb185b64990f0336a8bf/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=23f9b92c5e3fd6dcff19fb185b64990f0336a8bf", "patch": "@@ -144,6 +144,7 @@\n #![feature(associated_type_bounds)]\n #![feature(slice_group_by)]\n #![feature(decl_macro)]\n+#![feature(bindings_after_at)]\n // Allow testing this library\n \n #[cfg(test)]"}, {"sha": "dbe5bc1da460d7c42521ec175d5a8c13f539cde9", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/23f9b92c5e3fd6dcff19fb185b64990f0336a8bf/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f9b92c5e3fd6dcff19fb185b64990f0336a8bf/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=23f9b92c5e3fd6dcff19fb185b64990f0336a8bf", "patch": "@@ -843,6 +843,42 @@ impl String {\n         self.vec.extend_from_slice(string.as_bytes())\n     }\n \n+    /// Copies elements from `src` range to the end of the string.\n+    ///\n+    /// ## Panics\n+    ///\n+    /// Panics if the starting point or end point do not lie on a [`char`]\n+    /// boundary, or if they're out of bounds.\n+    ///\n+    /// ## Examples\n+    ///\n+    /// ```\n+    /// #![feature(string_extend_from_within)]\n+    /// let mut string = String::from(\"abcde\");\n+    ///\n+    /// string.extend_from_within(2..);\n+    /// assert_eq!(string, \"abcdecde\");\n+    ///\n+    /// string.extend_from_within(..2);\n+    /// assert_eq!(string, \"abcdecdeab\");\n+    ///\n+    /// string.extend_from_within(4..8);\n+    /// assert_eq!(string, \"abcdecdeabecde\");\n+    /// ```\n+    #[cfg(not(no_global_oom_handling))]\n+    #[unstable(feature = \"string_extend_from_within\", issue = \"none\")]\n+    pub fn extend_from_within<R>(&mut self, src: R)\n+    where\n+        R: RangeBounds<usize>,\n+    {\n+        let src @ Range { start, end } = slice::range(src, ..self.len());\n+\n+        assert!(self.is_char_boundary(start));\n+        assert!(self.is_char_boundary(end));\n+\n+        self.vec.extend_from_within(src);\n+    }\n+\n     /// Returns this `String`'s capacity, in bytes.\n     ///\n     /// # Examples"}]}