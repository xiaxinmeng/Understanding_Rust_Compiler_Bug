{"sha": "665bf9e35f470b856905beb8862bb30367b57435", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NWJmOWUzNWY0NzBiODU2OTA1YmViODg2MmJiMzAzNjdiNTc0MzU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-15T15:06:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-15T15:06:59Z"}, "message": "Rollup merge of #82067 - BoxyUwU:hahaicantthinkofabadpun, r=oli-obk\n\nconst_generics: Fix incorrect ty::ParamEnv::empty() usage\n\nFixes #80561\n\nNot sure if I should keep the `debug!(..)`s or not but its the second time I've needed them so they sure seem useful lol\n\ncc ``@lcnr``\nr? ``@oli-obk``", "tree": {"sha": "aa15386f57a286f42dc31afad46e4e152aeaa75e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa15386f57a286f42dc31afad46e4e152aeaa75e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/665bf9e35f470b856905beb8862bb30367b57435", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgKo4TCRBK7hj4Ov3rIwAAdHIIADIlRUu++calaX8xAly9E+n0\nhYCFuCaM7ORB+TVEroQhtHSTfs9D6+KVw6/NbwoYiSvjEeA/iMqQu94s0usLKdJy\nXuPYCRTGhdRLzuM0UaT7TDyKjWiaJFQ9s/BGoHw3ugPP9pNVRpE7xLsxIQo3Mtzz\nSTLID41cJts9qZ05CaLxCSgMLrzGNp+NaB4k7YqwWgiLhRegYEWzOl3USD8QYQjW\nODhd3Dqv/XplqtAdOr8D3W2AxCe2fe+sF5NIRnJVgQ+J0fTQPARQ0Qj4NQYBEeVD\nyFaczFoDuJZtK890K4v521LWpJlfgAex+5O7yrk7g45CQ85CyEpoiB+85WU6cNg=\n=Dh/7\n-----END PGP SIGNATURE-----\n", "payload": "tree aa15386f57a286f42dc31afad46e4e152aeaa75e\nparent 7842b5d2ec42ce13291ae953bdf23a08916580e3\nparent 7bd71262f889713c92f7d393346c8861851ba3d4\nauthor Jonas Schievink <jonasschievink@gmail.com> 1613401619 +0100\ncommitter GitHub <noreply@github.com> 1613401619 +0100\n\nRollup merge of #82067 - BoxyUwU:hahaicantthinkofabadpun, r=oli-obk\n\nconst_generics: Fix incorrect ty::ParamEnv::empty() usage\n\nFixes #80561\n\nNot sure if I should keep the `debug!(..)`s or not but its the second time I've needed them so they sure seem useful lol\n\ncc ``@lcnr``\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/665bf9e35f470b856905beb8862bb30367b57435", "html_url": "https://github.com/rust-lang/rust/commit/665bf9e35f470b856905beb8862bb30367b57435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/665bf9e35f470b856905beb8862bb30367b57435/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7842b5d2ec42ce13291ae953bdf23a08916580e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7842b5d2ec42ce13291ae953bdf23a08916580e3", "html_url": "https://github.com/rust-lang/rust/commit/7842b5d2ec42ce13291ae953bdf23a08916580e3"}, {"sha": "7bd71262f889713c92f7d393346c8861851ba3d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd71262f889713c92f7d393346c8861851ba3d4", "html_url": "https://github.com/rust-lang/rust/commit/7bd71262f889713c92f7d393346c8861851ba3d4"}], "stats": {"total": 57, "additions": 49, "deletions": 8}, "files": [{"sha": "074c9252481aa5bd709d8cd4306addc194b84b56", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=665bf9e35f470b856905beb8862bb30367b57435", "patch": "@@ -639,6 +639,10 @@ struct QueryTypeRelatingDelegate<'a, 'tcx> {\n }\n \n impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n+    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n+        self.param_env\n+    }\n+\n     fn create_next_universe(&mut self) -> ty::UniverseIndex {\n         self.infcx.create_next_universe()\n     }"}, {"sha": "5e11932eafc4e4bc8e8ceac0f1991830b44a6ee7", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=665bf9e35f470b856905beb8862bb30367b57435", "patch": "@@ -221,6 +221,7 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n     /// As `3 + 4` contains `N` in its substs, this must not succeed.\n     ///\n     /// See `src/test/ui/const-generics/occurs-check/` for more examples where this is relevant.\n+    #[instrument(level = \"debug\", skip(self))]\n     fn unify_const_variable(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "e720a6f13086de9a47b4bb70d19f816f28ec42e8", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=665bf9e35f470b856905beb8862bb30367b57435", "patch": "@@ -72,6 +72,8 @@ where\n }\n \n pub trait TypeRelatingDelegate<'tcx> {\n+    fn param_env(&self) -> ty::ParamEnv<'tcx>;\n+\n     /// Push a constraint `sup: sub` -- this constraint must be\n     /// satisfied for the two types to be related. `sub` and `sup` may\n     /// be regions from the type or new variables created through the\n@@ -473,9 +475,8 @@ where\n         self.infcx.tcx\n     }\n \n-    // FIXME(oli-obk): not sure how to get the correct ParamEnv\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n-        ty::ParamEnv::empty()\n+        self.delegate.param_env()\n     }\n \n     fn tag(&self) -> &'static str {\n@@ -819,9 +820,8 @@ where\n         self.infcx.tcx\n     }\n \n-    // FIXME(oli-obk): not sure how to get the correct ParamEnv\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n-        ty::ParamEnv::empty()\n+        self.delegate.param_env()\n     }\n \n     fn tag(&self) -> &'static str {"}, {"sha": "3e7b93b32a6a5a2b08feeedac74a17c5d43a8c00", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=665bf9e35f470b856905beb8862bb30367b57435", "patch": "@@ -31,6 +31,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still\n     /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is\n     /// returned.\n+    #[instrument(level = \"debug\", skip(self))]\n     pub fn const_eval_resolve(\n         self,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "de012a6957419a19358e8a01ccdb8ef032821c63", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=665bf9e35f470b856905beb8862bb30367b57435", "patch": "@@ -347,6 +347,7 @@ impl<'tcx> Instance<'tcx> {\n     }\n \n     // This should be kept up to date with `resolve`.\n+    #[instrument(level = \"debug\", skip(tcx))]\n     pub fn resolve_opt_const_arg(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "f64848e694ccac0d8f8cb35bf3138fdff29c4d6e", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=665bf9e35f470b856905beb8862bb30367b57435", "patch": "@@ -1101,6 +1101,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     ) -> Fallible<()> {\n         relate_tys::relate_types(\n             self.infcx,\n+            self.param_env,\n             a,\n             v,\n             b,"}, {"sha": "249945f04b7b05748410f88697ca187fd6872bd2", "filename": "compiler/rustc_mir/src/borrow_check/type_check/relate_tys.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Frelate_tys.rs?ref=665bf9e35f470b856905beb8862bb30367b57435", "patch": "@@ -18,6 +18,7 @@ use crate::borrow_check::type_check::{BorrowCheckContext, Locations};\n /// variables, but not the type `b`.\n pub(super) fn relate_types<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     a: Ty<'tcx>,\n     v: ty::Variance,\n     b: Ty<'tcx>,\n@@ -28,7 +29,7 @@ pub(super) fn relate_types<'tcx>(\n     debug!(\"relate_types(a={:?}, v={:?}, b={:?}, locations={:?})\", a, v, b, locations);\n     TypeRelating::new(\n         infcx,\n-        NllTypeRelatingDelegate::new(infcx, borrowck_context, locations, category),\n+        NllTypeRelatingDelegate::new(infcx, borrowck_context, param_env, locations, category),\n         v,\n     )\n     .relate(a, b)?;\n@@ -39,6 +40,8 @@ struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     infcx: &'me InferCtxt<'me, 'tcx>,\n     borrowck_context: Option<&'me mut BorrowCheckContext<'bccx, 'tcx>>,\n \n+    param_env: ty::ParamEnv<'tcx>,\n+\n     /// Where (and why) is this relation taking place?\n     locations: Locations,\n \n@@ -50,14 +53,19 @@ impl NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     fn new(\n         infcx: &'me InferCtxt<'me, 'tcx>,\n         borrowck_context: Option<&'me mut BorrowCheckContext<'bccx, 'tcx>>,\n+        param_env: ty::ParamEnv<'tcx>,\n         locations: Locations,\n         category: ConstraintCategory,\n     ) -> Self {\n-        Self { infcx, borrowck_context, locations, category }\n+        Self { infcx, borrowck_context, param_env, locations, category }\n     }\n }\n \n impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n+    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n+        self.param_env\n+    }\n+\n     fn create_next_universe(&mut self) -> ty::UniverseIndex {\n         self.infcx.create_next_universe()\n     }"}, {"sha": "1cc580a198386bac4e114439725a3cb89b2d39a4", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665bf9e35f470b856905beb8862bb30367b57435/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=665bf9e35f470b856905beb8862bb30367b57435", "patch": "@@ -10,6 +10,7 @@ use traits::{translate_substs, Reveal};\n \n use tracing::debug;\n \n+#[instrument(level = \"debug\", skip(tcx))]\n fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n@@ -38,13 +39,13 @@ fn resolve_instance_of_const_arg<'tcx>(\n     )\n }\n \n+#[instrument(level = \"debug\", skip(tcx))]\n fn inner_resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>)>,\n ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n     let (param_env, (def, substs)) = key.into_parts();\n \n-    debug!(\"resolve(def={:?}, substs={:?})\", def.did, substs);\n     let result = if let Some(trait_def_id) = tcx.trait_of_item(def.did) {\n         debug!(\" => associated item, attempting to find impl in param_env {:#?}\", param_env);\n         let item = tcx.associated_item(def.did);\n@@ -93,7 +94,7 @@ fn inner_resolve_instance<'tcx>(\n         };\n         Ok(Some(Instance { def, substs }))\n     };\n-    debug!(\"resolve(def.did={:?}, substs={:?}) = {:?}\", def.did, substs, result);\n+    debug!(\"inner_resolve_instance: result={:?}\", result);\n     result\n }\n "}, {"sha": "a34d74b29e9f014164f93ce212828af5574e0e5c", "filename": "src/test/ui/const-generics/issue-80561-incorrect-param-env.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/665bf9e35f470b856905beb8862bb30367b57435/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80561-incorrect-param-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665bf9e35f470b856905beb8862bb30367b57435/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80561-incorrect-param-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80561-incorrect-param-env.rs?ref=665bf9e35f470b856905beb8862bb30367b57435", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+// This tests that the correct `param_env` is used so that\n+// attempting to normalize `Self::N` does not cause an ICE.\n+\n+pub struct Foo<const N: usize>;\n+\n+impl<const N: usize> Foo<N> {\n+    pub fn foo() {}\n+}\n+\n+pub trait Bar {\n+    const N: usize;\n+    fn bar()\n+    where\n+        [(); Self::N]: ,\n+    {\n+        Foo::<{ Self::N }>::foo();\n+    }\n+}\n+\n+fn main() {}"}]}