{"sha": "96c1082f0fdbbe5258cfc1dc37f83052feff8421", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YzEwODJmMGZkYmJlNTI1OGNmYzFkYzM3ZjgzMDUyZmVmZjg0MjE=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-02T18:35:41Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-20T09:08:55Z"}, "message": "Add Either::expect_{left,right}", "tree": {"sha": "e38470c454bf1ad5de249253320592cc2da7d023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e38470c454bf1ad5de249253320592cc2da7d023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96c1082f0fdbbe5258cfc1dc37f83052feff8421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96c1082f0fdbbe5258cfc1dc37f83052feff8421", "html_url": "https://github.com/rust-lang/rust/commit/96c1082f0fdbbe5258cfc1dc37f83052feff8421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96c1082f0fdbbe5258cfc1dc37f83052feff8421/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d97c905ddecec2e2d0d72926bc4c9e739ccb6e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d97c905ddecec2e2d0d72926bc4c9e739ccb6e3", "html_url": "https://github.com/rust-lang/rust/commit/8d97c905ddecec2e2d0d72926bc4c9e739ccb6e3"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "4fb43e5157b433acc03a52ec25ef9c24591dfdaf", "filename": "src/libstd/either.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/96c1082f0fdbbe5258cfc1dc37f83052feff8421/src%2Flibstd%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c1082f0fdbbe5258cfc1dc37f83052feff8421/src%2Flibstd%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Feither.rs?ref=96c1082f0fdbbe5258cfc1dc37f83052feff8421", "patch": "@@ -18,6 +18,7 @@ use cmp::Eq;\n use iterator::IteratorUtil;\n use result::Result;\n use result;\n+use str::StrSlice;\n use vec;\n use vec::{OwnedVector, ImmutableVector};\n \n@@ -121,24 +122,37 @@ pub fn is_right<T, U>(eith: &Either<T, U>) -> bool {\n     }\n }\n \n-/// Retrieves the value in the left branch. Fails if the either is Right.\n+/// Retrieves the value in the left branch.\n+/// Fails with a specified reason if the either is Right.\n #[inline]\n-pub fn unwrap_left<T,U>(eith: Either<T,U>) -> T {\n+pub fn expect_left<T,U>(eith: Either<T,U>, reason: &str) -> T {\n     match eith {\n         Left(x) => x,\n-        Right(_) => fail!(\"either::unwrap_left Right\")\n+        Right(_) => fail!(reason.to_owned())\n     }\n }\n \n-/// Retrieves the value in the right branch. Fails if the either is Left.\n+/// Retrieves the value in the left branch. Fails if the either is Right.\n #[inline]\n-pub fn unwrap_right<T,U>(eith: Either<T,U>) -> U {\n+pub fn unwrap_left<T,U>(eith: Either<T,U>) -> T {\n+    expect_left(eith, \"either::unwrap_left Right\")\n+}\n+\n+/// Retrieves the value in the right branch.\n+/// Fails with a specified reason if the either is Left.\n+#[inline]\n+pub fn expect_right<T,U>(eith: Either<T,U>, reason: &str) -> U {\n     match eith {\n         Right(x) => x,\n-        Left(_) => fail!(\"either::unwrap_right Left\")\n+        Left(_) => fail!(reason.to_owned())\n     }\n }\n \n+/// Retrieves the value in the right branch. Fails if the either is Left.\n+pub fn unwrap_right<T,U>(eith: Either<T,U>) -> U {\n+    expect_right(eith, \"either::unwrap_right Left\")\n+}\n+\n impl<T, U> Either<T, U> {\n     #[inline]\n     pub fn either<V>(&self, f_left: &fn(&T) -> V, f_right: &fn(&U) -> V) -> V {\n@@ -157,9 +171,15 @@ impl<T, U> Either<T, U> {\n     #[inline]\n     pub fn is_right(&self) -> bool { is_right(self) }\n \n+    #[inline]\n+    pub fn expect_left(self, reason: &str) -> T { expect_left(self, reason) }\n+\n     #[inline]\n     pub fn unwrap_left(self) -> T { unwrap_left(self) }\n \n+    #[inline]\n+    pub fn expect_right(self, reason: &str) -> U { expect_right(self, reason) }\n+\n     #[inline]\n     pub fn unwrap_right(self) -> U { unwrap_right(self) }\n }"}]}