{"sha": "140e77f71d227779a1520aabe10c74d2b7b80d5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MGU3N2Y3MWQyMjc3NzlhMTUyMGFhYmUxMGM3NGQyYjdiODBkNWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-29T08:06:32Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:54:28Z"}, "message": "Make resolve_hir_path and resolve_str_path fallible", "tree": {"sha": "54b7c4321c352be79fd17868bcd9b78bf70cccb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54b7c4321c352be79fd17868bcd9b78bf70cccb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/140e77f71d227779a1520aabe10c74d2b7b80d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/140e77f71d227779a1520aabe10c74d2b7b80d5f", "html_url": "https://github.com/rust-lang/rust/commit/140e77f71d227779a1520aabe10c74d2b7b80d5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/140e77f71d227779a1520aabe10c74d2b7b80d5f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f951d7438937df9938d49be4c53c45cdfaaf867e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f951d7438937df9938d49be4c53c45cdfaaf867e", "html_url": "https://github.com/rust-lang/rust/commit/f951d7438937df9938d49be4c53c45cdfaaf867e"}], "stats": {"total": 83, "additions": 61, "deletions": 22}, "files": [{"sha": "a87f2747a57f513f57391851c5a09411287cb32c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/140e77f71d227779a1520aabe10c74d2b7b80d5f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140e77f71d227779a1520aabe10c74d2b7b80d5f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=140e77f71d227779a1520aabe10c74d2b7b80d5f", "patch": "@@ -155,18 +155,7 @@ pub trait Resolver {\n     /// Given suffix [\"b\",\"c\",\"d\"], creates a HIR path for `[::crate_root]::b::c::d` and resolves\n     /// it based on `is_value`.\n     fn resolve_str_path(&mut self, span: Span, crate_root: Option<&str>,\n-                components: &[&str], is_value: bool) -> hir::Path {\n-        let mut path = hir::Path {\n-            span,\n-            def: Def::Err,\n-            segments: iter::once(keywords::CrateRoot.name()).chain({\n-                crate_root.into_iter().chain(components.iter().cloned()).map(Symbol::intern)\n-            }).map(hir::PathSegment::from_name).collect(),\n-        };\n-\n-        self.resolve_hir_path(&mut path, is_value);\n-        path\n-    }\n+                components: &[&str], is_value: bool) -> hir::Path;\n }\n \n #[derive(Clone, Copy, Debug)]"}, {"sha": "fdbed251799874a07592c9b2a6f6024eb9a9da67", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 60, "deletions": 10, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/140e77f71d227779a1520aabe10c74d2b7b80d5f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140e77f71d227779a1520aabe10c74d2b7b80d5f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=140e77f71d227779a1520aabe10c74d2b7b80d5f", "patch": "@@ -1407,6 +1407,64 @@ impl<'a, 'b: 'a> ty::DefIdTree for &'a Resolver<'b> {\n \n impl<'a> hir::lowering::Resolver for Resolver<'a> {\n     fn resolve_hir_path(&mut self, path: &mut hir::Path, is_value: bool) {\n+        self.resolve_hir_path_cb(path, is_value,\n+                                 |resolver, span, error| resolve_error(resolver, span, error))\n+    }\n+\n+    fn resolve_str_path(&mut self, span: Span, crate_root: Option<&str>,\n+                components: &[&str], is_value: bool) -> hir::Path {\n+        self.resolve_str_path_cb(span, crate_root, components, is_value,\n+                                 |resolver, span, error| resolve_error(resolver, span, error))\n+    }\n+\n+    fn get_resolution(&mut self, id: NodeId) -> Option<PathResolution> {\n+        self.def_map.get(&id).cloned()\n+    }\n+\n+    fn definitions(&mut self) -> &mut Definitions {\n+        &mut self.definitions\n+    }\n+}\n+\n+impl<'a> Resolver<'a> {\n+    /// resolve_str_path, but takes a callback in case there was an error\n+    fn resolve_str_path_cb<F>(&mut self, span: Span, crate_root: Option<&str>,\n+                components: &[&str], is_value: bool, error_callback: F) -> hir::Path \n+            where F: for<'b, 'c> FnOnce(&'c mut Resolver, Span, ResolutionError<'b>)\n+        {\n+        use std::iter;\n+        let mut path = hir::Path {\n+            span,\n+            def: Def::Err,\n+            segments: iter::once(keywords::CrateRoot.name()).chain({\n+                crate_root.into_iter().chain(components.iter().cloned()).map(Symbol::intern)\n+            }).map(hir::PathSegment::from_name).collect(),\n+        };\n+\n+        self.resolve_hir_path_cb(&mut path, is_value, error_callback);\n+        path\n+    }\n+\n+    /// Rustdoc uses this to resolve things in a recoverable way. ResolutionError<'a>\n+    /// isn't something that can be returned because it can't be made to live that long,\n+    /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,\n+    /// just that an error occured.\n+    pub fn resolve_str_path_error(&mut self, span: Span, crate_root: Option<&str>,\n+                components: &[&str], is_value: bool) -> Result<hir::Path, ()> {\n+        let mut errored = false;\n+        let path = self.resolve_str_path_cb(span, crate_root, components, is_value,\n+                                            |_, _, _| errored = true);\n+        if errored || path.def == Def::Err {\n+            Err(())\n+        } else {\n+            Ok(path)\n+        }\n+    }\n+\n+    /// resolve_hir_path, but takes a callback in case there was an error\n+    fn resolve_hir_path_cb<F>(&mut self, path: &mut hir::Path, is_value: bool, error_callback: F)\n+            where F: for<'c, 'b> FnOnce(&'c mut Resolver, Span, ResolutionError<'b>)\n+        {\n         let namespace = if is_value { ValueNS } else { TypeNS };\n         let hir::Path { ref segments, span, ref mut def } = *path;\n         let path: Vec<SpannedIdent> = segments.iter()\n@@ -1418,24 +1476,16 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n                 *def = path_res.base_def(),\n             PathResult::NonModule(..) => match self.resolve_path(&path, None, true, span) {\n                 PathResult::Failed(span, msg, _) => {\n-                    resolve_error(self, span, ResolutionError::FailedToResolve(&msg));\n+                    error_callback(self, span, ResolutionError::FailedToResolve(&msg));\n                 }\n                 _ => {}\n             },\n             PathResult::Indeterminate => unreachable!(),\n             PathResult::Failed(span, msg, _) => {\n-                resolve_error(self, span, ResolutionError::FailedToResolve(&msg));\n+                error_callback(self, span, ResolutionError::FailedToResolve(&msg));\n             }\n         }\n     }\n-\n-    fn get_resolution(&mut self, id: NodeId) -> Option<PathResolution> {\n-        self.def_map.get(&id).cloned()\n-    }\n-\n-    fn definitions(&mut self) -> &mut Definitions {\n-        &mut self.definitions\n-    }\n }\n \n impl<'a> Resolver<'a> {"}]}