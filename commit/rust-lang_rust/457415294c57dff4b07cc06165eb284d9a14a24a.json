{"sha": "457415294c57dff4b07cc06165eb284d9a14a24a", "node_id": "C_kwDOAAsO6NoAKDQ1NzQxNTI5NGM1N2RmZjRiMDdjYzA2MTY1ZWIyODRkOWExNGEyNGE", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2021-11-04T23:38:47Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-01-18T22:25:25Z"}, "message": "Handle more cases with conditionally initialized/dropped values", "tree": {"sha": "66a9c5a8995bcd72c4bdd8ba47b6175fc81ed8f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66a9c5a8995bcd72c4bdd8ba47b6175fc81ed8f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/457415294c57dff4b07cc06165eb284d9a14a24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/457415294c57dff4b07cc06165eb284d9a14a24a", "html_url": "https://github.com/rust-lang/rust/commit/457415294c57dff4b07cc06165eb284d9a14a24a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/457415294c57dff4b07cc06165eb284d9a14a24a/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "298ca2f6799201152e2e75a781a7aabb29424aea", "url": "https://api.github.com/repos/rust-lang/rust/commits/298ca2f6799201152e2e75a781a7aabb29424aea", "html_url": "https://github.com/rust-lang/rust/commit/298ca2f6799201152e2e75a781a7aabb29424aea"}], "stats": {"total": 92, "additions": 89, "deletions": 3}, "files": [{"sha": "e7794b199e7149c9cc2e18cfaa6ba5c796ea56c5", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/457415294c57dff4b07cc06165eb284d9a14a24a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457415294c57dff4b07cc06165eb284d9a14a24a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=457415294c57dff4b07cc06165eb284d9a14a24a", "patch": "@@ -871,7 +871,8 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n                         self.visit_expr(if_true);\n                         true_ranges = self.swap_drop_ranges(true_ranges);\n \n-                        false_ranges = self.swap_drop_ranges(false_ranges);\n+                        false_ranges =\n+                            self.swap_drop_ranges(trim_drop_ranges(&false_ranges, self.expr_count));\n                         self.visit_expr(if_false);\n                         false_ranges = self.swap_drop_ranges(false_ranges);\n \n@@ -908,6 +909,31 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n                 let body_drop_ranges = self.swap_drop_ranges(old_drop_ranges);\n                 self.merge_drop_ranges_at(body_drop_ranges, join_point);\n             }\n+            ExprKind::Match(scrutinee, arms, ..) => {\n+                self.visit_expr(scrutinee);\n+\n+                let forked_ranges = self.fork_drop_ranges();\n+                let arm_drops = arms\n+                    .iter()\n+                    .map(|Arm { hir_id, pat, body, guard, .. }| {\n+                        debug!(\"match arm {:?} starts at {}\", hir_id, self.expr_count);\n+                        let old_ranges = self\n+                            .swap_drop_ranges(trim_drop_ranges(&forked_ranges, self.expr_count));\n+                        self.visit_pat(pat);\n+                        match guard {\n+                            Some(Guard::If(expr)) => self.visit_expr(expr),\n+                            Some(Guard::IfLet(pat, expr)) => {\n+                                self.visit_pat(pat);\n+                                self.visit_expr(expr);\n+                            }\n+                            None => (),\n+                        }\n+                        self.visit_expr(body);\n+                        self.swap_drop_ranges(old_ranges)\n+                    })\n+                    .collect::<Vec<_>>();\n+                arm_drops.into_iter().for_each(|drops| self.merge_drop_ranges(drops));\n+            }\n             _ => intravisit::walk_expr(self, expr),\n         }\n \n@@ -926,6 +952,10 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n     }\n }\n \n+fn trim_drop_ranges(drop_ranges: &HirIdMap<DropRange>, trim_from: usize) -> HirIdMap<DropRange> {\n+    drop_ranges.iter().map(|(k, v)| (*k, v.trimmed(trim_from))).collect()\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n enum Event {\n     Drop(usize),\n@@ -1058,4 +1088,20 @@ impl DropRange {\n             }],\n         }\n     }\n+\n+    fn trimmed(&self, trim_from: usize) -> Self {\n+        let start = if self.is_dropped_at(trim_from) {\n+            Event::Drop(trim_from)\n+        } else {\n+            Event::Reinit(trim_from)\n+        };\n+\n+        Self {\n+            events: [start]\n+                .iter()\n+                .chain(self.events.iter().skip_while(|event| event.location() <= trim_from))\n+                .cloned()\n+                .collect(),\n+        }\n+    }\n }"}, {"sha": "6319a29f5b7d0e3806a7e5c0a5c51395d9abc642", "filename": "src/test/ui/generator/drop-control-flow.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/457415294c57dff4b07cc06165eb284d9a14a24a/src%2Ftest%2Fui%2Fgenerator%2Fdrop-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457415294c57dff4b07cc06165eb284d9a14a24a/src%2Ftest%2Fui%2Fgenerator%2Fdrop-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-control-flow.rs?ref=457415294c57dff4b07cc06165eb284d9a14a24a", "patch": "@@ -5,15 +5,14 @@\n // included in the generator type.\n \n #![feature(generators, negative_impls)]\n-\n #![allow(unused_assignments, dead_code)]\n \n struct Ptr;\n impl<'a> Drop for Ptr {\n     fn drop(&mut self) {}\n }\n \n-struct NonSend {}\n+struct NonSend;\n impl !Send for NonSend {}\n \n fn assert_send<T: Send>(_: T) {}\n@@ -51,6 +50,29 @@ fn if_let(arg: Option<i32>) {\n     };\n }\n \n+fn init_in_if(arg: bool) {\n+    assert_send(|| {\n+        let mut x = NonSend;\n+        drop(x);\n+        if arg {\n+            x = NonSend;\n+        } else {\n+            yield;\n+        }\n+    })\n+}\n+\n+fn init_in_match_arm(arg: Option<i32>) {\n+    assert_send(|| {\n+        let mut x = NonSend;\n+        drop(x);\n+        match arg {\n+            Some(_) => x = NonSend,\n+            None => yield,\n+        }\n+    })\n+}\n+\n fn reinit() {\n     let _ = || {\n         let mut arr = [Ptr];\n@@ -73,9 +95,27 @@ fn loop_uninit() {\n     };\n }\n \n+fn nested_loop() {\n+    let _ = || {\n+        let mut arr = [Ptr];\n+        let mut count = 0;\n+        drop(arr);\n+        while count < 3 {\n+            for _ in 0..3 {\n+                yield;\n+            }\n+            arr = [Ptr];\n+            count += 1;\n+        }\n+    };\n+}\n+\n fn main() {\n     one_armed_if(true);\n     if_let(Some(41));\n+    init_in_if(true);\n+    init_in_match_arm(Some(41));\n     reinit();\n     loop_uninit();\n+    nested_loop();\n }"}]}