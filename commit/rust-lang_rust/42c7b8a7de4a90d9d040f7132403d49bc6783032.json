{"sha": "42c7b8a7de4a90d9d040f7132403d49bc6783032", "node_id": "C_kwDOAAsO6NoAKDQyYzdiOGE3ZGU0YTkwZDlkMDQwZjcxMzI0MDNkNDliYzY3ODMwMzI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-26T06:24:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-26T06:24:07Z"}, "message": "Rollup merge of #111384 - bmisiak:issue-106021-fix, r=petrochenkov\n\nFix linking Mac Catalyst by including LC_BUILD_VERSION in object files\n\nHello. My first rustc PR!\n\nIssue #106021 prevents Rust code from being linked into Mac Catalyst applications. Apple's LD has started requiring object files to contain version information about the platform they were built for, such as:\n* the \"deployment target\" (minimum supported OS version),\n* the SDK version\n* the type of the platform (macOS/iOS/catalyst/tvOS/watchOS all have a different number).\n\nThis is currently only enforced when building for Mac Catalyst.\n\nRust uses the `object` crate which added support for including this information starting with `0.31.0`. ~~I upgraded it along with `thorin-dwp` so that everything depends on 0.31.\nApparently 0.31 [pulls in](https://github.com/gimli-rs/object/issues/463) `ruzstd` due to a [new ELF standard](https://maskray.me/blog/2022-09-09-zstd-compressed-debug-sections) because its `compression` feature is enabled by thorin. If you find this objectionable, let me know what the best way to avoid pulling in those dependencies might be.~~\n\n**(`object` upgraded in https://github.com/rust-lang/rust/pull/111413)**\n\nI then added two commits:\n* The first one adds very basic, hard-coded support for calling `set_macho_build_version` for `-macabi` (Catalyst) targets, where it claims deployment target of Catalyst 14.0 and SDK of 16.2.\n* The second weaves the versioning through `rust_target::spec::TargetOptions`, so that we can stick to specifying all target-related info in one place.\n\nKudos to ``@ara4n`` for writing [this gist](https://gist.github.com/ara4n/320a53ea768aba51afad4c9ed2168536).", "tree": {"sha": "f1a650b250476c83dcd685aa5a184245cbc0e43f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1a650b250476c83dcd685aa5a184245cbc0e43f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42c7b8a7de4a90d9d040f7132403d49bc6783032", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkcFCHCRBK7hj4Ov3rIwAAVIoIAKuJiS9a9RgUwbAGUixfi4NB\nNhiGuMT+d6dnnhJwXbl1GNrdJZTyTHZ/QRQvZjMQIzAzt2lwq6Tx1/zNcuTTaEk4\nBMQhQIV0z2g5ZTN6u/REhmyIDtaRtz9yx9gVpIx67NkIm3qLf1qDYE5Y4vTp+feV\nYSwdFLfQfzTQ+t35NyLcN9SGZS1q/AWTzcrHR5hXssI8/c0q9p9MgijenxchHJ6/\nGhyr686bNVQKH8fXIZ8Y2EigucT7E2SyNDkWKXSVuYjIrnfaCvZNkLzVDfewY6jE\nOdBkdcEU/trzT/3FAls8QkRHHFkL/v/bzN14UkuoLEYxzx4ETNDG7TDYBWDPPKI=\n=kmev\n-----END PGP SIGNATURE-----\n", "payload": "tree f1a650b250476c83dcd685aa5a184245cbc0e43f\nparent c86212f9bccb4d5ec625b0607053b067732724ab\nparent a61f026182cb0fa5830156b0ef29c28bc4ccfe99\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685082247 +0200\ncommitter GitHub <noreply@github.com> 1685082247 +0200\n\nRollup merge of #111384 - bmisiak:issue-106021-fix, r=petrochenkov\n\nFix linking Mac Catalyst by including LC_BUILD_VERSION in object files\n\nHello. My first rustc PR!\n\nIssue #106021 prevents Rust code from being linked into Mac Catalyst applications. Apple's LD has started requiring object files to contain version information about the platform they were built for, such as:\n* the \"deployment target\" (minimum supported OS version),\n* the SDK version\n* the type of the platform (macOS/iOS/catalyst/tvOS/watchOS all have a different number).\n\nThis is currently only enforced when building for Mac Catalyst.\n\nRust uses the `object` crate which added support for including this information starting with `0.31.0`. ~~I upgraded it along with `thorin-dwp` so that everything depends on 0.31.\nApparently 0.31 [pulls in](https://github.com/gimli-rs/object/issues/463) `ruzstd` due to a [new ELF standard](https://maskray.me/blog/2022-09-09-zstd-compressed-debug-sections) because its `compression` feature is enabled by thorin. If you find this objectionable, let me know what the best way to avoid pulling in those dependencies might be.~~\n\n**(`object` upgraded in https://github.com/rust-lang/rust/pull/111413)**\n\nI then added two commits:\n* The first one adds very basic, hard-coded support for calling `set_macho_build_version` for `-macabi` (Catalyst) targets, where it claims deployment target of Catalyst 14.0 and SDK of 16.2.\n* The second weaves the versioning through `rust_target::spec::TargetOptions`, so that we can stick to specifying all target-related info in one place.\n\nKudos to ``@ara4n`` for writing [this gist](https://gist.github.com/ara4n/320a53ea768aba51afad4c9ed2168536).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42c7b8a7de4a90d9d040f7132403d49bc6783032", "html_url": "https://github.com/rust-lang/rust/commit/42c7b8a7de4a90d9d040f7132403d49bc6783032", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42c7b8a7de4a90d9d040f7132403d49bc6783032/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c86212f9bccb4d5ec625b0607053b067732724ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/c86212f9bccb4d5ec625b0607053b067732724ab", "html_url": "https://github.com/rust-lang/rust/commit/c86212f9bccb4d5ec625b0607053b067732724ab"}, {"sha": "a61f026182cb0fa5830156b0ef29c28bc4ccfe99", "url": "https://api.github.com/repos/rust-lang/rust/commits/a61f026182cb0fa5830156b0ef29c28bc4ccfe99", "html_url": "https://github.com/rust-lang/rust/commit/a61f026182cb0fa5830156b0ef29c28bc4ccfe99"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "ad27b854d59a2553f240cc1ed00b3a93d5162a99", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/42c7b8a7de4a90d9d040f7132403d49bc6783032/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c7b8a7de4a90d9d040f7132403d49bc6783032/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=42c7b8a7de4a90d9d040f7132403d49bc6783032", "patch": "@@ -188,6 +188,11 @@ pub(crate) fn create_object_file(sess: &Session) -> Option<write::Object<'static\n     };\n \n     let mut file = write::Object::new(binary_format, architecture, endianness);\n+    if sess.target.is_like_osx {\n+        if let Some(build_version) = macho_object_build_version_for_target(&sess.target) {\n+            file.set_macho_build_version(build_version)\n+        }\n+    }\n     let e_flags = match architecture {\n         Architecture::Mips => {\n             let arch = match sess.target.options.cpu.as_ref() {\n@@ -258,6 +263,33 @@ pub(crate) fn create_object_file(sess: &Session) -> Option<write::Object<'static\n     Some(file)\n }\n \n+/// Apple's LD, when linking for Mac Catalyst, requires object files to\n+/// contain information about what they were built for (LC_BUILD_VERSION):\n+/// the platform (macOS/watchOS etc), minimum OS version, and SDK version.\n+/// This returns a `MachOBuildVersion` if necessary for the target.\n+fn macho_object_build_version_for_target(\n+    target: &Target,\n+) -> Option<object::write::MachOBuildVersion> {\n+    if !target.llvm_target.ends_with(\"-macabi\") {\n+        return None;\n+    }\n+    /// The `object` crate demands \"X.Y.Z encoded in nibbles as xxxx.yy.zz\"\n+    /// e.g. minOS 14.0 = 0x000E0000, or SDK 16.2 = 0x00100200\n+    fn pack_version((major, minor): (u32, u32)) -> u32 {\n+        (major << 16) | (minor << 8)\n+    }\n+\n+    let platform = object::macho::PLATFORM_MACCATALYST;\n+    let min_os = (14, 0);\n+    let sdk = (16, 2);\n+\n+    let mut build_version = object::write::MachOBuildVersion::default();\n+    build_version.platform = platform;\n+    build_version.minos = pack_version(min_os);\n+    build_version.sdk = pack_version(sdk);\n+    Some(build_version)\n+}\n+\n pub enum MetadataPosition {\n     First,\n     Last,"}, {"sha": "e2df7e0bdcc790c7776eb04397a3714fde16c8f3", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_macabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42c7b8a7de4a90d9d040f7132403d49bc6783032/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c7b8a7de4a90d9d040f7132403d49bc6783032/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs?ref=42c7b8a7de4a90d9d040f7132403d49bc6783032", "patch": "@@ -2,7 +2,7 @@ use super::apple_base::{opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let llvm_target = \"arm64-apple-ios-macabi\";\n+    let llvm_target = \"arm64-apple-ios14.0-macabi\";\n \n     let arch = Arch::Arm64_macabi;\n     let mut base = opts(\"ios\", arch);"}, {"sha": "9f3b0fab697e6718c6518c61b66044d170ed71b2", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42c7b8a7de4a90d9d040f7132403d49bc6783032/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c7b8a7de4a90d9d040f7132403d49bc6783032/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=42c7b8a7de4a90d9d040f7132403d49bc6783032", "patch": "@@ -2,7 +2,7 @@ use super::apple_base::{opts, Arch};\n use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let llvm_target = \"x86_64-apple-ios-macabi\";\n+    let llvm_target = \"x86_64-apple-ios14.0-macabi\";\n \n     let arch = Arch::X86_64_macabi;\n     let mut base = opts(\"ios\", arch);"}]}