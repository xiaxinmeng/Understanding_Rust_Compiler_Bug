{"sha": "035cfcbe7218018c1bab29a987ee1152ccd1dcf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNWNmY2JlNzIxODAxOGMxYmFiMjlhOTg3ZWUxMTUyY2NkMWRjZjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-06T22:47:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-06T22:48:06Z"}, "message": "docs: Clean up trait and module examples", "tree": {"sha": "3db7c762427041f141fc3a3cc161d1f47aa61abd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3db7c762427041f141fc3a3cc161d1f47aa61abd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/035cfcbe7218018c1bab29a987ee1152ccd1dcf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/035cfcbe7218018c1bab29a987ee1152ccd1dcf7", "html_url": "https://github.com/rust-lang/rust/commit/035cfcbe7218018c1bab29a987ee1152ccd1dcf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/035cfcbe7218018c1bab29a987ee1152ccd1dcf7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f96a2a2ca16a44f869336f7e28fc261551c1184c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f96a2a2ca16a44f869336f7e28fc261551c1184c", "html_url": "https://github.com/rust-lang/rust/commit/f96a2a2ca16a44f869336f7e28fc261551c1184c"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "1b857bae1eb2347e79bfdcbb47f6dd9161d7e5ac", "filename": "doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/035cfcbe7218018c1bab29a987ee1152ccd1dcf7/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/035cfcbe7218018c1bab29a987ee1152ccd1dcf7/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=035cfcbe7218018c1bab29a987ee1152ccd1dcf7", "patch": "@@ -2044,13 +2044,11 @@ However, consider this function:\n # type Circle = int; type Rectangle = int;\n # impl int: Drawable { fn draw() {} }\n # fn new_circle() -> int { 1 }\n-\n trait Drawable { fn draw(); }\n \n fn draw_all<T: Drawable>(shapes: ~[T]) {\n     for shapes.each |shape| { shape.draw(); }\n }\n-\n # let c: Circle = new_circle();\n # draw_all(~[c]);\n ~~~~\n@@ -2062,7 +2060,7 @@ needed, a trait name can alternately be used as a type.\n \n ~~~~\n # trait Drawable { fn draw(); }\n-fn draw_all(shapes: ~[@Drawable]) {\n+fn draw_all(shapes: &[@Drawable]) {\n     for shapes.each |shape| { shape.draw(); }\n }\n ~~~~\n@@ -2077,15 +2075,15 @@ to cast a value to a trait type:\n # trait Drawable { fn draw(); }\n # fn new_circle() -> Circle { 1 }\n # fn new_rectangle() -> Rectangle { true }\n-# fn draw_all(shapes: ~[Drawable]) {}\n+# fn draw_all(shapes: &[@Drawable]) {}\n \n impl @Circle: Drawable { fn draw() { ... } }\n \n impl @Rectangle: Drawable { fn draw() { ... } }\n \n let c: @Circle = @new_circle();\n let r: @Rectangle = @new_rectangle();\n-draw_all(~[c as @Drawable, r as @Drawable]);\n+draw_all(&[c as @Drawable, r as @Drawable]);\n ~~~~\n \n Note that, like strings and vectors, trait types have dynamic size\n@@ -2130,10 +2128,9 @@ explicitly import it, you must refer to it by its long name,\n `farm::chicken`.\n \n ~~~~\n-#[legacy_exports]\n mod farm {\n-    fn chicken() -> ~str { ~\"cluck cluck\" }\n-    fn cow() -> ~str { ~\"mooo\" }\n+    pub fn chicken() -> ~str { ~\"cluck cluck\" }\n+    pub fn cow() -> ~str { ~\"mooo\" }\n }\n fn main() {\n     io::println(farm::chicken());"}]}