{"sha": "efc67646fabbba0d79b386fb9fec2f89c20314bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYzY3NjQ2ZmFiYmJhMGQ3OWIzODZmYjlmZWMyZjg5YzIwMzE0YmM=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-07-28T03:40:24Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-07-28T03:40:24Z"}, "message": "Support homogeneous aggregates for hard-float ARM\n\nHard-float ARM targets use the AACPS-VFP ABI, which passes and returns\nhomogeneous float/vector aggregates in the VFP registers.\n\nFixes #43329.", "tree": {"sha": "5386992ba158178a86f2b060d165d1e8d63217fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5386992ba158178a86f2b060d165d1e8d63217fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efc67646fabbba0d79b386fb9fec2f89c20314bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efc67646fabbba0d79b386fb9fec2f89c20314bc", "html_url": "https://github.com/rust-lang/rust/commit/efc67646fabbba0d79b386fb9fec2f89c20314bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efc67646fabbba0d79b386fb9fec2f89c20314bc/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cc1baa2900ab344e8e8386aa8314b59051868ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc1baa2900ab344e8e8386aa8314b59051868ca", "html_url": "https://github.com/rust-lang/rust/commit/5cc1baa2900ab344e8e8386aa8314b59051868ca"}], "stats": {"total": 60, "additions": 55, "deletions": 5}, "files": [{"sha": "635741b4d1ac5dd2e9a2ac6adb59fd3032a243ec", "filename": "src/librustc_trans/cabi_arm.rs", "status": "modified", "additions": 55, "deletions": 5, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/efc67646fabbba0d79b386fb9fec2f89c20314bc/src%2Flibrustc_trans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc67646fabbba0d79b386fb9fec2f89c20314bc/src%2Flibrustc_trans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_arm.rs?ref=efc67646fabbba0d79b386fb9fec2f89c20314bc", "patch": "@@ -8,14 +8,50 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi::{FnType, ArgType, LayoutExt, Reg, Uniform};\n+use abi::{FnType, ArgType, LayoutExt, Reg, RegKind, Uniform};\n use context::CrateContext;\n+use llvm::CallConv;\n \n-fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) {\n+fn is_homogeneous_aggregate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n+                                     -> Option<Uniform> {\n+    arg.layout.homogeneous_aggregate(ccx).and_then(|unit| {\n+        let size = arg.layout.size(ccx);\n+\n+        // Ensure we have at most four uniquely addressable members.\n+        if size > unit.size.checked_mul(4, ccx).unwrap() {\n+            return None;\n+        }\n+\n+        let valid_unit = match unit.kind {\n+            RegKind::Integer => false,\n+            RegKind::Float => true,\n+            RegKind::Vector => size.bits() == 64 || size.bits() == 128\n+        };\n+\n+        if valid_unit {\n+            Some(Uniform {\n+                unit,\n+                total: size\n+            })\n+        } else {\n+            None\n+        }\n+    })\n+}\n+\n+fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>, vfp: bool) {\n     if !ret.layout.is_aggregate() {\n         ret.extend_integer_width_to(32);\n         return;\n     }\n+\n+    if vfp {\n+        if let Some(uniform) = is_homogeneous_aggregate(ccx, ret) {\n+            ret.cast_to(ccx, uniform);\n+            return;\n+        }\n+    }\n+\n     let size = ret.layout.size(ccx);\n     let bits = size.bits();\n     if bits <= 32 {\n@@ -35,11 +71,19 @@ fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tc\n     ret.make_indirect(ccx);\n }\n \n-fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>) {\n+fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>, vfp: bool) {\n     if !arg.layout.is_aggregate() {\n         arg.extend_integer_width_to(32);\n         return;\n     }\n+\n+    if vfp {\n+        if let Some(uniform) = is_homogeneous_aggregate(ccx, arg) {\n+            arg.cast_to(ccx, uniform);\n+            return;\n+        }\n+    }\n+\n     let align = arg.layout.align(ccx).abi();\n     let total = arg.layout.size(ccx);\n     arg.cast_to(ccx, Uniform {\n@@ -49,12 +93,18 @@ fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tc\n }\n \n pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+    // If this is a target with a hard-float ABI, and the function is not explicitly\n+    // `extern \"aapcs\"`, then we must use the VFP registers for homogeneous aggregates.\n+    let vfp = ccx.sess().target.target.llvm_target.ends_with(\"hf\")\n+        && fty.cconv != CallConv::ArmAapcsCallConv\n+        && !fty.variadic;\n+\n     if !fty.ret.is_ignore() {\n-        classify_ret_ty(ccx, &mut fty.ret);\n+        classify_ret_ty(ccx, &mut fty.ret, vfp);\n     }\n \n     for arg in &mut fty.args {\n         if arg.is_ignore() { continue; }\n-        classify_arg_ty(ccx, arg);\n+        classify_arg_ty(ccx, arg, vfp);\n     }\n }"}]}