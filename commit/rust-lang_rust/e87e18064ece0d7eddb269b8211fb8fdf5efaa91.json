{"sha": "e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4N2UxODA2NGVjZTBkN2VkZGIyNjliODIxMWZiOGZkZjVlZmFhOTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-07T03:42:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-07T03:42:01Z"}, "message": "auto merge of #14712 : alexcrichton/rust/rollup, r=alexcrichton\n\nCloses #14675 (rustc: Encode argument names for traits)\r\nCloses #14681 (rustc: Avoid UB with signed division/remainder)\r\nCloses #14682 (librustc: Update AutoObject adjustment in writeback.)\r\nCloses #14683 (Avoid 16-byte filenames in rlibs)\r\nCloses #14687 (rustdoc: Inline static documentation across crates)\r\nCloses #14689 (Remove reference to ~str in documentation)\r\nCloses #14692 (Rename Iterator::len to count)\r\nCloses #14693 (Implement Eq for HashSet and HashMap)\r\nCloses #14699 (url: encode small bytes correctly.)\r\nCloses #14700 (rustdoc: Submit examples to play.rust-lang.org)\r\nCloses #14701 (mk: Run doc tests with --cfg dox)\r\nCloses #14710 (rustc: Preserve reachable extern fns with LTO)\r\nCloses #14711 (Removing unused wrapper to libc::close.)", "tree": {"sha": "d57ee1ed5bf68588d436c75d1ca91143981564b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d57ee1ed5bf68588d436c75d1ca91143981564b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "html_url": "https://github.com/rust-lang/rust/commit/e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd6683c729e3dc919e054839eed07702d938b727", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6683c729e3dc919e054839eed07702d938b727", "html_url": "https://github.com/rust-lang/rust/commit/bd6683c729e3dc919e054839eed07702d938b727"}, {"sha": "8bf6da0836be838f10e50de1105f92087f83f526", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bf6da0836be838f10e50de1105f92087f83f526", "html_url": "https://github.com/rust-lang/rust/commit/8bf6da0836be838f10e50de1105f92087f83f526"}], "stats": {"total": 879, "additions": 645, "deletions": 234}, "files": [{"sha": "dab40cb1654317412d1060d57136a25848719f9d", "filename": "mk/docs.mk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -43,7 +43,9 @@ L10N_LANGS := ja\n \n # The options are passed to the documentation generators.\n RUSTDOC_HTML_OPTS_NO_CSS = --markdown-before-content=doc/version_info.html \\\n-\t--markdown-in-header=doc/favicon.inc --markdown-after-content=doc/footer.inc\n+\t--markdown-in-header=doc/favicon.inc \\\n+\t--markdown-after-content=doc/footer.inc \\\n+\t--markdown-playground-url='http://play.rust-lang.org/'\n \n RUSTDOC_HTML_OPTS = $(RUSTDOC_HTML_OPTS_NO_CSS) --markdown-css rust.css\n "}, {"sha": "dacea3a4bfc498a98c180782394b25dc66e2dee3", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -818,7 +818,7 @@ endif\n ifeq ($(2),$$(CFG_BUILD))\n $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-crate-$(4)): $$(CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4))\n \t@$$(call E, run doc-crate-$(4) [$(2)])\n-\t$$(Q)$$(RUSTDOC_$(1)_T_$(2)_H_$(3)) --test \\\n+\t$$(Q)$$(RUSTDOC_$(1)_T_$(2)_H_$(3)) --test --cfg dox \\\n \t    \t$$(CRATEFILE_$(4)) --test-args \"$$(TESTARGS)\" && touch $$@\n else\n $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-crate-$(4)):"}, {"sha": "8da984a414bdad019cb1df8b8985030ee1da82c5", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -1545,7 +1545,7 @@ fn disassemble_extract(config: &Config, _props: &TestProps,\n fn count_extracted_lines(p: &Path) -> uint {\n     let x = File::open(&p.with_extension(\"ll\")).read_to_end().unwrap();\n     let x = str::from_utf8(x.as_slice()).unwrap();\n-    x.lines().len()\n+    x.lines().count()\n }\n \n "}, {"sha": "4e7d60586f23d51eb1b66882559451d5ecac91fc", "filename": "src/doc/footer.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fdoc%2Ffooter.inc", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fdoc%2Ffooter.inc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ffooter.inc?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -5,3 +5,5 @@ or the <a href=\"http://opensource.org/licenses/MIT\">MIT license</a>, at your opt\n </p><p>\n This file may not be copied, modified, or distributed except according to those terms.\n </p></footer>\n+<script type=\"text/javascript\" src=\"jquery.js\"></script>\n+<script type=\"text/javascript\" src=\"playpen.js\"></script>"}, {"sha": "45745c7b7bc7a696f31dd13711b87db1622596e6", "filename": "src/doc/guide-macros.md", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fdoc%2Fguide-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fdoc%2Fguide-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-macros.md?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -11,7 +11,7 @@ which both pattern-match on their input and both return early in one case,\n doing nothing otherwise:\n \n ~~~~\n-# enum T { SpecialA(uint), SpecialB(uint) };\n+# enum T { SpecialA(uint), SpecialB(uint) }\n # fn f() -> uint {\n # let input_1 = SpecialA(0);\n # let input_2 = SpecialA(0);\n@@ -37,7 +37,8 @@ lightweight custom syntax extensions, themselves defined using the\n the pattern in the above code:\n \n ~~~~\n-# enum T { SpecialA(uint), SpecialB(uint) };\n+# #![feature(macro_rules)]\n+# enum T { SpecialA(uint), SpecialB(uint) }\n # fn f() -> uint {\n # let input_1 = SpecialA(0);\n # let input_2 = SpecialA(0);\n@@ -55,6 +56,7 @@ early_return!(input_1 SpecialA);\n early_return!(input_2 SpecialB);\n # return 0;\n # }\n+# fn main() {}\n ~~~~\n \n Macros are defined in pattern-matching style: in the above example, the text\n@@ -155,7 +157,8 @@ separator token (a comma-separated list could be written `$(...),*`), and `+`\n instead of `*` to mean \"at least one\".\n \n ~~~~\n-# enum T { SpecialA(uint),SpecialB(uint),SpecialC(uint),SpecialD(uint)};\n+# #![feature(macro_rules)]\n+# enum T { SpecialA(uint),SpecialB(uint),SpecialC(uint),SpecialD(uint)}\n # fn f() -> uint {\n # let input_1 = SpecialA(0);\n # let input_2 = SpecialA(0);\n@@ -175,6 +178,7 @@ early_return!(input_1, [SpecialA|SpecialC|SpecialD]);\n early_return!(input_2, [SpecialB]);\n # return 0;\n # }\n+# fn main() {}\n ~~~~\n \n ### Transcription\n@@ -215,9 +219,10 @@ solves the problem.\n Now consider code like the following:\n \n ~~~~\n-# enum T1 { Good1(T2, uint), Bad1};\n+# #![feature(macro_rules)]\n+# enum T1 { Good1(T2, uint), Bad1}\n # struct T2 { body: T3 }\n-# enum T3 { Good2(uint), Bad2};\n+# enum T3 { Good2(uint), Bad2}\n # fn f(x: T1) -> uint {\n match x {\n     Good1(g1, val) => {\n@@ -232,6 +237,7 @@ match x {\n     _ => return 0 // default value\n }\n # }\n+# fn main() {}\n ~~~~\n \n All the complicated stuff is deeply indented, and the error-handling code is\n@@ -240,6 +246,7 @@ a match, but with a syntax that suits the problem better. The following macro\n can solve the problem:\n \n ~~~~\n+# #![feature(macro_rules)]\n macro_rules! biased_match (\n     // special case: `let (x) = ...` is illegal, so use `let x = ...` instead\n     ( ($e:expr) ~ ($p:pat) else $err:stmt ;\n@@ -261,9 +268,9 @@ macro_rules! biased_match (\n     )\n )\n \n-# enum T1 { Good1(T2, uint), Bad1};\n+# enum T1 { Good1(T2, uint), Bad1}\n # struct T2 { body: T3 }\n-# enum T3 { Good2(uint), Bad2};\n+# enum T3 { Good2(uint), Bad2}\n # fn f(x: T1) -> uint {\n biased_match!((x)       ~ (Good1(g1, val)) else { return 0 };\n               binds g1, val )\n@@ -273,13 +280,16 @@ biased_match!((g1.body) ~ (Good2(result) )\n // complicated stuff goes here\n return result + val;\n # }\n+# fn main() {}\n ~~~~\n \n This solves the indentation problem. But if we have a lot of chained matches\n like this, we might prefer to write a single macro invocation. The input\n pattern we want is clear:\n \n ~~~~\n+# #![feature(macro_rules)]\n+# fn main() {}\n # macro_rules! b(\n     ( $( ($e:expr) ~ ($p:pat) else $err:stmt ; )*\n       binds $( $bind_res:ident ),*\n@@ -301,14 +311,18 @@ process the semicolon-terminated lines, one-by-one. So, we want the following\n input patterns:\n \n ~~~~\n+# #![feature(macro_rules)]\n # macro_rules! b(\n     ( binds $( $bind_res:ident ),* )\n # => (0))\n+# fn main() {}\n ~~~~\n \n ...and:\n \n ~~~~\n+# #![feature(macro_rules)]\n+# fn main() {}\n # macro_rules! b(\n     (    ($e     :expr) ~ ($p     :pat) else $err     :stmt ;\n       $( ($e_rest:expr) ~ ($p_rest:pat) else $err_rest:stmt ; )*\n@@ -322,6 +336,8 @@ The resulting macro looks like this. Note that the separation into\n piece of syntax (the `let`) which we only want to transcribe once.\n \n ~~~~\n+# #![feature(macro_rules)]\n+# fn main() {\n \n macro_rules! biased_match_rec (\n     // Handle the first layer\n@@ -365,9 +381,9 @@ macro_rules! biased_match (\n )\n \n \n-# enum T1 { Good1(T2, uint), Bad1};\n+# enum T1 { Good1(T2, uint), Bad1}\n # struct T2 { body: T3 }\n-# enum T3 { Good2(uint), Bad2};\n+# enum T3 { Good2(uint), Bad2}\n # fn f(x: T1) -> uint {\n biased_match!(\n     (x)       ~ (Good1(g1, val)) else { return 0 };\n@@ -376,6 +392,7 @@ biased_match!(\n // complicated stuff goes here\n return result + val;\n # }\n+# }\n ~~~~\n \n This technique applies to many cases where transcribing a result all at once is not possible."}, {"sha": "1431c8a5c9ae45be0491eefc5bd1436341576424", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -523,6 +523,7 @@ vectors provided from C, using idiomatic Rust practices.\n \n ```\n #![no_std]\n+#![feature(globs)]\n \n # extern crate libc;\n extern crate core;"}, {"sha": "3957231a195a5eaccf07973bf2efbc9174926853", "filename": "src/doc/rust.css", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fdoc%2Frust.css", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fdoc%2Frust.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.css?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -313,6 +313,19 @@ table th {\n     padding: 5px;\n }\n \n+/* Code snippets */\n+\n+.rusttest { display: none; }\n+pre.rust { position: relative; }\n+pre.rust a { transform: scaleX(-1); }\n+.test-arrow {\n+    display: inline-block;\n+    position: absolute;\n+    top: 0;\n+    right: 10px;\n+    font-size: 150%;\n+}\n+\n @media (min-width: 1170px) {\n     pre {\n         font-size: 15px;"}, {"sha": "619e24af36063b65a7c908dab0623d612f2d8702", "filename": "src/doc/rust.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -1260,13 +1260,16 @@ a = Cat;\n Enumeration constructors can have either named or unnamed fields:\n \n ~~~~\n+# #![feature(struct_variant)]\n+# fn main() {\n enum Animal {\n     Dog (String, f64),\n     Cat { name: String, weight: f64 }\n }\n \n let mut a: Animal = Dog(\"Cocoa\".to_string(), 37.2);\n a = Cat { name: \"Spotty\".to_string(), weight: 2.7 };\n+# }\n ~~~~\n \n In this example, `Cat` is a _struct-like enum variant_,"}, {"sha": "3b4164ffbc618b367f57595acafff96a5aa8cd40", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -774,6 +774,7 @@ fn point_from_direction(dir: Direction) -> Point {\n Enum variants may also be structs. For example:\n \n ~~~~\n+# #![feature(struct_variant)]\n use std::f64;\n # struct Point { x: f64, y: f64 }\n # fn square(x: f64) -> f64 { x * x }\n@@ -789,6 +790,7 @@ fn area(sh: Shape) -> f64 {\n         }\n     }\n }\n+# fn main() {}\n ~~~~\n \n > *Note:* This feature of the compiler is currently gated behind the\n@@ -3046,6 +3048,7 @@ use farm::{chicken, cow};\n 2. Import everything in a module with a wildcard:\n \n ~~~\n+# #![feature(globs)]\n use farm::*;\n # mod farm {\n #     pub fn cow() { println!(\"Bat-chicken? What a stupid name!\") }"}, {"sha": "58f081b25e3e541f820ce60fa46738c7850624cc", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -241,17 +241,17 @@ enum Op {Union, Intersect, Assign, Difference}\n /// bv.set(5, true);\n /// bv.set(7, true);\n /// println!(\"{}\", bv.to_str());\n-/// println!(\"total bits set to true: {}\", bv.iter().count(|x| x));\n+/// println!(\"total bits set to true: {}\", bv.iter().filter(|x| *x).count());\n ///\n /// // flip all values in bitvector, producing non-primes less than 10\n /// bv.negate();\n /// println!(\"{}\", bv.to_str());\n-/// println!(\"total bits set to true: {}\", bv.iter().count(|x| x));\n+/// println!(\"total bits set to true: {}\", bv.iter().filter(|x| *x).count());\n ///\n /// // reset bitvector to empty\n /// bv.clear();\n /// println!(\"{}\", bv.to_str());\n-/// println!(\"total bits set to true: {}\", bv.iter().count(|x| x));\n+/// println!(\"total bits set to true: {}\", bv.iter().filter(|x| *x).count());\n /// ```\n #[deriving(Clone)]\n pub struct Bitv {\n@@ -461,7 +461,7 @@ impl Bitv {\n     /// bv.set(5, true);\n     /// bv.set(8, true);\n     /// // Count bits set to 1; result should be 5\n-    /// println!(\"{}\", bv.iter().count(|x| x));\n+    /// println!(\"{}\", bv.iter().filter(|x| *x).count());\n     /// ```\n     #[inline]\n     pub fn iter<'a>(&'a self) -> Bits<'a> {"}, {"sha": "94c617b58e8d2683ae20224cfabb349b8883663f", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -1131,31 +1131,31 @@ mod tests {\n         let v = &[0, ..128];\n         let m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n-            assert!(m.iter().len() == 128);\n+            assert!(m.iter().count() == 128);\n         })\n     }\n     #[bench]\n     fn bench_iter_mut(b: &mut test::Bencher) {\n         let v = &[0, ..128];\n         let mut m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n-            assert!(m.mut_iter().len() == 128);\n+            assert!(m.mut_iter().count() == 128);\n         })\n     }\n     #[bench]\n     fn bench_iter_rev(b: &mut test::Bencher) {\n         let v = &[0, ..128];\n         let m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n-            assert!(m.iter().rev().len() == 128);\n+            assert!(m.iter().rev().count() == 128);\n         })\n     }\n     #[bench]\n     fn bench_iter_mut_rev(b: &mut test::Bencher) {\n         let v = &[0, ..128];\n         let mut m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n-            assert!(m.mut_iter().rev().len() == 128);\n+            assert!(m.mut_iter().rev().count() == 128);\n         })\n     }\n }"}, {"sha": "a65c06107ce3469268e9b036f4dcb31f849ce710", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -17,7 +17,8 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![feature(macro_rules, managed_boxes, default_type_params, phase, globs)]\n #![no_std]"}, {"sha": "e631b8b77cf9cb6ac814fd01e66766d670603d7a", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -2155,7 +2155,7 @@ mod tests {\n     #[test]\n     fn test_mut_splitator() {\n         let mut xs = [0,1,0,2,3,0,0,4,5,0];\n-        assert_eq!(xs.mut_split(|x| *x == 0).len(), 6);\n+        assert_eq!(xs.mut_split(|x| *x == 0).count(), 6);\n         for slice in xs.mut_split(|x| *x == 0) {\n             slice.reverse();\n         }"}, {"sha": "f3118181bdcdd148f682b96e3b9d73360e8f28e3", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -31,7 +31,7 @@ pub struct SmallIntMap<T> {\n impl<V> Container for SmallIntMap<V> {\n     /// Return the number of elements in the map\n     fn len(&self) -> uint {\n-        self.v.iter().count(|elt| elt.is_some())\n+        self.v.iter().filter(|elt| elt.is_some()).count()\n     }\n \n     /// Return true if there are no elements in the map"}, {"sha": "5fd133b450f7610717d4b7eee023daae0808bb52", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -2181,7 +2181,7 @@ mod bench {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n         let len = s.char_len();\n \n-        b.iter(|| assert_eq!(s.chars().len(), len));\n+        b.iter(|| assert_eq!(s.chars().count(), len));\n     }\n \n     #[bench]\n@@ -2194,38 +2194,38 @@ mod bench {\n         Mary had a little lamb, Little lamb\";\n         let len = s.char_len();\n \n-        b.iter(|| assert_eq!(s.chars().len(), len));\n+        b.iter(|| assert_eq!(s.chars().count(), len));\n     }\n \n     #[bench]\n     fn char_iterator_rev(b: &mut Bencher) {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n         let len = s.char_len();\n \n-        b.iter(|| assert_eq!(s.chars().rev().len(), len));\n+        b.iter(|| assert_eq!(s.chars().rev().count(), len));\n     }\n \n     #[bench]\n     fn char_indicesator(b: &mut Bencher) {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n         let len = s.char_len();\n \n-        b.iter(|| assert_eq!(s.char_indices().len(), len));\n+        b.iter(|| assert_eq!(s.char_indices().count(), len));\n     }\n \n     #[bench]\n     fn char_indicesator_rev(b: &mut Bencher) {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n         let len = s.char_len();\n \n-        b.iter(|| assert_eq!(s.char_indices().rev().len(), len));\n+        b.iter(|| assert_eq!(s.char_indices().rev().count(), len));\n     }\n \n     #[bench]\n     fn split_unicode_ascii(b: &mut Bencher) {\n         let s = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n \n-        b.iter(|| assert_eq!(s.split('V').len(), 3));\n+        b.iter(|| assert_eq!(s.split('V').count(), 3));\n     }\n \n     #[bench]\n@@ -2240,16 +2240,16 @@ mod bench {\n         }\n         let s = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n \n-        b.iter(|| assert_eq!(s.split(NotAscii('V')).len(), 3));\n+        b.iter(|| assert_eq!(s.split(NotAscii('V')).count(), 3));\n     }\n \n \n     #[bench]\n     fn split_ascii(b: &mut Bencher) {\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n-        let len = s.split(' ').len();\n+        let len = s.split(' ').count();\n \n-        b.iter(|| assert_eq!(s.split(' ').len(), len));\n+        b.iter(|| assert_eq!(s.split(' ').count(), len));\n     }\n \n     #[bench]\n@@ -2264,34 +2264,34 @@ mod bench {\n             fn only_ascii(&self) -> bool { false }\n         }\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n-        let len = s.split(' ').len();\n+        let len = s.split(' ').count();\n \n-        b.iter(|| assert_eq!(s.split(NotAscii(' ')).len(), len));\n+        b.iter(|| assert_eq!(s.split(NotAscii(' ')).count(), len));\n     }\n \n     #[bench]\n     fn split_extern_fn(b: &mut Bencher) {\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n-        let len = s.split(' ').len();\n+        let len = s.split(' ').count();\n         fn pred(c: char) -> bool { c == ' ' }\n \n-        b.iter(|| assert_eq!(s.split(pred).len(), len));\n+        b.iter(|| assert_eq!(s.split(pred).count(), len));\n     }\n \n     #[bench]\n     fn split_closure(b: &mut Bencher) {\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n-        let len = s.split(' ').len();\n+        let len = s.split(' ').count();\n \n-        b.iter(|| assert_eq!(s.split(|c: char| c == ' ').len(), len));\n+        b.iter(|| assert_eq!(s.split(|c: char| c == ' ').count(), len));\n     }\n \n     #[bench]\n     fn split_slice(b: &mut Bencher) {\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n-        let len = s.split(' ').len();\n+        let len = s.split(' ').count();\n \n-        b.iter(|| assert_eq!(s.split(&[' ']).len(), len));\n+        b.iter(|| assert_eq!(s.split(&[' ']).count(), len));\n     }\n \n     #[bench]"}, {"sha": "6ca21262f51cc8754bdcc6fb7120577377edf9fc", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -1772,23 +1772,23 @@ mod tests {\n         assert_eq!(v.pop(), Some(()));\n         assert_eq!(v.pop(), None);\n \n-        assert_eq!(v.iter().len(), 0);\n+        assert_eq!(v.iter().count(), 0);\n         v.push(());\n-        assert_eq!(v.iter().len(), 1);\n+        assert_eq!(v.iter().count(), 1);\n         v.push(());\n-        assert_eq!(v.iter().len(), 2);\n+        assert_eq!(v.iter().count(), 2);\n \n         for &() in v.iter() {}\n \n-        assert_eq!(v.mut_iter().len(), 2);\n+        assert_eq!(v.mut_iter().count(), 2);\n         v.push(());\n-        assert_eq!(v.mut_iter().len(), 3);\n+        assert_eq!(v.mut_iter().count(), 3);\n         v.push(());\n-        assert_eq!(v.mut_iter().len(), 4);\n+        assert_eq!(v.mut_iter().count(), 4);\n \n         for &() in v.mut_iter() {}\n         unsafe { v.set_len(0); }\n-        assert_eq!(v.mut_iter().len(), 0);\n+        assert_eq!(v.mut_iter().count(), 0);\n     }\n \n     #[test]"}, {"sha": "64c53b658eff12006d8b3d5e974a339fcf78a986", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -529,11 +529,11 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n-    /// assert!(it.len() == 5);\n-    /// assert!(it.len() == 0);\n+    /// assert!(it.count() == 5);\n+    /// assert!(it.count() == 0);\n     /// ```\n     #[inline]\n-    fn len(&mut self) -> uint {\n+    fn count(&mut self) -> uint {\n         self.fold(0, |cnt, _x| cnt + 1)\n     }\n \n@@ -591,16 +591,6 @@ pub trait Iterator<A> {\n         None\n     }\n \n-    /// Count the number of elements satisfying the specified predicate\n-    #[inline]\n-    fn count(&mut self, predicate: |A| -> bool) -> uint {\n-        let mut i = 0;\n-        for x in *self {\n-            if predicate(x) { i += 1 }\n-        }\n-        i\n-    }\n-\n     /// Return the element that gives the maximum value from the\n     /// specified function.\n     ///\n@@ -738,6 +728,14 @@ pub trait ExactSize<A> : DoubleEndedIterator<A> {\n         }\n         None\n     }\n+\n+    #[inline]\n+    /// Return the exact length of the iterator.\n+    fn len(&self) -> uint {\n+        let (lower, upper) = self.size_hint();\n+        assert!(upper == Some(lower));\n+        lower\n+    }\n }\n \n // All adaptors that preserve the size of the wrapped iterator are fine\n@@ -2594,9 +2592,9 @@ mod tests {\n     #[test]\n     fn test_iterator_len() {\n         let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-        assert_eq!(v.slice(0, 4).iter().len(), 4);\n-        assert_eq!(v.slice(0, 10).iter().len(), 10);\n-        assert_eq!(v.slice(0, 0).iter().len(), 0);\n+        assert_eq!(v.slice(0, 4).iter().count(), 4);\n+        assert_eq!(v.slice(0, 10).iter().count(), 10);\n+        assert_eq!(v.slice(0, 0).iter().count(), 0);\n     }\n \n     #[test]\n@@ -2712,9 +2710,9 @@ mod tests {\n     #[test]\n     fn test_count() {\n         let xs = &[1, 2, 2, 1, 5, 9, 0, 2];\n-        assert_eq!(xs.iter().count(|x| *x == 2), 3);\n-        assert_eq!(xs.iter().count(|x| *x == 5), 1);\n-        assert_eq!(xs.iter().count(|x| *x == 95), 0);\n+        assert_eq!(xs.iter().filter(|x| **x == 2).count(), 3);\n+        assert_eq!(xs.iter().filter(|x| **x == 5).count(), 1);\n+        assert_eq!(xs.iter().filter(|x| **x == 95).count(), 0);\n     }\n \n     #[test]\n@@ -3044,10 +3042,10 @@ mod tests {\n         assert!(range(-10i, -1).collect::<Vec<int>>() ==\n                    vec![-10, -9, -8, -7, -6, -5, -4, -3, -2]);\n         assert!(range(0i, 5).rev().collect::<Vec<int>>() == vec![4, 3, 2, 1, 0]);\n-        assert_eq!(range(200, -5).len(), 0);\n-        assert_eq!(range(200, -5).rev().len(), 0);\n-        assert_eq!(range(200, 200).len(), 0);\n-        assert_eq!(range(200, 200).rev().len(), 0);\n+        assert_eq!(range(200, -5).count(), 0);\n+        assert_eq!(range(200, -5).rev().count(), 0);\n+        assert_eq!(range(200, 200).count(), 0);\n+        assert_eq!(range(200, 200).rev().count(), 0);\n \n         assert_eq!(range(0i, 100).size_hint(), (100, Some(100)));\n         // this test is only meaningful when sizeof uint < sizeof u64\n@@ -3062,8 +3060,8 @@ mod tests {\n                 vec![0i, 1, 2, 3, 4, 5]);\n         assert!(range_inclusive(0i, 5).rev().collect::<Vec<int>>() ==\n                 vec![5i, 4, 3, 2, 1, 0]);\n-        assert_eq!(range_inclusive(200, -5).len(), 0);\n-        assert_eq!(range_inclusive(200, -5).rev().len(), 0);\n+        assert_eq!(range_inclusive(200, -5).count(), 0);\n+        assert_eq!(range_inclusive(200, -5).rev().count(), 0);\n         assert!(range_inclusive(200, 200).collect::<Vec<int>>() == vec![200]);\n         assert!(range_inclusive(200, 200).rev().collect::<Vec<int>>() == vec![200]);\n     }"}, {"sha": "2ccf431fc22e138fe1161601eeb8e6cbc7187bdd", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -50,7 +50,8 @@\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![no_std]\n #![feature(globs, macro_rules, managed_boxes, phase, simd)]"}, {"sha": "4dea1fd75a4bf16b5923bfa6295c3ea57da661ee", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -252,7 +252,7 @@ pub mod traits {\n     use super::*;\n \n     use cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering, Equiv};\n-    use iter::{order, Iterator};\n+    use iter::order;\n     use container::Container;\n \n     impl<'a,T:PartialEq> PartialEq for &'a [T] {\n@@ -1141,7 +1141,6 @@ impl<'a, T:Clone> MutableCloneableVector<T> for &'a mut [T] {\n /// Unsafe operations\n pub mod raw {\n     use mem::transmute;\n-    use iter::Iterator;\n     use ptr::RawPtr;\n     use raw::Slice;\n     use option::{None, Option, Some};"}, {"sha": "936b698d4b10a771f5f6ed22190025e4862d9d25", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -867,7 +867,6 @@ static TAG_CONT_U8: u8 = 128u8;\n pub mod raw {\n     use mem;\n     use container::Container;\n-    use iter::Iterator;\n     use ptr::RawPtr;\n     use raw::Slice;\n     use slice::{ImmutableVector};\n@@ -1725,7 +1724,7 @@ impl<'a> StrSlice<'a> for &'a str {\n     fn is_alphanumeric(&self) -> bool { self.chars().all(char::is_alphanumeric) }\n \n     #[inline]\n-    fn char_len(&self) -> uint { self.chars().len() }\n+    fn char_len(&self) -> uint { self.chars().count() }\n \n     #[inline]\n     fn slice(&self, begin: uint, end: uint) -> &'a str {"}, {"sha": "10584223486c00a8dd9a495104727817d5383dc3", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -84,7 +84,8 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(globs, phase)]\n #![deny(missing_doc)]\n #![deny(deprecated_owned_vector)]"}, {"sha": "f3e1da77ce5c773e05801b8e7cf436350343d8a5", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -29,8 +29,8 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n-\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n #![deny(deprecated_owned_vector)]\n \n use std::cell::Cell;"}, {"sha": "c75d69480ce0d99a90856796604709e589b75c57", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -203,7 +203,8 @@\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n \n // NB this does *not* include globs, please keep it that way.\n #![feature(macro_rules, phase)]"}, {"sha": "daacf8b3c47610ff6294905ce7cbce2256eb83f1", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -111,7 +111,8 @@ if logging is disabled, none of the components of the log will be executed.\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![feature(macro_rules)]\n #![deny(missing_doc, deprecated_owned_vector)]"}, {"sha": "fae21e80f307256101498420fc2459bc9109e80a", "filename": "src/libnum/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibnum%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibnum%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -50,7 +50,8 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![deny(deprecated_owned_vector)]\n "}, {"sha": "7a12dcf9f7f319ffcf32b049c5b94c352dea6a37", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -21,7 +21,8 @@\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![feature(macro_rules, phase, globs)]\n #![no_std]"}, {"sha": "44c206162ab25f24cadc0d35fecc4b8a7edc301b", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -360,7 +360,8 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![feature(macro_rules, phase)]\n #![deny(missing_doc, deprecated_owned_vector)]"}, {"sha": "4d921fb97dc503f0fe205f43e55ad2d48a5fe777", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -109,7 +109,7 @@ impl<'a> Archive<'a> {\n     pub fn add_rlib(&mut self, rlib: &Path, name: &str,\n                     lto: bool) -> io::IoResult<()> {\n         let object = format!(\"{}.o\", name);\n-        let bytecode = format!(\"{}.bc.deflate\", name);\n+        let bytecode = format!(\"{}.bytecode.deflate\", name);\n         let mut ignore = vec!(bytecode.as_slice(), METADATA_FILENAME);\n         if lto {\n             ignore.push(object.as_slice());\n@@ -166,6 +166,15 @@ impl<'a> Archive<'a> {\n             if filename.contains(\".SYMDEF\") { continue }\n \n             let filename = format!(\"r-{}-{}\", name, filename);\n+            // LLDB (as mentioned in back::link) crashes on filenames of exactly\n+            // 16 bytes in length. If we're including an object file with\n+            // exactly 16-bytes of characters, give it some prefix so that it's\n+            // not 16 bytes.\n+            let filename = if filename.len() == 16 {\n+                format!(\"lldb-fix-{}\", filename)\n+            } else {\n+                filename\n+            };\n             let new_filename = file.with_filename(filename);\n             try!(fs::rename(file, &new_filename));\n             inputs.push(new_filename);"}, {"sha": "14369c7bbcd23ef4e825f4a129d51098b6bdc7c5", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -958,8 +958,13 @@ fn link_rlib<'a>(sess: &'a Session,\n \n             // For LTO purposes, the bytecode of this library is also inserted\n             // into the archive.\n+            //\n+            // Note that we make sure that the bytecode filename in the archive\n+            // is never exactly 16 bytes long by adding a 16 byte extension to\n+            // it. This is to work around a bug in LLDB that would cause it to\n+            // crash if the name of a file in an archive was exactly 16 bytes.\n             let bc = obj_filename.with_extension(\"bc\");\n-            let bc_deflated = obj_filename.with_extension(\"bc.deflate\");\n+            let bc_deflated = obj_filename.with_extension(\"bytecode.deflate\");\n             match fs::File::open(&bc).read_to_end().and_then(|data| {\n                 fs::File::create(&bc_deflated)\n                     .write(match flate::deflate_bytes(data.as_slice()) {"}, {"sha": "7449622366fc2678f4c7912ef4e05664c2916562", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -55,10 +55,10 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n         let archive = ArchiveRO::open(&path).expect(\"wanted an rlib\");\n         debug!(\"reading {}\", name);\n         let bc = time(sess.time_passes(),\n-                      format!(\"read {}.bc.deflate\", name).as_slice(),\n+                      format!(\"read {}.bytecode.deflate\", name).as_slice(),\n                       (),\n                       |_| {\n-                          archive.read(format!(\"{}.bc.deflate\",\n+                          archive.read(format!(\"{}.bytecode.deflate\",\n                                                name).as_slice())\n                       });\n         let bc = bc.expect(\"missing compressed bytecode in archive!\");"}, {"sha": "6287683c1a1416313d15822ed2085d2b40ec3fc3", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -209,6 +209,9 @@ pub static tag_dylib_dependency_formats: uint = 0x67;\n pub static tag_method_argument_names: uint = 0x8e;\n pub static tag_method_argument_name: uint = 0x8f;\n \n+pub static tag_reachable_extern_fns: uint = 0x90;\n+pub static tag_reachable_extern_fn_id: uint = 0x91;\n+\n #[deriving(Clone, Show)]\n pub struct LinkMeta {\n     pub crateid: CrateId,"}, {"sha": "c7ad74dce571c5fcae73c6900728d68fa3fe0fd0", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -314,3 +314,10 @@ pub fn get_method_arg_names(cstore: &cstore::CStore, did: ast::DefId)\n     let cdata = cstore.get_crate_data(did.krate);\n     decoder::get_method_arg_names(&*cdata, did.node)\n }\n+\n+pub fn get_reachable_extern_fns(cstore: &cstore::CStore, cnum: ast::CrateNum)\n+    -> Vec<ast::DefId>\n+{\n+    let cdata = cstore.get_crate_data(cnum);\n+    decoder::get_reachable_extern_fns(&*cdata)\n+}"}, {"sha": "c67b5bf1a60076363268a27db47f53d0e7a2df31", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -1325,3 +1325,17 @@ pub fn get_method_arg_names(cdata: Cmd, id: ast::NodeId) -> Vec<String> {\n     }\n     return ret;\n }\n+\n+pub fn get_reachable_extern_fns(cdata: Cmd) -> Vec<ast::DefId> {\n+    let mut ret = Vec::new();\n+    let items = reader::get_doc(ebml::Doc::new(cdata.data()),\n+                                tag_reachable_extern_fns);\n+    reader::tagged_docs(items, tag_reachable_extern_fn_id, |doc| {\n+        ret.push(ast::DefId {\n+            krate: cdata.cnum,\n+            node: reader::doc_as_u32(doc),\n+        });\n+        true\n+    });\n+    return ret;\n+}"}, {"sha": "37cb75e4697b30cff2dc253d672077d074ff6302", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -75,6 +75,7 @@ pub struct EncodeParams<'a> {\n     pub link_meta: &'a LinkMeta,\n     pub cstore: &'a cstore::CStore,\n     pub encode_inlined_item: EncodeInlinedItem<'a>,\n+    pub reachable: &'a NodeSet,\n }\n \n pub struct EncodeContext<'a> {\n@@ -87,6 +88,7 @@ pub struct EncodeContext<'a> {\n     pub cstore: &'a cstore::CStore,\n     pub encode_inlined_item: RefCell<EncodeInlinedItem<'a>>,\n     pub type_abbrevs: tyencode::abbrev_map,\n+    pub reachable: &'a NodeSet,\n }\n \n fn encode_name(ebml_w: &mut Encoder, name: Name) {\n@@ -351,7 +353,7 @@ fn encode_enum_variant_info(ecx: &EncodeContext,\n fn encode_path<PI: Iterator<PathElem> + Clone>(ebml_w: &mut Encoder,\n                                                mut path: PI) {\n     ebml_w.start_tag(tag_path);\n-    ebml_w.wr_tagged_u32(tag_path_len, path.clone().len() as u32);\n+    ebml_w.wr_tagged_u32(tag_path_len, path.clone().count() as u32);\n     for pe in path {\n         let tag = match pe {\n             ast_map::PathMod(_) => tag_path_elem_mod,\n@@ -1196,6 +1198,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                 &Required(ref tm) => {\n                     encode_attributes(ebml_w, tm.attrs.as_slice());\n                     encode_method_sort(ebml_w, 'r');\n+                    encode_method_argument_names(ebml_w, &*tm.decl);\n                 }\n \n                 &Provided(m) => {\n@@ -1210,6 +1213,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                     encode_method_sort(ebml_w, 'p');\n                     encode_inlined_item(ecx, ebml_w,\n                                         IIMethodRef(def_id, true, m));\n+                    encode_method_argument_names(ebml_w, &*m.decl);\n                 }\n             }\n \n@@ -1700,6 +1704,26 @@ fn encode_misc_info(ecx: &EncodeContext,\n     ebml_w.end_tag();\n }\n \n+fn encode_reachable_extern_fns(ecx: &EncodeContext, ebml_w: &mut Encoder) {\n+    ebml_w.start_tag(tag_reachable_extern_fns);\n+\n+    for id in ecx.reachable.iter() {\n+        match ecx.tcx.map.find(*id) {\n+            Some(ast_map::NodeItem(i)) => {\n+                match i.node {\n+                    ast::ItemFn(_, _, abi, _, _) if abi != abi::Rust => {\n+                        ebml_w.wr_tagged_u32(tag_reachable_extern_fn_id, *id);\n+                    }\n+                    _ => {}\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    ebml_w.end_tag();\n+}\n+\n fn encode_crate_dep(ebml_w: &mut Encoder,\n                     dep: decoder::CrateDep) {\n     ebml_w.start_tag(tag_crate_dep);\n@@ -1799,6 +1823,7 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n         encode_inlined_item,\n         link_meta,\n         non_inlineable_statics,\n+        reachable,\n         ..\n     } = parms;\n     let ecx = EncodeContext {\n@@ -1811,6 +1836,7 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n         cstore: cstore,\n         encode_inlined_item: RefCell::new(encode_inlined_item),\n         type_abbrevs: RefCell::new(HashMap::new()),\n+        reachable: reachable,\n      };\n \n     let mut ebml_w = writer::Encoder::new(wr);\n@@ -1862,6 +1888,7 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n     // Encode miscellaneous info.\n     i = ebml_w.writer.tell().unwrap();\n     encode_misc_info(&ecx, krate, &mut ebml_w);\n+    encode_reachable_extern_fns(&ecx, &mut ebml_w);\n     stats.misc_bytes = ebml_w.writer.tell().unwrap() - i;\n \n     // Encode and index the items."}, {"sha": "9a5f226bb73ceaf5546fcaf9718945d3c430b563", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -82,7 +82,7 @@ fn find_item(item: &Item, ctxt: &mut EntryContext) {\n         ItemFn(..) => {\n             if item.ident.name == ctxt.main_name {\n                  ctxt.ast_map.with_path(item.id, |mut path| {\n-                        if path.len() == 1 {\n+                        if path.count() == 1 {\n                             // This is a top-level function so can be 'main'\n                             if ctxt.main_fn.is_none() {\n                                 ctxt.main_fn = Some((item.id, item.span));"}, {"sha": "09f5d2a350769b79bf82024591c588ae200b7989", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 74, "deletions": 20, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -80,6 +80,7 @@ use libc::{c_uint, uint64_t};\n use std::c_str::ToCStr;\n use std::cell::{Cell, RefCell};\n use std::rc::Rc;\n+use std::{i8, i16, i32, i64};\n use syntax::abi::{X86, X86_64, Arm, Mips, Rust, RustIntrinsic};\n use syntax::ast_util::{local_def, is_local};\n use syntax::attr::AttrMetaMethods;\n@@ -777,35 +778,77 @@ pub fn cast_shift_rhs(op: ast::BinOp,\n     }\n }\n \n-pub fn fail_if_zero<'a>(\n+pub fn fail_if_zero_or_overflows<'a>(\n                     cx: &'a Block<'a>,\n                     span: Span,\n                     divrem: ast::BinOp,\n+                    lhs: ValueRef,\n                     rhs: ValueRef,\n                     rhs_t: ty::t)\n                     -> &'a Block<'a> {\n-    let text = if divrem == ast::BiDiv {\n-        \"attempted to divide by zero\"\n+    let (zero_text, overflow_text) = if divrem == ast::BiDiv {\n+        (\"attempted to divide by zero\",\n+         \"attempted to divide with overflow\")\n     } else {\n-        \"attempted remainder with a divisor of zero\"\n+        (\"attempted remainder with a divisor of zero\",\n+         \"attempted remainder with overflow\")\n     };\n-    let is_zero = match ty::get(rhs_t).sty {\n-      ty::ty_int(t) => {\n-        let zero = C_integral(Type::int_from_ty(cx.ccx(), t), 0u64, false);\n-        ICmp(cx, lib::llvm::IntEQ, rhs, zero)\n-      }\n-      ty::ty_uint(t) => {\n-        let zero = C_integral(Type::uint_from_ty(cx.ccx(), t), 0u64, false);\n-        ICmp(cx, lib::llvm::IntEQ, rhs, zero)\n-      }\n-      _ => {\n-        cx.sess().bug(format!(\"fail-if-zero on unexpected type: {}\",\n-                              ty_to_str(cx.tcx(), rhs_t)).as_slice());\n-      }\n+    let (is_zero, is_signed) = match ty::get(rhs_t).sty {\n+        ty::ty_int(t) => {\n+            let zero = C_integral(Type::int_from_ty(cx.ccx(), t), 0u64, false);\n+            (ICmp(cx, lib::llvm::IntEQ, rhs, zero), true)\n+        }\n+        ty::ty_uint(t) => {\n+            let zero = C_integral(Type::uint_from_ty(cx.ccx(), t), 0u64, false);\n+            (ICmp(cx, lib::llvm::IntEQ, rhs, zero), false)\n+        }\n+        _ => {\n+            cx.sess().bug(format!(\"fail-if-zero on unexpected type: {}\",\n+                                  ty_to_str(cx.tcx(), rhs_t)).as_slice());\n+        }\n     };\n-    with_cond(cx, is_zero, |bcx| {\n-        controlflow::trans_fail(bcx, span, InternedString::new(text))\n-    })\n+    let bcx = with_cond(cx, is_zero, |bcx| {\n+        controlflow::trans_fail(bcx, span, InternedString::new(zero_text))\n+    });\n+\n+    // To quote LLVM's documentation for the sdiv instruction:\n+    //\n+    //      Division by zero leads to undefined behavior. Overflow also leads\n+    //      to undefined behavior; this is a rare case, but can occur, for\n+    //      example, by doing a 32-bit division of -2147483648 by -1.\n+    //\n+    // In order to avoid undefined behavior, we perform runtime checks for\n+    // signed division/remainder which would trigger overflow. For unsigned\n+    // integers, no action beyond checking for zero need be taken.\n+    if is_signed {\n+        let (llty, min) = match ty::get(rhs_t).sty {\n+            ty::ty_int(t) => {\n+                let llty = Type::int_from_ty(cx.ccx(), t);\n+                let min = match t {\n+                    ast::TyI if llty == Type::i32(cx.ccx()) => i32::MIN as u64,\n+                    ast::TyI => i64::MIN as u64,\n+                    ast::TyI8 => i8::MIN as u64,\n+                    ast::TyI16 => i16::MIN as u64,\n+                    ast::TyI32 => i32::MIN as u64,\n+                    ast::TyI64 => i64::MIN as u64,\n+                };\n+                (llty, min)\n+            }\n+            _ => unreachable!(),\n+        };\n+        let minus_one = ICmp(bcx, lib::llvm::IntEQ, rhs,\n+                             C_integral(llty, -1, false));\n+        with_cond(bcx, minus_one, |bcx| {\n+            let is_min = ICmp(bcx, lib::llvm::IntEQ, lhs,\n+                              C_integral(llty, min, true));\n+            with_cond(bcx, is_min, |bcx| {\n+                controlflow::trans_fail(bcx, span,\n+                                        InternedString::new(overflow_text))\n+            })\n+        })\n+    } else {\n+        bcx\n+    }\n }\n \n pub fn trans_external_path(ccx: &CrateContext, did: ast::DefId, t: ty::t) -> ValueRef {\n@@ -2195,6 +2238,7 @@ pub fn crate_ctxt_to_encode_parms<'r>(cx: &'r CrateContext, ie: encoder::EncodeI\n             link_meta: &cx.link_meta,\n             cstore: &cx.sess().cstore,\n             encode_inlined_item: ie,\n+            reachable: &cx.reachable,\n         }\n }\n \n@@ -2331,6 +2375,16 @@ pub fn trans_crate(krate: ast::Crate,\n         ccx.item_symbols.borrow().find(id).map(|s| s.to_string())\n     }).collect();\n \n+    // For the purposes of LTO, we add to the reachable set all of the upstream\n+    // reachable extern fns. These functions are all part of the public ABI of\n+    // the final product, so LTO needs to preserve them.\n+    ccx.sess().cstore.iter_crate_data(|cnum, _| {\n+        let syms = csearch::get_reachable_extern_fns(&ccx.sess().cstore, cnum);\n+        reachable.extend(syms.move_iter().map(|did| {\n+            csearch::get_symbol(&ccx.sess().cstore, did)\n+        }));\n+    });\n+\n     // Make sure that some other crucial symbols are not eliminated from the\n     // module. This includes the main function, the crate map (used for debug\n     // log settings and I/O), and finally the curious rust_stack_exhausted"}, {"sha": "9f90de61cfeb6478bca49d3b66add136ac4dbc80", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -1297,8 +1297,8 @@ fn trans_eager_binop<'a>(\n             FDiv(bcx, lhs, rhs)\n         } else {\n             // Only zero-check integers; fp /0 is NaN\n-            bcx = base::fail_if_zero(bcx, binop_expr.span,\n-                                     op, rhs, rhs_t);\n+            bcx = base::fail_if_zero_or_overflows(bcx, binop_expr.span,\n+                                                  op, lhs, rhs, rhs_t);\n             if is_signed {\n                 SDiv(bcx, lhs, rhs)\n             } else {\n@@ -1311,8 +1311,8 @@ fn trans_eager_binop<'a>(\n             FRem(bcx, lhs, rhs)\n         } else {\n             // Only zero-check integers; fp %0 is NaN\n-            bcx = base::fail_if_zero(bcx, binop_expr.span,\n-                                     op, rhs, rhs_t);\n+            bcx = base::fail_if_zero_or_overflows(bcx, binop_expr.span,\n+                                                  op, lhs, rhs, rhs_t);\n             if is_signed {\n                 SRem(bcx, lhs, rhs)\n             } else {"}, {"sha": "bdb23aea06708acd655c29132a739bb99b6b31ae", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -191,11 +191,11 @@ fn ast_path_substs<AC:AstConv,RS:RegionScope>(\n     };\n \n     // Convert the type parameters supplied by the user.\n-    let supplied_ty_param_count = path.segments.iter().flat_map(|s| s.types.iter()).len();\n+    let supplied_ty_param_count = path.segments.iter().flat_map(|s| s.types.iter()).count();\n     let formal_ty_param_count = decl_generics.type_param_defs().len();\n     let required_ty_param_count = decl_generics.type_param_defs().iter()\n                                                .take_while(|x| x.default.is_none())\n-                                               .len();\n+                                               .count();\n     if supplied_ty_param_count < required_ty_param_count {\n         let expected = if required_ty_param_count < formal_ty_param_count {\n             \"expected at least\"\n@@ -407,7 +407,7 @@ pub fn ast_ty_to_builtin_ty<AC:AstConv,\n                     if path.segments\n                            .iter()\n                            .flat_map(|s| s.types.iter())\n-                           .len() > 1 {\n+                           .count() > 1 {\n                         this.tcx()\n                             .sess\n                             .span_err(path.span,"}, {"sha": "d25fc9cc5bcdb298abd9cd49517d9d4d487739ae", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -1615,7 +1615,7 @@ fn check_type_parameter_positions_in_path(function_context: &FnCtxt,\n             let formal_ty_param_count = generics.type_param_defs().len();\n             let required_ty_param_count = generics.type_param_defs().iter()\n                                                   .take_while(|x| x.default.is_none())\n-                                                  .len();\n+                                                  .count();\n             let supplied_ty_param_count = trait_segment.types.len();\n             if supplied_ty_param_count < required_ty_param_count {\n                 let msg = if required_ty_param_count < generics.type_param_defs().len() {\n@@ -3876,7 +3876,7 @@ pub fn instantiate_path(fcx: &FnCtxt,\n     let ty_param_count = tpt.generics.type_param_defs().len();\n     let ty_param_req = tpt.generics.type_param_defs().iter()\n                                                    .take_while(|x| x.default.is_none())\n-                                                   .len();\n+                                                   .count();\n     let mut ty_substs_len = 0;\n     for segment in pth.segments.iter() {\n         ty_substs_len += segment.types.len()"}, {"sha": "e488a946d4a14deae9248086f154691fd8d7c040", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -432,7 +432,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n                 // function check_cast_for_escaping_regions() in kind.rs\n                 // explaining how it goes about doing that.\n \n-                let source_ty = rcx.fcx.expr_ty(expr);\n+                let source_ty = rcx.resolve_node_type(expr.id);\n                 constrain_regions_in_type(rcx, trait_region,\n                                             infer::RelateObjectBound(expr.span), source_ty);\n             }"}, {"sha": "b93550384ae3b1483b51bc91d8f58ced9ed48f5f", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -260,7 +260,14 @@ impl<'cx> WritebackCx<'cx> {\n                         })\n                     }\n \n-                    adjustment => adjustment\n+                    ty::AutoObject(trait_store, bb, def_id, substs) => {\n+                        ty::AutoObject(\n+                            self.resolve(&trait_store, reason),\n+                            self.resolve(&bb, reason),\n+                            def_id,\n+                            self.resolve(&substs, reason)\n+                        )\n+                    }\n                 };\n                 debug!(\"Adjustments for node {}: {:?}\", id, resolved_adjustment);\n                 self.tcx().adjustments.borrow_mut().insert("}, {"sha": "eb84ed32335b95ba7b09667dda38eaa5d01b86ee", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -456,7 +456,7 @@ pub fn parameterized(cx: &ctxt,\n                 Some(default) => default.subst(cx, &substs) == actual,\n                 None => false\n             }\n-        }).len()\n+        }).count()\n     } else {\n         0\n     };"}, {"sha": "2a4774ffd84d4f5574edc73f1b7ef0c79fe00f4c", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -88,6 +88,10 @@ fn try_inline_def(cx: &core::DocContext,\n             record_extern_fqn(cx, did, clean::TypeModule);\n             clean::ModuleItem(build_module(cx, tcx, did))\n         }\n+        def::DefStatic(did, mtbl) => {\n+            record_extern_fqn(cx, did, clean::TypeStatic);\n+            clean::StaticItem(build_static(tcx, did, mtbl))\n+        }\n         _ => return None,\n     };\n     let fqn = csearch::get_item_path(tcx, did);\n@@ -343,3 +347,13 @@ fn build_module(cx: &core::DocContext, tcx: &ty::ctxt,\n         is_crate: false,\n     }\n }\n+\n+fn build_static(tcx: &ty::ctxt,\n+                did: ast::DefId,\n+                mutable: bool) -> clean::Static {\n+    clean::Static {\n+        type_: ty::lookup_item_type(tcx, did).ty.clean(),\n+        mutability: if mutable {clean::Mutable} else {clean::Immutable},\n+        expr: \"\\n\\n\\n\".to_string(), // trigger the \"[definition]\" links\n+    }\n+}"}, {"sha": "1706f00b70a6fb6f50f43ae8d43e004d1c5990d8", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -35,6 +35,8 @@ pub struct VisSpace(pub Option<ast::Visibility>);\n pub struct FnStyleSpace(pub ast::FnStyle);\n /// Wrapper struct for properly emitting a method declaration.\n pub struct Method<'a>(pub &'a clean::SelfTy, pub &'a clean::FnDecl);\n+/// Similar to VisSpace, but used for mutability\n+pub struct MutableSpace(pub clean::Mutability);\n \n impl VisSpace {\n     pub fn get(&self) -> Option<ast::Visibility> {\n@@ -438,24 +440,14 @@ impl fmt::Show for clean::Type {\n             clean::Unique(ref t) => write!(f, \"~{}\", **t),\n             clean::Managed(ref t) => write!(f, \"@{}\", **t),\n             clean::RawPointer(m, ref t) => {\n-                write!(f, \"*{}{}\",\n-                       match m {\n-                           clean::Mutable => \"mut \",\n-                           clean::Immutable => \"\",\n-                       }, **t)\n+                write!(f, \"*{}{}\", MutableSpace(m), **t)\n             }\n             clean::BorrowedRef{ lifetime: ref l, mutability, type_: ref ty} => {\n                 let lt = match *l {\n                     Some(ref l) => format!(\"{} \", *l),\n                     _ => \"\".to_string(),\n                 };\n-                write!(f, \"&amp;{}{}{}\",\n-                       lt,\n-                       match mutability {\n-                           clean::Mutable => \"mut \",\n-                           clean::Immutable => \"\",\n-                       },\n-                       **ty)\n+                write!(f, \"&amp;{}{}{}\", lt, MutableSpace(mutability), **ty)\n             }\n         }\n     }\n@@ -494,17 +486,13 @@ impl<'a> fmt::Show for Method<'a> {\n             clean::SelfStatic => {},\n             clean::SelfValue => args.push_str(\"self\"),\n             clean::SelfOwned => args.push_str(\"~self\"),\n-            clean::SelfBorrowed(Some(ref lt), clean::Immutable) => {\n-                args.push_str(format!(\"&amp;{} self\", *lt).as_slice());\n-            }\n-            clean::SelfBorrowed(Some(ref lt), clean::Mutable) => {\n-                args.push_str(format!(\"&amp;{} mut self\", *lt).as_slice());\n-            }\n-            clean::SelfBorrowed(None, clean::Mutable) => {\n-                args.push_str(\"&amp;mut self\");\n+            clean::SelfBorrowed(Some(ref lt), mtbl) => {\n+                args.push_str(format!(\"&amp;{} {}self\", *lt,\n+                                      MutableSpace(mtbl)).as_slice());\n             }\n-            clean::SelfBorrowed(None, clean::Immutable) => {\n-                args.push_str(\"&amp;self\");\n+            clean::SelfBorrowed(None, mtbl) => {\n+                args.push_str(format!(\"&amp;{}self\",\n+                                      MutableSpace(mtbl)).as_slice());\n             }\n         }\n         for (i, input) in d.inputs.values.iter().enumerate() {\n@@ -605,3 +593,12 @@ impl fmt::Show for clean::ViewListIdent {\n         }\n     }\n }\n+\n+impl fmt::Show for MutableSpace {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            MutableSpace(clean::Immutable) => Ok(()),\n+            MutableSpace(clean::Mutable) => write!(f, \"mut \"),\n+        }\n+    }\n+}"}, {"sha": "3c9358b03a9837bd18de9adf30a836db9977fd08", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -25,7 +25,7 @@ use html::escape::Escape;\n use t = syntax::parse::token;\n \n /// Highlights some source code, returning the HTML output.\n-pub fn highlight(src: &str, class: Option<&str>) -> String {\n+pub fn highlight(src: &str, class: Option<&str>, id: Option<&str>) -> String {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n     let sess = parse::new_parse_sess();\n     let fm = parse::string_to_filemap(&sess,\n@@ -36,6 +36,7 @@ pub fn highlight(src: &str, class: Option<&str>) -> String {\n     doit(&sess,\n          lexer::StringReader::new(&sess.span_diagnostic, fm),\n          class,\n+         id,\n          &mut out).unwrap();\n     str::from_utf8_lossy(out.unwrap().as_slice()).to_string()\n }\n@@ -47,11 +48,17 @@ pub fn highlight(src: &str, class: Option<&str>) -> String {\n /// it's used. All source code emission is done as slices from the source map,\n /// not from the tokens themselves, in order to stay true to the original\n /// source.\n-fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader, class: Option<&str>,\n+fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader,\n+        class: Option<&str>, id: Option<&str>,\n         out: &mut Writer) -> io::IoResult<()> {\n     use syntax::parse::lexer::Reader;\n \n-    try!(write!(out, \"<pre class='rust {}'>\\n\", class.unwrap_or(\"\")));\n+    try!(write!(out, \"<pre \"));\n+    match id {\n+        Some(id) => try!(write!(out, \"id='{}' \", id)),\n+        None => {}\n+    }\n+    try!(write!(out, \"class='rust {}'>\\n\", class.unwrap_or(\"\")));\n     let mut last = BytePos(0);\n     let mut is_attribute = false;\n     let mut is_macro = false;"}, {"sha": "e2fa57148c2c7e25d072d4e10d70c293f2f0bb12", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -16,6 +16,7 @@ pub struct Layout {\n     pub logo: String,\n     pub favicon: String,\n     pub krate: String,\n+    pub playground_url: String,\n }\n \n pub struct Page<'a> {\n@@ -108,11 +109,13 @@ r##\"<!DOCTYPE html>\n     </div>\n \n     <script>\n-        var rootPath = \"{root_path}\";\n-        var currentCrate = \"{krate}\";\n+        window.rootPath = \"{root_path}\";\n+        window.currentCrate = \"{krate}\";\n+        window.playgroundUrl = \"{play_url}\";\n     </script>\n     <script src=\"{root_path}jquery.js\"></script>\n     <script src=\"{root_path}main.js\"></script>\n+    {play_js}\n     <script async src=\"{root_path}search-index.js\"></script>\n </body>\n </html>\"##,\n@@ -124,6 +127,12 @@ r##\"<!DOCTYPE html>\n     favicon   = nonestr(layout.favicon.as_slice()),\n     sidebar   = *sidebar,\n     krate     = layout.krate,\n+    play_url  = layout.playground_url,\n+    play_js   = if layout.playground_url.len() == 0 {\n+        \"\".to_string()\n+    } else {\n+        format!(r#\"<script src=\"{}playpen.js\"></script>\"#, page.root_path)\n+    },\n     )\n }\n "}, {"sha": "260d26c543736c754904730f634f791a7ce56e09", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -27,14 +27,16 @@\n #![allow(non_camel_case_types)]\n \n use libc;\n-use std::cell::RefCell;\n+use std::cell::{RefCell, Cell};\n use std::fmt;\n use std::slice;\n use std::str;\n use std::collections::HashMap;\n \n use html::toc::TocBuilder;\n use html::highlight;\n+use html::escape::Escape;\n+use test;\n \n /// A unit struct which has the `fmt::Show` trait implemented. When\n /// formatted, this struct will emit the HTML corresponding to the rendered\n@@ -139,6 +141,9 @@ fn stripped_filtered_line<'a>(s: &'a str) -> Option<&'a str> {\n }\n \n local_data_key!(used_header_map: RefCell<HashMap<String, uint>>)\n+local_data_key!(test_idx: Cell<uint>)\n+// None == render an example, but there's no crate name\n+local_data_key!(pub playground_krate: Option<String>)\n \n pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n     extern fn block(ob: *mut hoedown_buffer, text: *hoedown_buffer,\n@@ -149,9 +154,9 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n             let opaque = opaque as *mut hoedown_html_renderer_state;\n             let my_opaque: &MyOpaque = &*((*opaque).opaque as *MyOpaque);\n             slice::raw::buf_as_slice((*text).data, (*text).size as uint, |text| {\n-                let text = str::from_utf8(text).unwrap();\n+                let origtext = str::from_utf8(text).unwrap();\n                 debug!(\"docblock: ==============\\n{}\\n=======\", text);\n-                let mut lines = text.lines().filter(|l| {\n+                let mut lines = origtext.lines().filter(|l| {\n                     stripped_filtered_line(*l).is_none()\n                 });\n                 let text = lines.collect::<Vec<&str>>().connect(\"\\n\");\n@@ -180,9 +185,26 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                 };\n \n                 if !rendered {\n-                    let output = highlight::highlight(text.as_slice(),\n-                                                      None).as_slice()\n-                                                           .to_c_str();\n+                    let mut s = String::new();\n+                    let id = playground_krate.get().map(|krate| {\n+                        let idx = test_idx.get().unwrap();\n+                        let i = idx.get();\n+                        idx.set(i + 1);\n+\n+                        let test = origtext.lines().map(|l| {\n+                            stripped_filtered_line(l).unwrap_or(l)\n+                        }).collect::<Vec<&str>>().connect(\"\\n\");\n+                        let krate = krate.as_ref().map(|s| s.as_slice());\n+                        let test = test::maketest(test.as_slice(), krate, false);\n+                        s.push_str(format!(\"<span id='rust-example-raw-{}' \\\n+                                             class='rusttest'>{}</span>\",\n+                                           i, Escape(test.as_slice())).as_slice());\n+                        format!(\"rust-example-rendered-{}\", i)\n+                    });\n+                    let id = id.as_ref().map(|a| a.as_slice());\n+                    s.push_str(highlight::highlight(text.as_slice(), None, id)\n+                                         .as_slice());\n+                    let output = s.to_c_str();\n                     output.with_ref(|r| {\n                         hoedown_buffer_puts(ob, r)\n                     })\n@@ -377,6 +399,7 @@ fn parse_lang_string(string: &str) -> (bool,bool,bool,bool) {\n /// previous state (if any).\n pub fn reset_headers() {\n     used_header_map.replace(Some(RefCell::new(HashMap::new())));\n+    test_idx.replace(Some(Cell::new(0)));\n }\n \n impl<'a> fmt::Show for Markdown<'a> {"}, {"sha": "eab4a2c137a58786f8ad0f4ef10a6c6772f6edcc", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -51,7 +51,7 @@ use rustc::util::nodemap::NodeSet;\n use clean;\n use doctree;\n use fold::DocFolder;\n-use html::format::{VisSpace, Method, FnStyleSpace};\n+use html::format::{VisSpace, Method, FnStyleSpace, MutableSpace};\n use html::highlight;\n use html::item_type::{ItemType, shortty};\n use html::item_type;\n@@ -230,6 +230,7 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n             logo: \"\".to_string(),\n             favicon: \"\".to_string(),\n             krate: krate.name.clone(),\n+            playground_url: \"\".to_string(),\n         },\n         include_sources: true,\n         render_redirect_pages: false,\n@@ -250,6 +251,14 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n                             if \"html_logo_url\" == x.as_slice() => {\n                         cx.layout.logo = s.to_string();\n                     }\n+                    clean::NameValue(ref x, ref s)\n+                            if \"html_playground_url\" == x.as_slice() => {\n+                        cx.layout.playground_url = s.to_string();\n+                        let name = krate.name.clone();\n+                        if markdown::playground_krate.get().is_none() {\n+                            markdown::playground_krate.replace(Some(Some(name)));\n+                        }\n+                    }\n                     clean::Word(ref x)\n                             if \"html_no_source\" == x.as_slice() => {\n                         cx.include_sources = false;\n@@ -450,6 +459,7 @@ fn write_shared(cx: &Context,\n     try!(write(cx.dst.join(\"jquery.js\"),\n                include_bin!(\"static/jquery-2.1.0.min.js\")));\n     try!(write(cx.dst.join(\"main.js\"), include_bin!(\"static/main.js\")));\n+    try!(write(cx.dst.join(\"playpen.js\"), include_bin!(\"static/playpen.js\")));\n     try!(write(cx.dst.join(\"main.css\"), include_bin!(\"static/main.css\")));\n     try!(write(cx.dst.join(\"normalize.css\"),\n                include_bin!(\"static/normalize.css\")));\n@@ -1441,11 +1451,12 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n \n                 try!(write!(w, \"\n                     <tr>\n-                        <td><code>{}static {}: {}</code>{}</td>\n+                        <td><code>{}static {}{}: {}</code>{}</td>\n                         <td class='docblock'>{}&nbsp;</td>\n                     </tr>\n                 \",\n                 VisSpace(myitem.visibility),\n+                MutableSpace(s.mutability),\n                 *myitem.name.get_ref(),\n                 s.type_,\n                 Initializer(s.expr.as_slice(), Item { cx: cx, item: myitem }),\n@@ -2042,7 +2053,7 @@ fn build_sidebar(m: &clean::Module) -> HashMap<String, Vec<String>> {\n impl<'a> fmt::Show for Source<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let Source(s) = *self;\n-        let lines = s.lines().len();\n+        let lines = s.lines().count();\n         let mut cols = 0;\n         let mut tmp = lines;\n         while tmp > 0 {\n@@ -2054,14 +2065,15 @@ impl<'a> fmt::Show for Source<'a> {\n             try!(write!(fmt, \"<span id='{0:u}'>{0:1$u}</span>\\n\", i, cols));\n         }\n         try!(write!(fmt, \"</pre>\"));\n-        try!(write!(fmt, \"{}\", highlight::highlight(s.as_slice(), None)));\n+        try!(write!(fmt, \"{}\", highlight::highlight(s.as_slice(), None, None)));\n         Ok(())\n     }\n }\n \n fn item_macro(w: &mut fmt::Formatter, it: &clean::Item,\n               t: &clean::Macro) -> fmt::Result {\n-    try!(w.write(highlight::highlight(t.source.as_slice(), Some(\"macro\")).as_bytes()));\n+    try!(w.write(highlight::highlight(t.source.as_slice(), Some(\"macro\"),\n+                                      None).as_bytes()));\n     document(w, it)\n }\n "}, {"sha": "07dd1a6c173cc2af9cbbb9351ab0b6127c9a0714", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -156,7 +156,7 @@ nav.sub {\n     padding: 0 10px;\n     margin-bottom: 10px;\n }\n-.block h2 { \n+.block h2 {\n     margin-top: 0;\n     text-align: center;\n }\n@@ -396,6 +396,17 @@ pre.rust .doccomment { color: #4D4D4C; }\n pre.rust .macro, pre.rust .macro-nonterminal { color: #3E999F; }\n pre.rust .lifetime { color: #B76514; }\n \n+.rusttest { display: none; }\n+pre.rust { position: relative; }\n+pre.rust a { transform: scaleX(-1); }\n+.test-arrow {\n+    display: inline-block;\n+    position: absolute;\n+    top: 0;\n+    right: 10px;\n+    font-size: 150%;\n+}\n+\n .methods .section-header {\n     /* Override parent class attributes. */\n     border-bottom: none !important;"}, {"sha": "195028c85bfa9869641c8d33d0211acbd87d52f3", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -678,7 +678,7 @@\n         window.register_implementors(window.pending_implementors);\n     }\n \n-    // See documentaiton in html/render.rs for what this is doing.\n+    // See documentation in html/render.rs for what this is doing.\n     var query = getQueryStringParams();\n     if (query['gotosrc']) {\n         window.location = $('#src-' + query['gotosrc']).attr('href');"}, {"sha": "5d2fe9c2166028e53f4000a4951145d95890e4ec", "filename": "src/librustdoc/html/static/playpen.js", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fplaypen.js", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fplaypen.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fplaypen.js?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*jslint browser: true, es5: true */\n+/*globals $: true, rootPath: true */\n+\n+(function() {\n+    if (window.playgroundUrl) {\n+        $('pre.rust').hover(function() {\n+            var id = '#' + $(this).attr('id').replace('rendered', 'raw');\n+            var a = $('<a>').text('\u21f1').attr('class', 'test-arrow');\n+            var code = $(id).text();\n+            a.attr('href', window.playgroundUrl + '?code=' +\n+                           encodeURIComponent(code));\n+            a.attr('target', '_blank');\n+            $(this).append(a);\n+        }, function() {\n+            $(this).find('a').remove();\n+        });\n+    }\n+}());\n+"}, {"sha": "5bc6d8031ac29754970897aae18b3e904b9b69de", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -32,7 +32,7 @@ pub struct Toc {\n \n impl Toc {\n     fn count_entries_with_level(&self, level: u32) -> uint {\n-        self.entries.iter().count(|e| e.level == level)\n+        self.entries.iter().filter(|e| e.level == level).count()\n     }\n }\n "}, {"sha": "e623d54675c25c820cddfe898067f9ebca0fe2fb", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -126,7 +126,9 @@ pub fn opts() -> Vec<getopts::OptGroup> {\n         optmulti(\"\", \"markdown-after-content\",\n                  \"files to include inline between the content and </body> of a rendered \\\n                  Markdown file\",\n-                 \"FILES\")\n+                 \"FILES\"),\n+        optopt(\"\", \"markdown-playground-url\",\n+               \"URL to send code snippets to\", \"URL\")\n     )\n }\n "}, {"sha": "3b6203ef668f7642ddef895919d87f1291f8aac1", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -16,6 +16,7 @@ use getopts;\n use testing;\n \n use html::escape::Escape;\n+use html::markdown;\n use html::markdown::{MarkdownWithToc, find_testable_code, reset_headers};\n use test::Collector;\n \n@@ -84,6 +85,11 @@ pub fn render(input: &str, mut output: Path, matches: &getopts::Matches) -> int\n     }\n \n     let input_str = load_or_return!(input, 1, 2);\n+    let playground = matches.opt_str(\"markdown-playground-url\");\n+    if playground.is_some() {\n+        markdown::playground_krate.replace(Some(None));\n+    }\n+    let playground = playground.unwrap_or(\"\".to_string());\n \n     let (in_header, before_content, after_content) =\n         match (load_external_files(matches.opt_strs(\"markdown-in-header\")\n@@ -148,6 +154,9 @@ pub fn render(input: &str, mut output: Path, matches: &getopts::Matches) -> int\n     {before_content}\n     <h1 class=\"title\">{title}</h1>\n     {text}\n+    <script type=\"text/javascript\">\n+        window.playgroundUrl = \"{playground}\";\n+    </script>\n     {after_content}\n </body>\n </html>\"#,\n@@ -156,7 +165,9 @@ pub fn render(input: &str, mut output: Path, matches: &getopts::Matches) -> int\n         in_header = in_header,\n         before_content = before_content,\n         text = MarkdownWithToc(text),\n-        after_content = after_content);\n+        after_content = after_content,\n+        playground = playground,\n+        );\n \n     match err {\n         Err(e) => {\n@@ -173,7 +184,7 @@ pub fn render(input: &str, mut output: Path, matches: &getopts::Matches) -> int\n pub fn test(input: &str, libs: HashSet<Path>, mut test_args: Vec<String>) -> int {\n     let input_str = load_or_return!(input, 1, 2);\n \n-    let mut collector = Collector::new(input.to_string(), libs, true, true);\n+    let mut collector = Collector::new(input.to_string(), libs, true);\n     find_testable_code(input_str.as_slice(), &mut collector);\n     test_args.unshift(\"rustdoctest\".to_string());\n     testing::test_main(test_args.as_slice(), collector.tests);"}, {"sha": "bc1da5b629e13030eac9690045178aa239f369d8", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -91,7 +91,6 @@ pub fn run(input: &str,\n \n     let mut collector = Collector::new(krate.name.to_string(),\n                                        libs,\n-                                       false,\n                                        false);\n     collector.fold_crate(krate);\n \n@@ -103,8 +102,8 @@ pub fn run(input: &str,\n }\n \n fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool,\n-           no_run: bool, loose_feature_gating: bool) {\n-    let test = maketest(test, cratename, loose_feature_gating);\n+           no_run: bool) {\n+    let test = maketest(test, Some(cratename), true);\n     let input = driver::StrInput(test.to_string());\n \n     let sessopts = config::Options {\n@@ -201,29 +200,31 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool,\n     }\n }\n \n-fn maketest(s: &str, cratename: &str, loose_feature_gating: bool) -> String {\n-    let mut prog = String::from_str(r\"\n+pub fn maketest(s: &str, cratename: Option<&str>, lints: bool) -> String {\n+    let mut prog = String::new();\n+    if lints {\n+        prog.push_str(r\"\n #![deny(warnings)]\n #![allow(unused_variable, dead_assignment, unused_mut, attribute_usage, dead_code)]\n \");\n-\n-    if loose_feature_gating {\n-        // FIXME #12773: avoid inserting these when the tutorial & manual\n-        // etc. have been updated to not use them so prolifically.\n-        prog.push_str(\"#![feature(macro_rules, globs, struct_variant, managed_boxes) ]\\n\");\n     }\n \n     if !s.contains(\"extern crate\") {\n-        if s.contains(cratename) {\n-            prog.push_str(format!(\"extern crate {};\\n\",\n-                                  cratename).as_slice());\n+        match cratename {\n+            Some(cratename) => {\n+                if s.contains(cratename) {\n+                    prog.push_str(format!(\"extern crate {};\\n\",\n+                                          cratename).as_slice());\n+                }\n+            }\n+            None => {}\n         }\n     }\n     if s.contains(\"fn main\") {\n         prog.push_str(s);\n     } else {\n-        prog.push_str(\"fn main() {\\n\");\n-        prog.push_str(s);\n+        prog.push_str(\"fn main() {\\n    \");\n+        prog.push_str(s.replace(\"\\n\", \"\\n    \").as_slice());\n         prog.push_str(\"\\n}\");\n     }\n \n@@ -238,13 +239,11 @@ pub struct Collector {\n     use_headers: bool,\n     current_header: Option<String>,\n     cratename: String,\n-\n-    loose_feature_gating: bool\n }\n \n impl Collector {\n     pub fn new(cratename: String, libs: HashSet<Path>,\n-               use_headers: bool, loose_feature_gating: bool) -> Collector {\n+               use_headers: bool) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -253,8 +252,6 @@ impl Collector {\n             use_headers: use_headers,\n             current_header: None,\n             cratename: cratename,\n-\n-            loose_feature_gating: loose_feature_gating\n         }\n     }\n \n@@ -268,7 +265,6 @@ impl Collector {\n         self.cnt += 1;\n         let libs = self.libs.clone();\n         let cratename = self.cratename.to_string();\n-        let loose_feature_gating = self.loose_feature_gating;\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n@@ -281,8 +277,7 @@ impl Collector {\n                         cratename.as_slice(),\n                         libs,\n                         should_fail,\n-                        no_run,\n-                        loose_feature_gating);\n+                        no_run);\n             }),\n         });\n     }"}, {"sha": "08348c963338265c0812094ac2054a8d6e3ca0be", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -20,7 +20,8 @@ Core encoding and decoding interfaces.\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(macro_rules, managed_boxes, default_type_params, phase)]\n \n // test harness access"}, {"sha": "571c579470441e92ee8a0ebb0e783be2467aa5ad", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -684,8 +684,8 @@ impl DefaultResizePolicy {\n /// denial-of-service attacks (Hash DoS). This behaviour can be\n /// overridden with one of the constructors.\n ///\n-/// It is required that the keys implement the `PartialEq` and `Hash` traits, although\n-/// this can frequently be achieved by using `#[deriving(PartialEq, Hash)]`.\n+/// It is required that the keys implement the `Eq` and `Hash` traits, although\n+/// this can frequently be achieved by using `#[deriving(Eq, Hash)]`.\n ///\n /// Relevant papers/articles:\n ///\n@@ -1422,6 +1422,8 @@ impl<K: Eq + Hash<S>, V: PartialEq, S, H: Hasher<S>> PartialEq for HashMap<K, V,\n     }\n }\n \n+impl<K: Eq + Hash<S>, V: Eq, S, H: Hasher<S>> Eq for HashMap<K, V, H> {}\n+\n impl<K: Eq + Hash<S> + Show, V: Show, S, H: Hasher<S>> Show for HashMap<K, V, H> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, r\"\\{\"));\n@@ -1486,7 +1488,7 @@ pub type SetMoveItems<K> =\n \n /// An implementation of a hash set using the underlying representation of a\n /// HashMap where the value is (). As with the `HashMap` type, a `HashSet`\n-/// requires that the elements implement the `PartialEq` and `Hash` traits.\n+/// requires that the elements implement the `Eq` and `Hash` traits.\n #[deriving(Clone)]\n pub struct HashSet<T, H = sip::SipHasher> {\n     map: HashMap<T, (), H>\n@@ -1500,6 +1502,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> PartialEq for HashSet<T, H> {\n     }\n }\n \n+impl<T: Eq + Hash<S>, S, H: Hasher<S>> Eq for HashSet<T, H> {}\n+\n impl<T: Eq + Hash<S>, S, H: Hasher<S>> Container for HashSet<T, H> {\n     fn len(&self) -> uint { self.map.len() }\n }"}, {"sha": "109832b7c4795b88b0f99fa270dd5a694b103b24", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -101,7 +101,8 @@\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(macro_rules, globs, asm, managed_boxes, thread_local, link_args,\n            linkage, default_type_params, phase, concat_idents, quad_precision_float)]\n "}, {"sha": "805da8021ed2c0cafd7af5ea0ec7e62b1441d26c", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -212,7 +212,7 @@ macro_rules! unimplemented(\n     () => (fail!(\"not yet implemented\"))\n )\n \n-/// Use the syntax described in `std::fmt` to create a value of type `~str`.\n+/// Use the syntax described in `std::fmt` to create a value of type `String`.\n /// See `std::fmt` for more information.\n ///\n /// # Example\n@@ -465,7 +465,7 @@ pub mod builtin {\n     /// ```\n     /// let rust = bytes!(\"r\", 'u', \"st\", 255);\n     /// assert_eq!(rust[1], 'u' as u8);\n-    /// assert_eq!(rust[5], 255);\n+    /// assert_eq!(rust[4], 255);\n     /// ```\n     #[macro_export]\n     macro_rules! bytes( ($($e:expr),*) => ({ /* compiler built-in */ }) )\n@@ -482,10 +482,14 @@ pub mod builtin {\n     /// # Example\n     ///\n     /// ```\n+    /// #![feature(concat_idents)]\n+    ///\n+    /// # fn main() {\n     /// fn foobar() -> int { 23 }\n     ///\n     /// let f = concat_idents!(foo, bar);\n     /// println!(\"{}\", f());\n+    /// # }\n     /// ```\n     #[macro_export]\n     macro_rules! concat_idents( ($($e:ident),*) => ({ /* compiler built-in */ }) )"}, {"sha": "133a8db90facc6832ab16c6ff82ef74b59c44d95", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -13,7 +13,6 @@\n use char;\n use clone::Clone;\n use container::Container;\n-use iter::Iterator;\n use num::{NumCast, Zero, One, cast, Int};\n use num::{Float, FPNaN, FPInfinite, ToPrimitive};\n use num;"}, {"sha": "381ebc082006470532e48f591d6bc10643191af4", "filename": "src/libstd/os.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -56,12 +56,6 @@ use libc::c_char;\n #[cfg(windows)]\n use str::OwnedStr;\n \n-/// Delegates to the libc close() function, returning the same return value.\n-pub fn close(fd: int) -> int {\n-    unsafe {\n-        libc::close(fd as c_int) as int\n-    }\n-}\n \n pub static TMPBUF_SZ : uint = 1000u;\n static BUF_BYTES : uint = 2048u;"}, {"sha": "ee1935628871e52115f95b126fd0f92691c5d465", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -353,17 +353,17 @@ mod test {\n     #[test]\n     fn test_gen_ascii_str() {\n         let mut r = task_rng();\n-        assert_eq!(r.gen_ascii_chars().take(0).len(), 0u);\n-        assert_eq!(r.gen_ascii_chars().take(10).len(), 10u);\n-        assert_eq!(r.gen_ascii_chars().take(16).len(), 16u);\n+        assert_eq!(r.gen_ascii_chars().take(0).count(), 0u);\n+        assert_eq!(r.gen_ascii_chars().take(10).count(), 10u);\n+        assert_eq!(r.gen_ascii_chars().take(16).count(), 16u);\n     }\n \n     #[test]\n     fn test_gen_vec() {\n         let mut r = task_rng();\n-        assert_eq!(r.gen_iter::<u8>().take(0).len(), 0u);\n-        assert_eq!(r.gen_iter::<u8>().take(10).len(), 10u);\n-        assert_eq!(r.gen_iter::<f64>().take(16).len(), 16u);\n+        assert_eq!(r.gen_iter::<u8>().take(0).count(), 0u);\n+        assert_eq!(r.gen_iter::<u8>().take(10).count(), 10u);\n+        assert_eq!(r.gen_iter::<f64>().take(16).count(), 16u);\n     }\n \n     #[test]"}, {"sha": "94472ee72414c0b4fe65e30d831d25f1406b9512", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -84,7 +84,7 @@ fn demangle(writer: &mut Writer, s: &str) -> IoResult<()> {\n             if i == 0 {\n                 valid = chars.next().is_none();\n                 break\n-            } else if chars.by_ref().take(i - 1).len() != i - 1 {\n+            } else if chars.by_ref().take(i - 1).count() != i - 1 {\n                 valid = false;\n             }\n         }\n@@ -505,7 +505,6 @@ mod imp {\n     use c_str::CString;\n     use container::Container;\n     use io::{IoResult, Writer};\n-    use iter::Iterator;\n     use libc;\n     use mem;\n     use ops::Drop;"}, {"sha": "fc4d5fec5f52a06e861232dce288da04ee610a2a", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -18,7 +18,8 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(phase)]\n #![deny(deprecated_owned_vector)]\n "}, {"sha": "cc813262576ad9d7d28493a7198b4c434edd048f", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -45,7 +45,8 @@\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![feature(macro_rules, phase)]\n "}, {"sha": "f087b9289c3d723432601ad54e92df23f8a34a4f", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -17,7 +17,8 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(phase)]\n #![deny(deprecated_owned_vector)]\n "}, {"sha": "30054ea4c92384c1a320c2aa8b9abf13c31e9749", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -16,7 +16,8 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(default_type_params)]\n \n use std::collections::HashMap;\n@@ -161,10 +162,10 @@ fn encode_inner(s: &str, full_url: bool) -> String {\n                     out.push_char(ch);\n                   }\n \n-                  _ => out.push_str(format!(\"%{:X}\", ch as uint).as_slice())\n+                  _ => out.push_str(format!(\"%{:02X}\", ch as uint).as_slice())\n                 }\n             } else {\n-                out.push_str(format!(\"%{:X}\", ch as uint).as_slice());\n+                out.push_str(format!(\"%{:02X}\", ch as uint).as_slice());\n             }\n           }\n         }\n@@ -1178,6 +1179,8 @@ mod tests {\n         assert_eq!(encode(\"@\"), \"@\".to_string());\n         assert_eq!(encode(\"[\"), \"[\".to_string());\n         assert_eq!(encode(\"]\"), \"]\".to_string());\n+        assert_eq!(encode(\"\\0\"), \"%00\".to_string());\n+        assert_eq!(encode(\"\\n\"), \"%0A\".to_string());\n     }\n \n     #[test]\n@@ -1207,6 +1210,8 @@ mod tests {\n         assert_eq!(encode_component(\"@\"), \"%40\".to_string());\n         assert_eq!(encode_component(\"[\"), \"%5B\".to_string());\n         assert_eq!(encode_component(\"]\"), \"%5D\".to_string());\n+        assert_eq!(encode_component(\"\\0\"), \"%00\".to_string());\n+        assert_eq!(encode_component(\"\\n\"), \"%0A\".to_string());\n     }\n \n     #[test]"}, {"sha": "2459a7fc273a99cd046ec702e5aa171e7cf3e74a", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -60,7 +60,8 @@ Examples of string representations:\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/\")]\n+       html_root_url = \"http://doc.rust-lang.org/\",\n+       html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![feature(default_type_params)]\n "}, {"sha": "c1087b0f55ecf21c892542deb5100a2e985cab46", "filename": "src/test/run-make/issue-14500/Makefile", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-make%2Fissue-14500%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-make%2Fissue-14500%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-14500%2FMakefile?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -0,0 +1,14 @@\n+-include ../tools.mk\n+\n+# Test to make sure that reachable extern fns are always available in final\n+# productcs, including when LTO is used. In this test, the `foo` crate has a\n+# reahable symbol, and is a dependency of the `bar` crate. When the `bar` crate\n+# is compiled with LTO, it shouldn't strip the symbol from `foo`, and that's the\n+# only way that `foo.c` will successfully compile.\n+\n+all:\n+\t$(RUSTC) foo.rs --crate-type=rlib\n+\t$(RUSTC) bar.rs --crate-type=staticlib -Zlto -L. -o $(TMPDIR)/libbar.a\n+\t$(CC) foo.c -lbar -o $(call RUN_BINFILE,foo) $(EXTRACFLAGS)\n+\t$(call RUN,foo)\n+"}, {"sha": "4b4916fe96d636eaf83d1bb07d9852b6ece1cebf", "filename": "src/test/run-make/issue-14500/bar.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-make%2Fissue-14500%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-make%2Fissue-14500%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-14500%2Fbar.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate foo;"}, {"sha": "25098ac479d060005fde9a089da28da719a8dfa6", "filename": "src/test/run-make/issue-14500/foo.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.c?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern void foo();\n+\n+int main() {\n+    foo();\n+    return 0;\n+}"}, {"sha": "ceca907403f91d0431821a52d20a7bd03a257b0f", "filename": "src/test/run-make/issue-14500/foo.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[no_mangle]\n+pub extern fn foo() {}"}, {"sha": "9b44c3e582a71da13db68407fedadaaf5435796c", "filename": "src/test/run-make/lto-smoke-c/Makefile", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -1,23 +1,10 @@\n -include ../tools.mk\n \n-ifdef IS_WINDOWS\n-\tEXTRAFLAGS :=\n-else\n-ifeq ($(shell uname),Darwin)\n-else\n-ifeq ($(shell uname),FreeBSD)\n-\tEXTRAFLAGS := -lm -lpthread -lgcc_s\n-else\n-\tEXTRAFLAGS := -lm -lrt -ldl -lpthread\n-endif\n-endif\n-endif\n-\n # Apparently older versions of GCC segfault if -g is passed...\n CC := $(CC:-g=)\n \n all:\n \t$(RUSTC) foo.rs -Z lto\n \tln -s $(call STATICLIB,foo-*) $(call STATICLIB,foo)\n-\t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(EXTRAFLAGS) -lstdc++\n+\t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(EXTRACFLAGS) -lstdc++\n \t$(call RUN,bar)"}, {"sha": "c9c4c455e4f805025f44b0af09b028dc1cd62663", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -53,6 +53,20 @@ RPATH_LINK_SEARCH = -Wl,-rpath-link=$(1)\n endif\n endif\n \n+# Extra flags needed to compile a working executable with the standard library\n+ifdef IS_WINDOWS\n+\tEXTRACFLAGS :=\n+else\n+ifeq ($(shell uname),Darwin)\n+else\n+ifeq ($(shell uname),FreeBSD)\n+\tEXTRACFLAGS := -lm -lpthread -lgcc_s\n+else\n+\tEXTRACFLAGS := -lm -lrt -ldl -lpthread\n+endif\n+endif\n+endif\n+\n REMOVE_DYLIBS     = rm $(TMPDIR)/$(call DYLIB_GLOB,$(1))\n REMOVE_RLIBS      = rm $(TMPDIR)/$(call RLIB_GLOB,$(1))\n "}, {"sha": "5fb2274a446fe216dfada9259caa9d28925ac8de", "filename": "src/test/run-pass/issue-11612.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-pass%2Fissue-11612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-pass%2Fissue-11612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11612.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// #11612\n+// We weren't updating the auto adjustments with all the resolved\n+// type information after type check.\n+\n+trait A {}\n+\n+struct B<'a, T> {\n+    f: &'a T\n+}\n+\n+impl<'a, T> A for B<'a, T> {}\n+\n+fn foo(_: &A) {}\n+\n+fn bar<G>(b: &B<G>) {\n+    foo(b);       // Coercion should work\n+    foo(b as &A); // Explicit cast should work as well\n+}\n+\n+fn main() {}"}, {"sha": "f9b542dea56f0f082cdb42c71fb39a20a8641e6d", "filename": "src/test/run-pass/issue-13204.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-pass%2Fissue-13204.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-pass%2Fissue-13204.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13204.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -14,7 +14,7 @@\n pub trait Foo {\n     fn bar<'a, I: Iterator<&'a ()>>(&self, it: I) -> uint {\n         let mut xs = it.filter(|_| true);\n-        xs.len()\n+        xs.count()\n     }\n }\n "}, {"sha": "762152c92038ff213ba57c7a2c755f30337d2fe7", "filename": "src/test/run-pass/issue-8460.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87e18064ece0d7eddb269b8211fb8fdf5efaa91/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8460.rs?ref=e87e18064ece0d7eddb269b8211fb8fdf5efaa91", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::{int, i8, i16, i32, i64};\n+use std::task;\n+\n+fn main() {\n+    assert!(task::try(proc() int::MIN / -1).is_err());\n+    assert!(task::try(proc() i8::MIN / -1).is_err());\n+    assert!(task::try(proc() i16::MIN / -1).is_err());\n+    assert!(task::try(proc() i32::MIN / -1).is_err());\n+    assert!(task::try(proc() i64::MIN / -1).is_err());\n+    assert!(task::try(proc() 1i / 0).is_err());\n+    assert!(task::try(proc() 1i8 / 0).is_err());\n+    assert!(task::try(proc() 1i16 / 0).is_err());\n+    assert!(task::try(proc() 1i32 / 0).is_err());\n+    assert!(task::try(proc() 1i64 / 0).is_err());\n+    assert!(task::try(proc() int::MIN % -1).is_err());\n+    assert!(task::try(proc() i8::MIN % -1).is_err());\n+    assert!(task::try(proc() i16::MIN % -1).is_err());\n+    assert!(task::try(proc() i32::MIN % -1).is_err());\n+    assert!(task::try(proc() i64::MIN % -1).is_err());\n+    assert!(task::try(proc() 1i % 0).is_err());\n+    assert!(task::try(proc() 1i8 % 0).is_err());\n+    assert!(task::try(proc() 1i16 % 0).is_err());\n+    assert!(task::try(proc() 1i32 % 0).is_err());\n+    assert!(task::try(proc() 1i64 % 0).is_err());\n+}"}]}