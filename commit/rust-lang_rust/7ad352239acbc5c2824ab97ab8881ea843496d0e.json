{"sha": "7ad352239acbc5c2824ab97ab8881ea843496d0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZDM1MjIzOWFjYmM1YzI4MjRhYjk3YWI4ODgxZWE4NDM0OTZkMGU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-02-23T18:52:46Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-02-23T18:52:46Z"}, "message": "Fix width bug for long patterns in match arms\n\nFixes failing test", "tree": {"sha": "387dcfe3d93f1612bec859da1289af504305965f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/387dcfe3d93f1612bec859da1289af504305965f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ad352239acbc5c2824ab97ab8881ea843496d0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad352239acbc5c2824ab97ab8881ea843496d0e", "html_url": "https://github.com/rust-lang/rust/commit/7ad352239acbc5c2824ab97ab8881ea843496d0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ad352239acbc5c2824ab97ab8881ea843496d0e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a84f42d13c992e4ca437e838844ed8becab1ebbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a84f42d13c992e4ca437e838844ed8becab1ebbf", "html_url": "https://github.com/rust-lang/rust/commit/a84f42d13c992e4ca437e838844ed8becab1ebbf"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "52c0aee279d87a6aaf8bc392f601613de777c123", "filename": "src/expr.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7ad352239acbc5c2824ab97ab8881ea843496d0e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad352239acbc5c2824ab97ab8881ea843496d0e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=7ad352239acbc5c2824ab97ab8881ea843496d0e", "patch": "@@ -1229,8 +1229,6 @@ impl Rewrite for ast::Arm {\n                                                trimmed_last_line_width(&pats_str)));\n \n         let pats_str = format!(\"{}{}\", pats_str, guard_str);\n-        // Where the next text can start.\n-        let line_start = trimmed_last_line_width(&pats_str);\n \n         let body = match body.node {\n             ast::ExprKind::Block(ref block) if !is_unsafe_block(block) &&\n@@ -1249,14 +1247,12 @@ impl Rewrite for ast::Arm {\n         let alt_block_sep = String::from(\"\\n\") +\n                             &shape.indent.block_only().to_string(context.config);\n \n+        let pat_width = extra_offset(&pats_str, shape);\n         // Let's try and get the arm body on the same line as the condition.\n         // 4 = ` => `.len()\n-        if shape.width > line_start + comma.len() + 4 {\n+        if shape.width > pat_width + comma.len() + 4 {\n             let arm_shape =\n-                shape.shrink_left(line_start + 4).unwrap().sub_width(comma.len()).unwrap().block();\n-            // TODO\n-            // let offset = Indent::new(shape.indent.block_indent,\n-            //                          line_start + 4 - shape.indent.block_indent);\n+                shape.shrink_left(pat_width + 4).unwrap().sub_width(comma.len()).unwrap().block();\n             let rewrite = nop_block_collapse(body.rewrite(context, arm_shape), arm_shape.width);\n             let is_block = if let ast::ExprKind::Block(..) = body.node {\n                 true\n@@ -1285,9 +1281,6 @@ impl Rewrite for ast::Arm {\n \n         // FIXME: we're doing a second rewrite of the expr; This may not be\n         // necessary.\n-        // TODO\n-        // let body_budget = try_opt!(shape.width.checked_sub(context.config.tab_spaces));\n-        // let indent = shape.indent.block_only().block_indent(context.config);\n         let body_shape = try_opt!(shape.sub_width(context.config.tab_spaces))\n             .block_indent(context.config.tab_spaces);\n         let next_line_body = try_opt!(nop_block_collapse(body.rewrite(context, body_shape),\n@@ -1338,10 +1331,8 @@ fn rewrite_guard(context: &RewriteContext,\n         // 4 = ` if `, 5 = ` => {`\n         let overhead = pattern_width + 4 + 5;\n         if overhead < shape.width {\n-            let cond_str =\n-                guard.rewrite(context,\n-                              Shape::legacy(shape.width - overhead,\n-                                            shape.indent + pattern_width + 4));\n+            let cond_shape = shape.shrink_left(pattern_width + 4).unwrap().sub_width(5).unwrap();\n+            let cond_str = guard.rewrite(context, cond_shape);\n             if let Some(cond_str) = cond_str {\n                 return Some(format!(\" if {}\", cond_str));\n             }"}, {"sha": "7cf094906cccdcadf00b0a1db4725553362df6bb", "filename": "tests/target/long-match-arms-brace-newline.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ad352239acbc5c2824ab97ab8881ea843496d0e/tests%2Ftarget%2Flong-match-arms-brace-newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad352239acbc5c2824ab97ab8881ea843496d0e/tests%2Ftarget%2Flong-match-arms-brace-newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flong-match-arms-brace-newline.rs?ref=7ad352239acbc5c2824ab97ab8881ea843496d0e", "patch": "@@ -7,7 +7,10 @@ fn main() {\n     {\n         aaaaaaaa::Bbbbb::Ccccccccccccc(_, Some(ref x)) if x ==\n                                                           \"aaaaaaaaaaa \\\n-                                                           aaaaaaa aaaaaa\" => Ok(()),\n+                                                           aaaaaaa aaaaaa\" =>\n+        {\n+            Ok(())\n+        }\n         _ => Err(x),\n     }\n }"}]}