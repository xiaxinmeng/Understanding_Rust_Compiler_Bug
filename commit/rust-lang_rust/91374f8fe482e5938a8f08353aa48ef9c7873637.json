{"sha": "91374f8fe482e5938a8f08353aa48ef9c7873637", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMzc0ZjhmZTQ4MmU1OTM4YThmMDgzNTNhYTQ4ZWY5Yzc4NzM2Mzc=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-02-13T08:51:06Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-02-25T15:47:15Z"}, "message": "rustc: combine BareFnTy and ClosureTy into FnSig.", "tree": {"sha": "b01b4f1f7d613c0f3c72e77bbc2eac877b5b68a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b01b4f1f7d613c0f3c72e77bbc2eac877b5b68a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91374f8fe482e5938a8f08353aa48ef9c7873637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91374f8fe482e5938a8f08353aa48ef9c7873637", "html_url": "https://github.com/rust-lang/rust/commit/91374f8fe482e5938a8f08353aa48ef9c7873637", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91374f8fe482e5938a8f08353aa48ef9c7873637/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28f1cf4262074dfdb5f83a24cf81dbabf37a1d94", "url": "https://api.github.com/repos/rust-lang/rust/commits/28f1cf4262074dfdb5f83a24cf81dbabf37a1d94", "html_url": "https://github.com/rust-lang/rust/commit/28f1cf4262074dfdb5f83a24cf81dbabf37a1d94"}], "stats": {"total": 1025, "additions": 420, "deletions": 605}, "files": [{"sha": "c9abcd38b95ad88da2351317942d5535ccdc6334", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -600,7 +600,7 @@ impl_trans_normalize!('gcx,\n     Ty<'gcx>,\n     &'gcx Substs<'gcx>,\n     ty::FnSig<'gcx>,\n-    &'gcx ty::BareFnTy<'gcx>,\n+    ty::PolyFnSig<'gcx>,\n     ty::ClosureSubsts<'gcx>,\n     ty::PolyTraitRef<'gcx>,\n     ty::ExistentialTraitRef<'gcx>\n@@ -1652,7 +1652,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn closure_type(&self,\n                         def_id: DefId,\n                         substs: ty::ClosureSubsts<'tcx>)\n-                        -> ty::ClosureTy<'tcx>\n+                        -> ty::PolyFnSig<'tcx>\n     {\n         if let InferTables::InProgress(tables) = self.tables {\n             if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {"}, {"sha": "5af8e7e52d888407f57518c0bfd4addaedda1f6e", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -44,8 +44,8 @@ enum RootUnsafeContext {\n \n fn type_is_unsafe_function(ty: Ty) -> bool {\n     match ty.sty {\n-        ty::TyFnDef(.., ref f) |\n-        ty::TyFnPtr(ref f) => f.unsafety == hir::Unsafety::Unsafe,\n+        ty::TyFnDef(.., f) |\n+        ty::TyFnPtr(f) => f.unsafety() == hir::Unsafety::Unsafe,\n         _ => false,\n     }\n }"}, {"sha": "cdbf92e93a4cb983bcd70c53dc849e7e9e15117d", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -40,7 +40,7 @@ struct ExprVisitor<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n impl<'a, 'gcx, 'tcx> ExprVisitor<'a, 'gcx, 'tcx> {\n     fn def_id_is_transmute(&self, def_id: DefId) -> bool {\n         let intrinsic = match self.infcx.tcx.item_type(def_id).sty {\n-            ty::TyFnDef(.., ref bfty) => bfty.abi == RustIntrinsic,\n+            ty::TyFnDef(.., bfty) => bfty.abi() == RustIntrinsic,\n             _ => return false\n         };\n         intrinsic && self.infcx.tcx.item_name(def_id) == \"transmute\"\n@@ -137,9 +137,9 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for ExprVisitor<'a, 'gcx, 'tcx> {\n                 let typ = self.infcx.tables.borrow().node_id_to_type(expr.id);\n                 let typ = self.infcx.tcx.lift_to_global(&typ).unwrap();\n                 match typ.sty {\n-                    ty::TyFnDef(.., ref bare_fn_ty) if bare_fn_ty.abi == RustIntrinsic => {\n-                        let from = bare_fn_ty.sig.skip_binder().inputs()[0];\n-                        let to = bare_fn_ty.sig.skip_binder().output();\n+                    ty::TyFnDef(.., sig) if sig.abi() == RustIntrinsic => {\n+                        let from = sig.inputs().skip_binder()[0];\n+                        let to = *sig.output().skip_binder();\n                         self.check_transmute(expr.span, from, to, expr.id);\n                     }\n                     _ => {"}, {"sha": "28f9a23d4593c3ce7c1acf39a71027587e62e53a", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -1434,7 +1434,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         let fn_ty = self.ir.tcx.item_type(self.ir.tcx.hir.local_def_id(id));\n         let fn_ret = match fn_ty.sty {\n             ty::TyClosure(closure_def_id, substs) =>\n-                self.ir.tcx.closure_type(closure_def_id, substs).sig.output(),\n+                self.ir.tcx.closure_type(closure_def_id, substs).output(),\n             _ => fn_ty.fn_ret()\n         };\n "}, {"sha": "0d498ce1aa3f36011d76103c1fd31a5001c920dc", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -1224,7 +1224,7 @@ fn confirm_closure_candidate<'cx, 'gcx, 'tcx>(\n \n     confirm_callable_candidate(selcx,\n                                obligation,\n-                               &closure_type.sig,\n+                               closure_type,\n                                util::TupleArgumentsFlag::No)\n         .with_addl_obligations(vtable.nested)\n         .with_addl_obligations(obligations)\n@@ -1233,7 +1233,7 @@ fn confirm_closure_candidate<'cx, 'gcx, 'tcx>(\n fn confirm_callable_candidate<'cx, 'gcx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n-    fn_sig: &ty::PolyFnSig<'tcx>,\n+    fn_sig: ty::PolyFnSig<'tcx>,\n     flag: util::TupleArgumentsFlag)\n     -> Progress<'tcx>\n {"}, {"sha": "98f814a54f8482760120ee0dec985e3a99f7fab2", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -1405,16 +1405,18 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             // provide an impl, but only for suitable `fn` pointers\n-            ty::TyFnDef(.., &ty::BareFnTy {\n+            ty::TyFnDef(.., ty::Binder(ty::FnSig {\n                 unsafety: hir::Unsafety::Normal,\n                 abi: Abi::Rust,\n-                ref sig,\n-            }) |\n-            ty::TyFnPtr(&ty::BareFnTy {\n+                variadic: false,\n+                ..\n+            })) |\n+            ty::TyFnPtr(ty::Binder(ty::FnSig {\n                 unsafety: hir::Unsafety::Normal,\n                 abi: Abi::Rust,\n-                ref sig\n-            }) if !sig.variadic() => {\n+                variadic: false,\n+                ..\n+            })) => {\n                 candidates.vec.push(FnPointerCandidate);\n             }\n \n@@ -2781,7 +2783,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         let ty::Binder((trait_ref, _)) =\n             self.tcx().closure_trait_ref_and_return_type(obligation.predicate.def_id(),\n                                                          obligation.predicate.0.self_ty(), // (1)\n-                                                         &closure_type.sig,\n+                                                         closure_type,\n                                                          util::TupleArgumentsFlag::No);\n         // (1) Feels icky to skip the binder here, but OTOH we know\n         // that the self-type is an unboxed closure type and hence is"}, {"sha": "602f27a64d4d8d195b14c2903e4cfe6b2ac06f78", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -482,7 +482,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn closure_trait_ref_and_return_type(self,\n         fn_trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n-        sig: &ty::PolyFnSig<'tcx>,\n+        sig: ty::PolyFnSig<'tcx>,\n         tuple_arguments: TupleArgumentsFlag)\n         -> ty::Binder<(ty::TraitRef<'tcx>, Ty<'tcx>)>\n     {"}, {"sha": "f1945fd57ef644f8e46749c6cbc01991e1e1239c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 16, "deletions": 40, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -32,7 +32,7 @@ use ty::{self, TraitRef, Ty, TypeAndMut};\n use ty::{TyS, TypeVariants, Slice};\n use ty::{AdtKind, AdtDef, ClosureSubsts, Region};\n use hir::FreevarMap;\n-use ty::{BareFnTy, InferTy, ParamTy, ProjectionTy, ExistentialPredicate};\n+use ty::{PolyFnSig, InferTy, ParamTy, ProjectionTy, ExistentialPredicate};\n use ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid};\n use ty::TypeVariants::*;\n use ty::layout::{Layout, TargetDataLayout};\n@@ -53,6 +53,7 @@ use std::ops::Deref;\n use std::rc::Rc;\n use std::iter;\n use std::cmp::Ordering;\n+use syntax::abi;\n use syntax::ast::{self, Name, NodeId};\n use syntax::attr;\n use syntax::symbol::{Symbol, keywords};\n@@ -94,7 +95,6 @@ pub struct CtxtInterners<'tcx> {\n     type_: RefCell<FxHashSet<Interned<'tcx, TyS<'tcx>>>>,\n     type_list: RefCell<FxHashSet<Interned<'tcx, Slice<Ty<'tcx>>>>>,\n     substs: RefCell<FxHashSet<Interned<'tcx, Substs<'tcx>>>>,\n-    bare_fn: RefCell<FxHashSet<Interned<'tcx, BareFnTy<'tcx>>>>,\n     region: RefCell<FxHashSet<Interned<'tcx, Region>>>,\n     existential_predicates: RefCell<FxHashSet<Interned<'tcx, Slice<ExistentialPredicate<'tcx>>>>>,\n }\n@@ -106,7 +106,6 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n             type_: RefCell::new(FxHashSet()),\n             type_list: RefCell::new(FxHashSet()),\n             substs: RefCell::new(FxHashSet()),\n-            bare_fn: RefCell::new(FxHashSet()),\n             region: RefCell::new(FxHashSet()),\n             existential_predicates: RefCell::new(FxHashSet()),\n         }\n@@ -219,7 +218,7 @@ pub struct TypeckTables<'tcx> {\n     pub upvar_capture_map: ty::UpvarCaptureMap<'tcx>,\n \n     /// Records the type of each closure.\n-    pub closure_tys: NodeMap<ty::ClosureTy<'tcx>>,\n+    pub closure_tys: NodeMap<ty::PolyFnSig<'tcx>>,\n \n     /// Records the kind of each closure.\n     pub closure_kinds: NodeMap<ty::ClosureKind>,\n@@ -859,23 +858,6 @@ impl<'a, 'tcx> Lift<'tcx> for &'a Slice<ExistentialPredicate<'a>> {\n     }\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for &'a BareFnTy<'a> {\n-    type Lifted = &'tcx BareFnTy<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)\n-                             -> Option<&'tcx BareFnTy<'tcx>> {\n-        if tcx.interners.arena.in_arena(*self as *const _) {\n-            return Some(unsafe { mem::transmute(*self) });\n-        }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-\n pub mod tls {\n     use super::{CtxtInterners, GlobalCtxt, TyCtxt};\n \n@@ -1028,7 +1010,6 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             TyDynamic, TyClosure, TyTuple, TyParam, TyInfer, TyProjection, TyAnon);\n \n         println!(\"Substs interner: #{}\", self.interners.substs.borrow().len());\n-        println!(\"BareFnTy interner: #{}\", self.interners.bare_fn.borrow().len());\n         println!(\"Region interner: #{}\", self.interners.region.borrow().len());\n         println!(\"Stability interner: #{}\", self.stability_interner.borrow().len());\n         println!(\"Layout interner: #{}\", self.layout_interner.borrow().len());\n@@ -1087,12 +1068,6 @@ impl<'tcx: 'lcx, 'lcx> Borrow<[Kind<'lcx>]> for Interned<'tcx, Substs<'tcx>> {\n     }\n }\n \n-impl<'tcx: 'lcx, 'lcx> Borrow<BareFnTy<'lcx>> for Interned<'tcx, BareFnTy<'tcx>> {\n-    fn borrow<'a>(&'a self) -> &'a BareFnTy<'lcx> {\n-        self.0\n-    }\n-}\n-\n impl<'tcx> Borrow<Region> for Interned<'tcx, Region> {\n     fn borrow<'a>(&'a self) -> &'a Region {\n         self.0\n@@ -1181,9 +1156,6 @@ fn keep_local<'tcx, T: ty::TypeFoldable<'tcx>>(x: &T) -> bool {\n }\n \n direct_interners!('tcx,\n-    bare_fn: mk_bare_fn(|fty: &BareFnTy| {\n-        keep_local(&fty.sig)\n-    }) -> BareFnTy<'tcx>,\n     region: mk_region(|r| {\n         match r {\n             &ty::ReVar(_) | &ty::ReSkolemized(..) => true,\n@@ -1209,12 +1181,11 @@ slice_interners!(\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Create an unsafe fn ty based on a safe fn ty.\n-    pub fn safe_to_unsafe_fn_ty(self, bare_fn: &BareFnTy<'tcx>) -> Ty<'tcx> {\n-        assert_eq!(bare_fn.unsafety, hir::Unsafety::Normal);\n-        self.mk_fn_ptr(self.mk_bare_fn(ty::BareFnTy {\n+    pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {\n+        assert_eq!(sig.unsafety(), hir::Unsafety::Normal);\n+        self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig {\n             unsafety: hir::Unsafety::Unsafe,\n-            abi: bare_fn.abi,\n-            sig: bare_fn.sig.clone()\n+            ..sig\n         }))\n     }\n \n@@ -1341,11 +1312,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn mk_fn_def(self, def_id: DefId,\n                      substs: &'tcx Substs<'tcx>,\n-                     fty: &'tcx BareFnTy<'tcx>) -> Ty<'tcx> {\n+                     fty: PolyFnSig<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(TyFnDef(def_id, substs, fty))\n     }\n \n-    pub fn mk_fn_ptr(self, fty: &'tcx BareFnTy<'tcx>) -> Ty<'tcx> {\n+    pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {\n         self.mk_ty(TyFnPtr(fty))\n     }\n \n@@ -1439,14 +1410,19 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn mk_fn_sig<I>(self, inputs: I, output: I::Item, variadic: bool)\n+    pub fn mk_fn_sig<I>(self,\n+                        inputs: I,\n+                        output: I::Item,\n+                        variadic: bool,\n+                        unsafety: hir::Unsafety,\n+                        abi: abi::Abi)\n         -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output\n         where I: Iterator,\n               I::Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>\n     {\n         inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {\n             inputs_and_output: self.intern_type_list(xs),\n-            variadic: variadic\n+            variadic, unsafety, abi\n         })\n     }\n "}, {"sha": "3d2cc4c598a22ea66677cc53010e271920c0c3e2", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -76,7 +76,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n             Some(TupleSimplifiedType(tys.len()))\n         }\n         ty::TyFnDef(.., ref f) | ty::TyFnPtr(ref f) => {\n-            Some(FunctionSimplifiedType(f.sig.skip_binder().inputs().len()))\n+            Some(FunctionSimplifiedType(f.skip_binder().inputs().len()))\n         }\n         ty::TyProjection(_) | ty::TyParam(_) => {\n             if can_simplify_params {"}, {"sha": "384f99ceb4e83dff078b5201e7326417a86e4878", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -155,13 +155,13 @@ impl FlagComputation {\n                 self.add_tys(&ts[..]);\n             }\n \n-            &ty::TyFnDef(_, substs, ref f) => {\n+            &ty::TyFnDef(_, substs, f) => {\n                 self.add_substs(substs);\n-                self.add_fn_sig(&f.sig);\n+                self.add_fn_sig(f);\n             }\n \n-            &ty::TyFnPtr(ref f) => {\n-                self.add_fn_sig(&f.sig);\n+            &ty::TyFnPtr(f) => {\n+                self.add_fn_sig(f);\n             }\n         }\n     }\n@@ -177,7 +177,7 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_fn_sig(&mut self, fn_sig: &ty::PolyFnSig) {\n+    fn add_fn_sig(&mut self, fn_sig: ty::PolyFnSig) {\n         let mut computation = FlagComputation::new();\n \n         computation.add_tys(fn_sig.skip_binder().inputs());"}, {"sha": "e29653c9e88a03a7b81042850a40e41dd7886c45", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -159,19 +159,6 @@ pub trait TypeFolder<'gcx: 'tcx, 'tcx> : Sized {\n         sig.super_fold_with(self)\n     }\n \n-    fn fold_bare_fn_ty(&mut self,\n-                       fty: &'tcx ty::BareFnTy<'tcx>)\n-                       -> &'tcx ty::BareFnTy<'tcx>\n-    {\n-        fty.super_fold_with(self)\n-    }\n-\n-    fn fold_closure_ty(&mut self,\n-                       fty: &ty::ClosureTy<'tcx>)\n-                       -> ty::ClosureTy<'tcx> {\n-        fty.super_fold_with(self)\n-    }\n-\n     fn fold_region(&mut self, r: &'tcx ty::Region) -> &'tcx ty::Region {\n         r.super_fold_with(self)\n     }"}, {"sha": "6958df093d0e8c8e94ae701c9661df259c44caf3", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -264,7 +264,7 @@ define_maps! { <'tcx>\n \n     /// Records the type of each closure. The def ID is the ID of the\n     /// expression defining the closure.\n-    pub closure_type: ItemSignature(DefId) -> ty::ClosureTy<'tcx>,\n+    pub closure_type: ItemSignature(DefId) -> ty::PolyFnSig<'tcx>,\n \n     /// Caches CoerceUnsized kinds for impls on custom types.\n     pub custom_coerce_unsized_kind: ItemSignature(DefId)"}, {"sha": "c1f372a1c2970acf5a41547bd9e8bd1ff21d14a4", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -55,8 +55,8 @@ use hir;\n use hir::itemlikevisit::ItemLikeVisitor;\n \n pub use self::sty::{Binder, DebruijnIndex};\n-pub use self::sty::{BareFnTy, FnSig, PolyFnSig};\n-pub use self::sty::{ClosureTy, InferTy, ParamTy, ProjectionTy, ExistentialPredicate};\n+pub use self::sty::{FnSig, PolyFnSig};\n+pub use self::sty::{InferTy, ParamTy, ProjectionTy, ExistentialPredicate};\n pub use self::sty::{ClosureSubsts, TypeAndMut};\n pub use self::sty::{TraitRef, TypeVariants, PolyTraitRef};\n pub use self::sty::{ExistentialTraitRef, PolyExistentialTraitRef};\n@@ -2470,7 +2470,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn closure_type(self,\n                         def_id: DefId,\n                         substs: ClosureSubsts<'tcx>)\n-                        -> ty::ClosureTy<'tcx>\n+                        -> ty::PolyFnSig<'tcx>\n     {\n         if let Some(ty) = self.maps.closure_type.borrow().get(&def_id) {\n             return ty.subst(self, substs.substs);"}, {"sha": "cef24d44d6875300ded45c8bb997678f1e7eb521", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -157,24 +157,6 @@ pub fn relate_substs<'a, 'gcx, 'tcx, R>(relation: &mut R,\n     Ok(tcx.mk_substs(params)?)\n }\n \n-impl<'tcx> Relate<'tcx> for &'tcx ty::BareFnTy<'tcx> {\n-    fn relate<'a, 'gcx, R>(relation: &mut R,\n-                           a: &&'tcx ty::BareFnTy<'tcx>,\n-                           b: &&'tcx ty::BareFnTy<'tcx>)\n-                           -> RelateResult<'tcx, &'tcx ty::BareFnTy<'tcx>>\n-        where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n-    {\n-        let unsafety = relation.relate(&a.unsafety, &b.unsafety)?;\n-        let abi = relation.relate(&a.abi, &b.abi)?;\n-        let sig = relation.relate(&a.sig, &b.sig)?;\n-        Ok(relation.tcx().mk_bare_fn(ty::BareFnTy {\n-            unsafety: unsafety,\n-            abi: abi,\n-            sig: sig\n-        }))\n-    }\n-}\n-\n impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n     fn relate<'a, 'gcx, R>(relation: &mut R,\n                            a: &ty::FnSig<'tcx>,\n@@ -186,6 +168,8 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n             return Err(TypeError::VariadicMismatch(\n                 expected_found(relation, &a.variadic, &b.variadic)));\n         }\n+        let unsafety = relation.relate(&a.unsafety, &b.unsafety)?;\n+        let abi = relation.relate(&a.abi, &b.abi)?;\n \n         if a.inputs().len() != b.inputs().len() {\n             return Err(TypeError::ArgCount);\n@@ -204,7 +188,9 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n             }).collect::<Result<AccumulateVec<[_; 8]>, _>>()?;\n         Ok(ty::FnSig {\n             inputs_and_output: relation.tcx().intern_type_list(&inputs_and_output),\n-            variadic: a.variadic\n+            variadic: a.variadic,\n+            unsafety: unsafety,\n+            abi: abi\n         })\n     }\n }"}, {"sha": "48f6fcd11b8acf18b1e221e751e68f90d5113fa7", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 50, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -235,20 +235,9 @@ impl<'a, 'tcx> Lift<'tcx> for ty::FnSig<'a> {\n         tcx.lift(&self.inputs_and_output).map(|x| {\n             ty::FnSig {\n                 inputs_and_output: x,\n-                variadic: self.variadic\n-            }\n-        })\n-    }\n-}\n-\n-impl<'a, 'tcx> Lift<'tcx> for ty::ClosureTy<'a> {\n-    type Lifted = ty::ClosureTy<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&self.sig).map(|sig| {\n-            ty::ClosureTy {\n-                sig: sig,\n+                variadic: self.variadic,\n                 unsafety: self.unsafety,\n-                abi: self.abi\n+                abi: self.abi,\n             }\n         })\n     }\n@@ -531,43 +520,6 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::BareFnTy<'tcx> {\n-    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        let fty = ty::BareFnTy {\n-            sig: self.sig.fold_with(folder),\n-            abi: self.abi,\n-            unsafety: self.unsafety\n-        };\n-        folder.tcx().mk_bare_fn(fty)\n-    }\n-\n-    fn fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        folder.fold_bare_fn_ty(self)\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.sig.visit_with(visitor)\n-    }\n-}\n-\n-impl<'tcx> TypeFoldable<'tcx> for ty::ClosureTy<'tcx> {\n-    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-       ty::ClosureTy {\n-            sig: self.sig.fold_with(folder),\n-            unsafety: self.unsafety,\n-            abi: self.abi,\n-        }\n-    }\n-\n-    fn fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        folder.fold_closure_ty(self)\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.sig.visit_with(visitor)\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for ty::TypeAndMut<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         ty::TypeAndMut { ty: self.ty.fold_with(folder), mutbl: self.mutbl }\n@@ -588,6 +540,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::FnSig<'tcx> {\n         ty::FnSig {\n             inputs_and_output: folder.tcx().intern_type_list(&inputs_and_output),\n             variadic: self.variadic,\n+            unsafety: self.unsafety,\n+            abi: self.abi,\n         }\n     }\n "}, {"sha": "3d6c1da8830a73cbee419b0cb1607ba186f07ffb", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 17, "deletions": 35, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -128,12 +128,12 @@ pub enum TypeVariants<'tcx> {\n \n     /// The anonymous type of a function declaration/definition. Each\n     /// function has a unique type.\n-    TyFnDef(DefId, &'tcx Substs<'tcx>, &'tcx BareFnTy<'tcx>),\n+    TyFnDef(DefId, &'tcx Substs<'tcx>, PolyFnSig<'tcx>),\n \n     /// A pointer to a function.  Written as `fn() -> i32`.\n     /// FIXME: This is currently also used to represent the callee of a method;\n     /// see ty::MethodCallee etc.\n-    TyFnPtr(&'tcx BareFnTy<'tcx>),\n+    TyFnPtr(PolyFnSig<'tcx>),\n \n     /// A trait, defined with `trait`.\n     TyDynamic(Binder<&'tcx Slice<ExistentialPredicate<'tcx>>>, &'tcx ty::Region),\n@@ -531,38 +531,22 @@ pub struct ProjectionTy<'tcx> {\n     /// The name `N` of the associated type.\n     pub item_name: Name,\n }\n-\n-#[derive(Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n-pub struct BareFnTy<'tcx> {\n-    pub unsafety: hir::Unsafety,\n-    pub abi: abi::Abi,\n-    /// Signature (inputs and output) of this function type.\n-    pub sig: PolyFnSig<'tcx>,\n-}\n-\n-impl<'tcx> serialize::UseSpecializedDecodable for &'tcx BareFnTy<'tcx> {}\n-\n-#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n-pub struct ClosureTy<'tcx> {\n-    pub unsafety: hir::Unsafety,\n-    pub abi: abi::Abi,\n-    pub sig: PolyFnSig<'tcx>,\n-}\n-\n /// Signature of a function type, which I have arbitrarily\n /// decided to use to refer to the input/output types.\n ///\n /// - `inputs` is the list of arguments and their modes.\n /// - `output` is the return type.\n /// - `variadic` indicates whether this is a variadic function. (only true for foreign fns)\n-#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct FnSig<'tcx> {\n     pub inputs_and_output: &'tcx Slice<Ty<'tcx>>,\n-    pub variadic: bool\n+    pub variadic: bool,\n+    pub unsafety: hir::Unsafety,\n+    pub abi: abi::Abi,\n }\n \n impl<'tcx> FnSig<'tcx> {\n-    pub fn inputs(&self) -> &[Ty<'tcx>] {\n+    pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {\n         &self.inputs_and_output[..self.inputs_and_output.len() - 1]\n     }\n \n@@ -574,7 +558,7 @@ impl<'tcx> FnSig<'tcx> {\n pub type PolyFnSig<'tcx> = Binder<FnSig<'tcx>>;\n \n impl<'tcx> PolyFnSig<'tcx> {\n-    pub fn inputs(&self) -> Binder<&[Ty<'tcx>]> {\n+    pub fn inputs(&self) -> Binder<&'tcx [Ty<'tcx>]> {\n         Binder(self.skip_binder().inputs())\n     }\n     pub fn input(&self, index: usize) -> ty::Binder<Ty<'tcx>> {\n@@ -586,6 +570,12 @@ impl<'tcx> PolyFnSig<'tcx> {\n     pub fn variadic(&self) -> bool {\n         self.skip_binder().variadic\n     }\n+    pub fn unsafety(&self) -> hir::Unsafety {\n+        self.skip_binder().unsafety\n+    }\n+    pub fn abi(&self) -> abi::Abi {\n+        self.skip_binder().abi\n+    }\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n@@ -1280,23 +1270,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn fn_sig(&self) -> &'tcx PolyFnSig<'tcx> {\n+    pub fn fn_sig(&self) -> PolyFnSig<'tcx> {\n         match self.sty {\n-            TyFnDef(.., ref f) | TyFnPtr(ref f) => &f.sig,\n+            TyFnDef(.., f) | TyFnPtr(f) => f,\n             _ => bug!(\"Ty::fn_sig() called on non-fn type: {:?}\", self)\n         }\n     }\n \n-    /// Returns the ABI of the given function.\n-    pub fn fn_abi(&self) -> abi::Abi {\n-        match self.sty {\n-            TyFnDef(.., ref f) | TyFnPtr(ref f) => f.abi,\n-            _ => bug!(\"Ty::fn_abi() called on non-fn type\"),\n-        }\n-    }\n-\n     // Type accessors for substructures of types\n-    pub fn fn_args(&self) -> ty::Binder<&[Ty<'tcx>]> {\n+    pub fn fn_args(&self) -> ty::Binder<&'tcx [Ty<'tcx>]> {\n         self.fn_sig().inputs()\n     }\n "}, {"sha": "bda76550f341c8fb4484374a14e6867c316de92a", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -456,10 +456,10 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n             TyFnDef(def_id, ..) => self.def_id(def_id),\n             TyAdt(d, _) => self.def_id(d.did),\n             TyFnPtr(f) => {\n-                self.hash(f.unsafety);\n-                self.hash(f.abi);\n-                self.hash(f.sig.variadic());\n-                self.hash(f.sig.skip_binder().inputs().len());\n+                self.hash(f.unsafety());\n+                self.hash(f.abi());\n+                self.hash(f.variadic());\n+                self.hash(f.inputs().skip_binder().len());\n             }\n             TyDynamic(ref data, ..) => {\n                 if let Some(p) = data.principal() {"}, {"sha": "d7954953aba856902fb1829b0d8d30db6f60d71e", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -115,17 +115,17 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::TyTuple(ts, _) => {\n             stack.extend(ts.iter().cloned().rev());\n         }\n-        ty::TyFnDef(_, substs, ref ft) => {\n+        ty::TyFnDef(_, substs, ft) => {\n             stack.extend(substs.types().rev());\n-            push_sig_subtypes(stack, &ft.sig);\n+            push_sig_subtypes(stack, ft);\n         }\n-        ty::TyFnPtr(ref ft) => {\n-            push_sig_subtypes(stack, &ft.sig);\n+        ty::TyFnPtr(ft) => {\n+            push_sig_subtypes(stack, ft);\n         }\n     }\n }\n \n-fn push_sig_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, sig: &ty::PolyFnSig<'tcx>) {\n+fn push_sig_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, sig: ty::PolyFnSig<'tcx>) {\n     stack.push(sig.skip_binder().output());\n     stack.extend(sig.skip_binder().inputs().iter().cloned().rev());\n }"}, {"sha": "d0c0654b0383b3a7299ab695b1e95c9b413183b9", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -495,15 +495,6 @@ impl fmt::Debug for ty::Region {\n     }\n }\n \n-impl<'tcx> fmt::Debug for ty::ClosureTy<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"ClosureTy({},{:?},{})\",\n-               self.unsafety,\n-               self.sig,\n-               self.abi)\n-    }\n-}\n-\n impl<'tcx> fmt::Debug for ty::ClosureUpvar<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"ClosureUpvar({:?},{:?})\",\n@@ -585,6 +576,14 @@ impl<'tcx> fmt::Debug for ty::InstantiatedPredicates<'tcx> {\n \n impl<'tcx> fmt::Display for ty::FnSig<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if self.unsafety == hir::Unsafety::Unsafe {\n+            write!(f, \"unsafe \")?;\n+        }\n+\n+        if self.abi != Abi::Rust {\n+            write!(f, \"extern {} \", self.abi)?;\n+        }\n+\n         write!(f, \"fn\")?;\n         fn_sig(f, self.inputs(), self.variadic, self.output())\n     }\n@@ -741,28 +740,12 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                 write!(f, \")\")\n             }\n             TyFnDef(def_id, substs, ref bare_fn) => {\n-                if bare_fn.unsafety == hir::Unsafety::Unsafe {\n-                    write!(f, \"unsafe \")?;\n-                }\n-\n-                if bare_fn.abi != Abi::Rust {\n-                    write!(f, \"extern {} \", bare_fn.abi)?;\n-                }\n-\n-                write!(f, \"{} {{\", bare_fn.sig.0)?;\n+                write!(f, \"{} {{\", bare_fn.0)?;\n                 parameterized(f, substs, def_id, &[])?;\n                 write!(f, \"}}\")\n             }\n             TyFnPtr(ref bare_fn) => {\n-                if bare_fn.unsafety == hir::Unsafety::Unsafe {\n-                    write!(f, \"unsafe \")?;\n-                }\n-\n-                if bare_fn.abi != Abi::Rust {\n-                    write!(f, \"extern {} \", bare_fn.abi)?;\n-                }\n-\n-                write!(f, \"{}\", bare_fn.sig.0)\n+                write!(f, \"{}\", bare_fn.0)\n             }\n             TyInfer(infer_ty) => write!(f, \"{}\", infer_ty),\n             TyError => write!(f, \"[type error]\"),"}, {"sha": "44e3b38ea3857dd04d18599e15734ade67c7822e", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/sanity_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -164,8 +164,9 @@ fn is_rustc_peek<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         {\n             if let mir::Operand::Constant(ref func) = *oper\n             {\n-                if let ty::TyFnDef(def_id, _, &ty::BareFnTy { abi, .. }) = func.ty.sty\n+                if let ty::TyFnDef(def_id, _, sig) = func.ty.sty\n                 {\n+                    let abi = sig.abi();\n                     let name = tcx.item_name(def_id);\n                     if abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n                         if name == \"rustc_peek\" {"}, {"sha": "36ba1e7f95bd8f8679245dbee54b2608766bf744", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -270,11 +270,13 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn t_fn(&self, input_tys: &[Ty<'tcx>], output_ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.infcx.tcx.mk_fn_ptr(self.infcx.tcx.mk_bare_fn(ty::BareFnTy {\n-            unsafety: hir::Unsafety::Normal,\n-            abi: Abi::Rust,\n-            sig: ty::Binder(self.infcx.tcx.mk_fn_sig(input_tys.iter().cloned(), output_ty, false)),\n-        }))\n+        self.infcx.tcx.mk_fn_ptr(ty::Binder(self.infcx.tcx.mk_fn_sig(\n+            input_tys.iter().cloned(),\n+            output_ty,\n+            false,\n+            hir::Unsafety::Normal,\n+            Abi::Rust\n+        )))\n     }\n \n     pub fn t_nil(&self) -> Ty<'tcx> {"}, {"sha": "75269f58ed62df7460dbe336e8c6395c7e78b098", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -1082,9 +1082,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n                 }\n                 let typ = cx.tables.node_id_to_type(expr.id);\n                 match typ.sty {\n-                    ty::TyFnDef(.., ref bare_fn) if bare_fn.abi == RustIntrinsic => {\n-                        let from = bare_fn.sig.skip_binder().inputs()[0];\n-                        let to = bare_fn.sig.skip_binder().output();\n+                    ty::TyFnDef(.., bare_fn) if bare_fn.abi() == RustIntrinsic => {\n+                        let from = bare_fn.inputs().skip_binder()[0];\n+                        let to = *bare_fn.output().skip_binder();\n                         return Some((&from.sty, &to.sty));\n                     }\n                     _ => (),\n@@ -1095,7 +1095,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n \n         fn def_id_is_transmute(cx: &LateContext, def_id: DefId) -> bool {\n             match cx.tcx.item_type(def_id).sty {\n-                ty::TyFnDef(.., ref bfty) if bfty.abi == RustIntrinsic => (),\n+                ty::TyFnDef(.., bfty) if bfty.abi() == RustIntrinsic => (),\n                 _ => return false,\n             }\n             cx.tcx.item_name(def_id) == \"transmute\""}, {"sha": "dd7f751338dcc01cdcc5ac2ba9cdca7e5182380f", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -568,8 +568,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n             ty::TyArray(ty, _) => self.check_type_for_ffi(cache, ty),\n \n-            ty::TyFnPtr(bare_fn) => {\n-                match bare_fn.abi {\n+            ty::TyFnPtr(sig) => {\n+                match sig.abi() {\n                     Abi::Rust | Abi::RustIntrinsic | Abi::PlatformIntrinsic | Abi::RustCall => {\n                         return FfiUnsafe(\"found function pointer with Rust calling convention in \\\n                                           foreign module; consider using an `extern` function \\\n@@ -578,7 +578,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                     _ => {}\n                 }\n \n-                let sig = cx.erase_late_bound_regions(&bare_fn.sig);\n+                let sig = cx.erase_late_bound_regions(&sig);\n                 if !sig.output().is_nil() {\n                     let r = self.check_type_for_ffi(cache, sig.output());\n                     match r {"}, {"sha": "0e92c492e4b0d4144cbd97298672d77f56868d11", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -363,12 +363,6 @@ impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::Slice<Ty<'tcx>>> for DecodeContext<'\n     }\n }\n \n-impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::BareFnTy<'tcx>> for DecodeContext<'a, 'tcx> {\n-    fn specialized_decode(&mut self) -> Result<&'tcx ty::BareFnTy<'tcx>, Self::Error> {\n-        Ok(self.tcx().mk_bare_fn(Decodable::decode(self)?))\n-    }\n-}\n-\n impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::AdtDef> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<&'tcx ty::AdtDef, Self::Error> {\n         let def_id = DefId::decode(self)?;\n@@ -1054,7 +1048,7 @@ impl<'a, 'tcx> CrateMetadata {\n     pub fn closure_ty(&self,\n                       closure_id: DefIndex,\n                       tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                      -> ty::ClosureTy<'tcx> {\n+                      -> ty::PolyFnSig<'tcx> {\n         match self.entry(closure_id).kind {\n             EntryKind::Closure(data) => data.decode(self).ty.decode((self, tcx)),\n             _ => bug!(),"}, {"sha": "fa39b687355bf587501635f72568180dc170f861", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -337,5 +337,5 @@ pub struct MethodData {\n #[derive(RustcEncodable, RustcDecodable)]\n pub struct ClosureData<'tcx> {\n     pub kind: ty::ClosureKind,\n-    pub ty: Lazy<ty::ClosureTy<'tcx>>,\n+    pub ty: Lazy<ty::PolyFnSig<'tcx>>,\n }"}, {"sha": "ae51951b519bd3420bb9281561c681a6adf75a7e", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -202,7 +202,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let diverges = match ty.sty {\n                     ty::TyFnDef(_, _, ref f) | ty::TyFnPtr(ref f) => {\n                         // FIXME(canndrew): This is_never should probably be an is_uninhabited\n-                        f.sig.skip_binder().output().is_never()\n+                        f.output().skip_binder().is_never()\n                     }\n                     _ => false\n                 };"}, {"sha": "2cb26eed1fff1ac01aaf757e2b16613ec85bf2ee", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -267,13 +267,10 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n                 let method = method_callee(cx, expr, ty::MethodCall::expr(expr.id));\n \n-                let sig = match method.ty.sty {\n-                    ty::TyFnDef(.., fn_ty) => &fn_ty.sig,\n-                    _ => span_bug!(expr.span, \"type of method is not an fn\"),\n-                };\n+                let sig = method.ty.fn_sig();\n \n                 let sig = cx.tcx\n-                    .no_late_bound_regions(sig)\n+                    .no_late_bound_regions(&sig)\n                     .unwrap_or_else(|| span_bug!(expr.span, \"method call has late-bound regions\"));\n \n                 assert_eq!(sig.inputs().len(), 2);"}, {"sha": "34b701a3a9dd5acb79be37f3be3a75076b17c3d4", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -104,10 +104,14 @@ fn build_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n             let fn_sig = cx.tables().liberated_fn_sigs[&id].clone();\n \n             let ty = tcx.item_type(tcx.hir.local_def_id(id));\n-            let (abi, implicit_argument) = if let ty::TyClosure(..) = ty.sty {\n-                (Abi::Rust, Some((closure_self_ty(tcx, id, body_id), None)))\n+            let mut abi = fn_sig.abi;\n+            let implicit_argument = if let ty::TyClosure(..) = ty.sty {\n+                // HACK(eddyb) Avoid having RustCall on closures,\n+                // as it adds unnecessary (and wrong) auto-tupling.\n+                abi = Abi::Rust;\n+                Some((closure_self_ty(tcx, id, body_id), None))\n             } else {\n-                (ty.fn_abi(), None)\n+                None\n             };\n \n             let body = tcx.hir.body(body_id);"}, {"sha": "4f80e21af64e44bb8db0f841cd9454206a421c23", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -788,7 +788,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             let fn_ty = func.ty(self.mir, self.tcx);\n             let (is_shuffle, is_const_fn) = match fn_ty.sty {\n                 ty::TyFnDef(def_id, _, f) => {\n-                    (f.abi == Abi::PlatformIntrinsic &&\n+                    (f.abi() == Abi::PlatformIntrinsic &&\n                      self.tcx.item_name(def_id).as_str().starts_with(\"simd_shuffle\"),\n                      is_const_fn(self.tcx, def_id))\n                 }"}, {"sha": "40485e4b66d773cfbe98a1d75057cb04a35f1bc4", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -440,14 +440,14 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             TerminatorKind::Call { ref func, ref args, ref destination, .. } => {\n                 let func_ty = func.ty(mir, tcx);\n                 debug!(\"check_terminator: call, func_ty={:?}\", func_ty);\n-                let func_ty = match func_ty.sty {\n-                    ty::TyFnDef(.., func_ty) | ty::TyFnPtr(func_ty) => func_ty,\n+                let sig = match func_ty.sty {\n+                    ty::TyFnDef(.., sig) | ty::TyFnPtr(sig) => sig,\n                     _ => {\n                         span_mirbug!(self, term, \"call to non-function {:?}\", func_ty);\n                         return;\n                     }\n                 };\n-                let sig = tcx.erase_late_bound_regions(&func_ty.sig);\n+                let sig = tcx.erase_late_bound_regions(&sig);\n                 let sig = self.normalize(&sig);\n                 self.check_call_dest(mir, term, &sig, destination);\n "}, {"sha": "b44cd20e4402e58bc7c8735ddf1587777103abfe", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -327,20 +327,18 @@ pub struct FnType {\n \n impl FnType {\n     pub fn new<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                         abi: Abi,\n-                         sig: &ty::FnSig<'tcx>,\n+                         sig: ty::FnSig<'tcx>,\n                          extra_args: &[Ty<'tcx>]) -> FnType {\n-        let mut fn_ty = FnType::unadjusted(ccx, abi, sig, extra_args);\n-        fn_ty.adjust_for_abi(ccx, abi, sig);\n+        let mut fn_ty = FnType::unadjusted(ccx, sig, extra_args);\n+        fn_ty.adjust_for_abi(ccx, sig);\n         fn_ty\n     }\n \n     pub fn unadjusted<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                abi: Abi,\n-                                sig: &ty::FnSig<'tcx>,\n+                                sig: ty::FnSig<'tcx>,\n                                 extra_args: &[Ty<'tcx>]) -> FnType {\n         use self::Abi::*;\n-        let cconv = match ccx.sess().target.target.adjust_abi(abi) {\n+        let cconv = match ccx.sess().target.target.adjust_abi(sig.abi) {\n             RustIntrinsic | PlatformIntrinsic |\n             Rust | RustCall => llvm::CCallConv,\n \n@@ -363,7 +361,7 @@ impl FnType {\n         };\n \n         let mut inputs = sig.inputs();\n-        let extra_args = if abi == RustCall {\n+        let extra_args = if sig.abi == RustCall {\n             assert!(!sig.variadic && extra_args.is_empty());\n \n             match sig.inputs().last().unwrap().sty {\n@@ -388,7 +386,7 @@ impl FnType {\n         let linux_s390x = target.target_os == \"linux\"\n                        && target.arch == \"s390x\"\n                        && target.target_env == \"gnu\";\n-        let rust_abi = match abi {\n+        let rust_abi = match sig.abi {\n             RustIntrinsic | PlatformIntrinsic | Rust | RustCall => true,\n             _ => false\n         };\n@@ -535,8 +533,8 @@ impl FnType {\n \n     pub fn adjust_for_abi<'a, 'tcx>(&mut self,\n                                     ccx: &CrateContext<'a, 'tcx>,\n-                                    abi: Abi,\n-                                    sig: &ty::FnSig<'tcx>) {\n+                                    sig: ty::FnSig<'tcx>) {\n+        let abi = sig.abi;\n         if abi == Abi::Unadjusted { return }\n \n         if abi == Abi::Rust || abi == Abi::RustCall ||"}, {"sha": "8125f432ff5ae963feb0db9e3aefbb087064ecb2", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -47,7 +47,7 @@ use rustc::util::common::time;\n use session::config::{self, NoDebugInfo};\n use rustc_incremental::IncrementalHashesMap;\n use session::{self, DataTypeKind, Session};\n-use abi::{self, Abi, FnType};\n+use abi::{self, FnType};\n use mir::lvalue::LvalueRef;\n use adt;\n use attributes;\n@@ -600,8 +600,8 @@ pub fn trans_instance<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, instance: Instance\n     let fn_ty = ccx.tcx().erase_regions(&fn_ty);\n     let fn_ty = monomorphize::apply_param_substs(ccx.shared(), instance.substs, &fn_ty);\n \n-    let ty::BareFnTy { abi, ref sig, .. } = *common::ty_fn_ty(ccx, fn_ty);\n-    let sig = ccx.tcx().erase_late_bound_regions_and_normalize(sig);\n+    let sig = common::ty_fn_sig(ccx, fn_ty);\n+    let sig = ccx.tcx().erase_late_bound_regions_and_normalize(&sig);\n \n     let lldecl = match ccx.instances().borrow().get(&instance) {\n         Some(&val) => val,\n@@ -614,10 +614,8 @@ pub fn trans_instance<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, instance: Instance\n         attributes::emit_uwtable(lldecl, true);\n     }\n \n-    let fn_ty = FnType::new(ccx, abi, &sig, &[]);\n-\n     let mir = ccx.tcx().item_mir(instance.def);\n-    mir::trans_mir(ccx, lldecl, fn_ty, &mir, instance, &sig, abi);\n+    mir::trans_mir(ccx, lldecl, &mir, instance, sig);\n }\n \n pub fn trans_ctor_shim<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n@@ -632,7 +630,7 @@ pub fn trans_ctor_shim<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let ctor_ty = monomorphize::apply_param_substs(ccx.shared(), substs, &ctor_ty);\n \n     let sig = ccx.tcx().erase_late_bound_regions_and_normalize(&ctor_ty.fn_sig());\n-    let fn_ty = FnType::new(ccx, Abi::Rust, &sig, &[]);\n+    let fn_ty = FnType::new(ccx, sig, &[]);\n \n     let bcx = Builder::new_block(ccx, llfn, \"entry-block\");\n     if !fn_ty.ret.is_ignore() {"}, {"sha": "6a9531547c02397a17da5e77b1cdc97080db09c9", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 32, "deletions": 52, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -83,7 +83,7 @@ impl<'tcx> Callee<'tcx> {\n \n         let fn_ty = def_ty(ccx.shared(), def_id, substs);\n         if let ty::TyFnDef(.., f) = fn_ty.sty {\n-            if f.abi == Abi::RustIntrinsic || f.abi == Abi::PlatformIntrinsic {\n+            if f.abi() == Abi::RustIntrinsic || f.abi() == Abi::PlatformIntrinsic {\n                 return Callee {\n                     data: Intrinsic,\n                     ty: fn_ty\n@@ -169,14 +169,13 @@ impl<'tcx> Callee<'tcx> {\n     /// The extra argument types are for variadic (extern \"C\") functions.\n     pub fn direct_fn_type<'a>(&self, ccx: &CrateContext<'a, 'tcx>,\n                               extra_args: &[Ty<'tcx>]) -> FnType {\n-        let abi = self.ty.fn_abi();\n-        let sig = ccx.tcx().erase_late_bound_regions_and_normalize(self.ty.fn_sig());\n-        let mut fn_ty = FnType::unadjusted(ccx, abi, &sig, extra_args);\n+        let sig = ccx.tcx().erase_late_bound_regions_and_normalize(&self.ty.fn_sig());\n+        let mut fn_ty = FnType::unadjusted(ccx, sig, extra_args);\n         if let Virtual(_) = self.data {\n             // Don't pass the vtable, it's not an argument of the virtual fn.\n             fn_ty.args[1].ignore();\n         }\n-        fn_ty.adjust_for_abi(ccx, abi, &sig);\n+        fn_ty.adjust_for_abi(ccx, sig);\n         fn_ty\n     }\n \n@@ -307,38 +306,32 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     let ref_closure_ty = tcx.mk_imm_ref(tcx.mk_region(ty::ReErased), closure_ty);\n \n     // Make a version with the type of by-ref closure.\n-    let ty::ClosureTy { unsafety, abi, mut sig } = tcx.closure_type(def_id, substs);\n-    sig.0 = tcx.mk_fn_sig(\n-        iter::once(ref_closure_ty).chain(sig.0.inputs().iter().cloned()),\n-        sig.0.output(),\n-        sig.0.variadic\n-    );\n-    let llref_fn_ty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n-        unsafety: unsafety,\n-        abi: abi,\n-        sig: sig.clone()\n-    }));\n+    let sig = tcx.closure_type(def_id, substs);\n+    let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n+    assert_eq!(sig.abi, Abi::RustCall);\n+    let llref_fn_ty = tcx.mk_fn_ptr(ty::Binder(tcx.mk_fn_sig(\n+        iter::once(ref_closure_ty).chain(sig.inputs().iter().cloned()),\n+        sig.output(),\n+        sig.variadic,\n+        sig.unsafety,\n+        Abi::RustCall\n+    )));\n     debug!(\"trans_fn_once_adapter_shim: llref_fn_ty={:?}\",\n            llref_fn_ty);\n \n \n     // Make a version of the closure type with the same arguments, but\n     // with argument #0 being by value.\n-    assert_eq!(abi, Abi::RustCall);\n-    sig.0 = tcx.mk_fn_sig(\n-        iter::once(closure_ty).chain(sig.0.inputs().iter().skip(1).cloned()),\n-        sig.0.output(),\n-        sig.0.variadic\n+    let sig = tcx.mk_fn_sig(\n+        iter::once(closure_ty).chain(sig.inputs().iter().cloned()),\n+        sig.output(),\n+        sig.variadic,\n+        sig.unsafety,\n+        Abi::RustCall\n     );\n \n-    let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n-    let fn_ty = FnType::new(ccx, abi, &sig, &[]);\n-\n-    let llonce_fn_ty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n-        unsafety: unsafety,\n-        abi: abi,\n-        sig: ty::Binder(sig)\n-    }));\n+    let fn_ty = FnType::new(ccx, sig, &[]);\n+    let llonce_fn_ty = tcx.mk_fn_ptr(ty::Binder(sig));\n \n     // Create the by-value helper.\n     let function_name = method_instance.symbol_name(ccx.shared());\n@@ -470,33 +463,20 @@ fn trans_fn_pointer_shim<'a, 'tcx>(\n \n     // Construct the \"tuply\" version of `bare_fn_ty`. It takes two arguments: `self`,\n     // which is the fn pointer, and `args`, which is the arguments tuple.\n-    let sig = match bare_fn_ty.sty {\n-        ty::TyFnDef(..,\n-                    &ty::BareFnTy { unsafety: hir::Unsafety::Normal,\n-                                    abi: Abi::Rust,\n-                                    ref sig }) |\n-        ty::TyFnPtr(&ty::BareFnTy { unsafety: hir::Unsafety::Normal,\n-                                    abi: Abi::Rust,\n-                                    ref sig }) => sig,\n-\n-        _ => {\n-            bug!(\"trans_fn_pointer_shim invoked on invalid type: {}\",\n-                 bare_fn_ty);\n-        }\n-    };\n-    let sig = tcx.erase_late_bound_regions_and_normalize(sig);\n+    let sig = bare_fn_ty.fn_sig();\n+    let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n+    assert_eq!(sig.unsafety, hir::Unsafety::Normal);\n+    assert_eq!(sig.abi, Abi::Rust);\n     let tuple_input_ty = tcx.intern_tup(sig.inputs(), false);\n     let sig = tcx.mk_fn_sig(\n         [bare_fn_ty_maybe_ref, tuple_input_ty].iter().cloned(),\n         sig.output(),\n-        false\n+        false,\n+        hir::Unsafety::Normal,\n+        Abi::RustCall\n     );\n-    let fn_ty = FnType::new(ccx, Abi::RustCall, &sig, &[]);\n-    let tuple_fn_ty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n-        unsafety: hir::Unsafety::Normal,\n-        abi: Abi::RustCall,\n-        sig: ty::Binder(sig)\n-    }));\n+    let fn_ty = FnType::new(ccx, sig, &[]);\n+    let tuple_fn_ty = tcx.mk_fn_ptr(ty::Binder(sig));\n     debug!(\"tuple_fn_ty: {:?}\", tuple_fn_ty);\n \n     //\n@@ -600,7 +580,7 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // other weird situations. Annoying.\n \n     // Create a fn pointer with the substituted signature.\n-    let fn_ptr_ty = tcx.mk_fn_ptr(tcx.mk_bare_fn(common::ty_fn_ty(ccx, fn_ty).into_owned()));\n+    let fn_ptr_ty = tcx.mk_fn_ptr(common::ty_fn_sig(ccx, fn_ty));\n     let llptrty = type_of::type_of(ccx, fn_ptr_ty);\n \n     let llfn = if let Some(llfn) = declare::get_declared_value(ccx, &sym) {"}, {"sha": "14ef48a9027030b209f6630f6351366604d1428e", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -682,10 +682,10 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n         fn is_drop_in_place_intrinsic<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 def_id: DefId,\n-                                                bare_fn_ty: &ty::BareFnTy<'tcx>)\n+                                                bare_fn_ty: ty::PolyFnSig<'tcx>)\n                                                 -> bool {\n-            (bare_fn_ty.abi == Abi::RustIntrinsic ||\n-             bare_fn_ty.abi == Abi::PlatformIntrinsic) &&\n+            (bare_fn_ty.abi() == Abi::RustIntrinsic ||\n+             bare_fn_ty.abi() == Abi::PlatformIntrinsic) &&\n             tcx.item_name(def_id) == \"drop_in_place\"\n         }\n     }\n@@ -697,8 +697,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n fn should_trans_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                   def_id: DefId)\n                                   -> bool {\n-    if let ty::TyFnDef(_, _, f) = tcx.item_type(def_id).sty {\n-        if let Some(adt_def) = f.sig.output().skip_binder().ty_adt_def() {\n+    if let ty::TyFnDef(_, _, sig) = tcx.item_type(def_id).sty {\n+        if let Some(adt_def) = sig.output().skip_binder().ty_adt_def() {\n             if adt_def.variants.iter().any(|v| def_id == v.did) {\n                 // HACK: ADT constructors are translated in-place and\n                 // do not have a trans-item."}, {"sha": "5e858ce0e0cd32b90ff8710d59e2feab919d6b47", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -33,7 +33,6 @@ use rustc::traits::{self, SelectionContext, Reveal};\n use rustc::hir;\n \n use libc::{c_uint, c_char};\n-use std::borrow::Cow;\n use std::iter;\n \n use syntax::ast;\n@@ -570,17 +569,17 @@ pub fn shift_mask_val<'a, 'tcx>(\n     }\n }\n \n-pub fn ty_fn_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                          ty: Ty<'tcx>)\n-                          -> Cow<'tcx, ty::BareFnTy<'tcx>>\n+pub fn ty_fn_sig<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+                           ty: Ty<'tcx>)\n+                           -> ty::PolyFnSig<'tcx>\n {\n     match ty.sty {\n-        ty::TyFnDef(_, _, fty) => Cow::Borrowed(fty),\n+        ty::TyFnDef(_, _, sig) => sig,\n         // Shims currently have type TyFnPtr. Not sure this should remain.\n-        ty::TyFnPtr(fty) => Cow::Borrowed(fty),\n+        ty::TyFnPtr(sig) => sig,\n         ty::TyClosure(def_id, substs) => {\n             let tcx = ccx.tcx();\n-            let ty::ClosureTy { unsafety, abi, sig } = tcx.closure_type(def_id, substs);\n+            let sig = tcx.closure_type(def_id, substs);\n \n             let env_region = ty::ReLateBound(ty::DebruijnIndex::new(1), ty::BrEnv);\n             let env_ty = match tcx.closure_kind(def_id) {\n@@ -589,12 +588,13 @@ pub fn ty_fn_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                 ty::ClosureKind::FnOnce => ty,\n             };\n \n-            let sig = sig.map_bound(|sig| tcx.mk_fn_sig(\n+            sig.map_bound(|sig| tcx.mk_fn_sig(\n                 iter::once(env_ty).chain(sig.inputs().iter().cloned()),\n                 sig.output(),\n-                sig.variadic\n-            ));\n-            Cow::Owned(ty::BareFnTy { unsafety: unsafety, abi: abi, sig: sig })\n+                sig.variadic,\n+                sig.unsafety,\n+                sig.abi\n+            ))\n         }\n         _ => bug!(\"unexpected type {:?} to ty_fn_sig\", ty)\n     }"}, {"sha": "d5f7549ece07b21134587e71f1c9fd10a55084be", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -959,15 +959,13 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n             return llfn;\n         }\n \n-        let ty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n-            unsafety: hir::Unsafety::Unsafe,\n-            abi: Abi::C,\n-            sig: ty::Binder(tcx.mk_fn_sig(\n-                iter::once(tcx.mk_mut_ptr(tcx.types.u8)),\n-                tcx.types.never,\n-                false\n-            )),\n-        }));\n+        let ty = tcx.mk_fn_ptr(ty::Binder(tcx.mk_fn_sig(\n+            iter::once(tcx.mk_mut_ptr(tcx.types.u8)),\n+            tcx.types.never,\n+            false,\n+            hir::Unsafety::Unsafe,\n+            Abi::C\n+        )));\n \n         let llfn = declare::declare_fn(self, \"rust_eh_unwind_resume\", ty);\n         attributes::unwind(llfn, true);"}, {"sha": "f6cdd883850cc5dc04b6062c2afd0902bbbfed02", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -373,11 +373,11 @@ fn vec_slice_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n fn subroutine_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                       unique_type_id: UniqueTypeId,\n-                                      signature: &ty::PolyFnSig<'tcx>,\n+                                      signature: ty::PolyFnSig<'tcx>,\n                                       span: Span)\n                                       -> MetadataCreationResult\n {\n-    let signature = cx.tcx().erase_late_bound_regions(signature);\n+    let signature = cx.tcx().erase_late_bound_regions(&signature);\n \n     let mut signature_metadata: Vec<DIType> = Vec::with_capacity(signature.inputs().len() + 1);\n \n@@ -558,10 +558,10 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 Err(metadata) => return metadata,\n             }\n         }\n-        ty::TyFnDef(.., ref barefnty) | ty::TyFnPtr(ref barefnty) => {\n+        ty::TyFnDef(.., sig) | ty::TyFnPtr(sig) => {\n             let fn_metadata = subroutine_type_metadata(cx,\n                                                        unique_type_id,\n-                                                       &barefnty.sig,\n+                                                       sig,\n                                                        usage_site_span).metadata;\n             match debug_context(cx).type_map\n                                    .borrow()"}, {"sha": "d5f04542d0255d5b52bfb058e6f735d9e4b80db4", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -198,8 +198,7 @@ pub fn finalize(cx: &CrateContext) {\n /// for the function.\n pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                                instance: Instance<'tcx>,\n-                                               sig: &ty::FnSig<'tcx>,\n-                                               abi: Abi,\n+                                               sig: ty::FnSig<'tcx>,\n                                                llfn: ValueRef,\n                                                mir: &mir::Mir) -> FunctionDebugContext {\n     if cx.sess().opts.debuginfo == NoDebugInfo {\n@@ -225,7 +224,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let file_metadata = file_metadata(cx, &loc.file.name, &loc.file.abs_path);\n \n     let function_type_metadata = unsafe {\n-        let fn_signature = get_function_signature(cx, sig, abi);\n+        let fn_signature = get_function_signature(cx, sig);\n         llvm::LLVMRustDIBuilderCreateSubroutineType(DIB(cx), file_metadata, fn_signature)\n     };\n \n@@ -295,8 +294,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     return FunctionDebugContext::RegularContext(fn_debug_context);\n \n     fn get_function_signature<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n-                                        sig: &ty::FnSig<'tcx>,\n-                                        abi: Abi) -> DIArray {\n+                                        sig: ty::FnSig<'tcx>) -> DIArray {\n         if cx.sess().opts.debuginfo == LimitedDebugInfo {\n             return create_DIArray(DIB(cx), &[]);\n         }\n@@ -309,7 +307,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             _ => type_metadata(cx, sig.output(), syntax_pos::DUMMY_SP)\n         });\n \n-        let inputs = if abi == Abi::RustCall {\n+        let inputs = if sig.abi == Abi::RustCall {\n             &sig.inputs()[..sig.inputs().len() - 1]\n         } else {\n             sig.inputs()\n@@ -320,7 +318,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             signature.push(type_metadata(cx, argument_type, syntax_pos::DUMMY_SP));\n         }\n \n-        if abi == Abi::RustCall && !sig.inputs().is_empty() {\n+        if sig.abi == Abi::RustCall && !sig.inputs().is_empty() {\n             if let ty::TyTuple(args, _) = sig.inputs()[sig.inputs().len() - 1].sty {\n                 for &argument_type in args {\n                     signature.push(type_metadata(cx, argument_type, syntax_pos::DUMMY_SP));"}, {"sha": "13ff6646e666256f40772cb96a7d8934e6cb52d7", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -96,12 +96,13 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 push_type_params(cx, principal.substs, output);\n             }\n         },\n-        ty::TyFnDef(.., &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n-        ty::TyFnPtr(&ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n-            if unsafety == hir::Unsafety::Unsafe {\n+        ty::TyFnDef(.., sig) |\n+        ty::TyFnPtr(sig) => {\n+            if sig.unsafety() == hir::Unsafety::Unsafe {\n                 output.push_str(\"unsafe \");\n             }\n \n+            let abi = sig.abi();\n             if abi != ::abi::Abi::Rust {\n                 output.push_str(\"extern \\\"\");\n                 output.push_str(abi.name());\n@@ -110,7 +111,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n             output.push_str(\"fn(\");\n \n-            let sig = cx.tcx().erase_late_bound_regions_and_normalize(sig);\n+            let sig = cx.tcx().erase_late_bound_regions_and_normalize(&sig);\n             if !sig.inputs().is_empty() {\n                 for &parameter_type in sig.inputs() {\n                     push_debuginfo_type_name(cx, parameter_type, true, output);"}, {"sha": "2787812f9622ccc48d1d8ce4df268dc24c454d8b", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -132,19 +132,19 @@ pub fn declare_cfn(ccx: &CrateContext, name: &str, fn_type: Type) -> ValueRef {\n pub fn declare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,\n                             fn_type: ty::Ty<'tcx>) -> ValueRef {\n     debug!(\"declare_rust_fn(name={:?}, fn_type={:?})\", name, fn_type);\n-    let ty::BareFnTy { abi, ref sig, .. } = *common::ty_fn_ty(ccx, fn_type);\n-    let sig = ccx.tcx().erase_late_bound_regions_and_normalize(sig);\n+    let sig = common::ty_fn_sig(ccx, fn_type);\n+    let sig = ccx.tcx().erase_late_bound_regions_and_normalize(&sig);\n     debug!(\"declare_rust_fn (after region erasure) sig={:?}\", sig);\n \n-    let fty = FnType::new(ccx, abi, &sig, &[]);\n+    let fty = FnType::new(ccx, sig, &[]);\n     let llfn = declare_raw_fn(ccx, name, fty.cconv, fty.llvm_type(ccx));\n \n     // FIXME(canndrew): This is_never should really be an is_uninhabited\n     if sig.output().is_never() {\n         llvm::Attribute::NoReturn.apply_llfn(Function, llfn);\n     }\n \n-    if abi != Abi::Rust && abi != Abi::RustCall {\n+    if sig.abi != Abi::Rust && sig.abi != Abi::RustCall {\n         attributes::unwind(llfn, false);\n     }\n "}, {"sha": "b7aedb742db02e676e7ccb9d1bbb4563fa8652e6", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -97,12 +97,12 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n     let ccx = bcx.ccx;\n     let tcx = ccx.tcx();\n \n-    let (def_id, substs, fty) = match callee_ty.sty {\n-        ty::TyFnDef(def_id, substs, ref fty) => (def_id, substs, fty),\n+    let (def_id, substs, sig) = match callee_ty.sty {\n+        ty::TyFnDef(def_id, substs, sig) => (def_id, substs, sig),\n         _ => bug!(\"expected fn item type, found {}\", callee_ty)\n     };\n \n-    let sig = tcx.erase_late_bound_regions_and_normalize(&fty.sig);\n+    let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n     let arg_tys = sig.inputs();\n     let ret_ty = sig.output();\n     let name = &*tcx.item_name(def_id).as_str();\n@@ -878,13 +878,13 @@ fn gen_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                     output: Ty<'tcx>,\n                     trans: &mut for<'b> FnMut(Builder<'b, 'tcx>))\n                     -> ValueRef {\n-    let sig = ccx.tcx().mk_fn_sig(inputs.into_iter(), output, false);\n-\n-    let rust_fn_ty = ccx.tcx().mk_fn_ptr(ccx.tcx().mk_bare_fn(ty::BareFnTy {\n-        unsafety: hir::Unsafety::Unsafe,\n-        abi: Abi::Rust,\n-        sig: ty::Binder(sig)\n-    }));\n+    let rust_fn_ty = ccx.tcx().mk_fn_ptr(ty::Binder(ccx.tcx().mk_fn_sig(\n+        inputs.into_iter(),\n+        output,\n+        false,\n+        hir::Unsafety::Unsafe,\n+        Abi::Rust\n+    )));\n     let llfn = declare::define_internal_fn(ccx, name, rust_fn_ty);\n     let bcx = Builder::new_block(ccx, llfn, \"entry-block\");\n     trans(bcx);\n@@ -905,11 +905,13 @@ fn get_rust_try_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // Define the type up front for the signature of the rust_try function.\n     let tcx = ccx.tcx();\n     let i8p = tcx.mk_mut_ptr(tcx.types.i8);\n-    let fn_ty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n-        unsafety: hir::Unsafety::Unsafe,\n-        abi: Abi::Rust,\n-        sig: ty::Binder(tcx.mk_fn_sig(iter::once(i8p), tcx.mk_nil(), false)),\n-    }));\n+    let fn_ty = tcx.mk_fn_ptr(ty::Binder(tcx.mk_fn_sig(\n+        iter::once(i8p),\n+        tcx.mk_nil(),\n+        false,\n+        hir::Unsafety::Unsafe,\n+        Abi::Rust\n+    )));\n     let output = tcx.types.i32;\n     let rust_try = gen_fn(ccx, \"__rust_try\", vec![fn_ty, i8p, i8p], output, trans);\n     ccx.rust_try_fn().set(Some(rust_try));\n@@ -959,7 +961,7 @@ fn generic_simd_intrinsic<'a, 'tcx>(\n \n \n     let tcx = bcx.tcx();\n-    let sig = tcx.erase_late_bound_regions_and_normalize(callee_ty.fn_sig());\n+    let sig = tcx.erase_late_bound_regions_and_normalize(&callee_ty.fn_sig());\n     let arg_tys = sig.inputs();\n \n     // every intrinsic takes a SIMD vector as its first argument"}, {"sha": "d34b1aa206044807163a246e480024e2159448b2", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -365,20 +365,21 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 // Create the callee. This is a fn ptr or zero-sized and hence a kind of scalar.\n                 let callee = self.trans_operand(&bcx, func);\n \n-                let (mut callee, abi, sig) = match callee.ty.sty {\n-                    ty::TyFnDef(def_id, substs, f) => {\n-                        (Callee::def(bcx.ccx, def_id, substs), f.abi, &f.sig)\n+                let (mut callee, sig) = match callee.ty.sty {\n+                    ty::TyFnDef(def_id, substs, sig) => {\n+                        (Callee::def(bcx.ccx, def_id, substs), sig)\n                     }\n-                    ty::TyFnPtr(f) => {\n+                    ty::TyFnPtr(sig) => {\n                         (Callee {\n                             data: Fn(callee.immediate()),\n                             ty: callee.ty\n-                        }, f.abi, &f.sig)\n+                        }, sig)\n                     }\n                     _ => bug!(\"{} is not callable\", callee.ty)\n                 };\n \n-                let sig = bcx.tcx().erase_late_bound_regions_and_normalize(sig);\n+                let sig = bcx.tcx().erase_late_bound_regions_and_normalize(&sig);\n+                let abi = sig.abi;\n \n                 // Handle intrinsics old trans wants Expr's for, ourselves.\n                 let intrinsic = match (&callee.ty.sty, &callee.data) {"}, {"sha": "a4e74f72a10eb2f84a568f37cd9d96e755846bb2", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -588,7 +588,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                                     .find(|it| it.kind == ty::AssociatedKind::Method)\n                                     .unwrap().def_id;\n                                 // Now create its substs [Closure, Tuple]\n-                                let input = tcx.closure_type(def_id, substs).sig.input(0);\n+                                let input = tcx.closure_type(def_id, substs).input(0);\n                                 let substs = tcx.mk_substs([operand.ty, input.skip_binder()]\n                                     .iter().cloned().map(Kind::from));\n                                 Callee::def(self.ccx, call_once, substs)"}, {"sha": "6419f41f86b6d3d93174ee41f412c6c89ebca9ee", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -28,7 +28,6 @@ use type_of;\n \n use syntax_pos::{DUMMY_SP, NO_EXPANSION, COMMAND_LINE_EXPN, BytePos, Span};\n use syntax::symbol::keywords;\n-use syntax::abi::Abi;\n \n use std::iter;\n \n@@ -205,15 +204,14 @@ impl<'tcx> LocalRef<'tcx> {\n pub fn trans_mir<'a, 'tcx: 'a>(\n     ccx: &'a CrateContext<'a, 'tcx>,\n     llfn: ValueRef,\n-    fn_ty: FnType,\n     mir: &'a Mir<'tcx>,\n     instance: Instance<'tcx>,\n-    sig: &ty::FnSig<'tcx>,\n-    abi: Abi,\n+    sig: ty::FnSig<'tcx>,\n ) {\n+    let fn_ty = FnType::new(ccx, sig, &[]);\n     debug!(\"fn_ty: {:?}\", fn_ty);\n     let debug_context =\n-        debuginfo::create_function_debug_context(ccx, instance, sig, abi, llfn, mir);\n+        debuginfo::create_function_debug_context(ccx, instance, sig, llfn, mir);\n     let bcx = Builder::new_block(ccx, llfn, \"entry-block\");\n \n     let cleanup_kinds = analyze::cleanup_kinds(&mir);"}, {"sha": "4036d5152bb912179ae96d8f6d403b4e40a0b35b", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -201,7 +201,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                                     .find(|it| it.kind == ty::AssociatedKind::Method)\n                                     .unwrap().def_id;\n                                 // Now create its substs [Closure, Tuple]\n-                                let input = bcx.tcx().closure_type(def_id, substs).sig.input(0);\n+                                let input = bcx.tcx().closure_type(def_id, substs).input(0);\n                                 let substs = bcx.tcx().mk_substs([operand.ty, input.skip_binder()]\n                                     .iter().cloned().map(Kind::from));\n                                 OperandValue::Immediate("}, {"sha": "d691fa6aadf2ed3d1579dededff68533508ab3e0", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -199,11 +199,17 @@ impl<'a, 'tcx> TransItem<'tcx> {\n         assert_eq!(dg.ty(), glue::get_drop_glue_type(ccx.shared(), dg.ty()));\n         let t = dg.ty();\n \n-        let sig = tcx.mk_fn_sig(iter::once(tcx.mk_mut_ptr(t)), tcx.mk_nil(), false);\n+        let sig = tcx.mk_fn_sig(\n+            iter::once(tcx.mk_mut_ptr(t)),\n+            tcx.mk_nil(),\n+            false,\n+            hir::Unsafety::Normal,\n+            Abi::Rust\n+        );\n \n         debug!(\"predefine_drop_glue: sig={}\", sig);\n \n-        let fn_ty = FnType::new(ccx, Abi::Rust, &sig, &[]);\n+        let fn_ty = FnType::new(ccx, sig, &[]);\n         let llfnty = fn_ty.llvm_type(ccx);\n \n         assert!(declare::get_defined_value(ccx, symbol_name).is_none());\n@@ -457,12 +463,13 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                         output);\n                 }\n             },\n-            ty::TyFnDef(.., &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n-            ty::TyFnPtr(&ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n-                if unsafety == hir::Unsafety::Unsafe {\n+            ty::TyFnDef(.., sig) |\n+            ty::TyFnPtr(sig) => {\n+                if sig.unsafety() == hir::Unsafety::Unsafe {\n                     output.push_str(\"unsafe \");\n                 }\n \n+                let abi = sig.abi();\n                 if abi != ::abi::Abi::Rust {\n                     output.push_str(\"extern \\\"\");\n                     output.push_str(abi.name());\n@@ -471,7 +478,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n \n                 output.push_str(\"fn(\");\n \n-                let sig = self.tcx.erase_late_bound_regions_and_normalize(sig);\n+                let sig = self.tcx.erase_late_bound_regions_and_normalize(&sig);\n \n                 if !sig.inputs().is_empty() {\n                     for &parameter_type in sig.inputs() {"}, {"sha": "a5722e6e520d0140df8f482b768f55517aa31fcb", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -272,9 +272,9 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n       ty::TyStr | ty::TyDynamic(..) => Type::i8(cx),\n \n       ty::TyFnDef(..) => Type::nil(cx),\n-      ty::TyFnPtr(f) => {\n-        let sig = cx.tcx().erase_late_bound_regions_and_normalize(&f.sig);\n-        FnType::new(cx, f.abi, &sig, &[]).llvm_type(cx).ptr_to()\n+      ty::TyFnPtr(sig) => {\n+        let sig = cx.tcx().erase_late_bound_regions_and_normalize(&sig);\n+        FnType::new(cx, sig, &[]).llvm_type(cx).ptr_to()\n       }\n       ty::TyTuple(ref tys, _) if tys.is_empty() => Type::nil(cx),\n       ty::TyTuple(..) => {"}, {"sha": "8dc532894f3550da0a26d2b76d145b20e6cde3aa", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -1116,10 +1116,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 // warning then. (Once we fix #32330, the regions we are\n                 // checking for here would be considered early bound\n                 // anyway.)\n-                let inputs = bare_fn_ty.sig.inputs();\n+                let inputs = bare_fn_ty.inputs();\n                 let late_bound_in_args = tcx.collect_constrained_late_bound_regions(\n                     &inputs.map_bound(|i| i.to_owned()));\n-                let output = bare_fn_ty.sig.output();\n+                let output = bare_fn_ty.output();\n                 let late_bound_in_ret = tcx.collect_referenced_late_bound_regions(&output);\n                 for br in late_bound_in_ret.difference(&late_bound_in_args) {\n                     let br_name = match *br {\n@@ -1272,7 +1272,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                     unsafety: hir::Unsafety,\n                     abi: abi::Abi,\n                     decl: &hir::FnDecl)\n-                    -> &'tcx ty::BareFnTy<'tcx> {\n+                    -> ty::PolyFnSig<'tcx> {\n         debug!(\"ty_of_fn\");\n \n         let input_tys: Vec<Ty> =\n@@ -1285,23 +1285,21 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         debug!(\"ty_of_fn: output_ty={:?}\", output_ty);\n \n-        self.tcx().mk_bare_fn(ty::BareFnTy {\n-            unsafety: unsafety,\n-            abi: abi,\n-            sig: ty::Binder(self.tcx().mk_fn_sig(\n-                input_tys.into_iter(),\n-                output_ty,\n-                decl.variadic\n-            )),\n-        })\n+        ty::Binder(self.tcx().mk_fn_sig(\n+            input_tys.into_iter(),\n+            output_ty,\n+            decl.variadic,\n+            unsafety,\n+            abi\n+        ))\n     }\n \n     pub fn ty_of_closure(&self,\n         unsafety: hir::Unsafety,\n         decl: &hir::FnDecl,\n         abi: abi::Abi,\n         expected_sig: Option<ty::FnSig<'tcx>>)\n-        -> ty::ClosureTy<'tcx>\n+        -> ty::PolyFnSig<'tcx>\n     {\n         debug!(\"ty_of_closure(expected_sig={:?})\",\n                expected_sig);\n@@ -1338,11 +1336,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         debug!(\"ty_of_closure: output_ty={:?}\", output_ty);\n \n-        ty::ClosureTy {\n-            unsafety: unsafety,\n-            abi: abi,\n-            sig: ty::Binder(self.tcx().mk_fn_sig(input_tys, output_ty, decl.variadic)),\n-        }\n+        ty::Binder(self.tcx().mk_fn_sig(\n+            input_tys,\n+            output_ty,\n+            decl.variadic,\n+            unsafety,\n+            abi\n+        ))\n     }\n \n     /// Given the bounds on an object, determines what single region bound (if any) we can"}, {"sha": "a253b223ef6ea67af946f9d221f716e7b83327d6", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -14,6 +14,7 @@ use hir::def::Def;\n use hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::{infer, traits};\n use rustc::ty::{self, TyCtxt, LvaluePreference, Ty};\n+use syntax::abi;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n@@ -112,7 +113,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     let closure_ty = self.closure_type(def_id, substs);\n                     let fn_sig = self.replace_late_bound_regions_with_fresh_var(call_expr.span,\n                                                                    infer::FnCall,\n-                                                                   &closure_ty.sig)\n+                                                                   &closure_ty)\n                         .0;\n                     self.record_deferred_call_resolution(def_id,\n                                                          Box::new(CallResolution {\n@@ -186,13 +187,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             arg_exprs: &'gcx [hir::Expr],\n                             expected: Expectation<'tcx>)\n                             -> Ty<'tcx> {\n-        let error_fn_sig;\n-\n         let (fn_sig, def_span) = match callee_ty.sty {\n-            ty::TyFnDef(def_id, .., &ty::BareFnTy {ref sig, ..}) => {\n+            ty::TyFnDef(def_id, .., sig) => {\n                 (sig, self.tcx.hir.span_if_local(def_id))\n             }\n-            ty::TyFnPtr(&ty::BareFnTy {ref sig, ..}) => (sig, None),\n+            ty::TyFnPtr(sig) => (sig, None),\n             ref t => {\n                 let mut unit_variant = None;\n                 if let &ty::TyAdt(adt_def, ..) = t {\n@@ -232,13 +231,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // This is the \"default\" function signature, used in case of error.\n                 // In that case, we check each argument against \"error\" in order to\n                 // set up all the node type bindings.\n-                error_fn_sig = ty::Binder(self.tcx.mk_fn_sig(\n+                (ty::Binder(self.tcx.mk_fn_sig(\n                     self.err_args(arg_exprs.len()).into_iter(),\n                     self.tcx.types.err,\n                     false,\n-                ));\n-\n-                (&error_fn_sig, None)\n+                    hir::Unsafety::Normal,\n+                    abi::Abi::Rust\n+                )), None)\n             }\n         };\n \n@@ -248,7 +247,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // previously appeared within a `Binder<>` and hence would not\n         // have been normalized before.\n         let fn_sig =\n-            self.replace_late_bound_regions_with_fresh_var(call_expr.span, infer::FnCall, fn_sig)\n+            self.replace_late_bound_regions_with_fresh_var(call_expr.span, infer::FnCall, &fn_sig)\n                 .0;\n         let fn_sig = self.normalize_associated_types_in(call_expr.span, &fn_sig);\n \n@@ -355,7 +354,7 @@ impl<'gcx, 'tcx> DeferredCallResolution<'gcx, 'tcx> for CallResolution<'gcx, 'tc\n                 // (This always bites me, should find a way to\n                 // refactor it.)\n                 let method_sig = fcx.tcx\n-                    .no_late_bound_regions(method_callee.ty.fn_sig())\n+                    .no_late_bound_regions(&method_callee.ty.fn_sig())\n                     .unwrap();\n \n                 debug!(\"attempt_resolution: method_callee={:?}\", method_callee);"}, {"sha": "51fbc5aab6cd1510a87654b0f349967df668e050", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -55,11 +55,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                expected_sig);\n \n         let expr_def_id = self.tcx.hir.local_def_id(expr.id);\n-        let mut fn_ty = AstConv::ty_of_closure(self,\n-                                               hir::Unsafety::Normal,\n-                                               decl,\n-                                               Abi::RustCall,\n-                                               expected_sig);\n+        let sig = AstConv::ty_of_closure(self,\n+                                         hir::Unsafety::Normal,\n+                                         decl,\n+                                         Abi::RustCall,\n+                                         expected_sig);\n \n         // Create type variables (for now) to represent the transformed\n         // types of upvars. These will be unified during the upvar\n@@ -74,32 +74,28 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"check_closure: expr.id={:?} closure_type={:?}\", expr.id, closure_type);\n \n         let extent = self.tcx.region_maps.call_site_extent(expr.id, body.value.id);\n-        let fn_sig = self.tcx.liberate_late_bound_regions(extent, &fn_ty.sig);\n+        let fn_sig = self.tcx.liberate_late_bound_regions(extent, &sig);\n         let fn_sig = self.inh.normalize_associated_types_in(body.value.span,\n                                                             body.value.id, &fn_sig);\n \n-        check_fn(self,\n-                 hir::Unsafety::Normal,\n-                 expr.id,\n-                 &fn_sig,\n-                 decl,\n-                 expr.id,\n-                 body);\n+        check_fn(self, fn_sig, decl, expr.id, body);\n \n         // Tuple up the arguments and insert the resulting function type into\n         // the `closures` table.\n-        fn_ty.sig.0 = self.tcx.mk_fn_sig(\n-            iter::once(self.tcx.intern_tup(fn_ty.sig.skip_binder().inputs(), false)),\n-            fn_ty.sig.skip_binder().output(),\n-            fn_ty.sig.variadic()\n-        );\n+        let sig = sig.map_bound(|sig| self.tcx.mk_fn_sig(\n+            iter::once(self.tcx.intern_tup(sig.inputs(), false)),\n+            sig.output(),\n+            sig.variadic,\n+            sig.unsafety,\n+            sig.abi\n+        ));\n \n         debug!(\"closure for {:?} --> sig={:?} opt_kind={:?}\",\n                expr_def_id,\n-               fn_ty.sig,\n+               sig,\n                opt_kind);\n \n-        self.tables.borrow_mut().closure_tys.insert(expr.id, fn_ty);\n+        self.tables.borrow_mut().closure_tys.insert(expr.id, sig);\n         match opt_kind {\n             Some(kind) => {\n                 self.tables.borrow_mut().closure_kinds.insert(expr.id, kind);\n@@ -228,7 +224,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let ret_param_ty = self.resolve_type_vars_if_possible(&ret_param_ty);\n         debug!(\"deduce_sig_from_projection: ret_param_ty {:?}\", ret_param_ty);\n \n-        let fn_sig = self.tcx.mk_fn_sig(input_tys.cloned(), ret_param_ty, false);\n+        let fn_sig = self.tcx.mk_fn_sig(\n+            input_tys.cloned(),\n+            ret_param_ty,\n+            false,\n+            hir::Unsafety::Normal,\n+            Abi::Rust\n+        );\n         debug!(\"deduce_sig_from_projection: fn_sig {:?}\", fn_sig);\n \n         Some(fn_sig)"}, {"sha": "ecde2e1afe9d80550942c060f295c706c7c18fe9", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -507,11 +507,11 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n \n     fn coerce_from_safe_fn(&self,\n                            a: Ty<'tcx>,\n-                           fn_ty_a: &'tcx ty::BareFnTy<'tcx>,\n+                           fn_ty_a: ty::PolyFnSig<'tcx>,\n                            b: Ty<'tcx>)\n                            -> CoerceResult<'tcx> {\n         if let ty::TyFnPtr(fn_ty_b) = b.sty {\n-            match (fn_ty_a.unsafety, fn_ty_b.unsafety) {\n+            match (fn_ty_a.unsafety(), fn_ty_b.unsafety()) {\n                 (hir::Unsafety::Normal, hir::Unsafety::Unsafe) => {\n                     let unsafe_a = self.tcx.safe_to_unsafe_fn_ty(fn_ty_a);\n                     return self.unify_and_identity(unsafe_a, b)\n@@ -525,7 +525,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n \n     fn coerce_from_fn_pointer(&self,\n                               a: Ty<'tcx>,\n-                              fn_ty_a: &'tcx ty::BareFnTy<'tcx>,\n+                              fn_ty_a: ty::PolyFnSig<'tcx>,\n                               b: Ty<'tcx>)\n                               -> CoerceResult<'tcx> {\n         //! Attempts to coerce from the type of a Rust function item\n@@ -540,7 +540,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n \n     fn coerce_from_fn_item(&self,\n                            a: Ty<'tcx>,\n-                           fn_ty_a: &'tcx ty::BareFnTy<'tcx>,\n+                           fn_ty_a: ty::PolyFnSig<'tcx>,\n                            b: Ty<'tcx>)\n                            -> CoerceResult<'tcx> {\n         //! Attempts to coerce from the type of a Rust function item\n@@ -587,24 +587,23 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                 //     `extern \"rust-call\" fn((arg0,arg1,...)) -> _`\n                 // to\n                 //     `fn(arg0,arg1,...) -> _`\n-                let sig = self.closure_type(def_id_a, substs_a).sig;\n+                let sig = self.closure_type(def_id_a, substs_a);\n                 let converted_sig = sig.map_bound(|s| {\n                     let params_iter = match s.inputs()[0].sty {\n                         ty::TyTuple(params, _) => {\n                             params.into_iter().cloned()\n                         }\n                         _ => bug!(),\n                     };\n-                    self.tcx.mk_fn_sig(params_iter,\n-                                       s.output(),\n-                                       s.variadic)\n+                    self.tcx.mk_fn_sig(\n+                        params_iter,\n+                        s.output(),\n+                        s.variadic,\n+                        hir::Unsafety::Normal,\n+                        abi::Abi::Rust\n+                    )\n                 });\n-                let fn_ty = self.tcx.mk_bare_fn(ty::BareFnTy {\n-                    unsafety: hir::Unsafety::Normal,\n-                    abi: abi::Abi::Rust,\n-                    sig: converted_sig,\n-                });\n-                let pointer_ty = self.tcx.mk_fn_ptr(&fn_ty);\n+                let pointer_ty = self.tcx.mk_fn_ptr(converted_sig);\n                 debug!(\"coerce_closure_to_fn(a={:?}, b={:?}, pty={:?})\",\n                        a, b, pointer_ty);\n                 self.unify_and_identity(pointer_ty, b)"}, {"sha": "06cf653e29368f021cd77d3f4e02e9c347444e9c", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -263,19 +263,17 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // Compute skolemized form of impl and trait method tys.\n         let tcx = infcx.tcx;\n \n-        let m_fty = |method: &ty::AssociatedItem| {\n+        let m_sig = |method: &ty::AssociatedItem| {\n             match tcx.item_type(method.def_id).sty {\n                 ty::TyFnDef(_, _, f) => f,\n                 _ => bug!()\n             }\n         };\n-        let impl_m_fty = m_fty(impl_m);\n-        let trait_m_fty = m_fty(trait_m);\n \n         let (impl_sig, _) =\n             infcx.replace_late_bound_regions_with_fresh_var(impl_m_span,\n                                                             infer::HigherRankedType,\n-                                                            &impl_m_fty.sig);\n+                                                            &m_sig(impl_m));\n         let impl_sig =\n             impl_sig.subst(tcx, impl_to_skol_substs);\n         let impl_sig =\n@@ -284,16 +282,12 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                  impl_m_span,\n                                                  impl_m_body_id,\n                                                  &impl_sig);\n-        let impl_fty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n-            unsafety: impl_m_fty.unsafety,\n-            abi: impl_m_fty.abi,\n-            sig: ty::Binder(impl_sig.clone()),\n-        }));\n+        let impl_fty = tcx.mk_fn_ptr(ty::Binder(impl_sig));\n         debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n \n         let trait_sig = tcx.liberate_late_bound_regions(\n             infcx.parameter_environment.free_id_outlive,\n-            &trait_m_fty.sig);\n+            &m_sig(trait_m));\n         let trait_sig =\n             trait_sig.subst(tcx, trait_to_skol_substs);\n         let trait_sig =\n@@ -302,11 +296,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                  impl_m_span,\n                                                  impl_m_body_id,\n                                                  &trait_sig);\n-        let trait_fty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n-            unsafety: trait_m_fty.unsafety,\n-            abi: trait_m_fty.abi,\n-            sig: ty::Binder(trait_sig.clone()),\n-        }));\n+        let trait_fty = tcx.mk_fn_ptr(ty::Binder(trait_sig));\n \n         debug!(\"compare_impl_method: trait_fty={:?}\", trait_fty);\n \n@@ -662,8 +652,8 @@ fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     };\n     let impl_m_fty = m_fty(impl_m);\n     let trait_m_fty = m_fty(trait_m);\n-    let trait_number_args = trait_m_fty.sig.inputs().skip_binder().len();\n-    let impl_number_args = impl_m_fty.sig.inputs().skip_binder().len();\n+    let trait_number_args = trait_m_fty.inputs().skip_binder().len();\n+    let impl_number_args = impl_m_fty.inputs().skip_binder().len();\n     if trait_number_args != impl_number_args {\n         let trait_m_node_id = tcx.hir.as_local_node_id(trait_m.def_id);\n         let trait_span = if let Some(trait_id) = trait_m_node_id {"}, {"sha": "232c4c4db7c97d41133e19b229797cd4a047afe4", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -123,8 +123,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match method.def() {\n             Def::Method(def_id) => {\n                 match self.tcx.item_type(def_id).sty {\n-                    ty::TypeVariants::TyFnDef(_, _, fty) => {\n-                        fty.sig.skip_binder().inputs().len() == 1\n+                    ty::TypeVariants::TyFnDef(_, _, sig) => {\n+                        sig.inputs().skip_binder().len() == 1\n                     }\n                     _ => false,\n                 }"}, {"sha": "28996b40cfdfec0f2fa7d76df348e78311f00525", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -39,11 +39,13 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                   |_, _| tcx.mk_region(ty::ReErased),\n                                   |def, _| tcx.mk_param_from_def(def));\n \n-    let fty = tcx.mk_fn_def(def_id, substs, tcx.mk_bare_fn(ty::BareFnTy {\n-        unsafety: hir::Unsafety::Unsafe,\n-        abi: abi,\n-        sig: ty::Binder(tcx.mk_fn_sig(inputs.into_iter(), output, false)),\n-    }));\n+    let fty = tcx.mk_fn_def(def_id, substs, ty::Binder(tcx.mk_fn_sig(\n+        inputs.into_iter(),\n+        output,\n+        false,\n+        hir::Unsafety::Unsafe,\n+        abi\n+    )));\n     let i_n_tps = tcx.item_generics(def_id).types.len();\n     if i_n_tps != n_tps {\n         let span = match it.node {\n@@ -288,11 +290,13 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             \"try\" => {\n                 let mut_u8 = tcx.mk_mut_ptr(tcx.types.u8);\n-                let fn_ty = tcx.mk_bare_fn(ty::BareFnTy {\n-                    unsafety: hir::Unsafety::Normal,\n-                    abi: Abi::Rust,\n-                    sig: ty::Binder(tcx.mk_fn_sig(iter::once(mut_u8), tcx.mk_nil(), false)),\n-                });\n+                let fn_ty = ty::Binder(tcx.mk_fn_sig(\n+                    iter::once(mut_u8),\n+                    tcx.mk_nil(),\n+                    false,\n+                    hir::Unsafety::Normal,\n+                    Abi::Rust,\n+                ));\n                 (0, vec![tcx.mk_fn_ptr(fn_ty), mut_u8, mut_u8], tcx.types.i32)\n             }\n \n@@ -363,7 +367,7 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     let mut structural_to_nomimal = FxHashMap();\n \n                     let sig = tcx.item_type(def_id).fn_sig();\n-                    let sig = tcx.no_late_bound_regions(sig).unwrap();\n+                    let sig = tcx.no_late_bound_regions(&sig).unwrap();\n                     if intr.inputs.len() != sig.inputs().len() {\n                         span_err!(tcx.sess, it.span, E0444,\n                                   \"platform-specific intrinsic has invalid number of \\"}, {"sha": "e6e4b577bd50d785825d3690041d740f3c9b4498", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -365,32 +365,23 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n \n         debug!(\"method_predicates after subst = {:?}\", method_predicates);\n \n-        let fty = match self.tcx.item_type(def_id).sty {\n-            ty::TyFnDef(_, _, f) => f,\n-            _ => bug!()\n-        };\n+        let sig = self.tcx.item_type(def_id).fn_sig();\n \n         // Instantiate late-bound regions and substitute the trait\n         // parameters into the method type to get the actual method type.\n         //\n         // NB: Instantiate late-bound regions first so that\n         // `instantiate_type_scheme` can normalize associated types that\n         // may reference those regions.\n-        let method_sig = self.replace_late_bound_regions_with_fresh_var(&fty.sig);\n+        let method_sig = self.replace_late_bound_regions_with_fresh_var(&sig);\n         debug!(\"late-bound lifetimes from method instantiated, method_sig={:?}\",\n                method_sig);\n \n         let method_sig = self.instantiate_type_scheme(self.span, all_substs, &method_sig);\n         debug!(\"type scheme substituted, method_sig={:?}\", method_sig);\n \n-        let method_ty = self.tcx.mk_fn_def(def_id, all_substs,\n-                                           self.tcx.mk_bare_fn(ty::BareFnTy {\n-            sig: ty::Binder(method_sig),\n-            unsafety: fty.unsafety,\n-            abi: fty.abi,\n-        }));\n-\n-        (method_ty, method_predicates)\n+        (self.tcx.mk_fn_def(def_id, all_substs, ty::Binder(method_sig)),\n+         method_predicates)\n     }\n \n     fn add_obligations(&mut self,"}, {"sha": "62438d87d18609400d817aed613a36c5f60cc48b", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -244,21 +244,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // `instantiate_type_scheme` can normalize associated types that\n         // may reference those regions.\n         let original_method_ty = tcx.item_type(def_id);\n-        let fty = match original_method_ty.sty {\n-            ty::TyFnDef(_, _, f) => f,\n-            _ => bug!()\n-        };\n+        let fn_sig = original_method_ty.fn_sig();\n         let fn_sig = self.replace_late_bound_regions_with_fresh_var(span,\n                                                                     infer::FnCall,\n-                                                                    &fty.sig).0;\n+                                                                    &fn_sig).0;\n         let fn_sig = self.instantiate_type_scheme(span, trait_ref.substs, &fn_sig);\n         let transformed_self_ty = fn_sig.inputs()[0];\n         let method_ty = tcx.mk_fn_def(def_id, trait_ref.substs,\n-                                      tcx.mk_bare_fn(ty::BareFnTy {\n-            sig: ty::Binder(fn_sig),\n-            unsafety: fty.unsafety,\n-            abi: fty.abi\n-        }));\n+                                     ty::Binder(fn_sig));\n \n         debug!(\"lookup_in_trait_adjusted: matched method method_ty={:?} obligation={:?}\",\n                method_ty,"}, {"sha": "773fec1d87055cac7600d74e90cc34b9afe035bf", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -675,25 +675,21 @@ fn check_bare_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                            span: Span) {\n     let body = tcx.hir.body(body_id);\n \n-    let raw_fty = tcx.item_type(tcx.hir.local_def_id(fn_id));\n-    let fn_ty = match raw_fty.sty {\n-        ty::TyFnDef(.., f) => f,\n-        _ => span_bug!(body.value.span, \"check_bare_fn: function type expected\")\n-    };\n+    let fn_sig = tcx.item_type(tcx.hir.local_def_id(fn_id)).fn_sig();\n \n-    check_abi(tcx, span, fn_ty.abi);\n+    check_abi(tcx, span, fn_sig.abi());\n \n     Inherited::build(tcx, fn_id).enter(|inh| {\n         // Compute the fty from point of view of inside fn.\n         let fn_scope = inh.tcx.region_maps.call_site_extent(fn_id, body_id.node_id);\n         let fn_sig =\n-            fn_ty.sig.subst(inh.tcx, &inh.parameter_environment.free_substs);\n+            fn_sig.subst(inh.tcx, &inh.parameter_environment.free_substs);\n         let fn_sig =\n             inh.tcx.liberate_late_bound_regions(fn_scope, &fn_sig);\n         let fn_sig =\n             inh.normalize_associated_types_in(body.value.span, body_id.node_id, &fn_sig);\n \n-        let fcx = check_fn(&inh, fn_ty.unsafety, fn_id, &fn_sig, decl, fn_id, body);\n+        let fcx = check_fn(&inh, fn_sig, decl, fn_id, body);\n \n         fcx.select_all_obligations_and_apply_defaults();\n         fcx.closure_analyze(body);\n@@ -783,9 +779,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n /// * ...\n /// * inherited: other fields inherited from the enclosing fn (if any)\n fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n-                            unsafety: hir::Unsafety,\n-                            unsafety_id: ast::NodeId,\n-                            fn_sig: &ty::FnSig<'tcx>,\n+                            fn_sig: ty::FnSig<'tcx>,\n                             decl: &'gcx hir::FnDecl,\n                             fn_id: ast::NodeId,\n                             body: &'gcx hir::Body)\n@@ -799,12 +793,17 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     // in the case of function expressions, based on the outer context.\n     let mut fcx = FnCtxt::new(inherited, None, body.value.id);\n     let ret_ty = fn_sig.output();\n-    *fcx.ps.borrow_mut() = UnsafetyState::function(unsafety, unsafety_id);\n+    *fcx.ps.borrow_mut() = UnsafetyState::function(fn_sig.unsafety, fn_id);\n \n     fcx.require_type_is_sized(ret_ty, decl.output.span(), traits::ReturnType);\n     fcx.ret_ty = fcx.instantiate_anon_types(&Some(ret_ty));\n-    fn_sig = fcx.tcx.mk_fn_sig(fn_sig.inputs().iter().cloned(), &fcx.ret_ty.unwrap(),\n-                               fn_sig.variadic);\n+    fn_sig = fcx.tcx.mk_fn_sig(\n+        fn_sig.inputs().iter().cloned(),\n+        fcx.ret_ty.unwrap(),\n+        fn_sig.variadic,\n+        fn_sig.unsafety,\n+        fn_sig.abi\n+    );\n \n     GatherLocalsVisitor { fcx: &fcx, }.visit_body(body);\n \n@@ -2393,13 +2392,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     let expected_arg_tys = self.expected_types_for_fn_args(\n                         sp,\n                         expected,\n-                        fty.sig.0.output(),\n-                        &fty.sig.0.inputs()[1..]\n+                        fty.0.output(),\n+                        &fty.0.inputs()[1..]\n                     );\n-                    self.check_argument_types(sp, &fty.sig.0.inputs()[1..], &expected_arg_tys[..],\n-                                              args_no_rcvr, fty.sig.0.variadic, tuple_arguments,\n+                    self.check_argument_types(sp, &fty.0.inputs()[1..], &expected_arg_tys[..],\n+                                              args_no_rcvr, fty.0.variadic, tuple_arguments,\n                                               self.tcx.hir.span_if_local(def_id));\n-                    fty.sig.0.output()\n+                    fty.0.output()\n                 }\n                 _ => {\n                     span_bug!(callee_expr.span, \"method without bare fn type\");"}, {"sha": "e1067d299fa01b8d3f387e367f65c7435e4c996c", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -927,7 +927,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                     // was applied on the base type, as that is always the case.\n                     let fn_sig = method.ty.fn_sig();\n                     let fn_sig = // late-bound regions should have been instantiated\n-                        self.tcx.no_late_bound_regions(fn_sig).unwrap();\n+                        self.tcx.no_late_bound_regions(&fn_sig).unwrap();\n                     let self_ty = fn_sig.inputs()[0];\n                     let (m, r) = match self_ty.sty {\n                         ty::TyRef(r, ref m) => (m.mutbl, r),"}, {"sha": "a4cb4071b4d88c319a88c59eda07db3e9866b4b0", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -182,11 +182,8 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                     let method_ty = fcx.tcx.item_type(item.def_id);\n                     let method_ty = fcx.instantiate_type_scheme(span, free_substs, &method_ty);\n                     let predicates = fcx.instantiate_bounds(span, item.def_id, free_substs);\n-                    let fty = match method_ty.sty {\n-                        ty::TyFnDef(_, _, f) => f,\n-                        _ => bug!()\n-                    };\n-                    this.check_fn_or_method(fcx, span, fty, &predicates,\n+                    let sig = method_ty.fn_sig();\n+                    this.check_fn_or_method(fcx, span, sig, &predicates,\n                                             free_id_outlive, &mut implied_bounds);\n                     let sig_if_method = sig_if_method.expect(\"bad signature for method\");\n                     this.check_method_receiver(fcx, sig_if_method, &item,\n@@ -339,18 +336,13 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n             let def_id = fcx.tcx.hir.local_def_id(item.id);\n             let ty = fcx.tcx.item_type(def_id);\n             let item_ty = fcx.instantiate_type_scheme(item.span, free_substs, &ty);\n-            let bare_fn_ty = match item_ty.sty {\n-                ty::TyFnDef(.., ref bare_fn_ty) => bare_fn_ty,\n-                _ => {\n-                    span_bug!(item.span, \"Fn item without fn type\");\n-                }\n-            };\n+            let sig = item_ty.fn_sig();\n \n             let predicates = fcx.instantiate_bounds(item.span, def_id, free_substs);\n \n             let mut implied_bounds = vec![];\n             let free_id_outlive = fcx.tcx.region_maps.call_site_extent(item.id, body_id.node_id);\n-            this.check_fn_or_method(fcx, item.span, bare_fn_ty, &predicates,\n+            this.check_fn_or_method(fcx, item.span, sig, &predicates,\n                                     free_id_outlive, &mut implied_bounds);\n             implied_bounds\n         })\n@@ -435,14 +427,14 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n     fn check_fn_or_method<'fcx, 'tcx>(&mut self,\n                                       fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n                                       span: Span,\n-                                      fty: &'tcx ty::BareFnTy<'tcx>,\n+                                      sig: ty::PolyFnSig<'tcx>,\n                                       predicates: &ty::InstantiatedPredicates<'tcx>,\n                                       free_id_outlive: CodeExtent,\n                                       implied_bounds: &mut Vec<Ty<'tcx>>)\n     {\n         let free_substs = &fcx.parameter_environment.free_substs;\n-        let fty = fcx.instantiate_type_scheme(span, free_substs, &fty);\n-        let sig = fcx.tcx.liberate_late_bound_regions(free_id_outlive, &fty.sig);\n+        let sig = fcx.instantiate_type_scheme(span, free_substs, &sig);\n+        let sig = fcx.tcx.liberate_late_bound_regions(free_id_outlive, &sig);\n \n         for input_ty in sig.inputs() {\n             fcx.register_wf_obligation(&input_ty, span, self.code.clone());"}, {"sha": "1f7772fb9aa65ad6183d2bf8bb608a67b8e022a2", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -739,11 +739,13 @@ fn convert_variant_ctor<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         CtorKind::Fn => {\n             let inputs = variant.fields.iter().map(|field| tcx.item_type(field.did));\n             let substs = mk_item_substs(tcx, def_id);\n-            tcx.mk_fn_def(def_id, substs, tcx.mk_bare_fn(ty::BareFnTy {\n-                unsafety: hir::Unsafety::Normal,\n-                abi: abi::Abi::Rust,\n-                sig: ty::Binder(tcx.mk_fn_sig(inputs, ty, false))\n-            }))\n+            tcx.mk_fn_def(def_id, substs, ty::Binder(tcx.mk_fn_sig(\n+                inputs,\n+                ty,\n+                false,\n+                hir::Unsafety::Normal,\n+                abi::Abi::Rust\n+            )))\n         }\n     };\n     tcx.maps.ty.borrow_mut().insert(def_id, ctor_ty);\n@@ -1682,11 +1684,11 @@ fn compute_type_of_foreign_fn_decl<'a, 'tcx>(\n                     .emit();\n             }\n         };\n-        for (input, ty) in decl.inputs.iter().zip(*fty.sig.inputs().skip_binder()) {\n+        for (input, ty) in decl.inputs.iter().zip(*fty.inputs().skip_binder()) {\n             check(&input, ty)\n         }\n         if let hir::Return(ref ty) = decl.output {\n-            check(&ty, *fty.sig.output().skip_binder())\n+            check(&ty, *fty.output().skip_binder())\n         }\n     }\n "}, {"sha": "009a0b92d882ce385f50d12f6ba611367cacc331", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -196,11 +196,14 @@ fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n             let substs = tcx.intern_substs(&[]);\n             let se_ty = tcx.mk_fn_def(main_def_id, substs,\n-                                      tcx.mk_bare_fn(ty::BareFnTy {\n-                unsafety: hir::Unsafety::Normal,\n-                abi: Abi::Rust,\n-                sig: ty::Binder(tcx.mk_fn_sig(iter::empty(), tcx.mk_nil(), false))\n-            }));\n+                ty::Binder(tcx.mk_fn_sig(\n+                    iter::empty(),\n+                    tcx.mk_nil(),\n+                    false,\n+                    hir::Unsafety::Normal,\n+                    Abi::Rust\n+                ))\n+            );\n \n             require_same_types(\n                 tcx,\n@@ -243,18 +246,17 @@ fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             let substs = tcx.intern_substs(&[]);\n             let se_ty = tcx.mk_fn_def(start_def_id, substs,\n-                                      tcx.mk_bare_fn(ty::BareFnTy {\n-                unsafety: hir::Unsafety::Normal,\n-                abi: Abi::Rust,\n-                sig: ty::Binder(tcx.mk_fn_sig(\n+                ty::Binder(tcx.mk_fn_sig(\n                     [\n                         tcx.types.isize,\n                         tcx.mk_imm_ptr(tcx.mk_imm_ptr(tcx.types.u8))\n                     ].iter().cloned(),\n                     tcx.types.isize,\n                     false,\n-                )),\n-            }));\n+                    hir::Unsafety::Normal,\n+                    Abi::Rust\n+                ))\n+            );\n \n             require_same_types(\n                 tcx,"}, {"sha": "f0f543fa6f23b7af8b774a5e5e8bbe72e0fd069d", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -411,8 +411,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 }\n             }\n \n-            ty::TyFnDef(.., &ty::BareFnTy { ref sig, .. }) |\n-            ty::TyFnPtr(&ty::BareFnTy { ref sig, .. }) => {\n+            ty::TyFnDef(.., sig) |\n+            ty::TyFnPtr(sig) => {\n                 self.add_constraints_from_sig(generics, sig, variance);\n             }\n \n@@ -465,7 +465,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     /// `sig` appearing in a context with ambient variance `variance`\n     fn add_constraints_from_sig(&mut self,\n                                 generics: &ty::Generics,\n-                                sig: &ty::PolyFnSig<'tcx>,\n+                                sig: ty::PolyFnSig<'tcx>,\n                                 variance: VarianceTermPtr<'a>) {\n         let contra = self.contravariant(variance);\n         for &input in sig.0.inputs() {"}, {"sha": "61c2a3c9e9512bab0c001e13f6f1e3f7b5b33eeb", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -164,11 +164,7 @@ pub fn build_external_trait(cx: &DocContext, did: DefId) -> clean::Trait {\n }\n \n fn build_external_function(cx: &DocContext, did: DefId) -> clean::Function {\n-    let ty = cx.tcx.item_type(did);\n-    let (decl, style, abi) = match ty.sty {\n-        ty::TyFnDef(.., ref f) => ((did, &f.sig).clean(cx), f.unsafety, f.abi),\n-        _ => panic!(\"bad function\"),\n-    };\n+    let sig = cx.tcx.item_type(did).fn_sig();\n \n     let constness = if cx.tcx.sess.cstore.is_const_fn(did) {\n         hir::Constness::Const\n@@ -178,11 +174,11 @@ fn build_external_function(cx: &DocContext, did: DefId) -> clean::Function {\n \n     let predicates = cx.tcx.item_predicates(did);\n     clean::Function {\n-        decl: decl,\n+        decl: (did, sig).clean(cx),\n         generics: (cx.tcx.item_generics(did), &predicates).clean(cx),\n-        unsafety: style,\n+        unsafety: sig.unsafety(),\n         constness: constness,\n-        abi: abi,\n+        abi: sig.abi(),\n     }\n }\n "}, {"sha": "73b82fbad5dfda02aa50b0fb975ddd442c6a7143", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91374f8fe482e5938a8f08353aa48ef9c7873637/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=91374f8fe482e5938a8f08353aa48ef9c7873637", "patch": "@@ -1163,7 +1163,7 @@ impl<'a, A: Copy> Clean<FnDecl> for (&'a hir::FnDecl, A)\n     }\n }\n \n-impl<'a, 'tcx> Clean<FnDecl> for (DefId, &'a ty::PolyFnSig<'tcx>) {\n+impl<'a, 'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n     fn clean(&self, cx: &DocContext) -> FnDecl {\n         let (did, sig) = *self;\n         let mut names = if cx.tcx.hir.as_local_node_id(did).is_some() {\n@@ -1352,11 +1352,8 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n             ty::AssociatedKind::Method => {\n                 let generics = (cx.tcx.item_generics(self.def_id),\n                                 &cx.tcx.item_predicates(self.def_id)).clean(cx);\n-                let fty = match cx.tcx.item_type(self.def_id).sty {\n-                    ty::TyFnDef(_, _, f) => f,\n-                    _ => unreachable!()\n-                };\n-                let mut decl = (self.def_id, &fty.sig).clean(cx);\n+                let sig = cx.tcx.item_type(self.def_id).fn_sig();\n+                let mut decl = (self.def_id, sig).clean(cx);\n \n                 if self.method_has_self_argument {\n                     let self_ty = match self.container {\n@@ -1365,7 +1362,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                         }\n                         ty::TraitContainer(_) => cx.tcx.mk_self_type()\n                     };\n-                    let self_arg_ty = *fty.sig.input(0).skip_binder();\n+                    let self_arg_ty = *sig.input(0).skip_binder();\n                     if self_arg_ty == self_ty {\n                         decl.inputs.values[0].type_ = Generic(String::from(\"Self\"));\n                     } else if let ty::TyRef(_, mt) = self_arg_ty.sty {\n@@ -1386,20 +1383,20 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                 };\n                 if provided {\n                     MethodItem(Method {\n-                        unsafety: fty.unsafety,\n+                        unsafety: sig.unsafety(),\n                         generics: generics,\n                         decl: decl,\n-                        abi: fty.abi,\n+                        abi: sig.abi(),\n \n                         // trait methods canot (currently, at least) be const\n                         constness: hir::Constness::NotConst,\n                     })\n                 } else {\n                     TyMethodItem(TyMethod {\n-                        unsafety: fty.unsafety,\n+                        unsafety: sig.unsafety(),\n                         generics: generics,\n                         decl: decl,\n-                        abi: fty.abi,\n+                        abi: sig.abi(),\n                     })\n                 }\n             }\n@@ -1834,16 +1831,16 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 mutability: mt.mutbl.clean(cx),\n                 type_: box mt.ty.clean(cx),\n             },\n-            ty::TyFnDef(.., ref fty) |\n-            ty::TyFnPtr(ref fty) => BareFunction(box BareFunctionDecl {\n-                unsafety: fty.unsafety,\n+            ty::TyFnDef(.., sig) |\n+            ty::TyFnPtr(sig) => BareFunction(box BareFunctionDecl {\n+                unsafety: sig.unsafety(),\n                 generics: Generics {\n                     lifetimes: Vec::new(),\n                     type_params: Vec::new(),\n                     where_predicates: Vec::new()\n                 },\n-                decl: (cx.tcx.hir.local_def_id(ast::CRATE_NODE_ID), &fty.sig).clean(cx),\n-                abi: fty.abi,\n+                decl: (cx.tcx.hir.local_def_id(ast::CRATE_NODE_ID), sig).clean(cx),\n+                abi: sig.abi(),\n             }),\n             ty::TyAdt(def, substs) => {\n                 let did = def.did;"}]}