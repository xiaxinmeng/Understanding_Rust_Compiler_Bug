{"sha": "168306f11b323164ebe4050b9dea29b9756ade47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ODMwNmYxMWIzMjMxNjRlYmU0MDUwYjlkZWEyOWI5NzU2YWRlNDc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-20T03:13:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-25T12:45:52Z"}, "message": "correct treatment of mutability for deref'd components\n\nFixes #2980", "tree": {"sha": "303f2a2737985e1ac75bbc415f9d99b988c028d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/303f2a2737985e1ac75bbc415f9d99b988c028d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/168306f11b323164ebe4050b9dea29b9756ade47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/168306f11b323164ebe4050b9dea29b9756ade47", "html_url": "https://github.com/rust-lang/rust/commit/168306f11b323164ebe4050b9dea29b9756ade47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/168306f11b323164ebe4050b9dea29b9756ade47/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1df5c527913848debea6b14b0be49066c155044c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1df5c527913848debea6b14b0be49066c155044c", "html_url": "https://github.com/rust-lang/rust/commit/1df5c527913848debea6b14b0be49066c155044c"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "45c904ab8b6b0bee6522f67ff12a7d8fba0202a3", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/168306f11b323164ebe4050b9dea29b9756ade47/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168306f11b323164ebe4050b9dea29b9756ade47/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=168306f11b323164ebe4050b9dea29b9756ade47", "patch": "@@ -293,6 +293,18 @@ impl public_methods for borrowck_ctxt {\n         ret @{cat:cat_discr(cmt, alt_id) with *cmt};\n     }\n \n+    /// inherited mutability: used in cases where the mutability of a\n+    /// component is inherited from the base it is a part of. For\n+    /// example, a record field is mutable if it is declared mutable\n+    /// or if the container is mutable.\n+    fn inherited_mutability(base_m: ast::mutability,\n+                          comp_m: ast::mutability) -> ast::mutability {\n+        alt comp_m {\n+          m_imm => {base_m}  // imm: as mutable as the container\n+          m_mutbl | m_const => {comp_m}\n+        }\n+    }\n+\n     fn cat_field<N:ast_node>(node: N, base_cmt: cmt,\n                              f_name: ast::ident) -> cmt {\n         let f_mutbl = alt field_mutbl(self.tcx, base_cmt.ty, f_name) {\n@@ -304,10 +316,7 @@ impl public_methods for borrowck_ctxt {\n                      *f_name, ty_to_str(self.tcx, base_cmt.ty)]);\n           }\n         };\n-        let m = alt f_mutbl {\n-          m_imm { base_cmt.mutbl } // imm: as mutable as the container\n-          m_mutbl | m_const { f_mutbl }\n-        };\n+        let m = self.inherited_mutability(base_cmt.mutbl, f_mutbl);\n         let f_comp = comp_field(f_name, f_mutbl);\n         let lp = base_cmt.lp.map(|lp| @lp_comp(lp, f_comp) );\n         @{id: node.id(), span: node.span(),\n@@ -327,20 +336,22 @@ impl public_methods for borrowck_ctxt {\n                     // Other ptr types admit aliases and are therefore\n                     // not loanable.\n                     alt ptr {\n-                      uniq_ptr {some(@lp_deref(l, ptr))}\n-                      gc_ptr | region_ptr | unsafe_ptr {none}\n+                      uniq_ptr => {some(@lp_deref(l, ptr))}\n+                      gc_ptr | region_ptr | unsafe_ptr => {none}\n                     }\n                 };\n+\n                 @{id:node.id(), span:node.span(),\n                   cat:cat_deref(base_cmt, derefs, ptr), lp:lp,\n                   mutbl:mt.mutbl, ty:mt.ty}\n               }\n \n               deref_comp(comp) {\n                 let lp = base_cmt.lp.map(|l| @lp_comp(l, comp) );\n+                let m = self.inherited_mutability(base_cmt.mutbl, mt.mutbl);\n                 @{id:node.id(), span:node.span(),\n                   cat:cat_comp(base_cmt, comp), lp:lp,\n-                  mutbl:mt.mutbl, ty:mt.ty}\n+                  mutbl:m, ty:mt.ty}\n               }\n             }\n         }"}, {"sha": "b97471e6042dee2211416b72e23e1e854d1eda7d", "filename": "src/test/compile-fail/borrowck-mut-deref-comp.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/168306f11b323164ebe4050b9dea29b9756ade47/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-deref-comp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168306f11b323164ebe4050b9dea29b9756ade47/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-deref-comp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-deref-comp.rs?ref=168306f11b323164ebe4050b9dea29b9756ade47", "patch": "@@ -0,0 +1,9 @@\n+enum foo = ~int;\n+\n+fn borrow(x: @mut foo) {\n+    let y = &***x; //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    *x = foo(~4); //~ NOTE impure due to assigning to dereference of mutable @ pointer\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}]}