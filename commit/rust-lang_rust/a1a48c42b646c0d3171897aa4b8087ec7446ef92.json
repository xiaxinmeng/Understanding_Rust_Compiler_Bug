{"sha": "a1a48c42b646c0d3171897aa4b8087ec7446ef92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYTQ4YzQyYjY0NmMwZDMxNzE4OTdhYTRiODA4N2VjNzQ0NmVmOTI=", "commit": {"author": {"name": "Jack Fransham", "email": "jack.fransham@cuvva.co", "date": "2015-11-29T14:23:16Z"}, "committer": {"name": "Jack Fransham", "email": "jack.fransham@cuvva.co", "date": "2015-11-29T14:23:16Z"}, "message": "Better errors when rustc cannot derive lifetimes", "tree": {"sha": "bf0d4316e97c7cd3da56ec1a56a3b95adeb06d6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf0d4316e97c7cd3da56ec1a56a3b95adeb06d6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1a48c42b646c0d3171897aa4b8087ec7446ef92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a48c42b646c0d3171897aa4b8087ec7446ef92", "html_url": "https://github.com/rust-lang/rust/commit/a1a48c42b646c0d3171897aa4b8087ec7446ef92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1a48c42b646c0d3171897aa4b8087ec7446ef92/comments", "author": null, "committer": null, "parents": [{"sha": "323781cdf700172a9b8fedf0614a995d4a4d81c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/323781cdf700172a9b8fedf0614a995d4a4d81c0", "html_url": "https://github.com/rust-lang/rust/commit/323781cdf700172a9b8fedf0614a995d4a4d81c0"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "ec1d04dbd933d5d98ddb465fead0147eefbf223b", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a1a48c42b646c0d3171897aa4b8087ec7446ef92/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a48c42b646c0d3171897aa4b8087ec7446ef92/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a1a48c42b646c0d3171897aa4b8087ec7446ef92", "patch": "@@ -203,11 +203,15 @@ fn report_elision_failure(\n {\n     let mut m = String::new();\n     let len = params.len();\n+    let mut any_lifetimes = false;\n+\n     for (i, info) in params.into_iter().enumerate() {\n         let ElisionFailureInfo {\n             name, lifetime_count: n, have_bound_regions\n         } = info;\n \n+        any_lifetimes = any_lifetimes || (n > 0);\n+\n         let help_name = if name.is_empty() {\n             format!(\"argument {}\", i + 1)\n         } else {\n@@ -229,7 +233,16 @@ fn report_elision_failure(\n             m.push_str(\", \");\n         }\n     }\n-    if len == 1 {\n+\n+    if !any_lifetimes {\n+        fileline_help!(tcx.sess, default_span,\n+                       \"this function's return type contains a borrowed value with \\\n+                        an elided lifetime, but the lifetime cannot be derived from \\\n+                        the arguments\");\n+        fileline_help!(tcx.sess, default_span,\n+                       \"consider giving it an explicit bounded or 'static \\\n+                        lifetime\");\n+    } else if len == 1 {\n         fileline_help!(tcx.sess, default_span,\n                        \"this function's return type contains a borrowed value, but \\\n                         the signature does not say which {} it is borrowed from\","}]}