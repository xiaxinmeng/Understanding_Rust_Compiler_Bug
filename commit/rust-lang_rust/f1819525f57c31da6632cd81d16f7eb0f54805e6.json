{"sha": "f1819525f57c31da6632cd81d16f7eb0f54805e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxODE5NTI1ZjU3YzMxZGE2NjMyY2Q4MWQxNmY3ZWIwZjU0ODA1ZTY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-02T17:50:37Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-02T17:50:37Z"}, "message": "Simplify", "tree": {"sha": "dfaedb4c6664d0e11fa0f34a5213b80e69760a02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfaedb4c6664d0e11fa0f34a5213b80e69760a02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1819525f57c31da6632cd81d16f7eb0f54805e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1819525f57c31da6632cd81d16f7eb0f54805e6", "html_url": "https://github.com/rust-lang/rust/commit/f1819525f57c31da6632cd81d16f7eb0f54805e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1819525f57c31da6632cd81d16f7eb0f54805e6/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7d61ddba4726ce941fabe594a947c70ffb7a811", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d61ddba4726ce941fabe594a947c70ffb7a811", "html_url": "https://github.com/rust-lang/rust/commit/a7d61ddba4726ce941fabe594a947c70ffb7a811"}], "stats": {"total": 82, "additions": 40, "deletions": 42}, "files": [{"sha": "a84f8f12077bfa2013433d601e165e1cc30f44d0", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 40, "deletions": 42, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f1819525f57c31da6632cd81d16f7eb0f54805e6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1819525f57c31da6632cd81d16f7eb0f54805e6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=f1819525f57c31da6632cd81d16f7eb0f54805e6", "patch": "@@ -86,53 +86,21 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n         target,\n         move |edit| {\n             let match_expr = {\n-                let else_arm = {\n-                    match else_block {\n-                        Some(else_block) => {\n-                            let pattern = match &*cond_bodies {\n-                                [(Either::Left(pat), _)] => ctx\n-                                    .sema\n-                                    .type_of_pat(&pat)\n-                                    .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty))\n-                                    .map(|it| {\n-                                        if does_pat_match_variant(&pat, &it.sad_pattern()) {\n-                                            it.happy_pattern()\n-                                        } else {\n-                                            it.sad_pattern()\n-                                        }\n-                                    }),\n-                                _ => None,\n-                            }\n-                            .unwrap_or_else(|| make::wildcard_pat().into());\n-                            make::match_arm(\n-                                iter::once(pattern),\n-                                None,\n-                                unwrap_trivial_block(else_block),\n-                            )\n+                let else_arm = make_else_arm(else_block, &cond_bodies, ctx);\n+                let make_match_arm = |(pat, body): (_, ast::BlockExpr)| {\n+                    let body = body.reset_indent().indent(IndentLevel(1));\n+                    match pat {\n+                        Either::Left(pat) => {\n+                            make::match_arm(iter::once(pat), None, unwrap_trivial_block(body))\n                         }\n-                        None => make::match_arm(\n+                        Either::Right(expr) => make::match_arm(\n                             iter::once(make::wildcard_pat().into()),\n-                            None,\n-                            make::expr_unit().into(),\n+                            Some(expr),\n+                            unwrap_trivial_block(body),\n                         ),\n                     }\n                 };\n-                let arms = cond_bodies\n-                    .into_iter()\n-                    .map(|(pat, body)| {\n-                        let body = body.reset_indent().indent(IndentLevel(1));\n-                        match pat {\n-                            Either::Left(pat) => {\n-                                make::match_arm(iter::once(pat), None, unwrap_trivial_block(body))\n-                            }\n-                            Either::Right(expr) => make::match_arm(\n-                                iter::once(make::wildcard_pat().into()),\n-                                Some(expr),\n-                                unwrap_trivial_block(body),\n-                            ),\n-                        }\n-                    })\n-                    .chain(iter::once(else_arm));\n+                let arms = cond_bodies.into_iter().map(make_match_arm).chain(iter::once(else_arm));\n                 let match_expr = make::expr_match(scrutinee_to_be_expr, make::match_arm_list(arms));\n                 match_expr.indent(IndentLevel::from_node(if_expr.syntax()))\n             };\n@@ -150,6 +118,36 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n     )\n }\n \n+fn make_else_arm(\n+    else_block: Option<ast::BlockExpr>,\n+    cond_bodies: &Vec<(Either<ast::Pat, ast::Expr>, ast::BlockExpr)>,\n+    ctx: &AssistContext,\n+) -> ast::MatchArm {\n+    if let Some(else_block) = else_block {\n+        let pattern = if let [(Either::Left(pat), _)] = &**cond_bodies {\n+            ctx.sema\n+                .type_of_pat(&pat)\n+                .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty))\n+                .zip(Some(pat))\n+        } else {\n+            None\n+        };\n+        let pattern = match pattern {\n+            Some((it, pat)) => {\n+                if does_pat_match_variant(&pat, &it.sad_pattern()) {\n+                    it.happy_pattern()\n+                } else {\n+                    it.sad_pattern()\n+                }\n+            }\n+            None => make::wildcard_pat().into(),\n+        };\n+        make::match_arm(iter::once(pattern), None, unwrap_trivial_block(else_block))\n+    } else {\n+        make::match_arm(iter::once(make::wildcard_pat().into()), None, make::expr_unit().into())\n+    }\n+}\n+\n // Assist: replace_match_with_if_let\n //\n // Replaces a binary `match` with a wildcard pattern and no guards with an `if let` expression."}]}