{"sha": "c3abb8290879d3b5f5a34aba243defbb74cfdc6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYWJiODI5MDg3OWQzYjVmNWEzNGFiYTI0M2RlZmJiNzRjZmRjNmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-21T08:40:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-21T08:40:26Z"}, "message": "Rollup merge of #76135 - CDirkx:const-option, r=dtolnay,oli-obk\n\nStabilize some Option methods as const\n\nStabilize the following methods of `Option` as const:\n - `is_some`\n - `is_none`\n - `as_ref`\n\nThese methods are currently const under the unstable feature `const_option` (tracking issue: #67441).\nI believe these methods to be eligible for stabilization because of the stabilization of #49146 (Allow if and match in constants) and the trivial implementations, see also:  [PR#75463](https://github.com/rust-lang/rust/pull/75463).\n\nRelated: #76225", "tree": {"sha": "798f998b9748fd5717cd4eb021d79a1c96ef99e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/798f998b9748fd5717cd4eb021d79a1c96ef99e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3abb8290879d3b5f5a34aba243defbb74cfdc6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaGb6CRBK7hj4Ov3rIwAAdHIIAAxbJeKQK/lfdkSinpdToDHU\n9A9X1grfsxA/lOk4Cvpsr64rNK8XRvnzuTvxxI/V6Y85LzVS5881Ckd9HZBYmnGN\nMM5d7rciJXbFwiGiOhP0h0Zen7YiCZRj114RZAJDXnB8uscZIDarJwMNBPx1WdIA\n++6BZ2K9YXNE8XAuYlbwWkeD9v1Z1i3yGfbgN3IaFmrkQdCh1aIp+fZR6TG2+nnr\nFz6C6u2TmZVSmVSCh+YZzYwKpjQwp+eX1963EMzFoPSgZ7tHTSaC9p/8RQbMBiwv\nkR3hW6AXSXMH69XF7VL3Hng2O7gvpZMpV0RemJXM6wAVpVjs+1MDYVKiTWlHCiM=\n=nvyy\n-----END PGP SIGNATURE-----\n", "payload": "tree 798f998b9748fd5717cd4eb021d79a1c96ef99e4\nparent a409a233e02b1864d1b76495a1f946bb56c7aeb2\nparent 43cba349bdf9472eafccbff2542287a1f6580c5e\nauthor Ralf Jung <post@ralfj.de> 1600677626 +0200\ncommitter GitHub <noreply@github.com> 1600677626 +0200\n\nRollup merge of #76135 - CDirkx:const-option, r=dtolnay,oli-obk\n\nStabilize some Option methods as const\n\nStabilize the following methods of `Option` as const:\n - `is_some`\n - `is_none`\n - `as_ref`\n\nThese methods are currently const under the unstable feature `const_option` (tracking issue: #67441).\nI believe these methods to be eligible for stabilization because of the stabilization of #49146 (Allow if and match in constants) and the trivial implementations, see also:  [PR#75463](https://github.com/rust-lang/rust/pull/75463).\n\nRelated: #76225\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3abb8290879d3b5f5a34aba243defbb74cfdc6c", "html_url": "https://github.com/rust-lang/rust/commit/c3abb8290879d3b5f5a34aba243defbb74cfdc6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3abb8290879d3b5f5a34aba243defbb74cfdc6c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a409a233e02b1864d1b76495a1f946bb56c7aeb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a409a233e02b1864d1b76495a1f946bb56c7aeb2", "html_url": "https://github.com/rust-lang/rust/commit/a409a233e02b1864d1b76495a1f946bb56c7aeb2"}, {"sha": "43cba349bdf9472eafccbff2542287a1f6580c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/43cba349bdf9472eafccbff2542287a1f6580c5e", "html_url": "https://github.com/rust-lang/rust/commit/43cba349bdf9472eafccbff2542287a1f6580c5e"}], "stats": {"total": 270, "additions": 126, "deletions": 144}, "files": [{"sha": "b1589008be073d123c1c2f4a8292ca0a02adc7cf", "filename": "library/core/src/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3abb8290879d3b5f5a34aba243defbb74cfdc6c/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3abb8290879d3b5f5a34aba243defbb74cfdc6c/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=c3abb8290879d3b5f5a34aba243defbb74cfdc6c", "patch": "@@ -175,7 +175,7 @@ impl<T> Option<T> {\n     /// ```\n     #[must_use = \"if you intended to assert that this has a value, consider `.unwrap()` instead\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n+    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn is_some(&self) -> bool {\n         matches!(*self, Some(_))\n@@ -195,7 +195,7 @@ impl<T> Option<T> {\n     #[must_use = \"if you intended to assert that this doesn't have a value, consider \\\n                   `.and_then(|| panic!(\\\"`Option` had a value when expected `None`\\\"))` instead\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n+    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn is_none(&self) -> bool {\n         !self.is_some()\n@@ -254,7 +254,7 @@ impl<T> Option<T> {\n     /// println!(\"still can print text: {:?}\", text);\n     /// ```\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n+    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn as_ref(&self) -> Option<&T> {\n         match *self {"}, {"sha": "9e86e07dd91a3cf51cc9b938f5fc270fb7594845", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3abb8290879d3b5f5a34aba243defbb74cfdc6c/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3abb8290879d3b5f5a34aba243defbb74cfdc6c/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=c3abb8290879d3b5f5a34aba243defbb74cfdc6c", "patch": "@@ -356,3 +356,19 @@ fn test_replace() {\n     assert_eq!(x, Some(3));\n     assert_eq!(old, None);\n }\n+\n+#[test]\n+fn option_const() {\n+    // test that the methods of `Option` are usable in a const context\n+\n+    const OPTION: Option<usize> = Some(32);\n+\n+    const REF: Option<&usize> = OPTION.as_ref();\n+    assert_eq!(REF, Some(&32));\n+\n+    const IS_SOME: bool = OPTION.is_some();\n+    assert!(IS_SOME);\n+\n+    const IS_NONE: bool = OPTION.is_none();\n+    assert!(!IS_NONE);\n+}"}, {"sha": "fbf20b9db67415434e49cdb1313922b870846efe", "filename": "src/test/ui/consts/const-option.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a409a233e02b1864d1b76495a1f946bb56c7aeb2/src%2Ftest%2Fui%2Fconsts%2Fconst-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a409a233e02b1864d1b76495a1f946bb56c7aeb2/src%2Ftest%2Fui%2Fconsts%2Fconst-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-option.rs?ref=a409a233e02b1864d1b76495a1f946bb56c7aeb2", "patch": "@@ -1,14 +0,0 @@\n-// run-pass\n-\n-#![feature(const_option)]\n-\n-const X: Option<i32> = Some(32);\n-const Y: Option<&i32> = X.as_ref();\n-\n-const IS_SOME: bool = X.is_some();\n-const IS_NONE: bool = Y.is_none();\n-\n-fn main() {\n-    assert!(IS_SOME);\n-    assert!(!IS_NONE)\n-}"}, {"sha": "819846ebc793becfe6d8a999a3a5f419300e1e66", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 16, "deletions": 62, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c3abb8290879d3b5f5a34aba243defbb74cfdc6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3abb8290879d3b5f5a34aba243defbb74cfdc6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=c3abb8290879d3b5f5a34aba243defbb74cfdc6c", "patch": "@@ -1440,15 +1440,12 @@ where\n \n mod redundant_pattern_match {\n     use super::REDUNDANT_PATTERN_MATCHING;\n-    use crate::utils::{in_constant, match_qpath, match_trait_method, paths, snippet, span_lint_and_then};\n+    use crate::utils::{match_qpath, match_trait_method, paths, snippet, span_lint_and_then};\n     use if_chain::if_chain;\n     use rustc_ast::ast::LitKind;\n     use rustc_errors::Applicability;\n-    use rustc_hir::{Arm, Expr, ExprKind, HirId, MatchSource, PatKind, QPath};\n+    use rustc_hir::{Arm, Expr, ExprKind, MatchSource, PatKind, QPath};\n     use rustc_lint::LateContext;\n-    use rustc_middle::ty;\n-    use rustc_mir::const_eval::is_const_fn;\n-    use rustc_span::source_map::Symbol;\n \n     pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::Match(op, arms, ref match_source) = &expr.kind {\n@@ -1468,37 +1465,24 @@ mod redundant_pattern_match {\n         arms: &[Arm<'_>],\n         keyword: &'static str,\n     ) {\n-        fn find_suggestion(cx: &LateContext<'_>, hir_id: HirId, path: &QPath<'_>) -> Option<&'static str> {\n-            if match_qpath(path, &paths::RESULT_OK) {\n-                return Some(\"is_ok()\");\n-            }\n-            if match_qpath(path, &paths::RESULT_ERR) {\n-                return Some(\"is_err()\");\n-            }\n-            if match_qpath(path, &paths::OPTION_SOME) && can_suggest(cx, hir_id, sym!(option_type), \"is_some\") {\n-                return Some(\"is_some()\");\n-            }\n-            if match_qpath(path, &paths::OPTION_NONE) && can_suggest(cx, hir_id, sym!(option_type), \"is_none\") {\n-                return Some(\"is_none()\");\n-            }\n-            None\n-        }\n-\n-        let hir_id = expr.hir_id;\n         let good_method = match arms[0].pat.kind {\n             PatKind::TupleStruct(ref path, ref patterns, _) if patterns.len() == 1 => {\n                 if let PatKind::Wild = patterns[0].kind {\n-                    find_suggestion(cx, hir_id, path)\n+                    if match_qpath(path, &paths::RESULT_OK) {\n+                        \"is_ok()\"\n+                    } else if match_qpath(path, &paths::RESULT_ERR) {\n+                        \"is_err()\"\n+                    } else if match_qpath(path, &paths::OPTION_SOME) {\n+                        \"is_some()\"\n+                    } else {\n+                        return;\n+                    }\n                 } else {\n-                    None\n+                    return;\n                 }\n             },\n-            PatKind::Path(ref path) => find_suggestion(cx, hir_id, path),\n-            _ => None,\n-        };\n-        let good_method = match good_method {\n-            Some(method) => method,\n-            None => return,\n+            PatKind::Path(ref path) if match_qpath(path, &paths::OPTION_NONE) => \"is_none()\",\n+            _ => return,\n         };\n \n         // check that `while_let_on_iterator` lint does not trigger\n@@ -1547,7 +1531,6 @@ mod redundant_pattern_match {\n         if arms.len() == 2 {\n             let node_pair = (&arms[0].pat.kind, &arms[1].pat.kind);\n \n-            let hir_id = expr.hir_id;\n             let found_good_method = match node_pair {\n                 (\n                     PatKind::TupleStruct(ref path_left, ref patterns_left, _),\n@@ -1562,8 +1545,6 @@ mod redundant_pattern_match {\n                             &paths::RESULT_ERR,\n                             \"is_ok()\",\n                             \"is_err()\",\n-                            || true,\n-                            || true,\n                         )\n                     } else {\n                         None\n@@ -1582,8 +1563,6 @@ mod redundant_pattern_match {\n                             &paths::OPTION_NONE,\n                             \"is_some()\",\n                             \"is_none()\",\n-                            || can_suggest(cx, hir_id, sym!(option_type), \"is_some\"),\n-                            || can_suggest(cx, hir_id, sym!(option_type), \"is_none\"),\n                         )\n                     } else {\n                         None\n@@ -1616,7 +1595,6 @@ mod redundant_pattern_match {\n         }\n     }\n \n-    #[allow(clippy::too_many_arguments)]\n     fn find_good_method_for_match<'a>(\n         arms: &[Arm<'_>],\n         path_left: &QPath<'_>,\n@@ -1625,8 +1603,6 @@ mod redundant_pattern_match {\n         expected_right: &[&str],\n         should_be_left: &'a str,\n         should_be_right: &'a str,\n-        can_suggest_left: impl Fn() -> bool,\n-        can_suggest_right: impl Fn() -> bool,\n     ) -> Option<&'a str> {\n         let body_node_pair = if match_qpath(path_left, expected_left) && match_qpath(path_right, expected_right) {\n             (&(*arms[0].body).kind, &(*arms[1].body).kind)\n@@ -1638,35 +1614,13 @@ mod redundant_pattern_match {\n \n         match body_node_pair {\n             (ExprKind::Lit(ref lit_left), ExprKind::Lit(ref lit_right)) => match (&lit_left.node, &lit_right.node) {\n-                (LitKind::Bool(true), LitKind::Bool(false)) if can_suggest_left() => Some(should_be_left),\n-                (LitKind::Bool(false), LitKind::Bool(true)) if can_suggest_right() => Some(should_be_right),\n+                (LitKind::Bool(true), LitKind::Bool(false)) => Some(should_be_left),\n+                (LitKind::Bool(false), LitKind::Bool(true)) => Some(should_be_right),\n                 _ => None,\n             },\n             _ => None,\n         }\n     }\n-\n-    fn can_suggest(cx: &LateContext<'_>, hir_id: HirId, diag_item: Symbol, name: &str) -> bool {\n-        if !in_constant(cx, hir_id) {\n-            return true;\n-        }\n-\n-        // Avoid suggesting calls to non-`const fn`s in const contexts, see #5697.\n-        cx.tcx\n-            .get_diagnostic_item(diag_item)\n-            .and_then(|def_id| {\n-                cx.tcx.inherent_impls(def_id).iter().find_map(|imp| {\n-                    cx.tcx\n-                        .associated_items(*imp)\n-                        .in_definition_order()\n-                        .find_map(|item| match item.kind {\n-                            ty::AssocKind::Fn if item.ident.name.as_str() == name => Some(item.def_id),\n-                            _ => None,\n-                        })\n-                })\n-            })\n-            .map_or(false, |def_id| is_const_fn(cx.tcx, def_id))\n-    }\n }\n \n #[test]"}, {"sha": "8084fdefdc23eced3f6b2a54643b16b637f667d8", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c3abb8290879d3b5f5a34aba243defbb74cfdc6c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c3abb8290879d3b5f5a34aba243defbb74cfdc6c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.fixed?ref=c3abb8290879d3b5f5a34aba243defbb74cfdc6c", "patch": "@@ -76,7 +76,6 @@ fn main() {\n     takes_bool(x);\n \n     issue5504();\n-    issue5697();\n     issue6067();\n \n     let _ = if gen_opt().is_some() {\n@@ -129,41 +128,31 @@ fn issue5504() {\n     while m!().is_some() {}\n }\n \n-// None of these should be linted because none of the suggested methods\n-// are `const fn` without toggling a feature.\n-const fn issue5697() {\n-    if let Some(_) = Some(42) {}\n-\n-    if let None = None::<()> {}\n-\n-    while let Some(_) = Some(42) {}\n-\n-    while let None = None::<()> {}\n-\n-    match Some(42) {\n-        Some(_) => true,\n-        None => false,\n-    };\n-\n-    match None::<()> {\n-        Some(_) => false,\n-        None => true,\n-    };\n-}\n-\n // Methods that are unstable const should not be suggested within a const context, see issue #5697.\n-// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result` were stabilized as const,\n-// so the following should be linted.\n+// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result`, and `is_some` and `is_none`\n+// of `Option` were stabilized as const, so the following should be linted.\n const fn issue6067() {\n     if Ok::<i32, i32>(42).is_ok() {}\n \n     if Err::<i32, i32>(42).is_err() {}\n \n+    if Some(42).is_some() {}\n+\n+    if None::<()>.is_none() {}\n+\n     while Ok::<i32, i32>(10).is_ok() {}\n \n     while Ok::<i32, i32>(10).is_err() {}\n \n+    while Some(42).is_some() {}\n+\n+    while None::<()>.is_none() {}\n+\n     Ok::<i32, i32>(42).is_ok();\n \n     Err::<i32, i32>(42).is_err();\n+\n+    Some(42).is_some();\n+\n+    None::<()>.is_none();\n }"}, {"sha": "48a32cb1c7b7d9452908407aaa345a592fa2baf6", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c3abb8290879d3b5f5a34aba243defbb74cfdc6c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3abb8290879d3b5f5a34aba243defbb74cfdc6c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.rs?ref=c3abb8290879d3b5f5a34aba243defbb74cfdc6c", "patch": "@@ -97,7 +97,6 @@ fn main() {\n     takes_bool(x);\n \n     issue5504();\n-    issue5697();\n     issue6067();\n \n     let _ = if let Some(_) = gen_opt() {\n@@ -150,40 +149,26 @@ fn issue5504() {\n     while let Some(_) = m!() {}\n }\n \n-// None of these should be linted because none of the suggested methods\n-// are `const fn` without toggling a feature.\n-const fn issue5697() {\n-    if let Some(_) = Some(42) {}\n-\n-    if let None = None::<()> {}\n-\n-    while let Some(_) = Some(42) {}\n-\n-    while let None = None::<()> {}\n-\n-    match Some(42) {\n-        Some(_) => true,\n-        None => false,\n-    };\n-\n-    match None::<()> {\n-        Some(_) => false,\n-        None => true,\n-    };\n-}\n-\n // Methods that are unstable const should not be suggested within a const context, see issue #5697.\n-// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result` were stabilized as const,\n-// so the following should be linted.\n+// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result`, and `is_some` and `is_none`\n+// of `Option` were stabilized as const, so the following should be linted.\n const fn issue6067() {\n     if let Ok(_) = Ok::<i32, i32>(42) {}\n \n     if let Err(_) = Err::<i32, i32>(42) {}\n \n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n     while let Ok(_) = Ok::<i32, i32>(10) {}\n \n     while let Err(_) = Ok::<i32, i32>(10) {}\n \n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n     match Ok::<i32, i32>(42) {\n         Ok(_) => true,\n         Err(_) => false,\n@@ -193,4 +178,14 @@ const fn issue6067() {\n         Ok(_) => false,\n         Err(_) => true,\n     };\n+\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n }"}, {"sha": "17185217e8950de05cf517424230ee39bd7ca400", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 57, "deletions": 15, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c3abb8290879d3b5f5a34aba243defbb74cfdc6c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3abb8290879d3b5f5a34aba243defbb74cfdc6c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.stderr?ref=c3abb8290879d3b5f5a34aba243defbb74cfdc6c", "patch": "@@ -149,79 +149,103 @@ LL |     let x = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:103:20\n+  --> $DIR/redundant_pattern_matching.rs:102:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:105:19\n+  --> $DIR/redundant_pattern_matching.rs:104:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:107:19\n+  --> $DIR/redundant_pattern_matching.rs:106:19\n    |\n LL |     } else if let Ok(_) = gen_res() {\n    |            -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:109:19\n+  --> $DIR/redundant_pattern_matching.rs:108:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:142:19\n+  --> $DIR/redundant_pattern_matching.rs:141:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:143:16\n+  --> $DIR/redundant_pattern_matching.rs:142:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:149:12\n+  --> $DIR/redundant_pattern_matching.rs:148:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:150:15\n+  --> $DIR/redundant_pattern_matching.rs:149:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:179:12\n+  --> $DIR/redundant_pattern_matching.rs:156:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:181:12\n+  --> $DIR/redundant_pattern_matching.rs:158:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:160:12\n+   |\n+LL |     if let Some(_) = Some(42) {}\n+   |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching.rs:162:12\n+   |\n+LL |     if let None = None::<()> {}\n+   |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n+\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:183:15\n+  --> $DIR/redundant_pattern_matching.rs:164:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:185:15\n+  --> $DIR/redundant_pattern_matching.rs:166:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:168:15\n+   |\n+LL |     while let Some(_) = Some(42) {}\n+   |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching.rs:170:15\n+   |\n+LL |     while let None = None::<()> {}\n+   |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n+\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:187:5\n+  --> $DIR/redundant_pattern_matching.rs:172:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -230,13 +254,31 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:192:5\n+  --> $DIR/redundant_pattern_matching.rs:177:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n LL | |         Err(_) => true,\n LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n-error: aborting due to 35 previous errors\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:182:5\n+   |\n+LL | /     match Some(42) {\n+LL | |         Some(_) => true,\n+LL | |         None => false,\n+LL | |     };\n+   | |_____^ help: try this: `Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching.rs:187:5\n+   |\n+LL | /     match None::<()> {\n+LL | |         Some(_) => false,\n+LL | |         None => true,\n+LL | |     };\n+   | |_____^ help: try this: `None::<()>.is_none()`\n+\n+error: aborting due to 41 previous errors\n "}]}