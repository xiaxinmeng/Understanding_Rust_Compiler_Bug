{"sha": "9302dc5d9e13f716a21a5d9ebdcddc149a864b19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMDJkYzVkOWUxM2Y3MTZhMjFhNWQ5ZWJkY2RkYzE0OWE4NjRiMTk=", "commit": {"author": {"name": "CarVac", "email": "c.lo.to.da.down.lo@gmail.com", "date": "2015-01-10T19:14:21Z"}, "committer": {"name": "CarVac", "email": "c.lo.to.da.down.lo@gmail.com", "date": "2015-01-12T02:00:42Z"}, "message": "Replace uint with u32 in trpl/guessing-game.md\n\nuint was recently deprecated, so in following the use of i32 at first,\nreplace all references to uint with u32.\n\nAlso change literals from e.g. 100u to 100, so that they are no longer\nusize.", "tree": {"sha": "dfdff09e2cfa2f1daaab19a6de60998f22bf46c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfdff09e2cfa2f1daaab19a6de60998f22bf46c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9302dc5d9e13f716a21a5d9ebdcddc149a864b19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9302dc5d9e13f716a21a5d9ebdcddc149a864b19", "html_url": "https://github.com/rust-lang/rust/commit/9302dc5d9e13f716a21a5d9ebdcddc149a864b19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9302dc5d9e13f716a21a5d9ebdcddc149a864b19/comments", "author": {"login": "CarVac", "id": 4342361, "node_id": "MDQ6VXNlcjQzNDIzNjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4342361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CarVac", "html_url": "https://github.com/CarVac", "followers_url": "https://api.github.com/users/CarVac/followers", "following_url": "https://api.github.com/users/CarVac/following{/other_user}", "gists_url": "https://api.github.com/users/CarVac/gists{/gist_id}", "starred_url": "https://api.github.com/users/CarVac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CarVac/subscriptions", "organizations_url": "https://api.github.com/users/CarVac/orgs", "repos_url": "https://api.github.com/users/CarVac/repos", "events_url": "https://api.github.com/users/CarVac/events{/privacy}", "received_events_url": "https://api.github.com/users/CarVac/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CarVac", "id": 4342361, "node_id": "MDQ6VXNlcjQzNDIzNjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4342361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CarVac", "html_url": "https://github.com/CarVac", "followers_url": "https://api.github.com/users/CarVac/followers", "following_url": "https://api.github.com/users/CarVac/following{/other_user}", "gists_url": "https://api.github.com/users/CarVac/gists{/gist_id}", "starred_url": "https://api.github.com/users/CarVac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CarVac/subscriptions", "organizations_url": "https://api.github.com/users/CarVac/orgs", "repos_url": "https://api.github.com/users/CarVac/repos", "events_url": "https://api.github.com/users/CarVac/events{/privacy}", "received_events_url": "https://api.github.com/users/CarVac/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "099b411e080d302ec0dc5f3aebe53d76c50acfc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/099b411e080d302ec0dc5f3aebe53d76c50acfc7", "html_url": "https://github.com/rust-lang/rust/commit/099b411e080d302ec0dc5f3aebe53d76c50acfc7"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "474e7db6942e1e260d817a7fce8d13dc083a1e63", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/9302dc5d9e13f716a21a5d9ebdcddc149a864b19/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/9302dc5d9e13f716a21a5d9ebdcddc149a864b19/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=9302dc5d9e13f716a21a5d9ebdcddc149a864b19", "patch": "@@ -239,7 +239,7 @@ use std::rand;\n fn main() {\n     println!(\"Guess the number!\");\n \n-    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+    let secret_number = (rand::random::<u32>() % 100) + 1;\n \n     println!(\"The secret number is: {}\", secret_number);\n \n@@ -283,7 +283,7 @@ use std::cmp::Ordering;\n fn main() {\n     println!(\"Guess the number!\");\n \n-    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+    let secret_number = (rand::random::<u32>() % 100) + 1;\n \n     println!(\"The secret number is: {}\", secret_number);\n \n@@ -318,7 +318,7 @@ $ cargo build\n src/main.rs:20:15: 20:20 error: mismatched types: expected `i32` but found `collections::string::String` (expected i32 but found struct collections::string::String)\n src/main.rs:20     match cmp(input, secret_number) {\n                              ^~~~~\n-src/main.rs:20:22: 20:35 error: mismatched types: expected `i32` but found `uint` (expected i32 but found uint)\n+src/main.rs:20:22: 20:35 error: mismatched types: expected `i32` but found `u32` (expected i32 but found u32)\n src/main.rs:20     match cmp(input, secret_number) {\n                                     ^~~~~~~~~~~~~\n error: aborting due to 2 previous errors\n@@ -328,7 +328,7 @@ This often happens when writing Rust programs, and is one of Rust's greatest\n strengths. You try out some code, see if it compiles, and Rust tells you that\n you've done something wrong. In this case, our `cmp` function works on integers,\n but we've given it unsigned integers. In this case, the fix is easy, because\n-we wrote the `cmp` function! Let's change it to take `uint`s:\n+we wrote the `cmp` function! Let's change it to take `u32`s:\n \n ```{rust,ignore}\n use std::io;\n@@ -338,7 +338,7 @@ use std::cmp::Ordering;\n fn main() {\n     println!(\"Guess the number!\");\n \n-    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+    let secret_number = (rand::random::<u32>() % 100) + 1;\n \n     println!(\"The secret number is: {}\", secret_number);\n \n@@ -358,7 +358,7 @@ fn main() {\n     }\n }\n \n-fn cmp(a: uint, b: uint) -> Ordering {\n+fn cmp(a: u32, b: u32) -> Ordering {\n     if a < b { Ordering::Less }\n     else if a > b { Ordering::Greater }\n     else { Ordering::Equal }\n@@ -370,13 +370,13 @@ And try compiling again:\n ```bash\n $ cargo build\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n-src/main.rs:20:15: 20:20 error: mismatched types: expected `uint` but found `collections::string::String` (expected uint but found struct collections::string::String)\n+src/main.rs:20:15: 20:20 error: mismatched types: expected `u32` but found `collections::string::String` (expected u32 but found struct collections::string::String)\n src/main.rs:20     match cmp(input, secret_number) {\n                              ^~~~~\n error: aborting due to previous error\n ```\n \n-This error is similar to the last one: we expected to get a `uint`, but we got\n+This error is similar to the last one: we expected to get a `u32`, but we got\n a `String` instead! That's because our `input` variable is coming from the\n standard input, and you can guess anything. Try it:\n \n@@ -393,37 +393,37 @@ Oops! Also, you'll note that we just ran our program even though it didn't compi\n This works because the older version we did successfully compile was still lying\n around. Gotta be careful!\n \n-Anyway, we have a `String`, but we need a `uint`. What to do? Well, there's\n+Anyway, we have a `String`, but we need a `u32`. What to do? Well, there's\n a function for that:\n \n ```{rust,ignore}\n let input = io::stdin().read_line()\n                        .ok()\n                        .expect(\"Failed to read line\");\n-let input_num: Option<uint> = input.parse();\n+let input_num: Option<u32> = input.parse();\n ```\n \n The `parse` function takes in a `&str` value and converts it into something.\n We tell it what kind of something with a type hint. Remember our type hint with\n `random()`? It looked like this:\n \n ```{rust,ignore}\n-rand::random::<uint>();\n+rand::random::<u32>();\n ```\n \n There's an alternate way of providing a hint too, and that's declaring the type\n in a `let`:\n \n ```{rust,ignore}\n-let x: uint = rand::random();\n+let x: u32 = rand::random();\n ```\n \n-In this case, we say `x` is a `uint` explicitly, so Rust is able to properly\n+In this case, we say `x` is a `u32` explicitly, so Rust is able to properly\n tell `random()` what to generate. In a similar fashion, both of these work:\n \n ```{rust,ignore}\n-let input_num = \"5\".parse::<uint>();         // input_num: Option<uint>\n-let input_num: Option<uint> = \"5\".parse();   // input_num: Option<uint>\n+let input_num = \"5\".parse::<u32>();         // input_num: Option<u32>\n+let input_num: Option<u32> = \"5\".parse();   // input_num: Option<u32>\n ```\n \n Anyway, with us now converting our input to a number, our code looks like this:\n@@ -436,7 +436,7 @@ use std::cmp::Ordering;\n fn main() {\n     println!(\"Guess the number!\");\n \n-    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+    let secret_number = (rand::random::<u32>() % 100) + 1;\n \n     println!(\"The secret number is: {}\", secret_number);\n \n@@ -445,7 +445,7 @@ fn main() {\n     let input = io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n-    let input_num: Option<uint> = input.parse();\n+    let input_num: Option<u32> = input.parse();\n \n     println!(\"You guessed: {}\", input_num);\n \n@@ -456,7 +456,7 @@ fn main() {\n     }\n }\n \n-fn cmp(a: uint, b: uint) -> Ordering {\n+fn cmp(a: u32, b: u32) -> Ordering {\n     if a < b { Ordering::Less }\n     else if a > b { Ordering::Greater }\n     else { Ordering::Equal }\n@@ -468,13 +468,13 @@ Let's try it out!\n ```bash\n $ cargo build\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n-src/main.rs:22:15: 22:24 error: mismatched types: expected `uint` but found `core::option::Option<uint>` (expected uint but found enum core::option::Option)\n+src/main.rs:22:15: 22:24 error: mismatched types: expected `u32` but found `core::option::Option<u32>` (expected u32 but found enum core::option::Option)\n src/main.rs:22     match cmp(input_num, secret_number) {\n                              ^~~~~~~~~\n error: aborting due to previous error\n ```\n \n-Oh yeah! Our `input_num` has the type `Option<uint>`, rather than `uint`. We\n+Oh yeah! Our `input_num` has the type `Option<u32>`, rather than `u32`. We\n need to unwrap the Option. If you remember from before, `match` is a great way\n to do that. Try this code:\n \n@@ -486,7 +486,7 @@ use std::cmp::Ordering;\n fn main() {\n     println!(\"Guess the number!\");\n \n-    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+    let secret_number = (rand::random::<u32>() % 100) + 1;\n \n     println!(\"The secret number is: {}\", secret_number);\n \n@@ -495,7 +495,7 @@ fn main() {\n     let input = io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n-    let input_num: Option<uint> = input.parse();\n+    let input_num: Option<u32> = input.parse();\n \n     let num = match input_num {\n         Some(num) => num,\n@@ -515,14 +515,14 @@ fn main() {\n     }\n }\n \n-fn cmp(a: uint, b: uint) -> Ordering {\n+fn cmp(a: u32, b: u32) -> Ordering {\n     if a < b { Ordering::Less }\n     else if a > b { Ordering::Greater }\n     else { Ordering::Equal }\n }\n ```\n \n-We use a `match` to either give us the `uint` inside of the `Option`, or else\n+We use a `match` to either give us the `u32` inside of the `Option`, or else\n print an error message and return. Let's give this a shot:\n \n ```bash\n@@ -553,7 +553,7 @@ use std::cmp::Ordering;\n fn main() {\n     println!(\"Guess the number!\");\n \n-    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+    let secret_number = (rand::random::<u32>() % 100) + 1;\n \n     println!(\"The secret number is: {}\", secret_number);\n \n@@ -562,7 +562,7 @@ fn main() {\n     let input = io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n-    let input_num: Option<uint> = input.trim().parse();\n+    let input_num: Option<u32> = input.trim().parse();\n \n     let num = match input_num {\n         Some(num) => num,\n@@ -582,7 +582,7 @@ fn main() {\n     }\n }\n \n-fn cmp(a: uint, b: uint) -> Ordering {\n+fn cmp(a: u32, b: u32) -> Ordering {\n     if a < b { Ordering::Less }\n     else if a > b { Ordering::Greater }\n     else { Ordering::Equal }\n@@ -627,7 +627,7 @@ use std::cmp::Ordering;\n fn main() {\n     println!(\"Guess the number!\");\n \n-    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+    let secret_number = (rand::random::<u32>() % 100) + 1;\n \n     println!(\"The secret number is: {}\", secret_number);\n \n@@ -638,7 +638,7 @@ fn main() {\n         let input = io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n-        let input_num: Option<uint> = input.trim().parse();\n+        let input_num: Option<u32> = input.trim().parse();\n \n         let num = match input_num {\n             Some(num) => num,\n@@ -659,7 +659,7 @@ fn main() {\n     }\n }\n \n-fn cmp(a: uint, b: uint) -> Ordering {\n+fn cmp(a: u32, b: u32) -> Ordering {\n     if a < b { Ordering::Less }\n     else if a > b { Ordering::Greater }\n     else { Ordering::Equal }\n@@ -703,7 +703,7 @@ use std::cmp::Ordering;\n fn main() {\n     println!(\"Guess the number!\");\n \n-    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+    let secret_number = (rand::random::<u32>() % 100) + 1;\n \n     println!(\"The secret number is: {}\", secret_number);\n \n@@ -714,7 +714,7 @@ fn main() {\n         let input = io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n-        let input_num: Option<uint> = input.trim().parse();\n+        let input_num: Option<u32> = input.trim().parse();\n \n         let num = match input_num {\n             Some(num) => num,\n@@ -738,7 +738,7 @@ fn main() {\n     }\n }\n \n-fn cmp(a: uint, b: uint) -> Ordering {\n+fn cmp(a: u32, b: u32) -> Ordering {\n     if a < b { Ordering::Less }\n     else if a > b { Ordering::Greater }\n     else { Ordering::Equal }\n@@ -759,7 +759,7 @@ use std::cmp::Ordering;\n fn main() {\n     println!(\"Guess the number!\");\n \n-    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+    let secret_number = (rand::random::<u32>() % 100) + 1;\n \n     println!(\"The secret number is: {}\", secret_number);\n \n@@ -770,7 +770,7 @@ fn main() {\n         let input = io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n-        let input_num: Option<uint> = input.trim().parse();\n+        let input_num: Option<u32> = input.trim().parse();\n \n         let num = match input_num {\n             Some(num) => num,\n@@ -794,7 +794,7 @@ fn main() {\n     }\n }\n \n-fn cmp(a: uint, b: uint) -> Ordering {\n+fn cmp(a: u32, b: u32) -> Ordering {\n     if a < b { Ordering::Less }\n     else if a > b { Ordering::Greater }\n     else { Ordering::Equal }\n@@ -838,7 +838,7 @@ use std::cmp::Ordering;\n fn main() {\n     println!(\"Guess the number!\");\n \n-    let secret_number = (rand::random::<uint>() % 100u) + 1u;\n+    let secret_number = (rand::random::<u32>() % 100) + 1;\n \n     loop {\n \n@@ -847,7 +847,7 @@ fn main() {\n         let input = io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n-        let input_num: Option<uint> = input.trim().parse();\n+        let input_num: Option<u32> = input.trim().parse();\n \n         let num = match input_num {\n             Some(num) => num,\n@@ -871,7 +871,7 @@ fn main() {\n     }\n }\n \n-fn cmp(a: uint, b: uint) -> Ordering {\n+fn cmp(a: u32, b: u32) -> Ordering {\n     if a < b { Ordering::Less }\n     else if a > b { Ordering::Greater }\n     else { Ordering::Equal }"}]}