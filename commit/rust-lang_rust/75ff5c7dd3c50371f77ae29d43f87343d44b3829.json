{"sha": "75ff5c7dd3c50371f77ae29d43f87343d44b3829", "node_id": "C_kwDOAAsO6NoAKDc1ZmY1YzdkZDNjNTAzNzFmNzdhZTI5ZDQzZjg3MzQzZDQ0YjM4Mjk", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-08T08:52:07Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-09T14:59:39Z"}, "message": "Fold `Definitions` into the untracked data", "tree": {"sha": "d7c435931ada9a6e83bcf962882fa80dd2a17663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7c435931ada9a6e83bcf962882fa80dd2a17663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75ff5c7dd3c50371f77ae29d43f87343d44b3829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75ff5c7dd3c50371f77ae29d43f87343d44b3829", "html_url": "https://github.com/rust-lang/rust/commit/75ff5c7dd3c50371f77ae29d43f87343d44b3829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75ff5c7dd3c50371f77ae29d43f87343d44b3829/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "html_url": "https://github.com/rust-lang/rust/commit/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9"}], "stats": {"total": 119, "additions": 49, "deletions": 70}, "files": [{"sha": "89d9450cf4e89a0b6335647b5bf5f2446f7207bd", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=75ff5c7dd3c50371f77ae29d43f87343d44b3829", "patch": "@@ -805,7 +805,6 @@ pub fn create_global_ctxt<'tcx>(\n     });\n \n     let ty::ResolverOutputs {\n-        definitions,\n         global_ctxt: untracked_resolutions,\n         ast_lowering: untracked_resolver_for_lowering,\n         untracked,\n@@ -818,7 +817,6 @@ pub fn create_global_ctxt<'tcx>(\n                 lint_store,\n                 arena,\n                 hir_arena,\n-                definitions,\n                 untracked_resolutions,\n                 untracked,\n                 krate,"}, {"sha": "01d7f3e03c50a5520d5c4d5f3efe1bd8a7d67d9d", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=75ff5c7dd3c50371f77ae29d43f87343d44b3829", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_ast::{self as ast, *};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{Lrc, ReadGuard};\n use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n@@ -69,7 +69,7 @@ pub struct CrateLoader<'a> {\n     // Immutable configuration.\n     sess: &'a Session,\n     metadata_loader: &'a MetadataLoaderDyn,\n-    definitions: &'a Definitions,\n+    definitions: ReadGuard<'a, Definitions>,\n     local_crate_name: Symbol,\n     // Mutable output.\n     cstore: &'a mut CStore,\n@@ -267,7 +267,7 @@ impl<'a> CrateLoader<'a> {\n         metadata_loader: &'a MetadataLoaderDyn,\n         local_crate_name: Symbol,\n         cstore: &'a mut CStore,\n-        definitions: &'a Definitions,\n+        definitions: ReadGuard<'a, Definitions>,\n         used_extern_options: &'a mut FxHashSet<Symbol>,\n     ) -> Self {\n         CrateLoader {"}, {"sha": "7d4971d1e9e62d6fb5166ed9a5e248ea44164d2d", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=75ff5c7dd3c50371f77ae29d43f87343d44b3829", "patch": "@@ -35,7 +35,7 @@ use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n-use rustc_data_structures::sync::{self, Lock, Lrc, ReadGuard, RwLock, WorkerLocal};\n+use rustc_data_structures::sync::{self, Lock, Lrc, ReadGuard, WorkerLocal};\n use rustc_data_structures::unord::UnordSet;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::{\n@@ -182,18 +182,12 @@ impl<'tcx> CtxtInterners<'tcx> {\n     /// Interns a type.\n     #[allow(rustc::usage_of_ty_tykind)]\n     #[inline(never)]\n-    fn intern_ty(\n-        &self,\n-        kind: TyKind<'tcx>,\n-        sess: &Session,\n-        definitions: &rustc_hir::definitions::Definitions,\n-        untracked: &Untracked,\n-    ) -> Ty<'tcx> {\n+    fn intern_ty(&self, kind: TyKind<'tcx>, sess: &Session, untracked: &Untracked) -> Ty<'tcx> {\n         Ty(Interned::new_unchecked(\n             self.type_\n                 .intern(kind, |kind| {\n                     let flags = super::flags::FlagComputation::for_kind(&kind);\n-                    let stable_hash = self.stable_hash(&flags, sess, definitions, untracked, &kind);\n+                    let stable_hash = self.stable_hash(&flags, sess, untracked, &kind);\n \n                     InternedInSet(self.arena.alloc(WithCachedTypeInfo {\n                         internee: kind,\n@@ -210,7 +204,6 @@ impl<'tcx> CtxtInterners<'tcx> {\n         &self,\n         flags: &ty::flags::FlagComputation,\n         sess: &'a Session,\n-        definitions: &'a rustc_hir::definitions::Definitions,\n         untracked: &'a Untracked,\n         val: &T,\n     ) -> Fingerprint {\n@@ -220,7 +213,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n             Fingerprint::ZERO\n         } else {\n             let mut hasher = StableHasher::new();\n-            let mut hcx = StableHashingContext::new(sess, definitions, untracked);\n+            let mut hcx = StableHashingContext::new(sess, untracked);\n             val.hash_stable(&mut hcx, &mut hasher);\n             hasher.finish()\n         }\n@@ -231,15 +224,14 @@ impl<'tcx> CtxtInterners<'tcx> {\n         &self,\n         kind: Binder<'tcx, PredicateKind<'tcx>>,\n         sess: &Session,\n-        definitions: &rustc_hir::definitions::Definitions,\n         untracked: &Untracked,\n     ) -> Predicate<'tcx> {\n         Predicate(Interned::new_unchecked(\n             self.predicate\n                 .intern(kind, |kind| {\n                     let flags = super::flags::FlagComputation::for_predicate(kind);\n \n-                    let stable_hash = self.stable_hash(&flags, sess, definitions, untracked, &kind);\n+                    let stable_hash = self.stable_hash(&flags, sess, untracked, &kind);\n \n                     InternedInSet(self.arena.alloc(WithCachedTypeInfo {\n                         internee: kind,\n@@ -957,10 +949,9 @@ impl<'tcx> CommonTypes<'tcx> {\n     fn new(\n         interners: &CtxtInterners<'tcx>,\n         sess: &Session,\n-        definitions: &rustc_hir::definitions::Definitions,\n         untracked: &Untracked,\n     ) -> CommonTypes<'tcx> {\n-        let mk = |ty| interners.intern_ty(ty, sess, definitions, untracked);\n+        let mk = |ty| interners.intern_ty(ty, sess, untracked);\n \n         CommonTypes {\n             unit: mk(Tuple(List::empty())),\n@@ -1106,8 +1097,6 @@ pub struct GlobalCtxt<'tcx> {\n     /// Common consts, pre-interned for your convenience.\n     pub consts: CommonConsts<'tcx>,\n \n-    definitions: RwLock<Definitions>,\n-\n     untracked: Untracked,\n     /// Output of the resolver.\n     pub(crate) untracked_resolutions: ty::ResolverGlobalCtxt,\n@@ -1273,7 +1262,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n         hir_arena: &'tcx WorkerLocal<hir::Arena<'tcx>>,\n-        definitions: Definitions,\n         untracked_resolutions: ty::ResolverGlobalCtxt,\n         untracked: Untracked,\n         krate: Lrc<ast::Crate>,\n@@ -1288,7 +1276,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             s.emit_fatal(err);\n         });\n         let interners = CtxtInterners::new(arena);\n-        let common_types = CommonTypes::new(&interners, s, &definitions, &untracked);\n+        let common_types = CommonTypes::new(&interners, s, &untracked);\n         let common_lifetimes = CommonLifetimes::new(&interners);\n         let common_consts = CommonConsts::new(&interners, &common_types);\n \n@@ -1299,7 +1287,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             hir_arena,\n             interners,\n             dep_graph,\n-            definitions: RwLock::new(definitions),\n             prof: s.prof.clone(),\n             types: common_types,\n             lifetimes: common_lifetimes,\n@@ -1477,7 +1464,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // If this is a DefPathHash from the local crate, we can look up the\n         // DefId in the tcx's `Definitions`.\n         if stable_crate_id == self.sess.local_stable_crate_id() {\n-            self.definitions.read().local_def_path_hash_to_def_id(hash, err).to_def_id()\n+            self.untracked.definitions.read().local_def_path_hash_to_def_id(hash, err).to_def_id()\n         } else {\n             // If this is a DefPathHash from an upstream crate, let the CrateStore map\n             // it to a DefId.\n@@ -1537,7 +1524,7 @@ impl<'tcx> TyCtxtAt<'tcx> {\n         // This is fine because:\n         // - those queries are `eval_always` so we won't miss their result changing;\n         // - this write will have happened before these queries are called.\n-        let key = self.definitions.write().create_def(parent, data);\n+        let key = self.untracked.definitions.write().create_def(parent, data);\n \n         let feed = TyCtxtFeed { tcx: self.tcx, key };\n         feed.def_span(self.span);\n@@ -1551,7 +1538,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // definitions change.\n         self.dep_graph.read_index(DepNodeIndex::FOREVER_RED_NODE);\n \n-        let definitions = &self.definitions;\n+        let definitions = &self.untracked.definitions;\n         std::iter::from_generator(|| {\n             let mut i = 0;\n \n@@ -1575,7 +1562,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         // Leak a read lock once we start iterating on definitions, to prevent adding new ones\n         // while iterating.  If some query needs to add definitions, it should be `ensure`d above.\n-        let definitions = self.definitions.leak();\n+        let definitions = self.untracked.definitions.leak();\n         definitions.def_path_table()\n     }\n \n@@ -1587,7 +1574,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.ensure().hir_crate(());\n         // Leak a read lock once we start iterating on definitions, to prevent adding new ones\n         // while iterating.  If some query needs to add definitions, it should be `ensure`d above.\n-        let definitions = self.definitions.leak();\n+        let definitions = self.untracked.definitions.leak();\n         definitions.def_path_hash_to_def_index_map()\n     }\n \n@@ -1601,7 +1588,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// system if the result is otherwise tracked through queries\n     #[inline]\n     pub fn definitions_untracked(self) -> ReadGuard<'tcx, Definitions> {\n-        self.definitions.read()\n+        self.untracked.definitions.read()\n     }\n \n     /// Note that this is *untracked* and should only be used within the query\n@@ -1616,9 +1603,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         f: impl FnOnce(StableHashingContext<'_>) -> R,\n     ) -> R {\n-        let definitions = self.definitions_untracked();\n-        let hcx = StableHashingContext::new(self.sess, &*definitions, &self.untracked);\n-        f(hcx)\n+        f(StableHashingContext::new(self.sess, &self.untracked))\n     }\n \n     pub fn serialize_query_result_cache(self, encoder: FileEncoder) -> FileEncodeResult {\n@@ -2412,7 +2397,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.interners.intern_ty(\n             st,\n             self.sess,\n-            &self.definitions.read(),\n             // This is only used to create a stable hashing context.\n             &self.untracked,\n         )\n@@ -2423,7 +2407,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.interners.intern_predicate(\n             binder,\n             self.sess,\n-            &self.definitions.read(),\n             // This is only used to create a stable hashing context.\n             &self.untracked,\n         )"}, {"sha": "659d99f025da03a469729b0f070448ac23cfc240", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=75ff5c7dd3c50371f77ae29d43f87343d44b3829", "patch": "@@ -40,7 +40,6 @@ use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, LifetimeRes, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap};\n-use rustc_hir::definitions::Definitions;\n use rustc_hir::Node;\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n@@ -150,7 +149,6 @@ mod sty;\n pub type RegisteredTools = FxHashSet<Ident>;\n \n pub struct ResolverOutputs {\n-    pub definitions: Definitions,\n     pub global_ctxt: ResolverGlobalCtxt,\n     pub ast_lowering: ResolverAstLowering,\n     pub untracked: Untracked,"}, {"sha": "163da59edd5c7378fe43f9f8c565ae1237d72693", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=75ff5c7dd3c50371f77ae29d43f87343d44b3829", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::stable_hasher::{HashStable, HashingControls, StableHa\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::definitions::{DefPathHash, Definitions};\n+use rustc_hir::definitions::DefPathHash;\n use rustc_session::cstore::Untracked;\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n@@ -19,7 +19,6 @@ use rustc_span::{BytePos, CachingSourceMapView, SourceFile, Span, SpanData, DUMM\n /// things (e.g., each `DefId`/`DefPath` is only hashed once).\n #[derive(Clone)]\n pub struct StableHashingContext<'a> {\n-    definitions: &'a Definitions,\n     untracked: &'a Untracked,\n     // The value of `-Z incremental-ignore-spans`.\n     // This field should only be used by `unstable_opts_incremental_ignore_span`\n@@ -47,12 +46,11 @@ pub(super) enum BodyResolver<'tcx> {\n \n impl<'a> StableHashingContext<'a> {\n     #[inline]\n-    pub fn new(sess: &'a Session, definitions: &'a Definitions, untracked: &'a Untracked) -> Self {\n+    pub fn new(sess: &'a Session, untracked: &'a Untracked) -> Self {\n         let hash_spans_initial = !sess.opts.unstable_opts.incremental_ignore_spans;\n \n         StableHashingContext {\n             body_resolver: BodyResolver::Forbidden,\n-            definitions,\n             untracked,\n             incremental_ignore_spans: sess.opts.unstable_opts.incremental_ignore_spans,\n             caching_source_map: None,\n@@ -98,7 +96,7 @@ impl<'a> StableHashingContext<'a> {\n \n     #[inline]\n     pub fn local_def_path_hash(&self, def_id: LocalDefId) -> DefPathHash {\n-        self.definitions.def_path_hash(def_id)\n+        self.untracked.definitions.read().def_path_hash(def_id)\n     }\n \n     #[inline]"}, {"sha": "f4a6a08df1c8514fe24987fce26eb2827b7afcc4", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=75ff5c7dd3c50371f77ae29d43f87343d44b3829", "patch": "@@ -836,7 +836,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         } else if orig_name == Some(kw::SelfLower) {\n             Some(self.r.graph_root)\n         } else {\n-            self.r.crate_loader().process_extern_crate(item, local_def_id).map(|crate_id| {\n+            let crate_id = self.r.crate_loader().process_extern_crate(item, local_def_id);\n+            crate_id.map(|crate_id| {\n                 self.r.extern_crate_map.insert(local_def_id, crate_id);\n                 self.r.expect_module(crate_id.as_def_id())\n             })"}, {"sha": "37771693417b35a8c60d0e571ed98f7dab77a718", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=75ff5c7dd3c50371f77ae29d43f87343d44b3829", "patch": "@@ -1298,7 +1298,8 @@ impl<'a> Resolver<'a> {\n                     // otherwise cause duplicate suggestions.\n                     continue;\n                 }\n-                if let Some(crate_id) = self.crate_loader().maybe_process_path_extern(ident.name) {\n+                let crate_id = self.crate_loader().maybe_process_path_extern(ident.name);\n+                if let Some(crate_id) = crate_id {\n                     let crate_root = self.expect_module(crate_id.as_def_id());\n                     suggestions.extend(self.lookup_import_candidates_from_module(\n                         lookup_ident,"}, {"sha": "b8efa3f8b2743336dc894dcbac137b8a0047da94", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=75ff5c7dd3c50371f77ae29d43f87343d44b3829", "patch": "@@ -107,10 +107,7 @@ impl<'r, 'a> EffectiveVisibilitiesVisitor<'r, 'a> {\n                 r.effective_visibilities.update_eff_vis(\n                     r.local_def_id(node_id),\n                     eff_vis,\n-                    ResolverTree(\n-                        &r.definitions,\n-                        &r.untracked.cstore.as_any().downcast_ref().unwrap(),\n-                    ),\n+                    ResolverTree(&r.untracked),\n                 )\n             }\n         }"}, {"sha": "24e4b5bdd3f50d8f84e8d3f435062eb401e9de07", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=75ff5c7dd3c50371f77ae29d43f87343d44b3829", "patch": "@@ -29,7 +29,7 @@ use rustc_ast::{self as ast, NodeId, CRATE_NODE_ID};\n use rustc_ast::{AngleBracketedArg, Crate, Expr, ExprKind, GenericArg, GenericArgs, LitKind, Path};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::intern::Interned;\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{Lrc, RwLock};\n use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_expand::base::{DeriveResolutions, SyntaxExtension, SyntaxExtensionKind};\n use rustc_hir::def::Namespace::*;\n@@ -866,7 +866,6 @@ struct MacroData {\n pub struct Resolver<'a> {\n     session: &'a Session,\n \n-    definitions: Definitions,\n     /// Item with a given `LocalDefId` was defined during macro expansion with ID `ExpnId`.\n     expn_that_defined: FxHashMap<LocalDefId, ExpnId>,\n \n@@ -1113,15 +1112,15 @@ impl<'a> AsMut<Resolver<'a>> for Resolver<'a> {\n /// A minimal subset of resolver that can implemenent `DefIdTree`, sometimes\n /// required to satisfy borrow checker by avoiding borrowing the whole resolver.\n #[derive(Clone, Copy)]\n-struct ResolverTree<'a>(&'a Definitions, &'a CStore);\n+struct ResolverTree<'a>(&'a Untracked);\n \n impl DefIdTree for ResolverTree<'_> {\n     #[inline]\n     fn opt_parent(self, id: DefId) -> Option<DefId> {\n-        let ResolverTree(definitions, cstore) = self;\n+        let ResolverTree(Untracked { definitions, cstore, .. }) = self;\n         match id.as_local() {\n-            Some(id) => definitions.def_key(id).parent,\n-            None => cstore.def_key(id).parent,\n+            Some(id) => definitions.read().def_key(id).parent,\n+            None => cstore.as_any().downcast_ref::<CStore>().unwrap().def_key(id).parent,\n         }\n         .map(|index| DefId { index, ..id })\n     }\n@@ -1130,7 +1129,7 @@ impl DefIdTree for ResolverTree<'_> {\n impl<'a, 'b> DefIdTree for &'a Resolver<'b> {\n     #[inline]\n     fn opt_parent(self, id: DefId) -> Option<DefId> {\n-        ResolverTree(&self.definitions, self.cstore()).opt_parent(id)\n+        ResolverTree(&self.untracked).opt_parent(id)\n     }\n }\n \n@@ -1157,10 +1156,10 @@ impl Resolver<'_> {\n             \"adding a def'n for node-id {:?} and data {:?} but a previous def'n exists: {:?}\",\n             node_id,\n             data,\n-            self.definitions.def_key(self.node_id_to_def_id[&node_id]),\n+            self.untracked.definitions.read().def_key(self.node_id_to_def_id[&node_id]),\n         );\n \n-        let def_id = self.definitions.create_def(parent, data);\n+        let def_id = self.untracked.definitions.write().create_def(parent, data);\n \n         // Create the definition.\n         if expn_id != ExpnId::root() {\n@@ -1259,7 +1258,6 @@ impl<'a> Resolver<'a> {\n         let mut resolver = Resolver {\n             session,\n \n-            definitions,\n             expn_that_defined: Default::default(),\n \n             // The outermost module has def ID 0; this is not reflected in the\n@@ -1314,7 +1312,11 @@ impl<'a> Resolver<'a> {\n             metadata_loader,\n             local_crate_name: crate_name,\n             used_extern_options: Default::default(),\n-            untracked: Untracked { cstore: Box::new(CStore::new(session)), source_span },\n+            untracked: Untracked {\n+                cstore: Box::new(CStore::new(session)),\n+                source_span,\n+                definitions: RwLock::new(definitions),\n+            },\n             macro_names: FxHashSet::default(),\n             builtin_macros: Default::default(),\n             builtin_macro_kinds: Default::default(),\n@@ -1405,7 +1407,6 @@ impl<'a> Resolver<'a> {\n \n     pub fn into_outputs(self) -> ResolverOutputs {\n         let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();\n-        let definitions = self.definitions;\n         let expn_that_defined = self.expn_that_defined;\n         let visibilities = self.visibilities;\n         let has_pub_restricted = self.has_pub_restricted;\n@@ -1453,14 +1454,15 @@ impl<'a> Resolver<'a> {\n             builtin_macro_kinds: self.builtin_macro_kinds,\n             lifetime_elision_allowed: self.lifetime_elision_allowed,\n         };\n-        ResolverOutputs { definitions, global_ctxt, ast_lowering, untracked }\n+        ResolverOutputs { global_ctxt, ast_lowering, untracked }\n     }\n \n     pub fn clone_outputs(&self) -> ResolverOutputs {\n         let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();\n-        let definitions = self.definitions.clone();\n+        let definitions = self.untracked.definitions.clone();\n         let cstore = Box::new(self.cstore().clone());\n-        let untracked = Untracked { cstore, source_span: self.untracked.source_span.clone() };\n+        let untracked =\n+            Untracked { cstore, source_span: self.untracked.source_span.clone(), definitions };\n         let global_ctxt = ResolverGlobalCtxt {\n             expn_that_defined: self.expn_that_defined.clone(),\n             visibilities: self.visibilities.clone(),\n@@ -1496,11 +1498,11 @@ impl<'a> Resolver<'a> {\n             builtin_macro_kinds: self.builtin_macro_kinds.clone(),\n             lifetime_elision_allowed: self.lifetime_elision_allowed.clone(),\n         };\n-        ResolverOutputs { definitions, global_ctxt, ast_lowering, untracked }\n+        ResolverOutputs { global_ctxt, ast_lowering, untracked }\n     }\n \n     fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {\n-        StableHashingContext::new(self.session, &self.definitions, &self.untracked)\n+        StableHashingContext::new(self.session, &self.untracked)\n     }\n \n     pub fn crate_loader(&mut self) -> CrateLoader<'_> {\n@@ -1509,7 +1511,7 @@ impl<'a> Resolver<'a> {\n             &*self.metadata_loader,\n             self.local_crate_name,\n             &mut *self.untracked.cstore.untracked_as_any().downcast_mut().unwrap(),\n-            &self.definitions,\n+            self.untracked.definitions.read(),\n             &mut self.used_extern_options,\n         )\n     }\n@@ -1958,7 +1960,7 @@ impl<'a> Resolver<'a> {\n     #[inline]\n     pub fn opt_name(&self, def_id: DefId) -> Option<Symbol> {\n         let def_key = match def_id.as_local() {\n-            Some(def_id) => self.definitions.def_key(def_id),\n+            Some(def_id) => self.untracked.definitions.read().def_key(def_id),\n             None => self.cstore().def_key(def_id),\n         };\n         def_key.get_opt_name()"}, {"sha": "7f926f7d8bc4a2cb2cd25871384eff142e0324a8", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ff5c7dd3c50371f77ae29d43f87343d44b3829/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=75ff5c7dd3c50371f77ae29d43f87343d44b3829", "patch": "@@ -6,9 +6,9 @@ use crate::search_paths::PathKind;\n use crate::utils::NativeLibKind;\n use crate::Session;\n use rustc_ast as ast;\n-use rustc_data_structures::sync::{self, MetadataRef};\n+use rustc_data_structures::sync::{self, MetadataRef, RwLock};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, StableCrateId, LOCAL_CRATE};\n-use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n+use rustc_hir::definitions::{DefKey, DefPath, DefPathHash, Definitions};\n use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::{ExpnHash, ExpnId};\n use rustc_span::symbol::Symbol;\n@@ -257,4 +257,5 @@ pub struct Untracked {\n     pub cstore: Box<CrateStoreDyn>,\n     /// Reference span for definitions.\n     pub source_span: IndexVec<LocalDefId, Span>,\n+    pub definitions: RwLock<Definitions>,\n }"}]}