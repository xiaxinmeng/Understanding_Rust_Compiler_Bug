{"sha": "61729b3bf0e439ebe6cd785b3e6ae02ab24592c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNzI5YjNiZjBlNDM5ZWJlNmNkNzg1YjNlNmFlMDJhYjI0NTkyYzA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-28T11:36:26Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-28T12:07:16Z"}, "message": "tidy: Cleanup the directory whitelist", "tree": {"sha": "3d513d7677d5b8881fc78ddb131a170330170897", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d513d7677d5b8881fc78ddb131a170330170897"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61729b3bf0e439ebe6cd785b3e6ae02ab24592c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61729b3bf0e439ebe6cd785b3e6ae02ab24592c0", "html_url": "https://github.com/rust-lang/rust/commit/61729b3bf0e439ebe6cd785b3e6ae02ab24592c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61729b3bf0e439ebe6cd785b3e6ae02ab24592c0/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a239ef4ded03d155c72b68b5a2dd7aff013e141", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a239ef4ded03d155c72b68b5a2dd7aff013e141", "html_url": "https://github.com/rust-lang/rust/commit/9a239ef4ded03d155c72b68b5a2dd7aff013e141"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "e9b33c13ff8a988a43e9ba3621371d4e8d9f2dfd", "filename": "src/librustc_data_structures/owning_ref/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/61729b3bf0e439ebe6cd785b3e6ae02ab24592c0/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61729b3bf0e439ebe6cd785b3e6ae02ab24592c0/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs?ref=61729b3bf0e439ebe6cd785b3e6ae02ab24592c0", "patch": "@@ -10,7 +10,7 @@ This allows moving and dropping of a `OwningRef` without needing to recreate the\n This can sometimes be useful because Rust borrowing rules normally prevent\n moving a type that has been moved from. For example, this kind of code gets rejected:\n \n-```rust,ignore\n+```compile_fail,E0515\n fn return_owned_and_referenced<'a>() -> (Vec<u8>, &'a [u8]) {\n     let v = vec![1, 2, 3, 4];\n     let s = &v[1..3];\n@@ -43,7 +43,8 @@ and preventing mutable access to root containers, which in practice requires hea\n as provided by `Box<T>`, `Rc<T>`, etc.\n \n Also provided are typedefs for common owner type combinations,\n-which allow for less verbose type signatures. For example, `BoxRef<T>` instead of `OwningRef<Box<T>, T>`.\n+which allow for less verbose type signatures.\n+For example, `BoxRef<T>` instead of `OwningRef<Box<T>, T>`.\n \n The crate also provides the more advanced `OwningHandle` type,\n which allows more freedom in bundling a dependent handle object\n@@ -495,7 +496,8 @@ impl<O, T: ?Sized> OwningRef<O, T> {\n         }\n     }\n \n-    /// Erases the concrete base type of the owner with a trait object which implements `Send` and `Sync`.\n+    /// Erases the concrete base type of the owner with a trait object\n+    /// which implements `Send` and `Sync`.\n     ///\n     /// This allows mixing of owned references with different owner base types.\n     pub fn erase_send_sync_owner<'a>(self) -> OwningRef<O::Erased, T>\n@@ -507,7 +509,7 @@ impl<O, T: ?Sized> OwningRef<O, T> {\n         }\n     }\n \n-    // TODO: wrap_owner\n+    // UNIMPLEMENTED: wrap_owner\n \n     // FIXME: Naming convention?\n     /// A getter for the underlying owner.\n@@ -753,7 +755,7 @@ impl<O, T: ?Sized> OwningRefMut<O, T> {\n         }\n     }\n \n-    // TODO: wrap_owner\n+    // UNIMPLEMENTED: wrap_owner\n \n     // FIXME: Naming convention?\n     /// A getter for the underlying owner."}, {"sha": "5bff5e035b5298594711d832c2e6d5fe905570bc", "filename": "src/librustc_data_structures/owning_ref/tests.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/61729b3bf0e439ebe6cd785b3e6ae02ab24592c0/src%2Flibrustc_data_structures%2Fowning_ref%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61729b3bf0e439ebe6cd785b3e6ae02ab24592c0/src%2Flibrustc_data_structures%2Fowning_ref%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Ftests.rs?ref=61729b3bf0e439ebe6cd785b3e6ae02ab24592c0", "patch": "@@ -274,7 +274,9 @@ mod owning_handle {\n         use std::cell::RefCell;\n         let cell = Rc::new(RefCell::new(2));\n         let cell_ref = RcRef::new(cell);\n-        let mut handle = OwningHandle::new_with_fn(cell_ref, |x| unsafe { x.as_ref() }.unwrap().borrow_mut());\n+        let mut handle = OwningHandle::new_with_fn(cell_ref, |x| {\n+            unsafe { x.as_ref() }.unwrap().borrow_mut()\n+        });\n         assert_eq!(*handle, 2);\n         *handle = 3;\n         assert_eq!(*handle, 3);\n@@ -319,8 +321,12 @@ mod owning_handle {\n         let result = {\n             let complex = Rc::new(RefCell::new(Arc::new(RwLock::new(\"someString\"))));\n             let curr = RcRef::new(complex);\n-            let curr = OwningHandle::new_with_fn(curr, |x| unsafe { x.as_ref() }.unwrap().borrow_mut());\n-            let mut curr = OwningHandle::new_with_fn(curr, |x| unsafe { x.as_ref() }.unwrap().try_write().unwrap());\n+            let curr = OwningHandle::new_with_fn(curr, |x| {\n+                unsafe { x.as_ref() }.unwrap().borrow_mut()\n+            });\n+            let mut curr = OwningHandle::new_with_fn(curr, |x| {\n+                unsafe { x.as_ref() }.unwrap().try_write().unwrap()\n+            });\n             assert_eq!(*curr, \"someString\");\n             *curr = \"someOtherString\";\n             curr\n@@ -353,8 +359,12 @@ mod owning_handle {\n         let result = {\n             let complex = Rc::new(RefCell::new(Arc::new(RwLock::new(\"someString\"))));\n             let curr = RcRef::new(complex);\n-            let curr = OwningHandle::new_with_fn(curr, |x| unsafe { x.as_ref() }.unwrap().borrow_mut());\n-            let mut curr = OwningHandle::new_with_fn(curr, |x| unsafe { x.as_ref() }.unwrap().try_write().unwrap());\n+            let curr = OwningHandle::new_with_fn(curr, |x| {\n+                unsafe { x.as_ref() }.unwrap().borrow_mut()\n+            });\n+            let mut curr = OwningHandle::new_with_fn(curr, |x| {\n+                unsafe { x.as_ref() }.unwrap().try_write().unwrap()\n+            });\n             assert_eq!(*curr, \"someString\");\n             *curr = \"someOtherString\";\n             curr"}, {"sha": "eca8001a9d2a1be40f45cfe6eccae9b9d4d49779", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/61729b3bf0e439ebe6cd785b3e6ae02ab24592c0/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61729b3bf0e439ebe6cd785b3e6ae02ab24592c0/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=61729b3bf0e439ebe6cd785b3e6ae02ab24592c0", "patch": "@@ -43,31 +43,19 @@ pub mod unstable_book;\n \n fn filter_dirs(path: &Path) -> bool {\n     let skip = [\n-        \"src/llvm\",\n-        \"src/llvm-project\",\n         \"src/llvm-emscripten\",\n-        \"src/libbacktrace\",\n-        \"src/librustc_data_structures/owning_ref\",\n-        \"src/vendor\",\n+        \"src/llvm-project\",\n+        \"src/stdarch\",\n         \"src/tools/cargo\",\n-        \"src/tools/clang\",\n-        \"src/tools/rls\",\n         \"src/tools/clippy\",\n+        \"src/tools/miri\",\n+        \"src/tools/rls\",\n         \"src/tools/rust-installer\",\n         \"src/tools/rustfmt\",\n-        \"src/tools/miri\",\n-        \"src/tools/lld\",\n-        \"src/tools/lldb\",\n-        \"src/target\",\n-        \"src/stdarch\",\n-        \"src/rust-sgx\",\n-        \"target\",\n-        \"vendor\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }\n \n-\n fn walk_many(\n     paths: &[&Path], skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&DirEntry, &str)\n ) {"}]}