{"sha": "8f8cb710cc682cdb29d21cfa39af88c7e8534d76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmOGNiNzEwY2M2ODJjZGIyOWQyMWNmYTM5YWY4OGM3ZTg1MzRkNzY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-29T19:04:01Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-29T19:04:01Z"}, "message": "remove trivial `mk_predicate`s", "tree": {"sha": "6ad7ab3e3e9c9b613016fb165582c1d40c429d80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ad7ab3e3e9c9b613016fb165582c1d40c429d80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f8cb710cc682cdb29d21cfa39af88c7e8534d76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f8cb710cc682cdb29d21cfa39af88c7e8534d76", "html_url": "https://github.com/rust-lang/rust/commit/8f8cb710cc682cdb29d21cfa39af88c7e8534d76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f8cb710cc682cdb29d21cfa39af88c7e8534d76/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96dd4690c3aa70ec312448c3f2d50e6dc6fb87df", "url": "https://api.github.com/repos/rust-lang/rust/commits/96dd4690c3aa70ec312448c3f2d50e6dc6fb87df", "html_url": "https://github.com/rust-lang/rust/commit/96dd4690c3aa70ec312448c3f2d50e6dc6fb87df"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "7eefd1419a311ce954808cfa62baace0da794896", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f8cb710cc682cdb29d21cfa39af88c7e8534d76/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f8cb710cc682cdb29d21cfa39af88c7e8534d76/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=8f8cb710cc682cdb29d21cfa39af88c7e8534d76", "patch": "@@ -987,7 +987,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-        folder.tcx().mk_predicate(ty::PredicateKind::super_fold_with(self.kind, folder))\n+        let new = ty::PredicateKind::super_fold_with(self.kind, folder);\n+        if new != *self.kind { folder.tcx().mk_predicate(new) } else { *self }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {"}]}