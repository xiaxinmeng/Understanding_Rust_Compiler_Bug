{"sha": "d0afa6ede3ce5fd6b35c8f1fd5fc89336ec2dc96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYWZhNmVkZTNjZTVmZDZiMzVjOGYxZmQ1ZmM4OTMzNmVjMmRjOTY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-05-28T21:00:52Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-05-29T06:39:07Z"}, "message": "Add map and filter_map associated functions to std::cell::Ref and RefMut\n\nSee design discussion in https://github.com/rust-lang/rust/pull/25747", "tree": {"sha": "5603388b531acbe6d1c72729a6e19057d66edc36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5603388b531acbe6d1c72729a6e19057d66edc36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0afa6ede3ce5fd6b35c8f1fd5fc89336ec2dc96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0afa6ede3ce5fd6b35c8f1fd5fc89336ec2dc96", "html_url": "https://github.com/rust-lang/rust/commit/d0afa6ede3ce5fd6b35c8f1fd5fc89336ec2dc96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0afa6ede3ce5fd6b35c8f1fd5fc89336ec2dc96/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c516eee503ae643ead9553fed70528230feb2b1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c516eee503ae643ead9553fed70528230feb2b1f", "html_url": "https://github.com/rust-lang/rust/commit/c516eee503ae643ead9553fed70528230feb2b1f"}], "stats": {"total": 210, "additions": 209, "deletions": 1}, "files": [{"sha": "9ad3ce1152454019790d16264fcf597c8ad78323", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 132, "deletions": 1, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/d0afa6ede3ce5fd6b35c8f1fd5fc89336ec2dc96/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0afa6ede3ce5fd6b35c8f1fd5fc89336ec2dc96/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=d0afa6ede3ce5fd6b35c8f1fd5fc89336ec2dc96", "patch": "@@ -146,7 +146,7 @@ use clone::Clone;\n use cmp::PartialEq;\n use default::Default;\n use marker::{Copy, Send, Sync, Sized};\n-use ops::{Deref, DerefMut, Drop};\n+use ops::{Deref, DerefMut, Drop, FnOnce};\n use option::Option;\n use option::Option::{None, Some};\n \n@@ -570,6 +570,137 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n             _borrow: orig._borrow.clone(),\n         }\n     }\n+\n+    /// Make a new `Ref` for a component of the borrowed data.\n+    ///\n+    /// The `RefCell` is already immutably borrowed, so this cannot fail.\n+    ///\n+    /// This is an associated function that needs to be used as `Ref::map(...)`.\n+    /// A method would interfere with methods of the same name on the contents of a `RefCell`\n+    /// used through `Deref`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # #![feature(cell_extras)]\n+    /// use std::cell::{RefCell, Ref};\n+    ///\n+    /// let c = RefCell::new((5, 'b'));\n+    /// let b1: Ref<(u32, char)> = c.borrow();\n+    /// let b2: Ref<u32> = Ref::map(b1, |t| &t.0);\n+    /// assert_eq!(*b2, 5)\n+    /// ```\n+    #[unstable(feature = \"cell_extras\", reason = \"recently added\")]\n+    #[inline]\n+    pub fn map<U: ?Sized, F>(orig: Ref<'b, T>, f: F) -> Ref<'b, U>\n+        where F: FnOnce(&T) -> &U\n+    {\n+        Ref {\n+            _value: f(orig._value),\n+            _borrow: orig._borrow,\n+        }\n+    }\n+\n+    /// Make a new `Ref` for a optional component of the borrowed data, e.g. an enum variant.\n+    ///\n+    /// The `RefCell` is already immutably borrowed, so this cannot fail.\n+    ///\n+    /// This is an associated function that needs to be used as `Ref::filter_map(...)`.\n+    /// A method would interfere with methods of the same name on the contents of a `RefCell`\n+    /// used through `Deref`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # #![feature(cell_extras)]\n+    /// use std::cell::{RefCell, Ref};\n+    ///\n+    /// let c = RefCell::new(Ok(5));\n+    /// let b1: Ref<Result<u32, ()>> = c.borrow();\n+    /// let b2: Ref<u32> = Ref::filter_map(b1, |o| o.as_ref().ok()).unwrap();\n+    /// assert_eq!(*b2, 5)\n+    /// ```\n+    #[unstable(feature = \"cell_extras\", reason = \"recently added\")]\n+    #[inline]\n+    pub fn filter_map<U: ?Sized, F>(orig: Ref<'b, T>, f: F) -> Option<Ref<'b, U>>\n+        where F: FnOnce(&T) -> Option<&U>\n+    {\n+        f(orig._value).map(move |new| Ref {\n+            _value: new,\n+            _borrow: orig._borrow,\n+        })\n+    }\n+}\n+\n+impl<'b, T: ?Sized> RefMut<'b, T> {\n+    /// Make a new `RefMut` for a component of the borrowed data, e.g. an enum variant.\n+    ///\n+    /// The `RefCell` is already mutably borrowed, so this cannot fail.\n+    ///\n+    /// This is an associated function that needs to be used as `RefMut::map(...)`.\n+    /// A method would interfere with methods of the same name on the contents of a `RefCell`\n+    /// used through `Deref`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # #![feature(cell_extras)]\n+    /// use std::cell::{RefCell, RefMut};\n+    ///\n+    /// let c = RefCell::new((5, 'b'));\n+    /// {\n+    ///     let b1: RefMut<(u32, char)> = c.borrow_mut();\n+    ///     let mut b2: RefMut<u32> = RefMut::map(b1, |t| &mut t.0);\n+    ///     assert_eq!(*b2, 5);\n+    ///     *b2 = 42;\n+    /// }\n+    /// assert_eq!(*c.borrow(), (42, 'b'));\n+    /// ```\n+    #[unstable(feature = \"cell_extras\", reason = \"recently added\")]\n+    #[inline]\n+    pub fn map<U: ?Sized, F>(orig: RefMut<'b, T>, f: F) -> RefMut<'b, U>\n+        where F: FnOnce(&mut T) -> &mut U\n+    {\n+        RefMut {\n+            _value: f(orig._value),\n+            _borrow: orig._borrow,\n+        }\n+    }\n+\n+    /// Make a new `RefMut` for a optional component of the borrowed data, e.g. an enum variant.\n+    ///\n+    /// The `RefCell` is already mutably borrowed, so this cannot fail.\n+    ///\n+    /// This is an associated function that needs to be used as `RefMut::filter_map(...)`.\n+    /// A method would interfere with methods of the same name on the contents of a `RefCell`\n+    /// used through `Deref`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # #![feature(cell_extras)]\n+    /// use std::cell::{RefCell, RefMut};\n+    ///\n+    /// let c = RefCell::new(Ok(5));\n+    /// {\n+    ///     let b1: RefMut<Result<u32, ()>> = c.borrow_mut();\n+    ///     let mut b2: RefMut<u32> = RefMut::filter_map(b1, |o| o.as_mut().ok()).unwrap();\n+    ///     assert_eq!(*b2, 5);\n+    ///     *b2 = 42;\n+    /// }\n+    /// assert_eq!(*c.borrow(), Ok(42));\n+    /// ```\n+    #[unstable(feature = \"cell_extras\", reason = \"recently added\")]\n+    #[inline]\n+    pub fn filter_map<U: ?Sized, F>(orig: RefMut<'b, T>, f: F) -> Option<RefMut<'b, U>>\n+        where F: FnOnce(&mut T) -> Option<&mut U>\n+    {\n+        let RefMut { _value, _borrow } = orig;\n+        f(_value).map(move |new| RefMut {\n+            _value: new,\n+            _borrow: _borrow,\n+        })\n+    }\n }\n \n struct BorrowRefMut<'b> {"}, {"sha": "20740a5e2cebc91dc3649cbf6a2c60536c4efe2e", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/d0afa6ede3ce5fd6b35c8f1fd5fc89336ec2dc96/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0afa6ede3ce5fd6b35c8f1fd5fc89336ec2dc96/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=d0afa6ede3ce5fd6b35c8f1fd5fc89336ec2dc96", "patch": "@@ -129,6 +129,82 @@ fn ref_clone_updates_flag() {\n     assert_eq!(x.borrow_state(), BorrowState::Unused);\n }\n \n+#[test]\n+fn ref_map_does_not_update_flag() {\n+    let x = RefCell::new(Some(5));\n+    {\n+        let b1: Ref<Option<u32>> = x.borrow();\n+        assert_eq!(x.borrow_state(), BorrowState::Reading);\n+        {\n+            let b2: Ref<u32> = Ref::map(b1, |o| o.as_ref().unwrap());\n+            assert_eq!(*b2, 5);\n+            assert_eq!(x.borrow_state(), BorrowState::Reading);\n+        }\n+        assert_eq!(x.borrow_state(), BorrowState::Unused);\n+    }\n+    assert_eq!(x.borrow_state(), BorrowState::Unused);\n+}\n+\n+#[test]\n+fn ref_map_accessor() {\n+    struct X(RefCell<(u32, char)>);\n+    impl X {\n+        fn accessor(&self) -> Ref<u32> {\n+            Ref::map(self.0.borrow(), |tuple| &tuple.0)\n+        }\n+    }\n+    let x = X(RefCell::new((7, 'z')));\n+    let d: Ref<u32> = x.accessor();\n+    assert_eq!(*d, 7);\n+}\n+\n+#[test]\n+fn ref_filter_map_accessor() {\n+    struct X(RefCell<Result<u32, ()>>);\n+    impl X {\n+        fn accessor(&self) -> Option<Ref<u32>> {\n+            Ref::filter_map(self.0.borrow(), |r| r.as_ref().ok())\n+        }\n+    }\n+    let x = X(RefCell::new(Ok(7)));\n+    let d: Ref<u32> = x.accessor().unwrap();\n+    assert_eq!(*d, 7);\n+}\n+\n+#[test]\n+fn ref_mut_map_accessor() {\n+    struct X(RefCell<(u32, char)>);\n+    impl X {\n+        fn accessor(&self) -> RefMut<u32> {\n+            RefMut::map(self.0.borrow_mut(), |tuple| &mut tuple.0)\n+        }\n+    }\n+    let x = X(RefCell::new((7, 'z')));\n+    {\n+        let mut d: RefMut<u32> = x.accessor();\n+        assert_eq!(*d, 7);\n+        *d += 1;\n+    }\n+    assert_eq!(*x.0.borrow(), (8, 'z'));\n+}\n+\n+#[test]\n+fn ref_mut_filter_map_accessor() {\n+    struct X(RefCell<Result<u32, ()>>);\n+    impl X {\n+        fn accessor(&self) -> Option<RefMut<u32>> {\n+            RefMut::filter_map(self.0.borrow_mut(), |r| r.as_mut().ok())\n+        }\n+    }\n+    let x = X(RefCell::new(Ok(7)));\n+    {\n+        let mut d: RefMut<u32> = x.accessor().unwrap();\n+        assert_eq!(*d, 7);\n+        *d += 1;\n+    }\n+    assert_eq!(*x.0.borrow(), Ok(8));\n+}\n+\n #[test]\n fn as_unsafe_cell() {\n     let c1: Cell<usize> = Cell::new(0);"}, {"sha": "3d14b3f3c810631ed0cf49d1807e5e3b2a20784a", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0afa6ede3ce5fd6b35c8f1fd5fc89336ec2dc96/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0afa6ede3ce5fd6b35c8f1fd5fc89336ec2dc96/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=d0afa6ede3ce5fd6b35c8f1fd5fc89336ec2dc96", "patch": "@@ -24,6 +24,7 @@\n #![feature(step_by)]\n #![feature(slice_patterns)]\n #![feature(float_from_str_radix)]\n+#![feature(cell_extras)]\n \n extern crate core;\n extern crate test;"}]}