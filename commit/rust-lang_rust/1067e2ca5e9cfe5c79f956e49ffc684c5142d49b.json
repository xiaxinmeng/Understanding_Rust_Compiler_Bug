{"sha": "1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "node_id": "C_kwDOAAsO6NoAKDEwNjdlMmNhNWU5Y2ZlNWM3OWY5NTZlNDlmZmM2ODRjNTE0MmQ0OWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-11T14:16:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-11T14:16:15Z"}, "message": "Auto merge of #89767 - GuillaumeGomez:rollup-sczixhk, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #89655 (bootstrap: don't use `--merges` to look for commit hashes for downloading artifacts)\n - #89726 (Add #[must_use] to alloc constructors)\n - #89729 (Add #[must_use] to core and std constructors)\n - #89743 (Fix RUSTC_LOG handling)\n - #89753 (Add #[must_use] to from_value conversions)\n - #89754 (Cleanup .item-table CSS)\n - #89761 (:arrow_up: rust-analyzer)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e5f2a3b0156efd5a28e933c42629ce4b443f0b9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5f2a3b0156efd5a28e933c42629ce4b443f0b9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "html_url": "https://github.com/rust-lang/rust/commit/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "html_url": "https://github.com/rust-lang/rust/commit/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073"}, {"sha": "913b1de0ec1da8cdf5e8ad1c418fe4ad61e1e79d", "url": "https://api.github.com/repos/rust-lang/rust/commits/913b1de0ec1da8cdf5e8ad1c418fe4ad61e1e79d", "html_url": "https://github.com/rust-lang/rust/commit/913b1de0ec1da8cdf5e8ad1c418fe4ad61e1e79d"}], "stats": {"total": 153, "additions": 144, "deletions": 9}, "files": [{"sha": "9a57ec991444ac8e160ae835d213b6513afad26e", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -1259,7 +1259,7 @@ pub fn init_env_logger(env: &str) {\n     };\n \n     let filter = match std::env::var(env) {\n-        Ok(env) => EnvFilter::from_env(env),\n+        Ok(env) => EnvFilter::new(env),\n         _ => EnvFilter::default().add_directive(filter::Directive::from(LevelFilter::WARN)),\n     };\n "}, {"sha": "bd4f52560421b9edd0b5935058ebcd4e6474e2da", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -187,6 +187,7 @@ impl<T> Box<T> {\n     #[cfg(not(no_global_oom_handling))]\n     #[inline(always)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new(x: T) -> Self {\n         box x\n     }\n@@ -211,6 +212,7 @@ impl<T> Box<T> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     #[inline]\n     pub fn new_uninit() -> Box<mem::MaybeUninit<T>> {\n         Self::new_uninit_in(Global)\n@@ -237,6 +239,7 @@ impl<T> Box<T> {\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {\n         Self::new_zeroed_in(Global)\n     }\n@@ -245,6 +248,7 @@ impl<T> Box<T> {\n     /// `x` will be pinned in memory and unable to be moved.\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    #[must_use]\n     #[inline(always)]\n     pub fn pin(x: T) -> Pin<Box<T>> {\n         (box x).into()\n@@ -339,6 +343,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[must_use]\n     #[inline]\n     pub fn new_in(x: T, alloc: A) -> Self {\n         let mut boxed = Self::new_uninit_in(alloc);\n@@ -395,6 +400,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// ```\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n@@ -459,6 +465,7 @@ impl<T, A: Allocator> Box<T, A> {\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     #[cfg(not(no_global_oom_handling))]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n         // NOTE: Prefer match over unwrap_or_else since closure sometimes not inlineable.\n@@ -503,6 +510,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// `x` will be pinned in memory and unable to be moved.\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[must_use]\n     #[inline(always)]\n     pub fn pin_in(x: T, alloc: A) -> Pin<Self>\n     where\n@@ -561,6 +569,7 @@ impl<T> Box<[T]> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit_slice(len: usize) -> Box<[mem::MaybeUninit<T>]> {\n         unsafe { RawVec::with_capacity(len).into_box(len) }\n     }\n@@ -585,6 +594,7 @@ impl<T> Box<[T]> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed_slice(len: usize) -> Box<[mem::MaybeUninit<T>]> {\n         unsafe { RawVec::with_capacity_zeroed(len).into_box(len) }\n     }\n@@ -681,6 +691,7 @@ impl<T, A: Allocator> Box<[T], A> {\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit_slice_in(len: usize, alloc: A) -> Box<[mem::MaybeUninit<T>], A> {\n         unsafe { RawVec::with_capacity_in(len, alloc).into_box(len) }\n     }\n@@ -708,6 +719,7 @@ impl<T, A: Allocator> Box<[T], A> {\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed_slice_in(len: usize, alloc: A) -> Box<[mem::MaybeUninit<T>], A> {\n         unsafe { RawVec::with_capacity_zeroed_in(len, alloc).into_box(len) }\n     }"}, {"sha": "cfb1cd09c39759e4be50b1c6de96283def967bef", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -364,6 +364,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// heap.push(4);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new() -> BinaryHeap<T> {\n         BinaryHeap { data: vec![] }\n     }\n@@ -383,6 +384,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// heap.push(4);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn with_capacity(capacity: usize) -> BinaryHeap<T> {\n         BinaryHeap { data: Vec::with_capacity(capacity) }\n     }"}, {"sha": "fa86e611565e64b0b7ab0a5cb7099bd385c3fa5c", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -502,6 +502,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[must_use]\n     pub const fn new() -> BTreeMap<K, V> {\n         BTreeMap { root: None, length: 0 }\n     }"}, {"sha": "d732f65b0d05f152174ab10f005a2acc6b7c5b35", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -248,6 +248,7 @@ impl<T> BTreeSet<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[must_use]\n     pub const fn new() -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::new() }\n     }"}, {"sha": "6dcba318c3598f4c4307d8849818e307a6d461e6", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -417,6 +417,7 @@ impl<T> LinkedList<T> {\n     #[inline]\n     #[rustc_const_stable(feature = \"const_linked_list_new\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub const fn new() -> Self {\n         LinkedList { head: None, tail: None, len: 0, marker: PhantomData }\n     }"}, {"sha": "09ae1f7eebd09b8b6165fffb5247ba574c3a2ddf", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -475,6 +475,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new() -> VecDeque<T> {\n         VecDeque::new_in(Global)\n     }\n@@ -490,6 +491,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn with_capacity(capacity: usize) -> VecDeque<T> {\n         Self::with_capacity_in(capacity, Global)\n     }"}, {"sha": "75dbd4678bb473c39572372c5265a74ae4976ba0", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -69,6 +69,7 @@ impl<T> RawVec<T, Global> {\n     /// `RawVec` with capacity `0`. If `T` is zero-sized, then it makes a\n     /// `RawVec` with capacity `usize::MAX`. Useful for implementing\n     /// delayed allocation.\n+    #[must_use]\n     pub const fn new() -> Self {\n         Self::new_in(Global)\n     }\n@@ -87,13 +88,15 @@ impl<T> RawVec<T, Global> {\n     ///\n     /// Aborts on OOM.\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use]\n     #[inline]\n     pub fn with_capacity(capacity: usize) -> Self {\n         Self::with_capacity_in(capacity, Global)\n     }\n \n     /// Like `with_capacity`, but guarantees the buffer is zeroed.\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use]\n     #[inline]\n     pub fn with_capacity_zeroed(capacity: usize) -> Self {\n         Self::with_capacity_zeroed_in(capacity, Global)"}, {"sha": "2f4a131136e928a20a516527ad3682047b7b9959", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -452,6 +452,7 @@ impl<T> Rc<T> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit() -> Rc<mem::MaybeUninit<T>> {\n         unsafe {\n             Rc::from_ptr(Rc::allocate_for_layout(\n@@ -484,6 +485,7 @@ impl<T> Rc<T> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed() -> Rc<mem::MaybeUninit<T>> {\n         unsafe {\n             Rc::from_ptr(Rc::allocate_for_layout(\n@@ -587,6 +589,7 @@ impl<T> Rc<T> {\n     /// `value` will be pinned in memory and unable to be moved.\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    #[must_use]\n     pub fn pin(value: T) -> Pin<Rc<T>> {\n         unsafe { Pin::new_unchecked(Rc::new(value)) }\n     }\n@@ -658,6 +661,7 @@ impl<T> Rc<[T]> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit_slice(len: usize) -> Rc<[mem::MaybeUninit<T>]> {\n         unsafe { Rc::from_ptr(Rc::allocate_for_slice(len)) }\n     }\n@@ -684,6 +688,7 @@ impl<T> Rc<[T]> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed_slice(len: usize) -> Rc<[mem::MaybeUninit<T>]> {\n         unsafe {\n             Rc::from_ptr(Rc::allocate_for_layout(\n@@ -2044,6 +2049,7 @@ impl<T> Weak<T> {\n     /// assert!(empty.upgrade().is_none());\n     /// ```\n     #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n+    #[must_use]\n     pub fn new() -> Weak<T> {\n         Weak { ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect(\"MAX is not 0\") }\n     }"}, {"sha": "ac7f23044565617ac79cd5c2881af3009cb3ee23", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -595,6 +595,7 @@ impl str {\n /// assert_eq!(\"\u263a\", &*smile);\n /// ```\n #[stable(feature = \"str_box_extras\", since = \"1.20.0\")]\n+#[must_use]\n #[inline]\n pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> {\n     unsafe { Box::from_raw(Box::into_raw(v) as *mut str) }"}, {"sha": "f11fa92766f1fb3706fb5f87b391bfacf092450d", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -378,6 +378,7 @@ impl String {\n     #[inline]\n     #[rustc_const_stable(feature = \"const_string_new\", since = \"1.39.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub const fn new() -> String {\n         String { vec: Vec::new() }\n     }\n@@ -422,6 +423,7 @@ impl String {\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn with_capacity(capacity: usize) -> String {\n         String { vec: Vec::with_capacity(capacity) }\n     }\n@@ -762,6 +764,7 @@ impl String {\n     /// assert_eq!(\"\ud83d\udc96\", sparkle_heart);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_utf8_unchecked(bytes: Vec<u8>) -> String {\n         String { vec: bytes }"}, {"sha": "1d4216d7d571af24f947a39bc7695773ecd0f8f7", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -448,6 +448,7 @@ impl<T> Arc<T> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit() -> Arc<mem::MaybeUninit<T>> {\n         unsafe {\n             Arc::from_ptr(Arc::allocate_for_layout(\n@@ -480,6 +481,7 @@ impl<T> Arc<T> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed() -> Arc<mem::MaybeUninit<T>> {\n         unsafe {\n             Arc::from_ptr(Arc::allocate_for_layout(\n@@ -494,6 +496,7 @@ impl<T> Arc<T> {\n     /// `data` will be pinned in memory and unable to be moved.\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    #[must_use]\n     pub fn pin(data: T) -> Pin<Arc<T>> {\n         unsafe { Pin::new_unchecked(Arc::new(data)) }\n     }\n@@ -662,6 +665,7 @@ impl<T> Arc<[T]> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_uninit_slice(len: usize) -> Arc<[mem::MaybeUninit<T>]> {\n         unsafe { Arc::from_ptr(Arc::allocate_for_slice(len)) }\n     }\n@@ -688,6 +692,7 @@ impl<T> Arc<[T]> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use]\n     pub fn new_zeroed_slice(len: usize) -> Arc<[mem::MaybeUninit<T>]> {\n         unsafe {\n             Arc::from_ptr(Arc::allocate_for_layout(\n@@ -1680,6 +1685,7 @@ impl<T> Weak<T> {\n     /// assert!(empty.upgrade().is_none());\n     /// ```\n     #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n+    #[must_use]\n     pub fn new() -> Weak<T> {\n         Weak { ptr: NonNull::new(usize::MAX as *mut ArcInner<T>).expect(\"MAX is not 0\") }\n     }"}, {"sha": "a12acb1a1c07f7da512844658aa3992f18418209", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -420,6 +420,7 @@ impl<T> Vec<T> {\n     #[inline]\n     #[rustc_const_stable(feature = \"const_vec_new\", since = \"1.39.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub const fn new() -> Self {\n         Vec { buf: RawVec::NEW, len: 0 }\n     }\n@@ -464,6 +465,7 @@ impl<T> Vec<T> {\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn with_capacity(capacity: usize) -> Self {\n         Self::with_capacity_in(capacity, Global)\n     }"}, {"sha": "d4c8ea33501a6a5fb8679f54a05739532bca374d", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -94,6 +94,7 @@ impl Layout {\n     /// [`Layout::from_size_align`].\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_stable(feature = \"alloc_layout\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n         // SAFETY: the caller must ensure that `align` is greater than zero.\n@@ -119,6 +120,7 @@ impl Layout {\n     /// Constructs a `Layout` suitable for holding a value of type `T`.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_stable(feature = \"alloc_layout_const_new\", since = \"1.42.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn new<T>() -> Self {\n         let (size, align) = size_align::<T>();"}, {"sha": "72921414fb3f29aa37905382b2751e41ff87eece", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -48,6 +48,7 @@ use super::MAX;\n /// assert_eq!(None, c);\n /// ```\n #[doc(alias = \"chr\")]\n+#[must_use]\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn from_u32(i: u32) -> Option<char> {\n@@ -88,6 +89,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n /// assert_eq!('\u2764', c);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"char_from_unchecked\", since = \"1.5.0\")]\n pub unsafe fn from_u32_unchecked(i: u32) -> char {\n     // SAFETY: the caller must guarantee that `i` is a valid char value.\n@@ -319,6 +321,7 @@ impl fmt::Display for CharTryFromError {\n /// let c = char::from_digit(1, 37);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n     if radix > 36 {"}, {"sha": "3e7c5b3189cb5ece4084dc6c49d3995412419481", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -136,6 +136,7 @@ impl char {\n     /// assert_eq!(None, c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_u32(i: u32) -> Option<char> {\n         super::convert::from_u32(i)\n@@ -177,6 +178,7 @@ impl char {\n     /// assert_eq!('\u2764', c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[must_use]\n     #[inline]\n     pub unsafe fn from_u32_unchecked(i: u32) -> char {\n         // SAFETY: the safety contract must be upheld by the caller.\n@@ -230,9 +232,10 @@ impl char {\n     /// use std::char;\n     ///\n     /// // this panics\n-    /// char::from_digit(1, 37);\n+    /// let _c = char::from_digit(1, 37);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n         super::convert::from_digit(num, radix)"}, {"sha": "b9443e30074b00fc9ef5cc288120e6f5abba425f", "filename": "library/core/src/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -157,6 +157,7 @@ impl SipHasher {\n         since = \"1.13.0\",\n         reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n+    #[must_use]\n     pub fn new() -> SipHasher {\n         SipHasher::new_with_keys(0, 0)\n     }\n@@ -168,6 +169,7 @@ impl SipHasher {\n         since = \"1.13.0\",\n         reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n+    #[must_use]\n     pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher {\n         SipHasher(SipHasher24 { hasher: Hasher::new_with_keys(key0, key1) })\n     }"}, {"sha": "d109141216aefb90a498acf146e4e9b25fe04cf6", "filename": "library/core/src/lazy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flazy.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -83,6 +83,7 @@ impl<T> From<T> for OnceCell<T> {\n impl<T> OnceCell<T> {\n     /// Creates a new empty cell.\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[must_use]\n     pub const fn new() -> OnceCell<T> {\n         OnceCell { inner: UnsafeCell::new(None) }\n     }"}, {"sha": "b9772eaa67813d152bf9d5a930b2c345098102ae", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -312,6 +312,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"const_maybe_uninit\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline(always)]\n     #[rustc_diagnostic_item = \"maybe_uninit_uninit\"]\n     pub const fn uninit() -> MaybeUninit<T> {\n@@ -349,6 +350,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n+    #[must_use]\n     #[inline(always)]\n     pub const fn uninit_array<const LEN: usize>() -> [Self; LEN] {\n         // SAFETY: An uninitialized `[MaybeUninit<_>; LEN]` is valid.\n@@ -391,6 +393,7 @@ impl<T> MaybeUninit<T> {\n     /// // This is undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_diagnostic_item = \"maybe_uninit_zeroed\"]\n     pub fn zeroed() -> MaybeUninit<T> {"}, {"sha": "ad8106df198da3005c3b4e0692aef6e259b86213", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -801,6 +801,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_bits(v: u32) -> Self {\n         // SAFETY: `u32` is a plain old datatype so we can always transmute from it\n@@ -885,6 +886,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_be_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_be_bytes(bytes))\n@@ -900,6 +902,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_le_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_le_bytes(bytes))\n@@ -926,6 +929,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_ne_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_ne_bytes(bytes))"}, {"sha": "6a48101e04fdac695166d174e2484cbc73d60946", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -817,6 +817,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_bits(v: u64) -> Self {\n         // SAFETY: `u64` is a plain old datatype so we can always transmute from it\n@@ -901,6 +902,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_be_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_be_bytes(bytes))\n@@ -916,6 +918,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_le_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_le_bytes(bytes))\n@@ -942,6 +945,7 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n+    #[must_use]\n     #[inline]\n     pub const fn from_ne_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_ne_bytes(bytes))"}, {"sha": "0bdc933013791b2c017ae20a4f0c3f48b61b0f4d", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -297,6 +297,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_be(x: Self) -> Self {\n             #[cfg(target_endian = \"big\")]\n@@ -328,6 +329,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_le(x: Self) -> Self {\n             #[cfg(target_endian = \"little\")]\n@@ -2671,6 +2673,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2701,6 +2704,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2742,6 +2746,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute to them\n         #[inline]"}, {"sha": "89fd9fbaf455d6b3f2cfc3f0ea8bd32e7d3a68cf", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -50,6 +50,7 @@ macro_rules! nonzero_integers {\n                 /// The value must not be zero.\n                 #[$stability]\n                 #[$const_new_unchecked_stability]\n+                #[must_use]\n                 #[inline]\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n                     // SAFETY: this is guaranteed to be safe by the caller.\n@@ -59,6 +60,7 @@ macro_rules! nonzero_integers {\n                 /// Creates a non-zero if the given value is not zero.\n                 #[$stability]\n                 #[rustc_const_stable(feature = \"const_nonzero_int_methods\", since = \"1.47.0\")]\n+                #[must_use]\n                 #[inline]\n                 pub const fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {"}, {"sha": "c764f420e27399d3a343fb974ec8d94086efad98", "filename": "library/core/src/num/saturating.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -657,6 +657,7 @@ macro_rules! saturating_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn from_be(x: Self) -> Self {\n                 Saturating(<$t>::from_be(x.0))\n@@ -684,6 +685,7 @@ macro_rules! saturating_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn from_le(x: Self) -> Self {\n                 Saturating(<$t>::from_le(x.0))"}, {"sha": "c3b2ecdb30f5b9c2fbc4365acea8ca80d34401fc", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -300,6 +300,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline(always)]\n         pub const fn from_be(x: Self) -> Self {\n             #[cfg(target_endian = \"big\")]\n@@ -332,6 +333,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use]\n         #[inline(always)]\n         pub const fn from_le(x: Self) -> Self {\n             #[cfg(target_endian = \"little\")]\n@@ -2321,6 +2323,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2351,6 +2354,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         #[inline]\n         pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2392,6 +2396,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute to them\n         #[inline]"}, {"sha": "f387bd5b41cc453ef9cd956af7f5e65341ff06bc", "filename": "library/core/src/num/wrapping.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -651,6 +651,7 @@ macro_rules! wrapping_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn from_be(x: Self) -> Self {\n                 Wrapping(<$t>::from_be(x.0))\n@@ -678,6 +679,7 @@ macro_rules! wrapping_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn from_le(x: Self) -> Self {\n                 Wrapping(<$t>::from_le(x.0))"}, {"sha": "ed9f49f159611f19702787f29161a3423e5ae731", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -155,6 +155,7 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n /// assert_eq!(\"\ud83d\udc96\", sparkle_heart);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"const_str_from_utf8_unchecked\", since = \"1.55.0\")]\n pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n@@ -181,6 +182,7 @@ pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n /// assert_eq!(\"\ud83d\udc96\", heart);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {\n     // SAFETY: the caller must guarantee that the bytes `v`"}, {"sha": "d3c9d21c3c756c0acaec68fa99ad823787d71aef", "filename": "library/core/src/str/lossy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -12,10 +12,12 @@ pub struct Utf8Lossy {\n }\n \n impl Utf8Lossy {\n+    #[must_use]\n     pub fn from_str(s: &str) -> &Utf8Lossy {\n         Utf8Lossy::from_bytes(s.as_bytes())\n     }\n \n+    #[must_use]\n     pub fn from_bytes(bytes: &[u8]) -> &Utf8Lossy {\n         // SAFETY: Both use the same memory layout, and UTF-8 correctness isn't required.\n         unsafe { mem::transmute(bytes) }"}, {"sha": "b07752116e514901435239589cf24c7ffd62ec6b", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -290,6 +290,7 @@ impl AtomicBool {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_atomic_new\", since = \"1.24.0\")]\n+    #[must_use]\n     pub const fn new(v: bool) -> AtomicBool {\n         AtomicBool { v: UnsafeCell::new(v as u8) }\n     }\n@@ -1392,6 +1393,7 @@ macro_rules! atomic_int {\n             #[inline]\n             #[$stable]\n             #[$const_stable]\n+            #[must_use]\n             pub const fn new(v: $int_type) -> Self {\n                 Self {v: UnsafeCell::new(v)}\n             }"}, {"sha": "620bff538799425c28ba158723712b072beca39f", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -39,6 +39,7 @@ impl RawWaker {\n     #[rustc_promotable]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[must_use]\n     pub const fn new(data: *const (), vtable: &'static RawWakerVTable) -> RawWaker {\n         RawWaker { data, vtable }\n     }\n@@ -158,6 +159,7 @@ pub struct Context<'a> {\n impl<'a> Context<'a> {\n     /// Create a new `Context` from a `&Waker`.\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_waker(waker: &'a Waker) -> Self {\n         Context { waker, _marker: PhantomData }\n@@ -251,6 +253,7 @@ impl Waker {\n     /// in [`RawWaker`]'s and [`RawWakerVTable`]'s documentation is not upheld.\n     /// Therefore this method is unsafe.\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub unsafe fn from_raw(waker: RawWaker) -> Waker {\n         Waker { waker }"}, {"sha": "40c5338d13cfd112c465007aa6195b64e7ad501a", "filename": "library/core/src/time.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -181,6 +181,7 @@ impl Duration {\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[must_use]\n     pub const fn new(secs: u64, nanos: u32) -> Duration {\n         let secs = match secs.checked_add((nanos / NANOS_PER_SEC) as u64) {\n             Some(secs) => secs,\n@@ -203,6 +204,7 @@ impl Duration {\n     /// assert_eq!(0, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_secs(secs: u64) -> Duration {\n@@ -222,6 +224,7 @@ impl Duration {\n     /// assert_eq!(569_000_000, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_millis(millis: u64) -> Duration {\n@@ -244,6 +247,7 @@ impl Duration {\n     /// assert_eq!(2000, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration_from_micros\", since = \"1.27.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_micros(micros: u64) -> Duration {\n@@ -266,6 +270,7 @@ impl Duration {\n     /// assert_eq!(123, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     pub const fn from_nanos(nanos: u64) -> Duration {\n@@ -707,6 +712,7 @@ impl Duration {\n     /// assert_eq!(dur, Duration::new(2, 700_000_000));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn from_secs_f64(secs: f64) -> Duration {\n@@ -768,6 +774,7 @@ impl Duration {\n     /// assert_eq!(dur, Duration::new(2, 700_000_000));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn from_secs_f32(secs: f32) -> Duration {"}, {"sha": "01019344f4f67b2dff83edcee55e9b18acd1495c", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -223,6 +223,7 @@ impl<K, V> HashMap<K, V, RandomState> {\n     /// let mut map: HashMap<&str, i32> = HashMap::new();\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> HashMap<K, V, RandomState> {\n         Default::default()\n@@ -240,6 +241,7 @@ impl<K, V> HashMap<K, V, RandomState> {\n     /// let mut map: HashMap<&str, i32> = HashMap::with_capacity(10);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize) -> HashMap<K, V, RandomState> {\n         HashMap::with_capacity_and_hasher(capacity, Default::default())\n@@ -2894,6 +2896,7 @@ impl RandomState {\n     #[inline]\n     #[allow(deprecated)]\n     // rand\n+    #[must_use]\n     #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n     pub fn new() -> RandomState {\n         // Historically this function did not cache keys from the OS and instead\n@@ -2946,6 +2949,7 @@ impl DefaultHasher {\n     /// instances created through `new` or `default`.\n     #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n     #[allow(deprecated)]\n+    #[must_use]\n     pub fn new() -> DefaultHasher {\n         DefaultHasher(SipHasher13::new_with_keys(0, 0))\n     }"}, {"sha": "5804701892e6e447641ea8144b1a815c42799648", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -126,6 +126,7 @@ impl<T> HashSet<T, RandomState> {\n     /// let set: HashSet<i32> = HashSet::new();\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> HashSet<T, RandomState> {\n         Default::default()\n@@ -144,6 +145,7 @@ impl<T> HashSet<T, RandomState> {\n     /// assert!(set.capacity() >= 10);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize) -> HashSet<T, RandomState> {\n         HashSet { base: base::HashSet::with_capacity_and_hasher(capacity, Default::default()) }"}, {"sha": "8b51c4450c2aa2ce2c12655ab7b83bc93ba63222", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -426,6 +426,7 @@ impl CString {\n     ///     let c_string = CString::from_vec_unchecked(raw);\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_vec_unchecked(mut v: Vec<u8>) -> CString {\n         v.reserve_exact(1);\n@@ -477,6 +478,7 @@ impl CString {\n     ///     let c_string = CString::from_raw(raw);\n     /// }\n     /// ```\n+    #[must_use = \"call `drop(from_raw(ptr))` if you intend to drop the `CString`\"]\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub unsafe fn from_raw(ptr: *mut c_char) -> CString {\n         // SAFETY: This is called with a pointer that was obtained from a call\n@@ -705,6 +707,7 @@ impl CString {\n     ///     unsafe { CString::from_vec_unchecked(b\"abc\".to_vec()) }\n     /// );\n     /// ```\n+    #[must_use]\n     #[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n     pub unsafe fn from_vec_with_nul_unchecked(v: Vec<u8>) -> Self {\n         Self { inner: v.into_boxed_slice() }\n@@ -1168,6 +1171,7 @@ impl CStr {\n     /// }\n     /// # }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {\n         // SAFETY: The caller has provided a pointer that points to a valid C\n@@ -1250,6 +1254,7 @@ impl CStr {\n     /// }\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n     #[rustc_const_unstable(feature = \"const_cstr_unchecked\", issue = \"none\")]\n     pub const unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {"}, {"sha": "de745f2164962f21101e92b8188816bd5fb23032", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -119,6 +119,7 @@ impl OsString {\n     /// let os_string = OsString::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn new() -> OsString {\n         OsString { inner: Buf::from_string(String::new()) }\n@@ -199,6 +200,7 @@ impl OsString {\n     /// assert_eq!(capacity, os_string.capacity());\n     /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn with_capacity(capacity: usize) -> OsString {\n         OsString { inner: Buf::with_capacity(capacity) }"}, {"sha": "85d350729239cf4af4e56702233a0b98dcd2ab13", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -744,6 +744,7 @@ impl OpenOptions {\n     /// let file = options.read(true).open(\"foo.txt\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new() -> Self {\n         OpenOptions(fs_imp::OpenOptions::new())\n     }\n@@ -2184,6 +2185,7 @@ impl DirBuilder {\n     /// let builder = DirBuilder::new();\n     /// ```\n     #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n+    #[must_use]\n     pub fn new() -> DirBuilder {\n         DirBuilder { inner: fs_imp::DirBuilder::new(), recursive: false }\n     }"}, {"sha": "59a9cd781cb99f32f83fd3f12fe83f9bcad7ef1b", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -473,6 +473,7 @@ impl Error {\n     /// # }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn from_raw_os_error(code: i32) -> Error {\n         Error { repr: Repr::Os(code) }"}, {"sha": "abe29ba0f7caa379c339c2fde186777cfe3d17f2", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -1206,6 +1206,7 @@ impl<'a> IoSlice<'a> {\n     ///\n     /// Panics on Windows if the slice is larger than 4GB.\n     #[stable(feature = \"iovec\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n         IoSlice(sys::io::IoSlice::new(buf))"}, {"sha": "d7450962359df78e42e636aeab324071a85c16b3", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -171,6 +171,7 @@ impl<T: Eq> Eq for SyncOnceCell<T> {}\n impl<T> SyncOnceCell<T> {\n     /// Creates a new empty cell.\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n+    #[must_use]\n     pub const fn new() -> SyncOnceCell<T> {\n         SyncOnceCell {\n             once: Once::new(),"}, {"sha": "cd2007cc2cb42a96a0f7c7e94340f7f31c0b288f", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -131,6 +131,7 @@ impl SocketAddr {\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n+    #[must_use]\n     pub fn new(ip: IpAddr, port: u16) -> SocketAddr {\n         match ip {\n             IpAddr::V4(a) => SocketAddr::V4(SocketAddrV4::new(a, port)),\n@@ -272,6 +273,7 @@ impl SocketAddrV4 {\n     /// let socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new(ip: Ipv4Addr, port: u16) -> SocketAddrV4 {\n         SocketAddrV4 {\n             inner: c::sockaddr_in {\n@@ -368,6 +370,7 @@ impl SocketAddrV6 {\n     /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new(ip: Ipv6Addr, port: u16, flowinfo: u32, scope_id: u32) -> SocketAddrV6 {\n         SocketAddrV6 {\n             inner: c::sockaddr_in6 {"}, {"sha": "99922eef61f105ae7db43bdda84f6522b5101d14", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -442,6 +442,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n         // `s_addr` is stored as BE on all machine and the array is in BE order.\n@@ -1192,6 +1193,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16, g: u16, h: u16) -> Ipv6Addr {\n         let addr16 = ["}, {"sha": "57bb61903c147964c6d74b08ed6ba788e1c075cb", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -189,6 +189,7 @@ impl SocketCred {\n     ///\n     /// PID, UID and GID is set to 0.\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    #[must_use]\n     pub fn new() -> SocketCred {\n         SocketCred(libc::ucred { pid: 0, uid: 0, gid: 0 })\n     }"}, {"sha": "a8a79fb9c8fbb6120c592184d975a699396386b7", "filename": "library/std/src/path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -1146,6 +1146,7 @@ impl PathBuf {\n     /// let path = PathBuf::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn new() -> PathBuf {\n         PathBuf { inner: OsString::new() }\n@@ -1170,6 +1171,7 @@ impl PathBuf {\n     ///\n     /// [`with_capacity`]: OsString::with_capacity\n     #[stable(feature = \"path_buf_capacity\", since = \"1.44.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn with_capacity(capacity: usize) -> PathBuf {\n         PathBuf { inner: OsString::with_capacity(capacity) }"}, {"sha": "0e28a2d166f137e902cc3ac7788909e6f32948bd", "filename": "library/std/src/sync/barrier.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -80,6 +80,7 @@ impl Barrier {\n     /// let barrier = Barrier::new(10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new(n: usize) -> Barrier {\n         Barrier {\n             lock: Mutex::new(BarrierState { count: 0, generation_id: 0 }),"}, {"sha": "d8aca9651b8678726b24244920c2dc574badca15", "filename": "library/std/src/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -121,6 +121,7 @@ impl Condvar {\n     /// let condvar = Condvar::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn new() -> Condvar {\n         Condvar { inner: sys::Condvar::new() }\n     }"}, {"sha": "1710c0053934a76bc26e8b8fe929c5fb94db353e", "filename": "library/std/src/sync/once.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -186,6 +186,7 @@ impl Once {\n     #[inline]\n     #[stable(feature = \"once_new\", since = \"1.2.0\")]\n     #[rustc_const_stable(feature = \"const_once_new\", since = \"1.32.0\")]\n+    #[must_use]\n     pub const fn new() -> Once {\n         Once { state_and_queue: AtomicUsize::new(INCOMPLETE), _marker: marker::PhantomData }\n     }"}, {"sha": "817850b1ec7eb45e97cc32476caeb761f3540fb6", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -460,7 +460,7 @@ def download_toolchain(self, stage0=True, rustc_channel=None):\n             # LLVM more often than necessary.\n             #\n             # This git command finds that commit SHA, looking for bors-authored\n-            # merges that modified src/llvm-project or other relevant version\n+            # commits that modified src/llvm-project or other relevant version\n             # stamp files.\n             #\n             # This works even in a repository that has not yet initialized\n@@ -470,7 +470,7 @@ def download_toolchain(self, stage0=True, rustc_channel=None):\n             ]).decode(sys.getdefaultencoding()).strip()\n             llvm_sha = subprocess.check_output([\n                 \"git\", \"rev-list\", \"--author=bors@rust-lang.org\", \"-n1\",\n-                \"--merges\", \"--first-parent\", \"HEAD\",\n+                \"--first-parent\", \"HEAD\",\n                 \"--\",\n                 \"{}/src/llvm-project\".format(top_level),\n                 \"{}/src/bootstrap/download-ci-llvm-stamp\".format(top_level),\n@@ -540,6 +540,12 @@ def _download_component_helper(\n         unpack(tarball, tarball_suffix, self.bin_root(stage0), match=pattern, verbose=self.verbose)\n \n     def _download_ci_llvm(self, llvm_sha, llvm_assertions):\n+        if not llvm_sha:\n+            print(\"error: could not find commit hash for downloading LLVM\")\n+            print(\"help: maybe your repository history is too shallow?\")\n+            print(\"help: consider disabling `download-ci-llvm`\")\n+            print(\"help: or fetch enough history to include one upstream commit\")\n+            exit(1)\n         cache_prefix = \"llvm-{}-{}\".format(llvm_sha, llvm_assertions)\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n         rustc_cache = os.path.join(cache_dst, cache_prefix)\n@@ -685,9 +691,15 @@ def maybe_download_ci_toolchain(self):\n         # Only commits merged by bors will have CI artifacts.\n         merge_base = [\n             \"git\", \"rev-list\", \"--author=bors@rust-lang.org\", \"-n1\",\n-            \"--merges\", \"--first-parent\", \"HEAD\"\n+            \"--first-parent\", \"HEAD\"\n         ]\n         commit = subprocess.check_output(merge_base, universal_newlines=True).strip()\n+        if not commit:\n+            print(\"error: could not find commit hash for downloading rustc\")\n+            print(\"help: maybe your repository history is too shallow?\")\n+            print(\"help: consider disabling `download-rustc`\")\n+            print(\"help: or fetch enough history to include one upstream commit\")\n+            exit(1)\n \n         # Warn if there were changes to the compiler or standard library since the ancestor commit.\n         status = subprocess.call([\"git\", \"diff-index\", \"--quiet\", commit, \"--\", compiler, library])"}, {"sha": "962af66368d3bfb79db34300f7cab19b90e1c727", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -772,7 +772,7 @@ h2.small-section-header > .anchor {\n .block a.current.crate { font-weight: 500; }\n \n .item-table {\n-\tdisplay: table-row;\n+\tdisplay: table;\n }\n .item-row {\n \tdisplay: table-row;"}, {"sha": "39fbf3c9eb4e29ac6c3cdbec5b8a2f16f3c62946", "filename": "src/test/ui/weak-new-uninhabited-issue-48493.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Ftest%2Fui%2Fweak-new-uninhabited-issue-48493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067e2ca5e9cfe5c79f956e49ffc684c5142d49b/src%2Ftest%2Fui%2Fweak-new-uninhabited-issue-48493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fweak-new-uninhabited-issue-48493.rs?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     enum Void {}\n-    std::rc::Weak::<Void>::new();\n-    std::sync::Weak::<Void>::new();\n+    let _ = std::rc::Weak::<Void>::new();\n+    let _ = std::sync::Weak::<Void>::new();\n }"}, {"sha": "ed4b312fa777ebb39ba1348fe3df574c441a485e", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=1067e2ca5e9cfe5c79f956e49ffc684c5142d49b", "patch": "@@ -1 +1 @@\n-Subproject commit 4b7675fcc30d3e2c05eafc68a5724db66b58142c\n+Subproject commit ed4b312fa777ebb39ba1348fe3df574c441a485e"}]}