{"sha": "7f54cf26511b2716d35e2f2198bbff9da5a33123", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNTRjZjI2NTExYjI3MTZkMzVlMmYyMTk4YmJmZjlkYTVhMzMxMjM=", "commit": {"author": {"name": "Ximin Luo", "email": "infinity0@pwned.gg", "date": "2020-07-31T11:58:37Z"}, "committer": {"name": "Ximin Luo", "email": "infinity0@pwned.gg", "date": "2020-07-31T11:58:37Z"}, "message": "compiletest: ignore-endian-big, fixes #74829, fixes #74885", "tree": {"sha": "62e63b983ab32aa09aae73b369703ca874ee841d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62e63b983ab32aa09aae73b369703ca874ee841d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f54cf26511b2716d35e2f2198bbff9da5a33123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f54cf26511b2716d35e2f2198bbff9da5a33123", "html_url": "https://github.com/rust-lang/rust/commit/7f54cf26511b2716d35e2f2198bbff9da5a33123", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f54cf26511b2716d35e2f2198bbff9da5a33123/comments", "author": {"login": "infinity0", "id": 78398, "node_id": "MDQ6VXNlcjc4Mzk4", "avatar_url": "https://avatars.githubusercontent.com/u/78398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/infinity0", "html_url": "https://github.com/infinity0", "followers_url": "https://api.github.com/users/infinity0/followers", "following_url": "https://api.github.com/users/infinity0/following{/other_user}", "gists_url": "https://api.github.com/users/infinity0/gists{/gist_id}", "starred_url": "https://api.github.com/users/infinity0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/infinity0/subscriptions", "organizations_url": "https://api.github.com/users/infinity0/orgs", "repos_url": "https://api.github.com/users/infinity0/repos", "events_url": "https://api.github.com/users/infinity0/events{/privacy}", "received_events_url": "https://api.github.com/users/infinity0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "infinity0", "id": 78398, "node_id": "MDQ6VXNlcjc4Mzk4", "avatar_url": "https://avatars.githubusercontent.com/u/78398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/infinity0", "html_url": "https://github.com/infinity0", "followers_url": "https://api.github.com/users/infinity0/followers", "following_url": "https://api.github.com/users/infinity0/following{/other_user}", "gists_url": "https://api.github.com/users/infinity0/gists{/gist_id}", "starred_url": "https://api.github.com/users/infinity0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/infinity0/subscriptions", "organizations_url": "https://api.github.com/users/infinity0/orgs", "repos_url": "https://api.github.com/users/infinity0/repos", "events_url": "https://api.github.com/users/infinity0/events{/privacy}", "received_events_url": "https://api.github.com/users/infinity0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a92b9987abd01c4b7e59c870e85beb9dd4d4aa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a92b9987abd01c4b7e59c870e85beb9dd4d4aa2", "html_url": "https://github.com/rust-lang/rust/commit/3a92b9987abd01c4b7e59c870e85beb9dd4d4aa2"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "9c30e0400312adc9889242428cc402a1394a421f", "filename": "src/test/mir-opt/const-promotion-extern-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs?ref=7f54cf26511b2716d35e2f2198bbff9da5a33123", "patch": "@@ -1,7 +1,7 @@\n+// ignore-endian-big\n extern \"C\" {\n     static X: i32;\n }\n-\n static Y: i32 = 42;\n \n // EMIT_MIR const_promotion_extern_static.BAR.PromoteTemps.diff"}, {"sha": "b0fcb86fcee0f25f6567ca42849cc90844f1929d", "filename": "src/test/mir-opt/const_allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftest%2Fmir-opt%2Fconst_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftest%2Fmir-opt%2Fconst_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.rs?ref=7f54cf26511b2716d35e2f2198bbff9da5a33123", "patch": "@@ -1,5 +1,5 @@\n+// ignore-endian-big\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n-\n static FOO: &[(Option<i32>, &[&str])] =\n     &[(None, &[]), (None, &[\"foo\", \"bar\"]), (Some(42), &[\"meh\", \"mop\", \"m\u00f6p\"])];\n "}, {"sha": "30afedffb39b3d817b0124701c56f8ede105c5a6", "filename": "src/test/mir-opt/const_allocation2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftest%2Fmir-opt%2Fconst_allocation2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftest%2Fmir-opt%2Fconst_allocation2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.rs?ref=7f54cf26511b2716d35e2f2198bbff9da5a33123", "patch": "@@ -1,5 +1,5 @@\n+// ignore-endian-big\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n-\n // EMIT_MIR const_allocation2.main.ConstProp.after.mir\n fn main() {\n     FOO;"}, {"sha": "ddeb32ab9a583132579c132fcb1238bd97de3504", "filename": "src/test/mir-opt/const_allocation3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftest%2Fmir-opt%2Fconst_allocation3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftest%2Fmir-opt%2Fconst_allocation3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.rs?ref=7f54cf26511b2716d35e2f2198bbff9da5a33123", "patch": "@@ -1,5 +1,5 @@\n+// ignore-endian-big\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n-\n // EMIT_MIR const_allocation3.main.ConstProp.after.mir\n fn main() {\n     FOO;"}, {"sha": "57298605b18737546c5e7ee7ea3800d54a10ee3d", "filename": "src/test/mir-opt/inline/inline-into-box-place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs?ref=7f54cf26511b2716d35e2f2198bbff9da5a33123", "patch": "@@ -1,8 +1,8 @@\n+// ignore-endian-big\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -Z mir-opt-level=3\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n #![feature(box_syntax)]\n-\n // EMIT_MIR inline_into_box_place.main.Inline.diff\n fn main() {\n     let _x: Box<Vec<u32>> = box Vec::new();"}, {"sha": "8c436841b44e8622be2aebda7f457ab458bdeaba", "filename": "src/test/ui/simd/simd-intrinsic-generic-bitmask.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-bitmask.rs?ref=7f54cf26511b2716d35e2f2198bbff9da5a33123", "patch": "@@ -2,6 +2,7 @@\n #![allow(non_camel_case_types)]\n \n // ignore-emscripten\n+// ignore-endian-big behavior of simd_bitmask is endian-specific\n \n // Test that the simd_bitmask intrinsic produces correct results.\n "}, {"sha": "dc9ec5d2760fe02e2e32d0c6e69556b5f004ec7a", "filename": "src/test/ui/simd/simd-intrinsic-generic-select.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-select.rs?ref=7f54cf26511b2716d35e2f2198bbff9da5a33123", "patch": "@@ -2,10 +2,7 @@\n #![allow(non_camel_case_types)]\n \n // ignore-emscripten\n-// ignore-mips       behavior of simd_select_bitmask is endian-specific\n-// ignore-mips64     behavior of simd_select_bitmask is endian-specific\n-// ignore-powerpc    behavior of simd_select_bitmask is endian-specific\n-// ignore-powerpc64  behavior of simd_select_bitmask is endian-specific\n+// ignore-endian-big behavior of simd_select_bitmask is endian-specific\n \n // Test that the simd_select intrinsics produces correct results.\n "}, {"sha": "99ab31ca067c316d4a106f727c23d6b575e83cb3", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=7f54cf26511b2716d35e2f2198bbff9da5a33123", "patch": "@@ -815,6 +815,7 @@ impl Config {\n             name == util::get_pointer_width(&self.target) ||    // pointer width\n             name == self.stage_id.split('-').next().unwrap() || // stage\n             (self.target != self.host && name == \"cross-compile\") ||\n+            (name == \"endian-big\" && util::is_big_endian(&self.target)) ||\n             (self.remote_test_client.is_some() && name == \"remote\") ||\n             match self.compare_mode {\n                 Some(CompareMode::Nll) => name == \"compare-mode-nll\","}, {"sha": "ddd7941b11469d973f70c7201c6f2d62a7659b41", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f54cf26511b2716d35e2f2198bbff9da5a33123/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=7f54cf26511b2716d35e2f2198bbff9da5a33123", "patch": "@@ -99,6 +99,20 @@ pub const MSAN_SUPPORTED_TARGETS: &'static [&'static str] =\n pub const TSAN_SUPPORTED_TARGETS: &'static [&'static str] =\n     &[\"aarch64-unknown-linux-gnu\", \"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n \n+const BIG_ENDIAN: &'static [&'static str] = &[\n+    \"armebv7r\",\n+    \"mips\",\n+    \"mips64\",\n+    \"mipsisa32r6\",\n+    \"mipsisa64r6\",\n+    \"powerpc\",\n+    \"powerpc64\",\n+    \"s390x\",\n+    \"sparc\",\n+    \"sparc64\",\n+    \"sparcv9\",\n+];\n+\n pub fn matches_os(triple: &str, name: &str) -> bool {\n     // For the wasm32 bare target we ignore anything also ignored on emscripten\n     // and then we also recognize `wasm32-bare` as the os for the target\n@@ -125,6 +139,12 @@ pub fn get_arch(triple: &str) -> &'static str {\n     panic!(\"Cannot determine Architecture from triple\");\n }\n \n+/// Determine the endianness from `triple`\n+pub fn is_big_endian(triple: &str) -> bool {\n+    let triple_arch = triple.split('-').next().unwrap();\n+    BIG_ENDIAN.contains(&triple_arch)\n+}\n+\n pub fn matches_env(triple: &str, name: &str) -> bool {\n     if let Some(env) = triple.split('-').nth(3) { env.starts_with(name) } else { false }\n }"}]}