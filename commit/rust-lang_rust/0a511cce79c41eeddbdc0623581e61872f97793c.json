{"sha": "0a511cce79c41eeddbdc0623581e61872f97793c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNTExY2NlNzljNDFlZWRkYmRjMDYyMzU4MWU2MTg3MmY5Nzc5M2M=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-21T06:57:34Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-21T06:57:34Z"}, "message": "revert the NodeId to HirId parameter change to get_path_res", "tree": {"sha": "68e9170e3475f082918bb4bd48669e10964e0ed7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68e9170e3475f082918bb4bd48669e10964e0ed7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a511cce79c41eeddbdc0623581e61872f97793c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a511cce79c41eeddbdc0623581e61872f97793c", "html_url": "https://github.com/rust-lang/rust/commit/0a511cce79c41eeddbdc0623581e61872f97793c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a511cce79c41eeddbdc0623581e61872f97793c/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73cb9ab5261813309b41e21cacfc44d2b61fe396", "url": "https://api.github.com/repos/rust-lang/rust/commits/73cb9ab5261813309b41e21cacfc44d2b61fe396", "html_url": "https://github.com/rust-lang/rust/commit/73cb9ab5261813309b41e21cacfc44d2b61fe396"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "f67241ef23efcbf6d6ca4d5246c62869c0d52d06", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a511cce79c41eeddbdc0623581e61872f97793c/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a511cce79c41eeddbdc0623581e61872f97793c/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=0a511cce79c41eeddbdc0623581e61872f97793c", "patch": "@@ -233,8 +233,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     }\n \n     fn lookup_def_id(&self, ref_id: NodeId) -> Option<DefId> {\n-        let hir_id = self.save_ctxt.tcx.hir().node_to_hir_id(ref_id);\n-        match self.save_ctxt.get_path_res(hir_id) {\n+        match self.save_ctxt.get_path_res(ref_id) {\n             Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => None,\n             def => Some(def.def_id()),\n         }\n@@ -887,8 +886,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                         return;\n                     }\n                 };\n-                let hir_id = self.save_ctxt.tcx.hir().node_to_hir_id(p.id);\n-                let variant = adt.variant_of_res(self.save_ctxt.get_path_res(hir_id));\n+                let variant = adt.variant_of_res(self.save_ctxt.get_path_res(p.id));\n \n                 for &Spanned { node: ref field, .. } in fields {\n                     if let Some(index) = self.tcx.find_field_index(field.ident, variant) {\n@@ -918,8 +916,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n         // process collected paths\n         for (id, ident, immut) in collector.collected_idents {\n-            let hir_id = self.save_ctxt.tcx.hir().node_to_hir_id(id);\n-            match self.save_ctxt.get_path_res(hir_id) {\n+            match self.save_ctxt.get_path_res(id) {\n                 Res::Local(hir_id) => {\n                     let mut value = if immut == ast::Mutability::Immutable {\n                         self.span.snippet(ident.span)\n@@ -1543,7 +1540,8 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, '\n                         return;\n                     }\n                 };\n-                let res = self.save_ctxt.get_path_res(hir_expr.hir_id);\n+                let node_id = self.save_ctxt.tcx.hir().hir_to_node_id(hir_expr.hir_id);\n+                let res = self.save_ctxt.get_path_res(node_id);\n                 self.process_struct_lit(ex, path, fields, adt.variant_of_res(res), base)\n             }\n             ast::ExprKind::MethodCall(ref seg, ref args) => self.process_method_call(ex, seg, args),"}, {"sha": "23fe150c6ff6515f2431cce37dc89c01e99a04b3", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a511cce79c41eeddbdc0623581e61872f97793c/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a511cce79c41eeddbdc0623581e61872f97793c/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=0a511cce79c41eeddbdc0623581e61872f97793c", "patch": "@@ -606,7 +606,8 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         }\n     }\n \n-    pub fn get_path_res(&self, hir_id: hir::HirId) -> Res {\n+    pub fn get_path_res(&self, id: NodeId) -> Res {\n+        let hir_id = self.tcx.hir().node_to_hir_id(id);\n         match self.tcx.hir().get(hir_id) {\n             Node::TraitRef(tr) => tr.path.res,\n \n@@ -620,7 +621,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             Node::PathSegment(seg) => {\n                 match seg.res {\n                     Some(res) if res != Res::Err => res,\n-                    _ => self.get_path_res(self.tcx.hir().get_parent_node_by_hir_id(hir_id)),\n+                    _ => self.get_path_res(self.tcx.hir().get_parent_node(id)),\n                 }\n             }\n \n@@ -695,8 +696,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             return None;\n         }\n \n-        let hir_id = self.tcx.hir().node_to_hir_id(id);\n-        let res = self.get_path_res(hir_id);\n+        let res = self.get_path_res(id);\n         let span = path_seg.ident.span;\n         filter!(self.span_utils, span);\n         let span = self.span_from_span(span);\n@@ -868,8 +868,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n     }\n \n     fn lookup_ref_id(&self, ref_id: NodeId) -> Option<DefId> {\n-        let hir_id = self.tcx.hir().node_to_hir_id(ref_id);\n-        match self.get_path_res(hir_id) {\n+        match self.get_path_res(ref_id) {\n             Res::PrimTy(_) | Res::SelfTy(..) | Res::Err => None,\n             def => Some(def.def_id()),\n         }"}, {"sha": "db8b5eacd94d9321f2f7e7b9b1175f927590e693", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a511cce79c41eeddbdc0623581e61872f97793c/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a511cce79c41eeddbdc0623581e61872f97793c/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=0a511cce79c41eeddbdc0623581e61872f97793c", "patch": "@@ -273,8 +273,7 @@ impl Sig for ast::Ty {\n                 };\n \n                 let name = pprust::path_segment_to_string(path.segments.last().ok_or(\"Bad path\")?);\n-                let hir_id = id.map(|node_id| scx.tcx.hir().node_to_hir_id(node_id));\n-                let res = scx.get_path_res(hir_id.ok_or(\"Missing id for Path\")?);\n+                let res = scx.get_path_res(id.ok_or(\"Missing id for Path\")?);\n                 let id = id_from_def_id(res.def_id());\n                 if path.segments.len() - qself.position == 1 {\n                     let start = offset + prefix.len();\n@@ -577,8 +576,7 @@ impl Sig for ast::Item {\n \n impl Sig for ast::Path {\n     fn make(&self, offset: usize, id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n-        let hir_id = id.map(|node_id| scx.tcx.hir().node_to_hir_id(node_id));\n-        let res = scx.get_path_res(hir_id.ok_or(\"Missing id for Path\")?);\n+        let res = scx.get_path_res(id.ok_or(\"Missing id for Path\")?);\n \n         let (name, start, end) = match res {\n             Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => {"}]}