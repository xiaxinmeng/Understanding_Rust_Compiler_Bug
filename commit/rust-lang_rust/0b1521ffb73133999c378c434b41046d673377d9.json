{"sha": "0b1521ffb73133999c378c434b41046d673377d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMTUyMWZmYjczMTMzOTk5YzM3OGM0MzRiNDEwNDZkNjczMzc3ZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-26T20:29:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-26T20:29:40Z"}, "message": "Auto merge of #64816 - Centril:rollup-gbeqot4, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #64221 ( Rust 2015: No longer downgrade NLL errors)\n - #64772 (Remove tx_to_llvm_workers from TyCtxt)\n - #64783 (Fix issue #64732)\n - #64787 (Fix ExitStatus on Fuchsia)\n - #64812 (Add test for E0543)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "289b56c1155de194c5ad4a4e529cc6b0514d77cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289b56c1155de194c5ad4a4e529cc6b0514d77cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b1521ffb73133999c378c434b41046d673377d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1521ffb73133999c378c434b41046d673377d9", "html_url": "https://github.com/rust-lang/rust/commit/0b1521ffb73133999c378c434b41046d673377d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b1521ffb73133999c378c434b41046d673377d9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddf43867a9cbb3766b48552632a602498fae2699", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf43867a9cbb3766b48552632a602498fae2699", "html_url": "https://github.com/rust-lang/rust/commit/ddf43867a9cbb3766b48552632a602498fae2699"}, {"sha": "02a8505f8652fd1db41f7b98e7a341df79e6e0b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/02a8505f8652fd1db41f7b98e7a341df79e6e0b6", "html_url": "https://github.com/rust-lang/rust/commit/02a8505f8652fd1db41f7b98e7a341df79e6e0b6"}], "stats": {"total": 2370, "additions": 367, "deletions": 2003}, "files": [{"sha": "0d369aaa8789155e041d36c51b59c0c97157627c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -64,7 +64,6 @@ use std::fmt;\n use std::mem;\n use std::ops::{Deref, Bound};\n use std::iter;\n-use std::sync::mpsc;\n use std::sync::Arc;\n use rustc_target::spec::abi;\n use rustc_macros::HashStable;\n@@ -1064,14 +1063,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     layout_interner: ShardedHashMap<&'tcx LayoutDetails, ()>,\n \n-    /// A general purpose channel to throw data out the back towards LLVM worker\n-    /// threads.\n-    ///\n-    /// This is intended to only get used during the codegen phase of the compiler\n-    /// when satisfying the query for a particular codegen unit. Internally in\n-    /// the query it'll send data along this channel to get processed later.\n-    pub tx_to_llvm_workers: Lock<mpsc::Sender<Box<dyn Any + Send>>>,\n-\n     output_filenames: Arc<OutputFilenames>,\n }\n \n@@ -1184,7 +1175,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         hir: hir_map::Map<'tcx>,\n         on_disk_query_result_cache: query::OnDiskCache<'tcx>,\n         crate_name: &str,\n-        tx: mpsc::Sender<Box<dyn Any + Send>>,\n         output_filenames: &OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = TargetDataLayout::parse(&s.target.target).unwrap_or_else(|err| {\n@@ -1291,7 +1281,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             stability_interner: Default::default(),\n             allocation_interner: Default::default(),\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n-            tx_to_llvm_workers: Lock::new(tx),\n             output_filenames: Arc::new(output_filenames.clone()),\n         }\n     }"}, {"sha": "5758cdbebf7d71e4574dc689554b05bca7a6eec6", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -103,7 +103,11 @@ pub fn iter_globals(llmod: &'ll llvm::Module) -> ValueIter<'ll> {\n     }\n }\n \n-pub fn compile_codegen_unit(tcx: TyCtxt<'tcx>, cgu_name: InternedString) {\n+pub fn compile_codegen_unit(\n+    tcx: TyCtxt<'tcx>,\n+    cgu_name: InternedString,\n+    tx_to_llvm_workers: &std::sync::mpsc::Sender<Box<dyn std::any::Any + Send>>,\n+) {\n     let start_time = Instant::now();\n \n     let dep_node = tcx.codegen_unit(cgu_name).codegen_dep_node(tcx);\n@@ -121,7 +125,7 @@ pub fn compile_codegen_unit(tcx: TyCtxt<'tcx>, cgu_name: InternedString) {\n     let cost = time_to_codegen.as_secs() * 1_000_000_000 +\n                time_to_codegen.subsec_nanos() as u64;\n \n-    submit_codegened_module_to_llvm(&LlvmCodegenBackend(()), tcx, module, cost);\n+    submit_codegened_module_to_llvm(&LlvmCodegenBackend(()), tx_to_llvm_workers, module, cost);\n \n     fn module_codegen(\n         tcx: TyCtxt<'_>,"}, {"sha": "2a63011c2f54525ff433f10c36648347a088a82d", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -52,7 +52,7 @@ use syntax::ext::allocator::AllocatorKind;\n use syntax_pos::symbol::InternedString;\n pub use llvm_util::target_features;\n use std::any::Any;\n-use std::sync::{mpsc, Arc};\n+use std::sync::Arc;\n use std::ffi::CStr;\n \n use rustc::dep_graph::DepGraph;\n@@ -122,8 +122,12 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     ) {\n         unsafe { allocator::codegen(tcx, mods, kind) }\n     }\n-    fn compile_codegen_unit(&self, tcx: TyCtxt<'_>, cgu_name: InternedString) {\n-        base::compile_codegen_unit(tcx, cgu_name);\n+    fn compile_codegen_unit(\n+        &self, tcx: TyCtxt<'_>,\n+        cgu_name: InternedString,\n+        tx: &std::sync::mpsc::Sender<Box<dyn Any + Send>>,\n+    ) {\n+        base::compile_codegen_unit(tcx, cgu_name, tx);\n     }\n     fn target_machine_factory(\n         &self,\n@@ -284,10 +288,9 @@ impl CodegenBackend for LlvmCodegenBackend {\n         tcx: TyCtxt<'tcx>,\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n-        rx: mpsc::Receiver<Box<dyn Any + Send>>,\n     ) -> Box<dyn Any> {\n         box rustc_codegen_ssa::base::codegen_crate(\n-            LlvmCodegenBackend(()), tcx, metadata, need_metadata_module, rx)\n+            LlvmCodegenBackend(()), tcx, metadata, need_metadata_module)\n     }\n \n     fn join_codegen_and_link("}, {"sha": "3c5fbfd0f866f63d018d1b4130c057ccd6eb6d4d", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -376,9 +376,9 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     backend: B,\n     tcx: TyCtxt<'_>,\n     metadata: EncodedMetadata,\n-    coordinator_receive: Receiver<Box<dyn Any + Send>>,\n     total_cgus: usize,\n ) -> OngoingCodegen<B> {\n+    let (coordinator_send, coordinator_receive) = channel();\n     let sess = tcx.sess;\n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n     let crate_hash = tcx.crate_hash(LOCAL_CRATE);\n@@ -500,7 +500,8 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n                                                   sess.jobserver.clone(),\n                                                   Arc::new(modules_config),\n                                                   Arc::new(metadata_config),\n-                                                  Arc::new(allocator_config));\n+                                                  Arc::new(allocator_config),\n+                                                  coordinator_send.clone());\n \n     OngoingCodegen {\n         backend,\n@@ -511,7 +512,7 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n         linker_info,\n         crate_info,\n \n-        coordinator_send: tcx.tx_to_llvm_workers.lock().clone(),\n+        coordinator_send,\n         codegen_worker_receive,\n         shared_emitter_main,\n         future: coordinator_thread,\n@@ -1005,8 +1006,9 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     modules_config: Arc<ModuleConfig>,\n     metadata_config: Arc<ModuleConfig>,\n     allocator_config: Arc<ModuleConfig>,\n+    tx_to_llvm_workers: Sender<Box<dyn Any + Send>>,\n ) -> thread::JoinHandle<Result<CompiledModules, ()>> {\n-    let coordinator_send = tcx.tx_to_llvm_workers.lock().clone();\n+    let coordinator_send = tx_to_llvm_workers;\n     let sess = tcx.sess;\n \n     // Compute the set of symbols we need to retain when doing LTO (if we need to)\n@@ -1857,7 +1859,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n \n         // These are generally cheap and won't throw off scheduling.\n         let cost = 0;\n-        submit_codegened_module_to_llvm(&self.backend, tcx, module, cost);\n+        submit_codegened_module_to_llvm(&self.backend, &self.coordinator_send, module, cost);\n     }\n \n     pub fn codegen_finished(&self, tcx: TyCtxt<'_>) {\n@@ -1899,24 +1901,24 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n \n pub fn submit_codegened_module_to_llvm<B: ExtraBackendMethods>(\n     _backend: &B,\n-    tcx: TyCtxt<'_>,\n+    tx_to_llvm_workers: &Sender<Box<dyn Any + Send>>,\n     module: ModuleCodegen<B::Module>,\n     cost: u64,\n ) {\n     let llvm_work_item = WorkItem::Optimize(module);\n-    drop(tcx.tx_to_llvm_workers.lock().send(Box::new(Message::CodegenDone::<B> {\n+    drop(tx_to_llvm_workers.send(Box::new(Message::CodegenDone::<B> {\n         llvm_work_item,\n         cost,\n     })));\n }\n \n pub fn submit_post_lto_module_to_llvm<B: ExtraBackendMethods>(\n     _backend: &B,\n-    tcx: TyCtxt<'_>,\n+    tx_to_llvm_workers: &Sender<Box<dyn Any + Send>>,\n     module: CachedModuleCodegen,\n ) {\n     let llvm_work_item = WorkItem::CopyPostLtoArtifacts(module);\n-    drop(tcx.tx_to_llvm_workers.lock().send(Box::new(Message::CodegenDone::<B> {\n+    drop(tx_to_llvm_workers.send(Box::new(Message::CodegenDone::<B> {\n         llvm_work_item,\n         cost: 0,\n     })));\n@@ -1925,6 +1927,7 @@ pub fn submit_post_lto_module_to_llvm<B: ExtraBackendMethods>(\n pub fn submit_pre_lto_module_to_llvm<B: ExtraBackendMethods>(\n     _backend: &B,\n     tcx: TyCtxt<'_>,\n+    tx_to_llvm_workers: &Sender<Box<dyn Any + Send>>,\n     module: CachedModuleCodegen,\n ) {\n     let filename = pre_lto_bitcode_filename(&module.name);\n@@ -1939,7 +1942,7 @@ pub fn submit_pre_lto_module_to_llvm<B: ExtraBackendMethods>(\n         })\n     };\n     // Schedule the module to be loaded\n-    drop(tcx.tx_to_llvm_workers.lock().send(Box::new(Message::AddImportOnlyModule::<B> {\n+    drop(tx_to_llvm_workers.send(Box::new(Message::AddImportOnlyModule::<B> {\n         module_data: SerializedModule::FromUncompressedFile(mmap),\n         work_product: module.source,\n     })));"}, {"sha": "90ed629bbc61e5fffb31d18e95d129fda036f782", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -43,11 +43,9 @@ use crate::mir;\n \n use crate::traits::*;\n \n-use std::any::Any;\n use std::cmp;\n use std::ops::{Deref, DerefMut};\n use std::time::{Instant, Duration};\n-use std::sync::mpsc;\n use syntax_pos::Span;\n use syntax::attr;\n use rustc::hir;\n@@ -482,19 +480,13 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     tcx: TyCtxt<'tcx>,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n-    rx: mpsc::Receiver<Box<dyn Any + Send>>,\n ) -> OngoingCodegen<B> {\n     check_for_rustc_errors_attr(tcx);\n \n     // Skip crate items and just output metadata in -Z no-codegen mode.\n     if tcx.sess.opts.debugging_opts.no_codegen ||\n        !tcx.sess.opts.output_types.should_codegen() {\n-        let ongoing_codegen = start_async_codegen(\n-            backend,\n-            tcx,\n-            metadata,\n-            rx,\n-            1);\n+        let ongoing_codegen = start_async_codegen(backend, tcx, metadata, 1);\n \n         ongoing_codegen.codegen_finished(tcx);\n \n@@ -523,12 +515,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         }\n     }\n \n-    let ongoing_codegen = start_async_codegen(\n-        backend.clone(),\n-        tcx,\n-        metadata,\n-        rx,\n-        codegen_units.len());\n+    let ongoing_codegen = start_async_codegen(backend.clone(), tcx, metadata, codegen_units.len());\n     let ongoing_codegen = AbortCodegenOnDrop::<B>(Some(ongoing_codegen));\n \n     // Codegen an allocator shim, if necessary.\n@@ -614,20 +601,22 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n             CguReuse::No => {\n                 tcx.sess.profiler(|p| p.start_activity(format!(\"codegen {}\", cgu.name())));\n                 let start_time = Instant::now();\n-                backend.compile_codegen_unit(tcx, *cgu.name());\n+                backend.compile_codegen_unit(tcx, *cgu.name(), &ongoing_codegen.coordinator_send);\n                 total_codegen_time += start_time.elapsed();\n                 tcx.sess.profiler(|p| p.end_activity(format!(\"codegen {}\", cgu.name())));\n                 false\n             }\n             CguReuse::PreLto => {\n-                submit_pre_lto_module_to_llvm(&backend, tcx, CachedModuleCodegen {\n+                submit_pre_lto_module_to_llvm(&backend, tcx, &ongoing_codegen.coordinator_send,\n+                CachedModuleCodegen {\n                     name: cgu.name().to_string(),\n                     source: cgu.work_product(tcx),\n                 });\n                 true\n             }\n             CguReuse::PostLto => {\n-                submit_post_lto_module_to_llvm(&backend, tcx, CachedModuleCodegen {\n+                submit_post_lto_module_to_llvm(&backend, &ongoing_codegen.coordinator_send,\n+                CachedModuleCodegen {\n                     name: cgu.name().to_string(),\n                     source: cgu.work_product(tcx),\n                 });"}, {"sha": "cb197f51460a1901c66efce9e2d15d47863fcb22", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -8,6 +8,7 @@ use rustc::session::{Session, config};\n use rustc::ty::TyCtxt;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use std::sync::Arc;\n+use std::sync::mpsc;\n use syntax::ext::allocator::AllocatorKind;\n use syntax_pos::symbol::InternedString;\n \n@@ -44,7 +45,12 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         mods: &mut Self::Module,\n         kind: AllocatorKind,\n     );\n-    fn compile_codegen_unit(&self, tcx: TyCtxt<'_>, cgu_name: InternedString);\n+    fn compile_codegen_unit(\n+        &self,\n+        tcx: TyCtxt<'_>,\n+        cgu_name: InternedString,\n+        tx_to_llvm_workers: &mpsc::Sender<Box<dyn std::any::Any + Send>>,\n+    );\n     // If find_features is true this won't access `sess.crate_types` by assuming\n     // that `is_pie_binary` is false. When we discover LLVM target features\n     // `sess.crate_types` is uninitialized so we cannot access it."}, {"sha": "2e3af8431eed0d7f4ddc730b3b82b805531a8c8a", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -7,7 +7,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n use std::any::Any;\n-use std::sync::mpsc;\n \n use syntax::symbol::Symbol;\n use rustc::session::Session;\n@@ -36,7 +35,6 @@ pub trait CodegenBackend {\n         tcx: TyCtxt<'tcx>,\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n-        rx: mpsc::Receiver<Box<dyn Any + Send>>,\n     ) -> Box<dyn Any>;\n \n     /// This is called on the returned `Box<dyn Any>` from `codegen_backend`"}, {"sha": "6abc6e32d243be27f6800f3a054081ea9cbdb5f3", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -54,7 +54,6 @@ use std::fs;\n use std::io::{self, Write};\n use std::iter;\n use std::path::PathBuf;\n-use std::sync::mpsc;\n use std::cell::RefCell;\n use std::rc::Rc;\n \n@@ -816,7 +815,6 @@ pub fn create_global_ctxt(\n     defs: hir::map::Definitions,\n     resolutions: Resolutions,\n     outputs: OutputFilenames,\n-    tx: mpsc::Sender<Box<dyn Any + Send>>,\n     crate_name: &str,\n ) -> BoxedGlobalCtxt {\n     let sess = compiler.session().clone();\n@@ -858,7 +856,6 @@ pub fn create_global_ctxt(\n             hir_map,\n             query_result_on_disk_cache,\n             &crate_name,\n-            tx,\n             &outputs\n         );\n \n@@ -1068,7 +1065,6 @@ fn encode_and_write_metadata(\n pub fn start_codegen<'tcx>(\n     codegen_backend: &dyn CodegenBackend,\n     tcx: TyCtxt<'tcx>,\n-    rx: mpsc::Receiver<Box<dyn Any + Send>>,\n     outputs: &OutputFilenames,\n ) -> Box<dyn Any> {\n     if log_enabled!(::log::Level::Info) {\n@@ -1082,7 +1078,7 @@ pub fn start_codegen<'tcx>(\n \n     tcx.sess.profiler(|p| p.start_activity(\"codegen crate\"));\n     let codegen = time(tcx.sess, \"codegen\", move || {\n-        codegen_backend.codegen_crate(tcx, metadata, need_metadata_module, rx)\n+        codegen_backend.codegen_crate(tcx, metadata, need_metadata_module)\n     });\n     tcx.sess.profiler(|p| p.end_activity(\"codegen crate\"));\n "}, {"sha": "cd72dc9453c7e54c3ec99cdc11570001f2f18837", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -10,7 +10,6 @@ use rustc::ty::steal::Steal;\n use rustc::dep_graph::DepGraph;\n use std::cell::{Ref, RefMut, RefCell};\n use std::rc::Rc;\n-use std::sync::mpsc;\n use std::any::Any;\n use std::mem;\n use syntax::{self, ast};\n@@ -80,8 +79,6 @@ pub(crate) struct Queries {\n     dep_graph: Query<DepGraph>,\n     lower_to_hir: Query<(Steal<hir::map::Forest>, ExpansionResult)>,\n     prepare_outputs: Query<OutputFilenames>,\n-    codegen_channel: Query<(Steal<mpsc::Sender<Box<dyn Any + Send>>>,\n-                            Steal<mpsc::Receiver<Box<dyn Any + Send>>>)>,\n     global_ctxt: Query<BoxedGlobalCtxt>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n     link: Query<()>,\n@@ -211,36 +208,25 @@ impl Compiler {\n         })\n     }\n \n-    pub fn codegen_channel(&self) -> Result<&Query<(Steal<mpsc::Sender<Box<dyn Any + Send>>>,\n-                                                    Steal<mpsc::Receiver<Box<dyn Any + Send>>>)>> {\n-        self.queries.codegen_channel.compute(|| {\n-            let (tx, rx) = mpsc::channel();\n-            Ok((Steal::new(tx), Steal::new(rx)))\n-        })\n-    }\n-\n     pub fn global_ctxt(&self) -> Result<&Query<BoxedGlobalCtxt>> {\n         self.queries.global_ctxt.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let outputs = self.prepare_outputs()?.peek().clone();\n             let hir = self.lower_to_hir()?;\n             let hir = hir.peek();\n             let (ref hir_forest, ref expansion) = *hir;\n-            let tx = self.codegen_channel()?.peek().0.steal();\n             Ok(passes::create_global_ctxt(\n                 self,\n                 hir_forest.steal(),\n                 expansion.defs.steal(),\n                 expansion.resolutions.steal(),\n                 outputs,\n-                tx,\n                 &crate_name))\n         })\n     }\n \n     pub fn ongoing_codegen(&self) -> Result<&Query<Box<dyn Any>>> {\n         self.queries.ongoing_codegen.compute(|| {\n-            let rx = self.codegen_channel()?.peek().1.steal();\n             let outputs = self.prepare_outputs()?;\n             self.global_ctxt()?.peek_mut().enter(|tcx| {\n                 tcx.analysis(LOCAL_CRATE).ok();\n@@ -251,7 +237,6 @@ impl Compiler {\n                 Ok(passes::start_codegen(\n                     &***self.codegen_backend(),\n                     tcx,\n-                    rx,\n                     &*outputs.peek()\n                 ))\n             })"}, {"sha": "87b99ee47641b797db359614a5977ad2f00ca0ab", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -105,9 +105,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 format!(\"{} occurs due to use{}\", desired_action.as_noun(), use_spans.describe()),\n             );\n \n-            // This error should not be downgraded to a warning,\n-            // even in migrate mode.\n-            self.disable_error_downgrading();\n             err.buffer(&mut self.errors_buffer);\n         } else {\n             if let Some((reported_place, _)) = self.move_error_reported.get(&move_out_indices) {"}, {"sha": "5f18d4d774dc09316310b008d460b7a0d66d0c41", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 57, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -7,7 +7,6 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::lint::builtin::UNUSED_MUT;\n use rustc::lint::builtin::{MUTABLE_BORROW_RESERVATION_CONFLICT};\n-use rustc::middle::borrowck::SignalledError;\n use rustc::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc::mir::{\n     ClearCrossCrate, Local, Location, Body, Mutability, Operand, Place, PlaceBase, PlaceElem,\n@@ -18,7 +17,7 @@ use rustc::mir::{Terminator, TerminatorKind};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n \n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, Level};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n@@ -259,10 +258,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n         move_error_reported: BTreeMap::new(),\n         uninitialized_error_reported: Default::default(),\n         errors_buffer,\n-        // Only downgrade errors on Rust 2015 and refuse to do so on Rust 2018.\n-        // FIXME(Centril): In Rust 1.40.0, refuse doing so on 2015 as well and\n-        // proceed to throwing out the migration infrastructure.\n-        disable_error_downgrading: body.span.rust_2018(),\n         nonlexical_regioncx: regioncx,\n         used_mut: Default::default(),\n         used_mut_upvars: SmallVec::new(),\n@@ -374,33 +369,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n     if !mbcx.errors_buffer.is_empty() {\n         mbcx.errors_buffer.sort_by_key(|diag| diag.span.primary_span());\n \n-        if !mbcx.disable_error_downgrading && tcx.migrate_borrowck() {\n-            // When borrowck=migrate, check if AST-borrowck would\n-            // error on the given code.\n-\n-            // rust-lang/rust#55492, rust-lang/rust#58776 check the base def id\n-            // for errors. AST borrowck is responsible for aggregating\n-            // `signalled_any_error` from all of the nested closures here.\n-            let base_def_id = tcx.closure_base_def_id(def_id);\n-\n-            match tcx.borrowck(base_def_id).signalled_any_error {\n-                SignalledError::NoErrorsSeen => {\n-                    // if AST-borrowck signalled no errors, then\n-                    // downgrade all the buffered MIR-borrowck errors\n-                    // to warnings.\n-\n-                    for err in mbcx.errors_buffer.iter_mut() {\n-                        downgrade_if_error(err);\n-                    }\n-                }\n-                SignalledError::SawSomeError => {\n-                    // if AST-borrowck signalled a (cancelled) error,\n-                    // then we will just emit the buffered\n-                    // MIR-borrowck errors as normal.\n-                }\n-            }\n-        }\n-\n         for diag in mbcx.errors_buffer.drain(..) {\n             mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);\n         }\n@@ -416,21 +384,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n     result\n }\n \n-fn downgrade_if_error(diag: &mut Diagnostic) {\n-    if diag.is_error() {\n-        diag.level = Level::Warning;\n-        diag.warn(\n-            \"this error has been downgraded to a warning for backwards \\\n-            compatibility with previous releases\",\n-        ).warn(\n-            \"this represents potential undefined behavior in your code and \\\n-            this warning will become a hard error in the future\",\n-        ).note(\n-            \"for more information, try `rustc --explain E0729`\"\n-        );\n-    }\n-}\n-\n crate struct MirBorrowckCtxt<'cx, 'tcx> {\n     crate infcx: &'cx InferCtxt<'cx, 'tcx>,\n     body: &'cx Body<'tcx>,\n@@ -491,9 +444,6 @@ crate struct MirBorrowckCtxt<'cx, 'tcx> {\n     uninitialized_error_reported: FxHashSet<PlaceRef<'cx, 'tcx>>,\n     /// Errors to be reported buffer\n     errors_buffer: Vec<Diagnostic>,\n-    /// If there are no errors reported by the HIR borrow checker, we downgrade\n-    /// all NLL errors to warnings. Setting this flag disables downgrading.\n-    disable_error_downgrading: bool,\n     /// This field keeps track of all the local variables that are declared mut and are mutated.\n     /// Used for the warning issued by an unused mutable local variable.\n     used_mut: FxHashSet<Local>,\n@@ -934,12 +884,6 @@ impl InitializationRequiringAction {\n }\n \n impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n-    /// If there are no errors reported by the HIR borrow checker, we downgrade\n-    /// all NLL errors to warnings. Calling this disables downgrading.\n-    crate fn disable_error_downgrading(&mut self)  {\n-        self.disable_error_downgrading = true;\n-    }\n-\n     /// Checks an access to the given place to see if it is allowed. Examines the set of borrows\n     /// that are in scope, as well as which paths have been initialized, to ensure that (a) the\n     /// place is initialized and (b) it is not borrowed in some way that would prevent this"}, {"sha": "553e980f08e972c71bbc5d9fdc85aceb2c8c24d2", "filename": "src/libstd/sys/unix/process/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmod.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n-pub use self::process_common::{Command, ExitStatus, ExitCode, Stdio, StdioPipes};\n-pub use self::process_inner::Process;\n+pub use self::process_common::{Command, ExitCode, Stdio, StdioPipes};\n+pub use self::process_inner::{ExitStatus, Process};\n pub use crate::ffi::OsString as EnvKey;\n \n mod process_common;"}, {"sha": "4edd2ebf8c59862b02e3abeda8185261f6836a83", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -393,57 +393,6 @@ impl fmt::Debug for Command {\n     }\n }\n \n-/// Unix exit statuses\n-#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n-pub struct ExitStatus(c_int);\n-\n-impl ExitStatus {\n-    pub fn new(status: c_int) -> ExitStatus {\n-        ExitStatus(status)\n-    }\n-\n-    fn exited(&self) -> bool {\n-        unsafe { libc::WIFEXITED(self.0) }\n-    }\n-\n-    pub fn success(&self) -> bool {\n-        self.code() == Some(0)\n-    }\n-\n-    pub fn code(&self) -> Option<i32> {\n-        if self.exited() {\n-            Some(unsafe { libc::WEXITSTATUS(self.0) })\n-        } else {\n-            None\n-        }\n-    }\n-\n-    pub fn signal(&self) -> Option<i32> {\n-        if !self.exited() {\n-            Some(unsafe { libc::WTERMSIG(self.0) })\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-impl From<c_int> for ExitStatus {\n-    fn from(a: c_int) -> ExitStatus {\n-        ExitStatus(a)\n-    }\n-}\n-\n-impl fmt::Display for ExitStatus {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        if let Some(code) = self.code() {\n-            write!(f, \"exit code: {}\", code)\n-        } else {\n-            let signal = self.signal().unwrap();\n-            write!(f, \"signal: {}\", signal)\n-        }\n-    }\n-}\n-\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n pub struct ExitCode(u8);\n "}, {"sha": "2b1a3ecfd70f590fd57977841ce18bb1610e02e5", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,11 +1,13 @@\n+use crate::convert::TryInto;\n use crate::io;\n+use crate::fmt;\n use crate::mem;\n use crate::ptr;\n \n use crate::sys::process::zircon::{Handle, zx_handle_t};\n use crate::sys::process::process_common::*;\n \n-use libc::size_t;\n+use libc::{c_int, size_t};\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command\n@@ -160,7 +162,7 @@ impl Process {\n             return Err(io::Error::new(io::ErrorKind::InvalidData,\n                                       \"Failed to get exit status of process\"));\n         }\n-        Ok(ExitStatus::new(proc_info.rec.return_code))\n+        Ok(ExitStatus(proc_info.return_code))\n     }\n \n     pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n@@ -190,6 +192,36 @@ impl Process {\n             return Err(io::Error::new(io::ErrorKind::InvalidData,\n                                       \"Failed to get exit status of process\"));\n         }\n-        Ok(Some(ExitStatus::new(proc_info.rec.return_code)))\n+        Ok(Some(ExitStatus(proc_info.return_code)))\n+    }\n+}\n+\n+#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n+pub struct ExitStatus(i64);\n+\n+impl ExitStatus {\n+    pub fn success(&self) -> bool {\n+        self.code() == Some(0)\n+    }\n+\n+    pub fn code(&self) -> Option<i32> {\n+        // FIXME: support extracting return code as an i64\n+        self.0.try_into().ok()\n+    }\n+\n+    pub fn signal(&self) -> Option<i32> {\n+        None\n+    }\n+}\n+\n+impl From<c_int> for ExitStatus {\n+    fn from(a: c_int) -> ExitStatus {\n+        ExitStatus(a as i64)\n+    }\n+}\n+\n+impl fmt::Display for ExitStatus {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"exit code: {}\", self.0)\n     }\n }"}, {"sha": "507dc6892613a57655df204efe17aa2f7f7037ef", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,3 +1,4 @@\n+use crate::fmt;\n use crate::io::{self, Error, ErrorKind};\n use crate::ptr;\n use crate::sys::cvt;\n@@ -441,3 +442,54 @@ impl Process {\n         }\n     }\n }\n+\n+/// Unix exit statuses\n+#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n+pub struct ExitStatus(c_int);\n+\n+impl ExitStatus {\n+    pub fn new(status: c_int) -> ExitStatus {\n+        ExitStatus(status)\n+    }\n+\n+    fn exited(&self) -> bool {\n+        unsafe { libc::WIFEXITED(self.0) }\n+    }\n+\n+    pub fn success(&self) -> bool {\n+        self.code() == Some(0)\n+    }\n+\n+    pub fn code(&self) -> Option<i32> {\n+        if self.exited() {\n+            Some(unsafe { libc::WEXITSTATUS(self.0) })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    pub fn signal(&self) -> Option<i32> {\n+        if !self.exited() {\n+            Some(unsafe { libc::WTERMSIG(self.0) })\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+impl From<c_int> for ExitStatus {\n+    fn from(a: c_int) -> ExitStatus {\n+        ExitStatus(a)\n+    }\n+}\n+\n+impl fmt::Display for ExitStatus {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        if let Some(code) = self.code() {\n+            write!(f, \"exit code: {}\", code)\n+        } else {\n+            let signal = self.signal().unwrap();\n+            write!(f, \"signal: {}\", signal)\n+        }\n+    }\n+}"}, {"sha": "188a6b5f2da4a22f10176cffb06ce6c604835d48", "filename": "src/libstd/sys/unix/process/zircon.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -65,29 +65,14 @@ impl Drop for Handle {\n     }\n }\n \n-// Common ZX_INFO header\n-#[derive(Default)]\n-#[repr(C)]\n-pub struct zx_info_header_t {\n-    pub topic: u32,              // identifies the info struct\n-    pub avail_topic_size: u16,   // \u201cnative\u201d size of the struct\n-    pub topic_size: u16,         // size of the returned struct (<=topic_size)\n-    pub avail_count: u32,        // number of records the kernel has\n-    pub count: u32,              // number of records returned (limited by buffer size)\n-}\n-\n-#[derive(Default)]\n-#[repr(C)]\n-pub struct zx_record_process_t {\n-    pub return_code: c_int,\n-}\n-\n // Returned for topic ZX_INFO_PROCESS\n #[derive(Default)]\n #[repr(C)]\n pub struct zx_info_process_t {\n-    pub hdr: zx_info_header_t,\n-    pub rec: zx_record_process_t,\n+    pub return_code: i64,\n+    pub started: bool,\n+    pub exited: bool,\n+    pub debugger_attached: bool,\n }\n \n extern {"}, {"sha": "5565015179c2d5949a9291f72b5b1431b38b21c0", "filename": "src/libsyntax/parse/unescape_error_reporting.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibsyntax%2Fparse%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Flibsyntax%2Fparse%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Funescape_error_reporting.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -47,14 +47,20 @@ pub(crate) fn emit_unescape_error(\n                 .emit();\n         }\n         EscapeError::MoreThanOneChar => {\n+            let msg = if mode.is_bytes() {\n+                \"if you meant to write a byte string literal, use double quotes\"\n+            } else {\n+                \"if you meant to write a `str` literal, use double quotes\"\n+            };\n+\n             handler\n                 .struct_span_err(\n                     span_with_quotes,\n                     \"character literal may only contain one codepoint\",\n                 )\n                 .span_suggestion(\n                     span_with_quotes,\n-                    \"if you meant to write a `str` literal, use double quotes\",\n+                    msg,\n                     format!(\"\\\"{}\\\"\", lit),\n                     Applicability::MachineApplicable,\n                 ).emit()"}, {"sha": "c1bcb8a1aa2624cc47eb1702ca0ec8fc2144aca4", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -64,7 +64,6 @@ impl CodegenBackend for TheBackend {\n         tcx: TyCtxt<'tcx>,\n         _metadata: EncodedMetadata,\n         _need_metadata_module: bool,\n-        _rx: mpsc::Receiver<Box<Any + Send>>\n     ) -> Box<Any> {\n         use rustc::hir::def_id::LOCAL_CRATE;\n "}, {"sha": "f66994b3f100a1d27f1afb7ad28286c363b8c502", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.nll.stderr", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr?ref=ddf43867a9cbb3766b48552632a602498fae2699", "patch": "@@ -1,40 +0,0 @@\n-error[E0503]: cannot use `y` because it was mutably borrowed\n-  --> $DIR/borrowck-anon-fields-variant.rs:17:7\n-   |\n-LL |       Foo::Y(ref mut a, _) => a,\n-   |              --------- borrow of `y.0` occurs here\n-...\n-LL |       Foo::Y(_, ref mut b) => b,\n-   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n-...\n-LL |     *a += 1;\n-   |     ------- borrow later used here\n-\n-error[E0503]: cannot use `y` because it was mutably borrowed\n-  --> $DIR/borrowck-anon-fields-variant.rs:37:7\n-   |\n-LL |       Foo::Y(ref mut a, _) => a,\n-   |              --------- borrow of `y.0` occurs here\n-...\n-LL |       Foo::Y(ref mut b, _) => b,\n-   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n-...\n-LL |     *a += 1;\n-   |     ------- borrow later used here\n-\n-error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n-  --> $DIR/borrowck-anon-fields-variant.rs:37:14\n-   |\n-LL |       Foo::Y(ref mut a, _) => a,\n-   |              --------- first mutable borrow occurs here\n-...\n-LL |       Foo::Y(ref mut b, _) => b,\n-   |              ^^^^^^^^^ second mutable borrow occurs here\n-...\n-LL |     *a += 1;\n-   |     ------- first borrow later used here\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors have detailed explanations: E0499, E0503.\n-For more information about an error, try `rustc --explain E0499`."}, {"sha": "cecc278e1931cb8684a5c1a200af7cd127689c71", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -15,9 +15,7 @@ fn distinct_variant() {\n     // reference.\n     let b = match y {\n       Foo::Y(_, ref mut b) => b,\n-      //~^ WARNING cannot use `y`\n-      //~| WARNING this error has been downgraded to a warning\n-      //~| WARNING this warning will become a hard error in the future\n+      //~^ ERROR cannot use `y`\n       Foo::X => panic!()\n     };\n "}, {"sha": "2caeed1bd44ea634edd497d34858378ca97fb988", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,4 +1,4 @@\n-warning[E0503]: cannot use `y` because it was mutably borrowed\n+error[E0503]: cannot use `y` because it was mutably borrowed\n   --> $DIR/borrowck-anon-fields-variant.rs:17:7\n    |\n LL |       Foo::Y(ref mut a, _) => a,\n@@ -9,13 +9,9 @@ LL |       Foo::Y(_, ref mut b) => b,\n ...\n LL |     *a += 1;\n    |     ------- borrow later used here\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n error[E0503]: cannot use `y` because it was mutably borrowed\n-  --> $DIR/borrowck-anon-fields-variant.rs:37:7\n+  --> $DIR/borrowck-anon-fields-variant.rs:35:7\n    |\n LL |       Foo::Y(ref mut a, _) => a,\n    |              --------- borrow of `y.0` occurs here\n@@ -27,7 +23,7 @@ LL |     *a += 1;\n    |     ------- borrow later used here\n \n error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n-  --> $DIR/borrowck-anon-fields-variant.rs:37:14\n+  --> $DIR/borrowck-anon-fields-variant.rs:35:14\n    |\n LL |       Foo::Y(ref mut a, _) => a,\n    |              --------- first mutable borrow occurs here\n@@ -38,7 +34,7 @@ LL |       Foo::Y(ref mut b, _) => b,\n LL |     *a += 1;\n    |     ------- first borrow later used here\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0499, E0503.\n For more information about an error, try `rustc --explain E0499`."}, {"sha": "20f05353d4633c8f39301f697220c99eadbafeba", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.nll.stderr", "status": "removed", "additions": 0, "deletions": 366, "changes": 366, "blob_url": "https://github.com/rust-lang/rust/blob/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.nll.stderr?ref=ddf43867a9cbb3766b48552632a602498fae2699", "patch": "@@ -1,366 +0,0 @@\n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:262:13\n-   |\n-LL |             let y = &mut x;\n-   |                     ------ first mutable borrow occurs here\n-LL |             &mut x;\n-   |             ^^^^^^ second mutable borrow occurs here\n-LL |             *y = 1;\n-   |             ------ first borrow later used here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:272:20\n-   |\n-LL |                    let y = &mut x;\n-   |                            ------ first mutable borrow occurs here\n-LL |                    &mut x;\n-   |                    ^^^^^^ second mutable borrow occurs here\n-LL |                    *y = 1;\n-   |                    ------ first borrow later used here\n-\n-error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/borrowck-describe-lvalue.rs:270:16\n-   |\n-LL |              || {\n-   |               - inferred to be a `FnMut` closure\n-LL | /                || {\n-LL | |                    let y = &mut x;\n-LL | |                    &mut x;\n-LL | |                    *y = 1;\n-LL | |                    drop(y);\n-LL | |                 }\n-   | |_________________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n-   |\n-   = note: `FnMut` closures only have access to their captured variables while they are executing...\n-   = note: ...therefore, they cannot allow references to captured variables to escape\n-\n-error[E0503]: cannot use `f.x` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:41:9\n-   |\n-LL |         let x = f.x();\n-   |                 - borrow of `f` occurs here\n-LL |         f.x;\n-   |         ^^^ use of borrowed `f`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `g.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:48:9\n-   |\n-LL |         let x = g.x();\n-   |                 - borrow of `g` occurs here\n-LL |         g.0;\n-   |         ^^^ use of borrowed `g`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `h.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:55:9\n-   |\n-LL |         let x = &mut h.0;\n-   |                 -------- borrow of `h.0` occurs here\n-LL |         h.0;\n-   |         ^^^ use of borrowed `h.0`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `e.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:63:20\n-   |\n-LL |         let x = e.x();\n-   |                 - borrow of `e` occurs here\n-LL |         match e {\n-LL |             Baz::X(value) => value\n-   |                    ^^^^^ use of borrowed `e`\n-LL |         };\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `u.a` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:71:9\n-   |\n-LL |         let x = &mut u.a;\n-   |                 -------- borrow of `u.a` occurs here\n-LL |         u.a;\n-   |         ^^^ use of borrowed `u.a`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `f.x` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:78:9\n-   |\n-LL |         let x = f.x();\n-   |                 - borrow of `*f` occurs here\n-LL |         f.x;\n-   |         ^^^ use of borrowed `*f`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `g.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:85:9\n-   |\n-LL |         let x = g.x();\n-   |                 - borrow of `*g` occurs here\n-LL |         g.0;\n-   |         ^^^ use of borrowed `*g`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `h.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:92:9\n-   |\n-LL |         let x = &mut h.0;\n-   |                 -------- borrow of `h.0` occurs here\n-LL |         h.0;\n-   |         ^^^ use of borrowed `h.0`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `e.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:100:20\n-   |\n-LL |         let x = e.x();\n-   |                 - borrow of `*e` occurs here\n-LL |         match *e {\n-LL |             Baz::X(value) => value\n-   |                    ^^^^^ use of borrowed `*e`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `u.a` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:109:9\n-   |\n-LL |         let x = &mut u.a;\n-   |                 -------- borrow of `u.a` occurs here\n-LL |         u.a;\n-   |         ^^^ use of borrowed `u.a`\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:117:15\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-LL |         match v {\n-LL |             &[x, _, .., _, _] => println!(\"{}\", x),\n-   |               ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:122:18\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[_, x, .., _, _] => println!(\"{}\", x),\n-   |                  ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:127:25\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[_, _, .., x, _] => println!(\"{}\", x),\n-   |                         ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:132:28\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[_, _, .., _, x] => println!(\"{}\", x),\n-   |                            ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:143:15\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-LL |         match v {\n-LL |             &[x @ ..] => println!(\"{:?}\", x),\n-   |               ^^^^^^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:148:18\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[_, x @ ..] => println!(\"{:?}\", x),\n-   |                  ^^^^^^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:153:15\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[x @ .., _] => println!(\"{:?}\", x),\n-   |               ^^^^^^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:158:18\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[_, x @ .., _] => println!(\"{:?}\", x),\n-   |                  ^^^^^^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `e` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:171:13\n-   |\n-LL |         let x = &mut e;\n-   |                 ------ borrow of `e` occurs here\n-LL |         match e {\n-LL |             E::A(ref ax) =>\n-   |             ^^^^^^^^^^^^ use of borrowed `e`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0502]: cannot borrow `e.0` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:171:18\n-   |\n-LL |         let x = &mut e;\n-   |                 ------ mutable borrow occurs here\n-LL |         match e {\n-LL |             E::A(ref ax) =>\n-   |                  ^^^^^^ immutable borrow occurs here\n-...\n-LL |         drop(x);\n-   |              - mutable borrow later used here\n-\n-error[E0502]: cannot borrow `e.x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:175:23\n-   |\n-LL |         let x = &mut e;\n-   |                 ------ mutable borrow occurs here\n-...\n-LL |             E::B { x: ref bx } =>\n-   |                       ^^^^^^ immutable borrow occurs here\n-...\n-LL |         drop(x);\n-   |              - mutable borrow later used here\n-\n-error[E0502]: cannot borrow `s.y.0` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:188:22\n-   |\n-LL |         let x = &mut s;\n-   |                 ------ mutable borrow occurs here\n-LL |         match s {\n-LL |             S  { y: (ref y0, _), .. } =>\n-   |                      ^^^^^^ immutable borrow occurs here\n-...\n-LL |         drop(x);\n-   |              - mutable borrow later used here\n-\n-error[E0502]: cannot borrow `s.x.y` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:194:28\n-   |\n-LL |         let x = &mut s;\n-   |                 ------ mutable borrow occurs here\n-...\n-LL |             S  { x: F { y: ref x0, .. }, .. } =>\n-   |                            ^^^^^^ immutable borrow occurs here\n-...\n-LL |         drop(x);\n-   |              - mutable borrow later used here\n-\n-error[E0503]: cannot use `*v` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:240:9\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-LL |         v[0].y;\n-   |         ^^^^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[_].y` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:240:9\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-LL |         v[0].y;\n-   |         ^^^^^^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0502]: cannot borrow `v[..].x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:251:24\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ mutable borrow occurs here\n-LL |         match v {\n-LL |             &[_, F {x: ref xf, ..}] => println!(\"{}\", xf),\n-   |                        ^^^^^^ immutable borrow occurs here\n-...\n-LL |         drop(x);\n-   |              - mutable borrow later used here\n-\n-error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:210:29\n-   |\n-LL |             let x = &mut block;\n-   |                     ---------- mutable borrow occurs here\n-LL |             let p: &'a u8 = &*block.current;\n-   |                             ^^^^^^^^^^^^^^^ immutable borrow occurs here\n-...\n-LL |             drop(x);\n-   |                  - mutable borrow later used here\n-\n-error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:227:33\n-   |\n-LL |             let x = &mut block;\n-   |                     ---------- mutable borrow occurs here\n-LL |             let p : *const u8 = &*(*block).current;\n-   |                                 ^^^^^^^^^^^^^^^^^^ immutable borrow occurs here\n-...\n-LL |             drop(x);\n-   |                  - mutable borrow later used here\n-\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-describe-lvalue.rs:282:22\n-   |\n-LL |                 drop(x);\n-   |                      - value moved here\n-LL |                 drop(x);\n-   |                      ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n-\n-error: aborting due to 32 previous errors\n-\n-Some errors have detailed explanations: E0382, E0499, E0502, E0503.\n-For more information about an error, try `rustc --explain E0382`."}, {"sha": "8425960aa8600bdb0280840a488e464f690c041c", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -208,10 +208,8 @@ fn main() {\n         fn bump<'a>(mut block: &mut Block<'a>) {\n             let x = &mut block;\n             let p: &'a u8 = &*block.current;\n-            //~^ WARNING cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-            //~| this error has been downgraded\n-            //~| this warning will become a hard error in the future\n-            // Warning because of issue rust#38899\n+            //~^ ERROR cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+            // See issue rust#38899\n             drop(x);\n         }\n     }\n@@ -225,10 +223,8 @@ fn main() {\n         unsafe fn bump2(mut block: *mut Block2) {\n             let x = &mut block;\n             let p : *const u8 = &*(*block).current;\n-            //~^ WARNING cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-            //~| this error has been downgraded\n-            //~| this warning will become a hard error in the future\n-            // Warning because of issue rust#38899\n+            //~^ ERROR cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+            // See issue rust#38899\n             drop(x);\n         }\n     }"}, {"sha": "4213523d2fa4b1d188f13172e8828808f8eb0ebe", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.stderr", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:262:13\n+  --> $DIR/borrowck-describe-lvalue.rs:258:13\n    |\n LL |             let y = &mut x;\n    |                     ------ first mutable borrow occurs here\n@@ -9,7 +9,7 @@ LL |             *y = 1;\n    |             ------ first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:272:20\n+  --> $DIR/borrowck-describe-lvalue.rs:268:20\n    |\n LL |                    let y = &mut x;\n    |                            ------ first mutable borrow occurs here\n@@ -19,7 +19,7 @@ LL |                    *y = 1;\n    |                    ------ first borrow later used here\n \n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/borrowck-describe-lvalue.rs:270:16\n+  --> $DIR/borrowck-describe-lvalue.rs:266:16\n    |\n LL |              || {\n    |               - inferred to be a `FnMut` closure\n@@ -295,7 +295,7 @@ LL |         drop(x);\n    |              - mutable borrow later used here\n \n error[E0503]: cannot use `*v` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:240:9\n+  --> $DIR/borrowck-describe-lvalue.rs:236:9\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -306,7 +306,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[_].y` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:240:9\n+  --> $DIR/borrowck-describe-lvalue.rs:236:9\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -317,7 +317,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0502]: cannot borrow `v[..].x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:251:24\n+  --> $DIR/borrowck-describe-lvalue.rs:247:24\n    |\n LL |         let x = &mut v;\n    |                 ------ mutable borrow occurs here\n@@ -328,7 +328,7 @@ LL |             &[_, F {x: ref xf, ..}] => println!(\"{}\", xf),\n LL |         drop(x);\n    |              - mutable borrow later used here\n \n-warning[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-describe-lvalue.rs:210:29\n    |\n LL |             let x = &mut block;\n@@ -338,13 +338,9 @@ LL |             let p: &'a u8 = &*block.current;\n ...\n LL |             drop(x);\n    |                  - mutable borrow later used here\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n-warning[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:227:33\n+error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-describe-lvalue.rs:225:33\n    |\n LL |             let x = &mut block;\n    |                     ---------- mutable borrow occurs here\n@@ -353,13 +349,9 @@ LL |             let p : *const u8 = &*(*block).current;\n ...\n LL |             drop(x);\n    |                  - mutable borrow later used here\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-describe-lvalue.rs:282:22\n+  --> $DIR/borrowck-describe-lvalue.rs:278:22\n    |\n LL |                 drop(x);\n    |                      - value moved here\n@@ -368,7 +360,7 @@ LL |                 drop(x);\n    |\n    = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 32 previous errors\n \n Some errors have detailed explanations: E0382, E0499, E0502, E0503.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "58f2cadcc6573ae896085feefe21b2f6119075d2", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.edition.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr?ref=ddf43867a9cbb3766b48552632a602498fae2699", "patch": "@@ -1,14 +0,0 @@\n-error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-migrate-to-nll.rs:29:21\n-   |\n-LL |     let x = &mut block;\n-   |             ---------- mutable borrow occurs here\n-LL |     let p: &'a u8 = &*block.current;\n-   |                     ^^^^^^^^^^^^^^^ immutable borrow occurs here\n-...\n-LL |     drop(x);\n-   |          - mutable borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "6587dfdbc03f3af267e22006bf5e60b7ed94e379", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs?ref=ddf43867a9cbb3766b48552632a602498fae2699", "patch": "@@ -1,36 +0,0 @@\n-// This is a test of the borrowck migrate mode. It leverages #38899, a\n-// bug that is fixed by NLL: this code is (unsoundly) accepted by\n-// AST-borrowck, but is correctly rejected by the NLL borrowck.\n-//\n-// Therefore, for backwards-compatiblity, under borrowck=migrate the\n-// NLL checks will be emitted as *warnings*.\n-//\n-// In Rust 2018, no errors will be downgraded to warnings.\n-\n-// NLL mode makes this compile-fail; we cannot currently encode a\n-// test that is run-pass or compile-fail based on compare-mode. So\n-// just ignore it instead:\n-\n-// ignore-compare-mode-nll\n-// ignore-compare-mode-polonius\n-\n-// revisions: zflag edition\n-//[zflag]compile-flags: -Z borrowck=migrate\n-//[edition]edition:2018\n-//[zflag] check-pass\n-\n-pub struct Block<'a> {\n-    current: &'a u8,\n-    unrelated: &'a u8,\n-}\n-\n-fn bump<'a>(mut block: &mut Block<'a>) {\n-    let x = &mut block;\n-    let p: &'a u8 = &*block.current;\n-    //[edition]~^ ERROR cannot borrow `*block.current` as immutable\n-    // (use `x` and `p` so enabling NLL doesn't assign overly short lifetimes)\n-    drop(x);\n-    drop(p);\n-}\n-\n-fn main() {}"}, {"sha": "ace336a3bf32ad6b789f5f3e2d538dd3d1743527", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.zflag.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr?ref=ddf43867a9cbb3766b48552632a602498fae2699", "patch": "@@ -1,15 +0,0 @@\n-warning[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-migrate-to-nll.rs:29:21\n-   |\n-LL |     let x = &mut block;\n-   |             ---------- mutable borrow occurs here\n-LL |     let p: &'a u8 = &*block.current;\n-   |                     ^^^^^^^^^^^^^^^ immutable borrow occurs here\n-...\n-LL |     drop(x);\n-   |          - mutable borrow later used here\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-"}, {"sha": "f1fd1b507c71e0b98bd840115b324b9d3525fdab", "filename": "src/test/ui/borrowck/issue-53432-nested-closure-outlives-borrowed-value.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fborrowck%2Fissue-53432-nested-closure-outlives-borrowed-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fborrowck%2Fissue-53432-nested-closure-outlives-borrowed-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-53432-nested-closure-outlives-borrowed-value.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let f = move || {};\n+    let _action = move || {\n+        || f() // The `nested` closure\n+        //~^ ERROR lifetime may not live long enough\n+    };\n+}"}, {"sha": "3781691ff41dc76df0cc8e33108ed8e8a188c255", "filename": "src/test/ui/borrowck/issue-53432-nested-closure-outlives-borrowed-value.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fborrowck%2Fissue-53432-nested-closure-outlives-borrowed-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fborrowck%2Fissue-53432-nested-closure-outlives-borrowed-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-53432-nested-closure-outlives-borrowed-value.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -0,0 +1,15 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-53432-nested-closure-outlives-borrowed-value.rs:4:9\n+   |\n+LL |     let _action = move || {\n+   |                   -------\n+   |                   |     |\n+   |                   |     return type of closure is [closure@$DIR/issue-53432-nested-closure-outlives-borrowed-value.rs:4:9: 4:15 f:&'2 [closure@$DIR/issue-53432-nested-closure-outlives-borrowed-value.rs:2:13: 2:23]]\n+   |                   lifetime `'1` represents this closure's body\n+LL |         || f() // The `nested` closure\n+   |         ^^^^^^ returning this value requires that `'1` must outlive `'2`\n+   |\n+   = note: closure implements `Fn`, so references to captured variables can't escape the closure\n+\n+error: aborting due to previous error\n+"}, {"sha": "4b43a0d0a1a1b3c910bcbd9f7d150d49c73953d3", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "removed", "additions": 0, "deletions": 328, "changes": 328, "blob_url": "https://github.com/rust-lang/rust/blob/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=ddf43867a9cbb3766b48552632a602498fae2699", "patch": "@@ -1,328 +0,0 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:37:25\n-   |\n-LL |     const fn into_inner(self) -> T { self.0 }\n-   |                         ^^^^ constant functions cannot evaluate destructors\n-\n-error[E0723]: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:39:36\n-   |\n-LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n-   |                                    ^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:44:28\n-   |\n-LL |     const fn into_inner_lt(self) -> T { self.0 }\n-   |                            ^^^^ constant functions cannot evaluate destructors\n-\n-error[E0723]: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:46:42\n-   |\n-LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n-   |                                          ^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:51:27\n-   |\n-LL |     const fn into_inner_s(self) -> T { self.0 }\n-   |                           ^^^^ constant functions cannot evaluate destructors\n-\n-error[E0723]: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:53:38\n-   |\n-LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n-   |                                      ^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:58:39\n-   |\n-LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n-   |                                       ^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:76:16\n-   |\n-LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n-   |                ^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:78:18\n-   |\n-LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n-   |                  ^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:80:33\n-   |\n-LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n-   |                                 ^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:82:35\n-   |\n-LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n-   |                                   ^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: only int and `bool` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:84:35\n-   |\n-LL | const fn foo19_3(f: f32) -> f32 { -f }\n-   |                                   ^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:86:43\n-   |\n-LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n-   |                                           ^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: cannot access `static` items in const fn\n-  --> $DIR/min_const_fn.rs:90:27\n-   |\n-LL | const fn foo25() -> u32 { BAR }\n-   |                           ^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: cannot access `static` items in const fn\n-  --> $DIR/min_const_fn.rs:91:36\n-   |\n-LL | const fn foo26() -> &'static u32 { &BAR }\n-   |                                    ^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: casting pointers to ints is unstable in const fn\n-  --> $DIR/min_const_fn.rs:92:42\n-   |\n-LL | const fn foo30(x: *const u32) -> usize { x as usize }\n-   |                                          ^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: casting pointers to ints is unstable in const fn\n-  --> $DIR/min_const_fn.rs:94:63\n-   |\n-LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n-   |                                                               ^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: casting pointers to ints is unstable in const fn\n-  --> $DIR/min_const_fn.rs:96:42\n-   |\n-LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n-   |                                          ^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: casting pointers to ints is unstable in const fn\n-  --> $DIR/min_const_fn.rs:98:63\n-   |\n-LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n-   |                                                               ^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/min_const_fn.rs:100:38\n-   |\n-LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: loops are not allowed in const fn\n-  --> $DIR/min_const_fn.rs:102:29\n-   |\n-LL | const fn foo30_5(b: bool) { while b { } }\n-   |                             ^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/min_const_fn.rs:105:44\n-   |\n-LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n-   |                                            ^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/min_const_fn.rs:107:44\n-   |\n-LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n-   |                                            ^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:109:14\n-   |\n-LL | const fn inc(x: &mut i32) { *x += 1 }\n-   |              ^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:114:6\n-   |\n-LL | impl<T: std::fmt::Debug> Foo<T> {\n-   |      ^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:119:6\n-   |\n-LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n-   |      ^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:124:6\n-   |\n-LL | impl<T: Sync + Sized> Foo<T> {\n-   |      ^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:130:24\n-   |\n-LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:132:34\n-   |\n-LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n-   |                                  ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:134:22\n-   |\n-LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n-   |                      ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:135:23\n-   |\n-LL | const fn no_rpit() -> impl std::fmt::Debug {}\n-   |                       ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:136:23\n-   |\n-LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n-   |                       ^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:137:32\n-   |\n-LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0515]: cannot return reference to temporary value\n-  --> $DIR/min_const_fn.rs:137:63\n-   |\n-LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n-   |                                                               ^--\n-   |                                                               ||\n-   |                                                               |temporary value created here\n-   |                                                               returns a reference to data owned by the current function\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:145:41\n-   |\n-LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:148:21\n-   |\n-LL | const fn no_fn_ptrs(_x: fn()) {}\n-   |                     ^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:150:27\n-   |\n-LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n-   |                           ^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error: aborting due to 37 previous errors\n-\n-Some errors have detailed explanations: E0515, E0723.\n-For more information about an error, try `rustc --explain E0515`."}, {"sha": "d0f63b148ff2bf9b712ce38866b3fc5fac8d6254", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -136,9 +136,7 @@ const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn\n const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n //~^ ERROR trait bounds other than `Sized`\n-//~| WARNING cannot return reference to temporary value\n-//~| WARNING this error has been downgraded to a warning\n-//~| WARNING this warning will become a hard error in the future\n+//~| ERROR cannot return reference to temporary value\n \n const fn no_unsafe() { unsafe {} }\n "}, {"sha": "7919cfe987cfc5c149d875a90406cfab3776679c", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -286,21 +286,17 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-warning[E0515]: cannot return reference to temporary value\n+error[E0515]: cannot return reference to temporary value\n   --> $DIR/min_const_fn.rs:137:63\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                                               ^--\n    |                                                               ||\n    |                                                               |temporary value created here\n    |                                                               returns a reference to data owned by the current function\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:145:41\n+  --> $DIR/min_const_fn.rs:143:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -309,7 +305,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:148:21\n+  --> $DIR/min_const_fn.rs:146:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n@@ -318,15 +314,15 @@ LL | const fn no_fn_ptrs(_x: fn()) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:150:27\n+  --> $DIR/min_const_fn.rs:148:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 37 previous errors\n \n Some errors have detailed explanations: E0515, E0723.\n For more information about an error, try `rustc --explain E0515`."}, {"sha": "0ea950d678f8784d364d4593b5f42e7665973ca2", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.nll.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr?ref=ddf43867a9cbb3766b48552632a602498fae2699", "patch": "@@ -1,31 +0,0 @@\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn_dyn.rs:9:5\n-   |\n-LL |     x.0.field;\n-   |     ^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn_dyn.rs:12:66\n-   |\n-LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n-   |                                                                  ^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/min_const_fn_dyn.rs:12:67\n-   |\n-LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n-   |                                                                  -^    - temporary value is freed at the end of this statement\n-   |                                                                  ||\n-   |                                                                  |creates a temporary which is freed while still in use\n-   |                                                                  cast requires that borrow lasts for `'static`\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors have detailed explanations: E0716, E0723.\n-For more information about an error, try `rustc --explain E0716`."}, {"sha": "3833510c0b3b5a14685f10c19d47a8d9945e7b69", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -11,8 +11,6 @@ const fn no_inner_dyn_trait2(x: Hide) {\n }\n const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n //~^ ERROR trait bounds other than `Sized`\n-//~| WARNING temporary value dropped while borrowed\n-//~| WARNING this error has been downgraded to a warning\n-//~| WARNING this warning will become a hard error in the future\n+//~| ERROR temporary value dropped while borrowed\n \n fn main() {}"}, {"sha": "0ea950d678f8784d364d4593b5f42e7665973ca2", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -16,20 +16,16 @@ LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-warning[E0716]: temporary value dropped while borrowed\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/min_const_fn_dyn.rs:12:67\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                  -^    - temporary value is freed at the end of this statement\n    |                                                                  ||\n    |                                                                  |creates a temporary which is freed while still in use\n    |                                                                  cast requires that borrow lasts for `'static`\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0716, E0723.\n For more information about an error, try `rustc --explain E0716`."}, {"sha": "fd6c5b67ef69ee4c5d55adfb2a15565bf8560b7d", "filename": "src/test/ui/feature-gates/feature-gate-nll.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,20 +1,18 @@\n // There isn't a great way to test feature(nll), since it just disables migrate\n-// mode and changes some error messages. We just test for migrate mode.\n+// mode and changes some error messages.\n+\n+// FIXME(Centril): This test is probably obsolete now and `nll` should become\n+// `accepted`.\n \n // Don't use compare-mode=nll, since that turns on NLL.\n // ignore-compare-mode-nll\n // ignore-compare-mode-polonius\n \n-#![feature(rustc_attrs)]\n-\n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+fn main() {\n     let mut x = (33, &0);\n \n     let m = &mut x;\n     let p = &*x.1;\n-    //~^ WARNING cannot borrow\n-    //~| WARNING this error has been downgraded to a warning\n-    //~| WARNING this warning will become a hard error in the future\n+    //~^ ERROR cannot borrow\n     m;\n }"}, {"sha": "edfc22c32c936070d87df100d0a3e271cee075d8", "filename": "src/test/ui/feature-gates/feature-gate-nll.stderr", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,29 +1,13 @@\n-warning[E0502]: cannot borrow `*x.1` as immutable because it is also borrowed as mutable\n+error[E0502]: cannot borrow `*x.1` as immutable because it is also borrowed as mutable\n   --> $DIR/feature-gate-nll.rs:15:13\n    |\n LL |     let m = &mut x;\n    |             ------ mutable borrow occurs here\n LL |     let p = &*x.1;\n    |             ^^^^^ immutable borrow occurs here\n-...\n+LL |\n LL |     m;\n    |     - mutable borrow later used here\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-\n-error: compilation successful\n-  --> $DIR/feature-gate-nll.rs:11:1\n-   |\n-LL | / fn main() {\n-LL | |     let mut x = (33, &0);\n-LL | |\n-LL | |     let m = &mut x;\n-...  |\n-LL | |     m;\n-LL | | }\n-   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "71f1f15654b55355ce23a912a5de0d30f1a8f3ba", "filename": "src/test/ui/issues/issue-27282-move-match-input-into-guard.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -7,8 +7,6 @@\n // reaches the panic code when executed, despite the compiler warning\n // about that match arm being unreachable.\n \n-#![feature(nll)]\n-\n fn main() {\n     let b = &mut true;\n     match b {"}, {"sha": "51f9b464d7660e842f1c613f9fce141efedac0aa", "filename": "src/test/ui/issues/issue-27282-move-match-input-into-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `b`\n-  --> $DIR/issue-27282-move-match-input-into-guard.rs:18:14\n+  --> $DIR/issue-27282-move-match-input-into-guard.rs:16:14\n    |\n LL |     let b = &mut true;\n    |         - move occurs because `b` has type `&mut bool`, which does not implement the `Copy` trait"}, {"sha": "afa0ba780de46e1826d713ab3c981e8ad244d66b", "filename": "src/test/ui/issues/issue-27282-move-ref-mut-into-guard.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,11 +1,6 @@\n // Issue 27282: Example 1: This sidesteps the AST checks disallowing\n // mutable borrows in match guards by hiding the mutable borrow in a\n // guard behind a move (of the ref mut pattern id) within a closure.\n-//\n-// This example is not rejected by AST borrowck (and then reliably\n-// segfaults when executed).\n-\n-#![feature(nll)]\n \n fn main() {\n     match Some(&4) {"}, {"sha": "30cf0d66afaff9da39ddb7a0f1dde7aaa5e1fa77", "filename": "src/test/ui/issues/issue-27282-move-ref-mut-into-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/issue-27282-move-ref-mut-into-guard.rs:14:19\n+  --> $DIR/issue-27282-move-ref-mut-into-guard.rs:9:19\n    |\n LL |             if { (|| { let bar = foo; bar.take() })(); false } => {},\n    |                   ^^             ---"}, {"sha": "d17d6f07f6870e5835b42d7d3ca3e01b7b141be3", "filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-1.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -9,8 +9,6 @@\n // diverges, and therefore a single final fake-read at the very end\n // after the final match arm would not suffice.\n \n-#![feature(nll)]\n-\n struct ForceFnOnce;\n \n fn main() {"}, {"sha": "188f0b25c30842494452728aa5e7f25b533bb7fd", "filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-1.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0510]: cannot mutably borrow `x` in match guard\n-  --> $DIR/issue-27282-mutate-before-diverging-arm-1.rs:23:14\n+  --> $DIR/issue-27282-mutate-before-diverging-arm-1.rs:21:14\n    |\n LL |     match x {\n    |           - value is immutable in match guard"}, {"sha": "9c3e7e9978ec71100621211e5c95feaf04ceb18c", "filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-2.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -13,8 +13,6 @@\n // occurs in the pattern-match itself, and not in the guard\n // expression.\n \n-#![feature(nll)]\n-\n struct ForceFnOnce;\n \n fn main() {"}, {"sha": "f0a3151f4e12f149f1e37af4c23ba34bf0294ce7", "filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-2.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0510]: cannot mutably borrow `x` in match guard\n-  --> $DIR/issue-27282-mutate-before-diverging-arm-2.rs:28:18\n+  --> $DIR/issue-27282-mutate-before-diverging-arm-2.rs:26:18\n    |\n LL |     match x {\n    |           - value is immutable in match guard"}, {"sha": "cff9e963e272515a647e995f783dabf842ded4e2", "filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-mutate-before-diverging-arm-3.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -8,7 +8,7 @@\n // This case is interesting because a borrow of **x is untracked, because **x is\n // immutable. However, for matches we care that **x refers to the same value\n // until we have chosen a match arm.\n-#![feature(nll)]\n+\n struct ForceFnOnce;\n fn main() {\n     let mut x = &mut &Some(&2);"}, {"sha": "ce91022f093d4461749b58f3316cc31b18c6949a", "filename": "src/test/ui/issues/issue-29723.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-29723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-29723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29723.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // test for https://github.com/rust-lang/rust/issues/29723\n \n fn main() {"}, {"sha": "04915ab5f951068d35d4b6c10fa81fe81f235c82", "filename": "src/test/ui/issues/issue-29723.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `s`\n-  --> $DIR/issue-29723.rs:12:13\n+  --> $DIR/issue-29723.rs:10:13\n    |\n LL |     let s = String::new();\n    |         - move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait"}, {"sha": "776a724d3106af25ba69a9393465c34cc1408b54", "filename": "src/test/ui/issues/issue-40510-1.migrate.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.migrate.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,4 +1,4 @@\n-warning: captured variable cannot escape `FnMut` closure body\n+error: captured variable cannot escape `FnMut` closure body\n   --> $DIR/issue-40510-1.rs:11:9\n    |\n LL |     || {\n@@ -8,15 +8,6 @@ LL |         &mut x\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-\n-error: compilation successful\n-  --> $DIR/issue-40510-1.rs:20:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "776a724d3106af25ba69a9393465c34cc1408b54", "filename": "src/test/ui/issues/issue-40510-1.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr?ref=ddf43867a9cbb3766b48552632a602498fae2699", "patch": "@@ -1,13 +0,0 @@\n-error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-40510-1.rs:11:9\n-   |\n-LL |     || {\n-   |      - inferred to be a `FnMut` closure\n-LL |         &mut x\n-   |         ^^^^^^ returns a reference to a captured variable which escapes the closure body\n-   |\n-   = note: `FnMut` closures only have access to their captured variables while they are executing...\n-   = note: ...therefore, they cannot allow references to captured variables to escape\n-\n-error: aborting due to previous error\n-"}, {"sha": "ca53dcd9b41fad45a1596c67cabf76d1055fc4fc", "filename": "src/test/ui/issues/issue-40510-1.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,21 +1,12 @@\n-#![feature(rustc_attrs)]\n #![allow(unused)]\n \n-// revisions: migrate nll\n-#![cfg_attr(nll, feature(nll))]\n-\n fn f() {\n     let mut x: Box<()> = Box::new(());\n \n     || {\n         &mut x\n     };\n-    //[migrate]~^^ WARNING captured variable cannot escape `FnMut` closure body\n-    //[migrate]~| WARNING this error has been downgraded to a warning\n-    //[migrate]~| WARNING this warning will become a hard error in the future\n-    //[nll]~^^^^^ ERROR captured variable cannot escape `FnMut` closure body\n+    //~^^ ERROR captured variable cannot escape `FnMut` closure body\n }\n \n-#[rustc_error]\n fn main() {}\n-//[migrate]~^ ERROR"}, {"sha": "f4fda0abc2049285c9e502fafaaf75ffca37cad0", "filename": "src/test/ui/issues/issue-40510-1.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-40510-1.rs:11:9\n+  --> $DIR/issue-40510-1.rs:7:9\n    |\n LL |     || {\n    |      - inferred to be a `FnMut` closure", "previous_filename": "src/test/ui/issues/issue-40510-1.migrate.nll.stderr"}, {"sha": "a49475a8570a1edde617e98d5304ce50144eefc3", "filename": "src/test/ui/issues/issue-40510-3.migrate.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.migrate.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,4 +1,4 @@\n-warning: captured variable cannot escape `FnMut` closure body\n+error: captured variable cannot escape `FnMut` closure body\n   --> $DIR/issue-40510-3.rs:11:9\n    |\n LL |       || {\n@@ -10,15 +10,6 @@ LL | |         }\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-\n-error: compilation successful\n-  --> $DIR/issue-40510-3.rs:22:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a49475a8570a1edde617e98d5304ce50144eefc3", "filename": "src/test/ui/issues/issue-40510-3.nll.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr?ref=ddf43867a9cbb3766b48552632a602498fae2699", "patch": "@@ -1,15 +0,0 @@\n-error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-40510-3.rs:11:9\n-   |\n-LL |       || {\n-   |        - inferred to be a `FnMut` closure\n-LL | /         || {\n-LL | |             x.push(())\n-LL | |         }\n-   | |_________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n-   |\n-   = note: `FnMut` closures only have access to their captured variables while they are executing...\n-   = note: ...therefore, they cannot allow references to captured variables to escape\n-\n-error: aborting due to previous error\n-"}, {"sha": "181263adcbfa8902f7c610634a7658215951a56a", "filename": "src/test/ui/issues/issue-40510-3.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,23 +1,14 @@\n-#![feature(rustc_attrs)]\n #![allow(unused)]\n \n-// revisions: migrate nll\n-#![cfg_attr(nll, feature(nll))]\n-\n fn f() {\n     let mut x: Vec<()> = Vec::new();\n \n     || {\n         || {\n             x.push(())\n         }\n-        //[migrate]~^^^ WARNING captured variable cannot escape `FnMut` closure body\n-        //[migrate]~| WARNING this error has been downgraded to a warning\n-        //[migrate]~| WARNING this warning will become a hard error in the future\n-        //[nll]~^^^^^^ ERROR captured variable cannot escape `FnMut` closure body\n+        //~^^^ ERROR captured variable cannot escape `FnMut` closure body\n     };\n }\n \n-#[rustc_error]\n fn main() {}\n-//[migrate]~^ ERROR"}, {"sha": "4bc7d0f5deac59db8baeeb5cacd2a2a4cc45529b", "filename": "src/test/ui/issues/issue-40510-3.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-40510-3.rs:11:9\n+  --> $DIR/issue-40510-3.rs:7:9\n    |\n LL |       || {\n    |        - inferred to be a `FnMut` closure", "previous_filename": "src/test/ui/issues/issue-40510-3.migrate.nll.stderr"}, {"sha": "bd18784289fe2c3aa2b0677886c67b7995d6fed7", "filename": "src/test/ui/issues/issue-45157.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-45157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-45157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45157.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,4 @@\n #![allow(unused)]\n-#![feature(nll)]\n \n // ignore-tidy-linelength\n "}, {"sha": "1b879e0b48c87bf31de83c766261d5befde66b12", "filename": "src/test/ui/issues/issue-45157.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-45157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-45157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45157.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `u` (via `u.z.c`) as immutable because it is also borrowed as mutable (via `u.s.a`)\n-  --> $DIR/issue-45157.rs:29:20\n+  --> $DIR/issue-45157.rs:28:20\n    |\n LL |         let mref = &mut u.s.a;\n    |                    ---------- mutable borrow occurs here (via `u.s.a`)"}, {"sha": "2e99572d018281ab1174e744c756be8c131e856b", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.migrate.stderr", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr?ref=ddf43867a9cbb3766b48552632a602498fae2699", "patch": "@@ -1,60 +0,0 @@\n-warning[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:52:5\n-   |\n-LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n-   |              -- lifetime `'a` defined here\n-LL |     &mut *s.0\n-   |     ^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n-...\n-LL | }\n-   | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-\n-warning[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:63:5\n-   |\n-LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n-   |                    -- lifetime `'a` defined here\n-LL |     &mut *(*s).0\n-   |     ^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n-...\n-LL | }\n-   | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-\n-warning[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:74:5\n-   |\n-LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n-   |                          -- lifetime `'a` defined here\n-LL |     &mut *(**s).0\n-   |     ^^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n-...\n-LL | }\n-   | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-\n-error: compilation successful\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:81:1\n-   |\n-LL | / fn main() {\n-LL | |     let mut x = 1;\n-LL | |     {\n-LL | |         let mut long_lived = Scribble(&mut x);\n-...  |\n-LL | |     *boxed_boxed_scribbled(Box::new(Box::new(Scribble(&mut x)))) += 10;\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0713`."}, {"sha": "db0a1719922c8425f46e8be964ef9557981368d5", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.nll.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,33 +1,30 @@\n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:52:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:34:5\n    |\n LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n    |              -- lifetime `'a` defined here\n LL |     &mut *s.0\n    |     ^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n-...\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:63:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:39:5\n    |\n LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n    |                    -- lifetime `'a` defined here\n LL |     &mut *(*s).0\n    |     ^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n-...\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:74:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:44:5\n    |\n LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n    |                          -- lifetime `'a` defined here\n LL |     &mut *(**s).0\n    |     ^^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n-...\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n "}, {"sha": "637cf278f840832dbe9a2348fac256cb7f519b3f", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.rs", "status": "modified", "additions": 5, "deletions": 39, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,28 +1,14 @@\n // rust-lang/rust#45696: This test is checking that we *cannot* return\n // mutable borrows that would be scribbled over by destructors before\n // the return occurs.\n-//\n-// We will explicitly test NLL, and migration modes;\n-// thus we will also skip the automated compare-mode=nll.\n \n-// revisions: nll migrate\n-// ignore-compare-mode-nll\n // ignore-compare-mode-polonius\n \n-// This test is going to pass in the migrate revision, because the AST-borrowck\n-// accepted this code in the past (see notes below). So we use `#[rustc_error]`\n-// to keep the outcome as an error in all scenarios, and rely on the stderr\n-// files to show what the actual behavior is. (See rust-lang/rust#49855.)\n-#![feature(rustc_attrs)]\n-\n-#![cfg_attr(nll, feature(nll))]\n-\n struct Scribble<'a>(&'a mut u32);\n \n impl<'a> Drop for Scribble<'a> { fn drop(&mut self) { *self.0 = 42; } }\n \n-// this is okay, in both AST-borrowck and NLL: The `Scribble` here *has*\n-// to strictly outlive `'a`\n+// this is okay: The `Scribble` here *has* to strictly outlive `'a`\n fn borrowed_scribble<'a>(s: &'a mut Scribble) -> &'a mut u32 {\n     &mut *s.0\n }\n@@ -44,41 +30,21 @@ fn boxed_boxed_borrowed_scribble<'a>(s: Box<Box<&'a mut Scribble>>) -> &'a mut u\n // * (Maybe in the future the two-phase borrows system will be\n //   extended to support this case. But for now, it is an error in\n //   NLL, even with two-phase borrows.)\n-//\n-// In any case, the AST-borrowck was not smart enough to know that\n-// this should be an error. (Which is perhaps the essence of why\n-// rust-lang/rust#45696 arose in the first place.)\n fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n-    &mut *s.0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n-    //[migrate]~^ WARNING borrow may still be in use when destructor runs [E0713]\n-    //[migrate]~| WARNING this error has been downgraded to a warning for backwards compatibility\n-    //[migrate]~| WARNING this represents potential undefined behavior in your code\n+    &mut *s.0 //~ ERROR borrow may still be in use when destructor runs [E0713]\n }\n \n // This, by analogy to previous case, is *also* not okay.\n-//\n-// (But again, AST-borrowck was not smart enogh to know that this\n-// should be an error.)\n fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n-    &mut *(*s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n-    //[migrate]~^ WARNING borrow may still be in use when destructor runs [E0713]\n-    //[migrate]~| WARNING this error has been downgraded to a warning for backwards compatibility\n-    //[migrate]~| WARNING this represents potential undefined behavior in your code\n+    &mut *(*s).0 //~ ERROR borrow may still be in use when destructor runs [E0713]\n }\n \n // This, by analogy to previous case, is *also* not okay.\n-//\n-// (But again, AST-borrowck was not smart enogh to know that this\n-// should be an error.)\n fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n-    &mut *(**s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n-    //[migrate]~^ WARNING borrow may still be in use when destructor runs [E0713]\n-    //[migrate]~| WARNING this error has been downgraded to a warning for backwards compatibility\n-    //[migrate]~| WARNING this represents potential undefined behavior in your code\n+    &mut *(**s).0 //~ ERROR borrow may still be in use when destructor runs [E0713]\n }\n \n-#[rustc_error]\n-fn main() { //[migrate]~ ERROR compilation successful\n+fn main() {\n     let mut x = 1;\n     {\n         let mut long_lived = Scribble(&mut x);"}, {"sha": "db0a1719922c8425f46e8be964ef9557981368d5", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -0,0 +1,33 @@\n+error[E0713]: borrow may still be in use when destructor runs\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:34:5\n+   |\n+LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n+   |              -- lifetime `'a` defined here\n+LL |     &mut *s.0\n+   |     ^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n+LL | }\n+   | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n+\n+error[E0713]: borrow may still be in use when destructor runs\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:39:5\n+   |\n+LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n+   |                    -- lifetime `'a` defined here\n+LL |     &mut *(*s).0\n+   |     ^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n+LL | }\n+   | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n+\n+error[E0713]: borrow may still be in use when destructor runs\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:44:5\n+   |\n+LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n+   |                          -- lifetime `'a` defined here\n+LL |     &mut *(**s).0\n+   |     ^^^^^^^^^^^^^ returning this value requires that `*s.0` is borrowed for `'a`\n+LL | }\n+   | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0713`."}, {"sha": "9c6f8d4532a70ab7d895afaedf103424a5ea11ff", "filename": "src/test/ui/issues/issue-49824.nll.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr?ref=ddf43867a9cbb3766b48552632a602498fae2699", "patch": "@@ -1,18 +0,0 @@\n-error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-49824.rs:10:9\n-   |\n-LL |       || {\n-   |        - inferred to be a `FnMut` closure\n-LL | /         || {\n-LL | |\n-LL | |\n-LL | |\n-LL | |             let _y = &mut x;\n-LL | |         }\n-   | |_________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n-   |\n-   = note: `FnMut` closures only have access to their captured variables while they are executing...\n-   = note: ...therefore, they cannot allow references to captured variables to escape\n-\n-error: aborting due to previous error\n-"}, {"sha": "bc1cd6856bc92b576218bc7f5f21e1cfe709499b", "filename": "src/test/ui/issues/issue-49824.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-49824.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-49824.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49824.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,16 +1,8 @@\n-#![feature(rustc_attrs)]\n-\n-// This test checks that a warning occurs with migrate mode.\n-\n-#[rustc_error]\n fn main() {\n-    //~^ ERROR compilation successful\n     let mut x = 0;\n     || {\n         || {\n-        //~^ WARNING captured variable cannot escape `FnMut` closure body\n-        //~| WARNING this error has been downgraded to a warning\n-        //~| WARNING this warning will become a hard error in the future\n+        //~^ ERROR captured variable cannot escape `FnMut` closure body\n             let _y = &mut x;\n         }\n     };"}, {"sha": "6b486aafcdf40e65f4abd847a3413a296ff78499", "filename": "src/test/ui/issues/issue-49824.stderr", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-49824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-49824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49824.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,33 +1,16 @@\n-warning: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-49824.rs:10:9\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-49824.rs:4:9\n    |\n LL |       || {\n    |        - inferred to be a `FnMut` closure\n LL | /         || {\n LL | |\n-LL | |\n-LL | |\n LL | |             let _y = &mut x;\n LL | |         }\n    | |_________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n-\n-error: compilation successful\n-  --> $DIR/issue-49824.rs:6:1\n-   |\n-LL | / fn main() {\n-LL | |\n-LL | |     let mut x = 0;\n-LL | |     || {\n-...  |\n-LL | |     };\n-LL | | }\n-   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "2db51ea6042aa533d2caaa6cb5b6978094bb4072", "filename": "src/test/ui/issues/issue-64732.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-64732.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-64732.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64732.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -0,0 +1,9 @@\n+#![allow(unused)]\n+fn main() {\n+    let _foo = b'hello\\0';\n+    //~^ ERROR character literal may only contain one codepoint\n+    //~| HELP if you meant to write a byte string literal, use double quotes\n+    let _bar = 'hello';\n+    //~^ ERROR character literal may only contain one codepoint\n+    //~| HELP if you meant to write a `str` literal, use double quotes\n+}"}, {"sha": "fc0e8e3bdb20f6b464f105abb2ca238eb0fa5a29", "filename": "src/test/ui/issues/issue-64732.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-64732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fissues%2Fissue-64732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64732.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -0,0 +1,22 @@\n+error: character literal may only contain one codepoint\n+  --> $DIR/issue-64732.rs:3:17\n+   |\n+LL |     let _foo = b'hello\\0';\n+   |                 ^^^^^^^^^\n+help: if you meant to write a byte string literal, use double quotes\n+   |\n+LL |     let _foo = b\"hello\\0\";\n+   |                 ^^^^^^^^^\n+\n+error: character literal may only contain one codepoint\n+  --> $DIR/issue-64732.rs:6:16\n+   |\n+LL |     let _bar = 'hello';\n+   |                ^^^^^^^\n+help: if you meant to write a `str` literal, use double quotes\n+   |\n+LL |     let _bar = \"hello\";\n+   |                ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "0cd8e956d309f40e4642567265830900de9b936a", "filename": "src/test/ui/nll/borrowed-match-issue-45045.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,7 +1,5 @@\n // Regression test for issue #45045\n \n-#![feature(nll)]\n-\n enum Xyz {\n     A,\n     B,"}, {"sha": "1607304e6716b541d03abdcf158adc706dd939d1", "filename": "src/test/ui/nll/borrowed-match-issue-45045.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0503]: cannot use `e` because it was mutably borrowed\n-  --> $DIR/borrowed-match-issue-45045.rs:15:9\n+  --> $DIR/borrowed-match-issue-45045.rs:13:9\n    |\n LL |     let f = &mut e;\n    |             ------ borrow of `e` occurs here"}, {"sha": "1fe1332832a14d17fccf9e3e40dbcbfaba83c5b0", "filename": "src/test/ui/nll/borrowed-referent-issue-38899.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,7 +1,5 @@\n // Regression test for issue #38899\n \n-#![feature(nll)]\n-\n pub struct Block<'a> {\n     current: &'a u8,\n     unrelated: &'a u8,"}, {"sha": "16588cbcfb285aeda8cc07fb4ef3f32c045d3f86", "filename": "src/test/ui/nll/borrowed-referent-issue-38899.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowed-referent-issue-38899.rs:13:21\n+  --> $DIR/borrowed-referent-issue-38899.rs:11:21\n    |\n LL |     let x = &mut block;\n    |             ---------- mutable borrow occurs here"}, {"sha": "99922cc51b0d1bd497b572b72c76049e9632f789", "filename": "src/test/ui/nll/do-not-ignore-lifetime-bounds-in-copy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,7 +1,5 @@\n // Test that the 'static bound from the Copy impl is respected. Regression test for #29149.\n \n-#![feature(nll)]\n-\n #[derive(Clone)] struct Foo<'a>(&'a u32);\n impl Copy for Foo<'static> {}\n "}, {"sha": "b811ba4fd0cd2a4c12456083ecd99e1b03efd004", "filename": "src/test/ui/nll/do-not-ignore-lifetime-bounds-in-copy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `s` does not live long enough\n-  --> $DIR/do-not-ignore-lifetime-bounds-in-copy.rs:10:17\n+  --> $DIR/do-not-ignore-lifetime-bounds-in-copy.rs:8:17\n    |\n LL |     let a = Foo(&s);\n    |                 ^^ borrowed value does not live long enough"}, {"sha": "5ef0c3fe73dbf8e46376aec4e594b5d1e127aa17", "filename": "src/test/ui/nll/enum-drop-access.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fenum-drop-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fenum-drop-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fenum-drop-access.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n enum DropOption<T> {\n     Some(T),\n     None,"}, {"sha": "a532ae121a6efabf898bac634285f46af84ef966", "filename": "src/test/ui/nll/enum-drop-access.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fenum-drop-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fenum-drop-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fenum-drop-access.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/enum-drop-access.rs:15:31\n+  --> $DIR/enum-drop-access.rs:13:31\n    |\n LL | fn drop_enum(opt: DropOption<&mut i32>) -> Option<&mut i32> {\n    |                              - let's call the lifetime of this reference `'1`\n@@ -13,7 +13,7 @@ LL | }\n    | - here, drop of `opt` needs exclusive access to `*opt.0`, because the type `DropOption<&mut i32>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/enum-drop-access.rs:24:36\n+  --> $DIR/enum-drop-access.rs:22:36\n    |\n LL | fn optional_drop_enum(opt: Option<DropOption<&mut i32>>) -> Option<&mut i32> {\n    |                                              - let's call the lifetime of this reference `'1`"}, {"sha": "1836f766cc7ef8a9a6ddd88ee0de134ac303fc28", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -12,8 +12,6 @@\n // tests that are meant to continue failing to compile once\n // rust-lang/rust#54987 is implemented.\n \n-#![feature(nll)]\n-\n struct S<Y> {\n     x: u32,\n "}, {"sha": "9e69262b38900f464262a465a0762b0bb1cdd1dc", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,17 +1,17 @@\n error[E0381]: assign to part of possibly-uninitialized variable: `s`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:99:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:97:5\n    |\n LL |     s.x = 10; s.y = Box::new(20);\n    |     ^^^^^^^^ use of possibly-uninitialized `s`\n \n error[E0381]: assign to part of possibly-uninitialized variable: `t`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:106:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:104:5\n    |\n LL |     t.0 = 10; t.1 = Box::new(20);\n    |     ^^^^^^^^ use of possibly-uninitialized `t`\n \n error[E0382]: assign to part of moved value: `s`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:113:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:111:5\n    |\n LL |     let mut s: S<B> = S::new(); drop(s);\n    |         -----                        - value moved here\n@@ -21,7 +21,7 @@ LL |     s.x = 10; s.y = Box::new(20);\n    |     ^^^^^^^^ value partially assigned here after move\n \n error[E0382]: assign to part of moved value: `t`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:120:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:118:5\n    |\n LL |     let mut t: T = (0, Box::new(0)); drop(t);\n    |         -----                             - value moved here\n@@ -31,19 +31,19 @@ LL |     t.0 = 10; t.1 = Box::new(20);\n    |     ^^^^^^^^ value partially assigned here after move\n \n error[E0381]: assign to part of possibly-uninitialized variable: `s`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:127:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:125:5\n    |\n LL |     s.x = 10;\n    |     ^^^^^^^^ use of possibly-uninitialized `s`\n \n error[E0381]: assign to part of possibly-uninitialized variable: `t`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:134:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:132:5\n    |\n LL |     t.0 = 10;\n    |     ^^^^^^^^ use of possibly-uninitialized `t`\n \n error[E0382]: assign to part of moved value: `s`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:141:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:139:5\n    |\n LL |     let mut s: S<B> = S::new(); drop(s);\n    |         -----                        - value moved here\n@@ -53,7 +53,7 @@ LL |     s.x = 10;\n    |     ^^^^^^^^ value partially assigned here after move\n \n error[E0382]: assign to part of moved value: `t`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:148:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:146:5\n    |\n LL |     let mut t: T = (0, Box::new(0)); drop(t);\n    |         -----                             - value moved here\n@@ -63,31 +63,31 @@ LL |     t.0 = 10;\n    |     ^^^^^^^^ value partially assigned here after move\n \n error[E0381]: assign to part of possibly-uninitialized variable: `s`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:155:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:153:5\n    |\n LL |     s.x = 10;\n    |     ^^^^^^^^ use of possibly-uninitialized `s`\n \n error[E0381]: assign to part of possibly-uninitialized variable: `t`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:162:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:160:5\n    |\n LL |     t.0 = 10;\n    |     ^^^^^^^^ use of possibly-uninitialized `t`\n \n error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:178:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:176:5\n    |\n LL |     q.r.f.x = 10; q.r.f.y = Box::new(20);\n    |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:185:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:183:5\n    |\n LL |     q.r.f.0 = 10; q.r.f.1 = Box::new(20);\n    |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n error[E0382]: assign to part of moved value: `q.r`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:192:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:190:5\n    |\n LL |     let mut q: Q<S<B>> = Q::new(S::new()); drop(q.r);\n    |                                                 --- value moved here\n@@ -97,7 +97,7 @@ LL |     q.r.f.x = 10; q.r.f.y = Box::new(20);\n    = note: move occurs because `q.r` has type `R<S<std::boxed::Box<u32>>>`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `q.r`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:199:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:197:5\n    |\n LL |     let mut q: Q<T> = Q::new((0, Box::new(0))); drop(q.r);\n    |                                                      --- value moved here\n@@ -107,19 +107,19 @@ LL |     q.r.f.0 = 10; q.r.f.1 = Box::new(20);\n    = note: move occurs because `q.r` has type `R<(u32, std::boxed::Box<u32>)>`, which does not implement the `Copy` trait\n \n error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:206:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:204:5\n    |\n LL |     q.r.f.x = 10;\n    |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:213:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:211:5\n    |\n LL |     q.r.f.0 = 10;\n    |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n error[E0382]: assign to part of moved value: `q.r`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:220:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:218:5\n    |\n LL |     let mut q: Q<S<B>> = Q::new(S::new()); drop(q.r);\n    |                                                 --- value moved here\n@@ -129,7 +129,7 @@ LL |     q.r.f.x = 10;\n    = note: move occurs because `q.r` has type `R<S<std::boxed::Box<u32>>>`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `q.r`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:227:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:225:5\n    |\n LL |     let mut q: Q<T> = Q::new((0, Box::new(0))); drop(q.r);\n    |                                                      --- value moved here\n@@ -139,19 +139,19 @@ LL |     q.r.f.0 = 10;\n    = note: move occurs because `q.r` has type `R<(u32, std::boxed::Box<u32>)>`, which does not implement the `Copy` trait\n \n error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:234:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:232:5\n    |\n LL |     q.r.f.x = 10;\n    |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n error[E0381]: assign to part of possibly-uninitialized variable: `q`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:241:5\n+  --> $DIR/issue-21232-partial-init-and-use.rs:239:5\n    |\n LL |     q.r.f.0 = 10;\n    |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`\n \n error[E0382]: assign to part of moved value: `c`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:259:13\n+  --> $DIR/issue-21232-partial-init-and-use.rs:257:13\n    |\n LL |     let mut c = (1, \"\".to_owned());\n    |         ----- move occurs because `c` has type `(i32, std::string::String)`, which does not implement the `Copy` trait\n@@ -162,7 +162,7 @@ LL |             c.0 = 2;\n    |             ^^^^^^^ value partially assigned here after move\n \n error[E0382]: assign to part of moved value: `c`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:269:13\n+  --> $DIR/issue-21232-partial-init-and-use.rs:267:13\n    |\n LL |     let mut c = (1, (1, \"\".to_owned()));\n    |         ----- move occurs because `c` has type `(i32, (i32, std::string::String))`, which does not implement the `Copy` trait\n@@ -173,7 +173,7 @@ LL |             (c.1).0 = 2;\n    |             ^^^^^^^^^^^ value partially assigned here after move\n \n error[E0382]: assign to part of moved value: `c.1`\n-  --> $DIR/issue-21232-partial-init-and-use.rs:277:13\n+  --> $DIR/issue-21232-partial-init-and-use.rs:275:13\n    |\n LL |         c2 => {\n    |         -- value moved here"}, {"sha": "e436b22dbaad45ebe3edb296bd2f565c6b8d5d82", "filename": "src/test/ui/nll/issue-27868.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-27868.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-27868.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27868.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,7 +1,5 @@\n // Regression test for issue #27868\n \n-#![feature(nll)]\n-\n use std::ops::AddAssign;\n \n struct MyVec<T>(Vec<T>);"}, {"sha": "e0b3b5494d0a574b53f2d1fa035277500359dcc2", "filename": "src/test/ui/nll/issue-27868.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-27868.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-27868.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27868.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `vecvec` because it is borrowed\n-  --> $DIR/issue-27868.rs:26:9\n+  --> $DIR/issue-27868.rs:24:9\n    |\n LL |       vecvec[0] += {\n    |       ------"}, {"sha": "623954e6d5b94d2659580a53af350543152dd484", "filename": "src/test/ui/nll/issue-31567.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-31567.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-31567.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-31567.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -2,8 +2,6 @@\n // causing region relations not to be enforced at all the places where\n // they have to be enforced.\n \n-#![feature(nll)]\n-\n struct VecWrapper<'a>(&'a mut S);\n \n struct S(Box<u32>);"}, {"sha": "7d43383e89fd72a8543d61f614dbe73c98b0a205", "filename": "src/test/ui/nll/issue-31567.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-31567.rs:12:26\n+  --> $DIR/issue-31567.rs:10:26\n    |\n LL | fn get_dangling<'a>(v: VecWrapper<'a>) -> &'a u32 {\n    |                 -- lifetime `'a` defined here"}, {"sha": "d2e9285fa4137bd4ae3669066dc1285830063528", "filename": "src/test/ui/nll/issue-48238.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-48238.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-48238.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48238.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,7 +1,5 @@\n // Regression test for issue #48238\n \n-#![feature(nll)]\n-\n fn use_val<'a>(val: &'a u8) -> &'a u8 {\n     val\n }"}, {"sha": "0aa1eedad9fd9f297f1ed413edc0f794b3af13b3", "filename": "src/test/ui/nll/issue-48238.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-48238.rs:11:13\n+  --> $DIR/issue-48238.rs:9:13\n    |\n LL |     move || use_val(&orig);\n    |     ------- ^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`"}, {"sha": "7ea1c445d143e3266dc544afaf3462915134927a", "filename": "src/test/ui/nll/issue-52059-report-when-borrow-and-drop-conflict.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -3,8 +3,6 @@\n // one of its fields, it is useful to be reminded of the significance\n // of the fact that the type implements Drop.\n \n-#![feature(nll)]\n-\n pub struct S<'a> { url: &'a mut String }\n \n impl<'a> Drop for S<'a> { fn drop(&mut self) { } }"}, {"sha": "1a1250ff9353f5ee28d53eefd8901d187ab27b9f", "filename": "src/test/ui/nll/issue-52059-report-when-borrow-and-drop-conflict.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:13:5\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:11:5\n    |\n LL | fn finish_1(s: S) -> &mut String {\n    |             - has type `S<'1>`\n@@ -9,7 +9,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.url`, because the type `S<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:18:13\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:16:13\n    |\n LL | fn finish_2(s: S) -> &mut String {\n    |             - has type `S<'1>`\n@@ -19,7 +19,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.url`, because the type `S<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:23:21\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:21:21\n    |\n LL | fn finish_3(s: S) -> &mut String {\n    |             - has type `S<'1>`\n@@ -29,7 +29,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.url`, because the type `S<'_>` implements the `Drop` trait\n \n error[E0509]: cannot move out of type `S<'_>`, which implements the `Drop` trait\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:28:13\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:26:13\n    |\n LL |     let p = s.url; p\n    |             ^^^^^"}, {"sha": "e4ee6e913f6839fa26aeef24e01bcca55138568e", "filename": "src/test/ui/nll/issue-53040.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-53040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-53040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53040.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn main() {\n     let mut v: Vec<()> = Vec::new();\n     || &mut v;"}, {"sha": "7cba32c67432cc4cde4576a9614bab1a9cf37da2", "filename": "src/test/ui/nll/issue-53040.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-53040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-53040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53040.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-53040.rs:5:8\n+  --> $DIR/issue-53040.rs:3:8\n    |\n LL |     || &mut v;\n    |      - ^^^^^^ returns a reference to a captured variable which escapes the closure body"}, {"sha": "ed971b6ce0e1bece139e12acded8b1e20e7e87d5", "filename": "src/test/ui/nll/issue-53773.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-53773.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-53773.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53773.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct Archive;\n struct ArchiveIterator<'a> {\n     x: &'a Archive,"}, {"sha": "45831460e5238e35b149d718352cfc74aeffd533", "filename": "src/test/ui/nll/issue-53773.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-53773.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-53773.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53773.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-53773.rs:43:22\n+  --> $DIR/issue-53773.rs:41:22\n    |\n LL |         members.push(child.raw);\n    |                      ^^^^^^^^^"}, {"sha": "c7f3e9d730367a3ba7b04d0388501c08b7f277da", "filename": "src/test/ui/nll/issue-57100.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-57100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-57100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57100.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,4 @@\n #![allow(unused)]\n-#![feature(nll)]\n \n // ignore-tidy-linelength\n "}, {"sha": "5f733c14036b00a3c02abd705360a14854ecf501", "filename": "src/test/ui/nll/issue-57100.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-57100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fissue-57100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57100.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `r.r2_union.f3_union` (via `r.r2_union.f3_union.s2_leaf.l1_u8`) as immutable because it is also borrowed as mutable (via `r.r2_union.f3_union.s1_leaf.l1_u8`)\n-  --> $DIR/issue-57100.rs:44:20\n+  --> $DIR/issue-57100.rs:43:20\n    |\n LL |         let mref = &mut r.r2_union.f3_union.s1_leaf.l1_u8;\n    |                    -------------------------------------- mutable borrow occurs here (via `r.r2_union.f3_union.s1_leaf.l1_u8`)\n@@ -13,7 +13,7 @@ LL |         println!(\"{} {}\", mref, nref)\n    = note: `r.r2_union.f3_union.s2_leaf.l1_u8` is a field of the union `Second`, so it overlaps the field `r.r2_union.f3_union.s1_leaf.l1_u8`\n \n error[E0502]: cannot borrow `r.r2_union` (via `r.r2_union.f1_leaf.l1_u8`) as immutable because it is also borrowed as mutable (via `r.r2_union.f2_leaf.l1_u8`)\n-  --> $DIR/issue-57100.rs:62:20\n+  --> $DIR/issue-57100.rs:61:20\n    |\n LL |         let mref = &mut r.r2_union.f2_leaf.l1_u8;\n    |                    ----------------------------- mutable borrow occurs here (via `r.r2_union.f2_leaf.l1_u8`)"}, {"sha": "87dba187ba2c2ed4ba4f343f3c4df8588306403b", "filename": "src/test/ui/nll/match-guards-always-borrow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // Here is arielb1's basic example from rust-lang/rust#27282\n // that AST borrowck is flummoxed by:\n "}, {"sha": "15f94043b430f2aa80405637d80eacc8a49a26e4", "filename": "src/test/ui/nll/match-guards-always-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/match-guards-always-borrow.rs:10:14\n+  --> $DIR/match-guards-always-borrow.rs:8:14\n    |\n LL |             (|| { let bar = foo; bar.take() })();\n    |              ^^             ---"}, {"sha": "aba0a7f71f5c1ff2505ecf54abd1cb0bdd6a2dae", "filename": "src/test/ui/nll/match-on-borrowed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -5,8 +5,6 @@\n // Test that we don't allow mutating the value being matched on in a way that\n // changes which patterns it matches, until we have chosen an arm.\n \n-#![feature(nll)]\n-\n struct A(i32, i32);\n \n fn struct_example(mut a: A) {"}, {"sha": "f9c9a84632212376d32108a57c1043bb134ec80c", "filename": "src/test/ui/nll/match-on-borrowed.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -1,5 +1,5 @@\n error[E0503]: cannot use `e` because it was mutably borrowed\n-  --> $DIR/match-on-borrowed.rs:51:9\n+  --> $DIR/match-on-borrowed.rs:49:9\n    |\n LL |         E::V(ref mut x, _) => x,\n    |              --------- borrow of `e.0` occurs here\n@@ -11,7 +11,7 @@ LL |     x;\n    |     - borrow later used here\n \n error[E0503]: cannot use `*f` because it was mutably borrowed\n-  --> $DIR/match-on-borrowed.rs:64:9\n+  --> $DIR/match-on-borrowed.rs:62:9\n    |\n LL |         E::V(ref mut x, _) => x,\n    |              --------- borrow of `f.0` occurs here\n@@ -23,7 +23,7 @@ LL |     x;\n    |     - borrow later used here\n \n error[E0503]: cannot use `t` because it was mutably borrowed\n-  --> $DIR/match-on-borrowed.rs:82:9\n+  --> $DIR/match-on-borrowed.rs:80:9\n    |\n LL |     let x = &mut t;\n    |             ------ borrow of `t` occurs here\n@@ -35,7 +35,7 @@ LL |     x;\n    |     - borrow later used here\n \n error[E0381]: use of possibly-uninitialized variable: `n`\n-  --> $DIR/match-on-borrowed.rs:92:11\n+  --> $DIR/match-on-borrowed.rs:90:11\n    |\n LL |     match n {}\n    |           ^ use of possibly-uninitialized `n`"}, {"sha": "35ee7877f2f7836e52af2c853c35e9e26ca5f69f", "filename": "src/test/ui/pattern/pattern-bindings-after-at.nll.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.nll.stderr?ref=ddf43867a9cbb3766b48552632a602498fae2699", "patch": "@@ -1,22 +0,0 @@\n-error[E0303]: pattern bindings are not allowed after an `@`\n-  --> $DIR/pattern-bindings-after-at.rs:8:31\n-   |\n-LL |         ref mut z @ &mut Some(ref a) => {\n-   |                               ^^^^^ not allowed after `@`\n-\n-error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/pattern-bindings-after-at.rs:8:31\n-   |\n-LL |         ref mut z @ &mut Some(ref a) => {\n-   |         ----------------------^^^^^-\n-   |         |                     |\n-   |         |                     immutable borrow occurs here\n-   |         mutable borrow occurs here\n-...\n-LL |             **z = None;\n-   |             ---------- mutable borrow later used here\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0303, E0502.\n-For more information about an error, try `rustc --explain E0303`."}, {"sha": "aff7264752de268b7204e288e083b9edc56e9252", "filename": "src/test/ui/pattern/pattern-bindings-after-at.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -7,9 +7,7 @@ fn main() {\n     match &mut Some(1) {\n         ref mut z @ &mut Some(ref a) => {\n         //~^ ERROR pattern bindings are not allowed after an `@`\n-        //~| WARN cannot borrow `_` as immutable because it is also borrowed as mutable\n-        //~| WARN this error has been downgraded to a warning for backwards compatibility\n-        //~| WARN this represents potential undefined behavior in your code and this warning will\n+        //~| ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n             **z = None;\n             println!(\"{}\", *a);\n         }"}, {"sha": "35ee7877f2f7836e52af2c853c35e9e26ca5f69f", "filename": "src/test/ui/pattern/pattern-bindings-after-at.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -4,7 +4,7 @@ error[E0303]: pattern bindings are not allowed after an `@`\n LL |         ref mut z @ &mut Some(ref a) => {\n    |                               ^^^^^ not allowed after `@`\n \n-warning[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n+error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n   --> $DIR/pattern-bindings-after-at.rs:8:31\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n@@ -15,12 +15,8 @@ LL |         ref mut z @ &mut Some(ref a) => {\n ...\n LL |             **z = None;\n    |             ---------- mutable borrow later used here\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0303, E0502.\n For more information about an error, try `rustc --explain E0303`."}, {"sha": "38421e2e6ef50de934a02a0f2b4be230a4aa3741", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -39,6 +39,10 @@ mod missing_version {\n     #[stable(feature = \"a\", since = \"b\")]\n     #[rustc_deprecated(reason = \"a\")] //~ ERROR missing 'since' [E0542]\n     fn f2() { }\n+\n+    #[stable(feature = \"a\", since = \"b\")]\n+    #[rustc_deprecated(since = \"a\")] //~ ERROR missing 'reason' [E0543]\n+    fn f3() { }\n }\n \n #[unstable(feature = \"b\", issue = \"0\")]"}, {"sha": "4b7ec821f458baebebc419ff0c60803d44eb9e86", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -58,48 +58,54 @@ error[E0542]: missing 'since'\n LL |     #[rustc_deprecated(reason = \"a\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0543]: missing 'reason'\n+  --> $DIR/stability-attribute-sanity.rs:44:5\n+   |\n+LL |     #[rustc_deprecated(since = \"a\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0544]: multiple stability levels\n-  --> $DIR/stability-attribute-sanity.rs:45:1\n+  --> $DIR/stability-attribute-sanity.rs:49:1\n    |\n LL | #[stable(feature = \"a\", since = \"b\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0544]: multiple stability levels\n-  --> $DIR/stability-attribute-sanity.rs:49:1\n+  --> $DIR/stability-attribute-sanity.rs:53:1\n    |\n LL | #[unstable(feature = \"b\", issue = \"0\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0544]: multiple stability levels\n-  --> $DIR/stability-attribute-sanity.rs:53:1\n+  --> $DIR/stability-attribute-sanity.rs:57:1\n    |\n LL | #[stable(feature = \"a\", since = \"b\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0540]: multiple rustc_deprecated attributes\n-  --> $DIR/stability-attribute-sanity.rs:61:1\n+  --> $DIR/stability-attribute-sanity.rs:65:1\n    |\n LL | pub const fn multiple4() { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0553]: multiple rustc_const_unstable attributes\n-  --> $DIR/stability-attribute-sanity.rs:61:1\n+  --> $DIR/stability-attribute-sanity.rs:65:1\n    |\n LL | pub const fn multiple4() { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Invalid stability or deprecation version found\n-  --> $DIR/stability-attribute-sanity.rs:61:1\n+  --> $DIR/stability-attribute-sanity.rs:65:1\n    |\n LL | pub const fn multiple4() { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0549]: rustc_deprecated attribute must be paired with either stable or unstable attribute\n-  --> $DIR/stability-attribute-sanity.rs:66:1\n+  --> $DIR/stability-attribute-sanity.rs:70:1\n    |\n LL | fn deprecated_without_unstable_or_stable() { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 18 previous errors\n \n For more information about this error, try `rustc --explain E0541`."}, {"sha": "18d01b1879018abfcd70489121fb71436fcb0dd1", "filename": "src/test/ui/thread-local-in-ctfe.nll.stderr", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fthread-local-in-ctfe.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftest%2Fui%2Fthread-local-in-ctfe.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-in-ctfe.nll.stderr?ref=ddf43867a9cbb3766b48552632a602498fae2699", "patch": "@@ -1,49 +0,0 @@\n-error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:6:17\n-   |\n-LL | static B: u32 = A;\n-   |                 ^\n-\n-error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:9:18\n-   |\n-LL | static C: &u32 = &A;\n-   |                  ^^\n-\n-error[E0712]: thread-local variable borrowed past end of function\n-  --> $DIR/thread-local-in-ctfe.rs:9:18\n-   |\n-LL | static C: &u32 = &A;\n-   |                  ^^- end of enclosing function is here\n-   |                  |\n-   |                  thread-local variables cannot be borrowed beyond the end of the function\n-\n-error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:15:16\n-   |\n-LL | const D: u32 = A;\n-   |                ^\n-\n-error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:18:17\n-   |\n-LL | const E: &u32 = &A;\n-   |                 ^^\n-\n-error[E0712]: thread-local variable borrowed past end of function\n-  --> $DIR/thread-local-in-ctfe.rs:18:17\n-   |\n-LL | const E: &u32 = &A;\n-   |                 ^^- end of enclosing function is here\n-   |                 |\n-   |                 thread-local variables cannot be borrowed beyond the end of the function\n-\n-error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:25:5\n-   |\n-LL |     A\n-   |     ^\n-\n-error: aborting due to 7 previous errors\n-\n-For more information about this error, try `rustc --explain E0712`."}, {"sha": "722c3883fdda4da58bfb7ae106b7cb2d79a9982a", "filename": "src/test/ui/thread-local-in-ctfe.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fthread-local-in-ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fthread-local-in-ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-in-ctfe.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -8,18 +8,14 @@ static B: u32 = A;\n \n static C: &u32 = &A;\n //~^ ERROR thread-local statics cannot be accessed at compile-time\n-//~| WARNING thread-local variable borrowed past end of function\n-//~| WARNING this error has been downgraded to a warning\n-//~| WARNING this warning will become a hard error in the future\n+//~| ERROR thread-local variable borrowed past end of function\n \n const D: u32 = A;\n //~^ ERROR thread-local statics cannot be accessed at compile-time\n \n const E: &u32 = &A;\n //~^ ERROR thread-local statics cannot be accessed at compile-time\n-//~| WARNING thread-local variable borrowed past end of function\n-//~| WARNING this error has been downgraded to a warning\n-//~| WARNING this warning will become a hard error in the future\n+//~| ERROR thread-local variable borrowed past end of function\n \n const fn f() -> u32 {\n     A"}, {"sha": "2983ac3f60cf2fbbd951ba0124f3635a41a9c00b", "filename": "src/test/ui/thread-local-in-ctfe.stderr", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fthread-local-in-ctfe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftest%2Fui%2Fthread-local-in-ctfe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-in-ctfe.stderr?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -10,48 +10,40 @@ error[E0625]: thread-local statics cannot be accessed at compile-time\n LL | static C: &u32 = &A;\n    |                  ^^\n \n-warning[E0712]: thread-local variable borrowed past end of function\n+error[E0712]: thread-local variable borrowed past end of function\n   --> $DIR/thread-local-in-ctfe.rs:9:18\n    |\n LL | static C: &u32 = &A;\n    |                  ^^- end of enclosing function is here\n    |                  |\n    |                  thread-local variables cannot be borrowed beyond the end of the function\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:15:16\n+  --> $DIR/thread-local-in-ctfe.rs:13:16\n    |\n LL | const D: u32 = A;\n    |                ^\n \n error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:18:17\n+  --> $DIR/thread-local-in-ctfe.rs:16:17\n    |\n LL | const E: &u32 = &A;\n    |                 ^^\n \n-warning[E0712]: thread-local variable borrowed past end of function\n-  --> $DIR/thread-local-in-ctfe.rs:18:17\n+error[E0712]: thread-local variable borrowed past end of function\n+  --> $DIR/thread-local-in-ctfe.rs:16:17\n    |\n LL | const E: &u32 = &A;\n    |                 ^^- end of enclosing function is here\n    |                 |\n    |                 thread-local variables cannot be borrowed beyond the end of the function\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n error[E0625]: thread-local statics cannot be accessed at compile-time\n-  --> $DIR/thread-local-in-ctfe.rs:25:5\n+  --> $DIR/thread-local-in-ctfe.rs:21:5\n    |\n LL |     A\n    |     ^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0712`."}, {"sha": "3aa3883b701d16e13807caa36dcccdd553b7c560", "filename": "src/tools/cargotest/lockfiles/iron-Cargo.lock", "status": "removed", "additions": 0, "deletions": 457, "changes": 457, "blob_url": "https://github.com/rust-lang/rust/blob/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftools%2Fcargotest%2Flockfiles%2Firon-Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ddf43867a9cbb3766b48552632a602498fae2699/src%2Ftools%2Fcargotest%2Flockfiles%2Firon-Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Flockfiles%2Firon-Cargo.lock?ref=ddf43867a9cbb3766b48552632a602498fae2699", "patch": "@@ -1,457 +0,0 @@\n-[root]\n-name = \"iron\"\n-version = \"0.5.1\"\n-dependencies = [\n- \"conduit-mime-types 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hyper 0.10.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hyper-native-tls 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mime 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"modifier 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"plugin 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"time 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"typemap 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"advapi32-sys\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"antidote\"\n-version = \"1.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"bitflags\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"conduit-mime-types\"\n-version = \"0.7.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"core-foundation\"\n-version = \"0.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"core-foundation-sys 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"core-foundation-sys\"\n-version = \"0.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"crypt32-sys\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"foreign-types\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"gcc\"\n-version = \"0.3.45\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"gdi32-sys\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"httparse\"\n-version = \"1.2.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"hyper\"\n-version = \"0.10.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"httparse 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"language-tags 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mime 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc_version 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"time 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"traitobject 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"typeable 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicase 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"hyper-native-tls\"\n-version = \"0.2.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"antidote 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hyper 0.10.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"native-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"idna\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-bidi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-normalization 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"kernel32-sys\"\n-version = \"0.2.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"language-tags\"\n-version = \"0.2.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"lazy_static\"\n-version = \"0.2.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"libc\"\n-version = \"0.2.21\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"log\"\n-version = \"0.3.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"matches\"\n-version = \"0.1.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"mime\"\n-version = \"0.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"modifier\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"native-tls\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"openssl 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"schannel 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"security-framework 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"security-framework-sys 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"num_cpus\"\n-version = \"1.3.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"openssl\"\n-version = \"0.9.10\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"foreign-types 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"openssl-sys\"\n-version = \"0.9.10\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gdi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"user32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"pkg-config\"\n-version = \"0.3.9\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"plugin\"\n-version = \"0.2.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"typemap 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"rand\"\n-version = \"0.3.15\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"redox_syscall\"\n-version = \"0.1.17\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"rustc-serialize\"\n-version = \"0.3.23\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"rustc_version\"\n-version = \"0.1.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"semver 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"schannel\"\n-version = \"0.1.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"advapi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crypt32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"secur32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"secur32-sys\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"security-framework\"\n-version = \"0.1.13\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"core-foundation 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"core-foundation-sys 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"security-framework-sys 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"security-framework-sys\"\n-version = \"0.1.13\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"core-foundation-sys 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"semver\"\n-version = \"0.1.20\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"tempdir\"\n-version = \"0.3.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"time\"\n-version = \"0.1.36\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"traitobject\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"typeable\"\n-version = \"0.1.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"typemap\"\n-version = \"0.3.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"unsafe-any 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"unicase\"\n-version = \"1.4.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"rustc_version 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"unicode-bidi\"\n-version = \"0.2.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"unicode-normalization\"\n-version = \"0.1.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"unsafe-any\"\n-version = \"0.4.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"traitobject 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"url\"\n-version = \"1.4.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"idna 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"user32-sys\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"winapi\"\n-version = \"0.2.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"winapi-build\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[metadata]\n-\"checksum advapi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e06588080cb19d0acb6739808aafa5f26bfb2ca015b2b6370028b44cf7cb8a9a\"\n-\"checksum antidote 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34fde25430d87a9388dadbe6e34d7f72a462c8b43ac8d309b42b0a8505d7e2a5\"\n-\"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n-\"checksum conduit-mime-types 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"95ca30253581af809925ef68c2641cc140d6183f43e12e0af4992d53768bd7b8\"\n-\"checksum core-foundation 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25bfd746d203017f7d5cbd31ee5d8e17f94b6521c7af77ece6c9e4b2d4b16c67\"\n-\"checksum core-foundation-sys 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"065a5d7ffdcbc8fa145d6f0746f3555025b9097a9e9cda59f7467abae670c78d\"\n-\"checksum crypt32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e34988f7e069e0b2f3bfc064295161e489b2d4e04a2e4248fb94360cdf00b4ec\"\n-\"checksum foreign-types 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e4056b9bd47f8ac5ba12be771f77a0dae796d1bbaaf5fd0b9c2d38b69b8a29d\"\n-\"checksum gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40899336fb50db0c78710f53e87afc54d8c7266fb76262fecc78ca1a7f09deae\"\n-\"checksum gdi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0912515a8ff24ba900422ecda800b52f4016a56251922d397c576bf92c690518\"\n-\"checksum httparse 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a6e7a63e511f9edffbab707141fbb8707d1a3098615fb2adbd5769cdfcc9b17d\"\n-\"checksum hyper 0.10.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"43a15e3273b2133aaac0150478ab443fb89f15c3de41d8d93d8f3bb14bf560f6\"\n-\"checksum hyper-native-tls 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afe68f772f0497a7205e751626bb8e1718568b58534b6108c73a74ef80483409\"\n-\"checksum idna 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1053236e00ce4f668aeca4a769a09b3bf5a682d802abd6f3cb39374f6b162c11\"\n-\"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum language-tags 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a91d884b6667cd606bb5a69aa0c99ba811a115fc68915e7056ec08a46e93199a\"\n-\"checksum lazy_static 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4732c563b9a21a406565c4747daa7b46742f082911ae4753f390dc9ec7ee1a97\"\n-\"checksum libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88ee81885f9f04bff991e306fea7c1c60a5f0f9e409e99f6b40e3311a3363135\"\n-\"checksum log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5141eca02775a762cc6cd564d8d2c50f67c0ea3a372cbf1c51592b3e029e10ad\"\n-\"checksum matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"efd7622e3022e1a6eaa602c4cea8912254e5582c9c692e9167714182244801b1\"\n-\"checksum mime 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5514f038123342d01ee5f95129e4ef1e0470c93bc29edf058a46f9ee3ba6737e\"\n-\"checksum modifier 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41f5c9112cb662acd3b204077e0de5bc66305fa8df65c8019d5adb10e9ab6e58\"\n-\"checksum native-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b805ee0e8fa268f67a4e5c7f4f80adb8af1fc4428ea0ce5b0ecab1430ef17ec0\"\n-\"checksum num_cpus 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a18c392466409c50b87369414a2680c93e739aedeb498eb2bff7d7eb569744e2\"\n-\"checksum openssl 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8aa0eb7aad44f0da6f7dda13ddb4559d91a0f40cfab150b1f76ad5b39ec523f\"\n-\"checksum openssl-sys 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"14f5bfd12054d764510b887152d564ba11d99ae24ea7d740781778f646620576\"\n-\"checksum pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a8b4c6b8165cd1a1cd4b9b120978131389f64bdaf456435caa41e630edba903\"\n-\"checksum plugin 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1a6a0dc3910bc8db877ffed8e457763b317cf880df4ae19109b9f77d277cf6e0\"\n-\"checksum rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"022e0636ec2519ddae48154b028864bdce4eaf7d35226ab8e65c611be97b189d\"\n-\"checksum redox_syscall 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"29dbdfd4b9df8ab31dec47c6087b7b13cbf4a776f335e4de8efba8288dda075b\"\n-\"checksum rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"684ce48436d6465300c9ea783b6b14c4361d6b8dcbb1375b486a69cc19e2dfb0\"\n-\"checksum rustc_version 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c5f5376ea5e30ce23c03eb77cbe4962b988deead10910c372b226388b594c084\"\n-\"checksum schannel 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8b291854e37196c2b67249e09d6bdeff410b19e1acf05558168e9c4413b4e95\"\n-\"checksum secur32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3f412dfa83308d893101dd59c10d6fda8283465976c28c287c5c855bf8d216bc\"\n-\"checksum security-framework 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2a8396fe671bb1f80fa3f4ff2aae0e968de16ef18d37a4e5e514771a1f07726e\"\n-\"checksum security-framework-sys 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"573b031c5f672b298cca566fac71aceea00e41bc925e75b5ec7b44dc7237180a\"\n-\"checksum semver 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4f410fedcf71af0345d7607d246e7ad15faaadd49d240ee3b24e5dc21a820ac\"\n-\"checksum tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87974a6f5c1dfb344d733055601650059a3363de2a6104819293baff662132d6\"\n-\"checksum time 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\" = \"211b63c112206356ef1ff9b19355f43740fc3f85960c598a93d3a3d3ba7beade\"\n-\"checksum traitobject 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"efd1f82c56340fdf16f2a953d7bda4f8fdffba13d93b00844c25572110b26079\"\n-\"checksum typeable 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1410f6f91f21d1612654e7cc69193b0334f909dcf2c790c4826254fbb86f8887\"\n-\"checksum typemap 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"653be63c80a3296da5551e1bfd2cca35227e13cdd08c6668903ae2f4f77aa1f6\"\n-\"checksum unicase 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13a5906ca2b98c799f4b1ab4557b76367ebd6ae5ef14930ec841c74aed5f3764\"\n-\"checksum unicode-bidi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3a078ebdd62c0e71a709c3d53d2af693fe09fe93fbff8344aebe289b78f9032\"\n-\"checksum unicode-normalization 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e28fa37426fceeb5cf8f41ee273faa7c82c47dc8fba5853402841e665fcd86ff\"\n-\"checksum unsafe-any 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b351086021ebc264aea3ab4f94d61d889d98e5e9ec2d985d993f50133537fd3a\"\n-\"checksum url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5ba8a749fb4479b043733416c244fa9d1d3af3d7c23804944651c8a448cb87e\"\n-\"checksum user32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ef4711d107b21b410a3a974b1204d9accc8b10dad75d8324b5d755de1617d47\"\n-\"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n-\"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\""}, {"sha": "bdbc544d4fc3bd6aa0784c26279eb666b9f61bf1", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1521ffb73133999c378c434b41046d673377d9/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=0b1521ffb73133999c378c434b41046d673377d9", "patch": "@@ -17,8 +17,8 @@ const TEST_REPOS: &'static [Test] = &[\n     Test {\n         name: \"iron\",\n         repo: \"https://github.com/iron/iron\",\n-        sha: \"21c7dae29c3c214c08533c2a55ac649b418f2fe3\",\n-        lock: Some(include_str!(\"lockfiles/iron-Cargo.lock\")),\n+        sha: \"cf056ea5e8052c1feea6141e40ab0306715a2c33\",\n+        lock: None,\n         packages: &[],\n     },\n     Test {\n@@ -61,7 +61,7 @@ const TEST_REPOS: &'static [Test] = &[\n     Test {\n         name: \"webrender\",\n         repo: \"https://github.com/servo/webrender\",\n-        sha: \"cdadd068f4c7218bd983d856981d561e605270ab\",\n+        sha: \"a3d6e6894c5a601fa547c6273eb963ca1321c2bb\",\n         lock: None,\n         packages: &[],\n     },"}]}