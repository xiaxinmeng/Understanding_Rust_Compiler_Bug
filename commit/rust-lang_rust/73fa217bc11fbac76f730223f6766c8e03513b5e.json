{"sha": "73fa217bc11fbac76f730223f6766c8e03513b5e", "node_id": "C_kwDOAAsO6NoAKDczZmEyMTdiYzExZmJhYzc2ZjczMDIyM2Y2NzY2YzhlMDM1MTNiNWU", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-26T05:17:33Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-29T01:05:20Z"}, "message": "errors: `span_suggestion` takes `impl ToString`\n\nChange `span_suggestion` (and variants) to take `impl ToString` rather\nthan `String` for the suggested code, as this simplifies the\nrequirements on the diagnostic derive.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "f3ea6722ec56cb9ae2188d69088c378b717544d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3ea6722ec56cb9ae2188d69088c378b717544d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73fa217bc11fbac76f730223f6766c8e03513b5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73fa217bc11fbac76f730223f6766c8e03513b5e", "html_url": "https://github.com/rust-lang/rust/commit/73fa217bc11fbac76f730223f6766c8e03513b5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73fa217bc11fbac76f730223f6766c8e03513b5e/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baaa3b682986879c7784b5733ecea942e9ae7de3", "url": "https://api.github.com/repos/rust-lang/rust/commits/baaa3b682986879c7784b5733ecea942e9ae7de3", "html_url": "https://github.com/rust-lang/rust/commit/baaa3b682986879c7784b5733ecea942e9ae7de3"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "fe5e3c5a81b61dda07296fe4e8f9a249bf75cabc", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -237,7 +237,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     err.span_suggestion_verbose(\n                         span,\n                         \"consider changing this to be mutable\",\n-                        \" mut \".into(),\n+                        \" mut \",\n                         Applicability::MaybeIncorrect,\n                     );\n                 }"}, {"sha": "b49331e28753db194fcfa5cc1470473d866382f5", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -235,7 +235,7 @@ fn validate_default_attribute(\n             .span_suggestion_hidden(\n                 attr.span,\n                 \"try using `#[default]`\",\n-                \"#[default]\".into(),\n+                \"#[default]\",\n                 Applicability::MaybeIncorrect,\n             )\n             .emit();"}, {"sha": "39cb71848ebdd7808cb634816f721af650526d6d", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -605,7 +605,7 @@ impl Diagnostic {\n         &mut self,\n         sp: Span,\n         msg: impl Into<DiagnosticMessage>,\n-        suggestion: String,\n+        suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self {\n         self.span_suggestion_with_style(\n@@ -623,13 +623,13 @@ impl Diagnostic {\n         &mut self,\n         sp: Span,\n         msg: impl Into<DiagnosticMessage>,\n-        suggestion: String,\n+        suggestion: impl ToString,\n         applicability: Applicability,\n         style: SuggestionStyle,\n     ) -> &mut Self {\n         self.push_suggestion(CodeSuggestion {\n             substitutions: vec![Substitution {\n-                parts: vec![SubstitutionPart { snippet: suggestion, span: sp }],\n+                parts: vec![SubstitutionPart { snippet: suggestion.to_string(), span: sp }],\n             }],\n             msg: msg.into(),\n             style,\n@@ -643,7 +643,7 @@ impl Diagnostic {\n         &mut self,\n         sp: Span,\n         msg: impl Into<DiagnosticMessage>,\n-        suggestion: String,\n+        suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self {\n         self.span_suggestion_with_style(\n@@ -711,7 +711,7 @@ impl Diagnostic {\n         &mut self,\n         sp: Span,\n         msg: impl Into<DiagnosticMessage>,\n-        suggestion: String,\n+        suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self {\n         self.span_suggestion_with_style(\n@@ -734,7 +734,7 @@ impl Diagnostic {\n         &mut self,\n         sp: Span,\n         msg: impl Into<DiagnosticMessage>,\n-        suggestion: String,\n+        suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self {\n         self.span_suggestion_with_style(\n@@ -755,7 +755,7 @@ impl Diagnostic {\n         &mut self,\n         sp: Span,\n         msg: impl Into<DiagnosticMessage>,\n-        suggestion: String,\n+        suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self {\n         self.span_suggestion_with_style("}, {"sha": "efc7693459fc908e595a4e4afb1f5dfd958e5ee4", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -477,7 +477,7 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n         &mut self,\n         sp: Span,\n         msg: impl Into<DiagnosticMessage>,\n-        suggestion: String,\n+        suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self);\n     forward!(pub fn span_suggestions(\n@@ -497,28 +497,28 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n         &mut self,\n         sp: Span,\n         msg: impl Into<DiagnosticMessage>,\n-        suggestion: String,\n+        suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self);\n     forward!(pub fn span_suggestion_verbose(\n         &mut self,\n         sp: Span,\n         msg: impl Into<DiagnosticMessage>,\n-        suggestion: String,\n+        suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self);\n     forward!(pub fn span_suggestion_hidden(\n         &mut self,\n         sp: Span,\n         msg: impl Into<DiagnosticMessage>,\n-        suggestion: String,\n+        suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self);\n     forward!(pub fn tool_only_span_suggestion(\n         &mut self,\n         sp: Span,\n         msg: impl Into<DiagnosticMessage>,\n-        suggestion: String,\n+        suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self);\n "}, {"sha": "c91125105d746a6c2431a892e49f29e307f116aa", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -511,7 +511,7 @@ pub fn parse_cfg<'a>(meta_item: &'a MetaItem, sess: &Session) -> Option<&'a Meta\n             err.span_suggestion(\n                 span,\n                 \"expected syntax is\",\n-                suggestion.into(),\n+                suggestion,\n                 Applicability::HasPlaceholders,\n             );\n         }"}, {"sha": "14555ad92559d2d89dfb340f9d94e460f7cad077", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -2198,7 +2198,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             err.span_suggestion(\n                 span.with_hi(before_close).shrink_to_hi(),\n                 msg,\n-                \",\".into(),\n+                \",\",\n                 Applicability::MachineApplicable,\n             );\n         } else {"}, {"sha": "dff2e31c6070c67bbe8478aeb9c81bff8f8d09f6", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -129,7 +129,7 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n                 diag.span_suggestion(\n                     call.ident.span,\n                     \"use `.iter()` instead of `.into_iter()` to avoid ambiguity\",\n-                    \"iter\".into(),\n+                    \"iter\",\n                     Applicability::MachineApplicable,\n                 );\n                 if self.for_expr_span == expr.span {"}, {"sha": "d7cd5ec04f323a74dafce65c9cc9932b60a54f6c", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -738,7 +738,7 @@ pub trait LintContext: Sized {\n                     db.span_suggestion_verbose(\n                         span.shrink_to_hi(),\n                         \"insert whitespace here to avoid this being parsed as a prefix in Rust 2021\",\n-                        \" \".into(),\n+                        \" \",\n                         Applicability::MachineApplicable,\n                     );\n                 }"}, {"sha": "71769fceec1f2994c98bc6d9a478fc2e6cbc1b4c", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -176,7 +176,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                 l.span_suggestion_verbose(\n                     arg_span.shrink_to_lo(),\n                     \"add a \\\"{}\\\" format string to Display the message\",\n-                    \"\\\"{}\\\", \".into(),\n+                    \"\\\"{}\\\", \",\n                     fmt_applicability,\n                 );\n             } else if suggest_debug {\n@@ -186,7 +186,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                         \"add a \\\"{{:?}}\\\" format string to use the Debug implementation of `{}`\",\n                         ty,\n                     ),\n-                    \"\\\"{:?}\\\", \".into(),\n+                    \"\\\"{:?}\\\", \",\n                     fmt_applicability,\n                 );\n             }\n@@ -266,13 +266,13 @@ fn check_panic_str<'tcx>(\n                 l.span_suggestion(\n                     arg.span.shrink_to_hi(),\n                     &format!(\"add the missing argument{}\", pluralize!(n_arguments)),\n-                    \", ...\".into(),\n+                    \", ...\",\n                     Applicability::HasPlaceholders,\n                 );\n                 l.span_suggestion(\n                     arg.span.shrink_to_lo(),\n                     \"or add a \\\"{}\\\" format string to use the message literally\",\n-                    \"\\\"{}\\\", \".into(),\n+                    \"\\\"{}\\\", \",\n                     Applicability::MachineApplicable,\n                 );\n             }\n@@ -297,7 +297,7 @@ fn check_panic_str<'tcx>(\n                 l.span_suggestion(\n                     arg.span.shrink_to_lo(),\n                     \"add a \\\"{}\\\" format string to use the message literally\",\n-                    \"\\\"{}\\\", \".into(),\n+                    \"\\\"{}\\\", \",\n                     Applicability::MachineApplicable,\n                 );\n             }"}, {"sha": "ee54dd44f7194e7fc48ec1291e5f54a0578f5527", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -612,14 +612,14 @@ impl<'a> StringReader<'a> {\n                 err.span_suggestion_verbose(\n                     prefix_span,\n                     \"use `br` for a raw byte string\",\n-                    \"br\".to_string(),\n+                    \"br\",\n                     Applicability::MaybeIncorrect,\n                 );\n             } else if expn_data.is_root() {\n                 err.span_suggestion_verbose(\n                     prefix_span.shrink_to_hi(),\n                     \"consider inserting whitespace here\",\n-                    \" \".into(),\n+                    \" \",\n                     Applicability::MaybeIncorrect,\n                 );\n             }"}, {"sha": "13e9a5e660fe63f381392e67a9f5a34ca3666aa6", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -1771,7 +1771,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion(\n                 token.span,\n                 \"must have an integer part\",\n-                pprust::token_to_string(token).into(),\n+                pprust::token_to_string(token),\n                 Applicability::MachineApplicable,\n             )\n             .emit();\n@@ -2324,7 +2324,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion_short(\n                 span,\n                 msg,\n-                sugg.into(),\n+                sugg,\n                 // Has been misleading, at least in the past (closed Issue #48492).\n                 Applicability::MaybeIncorrect,\n             )\n@@ -2828,7 +2828,7 @@ impl<'a> Parser<'a> {\n                             e.span_suggestion(\n                                 self.prev_token.span.shrink_to_hi(),\n                                 \"try adding a comma\",\n-                                \",\".into(),\n+                                \",\",\n                                 Applicability::MachineApplicable,\n                             );\n                         }"}, {"sha": "10f1daf11295107540cd1d6d180741c3db06c49d", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -332,7 +332,7 @@ impl<'a> Parser<'a> {\n             err.span_suggestion_short(\n                 sp,\n                 &msg,\n-                \" struct \".into(),\n+                \" struct \",\n                 Applicability::MaybeIncorrect, // speculative\n             );\n             Err(err)\n@@ -532,13 +532,13 @@ impl<'a> Parser<'a> {\n                 .span_suggestion(\n                     span,\n                     \"add a trait here\",\n-                    \" Trait \".into(),\n+                    \" Trait \",\n                     Applicability::HasPlaceholders,\n                 )\n                 .span_suggestion(\n                     span.to(self.token.span),\n                     \"for an inherent impl, drop this `for`\",\n-                    \"\".into(),\n+                    \"\",\n                     Applicability::MaybeIncorrect,\n                 )\n                 .emit();\n@@ -1459,7 +1459,7 @@ impl<'a> Parser<'a> {\n                         err.span_suggestion(\n                             sp,\n                             \"missing comma here\",\n-                            \",\".into(),\n+                            \",\",\n                             Applicability::MachineApplicable,\n                         );\n                     }\n@@ -1498,7 +1498,7 @@ impl<'a> Parser<'a> {\n                     err.span_suggestion(\n                         sp,\n                         \"try adding a comma\",\n-                        \",\".into(),\n+                        \",\",\n                         Applicability::MachineApplicable,\n                     );\n                     err.emit();"}, {"sha": "cd61584a876620c7dddc3a624730599015d7db81", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -802,7 +802,7 @@ impl<'a> Parser<'a> {\n                                     .span_suggestion_verbose(\n                                         self.prev_token.span.shrink_to_hi().until(self.token.span),\n                                         &msg,\n-                                        \" @ \".to_string(),\n+                                        \" @ \",\n                                         Applicability::MaybeIncorrect,\n                                     )\n                                     .emit();\n@@ -818,7 +818,7 @@ impl<'a> Parser<'a> {\n                                         .span_suggestion_short(\n                                             sp,\n                                             &format!(\"missing `{}`\", token_str),\n-                                            token_str.into(),\n+                                            token_str,\n                                             Applicability::MaybeIncorrect,\n                                         )\n                                         .emit();"}, {"sha": "8019c5fb67cb9b46f255e6141e4b468d3b364c6e", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -606,7 +606,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion(\n                 mutref_span,\n                 \"try switching the order\",\n-                \"ref mut\".into(),\n+                \"ref mut\",\n                 Applicability::MachineApplicable,\n             )\n             .emit();"}, {"sha": "650a0dc82ce2338cc130c518c1807dd70631af9e", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -851,7 +851,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 .span_suggestion(\n                     item.span,\n                     \"rename the `self` crate to be able to import it\",\n-                    \"extern crate self as name;\".into(),\n+                    \"extern crate self as name;\",\n                     Applicability::HasPlaceholders,\n                 )\n                 .emit();"}, {"sha": "5462d913fb4414bf554e3c73d1bd5f0697493413", "filename": "src/tools/clippy/clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -108,7 +108,7 @@ fn check_needless_must_use(\n                 diag.span_suggestion(\n                     attr.span,\n                     \"remove the attribute\",\n-                    \"\".into(),\n+                    \"\",\n                     Applicability::MachineApplicable,\n                 );\n             },"}, {"sha": "4034079a90c0d097cbece091e56c388c3068c229", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73fa217bc11fbac76f730223f6766c8e03513b5e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa217bc11fbac76f730223f6766c8e03513b5e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=73fa217bc11fbac76f730223f6766c8e03513b5e", "patch": "@@ -241,7 +241,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                                 |x| Cow::from(format!(\"change `{}` to\", x)),\n                                             )\n                                             .as_ref(),\n-                                        suggestion.into(),\n+                                        suggestion,\n                                         Applicability::Unspecified,\n                                     );\n                                 }\n@@ -271,7 +271,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                                 |x| Cow::from(format!(\"change `{}` to\", x))\n                                             )\n                                             .as_ref(),\n-                                        suggestion.into(),\n+                                        suggestion,\n                                         Applicability::Unspecified,\n                                     );\n                                 }"}]}