{"sha": "28dd4d974e1d3ebcaef43fd58b5f263653b97271", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZGQ0ZDk3NGUxZDNlYmNhZWY0M2ZkNThiNWYyNjM2NTNiOTcyNzE=", "commit": {"author": {"name": "Sam", "email": "slancia@cisco.com", "date": "2018-01-03T15:03:00Z"}, "committer": {"name": "Sam", "email": "slancia@cisco.com", "date": "2018-01-03T15:03:00Z"}, "message": "Restore working debuginfo tests by trimming comments from non-header directive lines", "tree": {"sha": "6971a45f437f7ac8bd690028ba07826b54259210", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6971a45f437f7ac8bd690028ba07826b54259210"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28dd4d974e1d3ebcaef43fd58b5f263653b97271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28dd4d974e1d3ebcaef43fd58b5f263653b97271", "html_url": "https://github.com/rust-lang/rust/commit/28dd4d974e1d3ebcaef43fd58b5f263653b97271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28dd4d974e1d3ebcaef43fd58b5f263653b97271/comments", "author": null, "committer": null, "parents": [{"sha": "b9cf26c38acf60fb1d7d88d914a22824b82ed829", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9cf26c38acf60fb1d7d88d914a22824b82ed829", "html_url": "https://github.com/rust-lang/rust/commit/b9cf26c38acf60fb1d7d88d914a22824b82ed829"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "1f8acb53101222fdc862f3b61d2ae4f3d7eec44d", "filename": "src/test/debuginfo/should-fail.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/28dd4d974e1d3ebcaef43fd58b5f263653b97271/src%2Ftest%2Fdebuginfo%2Fshould-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dd4d974e1d3ebcaef43fd58b5f263653b97271/src%2Ftest%2Fdebuginfo%2Fshould-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fshould-fail.rs?ref=28dd4d974e1d3ebcaef43fd58b5f263653b97271", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// min-lldb-version: 310\n+\n+// == Test [gdb|lldb]-[command|check] are parsed correctly ===\n+// should-fail\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command: run\n+\n+// gdb-command: print x\n+// gdb-check:$1 = 5\n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print x\n+// lldb-check:[...]$0 = 5\n+\n+fn main() {\n+    let x = 1;\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() {()}\n+"}, {"sha": "43a868a531f53b030a7afdc63a7c466eff209e9f", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28dd4d974e1d3ebcaef43fd58b5f263653b97271/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dd4d974e1d3ebcaef43fd58b5f263653b97271/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=28dd4d974e1d3ebcaef43fd58b5f263653b97271", "patch": "@@ -901,6 +901,13 @@ impl<'test> TestCx<'test> {\n         for line in reader.lines() {\n             match line {\n                 Ok(line) => {\n+                    let line =\n+                        if line.starts_with(\"//\") {\n+                            line[2..].trim_left()\n+                        } else {\n+                            line.as_str()\n+                        };\n+\n                     if line.contains(\"#break\") {\n                         breakpoint_lines.push(counter);\n                     }"}]}