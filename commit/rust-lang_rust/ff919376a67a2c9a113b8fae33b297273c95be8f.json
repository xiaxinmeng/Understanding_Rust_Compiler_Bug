{"sha": "ff919376a67a2c9a113b8fae33b297273c95be8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmOTE5Mzc2YTY3YTJjOWExMTNiOGZhZTMzYjI5NzI3M2M5NWJlOGY=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-08-18T18:36:42Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-08-18T19:24:35Z"}, "message": "rustup", "tree": {"sha": "3f8ee257cafb23e2ee2d1b852287e12651037951", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f8ee257cafb23e2ee2d1b852287e12651037951"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff919376a67a2c9a113b8fae33b297273c95be8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff919376a67a2c9a113b8fae33b297273c95be8f", "html_url": "https://github.com/rust-lang/rust/commit/ff919376a67a2c9a113b8fae33b297273c95be8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff919376a67a2c9a113b8fae33b297273c95be8f/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c07c0af571321b574dc3585d630ad37089417d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c07c0af571321b574dc3585d630ad37089417d0", "html_url": "https://github.com/rust-lang/rust/commit/4c07c0af571321b574dc3585d630ad37089417d0"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "2a0fca63e5dcbe303c9917982d005c7ec190d961", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff919376a67a2c9a113b8fae33b297273c95be8f/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff919376a67a2c9a113b8fae33b297273c95be8f/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=ff919376a67a2c9a113b8fae33b297273c95be8f", "patch": "@@ -106,7 +106,8 @@ fn check_hash_peq<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, span: Span, trait_re\n             let trait_ref = cx.tcx.impl_trait_ref(impl_id).expect(\"must be a trait implementation\");\n \n             // Only care about `impl PartialEq<Foo> for Foo`\n-            if trait_ref.input_types()[0] == ty {\n+            // For `impl PartialEq<B> for A, input_types is [A, B]\n+            if trait_ref.input_types()[1] == ty {\n                 let mess = if peq_is_automatically_derived {\n                     \"you are implementing `Hash` explicitly but have derived `PartialEq`\"\n                 } else {"}, {"sha": "0dc6d5a3b4e9bd1cf2e37ed2c761932156ca3c6d", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff919376a67a2c9a113b8fae33b297273c95be8f/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff919376a67a2c9a113b8fae33b297273c95be8f/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=ff919376a67a2c9a113b8fae33b297273c95be8f", "patch": "@@ -2,7 +2,6 @@ use rustc::hir;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::const_qualif::ConstQualif;\n-use rustc::ty::subst::TypeSpace;\n use rustc::ty;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::eval_const_expr_partial;\n@@ -1085,7 +1084,7 @@ fn get_error_type<'a>(cx: &LateContext, ty: ty::Ty<'a>) -> Option<ty::Ty<'a>> {\n         return None;\n     }\n     if let ty::TyEnum(_, substs) = ty.sty {\n-        if let Some(err_ty) = substs.types.opt_get(TypeSpace, 1) {\n+        if let Some(err_ty) = substs.types.get(1) {\n             return Some(err_ty);\n         }\n     }"}, {"sha": "9cd17a07d715b79a6c9a9b5a5291e9bc6d367109", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff919376a67a2c9a113b8fae33b297273c95be8f/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff919376a67a2c9a113b8fae33b297273c95be8f/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=ff919376a67a2c9a113b8fae33b297273c95be8f", "patch": "@@ -3,7 +3,6 @@\n //! This lint is **warn** by default\n \n use rustc::lint::{LintPass, LintArray, LateLintPass, LateContext};\n-use rustc::ty::subst::ParamSpace;\n use rustc::ty;\n use rustc::hir::Expr;\n use syntax::ast;\n@@ -60,7 +59,7 @@ impl LateLintPass for MutexAtomic {\n         let ty = cx.tcx.expr_ty(expr);\n         if let ty::TyStruct(_, subst) = ty.sty {\n             if match_type(cx, ty, &paths::MUTEX) {\n-                let mutex_param = &subst.types.get(ParamSpace::TypeSpace, 0).sty;\n+                let mutex_param = &subst.types[0].sty;\n                 if let Some(atomic_name) = get_atomic_name(mutex_param) {\n                     let msg = format!(\"Consider using an {} instead of a Mutex here. If you just want the locking \\\n                                        behaviour and not the internal type, consider using Mutex<()>.\","}, {"sha": "6943cb2a8f084e4f83b76df45ea391c6e7c9ffa4", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff919376a67a2c9a113b8fae33b297273c95be8f/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff919376a67a2c9a113b8fae33b297273c95be8f/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=ff919376a67a2c9a113b8fae33b297273c95be8f", "patch": "@@ -89,7 +89,7 @@ fn check_vec_macro(cx: &LateContext, vec_args: &higher::VecArgs, span: Span) {\n /// Return the item type of the vector (ie. the `T` in `Vec<T>`).\n fn vec_type(ty: ty::Ty) -> ty::Ty {\n     if let ty::TyStruct(_, substs) = ty.sty {\n-        substs.types.get(ty::subst::ParamSpace::TypeSpace, 0)\n+        substs.types[0]\n     } else {\n         panic!(\"The type of `vec!` is a not a struct?\");\n     }"}]}