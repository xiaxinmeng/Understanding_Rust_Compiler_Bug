{"sha": "ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNTZjMTVjZWIzZThhNmEzMGM0NmE0YjdhMTEyNGQyMDg2YjU4NzQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-19T15:52:11Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-21T05:45:35Z"}, "message": "remove `NoSendItem` and `NoSyncItem`", "tree": {"sha": "782bdaa63a427d3908186a1283ce1c7dc2851651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/782bdaa63a427d3908186a1283ce1c7dc2851651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874", "html_url": "https://github.com/rust-lang/rust/commit/ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874/comments", "author": null, "committer": null, "parents": [{"sha": "29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "url": "https://api.github.com/repos/rust-lang/rust/commits/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "html_url": "https://github.com/rust-lang/rust/commit/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba"}], "stats": {"total": 14, "additions": 2, "deletions": 12}, "files": [{"sha": "3cbfad52c05239fddba07c90bae99337c9255f9e", "filename": "src/doc/reference.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874", "patch": "@@ -2377,10 +2377,6 @@ These types help drive the compiler's analysis\n   : ___Needs filling in___\n * `no_copy_bound`\n   : This type does not implement \"copy\", even if eligible.\n-* `no_send_bound`\n-  : This type does not implement \"send\", even if eligible.\n-* `no_sync_bound`\n-  : This type does not implement \"sync\", even if eligible.\n * `eh_personality`\n   : ___Needs filling in___\n * `exchange_free`"}, {"sha": "3acd1eefe89d06f1b7a8578eaa76c1ff7b4b13b4", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874", "patch": "@@ -707,7 +707,7 @@ Other features provided by lang items include:\n   various kinds; lang items `send`, `sync` and `copy`.\n - the marker types and variance indicators found in\n   `std::marker`; lang items `covariant_type`,\n-  `contravariant_lifetime`, `no_sync_bound`, etc.\n+  `contravariant_lifetime`, etc.\n \n Lang items are loaded lazily by the compiler; e.g. if one never uses\n `Box` then there is no need to define functions for `exchange_malloc`"}, {"sha": "2c0de9d16348618359f78709e9739e031031329e", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874", "patch": "@@ -320,9 +320,7 @@ lets_do_this! {\n     ContravariantLifetimeItem,       \"contravariant_lifetime\",  contravariant_lifetime;\n     InvariantLifetimeItem,           \"invariant_lifetime\",      invariant_lifetime;\n \n-    NoSendItem,                      \"no_send_bound\",           no_send_bound;\n     NoCopyItem,                      \"no_copy_bound\",           no_copy_bound;\n-    NoSyncItem,                      \"no_sync_bound\",           no_sync_bound;\n     ManagedItem,                     \"managed_bound\",           managed_bound;\n \n     NonZeroItem,                     \"non_zero\",                non_zero;"}, {"sha": "e8d82150ade4bd2888c9d06ad5c93b7e1beafd4d", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=ed56c15ceb3e8a6a30c46a4b7a1124d2086b5874", "patch": "@@ -1554,10 +1554,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let tcx = this.tcx();\n             match bound {\n                 ty::BoundSend => {\n-                    if\n-                        Some(def_id) == tcx.lang_items.no_send_bound() ||\n-                        Some(def_id) == tcx.lang_items.managed_bound()\n-                    {\n+                    if Some(def_id) == tcx.lang_items.managed_bound() {\n                         return Err(Unimplemented)\n                     }\n                 }\n@@ -1568,7 +1565,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 ty::BoundSync => {\n                     if\n-                        Some(def_id) == tcx.lang_items.no_sync_bound() ||\n                         Some(def_id) == tcx.lang_items.managed_bound() ||\n                         Some(def_id) == tcx.lang_items.unsafe_type()\n                     {"}]}