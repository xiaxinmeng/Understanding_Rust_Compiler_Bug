{"sha": "77a6a61f066af3dd693d8527a8a1bf5a446d295c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3YTZhNjFmMDY2YWYzZGQ2OTNkODUyN2E4YTFiZjVhNDQ2ZDI5NWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-06T06:30:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-06T06:30:17Z"}, "message": "Auto merge of #56307 - RalfJung:stacked-borrows-2-phase, r=oli-obk\n\nStacked borrows: Support 2 phase borrows\n\nSome infrastructure needed for Stacked Borrows to be able to handle 2-phase-borros.\n\nr? @oli-obk", "tree": {"sha": "91e06fbdd7d08f988b4014407bce1098c437ebb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e06fbdd7d08f988b4014407bce1098c437ebb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77a6a61f066af3dd693d8527a8a1bf5a446d295c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77a6a61f066af3dd693d8527a8a1bf5a446d295c", "html_url": "https://github.com/rust-lang/rust/commit/77a6a61f066af3dd693d8527a8a1bf5a446d295c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77a6a61f066af3dd693d8527a8a1bf5a446d295c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1839c144bc6db8c07945caacd449aa7f3a76cd47", "url": "https://api.github.com/repos/rust-lang/rust/commits/1839c144bc6db8c07945caacd449aa7f3a76cd47", "html_url": "https://github.com/rust-lang/rust/commit/1839c144bc6db8c07945caacd449aa7f3a76cd47"}, {"sha": "e6c8e9dc79896ab636205ddef4a180d7ecd7bbbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c8e9dc79896ab636205ddef4a180d7ecd7bbbc", "html_url": "https://github.com/rust-lang/rust/commit/e6c8e9dc79896ab636205ddef4a180d7ecd7bbbc"}], "stats": {"total": 146, "additions": 86, "deletions": 60}, "files": [{"sha": "c29872266312a553232e8dd0289a85aff7f4ee63", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 12, "deletions": 45, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=77a6a61f066af3dd693d8527a8a1bf5a446d295c", "patch": "@@ -193,51 +193,18 @@ for mir::TerminatorKind<'gcx> {\n \n impl_stable_hash_for!(struct mir::Statement<'tcx> { source_info, kind });\n \n-impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n-for mir::StatementKind<'gcx> {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a>,\n-                                          hasher: &mut StableHasher<W>) {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-\n-        match *self {\n-            mir::StatementKind::Assign(ref place, ref rvalue) => {\n-                place.hash_stable(hcx, hasher);\n-                rvalue.hash_stable(hcx, hasher);\n-            }\n-            mir::StatementKind::FakeRead(ref cause, ref place) => {\n-                cause.hash_stable(hcx, hasher);\n-                place.hash_stable(hcx, hasher);\n-            }\n-            mir::StatementKind::SetDiscriminant { ref place, variant_index } => {\n-                place.hash_stable(hcx, hasher);\n-                variant_index.hash_stable(hcx, hasher);\n-            }\n-            mir::StatementKind::StorageLive(ref place) |\n-            mir::StatementKind::StorageDead(ref place) => {\n-                place.hash_stable(hcx, hasher);\n-            }\n-            mir::StatementKind::EscapeToRaw(ref place) => {\n-                place.hash_stable(hcx, hasher);\n-            }\n-            mir::StatementKind::Retag { fn_entry, ref place } => {\n-                fn_entry.hash_stable(hcx, hasher);\n-                place.hash_stable(hcx, hasher);\n-            }\n-            mir::StatementKind::AscribeUserType(ref place, ref variance, ref c_ty) => {\n-                place.hash_stable(hcx, hasher);\n-                variance.hash_stable(hcx, hasher);\n-                c_ty.hash_stable(hcx, hasher);\n-            }\n-            mir::StatementKind::Nop => {}\n-            mir::StatementKind::InlineAsm { ref asm, ref outputs, ref inputs } => {\n-                asm.hash_stable(hcx, hasher);\n-                outputs.hash_stable(hcx, hasher);\n-                inputs.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}\n+impl_stable_hash_for!(impl<'gcx> for enum mir::StatementKind<'gcx> [ mir::StatementKind ] {\n+    Assign(place, rvalue),\n+    FakeRead(cause, place),\n+    SetDiscriminant { place, variant_index },\n+    StorageLive(place),\n+    StorageDead(place),\n+    EscapeToRaw(place),\n+    Retag { fn_entry, two_phase, place },\n+    AscribeUserType(place, variance, c_ty),\n+    Nop,\n+    InlineAsm { asm, outputs, inputs },\n+});\n \n impl_stable_hash_for!(enum mir::FakeReadCause { ForMatchGuard, ForMatchedPlace, ForLet });\n "}, {"sha": "500bd47dfbe7e5b901bc699aff90d62d056f05cb", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=77a6a61f066af3dd693d8527a8a1bf5a446d295c", "patch": "@@ -138,6 +138,14 @@ impl<'tcx, Tag> Scalar<Tag> {\n         }\n     }\n \n+    #[inline]\n+    pub fn with_tag(self, new_tag: Tag) -> Self {\n+        match self {\n+            Scalar::Ptr(ptr) => Scalar::Ptr(Pointer { tag: new_tag, ..ptr }),\n+            Scalar::Bits { bits, size } => Scalar::Bits { bits, size },\n+        }\n+    }\n+\n     #[inline]\n     pub fn ptr_null(cx: &impl HasDataLayout) -> Self {\n         Scalar::Bits {"}, {"sha": "8c4a40c00c35ef0b312c2170869de0555cca124a", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=77a6a61f066af3dd693d8527a8a1bf5a446d295c", "patch": "@@ -1778,6 +1778,10 @@ pub enum StatementKind<'tcx> {\n         /// `fn_entry` indicates whether this is the initial retag that happens in the\n         /// function prolog.\n         fn_entry: bool,\n+        /// `two_phase` indicates whether this is just the reservation action of\n+        /// a two-phase borrow.\n+        two_phase: bool,\n+        /// The place to retag\n         place: Place<'tcx>,\n     },\n \n@@ -1841,8 +1845,12 @@ impl<'tcx> Debug for Statement<'tcx> {\n         match self.kind {\n             Assign(ref place, ref rv) => write!(fmt, \"{:?} = {:?}\", place, rv),\n             FakeRead(ref cause, ref place) => write!(fmt, \"FakeRead({:?}, {:?})\", cause, place),\n-            Retag { fn_entry, ref place } =>\n-                write!(fmt, \"Retag({}{:?})\", if fn_entry { \"[fn entry] \" } else { \"\" }, place),\n+            Retag { fn_entry, two_phase, ref place } =>\n+                write!(fmt, \"Retag({}{}{:?})\",\n+                    if fn_entry { \"[fn entry] \" } else { \"\" },\n+                    if two_phase { \"[2phase] \" } else { \"\" },\n+                    place,\n+                ),\n             EscapeToRaw(ref place) => write!(fmt, \"EscapeToRaw({:?})\", place),\n             StorageLive(ref place) => write!(fmt, \"StorageLive({:?})\", place),\n             StorageDead(ref place) => write!(fmt, \"StorageDead({:?})\", place),\n@@ -3019,7 +3027,7 @@ EnumTypeFoldableImpl! {\n         (StatementKind::StorageLive)(a),\n         (StatementKind::StorageDead)(a),\n         (StatementKind::InlineAsm) { asm, outputs, inputs },\n-        (StatementKind::Retag) { fn_entry, place },\n+        (StatementKind::Retag) { fn_entry, two_phase, place },\n         (StatementKind::EscapeToRaw)(place),\n         (StatementKind::AscribeUserType)(a, v, b),\n         (StatementKind::Nop),"}, {"sha": "d40d85a193789e9de6b135bc1a1606723affc689", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=77a6a61f066af3dd693d8527a8a1bf5a446d295c", "patch": "@@ -154,9 +154,10 @@ macro_rules! make_mir_visitor {\n \n             fn visit_retag(&mut self,\n                            fn_entry: & $($mutability)* bool,\n+                           two_phase: & $($mutability)* bool,\n                            place: & $($mutability)* Place<'tcx>,\n                            location: Location) {\n-                self.super_retag(fn_entry, place, location);\n+                self.super_retag(fn_entry, two_phase, place, location);\n             }\n \n             fn visit_place(&mut self,\n@@ -417,8 +418,9 @@ macro_rules! make_mir_visitor {\n                         }\n                     }\n                     StatementKind::Retag { ref $($mutability)* fn_entry,\n+                                           ref $($mutability)* two_phase,\n                                            ref $($mutability)* place } => {\n-                        self.visit_retag(fn_entry, place, location);\n+                        self.visit_retag(fn_entry, two_phase, place, location);\n                     }\n                     StatementKind::AscribeUserType(\n                         ref $($mutability)* place,\n@@ -724,6 +726,7 @@ macro_rules! make_mir_visitor {\n \n             fn super_retag(&mut self,\n                            _fn_entry: & $($mutability)* bool,\n+                           _two_phase: & $($mutability)* bool,\n                            place: & $($mutability)* Place<'tcx>,\n                            location: Location) {\n                 self.visit_place("}, {"sha": "f43cfb90fc4a1cf69bb6e24c1b2035419321db74", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=77a6a61f066af3dd693d8527a8a1bf5a446d295c", "patch": "@@ -204,6 +204,7 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n     fn retag(\n         _ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         _fn_entry: bool,\n+        _two_phase: bool,\n         _place: PlaceTy<'tcx, Self::PointerTag>,\n     ) -> EvalResult<'tcx> {\n         Ok(())"}, {"sha": "164a9680c797562e778b41b570d0fbeac8610680", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=77a6a61f066af3dd693d8527a8a1bf5a446d295c", "patch": "@@ -115,6 +115,16 @@ impl<Tag> MemPlace<Tag> {\n         }\n     }\n \n+    #[inline]\n+    pub fn with_tag(self, new_tag: Tag) -> Self\n+    {\n+        MemPlace {\n+            ptr: self.ptr.with_tag(new_tag),\n+            align: self.align,\n+            meta: self.meta,\n+        }\n+    }\n+\n     #[inline(always)]\n     pub fn from_scalar_ptr(ptr: Scalar<Tag>, align: Align) -> Self {\n         MemPlace {\n@@ -187,6 +197,16 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n         }\n     }\n \n+    #[inline]\n+    pub fn with_tag(self, new_tag: Tag) -> Self\n+    {\n+        MPlaceTy {\n+            mplace: self.mplace.with_tag(new_tag),\n+            layout: self.layout,\n+        }\n+    }\n+\n+    #[inline]\n     pub fn offset(\n         self,\n         offset: Size,"}, {"sha": "84cc5127f38adb90a3985863f2bd66312597cece", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=77a6a61f066af3dd693d8527a8a1bf5a446d295c", "patch": "@@ -119,9 +119,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             FakeRead(..) => {}\n \n             // Stacked Borrows.\n-            Retag { fn_entry, ref place } => {\n+            Retag { fn_entry, two_phase, ref place } => {\n                 let dest = self.eval_place(place)?;\n-                M::retag(self, fn_entry, dest)?;\n+                M::retag(self, fn_entry, two_phase, dest)?;\n             }\n             EscapeToRaw(ref op) => {\n                 let op = self.eval_operand(op, None)?;"}, {"sha": "3a53cc6eaea71704f905fcd34a8db1a1434799ac", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=77a6a61f066af3dd693d8527a8a1bf5a446d295c", "patch": "@@ -229,7 +229,11 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             // Function arguments should be retagged\n             mir.basic_blocks_mut()[START_BLOCK].statements.insert(0, Statement {\n                 source_info,\n-                kind: StatementKind::Retag { fn_entry: true, place: dropee_ptr.clone() },\n+                kind: StatementKind::Retag {\n+                    fn_entry: true,\n+                    two_phase: false,\n+                    place: dropee_ptr.clone(),\n+                },\n             });\n             // We use raw ptr operations, better prepare the alias tracking for that\n             mir.basic_blocks_mut()[START_BLOCK].statements.insert(1, Statement {"}, {"sha": "811b85446cb23b59eb02210a0980bb5f3bd98107", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=77a6a61f066af3dd693d8527a8a1bf5a446d295c", "patch": "@@ -118,7 +118,7 @@ impl MirPass for AddRetag {\n             basic_blocks[START_BLOCK].statements.splice(0..0,\n                 places.into_iter().map(|place| Statement {\n                     source_info,\n-                    kind: StatementKind::Retag { fn_entry: true, place },\n+                    kind: StatementKind::Retag { fn_entry: true, two_phase: false, place },\n                 })\n             );\n         }\n@@ -154,7 +154,7 @@ impl MirPass for AddRetag {\n         for (source_info, dest_place, dest_block) in returns {\n             basic_blocks[dest_block].statements.insert(0, Statement {\n                 source_info,\n-                kind: StatementKind::Retag { fn_entry: false, place: dest_place },\n+                kind: StatementKind::Retag { fn_entry: false, two_phase: false, place: dest_place },\n             });\n         }\n \n@@ -191,12 +191,21 @@ impl MirPass for AddRetag {\n                     // Assignments of reference or ptr type are the ones where we may have\n                     // to update tags.  This includes `x = &[mut] ...` and hence\n                     // we also retag after taking a reference!\n-                    StatementKind::Assign(ref place, _) if needs_retag(place) => {\n+                    StatementKind::Assign(ref place, box ref rvalue) if needs_retag(place) => {\n+                        let two_phase = match rvalue {\n+                            Rvalue::Ref(_, borrow_kind, _) =>\n+                                borrow_kind.allows_two_phase_borrow(),\n+                            _ => false\n+                        };\n                         // Insert a retag after the assignment.\n                         let source_info = block_data.statements[i].source_info;\n                         block_data.statements.insert(i+1, Statement {\n                             source_info,\n-                            kind: StatementKind::Retag { fn_entry: false, place: place.clone() },\n+                            kind: StatementKind::Retag {\n+                                fn_entry: false,\n+                                two_phase,\n+                                place: place.clone(),\n+                            },\n                         });\n                     }\n                     // Do nothing for the rest"}, {"sha": "ab71cefd434bd22f25f942638477b8cda1285347", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6a61f066af3dd693d8527a8a1bf5a446d295c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=77a6a61f066af3dd693d8527a8a1bf5a446d295c", "patch": "@@ -707,8 +707,14 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n         self.in_cleanup_block = false;\n     }\n \n-    fn visit_retag(&mut self, fn_entry: &mut bool, place: &mut Place<'tcx>, loc: Location) {\n-        self.super_retag(fn_entry, place, loc);\n+    fn visit_retag(\n+        &mut self,\n+        fn_entry: &mut bool,\n+        two_phase: &mut bool,\n+        place: &mut Place<'tcx>,\n+        loc: Location,\n+    ) {\n+        self.super_retag(fn_entry, two_phase, place, loc);\n \n         // We have to patch all inlined retags to be aware that they are no longer\n         // happening on function entry."}, {"sha": "61f20761d3124f5a1b1caee8aa15637cc7f92d8e", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=77a6a61f066af3dd693d8527a8a1bf5a446d295c", "patch": "@@ -1 +1 @@\n-Subproject commit 8d2bc97d7c3927cc8cb53afeaf97bd832be2b7c2\n+Subproject commit 61f20761d3124f5a1b1caee8aa15637cc7f92d8e"}]}