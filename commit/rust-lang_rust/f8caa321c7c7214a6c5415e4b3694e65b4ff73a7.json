{"sha": "f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4Y2FhMzIxYzdjNzIxNGE2YzU0MTVlNGIzNjk0ZTY1YjRmZjczYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-27T22:27:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-27T22:27:27Z"}, "message": "Auto merge of #56999 - petrochenkov:macrecov2, r=estebank\n\nAST/HIR: Introduce `ExprKind::Err` for better error recovery in the front-end\n\nThis way we can avoid aborting compilation if expansion produces errors and generate `ExprKind::Err`s instead.", "tree": {"sha": "0ba10b2287624eb95f56f7e5ddce2f7041125acd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ba10b2287624eb95f56f7e5ddce2f7041125acd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "html_url": "https://github.com/rust-lang/rust/commit/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb86d604bf65c3becd16180b56267a329cf268d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb86d604bf65c3becd16180b56267a329cf268d5", "html_url": "https://github.com/rust-lang/rust/commit/fb86d604bf65c3becd16180b56267a329cf268d5"}, {"sha": "bc16edeb28e38e5bbed8828fb6314b1cc5151235", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc16edeb28e38e5bbed8828fb6314b1cc5151235", "html_url": "https://github.com/rust-lang/rust/commit/bc16edeb28e38e5bbed8828fb6314b1cc5151235"}], "stats": {"total": 1079, "additions": 712, "deletions": 367}, "files": [{"sha": "978d20ea9478956de1ba8fca15f72e2690e37b18", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -392,7 +392,8 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n \n             hir::ExprKind::Closure(..) |\n             hir::ExprKind::Lit(..) |\n-            hir::ExprKind::Path(_) => {\n+            hir::ExprKind::Path(_) |\n+            hir::ExprKind::Err => {\n                 self.straightline(expr, pred, None::<hir::Expr>.iter())\n             }\n         }"}, {"sha": "2f0a95445a88614c21039044aedcf40d5b2c8c2b", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1099,6 +1099,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         ExprKind::Yield(ref subexpression) => {\n             visitor.visit_expr(subexpression);\n         }\n+        ExprKind::Err => {}\n     }\n }\n "}, {"sha": "32514caff876cf7b5e63f8712d0a00c365642d34", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -2709,7 +2709,6 @@ impl<'a> LoweringContext<'a> {\n             rules: self.lower_block_check_mode(&b.rules),\n             span: b.span,\n             targeted_by_break,\n-            recovered: b.recovered,\n         })\n     }\n \n@@ -3781,7 +3780,6 @@ impl<'a> LoweringContext<'a> {\n                                 rules: hir::DefaultBlock,\n                                 span,\n                                 targeted_by_break: false,\n-                                recovered: blk.recovered,\n                             });\n                             P(self.expr_block(blk, ThinVec::new()))\n                         }\n@@ -4117,6 +4115,8 @@ impl<'a> LoweringContext<'a> {\n                 hir::ExprKind::Yield(P(expr))\n             }\n \n+            ExprKind::Err => hir::ExprKind::Err,\n+\n             // Desugar `ExprIfLet`\n             // from: `if let <pat> = <sub_expr> <body> [<else_opt>]`\n             ExprKind::IfLet(ref pats, ref sub_expr, ref body, ref else_opt) => {\n@@ -4821,7 +4821,6 @@ impl<'a> LoweringContext<'a> {\n             rules: hir::DefaultBlock,\n             span,\n             targeted_by_break: false,\n-            recovered: false,\n         }\n     }\n "}, {"sha": "56144129ef4c29bba3c1e19083316192a2e2c4b9", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -807,11 +807,6 @@ pub struct Block {\n     /// break out of this block early.\n     /// Used by `'label: {}` blocks and by `catch` statements.\n     pub targeted_by_break: bool,\n-    /// If true, don't emit return value type errors as the parser had\n-    /// to recover from a parse error so this block will not have an\n-    /// appropriate type. A parse error will have been emitted so the\n-    /// compilation will never succeed if this is true.\n-    pub recovered: bool,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable)]\n@@ -1362,6 +1357,7 @@ impl Expr {\n             ExprKind::Struct(..) => ExprPrecedence::Struct,\n             ExprKind::Repeat(..) => ExprPrecedence::Repeat,\n             ExprKind::Yield(..) => ExprPrecedence::Yield,\n+            ExprKind::Err => ExprPrecedence::Err,\n         }\n     }\n \n@@ -1412,7 +1408,8 @@ impl Expr {\n             ExprKind::AddrOf(..) |\n             ExprKind::Binary(..) |\n             ExprKind::Yield(..) |\n-            ExprKind::Cast(..) => {\n+            ExprKind::Cast(..) |\n+            ExprKind::Err => {\n                 false\n             }\n         }\n@@ -1525,6 +1522,9 @@ pub enum ExprKind {\n \n     /// A suspension point for generators. This is `yield <expr>` in Rust.\n     Yield(P<Expr>),\n+\n+    /// Placeholder for an expression that wasn't syntactically well formed in some way.\n+    Err,\n }\n \n /// Optionally `Self`-qualified value/type path or associated extension."}, {"sha": "e19da011be1d60be6f2bfbd795b1569347f15eff", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -430,7 +430,9 @@ impl<'a> State<'a> {\n                 self.s.word(\"_\")?;\n             }\n             hir::TyKind::Err => {\n-                self.s.word(\"?\")?;\n+                self.popen()?;\n+                self.s.word(\"/*ERROR*/\")?;\n+                self.pclose()?;\n             }\n         }\n         self.end()\n@@ -1540,6 +1542,11 @@ impl<'a> State<'a> {\n                 self.word_space(\"yield\")?;\n                 self.print_expr_maybe_paren(&expr, parser::PREC_JUMP)?;\n             }\n+            hir::ExprKind::Err => {\n+                self.popen()?;\n+                self.s.word(\"/*ERROR*/\")?;\n+                self.pclose()?;\n+            }\n         }\n         self.ann.post(self, AnnNode::Expr(expr))?;\n         self.end()"}, {"sha": "bf9efb54b600fd3717bd85a8cd05743272c88f90", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -410,7 +410,6 @@ impl_stable_hash_for!(struct hir::Block {\n     rules,\n     span,\n     targeted_by_break,\n-    recovered,\n });\n \n impl_stable_hash_for!(struct hir::Pat {\n@@ -592,7 +591,8 @@ impl_stable_hash_for!(enum hir::ExprKind {\n     InlineAsm(asm, inputs, outputs),\n     Struct(path, fields, base),\n     Repeat(val, times),\n-    Yield(val)\n+    Yield(val),\n+    Err\n });\n \n impl_stable_hash_for!(enum hir::LocalSource {"}, {"sha": "1ae12fec50661e89fa4a9c278ef5e6426d963142", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -222,24 +222,22 @@ impl<'a> LintLevelsBuilder<'a> {\n                 match item.node {\n                     ast::MetaItemKind::Word => {}  // actual lint names handled later\n                     ast::MetaItemKind::NameValue(ref name_value) => {\n-                        let gate_reasons = !self.sess.features_untracked().lint_reasons;\n                         if item.ident == \"reason\" {\n                             // found reason, reslice meta list to exclude it\n                             metas = &metas[0..metas.len()-1];\n                             // FIXME (#55112): issue unused-attributes lint if we thereby\n                             // don't have any lint names (`#[level(reason = \"foo\")]`)\n                             if let ast::LitKind::Str(rationale, _) = name_value.node {\n-                                if gate_reasons {\n+                                if !self.sess.features_untracked().lint_reasons {\n                                     feature_gate::emit_feature_err(\n                                         &self.sess.parse_sess,\n                                         \"lint_reasons\",\n                                         item.span,\n                                         feature_gate::GateIssue::Language,\n                                         \"lint reasons are experimental\"\n                                     );\n-                                } else {\n-                                    reason = Some(rationale);\n                                 }\n+                                reason = Some(rationale);\n                             } else {\n                                 let mut err = bad_attr(name_value.span);\n                                 err.help(\"reason must be a string literal\");"}, {"sha": "f9bcbb3222955058342d911cc3b975ffbd9a6c6d", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -479,7 +479,8 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             }\n \n             hir::ExprKind::Continue(..) |\n-            hir::ExprKind::Lit(..) => {}\n+            hir::ExprKind::Lit(..) |\n+            hir::ExprKind::Err => {}\n \n             hir::ExprKind::Loop(ref blk, _, _) => {\n                 self.walk_block(&blk);"}, {"sha": "a78cf1a471b4bb79f8b095bd7195452cc2fe9a52", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -515,6 +515,7 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n       hir::ExprKind::Box(..) |\n       hir::ExprKind::Yield(..) |\n       hir::ExprKind::Type(..) |\n+      hir::ExprKind::Err |\n       hir::ExprKind::Path(hir::QPath::TypeRelative(..)) => {\n           intravisit::walk_expr(ir, expr);\n       }\n@@ -1254,7 +1255,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 self.propagate_through_exprs(inputs, succ)\n             }\n \n-            hir::ExprKind::Lit(..) | hir::ExprKind::Path(hir::QPath::TypeRelative(..)) => {\n+            hir::ExprKind::Lit(..) | hir::ExprKind::Err |\n+            hir::ExprKind::Path(hir::QPath::TypeRelative(..)) => {\n                 succ\n             }\n \n@@ -1521,7 +1523,7 @@ fn check_expr<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, expr: &'tcx Expr) {\n         hir::ExprKind::Block(..) | hir::ExprKind::AddrOf(..) |\n         hir::ExprKind::Struct(..) | hir::ExprKind::Repeat(..) |\n         hir::ExprKind::Closure(..) | hir::ExprKind::Path(_) | hir::ExprKind::Yield(..) |\n-        hir::ExprKind::Box(..) | hir::ExprKind::Type(..) => {\n+        hir::ExprKind::Box(..) | hir::ExprKind::Type(..) | hir::ExprKind::Err => {\n             intravisit::walk_expr(this, expr);\n         }\n     }"}, {"sha": "207382d5e1f45a0aebfd9806185220e45bf7625b", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -687,7 +687,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             hir::ExprKind::Block(..) | hir::ExprKind::Loop(..) | hir::ExprKind::Match(..) |\n             hir::ExprKind::Lit(..) | hir::ExprKind::Break(..) |\n             hir::ExprKind::Continue(..) | hir::ExprKind::Struct(..) | hir::ExprKind::Repeat(..) |\n-            hir::ExprKind::InlineAsm(..) | hir::ExprKind::Box(..) => {\n+            hir::ExprKind::InlineAsm(..) | hir::ExprKind::Box(..) | hir::ExprKind::Err => {\n                 Ok(self.cat_rvalue_node(expr.hir_id, expr.span, expr_ty))\n             }\n         }"}, {"sha": "62dc8691e65df8ef8112e5e02383ab29c28314b6", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -987,7 +987,6 @@ where\n         };\n \n         let mut ecx = ExtCtxt::new(&sess.parse_sess, cfg, &mut resolver);\n-        let err_count = ecx.parse_sess.span_diagnostic.err_count();\n \n         // Expand macros now!\n         let krate = time(sess, \"expand crate\", || {\n@@ -1013,9 +1012,6 @@ where\n             let msg = \"missing fragment specifier\";\n             sess.buffer_lint(lint, ast::CRATE_NODE_ID, span, msg);\n         }\n-        if ecx.parse_sess.span_diagnostic.err_count() - ecx.resolve_err_count > err_count {\n-            ecx.parse_sess.span_diagnostic.abort_if_errors();\n-        }\n         if cfg!(windows) {\n             env::set_var(\"PATH\", &old_path);\n         }\n@@ -1119,12 +1115,6 @@ where\n         })\n     })?;\n \n-    // Unresolved macros might be due to mistyped `#[macro_use]`,\n-    // so abort after checking for unknown attributes. (#49074)\n-    if resolver.found_unresolved_macro {\n-        sess.diagnostic().abort_if_errors();\n-    }\n-\n     // Lower ast -> hir.\n     // First, we need to collect the dep_graph.\n     let dep_graph = match future_dep_graph {"}, {"sha": "a9ec99358c1b2420d8b06ff4c1f5821d22bcbd4f", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -741,15 +741,13 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n \n     fn fold_block(&mut self, b: P<ast::Block>) -> P<ast::Block> {\n         fn stmt_to_block(rules: ast::BlockCheckMode,\n-                         recovered: bool,\n                          s: Option<ast::Stmt>,\n                          sess: &Session) -> ast::Block {\n             ast::Block {\n                 stmts: s.into_iter().collect(),\n                 rules,\n                 id: sess.next_node_id(),\n                 span: syntax_pos::DUMMY_SP,\n-                recovered,\n             }\n         }\n \n@@ -768,7 +766,7 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n             }\n         }\n \n-        let empty_block = stmt_to_block(BlockCheckMode::Default, false, None, self.sess);\n+        let empty_block = stmt_to_block(BlockCheckMode::Default, None, self.sess);\n         let loop_expr = P(ast::Expr {\n             node: ast::ExprKind::Loop(P(empty_block), None),\n             id: self.sess.next_node_id(),\n@@ -809,7 +807,7 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n                         old_blocks.push(new_block);\n                     }\n \n-                    stmt_to_block(b.rules, b.recovered, Some(loop_stmt), self.sess)\n+                    stmt_to_block(b.rules, Some(loop_stmt), self.sess)\n                 } else {\n                     //push `loop {}` onto the end of our fresh block and yield that\n                     new_block.stmts.push(loop_stmt);"}, {"sha": "23cfd18ef5d4c1222d7b4c834f317bbf90682df2", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -780,6 +780,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         hir::ExprKind::Tup(ref fields) => ExprKind::Tuple { fields: fields.to_ref() },\n \n         hir::ExprKind::Yield(ref v) => ExprKind::Yield { value: v.to_ref() },\n+        hir::ExprKind::Err => unreachable!(),\n     };\n \n     Expr {"}, {"sha": "584f0ba0449e1213f007ad7658aaf27bcfbe75f7", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -278,25 +278,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_ty(self, ty)\n     }\n \n-    fn visit_use_tree(&mut self, use_tree: &'a UseTree, id: NodeId, _nested: bool) {\n-        // Check if the path in this `use` is not generic, such as `use foo::bar<T>;` While this\n-        // can't happen normally thanks to the parser, a generic might sneak in if the `use` is\n-        // built using a macro.\n-        //\n-        // macro_use foo {\n-        //     ($p:path) => { use $p; }\n-        // }\n-        // foo!(bar::baz<T>);\n-        use_tree.prefix.segments.iter().find(|segment| {\n-            segment.args.is_some()\n-        }).map(|segment| {\n-            self.err_handler().span_err(segment.args.as_ref().unwrap().span(),\n-                                        \"generic arguments in import path\");\n-        });\n-\n-        visit::walk_use_tree(self, use_tree, id);\n-    }\n-\n     fn visit_label(&mut self, label: &'a Label) {\n         self.check_label(label.ident);\n         visit::walk_label(self, label);\n@@ -433,17 +414,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_foreign_item(self, fi)\n     }\n \n-    fn visit_vis(&mut self, vis: &'a Visibility) {\n-        if let VisibilityKind::Restricted { ref path, .. } = vis.node {\n-            path.segments.iter().find(|segment| segment.args.is_some()).map(|segment| {\n-                self.err_handler().span_err(segment.args.as_ref().unwrap().span(),\n-                                            \"generic arguments in visibility path\");\n-            });\n-        }\n-\n-        visit::walk_vis(self, vis)\n-    }\n-\n     fn visit_generics(&mut self, generics: &'a Generics) {\n         let mut seen_non_lifetime_param = false;\n         let mut seen_default = None;"}, {"sha": "f0b559f80a28ce0c87d8d51f6fe6aba01011729e", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -449,7 +449,8 @@ fn check_expr_kind<'a, 'tcx>(\n             struct_result\n         }\n \n-        hir::ExprKind::Lit(_) => Promotable,\n+        hir::ExprKind::Lit(_) |\n+        hir::ExprKind::Err => Promotable,\n \n         hir::ExprKind::AddrOf(_, ref expr) |\n         hir::ExprKind::Repeat(ref expr, _) => {"}, {"sha": "0db6dbafb6cc6c54e31eaa29355a9c5f133bd0a5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1576,7 +1576,6 @@ pub struct Resolver<'a> {\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n     macro_defs: FxHashMap<Mark, DefId>,\n     local_macro_def_scopes: FxHashMap<NodeId, Module<'a>>,\n-    pub found_unresolved_macro: bool,\n \n     /// List of crate local macros that we need to warn about as being unused.\n     /// Right now this only includes macro_rules! macros, and macros 2.0.\n@@ -1911,7 +1910,6 @@ impl<'a> Resolver<'a> {\n             name_already_seen: FxHashMap::default(),\n             potentially_unused_imports: Vec::new(),\n             struct_constructors: Default::default(),\n-            found_unresolved_macro: false,\n             unused_macros: FxHashSet::default(),\n             current_type_ascription: Vec::new(),\n             injected_crate: None,\n@@ -2024,8 +2022,10 @@ impl<'a> Resolver<'a> {\n                                       record_used_id: Option<NodeId>,\n                                       path_span: Span)\n                                       -> Option<LexicalScopeBinding<'a>> {\n-        let record_used = record_used_id.is_some();\n         assert!(ns == TypeNS  || ns == ValueNS);\n+        if ident.name == keywords::Invalid.name() {\n+            return Some(LexicalScopeBinding::Def(Def::Err));\n+        }\n         if ns == TypeNS {\n             ident.span = if ident.name == keywords::SelfUpper.name() {\n                 // FIXME(jseyfried) improve `Self` hygiene\n@@ -2038,6 +2038,7 @@ impl<'a> Resolver<'a> {\n         }\n \n         // Walk backwards up the ribs in scope.\n+        let record_used = record_used_id.is_some();\n         let mut module = self.graph_root;\n         for i in (0 .. self.ribs[ns].len()).rev() {\n             if let Some(def) = self.ribs[ns][i].bindings.get(&ident).cloned() {"}, {"sha": "182dcfe4098bb439cde17334e5661b6669d5936c", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -182,7 +182,14 @@ impl<'a> base::Resolver for Resolver<'a> {\n         };\n \n         let parent_scope = self.invoc_parent_scope(invoc_id, derives_in_scope);\n-        let (def, ext) = self.resolve_macro_to_def(path, kind, &parent_scope, true, force)?;\n+        let (def, ext) = match self.resolve_macro_to_def(path, kind, &parent_scope, true, force) {\n+            Ok((def, ext)) => (def, ext),\n+            Err(Determinacy::Determined) if kind == MacroKind::Attr => {\n+                // Replace unresolved attributes with used inert attributes for better recovery.\n+                return Ok(Some(Lrc::new(SyntaxExtension::NonMacroAttr { mark_used: true })));\n+            }\n+            Err(determinacy) => return Err(determinacy),\n+        };\n \n         if let Def::Macro(def_id, _) = def {\n             if after_derive {\n@@ -337,7 +344,6 @@ impl<'a> Resolver<'a> {\n                 }\n                 PathResult::Indeterminate if !force => return Err(Determinacy::Undetermined),\n                 PathResult::NonModule(..) | PathResult::Indeterminate | PathResult::Failed(..) => {\n-                    self.found_unresolved_macro = true;\n                     Err(Determinacy::Determined)\n                 }\n                 PathResult::Module(..) => unreachable!(),\n@@ -353,10 +359,8 @@ impl<'a> Resolver<'a> {\n             let binding = self.early_resolve_ident_in_lexical_scope(\n                 path[0].ident, ScopeSet::Macro(kind), parent_scope, false, force, path_span\n             );\n-            match binding {\n-                Ok(..) => {}\n-                Err(Determinacy::Determined) => self.found_unresolved_macro = true,\n-                Err(Determinacy::Undetermined) => return Err(Determinacy::Undetermined),\n+            if let Err(Determinacy::Undetermined) = binding {\n+                return Err(Determinacy::Undetermined);\n             }\n \n             if trace {\n@@ -858,14 +862,23 @@ impl<'a> Resolver<'a> {\n     pub fn finalize_current_module_macro_resolutions(&mut self) {\n         let module = self.current_module;\n \n-        let check_consistency = |this: &mut Self, path: &[Segment], span,\n-                                 kind: MacroKind, initial_def, def| {\n+        let check_consistency = |this: &mut Self, path: &[Segment], span, kind: MacroKind,\n+                                 initial_def: Option<Def>, def: Def| {\n             if let Some(initial_def) = initial_def {\n                 if def != initial_def && def != Def::Err && this.ambiguity_errors.is_empty() {\n                     // Make sure compilation does not succeed if preferred macro resolution\n                     // has changed after the macro had been expanded. In theory all such\n                     // situations should be reported as ambiguity errors, so this is a bug.\n-                    span_bug!(span, \"inconsistent resolution for a macro\");\n+                    if initial_def == Def::NonMacroAttr(NonMacroAttrKind::Custom) {\n+                        // Yeah, legacy custom attributes are implemented using forced resolution\n+                        // (which is a best effort error recovery tool, basically), so we can't\n+                        // promise their resolution won't change later.\n+                        let msg = format!(\"inconsistent resolution for a macro: first {}, then {}\",\n+                                          initial_def.kind_name(), def.kind_name());\n+                        this.session.span_err(span, &msg);\n+                    } else {\n+                        span_bug!(span, \"inconsistent resolution for a macro\");\n+                    }\n                 }\n             } else {\n                 // It's possible that the macro was unresolved (indeterminate) and silently"}, {"sha": "b3c24be108da7df19e420dc6e64b7526563c0694", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -4513,6 +4513,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 tcx.mk_unit()\n             }\n+            hir::ExprKind::Err => {\n+                tcx.types.err\n+            }\n         }\n     }\n \n@@ -4769,12 +4772,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 //\n                 // #41425 -- label the implicit `()` as being the\n                 // \"found type\" here, rather than the \"expected type\".\n-                //\n-                // #44579 -- if the block was recovered during parsing,\n-                // the type would be nonsensical and it is not worth it\n-                // to perform the type check, so we avoid generating the\n-                // diagnostic output.\n-                if !self.diverges.get().always() && !blk.recovered {\n+                if !self.diverges.get().always() {\n                     coerce.coerce_forced_unit(self, &self.misc(blk.span), &mut |err| {\n                         if let Some(expected_ty) = expected.only_has_type(self) {\n                             self.consider_hint_about_removing_semicolon(blk,"}, {"sha": "54dfc57bac6743588cb93d5c173513ede5ce9836", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -2210,7 +2210,6 @@ fn from_target_feature(\n                     feature_gate::GateIssue::Language,\n                     &format!(\"the target feature `{}` is currently unstable\", feature),\n                 );\n-                return None;\n             }\n             Some(Symbol::intern(feature))\n         }));"}, {"sha": "e3a8980a975c19a7827b0d6fc75b6011e227294e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -444,7 +444,6 @@ pub struct Block {\n     /// Distinguishes between `unsafe { ... }` and `{ ... }`\n     pub rules: BlockCheckMode,\n     pub span: Span,\n-    pub recovered: bool,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable)]\n@@ -1001,6 +1000,7 @@ impl Expr {\n             ExprKind::Paren(..) => ExprPrecedence::Paren,\n             ExprKind::Try(..) => ExprPrecedence::Try,\n             ExprKind::Yield(..) => ExprPrecedence::Yield,\n+            ExprKind::Err => ExprPrecedence::Err,\n         }\n     }\n }\n@@ -1160,6 +1160,9 @@ pub enum ExprKind {\n \n     /// A `yield`, with an optional value to be yielded.\n     Yield(Option<P<Expr>>),\n+\n+    /// Placeholder for an expression that wasn't syntactically well formed in some way.\n+    Err,\n }\n \n /// The explicit `Self` type in a \"qualified path\". The actual"}, {"sha": "1efe0b3478db7f1f6ed7830e72c965e277d20206", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -2,7 +2,7 @@ pub use self::SyntaxExtension::*;\n \n use ast::{self, Attribute, Name, PatKind, MetaItem};\n use attr::HasAttrs;\n-use source_map::{self, SourceMap, Spanned, respan};\n+use source_map::{SourceMap, Spanned, respan};\n use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n use edition::Edition;\n use errors::{DiagnosticBuilder, DiagnosticId};\n@@ -456,32 +456,38 @@ impl MacResult for MacEager {\n #[derive(Copy, Clone)]\n pub struct DummyResult {\n     expr_only: bool,\n-    span: Span\n+    is_error: bool,\n+    span: Span,\n }\n \n impl DummyResult {\n     /// Create a default MacResult that can be anything.\n     ///\n     /// Use this as a return value after hitting any errors and\n     /// calling `span_err`.\n-    pub fn any(sp: Span) -> Box<dyn MacResult+'static> {\n-        Box::new(DummyResult { expr_only: false, span: sp })\n+    pub fn any(span: Span) -> Box<dyn MacResult+'static> {\n+        Box::new(DummyResult { expr_only: false, is_error: true, span })\n+    }\n+\n+    /// Same as `any`, but must be a valid fragment, not error.\n+    pub fn any_valid(span: Span) -> Box<dyn MacResult+'static> {\n+        Box::new(DummyResult { expr_only: false, is_error: false, span })\n     }\n \n     /// Create a default MacResult that can only be an expression.\n     ///\n     /// Use this for macros that must expand to an expression, so even\n     /// if an error is encountered internally, the user will receive\n     /// an error that they also used it in the wrong place.\n-    pub fn expr(sp: Span) -> Box<dyn MacResult+'static> {\n-        Box::new(DummyResult { expr_only: true, span: sp })\n+    pub fn expr(span: Span) -> Box<dyn MacResult+'static> {\n+        Box::new(DummyResult { expr_only: true, is_error: true, span })\n     }\n \n     /// A plain dummy expression.\n-    pub fn raw_expr(sp: Span) -> P<ast::Expr> {\n+    pub fn raw_expr(sp: Span, is_error: bool) -> P<ast::Expr> {\n         P(ast::Expr {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::ExprKind::Lit(source_map::respan(sp, ast::LitKind::Bool(false))),\n+            node: if is_error { ast::ExprKind::Err } else { ast::ExprKind::Tup(Vec::new()) },\n             span: sp,\n             attrs: ThinVec::new(),\n         })\n@@ -496,18 +502,19 @@ impl DummyResult {\n         }\n     }\n \n-    pub fn raw_ty(sp: Span) -> P<ast::Ty> {\n+    /// A plain dummy type.\n+    pub fn raw_ty(sp: Span, is_error: bool) -> P<ast::Ty> {\n         P(ast::Ty {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::TyKind::Infer,\n+            node: if is_error { ast::TyKind::Err } else { ast::TyKind::Tup(Vec::new()) },\n             span: sp\n         })\n     }\n }\n \n impl MacResult for DummyResult {\n     fn make_expr(self: Box<DummyResult>) -> Option<P<ast::Expr>> {\n-        Some(DummyResult::raw_expr(self.span))\n+        Some(DummyResult::raw_expr(self.span, self.is_error))\n     }\n \n     fn make_pat(self: Box<DummyResult>) -> Option<P<ast::Pat>> {\n@@ -550,13 +557,13 @@ impl MacResult for DummyResult {\n     fn make_stmts(self: Box<DummyResult>) -> Option<SmallVec<[ast::Stmt; 1]>> {\n         Some(smallvec![ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::StmtKind::Expr(DummyResult::raw_expr(self.span)),\n+            node: ast::StmtKind::Expr(DummyResult::raw_expr(self.span, self.is_error)),\n             span: self.span,\n         }])\n     }\n \n     fn make_ty(self: Box<DummyResult>) -> Option<P<ast::Ty>> {\n-        Some(DummyResult::raw_ty(self.span))\n+        Some(DummyResult::raw_ty(self.span, self.is_error))\n     }\n }\n \n@@ -796,7 +803,6 @@ pub struct ExtCtxt<'a> {\n     pub ecfg: expand::ExpansionConfig<'a>,\n     pub root_path: PathBuf,\n     pub resolver: &'a mut dyn Resolver,\n-    pub resolve_err_count: usize,\n     pub current_expansion: ExpansionData,\n     pub expansions: FxHashMap<Span, Vec<String>>,\n }\n@@ -811,7 +817,6 @@ impl<'a> ExtCtxt<'a> {\n             ecfg,\n             root_path: PathBuf::new(),\n             resolver,\n-            resolve_err_count: 0,\n             current_expansion: ExpansionData {\n                 mark: Mark::root(),\n                 depth: 0,"}, {"sha": "a8eec1a74dd2b5531640153bf3e73307f5e43848", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -587,7 +587,6 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n            id: ast::DUMMY_NODE_ID,\n            rules: BlockCheckMode::Default,\n            span,\n-           recovered: false,\n         })\n     }\n "}, {"sha": "3863778fe72af4bd47ccc5390534b971a87f6d8e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -344,8 +344,10 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             // FIXME(jseyfried): Refactor out the following logic\n             let (expanded_fragment, new_invocations) = if let Some(ext) = ext {\n                 if let Some(ext) = ext {\n-                    let dummy = invoc.fragment_kind.dummy(invoc.span()).unwrap();\n-                    let fragment = self.expand_invoc(invoc, &*ext).unwrap_or(dummy);\n+                    let (invoc_fragment_kind, invoc_span) = (invoc.fragment_kind, invoc.span());\n+                    let fragment = self.expand_invoc(invoc, &*ext).unwrap_or_else(|| {\n+                        invoc_fragment_kind.dummy(invoc_span).unwrap()\n+                    });\n                     self.collect_invocations(fragment, &[])\n                 } else if let InvocationKind::Attr { attr: None, traits, item, .. } = invoc.kind {\n                     if !item.derive_allowed() {\n@@ -431,9 +433,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n     fn resolve_imports(&mut self) {\n         if self.monotonic {\n-            let err_count = self.cx.parse_sess.span_diagnostic.err_count();\n             self.cx.resolver.resolve_imports();\n-            self.cx.resolve_err_count += self.cx.parse_sess.span_diagnostic.err_count() - err_count;\n         }\n     }\n \n@@ -457,11 +457,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n \n         if self.monotonic {\n-            let err_count = self.cx.parse_sess.span_diagnostic.err_count();\n-            let mark = self.cx.current_expansion.mark;\n-            self.cx.resolver.visit_ast_fragment_with_placeholders(mark, &fragment_with_placeholders,\n-                                                                  derives);\n-            self.cx.resolve_err_count += self.cx.parse_sess.span_diagnostic.err_count() - err_count;\n+            self.cx.resolver.visit_ast_fragment_with_placeholders(\n+                self.cx.current_expansion.mark, &fragment_with_placeholders, derives\n+            );\n         }\n \n         (fragment_with_placeholders, invocations)\n@@ -724,7 +722,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     emit_feature_err(this.cx.parse_sess, &*feature.as_str(), span,\n                                      GateIssue::Library(Some(issue)), &explain);\n                     this.cx.trace_macros_diag();\n-                    return Err(kind.dummy(span));\n                 }\n             }\n "}, {"sha": "70df403d0c2ea8e019c4682b4998c70f87668bfe", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1272,16 +1272,15 @@ impl<'a> Context<'a> {\n                 return;\n             }\n         }\n-        if name.starts_with(\"rustc_\") {\n-            gate_feature!(self, rustc_attrs, attr.span,\n-                          \"unless otherwise specified, attributes \\\n-                           with the prefix `rustc_` \\\n-                           are reserved for internal compiler diagnostics\");\n-        } else if !attr::is_known(attr) {\n-            // Only run the custom attribute lint during regular feature gate\n-            // checking. Macro gating runs before the plugin attributes are\n-            // registered, so we skip this in that case.\n-            if !is_macro {\n+        if !attr::is_known(attr) {\n+            if name.starts_with(\"rustc_\") {\n+                let msg = \"unless otherwise specified, attributes with the prefix `rustc_` \\\n+                           are reserved for internal compiler diagnostics\";\n+                gate_feature!(self, rustc_attrs, attr.span, msg);\n+            } else if !is_macro {\n+                // Only run the custom attribute lint during regular feature gate\n+                // checking. Macro gating runs before the plugin attributes are\n+                // registered, so we skip this in that case.\n                 let msg = format!(\"The attribute `{}` is currently unknown to the compiler and \\\n                                    may have meaning added to it in the future\", attr.path);\n                 gate_feature!(self, custom_attribute, attr.span, &msg);"}, {"sha": "8ac103856dcd17fe4b799789066cc993132f689a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -892,12 +892,11 @@ fn noop_fold_bounds<T: Folder>(bounds: GenericBounds, folder: &mut T)\n }\n \n pub fn noop_fold_block<T: Folder>(b: P<Block>, folder: &mut T) -> P<Block> {\n-    b.map(|Block {id, stmts, rules, span, recovered}| Block {\n+    b.map(|Block {id, stmts, rules, span}| Block {\n         id: folder.new_id(id),\n         stmts: stmts.move_flat_map(|s| folder.fold_stmt(s).into_iter()),\n         rules,\n         span: folder.new_span(span),\n-        recovered,\n     })\n }\n \n@@ -1367,6 +1366,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n             ExprKind::Yield(ex) => ExprKind::Yield(ex.map(|x| folder.fold_expr(x))),\n             ExprKind::Try(ex) => ExprKind::Try(folder.fold_expr(ex)),\n             ExprKind::TryBlock(body) => ExprKind::TryBlock(folder.fold_block(body)),\n+            ExprKind::Err => ExprKind::Err,\n         },\n         id: folder.new_id(id),\n         span: folder.new_span(span),"}, {"sha": "52da8a072c7511f3959ae895be5cc7d97740edc1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -32,6 +32,7 @@ use ast::{UseTree, UseTreeKind};\n use ast::{BinOpKind, UnOp};\n use ast::{RangeEnd, RangeSyntax};\n use {ast, attr};\n+use ext::base::DummyResult;\n use source_map::{self, SourceMap, Spanned, respan};\n use syntax_pos::{self, Span, MultiSpan, BytePos, FileName};\n use errors::{self, Applicability, DiagnosticBuilder, DiagnosticId};\n@@ -2870,6 +2871,7 @@ impl<'a> Parser<'a> {\n                 let mut err = self.fatal(&format!(\"unknown macro variable `{}`\", name));\n                 err.span_label(self.span, \"unknown macro variable\");\n                 err.emit();\n+                self.bump();\n                 return\n             }\n             token::Interpolated(ref nt) => {\n@@ -4966,16 +4968,16 @@ impl<'a> Parser<'a> {\n     /// Precondition: already parsed the '{'.\n     fn parse_block_tail(&mut self, lo: Span, s: BlockCheckMode) -> PResult<'a, P<Block>> {\n         let mut stmts = vec![];\n-        let mut recovered = false;\n-\n         while !self.eat(&token::CloseDelim(token::Brace)) {\n             let stmt = match self.parse_full_stmt(false) {\n                 Err(mut err) => {\n                     err.emit();\n                     self.recover_stmt_(SemiColonMode::Ignore, BlockMode::Ignore);\n-                    self.eat(&token::CloseDelim(token::Brace));\n-                    recovered = true;\n-                    break;\n+                    Some(Stmt {\n+                        id: ast::DUMMY_NODE_ID,\n+                        node: StmtKind::Expr(DummyResult::raw_expr(self.span, true)),\n+                        span: self.span,\n+                    })\n                 }\n                 Ok(stmt) => stmt,\n             };\n@@ -4993,7 +4995,6 @@ impl<'a> Parser<'a> {\n             id: ast::DUMMY_NODE_ID,\n             rules: s,\n             span: lo.to(self.prev_span),\n-            recovered,\n         }))\n     }\n "}, {"sha": "2ad3d3a6d648795d112c9cbd05e351d7249e88f1", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1093,7 +1093,9 @@ impl<'a> State<'a> {\n                 self.s.word(\"_\")?;\n             }\n             ast::TyKind::Err => {\n-                self.s.word(\"?\")?;\n+                self.popen()?;\n+                self.s.word(\"/*ERROR*/\")?;\n+                self.pclose()?;\n             }\n             ast::TyKind::ImplicitSelf => {\n                 self.s.word(\"Self\")?;\n@@ -2391,6 +2393,11 @@ impl<'a> State<'a> {\n                 self.s.space()?;\n                 self.print_block_with_attrs(blk, attrs)?\n             }\n+            ast::ExprKind::Err => {\n+                self.popen()?;\n+                self.s.word(\"/*ERROR*/\")?;\n+                self.pclose()?\n+            }\n         }\n         self.ann.post(self, AnnNode::Expr(expr))?;\n         self.end()"}, {"sha": "89d4e53b8d140312dd54d5b979a58721450829f5", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -267,6 +267,7 @@ pub enum ExprPrecedence {\n     TryBlock,\n     Struct,\n     Async,\n+    Err,\n }\n \n impl ExprPrecedence {\n@@ -325,7 +326,8 @@ impl ExprPrecedence {\n             ExprPrecedence::Block |\n             ExprPrecedence::TryBlock |\n             ExprPrecedence::Async |\n-            ExprPrecedence::Struct => PREC_PAREN,\n+            ExprPrecedence::Struct |\n+            ExprPrecedence::Err => PREC_PAREN,\n         }\n     }\n }"}, {"sha": "156546bbba94afb03eb677adeb5d449bc035a1c3", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -802,6 +802,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::TryBlock(ref body) => {\n             visitor.visit_block(body)\n         }\n+        ExprKind::Err => {}\n     }\n \n     visitor.visit_expr_post(expression)"}, {"sha": "a8f3c40db609ccb8928a486695272939bd27d845", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -49,7 +49,6 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n                                        sp,\n                                        feature_gate::GateIssue::Language,\n                                        feature_gate::EXPLAIN_ASM);\n-        return DummyResult::expr(sp);\n     }\n \n     // Split the tts before the first colon, to avoid `asm!(\"x\": y)`  being"}, {"sha": "9c49a59678fdbf434606aa99e41347db8e2c2d40", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -20,7 +20,6 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n                                        sp,\n                                        feature_gate::GateIssue::Language,\n                                        feature_gate::EXPLAIN_CONCAT_IDENTS);\n-        return base::DummyResult::expr(sp);\n     }\n \n     if tts.is_empty() {"}, {"sha": "32d02bec7989b90137e3d788230f1c33467d3964", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -3,7 +3,7 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast::{Expr, MetaItem};\n-use syntax::ext::base::{Annotatable, ExtCtxt};\n+use syntax::ext::base::{Annotatable, DummyResult, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n@@ -69,7 +69,7 @@ fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructur\n             span_err!(cx, trait_span, E0665,\n                       \"`Default` cannot be derived for enums, only structs\");\n             // let compilation continue\n-            cx.expr_usize(trait_span, 0)\n+            DummyResult::raw_expr(trait_span, true)\n         }\n         _ => cx.span_bug(trait_span, \"Non-static method in `derive(Default)`\"),\n     };"}, {"sha": "7548d43f184441d736b88cb3fc5991ed767d47ef", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -153,6 +153,5 @@ fn call_intrinsic(cx: &ExtCtxt,\n         id: ast::DUMMY_NODE_ID,\n         rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n         span,\n-        recovered: false,\n     }))\n }"}, {"sha": "9d29e2b0fb69ac559762cba877944e15d4dc0652", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -666,7 +666,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     \"X\" => \"UpperHex\",\n                     _ => {\n                         ecx.span_err(sp, &format!(\"unknown format trait `{}`\", *tyname));\n-                        \"Dummy\"\n+                        return DummyResult::raw_expr(sp, true);\n                     }\n                 }\n             }\n@@ -713,7 +713,6 @@ pub fn expand_format_args_nl<'cx>(\n                                        sp,\n                                        feature_gate::GateIssue::Language,\n                                        feature_gate::EXPLAIN_FORMAT_ARGS_NL);\n-        return base::DummyResult::expr(sp);\n     }\n     sp = sp.apply_mark(ecx.current_expansion.mark);\n     match parse_args(ecx, sp, tts) {\n@@ -761,7 +760,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                 Applicability::MaybeIncorrect,\n             );\n             err.emit();\n-            return DummyResult::raw_expr(sp);\n+            return DummyResult::raw_expr(sp, true);\n         }\n     };\n \n@@ -857,7 +856,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n             e.span_label(sp, label);\n         }\n         e.emit();\n-        return DummyResult::raw_expr(sp);\n+        return DummyResult::raw_expr(sp, true);\n     }\n \n     let arg_spans = parser.arg_places.iter()"}, {"sha": "a58c267ab4fae778e91af1c3178963f952fb80f0", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -29,7 +29,6 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt,\n                                        sp,\n                                        feature_gate::GateIssue::Language,\n                                        feature_gate::EXPLAIN_GLOBAL_ASM);\n-        return DummyResult::any(sp);\n     }\n \n     let mut p = cx.new_parser_from_tts(tts);"}, {"sha": "a143186b9451f6d99b0a1123c5d6b5ab48e00816", "filename": "src/libsyntax_ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flog_syntax.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -14,11 +14,10 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt,\n                                        sp,\n                                        feature_gate::GateIssue::Language,\n                                        feature_gate::EXPLAIN_LOG_SYNTAX);\n-        return base::DummyResult::any(sp);\n     }\n \n     println!(\"{}\", print::pprust::tts_to_string(tts));\n \n     // any so that `log_syntax` can be invoked as an expression and item.\n-    base::DummyResult::any(sp)\n+    base::DummyResult::any_valid(sp)\n }"}, {"sha": "04e33671872f57950bb976c386fcbaadc4e2a4bb", "filename": "src/libsyntax_ext/test_case.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Ftest_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Ftest_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_case.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -31,8 +31,6 @@ pub fn expand(\n                                        attr_sp,\n                                        feature_gate::GateIssue::Language,\n                                        feature_gate::EXPLAIN_CUSTOM_TEST_FRAMEWORKS);\n-\n-        return vec![anno_item];\n     }\n \n     if !ecx.ecfg.should_test { return vec![]; }"}, {"sha": "638d7b5568bfb142271d3a094ae82caccd89afb4", "filename": "src/libsyntax_ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Flibsyntax_ext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftrace_macros.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -15,7 +15,6 @@ pub fn expand_trace_macros(cx: &mut ExtCtxt,\n                                        sp,\n                                        feature_gate::GateIssue::Language,\n                                        feature_gate::EXPLAIN_TRACE_MACROS);\n-        return base::DummyResult::any(sp);\n     }\n \n     match (tt.len(), tt.first()) {\n@@ -28,5 +27,5 @@ pub fn expand_trace_macros(cx: &mut ExtCtxt,\n         _ => cx.span_err(sp, \"trace_macros! accepts only `true` or `false`\"),\n     }\n \n-    base::DummyResult::any(sp)\n+    base::DummyResult::any_valid(sp)\n }"}, {"sha": "e9bc2f4893e3d2fda882be8afeec3bd4b4a39f6c", "filename": "src/test/compile-fail/auxiliary/depends.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fdepends.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fdepends.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fdepends.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "previous_filename": "src/test/ui/panic-runtime/auxiliary/depends.rs"}, {"sha": "3f030c169f6410ddfa4413756170ffb09a6cc3c2", "filename": "src/test/compile-fail/auxiliary/needs-panic-runtime.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fneeds-panic-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fneeds-panic-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fneeds-panic-runtime.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "previous_filename": "src/test/ui/panic-runtime/auxiliary/needs-panic-runtime.rs"}, {"sha": "866c5b2e34bbd01071509b4eb14bbcc8a0d31ff6", "filename": "src/test/compile-fail/runtime-depend-on-needs-runtime.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fcompile-fail%2Fruntime-depend-on-needs-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fcompile-fail%2Fruntime-depend-on-needs-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fruntime-depend-on-needs-runtime.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -3,3 +3,5 @@\n // error-pattern:cannot depend on a crate that needs a panic runtime\n \n extern crate depends;\n+\n+fn main() {}", "previous_filename": "src/test/ui/panic-runtime/runtime-depend-on-needs-runtime.rs"}, {"sha": "27e27dda5effe256ea9513fe3f5ac8c22c2a870a", "filename": "src/test/compile-fail/runtime-depend-on-needs-runtime.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fcompile-fail%2Fruntime-depend-on-needs-runtime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fcompile-fail%2Fruntime-depend-on-needs-runtime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fruntime-depend-on-needs-runtime.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -0,0 +1,4 @@\n+error: the crate `depends` cannot depend on a crate that needs a panic runtime, but it depends on `needs_panic_runtime`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ce3b03efd26047ac50928ffbe52851f10d207f6e", "filename": "src/test/run-pass-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -105,7 +105,6 @@ fn iter_exprs(depth: usize, f: &mut FnMut(P<Expr>)) {\n                     id: DUMMY_NODE_ID,\n                     rules: BlockCheckMode::Default,\n                     span: DUMMY_SP,\n-                    recovered: false,\n                 });\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::If(e, block.clone(), None)));\n             },"}, {"sha": "496d196c94ae57cbfe107f45964b8990ea00b855", "filename": "src/test/ui/conditional-compilation/cfg-attr-invalid-predicate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,2 +1,4 @@\n #[cfg(foo(bar))] //~ ERROR invalid predicate `foo`\n+fn check() {}\n+\n fn main() {}"}, {"sha": "c7e1b4435e49baa43834db82683cd571f1387aec", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -33,3 +33,5 @@ macro_rules! generate_s10 {\n }\n \n generate_s10!(concat!(\"nonexistent\"));\n+\n+fn main() {}"}, {"sha": "fbda3dbe9481f43ee53e2c15111f876be9b930bc", "filename": "src/test/ui/cross/cross-crate-macro-backtrace/auxiliary/extern_macro_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fauxiliary%2Fextern_macro_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fauxiliary%2Fextern_macro_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fauxiliary%2Fextern_macro_crate.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -4,7 +4,7 @@ pub fn print(_args: std::fmt::Arguments) {}\n \n #[macro_export]\n macro_rules! myprint {\n-    ($($arg:tt)*) => (print(format_args!($($arg)*)));\n+    ($($arg:tt)*) => ($crate::print(format_args!($($arg)*)));\n }\n \n #[macro_export]"}, {"sha": "b847000a81d80089c9d3bc98a1c043b4494d0962", "filename": "src/test/ui/derives/derive-on-trait-item-or-impl-item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -4,6 +4,8 @@ trait Foo {\n     type Bar;\n }\n \n+struct Bar;\n+\n impl Bar {\n     #[derive(Clone)]\n     //~^ ERROR `derive` may only be applied to structs, enums and unions"}, {"sha": "b3aa886cd49264342c389f878aadacfd68fd05dd", "filename": "src/test/ui/derives/derive-on-trait-item-or-impl-item.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -5,7 +5,7 @@ LL |     #[derive(Clone)]\n    |     ^^^^^^^^^^^^^^^^\n \n error: `derive` may only be applied to structs, enums and unions\n-  --> $DIR/derive-on-trait-item-or-impl-item.rs:8:5\n+  --> $DIR/derive-on-trait-item-or-impl-item.rs:10:5\n    |\n LL |     #[derive(Clone)]\n    |     ^^^^^^^^^^^^^^^^"}, {"sha": "63eec50c2d29f06b37c849bd10bdacc6e23c9ab6", "filename": "src/test/ui/did_you_mean/issue-40396.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,14 +1,27 @@\n fn foo() {\n-    println!(\"{:?}\", (0..13).collect<Vec<i32>>()); //~ ERROR chained comparison\n+    (0..13).collect<Vec<i32>>();\n+    //~^ ERROR chained comparison\n+    //~| ERROR expected value, found struct `Vec`\n+    //~| ERROR expected value, found builtin type `i32`\n+    //~| ERROR attempted to take value of method `collect`\n }\n \n fn bar() {\n-    println!(\"{:?}\", Vec<i32>::new()); //~ ERROR chained comparison\n+    Vec<i32>::new();\n+    //~^ ERROR chained comparison\n+    //~| ERROR expected value, found struct `Vec`\n+    //~| ERROR expected value, found builtin type `i32`\n+    //~| ERROR cannot find function `new` in the crate root\n }\n \n fn qux() {\n-    println!(\"{:?}\", (0..13).collect<Vec<i32>()); //~ ERROR chained comparison\n+    (0..13).collect<Vec<i32>();\n     //~^ ERROR chained comparison\n+    //~| ERROR chained comparison\n+    //~| ERROR expected value, found struct `Vec`\n+    //~| ERROR expected value, found builtin type `i32`\n+    //~| ERROR attempted to take value of method `collect`\n+    //~| ERROR mismatched types\n }\n \n fn main() {}"}, {"sha": "3f6886bc3f699b96d65ec3aea50a886d35fe1089", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 82, "deletions": 13, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,38 +1,107 @@\n error: chained comparison operators require parentheses\n-  --> $DIR/issue-40396.rs:2:37\n+  --> $DIR/issue-40396.rs:2:20\n    |\n-LL |     println!(\"{:?}\", (0..13).collect<Vec<i32>>()); //~ ERROR chained comparison\n-   |                                     ^^^^^^^^\n+LL |     (0..13).collect<Vec<i32>>();\n+   |                    ^^^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n error: chained comparison operators require parentheses\n-  --> $DIR/issue-40396.rs:6:25\n+  --> $DIR/issue-40396.rs:10:8\n    |\n-LL |     println!(\"{:?}\", Vec<i32>::new()); //~ ERROR chained comparison\n-   |                         ^^^^^^^\n+LL |     Vec<i32>::new();\n+   |        ^^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n error: chained comparison operators require parentheses\n-  --> $DIR/issue-40396.rs:10:37\n+  --> $DIR/issue-40396.rs:18:20\n    |\n-LL |     println!(\"{:?}\", (0..13).collect<Vec<i32>()); //~ ERROR chained comparison\n-   |                                     ^^^^^^^^\n+LL |     (0..13).collect<Vec<i32>();\n+   |                    ^^^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n error: chained comparison operators require parentheses\n-  --> $DIR/issue-40396.rs:10:41\n+  --> $DIR/issue-40396.rs:18:24\n    |\n-LL |     println!(\"{:?}\", (0..13).collect<Vec<i32>()); //~ ERROR chained comparison\n-   |                                         ^^^^^^\n+LL |     (0..13).collect<Vec<i32>();\n+   |                        ^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n-error: aborting due to 4 previous errors\n+error[E0423]: expected value, found struct `Vec`\n+  --> $DIR/issue-40396.rs:2:21\n+   |\n+LL |     (0..13).collect<Vec<i32>>();\n+   |                     ^^^ did you mean `Vec { /* fields */ }`?\n+\n+error[E0423]: expected value, found builtin type `i32`\n+  --> $DIR/issue-40396.rs:2:25\n+   |\n+LL |     (0..13).collect<Vec<i32>>();\n+   |                         ^^^ not a value\n+\n+error[E0423]: expected value, found struct `Vec`\n+  --> $DIR/issue-40396.rs:10:5\n+   |\n+LL |     Vec<i32>::new();\n+   |     ^^^ did you mean `Vec { /* fields */ }`?\n+\n+error[E0423]: expected value, found builtin type `i32`\n+  --> $DIR/issue-40396.rs:10:9\n+   |\n+LL |     Vec<i32>::new();\n+   |         ^^^ not a value\n+\n+error[E0425]: cannot find function `new` in the crate root\n+  --> $DIR/issue-40396.rs:10:15\n+   |\n+LL |     Vec<i32>::new();\n+   |               ^^^ not found in the crate root\n+\n+error[E0423]: expected value, found struct `Vec`\n+  --> $DIR/issue-40396.rs:18:21\n+   |\n+LL |     (0..13).collect<Vec<i32>();\n+   |                     ^^^ did you mean `Vec { /* fields */ }`?\n+\n+error[E0423]: expected value, found builtin type `i32`\n+  --> $DIR/issue-40396.rs:18:25\n+   |\n+LL |     (0..13).collect<Vec<i32>();\n+   |                         ^^^ not a value\n+\n+error[E0615]: attempted to take value of method `collect` on type `std::ops::Range<{integer}>`\n+  --> $DIR/issue-40396.rs:2:13\n+   |\n+LL |     (0..13).collect<Vec<i32>>();\n+   |             ^^^^^^^\n+   |\n+   = help: maybe a `()` to call it is missing?\n+\n+error[E0615]: attempted to take value of method `collect` on type `std::ops::Range<{integer}>`\n+  --> $DIR/issue-40396.rs:18:13\n+   |\n+LL |     (0..13).collect<Vec<i32>();\n+   |             ^^^^^^^\n+   |\n+   = help: maybe a `()` to call it is missing?\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-40396.rs:18:29\n+   |\n+LL |     (0..13).collect<Vec<i32>();\n+   |                             ^^ expected bool, found ()\n+   |\n+   = note: expected type `bool`\n+              found type `()`\n+\n+error: aborting due to 14 previous errors\n \n+Some errors occurred: E0308, E0423, E0425, E0615.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "d1752a7ec71ddcb6ef2220fba8252577eed6d975", "filename": "src/test/ui/editions/edition-keywords-2015-2015-parsing.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -4,6 +4,10 @@\n #[macro_use]\n extern crate edition_kw_macro_2015;\n \n+mod module {\n+    pub fn async() {}\n+}\n+\n pub fn check_async() {\n     let mut async = 1; // OK\n     let mut r#async = 1; // OK\n@@ -18,3 +22,5 @@ pub fn check_async() {\n     module::async(); // OK\n     module::r#async(); // OK\n }\n+\n+fn main() {}"}, {"sha": "f2a9da71ca56b5927857de8d62ee1ec2ade6727a", "filename": "src/test/ui/editions/edition-keywords-2015-2015-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,11 +1,11 @@\n error: no rules expected the token `r#async`\n-  --> $DIR/edition-keywords-2015-2015-parsing.rs:12:31\n+  --> $DIR/edition-keywords-2015-2015-parsing.rs:16:31\n    |\n LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n    |                               ^^^^^^^ no rules expected this token in macro call\n \n error: no rules expected the token `async`\n-  --> $DIR/edition-keywords-2015-2015-parsing.rs:13:35\n+  --> $DIR/edition-keywords-2015-2015-parsing.rs:17:35\n    |\n LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n    |                                   ^^^^^ no rules expected this token in macro call"}, {"sha": "2684c8e00b2e11d762f25b6809f9169512114a8f", "filename": "src/test/ui/editions/edition-keywords-2015-2018-expansion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -10,3 +10,5 @@ mod one_async {\n mod two_async {\n     produces_async_raw! {} // OK\n }\n+\n+fn main() {}"}, {"sha": "44455f43856c6347a8677c7291921349193e6a94", "filename": "src/test/ui/editions/edition-keywords-2015-2018-parsing.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -4,6 +4,10 @@\n #[macro_use]\n extern crate edition_kw_macro_2018;\n \n+mod module {\n+    pub fn async() {}\n+}\n+\n pub fn check_async() {\n     let mut async = 1; // OK\n     let mut r#async = 1; // OK\n@@ -18,3 +22,5 @@ pub fn check_async() {\n     module::async(); // OK\n     module::r#async(); // OK\n }\n+\n+fn main() {}"}, {"sha": "fbb3b8bc75690960feb659bd7d4b19adbbc15e70", "filename": "src/test/ui/editions/edition-keywords-2015-2018-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,11 +1,11 @@\n error: no rules expected the token `r#async`\n-  --> $DIR/edition-keywords-2015-2018-parsing.rs:12:31\n+  --> $DIR/edition-keywords-2015-2018-parsing.rs:16:31\n    |\n LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n    |                               ^^^^^^^ no rules expected this token in macro call\n \n error: no rules expected the token `async`\n-  --> $DIR/edition-keywords-2015-2018-parsing.rs:13:35\n+  --> $DIR/edition-keywords-2015-2018-parsing.rs:17:35\n    |\n LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n    |                                   ^^^^^ no rules expected this token in macro call"}, {"sha": "6f766550d47341356abdf839d70db44e729e4a1e", "filename": "src/test/ui/editions/edition-keywords-2018-2018-expansion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -10,3 +10,5 @@ mod one_async {\n mod two_async {\n     produces_async_raw! {} // OK\n }\n+\n+fn main() {}"}, {"sha": "5f276f6b65ebcf23792086ef54320faef1800f4f", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-derive-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -13,3 +13,5 @@ mod derive {\n     //~^ ERROR cannot find derive macro `x3300` in this scope\n     struct S;\n }\n+\n+fn main() {}"}, {"sha": "1397412988491afd703781f1d1e0fdaf62cc309c", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-derive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -31,3 +31,5 @@ mod derive {\n     //~^ ERROR `derive` may only be applied to structs, enums and unions\n     impl S { }\n }\n+\n+fn main() {}"}, {"sha": "259b0a14e5c9bb3a333bc8b0c31c802bc713f00f", "filename": "src/test/ui/feature-gates/feature-gate-asm2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     unsafe {\n-        println!(\"{}\", asm!(\"\")); //~ ERROR inline assembly is not stable\n+        println!(\"{:?}\", asm!(\"\")); //~ ERROR inline assembly is not stable\n     }\n }"}, {"sha": "fc4aa57718ce30906b84732b5f36fb5d96836619", "filename": "src/test/ui/feature-gates/feature-gate-asm2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: inline assembly is not stable enough for use and is subject to change (see issue #29722)\n-  --> $DIR/feature-gate-asm2.rs:5:24\n+  --> $DIR/feature-gate-asm2.rs:5:26\n    |\n-LL |         println!(\"{}\", asm!(\"\")); //~ ERROR inline assembly is not stable\n-   |                        ^^^^^^^^\n+LL |         println!(\"{:?}\", asm!(\"\")); //~ ERROR inline assembly is not stable\n+   |                          ^^^^^^^^\n    |\n    = help: add #![feature(asm)] to the crate attributes to enable\n "}, {"sha": "db1a7dad06bc36e129835175c2e2a5442a2cd34d", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics, lang_items, no_core)]\n+\n #![crate_type=\"rlib\"]\n #![no_core]\n "}, {"sha": "a2d5669bcdcbef8f2eb82749a0e9a3f4a0c14b09", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,141 +1,141 @@\n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:13:7\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:15:7\n    |\n LL | #[cfg(target_has_atomic = \"8\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:19:7\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:21:7\n    |\n LL | #[cfg(target_has_atomic = \"8\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:24:7\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:26:7\n    |\n LL | #[cfg(target_has_atomic = \"16\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:29:7\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:31:7\n    |\n LL | #[cfg(target_has_atomic = \"16\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:34:7\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:36:7\n    |\n LL | #[cfg(target_has_atomic = \"32\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:39:7\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:41:7\n    |\n LL | #[cfg(target_has_atomic = \"32\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:44:7\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:46:7\n    |\n LL | #[cfg(target_has_atomic = \"64\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:49:7\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:51:7\n    |\n LL | #[cfg(target_has_atomic = \"64\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:54:7\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:56:7\n    |\n LL | #[cfg(target_has_atomic = \"128\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:59:7\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:61:7\n    |\n LL | #[cfg(target_has_atomic = \"128\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:64:7\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:66:7\n    |\n LL | #[cfg(target_has_atomic = \"ptr\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:69:7\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:71:7\n    |\n LL | #[cfg(target_has_atomic = \"ptr\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:76:10\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:78:10\n    |\n LL |     cfg!(target_has_atomic = \"8\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:78:10\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:80:10\n    |\n LL |     cfg!(target_has_atomic = \"16\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:80:10\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:82:10\n    |\n LL |     cfg!(target_has_atomic = \"32\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:82:10\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:84:10\n    |\n LL |     cfg!(target_has_atomic = \"64\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:84:10\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:86:10\n    |\n LL |     cfg!(target_has_atomic = \"128\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n-  --> $DIR/feature-gate-cfg-target-has-atomic.rs:86:10\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:88:10\n    |\n LL |     cfg!(target_has_atomic = \"ptr\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "0cc6c577e8d5e9a1350d4ea37d0090b52893fc41", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -2,4 +2,5 @@\n \n fn main() {\n     concat_idents!(a, b); //~ ERROR `concat_idents` is not stable enough\n+                          //~| ERROR cannot find value `ab` in this scope\n }"}, {"sha": "cae409019f7a64135bcd92730d4e6a9eea7c47af", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents2.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -6,6 +6,13 @@ LL |     concat_idents!(a, b); //~ ERROR `concat_idents` is not stable enough\n    |\n    = help: add #![feature(concat_idents)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0425]: cannot find value `ab` in this scope\n+  --> $DIR/feature-gate-concat_idents2.rs:4:5\n+   |\n+LL |     concat_idents!(a, b); //~ ERROR `concat_idents` is not stable enough\n+   |     ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors occurred: E0425, E0658.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "src/test/ui/feature-gates/feature-gate-log_syntax.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stdout?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "a3906dcc16e1cb6f1444a75892c9519002c46e75", "filename": "src/test/ui/feature-gates/feature-gate-log_syntax2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,5 +1,5 @@\n // gate-test-log_syntax\n \n fn main() {\n-    println!(\"{}\", log_syntax!()); //~ ERROR `log_syntax!` is not stable\n+    println!(\"{:?}\", log_syntax!()); //~ ERROR `log_syntax!` is not stable\n }"}, {"sha": "bdcd922c6e1e44c973daa70f34c232dabc19165e", "filename": "src/test/ui/feature-gates/feature-gate-log_syntax2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: `log_syntax!` is not stable enough for use and is subject to change (see issue #29598)\n-  --> $DIR/feature-gate-log_syntax2.rs:4:20\n+  --> $DIR/feature-gate-log_syntax2.rs:4:22\n    |\n-LL |     println!(\"{}\", log_syntax!()); //~ ERROR `log_syntax!` is not stable\n-   |                    ^^^^^^^^^^^^^\n+LL |     println!(\"{:?}\", log_syntax!()); //~ ERROR `log_syntax!` is not stable\n+   |                      ^^^^^^^^^^^^^\n    |\n    = help: add #![feature(log_syntax)] to the crate attributes to enable\n "}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "src/test/ui/feature-gates/feature-gate-log_syntax2.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stdout?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "125af64fef05c7bb99dea8969773eb7806588037", "filename": "src/test/ui/feature-gates/feature-gate-macros_in_extern.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macros_in_extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macros_in_extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macros_in_extern.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -23,3 +23,5 @@ extern {\n     emits_nothing!();\n     //~^ ERROR macro invocations in `extern {}` blocks are experimental\n }\n+\n+fn main() {}"}, {"sha": "5ec413cc71de0b26cab7e75dece06d26e3a7a8ec", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,8 +1,6 @@\n-// ignore-tidy-linelength\n-\n // Test that `#[rustc_*]` attributes are gated by `rustc_attrs` feature gate.\n \n #[rustc_foo]\n-//~^ ERROR unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n+//~^ ERROR unless otherwise specified, attributes with the prefix `rustc_` are reserved\n \n fn main() {}"}, {"sha": "40e6d6d925679b883d0acf0e87eb52da0619f538", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics (see issue #29642)\n-  --> $DIR/feature-gate-rustc-attrs.rs:5:3\n+  --> $DIR/feature-gate-rustc-attrs.rs:3:3\n    |\n LL | #[rustc_foo]\n    |   ^^^^^^^^^"}, {"sha": "95c8c2b0585b631d353c7c7e188142458974efe9", "filename": "src/test/ui/issues/issue-10536.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-10536.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-10536.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10536.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,8 +1,6 @@\n // We only want to assert that this doesn't ICE, we don't particularly care\n // about whether it nor it fails to compile.\n \n-// error-pattern:\n-\n macro_rules! foo{\n     () => {{\n         macro_rules! bar{() => (())}\n@@ -15,9 +13,11 @@ pub fn main() {\n \n     assert!({one! two()});\n     //~^ ERROR macros that expand to items must either be surrounded with braces or followed by a\n+    //~| ERROR cannot find macro `one!` in this scope\n+    //~| ERROR mismatched types\n \n     // regardless of whether nested macro_rules works, the following should at\n     // least throw a conventional error.\n     assert!({one! two});\n-    //~^ ERROR expected\n+    //~^ ERROR expected `(` or `{`, found `}`\n }"}, {"sha": "d5caf777cd45e989996c1fb6fc80b37cb45ffc37", "filename": "src/test/ui/issues/issue-10536.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,5 +1,5 @@\n error: macros that expand to items must either be surrounded with braces or followed by a semicolon\n-  --> $DIR/issue-10536.rs:16:22\n+  --> $DIR/issue-10536.rs:14:22\n    |\n LL |     assert!({one! two()});\n    |                      ^^\n@@ -10,5 +10,21 @@ error: expected `(` or `{`, found `}`\n LL |     assert!({one! two});\n    |                      ^ expected `(` or `{`\n \n-error: aborting due to 2 previous errors\n+error: cannot find macro `one!` in this scope\n+  --> $DIR/issue-10536.rs:14:14\n+   |\n+LL |     assert!({one! two()});\n+   |              ^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-10536.rs:14:13\n+   |\n+LL |     assert!({one! two()});\n+   |             ^^^^^^^^^^^^ expected bool, found ()\n+   |\n+   = note: expected type `bool`\n+              found type `()`\n+\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "2277778040292092af60a1ae95766b1716967e51", "filename": "src/test/ui/issues/issue-11692-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n     print!(testo!());\n     //~^ ERROR: format argument must be a string literal\n+    //~| ERROR: cannot find macro `testo!` in this scope\n }"}, {"sha": "f4cc825803a3b53b9d6d77256a3ee0bf76460759", "filename": "src/test/ui/issues/issue-11692-1.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -8,5 +8,11 @@ help: you might be missing a string literal to format with\n LL |     print!(\"{}\", testo!());\n    |            ^^^^^\n \n-error: aborting due to previous error\n+error: cannot find macro `testo!` in this scope\n+  --> $DIR/issue-11692-1.rs:2:12\n+   |\n+LL |     print!(testo!());\n+   |            ^^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "6103931657342d77511e1c9e231f18c4b5983e00", "filename": "src/test/ui/issues/issue-11692-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,3 +1,4 @@\n fn main() {\n     concat!(test!()); //~ ERROR cannot find macro `test!` in this scope\n+                      //~| ERROR expected a literal\n }"}, {"sha": "848415435a78ba0d3feb891f5aaa06f01fe3d7e9", "filename": "src/test/ui/issues/issue-11692-2.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,8 +1,16 @@\n+error: expected a literal\n+  --> $DIR/issue-11692-2.rs:2:13\n+   |\n+LL |     concat!(test!()); //~ ERROR cannot find macro `test!` in this scope\n+   |             ^^^^^^^\n+   |\n+   = note: only literals (like `\"foo\"`, `42` and `3.14`) can be passed to `concat!()`\n+\n error: cannot find macro `test!` in this scope\n   --> $DIR/issue-11692-2.rs:2:13\n    |\n LL |     concat!(test!()); //~ ERROR cannot find macro `test!` in this scope\n    |             ^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "27d68a11c1f160d6e456c2c6d9ba3691d6d7e766", "filename": "src/test/ui/issues/issue-32950.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-32950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-32950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32950.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -3,6 +3,7 @@\n #[derive(Debug)]\n struct Baz<T>(\n     concat_idents!(Foo, Bar) //~ ERROR `derive` cannot be used on items with type macros\n+                             //~^ ERROR cannot find type `FooBar` in this scope\n );\n \n fn main() {}"}, {"sha": "13aed4a1756b31bacfbfc8d088f01852766d4716", "filename": "src/test/ui/issues/issue-32950.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-32950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-32950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32950.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -4,5 +4,12 @@ error: `derive` cannot be used on items with type macros\n LL |     concat_idents!(Foo, Bar) //~ ERROR `derive` cannot be used on items with type macros\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0412]: cannot find type `FooBar` in this scope\n+  --> $DIR/issue-32950.rs:5:5\n+   |\n+LL |     concat_idents!(Foo, Bar) //~ ERROR `derive` cannot be used on items with type macros\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "223bbc3ff5e2190f35519ca5b3ee1665fe1f9fbc", "filename": "src/test/ui/issues/issue-33571.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-33571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-33571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33571.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -2,3 +2,5 @@\n          Sync, //~ ERROR this unsafe trait should be implemented explicitly\n          Copy)]\n enum Foo {}\n+\n+fn main() {}"}, {"sha": "71e2125ffd2ccc7d992f8f8797721480882286e8", "filename": "src/test/ui/issues/issue-35677.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-35677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-35677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35677.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -3,3 +3,5 @@ fn intersect_map<K, V>(this: &mut HashMap<K, V>, other: HashMap<K, V>) -> bool {\n     this.drain()\n     //~^ ERROR no method named\n }\n+\n+fn main() {}"}, {"sha": "61ddb75b3b52c3a8203e191594bd3232c10d7004", "filename": "src/test/ui/issues/issue-35677.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,7 +1,3 @@\n-error[E0601]: `main` function not found in crate `issue_35677`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-35677.rs`\n-\n error[E0599]: no method named `drain` found for type `&mut std::collections::HashMap<K, V>` in the current scope\n   --> $DIR/issue-35677.rs:3:10\n    |\n@@ -12,7 +8,6 @@ LL |     this.drain()\n            `K : std::cmp::Eq`\n            `K : std::hash::Hash`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0599, E0601.\n-For more information about an error, try `rustc --explain E0599`.\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "87092689a281d418b15cc6f63c7635b645187ad0", "filename": "src/test/ui/issues/issue-36617.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-36617.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-36617.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36617.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1 +1,3 @@\n #![derive(Copy)] //~ ERROR `derive` may only be applied to structs, enums and unions\n+\n+fn main() {}"}, {"sha": "072243d881ca68f1507b631ef6f47cfb532f035f", "filename": "src/test/ui/issues/issue-43023.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-43023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-43023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43023.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -16,3 +16,5 @@ trait Tr2 {\n     #[derive(Debug)] //~ ERROR `derive` may only be applied to structs, enums and unions\n     type F;\n }\n+\n+fn main() {}"}, {"sha": "d78b958463fcb8e14e253ee91d468541fe5738e8", "filename": "src/test/ui/issues/issue-46438.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-46438.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-46438.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46438.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -4,7 +4,7 @@ macro_rules! m {\n     }\n }\n \n-trait Trait {}\n+trait Tr {}\n \n m!(Tr);\n "}, {"sha": "ad66e421c6b9de848382eb619323ba1eac75f26e", "filename": "src/test/ui/issues/issue-49074.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-49074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-49074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49074.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -9,5 +9,5 @@ mod foo {\n }\n \n fn main() {\n-   bar!();\n+   bar!(); //~ ERROR cannot find macro `bar!` in this scope\n }"}, {"sha": "d4648270f2d308dc3daaa1ca5439bdbc9bd0fed4", "filename": "src/test/ui/issues/issue-49074.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -6,6 +6,14 @@ LL | #[marco_use] // typo\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: cannot find macro `bar!` in this scope\n+  --> $DIR/issue-49074.rs:12:4\n+   |\n+LL |    bar!(); //~ ERROR cannot find macro `bar!` in this scope\n+   |    ^^^\n+   |\n+   = help: have you added the `#[macro_use]` on the module/import?\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "ad5438fbd46cbd80e6aea86762ed55444ae69af0", "filename": "src/test/ui/issues/issue-51279.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-51279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-51279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51279.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -22,3 +22,4 @@ unsafe impl<#[cfg_attr(none, may_dangle)] T> Drop for M<T> {\n \n type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n //~^ ERROR #[cfg] cannot be applied on a generic parameter\n+//~| ERROR attribute `ignored` is currently unknown to the compiler"}, {"sha": "1706e98e83b6392c286b2de1055bae8a2d44fd4d", "filename": "src/test/ui/issues/issue-51279.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -46,5 +46,14 @@ error: #[cfg] cannot be applied on a generic parameter\n LL | type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n    |                       ^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error[E0658]: The attribute `ignored` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/issue-51279.rs:23:8\n+   |\n+LL | type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n+   |        ^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: aborting due to 9 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "efdea5c9b1e16e44c2cd536a99f12ab4f641aa78", "filename": "src/test/ui/issues/issue-55796.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -22,3 +22,5 @@ pub trait Graph<'a> {\n //~^ ERROR cannot infer\n     }\n }\n+\n+fn main() {}"}, {"sha": "c05f8b85d0e989c16ca92b2c2887be8b7ca75972", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,7 +1,3 @@\n-error[E0601]: `main` function not found in crate `issue_55796`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-55796.rs`\n-\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/issue-55796.rs:16:9\n    |\n@@ -44,7 +40,6 @@ LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n            expected std::boxed::Box<(dyn std::iter::Iterator<Item=<Self as Graph<'a>>::Node> + 'static)>\n               found std::boxed::Box<dyn std::iter::Iterator<Item=<Self as Graph<'a>>::Node>>\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors occurred: E0495, E0601.\n-For more information about an error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "b19700efe5ad3e988813be09da5bbf24a16198ec", "filename": "src/test/ui/issues/issue-6596-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -4,10 +4,10 @@ macro_rules! g {\n     ($inp:ident) => (\n         { $inp $nonexistent }\n         //~^ ERROR unknown macro variable `nonexistent`\n-        //~| ERROR expected one of\n     );\n }\n \n fn main() {\n+    let foo = 0;\n     g!(foo);\n }"}, {"sha": "20fbe0fab0112466d1df871be65f174e5b3629f1", "filename": "src/test/ui/issues/issue-6596-2.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -7,14 +7,5 @@ LL |         { $inp $nonexistent }\n LL |     g!(foo);\n    |     -------- in this macro invocation\n \n-error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `nonexistent`\n-  --> $DIR/issue-6596-2.rs:5:16\n-   |\n-LL |         { $inp $nonexistent }\n-   |                ^^^^^^^^^^^^ expected one of 8 possible tokens here\n-...\n-LL |     g!(foo);\n-   |     -------- in this macro invocation\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "8fcd497f87b788682a329733a78ae459eef42dd6", "filename": "src/test/ui/macro_backtrace/main.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -12,6 +12,9 @@ macro_rules! pong {\n //~| ERROR expected one of\n //~| ERROR expected one of\n \n+#[allow(non_camel_case_types)]\n+struct syntax;\n+\n fn main() {\n     pong!();\n     ping!();"}, {"sha": "dd0cac659fd312a1e4ccc8a96b3ceee10d58ab2a", "filename": "src/test/ui/macros/macro-comma-behavior.core.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.core.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,41 +1,41 @@\n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:17:23\n+  --> $DIR/macro-comma-behavior.rs:21:23\n    |\n LL |     assert_eq!(1, 1, \"{}\",);\n    |                       ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:20:23\n+  --> $DIR/macro-comma-behavior.rs:24:23\n    |\n LL |     assert_ne!(1, 2, \"{}\",);\n    |                       ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:26:29\n+  --> $DIR/macro-comma-behavior.rs:30:29\n    |\n LL |     debug_assert_eq!(1, 1, \"{}\",);\n    |                             ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:29:29\n+  --> $DIR/macro-comma-behavior.rs:33:29\n    |\n LL |     debug_assert_ne!(1, 2, \"{}\",);\n    |                             ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:50:19\n+  --> $DIR/macro-comma-behavior.rs:54:19\n    |\n LL |     format_args!(\"{}\",);\n    |                   ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:68:21\n+  --> $DIR/macro-comma-behavior.rs:72:21\n    |\n LL |     unimplemented!(\"{}\",);\n    |                     ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:77:24\n+  --> $DIR/macro-comma-behavior.rs:81:24\n    |\n LL |             write!(f, \"{}\",)?;\n    |                        ^^"}, {"sha": "006319aa9f5b2ede04fe58004e55a048962dce47", "filename": "src/test/ui/macros/macro-comma-behavior.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -3,10 +3,14 @@\n // compile-flags: -C debug_assertions=yes\n // revisions: std core\n \n+#![feature(lang_items)]\n #![cfg_attr(core, no_std)]\n \n #[cfg(std)] use std::fmt;\n #[cfg(core)] use core::fmt;\n+#[cfg(core)] #[lang = \"eh_personality\"] fn eh_personality() {}\n+#[cfg(core)] #[lang = \"eh_unwind_resume\"] fn eh_unwind_resume() {}\n+#[cfg(core)] #[lang = \"panic_impl\"] fn panic_impl(panic: &core::panic::PanicInfo) -> ! { loop {} }\n \n // (see documentation of the similarly-named test in run-pass)\n fn to_format_or_not_to_format() {"}, {"sha": "4372d89fbf5220170906f086313b8fcdf45ab7c6", "filename": "src/test/ui/macros/macro-comma-behavior.std.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.std.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,59 +1,59 @@\n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:17:23\n+  --> $DIR/macro-comma-behavior.rs:21:23\n    |\n LL |     assert_eq!(1, 1, \"{}\",);\n    |                       ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:20:23\n+  --> $DIR/macro-comma-behavior.rs:24:23\n    |\n LL |     assert_ne!(1, 2, \"{}\",);\n    |                       ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:26:29\n+  --> $DIR/macro-comma-behavior.rs:30:29\n    |\n LL |     debug_assert_eq!(1, 1, \"{}\",);\n    |                             ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:29:29\n+  --> $DIR/macro-comma-behavior.rs:33:29\n    |\n LL |     debug_assert_ne!(1, 2, \"{}\",);\n    |                             ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:34:18\n+  --> $DIR/macro-comma-behavior.rs:38:18\n    |\n LL |         eprint!(\"{}\",);\n    |                  ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:46:18\n+  --> $DIR/macro-comma-behavior.rs:50:18\n    |\n LL |         format!(\"{}\",);\n    |                  ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:50:19\n+  --> $DIR/macro-comma-behavior.rs:54:19\n    |\n LL |     format_args!(\"{}\",);\n    |                   ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:57:17\n+  --> $DIR/macro-comma-behavior.rs:61:17\n    |\n LL |         print!(\"{}\",);\n    |                 ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:68:21\n+  --> $DIR/macro-comma-behavior.rs:72:21\n    |\n LL |     unimplemented!(\"{}\",);\n    |                     ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:77:24\n+  --> $DIR/macro-comma-behavior.rs:81:24\n    |\n LL |             write!(f, \"{}\",)?;\n    |                        ^^"}, {"sha": "2c8ebc497728b73a5ee6be3d35ec5c09a111ab0b", "filename": "src/test/ui/malformed/malformed-derive-entry.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -13,3 +13,5 @@ struct Test3;\n #[derive]\n //~^ WARNING empty trait list\n struct Test4;\n+\n+fn main() {}"}, {"sha": "0e68c9b806d1d67bd76b2da69a2f51c417851292", "filename": "src/test/ui/panic-runtime/runtime-depend-on-needs-runtime.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fb86d604bf65c3becd16180b56267a329cf268d5/src%2Ftest%2Fui%2Fpanic-runtime%2Fruntime-depend-on-needs-runtime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb86d604bf65c3becd16180b56267a329cf268d5/src%2Ftest%2Fui%2Fpanic-runtime%2Fruntime-depend-on-needs-runtime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fruntime-depend-on-needs-runtime.stderr?ref=fb86d604bf65c3becd16180b56267a329cf268d5", "patch": "@@ -1,9 +0,0 @@\n-error: the crate `depends` cannot depend on a crate that needs a panic runtime, but it depends on `needs_panic_runtime`\n-\n-error[E0601]: `main` function not found in crate `runtime_depend_on_needs_runtime`\n-   |\n-   = note: consider adding a `main` function to `$DIR/runtime-depend-on-needs-runtime.rs`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "bae90227c62f405d3b1bae2a7eddf36539d2ddd4", "filename": "src/test/ui/parser/macro/pub-item-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -14,5 +14,5 @@ mod foo {\n }\n \n fn main() {\n-    let y: u32 = foo::x;\n+    let y: u32 = foo::x; //~ ERROR static `x` is private\n }"}, {"sha": "a624d574c456f212e28632bcb499290c52a0b74b", "filename": "src/test/ui/parser/macro/pub-item-macro.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -9,5 +9,12 @@ LL |     pub_x!();\n    |\n    = help: try adjusting the macro to put `pub` inside the invocation\n \n-error: aborting due to previous error\n+error[E0603]: static `x` is private\n+  --> $DIR/pub-item-macro.rs:17:23\n+   |\n+LL |     let y: u32 = foo::x; //~ ERROR static `x` is private\n+   |                       ^\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0603`."}, {"sha": "0b082f4818f1b53fa32f72cc1e13df96ec721cd3", "filename": "src/test/ui/proc-macro/issue-41211.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -7,6 +7,7 @@\n \n #![emit_unchanged]\n //~^ ERROR attribute `emit_unchanged` is currently unknown to the compiler\n+//~| ERROR inconsistent resolution for a macro: first custom attribute, then attribute macro\n extern crate issue_41211;\n use issue_41211::emit_unchanged;\n "}, {"sha": "f75481e4829bfae22644a58090d265c2d5f0d475", "filename": "src/test/ui/proc-macro/issue-41211.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -6,6 +6,12 @@ LL | #![emit_unchanged]\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: inconsistent resolution for a macro: first custom attribute, then attribute macro\n+  --> $DIR/issue-41211.rs:8:4\n+   |\n+LL | #![emit_unchanged]\n+   |    ^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "d0dd1b4603b168b4409fe05738794eeb66c77bc1", "filename": "src/test/ui/proc-macro/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -7,3 +7,5 @@ extern crate lifetimes;\n use lifetimes::*;\n \n type A = single_quote_alone!(); //~ ERROR expected type, found `'`\n+\n+fn main() {}"}, {"sha": "b870b438a65406101839550ab906fca5a9123ad3", "filename": "src/test/ui/proc-macro/more-gates.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,5 +1,7 @@\n // aux-build:more-gates.rs\n \n+#![feature(decl_macro)]\n+\n extern crate more_gates as foo;\n \n use foo::*;"}, {"sha": "21e75027e487927fa0e0602e2f02b389e0ad7863", "filename": "src/test/ui/proc-macro/more-gates.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,37 +1,37 @@\n error[E0658]: procedural macros cannot expand to macro definitions (see issue #54727)\n-  --> $DIR/more-gates.rs:7:1\n+  --> $DIR/more-gates.rs:9:1\n    |\n LL | #[attr2mac1]\n    | ^^^^^^^^^^^^\n    |\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: procedural macros cannot expand to macro definitions (see issue #54727)\n-  --> $DIR/more-gates.rs:10:1\n+  --> $DIR/more-gates.rs:12:1\n    |\n LL | #[attr2mac2]\n    | ^^^^^^^^^^^^\n    |\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: procedural macros cannot expand to macro definitions (see issue #54727)\n-  --> $DIR/more-gates.rs:14:1\n+  --> $DIR/more-gates.rs:16:1\n    |\n LL | mac2mac1!(); //~ ERROR: cannot expand to macro definitions\n    | ^^^^^^^^^^^^\n    |\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: procedural macros cannot expand to macro definitions (see issue #54727)\n-  --> $DIR/more-gates.rs:15:1\n+  --> $DIR/more-gates.rs:17:1\n    |\n LL | mac2mac2!(); //~ ERROR: cannot expand to macro definitions\n    | ^^^^^^^^^^^^\n    |\n    = help: add #![feature(proc_macro_hygiene)] to the crate attributes to enable\n \n error[E0658]: procedural macros cannot expand to macro definitions (see issue #54727)\n-  --> $DIR/more-gates.rs:17:1\n+  --> $DIR/more-gates.rs:19:1\n    |\n LL | tricky!();\n    | ^^^^^^^^^^"}, {"sha": "799f1de586ed4d10774eed84c4f4b89563f25902", "filename": "src/test/ui/proc-macro/parent-source-spans.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -28,6 +28,9 @@ macro three($($tokens:tt)*) {\n \n macro four($($tokens:tt)*) {\n     parent_source_spans!($($tokens)*);\n+    //~^ ERROR cannot find value `ok` in this scope\n+    //~| ERROR cannot find value `ok` in this scope\n+    //~| ERROR cannot find value `ok` in this scope\n }\n \n fn main() {"}, {"sha": "a8ee325b41de5c0750e1082f59916e50c8ab51e4", "filename": "src/test/ui/proc-macro/parent-source-spans.stderr", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -35,25 +35,25 @@ LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n \n error: first grandparent: \"hello\"\n-  --> $DIR/parent-source-spans.rs:34:5\n+  --> $DIR/parent-source-spans.rs:37:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: second grandparent: \"world\"\n-  --> $DIR/parent-source-spans.rs:34:5\n+  --> $DIR/parent-source-spans.rs:37:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: first source: \"hello\"\n-  --> $DIR/parent-source-spans.rs:34:5\n+  --> $DIR/parent-source-spans.rs:37:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: second source: \"world\"\n-  --> $DIR/parent-source-spans.rs:34:5\n+  --> $DIR/parent-source-spans.rs:37:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -77,52 +77,80 @@ LL |     two!(\"yay\", \"rust\");\n    |     -------------------- in this macro invocation\n \n error: first parent: \"yay\"\n-  --> $DIR/parent-source-spans.rs:40:5\n+  --> $DIR/parent-source-spans.rs:43:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: second parent: \"rust\"\n-  --> $DIR/parent-source-spans.rs:40:5\n+  --> $DIR/parent-source-spans.rs:43:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: first source: \"yay\"\n-  --> $DIR/parent-source-spans.rs:40:5\n+  --> $DIR/parent-source-spans.rs:43:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: second source: \"rust\"\n-  --> $DIR/parent-source-spans.rs:40:5\n+  --> $DIR/parent-source-spans.rs:43:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: first final: \"hip\"\n-  --> $DIR/parent-source-spans.rs:46:12\n+  --> $DIR/parent-source-spans.rs:49:12\n    |\n LL |     three!(\"hip\", \"hop\");\n    |            ^^^^^\n \n error: second final: \"hop\"\n-  --> $DIR/parent-source-spans.rs:46:19\n+  --> $DIR/parent-source-spans.rs:49:19\n    |\n LL |     three!(\"hip\", \"hop\");\n    |                   ^^^^^\n \n error: first source: \"hip\"\n-  --> $DIR/parent-source-spans.rs:46:12\n+  --> $DIR/parent-source-spans.rs:49:12\n    |\n LL |     three!(\"hip\", \"hop\");\n    |            ^^^^^\n \n error: second source: \"hop\"\n-  --> $DIR/parent-source-spans.rs:46:19\n+  --> $DIR/parent-source-spans.rs:49:19\n    |\n LL |     three!(\"hip\", \"hop\");\n    |                   ^^^^^\n \n-error: aborting due to 18 previous errors\n+error[E0425]: cannot find value `ok` in this scope\n+  --> $DIR/parent-source-spans.rs:30:5\n+   |\n+LL |     parent_source_spans!($($tokens)*);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ did you mean `Ok`?\n+...\n+LL |     one!(\"hello\", \"world\");\n+   |     ----------------------- in this macro invocation\n+\n+error[E0425]: cannot find value `ok` in this scope\n+  --> $DIR/parent-source-spans.rs:30:5\n+   |\n+LL |     parent_source_spans!($($tokens)*);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ did you mean `Ok`?\n+...\n+LL |     two!(\"yay\", \"rust\");\n+   |     -------------------- in this macro invocation\n+\n+error[E0425]: cannot find value `ok` in this scope\n+  --> $DIR/parent-source-spans.rs:30:5\n+   |\n+LL |     parent_source_spans!($($tokens)*);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ did you mean `Ok`?\n+...\n+LL |     three!(\"hip\", \"hop\");\n+   |     --------------------- in this macro invocation\n+\n+error: aborting due to 21 previous errors\n \n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "1cc824e943c75b7ce14848ded7fd7eaf8a4e987d", "filename": "src/test/ui/proc-macro/proc-macro-attributes.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -3,11 +3,12 @@\n #[macro_use]\n extern crate derive_b;\n \n-#[B]\n+#[B] //~ ERROR `B` is ambiguous\n #[C] //~ ERROR attribute `C` is currently unknown to the compiler\n-#[B(D)]\n-#[B(E = \"foo\")]\n-#[B(arbitrary tokens)]\n+#[B(D)] //~ ERROR `B` is ambiguous\n+#[B(E = \"foo\")] //~ ERROR `B` is ambiguous\n+#[B(arbitrary tokens)] //~ ERROR `B` is ambiguous\n+                       //~^ ERROR expected one of `(`, `)`, `,`, `::`, or `=`, found `tokens`\n #[derive(B)]\n struct B;\n "}, {"sha": "7ac44c9354dd501cedfd8b56b72a75b7e0dec3c0", "filename": "src/test/ui/proc-macro/proc-macro-attributes.stderr", "status": "modified", "additions": 77, "deletions": 2, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -6,6 +6,81 @@ LL | #[C] //~ ERROR attribute `C` is currently unknown to the compiler\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0659]: `B` is ambiguous (derive helper attribute vs any other name)\n+  --> $DIR/proc-macro-attributes.rs:6:3\n+   |\n+LL | #[B] //~ ERROR `B` is ambiguous\n+   |   ^ ambiguous name\n+   |\n+note: `B` could refer to the derive helper attribute defined here\n+  --> $DIR/proc-macro-attributes.rs:12:10\n+   |\n+LL | #[derive(B)]\n+   |          ^\n+note: `B` could also refer to the derive macro imported here\n+  --> $DIR/proc-macro-attributes.rs:3:1\n+   |\n+LL | #[macro_use]\n+   | ^^^^^^^^^^^^\n+\n+error[E0659]: `B` is ambiguous (derive helper attribute vs any other name)\n+  --> $DIR/proc-macro-attributes.rs:8:3\n+   |\n+LL | #[B(D)] //~ ERROR `B` is ambiguous\n+   |   ^ ambiguous name\n+   |\n+note: `B` could refer to the derive helper attribute defined here\n+  --> $DIR/proc-macro-attributes.rs:12:10\n+   |\n+LL | #[derive(B)]\n+   |          ^\n+note: `B` could also refer to the derive macro imported here\n+  --> $DIR/proc-macro-attributes.rs:3:1\n+   |\n+LL | #[macro_use]\n+   | ^^^^^^^^^^^^\n+\n+error[E0659]: `B` is ambiguous (derive helper attribute vs any other name)\n+  --> $DIR/proc-macro-attributes.rs:9:3\n+   |\n+LL | #[B(E = \"foo\")] //~ ERROR `B` is ambiguous\n+   |   ^ ambiguous name\n+   |\n+note: `B` could refer to the derive helper attribute defined here\n+  --> $DIR/proc-macro-attributes.rs:12:10\n+   |\n+LL | #[derive(B)]\n+   |          ^\n+note: `B` could also refer to the derive macro imported here\n+  --> $DIR/proc-macro-attributes.rs:3:1\n+   |\n+LL | #[macro_use]\n+   | ^^^^^^^^^^^^\n+\n+error[E0659]: `B` is ambiguous (derive helper attribute vs any other name)\n+  --> $DIR/proc-macro-attributes.rs:10:3\n+   |\n+LL | #[B(arbitrary tokens)] //~ ERROR `B` is ambiguous\n+   |   ^ ambiguous name\n+   |\n+note: `B` could refer to the derive helper attribute defined here\n+  --> $DIR/proc-macro-attributes.rs:12:10\n+   |\n+LL | #[derive(B)]\n+   |          ^\n+note: `B` could also refer to the derive macro imported here\n+  --> $DIR/proc-macro-attributes.rs:3:1\n+   |\n+LL | #[macro_use]\n+   | ^^^^^^^^^^^^\n+\n+error: expected one of `(`, `)`, `,`, `::`, or `=`, found `tokens`\n+  --> $DIR/proc-macro-attributes.rs:10:15\n+   |\n+LL | #[B(arbitrary tokens)] //~ ERROR `B` is ambiguous\n+   |               ^^^^^^ expected one of `(`, `)`, `,`, `::`, or `=` here\n+\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors occurred: E0658, E0659.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "b948226652b45fbca46b0d6c0394f8be685218c8", "filename": "src/test/ui/quote-with-interpolated.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fquote-with-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fquote-with-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquote-with-interpolated.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -2,7 +2,12 @@\n fn main() {\n     macro_rules! foo {\n         ($bar:expr)  => {\n-            quote_expr!(cx, $bar) //~ ERROR quote! with interpolated token\n+            quote_expr!(cx, $bar)\n+            //~^ ERROR quote! with interpolated token\n+            //~| ERROR failed to resolve: maybe a missing `extern crate syntax;`?\n+            //~| ERROR failed to resolve: maybe a missing `extern crate syntax;`?\n+            //~| ERROR cannot find value `cx` in this scope\n+            //~| ERROR cannot find function `new_parser_from_tts` in this scope\n         }\n     }\n     foo!(bar);"}, {"sha": "96feff949bfc936f51653e7d91fda261741240fd", "filename": "src/test/ui/quote-with-interpolated.stderr", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fquote-with-interpolated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fquote-with-interpolated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquote-with-interpolated.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,11 +1,40 @@\n error: quote! with interpolated token\n   --> $DIR/quote-with-interpolated.rs:5:29\n    |\n-LL |             quote_expr!(cx, $bar) //~ ERROR quote! with interpolated token\n+LL |             quote_expr!(cx, $bar)\n    |                             ^^^^\n ...\n LL |     foo!(bar);\n    |     ---------- in this macro invocation\n \n-error: aborting due to previous error\n+error[E0433]: failed to resolve: maybe a missing `extern crate syntax;`?\n+  --> $DIR/quote-with-interpolated.rs:5:13\n+   |\n+LL |             quote_expr!(cx, $bar)\n+   |             ^^^^^^^^^^^^^^^^^^^^^ maybe a missing `extern crate syntax;`?\n+\n+error[E0433]: failed to resolve: maybe a missing `extern crate syntax;`?\n+  --> $DIR/quote-with-interpolated.rs:5:29\n+   |\n+LL |             quote_expr!(cx, $bar)\n+   |                             ^^^^ maybe a missing `extern crate syntax;`?\n+\n+error[E0425]: cannot find value `cx` in this scope\n+  --> $DIR/quote-with-interpolated.rs:5:25\n+   |\n+LL |             quote_expr!(cx, $bar)\n+   |                         ^^ not found in this scope\n+...\n+LL |     foo!(bar);\n+   |     ---------- in this macro invocation\n+\n+error[E0425]: cannot find function `new_parser_from_tts` in this scope\n+  --> $DIR/quote-with-interpolated.rs:5:13\n+   |\n+LL |             quote_expr!(cx, $bar)\n+   |             ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to 5 previous errors\n \n+Some errors occurred: E0425, E0433.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "96c63ba4db8c9dfb0879a0a8023c340f3e34a7a9", "filename": "src/test/ui/reserved/reserved-attr-on-macro.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,8 +1,9 @@\n-#[rustc_attribute_should_be_reserved] //~ ERROR attributes with the prefix `rustc_` are reserved\n+#[rustc_attribute_should_be_reserved]\n+//~^ ERROR unless otherwise specified, attributes with the prefix `rustc_` are reserved\n macro_rules! foo {\n     () => (());\n }\n \n fn main() {\n-    foo!();\n+    foo!(); //~ ERROR cannot determine resolution for the macro `foo`\n }"}, {"sha": "46d3478b628416c1812ee5db0e1dabd64bfb865e", "filename": "src/test/ui/reserved/reserved-attr-on-macro.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,11 +1,19 @@\n error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics (see issue #29642)\n   --> $DIR/reserved-attr-on-macro.rs:1:3\n    |\n-LL | #[rustc_attribute_should_be_reserved] //~ ERROR attributes with the prefix `rustc_` are reserved\n+LL | #[rustc_attribute_should_be_reserved]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: cannot determine resolution for the macro `foo`\n+  --> $DIR/reserved-attr-on-macro.rs:8:5\n+   |\n+LL |     foo!(); //~ ERROR cannot determine resolution for the macro `foo`\n+   |     ^^^\n+   |\n+   = note: import resolution is stuck, try simplifying macro imports\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "4a1681e4e2b8a83b1a496ca9fe0009698453154a", "filename": "src/test/ui/self/self_type_keyword.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -7,6 +7,7 @@ mod foo {\n \n struct Bar<'Self>;\n //~^ ERROR lifetimes cannot use keyword names\n+//~| ERROR parameter `'Self` is never used\n \n struct Foo;\n "}, {"sha": "f75377a220b49fbe950f5dd3e2da653b7bac66cf", "filename": "src/test/ui/self/self_type_keyword.stderr", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -5,43 +5,43 @@ LL |   struct Self;\n    |          ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:15:13\n+  --> $DIR/self_type_keyword.rs:16:13\n    |\n LL |         ref Self => (),\n    |             ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:17:13\n+  --> $DIR/self_type_keyword.rs:18:13\n    |\n LL |         mut Self => (),\n    |             ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:19:17\n+  --> $DIR/self_type_keyword.rs:20:17\n    |\n LL |         ref mut Self => (),\n    |                 ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:23:15\n+  --> $DIR/self_type_keyword.rs:24:15\n    |\n LL |         Foo { Self } => (),\n    |               ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:29:26\n+  --> $DIR/self_type_keyword.rs:30:26\n    |\n LL |     extern crate core as Self;\n    |                          ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:34:32\n+  --> $DIR/self_type_keyword.rs:35:32\n    |\n LL |     use std::option::Option as Self;\n    |                                ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/self_type_keyword.rs:39:11\n+  --> $DIR/self_type_keyword.rs:40:11\n    |\n LL |     trait Self {}\n    |           ^^^^ expected identifier, found keyword\n@@ -53,10 +53,19 @@ LL | struct Bar<'Self>;\n    |            ^^^^^\n \n error: cannot find macro `Self!` in this scope\n-  --> $DIR/self_type_keyword.rs:21:9\n+  --> $DIR/self_type_keyword.rs:22:9\n    |\n LL |         Self!() => (),\n    |         ^^^^\n \n-error: aborting due to 10 previous errors\n+error[E0392]: parameter `'Self` is never used\n+  --> $DIR/self_type_keyword.rs:8:12\n+   |\n+LL | struct Bar<'Self>;\n+   |            ^^^^^ unused type parameter\n+   |\n+   = help: consider removing `'Self` or using a marker such as `std::marker::PhantomData`\n+\n+error: aborting due to 11 previous errors\n \n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "e11be9e17f20de30acda43f1f865b4149f6a968b", "filename": "src/test/ui/span/issue-36530.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fspan%2Fissue-36530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fspan%2Fissue-36530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36530.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -5,3 +5,5 @@ mod foo {\n     #![foo] //~ ERROR is currently unknown to the compiler\n             //~| ERROR non-builtin inner attributes are unstable\n }\n+\n+fn main() {}"}, {"sha": "b077d590915cb04932847f11f934fad105f84cad", "filename": "src/test/ui/span/macro-ty-params.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -4,9 +4,11 @@ macro_rules! m {\n     }\n }\n \n+macro_rules! foo { () => () }\n+\n fn main() {\n     foo::<T>!(); //~ ERROR generic arguments in macro path\n     foo::<>!(); //~ ERROR generic arguments in macro path\n-    m!(MyTrait<>); //~ ERROR generic arguments in macro path\n+    m!(Default<>); //~ ERROR generic arguments in macro path\n     //~^ ERROR unexpected generic arguments in path\n }"}, {"sha": "23fdde06e8f9dd473a79e25b9c908f8c4edafbf1", "filename": "src/test/ui/span/macro-ty-params.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -1,26 +1,26 @@\n-error: unexpected generic arguments in path\n+error: generic arguments in macro path\n   --> $DIR/macro-ty-params.rs:10:8\n    |\n-LL |     m!(MyTrait<>); //~ ERROR generic arguments in macro path\n-   |        ^^^^^^^^^\n+LL |     foo::<T>!(); //~ ERROR generic arguments in macro path\n+   |        ^^^^^\n \n error: generic arguments in macro path\n-  --> $DIR/macro-ty-params.rs:10:15\n+  --> $DIR/macro-ty-params.rs:11:8\n    |\n-LL |     m!(MyTrait<>); //~ ERROR generic arguments in macro path\n-   |               ^^\n+LL |     foo::<>!(); //~ ERROR generic arguments in macro path\n+   |        ^^^^\n \n-error: generic arguments in macro path\n-  --> $DIR/macro-ty-params.rs:8:8\n+error: unexpected generic arguments in path\n+  --> $DIR/macro-ty-params.rs:12:8\n    |\n-LL |     foo::<T>!(); //~ ERROR generic arguments in macro path\n-   |        ^^^^^\n+LL |     m!(Default<>); //~ ERROR generic arguments in macro path\n+   |        ^^^^^^^^^\n \n error: generic arguments in macro path\n-  --> $DIR/macro-ty-params.rs:9:8\n+  --> $DIR/macro-ty-params.rs:12:15\n    |\n-LL |     foo::<>!(); //~ ERROR generic arguments in macro path\n-   |        ^^^^\n+LL |     m!(Default<>); //~ ERROR generic arguments in macro path\n+   |               ^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d77febe0aa22bb1eaf0c77eb17e7a980029deaee", "filename": "src/test/ui/span/visibility-ty-params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -4,6 +4,7 @@ macro_rules! m {\n \n struct S<T>(T);\n m!{ S<u8> } //~ ERROR unexpected generic arguments in path\n+            //~| ERROR expected module, found struct `S`\n \n mod m {\n     m!{ m<> } //~ ERROR unexpected generic arguments in path"}, {"sha": "1fb54df15704b41575c09f65f7e17360a29c99fc", "filename": "src/test/ui/span/visibility-ty-params.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -5,10 +5,19 @@ LL | m!{ S<u8> } //~ ERROR unexpected generic arguments in path\n    |     ^^^^^\n \n error: unexpected generic arguments in path\n-  --> $DIR/visibility-ty-params.rs:9:9\n+  --> $DIR/visibility-ty-params.rs:10:9\n    |\n LL |     m!{ m<> } //~ ERROR unexpected generic arguments in path\n    |         ^^^\n \n-error: aborting due to 2 previous errors\n+error[E0577]: expected module, found struct `S`\n+  --> $DIR/visibility-ty-params.rs:6:5\n+   |\n+LL | m!{ S<u8> } //~ ERROR unexpected generic arguments in path\n+   |     -^^^^\n+   |     |\n+   |     did you mean `m`?\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0577`."}, {"sha": "c9af04741ac7701e086ebaac37f77d9a834bf046", "filename": "src/test/ui/trace_macros-gate.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ftrace_macros-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ftrace_macros-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrace_macros-gate.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -2,15 +2,9 @@\n \n fn main() {\n     trace_macros!(); //~ ERROR `trace_macros` is not stable\n-    trace_macros!(1); //~ ERROR `trace_macros` is not stable\n-    trace_macros!(ident); //~ ERROR `trace_macros` is not stable\n-    trace_macros!(for); //~ ERROR `trace_macros` is not stable\n-    trace_macros!(true,); //~ ERROR `trace_macros` is not stable\n-    trace_macros!(false 1); //~ ERROR `trace_macros` is not stable\n-\n-    // Errors are signalled early for the above, before expansion.\n-    // See trace_macros-gate2 and trace_macros-gate3. for examples\n-    // of the below being caught.\n+                     //~| ERROR trace_macros! accepts only `true` or `false`\n+    trace_macros!(true); //~ ERROR `trace_macros` is not stable\n+    trace_macros!(false); //~ ERROR `trace_macros` is not stable\n \n     macro_rules! expando {\n         ($x: ident) => { trace_macros!($x) } //~ ERROR `trace_macros` is not stable"}, {"sha": "4831aa158dbc8d3901e06374dafff8a5189fe8f1", "filename": "src/test/ui/trace_macros-gate.stderr", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -6,48 +6,30 @@ LL |     trace_macros!(); //~ ERROR `trace_macros` is not stable\n    |\n    = help: add #![feature(trace_macros)] to the crate attributes to enable\n \n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change (see issue #29598)\n-  --> $DIR/trace_macros-gate.rs:5:5\n-   |\n-LL |     trace_macros!(1); //~ ERROR `trace_macros` is not stable\n-   |     ^^^^^^^^^^^^^^^^^\n+error: trace_macros! accepts only `true` or `false`\n+  --> $DIR/trace_macros-gate.rs:4:5\n    |\n-   = help: add #![feature(trace_macros)] to the crate attributes to enable\n+LL |     trace_macros!(); //~ ERROR `trace_macros` is not stable\n+   |     ^^^^^^^^^^^^^^^^\n \n error[E0658]: `trace_macros` is not stable enough for use and is subject to change (see issue #29598)\n   --> $DIR/trace_macros-gate.rs:6:5\n    |\n-LL |     trace_macros!(ident); //~ ERROR `trace_macros` is not stable\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+LL |     trace_macros!(true); //~ ERROR `trace_macros` is not stable\n+   |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(trace_macros)] to the crate attributes to enable\n \n error[E0658]: `trace_macros` is not stable enough for use and is subject to change (see issue #29598)\n   --> $DIR/trace_macros-gate.rs:7:5\n    |\n-LL |     trace_macros!(for); //~ ERROR `trace_macros` is not stable\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(trace_macros)] to the crate attributes to enable\n-\n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change (see issue #29598)\n-  --> $DIR/trace_macros-gate.rs:8:5\n-   |\n-LL |     trace_macros!(true,); //~ ERROR `trace_macros` is not stable\n+LL |     trace_macros!(false); //~ ERROR `trace_macros` is not stable\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(trace_macros)] to the crate attributes to enable\n \n error[E0658]: `trace_macros` is not stable enough for use and is subject to change (see issue #29598)\n-  --> $DIR/trace_macros-gate.rs:9:5\n-   |\n-LL |     trace_macros!(false 1); //~ ERROR `trace_macros` is not stable\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(trace_macros)] to the crate attributes to enable\n-\n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change (see issue #29598)\n-  --> $DIR/trace_macros-gate.rs:16:26\n+  --> $DIR/trace_macros-gate.rs:10:26\n    |\n LL |         ($x: ident) => { trace_macros!($x) } //~ ERROR `trace_macros` is not stable\n    |                          ^^^^^^^^^^^^^^^^^\n@@ -57,6 +39,6 @@ LL |     expando!(true);\n    |\n    = help: add #![feature(trace_macros)] to the crate attributes to enable\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "fc0f78b12c9f7fe6f668518d0eaa9577f600cf14", "filename": "src/test/ui/tuple/tuple-struct-fields/test2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -8,5 +8,7 @@ macro_rules! define_struct {\n }\n \n mod foo {\n-    define_struct! { (foo) }\n+    define_struct! { (foo) } //~ ERROR cannot find type `foo` in this scope\n }\n+\n+fn main() {}"}, {"sha": "80f0ddc0e4fcdfb7a66dc0fcfd4c51ee5e957079", "filename": "src/test/ui/tuple/tuple-struct-fields/test2.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -4,8 +4,15 @@ error: expected one of `)` or `,`, found `(`\n LL |         struct S3(pub $t ());\n    |                          ^ expected one of `)` or `,` here\n ...\n-LL |     define_struct! { (foo) }\n+LL |     define_struct! { (foo) } //~ ERROR cannot find type `foo` in this scope\n    |     ------------------------ in this macro invocation\n \n-error: aborting due to previous error\n+error[E0412]: cannot find type `foo` in this scope\n+  --> $DIR/test2.rs:11:23\n+   |\n+LL |     define_struct! { (foo) } //~ ERROR cannot find type `foo` in this scope\n+   |                       ^^^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "6b8534b452411eb5bdd42f900f8e17b9fb4a4867", "filename": "src/test/ui/tuple/tuple-struct-fields/test3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.rs?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -8,5 +8,7 @@ macro_rules! define_struct {\n }\n \n mod foo {\n-    define_struct! { foo }\n+    define_struct! { foo } //~ ERROR cannot find type `foo` in this scope\n }\n+\n+fn main() {}"}, {"sha": "fbc01744fe44587a25f4da348ec445340bddde86", "filename": "src/test/ui/tuple/tuple-struct-fields/test3.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr?ref=f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "patch": "@@ -4,8 +4,15 @@ error: expected one of `)` or `,`, found `(`\n LL |         struct S3(pub($t) ());\n    |                           ^ expected one of `)` or `,` here\n ...\n-LL |     define_struct! { foo }\n+LL |     define_struct! { foo } //~ ERROR cannot find type `foo` in this scope\n    |     ---------------------- in this macro invocation\n \n-error: aborting due to previous error\n+error[E0412]: cannot find type `foo` in this scope\n+  --> $DIR/test3.rs:11:22\n+   |\n+LL |     define_struct! { foo } //~ ERROR cannot find type `foo` in this scope\n+   |                      ^^^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0412`."}]}