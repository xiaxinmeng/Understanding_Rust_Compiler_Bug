{"sha": "7bde18a0f3dc52754eb52d09da0bc259b1a0e757", "node_id": "C_kwDOAAsO6NoAKDdiZGUxOGEwZjNkYzUyNzU0ZWI1MmQwOWRhMGJjMjU5YjFhMGU3NTc", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2021-10-19T03:08:12Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2021-10-28T06:17:15Z"}, "message": "implement type-changing-struct-update\n\nput the test dir in test/ui/rfcs", "tree": {"sha": "932856e492ecc8144b95f7535a6868a503e52cf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/932856e492ecc8144b95f7535a6868a503e52cf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bde18a0f3dc52754eb52d09da0bc259b1a0e757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bde18a0f3dc52754eb52d09da0bc259b1a0e757", "html_url": "https://github.com/rust-lang/rust/commit/7bde18a0f3dc52754eb52d09da0bc259b1a0e757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41d8c94d454f23239715a6433df79e46df8bce04", "url": "https://api.github.com/repos/rust-lang/rust/commits/41d8c94d454f23239715a6433df79e46df8bce04", "html_url": "https://github.com/rust-lang/rust/commit/41d8c94d454f23239715a6433df79e46df8bce04"}], "stats": {"total": 306, "additions": 276, "deletions": 30}, "files": [{"sha": "b14a69892657bcb7bce9c32efc9c9314f5df4b73", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=7bde18a0f3dc52754eb52d09da0bc259b1a0e757", "patch": "@@ -42,6 +42,7 @@ pub enum TypeError<'tcx> {\n     TupleSize(ExpectedFound<usize>),\n     FixedArraySize(ExpectedFound<u64>),\n     ArgCount,\n+    FieldMisMatch(Symbol, Symbol),\n \n     RegionsDoesNotOutlive(Region<'tcx>, Region<'tcx>),\n     RegionsInsufficientlyPolymorphic(BoundRegionKind, Region<'tcx>),\n@@ -134,6 +135,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                 pluralize!(values.found)\n             ),\n             ArgCount => write!(f, \"incorrect number of function parameters\"),\n+            FieldMisMatch(adt, field) => write!(f, \"field type mismatch: {}.{}\", adt, field),\n             RegionsDoesNotOutlive(..) => write!(f, \"lifetime mismatch\"),\n             RegionsInsufficientlyPolymorphic(br, _) => write!(\n                 f,\n@@ -224,6 +226,7 @@ impl<'tcx> TypeError<'tcx> {\n             | ArgumentMutability(_)\n             | TupleSize(_)\n             | ArgCount\n+            | FieldMisMatch(..)\n             | RegionsDoesNotOutlive(..)\n             | RegionsInsufficientlyPolymorphic(..)\n             | RegionsOverlyPolymorphic(..)"}, {"sha": "0f8e80806e31e430edc9dc4ff13fc80fb94b4489", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=7bde18a0f3dc52754eb52d09da0bc259b1a0e757", "patch": "@@ -602,6 +602,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             TupleSize(x) => TupleSize(x),\n             FixedArraySize(x) => FixedArraySize(x),\n             ArgCount => ArgCount,\n+            FieldMisMatch(x, y) => FieldMisMatch(x, y),\n             RegionsDoesNotOutlive(a, b) => {\n                 return tcx.lift((a, b)).map(|(a, b)| RegionsDoesNotOutlive(a, b));\n             }"}, {"sha": "25ad6b659a7990a76edb1f26e575dfe7af9a83da", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 91, "deletions": 29, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=7bde18a0f3dc52754eb52d09da0bc259b1a0e757", "patch": "@@ -23,7 +23,7 @@ use crate::type_error_struct;\n \n use crate::errors::{AddressOfTemporaryTaken, ReturnStmtOutsideOfFnBody, StructExprNonExhaustive};\n use rustc_ast as ast;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n@@ -33,8 +33,10 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{ExprKind, QPath};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc_infer::infer::InferOk;\n use rustc_middle::ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase};\n+use rustc_middle::ty::error::TypeError::{FieldMisMatch, Mismatch};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::Ty;\n use rustc_middle::ty::TypeFoldable;\n@@ -1262,7 +1264,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .emit_err(StructExprNonExhaustive { span: expr.span, what: adt.variant_descr() });\n         }\n \n-        let error_happened = self.check_expr_struct_fields(\n+        let (error_happened, mut remaining_fields) = self.check_expr_struct_fields(\n             adt_ty,\n             expected,\n             expr.hir_id,\n@@ -1277,32 +1279,92 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // the fields with the base_expr. This could cause us to hit errors later\n             // when certain fields are assumed to exist that in fact do not.\n             if !error_happened {\n-                self.check_expr_has_type_or_error(base_expr, adt_ty, |_| {});\n-                match adt_ty.kind() {\n-                    ty::Adt(adt, substs) if adt.is_struct() => {\n-                        let fru_field_types = adt\n-                            .non_enum_variant()\n-                            .fields\n-                            .iter()\n-                            .map(|f| {\n-                                self.normalize_associated_types_in(\n-                                    expr.span,\n-                                    f.ty(self.tcx, substs),\n-                                )\n-                            })\n-                            .collect();\n-\n-                        self.typeck_results\n-                            .borrow_mut()\n-                            .fru_field_types_mut()\n-                            .insert(expr.hir_id, fru_field_types);\n+                // FIXME: We are currently creating two branches here in order to maintain\n+                // consistency. But they should be merged as much as possible.\n+                if self.tcx.features().type_changing_struct_update {\n+                    let base_ty = self.check_expr(base_expr);\n+                    match (adt_ty.kind(), base_ty.kind()) {\n+                        (ty::Adt(adt, substs), ty::Adt(base_adt, base_subs)) if adt == base_adt => {\n+                            if !adt.is_struct() {\n+                                self.tcx.sess.emit_err(FunctionalRecordUpdateOnNonStruct {\n+                                    span: base_expr.span,\n+                                });\n+                            };\n+                            let fru_field_types = variant\n+                                .fields\n+                                .iter()\n+                                .map(|f| {\n+                                    let fru_ty = self.normalize_associated_types_in(\n+                                        expr.span,\n+                                        self.field_ty(base_expr.span, f, base_subs),\n+                                    );\n+                                    let ident = self.tcx.adjust_ident(f.ident, variant.def_id);\n+                                    if remaining_fields.remove(&ident) {\n+                                        let target_ty = self.field_ty(base_expr.span, f, substs);\n+                                        let cause = self.misc(base_expr.span);\n+                                        match self.at(&cause, self.param_env).sup(target_ty, fru_ty)\n+                                        {\n+                                            Ok(InferOk { obligations, value: () }) => {\n+                                                self.register_predicates(obligations)\n+                                            }\n+                                            // FIXME: Needs better diagnostics here\n+                                            Err(_) => self\n+                                                .report_mismatched_types(\n+                                                    &cause,\n+                                                    target_ty,\n+                                                    fru_ty,\n+                                                    FieldMisMatch(variant.ident.name, ident.name),\n+                                                )\n+                                                .emit(),\n+                                        }\n+                                    }\n+                                    fru_ty\n+                                })\n+                                .collect();\n+\n+                            self.typeck_results\n+                                .borrow_mut()\n+                                .fru_field_types_mut()\n+                                .insert(expr.hir_id, fru_field_types);\n+                        }\n+                        _ => {\n+                            self.report_mismatched_types(\n+                                &self.misc(base_expr.span),\n+                                adt_ty,\n+                                base_ty,\n+                                Mismatch,\n+                            )\n+                            .emit();\n+                        }\n                     }\n-                    _ => {\n-                        self.tcx\n-                            .sess\n-                            .emit_err(FunctionalRecordUpdateOnNonStruct { span: base_expr.span });\n+                } else {\n+                    self.check_expr_has_type_or_error(base_expr, adt_ty, |_| {});\n+                    match adt_ty.kind() {\n+                        ty::Adt(adt, substs) if adt.is_struct() => {\n+                            let fru_field_types = adt\n+                                .non_enum_variant()\n+                                .fields\n+                                .iter()\n+                                .map(|f| {\n+                                    self.normalize_associated_types_in(\n+                                        expr.span,\n+                                        f.ty(self.tcx, substs),\n+                                    )\n+                                })\n+                                .collect();\n+\n+                            self.typeck_results\n+                                .borrow_mut()\n+                                .fru_field_types_mut()\n+                                .insert(expr.hir_id, fru_field_types);\n+                        }\n+                        _ => {\n+                            self.tcx.sess.emit_err(FunctionalRecordUpdateOnNonStruct {\n+                                span: base_expr.span,\n+                            });\n+                        }\n                     }\n-                }\n+                };\n             }\n         }\n         self.require_type_is_sized(adt_ty, expr.span, traits::StructInitializerSized);\n@@ -1319,7 +1381,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ast_fields: &'tcx [hir::ExprField<'tcx>],\n         check_completeness: bool,\n         expr_span: Span,\n-    ) -> bool {\n+    ) -> (bool, FxHashSet<Ident>) {\n         let tcx = self.tcx;\n \n         let adt_ty_hint = self\n@@ -1402,11 +1464,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if inaccessible_remaining_fields {\n                 self.report_inaccessible_fields(adt_ty, span);\n             } else {\n-                self.report_missing_fields(adt_ty, span, remaining_fields);\n+                self.report_missing_fields(adt_ty, span, remaining_fields.clone());\n             }\n         }\n \n-        error_happened\n+        (error_happened, remaining_fields.iter().map(|(ident, _)| ident.clone()).collect())\n     }\n \n     fn check_struct_fields_on_error("}, {"sha": "9909cf35b5b51215b64f389a1239025cdc7283db", "filename": "src/doc/unstable-book/src/language-features/type-changing-struct-update.md", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftype-changing-struct-update.md", "raw_url": "https://github.com/rust-lang/rust/raw/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftype-changing-struct-update.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftype-changing-struct-update.md?ref=7bde18a0f3dc52754eb52d09da0bc259b1a0e757", "patch": "@@ -0,0 +1,33 @@\n+# `type_changing_struct_update`\n+\n+The tracking issue for this feature is: [#86555]\n+\n+[#86555]: https://github.com/rust-lang/rust/issues/86555\n+\n+------------------------\n+\n+This implements [RFC2528]. When turned on, you can create instances of the same struct\n+that have different generic type or lifetime parameters.\n+\n+[RFC2528]: https://github.com/rust-lang/rfcs/blob/master/text/2528-type-changing-struct-update-syntax.md\n+\n+```rust\n+#![allow(unused_variables, dead_code)]\n+#![feature(type_changing_struct_update)]\n+\n+fn main () {\n+    struct Foo<T, U> {\n+        field1: T,\n+        field2: U,\n+    }\n+\n+    let base: Foo<String, i32> = Foo {\n+        field1: String::from(\"hello\"),\n+        field2: 1234,\n+    };\n+    let updated: Foo<f64, i32> = Foo {\n+        field1: 3.14,\n+        ..base\n+    };\n+}\n+```"}, {"sha": "d05ced724cc39cec03804b1b1236bcdba44e4e93", "filename": "src/test/ui/rfcs/rfc-2528-type-changing-struct-update/feature-gate.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ffeature-gate.rs?ref=7bde18a0f3dc52754eb52d09da0bc259b1a0e757", "patch": "@@ -1,3 +1,5 @@\n+// gate-test-type_changing_struct_update\n+\n #[derive(Debug)]\n struct Machine<S> {\n     state: S,", "previous_filename": "src/test/ui/feature-gates/feature-gate-type_changing_struct_update.rs"}, {"sha": "e45ab02a9b7ff4c8705dc905ef770966ba1c1fc8", "filename": "src/test/ui/rfcs/rfc-2528-type-changing-struct-update/feature-gate.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ffeature-gate.stderr?ref=7bde18a0f3dc52754eb52d09da0bc259b1a0e757", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/feature-gate-type_changing_struct_update.rs:20:11\n+  --> $DIR/feature-gate.rs:22:11\n    |\n LL |         ..m1\n    |           ^^ expected struct `State2`, found struct `State1`", "previous_filename": "src/test/ui/feature-gates/feature-gate-type_changing_struct_update.stderr"}, {"sha": "df2fef55dd2d869a920df2e0d7630b0b9e74cd4b", "filename": "src/test/ui/rfcs/rfc-2528-type-changing-struct-update/lifetime-update.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Flifetime-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Flifetime-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Flifetime-update.rs?ref=7bde18a0f3dc52754eb52d09da0bc259b1a0e757", "patch": "@@ -0,0 +1,43 @@\n+#![feature(type_changing_struct_update)]\n+#![allow(incomplete_features)]\n+\n+#[derive(Clone)]\n+struct Machine<'a, S> {\n+    state: S,\n+    lt_str: &'a str,\n+    common_field: i32,\n+}\n+\n+#[derive(Clone)]\n+struct State1;\n+#[derive(Clone)]\n+struct State2;\n+\n+fn update_to_state2() {\n+    let s = String::from(\"hello\");\n+    let m1: Machine<State1> = Machine {\n+        state: State1,\n+        lt_str: &s,\n+                //~^ ERROR `s` does not live long enough [E0597]\n+                // FIXME: The error here actually comes from line 34. The\n+                // span of the error message should be corrected to line 34\n+        common_field: 2,\n+    };\n+    // update lifetime\n+    let m3: Machine<'static, State1> = Machine {\n+        lt_str: \"hello, too\",\n+        ..m1.clone()\n+    };\n+    // update lifetime and type\n+    let m4: Machine<'static, State2> = Machine {\n+        state: State2,\n+        lt_str: \"hello, again\",\n+        ..m1.clone()\n+    };\n+    // updating to `static should fail.\n+    let m2: Machine<'static, State1> = Machine {\n+        ..m1\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "5f93ad6e0279e969d569f7ae4ce6c7ac8815f98b", "filename": "src/test/ui/rfcs/rfc-2528-type-changing-struct-update/lifetime-update.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Flifetime-update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Flifetime-update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Flifetime-update.stderr?ref=7bde18a0f3dc52754eb52d09da0bc259b1a0e757", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `s` does not live long enough\n+  --> $DIR/lifetime-update.rs:20:17\n+   |\n+LL |         lt_str: &s,\n+   |                 ^^ borrowed value does not live long enough\n+...\n+LL |     let m2: Machine<'static, State1> = Machine {\n+   |             ------------------------ type annotation requires that `s` is borrowed for `'static`\n+...\n+LL | }\n+   | - `s` dropped here while still borrowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "d8b1396a692a7c6b338357b1a12ee4df55363ef9", "filename": "src/test/ui/rfcs/rfc-2528-type-changing-struct-update/type-generic-update.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ftype-generic-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ftype-generic-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ftype-generic-update.rs?ref=7bde18a0f3dc52754eb52d09da0bc259b1a0e757", "patch": "@@ -0,0 +1,57 @@\n+#![feature(type_changing_struct_update)]\n+#![allow(incomplete_features)]\n+\n+struct Machine<'a, S, M> {\n+    state: S,\n+    message: M,\n+    lt_str: &'a str,\n+    common_field: i32,\n+}\n+\n+struct State1;\n+struct State2;\n+\n+struct Message1;\n+struct Message2;\n+\n+fn update() {\n+    let m1: Machine<State1, Message1> = Machine {\n+        state: State1,\n+        message: Message1,\n+        lt_str: \"hello\",\n+        common_field: 2,\n+    };\n+    // single type update\n+    let m2: Machine<State2, Message1> = Machine {\n+        state: State2,\n+        ..m1\n+    };\n+    // multiple type update\n+    let m3: Machine<State2, Message2> = Machine {\n+        state: State2,\n+        message: Message2,\n+        ..m1\n+    };\n+}\n+\n+fn fail_update() {\n+    let m1: Machine<f64, f64> = Machine {\n+        state: 3.2,\n+        message: 6.4,\n+        lt_str: \"hello\",\n+        common_field: 2,\n+    };\n+    // single type update fail\n+    let m2: Machine<i32, f64> = Machine {\n+        ..m1\n+        //~^ ERROR mismatched types [E0308]\n+    };\n+    // multiple type update fail\n+    let m3 = Machine::<i32, i32> {\n+        ..m1\n+        //~^ ERROR mismatched types [E0308]\n+        //~| ERROR mismatched types [E0308]\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "fa8d6ee23d5ec86198e4976ee238b8518aa59b49", "filename": "src/test/ui/rfcs/rfc-2528-type-changing-struct-update/type-generic-update.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ftype-generic-update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bde18a0f3dc52754eb52d09da0bc259b1a0e757/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ftype-generic-update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ftype-generic-update.stderr?ref=7bde18a0f3dc52754eb52d09da0bc259b1a0e757", "patch": "@@ -0,0 +1,30 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type-generic-update.rs:46:11\n+   |\n+LL |         ..m1\n+   |           ^^ field type mismatch: Machine.state\n+   |\n+   = note: expected type `i32`\n+              found type `f64`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-generic-update.rs:51:11\n+   |\n+LL |         ..m1\n+   |           ^^ field type mismatch: Machine.state\n+   |\n+   = note: expected type `i32`\n+              found type `f64`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-generic-update.rs:51:11\n+   |\n+LL |         ..m1\n+   |           ^^ field type mismatch: Machine.message\n+   |\n+   = note: expected type `i32`\n+              found type `f64`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}