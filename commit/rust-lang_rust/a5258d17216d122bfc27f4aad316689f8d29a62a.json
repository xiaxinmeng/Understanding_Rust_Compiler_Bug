{"sha": "a5258d17216d122bfc27f4aad316689f8d29a62a", "node_id": "C_kwDOAAsO6NoAKGE1MjU4ZDE3MjE2ZDEyMmJmYzI3ZjRhYWQzMTY2ODlmOGQyOWE2MmE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-09T11:53:03Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-09T11:53:03Z"}, "message": "no more do while", "tree": {"sha": "d98afca91abff04e08bc7ce5660af3a4df88b70a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d98afca91abff04e08bc7ce5660af3a4df88b70a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5258d17216d122bfc27f4aad316689f8d29a62a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5258d17216d122bfc27f4aad316689f8d29a62a", "html_url": "https://github.com/rust-lang/rust/commit/a5258d17216d122bfc27f4aad316689f8d29a62a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5258d17216d122bfc27f4aad316689f8d29a62a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b60e6c68ff0aabad9a0edd71898466886dbf6bb", "html_url": "https://github.com/rust-lang/rust/commit/9b60e6c68ff0aabad9a0edd71898466886dbf6bb"}], "stats": {"total": 48, "additions": 23, "deletions": 25}, "files": [{"sha": "2984dfa735e0a6f866d49a05db325bd9c566c5d8", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5258d17216d122bfc27f4aad316689f8d29a62a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5258d17216d122bfc27f4aad316689f8d29a62a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=a5258d17216d122bfc27f4aad316689f8d29a62a", "patch": "@@ -581,8 +581,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // let PATTERN = ... might not even exist until we do the assignment.\n         // so we set it here instead.\n         if set_match_place {\n-            let mut candidate_ref = &candidate;\n-            while let Some(next) = {\n+            let mut next = Some(&candidate);\n+            while let Some(candidate_ref) = next.take() {\n                 for binding in &candidate_ref.bindings {\n                     let local = self.var_local_id(binding.var_id, OutsideGuard);\n                     // `try_to_place` may fail if it is unable to resolve the given\n@@ -610,9 +610,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n                 // All of the subcandidates should bind the same locals, so we\n                 // only visit the first one.\n-                candidate_ref.subcandidates.get(0)\n-            } {\n-                candidate_ref = next;\n+                next = candidate_ref.subcandidates.get(0)\n             }\n         }\n "}, {"sha": "87cac7702dc500951df930a2b78e6e84c823f84e", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a5258d17216d122bfc27f4aad316689f8d29a62a/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5258d17216d122bfc27f4aad316689f8d29a62a/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=a5258d17216d122bfc27f4aad316689f8d29a62a", "patch": "@@ -538,29 +538,29 @@ impl TraverseCoverageGraphWithLoops {\n             \"TraverseCoverageGraphWithLoops::next - context_stack: {:?}\",\n             self.context_stack.iter().rev().collect::<Vec<_>>()\n         );\n-        while let Some(next_bcb) = {\n-            // Strip contexts with empty worklists from the top of the stack\n-            while self.context_stack.last().map_or(false, |context| context.worklist.is_empty()) {\n+\n+        while let Some(context) = self.context_stack.last_mut() {\n+            if let Some(next_bcb) = context.worklist.pop() {\n+                if !self.visited.insert(next_bcb) {\n+                    debug!(\"Already visited: {:?}\", next_bcb);\n+                    continue;\n+                }\n+                debug!(\"Visiting {:?}\", next_bcb);\n+                if self.backedges[next_bcb].len() > 0 {\n+                    debug!(\"{:?} is a loop header! Start a new TraversalContext...\", next_bcb);\n+                    self.context_stack.push(TraversalContext {\n+                        loop_backedges: Some((self.backedges[next_bcb].clone(), next_bcb)),\n+                        worklist: Vec::new(),\n+                    });\n+                }\n+                self.extend_worklist(basic_coverage_blocks, next_bcb);\n+                return Some(next_bcb);\n+            } else {\n+                // Strip contexts with empty worklists from the top of the stack\n                 self.context_stack.pop();\n             }\n-            // Pop the next bcb off of the current context_stack. If none, all BCBs were visited.\n-            self.context_stack.last_mut().map_or(None, |context| context.worklist.pop())\n-        } {\n-            if !self.visited.insert(next_bcb) {\n-                debug!(\"Already visited: {:?}\", next_bcb);\n-                continue;\n-            }\n-            debug!(\"Visiting {:?}\", next_bcb);\n-            if self.backedges[next_bcb].len() > 0 {\n-                debug!(\"{:?} is a loop header! Start a new TraversalContext...\", next_bcb);\n-                self.context_stack.push(TraversalContext {\n-                    loop_backedges: Some((self.backedges[next_bcb].clone(), next_bcb)),\n-                    worklist: Vec::new(),\n-                });\n-            }\n-            self.extend_worklist(basic_coverage_blocks, next_bcb);\n-            return Some(next_bcb);\n         }\n+\n         None\n     }\n "}]}