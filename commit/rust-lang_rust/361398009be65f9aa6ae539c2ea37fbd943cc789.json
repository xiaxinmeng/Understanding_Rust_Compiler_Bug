{"sha": "361398009be65f9aa6ae539c2ea37fbd943cc789", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MTM5ODAwOWJlNjVmOWFhNmFlNTM5YzJlYTM3ZmJkOTQzY2M3ODk=", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-08-10T09:45:52Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-08-10T09:53:40Z"}, "message": "Specialize `Vec::clone_from` for `Copy` types\n\nThis should improve performance and reduce code size.\n\nThis also improves `clone_from` for `String`, `OsString` and `PathBuf`.", "tree": {"sha": "dd3e48855a93123c2ada11bf265cd50974eb469e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd3e48855a93123c2ada11bf265cd50974eb469e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/361398009be65f9aa6ae539c2ea37fbd943cc789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/361398009be65f9aa6ae539c2ea37fbd943cc789", "html_url": "https://github.com/rust-lang/rust/commit/361398009be65f9aa6ae539c2ea37fbd943cc789", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/361398009be65f9aa6ae539c2ea37fbd943cc789/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae90dcf0207c57c3034f00b07048d63f8b2363c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae90dcf0207c57c3034f00b07048d63f8b2363c8", "html_url": "https://github.com/rust-lang/rust/commit/ae90dcf0207c57c3034f00b07048d63f8b2363c8"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "e5441f13870e3d68633326b00863b8203aa304a9", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/361398009be65f9aa6ae539c2ea37fbd943cc789/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361398009be65f9aa6ae539c2ea37fbd943cc789/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=361398009be65f9aa6ae539c2ea37fbd943cc789", "patch": "@@ -2378,6 +2378,32 @@ impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {\n     }\n }\n \n+trait SpecCloneFrom {\n+    fn clone_from(this: &mut Self, other: &Self);\n+}\n+\n+impl<T: Clone, A: Allocator> SpecCloneFrom for Vec<T, A> {\n+    default fn clone_from(this: &mut Self, other: &Self) {\n+        // drop anything that will not be overwritten\n+        this.truncate(other.len());\n+\n+        // self.len <= other.len due to the truncate above, so the\n+        // slices here are always in-bounds.\n+        let (init, tail) = other.split_at(this.len());\n+\n+        // reuse the contained values' allocations/resources.\n+        this.clone_from_slice(init);\n+        this.extend_from_slice(tail);\n+    }\n+}\n+\n+impl<T: Copy, A: Allocator> SpecCloneFrom for Vec<T, A> {\n+    fn clone_from(this: &mut Self, other: &Self) {\n+        this.clear();\n+        this.extend_from_slice(other);\n+    }\n+}\n+\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {\n@@ -2398,16 +2424,7 @@ impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {\n     }\n \n     fn clone_from(&mut self, other: &Self) {\n-        // drop anything that will not be overwritten\n-        self.truncate(other.len());\n-\n-        // self.len <= other.len due to the truncate above, so the\n-        // slices here are always in-bounds.\n-        let (init, tail) = other.split_at(self.len());\n-\n-        // reuse the contained values' allocations/resources.\n-        self.clone_from_slice(init);\n-        self.extend_from_slice(tail);\n+        SpecCloneFrom::clone_from(self, other)\n     }\n }\n "}]}