{"sha": "2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzODc2NTFmN2Q1ZTU3Y2U3M2Q1MTkzZjZkYmZlNzVhZTFlMjg4Yzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T14:12:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T14:19:27Z"}, "message": "Update the \"English-language\" to-string function of a `cmt` to use\nmore modern terminology and update tests accordingly.", "tree": {"sha": "d1341baf0d67519f4e87a94d72a97d004e804af1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1341baf0d67519f4e87a94d72a97d004e804af1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "html_url": "https://github.com/rust-lang/rust/commit/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a32010e430006d3850b74976d7d7bf0dda699b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a32010e430006d3850b74976d7d7bf0dda699b4", "html_url": "https://github.com/rust-lang/rust/commit/0a32010e430006d3850b74976d7d7bf0dda699b4"}], "stats": {"total": 211, "additions": 124, "deletions": 87}, "files": [{"sha": "0cc7f15a0b1072d45144b82623098c45de621b1e", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 74, "deletions": 29, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -75,7 +75,7 @@ use middle::def;\n use middle::region;\n use middle::ty::{self, Ty};\n use util::nodemap::{NodeMap};\n-use util::ppaux::{Repr};\n+use util::ppaux::{Repr, UserString};\n \n use syntax::ast::{MutImmutable, MutMutable};\n use syntax::ast;\n@@ -113,10 +113,17 @@ pub struct Upvar {\n // different kinds of pointers:\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub enum PointerKind {\n+    /// `Box<T>`\n     Unique,\n+\n+    /// `&T`\n     BorrowedPtr(ty::BorrowKind, ty::Region),\n-    Implicit(ty::BorrowKind, ty::Region),     // Implicit deref of a borrowed ptr.\n-    UnsafePtr(ast::Mutability)\n+\n+    /// `*T`\n+    UnsafePtr(ast::Mutability),\n+\n+    /// Implicit deref of the `&T` that results from an overloaded index `[]`.\n+    Implicit(ty::BorrowKind, ty::Region),\n }\n \n // We use the term \"interior\" to mean \"something reachable from the\n@@ -1392,22 +1399,6 @@ impl<'tcx> cmt_<'tcx> {\n \n \n     pub fn descriptive_string(&self, tcx: &ty::ctxt) -> String {\n-        fn upvar_to_string(upvar: &Upvar, is_copy: bool) -> String {\n-            if upvar.is_unboxed {\n-                let kind = match upvar.kind {\n-                    ty::FnUnboxedClosureKind => \"Fn\",\n-                    ty::FnMutUnboxedClosureKind => \"FnMut\",\n-                    ty::FnOnceUnboxedClosureKind => \"FnOnce\"\n-                };\n-                format!(\"captured outer variable in an `{}` closure\", kind)\n-            } else {\n-                (match (upvar.kind, is_copy) {\n-                    (ty::FnOnceUnboxedClosureKind, true) => \"captured outer variable in a proc\",\n-                    _ => \"captured outer variable\"\n-                }).to_string()\n-            }\n-        }\n-\n         match self.cat {\n             cat_static_item => {\n                 \"static item\".to_string()\n@@ -1427,16 +1418,23 @@ impl<'tcx> cmt_<'tcx> {\n                 let upvar = self.upvar();\n                 match upvar.as_ref().map(|i| &i.cat) {\n                     Some(&cat_upvar(ref var)) => {\n-                        upvar_to_string(var, false)\n+                        var.user_string(tcx)\n                     }\n                     Some(_) => unreachable!(),\n                     None => {\n                         match pk {\n                             Implicit(..) => {\n-                                \"dereference (dereference is implicit, due to indexing)\".to_string()\n+                                format!(\"indexed content\")\n+                            }\n+                            Unique => {\n+                                format!(\"`Box` content\")\n+                            }\n+                            UnsafePtr(..) => {\n+                                format!(\"dereference of unsafe pointer\")\n+                            }\n+                            BorrowedPtr(..) => {\n+                                format!(\"borrowed content\")\n                             }\n-                            Unique => format!(\"dereference of `{}`\", ptr_sigil(pk)),\n-                            _ => format!(\"dereference of `{}`-pointer\", ptr_sigil(pk))\n                         }\n                     }\n                 }\n@@ -1447,14 +1445,12 @@ impl<'tcx> cmt_<'tcx> {\n             cat_interior(_, InteriorField(PositionalField(_))) => {\n                 \"anonymous field\".to_string()\n             }\n-            cat_interior(_, InteriorElement(VecElement)) => {\n-                \"vec content\".to_string()\n-            }\n+            cat_interior(_, InteriorElement(VecElement)) |\n             cat_interior(_, InteriorElement(OtherElement)) => {\n                 \"indexed content\".to_string()\n             }\n             cat_upvar(ref var) => {\n-                upvar_to_string(var, true)\n+                var.user_string(tcx)\n             }\n             cat_downcast(ref cmt, _) => {\n                 cmt.descriptive_string(tcx)\n@@ -1483,7 +1479,7 @@ impl<'tcx> Repr<'tcx> for categorization<'tcx> {\n                 format!(\"{:?}\", *self)\n             }\n             cat_deref(ref cmt, derefs, ptr) => {\n-                format!(\"{}-{}{}->\", cmt.cat.repr(tcx), ptr_sigil(ptr), derefs)\n+                format!(\"{}-{}{}->\", cmt.cat.repr(tcx), ptr.repr(tcx), derefs)\n             }\n             cat_interior(ref cmt, interior) => {\n                 format!(\"{}.{}\", cmt.cat.repr(tcx), interior.repr(tcx))\n@@ -1504,7 +1500,32 @@ pub fn ptr_sigil(ptr: PointerKind) -> &'static str {\n         Implicit(ty::MutBorrow, _) => \"&mut\",\n         BorrowedPtr(ty::UniqueImmBorrow, _) |\n         Implicit(ty::UniqueImmBorrow, _) => \"&unique\",\n-        UnsafePtr(_) => \"*\"\n+        UnsafePtr(_) => \"*\",\n+    }\n+}\n+\n+impl<'tcx> Repr<'tcx> for PointerKind {\n+    fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n+        match *self {\n+            Unique => {\n+                format!(\"Box\")\n+            }\n+            BorrowedPtr(ty::ImmBorrow, ref r) |\n+            Implicit(ty::ImmBorrow, ref r) => {\n+                format!(\"&{}\", r.repr(tcx))\n+            }\n+            BorrowedPtr(ty::MutBorrow, ref r) |\n+            Implicit(ty::MutBorrow, ref r) => {\n+                format!(\"&{} mut\", r.repr(tcx))\n+            }\n+            BorrowedPtr(ty::UniqueImmBorrow, ref r) |\n+            Implicit(ty::UniqueImmBorrow, ref r) => {\n+                format!(\"&{} uniq\", r.repr(tcx))\n+            }\n+            UnsafePtr(_) => {\n+                format!(\"*\")\n+            }\n+        }\n     }\n }\n \n@@ -1531,3 +1552,27 @@ fn element_kind(t: Ty) -> ElementKind {\n         _ => OtherElement\n     }\n }\n+\n+impl<'tcx> Repr<'tcx> for ty::UnboxedClosureKind {\n+    fn repr(&self, _: &ty::ctxt) -> String {\n+        format!(\"Upvar({:?})\", self)\n+    }\n+}\n+\n+impl<'tcx> Repr<'tcx> for Upvar {\n+    fn repr(&self, tcx: &ty::ctxt) -> String {\n+        format!(\"Upvar({})\", self.kind.repr(tcx))\n+    }\n+}\n+\n+impl<'tcx> UserString<'tcx> for Upvar {\n+    fn user_string(&self, _: &ty::ctxt) -> String {\n+        let kind = match self.kind {\n+            ty::FnUnboxedClosureKind => \"Fn\",\n+            ty::FnMutUnboxedClosureKind => \"FnMut\",\n+            ty::FnOnceUnboxedClosureKind => \"FnOnce\",\n+        };\n+        format!(\"captured outer variable in an `{}` closure\", kind)\n+    }\n+}\n+"}, {"sha": "28d02161eebd7e470ef93c3e76679e9d7a4bd2d0", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -115,29 +115,31 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     match move_from.cat {\n         mc::cat_deref(_, _, mc::BorrowedPtr(..)) |\n         mc::cat_deref(_, _, mc::Implicit(..)) |\n-        mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n         mc::cat_static_item => {\n-            bccx.span_err(\n-                move_from.span,\n-                &format!(\"cannot move out of {}\",\n-                        bccx.cmt_to_string(&*move_from))[]);\n+            bccx.span_err(move_from.span,\n+                          &format!(\"cannot move out of {}\",\n+                                  move_from.descriptive_string(bccx.tcx))[]);\n         }\n \n         mc::cat_downcast(ref b, _) |\n         mc::cat_interior(ref b, _) => {\n             match b.ty.sty {\n-                ty::ty_struct(did, _)\n-                | ty::ty_enum(did, _) if ty::has_dtor(bccx.tcx, did) => {\n+                ty::ty_struct(did, _) |\n+                ty::ty_enum(did, _) if ty::has_dtor(bccx.tcx, did) => {\n                     bccx.span_err(\n                         move_from.span,\n                         &format!(\"cannot move out of type `{}`, \\\n                                  which defines the `Drop` trait\",\n                                 b.ty.user_string(bccx.tcx))[]);\n                 },\n-                _ => panic!(\"this path should not cause illegal move\")\n+                _ => {\n+                    bccx.span_bug(move_from.span, \"this path should not cause illegal move\")\n+                }\n             }\n         }\n-        _ => panic!(\"this path should not cause illegal move\")\n+        _ => {\n+            bccx.span_bug(move_from.span, \"this path should not cause illegal move\")\n+        }\n     }\n }\n "}, {"sha": "b87fed1601c51a3db3a33906464774547cec731d", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -681,6 +681,10 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         self.tcx.sess.span_err(s, m);\n     }\n \n+    pub fn span_bug(&self, s: Span, m: &str) {\n+        self.tcx.sess.span_bug(s, m);\n+    }\n+\n     pub fn span_note(&self, s: Span, m: &str) {\n         self.tcx.sess.span_note(s, m);\n     }"}, {"sha": "19a88dfc553b68159675280fc4f9195c8e54f5a7", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -73,7 +73,7 @@ pub fn check_call<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         autoderef(fcx,\n                   callee_expr.span,\n                   original_callee_ty,\n-                  Some(callee_expr.id),\n+                  Some(callee_expr),\n                   LvaluePreference::NoPreference,\n                   |adj_ty, idx| {\n                       let autoderefref = ty::AutoDerefRef { autoderefs: idx, autoref: None };"}, {"sha": "084a457909c5ce5dacd9e2f8afc4dfd2418d9a54", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -2263,34 +2263,20 @@ pub enum LvaluePreference {\n /// Executes an autoderef loop for the type `t`. At each step, invokes `should_stop` to decide\n /// whether to terminate the loop. Returns the final type and number of derefs that it performed.\n ///\n-<<<<<<< HEAD\n /// Note: this method does not modify the adjustments table. The caller is responsible for\n /// inserting an AutoAdjustment record into the `fcx` using one of the suitable methods.\n pub fn autoderef<'a, 'tcx, T, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                  sp: Span,\n-||||||| merged common ancestors\n-/// Note: this method does not modify the adjustments table. The caller is responsible for\n-/// inserting an AutoAdjustment record into the `fcx` using one of the suitable methods.\n-pub fn autoderef<'a, 'tcx, T, F>(fcx: &FnCtxt<'a, 'tcx>, sp: Span,\n-=======\n-/// Note: this method does not modify the adjustments table. The\n-/// caller is responsible for inserting an AutoAdjustment record into\n-/// the `fcx` using one of the suitable methods.  However, if\n-/// `opt_expr` is not `None`, it *will* insert the appropriate method\n-/// entries for the overloaded deref call.\n-pub fn autoderef<'a, 'tcx, T, F>(fcx: &FnCtxt<'a, 'tcx>,\n-                                 sp: Span,\n->>>>>>> Add comments to autoderef() helper and refactor it to take\n                                  base_ty: Ty<'tcx>,\n                                  opt_expr: Option<&ast::Expr>,\n                                  mut lvalue_pref: LvaluePreference,\n                                  mut should_stop: F)\n                                  -> (Ty<'tcx>, uint, Option<T>)\n     where F: FnMut(Ty<'tcx>, uint) -> Option<T>,\n {\n-    debug!(\"autoderef(base_ty={}, opt_expr={}, lvalue_pref={})\",\n+    debug!(\"autoderef(base_ty={}, opt_expr={}, lvalue_pref={:?})\",\n            base_ty.repr(fcx.tcx()),\n-           opt_expr,\n+           opt_expr.repr(fcx.tcx()),\n            lvalue_pref);\n \n     let mut t = base_ty;"}, {"sha": "cff0064497aff34ac814b8be55d4a1b9c4e64b9d", "filename": "src/test/compile-fail/binop-move-semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -37,9 +37,9 @@ fn illegal_dereference<T: Add<Output=()>>(mut x: T, y: T) {\n     let m = &mut x;\n     let n = &y;\n \n-    *m  //~ ERROR: cannot move out of dereference of `&mut`-pointer\n+    *m  //~ ERROR: cannot move out of borrowed content\n     +\n-    *n;  //~ ERROR: cannot move out of dereference of `&`-pointer\n+    *n;  //~ ERROR: cannot move out of borrowed content\n }\n \n struct Foo;"}, {"sha": "794e0fc6e3aba95ab10168acd24d51a96b0d0ffd", "filename": "src/test/compile-fail/borrowck-borrow-immut-deref-of-box-as-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -20,5 +20,5 @@ impl A {\n pub fn main() {\n     let a = box A;\n     a.foo();\n-    //~^ ERROR cannot borrow immutable dereference of `Box` `*a` as mutable\n+    //~^ ERROR cannot borrow immutable `Box` content `*a` as mutable\n }"}, {"sha": "d5df12513465644ac06031915856439635158720", "filename": "src/test/compile-fail/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -33,15 +33,15 @@ fn test1() {\n }\n \n fn test2<F>(f: &F) where F: FnMut() {\n-    (*f)(); //~ ERROR: cannot borrow immutable dereference of `&`-pointer `*f` as mutable\n+    (*f)(); //~ ERROR: cannot borrow immutable borrowed content `*f` as mutable\n }\n \n fn test3<F>(f: &mut F) where F: FnMut() {\n     (*f)();\n }\n \n fn test4(f: &Test) {\n-    f.f.call_mut(()) //~ ERROR: cannot borrow immutable dereference of `Box` `*f.f` as mutable\n+    f.f.call_mut(()) //~ ERROR: cannot borrow immutable `Box` content `*f.f` as mutable\n }\n \n fn test5(f: &mut Test) {"}, {"sha": "ec505faf88502ca3de07e5014f1b0c75dcd84f33", "filename": "src/test/compile-fail/borrowck-move-in-irrefut-pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -11,16 +11,16 @@\n fn with<F>(f: F) where F: FnOnce(&String) {}\n \n fn arg_item(&_x: &String) {}\n-    //~^ ERROR cannot move out of dereference of `&`-pointer\n+    //~^ ERROR cannot move out of borrowed content\n \n fn arg_closure() {\n     with(|&_x| ())\n-    //~^ ERROR cannot move out of dereference of `&`-pointer\n+    //~^ ERROR cannot move out of borrowed content\n }\n \n fn let_pat() {\n     let &_x = &\"hi\".to_string();\n-    //~^ ERROR cannot move out of dereference of `&`-pointer\n+    //~^ ERROR cannot move out of borrowed content\n }\n \n pub fn main() {}"}, {"sha": "a13efdea5621e1e8c96d2716dfa4dd908ae97d61", "filename": "src/test/compile-fail/borrowck-move-out-of-overloaded-auto-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-auto-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-auto-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-auto-deref.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -12,5 +12,5 @@ use std::rc::Rc;\n \n pub fn main() {\n     let _x = Rc::new(vec!(1i, 2)).into_iter();\n-    //~^ ERROR cannot move out of dereference of `&`-pointer\n+    //~^ ERROR cannot move out of borrowed content\n }"}, {"sha": "fffcf575ab08e49318f50d2325da200465d31f6c", "filename": "src/test/compile-fail/borrowck-move-out-of-overloaded-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-deref.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -12,5 +12,5 @@ use std::rc::Rc;\n \n pub fn main() {\n     let _x = *Rc::new(\"hi\".to_string());\n-    //~^ ERROR cannot move out of dereference of `&`-pointer\n+    //~^ ERROR cannot move out of borrowed content\n }"}, {"sha": "75596af10d70ede28c6702cf690f32141fe3b97a", "filename": "src/test/compile-fail/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -25,7 +25,7 @@ pub fn main() {\n     match x {\n         [_, tail..] => {\n             match tail {\n-                [Foo { string: a }, //~ ERROR cannot move out of dereference of `&`-pointer\n+                [Foo { string: a }, //~ ERROR cannot move out of borrowed content\n                  Foo { string: b }] => {\n                     //~^^ NOTE attempting to move value to here\n                     //~^^ NOTE and here"}, {"sha": "334f14349d723dd219e1a5191ebeab07a9c4ce66", "filename": "src/test/compile-fail/borrowck-overloaded-index-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -28,5 +28,5 @@ fn main() {\n     let v = MyVec { data: vec!(box 1i, box 2, box 3) };\n     let good = &v[0]; // Shouldn't fail here\n     let bad = v[0];\n-    //~^ ERROR cannot move out of dereference (dereference is implicit, due to indexing)\n+    //~^ ERROR cannot move out of indexed content\n }"}, {"sha": "f4f4d983e009b998c0f01f44a470f3d40d51eab1", "filename": "src/test/compile-fail/borrowck-overloaded-index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -66,5 +66,5 @@ fn main() {\n         x: 1,\n     };\n     s[2] = 20;\n-    //~^ ERROR cannot assign to immutable dereference (dereference is implicit, due to indexing)\n+    //~^ ERROR cannot assign to immutable indexed content\n }"}, {"sha": "c64cc13bbe2eaab5ae6f38de3a0fb84fc81d2026", "filename": "src/test/compile-fail/dst-index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-index.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -41,9 +41,9 @@ impl Index<uint> for T {\n \n fn main() {\n     S[0];\n-    //~^ ERROR cannot move out of dereference\n+    //~^ ERROR cannot move out of indexed content\n     //~^^ ERROR E0161\n     T[0];\n-    //~^ ERROR cannot move out of dereference\n+    //~^ ERROR cannot move out of indexed content\n     //~^^ ERROR E0161\n }"}, {"sha": "faae0009a934c4eb4d6adb0ff8fab3e2ef06274c", "filename": "src/test/compile-fail/dst-rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -15,10 +15,10 @@\n pub fn main() {\n     let _x: Box<str> = box *\"hello world\";\n     //~^ ERROR E0161\n-    //~^^ ERROR cannot move out of dereference\n+    //~^^ ERROR cannot move out of borrowed content\n \n     let array: &[int] = &[1, 2, 3];\n     let _x: Box<[int]> = box *array;\n     //~^ ERROR E0161\n-    //~^^ ERROR cannot move out of dereference\n+    //~^^ ERROR cannot move out of borrowed content\n }"}, {"sha": "d186a83676a804abf601b48d5372eaa6eacfe09b", "filename": "src/test/compile-fail/issue-12567.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fissue-12567.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fissue-12567.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12567.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -12,11 +12,11 @@ fn match_vecs<'a, T>(l1: &'a [T], l2: &'a [T]) {\n     match (l1, l2) {\n         ([], []) => println!(\"both empty\"),\n         ([], [hd, tl..]) | ([hd, tl..], []) => println!(\"one empty\"),\n-        //~^ ERROR: cannot move out of dereference\n-        //~^^ ERROR: cannot move out of dereference\n+        //~^ ERROR: cannot move out of borrowed content\n+        //~^^ ERROR: cannot move out of borrowed content\n         ([hd1, tl1..], [hd2, tl2..]) => println!(\"both nonempty\"),\n-        //~^ ERROR: cannot move out of dereference\n-        //~^^ ERROR: cannot move out of dereference\n+        //~^ ERROR: cannot move out of borrowed content\n+        //~^^ ERROR: cannot move out of borrowed content\n     }\n }\n "}, {"sha": "fbecd0487bf6f5d7811752cfd71c9a24a3d12e80", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -15,6 +15,6 @@\n \n fn main() {\n     (|&:| box *[0us].as_slice())();\n-    //~^ ERROR cannot move out of dereference\n+    //~^ ERROR cannot move out of borrowed content\n     //~^^ ERROR cannot move a value of type [usize]\n }"}, {"sha": "07aea4fd633b427d5b6b6f495e5d8d8acba05d72", "filename": "src/test/compile-fail/issue-2590.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -19,7 +19,7 @@ trait parse {\n \n impl parse for parser {\n     fn parse(&self) -> Vec<int> {\n-        self.tokens //~ ERROR cannot move out of dereference of `&`-pointer\n+        self.tokens //~ ERROR cannot move out of borrowed content\n     }\n }\n "}, {"sha": "ad255ecd9c0642f96c1e6782f5ac04c1e0f91ab9", "filename": "src/test/compile-fail/method-self-arg-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-2.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -23,5 +23,5 @@ fn main() {\n     Foo::bar(&x); //~ERROR cannot borrow `x`\n \n     let x = Foo;\n-    Foo::baz(&x); //~ERROR cannot borrow immutable dereference of `&`-pointer as mutable\n+    Foo::baz(&x); //~ERROR cannot borrow immutable borrowed content as mutable\n }"}, {"sha": "09357d328cd18c08f27831e72953dcfd6505b135", "filename": "src/test/compile-fail/slice-mut-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fslice-mut-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fslice-mut-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-mut-2.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -14,5 +14,5 @@ fn main() {\n     let x: &[int] = &[1, 2, 3, 4, 5];\n     // Can't mutably slice an immutable slice\n     let slice: &mut [int] = &mut [0, 1];\n-    let _ = &mut x[2..4]; //~ERROR cannot borrow immutable dereference of `&`-pointer `*x` as mutabl\n+    let _ = &mut x[2..4]; //~ERROR cannot borrow immutable borrowed content `*x` as mutable\n }"}, {"sha": "f68554b9ec79e256eb04925c56037f869612690c", "filename": "src/test/compile-fail/slice-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -13,5 +13,5 @@\n fn main() {\n     let x: &[int] = &[1, 2, 3, 4, 5];\n     // Immutable slices are not mutable.\n-    let y: &mut[_] = &x[2..4]; //~ ERROR cannot borrow immutable dereference of `&`-pointer as mutab\n+    let y: &mut[_] = &x[2..4]; //~ ERROR cannot borrow immutable borrowed content as mutable\n }"}, {"sha": "81cf9c1bdcf1a1b5953c728eaa5feb0d93c5744a", "filename": "src/test/compile-fail/std-uncopyable-atomics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -16,11 +16,11 @@ use std::ptr;\n \n fn main() {\n     let x = ATOMIC_BOOL_INIT;\n-    let x = *&x; //~ ERROR: cannot move out of dereference\n+    let x = *&x; //~ ERROR: cannot move out of borrowed content\n     let x = ATOMIC_INT_INIT;\n-    let x = *&x; //~ ERROR: cannot move out of dereference\n+    let x = *&x; //~ ERROR: cannot move out of borrowed content\n     let x = ATOMIC_UINT_INIT;\n-    let x = *&x; //~ ERROR: cannot move out of dereference\n+    let x = *&x; //~ ERROR: cannot move out of borrowed content\n     let x: AtomicPtr<uint> = AtomicPtr::new(ptr::null_mut());\n-    let x = *&x; //~ ERROR: cannot move out of dereference\n+    let x = *&x; //~ ERROR: cannot move out of borrowed content\n }"}, {"sha": "946566675981e7020327aa8aca735f9e14490e75", "filename": "src/test/compile-fail/unop-move-semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Funop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2387651f7d5e57ce73d5193f6dbfe75ae1e288c8/src%2Ftest%2Fcompile-fail%2Funop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funop-move-semantics.rs?ref=2387651f7d5e57ce73d5193f6dbfe75ae1e288c8", "patch": "@@ -31,9 +31,9 @@ fn illegal_dereference<T: Not<Output=T>>(mut x: T, y: T) {\n     let m = &mut x;\n     let n = &y;\n \n-    !*m;  //~ ERROR: cannot move out of dereference of `&mut`-pointer\n+    !*m;  //~ ERROR: cannot move out of borrowed content\n \n-    !*n;  //~ ERROR: cannot move out of dereference of `&`-pointer\n+    !*n;  //~ ERROR: cannot move out of borrowed content\n }\n \n fn main() {}"}]}