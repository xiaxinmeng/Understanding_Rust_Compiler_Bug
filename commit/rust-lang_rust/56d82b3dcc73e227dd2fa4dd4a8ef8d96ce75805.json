{"sha": "56d82b3dcc73e227dd2fa4dd4a8ef8d96ce75805", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZDgyYjNkY2M3M2UyMjdkZDJmYTRkZDRhOGVmOGQ5NmNlNzU4MDU=", "commit": {"author": {"name": "C", "email": "DeveloperC@protonmail.com", "date": "2020-12-05T01:30:20Z"}, "committer": {"name": "C", "email": "DeveloperC@protonmail.com", "date": "2020-12-29T14:03:30Z"}, "message": "refactor: moved SpecFromIterNested to spec_from_iter_nested.rs", "tree": {"sha": "5d00f752a39c3b6700c073ca1af06daa1f8124d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d00f752a39c3b6700c073ca1af06daa1f8124d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56d82b3dcc73e227dd2fa4dd4a8ef8d96ce75805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56d82b3dcc73e227dd2fa4dd4a8ef8d96ce75805", "html_url": "https://github.com/rust-lang/rust/commit/56d82b3dcc73e227dd2fa4dd4a8ef8d96ce75805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56d82b3dcc73e227dd2fa4dd4a8ef8d96ce75805/comments", "author": {"login": "DeveloperC286", "id": 65925405, "node_id": "MDQ6VXNlcjY1OTI1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/65925405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeveloperC286", "html_url": "https://github.com/DeveloperC286", "followers_url": "https://api.github.com/users/DeveloperC286/followers", "following_url": "https://api.github.com/users/DeveloperC286/following{/other_user}", "gists_url": "https://api.github.com/users/DeveloperC286/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeveloperC286/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeveloperC286/subscriptions", "organizations_url": "https://api.github.com/users/DeveloperC286/orgs", "repos_url": "https://api.github.com/users/DeveloperC286/repos", "events_url": "https://api.github.com/users/DeveloperC286/events{/privacy}", "received_events_url": "https://api.github.com/users/DeveloperC286/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DeveloperC286", "id": 65925405, "node_id": "MDQ6VXNlcjY1OTI1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/65925405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeveloperC286", "html_url": "https://github.com/DeveloperC286", "followers_url": "https://api.github.com/users/DeveloperC286/followers", "following_url": "https://api.github.com/users/DeveloperC286/following{/other_user}", "gists_url": "https://api.github.com/users/DeveloperC286/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeveloperC286/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeveloperC286/subscriptions", "organizations_url": "https://api.github.com/users/DeveloperC286/orgs", "repos_url": "https://api.github.com/users/DeveloperC286/repos", "events_url": "https://api.github.com/users/DeveloperC286/events{/privacy}", "received_events_url": "https://api.github.com/users/DeveloperC286/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e08ce7190dd63afc3e5a12f89134c760566513a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e08ce7190dd63afc3e5a12f89134c760566513a", "html_url": "https://github.com/rust-lang/rust/commit/9e08ce7190dd63afc3e5a12f89134c760566513a"}], "stats": {"total": 112, "additions": 60, "deletions": 52}, "files": [{"sha": "438246ab4cb31ef90aace8e5a12ae1ec8e7e35f0", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 52, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/56d82b3dcc73e227dd2fa4dd4a8ef8d96ce75805/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d82b3dcc73e227dd2fa4dd4a8ef8d96ce75805/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=56d82b3dcc73e227dd2fa4dd4a8ef8d96ce75805", "patch": "@@ -117,6 +117,10 @@ use self::in_place_drop::InPlaceDrop;\n \n mod in_place_drop;\n \n+use self::spec_from_iter_nested::SpecFromIterNested;\n+\n+mod spec_from_iter_nested;\n+\n /// A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.\n ///\n /// # Examples\n@@ -2176,58 +2180,6 @@ trait SpecFromIter<T, I> {\n     fn from_iter(iter: I) -> Self;\n }\n \n-/// Another specialization trait for Vec::from_iter\n-/// necessary to manually prioritize overlapping specializations\n-/// see [`SpecFromIter`] for details.\n-trait SpecFromIterNested<T, I> {\n-    fn from_iter(iter: I) -> Self;\n-}\n-\n-impl<T, I> SpecFromIterNested<T, I> for Vec<T>\n-where\n-    I: Iterator<Item = T>,\n-{\n-    default fn from_iter(mut iterator: I) -> Self {\n-        // Unroll the first iteration, as the vector is going to be\n-        // expanded on this iteration in every case when the iterable is not\n-        // empty, but the loop in extend_desugared() is not going to see the\n-        // vector being full in the few subsequent loop iterations.\n-        // So we get better branch prediction.\n-        let mut vector = match iterator.next() {\n-            None => return Vec::new(),\n-            Some(element) => {\n-                let (lower, _) = iterator.size_hint();\n-                let mut vector = Vec::with_capacity(lower.saturating_add(1));\n-                unsafe {\n-                    ptr::write(vector.as_mut_ptr(), element);\n-                    vector.set_len(1);\n-                }\n-                vector\n-            }\n-        };\n-        // must delegate to spec_extend() since extend() itself delegates\n-        // to spec_from for empty Vecs\n-        <Vec<T> as SpecExtend<T, I>>::spec_extend(&mut vector, iterator);\n-        vector\n-    }\n-}\n-\n-impl<T, I> SpecFromIterNested<T, I> for Vec<T>\n-where\n-    I: TrustedLen<Item = T>,\n-{\n-    fn from_iter(iterator: I) -> Self {\n-        let mut vector = match iterator.size_hint() {\n-            (_, Some(upper)) => Vec::with_capacity(upper),\n-            _ => Vec::new(),\n-        };\n-        // must delegate to spec_extend() since extend() itself delegates\n-        // to spec_from for empty Vecs\n-        vector.spec_extend(iterator);\n-        vector\n-    }\n-}\n-\n impl<T, I> SpecFromIter<T, I> for Vec<T>\n where\n     I: Iterator<Item = T>,"}, {"sha": "0da42844c96ce1e097ac0d9ff3941c590a8672b1", "filename": "library/alloc/src/vec/spec_from_iter_nested.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/56d82b3dcc73e227dd2fa4dd4a8ef8d96ce75805/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter_nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d82b3dcc73e227dd2fa4dd4a8ef8d96ce75805/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter_nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter_nested.rs?ref=56d82b3dcc73e227dd2fa4dd4a8ef8d96ce75805", "patch": "@@ -0,0 +1,56 @@\n+use core::ptr::{self};\n+use core::iter::{TrustedLen};\n+\n+use super::{Vec, SpecExtend};\n+\n+/// Another specialization trait for Vec::from_iter\n+/// necessary to manually prioritize overlapping specializations\n+/// see [`SpecFromIter`] for details.\n+pub(super) trait SpecFromIterNested<T, I> {\n+    fn from_iter(iter: I) -> Self;\n+}\n+\n+impl<T, I> SpecFromIterNested<T, I> for Vec<T>\n+    where\n+        I: Iterator<Item = T>,\n+{\n+    default fn from_iter(mut iterator: I) -> Self {\n+        // Unroll the first iteration, as the vector is going to be\n+        // expanded on this iteration in every case when the iterable is not\n+        // empty, but the loop in extend_desugared() is not going to see the\n+        // vector being full in the few subsequent loop iterations.\n+        // So we get better branch prediction.\n+        let mut vector = match iterator.next() {\n+            None => return Vec::new(),\n+            Some(element) => {\n+                let (lower, _) = iterator.size_hint();\n+                let mut vector = Vec::with_capacity(lower.saturating_add(1));\n+                unsafe {\n+                    ptr::write(vector.as_mut_ptr(), element);\n+                    vector.set_len(1);\n+                }\n+                vector\n+            }\n+        };\n+        // must delegate to spec_extend() since extend() itself delegates\n+        // to spec_from for empty Vecs\n+        <Vec<T> as SpecExtend<T, I>>::spec_extend(&mut vector, iterator);\n+        vector\n+    }\n+}\n+\n+impl<T, I> SpecFromIterNested<T, I> for Vec<T>\n+    where\n+        I: TrustedLen<Item = T>,\n+{\n+    fn from_iter(iterator: I) -> Self {\n+        let mut vector = match iterator.size_hint() {\n+            (_, Some(upper)) => Vec::with_capacity(upper),\n+            _ => Vec::new(),\n+        };\n+        // must delegate to spec_extend() since extend() itself delegates\n+        // to spec_from for empty Vecs\n+        vector.spec_extend(iterator);\n+        vector\n+    }\n+}"}]}