{"sha": "2df8799f766c3a4871fe12761843ef9a5bc83659", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZjg3OTlmNzY2YzNhNDg3MWZlMTI3NjE4NDNlZjlhNWJjODM2NTk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-05-03T23:20:29Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-05-03T23:56:34Z"}, "message": "rustc: Warning police", "tree": {"sha": "0e83872d0049983fe43b6de33cca9342e9a59243", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e83872d0049983fe43b6de33cca9342e9a59243"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2df8799f766c3a4871fe12761843ef9a5bc83659", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2df8799f766c3a4871fe12761843ef9a5bc83659", "html_url": "https://github.com/rust-lang/rust/commit/2df8799f766c3a4871fe12761843ef9a5bc83659", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2df8799f766c3a4871fe12761843ef9a5bc83659/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a5f11a11b1b12f74fdb9e81b6c428901913246f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a5f11a11b1b12f74fdb9e81b6c428901913246f", "html_url": "https://github.com/rust-lang/rust/commit/1a5f11a11b1b12f74fdb9e81b6c428901913246f"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "193f6fc8f0a3ba616e6cdd11caa0f3a2ee3f5adf", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2df8799f766c3a4871fe12761843ef9a5bc83659/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df8799f766c3a4871fe12761843ef9a5bc83659/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=2df8799f766c3a4871fe12761843ef9a5bc83659", "patch": "@@ -196,7 +196,7 @@ fn get_metadata_section(os: os,\n         while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n             let name_buf = llvm::LLVMGetSectionName(si.llsi);\n             let name = unsafe { str::raw::from_c_str(name_buf) };\n-            debug!(\"get_matadata_section: name %s\", name);\n+            debug!(\"get_metadata_section: name %s\", name);\n             if name == read_meta_section_name(os) {\n                 let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n                 let csz = llvm::LLVMGetSectionSize(si.llsi) as uint;"}, {"sha": "b8ab360b9e4e7a5e2a937404cb33f7e6da6541e9", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2df8799f766c3a4871fe12761843ef9a5bc83659/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df8799f766c3a4871fe12761843ef9a5bc83659/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2df8799f766c3a4871fe12761843ef9a5bc83659", "patch": "@@ -2096,8 +2096,7 @@ pub fn trans_tuple_struct(ccx: @CrateContext,\n }\n \n pub fn trans_enum_def(ccx: @CrateContext, enum_definition: &ast::enum_def,\n-                      id: ast::node_id,\n-                      path: @ast_map::path, vi: @~[ty::VariantInfo],\n+                      id: ast::node_id, vi: @~[ty::VariantInfo],\n                       i: &mut uint) {\n     for vec::each(enum_definition.variants) |variant| {\n         let disr_val = vi[*i].disr_val;\n@@ -2172,8 +2171,7 @@ pub fn trans_item(ccx: @CrateContext, item: &ast::item) {\n         if !generics.is_type_parameterized() {\n             let vi = ty::enum_variants(ccx.tcx, local_def(item.id));\n             let mut i = 0;\n-            trans_enum_def(ccx, enum_definition, item.id,\n-                           path, vi, &mut i);\n+            trans_enum_def(ccx, enum_definition, item.id, vi, &mut i);\n         }\n       }\n       ast::item_const(_, expr) => consts::trans_const(ccx, expr, item.id),\n@@ -2430,13 +2428,13 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n       Some(&v) => v,\n       None => {\n         let mut exprt = false;\n-        let val = match *ccx.tcx.items.get(&id) {\n+        let val = match *tcx.items.get(&id) {\n           ast_map::node_item(i, pth) => {\n             let my_path = vec::append(/*bad*/copy *pth,\n                                       ~[path_name(i.ident)]);\n             match i.node {\n               ast::item_const(_, expr) => {\n-                let typ = ty::node_id_to_type(ccx.tcx, i.id);\n+                let typ = ty::node_id_to_type(tcx, i.id);\n                 let s = mangle_exported_name(ccx, my_path, typ);\n                 // We need the translated value here, because for enums the\n                 // LLVM type is not fully determined by the Rust type.\n@@ -2495,7 +2493,7 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n                                 ni.attrs)\n                 }\n                 ast::foreign_item_const(*) => {\n-                    let typ = ty::node_id_to_type(ccx.tcx, ni.id);\n+                    let typ = ty::node_id_to_type(tcx, ni.id);\n                     let ident = ccx.sess.parse_sess.interner.get(ni.ident);\n                     let g = do str::as_c_str(*ident) |buf| {\n                         unsafe {\n@@ -2536,7 +2534,7 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n             // Only register the constructor if this is a tuple-like struct.\n             match struct_def.ctor_id {\n                 None => {\n-                    ccx.tcx.sess.bug(~\"attempt to register a constructor of \\\n+                    tcx.sess.bug(~\"attempt to register a constructor of \\\n                                        a non-tuple-like struct\")\n                 }\n                 Some(ctor_id) => {"}, {"sha": "abf82c511e551ab17574c879c75b3b78a9f64133", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2df8799f766c3a4871fe12761843ef9a5bc83659/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df8799f766c3a4871fe12761843ef9a5bc83659/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2df8799f766c3a4871fe12761843ef9a5bc83659", "patch": "@@ -33,7 +33,7 @@ use core::to_bytes;\n use core::hashmap::{HashMap, HashSet};\n use std::smallintmap::SmallIntMap;\n use syntax::ast::*;\n-use syntax::ast_util::{is_local, local_def};\n+use syntax::ast_util::is_local;\n use syntax::ast_util;\n use syntax::attr;\n use syntax::codemap::span;"}, {"sha": "7a7dcbb8bfd8d06121a2ea671bd3056b4cc86469", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2df8799f766c3a4871fe12761843ef9a5bc83659/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/2df8799f766c3a4871fe12761843ef9a5bc83659/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=2df8799f766c3a4871fe12761843ef9a5bc83659", "patch": "@@ -20,7 +20,6 @@\n #[allow(non_implicitly_copyable_typarams)];\n #[allow(non_camel_case_types)];\n #[deny(deprecated_pattern)];\n-#[deny(deprecated_mode)];\n \n extern mod std(vers = \"0.7-pre\");\n extern mod syntax(vers = \"0.7-pre\");"}]}