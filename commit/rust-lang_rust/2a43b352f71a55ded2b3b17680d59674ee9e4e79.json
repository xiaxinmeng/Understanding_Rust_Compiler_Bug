{"sha": "2a43b352f71a55ded2b3b17680d59674ee9e4e79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNDNiMzUyZjcxYTU1ZGVkMmIzYjE3NjgwZDU5Njc0ZWU5ZTRlNzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-26T11:01:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-22T17:27:07Z"}, "message": "Rote changes that don't care to distinguish between a fn pointer and a fn item.", "tree": {"sha": "af104287019876934bd4fade66ba7f404799af91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af104287019876934bd4fade66ba7f404799af91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a43b352f71a55ded2b3b17680d59674ee9e4e79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a43b352f71a55ded2b3b17680d59674ee9e4e79", "html_url": "https://github.com/rust-lang/rust/commit/2a43b352f71a55ded2b3b17680d59674ee9e4e79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a43b352f71a55ded2b3b17680d59674ee9e4e79/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f46099575a304ae9032f45c7921b496c4d220697", "url": "https://api.github.com/repos/rust-lang/rust/commits/f46099575a304ae9032f45c7921b496c4d220697", "html_url": "https://github.com/rust-lang/rust/commit/f46099575a304ae9032f45c7921b496c4d220697"}], "stats": {"total": 128, "additions": 72, "deletions": 56}, "files": [{"sha": "9d9b8780bbfb6089e30d60395b74416b90120dfd", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -700,7 +700,7 @@ pub fn get_enum_variants<'tcx>(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::Nod\n                                 item, tcx, cdata);\n         let name = item_name(&*intr, item);\n         let (ctor_ty, arg_tys, arg_names) = match ctor_ty.sty {\n-            ty::ty_bare_fn(ref f) =>\n+            ty::ty_bare_fn(_, ref f) =>\n                 (Some(ctor_ty), f.sig.0.inputs.clone(), None),\n             _ => { // Nullary or struct enum variant.\n                 let mut arg_names = Vec::new();"}, {"sha": "52899aaba412f8f4fdd4f961c4d04b428299b809", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -32,7 +32,7 @@ enum UnsafeContext {\n \n fn type_is_unsafe_function(ty: Ty) -> bool {\n     match ty.sty {\n-        ty::ty_bare_fn(ref f) => f.unsafety == ast::Unsafety::Unsafe,\n+        ty::ty_bare_fn(_, ref f) => f.unsafety == ast::Unsafety::Unsafe,\n         ty::ty_closure(ref f) => f.unsafety == ast::Unsafety::Unsafe,\n         _ => false,\n     }"}, {"sha": "62cf47da687019317fe1408baabaa5e96216ddda", "filename": "src/librustc/middle/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -83,7 +83,7 @@ pub fn simplify_type(tcx: &ty::ctxt,\n         ty::ty_closure(ref f) => {\n             Some(FunctionSimplifiedType(f.sig.0.inputs.len()))\n         }\n-        ty::ty_bare_fn(ref f) => {\n+        ty::ty_bare_fn(_, ref f) => {\n             Some(FunctionSimplifiedType(f.sig.0.inputs.len()))\n         }\n         ty::ty_param(_) => {"}, {"sha": "6acbc98b4b27b651ec4f2bb04eb4aea44f381d9a", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -74,7 +74,7 @@ struct IntrinsicCheckingVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> IntrinsicCheckingVisitor<'a, 'tcx> {\n     fn def_id_is_transmute(&self, def_id: DefId) -> bool {\n         let intrinsic = match ty::lookup_item_type(self.tcx, def_id).ty.sty {\n-            ty::ty_bare_fn(ref bfty) => bfty.abi == RustIntrinsic,\n+            ty::ty_bare_fn(_, ref bfty) => bfty.abi == RustIntrinsic,\n             _ => return false\n         };\n         if def_id.krate == ast::LOCAL_CRATE {\n@@ -123,7 +123,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> {\n                 DefFn(did, _) if self.def_id_is_transmute(did) => {\n                     let typ = ty::node_id_to_type(self.tcx, expr.id);\n                     match typ.sty {\n-                        ty_bare_fn(ref bare_fn_ty) if bare_fn_ty.abi == RustIntrinsic => {\n+                        ty_bare_fn(_, ref bare_fn_ty) if bare_fn_ty.abi == RustIntrinsic => {\n                             if let ty::FnConverging(to) = bare_fn_ty.sig.0.output {\n                                 let from = bare_fn_ty.sig.0.inputs[0];\n                                 self.check_transmute(expr.span, from, to, expr.id);"}, {"sha": "77d7aac4d09f7fa66d30899368a307a39f7dacf7", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -795,7 +795,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             // provide an impl, but only for suitable `fn` pointers\n-            ty::ty_bare_fn(ty::BareFnTy {\n+            ty::ty_bare_fn(_, ty::BareFnTy {\n                 unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 sig: ty::Binder(ty::FnSig {\n@@ -984,7 +984,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::ty_int(_) |\n             ty::ty_bool |\n             ty::ty_float(_) |\n-            ty::ty_bare_fn(_) |\n+            ty::ty_bare_fn(..) |\n             ty::ty_char => {\n                 // safe for everything\n                 Ok(If(Vec::new()))\n@@ -1543,7 +1543,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let self_ty = self.infcx.shallow_resolve(obligation.self_ty());\n         let sig = match self_ty.sty {\n-            ty::ty_bare_fn(ty::BareFnTy {\n+            ty::ty_bare_fn(_, ty::BareFnTy {\n                 unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 ref sig"}, {"sha": "f05404759c4e15854ce68425c6f4cc2016886a54", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -2185,7 +2185,7 @@ impl FlagComputation {\n                 self.add_tys(ts[]);\n             }\n \n-            &ty_bare_fn(ref f) => {\n+            &ty_bare_fn(_, ref f) => {\n                 self.add_fn_sig(&f.sig);\n             }\n \n@@ -2457,7 +2457,7 @@ pub fn maybe_walk_ty<'tcx>(ty: Ty<'tcx>, f: |Ty<'tcx>| -> bool) {\n             }\n         }\n         ty_tup(ref ts) => { for tt in ts.iter() { maybe_walk_ty(*tt, |x| f(x)); } }\n-        ty_bare_fn(ref ft) => {\n+        ty_bare_fn(_, ref ft) => {\n             for a in ft.sig.0.inputs.iter() { maybe_walk_ty(*a, |x| f(x)); }\n             if let ty::FnConverging(output) = ft.sig.0.output {\n                 maybe_walk_ty(output, f);\n@@ -2940,7 +2940,7 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n             // Scalar and unique types are sendable, and durable\n             ty_infer(ty::FreshIntTy(_)) |\n             ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n-            ty_bare_fn(_) | ty::ty_char => {\n+            ty_bare_fn(..) | ty::ty_char => {\n                 TC::None\n             }\n \n@@ -3275,7 +3275,7 @@ pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool {\n             ty_uint(_) |\n             ty_float(_) |\n             ty_str |\n-            ty_bare_fn(_) |\n+            ty_bare_fn(..) |\n             ty_closure(_) |\n             ty_infer(_) |\n             ty_err |\n@@ -3810,7 +3810,7 @@ pub fn node_id_item_substs<'tcx>(cx: &ctxt<'tcx>, id: ast::NodeId) -> ItemSubsts\n \n pub fn fn_is_variadic(fty: Ty) -> bool {\n     match fty.sty {\n-        ty_bare_fn(ref f) => f.sig.0.variadic,\n+        ty_bare_fn(_, ref f) => f.sig.0.variadic,\n         ty_closure(ref f) => f.sig.0.variadic,\n         ref s => {\n             panic!(\"fn_is_variadic() called on non-fn type: {}\", s)\n@@ -3820,7 +3820,7 @@ pub fn fn_is_variadic(fty: Ty) -> bool {\n \n pub fn ty_fn_sig<'tcx>(fty: Ty<'tcx>) -> &'tcx PolyFnSig<'tcx> {\n     match fty.sty {\n-        ty_bare_fn(ref f) => &f.sig,\n+        ty_bare_fn(_, ref f) => &f.sig,\n         ty_closure(ref f) => &f.sig,\n         ref s => {\n             panic!(\"ty_fn_sig() called on non-fn type: {}\", s)\n@@ -3831,7 +3831,7 @@ pub fn ty_fn_sig<'tcx>(fty: Ty<'tcx>) -> &'tcx PolyFnSig<'tcx> {\n /// Returns the ABI of the given function.\n pub fn ty_fn_abi(fty: Ty) -> abi::Abi {\n     match fty.sty {\n-        ty_bare_fn(ref f) => f.abi,\n+        ty_bare_fn(_, ref f) => f.abi,\n         ty_closure(ref f) => f.abi,\n         _ => panic!(\"ty_fn_abi() called on non-fn type\"),\n     }\n@@ -3858,7 +3858,7 @@ pub fn ty_closure_store(fty: Ty) -> TraitStore {\n \n pub fn ty_fn_ret<'tcx>(fty: Ty<'tcx>) -> FnOutput<'tcx> {\n     match fty.sty {\n-        ty_bare_fn(ref f) => f.sig.0.output,\n+        ty_bare_fn(_, ref f) => f.sig.0.output,\n         ty_closure(ref f) => f.sig.0.output,\n         ref s => {\n             panic!(\"ty_fn_ret() called on non-fn type: {}\", s)\n@@ -3868,7 +3868,7 @@ pub fn ty_fn_ret<'tcx>(fty: Ty<'tcx>) -> FnOutput<'tcx> {\n \n pub fn is_fn_ty(fty: Ty) -> bool {\n     match fty.sty {\n-        ty_bare_fn(_) => true,\n+        ty_bare_fn(..) => true,\n         ty_closure(_) => true,\n         _ => false\n     }\n@@ -6234,7 +6234,7 @@ pub fn accumulate_lifetimes_in_type(accumulator: &mut Vec<ty::Region>,\n             ty_str |\n             ty_vec(_, _) |\n             ty_ptr(_) |\n-            ty_bare_fn(_) |\n+            ty_bare_fn(..) |\n             ty_tup(_) |\n             ty_param(_) |\n             ty_infer(_) |"}, {"sha": "daa7c13e3b317990ba7aa92ba1e65c4d1a24a3f7", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -408,7 +408,7 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n         ty_closure(ref f) => {\n             closure_to_string(cx, &**f)\n         }\n-        ty_bare_fn(ref f) => {\n+        ty_bare_fn(_, ref f) => {\n             bare_fn_to_string(cx, f.unsafety, f.abi, None, &f.sig)\n         }\n         ty_infer(infer_ty) => infer_ty_to_string(cx, infer_ty),"}, {"sha": "526bbca8d70ddb0a34812bce2b87868bf2fd4960", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -253,7 +253,18 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n                 output_ty: Ty<'tcx>)\n                 -> Ty<'tcx>\n     {\n-        ty::mk_ctor_fn(self.infcx.tcx, input_tys, output_ty)\n+        let input_args = input_tys.iter().map(|ty| *ty).collect();\n+        ty::mk_bare_fn(self.infcx.tcx,\n+                       None,\n+                       ty::BareFnTy {\n+                           unsafety: ast::Unsafety::Normal,\n+                           abi: abi::Rust,\n+                           sig: ty::Binder(ty::FnSig {\n+                               inputs: input_args,\n+                               output: ty::FnConverging(output_ty),\n+                               variadic: false\n+                           })\n+                       })\n     }\n \n     pub fn t_nil(&self) -> Ty<'tcx> {"}, {"sha": "3be40aed57ac63bc9db0d5a5b018f012f62bd020", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -282,7 +282,7 @@ pub fn kind_for_unboxed_closure(ccx: &CrateContext, closure_id: ast::DefId)\n pub fn decl_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                               fn_ty: Ty<'tcx>, name: &str) -> ValueRef {\n     let (inputs, output, abi, env) = match fn_ty.sty {\n-        ty::ty_bare_fn(ref f) => {\n+        ty::ty_bare_fn(_, ref f) => {\n             (f.sig.0.inputs.clone(), f.sig.0.output, f.abi, None)\n         }\n         ty::ty_closure(ref f) => {\n@@ -956,7 +956,7 @@ pub fn trans_external_path<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                      did: ast::DefId, t: Ty<'tcx>) -> ValueRef {\n     let name = csearch::get_symbol(&ccx.sess().cstore, did);\n     match t.sty {\n-        ty::ty_bare_fn(ref fn_ty) => {\n+        ty::ty_bare_fn(_, ref fn_ty) => {\n             match ccx.sess().target.target.adjust_abi(fn_ty.abi) {\n                 Rust | RustCall => {\n                     get_extern_rust_fn(ccx, t, name.as_slice(), did)\n@@ -2015,7 +2015,7 @@ pub fn trans_named_tuple_constructor<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let tcx = ccx.tcx();\n \n     let result_ty = match ctor_ty.sty {\n-        ty::ty_bare_fn(ref bft) => bft.sig.0.output.unwrap(),\n+        ty::ty_bare_fn(_, ref bft) => bft.sig.0.output.unwrap(),\n         _ => ccx.sess().bug(\n             format!(\"trans_enum_variant_constructor: \\\n                      unexpected ctor return type {}\",\n@@ -2087,7 +2087,7 @@ fn trans_enum_variant_or_tuple_like_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx\n     let ctor_ty = ctor_ty.subst(ccx.tcx(), param_substs);\n \n     let result_ty = match ctor_ty.sty {\n-        ty::ty_bare_fn(ref bft) => bft.sig.0.output,\n+        ty::ty_bare_fn(_, ref bft) => bft.sig.0.output,\n         _ => ccx.sess().bug(\n             format!(\"trans_enum_variant_or_tuple_like_struct: \\\n                      unexpected ctor return type {}\",\n@@ -2422,7 +2422,7 @@ fn register_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                          node_type: Ty<'tcx>)\n                          -> ValueRef {\n     match node_type.sty {\n-        ty::ty_bare_fn(ref f) => {\n+        ty::ty_bare_fn(_, ref f) => {\n             assert!(f.abi == Rust || f.abi == RustCall);\n         }\n         _ => panic!(\"expected bare rust fn\")\n@@ -2439,7 +2439,7 @@ pub fn get_fn_llvm_attributes<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_ty: Ty<\n \n     let (fn_sig, abi, has_env) = match fn_ty.sty {\n         ty::ty_closure(ref f) => (f.sig.clone(), f.abi, true),\n-        ty::ty_bare_fn(ref f) => (f.sig.clone(), f.abi, false),\n+        ty::ty_bare_fn(_, ref f) => (f.sig.clone(), f.abi, false),\n         ty::ty_unboxed_closure(closure_did, _, ref substs) => {\n             let unboxed_closures = ccx.tcx().unboxed_closures.borrow();\n             let ref function_type = (*unboxed_closures)[closure_did]\n@@ -2468,7 +2468,7 @@ pub fn get_fn_llvm_attributes<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_ty: Ty<\n                 _ => ccx.sess().bug(\"expected tuple'd inputs\")\n             }\n         },\n-        ty::ty_bare_fn(_) if abi == RustCall => {\n+        ty::ty_bare_fn(..) if abi == RustCall => {\n             let mut inputs = vec![fn_sig.0.inputs[0]];\n \n             match fn_sig.0.inputs[1].sty {"}, {"sha": "b60c75d305ca81833408ecc2b78421201ca357d2", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -18,9 +18,11 @@ pub use self::AutorefArg::*;\n pub use self::CalleeData::*;\n pub use self::CallArgs::*;\n \n-use back::abi;\n+use arena::TypedArena;\n+use back::{abi,link};\n use session;\n use llvm::{ValueRef};\n+use llvm::get_param;\n use llvm;\n use metadata::csearch;\n use middle::def;\n@@ -157,7 +159,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n                 }\n             }\n             def::DefFn(did, _) if match expr_ty.sty {\n-                ty::ty_bare_fn(ref f) => f.abi == synabi::RustIntrinsic,\n+                ty::ty_bare_fn(_, ref f) => f.abi == synabi::RustIntrinsic,\n                 _ => false\n             } => {\n                 let substs = node_id_substs(bcx, ExprId(ref_expr.id));\n@@ -274,15 +276,16 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n \n     // Construct the \"tuply\" version of `bare_fn_ty`. It takes two arguments: `self`,\n     // which is the fn pointer, and `args`, which is the arguments tuple.\n-    let (input_tys, output_ty) =\n+    let (opt_def_id, input_tys, output_ty) =\n         match bare_fn_ty.sty {\n-            ty::ty_bare_fn(ty::BareFnTy { unsafety: ast::Unsafety::Normal,\n+            ty::ty_bare_fn(opt_def_id,\n+                           ty::BareFnTy { unsafety: ast::Unsafety::Normal,\n                                           abi: synabi::Rust,\n                                           sig: ty::Binder(ty::FnSig { inputs: ref input_tys,\n                                                                       output: output_ty,\n                                                                       variadic: false })}) =>\n             {\n-                (input_tys, output_ty)\n+                (opt_def_id, input_tys, output_ty)\n             }\n \n             _ => {\n@@ -292,6 +295,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n         };\n     let tuple_input_ty = ty::mk_tup(tcx, input_tys.to_vec());\n     let tuple_fn_ty = ty::mk_bare_fn(tcx,\n+                                     opt_def_id,\n                                      ty::BareFnTy { unsafety: ast::Unsafety::Normal,\n                                                     abi: synabi::RustCall,\n                                                     sig: ty::Binder(ty::FnSig {\n@@ -654,7 +658,7 @@ pub fn trans_call_inner<'a, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n     let mut bcx = callee.bcx;\n \n     let (abi, ret_ty) = match callee_ty.sty {\n-        ty::ty_bare_fn(ref f) => (f.abi, f.sig.0.output),\n+        ty::ty_bare_fn(_, ref f) => (f.abi, f.sig.0.output),\n         ty::ty_closure(ref f) => (f.abi, f.sig.0.output),\n         _ => panic!(\"expected bare rust fn or closure in trans_call_inner\")\n     };"}, {"sha": "b03934af016b3fe211b726b7d5b82c6026ada1cb", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -430,7 +430,7 @@ impl<'tcx> TypeMap<'tcx> {\n                                        trait_data.principal.substs(),\n                                        &mut unique_type_id);\n             },\n-            ty::ty_bare_fn(ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n+            ty::ty_bare_fn(_, ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n                 if unsafety == ast::Unsafety::Unsafe {\n                     unique_type_id.push_str(\"unsafe \");\n                 }\n@@ -2997,7 +2997,7 @@ fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 }\n             }\n         }\n-        ty::ty_bare_fn(ref barefnty) => {\n+        ty::ty_bare_fn(_, ref barefnty) => {\n             subroutine_type_metadata(cx, unique_type_id, &barefnty.sig, usage_site_span)\n         }\n         ty::ty_closure(ref closurety) => {\n@@ -3814,7 +3814,7 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             push_item_name(cx, trait_data.principal.def_id(), false, output);\n             push_type_params(cx, trait_data.principal.substs(), output);\n         },\n-        ty::ty_bare_fn(ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n+        ty::ty_bare_fn(_, ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n             if unsafety == ast::Unsafety::Unsafe {\n                 output.push_str(\"unsafe \");\n             }"}, {"sha": "e50d645afd8d546cc99cc15b8ed498705dd134a6", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -228,7 +228,7 @@ pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n            ccx.tn().val_to_string(llretptr));\n \n     let (fn_abi, fn_sig) = match callee_ty.sty {\n-        ty::ty_bare_fn(ref fn_ty) => (fn_ty.abi, fn_ty.sig.clone()),\n+        ty::ty_bare_fn(_, ref fn_ty) => (fn_ty.abi, fn_ty.sig.clone()),\n         _ => ccx.sess().bug(\"trans_native_call called on non-function type\")\n     };\n     let llsig = foreign_signature(ccx, &fn_sig, passed_arg_tys.as_slice());\n@@ -479,7 +479,7 @@ pub fn decl_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let tys = foreign_types_for_fn_ty(ccx, t);\n     let llfn_ty = lltype_for_fn_from_foreign_types(ccx, &tys);\n     let cconv = match t.sty {\n-        ty::ty_bare_fn(ref fn_ty) => {\n+        ty::ty_bare_fn(_, ref fn_ty) => {\n             llvm_calling_convention(ccx, fn_ty.abi)\n         }\n         _ => panic!(\"expected bare fn in decl_rust_fn_with_foreign_abi\")\n@@ -502,7 +502,7 @@ pub fn register_rust_fn_with_foreign_abi(ccx: &CrateContext,\n     let llfn_ty = lltype_for_fn_from_foreign_types(ccx, &tys);\n     let t = ty::node_id_to_type(ccx.tcx(), node_id);\n     let cconv = match t.sty {\n-        ty::ty_bare_fn(ref fn_ty) => {\n+        ty::ty_bare_fn(_, ref fn_ty) => {\n             llvm_calling_convention(ccx, fn_ty.abi)\n         }\n         _ => panic!(\"expected bare fn in register_rust_fn_with_foreign_abi\")\n@@ -556,7 +556,7 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         // Compute the type that the function would have if it were just a\n         // normal Rust function. This will be the type of the wrappee fn.\n         match t.sty {\n-            ty::ty_bare_fn(ref f) => {\n+            ty::ty_bare_fn(_, ref f) => {\n                 assert!(f.abi != Rust && f.abi != RustIntrinsic);\n             }\n             _ => {\n@@ -849,7 +849,7 @@ fn foreign_types_for_id<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n fn foreign_types_for_fn_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                      ty: Ty<'tcx>) -> ForeignTypes<'tcx> {\n     let fn_sig = match ty.sty {\n-        ty::ty_bare_fn(ref fn_ty) => fn_ty.sig.clone(),\n+        ty::ty_bare_fn(_, ref fn_ty) => fn_ty.sig.clone(),\n         _ => ccx.sess().bug(\"foreign_types_for_fn_ty called on non-function type\")\n     };\n     let llsig = foreign_signature(ccx, &fn_sig, fn_sig.0.inputs.as_slice());"}, {"sha": "905ce3c61dce568bc849734dc0fce44cfa8f04aa", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -226,7 +226,7 @@ fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     let fty = ty::lookup_item_type(bcx.tcx(), dtor_did).ty.subst(bcx.tcx(), substs);\n     let self_ty = match fty.sty {\n-        ty::ty_bare_fn(ref f) => {\n+        ty::ty_bare_fn(_, ref f) => {\n             assert!(f.sig.0.inputs.len() == 1);\n             f.sig.0.inputs[0]\n         }"}, {"sha": "f676608bbcc70c8b4e2de21b424169cf14baceff", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -150,7 +150,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let tcx = bcx.tcx();\n \n     let ret_ty = match callee_ty.sty {\n-        ty::ty_bare_fn(ref f) => f.sig.0.output,\n+        ty::ty_bare_fn(_, ref f) => f.sig.0.output,\n         _ => panic!(\"expected bare_fn in trans_intrinsic_call\")\n     };\n     let foreign_item = tcx.map.expect_foreign_item(node);"}, {"sha": "85f819b915c864db58d7dc32a520f46df9d802b7", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -477,7 +477,7 @@ pub fn trans_trait_callee_from_llval<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     debug!(\"(translating trait callee) loading method\");\n     // Replace the self type (&Self or Box<Self>) with an opaque pointer.\n     let llcallee_ty = match callee_ty.sty {\n-        ty::ty_bare_fn(ref f) if f.abi == Rust || f.abi == RustCall => {\n+        ty::ty_bare_fn(_, ref f) if f.abi == Rust || f.abi == RustCall => {\n             type_of_rust_fn(ccx,\n                             Some(Type::i8p(ccx)),\n                             f.sig.0.inputs.slice_from(1),"}, {"sha": "89b728370ca44febee5ef1a573c7c056224dda8a", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -364,7 +364,7 @@ pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type {\n \n       ty::ty_str => Type::i8(cx),\n \n-      ty::ty_bare_fn(_) => {\n+      ty::ty_bare_fn(..) => {\n           type_of_fn_from_ty(cx, t).ptr_to()\n       }\n       ty::ty_closure(_) => {"}, {"sha": "d3b518ec2e3ab5489965686c268a1611a9f37370", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -466,7 +466,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n     fn fixup_derefs_on_method_receiver_if_necessary(&self,\n                                                     method_callee: &MethodCallee) {\n         let sig = match method_callee.ty.sty {\n-            ty::ty_bare_fn(ref f) => f.sig.clone(),\n+            ty::ty_bare_fn(_, ref f) => f.sig.clone(),\n             ty::ty_closure(ref f) => f.sig.clone(),\n             _ => return,\n         };"}, {"sha": "8198e64a973d9e0d69f5c26f5848091223aa68c1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -399,7 +399,7 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let fty = fty.subst(ccx.tcx, &param_env.free_substs);\n \n     match fty.sty {\n-        ty::ty_bare_fn(ref fn_ty) => {\n+        ty::ty_bare_fn(_, ref fn_ty) => {\n             let inh = Inherited::new(ccx.tcx, param_env);\n             let fcx = check_fn(ccx, fn_ty.unsafety, id, &fn_ty.sig,\n                                decl, id, body, &inh);\n@@ -2049,7 +2049,7 @@ fn try_overloaded_call<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     // Bail out if the callee is a bare function or a closure. We check those\n     // manually.\n     match structurally_resolved_type(fcx, callee.span, callee_type).sty {\n-        ty::ty_bare_fn(_) | ty::ty_closure(_) => return false,\n+        ty::ty_bare_fn(..) | ty::ty_closure(_) => return false,\n         _ => {}\n     }\n \n@@ -2499,7 +2499,7 @@ fn check_method_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         ty::FnConverging(ty::mk_err())\n     } else {\n         match method_fn_ty.sty {\n-            ty::ty_bare_fn(ref fty) => {\n+            ty::ty_bare_fn(_, ref fty) => {\n                 // HACK(eddyb) ignore self in the definition (see above).\n                 check_argument_types(fcx,\n                                      sp,\n@@ -2927,7 +2927,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n         });\n \n         let fn_sig = match fn_ty.sty {\n-            ty::ty_bare_fn(ty::BareFnTy {ref sig, ..}) |\n+            ty::ty_bare_fn(_, ty::BareFnTy {ref sig, ..}) |\n             ty::ty_closure(box ty::ClosureTy {ref sig, ..}) => sig,\n             _ => {\n                 fcx.type_error_message(call_expr.span, |actual| {"}, {"sha": "a2fb44fff796fa5573594115888e5bbe8f0c39ed", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -355,7 +355,7 @@ impl<'cx,'tcx> TypeFolder<'tcx> for BoundsChecker<'cx,'tcx> {\n \n                 self.fold_substs(substs);\n             }\n-            ty::ty_bare_fn(ty::BareFnTy{sig: ref fn_sig, ..}) |\n+            ty::ty_bare_fn(_, ty::BareFnTy{sig: ref fn_sig, ..}) |\n             ty::ty_closure(box ty::ClosureTy{sig: ref fn_sig, ..}) => {\n                 self.binding_count += 1;\n "}, {"sha": "368658cb1c51aae138ae78834c2d335953717a3d", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -257,7 +257,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n     let tcx = ccx.tcx;\n     let start_t = ty::node_id_to_type(tcx, start_id);\n     match start_t.sty {\n-        ty::ty_bare_fn(_) => {\n+        ty::ty_bare_fn(..) => {\n             match tcx.map.find(start_id) {\n                 Some(ast_map::NodeItem(it)) => {\n                     match it.node {"}, {"sha": "e241be3e55c9b2577fc4471b74db6ec5f4d7a1ba", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -814,12 +814,13 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 }\n             }\n \n-            ty::ty_bare_fn(ty::BareFnTy { ref sig, .. }) |\n+            ty::ty_bare_fn(_, ty::BareFnTy { ref sig, .. }) |\n             ty::ty_closure(box ty::ClosureTy {\n                     ref sig,\n                     store: ty::UniqTraitStore,\n                     ..\n-                }) => {\n+                }) =>\n+            {\n                 self.add_constraints_from_sig(sig, variance);\n             }\n "}, {"sha": "2bc93ade7774e87d3757efae574f9d1081c5a647", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -176,7 +176,7 @@ pub fn build_external_trait(cx: &DocContext, tcx: &ty::ctxt,\n fn build_external_function(cx: &DocContext, tcx: &ty::ctxt, did: ast::DefId) -> clean::Function {\n     let t = ty::lookup_item_type(tcx, did);\n     let (decl, style) = match t.ty.sty {\n-        ty::ty_bare_fn(ref f) => ((did, &f.sig).clean(cx), f.unsafety),\n+        ty::ty_bare_fn(_, ref f) => ((did, &f.sig).clean(cx), f.unsafety),\n         _ => panic!(\"bad function\"),\n     };\n     clean::Function {"}, {"sha": "6e7a750d8b3fb8ecb984cec97f59536c7f907333", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a43b352f71a55ded2b3b17680d59674ee9e4e79/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2a43b352f71a55ded2b3b17680d59674ee9e4e79", "patch": "@@ -1360,7 +1360,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 mutability: mt.mutbl.clean(cx),\n                 type_: box mt.ty.clean(cx),\n             },\n-            ty::ty_bare_fn(ref fty) => BareFunction(box BareFunctionDecl {\n+            ty::ty_bare_fn(_, ref fty) => BareFunction(box BareFunctionDecl {\n                 unsafety: fty.unsafety,\n                 generics: Generics {\n                     lifetimes: Vec::new(),"}]}