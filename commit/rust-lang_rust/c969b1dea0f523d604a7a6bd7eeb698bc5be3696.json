{"sha": "c969b1dea0f523d604a7a6bd7eeb698bc5be3696", "node_id": "C_kwDOAAsO6NoAKGM5NjliMWRlYTBmNTIzZDYwNGE3YTZiZDdlZWI2OThiYzViZTM2OTY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-11-22T04:43:48Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-11-23T18:34:16Z"}, "message": "Add supertraits method to rustc_middle", "tree": {"sha": "534f2ee5b80953c1f821462138b9fa375a8ddb89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/534f2ee5b80953c1f821462138b9fa375a8ddb89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c969b1dea0f523d604a7a6bd7eeb698bc5be3696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c969b1dea0f523d604a7a6bd7eeb698bc5be3696", "html_url": "https://github.com/rust-lang/rust/commit/c969b1dea0f523d604a7a6bd7eeb698bc5be3696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c969b1dea0f523d604a7a6bd7eeb698bc5be3696/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8756d0701edf813f5bf321f63c9502321c0f3824", "url": "https://api.github.com/repos/rust-lang/rust/commits/8756d0701edf813f5bf321f63c9502321c0f3824", "html_url": "https://github.com/rust-lang/rust/commit/8756d0701edf813f5bf321f63c9502321c0f3824"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "49a64cb246ad0dd09af4b58d55e69b0cfcfd41d2", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c969b1dea0f523d604a7a6bd7eeb698bc5be3696/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c969b1dea0f523d604a7a6bd7eeb698bc5be3696/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=c969b1dea0f523d604a7a6bd7eeb698bc5be3696", "patch": "@@ -7,6 +7,7 @@ pub mod query;\n pub mod select;\n pub mod specialization_graph;\n mod structural_impls;\n+pub mod util;\n \n use crate::infer::canonical::Canonical;\n use crate::thir::abstract_const::NotConstEvaluatable;"}, {"sha": "3490c6881704a62e0ca642dcaa2317fc02ed9d0b", "filename": "compiler/rustc_middle/src/traits/util.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c969b1dea0f523d604a7a6bd7eeb698bc5be3696/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c969b1dea0f523d604a7a6bd7eeb698bc5be3696/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Futil.rs?ref=c969b1dea0f523d604a7a6bd7eeb698bc5be3696", "patch": "@@ -0,0 +1,49 @@\n+use rustc_data_structures::stable_set::FxHashSet;\n+\n+use crate::ty::{PolyTraitRef, TyCtxt};\n+\n+/// Given a PolyTraitRef, get the PolyTraitRefs of the trait's (transitive) supertraits.\n+///\n+/// A simplfied version of the same function at `rustc_infer::traits::util::supertraits`.\n+pub fn supertraits<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    trait_ref: PolyTraitRef<'tcx>,\n+) -> impl Iterator<Item = PolyTraitRef<'tcx>> {\n+    Elaborator { tcx, visited: FxHashSet::from_iter([trait_ref]), stack: vec![trait_ref] }\n+}\n+\n+struct Elaborator<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    visited: FxHashSet<PolyTraitRef<'tcx>>,\n+    stack: Vec<PolyTraitRef<'tcx>>,\n+}\n+\n+impl<'tcx> Elaborator<'tcx> {\n+    fn elaborate(&mut self, trait_ref: PolyTraitRef<'tcx>) {\n+        let supertrait_refs = self\n+            .tcx\n+            .super_predicates_of(trait_ref.def_id())\n+            .predicates\n+            .into_iter()\n+            .flat_map(|(pred, _)| {\n+                pred.subst_supertrait(self.tcx, &trait_ref).to_opt_poly_trait_ref()\n+            })\n+            .map(|t| t.value)\n+            .filter(|supertrait_ref| self.visited.insert(*supertrait_ref));\n+\n+        self.stack.extend(supertrait_refs);\n+    }\n+}\n+\n+impl<'tcx> Iterator for Elaborator<'tcx> {\n+    type Item = PolyTraitRef<'tcx>;\n+\n+    fn next(&mut self) -> Option<PolyTraitRef<'tcx>> {\n+        if let Some(trait_ref) = self.stack.pop() {\n+            self.elaborate(trait_ref);\n+            Some(trait_ref)\n+        } else {\n+            None\n+        }\n+    }\n+}"}]}