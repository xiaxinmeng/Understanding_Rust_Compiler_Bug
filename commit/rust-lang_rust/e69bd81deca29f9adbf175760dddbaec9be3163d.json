{"sha": "e69bd81deca29f9adbf175760dddbaec9be3163d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2OWJkODFkZWNhMjlmOWFkYmYxNzU3NjBkZGRiYWVjOWJlMzE2M2Q=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-04-15T06:12:34Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-04-16T18:35:26Z"}, "message": "doc: Address review feedback", "tree": {"sha": "d8937070f892c779f5bcda765d24a82b4b6928e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8937070f892c779f5bcda765d24a82b4b6928e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e69bd81deca29f9adbf175760dddbaec9be3163d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e69bd81deca29f9adbf175760dddbaec9be3163d", "html_url": "https://github.com/rust-lang/rust/commit/e69bd81deca29f9adbf175760dddbaec9be3163d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e69bd81deca29f9adbf175760dddbaec9be3163d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46cb598efb5a6dc0bacb52411daa983f415e9865", "url": "https://api.github.com/repos/rust-lang/rust/commits/46cb598efb5a6dc0bacb52411daa983f415e9865", "html_url": "https://github.com/rust-lang/rust/commit/46cb598efb5a6dc0bacb52411daa983f415e9865"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "0b6897ba2dc4f0c1429a603fc86d8f8eba6d2090", "filename": "src/libstd/result.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e69bd81deca29f9adbf175760dddbaec9be3163d/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69bd81deca29f9adbf175760dddbaec9be3163d/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=e69bd81deca29f9adbf175760dddbaec9be3163d", "patch": "@@ -35,7 +35,7 @@\n //!\n //! fn parse_version(header: &[u8]) -> Result<Version, &'static str> {\n //!     if header.len() < 1 {\n-//!         return Err(\"invalid header length\");;\n+//!         return Err(\"invalid header length\");\n //!     }\n //!     match header[0] {\n //!         1 => Ok(Version1),\n@@ -77,18 +77,19 @@\n //! // Use `or_else` to handle the error.\n //! let bad_result: Result<int, int> = bad_result.or_else(|i| Ok(11));\n //!\n-//! // Convert to an `Option` to call e.g. `unwrap`.\n+//! // Consume the result and return the contents with `unwrap`.\n //! let final_awesome_result = good_result.ok().unwrap();\n //! ~~~\n //!\n //! # Results must be used\n //!\n-//! A common problem with using return values to indicate errors\n-//! is that it is easy to ignore the return value, thus failing\n-//! to handle the error. By possessing the `#[must_use]` attribute,\n-//! the compiler will warn when a `Result` type is ignored. This\n-//! makes `Result` especially useful with functions that may\n-//! encounter errors but don't otherwise return a useful value.\n+//! A common problem with using return values to indicate errors is\n+//! that it is easy to ignore the return value, thus failing to handle\n+//! the error. Result is annotated with the #[must_use] attribute,\n+//! which will cause the compiler to issue a warning when a Result\n+//! value is ignored. This makes `Result` especially useful with\n+//! functions that may encounter errors but don't otherwise return a\n+//! useful value.\n //!\n //! Consider the `write_line` method defined for I/O types\n //! by the [`Writer`](../io/trait.Writer.html) trait:\n@@ -126,28 +127,22 @@\n //! success with `expect`. This will fail if the write fails, proving\n //! a marginally useful message indicating why:\n //!\n-//! ~~~\n-//! # // not running this test because it creates a file\n-//! # fn do_not_run_test() {\n+//! ~~~no_run\n //! use std::io::{File, Open, Write};\n //!\n //! let mut file = File::open_mode(&Path::new(\"valuable_data.txt\"), Open, Write);\n //! file.write_line(\"important message\").ok().expect(\"failed to write message\");\n //! drop(file);\n-//! # }\n //! ~~~\n //!\n //! You might also simply assert success:\n //!\n-//! ~~~\n-//! # // not running this test because it creates a file\n-//! # fn do_not_run_test() {\n+//! ~~~no_run\n //! # use std::io::{File, Open, Write};\n //!\n //! # let mut file = File::open_mode(&Path::new(\"valuable_data.txt\"), Open, Write);\n //! assert!(file.write_line(\"important message\").is_ok());\n //! # drop(file);\n-//! # }\n //! ~~~\n //!\n //! Or propagate the error up the call stack with `try!`:\n@@ -215,10 +210,12 @@\n //! `Err` is returned early from the enclosing function. Its simple definition\n //! makes it clear:\n //!\n-//! ~~~ignore\n+//! ~~~\n+//! # #![feature(macro_rules)]\n //! macro_rules! try(\n //!     ($e:expr) => (match $e { Ok(e) => e, Err(e) => return Err(e) })\n //! )\n+//! # fn main() { }\n //! ~~~\n //!\n //! `try!` is imported by the prelude, and is available everywhere."}]}