{"sha": "644c22d3ad742abfd480ce2fbc6d5b6429f0c2a3", "node_id": "C_kwDOAAsO6NoAKDY0NGMyMmQzYWQ3NDJhYmZkNDgwY2UyZmJjNmQ1YjY0MjlmMGMyYTM", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-01-26T17:32:02Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-01-26T17:32:02Z"}, "message": "Only traverse attrs once while checking for coherence override", "tree": {"sha": "5fd1a9d0d7dab6d5c48f62079583047de0b7312b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fd1a9d0d7dab6d5c48f62079583047de0b7312b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/644c22d3ad742abfd480ce2fbc6d5b6429f0c2a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/644c22d3ad742abfd480ce2fbc6d5b6429f0c2a3", "html_url": "https://github.com/rust-lang/rust/commit/644c22d3ad742abfd480ce2fbc6d5b6429f0c2a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/644c22d3ad742abfd480ce2fbc6d5b6429f0c2a3/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d502eda250d0090f4990cc6880c88b95a92b4818", "url": "https://api.github.com/repos/rust-lang/rust/commits/d502eda250d0090f4990cc6880c88b95a92b4818", "html_url": "https://github.com/rust-lang/rust/commit/d502eda250d0090f4990cc6880c88b95a92b4818"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "ab1dc8fcbfe0f944f97bfd906f3234bff1f15fec", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/644c22d3ad742abfd480ce2fbc6d5b6429f0c2a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644c22d3ad742abfd480ce2fbc6d5b6429f0c2a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=644c22d3ad742abfd480ce2fbc6d5b6429f0c2a3", "patch": "@@ -13,6 +13,7 @@ use crate::traits::{\n     self, FulfillmentContext, Normalized, Obligation, ObligationCause, PredicateObligation,\n     PredicateObligations, SelectionContext,\n };\n+use rustc_ast::Attribute;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::ty::fast_reject::{self, SimplifyParams, StripReferences};\n use rustc_middle::ty::fold::TypeFoldable;\n@@ -160,24 +161,30 @@ impl OverlapMode {\n }\n \n fn overlap_mode<'tcx>(tcx: TyCtxt<'tcx>, impl1_def_id: DefId, impl2_def_id: DefId) -> OverlapMode {\n-    if tcx.has_attr(impl1_def_id, sym::rustc_strict_coherence)\n-        != tcx.has_attr(impl2_def_id, sym::rustc_strict_coherence)\n-    {\n-        bug!(\"Use strict coherence on both impls\",);\n-    }\n-\n-    if tcx.has_attr(impl1_def_id, sym::rustc_with_negative_coherence)\n-        != tcx.has_attr(impl2_def_id, sym::rustc_with_negative_coherence)\n-    {\n-        bug!(\"Use with negative coherence on both impls\",);\n-    }\n-\n-    if tcx.has_attr(impl1_def_id, sym::rustc_strict_coherence) {\n-        OverlapMode::Strict\n-    } else if tcx.has_attr(impl1_def_id, sym::rustc_with_negative_coherence) {\n-        OverlapMode::WithNegative\n-    } else {\n-        OverlapMode::Stable\n+    // Find the possible coherence mode override opt-in attributes for each `DefId`\n+    let find_coherence_attr = |attr: &Attribute| {\n+        let name = attr.name_or_empty();\n+        match name {\n+            sym::rustc_with_negative_coherence | sym::rustc_strict_coherence => Some(name),\n+            _ => None,\n+        }\n+    };\n+    let impl1_coherence_mode = tcx.get_attrs(impl1_def_id).iter().find_map(find_coherence_attr);\n+    let impl2_coherence_mode = tcx.get_attrs(impl2_def_id).iter().find_map(find_coherence_attr);\n+\n+    // If there are any (that currently happens in tests), they need to match. Otherwise, the\n+    // default 1.0 rules are used.\n+    match (impl1_coherence_mode, impl2_coherence_mode) {\n+        (None, None) => OverlapMode::Stable,\n+        (Some(sym::rustc_with_negative_coherence), Some(sym::rustc_with_negative_coherence)) => {\n+            OverlapMode::WithNegative\n+        }\n+        (Some(sym::rustc_strict_coherence), Some(sym::rustc_strict_coherence)) => {\n+            OverlapMode::Strict\n+        }\n+        (Some(mode), _) | (_, Some(mode)) => {\n+            bug!(\"Use the same coherence mode on both impls: {}\", mode)\n+        }\n     }\n }\n "}]}