{"sha": "d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZjhjZjMyYjNjMGExNzAzNzQ0NWY3NTQ0ZjUwNjdiZGQ4MzhmN2I=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-01T15:18:41Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-01T15:18:41Z"}, "message": "Rollup merge of #53076 - QuietMisdreavus:cfg-rustdoc, r=GuillaumeGomez\n\nset cfg(rustdoc) when rustdoc is running on a crate\n\nWhen using `#[doc(cfg)]` to document platform-specific items, it's a little cumbersome to get all the platforms' items to appear all at once. For example, the standard library adds `--cfg dox` to rustdoc's command line whenever it builds docs, and the documentation for `#![feature(doc_cfg)]` suggests using a Cargo feature to approximate the same thing. This is a little awkward, because you always need to remember to set `--features dox` whenever you build documentation.\n\nThis PR proposes making rustdoc set `#[cfg(rustdoc)]` whenever it runs on a crate, to provide an officially-sanctioned version of this that is set automatically. This way, there's a standardized way to declare that a certain version of an item is specifically when building docs.\n\nTo try to prevent the spread of this feature from happening too quickly, this PR also restricts the use of this flag to whenever `#![feature(doc_cfg)]` is active. I'm sure there are other uses for this, but right now i'm tying it to this feature. (If it makes more sense to give this its own feature, i can easily do that.)", "tree": {"sha": "3b9534a1ae59669476277fbc404df3ba550df78a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b9534a1ae59669476277fbc404df3ba550df78a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAluKrdIACgkQ/vbIBR0O\nATxi8w/7BWAggFU8rSO0YALOvVnODhSVoV3ifI+x55FVshwzv8MYCL9aPPciDVLg\nOaWwGriHdtUgEGqdLTt2dWCMEXJWuqlFD85GbY1UAhqlqjLYN8Rb85/vrF/YtwpK\nxD0qAMWBF6MPld5lE/797vacwdiOELMrZklupdSYmsRMN44IolZQkrshK+YMbhQU\nWuG/7JOTxfbRyDI/IJKbxrVeSgJVmKb0rNT02wiQO1l4xLL1YZqFJfdvCUT5Z9s/\nw0QEqYYLb0vl+zAh2Xh3CUOLuuH/Mg+/wNNOv4mKXRyd53/TzXYlKTeQla5V7k1B\nCUrcHwOdg4cUv7j9VeXqfq4ukY2EIiFf/U/k6qDy3YerUk7CkrlSgan1aDYPT1rZ\nK4bKVS2MD2KBScQtXirlrmC80lpX+clBBd5nNQaatE0NBey+AnI5vW1Xo3c20XN6\nKlhxpAjQr6xKBOO46MWE/vlKujEWwLY7/GV/LtCRASmUme3+mJQ0hbajIA5nTDhr\nrjV9eBsj8R2Mw3YLKKt1YXG+nzGkqROIY3NdLTo0OaZNL4Ac6gi+P1vKKlcCPp2s\nnhd7IegJyIBN9ZMoYN0jx8AtCcnfMCb0FtjWUin1drHrRPtdwiP6lC9w2mMGD0tB\n2WT6qsBKzsatsc3/Z25++tRJnN7fAOEEX2WqZ+vBr15YhLPeM5o=\n=fZKi\n-----END PGP SIGNATURE-----", "payload": "tree 3b9534a1ae59669476277fbc404df3ba550df78a\nparent a0d0060bd72303256e5f3c419a564a4b4eaf957e\nparent ad2169c095b190afd76a5e32865410502a8bcfdd\nauthor kennytm <kennytm@gmail.com> 1535815121 +0800\ncommitter kennytm <kennytm@gmail.com> 1535815121 +0800\n\nRollup merge of #53076 - QuietMisdreavus:cfg-rustdoc, r=GuillaumeGomez\n\nset cfg(rustdoc) when rustdoc is running on a crate\n\nWhen using `#[doc(cfg)]` to document platform-specific items, it's a little cumbersome to get all the platforms' items to appear all at once. For example, the standard library adds `--cfg dox` to rustdoc's command line whenever it builds docs, and the documentation for `#![feature(doc_cfg)]` suggests using a Cargo feature to approximate the same thing. This is a little awkward, because you always need to remember to set `--features dox` whenever you build documentation.\n\nThis PR proposes making rustdoc set `#[cfg(rustdoc)]` whenever it runs on a crate, to provide an officially-sanctioned version of this that is set automatically. This way, there's a standardized way to declare that a certain version of an item is specifically when building docs.\n\nTo try to prevent the spread of this feature from happening too quickly, this PR also restricts the use of this flag to whenever `#![feature(doc_cfg)]` is active. I'm sure there are other uses for this, but right now i'm tying it to this feature. (If it makes more sense to give this its own feature, i can easily do that.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "html_url": "https://github.com/rust-lang/rust/commit/d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0d0060bd72303256e5f3c419a564a4b4eaf957e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d0060bd72303256e5f3c419a564a4b4eaf957e", "html_url": "https://github.com/rust-lang/rust/commit/a0d0060bd72303256e5f3c419a564a4b4eaf957e"}, {"sha": "ad2169c095b190afd76a5e32865410502a8bcfdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad2169c095b190afd76a5e32865410502a8bcfdd", "html_url": "https://github.com/rust-lang/rust/commit/ad2169c095b190afd76a5e32865410502a8bcfdd"}], "stats": {"total": 106, "additions": 69, "deletions": 37}, "files": [{"sha": "bb5a21e3e405fd034f35d33373006369333bfc21", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "patch": "@@ -37,6 +37,8 @@ fn main() {\n     let mut dylib_path = bootstrap::util::dylib_path();\n     dylib_path.insert(0, PathBuf::from(libdir.clone()));\n \n+    //FIXME(misdreavus): once stdsimd uses cfg(rustdoc) instead of cfg(dox), remove the `--cfg dox`\n+    //arguments here\n     let mut cmd = Command::new(rustdoc);\n     cmd.args(&args)\n         .arg(\"--cfg\")"}, {"sha": "32fb8c2f7d58e4f9330946fef58512f133d37076", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "patch": "@@ -106,27 +106,25 @@ The `#[doc(cfg(...))]` attribute has another effect: When Rustdoc renders docume\n item, it will be accompanied by a banner explaining that the item is only available on certain\n platforms.\n \n-As mentioned earlier, getting the items to Rustdoc requires some extra preparation. The standard\n-library adds a `--cfg dox` flag to every Rustdoc command, but the same thing can be accomplished by\n-adding a feature to your Cargo.toml and adding `--feature dox` (or whatever you choose to name the\n-feature) to your `cargo doc` calls.\n+For Rustdoc to document an item, it needs to see it, regardless of what platform it's currently\n+running on. To aid this, Rustdoc sets the flag `#[cfg(rustdoc)]` when running on your crate.\n+Combining this with the target platform of a given item allows it to appear when building your crate\n+normally on that platform, as well as when building documentation anywhere.\n \n-Either way, once you create an environment for the documentation, you can start to augment your\n-`#[cfg]` attributes to allow both the target platform *and* the documentation configuration to leave\n-the item in. For example, `#[cfg(any(windows, feature = \"dox\"))]` will preserve the item either on\n-Windows or during the documentation process. Then, adding a new attribute `#[doc(cfg(windows))]`\n-will tell Rustdoc that the item is supposed to be used on Windows. For example:\n+For example, `#[cfg(any(windows, rustdoc))]` will preserve the item either on Windows or during the\n+documentation process. Then, adding a new attribute `#[doc(cfg(windows))]` will tell Rustdoc that\n+the item is supposed to be used on Windows. For example:\n \n ```rust\n #![feature(doc_cfg)]\n \n /// Token struct that can only be used on Windows.\n-#[cfg(any(windows, feature = \"dox\"))]\n+#[cfg(any(windows, rustdoc))]\n #[doc(cfg(windows))]\n pub struct WindowsToken;\n \n /// Token struct that can only be used on Unix.\n-#[cfg(any(unix, feature = \"dox\"))]\n+#[cfg(any(unix, rustdoc))]\n #[doc(cfg(unix))]\n pub struct UnixToken;\n ```"}, {"sha": "96c66a1515ed5495b2da721e641ce191fe5167f7", "filename": "src/doc/unstable-book/src/language-features/doc-cfg.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-cfg.md?ref=d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "patch": "@@ -12,13 +12,17 @@ This attribute has two effects:\n \n 2. The item's doc-tests will only run on the specific platform.\n \n+In addition to allowing the use of the `#[doc(cfg)]` attribute, this feature enables the use of a\n+special conditional compilation flag, `#[cfg(rustdoc)]`, set whenever building documentation on your\n+crate.\n+\n This feature was introduced as part of PR [#43348] to allow the platform-specific parts of the\n standard library be documented.\n \n ```rust\n #![feature(doc_cfg)]\n \n-#[cfg(any(windows, feature = \"documentation\"))]\n+#[cfg(any(windows, rustdoc))]\n #[doc(cfg(windows))]\n /// The application's icon in the notification area (a.k.a. system tray).\n ///\n@@ -39,4 +43,4 @@ pub struct Icon {\n ```\n \n [#43781]: https://github.com/rust-lang/rust/issues/43781\n-[#43348]: https://github.com/rust-lang/rust/issues/43348\n\\ No newline at end of file\n+[#43348]: https://github.com/rust-lang/rust/issues/43348"}, {"sha": "0032bedc7ed1de518390c363f30171a5900cc274", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "patch": "@@ -541,7 +541,7 @@ macro_rules! unimplemented {\n /// into libsyntax itself.\n ///\n /// For more information, see documentation for `std`'s macros.\n-#[cfg(dox)]\n+#[cfg(rustdoc)]\n mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered."}, {"sha": "1acae86f0068f5f7ba61180eac9d9717791690ca", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "patch": "@@ -477,7 +477,8 @@ fn main_args(args: &[String]) -> isize {\n \n     let output = matches.opt_str(\"o\").map(|s| PathBuf::from(&s));\n     let css_file_extension = matches.opt_str(\"e\").map(|s| PathBuf::from(&s));\n-    let cfgs = matches.opt_strs(\"cfg\");\n+    let mut cfgs = matches.opt_strs(\"cfg\");\n+    cfgs.push(\"rustdoc\".to_string());\n \n     if let Some(ref p) = css_file_extension {\n         if !p.is_file() {\n@@ -671,7 +672,8 @@ where R: 'static + Send,\n     for s in &matches.opt_strs(\"L\") {\n         paths.add_path(s, ErrorOutputType::default());\n     }\n-    let cfgs = matches.opt_strs(\"cfg\");\n+    let mut cfgs = matches.opt_strs(\"cfg\");\n+    cfgs.push(\"rustdoc\".to_string());\n     let triple = matches.opt_str(\"target\").map(|target| {\n         if target.ends_with(\".json\") {\n             TargetTriple::TargetPath(PathBuf::from(target))"}, {"sha": "b649ec2340e93df33e87121b1143dff8c780e840", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "patch": "@@ -309,7 +309,7 @@ macro_rules! assert_approx_eq {\n /// These macros do not have any corresponding definition with a `macro_rules!`\n /// macro, but are documented here. Their implementations can be found hardcoded\n /// into libsyntax itself.\n-#[cfg(dox)]\n+#[cfg(rustdoc)]\n mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered."}, {"sha": "1cb9799ff3c22562bcdbcf6b23318c725ac17472", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "patch": "@@ -14,7 +14,7 @@\n #![allow(missing_docs, nonstandard_style, missing_debug_implementations)]\n \n cfg_if! {\n-    if #[cfg(dox)] {\n+    if #[cfg(rustdoc)] {\n \n         // When documenting libstd we want to show unix/windows/linux modules as\n         // these are the \"main modules\" that are used across platforms. This"}, {"sha": "61e4ce66eec0fe636e911d6a00f10f5aa3d82f9a", "filename": "src/libstd/sys/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibstd%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibstd%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fmod.rs?ref=d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "patch": "@@ -57,7 +57,7 @@ cfg_if! {\n // then later used in the `std::os` module when documenting, for example,\n // Windows when we're compiling for Linux.\n \n-#[cfg(dox)]\n+#[cfg(rustdoc)]\n cfg_if! {\n     if #[cfg(any(unix, target_os = \"redox\"))] {\n         // On unix we'll document what's already available\n@@ -77,7 +77,7 @@ cfg_if! {\n     }\n }\n \n-#[cfg(dox)]\n+#[cfg(rustdoc)]\n cfg_if! {\n     if #[cfg(windows)] {\n         // On windows we'll just be documenting what's already available"}, {"sha": "17214be5b054957da532e8d555f447bf252b349e", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "patch": "@@ -13,22 +13,22 @@\n use io::{self, ErrorKind};\n use libc;\n \n-#[cfg(any(dox, target_os = \"linux\"))] pub use os::linux as platform;\n-\n-#[cfg(all(not(dox), target_os = \"android\"))]   pub use os::android as platform;\n-#[cfg(all(not(dox), target_os = \"bitrig\"))]    pub use os::bitrig as platform;\n-#[cfg(all(not(dox), target_os = \"dragonfly\"))] pub use os::dragonfly as platform;\n-#[cfg(all(not(dox), target_os = \"freebsd\"))]   pub use os::freebsd as platform;\n-#[cfg(all(not(dox), target_os = \"haiku\"))]     pub use os::haiku as platform;\n-#[cfg(all(not(dox), target_os = \"ios\"))]       pub use os::ios as platform;\n-#[cfg(all(not(dox), target_os = \"macos\"))]     pub use os::macos as platform;\n-#[cfg(all(not(dox), target_os = \"netbsd\"))]    pub use os::netbsd as platform;\n-#[cfg(all(not(dox), target_os = \"openbsd\"))]   pub use os::openbsd as platform;\n-#[cfg(all(not(dox), target_os = \"solaris\"))]   pub use os::solaris as platform;\n-#[cfg(all(not(dox), target_os = \"emscripten\"))] pub use os::emscripten as platform;\n-#[cfg(all(not(dox), target_os = \"fuchsia\"))]   pub use os::fuchsia as platform;\n-#[cfg(all(not(dox), target_os = \"l4re\"))]      pub use os::linux as platform;\n-#[cfg(all(not(dox), target_os = \"hermit\"))]    pub use os::hermit as platform;\n+#[cfg(any(rustdoc, target_os = \"linux\"))] pub use os::linux as platform;\n+\n+#[cfg(all(not(rustdoc), target_os = \"android\"))]   pub use os::android as platform;\n+#[cfg(all(not(rustdoc), target_os = \"bitrig\"))]    pub use os::bitrig as platform;\n+#[cfg(all(not(rustdoc), target_os = \"dragonfly\"))] pub use os::dragonfly as platform;\n+#[cfg(all(not(rustdoc), target_os = \"freebsd\"))]   pub use os::freebsd as platform;\n+#[cfg(all(not(rustdoc), target_os = \"haiku\"))]     pub use os::haiku as platform;\n+#[cfg(all(not(rustdoc), target_os = \"ios\"))]       pub use os::ios as platform;\n+#[cfg(all(not(rustdoc), target_os = \"macos\"))]     pub use os::macos as platform;\n+#[cfg(all(not(rustdoc), target_os = \"netbsd\"))]    pub use os::netbsd as platform;\n+#[cfg(all(not(rustdoc), target_os = \"openbsd\"))]   pub use os::openbsd as platform;\n+#[cfg(all(not(rustdoc), target_os = \"solaris\"))]   pub use os::solaris as platform;\n+#[cfg(all(not(rustdoc), target_os = \"emscripten\"))] pub use os::emscripten as platform;\n+#[cfg(all(not(rustdoc), target_os = \"fuchsia\"))]   pub use os::fuchsia as platform;\n+#[cfg(all(not(rustdoc), target_os = \"l4re\"))]      pub use os::linux as platform;\n+#[cfg(all(not(rustdoc), target_os = \"hermit\"))]    pub use os::hermit as platform;\n \n pub use self::rand::hashmap_random_keys;\n pub use libc::strlen;"}, {"sha": "4c64322a6dce398c1b3d0065597e4a12c57c613c", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "patch": "@@ -794,7 +794,7 @@ pub struct FLOATING_SAVE_AREA {\n // will not appear in the final documentation. This should be also defined for\n // other architectures supported by Windows such as ARM, and for historical\n // interest, maybe MIPS and PowerPC as well.\n-#[cfg(all(dox, not(any(target_arch = \"x86_64\", target_arch = \"x86\", target_arch = \"aarch64\"))))]\n+#[cfg(all(rustdoc, not(any(target_arch = \"x86_64\", target_arch = \"x86\", target_arch = \"aarch64\"))))]\n pub enum CONTEXT {}\n \n #[cfg(target_arch = \"aarch64\")]"}, {"sha": "27ad52320870373d7aca0bf06664abedfa053b86", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "patch": "@@ -1151,6 +1151,7 @@ const GATED_CFGS: &[(&str, &str, fn(&Features) -> bool)] = &[\n     (\"target_vendor\", \"cfg_target_vendor\", cfg_fn!(cfg_target_vendor)),\n     (\"target_thread_local\", \"cfg_target_thread_local\", cfg_fn!(cfg_target_thread_local)),\n     (\"target_has_atomic\", \"cfg_target_has_atomic\", cfg_fn!(cfg_target_has_atomic)),\n+    (\"rustdoc\", \"doc_cfg\", cfg_fn!(doc_cfg)),\n ];\n \n #[derive(Debug)]"}, {"sha": "6207d99dc36aa443735b737949e1219e9954b6dc", "filename": "src/test/ui/feature-gate-doc_cfg-cfg-rustdoc.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg-cfg-rustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg-cfg-rustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg-cfg-rustdoc.rs?ref=d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[cfg(rustdoc)] //~ ERROR: `cfg(rustdoc)` is experimental and subject to change\n+pub struct SomeStruct;\n+\n+fn main() {}"}, {"sha": "be2c263af042deab1aaca34bcc1b58228a5aee07", "filename": "src/test/ui/feature-gate-doc_cfg-cfg-rustdoc.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg-cfg-rustdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0f8cf32b3c0a17037445f7544f5067bdd838f7b/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg-cfg-rustdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg-cfg-rustdoc.stderr?ref=d0f8cf32b3c0a17037445f7544f5067bdd838f7b", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: `cfg(rustdoc)` is experimental and subject to change (see issue #43781)\n+  --> $DIR/feature-gate-doc_cfg-cfg-rustdoc.rs:11:7\n+   |\n+LL | #[cfg(rustdoc)] //~ ERROR: `cfg(rustdoc)` is experimental and subject to change\n+   |       ^^^^^^^\n+   |\n+   = help: add #![feature(doc_cfg)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}