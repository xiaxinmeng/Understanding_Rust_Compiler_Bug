{"sha": "23cd7b863ff0ca4fba9e28402a067f3f75772d26", "node_id": "C_kwDOAAsO6NoAKDIzY2Q3Yjg2M2ZmMGNhNGZiYTllMjg0MDJhMDY3ZjNmNzU3NzJkMjY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-11T23:01:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-11T23:06:30Z"}, "message": "rustup for pthread_setname_np on Linux", "tree": {"sha": "bba7ae4f79a25e2cbd3762fb6b166c4b686f38b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bba7ae4f79a25e2cbd3762fb6b166c4b686f38b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23cd7b863ff0ca4fba9e28402a067f3f75772d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23cd7b863ff0ca4fba9e28402a067f3f75772d26", "html_url": "https://github.com/rust-lang/rust/commit/23cd7b863ff0ca4fba9e28402a067f3f75772d26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23cd7b863ff0ca4fba9e28402a067f3f75772d26/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39ee5747153bf13324870c4a912acbf1f9bfde3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/39ee5747153bf13324870c4a912acbf1f9bfde3f", "html_url": "https://github.com/rust-lang/rust/commit/39ee5747153bf13324870c4a912acbf1f9bfde3f"}], "stats": {"total": 77, "additions": 44, "deletions": 33}, "files": [{"sha": "0bcadc0a366f8fb6a9b4bb563a14f46db50a919c", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23cd7b863ff0ca4fba9e28402a067f3f75772d26/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/23cd7b863ff0ca4fba9e28402a067f3f75772d26/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=23cd7b863ff0ca4fba9e28402a067f3f75772d26", "patch": "@@ -1 +1 @@\n-1603a70f82240ba2d27f72f964e36614d7620ad3\n+20ffea6938b5839c390252e07940b99e3b6a889a"}, {"sha": "0ca838b2103f5b905b9dce3e4d72b83fc3d35b6d", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23cd7b863ff0ca4fba9e28402a067f3f75772d26/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cd7b863ff0ca4fba9e28402a067f3f75772d26/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=23cd7b863ff0ca4fba9e28402a067f3f75772d26", "patch": "@@ -437,7 +437,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"pthread_self\" => {\n                 let [] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                this.pthread_self(dest)?;\n+                let res = this.pthread_self()?;\n+                this.write_scalar(res, dest)?;\n             }\n             \"sched_yield\" => {\n                 let [] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;"}, {"sha": "817bfc7d1cc9c24d489726ac8327dfc6cc042a3b", "filename": "src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/23cd7b863ff0ca4fba9e28402a067f3f75772d26/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cd7b863ff0ca4fba9e28402a067f3f75772d26/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=23cd7b863ff0ca4fba9e28402a067f3f75772d26", "patch": "@@ -69,6 +69,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.pthread_condattr_getclock(attr, clock_id)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n+            \"pthread_setname_np\" => {\n+                let [thread, name] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let res = this.pthread_setname_np(\n+                    this.read_scalar(thread)?.check_init()?,\n+                    this.read_scalar(name)?.check_init()?,\n+                )?;\n+                this.write_scalar(res, dest)?;\n+            }\n \n             // Dynamically invoked syscalls\n             \"syscall\" => {"}, {"sha": "da8e8a63bfe8ab00ebabb54abb49aed6c1730d34", "filename": "src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23cd7b863ff0ca4fba9e28402a067f3f75772d26/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cd7b863ff0ca4fba9e28402a067f3f75772d26/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=23cd7b863ff0ca4fba9e28402a067f3f75772d26", "patch": "@@ -173,8 +173,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Threading\n             \"pthread_setname_np\" => {\n                 let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let name = this.read_pointer(name)?;\n-                this.pthread_setname_np(name)?;\n+                let thread = this.pthread_self()?;\n+                this.pthread_setname_np(thread, this.read_scalar(name)?.check_init()?)?;\n             }\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work."}, {"sha": "22114eae6724f7a240838428a0356c008f77b02c", "filename": "src/shims/unix/thread.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/23cd7b863ff0ca4fba9e28402a067f3f75772d26/src%2Fshims%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cd7b863ff0ca4fba9e28402a067f3f75772d26/src%2Fshims%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fthread.rs?ref=23cd7b863ff0ca4fba9e28402a067f3f75772d26", "patch": "@@ -84,11 +84,27 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(0)\n     }\n \n-    fn pthread_self(&mut self, dest: &PlaceTy<'tcx, Provenance>) -> InterpResult<'tcx> {\n+    fn pthread_self(&mut self) -> InterpResult<'tcx, Scalar<Provenance>> {\n         let this = self.eval_context_mut();\n \n         let thread_id = this.get_active_thread();\n-        this.write_scalar(Scalar::from_uint(thread_id.to_u32(), dest.layout.size), dest)\n+        Ok(Scalar::from_machine_usize(thread_id.into(), this))\n+    }\n+\n+    fn pthread_setname_np(\n+        &mut self,\n+        thread: Scalar<Provenance>,\n+        name: Scalar<Provenance>,\n+    ) -> InterpResult<'tcx, Scalar<Provenance>> {\n+        let this = self.eval_context_mut();\n+\n+        let thread = ThreadId::try_from(thread.to_machine_usize(this)?).unwrap();\n+        let name = name.to_pointer(this)?;\n+\n+        let name = this.read_c_str(name)?.to_owned();\n+        this.set_thread_name(thread, name);\n+\n+        Ok(Scalar::from_u32(0))\n     }\n \n     fn prctl(&mut self, args: &[OpTy<'tcx, Provenance>]) -> InterpResult<'tcx, i32> {\n@@ -117,7 +133,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // byte. Since `read_c_str` returns the string without the null\n             // byte, we need to truncate to 15.\n             name.truncate(15);\n-            this.set_active_thread_name(name);\n+            this.set_thread_name(this.get_active_thread(), name);\n         } else if option == this.eval_libc_i32(\"PR_GET_NAME\")? {\n             if args.len() < 2 {\n                 throw_ub_format!(\n@@ -127,7 +143,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             let address = this.read_pointer(&args[1])?;\n-            let mut name = this.get_active_thread_name().to_vec();\n+            let mut name = this.get_thread_name(this.get_active_thread()).to_vec();\n             name.push(0u8);\n             assert!(name.len() <= 16);\n             this.write_bytes_ptr(address, name)?;\n@@ -138,16 +154,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(0)\n     }\n \n-    fn pthread_setname_np(&mut self, name: Pointer<Option<Provenance>>) -> InterpResult<'tcx> {\n-        let this = self.eval_context_mut();\n-        this.assert_target_os(\"macos\", \"pthread_setname_np\");\n-\n-        let name = this.read_c_str(name)?.to_owned();\n-        this.set_active_thread_name(name);\n-\n-        Ok(())\n-    }\n-\n     fn sched_yield(&mut self) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n "}, {"sha": "6f394fa42fc9caddaf96cfc18f7e49d02b924f16", "filename": "src/thread.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/23cd7b863ff0ca4fba9e28402a067f3f75772d26/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cd7b863ff0ca4fba9e28402a067f3f75772d26/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=23cd7b863ff0ca4fba9e28402a067f3f75772d26", "patch": "@@ -69,9 +69,9 @@ impl From<u32> for ThreadId {\n     }\n }\n \n-impl ThreadId {\n-    pub fn to_u32_scalar(&self) -> Scalar<Provenance> {\n-        Scalar::from_u32(self.0)\n+impl From<ThreadId> for u64 {\n+    fn from(t: ThreadId) -> Self {\n+        t.0.into()\n     }\n }\n \n@@ -394,14 +394,9 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n         Ok(())\n     }\n \n-    /// Set the name of the active thread.\n-    fn set_active_thread_name(&mut self, new_thread_name: Vec<u8>) {\n-        self.active_thread_mut().thread_name = Some(new_thread_name);\n-    }\n-\n-    /// Get the name of the active thread.\n-    pub fn get_active_thread_name(&self) -> &[u8] {\n-        self.active_thread_ref().thread_name()\n+    /// Set the name of the given thread.\n+    pub fn set_thread_name(&mut self, thread: ThreadId, new_thread_name: Vec<u8>) {\n+        self.threads[thread].thread_name = Some(new_thread_name);\n     }\n \n     /// Get the name of the given thread.\n@@ -704,18 +699,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n \n     #[inline]\n-    fn set_active_thread_name(&mut self, new_thread_name: Vec<u8>) {\n+    fn set_thread_name(&mut self, thread: ThreadId, new_thread_name: Vec<u8>) {\n         let this = self.eval_context_mut();\n-        this.machine.threads.set_active_thread_name(new_thread_name);\n+        this.machine.threads.set_thread_name(thread, new_thread_name);\n     }\n \n     #[inline]\n-    fn get_active_thread_name<'c>(&'c self) -> &'c [u8]\n+    fn get_thread_name<'c>(&'c self, thread: ThreadId) -> &'c [u8]\n     where\n         'mir: 'c,\n     {\n         let this = self.eval_context_ref();\n-        this.machine.threads.get_active_thread_name()\n+        this.machine.threads.get_thread_name(thread)\n     }\n \n     #[inline]"}]}