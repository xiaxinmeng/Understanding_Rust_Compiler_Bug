{"sha": "faf8beddef859bbb387a24c536505d833c3821a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZjhiZWRkZWY4NTliYmIzODdhMjRjNTM2NTA1ZDgzM2MzODIxYTU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-05T00:52:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-05T00:52:42Z"}, "message": "Rollup merge of #80637 - LingMan:filter, r=oli-obk\n\nUse Option::filter instead of open-coding it\n\n`@rustbot` modify labels +C-cleanup +T-compiler", "tree": {"sha": "68915ca2056946c6028a96f7bedc395e074964ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68915ca2056946c6028a96f7bedc395e074964ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faf8beddef859bbb387a24c536505d833c3821a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf87haCRBK7hj4Ov3rIwAAdHIIABIb+7g5TtS3NkhOdMTAaShl\nVyOP2F/p1l5m7qXhu5cX9p6FtU1OeRT2DZxuX+/kcyQQkYnz/NBzxKLrXMXf/uIn\nQe4POoAaGOZ7CdqU6psFhiNFF3Oe3maiZhhiGwXHN/J13/G+lbXA2oW/INbq/22q\nG4AdB2jJGVGUubkf/9t0rWrO9Ub0HPMxqbQYB3DHn6gnfWFXB3tNIeNWqJ0EqVUP\nlWl+/FDYiR9M3A/ffX5y13ioV+A0WJ12fTQk4XR+LEAni4m8jxkbhP+dni9ms4CA\nd97exQ05vWdtnWrRU0oRzHbUq+J6jP7fEg4c4nfe5f/Zy6TaTlA1Ah7jQERBwHY=\n=BRR8\n-----END PGP SIGNATURE-----\n", "payload": "tree 68915ca2056946c6028a96f7bedc395e074964ff\nparent 1c6593c473f2cd67a1199dac89fb0e6a811d26ab\nparent 203d5025bb70b21a0f75235a8cec23c0b1b571a1\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1609807962 +0900\ncommitter GitHub <noreply@github.com> 1609807962 +0900\n\nRollup merge of #80637 - LingMan:filter, r=oli-obk\n\nUse Option::filter instead of open-coding it\n\n`@rustbot` modify labels +C-cleanup +T-compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faf8beddef859bbb387a24c536505d833c3821a5", "html_url": "https://github.com/rust-lang/rust/commit/faf8beddef859bbb387a24c536505d833c3821a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faf8beddef859bbb387a24c536505d833c3821a5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c6593c473f2cd67a1199dac89fb0e6a811d26ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c6593c473f2cd67a1199dac89fb0e6a811d26ab", "html_url": "https://github.com/rust-lang/rust/commit/1c6593c473f2cd67a1199dac89fb0e6a811d26ab"}, {"sha": "203d5025bb70b21a0f75235a8cec23c0b1b571a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/203d5025bb70b21a0f75235a8cec23c0b1b571a1", "html_url": "https://github.com/rust-lang/rust/commit/203d5025bb70b21a0f75235a8cec23c0b1b571a1"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "e097264ec8aa014b1b354ca57a91720dc71dccd8", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/faf8beddef859bbb387a24c536505d833c3821a5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf8beddef859bbb387a24c536505d833c3821a5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=faf8beddef859bbb387a24c536505d833c3821a5", "patch": "@@ -43,22 +43,18 @@ impl<'a, 'tcx> FindHirNodeVisitor<'a, 'tcx> {\n     }\n \n     fn node_ty_contains_target(&mut self, hir_id: HirId) -> Option<Ty<'tcx>> {\n-        let ty_opt = self\n-            .infcx\n+        self.infcx\n             .in_progress_typeck_results\n-            .and_then(|typeck_results| typeck_results.borrow().node_type_opt(hir_id));\n-        match ty_opt {\n-            Some(ty) => {\n-                let ty = self.infcx.resolve_vars_if_possible(ty);\n-                if ty.walk().any(|inner| {\n+            .and_then(|typeck_results| typeck_results.borrow().node_type_opt(hir_id))\n+            .map(|ty| self.infcx.resolve_vars_if_possible(ty))\n+            .filter(|ty| {\n+                ty.walk().any(|inner| {\n                     inner == self.target\n                         || match (inner.unpack(), self.target.unpack()) {\n                             (GenericArgKind::Type(inner_ty), GenericArgKind::Type(target_ty)) => {\n+                                use ty::{Infer, TyVar};\n                                 match (inner_ty.kind(), target_ty.kind()) {\n-                                    (\n-                                        &ty::Infer(ty::TyVar(a_vid)),\n-                                        &ty::Infer(ty::TyVar(b_vid)),\n-                                    ) => self\n+                                    (&Infer(TyVar(a_vid)), &Infer(TyVar(b_vid))) => self\n                                         .infcx\n                                         .inner\n                                         .borrow_mut()\n@@ -69,14 +65,8 @@ impl<'a, 'tcx> FindHirNodeVisitor<'a, 'tcx> {\n                             }\n                             _ => false,\n                         }\n-                }) {\n-                    Some(ty)\n-                } else {\n-                    None\n-                }\n-            }\n-            None => None,\n-        }\n+                })\n+            })\n     }\n }\n "}]}