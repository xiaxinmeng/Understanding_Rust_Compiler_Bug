{"sha": "30ff1ef3d000c7f76a1906522b0efff4c8b27201", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZmYxZWYzZDAwMGM3Zjc2YTE5MDY1MjJiMGVmZmY0YzhiMjcyMDE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-11T19:16:16Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-18T15:11:34Z"}, "message": "support const_evaluatable_checked across crate boundaries", "tree": {"sha": "9e6f9de695b7ecec9969f5f3b5bdb1a052951802", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e6f9de695b7ecec9969f5f3b5bdb1a052951802"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30ff1ef3d000c7f76a1906522b0efff4c8b27201", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30ff1ef3d000c7f76a1906522b0efff4c8b27201", "html_url": "https://github.com/rust-lang/rust/commit/30ff1ef3d000c7f76a1906522b0efff4c8b27201", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30ff1ef3d000c7f76a1906522b0efff4c8b27201/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82ebbd7d6b6d3f0ec1560c823320aab696463770", "url": "https://api.github.com/repos/rust-lang/rust/commits/82ebbd7d6b6d3f0ec1560c823320aab696463770", "html_url": "https://github.com/rust-lang/rust/commit/82ebbd7d6b6d3f0ec1560c823320aab696463770"}], "stats": {"total": 159, "additions": 157, "deletions": 2}, "files": [{"sha": "a2e2cf1ca0219b947a8979ad2947be8363448c3b", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=30ff1ef3d000c7f76a1906522b0efff4c8b27201", "patch": "@@ -562,6 +562,12 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {\n     }\n }\n \n+impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [mir::abstract_const::Node<'tcx>] {\n+    fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Result<Self, String> {\n+        ty::codec::RefDecodable::decode(d)\n+    }\n+}\n+\n impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [(ty::Predicate<'tcx>, Span)] {\n     fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Result<Self, String> {\n         ty::codec::RefDecodable::decode(d)\n@@ -1191,6 +1197,19 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .decode((self, tcx))\n     }\n \n+    fn get_mir_abstract_const(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        id: DefIndex,\n+    ) -> Option<&'tcx [mir::abstract_const::Node<'tcx>]> {\n+        self.root\n+            .tables\n+            .mir_abstract_consts\n+            .get(self, id)\n+            .filter(|_| !self.is_proc_macro(id))\n+            .map_or(None, |v| Some(v.decode((self, tcx))))\n+    }\n+\n     fn get_unused_generic_params(&self, id: DefIndex) -> FiniteBitSet<u32> {\n         self.root\n             .tables"}, {"sha": "d4f577a7d1b492127ed23e16dc25df2117ecebb8", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=30ff1ef3d000c7f76a1906522b0efff4c8b27201", "patch": "@@ -112,6 +112,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n     optimized_mir => { tcx.arena.alloc(cdata.get_optimized_mir(tcx, def_id.index)) }\n     promoted_mir => { tcx.arena.alloc(cdata.get_promoted_mir(tcx, def_id.index)) }\n+    mir_abstract_const => { cdata.get_mir_abstract_const(tcx, def_id.index) }\n     unused_generic_params => { cdata.get_unused_generic_params(def_id.index) }\n     mir_const_qualif => { cdata.mir_const_qualif(def_id.index) }\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }"}, {"sha": "eb091d86b82c6d3ddd84d01ce5e84358254c2b76", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=30ff1ef3d000c7f76a1906522b0efff4c8b27201", "patch": "@@ -321,6 +321,12 @@ impl<'a, 'tcx> TyEncoder<'tcx> for EncodeContext<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for &'tcx [mir::abstract_const::Node<'tcx>] {\n+    fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {\n+        (**self).encode(s)\n+    }\n+}\n+\n impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for &'tcx [(ty::Predicate<'tcx>, Span)] {\n     fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {\n         (**self).encode(s)\n@@ -1109,6 +1115,11 @@ impl EncodeContext<'a, 'tcx> {\n             if !unused.is_empty() {\n                 record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);\n             }\n+\n+            let abstract_const = self.tcx.mir_abstract_const(def_id);\n+            if let Some(abstract_const) = abstract_const {\n+                record!(self.tables.mir_abstract_consts[def_id.to_def_id()] <- abstract_const);\n+            }\n         }\n     }\n "}, {"sha": "ba540c944117d1e4ad4fc043d9fce171973a2f58", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=30ff1ef3d000c7f76a1906522b0efff4c8b27201", "patch": "@@ -284,6 +284,7 @@ define_tables! {\n     super_predicates: Table<DefIndex, Lazy!(ty::GenericPredicates<'tcx>)>,\n     mir: Table<DefIndex, Lazy!(mir::Body<'tcx>)>,\n     promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>,\n+    mir_abstract_consts: Table<DefIndex, Lazy!(&'tcx [mir::abstract_const::Node<'tcx>])>,\n     unused_generic_params: Table<DefIndex, Lazy<FiniteBitSet<u32>>>,\n     // `def_keys` and `def_path_hashes` represent a lazy version of a\n     // `DefPathTable`. This allows us to avoid deserializing an entire"}, {"sha": "b85f1e6e5ded05aad2c176114f2a10245a3c7e13", "filename": "compiler/rustc_middle/src/mir/abstract_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs?ref=30ff1ef3d000c7f76a1906522b0efff4c8b27201", "patch": "@@ -11,7 +11,7 @@ rustc_index::newtype_index! {\n }\n \n /// A node of an `AbstractConst`.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, HashStable)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]\n pub enum Node<'tcx> {\n     Leaf(&'tcx ty::Const<'tcx>),\n     Binop(mir::BinOp, NodeId, NodeId),"}, {"sha": "8ea34f9161abcf563c06fc0ae8b5f9603ea14af8", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=30ff1ef3d000c7f76a1906522b0efff4c8b27201", "patch": "@@ -357,6 +357,26 @@ impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [(ty::Predicate<'tcx>,\n     }\n }\n \n+impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [mir::abstract_const::Node<'tcx>] {\n+    fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n+        Ok(decoder.tcx().arena.alloc_from_iter(\n+            (0..decoder.read_usize()?)\n+                .map(|_| Decodable::decode(decoder))\n+                .collect::<Result<Vec<_>, _>>()?,\n+        ))\n+    }\n+}\n+\n+impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [mir::abstract_const::NodeId] {\n+    fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n+        Ok(decoder.tcx().arena.alloc_from_iter(\n+            (0..decoder.read_usize()?)\n+                .map(|_| Decodable::decode(decoder))\n+                .collect::<Result<Vec<_>, _>>()?,\n+        ))\n+    }\n+}\n+\n impl_decodable_via_ref! {\n     &'tcx ty::TypeckResults<'tcx>,\n     &'tcx ty::List<Ty<'tcx>>,"}, {"sha": "b0c48a860ebafd328e17f0cb141805e132b2e3bd", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=30ff1ef3d000c7f76a1906522b0efff4c8b27201", "patch": "@@ -760,6 +760,12 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>>\n     }\n }\n \n+impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx [mir::abstract_const::Node<'tcx>] {\n+    fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Result<Self, String> {\n+        RefDecodable::decode(d)\n+    }\n+}\n+\n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx [(ty::Predicate<'tcx>, Span)] {\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Result<Self, String> {\n         RefDecodable::decode(d)"}, {"sha": "1a95992ed8318adf8b33021bec64a1ddab3ceacd", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=30ff1ef3d000c7f76a1906522b0efff4c8b27201", "patch": "@@ -97,6 +97,15 @@ where\n                 ty.visit_with(self)\n             }\n             ty::PredicateAtom::RegionOutlives(..) => false,\n+            ty::PredicateAtom::ConstEvaluatable(..)\n+                if self.def_id_visitor.tcx().features().const_evaluatable_checked =>\n+            {\n+                // FIXME(const_evaluatable_checked): If the constant used here depends on a\n+                // private function we may have to do something here...\n+                //\n+                // For now, let's just pretend that everything is fine.\n+                false\n+            }\n             _ => bug!(\"unexpected predicate: {:?}\", predicate),\n         }\n     }"}, {"sha": "1a5139d34d3cc8556dfba08919a49e8fce1ed37e", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=30ff1ef3d000c7f76a1906522b0efff4c8b27201", "patch": "@@ -142,6 +142,12 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             return None;\n         }\n \n+        // We don't have to look at concrete constants, as we\n+        // can just evaluate them.\n+        if !body.is_polymorphic {\n+            return None;\n+        }\n+\n         Some(AbstractConstBuilder {\n             tcx,\n             body,\n@@ -304,6 +310,15 @@ pub(super) fn mir_abstract_const<'tcx>(\n     def: ty::WithOptConstParam<LocalDefId>,\n ) -> Option<&'tcx [Node<'tcx>]> {\n     if tcx.features().const_evaluatable_checked {\n+        match tcx.def_kind(def.did) {\n+            // FIXME(const_evaluatable_checked): We currently only do this for anonymous constants,\n+            // meaning that we do not look into associated constants. I(@lcnr) am not yet sure whether\n+            // we want to look into them or treat them as opaque projections.\n+            //\n+            // Right now we do neither of that and simply always fail to unify them.\n+            DefKind::AnonConst => (),\n+            _ => return None,\n+        }\n         let body = tcx.mir_const(def).borrow();\n         AbstractConstBuilder::new(tcx, &body)?.build()\n     } else {"}, {"sha": "79495ba7f9b30b662ebe2593747f63a1363a7681", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff1ef3d000c7f76a1906522b0efff4c8b27201/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=30ff1ef3d000c7f76a1906522b0efff4c8b27201", "patch": "@@ -553,7 +553,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         type_implements_trait,\n         subst_and_check_impossible_predicates,\n         mir_abstract_const: |tcx, def_id| {\n-            let def_id = def_id.as_local()?; // We do not store failed AbstractConst's.\n+            let def_id = def_id.expect_local();\n             if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n                 tcx.mir_abstract_const_of_const_arg(def)\n             } else {"}, {"sha": "9745dfed46087db4240e168b3a6f129a01e97e3e", "filename": "src/test/ui/const-generics/const_evaluatable_checked/auxiliary/const_evaluatable_lib.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/30ff1ef3d000c7f76a1906522b0efff4c8b27201/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fauxiliary%2Fconst_evaluatable_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff1ef3d000c7f76a1906522b0efff4c8b27201/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fauxiliary%2Fconst_evaluatable_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fauxiliary%2Fconst_evaluatable_lib.rs?ref=30ff1ef3d000c7f76a1906522b0efff4c8b27201", "patch": "@@ -0,0 +1,9 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n+where\n+    [u8; std::mem::size_of::<T>() - 1]: Sized,\n+{\n+    [0; std::mem::size_of::<T>() - 1]\n+}"}, {"sha": "53b237843871f1f22c7f2f519ee6b1c3fc404cfe", "filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/30ff1ef3d000c7f76a1906522b0efff4c8b27201/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff1ef3d000c7f76a1906522b0efff4c8b27201/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate.rs?ref=30ff1ef3d000c7f76a1906522b0efff4c8b27201", "patch": "@@ -0,0 +1,15 @@\n+// aux-build:const_evaluatable_lib.rs\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+extern crate const_evaluatable_lib;\n+\n+fn user<T>() where [u8; std::mem::size_of::<T>() - 1]: Sized {\n+    assert_eq!(const_evaluatable_lib::test1::<T>(), [0; std::mem::size_of::<T>() - 1]);\n+}\n+\n+fn main() {\n+    assert_eq!(const_evaluatable_lib::test1::<u32>(), [0; 3]);\n+    user::<u32>();\n+    user::<u64>();\n+}"}, {"sha": "223699233298d4e5a4b28c3172c9c75293bce4f3", "filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate_predicate.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/30ff1ef3d000c7f76a1906522b0efff4c8b27201/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ff1ef3d000c7f76a1906522b0efff4c8b27201/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.rs?ref=30ff1ef3d000c7f76a1906522b0efff4c8b27201", "patch": "@@ -0,0 +1,13 @@\n+// aux-build:const_evaluatable_lib.rs\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+extern crate const_evaluatable_lib;\n+\n+fn user<T>() {\n+    let _ = const_evaluatable_lib::test1::<T>();\n+    //~^ ERROR constant expression depends\n+    //~| ERROR constant expression depends\n+    //~| ERROR constant expression depends\n+}\n+\n+fn main() {}"}, {"sha": "63abb782b93a3f2f98cb49ee0cc9fa091c3630a4", "filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate_predicate.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/30ff1ef3d000c7f76a1906522b0efff4c8b27201/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30ff1ef3d000c7f76a1906522b0efff4c8b27201/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr?ref=30ff1ef3d000c7f76a1906522b0efff4c8b27201", "patch": "@@ -0,0 +1,36 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/cross_crate_predicate.rs:7:13\n+   |\n+LL |     let _ = const_evaluatable_lib::test1::<T>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | \n+  ::: $DIR/auxiliary/const_evaluatable_lib.rs:6:41\n+   |\n+LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n+   |                                         ----- required by this bound in `test1`\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/cross_crate_predicate.rs:7:13\n+   |\n+LL |     let _ = const_evaluatable_lib::test1::<T>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | \n+  ::: $DIR/auxiliary/const_evaluatable_lib.rs:6:41\n+   |\n+LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n+   |                                         ----- required by this bound in `test1::{{constant}}#1`\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/cross_crate_predicate.rs:7:13\n+   |\n+LL |     let _ = const_evaluatable_lib::test1::<T>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 3 previous errors\n+"}]}