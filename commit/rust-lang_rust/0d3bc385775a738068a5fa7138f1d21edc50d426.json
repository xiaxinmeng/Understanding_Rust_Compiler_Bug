{"sha": "0d3bc385775a738068a5fa7138f1d21edc50d426", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkM2JjMzg1Nzc1YTczODA2OGE1ZmE3MTM4ZjFkMjFlZGM1MGQ0MjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-06T15:04:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-06T15:04:29Z"}, "message": "Constrain ImportMap to only store simple paths", "tree": {"sha": "0dab222587e927a39cbf99611b56955ac2679eab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dab222587e927a39cbf99611b56955ac2679eab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d3bc385775a738068a5fa7138f1d21edc50d426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d3bc385775a738068a5fa7138f1d21edc50d426", "html_url": "https://github.com/rust-lang/rust/commit/0d3bc385775a738068a5fa7138f1d21edc50d426", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d3bc385775a738068a5fa7138f1d21edc50d426/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81d6816f175e02bccef8f373d2961d756dff31bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/81d6816f175e02bccef8f373d2961d756dff31bb", "html_url": "https://github.com/rust-lang/rust/commit/81d6816f175e02bccef8f373d2961d756dff31bb"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "028cae2e7229b88105c6b7d47317564ba03cc85b", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0d3bc385775a738068a5fa7138f1d21edc50d426/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d3bc385775a738068a5fa7138f1d21edc50d426/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=0d3bc385775a738068a5fa7138f1d21edc50d426", "patch": "@@ -4,17 +4,16 @@ use std::{cmp::Ordering, fmt, hash::BuildHasherDefault, sync::Arc};\n \n use base_db::CrateId;\n use fst::{self, Streamer};\n+use hir_expand::name::Name;\n use indexmap::{map::Entry, IndexMap};\n+use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHasher};\n use smallvec::SmallVec;\n use syntax::SmolStr;\n \n use crate::{\n-    db::DefDatabase,\n-    item_scope::ItemInNs,\n-    path::{ModPath, PathKind},\n-    visibility::Visibility,\n-    AssocItemId, ModuleDefId, ModuleId, TraitId,\n+    db::DefDatabase, item_scope::ItemInNs, visibility::Visibility, AssocItemId, ModuleDefId,\n+    ModuleId, TraitId,\n };\n \n type FxIndexMap<K, V> = IndexMap<K, V, BuildHasherDefault<FxHasher>>;\n@@ -23,11 +22,28 @@ type FxIndexMap<K, V> = IndexMap<K, V, BuildHasherDefault<FxHasher>>;\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct ImportInfo {\n     /// A path that can be used to import the item, relative to the crate's root.\n-    pub path: ModPath,\n+    pub path: ImportPath,\n     /// The module containing this item.\n     pub container: ModuleId,\n }\n \n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct ImportPath {\n+    pub segments: Vec<Name>,\n+}\n+\n+impl fmt::Display for ImportPath {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(&self.segments.iter().format(\"::\"), f)\n+    }\n+}\n+\n+impl ImportPath {\n+    fn len(&self) -> usize {\n+        self.segments.len()\n+    }\n+}\n+\n /// A map from publicly exported items to the path needed to import/name them from a downstream\n /// crate.\n ///\n@@ -61,7 +77,7 @@ impl ImportMap {\n         let mut import_map = Self::default();\n \n         // We look only into modules that are public(ly reexported), starting with the crate root.\n-        let empty = ModPath { kind: PathKind::Plain, segments: vec![] };\n+        let empty = ImportPath { segments: vec![] };\n         let root = ModuleId { krate, local_id: def_map.root };\n         let mut worklist = vec![(root, empty)];\n         while let Some((module, mod_path)) = worklist.pop() {\n@@ -152,8 +168,8 @@ impl ImportMap {\n     }\n \n     /// Returns the `ModPath` needed to import/mention `item`, relative to this crate's root.\n-    pub fn path_of(&self, item: ItemInNs) -> Option<&ModPath> {\n-        Some(&self.map.get(&item)?.path)\n+    pub fn path_of(&self, item: ItemInNs) -> Option<&ImportPath> {\n+        self.import_info_for(item).map(|it| &it.path)\n     }\n \n     pub fn import_info_for(&self, item: ItemInNs) -> Option<&ImportInfo> {\n@@ -197,7 +213,7 @@ impl fmt::Debug for ImportMap {\n     }\n }\n \n-fn fst_path(path: &ModPath) -> String {\n+fn fst_path(path: &ImportPath) -> String {\n     let mut s = path.to_string();\n     s.make_ascii_lowercase();\n     s"}]}