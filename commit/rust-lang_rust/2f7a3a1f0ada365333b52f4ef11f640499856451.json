{"sha": "2f7a3a1f0ada365333b52f4ef11f640499856451", "node_id": "C_kwDOAAsO6NoAKDJmN2EzYTFmMGFkYTM2NTMzM2I1MmY0ZWYxMWY2NDA0OTk4NTY0NTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-22T10:43:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-22T10:43:09Z"}, "message": "Rollup merge of #107180 - nvzqz:rm-fmt-ref, r=joshtriplett\n\nRemove unnecessary `&format!`\n\nThese were likely from before the `PartialEq<str>` impl for `&String`.", "tree": {"sha": "61f9c6c42d3af3c877e1ff3d556a17e6a9e32420", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61f9c6c42d3af3c877e1ff3d556a17e6a9e32420"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f7a3a1f0ada365333b52f4ef11f640499856451", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjzRM9CRBK7hj4Ov3rIwAAZ+UIADGCcaz34s8ZRQZBma4MCbVV\n5sYdMOU66n+zWSYHjlTUGHZ+jaXt0D26IuVKrYc0ZqEuuw4Owpl86lqqd07T34QU\nMwvxYhh+Wt6vWQ7l1enEktsHwdm0tN9qyd1CVji7ZRQ8VuUtn2q0ImqohQqE3w3B\nQu/8801E+6UHYWnjwCI/UJvdDH4SBSRiUHTAJKUTwGVM0ZewRwfB04n3+aGAw92c\nw1QjwK+52jfCyJRFL/4wkBitcS8p2i/vOVzX5j/9d79jJNbj8/4ZstS2iNJ0y6r7\ns9V96j4Eq25hUyrgyoYtHawR1POej/ebleg+ENuOCvL0NvSTvipVMnbEO/QPGQY=\n=qPq4\n-----END PGP SIGNATURE-----\n", "payload": "tree 61f9c6c42d3af3c877e1ff3d556a17e6a9e32420\nparent 8a225212e6bd65d7374eef5a8463a157fe4cbf61\nparent 734a91358b2628dae64ff8f99a96d63707c40241\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674384189 +0100\ncommitter GitHub <noreply@github.com> 1674384189 +0100\n\nRollup merge of #107180 - nvzqz:rm-fmt-ref, r=joshtriplett\n\nRemove unnecessary `&format!`\n\nThese were likely from before the `PartialEq<str>` impl for `&String`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7a3a1f0ada365333b52f4ef11f640499856451", "html_url": "https://github.com/rust-lang/rust/commit/2f7a3a1f0ada365333b52f4ef11f640499856451", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f7a3a1f0ada365333b52f4ef11f640499856451/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a225212e6bd65d7374eef5a8463a157fe4cbf61", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a225212e6bd65d7374eef5a8463a157fe4cbf61", "html_url": "https://github.com/rust-lang/rust/commit/8a225212e6bd65d7374eef5a8463a157fe4cbf61"}, {"sha": "734a91358b2628dae64ff8f99a96d63707c40241", "url": "https://api.github.com/repos/rust-lang/rust/commits/734a91358b2628dae64ff8f99a96d63707c40241", "html_url": "https://github.com/rust-lang/rust/commit/734a91358b2628dae64ff8f99a96d63707c40241"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "2a7ec544f9e2e138804cf0c7720b70091d2d2927", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a3a1f0ada365333b52f4ef11f640499856451/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a3a1f0ada365333b52f4ef11f640499856451/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=2f7a3a1f0ada365333b52f4ef11f640499856451", "patch": "@@ -1355,11 +1355,11 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{}\", Foo::new(2)), \"2\");\n-    /// assert_eq!(&format!(\"{}\", Foo::new(-1)), \"-1\");\n-    /// assert_eq!(&format!(\"{}\", Foo::new(0)), \"0\");\n-    /// assert_eq!(&format!(\"{:#}\", Foo::new(-1)), \"-Foo 1\");\n-    /// assert_eq!(&format!(\"{:0>#8}\", Foo::new(-1)), \"00-Foo 1\");\n+    /// assert_eq!(format!(\"{}\", Foo::new(2)), \"2\");\n+    /// assert_eq!(format!(\"{}\", Foo::new(-1)), \"-1\");\n+    /// assert_eq!(format!(\"{}\", Foo::new(0)), \"0\");\n+    /// assert_eq!(format!(\"{:#}\", Foo::new(-1)), \"-Foo 1\");\n+    /// assert_eq!(format!(\"{:0>#8}\", Foo::new(-1)), \"00-Foo 1\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn pad_integral(&mut self, is_nonnegative: bool, prefix: &str, buf: &str) -> Result {\n@@ -1452,8 +1452,8 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{Foo:<4}\"), \"Foo \");\n-    /// assert_eq!(&format!(\"{Foo:0>4}\"), \"0Foo\");\n+    /// assert_eq!(format!(\"{Foo:<4}\"), \"Foo \");\n+    /// assert_eq!(format!(\"{Foo:0>4}\"), \"0Foo\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn pad(&mut self, s: &str) -> Result {\n@@ -1636,8 +1636,8 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{Foo}\"), \"Foo\");\n-    /// assert_eq!(&format!(\"{Foo:0>8}\"), \"Foo\");\n+    /// assert_eq!(format!(\"{Foo}\"), \"Foo\");\n+    /// assert_eq!(format!(\"{Foo:0>8}\"), \"Foo\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn write_str(&mut self, data: &str) -> Result {\n@@ -1659,8 +1659,8 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{}\", Foo(-1)), \"Foo -1\");\n-    /// assert_eq!(&format!(\"{:0>8}\", Foo(2)), \"Foo 2\");\n+    /// assert_eq!(format!(\"{}\", Foo(-1)), \"Foo -1\");\n+    /// assert_eq!(format!(\"{:0>8}\", Foo(2)), \"Foo 2\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result {\n@@ -1703,8 +1703,8 @@ impl<'a> Formatter<'a> {\n     /// }\n     ///\n     /// // We set alignment to the right with \">\".\n-    /// assert_eq!(&format!(\"{Foo:G>3}\"), \"GGG\");\n-    /// assert_eq!(&format!(\"{Foo:t>6}\"), \"tttttt\");\n+    /// assert_eq!(format!(\"{Foo:G>3}\"), \"GGG\");\n+    /// assert_eq!(format!(\"{Foo:t>6}\"), \"tttttt\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n@@ -1738,10 +1738,10 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{Foo:<}\"), \"left\");\n-    /// assert_eq!(&format!(\"{Foo:>}\"), \"right\");\n-    /// assert_eq!(&format!(\"{Foo:^}\"), \"center\");\n-    /// assert_eq!(&format!(\"{Foo}\"), \"into the void\");\n+    /// assert_eq!(format!(\"{Foo:<}\"), \"left\");\n+    /// assert_eq!(format!(\"{Foo:>}\"), \"right\");\n+    /// assert_eq!(format!(\"{Foo:^}\"), \"center\");\n+    /// assert_eq!(format!(\"{Foo}\"), \"into the void\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n@@ -1767,16 +1767,16 @@ impl<'a> Formatter<'a> {\n     ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n     ///         if let Some(width) = formatter.width() {\n     ///             // If we received a width, we use it\n-    ///             write!(formatter, \"{:width$}\", &format!(\"Foo({})\", self.0), width = width)\n+    ///             write!(formatter, \"{:width$}\", format!(\"Foo({})\", self.0), width = width)\n     ///         } else {\n     ///             // Otherwise we do nothing special\n     ///             write!(formatter, \"Foo({})\", self.0)\n     ///         }\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{:10}\", Foo(23)), \"Foo(23)   \");\n-    /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n+    /// assert_eq!(format!(\"{:10}\", Foo(23)), \"Foo(23)   \");\n+    /// assert_eq!(format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n@@ -1806,8 +1806,8 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{:.4}\", Foo(23.2)), \"Foo(23.2000)\");\n-    /// assert_eq!(&format!(\"{}\", Foo(23.2)), \"Foo(23.20)\");\n+    /// assert_eq!(format!(\"{:.4}\", Foo(23.2)), \"Foo(23.2000)\");\n+    /// assert_eq!(format!(\"{}\", Foo(23.2)), \"Foo(23.20)\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n@@ -1837,9 +1837,9 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{:+}\", Foo(23)), \"Foo(+23)\");\n-    /// assert_eq!(&format!(\"{:+}\", Foo(-23)), \"Foo(-23)\");\n-    /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n+    /// assert_eq!(format!(\"{:+}\", Foo(23)), \"Foo(+23)\");\n+    /// assert_eq!(format!(\"{:+}\", Foo(-23)), \"Foo(-23)\");\n+    /// assert_eq!(format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n@@ -1867,8 +1867,8 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{:-}\", Foo(23)), \"-Foo(23)\");\n-    /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n+    /// assert_eq!(format!(\"{:-}\", Foo(23)), \"-Foo(23)\");\n+    /// assert_eq!(format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n@@ -1895,8 +1895,8 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{:#}\", Foo(23)), \"Foo(23)\");\n-    /// assert_eq!(&format!(\"{}\", Foo(23)), \"23\");\n+    /// assert_eq!(format!(\"{:#}\", Foo(23)), \"Foo(23)\");\n+    /// assert_eq!(format!(\"{}\", Foo(23)), \"23\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n@@ -1922,7 +1922,7 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{:04}\", Foo(23)), \"23\");\n+    /// assert_eq!(format!(\"{:04}\", Foo(23)), \"23\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]"}, {"sha": "a2b9bb551e677c57672721373a2866f624a307e5", "filename": "library/core/tests/num/dec2flt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a3a1f0ada365333b52f4ef11f640499856451/library%2Fcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a3a1f0ada365333b52f4ef11f640499856451/library%2Fcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs?ref=2f7a3a1f0ada365333b52f4ef11f640499856451", "patch": "@@ -15,7 +15,7 @@ macro_rules! test_literal {\n         for input in inputs {\n             assert_eq!(input.parse(), Ok(x64));\n             assert_eq!(input.parse(), Ok(x32));\n-            let neg_input = &format!(\"-{input}\");\n+            let neg_input = format!(\"-{input}\");\n             assert_eq!(neg_input.parse(), Ok(-x64));\n             assert_eq!(neg_input.parse(), Ok(-x32));\n         }"}, {"sha": "d576bd0ccee03b5d4ea32070dd410f94a1ac131c", "filename": "library/portable-simd/crates/core_simd/examples/spectral_norm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a3a1f0ada365333b52f4ef11f640499856451/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fexamples%2Fspectral_norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a3a1f0ada365333b52f4ef11f640499856451/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fexamples%2Fspectral_norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fexamples%2Fspectral_norm.rs?ref=2f7a3a1f0ada365333b52f4ef11f640499856451", "patch": "@@ -69,7 +69,7 @@ fn dot(x: &[f64], y: &[f64]) -> f64 {\n #[cfg(test)]\n #[test]\n fn test() {\n-    assert_eq!(&format!(\"{:.9}\", spectral_norm(100)), \"1.274219991\");\n+    assert_eq!(format!(\"{:.9}\", spectral_norm(100)), \"1.274219991\");\n }\n \n fn main() {"}, {"sha": "9aea62a5b940c553cfb011ecb322f7ff7a5a9af0", "filename": "library/std/src/io/error/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a3a1f0ada365333b52f4ef11f640499856451/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a3a1f0ada365333b52f4ef11f640499856451/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs?ref=2f7a3a1f0ada365333b52f4ef11f640499856451", "patch": "@@ -190,5 +190,5 @@ fn test_std_io_error_downcast() {\n     let io_error = io_error.downcast::<E>().unwrap_err();\n \n     assert_eq!(SIMPLE_MESSAGE.kind, io_error.kind());\n-    assert_eq!(SIMPLE_MESSAGE.message, &*format!(\"{io_error}\"));\n+    assert_eq!(SIMPLE_MESSAGE.message, format!(\"{io_error}\"));\n }"}, {"sha": "0eb59d45de727b6603bd32b1988b55fcb509e9ac", "filename": "library/std/src/net/ip_addr/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a3a1f0ada365333b52f4ef11f640499856451/library%2Fstd%2Fsrc%2Fnet%2Fip_addr%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a3a1f0ada365333b52f4ef11f640499856451/library%2Fstd%2Fsrc%2Fnet%2Fip_addr%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip_addr%2Ftests.rs?ref=2f7a3a1f0ada365333b52f4ef11f640499856451", "patch": "@@ -125,8 +125,8 @@ fn ipv4_addr_to_string() {\n     assert_eq!(Ipv4Addr::new(127, 127, 127, 127).to_string(), \"127.127.127.127\");\n \n     // Test padding\n-    assert_eq!(&format!(\"{:16}\", Ipv4Addr::new(1, 1, 1, 1)), \"1.1.1.1         \");\n-    assert_eq!(&format!(\"{:>16}\", Ipv4Addr::new(1, 1, 1, 1)), \"         1.1.1.1\");\n+    assert_eq!(format!(\"{:16}\", Ipv4Addr::new(1, 1, 1, 1)), \"1.1.1.1         \");\n+    assert_eq!(format!(\"{:>16}\", Ipv4Addr::new(1, 1, 1, 1)), \"         1.1.1.1\");\n }\n \n #[test]\n@@ -148,8 +148,8 @@ fn ipv6_addr_to_string() {\n         \"1111:2222:3333:4444:5555:6666:7777:8888\"\n     );\n     // padding\n-    assert_eq!(&format!(\"{:20}\", Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8)), \"1:2:3:4:5:6:7:8     \");\n-    assert_eq!(&format!(\"{:>20}\", Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8)), \"     1:2:3:4:5:6:7:8\");\n+    assert_eq!(format!(\"{:20}\", Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8)), \"1:2:3:4:5:6:7:8     \");\n+    assert_eq!(format!(\"{:>20}\", Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8)), \"     1:2:3:4:5:6:7:8\");\n \n     // reduce a single run of zeros\n     assert_eq!("}, {"sha": "dfc6dabbed1edeace9365cd0ed3bcdb89ea4e932", "filename": "library/std/src/net/socket_addr/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f7a3a1f0ada365333b52f4ef11f640499856451/library%2Fstd%2Fsrc%2Fnet%2Fsocket_addr%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7a3a1f0ada365333b52f4ef11f640499856451/library%2Fstd%2Fsrc%2Fnet%2Fsocket_addr%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fsocket_addr%2Ftests.rs?ref=2f7a3a1f0ada365333b52f4ef11f640499856451", "patch": "@@ -64,11 +64,11 @@ fn ipv4_socket_addr_to_string() {\n \n     // Test padding.\n     assert_eq!(\n-        &format!(\"{:16}\", SocketAddrV4::new(Ipv4Addr::new(1, 1, 1, 1), 53)),\n+        format!(\"{:16}\", SocketAddrV4::new(Ipv4Addr::new(1, 1, 1, 1), 53)),\n         \"1.1.1.1:53      \"\n     );\n     assert_eq!(\n-        &format!(\"{:>16}\", SocketAddrV4::new(Ipv4Addr::new(1, 1, 1, 1), 53)),\n+        format!(\"{:>16}\", SocketAddrV4::new(Ipv4Addr::new(1, 1, 1, 1), 53)),\n         \"      1.1.1.1:53\"\n     );\n }\n@@ -111,11 +111,11 @@ fn ipv6_socket_addr_to_string() {\n \n     // Test padding.\n     assert_eq!(\n-        &format!(\"{:22}\", SocketAddrV6::new(Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8), 9, 0, 0)),\n+        format!(\"{:22}\", SocketAddrV6::new(Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8), 9, 0, 0)),\n         \"[1:2:3:4:5:6:7:8]:9   \"\n     );\n     assert_eq!(\n-        &format!(\"{:>22}\", SocketAddrV6::new(Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8), 9, 0, 0)),\n+        format!(\"{:>22}\", SocketAddrV6::new(Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8), 9, 0, 0)),\n         \"   [1:2:3:4:5:6:7:8]:9\"\n     );\n }"}]}