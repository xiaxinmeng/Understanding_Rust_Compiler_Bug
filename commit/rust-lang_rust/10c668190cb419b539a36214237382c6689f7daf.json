{"sha": "10c668190cb419b539a36214237382c6689f7daf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYzY2ODE5MGNiNDE5YjUzOWEzNjIxNDIzNzM4MmM2Njg5ZjdkYWY=", "commit": {"author": {"name": "Xiang Fan", "email": "sfanxiang@gmail.com", "date": "2019-09-27T23:13:53Z"}, "committer": {"name": "Xiang Fan", "email": "sfanxiang@gmail.com", "date": "2019-09-27T23:13:53Z"}, "message": "Gate llvm.sideeffect under -Z insert-sideeffect", "tree": {"sha": "25750fbeff66b2d27babd8a452ddcf0afd769911", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25750fbeff66b2d27babd8a452ddcf0afd769911"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10c668190cb419b539a36214237382c6689f7daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10c668190cb419b539a36214237382c6689f7daf", "html_url": "https://github.com/rust-lang/rust/commit/10c668190cb419b539a36214237382c6689f7daf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10c668190cb419b539a36214237382c6689f7daf/comments", "author": {"login": "sfanxiang", "id": 5893440, "node_id": "MDQ6VXNlcjU4OTM0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/5893440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfanxiang", "html_url": "https://github.com/sfanxiang", "followers_url": "https://api.github.com/users/sfanxiang/followers", "following_url": "https://api.github.com/users/sfanxiang/following{/other_user}", "gists_url": "https://api.github.com/users/sfanxiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfanxiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfanxiang/subscriptions", "organizations_url": "https://api.github.com/users/sfanxiang/orgs", "repos_url": "https://api.github.com/users/sfanxiang/repos", "events_url": "https://api.github.com/users/sfanxiang/events{/privacy}", "received_events_url": "https://api.github.com/users/sfanxiang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfanxiang", "id": 5893440, "node_id": "MDQ6VXNlcjU4OTM0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/5893440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfanxiang", "html_url": "https://github.com/sfanxiang", "followers_url": "https://api.github.com/users/sfanxiang/followers", "following_url": "https://api.github.com/users/sfanxiang/following{/other_user}", "gists_url": "https://api.github.com/users/sfanxiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfanxiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfanxiang/subscriptions", "organizations_url": "https://api.github.com/users/sfanxiang/orgs", "repos_url": "https://api.github.com/users/sfanxiang/repos", "events_url": "https://api.github.com/users/sfanxiang/events{/privacy}", "received_events_url": "https://api.github.com/users/sfanxiang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f71e0daa29b232d8f689f77fecb84dcb87fce6da", "url": "https://api.github.com/repos/rust-lang/rust/commits/f71e0daa29b232d8f689f77fecb84dcb87fce6da", "html_url": "https://github.com/rust-lang/rust/commit/f71e0daa29b232d8f689f77fecb84dcb87fce6da"}], "stats": {"total": 81, "additions": 36, "deletions": 45}, "files": [{"sha": "abfbba53b5936384c242b81d680000d21eefc99f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -1472,6 +1472,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"which mangling version to use for symbol names\"),\n     binary_dep_depinfo: bool = (false, parse_bool, [TRACKED],\n         \"include artifacts (sysroot, crate dependencies) used during compilation in dep-info\"),\n+    insert_sideeffect: bool = (false, parse_bool, [TRACKED],\n+        \"fix undefined behavior when a thread doesn't eventually make progress \\\n+         (such as entering an empty infinite loop) by inserting llvm.sideeffect\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "e4ac176576053ffef8b72985d30ebf137c6a0a38", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -726,8 +726,10 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn sideeffect(&mut self) {\n-        let fnname = self.get_intrinsic(&(\"llvm.sideeffect\"));\n-        self.call(fnname, &[], None);\n+        if self.tcx.sess.opts.debugging_opts.insert_sideeffect {\n+            let fnname = self.get_intrinsic(&(\"llvm.sideeffect\"));\n+            self.call(fnname, &[], None);\n+        }\n     }\n \n     fn va_start(&mut self, va_list: &'ll Value) -> &'ll Value {"}, {"sha": "8e3243f5e7bd05d6a5602ed3f7116a96683e6318", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -157,13 +157,15 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'a, 'tcx> {\n         bx: &mut Bx,\n         targets: &[mir::BasicBlock],\n     ) {\n-        if targets.iter().any(|target| {\n-            *target <= *self.bb\n-                && target\n-                    .start_location()\n-                    .is_predecessor_of(self.bb.start_location(), mir)\n-        }) {\n-            bx.sideeffect();\n+        if bx.tcx().sess.opts.debugging_opts.insert_sideeffect {\n+            if targets.iter().any(|target| {\n+                *target <= *self.bb\n+                    && target\n+                        .start_location()\n+                        .is_predecessor_of(self.bb.start_location(), mir)\n+            }) {\n+                bx.sideeffect();\n+            }\n         }\n     }\n }"}, {"sha": "c3ffaeb9547b3c20a43168cc88d3aed04cbb29d3", "filename": "src/test/codegen/alloc-optimisation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Falloc-optimisation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Falloc-optimisation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Falloc-optimisation.rs?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -7,8 +7,7 @@\n pub fn alloc_test(data: u32) {\n     // CHECK-LABEL: @alloc_test\n     // CHECK-NEXT: start:\n-    // CHECK-NOT: alloc\n-    // CHECK: ret void\n+    // CHECK-NEXT: ret void\n     let x = Box::new(data);\n     drop(x);\n }"}, {"sha": "ff21b4caa83c3737bc0844603e132c9dac117677", "filename": "src/test/codegen/dealloc-no-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fdealloc-no-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fdealloc-no-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdealloc-no-unwind.rs?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -17,7 +17,7 @@ impl Drop for A {\n pub fn a(a: Box<i32>) {\n     // CHECK-LABEL: define void @a\n     // CHECK: call void @__rust_dealloc\n-    // CHECK: call void @foo\n+    // CHECK-NEXT: call void @foo\n     let _a = A;\n     drop(a);\n }"}, {"sha": "653da8e8b5f7bff2112f97d12ebccedf3dea137b", "filename": "src/test/codegen/issue-34947-pow-i32.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fissue-34947-pow-i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fissue-34947-pow-i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-34947-pow-i32.rs?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -6,11 +6,8 @@\n #[no_mangle]\n pub fn issue_34947(x: i32) -> i32 {\n     // CHECK: mul\n-    // CHECK-NOT: br label\n-    // CHECK: mul\n-    // CHECK-NOT: br label\n-    // CHECK: mul\n-    // CHECK-NOT: br label\n-    // CHECK: ret\n+    // CHECK-NEXT: mul\n+    // CHECK-NEXT: mul\n+    // CHECK-NEXT: ret\n     x.pow(5)\n }"}, {"sha": "7aadc8a095498a56fbe19d2e1f1b2d07ec5fb9bf", "filename": "src/test/codegen/issue-45222.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fissue-45222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fissue-45222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-45222.rs?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -1,9 +1,3 @@\n-// ignore-test\n-\n-// FIXME:\n-// LLVM can't optimize some loops with a large number of iterations because of\n-// @llvm.sideeffect() (see also #59546)\n-\n // compile-flags: -O\n // ignore-debug: the debug assertions get in the way\n "}, {"sha": "2050193b61b54ec5144b88e07405ffd87f724302", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-linelength\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n@@ -51,27 +53,27 @@ pub fn naked_with_args_and_return(a: isize) -> isize {\n #[naked]\n pub fn naked_recursive() {\n     // CHECK-NEXT: {{.+}}:\n-    // CHECK: call void @naked_empty()\n+    // CHECK-NEXT: call void @naked_empty()\n \n     // FIXME(#39685) Avoid one block per call.\n     // CHECK-NEXT: br label %bb1\n     // CHECK: bb1:\n \n     naked_empty();\n \n-    // CHECK: %{{[0-9]+}} = call i{{[0-9]+}} @naked_with_return()\n+    // CHECK-NEXT: %{{[0-9]+}} = call i{{[0-9]+}} @naked_with_return()\n \n     // FIXME(#39685) Avoid one block per call.\n     // CHECK-NEXT: br label %bb2\n     // CHECK: bb2:\n \n-    // CHECK: %{{[0-9]+}} = call i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+}} %{{[0-9]+}})\n+    // CHECK-NEXT: %{{[0-9]+}} = call i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+}} %{{[0-9]+}})\n \n     // FIXME(#39685) Avoid one block per call.\n     // CHECK-NEXT: br label %bb3\n     // CHECK: bb3:\n \n-    // CHECK: call void @naked_with_args(i{{[0-9]+}} %{{[0-9]+}})\n+    // CHECK-NEXT: call void @naked_with_args(i{{[0-9]+}} %{{[0-9]+}})\n \n     // FIXME(#39685) Avoid one block per call.\n     // CHECK-NEXT: br label %bb4"}, {"sha": "56b360e0a7f4883ceff22ed802b83d46a95557c4", "filename": "src/test/codegen/non-terminate/infinite-loop-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-loop-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-loop-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-loop-1.rs?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C opt-level=3\n+// compile-flags: -C opt-level=3 -Z insert-sideeffect\n \n #![crate_type = \"lib\"]\n "}, {"sha": "2921ab6dc04af460d4cdc5629de2233bddd7bb58", "filename": "src/test/codegen/non-terminate/infinite-loop-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-loop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-loop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-loop-2.rs?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C opt-level=3\n+// compile-flags: -C opt-level=3 -Z insert-sideeffect\n \n #![crate_type = \"lib\"]\n "}, {"sha": "1f292ce379fc0ea8032fb84d056040af6c156712", "filename": "src/test/codegen/non-terminate/infinite-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-recursion.rs?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C opt-level=3\n+// compile-flags: -C opt-level=3 -Z insert-sideeffect\n \n #![crate_type = \"lib\"]\n "}, {"sha": "87f29f6047c6a0af8932ad2887a7d343268fa007", "filename": "src/test/codegen/repeat-trusted-len.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -14,10 +14,6 @@ pub fn helper(_: usize) {\n // CHECK-LABEL: @repeat_take_collect\n #[no_mangle]\n pub fn repeat_take_collect() -> Vec<u8> {\n-// FIXME: At the time of writing LLVM transforms this loop into a single\n-// `store` and then a `memset` with size = 99999. The correct check should be:\n-//        call void @llvm.memset.p0i8.[[USIZE]](i8* {{(nonnull )?}}align 1 %{{[a-z0-9.]+}}, i8 42, [[USIZE]] 100000, i1 false)\n-\n-// CHECK: call void @llvm.memset.p0i8.[[USIZE]](i8* {{(nonnull )?}}align 1 %{{[a-z0-9.]+}}, i8 42, [[USIZE]] 99999, i1 false)\n+// CHECK: call void @llvm.memset.p0i8.[[USIZE]](i8* {{(nonnull )?}}align 1 %{{[0-9]+}}, i8 42, [[USIZE]] 100000, i1 false)\n     iter::repeat(42).take(100000).collect()\n }"}, {"sha": "b9ffce8b0cb3d180d269a2aab8587276bb60a08a", "filename": "src/test/codegen/vec-clear.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fvec-clear.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fvec-clear.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-clear.rs?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -1,9 +1,3 @@\n-// ignore-test\n-\n-// FIXME:\n-// LLVM can't optimize some loops with unknown number of iterations because of\n-// @llvm.sideeffect() (see also #59546)\n-\n // ignore-debug: the debug assertions get in the way\n // compile-flags: -O\n "}, {"sha": "73348ddd063dc55192c06fc530b7a1f472e253a9", "filename": "src/test/codegen/vec-iter-collect-len.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fvec-iter-collect-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fvec-iter-collect-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-iter-collect-len.rs?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -5,6 +5,8 @@\n \n #[no_mangle]\n pub fn get_len() -> usize {\n-    // CHECK-COUNT-1: {{^define}}\n+    // CHECK-LABEL: @get_len\n+    // CHECK-NOT: call\n+    // CHECK-NOT: invoke\n     [1, 2, 3].iter().collect::<Vec<_>>().len()\n }"}, {"sha": "ebede0908c6c48d5ac0a01508e07f1d7c6245622", "filename": "src/test/codegen/vec-optimizes-away.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fvec-optimizes-away.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Fcodegen%2Fvec-optimizes-away.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-optimizes-away.rs?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -8,6 +8,6 @@\n pub fn sum_me() -> i32 {\n     // CHECK-LABEL: @sum_me\n     // CHECK-NEXT: {{^.*:$}}\n-    // CHECK: ret i32 6\n+    // CHECK-NEXT: ret i32 6\n     vec![1, 2, 3].iter().sum::<i32>()\n }"}, {"sha": "0cab955f6442bb70d3acb8063ed645666a9ba414", "filename": "src/test/run-make-fulldeps/inline-always-many-cgu/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/10c668190cb419b539a36214237382c6689f7daf/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile?ref=10c668190cb419b539a36214237382c6689f7daf", "patch": "@@ -2,7 +2,7 @@\n \n all:\n \t$(RUSTC) foo.rs --emit llvm-ir -C codegen-units=2\n-\tif cat $(TMPDIR)/*.ll | grep -v 'call void @llvm.sideeffect()' | $(CGREP) -e '\\bcall\\b'; then \\\n+\tif cat $(TMPDIR)/*.ll | $(CGREP) -e '\\bcall\\b'; then \\\n \t\techo \"found call instruction when one wasn't expected\"; \\\n \t\texit 1; \\\n \tfi"}]}