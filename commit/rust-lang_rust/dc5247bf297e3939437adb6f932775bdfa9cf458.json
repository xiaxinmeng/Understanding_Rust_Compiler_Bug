{"sha": "dc5247bf297e3939437adb6f932775bdfa9cf458", "node_id": "C_kwDOAAsO6NoAKGRjNTI0N2JmMjk3ZTM5Mzk0MzdhZGI2ZjkzMjc3NWJkZmE5Y2Y0NTg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-04T01:19:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-04T01:19:26Z"}, "message": "Rollup merge of #106157 - LeSeulArtichaut:106126-thir-unsafeck-good-path-bug-2, r=compiler-errors\n\nDon't trim path for `unsafe_op_in_unsafe_fn` lints\n\nFixes #106126, alternative to #106127.\nr? `@ghost` for now.", "tree": {"sha": "bd14404851935e01f7ea7c8d363024f9d1a02d9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd14404851935e01f7ea7c8d363024f9d1a02d9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc5247bf297e3939437adb6f932775bdfa9cf458", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjtNQeCRBK7hj4Ov3rIwAA59wIAFLyvCbjGwK1GRzQrOIUQS3J\njrORnHHrHowQ7VV09ysSGU04+Hm/8wCPG6L6pXVZ80aPnuTsVA3TkUXwZLG2mFG4\nPgxywLuQUXbDCnpL8iiuWurr4UEiJERGHy9uCp6MFvpwJxwy/IG8GraOGVKZnZbA\nIR8r4lm1I19Q0j5GbP8I5f6iu3DLXN/E5Ekm+lixSSgvjK/U1aayvGUh0oi50h6d\nxYz+1fDBqKQdUN/TKlG0gCUss/AX0JYFT+/1ijs9AScSSdAMSlA73RlwB06aPA2J\nEob/QXo+lAzFaJF97F9aqV2EsFaWLrXfS0wvVpi4vDX9jEbfoaAEGcgjhX6KO1s=\n=yQSm\n-----END PGP SIGNATURE-----\n", "payload": "tree bd14404851935e01f7ea7c8d363024f9d1a02d9b\nparent f6b0f4707bcda7b57279f9534a999dc4419f60d1\nparent 2a7d5599706f127c1ebe6e5f992f9245d7f09b8a\nauthor Michael Goulet <michael@errs.io> 1672795166 -0800\ncommitter GitHub <noreply@github.com> 1672795166 -0800\n\nRollup merge of #106157 - LeSeulArtichaut:106126-thir-unsafeck-good-path-bug-2, r=compiler-errors\n\nDon't trim path for `unsafe_op_in_unsafe_fn` lints\n\nFixes #106126, alternative to #106127.\nr? `@ghost` for now.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc5247bf297e3939437adb6f932775bdfa9cf458", "html_url": "https://github.com/rust-lang/rust/commit/dc5247bf297e3939437adb6f932775bdfa9cf458", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc5247bf297e3939437adb6f932775bdfa9cf458/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6b0f4707bcda7b57279f9534a999dc4419f60d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6b0f4707bcda7b57279f9534a999dc4419f60d1", "html_url": "https://github.com/rust-lang/rust/commit/f6b0f4707bcda7b57279f9534a999dc4419f60d1"}, {"sha": "2a7d5599706f127c1ebe6e5f992f9245d7f09b8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7d5599706f127c1ebe6e5f992f9245d7f09b8a", "html_url": "https://github.com/rust-lang/rust/commit/2a7d5599706f127c1ebe6e5f992f9245d7f09b8a"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "03a7f2d70faebb1127bcf952ce28cab88b633923", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dc5247bf297e3939437adb6f932775bdfa9cf458/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5247bf297e3939437adb6f932775bdfa9cf458/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=dc5247bf297e3939437adb6f932775bdfa9cf458", "patch": "@@ -5,6 +5,7 @@ use rustc_middle::thir::visit::{self, Visitor};\n use rustc_hir as hir;\n use rustc_middle::mir::BorrowKind;\n use rustc_middle::thir::*;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt};\n use rustc_session::lint::builtin::{UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n use rustc_session::lint::Level;\n@@ -524,17 +525,19 @@ impl UnsafeOpKind {\n         hir_id: hir::HirId,\n         span: Span,\n     ) {\n+        // FIXME: ideally we would want to trim the def paths, but this is not\n+        // feasible with the current lint emission API (see issue #106126).\n         match self {\n-            CallToUnsafeFunction(did) if did.is_some() => tcx.emit_spanned_lint(\n+            CallToUnsafeFunction(Some(did)) => tcx.emit_spanned_lint(\n                 UNSAFE_OP_IN_UNSAFE_FN,\n                 hir_id,\n                 span,\n                 UnsafeOpInUnsafeFnCallToUnsafeFunctionRequiresUnsafe {\n                     span,\n-                    function: &tcx.def_path_str(did.unwrap()),\n+                    function: &with_no_trimmed_paths!(tcx.def_path_str(*did)),\n                 },\n             ),\n-            CallToUnsafeFunction(..) => tcx.emit_spanned_lint(\n+            CallToUnsafeFunction(None) => tcx.emit_spanned_lint(\n                 UNSAFE_OP_IN_UNSAFE_FN,\n                 hir_id,\n                 span,\n@@ -594,7 +597,7 @@ impl UnsafeOpKind {\n                 span,\n                 UnsafeOpInUnsafeFnCallToFunctionWithRequiresUnsafe {\n                     span,\n-                    function: &tcx.def_path_str(*did),\n+                    function: &with_no_trimmed_paths!(tcx.def_path_str(*did)),\n                 },\n             ),\n         }\n@@ -607,24 +610,24 @@ impl UnsafeOpKind {\n         unsafe_op_in_unsafe_fn_allowed: bool,\n     ) {\n         match self {\n-            CallToUnsafeFunction(did) if did.is_some() && unsafe_op_in_unsafe_fn_allowed => {\n+            CallToUnsafeFunction(Some(did)) if unsafe_op_in_unsafe_fn_allowed => {\n                 tcx.sess.emit_err(CallToUnsafeFunctionRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n                     span,\n-                    function: &tcx.def_path_str(did.unwrap()),\n+                    function: &tcx.def_path_str(*did),\n                 });\n             }\n-            CallToUnsafeFunction(did) if did.is_some() => {\n+            CallToUnsafeFunction(Some(did)) => {\n                 tcx.sess.emit_err(CallToUnsafeFunctionRequiresUnsafe {\n                     span,\n-                    function: &tcx.def_path_str(did.unwrap()),\n+                    function: &tcx.def_path_str(*did),\n                 });\n             }\n-            CallToUnsafeFunction(..) if unsafe_op_in_unsafe_fn_allowed => {\n+            CallToUnsafeFunction(None) if unsafe_op_in_unsafe_fn_allowed => {\n                 tcx.sess.emit_err(\n                     CallToUnsafeFunctionRequiresUnsafeNamelessUnsafeOpInUnsafeFnAllowed { span },\n                 );\n             }\n-            CallToUnsafeFunction(..) => {\n+            CallToUnsafeFunction(None) => {\n                 tcx.sess.emit_err(CallToUnsafeFunctionRequiresUnsafeNameless { span });\n             }\n             UseOfInlineAssembly if unsafe_op_in_unsafe_fn_allowed => {"}, {"sha": "091a3edb756ada56f2667ee3dbf0c04e8e25d34c", "filename": "src/test/ui/unsafe/auxiliary/issue-106126.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc5247bf297e3939437adb6f932775bdfa9cf458/src%2Ftest%2Fui%2Funsafe%2Fauxiliary%2Fissue-106126.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5247bf297e3939437adb6f932775bdfa9cf458/src%2Ftest%2Fui%2Funsafe%2Fauxiliary%2Fissue-106126.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fauxiliary%2Fissue-106126.rs?ref=dc5247bf297e3939437adb6f932775bdfa9cf458", "patch": "@@ -0,0 +1,9 @@\n+#[macro_export]\n+macro_rules! foo {\n+    () => {\n+        unsafe fn __unsf() {}\n+        unsafe fn __foo() {\n+            __unsf();\n+        }\n+    };\n+}"}, {"sha": "93f478ee358023ba68e1f8c08125e909144fda51", "filename": "src/test/ui/unsafe/issue-106126-good-path-bug.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc5247bf297e3939437adb6f932775bdfa9cf458/src%2Ftest%2Fui%2Funsafe%2Fissue-106126-good-path-bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5247bf297e3939437adb6f932775bdfa9cf458/src%2Ftest%2Fui%2Funsafe%2Fissue-106126-good-path-bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-106126-good-path-bug.rs?ref=dc5247bf297e3939437adb6f932775bdfa9cf458", "patch": "@@ -0,0 +1,12 @@\n+// Regression test for #106126.\n+// check-pass\n+// aux-build:issue-106126.rs\n+\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n+#[macro_use]\n+extern crate issue_106126;\n+\n+foo!();\n+\n+fn main() {}"}]}