{"sha": "baa4fa09ef21716d9f31c1bf280fd5af6e0b3842", "node_id": "C_kwDOAAsO6NoAKGJhYTRmYTA5ZWYyMTcxNmQ5ZjMxYzFiZjI4MGZkNWFmNmUwYjM4NDI", "commit": {"author": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-04-23T11:45:47Z"}, "committer": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-04-23T12:21:21Z"}, "message": "Add fallback for return type", "tree": {"sha": "d00a8b496ee7abe2dd9002808de3663da2bf978c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d00a8b496ee7abe2dd9002808de3663da2bf978c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baa4fa09ef21716d9f31c1bf280fd5af6e0b3842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baa4fa09ef21716d9f31c1bf280fd5af6e0b3842", "html_url": "https://github.com/rust-lang/rust/commit/baa4fa09ef21716d9f31c1bf280fd5af6e0b3842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baa4fa09ef21716d9f31c1bf280fd5af6e0b3842/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fae9049ccd8dc03503d70b956fd7e6a41a1716f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fae9049ccd8dc03503d70b956fd7e6a41a1716f2", "html_url": "https://github.com/rust-lang/rust/commit/fae9049ccd8dc03503d70b956fd7e6a41a1716f2"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "4eca69033a67fddccf180b2106707b9ed12910b3", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/baa4fa09ef21716d9f31c1bf280fd5af6e0b3842/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa4fa09ef21716d9f31c1bf280fd5af6e0b3842/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=baa4fa09ef21716d9f31c1bf280fd5af6e0b3842", "patch": "@@ -149,9 +149,9 @@ fn signature_help_for_call(\n             }\n             // APITs (argument position `impl Trait`s) are inferred as {unknown} as the user is\n             // in the middle of entering call arguments.\n-            // In that case, fall back to render definition of the argument.\n+            // In that case, fall back to render definitions of the respective parameters.\n             // This is overly conservative: we do not substitute known type vars\n-            // (see FIXME in tests::impl_trait).\n+            // (see FIXME in tests::impl_trait) and falling back on any unknowns.\n             match (ty.contains_unknown(), fn_params.as_deref()) {\n                 (true, Some(fn_params)) => format_to!(buf, \"{}\", fn_params[idx].ty().display(db)),\n                 _ => format_to!(buf, \"{}\", ty.display(db)),\n@@ -161,12 +161,17 @@ fn signature_help_for_call(\n     }\n     res.signature.push(')');\n \n+    let mut render = |ret_type: hir::Type| {\n+        if !ret_type.is_unit() {\n+            format_to!(res.signature, \" -> {}\", ret_type.display(db));\n+        }\n+    };\n     match callable.kind() {\n+        hir::CallableKind::Function(func) if callable.return_type().contains_unknown() => {\n+            render(func.ret_type(db))\n+        }\n         hir::CallableKind::Function(_) | hir::CallableKind::Closure => {\n-            let ret_type = callable.return_type();\n-            if !ret_type.is_unit() {\n-                format_to!(res.signature, \" -> {}\", ret_type.display(db));\n-            }\n+            render(callable.return_type())\n         }\n         hir::CallableKind::TupleStruct(_) | hir::CallableKind::TupleEnumVariant(_) => {}\n     }\n@@ -444,7 +449,7 @@ fn foo<T>() -> T where T: Copy + Display {}\n fn bar() { foo($0); }\n \"#,\n             expect![[r#\"\n-                fn foo() -> {unknown}\n+                fn foo() -> T\n             \"#]],\n         );\n     }"}]}