{"sha": "dca00ab85ec970432ebaf1cf59b0e795db2d65cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYTAwYWI4NWVjOTcwNDMyZWJhZjFjZjU5YjBlNzk1ZGIyZDY1Y2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-27T11:50:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-27T12:36:05Z"}, "message": "introduce platform-specific module hierarchy for dlsym (similar to foreign_items)", "tree": {"sha": "e503f7585f32a0a4a5a3d6f78a12dfde67a62a6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e503f7585f32a0a4a5a3d6f78a12dfde67a62a6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dca00ab85ec970432ebaf1cf59b0e795db2d65cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dca00ab85ec970432ebaf1cf59b0e795db2d65cd", "html_url": "https://github.com/rust-lang/rust/commit/dca00ab85ec970432ebaf1cf59b0e795db2d65cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bde2eb4a442ec5c02703cbaa2807a6e2f59ec70d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bde2eb4a442ec5c02703cbaa2807a6e2f59ec70d", "html_url": "https://github.com/rust-lang/rust/commit/bde2eb4a442ec5c02703cbaa2807a6e2f59ec70d"}], "stats": {"total": 232, "additions": 194, "deletions": 38}, "files": [{"sha": "9b15cb9ac9a31a96bc1b550101dc91d948102a39", "filename": "src/shims/dlsym.rs", "status": "modified", "additions": 10, "deletions": 33, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=dca00ab85ec970432ebaf1cf59b0e795db2d65cd", "patch": "@@ -1,34 +1,24 @@\n use rustc_middle::mir;\n \n use crate::*;\n-use helpers::check_arg_count;\n+use shims::posix::dlsym as posix;\n+use shims::windows::dlsym as windows;\n \n #[derive(Debug, Copy, Clone)]\n+#[allow(non_camel_case_types)]\n pub enum Dlsym {\n-    GetEntropy,\n+    Posix(posix::Dlsym),\n+    Windows(windows::Dlsym),\n }\n \n impl Dlsym {\n     // Returns an error for unsupported symbols, and None if this symbol\n     // should become a NULL pointer (pretend it does not exist).\n     pub fn from_str(name: &[u8], target_os: &str) -> InterpResult<'static, Option<Dlsym>> {\n-        use self::Dlsym::*;\n-        let name = String::from_utf8_lossy(name);\n+        let name = &*String::from_utf8_lossy(name);\n         Ok(match target_os {\n-            \"linux\" => match &*name {\n-                \"__pthread_get_minstack\" => None,\n-                _ => throw_unsup_format!(\"unsupported Linux dlsym: {}\", name),\n-            }\n-            \"macos\" => match &*name {\n-                \"getentropy\" => Some(GetEntropy),\n-                _ => throw_unsup_format!(\"unsupported macOS dlsym: {}\", name),\n-            }\n-            \"windows\" => match &*name {\n-                \"SetThreadStackGuarantee\" => None,\n-                \"AcquireSRWLockExclusive\" => None,\n-                \"GetSystemTimePreciseAsFileTime\" => None,\n-                _ => throw_unsup_format!(\"unsupported Windows dlsym: {}\", name),\n-            }\n+            \"linux\" | \"macos\" => posix::Dlsym::from_str(name, target_os)?.map(Dlsym::Posix),\n+            \"windows\" => windows::Dlsym::from_str(name)?.map(Dlsym::Windows),\n             os => bug!(\"dlsym not implemented for target_os {}\", os),\n         })\n     }\n@@ -42,23 +32,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n     ) -> InterpResult<'tcx> {\n-        use self::Dlsym::*;\n-\n         let this = self.eval_context_mut();\n-        let (dest, ret) = ret.expect(\"we don't support any diverging dlsym\");\n-\n         match dlsym {\n-            GetEntropy => {\n-                let &[ptr, len] = check_arg_count(args)?;\n-                let ptr = this.read_scalar(ptr)?.not_undef()?;\n-                let len = this.read_scalar(len)?.to_machine_usize(this)?;\n-                this.gen_random(ptr, len)?;\n-                this.write_null(dest)?;\n-            }\n+            Dlsym::Posix(dlsym) => posix::EvalContextExt::call_dlsym(this, dlsym, args, ret),\n+            Dlsym::Windows(dlsym) => windows::EvalContextExt::call_dlsym(this, dlsym, args, ret),\n         }\n-\n-        this.dump_place(*dest);\n-        this.go_to_block(ret);\n-        Ok(())\n     }\n }"}, {"sha": "52d9844bed5113ef3aa4356b8ad2f294e9aad49c", "filename": "src/shims/posix/dlsym.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fposix%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fposix%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fdlsym.rs?ref=dca00ab85ec970432ebaf1cf59b0e795db2d65cd", "patch": "@@ -0,0 +1,39 @@\n+use rustc_middle::mir;\n+\n+use crate::*;\n+use shims::posix::linux::dlsym as linux;\n+use shims::posix::macos::dlsym as macos;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub enum Dlsym {\n+    Linux(linux::Dlsym),\n+    MacOs(macos::Dlsym),\n+}\n+\n+impl Dlsym {\n+    // Returns an error for unsupported symbols, and None if this symbol\n+    // should become a NULL pointer (pretend it does not exist).\n+    pub fn from_str(name: &str, target_os: &str) -> InterpResult<'static, Option<Dlsym>> {\n+        Ok(match target_os {\n+            \"linux\" => linux::Dlsym::from_str(name)?.map(Dlsym::Linux),\n+            \"macos\" => macos::Dlsym::from_str(name)?.map(Dlsym::MacOs),\n+            _ => unreachable!(),\n+        })\n+    }\n+}\n+\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn call_dlsym(\n+        &mut self,\n+        dlsym: Dlsym,\n+        args: &[OpTy<'tcx, Tag>],\n+        ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        match dlsym {\n+            Dlsym::Linux(dlsym) => linux::EvalContextExt::call_dlsym(this, dlsym, args, ret),\n+            Dlsym::MacOs(dlsym) => macos::EvalContextExt::call_dlsym(this, dlsym, args, ret),\n+        }\n+    }\n+}"}, {"sha": "9be300edf495a74acf9b790123a9c1f669cc10ba", "filename": "src/shims/posix/linux/dlsym.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fposix%2Flinux%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fposix%2Flinux%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fdlsym.rs?ref=dca00ab85ec970432ebaf1cf59b0e795db2d65cd", "patch": "@@ -0,0 +1,34 @@\n+use rustc_middle::mir;\n+\n+use crate::*;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub enum Dlsym {\n+}\n+\n+impl Dlsym {\n+    // Returns an error for unsupported symbols, and None if this symbol\n+    // should become a NULL pointer (pretend it does not exist).\n+    pub fn from_str(name: &str) -> InterpResult<'static, Option<Dlsym>> {\n+        Ok(match &*name {\n+            \"__pthread_get_minstack\" => None,\n+            _ => throw_unsup_format!(\"unsupported Linux dlsym: {}\", name),\n+        })\n+    }\n+}\n+\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn call_dlsym(\n+        &mut self,\n+        dlsym: Dlsym,\n+        _args: &[OpTy<'tcx, Tag>],\n+        ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        let (_dest, _ret) = ret.expect(\"we don't support any diverging dlsym\");\n+        assert!(this.tcx.sess.target.target.target_os == \"linux\");\n+\n+        match dlsym {}\n+    }\n+}"}, {"sha": "cadd6a8ea384e0c142dcbb268fd9c8cfff39229c", "filename": "src/shims/posix/linux/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fposix%2Flinux%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fposix%2Flinux%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fmod.rs?ref=dca00ab85ec970432ebaf1cf59b0e795db2d65cd", "patch": "@@ -1 +1,2 @@\n pub mod foreign_items;\n+pub mod dlsym;"}, {"sha": "8256c10b0d3973ce5b5c38f4ff4542355eab5b3a", "filename": "src/shims/posix/macos/dlsym.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fposix%2Fmacos%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fposix%2Fmacos%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fdlsym.rs?ref=dca00ab85ec970432ebaf1cf59b0e795db2d65cd", "patch": "@@ -0,0 +1,49 @@\n+use rustc_middle::mir;\n+\n+use crate::*;\n+use helpers::check_arg_count;\n+\n+#[derive(Debug, Copy, Clone)]\n+#[allow(non_camel_case_types)]\n+pub enum Dlsym {\n+    getentropy,\n+}\n+\n+impl Dlsym {\n+    // Returns an error for unsupported symbols, and None if this symbol\n+    // should become a NULL pointer (pretend it does not exist).\n+    pub fn from_str(name: &str) -> InterpResult<'static, Option<Dlsym>> {\n+        Ok(match name {\n+            \"getentropy\" => Some(Dlsym::getentropy),\n+            _ => throw_unsup_format!(\"unsupported macOS dlsym: {}\", name),\n+        })\n+    }\n+}\n+\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn call_dlsym(\n+        &mut self,\n+        dlsym: Dlsym,\n+        args: &[OpTy<'tcx, Tag>],\n+        ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        let (dest, ret) = ret.expect(\"we don't support any diverging dlsym\");\n+        assert!(this.tcx.sess.target.target.target_os == \"macos\");\n+\n+        match dlsym {\n+            Dlsym::getentropy => {\n+                let &[ptr, len] = check_arg_count(args)?;\n+                let ptr = this.read_scalar(ptr)?.not_undef()?;\n+                let len = this.read_scalar(len)?.to_machine_usize(this)?;\n+                this.gen_random(ptr, len)?;\n+                this.write_null(dest)?;\n+            }\n+        }\n+\n+        this.dump_place(*dest);\n+        this.go_to_block(ret);\n+        Ok(())\n+    }\n+}"}, {"sha": "cadd6a8ea384e0c142dcbb268fd9c8cfff39229c", "filename": "src/shims/posix/macos/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fposix%2Fmacos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fposix%2Fmacos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fmod.rs?ref=dca00ab85ec970432ebaf1cf59b0e795db2d65cd", "patch": "@@ -1 +1,2 @@\n pub mod foreign_items;\n+pub mod dlsym;"}, {"sha": "9916c65be0fb852c9c068da148317a632e7126bd", "filename": "src/shims/posix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fposix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fposix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmod.rs?ref=dca00ab85ec970432ebaf1cf59b0e795db2d65cd", "patch": "@@ -1,4 +1,5 @@\n pub mod foreign_items;\n+pub mod dlsym;\n \n mod fs;\n mod sync;"}, {"sha": "34ed6ca150e01a4f2be7605ebb1a4de6518f08d2", "filename": "src/shims/windows/dlsym.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=dca00ab85ec970432ebaf1cf59b0e795db2d65cd", "patch": "@@ -0,0 +1,55 @@\n+use rustc_middle::mir;\n+\n+use crate::*;\n+use helpers::check_arg_count;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub enum Dlsym {\n+    AcquireSRWLockExclusive,\n+    AcquireSRWLockShared,\n+}\n+\n+impl Dlsym {\n+    // Returns an error for unsupported symbols, and None if this symbol\n+    // should become a NULL pointer (pretend it does not exist).\n+    pub fn from_str(name: &str) -> InterpResult<'static, Option<Dlsym>> {\n+        Ok(match name {\n+            \"AcquireSRWLockExclusive\" => Some(Dlsym::AcquireSRWLockExclusive),\n+            \"AcquireSRWLockShared\" => Some(Dlsym::AcquireSRWLockShared),\n+            \"SetThreadStackGuarantee\" => None,\n+            \"GetSystemTimePreciseAsFileTime\" => None,\n+            _ => throw_unsup_format!(\"unsupported Windows dlsym: {}\", name),\n+        })\n+    }\n+}\n+\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn call_dlsym(\n+        &mut self,\n+        dlsym: Dlsym,\n+        args: &[OpTy<'tcx, Tag>],\n+        ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        let (dest, ret) = ret.expect(\"we don't support any diverging dlsym\");\n+        assert!(this.tcx.sess.target.target.target_os == \"windows\");\n+\n+        match dlsym {\n+            Dlsym::AcquireSRWLockExclusive => {\n+                let &[ptr] = check_arg_count(args)?;\n+                let lock = this.deref_operand(ptr)?; // points to ptr-sized data\n+                throw_unsup_format!(\"AcquireSRWLockExclusive is not actually implemented\");\n+            }\n+            Dlsym::AcquireSRWLockShared => {\n+                let &[ptr] = check_arg_count(args)?;\n+                let lock = this.deref_operand(ptr)?; // points to ptr-sized data\n+                throw_unsup_format!(\"AcquireSRWLockExclusive is not actually implemented\");\n+            }\n+        }\n+\n+        this.dump_place(*dest);\n+        this.go_to_block(ret);\n+        Ok(())\n+    }\n+}"}, {"sha": "04f9ace8e799b92ec4cce160ca007eb8f4c36c81", "filename": "src/shims/windows/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fmod.rs?ref=dca00ab85ec970432ebaf1cf59b0e795db2d65cd", "patch": "@@ -1 +1,4 @@\n pub mod foreign_items;\n+pub mod dlsym;\n+\n+mod sync;"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/shims/windows/sync.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fwindows%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/src%2Fshims%2Fwindows%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fsync.rs?ref=dca00ab85ec970432ebaf1cf59b0e795db2d65cd"}, {"sha": "749db855e296f13f10ebf8c1b7b7dbbe86ab0cb6", "filename": "tests/run-pass/concurrency/sync_singlethread.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/tests%2Frun-pass%2Fconcurrency%2Fsync_singlethread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca00ab85ec970432ebaf1cf59b0e795db2d65cd/tests%2Frun-pass%2Fconcurrency%2Fsync_singlethread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsync_singlethread.rs?ref=dca00ab85ec970432ebaf1cf59b0e795db2d65cd", "patch": "@@ -6,10 +6,7 @@ use std::hint;\n \n fn main() {\n     test_mutex_stdlib();\n-    #[cfg(not(target_os = \"windows\"))] // TODO: implement RwLock on Windows\n-    {\n-        test_rwlock_stdlib();\n-    }\n+    test_rwlock_stdlib();\n     test_spin_loop_hint();\n     test_thread_yield_now();\n }\n@@ -24,7 +21,6 @@ fn test_mutex_stdlib() {\n     drop(m);\n }\n \n-#[cfg(not(target_os = \"windows\"))]\n fn test_rwlock_stdlib() {\n     use std::sync::RwLock;\n     let rw = RwLock::new(0);"}]}