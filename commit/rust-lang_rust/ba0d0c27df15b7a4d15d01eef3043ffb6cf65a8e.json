{"sha": "ba0d0c27df15b7a4d15d01eef3043ffb6cf65a8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMGQwYzI3ZGYxNWI3YTRkMTVkMDFlZWYzMDQzZmZiNmNmNjVhOGU=", "commit": {"author": {"name": "Michal 'vorner' Vaner", "email": "vorner@vorner.cz", "date": "2020-05-17T06:21:24Z"}, "committer": {"name": "Michal 'vorner' Vaner", "email": "vorner@vorner.cz", "date": "2020-05-17T06:21:24Z"}, "message": "Stabilization of weak-into-raw\n\nStabilizes #60728.", "tree": {"sha": "ccaa3e5dd724b0d323a61332b2970a4ba7ce2c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccaa3e5dd724b0d323a61332b2970a4ba7ce2c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba0d0c27df15b7a4d15d01eef3043ffb6cf65a8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEQ8wy/3jh6tM0kr/e9wDQwBnkxm8FAl7A2I0ACgkQ9wDQwBnk\nxm96dhAAwd5FO58varuTMYIhdqOSEeF8ru5GatNFBj8gv8GYZOmlEIUz+QsWmbJz\n3TYjAOEJXWb0szRR3f1I2moomtUwKUZiyjfXmpz94n8RLqInhoh9PWeUZD2Of4aT\nOBYgnZnLEwFHrbleMJiO7yyoAddRrkxSqbsbZzWMJKi+zffIV1tHrRwHNP96QMnB\nGZtf2P4mZ4HIT4Qbz5fd8Fpgp7PY1L5KHb5gwdYFEPZMS5p1ZsounaLXWHourTwb\ndOrYKmwanjZH3i+/Q/g+KarTr0FNVXfZrNl5fbnKcNG9l6JQXYSkWxacctbI15YH\ntjmI/1hAd399KmcOp0o9sYzDbC77Cow064z8URLwmhN60e95pBM92zkvutmeQazJ\nAyKk4/xGsm/oV/Az8LsqqpjgZsAIyP/LrVduw7S6lMMGtF6IHSGWLtsujUErqIFr\nP+cNeYkBVsT9FGw11w84CQ19hv0ycTAXJ/t7zSqp3kWu0mdFA6n7Ix1gW98ql/9q\nD6WiTTTbSkCaZfFOJrEXKut6BEeaH9mEABjltmRSKlBVAzug+rU+m+f2gSm2Le7j\nilRWQraZMn83+DiuICGg6d2lioAMQAmxCBnE/bUPsYq7/fSN6QTYPitBXj9+k1nO\nHOxaMhoZQezhP0Q1m54poBe3q34EGdAkav0pql0aT8ra4987QQQ=\n=lad1\n-----END PGP SIGNATURE-----", "payload": "tree ccaa3e5dd724b0d323a61332b2970a4ba7ce2c6d\nparent 6163394e1ff98c53abc9d27f68b5608faa8cd9b6\nauthor Michal 'vorner' Vaner <vorner@vorner.cz> 1589696484 +0200\ncommitter Michal 'vorner' Vaner <vorner@vorner.cz> 1589696484 +0200\n\nStabilization of weak-into-raw\n\nStabilizes #60728.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0d0c27df15b7a4d15d01eef3043ffb6cf65a8e", "html_url": "https://github.com/rust-lang/rust/commit/ba0d0c27df15b7a4d15d01eef3043ffb6cf65a8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba0d0c27df15b7a4d15d01eef3043ffb6cf65a8e/comments", "author": {"login": "vorner", "id": 11783500, "node_id": "MDQ6VXNlcjExNzgzNTAw", "avatar_url": "https://avatars.githubusercontent.com/u/11783500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vorner", "html_url": "https://github.com/vorner", "followers_url": "https://api.github.com/users/vorner/followers", "following_url": "https://api.github.com/users/vorner/following{/other_user}", "gists_url": "https://api.github.com/users/vorner/gists{/gist_id}", "starred_url": "https://api.github.com/users/vorner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vorner/subscriptions", "organizations_url": "https://api.github.com/users/vorner/orgs", "repos_url": "https://api.github.com/users/vorner/repos", "events_url": "https://api.github.com/users/vorner/events{/privacy}", "received_events_url": "https://api.github.com/users/vorner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vorner", "id": 11783500, "node_id": "MDQ6VXNlcjExNzgzNTAw", "avatar_url": "https://avatars.githubusercontent.com/u/11783500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vorner", "html_url": "https://github.com/vorner", "followers_url": "https://api.github.com/users/vorner/followers", "following_url": "https://api.github.com/users/vorner/following{/other_user}", "gists_url": "https://api.github.com/users/vorner/gists{/gist_id}", "starred_url": "https://api.github.com/users/vorner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vorner/subscriptions", "organizations_url": "https://api.github.com/users/vorner/orgs", "repos_url": "https://api.github.com/users/vorner/repos", "events_url": "https://api.github.com/users/vorner/events{/privacy}", "received_events_url": "https://api.github.com/users/vorner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6163394e1ff98c53abc9d27f68b5608faa8cd9b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6163394e1ff98c53abc9d27f68b5608faa8cd9b6", "html_url": "https://github.com/rust-lang/rust/commit/6163394e1ff98c53abc9d27f68b5608faa8cd9b6"}], "stats": {"total": 32, "additions": 8, "deletions": 24}, "files": [{"sha": "f8db9095bec918cd0629294860a3a99660384e94", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba0d0c27df15b7a4d15d01eef3043ffb6cf65a8e/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0d0c27df15b7a4d15d01eef3043ffb6cf65a8e/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=ba0d0c27df15b7a4d15d01eef3043ffb6cf65a8e", "patch": "@@ -579,8 +579,6 @@ impl<T: ?Sized> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(weak_into_raw)]\n-    ///\n     /// use std::rc::Rc;\n     ///\n     /// let x = Rc::new(\"hello\".to_owned());\n@@ -589,7 +587,7 @@ impl<T: ?Sized> Rc<T> {\n     /// assert_eq!(x_ptr, Rc::as_ptr(&y));\n     /// assert_eq!(unsafe { &*x_ptr }, \"hello\");\n     /// ```\n-    #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n+    #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn as_ptr(this: &Self) -> *const T {\n         let ptr: *mut RcBox<T> = NonNull::as_ptr(this.ptr);\n         let fake_ptr = ptr as *mut T;\n@@ -1665,8 +1663,6 @@ impl<T> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(weak_into_raw)]\n-    ///\n     /// use std::rc::Rc;\n     /// use std::ptr;\n     ///\n@@ -1684,7 +1680,7 @@ impl<T> Weak<T> {\n     /// ```\n     ///\n     /// [`null`]: ../../std/ptr/fn.null.html\n-    #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n+    #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn as_ptr(&self) -> *const T {\n         let offset = data_offset_sized::<T>();\n         let ptr = self.ptr.cast::<u8>().as_ptr().wrapping_offset(offset);\n@@ -1702,8 +1698,6 @@ impl<T> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(weak_into_raw)]\n-    ///\n     /// use std::rc::{Rc, Weak};\n     ///\n     /// let strong = Rc::new(\"hello\".to_owned());\n@@ -1719,7 +1713,7 @@ impl<T> Weak<T> {\n     ///\n     /// [`from_raw`]: struct.Weak.html#method.from_raw\n     /// [`as_ptr`]: struct.Weak.html#method.as_ptr\n-    #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n+    #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn into_raw(self) -> *const T {\n         let result = self.as_ptr();\n         mem::forget(self);\n@@ -1746,8 +1740,6 @@ impl<T> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(weak_into_raw)]\n-    ///\n     /// use std::rc::{Rc, Weak};\n     ///\n     /// let strong = Rc::new(\"hello\".to_owned());\n@@ -1772,7 +1764,7 @@ impl<T> Weak<T> {\n     /// [`Weak`]: struct.Weak.html\n     /// [`new`]: struct.Weak.html#method.new\n     /// [`forget`]: ../../std/mem/fn.forget.html\n-    #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n+    #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n         if ptr.is_null() {\n             Self::new()"}, {"sha": "ae4cf6cb5f442bd183496a36f9dc3f4f001faee1", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba0d0c27df15b7a4d15d01eef3043ffb6cf65a8e/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0d0c27df15b7a4d15d01eef3043ffb6cf65a8e/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=ba0d0c27df15b7a4d15d01eef3043ffb6cf65a8e", "patch": "@@ -578,8 +578,6 @@ impl<T: ?Sized> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(weak_into_raw)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// let x = Arc::new(\"hello\".to_owned());\n@@ -588,7 +586,7 @@ impl<T: ?Sized> Arc<T> {\n     /// assert_eq!(x_ptr, Arc::as_ptr(&y));\n     /// assert_eq!(unsafe { &*x_ptr }, \"hello\");\n     /// ```\n-    #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n+    #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn as_ptr(this: &Self) -> *const T {\n         let ptr: *mut ArcInner<T> = NonNull::as_ptr(this.ptr);\n         let fake_ptr = ptr as *mut T;\n@@ -1446,8 +1444,6 @@ impl<T> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(weak_into_raw)]\n-    ///\n     /// use std::sync::Arc;\n     /// use std::ptr;\n     ///\n@@ -1465,7 +1461,7 @@ impl<T> Weak<T> {\n     /// ```\n     ///\n     /// [`null`]: ../../std/ptr/fn.null.html\n-    #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n+    #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn as_ptr(&self) -> *const T {\n         let offset = data_offset_sized::<T>();\n         let ptr = self.ptr.cast::<u8>().as_ptr().wrapping_offset(offset);\n@@ -1483,8 +1479,6 @@ impl<T> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(weak_into_raw)]\n-    ///\n     /// use std::sync::{Arc, Weak};\n     ///\n     /// let strong = Arc::new(\"hello\".to_owned());\n@@ -1500,7 +1494,7 @@ impl<T> Weak<T> {\n     ///\n     /// [`from_raw`]: struct.Weak.html#method.from_raw\n     /// [`as_ptr`]: struct.Weak.html#method.as_ptr\n-    #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n+    #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn into_raw(self) -> *const T {\n         let result = self.as_ptr();\n         mem::forget(self);\n@@ -1528,8 +1522,6 @@ impl<T> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(weak_into_raw)]\n-    ///\n     /// use std::sync::{Arc, Weak};\n     ///\n     /// let strong = Arc::new(\"hello\".to_owned());\n@@ -1554,7 +1546,7 @@ impl<T> Weak<T> {\n     /// [`Weak`]: struct.Weak.html\n     /// [`Arc`]: struct.Arc.html\n     /// [`forget`]: ../../std/mem/fn.forget.html\n-    #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n+    #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n         if ptr.is_null() {\n             Self::new()"}]}