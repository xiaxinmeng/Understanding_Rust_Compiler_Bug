{"sha": "72a52522ca2da85006553c62134bf98299525162", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYTUyNTIyY2EyZGE4NTAwNjU1M2M2MjEzNGJmOTgyOTk1MjUxNjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-10T09:56:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-10T09:56:18Z"}, "message": "auto merge of #11437 : sfackler/rust/mem-eof, r=alexcrichton\n\nIt's easy to figure out and useful as a sanity check sometimes.", "tree": {"sha": "5806143a495b5a648c1b972f810e47dd09dce6b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5806143a495b5a648c1b972f810e47dd09dce6b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72a52522ca2da85006553c62134bf98299525162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72a52522ca2da85006553c62134bf98299525162", "html_url": "https://github.com/rust-lang/rust/commit/72a52522ca2da85006553c62134bf98299525162", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72a52522ca2da85006553c62134bf98299525162/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "587d0f5a3252355c8dd97eec9691e5b60af1cc2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/587d0f5a3252355c8dd97eec9691e5b60af1cc2a", "html_url": "https://github.com/rust-lang/rust/commit/587d0f5a3252355c8dd97eec9691e5b60af1cc2a"}, {"sha": "52e06c663cb25308c1784b2263b93f4af32107c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/52e06c663cb25308c1784b2263b93f4af32107c2", "html_url": "https://github.com/rust-lang/rust/commit/52e06c663cb25308c1784b2263b93f4af32107c2"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "f036131d211a6952368f42b9b9bb29761f63c478", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/72a52522ca2da85006553c62134bf98299525162/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a52522ca2da85006553c62134bf98299525162/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=72a52522ca2da85006553c62134bf98299525162", "patch": "@@ -111,6 +111,11 @@ impl MemReader {\n         }\n     }\n \n+    /// Tests whether this reader has read all bytes in its buffer.\n+    ///\n+    /// If `true`, then this will no longer return bytes from `read`.\n+    pub fn eof(&self) -> bool { self.pos == self.buf.len() }\n+\n     /// Acquires an immutable reference to the underlying buffer of this\n     /// `MemReader`.\n     ///\n@@ -124,7 +129,7 @@ impl MemReader {\n \n impl Reader for MemReader {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n-        if self.pos == self.buf.len() { return None }\n+        if self.eof() { return None }\n \n         let write_len = min(buf.len(), self.buf.len() - self.pos);\n         {\n@@ -216,11 +221,16 @@ impl<'a> BufReader<'a> {\n             pos: 0\n         }\n     }\n+\n+    /// Tests whether this reader has read all bytes in its buffer.\n+    ///\n+    /// If `true`, then this will no longer return bytes from `read`.\n+    pub fn eof(&self) -> bool { self.pos == self.buf.len() }\n }\n \n impl<'a> Reader for BufReader<'a> {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n-        if self.pos == self.buf.len() { return None }\n+        if self.eof() { return None }\n \n         let write_len = min(buf.len(), self.buf.len() - self.pos);\n         {"}]}