{"sha": "52dd59ed2154f4158ae37e6994b678a6249a7bb0", "node_id": "C_kwDOAAsO6NoAKDUyZGQ1OWVkMjE1NGY0MTU4YWUzN2U2OTk0YjY3OGE2MjQ5YTdiYjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-14T14:47:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-14T14:47:20Z"}, "message": "Auto merge of #93298 - lcnr:issue-92113, r=cjgillot\n\nmake `find_similar_impl_candidates` even fuzzier\n\ncontinues the good work of `@BGR360` in #92223. I might have overshot a bit and we're now slightly too fuzzy :sweat_smile:\n\nwith this we can now also simplify `simplify_type`, which is nice :3", "tree": {"sha": "2594af77b745817febce8b91a847276a43cceb07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2594af77b745817febce8b91a847276a43cceb07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52dd59ed2154f4158ae37e6994b678a6249a7bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52dd59ed2154f4158ae37e6994b678a6249a7bb0", "html_url": "https://github.com/rust-lang/rust/commit/52dd59ed2154f4158ae37e6994b678a6249a7bb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52dd59ed2154f4158ae37e6994b678a6249a7bb0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b321742c6c27494897a88cd5ac17ac20aa3469a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b321742c6c27494897a88cd5ac17ac20aa3469a1", "html_url": "https://github.com/rust-lang/rust/commit/b321742c6c27494897a88cd5ac17ac20aa3469a1"}, {"sha": "f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "html_url": "https://github.com/rust-lang/rust/commit/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945"}], "stats": {"total": 365, "additions": 212, "deletions": 153}, "files": [{"sha": "4d6b97eff24fe7100d077f8315e84b879ad3654c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::mir::interpret;\n use rustc_middle::thir;\n use rustc_middle::traits::specialization_graph;\n use rustc_middle::ty::codec::TyEncoder;\n-use rustc_middle::ty::fast_reject::{self, SimplifiedType, SimplifyParams, StripReferences};\n+use rustc_middle::ty::fast_reject::{self, SimplifiedType, SimplifyParams};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n use rustc_serialize::{opaque, Encodable, Encoder};\n@@ -2066,7 +2066,6 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplsVisitor<'tcx> {\n                         self.tcx,\n                         trait_ref.self_ty(),\n                         SimplifyParams::No,\n-                        StripReferences::No,\n                     );\n \n                     self.impls"}, {"sha": "983057bff95d6f0abb14e414f85c0bfaedad7c44", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -54,12 +54,6 @@ pub enum SimplifyParams {\n     No,\n }\n \n-#[derive(PartialEq, Eq, Debug, Clone, Copy)]\n-pub enum StripReferences {\n-    Yes,\n-    No,\n-}\n-\n /// Tries to simplify a type by only returning the outermost injective\u00b9 layer, if one exists.\n ///\n /// The idea is to get something simple that we can use to quickly decide if two types could unify,\n@@ -73,8 +67,6 @@ pub enum StripReferences {\n /// When using `SimplifyParams::Yes`, we still return a simplified type for params and projections\u00b2,\n /// the reasoning for this can be seen at the places doing this.\n ///\n-/// For diagnostics we strip references with `StripReferences::Yes`. This is currently the best\n-/// way to skip some unhelpful suggestions.\n ///\n /// \u00b9 meaning that if two outermost layers are different, then the whole types are also different.\n /// \u00b2 FIXME(@lcnr): this seems like it can actually end up being unsound with the way it's used during\n@@ -87,7 +79,6 @@ pub fn simplify_type(\n     tcx: TyCtxt<'_>,\n     ty: Ty<'_>,\n     can_simplify_params: SimplifyParams,\n-    strip_references: StripReferences,\n ) -> Option<SimplifiedType> {\n     match *ty.kind() {\n         ty::Bool => Some(BoolSimplifiedType),\n@@ -106,16 +97,7 @@ pub fn simplify_type(\n             }\n             _ => Some(MarkerTraitObjectSimplifiedType),\n         },\n-        ty::Ref(_, ty, mutbl) => {\n-            if strip_references == StripReferences::Yes {\n-                // For diagnostics, when recommending similar impls we want to\n-                // recommend impls even when there is a reference mismatch,\n-                // so we treat &T and T equivalently in that case.\n-                simplify_type(tcx, ty, can_simplify_params, strip_references)\n-            } else {\n-                Some(RefSimplifiedType(mutbl))\n-            }\n-        }\n+        ty::Ref(_, _, mutbl) => Some(RefSimplifiedType(mutbl)),\n         ty::FnDef(def_id, _) | ty::Closure(def_id, _) => Some(ClosureSimplifiedType(def_id)),\n         ty::Generator(def_id, _, _) => Some(GeneratorSimplifiedType(def_id)),\n         ty::GeneratorWitness(ref tys) => {"}, {"sha": "597f7dd95a211eb7f5eee85d603955ddb89986cf", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -1,5 +1,5 @@\n use crate::traits::specialization_graph;\n-use crate::ty::fast_reject::{self, SimplifiedType, SimplifyParams, StripReferences};\n+use crate::ty::fast_reject::{self, SimplifiedType, SimplifyParams};\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{Ident, Ty, TyCtxt};\n use rustc_hir as hir;\n@@ -150,9 +150,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self_ty: Ty<'tcx>,\n     ) -> impl Iterator<Item = DefId> + 'tcx {\n         let impls = self.trait_impls_of(def_id);\n-        if let Some(simp) =\n-            fast_reject::simplify_type(self, self_ty, SimplifyParams::No, StripReferences::No)\n-        {\n+        if let Some(simp) = fast_reject::simplify_type(self, self_ty, SimplifyParams::No) {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 return impls.iter().copied();\n             }\n@@ -189,9 +187,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // whose outer level is not a parameter or projection. Especially for things like\n         // `T: Clone` this is incredibly useful as we would otherwise look at all the impls\n         // of `Clone` for `Option<T>`, `Vec<T>`, `ConcreteType` and so on.\n-        if let Some(simp) =\n-            fast_reject::simplify_type(self, self_ty, SimplifyParams::Yes, StripReferences::No)\n-        {\n+        if let Some(simp) = fast_reject::simplify_type(self, self_ty, SimplifyParams::Yes) {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 for &impl_def_id in impls {\n                     if let result @ Some(_) = f(impl_def_id) {\n@@ -251,7 +247,7 @@ pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> Trait\n         }\n \n         if let Some(simplified_self_ty) =\n-            fast_reject::simplify_type(tcx, impl_self_ty, SimplifyParams::No, StripReferences::No)\n+            fast_reject::simplify_type(tcx, impl_self_ty, SimplifyParams::No)\n         {\n             impls.non_blanket_impls.entry(simplified_self_ty).or_default().push(impl_def_id);\n         } else {"}, {"sha": "ed1bf433c2c1518f4137773de38cb7b1841d6d06", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -15,7 +15,7 @@ use crate::traits::{\n };\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::traits::specialization_graph::OverlapMode;\n-use rustc_middle::ty::fast_reject::{self, SimplifyParams, StripReferences};\n+use rustc_middle::ty::fast_reject::{self, SimplifyParams};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -82,8 +82,8 @@ where\n         impl2_ref.iter().flat_map(|tref| tref.substs.types()),\n     )\n     .any(|(ty1, ty2)| {\n-        let t1 = fast_reject::simplify_type(tcx, ty1, SimplifyParams::No, StripReferences::No);\n-        let t2 = fast_reject::simplify_type(tcx, ty2, SimplifyParams::No, StripReferences::No);\n+        let t1 = fast_reject::simplify_type(tcx, ty1, SimplifyParams::No);\n+        let t2 = fast_reject::simplify_type(tcx, ty2, SimplifyParams::No);\n \n         if let (Some(t1), Some(t2)) = (t1, t2) {\n             // Simplified successfully"}, {"sha": "cd0a62af72f322f9426ffd483730a9ee1f3118cb", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 117, "deletions": 80, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -21,10 +21,9 @@ use rustc_hir::Item;\n use rustc_hir::Node;\n use rustc_middle::thir::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::ExpectedFound;\n-use rustc_middle::ty::fast_reject::{self, SimplifyParams, StripReferences};\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::{\n-    self, AdtKind, SubtypePredicate, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable,\n+    self, SubtypePredicate, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_session::DiagnosticMessageId;\n use rustc_span::symbol::{kw, sym};\n@@ -40,6 +39,22 @@ use suggestions::InferCtxtExt as _;\n \n pub use rustc_infer::traits::error_reporting::*;\n \n+// When outputting impl candidates, prefer showing those that are more similar.\n+//\n+// We also compare candidates after skipping lifetimes, which has a lower\n+// priority than exact matches.\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n+pub enum CandidateSimilarity {\n+    Exact { ignoring_lifetimes: bool },\n+    Fuzzy { ignoring_lifetimes: bool },\n+}\n+\n+#[derive(Debug, Clone, Copy)]\n+pub struct ImplCandidate<'tcx> {\n+    pub trait_ref: ty::TraitRef<'tcx>,\n+    pub similarity: CandidateSimilarity,\n+}\n+\n pub trait InferCtxtExt<'tcx> {\n     fn report_fulfillment_errors(\n         &self,\n@@ -1143,18 +1158,23 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n         error: &MismatchedProjectionTypes<'tcx>,\n     );\n \n-    fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool;\n+    fn fuzzy_match_tys(\n+        &self,\n+        a: Ty<'tcx>,\n+        b: Ty<'tcx>,\n+        ignoring_lifetimes: bool,\n+    ) -> Option<CandidateSimilarity>;\n \n     fn describe_generator(&self, body_id: hir::BodyId) -> Option<&'static str>;\n \n     fn find_similar_impl_candidates(\n         &self,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n-    ) -> Vec<ty::TraitRef<'tcx>>;\n+    ) -> Vec<ImplCandidate<'tcx>>;\n \n     fn report_similar_impl_candidates(\n         &self,\n-        impl_candidates: Vec<ty::TraitRef<'tcx>>,\n+        impl_candidates: Vec<ImplCandidate<'tcx>>,\n         err: &mut DiagnosticBuilder<'_>,\n     );\n \n@@ -1446,45 +1466,80 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         });\n     }\n \n-    fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n+    fn fuzzy_match_tys(\n+        &self,\n+        mut a: Ty<'tcx>,\n+        mut b: Ty<'tcx>,\n+        ignoring_lifetimes: bool,\n+    ) -> Option<CandidateSimilarity> {\n         /// returns the fuzzy category of a given type, or None\n         /// if the type can be equated to any type.\n-        fn type_category(t: Ty<'_>) -> Option<u32> {\n+        fn type_category(tcx: TyCtxt<'_>, t: Ty<'_>) -> Option<u32> {\n             match t.kind() {\n                 ty::Bool => Some(0),\n                 ty::Char => Some(1),\n                 ty::Str => Some(2),\n-                ty::Int(..) | ty::Uint(..) | ty::Infer(ty::IntVar(..)) => Some(3),\n-                ty::Float(..) | ty::Infer(ty::FloatVar(..)) => Some(4),\n+                ty::Adt(def, _) if tcx.is_diagnostic_item(sym::String, def.did) => Some(2),\n+                ty::Int(..)\n+                | ty::Uint(..)\n+                | ty::Float(..)\n+                | ty::Infer(ty::IntVar(..) | ty::FloatVar(..)) => Some(4),\n                 ty::Ref(..) | ty::RawPtr(..) => Some(5),\n                 ty::Array(..) | ty::Slice(..) => Some(6),\n                 ty::FnDef(..) | ty::FnPtr(..) => Some(7),\n                 ty::Dynamic(..) => Some(8),\n                 ty::Closure(..) => Some(9),\n                 ty::Tuple(..) => Some(10),\n-                ty::Projection(..) => Some(11),\n-                ty::Param(..) => Some(12),\n+                ty::Param(..) => Some(11),\n+                ty::Projection(..) => Some(12),\n                 ty::Opaque(..) => Some(13),\n                 ty::Never => Some(14),\n-                ty::Adt(adt, ..) => match adt.adt_kind() {\n-                    AdtKind::Struct => Some(15),\n-                    AdtKind::Union => Some(16),\n-                    AdtKind::Enum => Some(17),\n-                },\n-                ty::Generator(..) => Some(18),\n-                ty::Foreign(..) => Some(19),\n-                ty::GeneratorWitness(..) => Some(20),\n+                ty::Adt(..) => Some(15),\n+                ty::Generator(..) => Some(16),\n+                ty::Foreign(..) => Some(17),\n+                ty::GeneratorWitness(..) => Some(18),\n                 ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error(_) => None,\n             }\n         }\n \n-        match (type_category(a), type_category(b)) {\n-            (Some(cat_a), Some(cat_b)) => match (a.kind(), b.kind()) {\n-                (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) => def_a == def_b,\n-                _ => cat_a == cat_b,\n-            },\n-            // infer and error can be equated to all types\n-            _ => true,\n+        let strip_references = |mut t: Ty<'tcx>| -> Ty<'tcx> {\n+            loop {\n+                match t.kind() {\n+                    ty::Ref(_, inner, _) | ty::RawPtr(ty::TypeAndMut { ty: inner, .. }) => {\n+                        t = inner\n+                    }\n+                    _ => break t,\n+                }\n+            }\n+        };\n+\n+        if !ignoring_lifetimes {\n+            a = strip_references(a);\n+            b = strip_references(b);\n+        }\n+\n+        let cat_a = type_category(self.tcx, a)?;\n+        let cat_b = type_category(self.tcx, b)?;\n+        if a == b {\n+            Some(CandidateSimilarity::Exact { ignoring_lifetimes })\n+        } else if cat_a == cat_b {\n+            match (a.kind(), b.kind()) {\n+                (ty::Adt(def_a, _), ty::Adt(def_b, _)) => def_a == def_b,\n+                // Matching on references results in a lot of unhelpful\n+                // suggestions, so let's just not do that for now.\n+                //\n+                // We still upgrade successful matches to `ignoring_lifetimes: true`\n+                // to prioritize that impl.\n+                (ty::Ref(..) | ty::RawPtr(..), ty::Ref(..) | ty::RawPtr(..)) => {\n+                    self.fuzzy_match_tys(a, b, true).is_some()\n+                }\n+                _ => true,\n+            }\n+            .then_some(CandidateSimilarity::Fuzzy { ignoring_lifetimes })\n+        } else if ignoring_lifetimes {\n+            None\n+        } else {\n+            self.fuzzy_match_tys(a, b, true)\n         }\n     }\n \n@@ -1500,58 +1555,25 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n     fn find_similar_impl_candidates(\n         &self,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n-    ) -> Vec<ty::TraitRef<'tcx>> {\n-        // We simplify params and strip references here.\n-        //\n-        // This both removes a lot of unhelpful suggestions, e.g.\n-        // when searching for `&Foo: Trait` it doesn't suggestion `impl Trait for &Bar`,\n-        // while also suggesting impls for `&Foo` when we're looking for `Foo: Trait`.\n-        //\n-        // The second thing isn't necessarily always a good thing, but\n-        // any other simple setup results in a far worse output, so \ud83e\udd37\n-        let simp = fast_reject::simplify_type(\n-            self.tcx,\n-            trait_ref.skip_binder().self_ty(),\n-            SimplifyParams::Yes,\n-            StripReferences::Yes,\n-        );\n-        let all_impls = self.tcx.all_impls(trait_ref.def_id());\n-\n-        match simp {\n-            Some(simp) => all_impls\n-                .filter_map(|def_id| {\n-                    let imp = self.tcx.impl_trait_ref(def_id).unwrap();\n-                    let imp_simp = fast_reject::simplify_type(\n-                        self.tcx,\n-                        imp.self_ty(),\n-                        SimplifyParams::Yes,\n-                        StripReferences::Yes,\n-                    );\n-                    if let Some(imp_simp) = imp_simp {\n-                        if simp != imp_simp {\n-                            return None;\n-                        }\n-                    }\n-                    if self.tcx.impl_polarity(def_id) == ty::ImplPolarity::Negative {\n-                        return None;\n-                    }\n-                    Some(imp)\n-                })\n-                .collect(),\n-            None => all_impls\n-                .filter_map(|def_id| {\n-                    if self.tcx.impl_polarity(def_id) == ty::ImplPolarity::Negative {\n-                        return None;\n-                    }\n-                    self.tcx.impl_trait_ref(def_id)\n-                })\n-                .collect(),\n-        }\n+    ) -> Vec<ImplCandidate<'tcx>> {\n+        self.tcx\n+            .all_impls(trait_ref.def_id())\n+            .filter_map(|def_id| {\n+                if self.tcx.impl_polarity(def_id) == ty::ImplPolarity::Negative {\n+                    return None;\n+                }\n+\n+                let imp = self.tcx.impl_trait_ref(def_id).unwrap();\n+\n+                self.fuzzy_match_tys(trait_ref.skip_binder().self_ty(), imp.self_ty(), false)\n+                    .map(|similarity| ImplCandidate { trait_ref: imp, similarity })\n+            })\n+            .collect()\n     }\n \n     fn report_similar_impl_candidates(\n         &self,\n-        impl_candidates: Vec<ty::TraitRef<'tcx>>,\n+        impl_candidates: Vec<ImplCandidate<'tcx>>,\n         err: &mut DiagnosticBuilder<'_>,\n     ) {\n         if impl_candidates.is_empty() {\n@@ -1575,13 +1597,24 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         };\n \n         // Sort impl candidates so that ordering is consistent for UI tests.\n-        let mut normalized_impl_candidates =\n-            impl_candidates.iter().copied().map(normalize).collect::<Vec<String>>();\n-\n-        // Sort before taking the `..end` range,\n         // because the ordering of `impl_candidates` may not be deterministic:\n         // https://github.com/rust-lang/rust/pull/57475#issuecomment-455519507\n-        normalized_impl_candidates.sort();\n+        //\n+        // Prefer more similar candidates first, then sort lexicographically\n+        // by their normalized string representation.\n+        let mut normalized_impl_candidates_and_similarities = impl_candidates\n+            .into_iter()\n+            .map(|ImplCandidate { trait_ref, similarity }| {\n+                let normalized = normalize(trait_ref);\n+                (similarity, normalized)\n+            })\n+            .collect::<Vec<_>>();\n+        normalized_impl_candidates_and_similarities.sort();\n+\n+        let normalized_impl_candidates = normalized_impl_candidates_and_similarities\n+            .into_iter()\n+            .map(|(_, normalized)| normalized)\n+            .collect::<Vec<_>>();\n \n         err.help(&format!(\n             \"the following implementations were found:{}{}\",\n@@ -1744,7 +1777,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                let impl_candidates = self.find_similar_impl_candidates(trait_ref);\n+                let impl_candidates = self\n+                    .find_similar_impl_candidates(trait_ref)\n+                    .into_iter()\n+                    .map(|candidate| candidate.trait_ref)\n+                    .collect();\n                 let mut err = self.emit_inference_failure_err(\n                     body_id,\n                     span,"}, {"sha": "4b6ffa8869dbaa1214d2b6607cce702afc161570", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -56,7 +56,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     trait_ref.substs.types().skip(1),\n                     impl_trait_ref.substs.types().skip(1),\n                 )\n-                .all(|(u, v)| self.fuzzy_match_tys(u, v))\n+                .all(|(u, v)| self.fuzzy_match_tys(u, v, false).is_some())\n                 {\n                     fuzzy_match_impls.push(def_id);\n                 }"}, {"sha": "ee21eb029a88878213e7697e138309f5f48b26d0", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -36,7 +36,7 @@ use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::thir::abstract_const::NotConstEvaluatable;\n-use rustc_middle::ty::fast_reject::{self, SimplifyParams, StripReferences};\n+use rustc_middle::ty::fast_reject::{self, SimplifyParams};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArgKind, Subst, SubstsRef};\n@@ -2172,14 +2172,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             self.tcx(),\n                             obligation_ty,\n                             SimplifyParams::Yes,\n-                            StripReferences::No,\n-                        );\n-                        let simplified_impl_ty = fast_reject::simplify_type(\n-                            self.tcx(),\n-                            impl_ty,\n-                            SimplifyParams::No,\n-                            StripReferences::No,\n                         );\n+                        let simplified_impl_ty =\n+                            fast_reject::simplify_type(self.tcx(), impl_ty, SimplifyParams::No);\n \n                         simplified_obligation_ty.is_some()\n                             && simplified_impl_ty.is_some()"}, {"sha": "497ac207bbe4f3a226d277165e722a61ed10e9ee", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -2,7 +2,7 @@ use super::OverlapError;\n \n use crate::traits;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::fast_reject::{self, SimplifiedType, SimplifyParams, StripReferences};\n+use rustc_middle::ty::fast_reject::{self, SimplifiedType, SimplifyParams};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n \n@@ -49,12 +49,7 @@ impl ChildrenExt<'_> for Children {\n     /// Insert an impl into this set of children without comparing to any existing impls.\n     fn insert_blindly(&mut self, tcx: TyCtxt<'_>, impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n-        if let Some(st) = fast_reject::simplify_type(\n-            tcx,\n-            trait_ref.self_ty(),\n-            SimplifyParams::No,\n-            StripReferences::No,\n-        ) {\n+        if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), SimplifyParams::No) {\n             debug!(\"insert_blindly: impl_def_id={:?} st={:?}\", impl_def_id, st);\n             self.non_blanket_impls.entry(st).or_default().push(impl_def_id)\n         } else {\n@@ -69,12 +64,7 @@ impl ChildrenExt<'_> for Children {\n     fn remove_existing(&mut self, tcx: TyCtxt<'_>, impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let vec: &mut Vec<DefId>;\n-        if let Some(st) = fast_reject::simplify_type(\n-            tcx,\n-            trait_ref.self_ty(),\n-            SimplifyParams::No,\n-            StripReferences::No,\n-        ) {\n+        if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), SimplifyParams::No) {\n             debug!(\"remove_existing: impl_def_id={:?} st={:?}\", impl_def_id, st);\n             vec = self.non_blanket_impls.get_mut(&st).unwrap();\n         } else {\n@@ -322,12 +312,7 @@ impl GraphExt for Graph {\n \n         let mut parent = trait_def_id;\n         let mut last_lint = None;\n-        let simplified = fast_reject::simplify_type(\n-            tcx,\n-            trait_ref.self_ty(),\n-            SimplifyParams::No,\n-            StripReferences::No,\n-        );\n+        let simplified = fast_reject::simplify_type(tcx, trait_ref.self_ty(), SimplifyParams::No);\n \n         // Descend the specialization tree, where `parent` is the current parent node.\n         loop {"}, {"sha": "55dce71bdfbd41207038095f5d02f5007658fab5", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_middle::ty::fast_reject::{simplify_type, SimplifyParams, StripReferences};\n+use rustc_middle::ty::fast_reject::{simplify_type, SimplifyParams};\n use rustc_middle::ty::print::with_crate_prefix;\n use rustc_middle::ty::{self, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_span::lev_distance;\n@@ -1748,8 +1748,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // FIXME: Even though negative bounds are not implemented, we could maybe handle\n                 // cases where a positive bound implies a negative impl.\n                 (candidates, Vec::new())\n-            } else if let Some(simp_rcvr_ty) =\n-                simplify_type(self.tcx, rcvr_ty, SimplifyParams::Yes, StripReferences::No)\n+            } else if let Some(simp_rcvr_ty) = simplify_type(self.tcx, rcvr_ty, SimplifyParams::Yes)\n             {\n                 let mut potential_candidates = Vec::new();\n                 let mut explicitly_negative = Vec::new();\n@@ -1763,12 +1762,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         })\n                         .any(|imp_did| {\n                             let imp = self.tcx.impl_trait_ref(imp_did).unwrap();\n-                            let imp_simp = simplify_type(\n-                                self.tcx,\n-                                imp.self_ty(),\n-                                SimplifyParams::Yes,\n-                                StripReferences::No,\n-                            );\n+                            let imp_simp =\n+                                simplify_type(self.tcx, imp.self_ty(), SimplifyParams::Yes);\n                             imp_simp.map_or(false, |s| s == simp_rcvr_ty)\n                         })\n                     {"}, {"sha": "f56631b12aa67436734ea72997f1c33436f46d33", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -15,6 +15,8 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n LL |     f1(2u32, 4u32);\n    |     ^^ the trait `Foo` is not implemented for `u32`\n    |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n note: required by a bound in `f1`\n   --> $DIR/associated-types-path-2.rs:13:14\n    |\n@@ -26,6 +28,9 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n    |\n LL |     f1(2u32, 4u32);\n    |              ^^^^ the trait `Foo` is not implemented for `u32`\n+   |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:35:8\n@@ -35,6 +40,8 @@ LL |     f1(2u32, 4i32);\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n note: required by a bound in `f1`\n   --> $DIR/associated-types-path-2.rs:13:14\n    |\n@@ -46,6 +53,9 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n    |\n LL |     f1(2u32, 4i32);\n    |              ^^^^ the trait `Foo` is not implemented for `u32`\n+   |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n \n error[E0308]: mismatched types\n   --> $DIR/associated-types-path-2.rs:41:18"}, {"sha": "ec28ca240be2b5b9a4bc30e3790d88450323e0fb", "filename": "src/test/ui/associated-types/hr-associated-type-bound-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-1.rs:3:33\n    |"}, {"sha": "6d19186bde49a51c692a593d11b9cab5da3f298c", "filename": "src/test/ui/associated-types/hr-associated-type-bound-object.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -4,8 +4,6 @@ error[E0277]: the trait bound `for<'b> <T as X<'b>>::U: Clone` is not satisfied\n LL | fn f<'a, T: X<'a> + ?Sized>(x: &<T as X<'a>>::U) {\n    |             ^^^^^ the trait `for<'b> Clone` is not implemented for `<T as X<'b>>::U`\n    |\n-   = help: the following implementations were found:\n-             <&T as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-object.rs:3:33\n    |"}, {"sha": "e48ef8d17d1dee70af4f5adb426020fc61c97cac", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type V = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `Y`\n   --> $DIR/hr-associated-type-bound-param-1.rs:4:36\n    |"}, {"sha": "2fb3af38c0d9b391dcef3b3aac6bc005b4a732e9", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     T: Z<'a, u16>,\n    |        ^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `Z`\n   --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |\n@@ -19,6 +21,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     T: Z<'a, u16>,\n    |        ^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `Z`\n   --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |\n@@ -34,6 +38,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type W = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `Z`\n   --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |"}, {"sha": "775f45ca82965020718cc52863323b1fe57793c8", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-3.rs:4:33\n    |"}, {"sha": "4e9b64ba832adb19be7e4ce2c532751b2a56fed7", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-4.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-4.rs:4:36\n    |"}, {"sha": "d00abf30d3b053d0fd487fb53e6d58b90a048661", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-5.rs:17:45\n    |\n@@ -19,6 +21,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-5.rs:17:45\n    |"}, {"sha": "5755778fef2661cb28a295da1fe7cc42d8098cb7", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-precedence.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `u32: Signed` is not satisfied\n LL |     is_defaulted::<&'static u32>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Signed` is not implemented for `u32`\n    |\n+   = help: the following implementations were found:\n+             <i32 as Signed>\n note: required because of the requirements on the impl of `Defaulted` for `&'static u32`\n   --> $DIR/typeck-default-trait-impl-precedence.rs:10:19\n    |"}, {"sha": "7b0b3f85b39158d27ffcf442e33772ab3eec2db2", "filename": "src/test/ui/chalkify/chalk_initial_program.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -4,6 +4,9 @@ error[E0277]: the trait bound `f32: Foo` is not satisfied\n LL |     gimme::<f32>();\n    |             ^^^ the trait `Foo` is not implemented for `f32`\n    |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n+             <u32 as Foo>\n note: required by a bound in `gimme`\n   --> $DIR/chalk_initial_program.rs:9:13\n    |"}, {"sha": "2bc9f077f0285dc817d2b83e59684db0b51cb2c4", "filename": "src/test/ui/chalkify/impl_wf.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -17,6 +17,8 @@ error[E0277]: the trait bound `f32: Foo` is not satisfied\n LL | impl Baz<f32> for f32 { }\n    |      ^^^^^^^^ the trait `Foo` is not implemented for `f32`\n    |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n note: required by a bound in `Baz`\n   --> $DIR/impl_wf.rs:18:31\n    |"}, {"sha": "30cec80b036c629ea13bc92b043e718949de0f6a", "filename": "src/test/ui/chalkify/impl_wf_2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `f32: Foo` is not satisfied\n LL |     type Item = f32;\n    |                 ^^^ the trait `Foo` is not implemented for `f32`\n    |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n note: required by a bound in `Bar::Item`\n   --> $DIR/impl_wf_2.rs:8:16\n    |"}, {"sha": "6abd8b28760d8261b2c21965a56bf57cb7eadc7f", "filename": "src/test/ui/chalkify/type_wf.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -5,7 +5,6 @@ LL |     let s = S {\n    |             ^ the trait `Foo` is not implemented for `{float}`\n    |\n    = help: the following implementations were found:\n-             <Option<T> as Foo>\n              <i32 as Foo>\n note: required by a bound in `S`\n   --> $DIR/type_wf.rs:6:13"}, {"sha": "19813a491c96e4e9e22579263f953913d32f0107", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -15,6 +15,7 @@ LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n    |\n    = help: the following implementations were found:\n              <u32 as Traitor<N, 2_u8>>\n+             <u64 as Traitor<1_u8, 2_u8>>\n \n error[E0277]: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n   --> $DIR/rp_impl_trait_fail.rs:22:13\n@@ -24,6 +25,7 @@ LL | fn owo() -> impl Traitor {\n    |\n    = help: the following implementations were found:\n              <u64 as Traitor<1_u8, 2_u8>>\n+             <u32 as Traitor<N, 2_u8>>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "dff980301911cc11fd94923bd4146720d7409880", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -11,7 +11,7 @@ LL |     Foo::<i32>::bar(&1i8);\n              <i8 as Foo<u16>>\n              <i8 as Foo<u32>>\n              <i8 as Foo<u64>>\n-             <i8 as Foo<u8>>\n+           and 5 others\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:25:21\n@@ -26,6 +26,7 @@ LL |     Foo::<i32>::bar(&1u8);\n              <u8 as Foo<u16>>\n              <u8 as Foo<u32>>\n              <u8 as Foo<u64>>\n+           and 5 others\n \n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:26:21"}, {"sha": "e147366a22410bf6e903f0639f4eae3468bdd3d4", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -6,6 +6,10 @@ LL |     assert_copy::<&'static mut isize>();\n    |\n    = help: the following implementations were found:\n              <isize as Copy>\n+             <f32 as Copy>\n+             <f64 as Copy>\n+             <i128 as Copy>\n+           and 10 others\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |\n@@ -20,6 +24,10 @@ LL |     assert_copy::<&'a mut isize>();\n    |\n    = help: the following implementations were found:\n              <isize as Copy>\n+             <f32 as Copy>\n+             <f64 as Copy>\n+             <i128 as Copy>\n+           and 10 others\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |"}, {"sha": "f88acfb2e793e67e5a2df449b55c317ad77e2017", "filename": "src/test/ui/specialization/default-associated-type-bound-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -14,6 +14,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     default type U = str;\n    |                      ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `X::U`\n   --> $DIR/default-associated-type-bound-1.rs:8:13\n    |"}, {"sha": "470c0bfcf73e515e7f0c83bbd7e25528e5a08eeb", "filename": "src/test/ui/suggestions/into-str.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -7,6 +7,12 @@ LL |     foo(String::new());\n    |     required by a bound introduced by this call\n    |\n    = note: to coerce a `String` into a `&str`, use `&*` as a prefix\n+   = help: the following implementations were found:\n+             <String as From<&String>>\n+             <String as From<&mut str>>\n+             <String as From<&str>>\n+             <String as From<Box<str>>>\n+           and 2 others\n    = note: required because of the requirements on the impl of `Into<&str>` for `String`\n note: required by a bound in `foo`\n   --> $DIR/into-str.rs:1:31"}, {"sha": "7972437771399f71f356ad3d222c0b7cb0921263", "filename": "src/test/ui/suggestions/issue-71394-no-from-impl.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -4,6 +4,9 @@ error[E0277]: the trait bound `&[i8]: From<&[u8]>` is not satisfied\n LL |     let _: &[i8] = data.into();\n    |                         ^^^^ the trait `From<&[u8]>` is not implemented for `&[i8]`\n    |\n+   = help: the following implementations were found:\n+             <[T; LANES] as From<Simd<T, LANES>>>\n+             <[bool; LANES] as From<Mask<T, LANES>>>\n    = note: required because of the requirements on the impl of `Into<&[i8]>` for `&[u8]`\n \n error: aborting due to previous error"}, {"sha": "bacab64e2642c0e9ed554295cd25316bd9486a37", "filename": "src/test/ui/suggestions/issue-84973-negative.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -6,6 +6,8 @@ LL |     bar(a);\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = help: the following implementations were found:\n+             <&f32 as Tr>\n note: required by a bound in `bar`\n   --> $DIR/issue-84973-negative.rs:5:11\n    |"}, {"sha": "907a1bd75a06448c81feff245bb30c5f5a2085bf", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     f::<dyn X<Y = str>>();\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `f`\n   --> $DIR/check-trait-object-bounds-1.rs:7:9\n    |"}, {"sha": "b27f8d791a50f29d9ca246269e80cdf132b74d99", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-4.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     f::<dyn X<Y = str>>();\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `f`\n   --> $DIR/check-trait-object-bounds-4.rs:10:9\n    |"}, {"sha": "413225d45a62ce6d6cd8d24a7e97c0c3296afb0e", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -44,6 +44,7 @@ LL |     opts.get(<String as AsRef<[u8]>>::as_ref(opt));\n    |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     opts.get(<String as AsRef<str>>::as_ref(opt));\n    |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+     and 4 other candidates\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-77982.rs:13:44"}, {"sha": "b970012837313b2748dc245267da0a933300f4a7", "filename": "src/test/ui/traits/issue-79458.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -9,6 +9,8 @@ LL |     bar: &'a mut T\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n+             <*const T as Clone>\n+             <*mut T as Clone>\n    = note: `Clone` is implemented for `&T`, but not for `&mut T`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "299219431ef113d13e17dd2124faad9b65cec510", "filename": "src/test/ui/traits/suggest-deferences/issue-62530.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -8,6 +8,8 @@ LL |     takes_type_parameter(&string);  // Error\n    |     |                    help: consider adding dereference here: `&*string`\n    |     required by a bound introduced by this call\n    |\n+   = help: the following implementations were found:\n+             <&str as SomeTrait>\n note: required by a bound in `takes_type_parameter`\n   --> $DIR/issue-62530.rs:4:44\n    |"}, {"sha": "171051156b7f242e93a42406afd8761d3e2a5a0e", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52dd59ed2154f4158ae37e6994b678a6249a7bb0/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=52dd59ed2154f4158ae37e6994b678a6249a7bb0", "patch": "@@ -10,6 +10,9 @@ LL |     Ok(Err(123_i32)?)\n    = help: the following implementations were found:\n              <u8 as From<NonZeroU8>>\n              <u8 as From<bool>>\n+             <f32 as From<i16>>\n+             <f32 as From<i8>>\n+           and 71 others\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, i32>>` for `Result<u64, u8>`\n \n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`"}]}