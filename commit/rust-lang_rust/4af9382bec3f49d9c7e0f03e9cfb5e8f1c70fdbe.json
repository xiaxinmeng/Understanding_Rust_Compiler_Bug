{"sha": "4af9382bec3f49d9c7e0f03e9cfb5e8f1c70fdbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZjkzODJiZWMzZjQ5ZDljN2UwZjAzZTljZmI1ZThmMWM3MGZkYmU=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-11-10T07:56:17Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-12-10T16:08:42Z"}, "message": "Common function to lint wrong self convention from impl and trait def", "tree": {"sha": "e5c34ceace932bee158fce27e2b4e65cd45f30ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5c34ceace932bee158fce27e2b4e65cd45f30ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4af9382bec3f49d9c7e0f03e9cfb5e8f1c70fdbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4af9382bec3f49d9c7e0f03e9cfb5e8f1c70fdbe", "html_url": "https://github.com/rust-lang/rust/commit/4af9382bec3f49d9c7e0f03e9cfb5e8f1c70fdbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4af9382bec3f49d9c7e0f03e9cfb5e8f1c70fdbe/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6bb9276f7964b96899d04d680bc04bf99c8bf47", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6bb9276f7964b96899d04d680bc04bf99c8bf47", "html_url": "https://github.com/rust-lang/rust/commit/a6bb9276f7964b96899d04d680bc04bf99c8bf47"}], "stats": {"total": 96, "additions": 45, "deletions": 51}, "files": [{"sha": "9a082a89229bd131f9715321fc59ccbd232e24f2", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 42, "deletions": 46, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/4af9382bec3f49d9c7e0f03e9cfb5e8f1c70fdbe/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af9382bec3f49d9c7e0f03e9cfb5e8f1c70fdbe/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=4af9382bec3f49d9c7e0f03e9cfb5e8f1c70fdbe", "patch": "@@ -1674,32 +1674,14 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     }\n                 }\n \n-                if let Some((ref conv, self_kinds)) = &CONVENTIONS\n-                    .iter()\n-                    .find(|(ref conv, _)| conv.check(&name))\n-                {\n-                    if !self_kinds.iter().any(|k| k.matches(cx, self_ty, first_arg_ty)) {\n-                        let lint = if item.vis.node.is_pub() {\n-                            WRONG_PUB_SELF_CONVENTION\n-                        } else {\n-                            WRONG_SELF_CONVENTION\n-                        };\n-\n-                        span_lint(\n-                            cx,\n-                            lint,\n-                            first_arg.pat.span,\n-                            &format!(\"methods called `{}` usually take {}; consider choosing a less ambiguous name\",\n-                                conv,\n-                                &self_kinds\n-                                    .iter()\n-                                    .map(|k| k.description())\n-                                    .collect::<Vec<_>>()\n-                                    .join(\" or \")\n-                            ),\n-                        );\n-                    }\n-                }\n+                lint_wrong_self_convention(\n+                    cx,\n+                    &name,\n+                    item.vis.node.is_pub(),\n+                    self_ty,\n+                    first_arg_ty,\n+                    first_arg.pat.span\n+                );\n             }\n         }\n \n@@ -1748,26 +1730,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             let self_ty = TraitRef::identity(cx.tcx, item.hir_id.owner.to_def_id()).self_ty();\n \n             then {\n-                if let Some((ref conv, self_kinds)) = &CONVENTIONS\n-                    .iter()\n-                    .find(|(ref conv, _)| conv.check(&item.ident.name.as_str()))\n-                {\n-                    if !self_kinds.iter().any(|k| k.matches(cx, self_ty, first_arg_ty)) {\n-                        span_lint(\n-                            cx,\n-                            WRONG_PUB_SELF_CONVENTION,\n-                            first_arg_span,\n-                            &format!(\"methods called `{}` usually take {}; consider choosing a less ambiguous name\",\n-                                conv,\n-                                &self_kinds\n-                                    .iter()\n-                                    .map(|k| k.description())\n-                                    .collect::<Vec<_>>()\n-                                    .join(\" or \")\n-                            ),\n-                        );\n-                    }\n-                }\n+                lint_wrong_self_convention(cx, &item.ident.name.as_str(), false, self_ty, first_arg_ty, first_arg_span);\n             }\n         }\n \n@@ -1792,6 +1755,39 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n     extract_msrv_attr!(LateContext);\n }\n \n+fn lint_wrong_self_convention<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    item_name: &str,\n+    is_pub: bool,\n+    self_ty: &'tcx TyS<'tcx>,\n+    first_arg_ty: &'tcx TyS<'tcx>,\n+    first_arg_span: Span,\n+) {\n+    let lint = if is_pub {\n+        WRONG_PUB_SELF_CONVENTION\n+    } else {\n+        WRONG_SELF_CONVENTION\n+    };\n+    if let Some((ref conv, self_kinds)) = &CONVENTIONS.iter().find(|(ref conv, _)| conv.check(item_name)) {\n+        if !self_kinds.iter().any(|k| k.matches(cx, self_ty, first_arg_ty)) {\n+            span_lint(\n+                cx,\n+                lint,\n+                first_arg_span,\n+                &format!(\n+                    \"methods called `{}` usually take {}; consider choosing a less ambiguous name\",\n+                    conv,\n+                    &self_kinds\n+                        .iter()\n+                        .map(|k| k.description())\n+                        .collect::<Vec<_>>()\n+                        .join(\" or \")\n+                ),\n+            );\n+        }\n+    }\n+}\n+\n /// Checks for the `OR_FUN_CALL` lint.\n #[allow(clippy::too_many_lines)]\n fn lint_or_fun_call<'tcx>("}, {"sha": "795ba77274c8e39ccef303f5883dee361838cd40", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4af9382bec3f49d9c7e0f03e9cfb5e8f1c70fdbe/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af9382bec3f49d9c7e0f03e9cfb5e8f1c70fdbe/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=4af9382bec3f49d9c7e0f03e9cfb5e8f1c70fdbe", "patch": "@@ -90,7 +90,7 @@ mod issue4037 {\n }\n \n // Lint also in trait definition (see #6307)\n-mod issue6307{\n+mod issue6307 {\n     trait T: Sized {\n         fn as_i32(self) {}\n         fn as_u32(&self) {}\n@@ -102,7 +102,7 @@ mod issue6307{\n         fn to_u32(&self) {}\n         fn from_i32(self) {}\n         // check whether the lint can be allowed at the function level\n-        #[allow(clippy::wrong_pub_self_convention)]\n+        #[allow(clippy::wrong_self_convention)]\n         fn from_cake(self) {}\n \n         // test for false positives\n@@ -113,4 +113,4 @@ mod issue6307{\n         fn from_(self) {}\n         fn to_mut(&mut self) {}\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "289da6f059ebcaee9084fb5d5ae2171f9e1e8a55", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af9382bec3f49d9c7e0f03e9cfb5e8f1c70fdbe/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4af9382bec3f49d9c7e0f03e9cfb5e8f1c70fdbe/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=4af9382bec3f49d9c7e0f03e9cfb5e8f1c70fdbe", "patch": "@@ -77,8 +77,6 @@ error: methods called `as_*` usually take self by reference or self by mutable r\n    |\n LL |         fn as_i32(self) {}\n    |                   ^^^^\n-   |\n-   = note: `-D clippy::wrong-pub-self-convention` implied by `-D warnings`\n \n error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n   --> $DIR/wrong_self_convention.rs:97:21"}]}