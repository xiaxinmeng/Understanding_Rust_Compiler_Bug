{"sha": "d43e394c4691f6ae9173001a27943d74ef6c5f97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0M2UzOTRjNDY5MWY2YWU5MTczMDAxYTI3OTQzZDc0ZWY2YzVmOTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-01T09:18:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-02T15:04:31Z"}, "message": "fix init_allocation_extra", "tree": {"sha": "c370a19d4d9cb5795603b63b6e9aa5422fb1d37c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c370a19d4d9cb5795603b63b6e9aa5422fb1d37c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d43e394c4691f6ae9173001a27943d74ef6c5f97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d43e394c4691f6ae9173001a27943d74ef6c5f97", "html_url": "https://github.com/rust-lang/rust/commit/d43e394c4691f6ae9173001a27943d74ef6c5f97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d43e394c4691f6ae9173001a27943d74ef6c5f97/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e77258322c71091afe23ecb64461243174e7fd49", "url": "https://api.github.com/repos/rust-lang/rust/commits/e77258322c71091afe23ecb64461243174e7fd49", "html_url": "https://github.com/rust-lang/rust/commit/e77258322c71091afe23ecb64461243174e7fd49"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "2796dbd0b9b1362c8815f76eebf1e2b1fff4a779", "filename": "src/eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d43e394c4691f6ae9173001a27943d74ef6c5f97/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43e394c4691f6ae9173001a27943d74ef6c5f97/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=d43e394c4691f6ae9173001a27943d74ef6c5f97", "patch": "@@ -93,7 +93,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             arg.push(0);\n             argvs.push(\n                 ecx.memory\n-                    .allocate_static_bytes(arg.as_slice(), MiriMemoryKind::Static.into()),\n+                    .allocate_static_bytes(arg.as_slice(), MiriMemoryKind::Env.into()),\n             );\n         }\n         // Make an array with all these pointers, in the Miri memory.\n@@ -144,7 +144,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     // Return place (in static memory so that it does not count as leak).\n     let ret_place = ecx.allocate(\n         ecx.layout_of(tcx.types.isize)?,\n-        MiriMemoryKind::Static.into(),\n+        MiriMemoryKind::Env.into(),\n     );\n     // Call start function.\n     ecx.call_function(\n@@ -156,7 +156,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n \n     // Set the last_error to 0\n     let errno_layout = ecx.layout_of(tcx.types.u32)?;\n-    let errno_place = ecx.allocate(errno_layout, MiriMemoryKind::Static.into());\n+    let errno_place = ecx.allocate(errno_layout, MiriMemoryKind::Env.into());\n     ecx.write_scalar(Scalar::from_u32(0), errno_place.into())?;\n     ecx.machine.last_error = Some(errno_place);\n "}, {"sha": "edabc3bccbcc44a90161fa04a127dc4a3415f6fe", "filename": "src/machine.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d43e394c4691f6ae9173001a27943d74ef6c5f97/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43e394c4691f6ae9173001a27943d74ef6c5f97/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=d43e394c4691f6ae9173001a27943d74ef6c5f97", "patch": "@@ -43,9 +43,9 @@ pub enum MiriMemoryKind {\n     C,\n     /// Windows `HeapAlloc` memory.\n     WinHeap,\n-    /// Part of env var emulation.\n+    /// Memory for env vars and args, errno and other parts of the machine-managed environment.\n     Env,\n-    /// Statics.\n+    /// Rust statics.\n     Static,\n }\n \n@@ -296,19 +296,20 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n-    ) -> Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>> {\n+    ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag) {\n         let kind = kind.expect(\"we set our STATIC_KIND so this cannot be None\");\n         let alloc = alloc.into_owned();\n-        let stacks = if memory_extra.validate {\n-            Some(Stacks::new_allocation(\n+        let (stacks, base_tag) = if memory_extra.validate {\n+            let (stacks, base_tag) = Stacks::new_allocation(\n                 id,\n                 alloc.size,\n                 Rc::clone(&memory_extra.stacked_borrows),\n                 kind,\n-            ))\n+            );\n+            (Some(stacks), base_tag)\n         } else {\n-            // No stacks.\n-            None\n+            // No stacks, no tag.\n+            (None, Tag::Untagged)\n         };\n         let mut stacked_borrows = memory_extra.stacked_borrows.borrow_mut();\n         let alloc: Allocation<Tag, Self::AllocExtra> = alloc.with_tags_and_extra(\n@@ -325,7 +326,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n                 stacked_borrows: stacks,\n             },\n         );\n-        Cow::Owned(alloc)\n+        (Cow::Owned(alloc), base_tag)\n     }\n \n     #[inline(always)]"}, {"sha": "fc3339352a982b3bc4872f30491c373bae8ecbea", "filename": "src/shims/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43e394c4691f6ae9173001a27943d74ef6c5f97/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43e394c4691f6ae9173001a27943d74ef6c5f97/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=d43e394c4691f6ae9173001a27943d74ef6c5f97", "patch": "@@ -187,7 +187,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 // First arg: Message.\n                 let msg = msg.description();\n-                let msg = this.allocate_str(msg, MiriMemoryKind::Static.into());\n+                let msg = this.allocate_str(msg, MiriMemoryKind::Env.into());\n \n                 // Second arg: Caller location.\n                 let location = this.alloc_caller_location_for_span(span);"}, {"sha": "23a32fc2ac5caaa8f40195dd842a99cbbe2f52d9", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d43e394c4691f6ae9173001a27943d74ef6c5f97/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43e394c4691f6ae9173001a27943d74ef6c5f97/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=d43e394c4691f6ae9173001a27943d74ef6c5f97", "patch": "@@ -462,7 +462,7 @@ impl Stacks {\n         size: Size,\n         extra: MemoryExtra,\n         kind: MemoryKind<MiriMemoryKind>,\n-    ) -> Self {\n+    ) -> (Self, Tag) {\n         let (tag, perm) = match kind {\n             MemoryKind::Stack =>\n                 // New unique borrow. This tag is not accessible by the program,\n@@ -472,15 +472,17 @@ impl Stacks {\n                 // and in particular, *all* raw pointers.\n                 (Tag::Tagged(extra.borrow_mut().new_ptr()), Permission::Unique),\n             MemoryKind::Machine(MiriMemoryKind::Static) =>\n-                // Statics are inherently shared, so we do not derive any uniqueness assumptions\n-                // from direct accesses to a static. Thus, the base permission is `SharedReadWrite`.\n+                // Static memory can be referenced by \"global\" pointers from `tcx`.\n+                // Thus we call `static_base_ptr` such that the global pointers get the same tag\n+                // as what we use here.\n+                // The base pointer is not unique, so the base permission is `SharedReadWrite`.\n                 (extra.borrow_mut().static_base_ptr(id), Permission::SharedReadWrite),\n             _ =>\n                 // Everything else we handle entirely untagged for now.\n                 // FIXME: experiment with more precise tracking.\n                 (Tag::Untagged, Permission::SharedReadWrite),\n         };\n-        Stacks::new(size, perm, tag, extra)\n+        (Stacks::new(size, perm, tag, extra), tag)\n     }\n \n     #[inline(always)]"}]}