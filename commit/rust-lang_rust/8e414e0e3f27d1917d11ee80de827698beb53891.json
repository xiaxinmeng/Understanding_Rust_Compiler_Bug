{"sha": "8e414e0e3f27d1917d11ee80de827698beb53891", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNDE0ZTBlM2YyN2QxOTE3ZDExZWU4MGRlODI3Njk4YmViNTM4OTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-08T11:50:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-08T11:50:27Z"}, "message": "Auto merge of #33091 - sanxiyn:unused-trait-import-3, r=nrc\n\nWarn unused trait imports, rebased\n\nRebase of #30021.\n\nFix #25730.", "tree": {"sha": "6884dc4b4bc5c05c2541f97eaecb472c0b758818", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6884dc4b4bc5c05c2541f97eaecb472c0b758818"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e414e0e3f27d1917d11ee80de827698beb53891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e414e0e3f27d1917d11ee80de827698beb53891", "html_url": "https://github.com/rust-lang/rust/commit/8e414e0e3f27d1917d11ee80de827698beb53891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e414e0e3f27d1917d11ee80de827698beb53891/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48968329888948db8e49e307faf589a867dafa05", "url": "https://api.github.com/repos/rust-lang/rust/commits/48968329888948db8e49e307faf589a867dafa05", "html_url": "https://github.com/rust-lang/rust/commit/48968329888948db8e49e307faf589a867dafa05"}, {"sha": "282afda58afc282aa9e4d6f31c28f6d950d1e0b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/282afda58afc282aa9e4d6f31c28f6d950d1e0b1", "html_url": "https://github.com/rust-lang/rust/commit/282afda58afc282aa9e4d6f31c28f6d950d1e0b1"}], "stats": {"total": 276, "additions": 193, "deletions": 83}, "files": [{"sha": "dc01a9b5c780380e81c3c437e0c7198dde34cd9f", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -15,7 +15,6 @@\n #![feature(box_syntax)]\n #![feature(cell_extras)]\n #![feature(const_fn)]\n-#![feature(core_float)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n #![feature(dec2flt)]"}, {"sha": "d5a6e0f87d69b5886d2ab465ea8981a2b34372ad", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -52,7 +52,6 @@ pub fn test_num<T>(ten: T, two: T) where\n mod tests {\n     use core::option::Option;\n     use core::option::Option::{Some, None};\n-    use core::num::Float;\n \n     #[test]\n     fn from_str_issue7588() {"}, {"sha": "12dbbfdb0ed4d9d07a0034121df13ff126bf9c4a", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -10,6 +10,7 @@\n \n //! The exponential distribution.\n \n+#[cfg(not(test))] // only necessary for no_std\n use FloatMath;\n \n use {Rng, Rand};"}, {"sha": "cf48823656044503ddf57af6bc2becaea7f2ee71", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -13,6 +13,7 @@\n use self::GammaRepr::*;\n use self::ChiSquaredRepr::*;\n \n+#[cfg(not(test))] // only necessary for no_std\n use FloatMath;\n \n use {Rng, Open01};"}, {"sha": "2557d39c550f5c838c10c500b22c6dd5bfb605b3", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -17,7 +17,9 @@\n //! internally. The `IndependentSample` trait is for generating values\n //! that do not need to record state.\n \n+#[cfg(not(test))] // only necessary for no_std\n use core::num::Float;\n+\n use core::marker::PhantomData;\n \n use {Rng, Rand};"}, {"sha": "86840c568e018f41acbfe33e1eac93871596b530", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -10,6 +10,7 @@\n \n //! The normal and derived distributions.\n \n+#[cfg(not(test))] // only necessary for no_std\n use FloatMath;\n \n use {Rng, Rand, Open01};"}, {"sha": "d8517fb4c5714e3909e19f555930f43d97dd8eb0", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -28,13 +28,13 @@\n #![unstable(feature = \"rand\",\n             reason = \"use `rand` from crates.io\",\n             issue = \"27703\")]\n-#![feature(core_float)]\n #![feature(core_intrinsics)]\n #![feature(staged_api)]\n #![feature(step_by)]\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n \n+#![cfg_attr(not(test), feature(core_float))] // only necessary for no_std\n #![cfg_attr(test, feature(test, rand))]\n \n #![allow(deprecated)]"}, {"sha": "3e43c8e2c93557a9625a179345ce9f22f2a7656b", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -59,6 +59,7 @@ pub enum DepNode<D: Clone + Debug> {\n     TypeckItemBody(D),\n     Dropck,\n     DropckImpl(D),\n+    UnusedTraitCheck,\n     CheckConst(D),\n     Privacy,\n     IntrinsicCheck(D),\n@@ -165,6 +166,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             CheckEntryFn => Some(CheckEntryFn),\n             Variance => Some(Variance),\n             Dropck => Some(Dropck),\n+            UnusedTraitCheck => Some(UnusedTraitCheck),\n             Privacy => Some(Privacy),\n             Reachability => Some(Reachability),\n             DeadCheck => Some(DeadCheck),"}, {"sha": "68e3e742d0316f31aa237133017a6b0cdc3228ec", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -1639,8 +1639,13 @@ pub type FreevarMap = NodeMap<Vec<Freevar>>;\n \n pub type CaptureModeMap = NodeMap<CaptureClause>;\n \n+pub struct TraitCandidate {\n+    pub def_id: DefId,\n+    pub import_id: Option<NodeId>,\n+}\n+\n // Trait method resolution\n-pub type TraitMap = NodeMap<Vec<DefId>>;\n+pub type TraitMap = NodeMap<Vec<TraitCandidate>>;\n \n // Map from the NodeId of a glob import to a list of items which are actually\n // imported."}, {"sha": "c7ae038eb7add3624f29ced6a24cb2718e217b02", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -289,6 +289,8 @@ pub struct TyCtxt<'tcx> {\n     // scratch every time.\n     pub freevars: RefCell<FreevarMap>,\n \n+    pub maybe_unused_trait_imports: NodeSet,\n+\n     // Records the type of every item.\n     pub tcache: RefCell<DepTrackingMap<maps::Tcache<'tcx>>>,\n \n@@ -338,6 +340,10 @@ pub struct TyCtxt<'tcx> {\n     /// about.\n     pub used_mut_nodes: RefCell<NodeSet>,\n \n+    /// Set of trait imports actually used in the method resolution.\n+    /// This is used for warning unused imports.\n+    pub used_trait_imports: RefCell<NodeSet>,\n+\n     /// The set of external nominal types whose implementations have been read.\n     /// This is used for lazy resolution of methods.\n     pub populated_external_types: RefCell<DefIdSet>,\n@@ -543,6 +549,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                                  named_region_map: resolve_lifetime::NamedRegionMap,\n                                  map: ast_map::Map<'tcx>,\n                                  freevars: FreevarMap,\n+                                 maybe_unused_trait_imports: NodeSet,\n                                  region_maps: RegionMaps,\n                                  lang_items: middle::lang_items::LanguageItems,\n                                  stability: stability::Index<'tcx>,\n@@ -581,6 +588,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             fulfilled_predicates: RefCell::new(fulfilled_predicates),\n             map: map,\n             freevars: RefCell::new(freevars),\n+            maybe_unused_trait_imports: maybe_unused_trait_imports,\n             tcache: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             rcache: RefCell::new(FnvHashMap()),\n             tc_cache: RefCell::new(FnvHashMap()),\n@@ -595,6 +603,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             impl_items: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             used_unsafe: RefCell::new(NodeSet()),\n             used_mut_nodes: RefCell::new(NodeSet()),\n+            used_trait_imports: RefCell::new(NodeSet()),\n             populated_external_types: RefCell::new(DefIdSet()),\n             populated_external_primitive_impls: RefCell::new(DefIdSet()),\n             extern_const_statics: RefCell::new(DefIdMap()),"}, {"sha": "404298d8839aef73268d98c5f5f898973841802a", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -531,7 +531,7 @@ mod tests {\n     use self::rand::isaac::IsaacRng;\n     use serialize::hex::FromHex;\n     use std::u64;\n-    use super::{Digest, Sha256, FixedBuffer};\n+    use super::{Digest, Sha256};\n \n     // A normal addition - no overflow occurs\n     #[test]\n@@ -648,7 +648,7 @@ mod tests {\n mod bench {\n     extern crate test;\n     use self::test::Bencher;\n-    use super::{Sha256, FixedBuffer, Digest};\n+    use super::{Sha256, Digest};\n \n     #[bench]\n     pub fn sha256_10(b: &mut Bencher) {"}, {"sha": "9d2922ae6403325fb7879848b5dfccf6c4864520", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -17,7 +17,7 @@ use self::EvalHint::*;\n \n use rustc::hir::map as ast_map;\n use rustc::hir::map::blocks::FnLikeNode;\n-use rustc::middle::cstore::{self, CrateStore, InlinedItem};\n+use rustc::middle::cstore::{self, InlinedItem};\n use rustc::{infer, traits};\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;"}, {"sha": "e791a35125233727f5e3fe0b77010cb6a030fd5a", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -791,6 +791,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     let resolve::CrateMap {\n         def_map,\n         freevars,\n+        maybe_unused_trait_imports,\n         export_map,\n         trait_map,\n         glob_map,\n@@ -840,6 +841,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                              named_region_map,\n                              hir_map,\n                              freevars,\n+                             maybe_unused_trait_imports,\n                              region_map,\n                              lang_items,\n                              index,"}, {"sha": "299a20c1a0deb6fba0cae12c0e5ef9a6db5cba00", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -70,7 +70,6 @@ use rustc_trans::back::link;\n use rustc::session::{self, config, Session, build_session, CompileResult};\n use rustc::session::config::{Input, PrintRequest, OutputType, ErrorOutputType};\n use rustc::session::config::{get_unstable_features_setting, nightly_options};\n-use rustc::middle::cstore::CrateStore;\n use rustc::lint::Lint;\n use rustc::lint;\n use rustc_metadata::loader;"}, {"sha": "d546db086b588860e47b83ed612bf30a5654d96f", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -24,7 +24,6 @@ use rustc::ty::subst;\n use rustc::ty::subst::Subst;\n use rustc::traits::ProjectionMode;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n-use rustc::ty::relate::TypeRelation;\n use rustc::infer::{self, InferOk, InferResult, TypeOrigin};\n use rustc_metadata::cstore::CStore;\n use rustc_metadata::creader::LocalCrateReader;\n@@ -132,7 +131,7 @@ fn test_env<F>(source_string: &str,\n \n     // run just enough stuff to build a tcx:\n     let lang_items = lang_items::collect_language_items(&sess, &ast_map);\n-    let resolve::CrateMap { def_map, freevars, .. } =\n+    let resolve::CrateMap { def_map, freevars, maybe_unused_trait_imports, .. } =\n         resolve::resolve_crate(&sess, &ast_map, resolve::MakeGlobMap::No);\n     let named_region_map = resolve_lifetime::krate(&sess, &ast_map, &def_map.borrow());\n     let region_map = region::resolve_crate(&sess, &ast_map);\n@@ -143,6 +142,7 @@ fn test_env<F>(source_string: &str,\n                                named_region_map.unwrap(),\n                                ast_map,\n                                freevars,\n+                               maybe_unused_trait_imports,\n                                region_map,\n                                lang_items,\n                                index,"}, {"sha": "37d5f8937f174edaad81c53647398acde5415ce6", "filename": "src/librustc_incremental/persist/data.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -11,7 +11,6 @@\n //! The data that we will serialize and deserialize.\n \n use rustc::dep_graph::DepNode;\n-use rustc_serialize::{Decoder as RustcDecoder, Encoder as RustcEncoder};\n \n use super::directory::DefPathIndex;\n "}, {"sha": "796812556d2a7e2caf6346e1d6f93d8e1a0ded6f", "filename": "src/librustc_incremental/persist/directory.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -18,7 +18,6 @@ use rustc::hir::map::DefPath;\n use rustc::hir::def_id::DefId;\n use rustc::ty;\n use rustc::util::nodemap::DefIdMap;\n-use rustc_serialize::{Decoder as RustcDecoder, Encoder as RustcEncoder};\n use std::fmt::{self, Debug};\n \n /// Index into the DefIdDirectory"}, {"sha": "6a51b1a43adfad3ad799ebd5aae018fbcfadc368", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -29,7 +29,6 @@\n //! a `pub fn new()`.\n \n use rustc::hir::def::Def;\n-use middle::cstore::CrateStore;\n use rustc::hir::def_id::DefId;\n use middle::stability;\n use rustc::{cfg, infer};"}, {"sha": "b81a4a0efe741d6b88d91da71b116ebcde617ab5", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -26,7 +26,7 @@ use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n \n use syntax::ast;\n use syntax::abi::Abi;\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax::codemap::{self, Span};\n \n use rustc::hir;"}, {"sha": "6a79d5df80ae23f7528a78b8d44fae6bc16c5b6b", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -536,7 +536,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         let mut visible_parent_map = self.visible_parent_map.borrow_mut();\n         if !visible_parent_map.is_empty() { return visible_parent_map; }\n \n-        use rustc::middle::cstore::{CrateStore, ChildItem};\n+        use rustc::middle::cstore::ChildItem;\n         use std::collections::vec_deque::VecDeque;\n         use std::collections::hash_map::Entry;\n         for cnum in 1 .. self.next_crate_num() {"}, {"sha": "dd5a643edc1eb6a77fa7058a5ec7be4e772df179", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -43,7 +43,6 @@ use rustc::mir;\n use rustc::mir::visit::MutVisitor;\n \n use std::cell::Cell;\n-use std::io::prelude::*;\n use std::io;\n use std::rc::Rc;\n use std::str;"}, {"sha": "7558e0774b3625c08ae2287ca4ec4ce5e2b5126c", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -21,7 +21,7 @@ use def_key;\n use tyencode;\n use index::{self, IndexData};\n \n-use middle::cstore::{LOCAL_CRATE, CrateStore, InlinedItemRef, LinkMeta, tls};\n+use middle::cstore::{LOCAL_CRATE, InlinedItemRef, LinkMeta, tls};\n use rustc::hir::def;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use middle::dependency_format::Linkage;\n@@ -46,7 +46,6 @@ use syntax::abi::Abi;\n use syntax::ast::{self, NodeId, Name, CRATE_NODE_ID, CrateNum};\n use syntax::codemap::BytePos;\n use syntax::attr;\n-use syntax::attr::AttrMetaMethods;\n use syntax::errors::Handler;\n use syntax;\n use rbml::writer::Encoder;"}, {"sha": "4ecb7a28ef76fcf84c2da81ba271342e307ba18a", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -233,7 +233,6 @@ use std::cmp;\n use std::collections::HashMap;\n use std::fmt;\n use std::fs;\n-use std::io::prelude::*;\n use std::io;\n use std::path::{Path, PathBuf};\n use std::ptr;"}, {"sha": "4a4b7caf478ea44f92ea394be23c6e6e38505804", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -34,7 +34,6 @@ use rustc::hir::intravisit::{self, Visitor};\n \n use rustc::dep_graph::DepNode;\n use rustc::lint;\n-use rustc::middle::cstore::CrateStore;\n use rustc::hir::def::{self, Def};\n use rustc::hir::def_id::DefId;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};"}, {"sha": "f5e72195bc35628855cfdf1938ca6c1f0f41ddbe", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -21,7 +21,7 @@ use ParentLink::{ModuleParentLink, BlockParentLink};\n use Resolver;\n use {resolve_error, resolve_struct_error, ResolutionError};\n \n-use rustc::middle::cstore::{CrateStore, ChildItem, DlDef};\n+use rustc::middle::cstore::{ChildItem, DlDef};\n use rustc::lint;\n use rustc::hir::def::*;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};"}, {"sha": "e213a51fb3842f8267bbae6f589f779bbdc5cdbb", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -16,6 +16,8 @@\n // resolve data structures and because it finalises the privacy information for\n // `use` directives.\n //\n+// Unused trait imports can't be checked until the method resolution. We save\n+// candidates here, and do the acutal check in librustc_typeck/check_unused.rs.\n \n use std::ops::{Deref, DerefMut};\n \n@@ -55,10 +57,18 @@ impl<'a, 'b, 'tcx> UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     fn check_import(&mut self, id: ast::NodeId, span: Span) {\n         if !self.used_imports.contains(&(id, TypeNS)) &&\n            !self.used_imports.contains(&(id, ValueNS)) {\n+            if self.maybe_unused_trait_imports.contains(&id) {\n+                // Check later.\n+                return;\n+            }\n             self.session.add_lint(lint::builtin::UNUSED_IMPORTS,\n                                   id,\n                                   span,\n                                   \"unused import\".to_string());\n+        } else {\n+            // This trait import is definitely used, in a way other than\n+            // method resolution.\n+            self.maybe_unused_trait_imports.remove(&id);\n         }\n     }\n }"}, {"sha": "ff412be323a7fc3b536f84107de3a99e020e17d2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -47,18 +47,16 @@ use rustc::dep_graph::DepNode;\n use rustc::hir::map as hir_map;\n use rustc::session::Session;\n use rustc::lint;\n-use rustc::middle::cstore::CrateStore;\n use rustc::hir::def::*;\n use rustc::hir::def_id::DefId;\n use rustc::hir::pat_util::pat_bindings;\n use rustc::ty;\n use rustc::ty::subst::{ParamSpace, FnSpace, TypeSpace};\n-use rustc::hir::{Freevar, FreevarMap, TraitMap, GlobMap};\n-use rustc::util::nodemap::{NodeMap, FnvHashMap, FnvHashSet};\n+use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n+use rustc::util::nodemap::{NodeMap, NodeSet, FnvHashMap, FnvHashSet};\n \n use syntax::ast::{self, FloatTy};\n use syntax::ast::{CRATE_NODE_ID, Name, NodeId, CrateNum, IntTy, UintTy};\n-use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{self, Span, Pos};\n use syntax::errors::DiagnosticBuilder;\n use syntax::parse::token::{self, keywords};\n@@ -1056,6 +1054,7 @@ pub struct Resolver<'a, 'tcx: 'a> {\n \n     used_imports: HashSet<(NodeId, Namespace)>,\n     used_crates: HashSet<CrateNum>,\n+    maybe_unused_trait_imports: NodeSet,\n \n     privacy_errors: Vec<PrivacyError<'a>>,\n \n@@ -1151,13 +1150,15 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             export_map: NodeMap(),\n             trait_map: NodeMap(),\n             module_map: module_map,\n-            used_imports: HashSet::new(),\n-            used_crates: HashSet::new(),\n \n             emit_errors: true,\n             make_glob_map: make_glob_map == MakeGlobMap::Yes,\n             glob_map: NodeMap(),\n \n+            used_imports: HashSet::new(),\n+            used_crates: HashSet::new(),\n+            maybe_unused_trait_imports: NodeSet(),\n+\n             privacy_errors: Vec::new(),\n \n             arenas: arenas,\n@@ -1191,7 +1192,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     }\n \n     #[inline]\n-    fn record_use(&mut self, name: Name, ns: Namespace, binding: &'a NameBinding<'a>) {\n+    fn record_use(&mut self, name: Name, binding: &'a NameBinding<'a>) {\n         // track extern crates for unused_extern_crate lint\n         if let Some(DefId { krate, .. }) = binding.module().and_then(ModuleS::def_id) {\n             self.used_crates.insert(krate);\n@@ -1203,7 +1204,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             _ => return,\n         };\n \n-        self.used_imports.insert((directive.id, ns));\n         if let Some(error) = privacy_error.as_ref() {\n             self.privacy_errors.push((**error).clone());\n         }\n@@ -1506,7 +1506,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             false => module.resolve_name(name, namespace, false),\n         }.and_then(|binding| {\n             if record_used {\n-                self.record_use(name, namespace, binding);\n+                if let NameBindingKind::Import { directive, .. } = binding.kind {\n+                    self.used_imports.insert((directive.id, namespace));\n+                }\n+                self.record_use(name, binding);\n             }\n             Success(binding)\n         })\n@@ -3110,21 +3113,27 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n     }\n \n-    fn get_traits_containing_item(&mut self, name: Name) -> Vec<DefId> {\n+    fn get_traits_containing_item(&mut self, name: Name) -> Vec<TraitCandidate> {\n         debug!(\"(getting traits containing item) looking for '{}'\", name);\n \n-        fn add_trait_info(found_traits: &mut Vec<DefId>, trait_def_id: DefId, name: Name) {\n+        fn add_trait_info(found_traits: &mut Vec<TraitCandidate>,\n+                          trait_def_id: DefId,\n+                          import_id: Option<NodeId>,\n+                          name: Name) {\n             debug!(\"(adding trait info) found trait {:?} for method '{}'\",\n                    trait_def_id,\n                    name);\n-            found_traits.push(trait_def_id);\n+            found_traits.push(TraitCandidate {\n+                def_id: trait_def_id,\n+                import_id: import_id,\n+            });\n         }\n \n         let mut found_traits = Vec::new();\n         // Look for the current trait.\n         if let Some((trait_def_id, _)) = self.current_trait_ref {\n             if self.trait_item_map.contains_key(&(name, trait_def_id)) {\n-                add_trait_info(&mut found_traits, trait_def_id, name);\n+                add_trait_info(&mut found_traits, trait_def_id, None, name);\n             }\n         }\n \n@@ -3147,8 +3156,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 for &(trait_name, binding) in traits.as_ref().unwrap().iter() {\n                     let trait_def_id = binding.def().unwrap().def_id();\n                     if self.trait_item_map.contains_key(&(name, trait_def_id)) {\n-                        add_trait_info(&mut found_traits, trait_def_id, name);\n-                        self.record_use(trait_name, TypeNS, binding);\n+                        let mut import_id = None;\n+                        if let NameBindingKind::Import { directive, .. } = binding.kind {\n+                            let id = directive.id;\n+                            self.maybe_unused_trait_imports.insert(id);\n+                            import_id = Some(id);\n+                        }\n+                        add_trait_info(&mut found_traits, trait_def_id, import_id, name);\n+                        self.record_use(trait_name, binding);\n                     }\n                 }\n             };\n@@ -3522,6 +3537,7 @@ fn err_path_resolution() -> PathResolution {\n pub struct CrateMap {\n     pub def_map: RefCell<DefMap>,\n     pub freevars: FreevarMap,\n+    pub maybe_unused_trait_imports: NodeSet,\n     pub export_map: ExportMap,\n     pub trait_map: TraitMap,\n     pub glob_map: Option<GlobMap>,\n@@ -3559,6 +3575,7 @@ pub fn resolve_crate<'a, 'tcx>(session: &'a Session,\n     CrateMap {\n         def_map: resolver.def_map,\n         freevars: resolver.freevars,\n+        maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n         export_map: resolver.export_map,\n         trait_map: resolver.trait_map,\n         glob_map: if resolver.make_glob_map {"}, {"sha": "e37dd4cbc6eda653811acae2de5719884934da4a", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -25,7 +25,6 @@ use rustc::lint;\n use rustc::hir::def::*;\n \n use syntax::ast::{NodeId, Name};\n-use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{Span, DUMMY_SP};\n use syntax::util::lev_distance::find_best_match_for_name;\n "}, {"sha": "e654cef0c30562f6a41fa3bf25a1c6a2ae4321e1", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -13,8 +13,6 @@\n //! The `Dump` trait can be used together with `DumpVisitor` in order to\n //! retrieve the data from a crate.\n \n-use std::hash::Hasher;\n-\n use rustc::hir::def_id::DefId;\n use rustc::ty;\n use syntax::ast::{CrateNum, NodeId};"}, {"sha": "aea61da18a0a1c59a67721b43670c6fc147e442b", "filename": "src/librustc_trans/back/archive.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_trans%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_trans%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Farchive.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -21,8 +21,6 @@ use std::process::{Command, Output, Stdio};\n use std::ptr;\n use std::str;\n \n-use middle::cstore::CrateStore;\n-\n use libc;\n use llvm::archive_ro::{ArchiveRO, Child};\n use llvm::{self, ArchiveKind};"}, {"sha": "3e69bb204b92db525c5e09de347eaf824fd8aea3", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -19,7 +19,7 @@ use session::config::{OutputFilenames, Input, OutputType};\n use session::filesearch;\n use session::search_paths::PathKind;\n use session::Session;\n-use middle::cstore::{self, CrateStore, LinkMeta};\n+use middle::cstore::{self, LinkMeta};\n use middle::cstore::{LinkagePreference, NativeLibraryKind};\n use middle::dependency_format::Linkage;\n use CrateTranslation;"}, {"sha": "8055e97034e3f2f2a4b714cff9b5ae9d0daa01e9", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -16,7 +16,6 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n \n use back::archive;\n-use middle::cstore::CrateStore;\n use middle::dependency_format::Linkage;\n use session::Session;\n use session::config::CrateTypeDylib;"}, {"sha": "dd453bf996916e2afe6324fd9d7b94e3049003a4", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -35,7 +35,6 @@ use lint;\n use llvm::{BasicBlockRef, Linkage, ValueRef, Vector, get_param};\n use llvm;\n use rustc::cfg;\n-use middle::cstore::CrateStore;\n use rustc::hir::def_id::DefId;\n use rustc::infer;\n use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};"}, {"sha": "70348cf35e5f5a2c99a385bbf9674d244e14e1e7", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -39,7 +39,7 @@ use type_::Type;\n use value::Value;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::traits::{self, SelectionContext, ProjectionMode};\n-use rustc::ty::fold::{TypeFolder, TypeFoldable};\n+use rustc::ty::fold::TypeFoldable;\n use rustc::hir;\n use util::nodemap::NodeMap;\n "}, {"sha": "af175fbf88256eecb57cebe6f0863d909d94cc0f", "filename": "src/librustc_trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_trans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_trans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Finline.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::{AvailableExternallyLinkage, InternalLinkage, SetLinkage};\n-use middle::cstore::{CrateStore, FoundAst, InlinedItem};\n+use middle::cstore::{FoundAst, InlinedItem};\n use rustc::hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use base::{push_ctxt, trans_item, trans_fn};"}, {"sha": "b30277d745eb42ac94499bf9c8de17c199526ddb", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -71,7 +71,7 @@ use rustc::ty::adjustment::{AdjustUnsafeFnPointer, AdjustMutToConstPointer};\n use rustc::ty::{self, LvaluePreference, TypeAndMut, Ty, TyCtxt};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::error::TypeError;\n-use rustc::ty::relate::{RelateResult, TypeRelation};\n+use rustc::ty::relate::RelateResult;\n use util::common::indent;\n \n use std::cell::RefCell;"}, {"sha": "29a9ae9e5162d7ffb934f0c1e36c08b1301dc754", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -11,18 +11,15 @@\n //! Type-checking for the rust-intrinsic and platform-intrinsic\n //! intrinsics that the compiler exposes.\n \n-use astconv::AstConv;\n use intrinsics;\n use rustc::ty::subst::{self, Substs};\n use rustc::ty::FnSig;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::fold::TypeFolder;\n use {CrateCtxt, require_same_types};\n \n use std::collections::{HashMap};\n use syntax::abi::Abi;\n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n use syntax::parse::token;\n "}, {"sha": "26d1f50f8c549b16d8d6cf87dc70942a683510e3", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -10,7 +10,6 @@\n \n //! Method lookup: the secret sauce of Rust. See `README.md`.\n \n-use astconv::AstConv;\n use check::FnCtxt;\n use hir::def::Def;\n use hir::def_id::DefId;\n@@ -129,6 +128,11 @@ pub fn lookup<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     let mode = probe::Mode::MethodCall;\n     let self_ty = fcx.infcx().resolve_type_vars_if_possible(&self_ty);\n     let pick = probe::probe(fcx, span, mode, method_name, self_ty, call_expr.id)?;\n+\n+    if let Some(import_id) = pick.import_id {\n+        fcx.tcx().used_trait_imports.borrow_mut().insert(import_id);\n+    }\n+\n     Ok(confirm::confirm(fcx, span, self_expr, call_expr, self_ty, pick, supplied_method_types))\n }\n \n@@ -340,8 +344,12 @@ pub fn resolve_ufcs<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n {\n     let mode = probe::Mode::Path;\n     let pick = probe::probe(fcx, span, mode, method_name, self_ty, expr_id)?;\n-    let def = pick.item.def();\n \n+    if let Some(import_id) = pick.import_id {\n+        fcx.tcx().used_trait_imports.borrow_mut().insert(import_id);\n+    }\n+\n+    let def = pick.item.def();\n     if let probe::InherentImplPick = pick.kind {\n         if !pick.item.vis().is_accessible_from(fcx.body_id, &fcx.tcx().map) {\n             let msg = format!(\"{} `{}` is private\", def.kind_name(), &method_name.as_str());"}, {"sha": "0e064fbc45baaedc1797c2b0b88f6836a6e8ae2d", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -42,6 +42,7 @@ struct ProbeContext<'a, 'tcx:'a> {\n     inherent_candidates: Vec<Candidate<'tcx>>,\n     extension_candidates: Vec<Candidate<'tcx>>,\n     impl_dups: HashSet<DefId>,\n+    import_id: Option<ast::NodeId>,\n \n     /// Collects near misses when the candidate functions are missing a `self` keyword and is only\n     /// used for error reporting\n@@ -67,6 +68,7 @@ struct Candidate<'tcx> {\n     xform_self_ty: Ty<'tcx>,\n     item: ty::ImplOrTraitItem<'tcx>,\n     kind: CandidateKind<'tcx>,\n+    import_id: Option<ast::NodeId>,\n }\n \n #[derive(Debug)]\n@@ -84,6 +86,7 @@ enum CandidateKind<'tcx> {\n pub struct Pick<'tcx> {\n     pub item: ty::ImplOrTraitItem<'tcx>,\n     pub kind: PickKind<'tcx>,\n+    pub import_id: Option<ast::NodeId>,\n \n     // Indicates that the source expression should be autoderef'd N times\n     //\n@@ -247,6 +250,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             inherent_candidates: Vec::new(),\n             extension_candidates: Vec::new(),\n             impl_dups: HashSet::new(),\n+            import_id: None,\n             steps: Rc::new(steps),\n             opt_simplified_steps: opt_simplified_steps,\n             static_candidates: Vec::new(),\n@@ -435,7 +439,8 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         self.inherent_candidates.push(Candidate {\n             xform_self_ty: xform_self_ty,\n             item: item,\n-            kind: InherentImplCandidate(impl_substs, obligations)\n+            kind: InherentImplCandidate(impl_substs, obligations),\n+            import_id: self.import_id,\n         });\n     }\n \n@@ -463,7 +468,8 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             this.inherent_candidates.push(Candidate {\n                 xform_self_ty: xform_self_ty,\n                 item: item,\n-                kind: ObjectCandidate\n+                kind: ObjectCandidate,\n+                import_id: this.import_id,\n             });\n         });\n     }\n@@ -534,7 +540,8 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             this.inherent_candidates.push(Candidate {\n                 xform_self_ty: xform_self_ty,\n                 item: item,\n-                kind: WhereClauseCandidate(poly_trait_ref)\n+                kind: WhereClauseCandidate(poly_trait_ref),\n+                import_id: this.import_id,\n             });\n         });\n     }\n@@ -578,9 +585,13 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         let mut duplicates = HashSet::new();\n         let opt_applicable_traits = self.fcx.ccx.trait_map.get(&expr_id);\n         if let Some(applicable_traits) = opt_applicable_traits {\n-            for &trait_did in applicable_traits {\n+            for trait_candidate in applicable_traits {\n+                let trait_did = trait_candidate.def_id;\n                 if duplicates.insert(trait_did) {\n-                    self.assemble_extension_candidates_for_trait(trait_did)?;\n+                    self.import_id = trait_candidate.import_id;\n+                    let result = self.assemble_extension_candidates_for_trait(trait_did);\n+                    self.import_id = None;\n+                    result?;\n                 }\n             }\n         }\n@@ -680,7 +691,8 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             self.extension_candidates.push(Candidate {\n                 xform_self_ty: xform_self_ty,\n                 item: item.clone(),\n-                kind: ExtensionImplCandidate(impl_def_id, impl_substs, obligations)\n+                kind: ExtensionImplCandidate(impl_def_id, impl_substs, obligations),\n+                import_id: self.import_id,\n             });\n         });\n     }\n@@ -755,7 +767,8 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             self.inherent_candidates.push(Candidate {\n                 xform_self_ty: xform_self_ty,\n                 item: item.clone(),\n-                kind: TraitCandidate\n+                kind: TraitCandidate,\n+                import_id: self.import_id,\n             });\n         }\n \n@@ -812,7 +825,8 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                     self.extension_candidates.push(Candidate {\n                         xform_self_ty: xform_self_ty,\n                         item: item.clone(),\n-                        kind: TraitCandidate\n+                        kind: TraitCandidate,\n+                        import_id: self.import_id,\n                     });\n                 }\n             }\n@@ -843,7 +857,8 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             self.extension_candidates.push(Candidate {\n                 xform_self_ty: xform_self_ty,\n                 item: item.clone(),\n-                kind: WhereClauseCandidate(poly_bound)\n+                kind: WhereClauseCandidate(poly_bound),\n+                import_id: self.import_id,\n             });\n         }\n     }\n@@ -1141,6 +1156,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         Some(Pick {\n             item: probes[0].item.clone(),\n             kind: TraitPick,\n+            import_id: probes[0].import_id,\n             autoderefs: 0,\n             autoref: None,\n             unsize: None\n@@ -1346,6 +1362,7 @@ impl<'tcx> Candidate<'tcx> {\n                     WhereClausePick(trait_ref.clone())\n                 }\n             },\n+            import_id: self.import_id,\n             autoderefs: 0,\n             autoref: None,\n             unsize: None"}, {"sha": "6b90dcd54bf0f6c7e4db3c2f678f27b7ff94d728", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -13,11 +13,10 @@\n \n use CrateCtxt;\n \n-use astconv::AstConv;\n use check::{self, FnCtxt, UnresolvedTypeAction, autoderef};\n use rustc::hir::map as hir_map;\n use rustc::ty::{self, Ty, ToPolyTraitRef, ToPredicate, TypeFoldable};\n-use middle::cstore::{self, CrateStore};\n+use middle::cstore;\n use hir::def::Def;\n use hir::def_id::DefId;\n use middle::lang_items::FnOnceTraitLangItem;"}, {"sha": "10789228b97fea19fa27e73295876e92f53f9578", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -99,8 +99,7 @@ use rustc::ty::{self, ToPolyTraitRef, Ty, TyCtxt, Visibility};\n use rustc::ty::{MethodCall, MethodCallee};\n use rustc::ty::adjustment;\n use rustc::ty::error::TypeError;\n-use rustc::ty::fold::{TypeFolder, TypeFoldable};\n-use rustc::ty::relate::TypeRelation;\n+use rustc::ty::fold::TypeFoldable;\n use rustc::ty::util::{Representability, IntTypeExt};\n use require_c_abi_if_variadic;\n use rscope::{ElisionFailureInfo, RegionScope};"}, {"sha": "bda4c422880209e21a900e0b1d314dbeab5e9dbc", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -82,7 +82,6 @@\n //! relation, except that a borrowed pointer never owns its\n //! contents.\n \n-use astconv::AstConv;\n use check::dropck;\n use check::FnCtxt;\n use middle::free_region::FreeRegionMap;"}, {"sha": "ffdae2339705e2674a77bcef10ff2cb74e976b5b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use astconv::AstConv;\n use check::{FnCtxt, Inherited, blank_fn_ctxt, regionck};\n use constrained_type_params::{identify_constrained_type_params, Parameter};\n use CrateCtxt;\n@@ -17,7 +16,6 @@ use middle::region::{CodeExtent};\n use rustc::ty::subst::{self, TypeSpace, FnSpace, ParamSpace, SelfSpace};\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::fold::{TypeFolder};\n \n use std::cell::RefCell;\n use std::collections::HashSet;"}, {"sha": "4341ae5dac1cf984f98984dbbd852cb105d2ab92", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -13,7 +13,6 @@\n // substitutions.\n use self::ResolveReason::*;\n \n-use astconv::AstConv;\n use check::FnCtxt;\n use hir::def_id::DefId;\n use hir::pat_util;"}, {"sha": "3c594ebdf0bfcfcc6e6579b9ad462cbb0101dc69", "filename": "src/librustc_typeck/check_unused.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use lint;\n+use rustc::dep_graph::DepNode;\n+use rustc::ty::TyCtxt;\n+\n+use syntax::ast;\n+use syntax::codemap::{Span, DUMMY_SP};\n+\n+use rustc::hir;\n+use rustc::hir::intravisit::Visitor;\n+\n+struct UnusedTraitImportVisitor<'a, 'tcx: 'a> {\n+    tcx: &'a TyCtxt<'tcx>,\n+}\n+\n+impl<'a, 'tcx> UnusedTraitImportVisitor<'a, 'tcx> {\n+    fn check_import(&self, id: ast::NodeId, span: Span) {\n+        if !self.tcx.maybe_unused_trait_imports.contains(&id) {\n+            return;\n+        }\n+        if self.tcx.used_trait_imports.borrow().contains(&id) {\n+            return;\n+        }\n+        self.tcx.sess.add_lint(lint::builtin::UNUSED_IMPORTS,\n+                               id,\n+                               span,\n+                               \"unused import\".to_string());\n+    }\n+}\n+\n+impl<'a, 'tcx, 'v> Visitor<'v> for UnusedTraitImportVisitor<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &hir::Item) {\n+        if item.vis == hir::Public || item.span == DUMMY_SP {\n+            return;\n+        }\n+        if let hir::ItemUse(ref path) = item.node {\n+            match path.node {\n+                hir::ViewPathSimple(..) | hir::ViewPathGlob(..) => {\n+                    self.check_import(item.id, path.span);\n+                }\n+                hir::ViewPathList(_, ref path_list) => {\n+                    for path_item in path_list {\n+                        self.check_import(path_item.node.id(), path_item.span);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+pub fn check_crate(tcx: &TyCtxt) {\n+    let _task = tcx.dep_graph.in_task(DepNode::UnusedTraitCheck);\n+    let mut visitor = UnusedTraitImportVisitor { tcx: tcx };\n+    tcx.map.krate().visit_all_items(&mut visitor);\n+}"}, {"sha": "30d181abb9e9d1d6890024d56322dfe821866c19", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -12,7 +12,6 @@\n //! same type. Likewise, no two inherent impls for a given type\n //! constructor provide a method with the same name.\n \n-use middle::cstore::CrateStore;\n use hir::def_id::DefId;\n use rustc::traits::{self, ProjectionMode};\n use rustc::infer;"}, {"sha": "19807ab840b3a35f363944ba2242d31a214d02dd", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -73,7 +73,6 @@ use rustc::ty::subst::{Substs, FnSpace, ParamSpace, SelfSpace, TypeSpace, VecPer\n use rustc::ty::{ToPredicate, ImplContainer, ImplOrTraitItemContainer, TraitContainer};\n use rustc::ty::{self, ToPolyTraitRef, Ty, TyCtxt, TypeScheme};\n use rustc::ty::{VariantKind};\n-use rustc::ty::fold::{TypeFolder};\n use rustc::ty::util::IntTypeExt;\n use rscope::*;\n use rustc::dep_graph::DepNode;"}, {"sha": "ed393b54f0e2752e016cd55e7a7f32bf6269b3b0", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -122,6 +122,7 @@ use std::cell::RefCell;\n pub mod diagnostics;\n \n pub mod check;\n+pub mod check_unused;\n mod rscope;\n mod astconv;\n pub mod collect;\n@@ -363,6 +364,7 @@ pub fn check_crate(tcx: &TyCtxt, trait_map: hir::TraitMap) -> CompileResult {\n \n     time(time_passes, \"drop-impl checking\", || check::check_drop_impls(&ccx))?;\n \n+    check_unused::check_crate(tcx);\n     check_for_entry_fn(&ccx);\n \n     let err_count = tcx.sess.err_count();"}, {"sha": "742afdc5e98e5a073a832bb19eb48a8522f1b7a6", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -14,10 +14,9 @@ use std::collections::HashSet;\n use std::iter::once;\n \n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use rustc::hir;\n \n-use rustc::middle::cstore::{self, CrateStore};\n+use rustc::middle::cstore;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::hir::print as pprust;"}, {"sha": "f5b8db1143ed6d195bd818dff69788d4a3bb5a83", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -35,7 +35,7 @@ use syntax::parse::token::{self, InternedString, keywords};\n use syntax::ptr::P;\n \n use rustc_trans::back::link;\n-use rustc::middle::cstore::{self, CrateStore};\n+use rustc::middle::cstore;\n use rustc::middle::privacy::AccessLevels;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};"}, {"sha": "a168fe98a94cf8d2c3548ee4cacfe849493f6e1a", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::fmt;\n-use std::io::prelude::*;\n use std::io;\n \n use externalfiles::ExternalHtml;"}, {"sha": "a1275d23d5710fec3f651a7a5eec32204bc7800a", "filename": "src/libstd/collections/hash/bench.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibstd%2Fcollections%2Fhash%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibstd%2Fcollections%2Fhash%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fbench.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -11,7 +11,6 @@\n #![cfg(test)]\n \n extern crate test;\n-use prelude::v1::*;\n \n use self::test::Bencher;\n "}, {"sha": "e142c78569bd7ad597e3b71bfcb6db88df487023", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -350,7 +350,6 @@ mod test {\n     use prelude::v1::*;\n     use super::{Error, ErrorKind};\n     use error;\n-    use error::Error as error_Error;\n     use fmt;\n     use sys::os::error_string;\n "}, {"sha": "3cd45afaf014815e88d9c894e4ca2f3cb93269dc", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use prelude::v1::*;\n-use io::prelude::*;\n use os::windows::prelude::*;\n \n use ffi::OsString;"}, {"sha": "e7007fb05688bc7de0912515a8e5da23990bcf60", "filename": "src/libsyntax/errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibsyntax%2Ferrors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibsyntax%2Ferrors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Femitter.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -10,7 +10,7 @@\n \n use self::Destination::*;\n \n-use codemap::{self, COMMAND_LINE_SP, DUMMY_SP, Pos, Span, MultiSpan};\n+use codemap::{self, COMMAND_LINE_SP, DUMMY_SP, Span, MultiSpan};\n use diagnostics;\n \n use errors::check_old_skool;"}, {"sha": "2c21fd2cd5ed2e31ebce9d82ac5747f00fd8cb6d", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -12,7 +12,7 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast::{Expr, ItemKind, Generics, MetaItem, VariantData};\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;"}, {"sha": "5e4f43af669ca540678b83f9c27388bdd78ace3d", "filename": "src/test/compile-fail/dep-graph-trait-impl-two-traits-same-method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl-two-traits-same-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl-two-traits-same-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl-two-traits-same-method.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -15,6 +15,7 @@\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n+#![allow(unused_imports)]\n \n fn main() { }\n "}, {"sha": "40322f5a5b53b79f69c36a28fdde3e3c80ee7c6d", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -24,6 +24,8 @@ use test::A;       //~ ERROR unused import\n // Be sure that if we just bring some methods into scope that they're also\n // counted as being used.\n use test::B;\n+// But only when actually used: do not get confused by the method with the same name.\n+use test::B2; //~ ERROR unused import\n \n // Make sure this import is warned about when at least one of its imported names\n // is unused\n@@ -37,6 +39,7 @@ mod test2 {\n mod test {\n     pub trait A { fn a(&self) {} }\n     pub trait B { fn b(&self) {} }\n+    pub trait B2 { fn b(&self) {} }\n     pub struct C;\n     impl A for C {}\n     impl B for C {}"}, {"sha": "7e688b5ec6b461c62c2c8fa16c53ca524d904876", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -25,7 +25,7 @@ const TEST_REPOS: &'static [Test] = &[\n     Test {\n         name: \"cargo\",\n         repo: \"https://github.com/rust-lang/cargo\",\n-        sha: \"fae9c539388f1b7c70c31fd0a21b5dd9cd071177\",\n+        sha: \"26288f799427f9cc6e8bdddd782a17a8156ebc64\",\n         lock: None,\n     },\n     Test {"}, {"sha": "e0092f8e29e732b86d78369a833e9c4cb28d278d", "filename": "src/tools/rustbook/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Ftools%2Frustbook%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e414e0e3f27d1917d11ee80de827698beb53891/src%2Ftools%2Frustbook%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fmain.rs?ref=8e414e0e3f27d1917d11ee80de827698beb53891", "patch": "@@ -19,10 +19,8 @@ extern crate rustdoc;\n extern crate rustc_back;\n \n use std::env;\n-use std::error::Error;\n use std::process;\n use std::sync::atomic::{AtomicIsize, ATOMIC_ISIZE_INIT, Ordering};\n-use subcommand::Subcommand;\n use term::Term;\n \n mod term;"}]}