{"sha": "5be304b0b411af49e4f0e7196a35c034f430cc85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZTMwNGIwYjQxMWFmNDllNGYwZTcxOTZhMzVjMDM0ZjQzMGNjODU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-17T13:11:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-25T14:48:53Z"}, "message": "miri: simplify shift operator overflow checking", "tree": {"sha": "975a433572c037afce0d8889feccbdc47644c4f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/975a433572c037afce0d8889feccbdc47644c4f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5be304b0b411af49e4f0e7196a35c034f430cc85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5be304b0b411af49e4f0e7196a35c034f430cc85", "html_url": "https://github.com/rust-lang/rust/commit/5be304b0b411af49e4f0e7196a35c034f430cc85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5be304b0b411af49e4f0e7196a35c034f430cc85/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdb50c6f2507319f29104a25765bfb79ad53395c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb50c6f2507319f29104a25765bfb79ad53395c", "html_url": "https://github.com/rust-lang/rust/commit/cdb50c6f2507319f29104a25765bfb79ad53395c"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "cb0aaa4d40d3ee5b790d5d1ad4280d039f07a29b", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5be304b0b411af49e4f0e7196a35c034f430cc85/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be304b0b411af49e4f0e7196a35c034f430cc85/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=5be304b0b411af49e4f0e7196a35c034f430cc85", "patch": "@@ -1,3 +1,5 @@\n+use std::convert::TryFrom;\n+\n use rustc::mir;\n use rustc::mir::interpret::{InterpResult, Scalar};\n use rustc::ty::{\n@@ -130,28 +132,27 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Shift ops can have an RHS with a different numeric type.\n         if bin_op == Shl || bin_op == Shr {\n             let signed = left_layout.abi.is_signed();\n-            let mut oflo = (r as u32 as u128) != r;\n-            let mut r = r as u32;\n-            let size = left_layout.size;\n-            oflo |= r >= size.bits() as u32;\n-            r %= size.bits() as u32;\n+            let size = u128::from(left_layout.size.bits());\n+            let overflow = r >= size;\n+            let r = r % size; // mask to type size\n+            let r = u32::try_from(r).unwrap(); // we masked so this will always fit\n             let result = if signed {\n                 let l = self.sign_extend(l, left_layout) as i128;\n                 let result = match bin_op {\n-                    Shl => l << r,\n-                    Shr => l >> r,\n+                    Shl => l.checked_shl(r).unwrap(),\n+                    Shr => l.checked_shr(r).unwrap(),\n                     _ => bug!(\"it has already been checked that this is a shift op\"),\n                 };\n                 result as u128\n             } else {\n                 match bin_op {\n-                    Shl => l << r,\n-                    Shr => l >> r,\n+                    Shl => l.checked_shl(r).unwrap(),\n+                    Shr => l.checked_shr(r).unwrap(),\n                     _ => bug!(\"it has already been checked that this is a shift op\"),\n                 }\n             };\n             let truncated = self.truncate(result, left_layout);\n-            return Ok((Scalar::from_uint(truncated, size), oflo, left_layout.ty));\n+            return Ok((Scalar::from_uint(truncated, left_layout.size), overflow, left_layout.ty));\n         }\n \n         // For the remaining ops, the types must be the same on both sides\n@@ -193,7 +194,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 _ => None,\n             };\n             if let Some(op) = op {\n-                let l128 = self.sign_extend(l, left_layout) as i128;\n                 let r = self.sign_extend(r, right_layout) as i128;\n                 // We need a special check for overflowing remainder:\n                 // \"int_min % -1\" overflows and returns 0, but after casting things to a larger int\n@@ -206,8 +206,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     }\n                     _ => {}\n                 }\n+                let l = self.sign_extend(l, left_layout) as i128;\n \n-                let (result, oflo) = op(l128, r);\n+                let (result, oflo) = op(l, r);\n                 // This may be out-of-bounds for the result type, so we have to truncate ourselves.\n                 // If that truncation loses any information, we have an overflow.\n                 let result = result as u128;"}]}