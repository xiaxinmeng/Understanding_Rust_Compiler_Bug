{"sha": "c594959cdff07b5545747809bb045bfa2868ebcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OTQ5NTljZGZmMDdiNTU0NTc0NzgwOWJiMDQ1YmZhMjg2OGViY2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-01T06:36:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-01T06:36:24Z"}, "message": "auto merge of #19388 : nick29581/rust/rc-show, r=alexcrichto\n\nr? @huonw or @alexcrichton\r\n\r\nApparently, we have previously rejected an RFC like this. However, since then we removed `{:?}` and so without this debugging gets really difficult as soon as there is a RefCell anywhere, so I believe there is more benefit to adding these impls than there was before. By using \"try_borrow\" we can avoid panicing in `Show` (I think).\r\n\r\n@ huon in response to a comment in #19254: I noticed that `drop()` checks for the ptr being null, so I checked here too. Now I am checking for both, if you're confident I can change to only checking `strong()`.", "tree": {"sha": "513aa126d93284020db5f97fd32ed45b0e0f26af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/513aa126d93284020db5f97fd32ed45b0e0f26af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c594959cdff07b5545747809bb045bfa2868ebcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c594959cdff07b5545747809bb045bfa2868ebcc", "html_url": "https://github.com/rust-lang/rust/commit/c594959cdff07b5545747809bb045bfa2868ebcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c594959cdff07b5545747809bb045bfa2868ebcc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47b8479e73e40395f1b1b2d0c6281f28f80301e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/47b8479e73e40395f1b1b2d0c6281f28f80301e4", "html_url": "https://github.com/rust-lang/rust/commit/47b8479e73e40395f1b1b2d0c6281f28f80301e4"}, {"sha": "f0976e2cf3f6b0027f118b791e0888b29fbb41a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0976e2cf3f6b0027f118b791e0888b29fbb41a7", "html_url": "https://github.com/rust-lang/rust/commit/f0976e2cf3f6b0027f118b791e0888b29fbb41a7"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "bd2509388364952f41894987200747908e847c4e", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c594959cdff07b5545747809bb045bfa2868ebcc/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594959cdff07b5545747809bb045bfa2868ebcc/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=c594959cdff07b5545747809bb045bfa2868ebcc", "patch": "@@ -719,6 +719,13 @@ impl<T> Clone for Weak<T> {\n     }\n }\n \n+#[experimental = \"Show is experimental.\"]\n+impl<T: fmt::Show> fmt::Show for Weak<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"(Weak)\")\n+    }\n+}\n+\n #[doc(hidden)]\n trait RcBoxPtr<T> {\n     fn inner(&self) -> &RcBox<T>;"}, {"sha": "4b246860006abc5fc5819de36126b9ed69e57cbb", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c594959cdff07b5545747809bb045bfa2868ebcc/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594959cdff07b5545747809bb045bfa2868ebcc/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=c594959cdff07b5545747809bb045bfa2868ebcc", "patch": "@@ -158,6 +158,7 @@\n use clone::Clone;\n use cmp::PartialEq;\n use default::Default;\n+use fmt;\n use kinds::{Copy, Send};\n use ops::{Deref, DerefMut, Drop};\n use option::Option;\n@@ -365,6 +366,16 @@ impl<T: PartialEq> PartialEq for RefCell<T> {\n     }\n }\n \n+#[unstable]\n+impl<T:fmt::Show> fmt::Show for RefCell<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.try_borrow() {\n+            Some(val) => write!(f, \"{}\", val),\n+            None => write!(f, \"<borrowed RefCell>\")\n+        }\n+    }\n+}\n+\n struct BorrowRef<'b> {\n     _borrow: &'b Cell<BorrowFlag>,\n }"}, {"sha": "10756f21551a021b2e3dcc149802a82ac6759b7b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c594959cdff07b5545747809bb045bfa2868ebcc/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c594959cdff07b5545747809bb045bfa2868ebcc/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c594959cdff07b5545747809bb045bfa2868ebcc", "patch": "@@ -88,6 +88,7 @@ use syntax::visit::{mod, Visitor};\n use std::collections::{HashMap, HashSet};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::cell::{Cell, RefCell};\n+use std::fmt;\n use std::mem::replace;\n use std::rc::{Rc, Weak};\n use std::uint;\n@@ -178,7 +179,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n }\n \n /// Contains data for specific types of import directives.\n-#[deriving(Copy)]\n+#[deriving(Copy,Show)]\n enum ImportDirectiveSubclass {\n     SingleImport(Name /* target */, Name /* source */),\n     GlobImport\n@@ -309,6 +310,7 @@ enum Shadowable {\n }\n \n /// One import directive.\n+#[deriving(Show)]\n struct ImportDirective {\n     module_path: Vec<Name>,\n     subclass: ImportDirectiveSubclass,\n@@ -338,7 +340,7 @@ impl ImportDirective {\n }\n \n /// The item that an import resolves to.\n-#[deriving(Clone)]\n+#[deriving(Clone,Show)]\n struct Target {\n     target_module: Rc<Module>,\n     bindings: Rc<NameBindings>,\n@@ -359,6 +361,7 @@ impl Target {\n }\n \n /// An ImportResolution represents a particular `use` directive.\n+#[deriving(Show)]\n struct ImportResolution {\n     /// Whether this resolution came from a `use` or a `pub use`. Note that this\n     /// should *not* be used whenever resolution is being performed, this is\n@@ -438,15 +441,15 @@ impl ImportResolution {\n }\n \n /// The link from a module up to its nearest parent node.\n-#[deriving(Clone)]\n+#[deriving(Clone,Show)]\n enum ParentLink {\n     NoParentLink,\n     ModuleParentLink(Weak<Module>, Name),\n     BlockParentLink(Weak<Module>, NodeId)\n }\n \n /// The type of module this is.\n-#[deriving(Copy, PartialEq)]\n+#[deriving(Copy, PartialEq, Show)]\n enum ModuleKind {\n     NormalModuleKind,\n     TraitModuleKind,\n@@ -528,6 +531,15 @@ impl Module {\n     }\n }\n \n+impl fmt::Show for Module {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{}, kind: {}, {}\",\n+               self.def_id,\n+               self.kind,\n+               if self.is_public { \"public\" } else { \"private\" } )\n+    }\n+}\n+\n bitflags! {\n     #[deriving(Show)]\n     flags DefModifiers: u8 {\n@@ -537,7 +549,7 @@ bitflags! {\n }\n \n // Records a possibly-private type definition.\n-#[deriving(Clone)]\n+#[deriving(Clone,Show)]\n struct TypeNsDef {\n     modifiers: DefModifiers, // see note in ImportResolution about how to use this\n     module_def: Option<Rc<Module>>,\n@@ -555,6 +567,7 @@ struct ValueNsDef {\n \n // Records the definitions (at most one for each namespace) that a name is\n // bound to.\n+#[deriving(Show)]\n struct NameBindings {\n     type_def: RefCell<Option<TypeNsDef>>,   //< Meaning in type namespace.\n     value_def: RefCell<Option<ValueNsDef>>, //< Meaning in value namespace."}]}