{"sha": "4f7532765967ea174816a23c11188aa8c7865966", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNzUzMjc2NTk2N2VhMTc0ODE2YTIzYzExMTg4YWE4Yzc4NjU5NjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T22:08:28Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T22:08:47Z"}, "message": "typeck/pat.rs: dedup in `check_pat_ref`.", "tree": {"sha": "dc3f3eb31bb6b6c21f06f40d96868851239cfd4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc3f3eb31bb6b6c21f06f40d96868851239cfd4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f7532765967ea174816a23c11188aa8c7865966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7532765967ea174816a23c11188aa8c7865966", "html_url": "https://github.com/rust-lang/rust/commit/4f7532765967ea174816a23c11188aa8c7865966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f7532765967ea174816a23c11188aa8c7865966/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fbfcd88728a2c2c6400868fbd19117527d81e0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fbfcd88728a2c2c6400868fbd19117527d81e0b", "html_url": "https://github.com/rust-lang/rust/commit/5fbfcd88728a2c2c6400868fbd19117527d81e0b"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "7506cbdd5104ad7fa932600f42eaebb876908959", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4f7532765967ea174816a23c11188aa8c7865966/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7532765967ea174816a23c11188aa8c7865966/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=4f7532765967ea174816a23c11188aa8c7865966", "patch": "@@ -981,18 +981,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n         let expected = self.shallow_resolve(expected);\n-        if self.check_dereferencable(pat.span, expected, &inner) {\n+        let (rptr_ty, inner_ty) = if self.check_dereferencable(pat.span, expected, &inner) {\n             // `demand::subtype` would be good enough, but using `eqtype` turns\n             // out to be equally general. See (note_1) for details.\n \n             // Take region, inner-type from expected type if we can,\n             // to avoid creating needless variables. This also helps with\n             // the bad  interactions of the given hack detailed in (note_1).\n             debug!(\"check_pat_ref: expected={:?}\", expected);\n-            let (rptr_ty, inner_ty) = match expected.sty {\n-                ty::Ref(_, r_ty, r_mutbl) if r_mutbl == mutbl => {\n-                    (expected, r_ty)\n-                }\n+            match expected.sty {\n+                ty::Ref(_, r_ty, r_mutbl) if r_mutbl == mutbl => (expected, r_ty),\n                 _ => {\n                     let inner_ty = self.next_ty_var(\n                         TypeVariableOrigin {\n@@ -1012,14 +1010,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     (rptr_ty, inner_ty)\n                 }\n-            };\n-\n-            self.check_pat(&inner, inner_ty, def_bm, discrim_span);\n-            rptr_ty\n+            }\n         } else {\n-            self.check_pat(&inner, tcx.types.err, def_bm, discrim_span);\n-            tcx.types.err\n-        }\n+            (tcx.types.err, tcx.types.err)\n+        };\n+        self.check_pat(&inner, inner_ty, def_bm, discrim_span);\n+        rptr_ty\n     }\n \n     /// Create a reference type with a fresh region variable."}]}