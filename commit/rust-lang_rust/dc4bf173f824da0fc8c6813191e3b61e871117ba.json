{"sha": "dc4bf173f824da0fc8c6813191e3b61e871117ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNGJmMTczZjgyNGRhMGZjOGM2ODEzMTkxZTNiNjFlODcxMTE3YmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-07-13T04:05:59Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-07-17T21:57:55Z"}, "message": "test: Fix tests.", "tree": {"sha": "3751e1c23acb336eb302432ea836b8e7ae1fe500", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3751e1c23acb336eb302432ea836b8e7ae1fe500"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc4bf173f824da0fc8c6813191e3b61e871117ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4bf173f824da0fc8c6813191e3b61e871117ba", "html_url": "https://github.com/rust-lang/rust/commit/dc4bf173f824da0fc8c6813191e3b61e871117ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc4bf173f824da0fc8c6813191e3b61e871117ba/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88fe4ae09c2240fcb10fef98a0f5a61559849902", "url": "https://api.github.com/repos/rust-lang/rust/commits/88fe4ae09c2240fcb10fef98a0f5a61559849902", "html_url": "https://github.com/rust-lang/rust/commit/88fe4ae09c2240fcb10fef98a0f5a61559849902"}], "stats": {"total": 183, "additions": 30, "deletions": 153}, "files": [{"sha": "dbd05e9d5918f04caf1c9ed84ce8047a02f21ff9", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=dc4bf173f824da0fc8c6813191e3b61e871117ba", "patch": "@@ -40,17 +40,6 @@ pub mod runtest;\n pub mod common;\n pub mod errors;\n \n-<<<<<<< HEAD\n-=======\n-mod std {\n-    pub use core::clone;\n-    pub use core::cmp;\n-    pub use core::str;\n-    pub use core::sys;\n-    pub use core::unstable;\n-}\n-\n->>>>>>> test: Fix tests.\n pub fn main() {\n     let args = os::args();\n     let config = parse_config(args);\n@@ -91,7 +80,7 @@ pub fn parse_config(args: ~[~str]) -> config {\n          ];\n \n     assert!(!args.is_empty());\n-    let argv0 = copy args[0];\n+    let argv0 = args[0].clone();\n     let args_ = args.tail();\n     if args[1] == ~\"-h\" || args[1] == ~\"--help\" {\n         let message = fmt!(\"Usage: %s [OPTIONS] [TESTNAME...]\", argv0);\n@@ -128,17 +117,10 @@ pub fn parse_config(args: ~[~str]) -> config {\n         mode: str_mode(getopts::opt_str(matches, \"mode\")),\n         run_ignored: getopts::opt_present(matches, \"ignored\"),\n         filter:\n-<<<<<<< HEAD\n             if !matches.free.is_empty() {\n                  Some(matches.free[0].clone())\n             } else {\n                 None\n-=======\n-             if !matches.free.is_empty() {\n-                option::Some(matches.free[0].clone())\n-             } else {\n-                option::None\n->>>>>>> test: Fix tests.\n             },\n         logfile: getopts::opt_maybe_str(matches, \"logfile\").map(|s| Path(*s)),\n         save_metrics: getopts::opt_maybe_str(matches, \"save-metrics\").map(|s| Path(*s)),"}, {"sha": "a2f36c104a0a27d1cb7a1b40f2867530dc222f84", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=dc4bf173f824da0fc8c6813191e3b61e871117ba", "patch": "@@ -852,7 +852,7 @@ fn make_o_name(config: &config, testfile: &Path) -> Path {\n \n fn append_suffix_to_stem(p: &Path, suffix: &str) -> Path {\n     if suffix.len() == 0 {\n-        copy *p\n+        (*p).clone()\n     } else {\n         let stem = p.filestem().get();\n         p.with_filestem(stem + \"-\" + suffix)"}, {"sha": "d940b6d6667f57f0c6cac4cff99951fc6b3bcdce", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=dc4bf173f824da0fc8c6813191e3b61e871117ba", "patch": "@@ -45,6 +45,8 @@ A BigDigit is half the size of machine word size.\n #[cfg(target_arch = \"x86_64\")]\n pub type BigDigit = u32;\n \n+pub static ZERO_BIG_DIGIT: BigDigit = 0;\n+\n pub mod BigDigit {\n     use bigint::BigDigit;\n \n@@ -614,7 +616,8 @@ impl BigUint {\n     priv fn shl_unit(&self, n_unit: uint) -> BigUint {\n         if n_unit == 0 || self.is_zero() { return (*self).clone(); }\n \n-        return BigUint::new(vec::from_elem(n_unit, 0u32) + self.data);\n+        return BigUint::new(vec::from_elem(n_unit, ZERO_BIG_DIGIT)\n+                            + self.data);\n     }\n \n "}, {"sha": "6f8ca6500c6d832521d908451f1261d5bab5fe70", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=dc4bf173f824da0fc8c6813191e3b61e871117ba", "patch": "@@ -417,28 +417,28 @@ mod tests {\n \n     #[cfg(test)]\n     fn test_parameterized<T:Clone + Eq>(a: T, b: T, c: T, d: T) {\n-        let mut deq = Deque::new();\n+        let mut deq = RingBuf::new();\n         assert_eq!(deq.len(), 0);\n-        deq.add_front(a.clone());\n-        deq.add_front(b.clone());\n-        deq.add_back(c.clone());\n+        deq.push_front(a.clone());\n+        deq.push_front(b.clone());\n+        deq.push_back(c.clone());\n         assert_eq!(deq.len(), 3);\n-        deq.add_back(d.clone());\n+        deq.push_back(d.clone());\n         assert_eq!(deq.len(), 4);\n-        assert_eq!((*deq.peek_front()).clone(), b.clone());\n-        assert_eq!((*deq.peek_back()).clone(), d.clone());\n-        assert_eq!(deq.pop_front(), b.clone());\n-        assert_eq!(deq.pop_back(), d.clone());\n-        assert_eq!(deq.pop_back(), c.clone());\n-        assert_eq!(deq.pop_back(), a.clone());\n+        assert_eq!((*deq.front().get()).clone(), b.clone());\n+        assert_eq!((*deq.back().get()).clone(), d.clone());\n+        assert_eq!(deq.pop_front().get(), b.clone());\n+        assert_eq!(deq.pop_back().get(), d.clone());\n+        assert_eq!(deq.pop_back().get(), c.clone());\n+        assert_eq!(deq.pop_back().get(), a.clone());\n         assert_eq!(deq.len(), 0);\n-        deq.add_back(c.clone());\n+        deq.push_back(c.clone());\n         assert_eq!(deq.len(), 1);\n-        deq.add_front(b.clone());\n+        deq.push_front(b.clone());\n         assert_eq!(deq.len(), 2);\n-        deq.add_back(d.clone());\n+        deq.push_back(d.clone());\n         assert_eq!(deq.len(), 3);\n-        deq.add_front(a.clone());\n+        deq.push_front(a.clone());\n         assert_eq!(deq.len(), 4);\n         assert_eq!((*deq.get(0)).clone(), a.clone());\n         assert_eq!((*deq.get(1)).clone(), b.clone());"}, {"sha": "4269447c7eac3112ad344be76d04d7f88554e60c", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=dc4bf173f824da0fc8c6813191e3b61e871117ba", "patch": "@@ -1021,6 +1021,7 @@ mod big_tests {\n \n     use sort::*;\n \n+    use std::cast::unsafe_copy;\n     use std::local_data;\n     use std::rand::RngUtil;\n     use std::rand;"}, {"sha": "b9713fffb654b48bbb75b72f5e86a0deeb696661", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=dc4bf173f824da0fc8c6813191e3b61e871117ba", "patch": "@@ -663,7 +663,7 @@ mod test {\n                 let server_stream_watcher = server_stream_watcher;\n                 rtdebug!(\"starting read\");\n                 let alloc: AllocCallback = |size| {\n-                    vec_to_uv_buf(vec::from_elem(size, 0))\n+                    vec_to_uv_buf(vec::from_elem(size, 0u8))\n                 };\n                 do client_tcp_watcher.read_start(alloc) |stream_watcher, nread, buf, status| {\n \n@@ -803,7 +803,7 @@ mod test {\n \n             rtdebug!(\"starting read\");\n             let alloc: AllocCallback = |size| {\n-                vec_to_uv_buf(vec::from_elem(size, 0))\n+                vec_to_uv_buf(vec::from_elem(size, 0u8))\n             };\n \n             do server.recv_start(alloc) |server, nread, buf, src, flags, status| {\n@@ -862,7 +862,7 @@ mod test {\n \n             rtdebug!(\"starting read\");\n             let alloc: AllocCallback = |size| {\n-                vec_to_uv_buf(vec::from_elem(size, 0))\n+                vec_to_uv_buf(vec::from_elem(size, 0u8))\n             };\n \n             do server.recv_start(alloc) |server, nread, buf, src, flags, status| {"}, {"sha": "085510171ee99fd5b6f4b1bf9384d5ff0fcf0a88", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=dc4bf173f824da0fc8c6813191e3b61e871117ba", "patch": "@@ -3468,7 +3468,7 @@ mod tests {\n         assert_eq!(values, [2, 3, 5, 6, 7]);\n     }\n \n-    #[deriving(Eq)]\n+    #[deriving(Clone, Eq)]\n     struct Foo;\n \n     #[test]"}, {"sha": "a6888460a3fc583651c0a4f72d9416bf8e187bcf", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=dc4bf173f824da0fc8c6813191e3b61e871117ba", "patch": "@@ -199,11 +199,7 @@ fn bfs2(graph: graph, key: node_id) -> bfs_result {\n               white => {\n                 let i = i as node_id;\n \n-<<<<<<< HEAD\n                 let neighbors = &graph[i];\n-=======\n-                let neighbors = graph[i].clone();\n->>>>>>> librustc: Remove all uses of \"copy\".\n \n                 let mut color = white;\n "}, {"sha": "bfb1e910495dedfa24e90c14fec9589b71131a56", "filename": "src/test/compile-fail/closure-bounds-cant-mutably-borrow-with-copy.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-mutably-borrow-with-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-mutably-borrow-with-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-mutably-borrow-with-copy.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -1,44 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Tests correct kind-checking of the reason stack closures without the :Copy\n-// bound must be noncopyable. For details see\n-// http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/\n-\n-struct R<'self> {\n-    // This struct is needed to create the\n-    // otherwise infinite type of a fn that\n-    // accepts itself as argument:\n-    c: &'self fn:Copy(&R, bool)\n-}\n-\n-fn innocent_looking_victim() {\n-    let mut x = Some(~\"hello\");\n-    do conspirator |f, writer| {\n-        if writer {\n-            x = None; //~ ERROR cannot implicitly borrow\n-        } else {\n-            match x {\n-                Some(ref msg) => {\n-                    (f.c)(f, true);\n-                    println(fmt!(\"%?\", msg));\n-                },\n-                None => fail!(\"oops\"),\n-            }\n-        }\n-    }\n-}\n-\n-fn conspirator(f: &fn:Copy(&R, bool)) {\n-    let r = R {c: f};\n-    f(&r, false)\n-}\n-\n-fn main() { innocent_looking_victim() }"}, {"sha": "c3c929a22888301af3df232877ab724fdf1c7002", "filename": "src/test/compile-fail/kindck-owned.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs?ref=dc4bf173f824da0fc8c6813191e3b61e871117ba", "patch": "@@ -24,14 +24,4 @@ fn main() {\n \n     copy2(@3);\n     copy2(@&x); //~ ERROR does not fulfill `'static`\n-<<<<<<< HEAD\n-\n-    let boxed: @fn() = || {};\n-    copy2(boxed);\n-    let owned: ~fn() = || {};\n-    copy2(owned);    //~ ERROR does not fulfill `Copy`\n-    let borrowed: &fn:Copy() = || {};\n-    copy2(borrowed); //~ ERROR does not fulfill `'static`\n-=======\n->>>>>>> librustc: Remove all uses of \"copy\".\n }"}, {"sha": "6f524c0068b9dd150f139dc9069351563ccaf08a", "filename": "src/test/compile-fail/once-cant-copy-stack-once-fn-copy.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Ftest%2Fcompile-fail%2Fonce-cant-copy-stack-once-fn-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Ftest%2Fcompile-fail%2Fonce-cant-copy-stack-once-fn-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-copy-stack-once-fn-copy.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Though it should be legal to copy a heap-allocated \"once fn:Copy\",\n-// stack closures are not deep-copied, so (counterintuitively) it should be\n-// illegal to copy them.\n-\n-fn foo<'r>(blk: &'r once fn:Copy()) -> (&'r once fn:Copy(), &'r once fn:Copy()) {\n-    (copy blk, blk) //~ ERROR copying a value of non-copyable type\n-}\n-\n-fn main() {\n-}"}, {"sha": "8bb57ebaaf58d3cf6d6ef3372846309c4a419f0c", "filename": "src/test/run-pass/closure-bounds-recursive-stack-closure.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Ftest%2Frun-pass%2Fclosure-bounds-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Ftest%2Frun-pass%2Fclosure-bounds-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-recursive-stack-closure.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Ensures that it's legal to create a recursive stack closure as long as\n-// its environment is copyable\n-\n-struct R<'self> {\n-    // This struct is needed to create the\n-    // otherwise infinite type of a fn that\n-    // accepts itself as argument:\n-    c: &'self fn:Copy(&R, uint) -> uint\n-}\n-\n-fn main() {\n-    // Stupid version of fibonacci.\n-    let fib: &fn:Copy(&R, uint) -> uint = |fib, x| {\n-        if x == 0 || x == 1 {\n-            x\n-        } else {\n-            (fib.c)(fib, x-1) + (fib.c)(fib, x-2)\n-        }\n-    };\n-    assert!(fib(&R { c: fib }, 7) == 13);\n-}"}, {"sha": "532f4bc7ffb195a40dc52055fdb5b1e1cc2d7d95", "filename": "src/test/run-pass/generic-static-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs?ref=dc4bf173f824da0fc8c6813191e3b61e871117ba", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait vec_utils<T> {\n-    fn map_<U:Copy>(x: &Self, f: &fn(&T) -> U) -> ~[U];\n+    fn map_<U>(x: &Self, f: &fn(&T) -> U) -> ~[U];\n }\n \n impl<T> vec_utils<T> for ~[T] {\n-    fn map_<U:Copy>(x: &~[T], f: &fn(&T) -> U) -> ~[U] {\n+    fn map_<U>(x: &~[T], f: &fn(&T) -> U) -> ~[U] {\n         let mut r = ~[];\n         for x.iter().advance |elt| {\n             r.push(f(elt));"}, {"sha": "92095335fc41aeece7aabd572b85cdde78f458dc", "filename": "src/test/run-pass/match-drop-strs-issue-4541.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs?ref=dc4bf173f824da0fc8c6813191e3b61e871117ba", "patch": "@@ -10,7 +10,7 @@ fn parse_args() -> ~str {\n     let mut n = 0;\n \n     while n < args.len() {\n-        match copy args[n] {\n+        match args[n].clone() {\n             ~\"-v\" => (),\n             s => {\n                 return s;"}, {"sha": "d1d8ab7e40bb570cbcaf6f623446e5e0ff46c2b4", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4bf173f824da0fc8c6813191e3b61e871117ba/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=dc4bf173f824da0fc8c6813191e3b61e871117ba", "patch": "@@ -172,7 +172,7 @@ pub fn main() {\n     visit_ty::<~[int]>(vv);\n \n     for v.types.iter().advance |s| {\n-        println(fmt!(\"type: %s\", copy *s));\n+        println(fmt!(\"type: %s\", (*s).clone()));\n     }\n     assert_eq!((*v.types).clone(), ~[~\"bool\", ~\"int\", ~\"i8\", ~\"i16\", ~\"[\", ~\"int\", ~\"]\"]);\n }"}]}