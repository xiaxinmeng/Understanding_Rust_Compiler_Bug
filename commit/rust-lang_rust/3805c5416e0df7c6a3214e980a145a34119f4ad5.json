{"sha": "3805c5416e0df7c6a3214e980a145a34119f4ad5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MDVjNTQxNmUwZGY3YzZhMzIxNGU5ODBhMTQ1YTM0MTE5ZjRhZDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-10T12:44:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-11T21:55:25Z"}, "message": "test -- update tests with new error messages", "tree": {"sha": "802d0092e0af3c7cc96bcc5563afeaf45ecb47e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/802d0092e0af3c7cc96bcc5563afeaf45ecb47e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3805c5416e0df7c6a3214e980a145a34119f4ad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3805c5416e0df7c6a3214e980a145a34119f4ad5", "html_url": "https://github.com/rust-lang/rust/commit/3805c5416e0df7c6a3214e980a145a34119f4ad5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3805c5416e0df7c6a3214e980a145a34119f4ad5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bd7b182c5edeb33c8164cfc99d1f89ad849057e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd7b182c5edeb33c8164cfc99d1f89ad849057e", "html_url": "https://github.com/rust-lang/rust/commit/1bd7b182c5edeb33c8164cfc99d1f89ad849057e"}], "stats": {"total": 177, "additions": 92, "deletions": 85}, "files": [{"sha": "653f37d96d473d8bb41cb12cfcc808d59c3e6ff3", "filename": "src/test/compile-fail/arc-rw-read-mode-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     let mut y = None;\n     x.write_downgrade(|write_mode| {\n         y = Some(x.downgrade(write_mode));\n-        //~^ ERROR cannot infer an appropriate lifetime\n+        //~^ ERROR cannot infer\n     });\n     y.unwrap();\n     // Adding this line causes a method unification failure instead"}, {"sha": "dec248a3015d58f2cc175e22a90326e369c72bd4", "filename": "src/test/compile-fail/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -32,9 +32,9 @@ fn b() {\n \n     let mut p = ~[1];\n \n-    borrow(p, || {\n-        p[0] = 5; //~ ERROR cannot assign to\n-    });\n+    borrow(\n+        p,\n+        || p[0] = 5); //~ ERROR cannot borrow `p` as mutable\n }\n \n fn c() {"}, {"sha": "29016a2f44f14921b9f94ab318ff6e7da54634b8", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -21,13 +21,14 @@ impl X {\n \n fn main() {\n     let mut x = X(Right(main));\n-    (&mut x).with(|opt| {\n-        match opt {\n-            &Right(ref f) => {\n-                x = X(Left((0,0))); //~ ERROR cannot assign to `x`\n-                (*f)()\n-            },\n-            _ => fail!()\n-        }\n-    })\n+    (&mut x).with(\n+        |opt| { //~ ERROR cannot borrow `x` as mutable more than once at a time\n+            match opt {\n+                &Right(ref f) => {\n+                    x = X(Left((0,0)));\n+                    (*f)()\n+                },\n+                _ => fail!()\n+            }\n+        })\n }"}, {"sha": "34b9c31fdd82fb8aeb101ce0f87347e68cb0d689", "filename": "src/test/compile-fail/borrowck-borrow-mut-object-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-object-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-object-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-object-twice.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -18,7 +18,7 @@ trait Foo {\n \n fn test(x: &mut Foo) {\n     let _y = x.f1();\n-    x.f2(); //~ ERROR cannot borrow `*x` because it is already borrowed as mutable\n+    x.f2(); //~ ERROR cannot borrow `*x` as mutable\n }\n \n fn main() {}"}, {"sha": "38ff840ada4089ce71b530e42f3675f588b3e6ae", "filename": "src/test/compile-fail/borrowck-insert-during-each.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -23,9 +23,10 @@ impl Foo {\n }\n \n fn bar(f: &mut Foo) {\n-  f.foo(|a| {\n-    f.n.insert(*a); //~ ERROR cannot borrow\n-  })\n+  f.foo(\n+        |a| { //~ ERROR closure requires unique access to `f`\n+            f.n.insert(*a);\n+        })\n }\n \n fn main() {"}, {"sha": "18fd411101834bb9598c3bd562850176289b32e0", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -21,7 +21,9 @@ fn box_imm() {\n         info!(\"v={}\", *v);\n         //~^ ERROR cannot move `v` into closure\n     });\n+}\n \n+fn box_imm_explicit() {\n     let v = ~3;\n     let _w = &v;\n     task::spawn(proc() {"}, {"sha": "6a0d3ef82fb21d40de474cf76e88d4c1ef584123", "filename": "src/test/compile-fail/borrowck-loan-blocks-mut-uniq.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -14,11 +14,12 @@ fn borrow(v: &int, f: |x: &int|) {\n \n fn box_imm() {\n     let mut v = ~3;\n-    borrow(v, |w| {\n-        v = ~4; //~ ERROR cannot assign to `v` because it is borrowed\n-        assert_eq!(*v, 3);\n-        assert_eq!(*w, 4);\n-    })\n+    borrow(v,\n+           |w| { //~ ERROR cannot borrow `v` as mutable\n+            v = ~4;\n+            assert_eq!(*v, 3);\n+            assert_eq!(*w, 4);\n+        })\n }\n \n fn main() {"}, {"sha": "dbeeb5213069b2fa8de90f8a0565403282ac62bd", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -32,8 +32,8 @@ fn a() {\n     p.impurem();\n \n     // But in this case we do not honor the loan:\n-    p.blockm(|| {\n-        p.x = 10; //~ ERROR cannot assign\n+    p.blockm(|| { //~ ERROR cannot borrow `p` as mutable\n+        p.x = 10;\n     })\n }\n "}, {"sha": "0e721d7107f8ba6084816944e8f474a68f1e8f16", "filename": "src/test/compile-fail/borrowck-loan-vec-content.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -23,9 +23,11 @@ fn has_mut_vec_and_does_not_try_to_change_it() {\n \n fn has_mut_vec_but_tries_to_change_it() {\n     let mut v = ~[1, 2, 3];\n-    takes_imm_elt(&v[0], || {\n-        v[1] = 4; //~ ERROR cannot assign\n-    })\n+    takes_imm_elt(\n+        &v[0],\n+        || { //~ ERROR cannot borrow `v` as mutable\n+            v[1] = 4;\n+        })\n }\n \n fn main() {"}, {"sha": "f3869e5c9fdbaddb0b4a36482922aff5597a6806", "filename": "src/test/compile-fail/borrowck-move-by-capture.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -9,10 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n-    // FIXME(#2202) - Due to the way that borrowck treats closures,\n-    // you get two error reports here.\n     let bar = ~3;\n-    let _g = || { //~ ERROR capture of moved value\n-        let _h: proc() -> int = proc() *bar; //~ ERROR capture of moved value\n+    let _g = || {\n+        let _h: proc() -> int = proc() *bar; //~ ERROR cannot move out of captured outer variable\n     };\n }"}, {"sha": "92b77d8243efc93182d96e878d94b7e63dbd6b32", "filename": "src/test/compile-fail/borrowck-object-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-object-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-object-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-object-lifetime.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -17,7 +17,7 @@ fn borrowed_receiver<'a>(x: &'a Foo) -> &'a () {\n }\n \n fn owned_receiver(x: ~Foo) -> &() {\n-    x.borrowed() //~ ERROR borrowed value does not live long enough\n+    x.borrowed() //~ ERROR `*x` does not live long enough\n }\n \n fn mut_owned_receiver(mut x: ~Foo) {"}, {"sha": "cca8ed93388bc26fa4ca867bb354a30562c03ab1", "filename": "src/test/compile-fail/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -14,6 +14,6 @@ fn main() {\n         [1, 2, ..tail] => tail,\n         _ => unreachable!()\n     };\n-    a[0] = 0; //~ ERROR cannot assign to `a[]` because it is borrowed\n+    a[0] = 0; //~ ERROR cannot assign to `a[..]` because it is borrowed\n     t[0];\n }"}, {"sha": "cb1a7d393a88fe34e52d0bb46a33ae90297c2ec4", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -12,7 +12,7 @@ fn a() {\n     let mut vec = ~[~1, ~2, ~3];\n     match vec {\n         [~ref _a] => {\n-            vec[0] = ~4; //~ ERROR cannot assign to `(*vec)[]` because it is borrowed\n+            vec[0] = ~4; //~ ERROR cannot assign\n         }\n         _ => fail!(\"foo\")\n     }\n@@ -22,7 +22,7 @@ fn b() {\n     let mut vec = ~[~1, ~2, ~3];\n     match vec {\n         [.._b] => {\n-            vec[0] = ~4; //~ ERROR cannot assign to `(*vec)[]` because it is borrowed\n+            vec[0] = ~4; //~ ERROR cannot assign\n         }\n     }\n }"}, {"sha": "b471d40a950f122d4dbff5b69c412b02bc3a2793", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -11,7 +11,7 @@\n fn a() -> &int {\n     let vec = ~[1, 2, 3, 4];\n     let tail = match vec {\n-        [_a, ..tail] => &tail[0], //~ ERROR borrowed value does not live long enough\n+        [_a, ..tail] => &tail[0], //~ ERROR `vec[..]` does not live long enough\n         _ => fail!(\"foo\")\n     };\n     tail"}, {"sha": "dcb705856d997b6ad2916298621c21a226b772a2", "filename": "src/test/compile-fail/issue-3154.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fissue-3154.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fissue-3154.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3154.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -13,7 +13,7 @@ struct thing<'a, Q> {\n }\n \n fn thing<Q>(x: &Q) -> thing<Q> {\n-    thing{ x: x } //~ ERROR cannot infer an appropriate lifetime\n+    thing{ x: x } //~ ERROR cannot infer\n }\n \n fn main() {"}, {"sha": "8e4aa799d1fb93f63e15fd47ee4ffd008577fab0", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -11,7 +11,7 @@\n fn id<T>(t: T) -> T { t }\n \n fn f<'r, T>(v: &'r T) -> 'r || -> T {\n-    id(|| *v) //~ ERROR cannot infer an appropriate lifetime\n+    id(|| *v) //~ ERROR cannot infer\n }\n \n fn main() {"}, {"sha": "ed1725f3240fa3326c8684d344893dfe913f00fe", "filename": "src/test/compile-fail/kindck-owned-trait-contains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -24,7 +24,7 @@ fn main() {\n \n     let y = {\n         let tmp0 = 3;\n-        let tmp1 = &tmp0; //~ ERROR borrowed value does not live long enough\n+        let tmp1 = &tmp0; //~ ERROR `tmp0` does not live long enough\n         repeater(tmp1)\n     };\n     assert!(3 == *(y.get()));"}, {"sha": "1557b290c2cb19e3fb3399b49a438a3becafd73c", "filename": "src/test/compile-fail/moves-based-on-type-access-to-field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -17,13 +17,13 @@ fn touch<A>(_a: &A) {}\n \n fn f10() {\n     let x = Foo { f: ~\"hi\", y: 3 };\n-    consume(x.f); //~ NOTE `x.f` moved here\n+    consume(x.f);\n     touch(&x.y); //~ ERROR use of partially moved value: `x`\n }\n \n fn f20() {\n     let x = ~[~\"hi\"];\n-    consume(x[0]); //~ NOTE `(*x)[]` moved here\n+    consume(x[0]);\n     touch(&x[0]); //~ ERROR use of partially moved value: `x`\n }\n "}, {"sha": "e3e2ace71adc06c7204ea14e3e8dd1c2959dee16", "filename": "src/test/compile-fail/mut-cant-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fmut-cant-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fmut-cant-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-cant-alias.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -14,5 +14,5 @@ fn main() {\n     let m = RefCell::new(0);\n     let mut b = m.borrow_mut();\n     let b1 = b.get();\n-    let b2 = b.get(); //~ ERROR cannot borrow `b` because it is already borrowed as mutable\n+    let b2 = b.get(); //~ ERROR cannot borrow\n }"}, {"sha": "2e5cf1b504b65d0b3be19f8c1483bb0b2d2c0fb0", "filename": "src/test/compile-fail/mut-ptr-cant-outlive-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fmut-ptr-cant-outlive-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fmut-ptr-cant-outlive-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-ptr-cant-outlive-ref.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -15,6 +15,6 @@ fn main() {\n     let p;\n     {\n         let b = m.borrow();\n-        p = b.get(); //~ ERROR borrowed value does not live long enough\n+        p = b.get(); //~ ERROR `b` does not live long enough\n     }\n }"}, {"sha": "ec51f2dc2124434d7161a8975bce842e1b162796", "filename": "src/test/compile-fail/regionck-closure-lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregionck-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregionck-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregionck-closure-lifetimes.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -18,7 +18,7 @@ fn env<'a>(_: &'a uint, blk: |p: 'a |||) {\n \n     let mut state = 0;\n     let statep = &mut state;\n-    blk(|| *statep = 1); //~ ERROR cannot infer an appropriate lifetime\n+    blk(|| *statep = 1); //~ ERROR cannot infer\n }\n \n fn no_env_no_for<'a>(_: &'a uint, blk: |p: 'a |||) {\n@@ -40,7 +40,7 @@ fn repeating_loop() {\n     let state = 0;\n \n     loop {\n-        closure = || state; //~ ERROR cannot infer an appropriate lifetime\n+        closure = || state; //~ ERROR cannot infer\n         break;\n     }\n \n@@ -56,7 +56,7 @@ fn repeating_while() {\n     let state = 0;\n \n     while true {\n-        closure = || state; //~ ERROR cannot infer an appropriate lifetime\n+        closure = || state; //~ ERROR cannot infer\n         break;\n     }\n "}, {"sha": "3e568180b53a4ba26d2a151a747337947e84e9dc", "filename": "src/test/compile-fail/regions-addr-of-arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -12,15 +12,15 @@\n // bounded by the current function call.\n \n fn foo(a: int) {\n-    let _p: &'static int = &a; //~ ERROR borrowed value does not live long enough\n+    let _p: &'static int = &a; //~ ERROR `a` does not live long enough\n }\n \n fn bar(a: int) {\n     let _q: &int = &a;\n }\n \n fn zed<'a>(a: int) -> &'a int {\n-    &a //~ ERROR borrowed value does not live long enough\n+    &a //~ ERROR `a` does not live long enough\n }\n \n fn main() {"}, {"sha": "ce89b66cd5b944b76a3021c8842b914adf28bbe8", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -14,8 +14,7 @@ struct dog {\n \n impl dog {\n     pub fn chase_cat(&mut self) {\n-        let p: &'static mut uint = &mut self.cats_chased;\n-        //~^ ERROR cannot infer an appropriate lifetime\n+        let p: &'static mut uint = &mut self.cats_chased; //~ ERROR cannot infer\n         *p += 1u;\n     }\n "}, {"sha": "7a146c043c8389cfb776c42dc104be176c666f5e", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -17,8 +17,7 @@ struct dog {\n impl dog {\n     pub fn chase_cat(&mut self) {\n         let _f = || {\n-            let p: &'static mut uint = &mut self.food;\n-            //~^ ERROR cannot infer an appropriate lifetime\n+            let p: &'static mut uint = &mut self.food; //~ ERROR cannot infer\n             *p = 3u;\n         };\n     }"}, {"sha": "5ef043634fbe344f4252acf3ba3f4ca0fbe1d10f", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -17,12 +17,12 @@ struct a_class<'a> { x:&'a int }\n \n fn a_fn1<'a,'b>(e: an_enum<'a>) -> an_enum<'b> {\n     return e; //~ ERROR mismatched types: expected `an_enum<'b>` but found `an_enum<'a>`\n-    //~^ ERROR cannot infer an appropriate lifetime\n+    //~^ ERROR cannot infer\n }\n \n fn a_fn3<'a,'b>(e: a_class<'a>) -> a_class<'b> {\n     return e; //~ ERROR mismatched types: expected `a_class<'b>` but found `a_class<'a>`\n-    //~^ ERROR cannot infer an appropriate lifetime\n+    //~^ ERROR cannot infer\n }\n \n fn main() { }"}, {"sha": "2c3f39795a4f0008be718b2907740bb4c0c8d94c", "filename": "src/test/compile-fail/regions-creating-enums3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -14,7 +14,7 @@ enum ast<'a> {\n }\n \n fn mk_add_bad1<'a,'b>(x: &'a ast<'a>, y: &'b ast<'b>) -> ast<'a> {\n-    add(x, y) //~ ERROR cannot infer an appropriate lifetime\n+    add(x, y) //~ ERROR cannot infer\n }\n \n fn main() {"}, {"sha": "0cd5a97596045439c9be46acc8488bc1eb788da6", "filename": "src/test/compile-fail/regions-creating-enums4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -14,7 +14,7 @@ enum ast<'a> {\n }\n \n fn mk_add_bad2<'a>(x: &'a ast<'a>, y: &'a ast<'a>, z: &ast) -> ast {\n-    add(x, y) //~ ERROR cannot infer an appropriate lifetime\n+    add(x, y) //~ ERROR cannot infer\n }\n \n fn main() {"}, {"sha": "f588655d1afa85af5b19e7fc1af8c8a46594d233", "filename": "src/test/compile-fail/regions-escape-loop-via-variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-variable.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -18,6 +18,6 @@ fn main() {\n \n     loop {\n         let x = 1 + *p;\n-        p = &x; //~ ERROR borrowed value does not live long enough\n+        p = &x; //~ ERROR `x` does not live long enough\n     }\n }"}, {"sha": "ccfcc52945daf8121f6871ebb1599f131856cf85", "filename": "src/test/compile-fail/regions-escape-loop-via-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -14,7 +14,7 @@ fn broken() {\n     let mut _y = ~[&mut x];\n     while x < 10 {\n         let mut z = x;\n-        _y.push(&mut z); //~ ERROR borrowed value does not live long enough\n+        _y.push(&mut z); //~ ERROR `z` does not live long enough\n         x += 1; //~ ERROR cannot assign\n     }\n }"}, {"sha": "9762e5c4690ec82ebe14274cfe018d05b5ee6545", "filename": "src/test/compile-fail/regions-free-region-ordering-callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -20,13 +20,13 @@ fn ordering1<'a, 'b>(x: &'a &'b uint) -> &'a uint {\n \n fn ordering2<'a, 'b>(x: &'a &'b uint, y: &'a uint) -> &'b uint {\n     // However, it is not safe to assume that 'b <= 'a\n-    &*y //~ ERROR cannot infer an appropriate lifetime\n+    &*y //~ ERROR cannot infer\n }\n \n fn ordering3<'a, 'b>(x: &'a uint, y: &'b uint) -> &'a &'b uint {\n     // Do not infer an ordering from the return value.\n     let z: &'b uint = &*x;\n-    //~^ ERROR cannot infer an appropriate lifetime\n+    //~^ ERROR cannot infer\n     fail!();\n }\n "}, {"sha": "b117a1a647643c994d62a726b8b3d906d7bdcb18", "filename": "src/test/compile-fail/regions-free-region-ordering-caller1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-caller1.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -18,7 +18,7 @@ fn call1<'a>(x: &'a uint) {\n     let y: uint = 3;\n     let z: &'a & uint = &(&y);\n     //~^ ERROR borrowed value does not live long enough\n-    //~^^ ERROR borrowed value does not live long enough\n+    //~^^ ERROR `y` does not live long enough\n }\n \n fn main() {}"}, {"sha": "6f6b6761735c25c318a5eef00ae5b12ea56546b0", "filename": "src/test/compile-fail/regions-free-region-ordering-incorrect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-incorrect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-incorrect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-incorrect.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -24,7 +24,7 @@ impl<'b, T> Node<'b, T> {\n   fn get<'a>(&'a self) -> &'b T {\n     match self.next {\n       Some(ref next) => next.get(),\n-      None => &self.val //~ ERROR cannot infer an appropriate lifetime\n+      None => &self.val //~ ERROR cannot infer\n     }\n   }\n }"}, {"sha": "af460dbdd7868cab621b2a21b6a130e1e1d271fa", "filename": "src/test/compile-fail/regions-freevar.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -12,8 +12,7 @@ fn wants_static_fn(_x: 'static ||) {}\n \n fn main() {\n     let i = 3;\n-    wants_static_fn(|| {\n-        //~^ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n+    wants_static_fn(|| { //~ ERROR cannot infer\n         info!(\"i={}\", i);\n     })\n }"}, {"sha": "1aafd9057c266809770ea7c8e08dabaa8fc12f62", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -24,7 +24,7 @@ mod argparse {\n \n     impl<'a> Flag<'a> {\n         pub fn set_desc(self, s: &str) -> Flag<'a> {\n-            Flag { //~ ERROR cannot infer an appropriate lifetime\n+            Flag { //~ ERROR cannot infer\n                 name: self.name,\n                 desc: s,\n                 max_count: self.max_count,"}, {"sha": "ad6d1b2742d10c0a564b12e6cbeef1d71009c776", "filename": "src/test/compile-fail/regions-infer-at-fn-not-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -22,7 +22,7 @@ struct not_parameterized2 {\n \n fn take1(p: parameterized1) -> parameterized1 { p }\n //~^ ERROR mismatched types\n-//~^^ ERROR cannot infer an appropriate lifetime\n+//~^^ ERROR cannot infer\n \n fn take3(p: not_parameterized1) -> not_parameterized1 { p }\n fn take4(p: not_parameterized2) -> not_parameterized2 { p }"}, {"sha": "66f958c789336a1b778d7028d062e942379bb91d", "filename": "src/test/compile-fail/regions-infer-call-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -16,7 +16,7 @@ fn with<T>(f: |x: &int| -> T) -> T {\n \n fn manip<'a>(x: &'a int) -> int {\n     let z = with(|y| { select(x, y) });\n-    //~^ ERROR cannot infer an appropriate lifetime\n+    //~^ ERROR cannot infer\n     *z\n }\n "}, {"sha": "6596a1d8c2384032b0a8dd88f6db2b7e6b962847", "filename": "src/test/compile-fail/regions-infer-not-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -23,11 +23,11 @@ struct indirect2<'a> {\n }\n \n fn take_direct(p: direct) -> direct { p } //~ ERROR mismatched types\n-//~^ ERROR cannot infer an appropriate lifetime\n+//~^ ERROR cannot infer\n \n fn take_indirect1(p: indirect1) -> indirect1 { p }\n \n fn take_indirect2(p: indirect2) -> indirect2 { p } //~ ERROR mismatched types\n-//~^ ERROR cannot infer an appropriate lifetime\n+//~^ ERROR cannot infer\n \n fn main() {}"}, {"sha": "e2f4f791652a59d9966e5b06ac373301c3099db6", "filename": "src/test/compile-fail/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -32,7 +32,7 @@ impl<'a> set_f<'a> for c<'a> {\n \n     fn set_f_bad(&self, b: @b) {\n         self.f = b; //~ ERROR mismatched types: expected `@@&'a int` but found `@@&int`\n-        //~^ ERROR cannot infer an appropriate lifetime\n+        //~^ ERROR cannot infer\n     }\n }\n "}, {"sha": "60eae9ce80af1ce41e32e8624a7e129e676893cc", "filename": "src/test/compile-fail/regions-nested-fns-2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -12,9 +12,10 @@ fn ignore(_f: <'z>|&'z int| -> &'z int) {}\n \n fn nested() {\n     let y = 3;\n-    ignore(|z| {\n-        if false { &y } else { z } //~ ERROR borrowed value does not live long enough\n-    });\n+    ignore(\n+        |z| { //~ ERROR `y` does not live long enough\n+            if false { &y } else { z }\n+        });\n }\n \n fn main() {}"}, {"sha": "c66e5616b849ab395779d74e1ef66764e9741839", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -12,7 +12,7 @@ fn ignore<T>(t: T) {}\n \n fn nested<'x>(x: &'x int) {\n     let y = 3;\n-    let mut ay = &y; //~ ERROR cannot infer an appropriate lifetime\n+    let mut ay = &y; //~ ERROR cannot infer\n \n     ignore::< <'z>|&'z int|>(|z| {\n         ay = x;\n@@ -22,7 +22,7 @@ fn nested<'x>(x: &'x int) {\n \n     ignore::< <'z>|&'z int| -> &'z int>(|z| {\n         if false { return x; }  //~ ERROR mismatched types\n-        //~^ ERROR cannot infer an appropriate lifetime\n+        //~^ ERROR cannot infer\n         if false { return ay; }\n         return z;\n     });"}, {"sha": "0c335b9d5575fa5a6d0351c5bc8474c306d5abbc", "filename": "src/test/compile-fail/regions-ret-borrowed-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -19,7 +19,7 @@ fn with<R>(f: <'a>|x: &'a int| -> R) -> R {\n fn return_it<'a>() -> &'a int {\n     with(|o| o) //~ ERROR mismatched types\n         //~^ ERROR lifetime of return value does not outlive the function call\n-        //~^^ ERROR cannot infer an appropriate lifetime\n+        //~^^ ERROR cannot infer\n }\n \n fn main() {"}, {"sha": "469421751df2b69c4bca156b1725f7d735704c58", "filename": "src/test/compile-fail/regions-ret-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -22,7 +22,7 @@ fn with<R>(f: |x: &int| -> R) -> R {\n fn return_it() -> &int {\n     with(|o| o) //~ ERROR mismatched types\n         //~^ ERROR lifetime of return value does not outlive the function call\n-        //~^^ ERROR cannot infer an appropriate lifetime\n+        //~^^ ERROR cannot infer\n }\n \n fn main() {"}, {"sha": "f80e5616bd5554f4fca5ab4749eb4fbad95116f9", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -19,7 +19,7 @@ fn box_it<'r>(x: 'r ||) -> closure_box<'r> {\n fn main() {\n     let cl_box = {\n         let mut i = 3;\n-        box_it(|| i += 1) //~ ERROR cannot infer an appropriate lifetime\n+        box_it(|| i += 1) //~ ERROR cannot infer\n     };\n     (cl_box.cl)();\n }"}, {"sha": "9222fde7789ee7bc6ac91034ffde997972046019", "filename": "src/test/compile-fail/regions-trait-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -38,7 +38,7 @@ impl get_ctxt for Foo<'a> {\n }\n \n fn make_gc2<'a,'b>(foo: Foo<'a>) -> @get_ctxt<'b>  {\n-    return @foo as @get_ctxt; //~ ERROR cannot infer an appropriate lifetime\n+    return @foo as @get_ctxt; //~ ERROR cannot infer\n }\n \n fn main() {"}, {"sha": "cb6c11537c60985e0fc74cc521481d6a924c7ce1", "filename": "src/test/compile-fail/sync-rwlock-read-mode-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: cannot infer an appropriate lifetime\n+// error-pattern: cannot infer\n extern mod sync;\n use sync::RWLock;\n fn main() {"}, {"sha": "76c877dcca821b14ad743382c491234e6c203b9f", "filename": "src/test/compile-fail/trait-coercion-generic-regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -24,7 +24,7 @@ impl Trait<&'static str> for Struct {\n \n fn main() {\n     let person = ~\"Fred\";\n-    let person: &str = person;  //~ ERROR borrowed value does not live long enough\n+    let person: &str = person;  //~ ERROR `person[..]` does not live long enough\n     let s: ~Trait<&'static str> = ~Struct { person: person };\n }\n "}, {"sha": "72dbd82e947f1701c64905708828b482bebe077d", "filename": "src/test/compile-fail/vec-mut-iter-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     let mut xs = ~[1, 2, 3, 4];\n \n     for x in xs.mut_iter() {\n-        xs.push(1) //~ ERROR cannot borrow `xs` because it is already borrowed as mutable\n+        xs.push(1) //~ ERROR cannot borrow `xs`\n     }\n }"}, {"sha": "59baf63d28400403a044653a80bf5b553a40562c", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -16,5 +16,6 @@ struct Refs { refs: ~[int], n: int }\n pub fn main() {\n     let mut e = Refs{refs: ~[], n: 0};\n     let _f: || = || error!(\"{}\", e.n);\n-    e.refs.push(1);\n+    let x: &[int] = e.refs;\n+    assert_eq!(x.len(), 0);\n }"}, {"sha": "55cb5c626846206b469de8d017242b9bf0332c04", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3805c5416e0df7c6a3214e980a145a34119f4ad5/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=3805c5416e0df7c6a3214e980a145a34119f4ad5", "patch": "@@ -18,8 +18,11 @@ fn box_it<'r>(x: 'r ||) -> closure_box<'r> {\n \n pub fn main() {\n     let mut i = 3;\n-    let cl_box = box_it(|| i += 1);\n     assert_eq!(i, 3);\n-    (cl_box.cl)();\n+    {\n+        let cl = || i += 1;\n+        let cl_box = box_it(cl);\n+        (cl_box.cl)();\n+    }\n     assert_eq!(i, 4);\n }"}]}