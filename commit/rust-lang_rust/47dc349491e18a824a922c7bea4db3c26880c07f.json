{"sha": "47dc349491e18a824a922c7bea4db3c26880c07f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZGMzNDk0OTFlMThhODI0YTkyMmM3YmVhNGRiM2MyNjg4MGMwN2Y=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-15T14:21:56Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-20T10:00:43Z"}, "message": "adjust intravisit HirIdification", "tree": {"sha": "ffee7ead643ad24f09f911c258a14754f3012c8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffee7ead643ad24f09f911c258a14754f3012c8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47dc349491e18a824a922c7bea4db3c26880c07f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47dc349491e18a824a922c7bea4db3c26880c07f", "html_url": "https://github.com/rust-lang/rust/commit/47dc349491e18a824a922c7bea4db3c26880c07f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47dc349491e18a824a922c7bea4db3c26880c07f/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc", "html_url": "https://github.com/rust-lang/rust/commit/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "04eec88004aa6fade46a7b55ab874faae3853873", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/47dc349491e18a824a922c7bea4db3c26880c07f/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47dc349491e18a824a922c7bea4db3c26880c07f/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=47dc349491e18a824a922c7bea4db3c26880c07f", "patch": "@@ -27,7 +27,7 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     /// The node map\n     map: Vec<Option<Entry<'hir>>>,\n     /// The parent of this node\n-    parent_hir: hir::HirId,\n+    parent_node: hir::HirId,\n \n     // These fields keep track of the currently relevant DepNodes during\n     // the visitor's traversal.\n@@ -147,7 +147,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             krate,\n             source_map: sess.source_map(),\n             map: repeat(None).take(sess.current_node_id_count()).collect(),\n-            parent_hir: hir::CRATE_HIR_ID,\n+            parent_node: hir::CRATE_HIR_ID,\n             current_signature_dep_index: root_mod_sig_dep_index,\n             current_full_dep_index: root_mod_full_dep_index,\n             current_dep_node_owner: CRATE_DEF_INDEX,\n@@ -230,8 +230,8 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n \n     fn insert(&mut self, span: Span, hir_id: HirId, node: Node<'hir>) {\n         let entry = Entry {\n-            parent: self.hir_to_node_id[&self.parent_hir],\n-            parent_hir: self.parent_hir,\n+            parent: self.hir_to_node_id[&self.parent_node],\n+            parent_hir: self.parent_node,\n             dep_node: if self.currently_in_body {\n                 self.current_full_dep_index\n             } else {\n@@ -283,13 +283,13 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n \n     fn with_parent<F: FnOnce(&mut Self)>(\n         &mut self,\n-        parent_hir_id: HirId,\n+        parent_node_id: HirId,\n         f: F,\n     ) {\n-        let parent_hir = self.parent_hir;\n-        self.parent_hir = parent_hir_id;\n+        let parent_node = self.parent_node;\n+        self.parent_node = parent_node_id;\n         f(self);\n-        self.parent_hir = parent_hir;\n+        self.parent_node = parent_node;\n     }\n \n     fn with_dep_node_owner<T: for<'b> HashStable<StableHashingContext<'b>>,\n@@ -446,8 +446,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'hir PathSegment) {\n-        if path_segment.id.is_some() {\n-            let hir_id = path_segment.hir_id.unwrap();\n+        if let Some(hir_id) = path_segment.hir_id {\n             self.insert(path_span, hir_id, Node::PathSegment(path_segment));\n         }\n         intravisit::walk_path_segment(self, path_span, path_segment);\n@@ -471,7 +470,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n \n     fn visit_fn(&mut self, fk: intravisit::FnKind<'hir>, fd: &'hir FnDecl,\n                 b: BodyId, s: Span, id: HirId) {\n-        assert_eq!(self.parent_hir, id);\n+        assert_eq!(self.parent_node, id);\n         intravisit::walk_fn(self, fk, fd, b, s, id);\n     }\n "}, {"sha": "fafe671b9eb8b6970ebdb060dc27889efcaf925d", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/47dc349491e18a824a922c7bea4db3c26880c07f/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47dc349491e18a824a922c7bea4db3c26880c07f/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=47dc349491e18a824a922c7bea4db3c26880c07f", "patch": "@@ -98,11 +98,8 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n         if max != self.hir_ids_seen.len() - 1 {\n             // Collect the missing ItemLocalIds\n             let missing: Vec<_> = (0 ..= max as u32)\n-              .filter(|&i| !self.hir_ids_seen\n-                                .iter()\n-                                .find(|&local_id| local_id == &ItemLocalId::from_u32(i))\n-                                .is_some()\n-            ).collect();\n+              .filter(|&i| !self.hir_ids_seen.contains(&ItemLocalId::from_u32(i)))\n+              .collect();\n \n             // Try to map those to something more useful\n             let mut missing_items = Vec::with_capacity(missing.len());"}]}