{"sha": "8d17c6a85d6530d446d1cb42ee6636c5c9fbfaaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMTdjNmE4NWQ2NTMwZDQ0NmQxY2I0MmVlNjYzNmM1YzlmYmZhYWY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-02-05T18:52:57Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-02-08T19:47:51Z"}, "message": "Anonymize late bound regions on transitive bounds that define assoc type", "tree": {"sha": "be308f5a8f6f0cc0b2974dd38c16fcf198b86d52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be308f5a8f6f0cc0b2974dd38c16fcf198b86d52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d17c6a85d6530d446d1cb42ee6636c5c9fbfaaf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmAhlWgACgkQgTGiTgx5\n76/pIw//e85ZMojn0PsMtRoRAVrOm/iO1I795RR4izmdbsKG1rmLLFAkNu9Tfcwk\nrlzV2FeLdDyQ66ZrJFp4TbfC/kedffQ4/Nj2J7A3RdYPLpcg8ahNiM3fzcl3qFXo\nXlYgyvcuz4plbhlZEYJ1TyWhZLHOrQchtv4mdroD14dkwG1P38z4c9pFsk8zsvbC\n3gKfK2HAnE0J5ONVrTcE8bXlo66nT5EwGZlaK16g8I6ybGTRsP3VxZ6xIox6mYNV\nDaBpk1g9KjK/RY4KITAsVQF/l+J+oIpNYRUPIG57LjLXNkXT9ioeU438Ng0tmaoX\nGT1OcB0vf7/UWJlqcvqUSwfyIl7MHcj/TPM2SezB9GPUJRp1Docv/lQ09EezhnNY\ndAe7rsfFNyoC7g/Iu0ByVPL588yIrrtLlYojpyazoo3scJABAYlPI1w8MELY+XaU\n58+LySyW7McX0eIhFN3TFw4Xm+HYFGHUYjaMwh0Br50NGo+ShkxxVEWts6mO27fc\nXIzoCC7smpv5ePK7Lum8SnaTeBHnKTJx7WgaybZ5Erw3JinOCarTdT8cJUPOOxZL\nbfMLN5T//UKaS5wiA6wemgSLXjau8eBTRnyNMRFk2UQZxw9xmy3l3HumK0fBxT1p\n+Ooi6mVJRLLHSuj9JmgmZUrEvTWFo3QQZvASlwYQ9vDhj/MOsWM=\n=Peww\n-----END PGP SIGNATURE-----", "payload": "tree be308f5a8f6f0cc0b2974dd38c16fcf198b86d52\nparent fd092557ceb36998dc93aa46a797745c58f1969f\nauthor Santiago Pastorino <spastorino@gmail.com> 1612551177 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1612813671 -0300\n\nAnonymize late bound regions on transitive bounds that define assoc type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d17c6a85d6530d446d1cb42ee6636c5c9fbfaaf", "html_url": "https://github.com/rust-lang/rust/commit/8d17c6a85d6530d446d1cb42ee6636c5c9fbfaaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d17c6a85d6530d446d1cb42ee6636c5c9fbfaaf/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd092557ceb36998dc93aa46a797745c58f1969f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd092557ceb36998dc93aa46a797745c58f1969f", "html_url": "https://github.com/rust-lang/rust/commit/fd092557ceb36998dc93aa46a797745c58f1969f"}], "stats": {"total": 70, "additions": 55, "deletions": 15}, "files": [{"sha": "87684c2715f4ef0541b3793af691a26d51c2d66f", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8d17c6a85d6530d446d1cb42ee6636c5c9fbfaaf/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d17c6a85d6530d446d1cb42ee6636c5c9fbfaaf/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=8d17c6a85d6530d446d1cb42ee6636c5c9fbfaaf", "patch": "@@ -292,26 +292,33 @@ pub fn transitive_bounds_that_define_assoc_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     bounds: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,\n     assoc_name: Ident,\n-) -> FxIndexSet<ty::PolyTraitRef<'tcx>> {\n+) -> impl Iterator<Item = ty::PolyTraitRef<'tcx>> {\n     let mut stack: Vec<_> = bounds.collect();\n-    let mut trait_refs = FxIndexSet::default();\n-\n-    while let Some(trait_ref) = stack.pop() {\n-        if trait_refs.insert(trait_ref) {\n-            let super_predicates =\n-                tcx.super_predicates_that_define_assoc_type((trait_ref.def_id(), Some(assoc_name)));\n-            for (super_predicate, _) in super_predicates.predicates {\n-                let bound_predicate = super_predicate.kind();\n-                let subst_predicate = super_predicate\n-                    .subst_supertrait(tcx, &bound_predicate.rebind(trait_ref.skip_binder()));\n-                if let Some(binder) = subst_predicate.to_opt_poly_trait_ref() {\n-                    stack.push(binder.value);\n+    let mut visited = FxIndexSet::default();\n+\n+    std::iter::from_fn(move || {\n+        while let Some(trait_ref) = stack.pop() {\n+            let anon_trait_ref = tcx.anonymize_late_bound_regions(trait_ref);\n+            if visited.insert(anon_trait_ref) {\n+                let super_predicates = tcx.super_predicates_that_define_assoc_type((\n+                    trait_ref.def_id(),\n+                    Some(assoc_name),\n+                ));\n+                for (super_predicate, _) in super_predicates.predicates {\n+                    let bound_predicate = super_predicate.kind();\n+                    let subst_predicate = super_predicate\n+                        .subst_supertrait(tcx, &bound_predicate.rebind(trait_ref.skip_binder()));\n+                    if let Some(binder) = subst_predicate.to_opt_poly_trait_ref() {\n+                        stack.push(binder.value);\n+                    }\n                 }\n+\n+                return Some(trait_ref);\n             }\n         }\n-    }\n \n-    trait_refs\n+        return None;\n+    })\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "a9d6eed810a6b172699e3a85afa15ad79ae35ac0", "filename": "src/test/ui/associated-type-bounds/traits-assoc-anonymized.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8d17c6a85d6530d446d1cb42ee6636c5c9fbfaaf/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftraits-assoc-anonymized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d17c6a85d6530d446d1cb42ee6636c5c9fbfaaf/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftraits-assoc-anonymized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftraits-assoc-anonymized.rs?ref=8d17c6a85d6530d446d1cb42ee6636c5c9fbfaaf", "patch": "@@ -0,0 +1,33 @@\n+// check-pass\n+\n+pub struct LookupInternedStorage;\n+\n+impl<Q> QueryStorageOps<Q> for LookupInternedStorage\n+where\n+    Q: Query,\n+    for<'d> Q: QueryDb<'d>,\n+{\n+    fn fmt_index(&self, db: &<Q as QueryDb<'_>>::DynDb) {\n+        <<Q as QueryDb<'_>>::DynDb as HasQueryGroup<Q::Group>>::group_storage(db);\n+    }\n+}\n+\n+pub trait HasQueryGroup<G> {\n+    fn group_storage(&self);\n+}\n+\n+pub trait QueryStorageOps<Q>\n+where\n+    Q: Query,\n+{\n+    fn fmt_index(&self, db: &<Q as QueryDb<'_>>::DynDb);\n+}\n+\n+pub trait QueryDb<'d> {\n+    type DynDb: HasQueryGroup<Self::Group> + 'd;\n+    type Group;\n+}\n+\n+pub trait Query: for<'d> QueryDb<'d> {}\n+\n+fn main() {}"}]}