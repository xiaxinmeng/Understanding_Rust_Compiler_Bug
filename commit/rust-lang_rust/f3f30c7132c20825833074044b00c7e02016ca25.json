{"sha": "f3f30c7132c20825833074044b00c7e02016ca25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZjMwYzcxMzJjMjA4MjU4MzMwNzQwNDRiMDBjN2UwMjAxNmNhMjU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-07T17:01:56Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-16T04:18:59Z"}, "message": "Take sys/vxworks/condvar from sys/unix instead.", "tree": {"sha": "4f0b0bd3c7e06989332b183832119383c1d65ab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f0b0bd3c7e06989332b183832119383c1d65ab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3f30c7132c20825833074044b00c7e02016ca25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3f30c7132c20825833074044b00c7e02016ca25", "html_url": "https://github.com/rust-lang/rust/commit/f3f30c7132c20825833074044b00c7e02016ca25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3f30c7132c20825833074044b00c7e02016ca25/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8dcd2fbce4550b1ef46d270546bd8480098cdca", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8dcd2fbce4550b1ef46d270546bd8480098cdca", "html_url": "https://github.com/rust-lang/rust/commit/b8dcd2fbce4550b1ef46d270546bd8480098cdca"}], "stats": {"total": 92, "additions": 1, "deletions": 91}, "files": [{"sha": "b4724be7c7c3b38b31e65fba624978384e98e0d5", "filename": "library/std/src/sys/vxworks/condvar.rs", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/b8dcd2fbce4550b1ef46d270546bd8480098cdca/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8dcd2fbce4550b1ef46d270546bd8480098cdca/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fcondvar.rs?ref=b8dcd2fbce4550b1ef46d270546bd8480098cdca", "patch": "@@ -1,91 +0,0 @@\n-use crate::cell::UnsafeCell;\n-use crate::sys::mutex::{self, Mutex};\n-use crate::time::Duration;\n-\n-pub struct Condvar {\n-    inner: UnsafeCell<libc::pthread_cond_t>,\n-}\n-\n-pub type MovableCondvar = Box<Condvar>;\n-\n-unsafe impl Send for Condvar {}\n-unsafe impl Sync for Condvar {}\n-\n-const TIMESPEC_MAX: libc::timespec =\n-    libc::timespec { tv_sec: <libc::time_t>::MAX, tv_nsec: 1_000_000_000 - 1 };\n-\n-fn saturating_cast_to_time_t(value: u64) -> libc::time_t {\n-    if value > <libc::time_t>::MAX as u64 { <libc::time_t>::MAX } else { value as libc::time_t }\n-}\n-\n-impl Condvar {\n-    pub const fn new() -> Condvar {\n-        // Might be moved and address is changing it is better to avoid\n-        // initialization of potentially opaque OS data before it landed\n-        Condvar { inner: UnsafeCell::new(libc::PTHREAD_COND_INITIALIZER) }\n-    }\n-\n-    pub unsafe fn init(&mut self) {\n-        use crate::mem::MaybeUninit;\n-        let mut attr = MaybeUninit::<libc::pthread_condattr_t>::uninit();\n-        let r = libc::pthread_condattr_init(attr.as_mut_ptr());\n-        assert_eq!(r, 0);\n-        let r = libc::pthread_condattr_setclock(attr.as_mut_ptr(), libc::CLOCK_MONOTONIC);\n-        assert_eq!(r, 0);\n-        let r = libc::pthread_cond_init(self.inner.get(), attr.as_ptr());\n-        assert_eq!(r, 0);\n-        let r = libc::pthread_condattr_destroy(attr.as_mut_ptr());\n-        assert_eq!(r, 0);\n-    }\n-\n-    #[inline]\n-    pub unsafe fn notify_one(&self) {\n-        let r = libc::pthread_cond_signal(self.inner.get());\n-        debug_assert_eq!(r, 0);\n-    }\n-\n-    #[inline]\n-    pub unsafe fn notify_all(&self) {\n-        let r = libc::pthread_cond_broadcast(self.inner.get());\n-        debug_assert_eq!(r, 0);\n-    }\n-\n-    #[inline]\n-    pub unsafe fn wait(&self, mutex: &Mutex) {\n-        let r = libc::pthread_cond_wait(self.inner.get(), mutex::raw(mutex));\n-        debug_assert_eq!(r, 0);\n-    }\n-\n-    // This implementation is used on systems that support pthread_condattr_setclock\n-    // where we configure condition variable to use monotonic clock (instead of\n-    // default system clock). This approach avoids all problems that result\n-    // from changes made to the system time.\n-    pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {\n-        use crate::mem;\n-\n-        let mut now: libc::timespec = mem::zeroed();\n-        let r = libc::clock_gettime(libc::CLOCK_MONOTONIC, &mut now);\n-        assert_eq!(r, 0);\n-\n-        // Nanosecond calculations can't overflow because both values are below 1e9.\n-        let nsec = dur.subsec_nanos() + now.tv_nsec as u32;\n-\n-        let sec = saturating_cast_to_time_t(dur.as_secs())\n-            .checked_add((nsec / 1_000_000_000) as libc::time_t)\n-            .and_then(|s| s.checked_add(now.tv_sec));\n-        let nsec = nsec % 1_000_000_000;\n-\n-        let timeout =\n-            sec.map(|s| libc::timespec { tv_sec: s, tv_nsec: nsec as _ }).unwrap_or(TIMESPEC_MAX);\n-\n-        let r = libc::pthread_cond_timedwait(self.inner.get(), mutex::raw(mutex), &timeout);\n-        assert!(r == libc::ETIMEDOUT || r == 0);\n-        r == 0\n-    }\n-\n-    #[inline]\n-    pub unsafe fn destroy(&self) {\n-        let r = libc::pthread_cond_destroy(self.inner.get());\n-        debug_assert_eq!(r, 0);\n-    }\n-}"}, {"sha": "1763ed505473bbeb7986fb29950d798bcfc41fbb", "filename": "library/std/src/sys/vxworks/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3f30c7132c20825833074044b00c7e02016ca25/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3f30c7132c20825833074044b00c7e02016ca25/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs?ref=f3f30c7132c20825833074044b00c7e02016ca25", "patch": "@@ -10,6 +10,7 @@ pub use libc::strlen;\n pub mod alloc;\n pub mod args;\n pub mod cmath;\n+#[path = \"../unix/condvar.rs\"]\n pub mod condvar;\n pub mod env;\n pub mod ext;"}]}