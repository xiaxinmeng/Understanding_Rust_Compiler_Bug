{"sha": "c7fcbfbf1fff2794de5ec6dcb0a052c345ded3a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZmNiZmJmMWZmZjI3OTRkZTVlYzZkY2IwYTA1MmMzNDVkZWQzYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-29T01:22:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-29T01:22:12Z"}, "message": "Auto merge of #60182 - matklad:lexer-cleanup, r=petrochenkov\n\nLexer cleanup\n\nanother couple of tiny cleanups", "tree": {"sha": "47641adf8b6e9f5ab948e7d589bb0d12fc57e802", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47641adf8b6e9f5ab948e7d589bb0d12fc57e802"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7fcbfbf1fff2794de5ec6dcb0a052c345ded3a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7fcbfbf1fff2794de5ec6dcb0a052c345ded3a7", "html_url": "https://github.com/rust-lang/rust/commit/c7fcbfbf1fff2794de5ec6dcb0a052c345ded3a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7fcbfbf1fff2794de5ec6dcb0a052c345ded3a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "272000c94edda10d3ccd7042d2b9914c2c974f29", "url": "https://api.github.com/repos/rust-lang/rust/commits/272000c94edda10d3ccd7042d2b9914c2c974f29", "html_url": "https://github.com/rust-lang/rust/commit/272000c94edda10d3ccd7042d2b9914c2c974f29"}, {"sha": "b83ea7f91799fd2178de1cc4e897c5b605697965", "url": "https://api.github.com/repos/rust-lang/rust/commits/b83ea7f91799fd2178de1cc4e897c5b605697965", "html_url": "https://github.com/rust-lang/rust/commit/b83ea7f91799fd2178de1cc4e897c5b605697965"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "cf8f8abe2ab50d6d0d8097c0c32a20ee1ef1fa21", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7fcbfbf1fff2794de5ec6dcb0a052c345ded3a7/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7fcbfbf1fff2794de5ec6dcb0a052c345ded3a7/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=c7fcbfbf1fff2794de5ec6dcb0a052c345ded3a7", "patch": "@@ -446,9 +446,7 @@ impl<'a> StringReader<'a> {\n         self.with_str_from_to(start, self.pos, f)\n     }\n \n-    /// Creates a Name from a given offset to the current offset, each\n-    /// adjusted 1 towards each other (assumes that on either side there is a\n-    /// single-byte delimiter).\n+    /// Creates a Name from a given offset to the current offset.\n     fn name_from(&self, start: BytePos) -> ast::Name {\n         debug!(\"taking an ident from {:?} to {:?}\", start, self.pos);\n         self.with_str_from(start, Symbol::intern)\n@@ -1420,8 +1418,8 @@ impl<'a> StringReader<'a> {\n                     // Include the leading `'` in the real identifier, for macro\n                     // expansion purposes. See #12512 for the gory details of why\n                     // this is necessary.\n-                    let ident = self.with_str_from(start, |lifetime_name| {\n-                        self.mk_ident(&format!(\"'{}\", lifetime_name))\n+                    let ident = self.with_str_from(start_with_quote, |lifetime_name| {\n+                        self.mk_ident(lifetime_name)\n                     });\n \n                     if c2.is_numeric() {"}, {"sha": "1abc7832ffa0f9e369238077da4ce3c3ea9812bb", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7fcbfbf1fff2794de5ec6dcb0a052c345ded3a7/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7fcbfbf1fff2794de5ec6dcb0a052c345ded3a7/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=c7fcbfbf1fff2794de5ec6dcb0a052c345ded3a7", "patch": "@@ -366,7 +366,7 @@ fn char_lit(lit: &str, diag: Option<(Span, &Handler)>) -> (char, isize) {\n }\n \n /// Parses a string representing a string literal into its final form. Does unescaping.\n-pub fn str_lit(lit: &str, diag: Option<(Span, &Handler)>) -> String {\n+fn str_lit(lit: &str, diag: Option<(Span, &Handler)>) -> String {\n     debug!(\"str_lit: given {}\", lit.escape_default());\n     let mut res = String::with_capacity(lit.len());\n "}]}