{"sha": "667567ab2c0801bda48beec6969c4672f3d90717", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NzU2N2FiMmMwODAxYmRhNDhiZWVjNjk2OWM0NjcyZjNkOTA3MTc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-11-27T16:40:18Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-12-09T15:19:21Z"}, "message": "forward inner error in struct and tuple field access", "tree": {"sha": "a101bb9e9ed239e1e5b915bd25927d11e1abb99c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a101bb9e9ed239e1e5b915bd25927d11e1abb99c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/667567ab2c0801bda48beec6969c4672f3d90717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/667567ab2c0801bda48beec6969c4672f3d90717", "html_url": "https://github.com/rust-lang/rust/commit/667567ab2c0801bda48beec6969c4672f3d90717", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/667567ab2c0801bda48beec6969c4672f3d90717/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e48b593ca613c5deea5503e0dd1d94dce70ab54", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e48b593ca613c5deea5503e0dd1d94dce70ab54", "html_url": "https://github.com/rust-lang/rust/commit/2e48b593ca613c5deea5503e0dd1d94dce70ab54"}], "stats": {"total": 44, "additions": 19, "deletions": 25}, "files": [{"sha": "3c1901c0d558a8e1572983d2a47d1dd296b506fa", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/667567ab2c0801bda48beec6969c4672f3d90717/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/667567ab2c0801bda48beec6969c4672f3d90717/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=667567ab2c0801bda48beec6969c4672f3d90717", "patch": "@@ -1177,46 +1177,40 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n       },\n       hir::ExprTupField(ref base, index) => {\n         let base_hint = ty_hint.erase_hint();\n-        if let Ok(c) = eval_const_expr_partial(tcx, base, base_hint, fn_args) {\n-            if let Tuple(tup_id) = c {\n-                if let hir::ExprTup(ref fields) = tcx.map.expect_expr(tup_id).node {\n-                    if index.node < fields.len() {\n-                        return eval_const_expr_partial(tcx, &fields[index.node], base_hint, fn_args)\n-                    } else {\n-                        signal!(e, TupleIndexOutOfBounds);\n-                    }\n+        let c = try!(eval_const_expr_partial(tcx, base, base_hint, fn_args));\n+        if let Tuple(tup_id) = c {\n+            if let hir::ExprTup(ref fields) = tcx.map.expect_expr(tup_id).node {\n+                if index.node < fields.len() {\n+                    return eval_const_expr_partial(tcx, &fields[index.node], base_hint, fn_args)\n                 } else {\n-                    unreachable!()\n+                    signal!(e, TupleIndexOutOfBounds);\n                 }\n             } else {\n-                signal!(base, ExpectedConstTuple);\n+                unreachable!()\n             }\n         } else {\n-            signal!(base, NonConstPath)\n+            signal!(base, ExpectedConstTuple);\n         }\n       }\n       hir::ExprField(ref base, field_name) => {\n         let base_hint = ty_hint.erase_hint();\n         // Get the base expression if it is a struct and it is constant\n-        if let Ok(c) = eval_const_expr_partial(tcx, base, base_hint, fn_args) {\n-            if let Struct(struct_id) = c {\n-                if let hir::ExprStruct(_, ref fields, _) = tcx.map.expect_expr(struct_id).node {\n-                    // Check that the given field exists and evaluate it\n-                    // if the idents are compared run-pass/issue-19244 fails\n-                    if let Some(f) = fields.iter().find(|f| f.name.node\n-                                                         == field_name.node) {\n-                        return eval_const_expr_partial(tcx, &*f.expr, base_hint, fn_args)\n-                    } else {\n-                        signal!(e, MissingStructField);\n-                    }\n+        let c = try!(eval_const_expr_partial(tcx, base, base_hint, fn_args));\n+        if let Struct(struct_id) = c {\n+            if let hir::ExprStruct(_, ref fields, _) = tcx.map.expect_expr(struct_id).node {\n+                // Check that the given field exists and evaluate it\n+                // if the idents are compared run-pass/issue-19244 fails\n+                if let Some(f) = fields.iter().find(|f| f.name.node\n+                                                     == field_name.node) {\n+                    return eval_const_expr_partial(tcx, &*f.expr, base_hint, fn_args)\n                 } else {\n-                    unreachable!()\n+                    signal!(e, MissingStructField);\n                 }\n             } else {\n-                signal!(base, ExpectedConstStruct);\n+                unreachable!()\n             }\n         } else {\n-            signal!(base, NonConstPath);\n+            signal!(base, ExpectedConstStruct);\n         }\n       }\n       _ => signal!(e, MiscCatchAll)"}]}