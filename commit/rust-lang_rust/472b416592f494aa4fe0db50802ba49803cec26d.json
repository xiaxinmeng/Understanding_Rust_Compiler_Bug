{"sha": "472b416592f494aa4fe0db50802ba49803cec26d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MmI0MTY1OTJmNDk0YWE0ZmUwZGI1MDgwMmJhNDk4MDNjZWMyNmQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-01T06:15:25Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-10T12:39:57Z"}, "message": "Querify all_traits", "tree": {"sha": "a8820b92a6f94e7bdf7065ace2107173ae61e4f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8820b92a6f94e7bdf7065ace2107173ae61e4f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/472b416592f494aa4fe0db50802ba49803cec26d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/472b416592f494aa4fe0db50802ba49803cec26d", "html_url": "https://github.com/rust-lang/rust/commit/472b416592f494aa4fe0db50802ba49803cec26d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/472b416592f494aa4fe0db50802ba49803cec26d/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49a2b808774bdada1094c0035230361fc6d12680", "url": "https://api.github.com/repos/rust-lang/rust/commits/49a2b808774bdada1094c0035230361fc6d12680", "html_url": "https://github.com/rust-lang/rust/commit/49a2b808774bdada1094c0035230361fc6d12680"}], "stats": {"total": 91, "additions": 40, "deletions": 51}, "files": [{"sha": "663ac5b04f57c5354894892fd214e088b3e052b3", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=472b416592f494aa4fe0db50802ba49803cec26d", "patch": "@@ -632,6 +632,7 @@ define_dep_nodes!( <'tcx>\n     [input] MaybeUnusedTraitImport(DefId),\n     [input] MaybeUnusedExternCrates,\n     [eval_always] StabilityIndex,\n+    [eval_always] AllTraits,\n     [input] AllCrateNums,\n     [] ExportedSymbols(CrateNum),\n     [eval_always] CollectAndPartitionTranslationItems,"}, {"sha": "677b7afc95a35a6e284a27224d7bb87b017a9270", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=472b416592f494aa4fe0db50802ba49803cec26d", "patch": "@@ -898,12 +898,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     layout_interner: Lock<FxHashSet<&'tcx LayoutDetails>>,\n \n-    /// A vector of every trait accessible in the whole crate\n-    /// (i.e. including those from subcrates). This is used only for\n-    /// error reporting, and so is lazily initialized and generally\n-    /// shouldn't taint the common path (hence the RefCell).\n-    pub all_traits: RefCell<Option<Vec<DefId>>>,\n-\n     /// A general purpose channel to throw data out the back towards LLVM worker\n     /// threads.\n     ///\n@@ -1283,7 +1277,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             derive_macros: RefCell::new(NodeMap()),\n             stability_interner: Lock::new(FxHashSet()),\n             interpret_interner: Default::default(),\n-            all_traits: RefCell::new(None),\n             tx_to_llvm_workers: Lock::new(tx),\n             output_filenames: Arc::new(output_filenames.clone()),\n         };"}, {"sha": "150328f2a6a332361864f7fdd5d8f20d3194bd91", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=472b416592f494aa4fe0db50802ba49803cec26d", "patch": "@@ -586,6 +586,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::stability_index<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::all_traits<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"fetching all foreign and local traits\")\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::all_crate_nums<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"fetching all foreign CrateNum instances\")"}, {"sha": "fd26855c94277ca05f59b6da890e69533dc93bc3", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=472b416592f494aa4fe0db50802ba49803cec26d", "patch": "@@ -386,6 +386,11 @@ define_maps! { <'tcx>\n     [] fn stability_index: stability_index_node(CrateNum) -> Lrc<stability::Index<'tcx>>,\n     [] fn all_crate_nums: all_crate_nums_node(CrateNum) -> Lrc<Vec<CrateNum>>,\n \n+    /// A vector of every trait accessible in the whole crate\n+    /// (i.e. including those from subcrates). This is used only for\n+    /// error reporting.\n+    [] fn all_traits: all_traits_node(CrateNum) -> Lrc<Vec<DefId>>,\n+\n     [] fn exported_symbols: ExportedSymbols(CrateNum)\n         -> Arc<Vec<(ExportedSymbol<'tcx>, SymbolExportLevel)>>,\n     [] fn collect_and_partition_translation_items:\n@@ -575,6 +580,10 @@ fn all_crate_nums_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::AllCrateNums\n }\n \n+fn all_traits_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n+    DepConstructor::AllTraits\n+}\n+\n fn collect_and_partition_translation_items_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::CollectAndPartitionTranslationItems\n }"}, {"sha": "e812dd2d6c442a4d6de5feaa1e484137a356a65f", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=472b416592f494aa4fe0db50802ba49803cec26d", "patch": "@@ -1115,6 +1115,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         }\n         DepKind::MaybeUnusedExternCrates => { force!(maybe_unused_extern_crates, LOCAL_CRATE); }\n         DepKind::StabilityIndex => { force!(stability_index, LOCAL_CRATE); }\n+        DepKind::AllTraits => { force!(all_traits, LOCAL_CRATE); }\n         DepKind::AllCrateNums => { force!(all_crate_nums, LOCAL_CRATE); }\n         DepKind::ExportedSymbols => { force!(exported_symbols, krate!()); }\n         DepKind::CollectAndPartitionTranslationItems => {"}, {"sha": "49d0df555fa1de41711bb87582b6a6555bc72f5c", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=472b416592f494aa4fe0db50802ba49803cec26d", "patch": "@@ -31,13 +31,18 @@ use rustc_data_structures::sync::Lrc;\n \n pub use self::MethodError::*;\n pub use self::CandidateSource::*;\n+pub use self::suggest::TraitInfo;\n \n mod confirm;\n pub mod probe;\n mod suggest;\n \n use self::probe::{IsSuggestion, ProbeScope};\n \n+pub fn provide(providers: &mut ty::maps::Providers) {\n+    suggest::provide(providers);\n+}\n+\n #[derive(Clone, Copy, Debug)]\n pub struct MethodCallee<'tcx> {\n     /// Impl method ID, for inherent methods, or trait method ID, otherwise."}, {"sha": "2dbc590bbf72748ff8652decfaadfee6cd5fc721", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 17, "deletions": 44, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=472b416592f494aa4fe0db50802ba49803cec26d", "patch": "@@ -13,6 +13,7 @@\n \n use check::FnCtxt;\n use rustc::hir::map as hir_map;\n+use rustc_data_structures::sync::Lrc;\n use rustc::ty::{self, Ty, TyCtxt, ToPolyTraitRef, ToPredicate, TypeFoldable};\n use hir::def::Def;\n use hir::def_id::{CRATE_DEF_INDEX, DefId};\n@@ -26,12 +27,12 @@ use syntax::util::lev_distance::find_best_match_for_name;\n use errors::DiagnosticBuilder;\n use syntax_pos::Span;\n \n+use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::hir;\n use rustc::hir::print;\n use rustc::infer::type_variable::TypeVariableOrigin;\n use rustc::ty::TyAdt;\n \n-use std::cell;\n use std::cmp::Ordering;\n \n use super::{MethodError, NoMatchData, CandidateSource};\n@@ -208,6 +209,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     // be used exists at all, and the type is an ambiuous numeric type\n                     // ({integer}/{float}).\n                     let mut candidates = all_traits(self.tcx)\n+                        .into_iter()\n                         .filter(|info| {\n                             self.associated_item(info.def_id, item_name, Namespace::Value).is_some()\n                         });\n@@ -519,6 +521,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // implement, by finding ones that have the item name, and are\n         // legal to implement.\n         let mut candidates = all_traits(self.tcx)\n+            .into_iter()\n             .filter(|info| {\n                 // we approximate the coherence rules to only suggest\n                 // traits that are legal to implement by requiring that\n@@ -603,18 +606,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n-pub type AllTraitsVec = Vec<DefId>;\n-\n #[derive(Copy, Clone)]\n pub struct TraitInfo {\n     pub def_id: DefId,\n }\n \n-impl TraitInfo {\n-    fn new(def_id: DefId) -> TraitInfo {\n-        TraitInfo { def_id: def_id }\n-    }\n-}\n impl PartialEq for TraitInfo {\n     fn eq(&self, other: &TraitInfo) -> bool {\n         self.cmp(other) == Ordering::Equal\n@@ -638,8 +634,12 @@ impl Ord for TraitInfo {\n }\n \n /// Retrieve all traits in this crate and any dependent crates.\n-pub fn all_traits<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> AllTraits<'a> {\n-    if tcx.all_traits.borrow().is_none() {\n+pub fn all_traits<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Vec<TraitInfo> {\n+    tcx.all_traits(LOCAL_CRATE).iter().map(|&def_id| TraitInfo { def_id }).collect()\n+}\n+\n+/// Compute all traits in this crate and any dependent crates.\n+fn compute_all_traits<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Vec<DefId> {\n         use rustc::hir::itemlikevisit;\n \n         let mut traits = vec![];\n@@ -649,7 +649,7 @@ pub fn all_traits<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> AllTraits<'a>\n         // meh.\n         struct Visitor<'a, 'tcx: 'a> {\n             map: &'a hir_map::Map<'tcx>,\n-            traits: &'a mut AllTraitsVec,\n+            traits: &'a mut Vec<DefId>,\n         }\n         impl<'v, 'a, 'tcx> itemlikevisit::ItemLikeVisitor<'v> for Visitor<'a, 'tcx> {\n             fn visit_item(&mut self, i: &'v hir::Item) {\n@@ -676,7 +676,7 @@ pub fn all_traits<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> AllTraits<'a>\n         // Cross-crate:\n         let mut external_mods = FxHashSet();\n         fn handle_external_def(tcx: TyCtxt,\n-                               traits: &mut AllTraitsVec,\n+                               traits: &mut Vec<DefId>,\n                                external_mods: &mut FxHashSet<DefId>,\n                                def: Def) {\n             let def_id = def.def_id();\n@@ -703,43 +703,16 @@ pub fn all_traits<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> AllTraits<'a>\n             handle_external_def(tcx, &mut traits, &mut external_mods, Def::Mod(def_id));\n         }\n \n-        *tcx.all_traits.borrow_mut() = Some(traits);\n-    }\n-\n-    let borrow = tcx.all_traits.borrow();\n-    assert!(borrow.is_some());\n-    AllTraits {\n-        borrow,\n-        idx: 0,\n-    }\n+    traits\n }\n \n-pub struct AllTraits<'a> {\n-    borrow: cell::Ref<'a, Option<AllTraitsVec>>,\n-    idx: usize,\n-}\n-\n-impl<'a> Iterator for AllTraits<'a> {\n-    type Item = TraitInfo;\n-\n-    fn next(&mut self) -> Option<TraitInfo> {\n-        let AllTraits { ref borrow, ref mut idx } = *self;\n-        // ugh.\n-        borrow.as_ref().unwrap().get(*idx).map(|info| {\n-            *idx += 1;\n-            TraitInfo::new(*info)\n-        })\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        let len = self.borrow.as_ref().unwrap().len() - self.idx;\n-        (len, Some(len))\n+pub fn provide(providers: &mut ty::maps::Providers) {\n+    providers.all_traits = |tcx, cnum| {\n+        assert_eq!(cnum, LOCAL_CRATE);\n+        Lrc::new(compute_all_traits(tcx))\n     }\n }\n \n-impl<'a> ExactSizeIterator for AllTraits<'a> {}\n-\n-\n struct UsePlacementFinder<'a, 'tcx: 'a, 'gcx: 'tcx> {\n     target_module: ast::NodeId,\n     span: Option<Span>,"}, {"sha": "1308f9ef2cd02bbaa98068f81287da0e42c17793", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472b416592f494aa4fe0db50802ba49803cec26d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=472b416592f494aa4fe0db50802ba49803cec26d", "patch": "@@ -730,6 +730,7 @@ fn check_impl_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: De\n }\n \n pub fn provide(providers: &mut Providers) {\n+    method::provide(providers);\n     *providers = Providers {\n         typeck_item_bodies,\n         typeck_tables_of,"}]}