{"sha": "94faa5c7399202d9b3277e1851f34b3248675ec8", "node_id": "C_kwDOAAsO6NoAKDk0ZmFhNWM3Mzk5MjAyZDliMzI3N2UxODUxZjM0YjMyNDg2NzVlYzg", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-03T22:35:27Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-03T22:42:01Z"}, "message": "rustdoc: convert render_attributes_in_pre to return a Display", "tree": {"sha": "5e7a89da65375f6a8c9a6b1f05d7bce5b92b7fe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e7a89da65375f6a8c9a6b1f05d7bce5b92b7fe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94faa5c7399202d9b3277e1851f34b3248675ec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94faa5c7399202d9b3277e1851f34b3248675ec8", "html_url": "https://github.com/rust-lang/rust/commit/94faa5c7399202d9b3277e1851f34b3248675ec8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94faa5c7399202d9b3277e1851f34b3248675ec8/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc5de13d315c1b857ff53054fd68c4a928122330", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5de13d315c1b857ff53054fd68c4a928122330", "html_url": "https://github.com/rust-lang/rust/commit/fc5de13d315c1b857ff53054fd68c4a928122330"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "920fbdcf0d61699630955fb9b2d6e416ee84f2d9", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/94faa5c7399202d9b3277e1851f34b3248675ec8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94faa5c7399202d9b3277e1851f34b3248675ec8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=94faa5c7399202d9b3277e1851f34b3248675ec8", "patch": "@@ -50,6 +50,7 @@ use std::string::ToString;\n use askama::Template;\n use rustc_ast_pretty::pprust;\n use rustc_attr::{ConstStability, Deprecation, StabilityLevel};\n+use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::{DefId, DefIdSet};\n use rustc_hir::Mutability;\n@@ -842,7 +843,7 @@ fn assoc_method(\n     let (indent, indent_str, end_newline) = if parent == ItemType::Trait {\n         header_len += 4;\n         let indent_str = \"    \";\n-        render_attributes_in_pre(w, meth, indent_str);\n+        write!(w, \"{}\", render_attributes_in_pre(meth, indent_str));\n         (4, indent_str, Ending::NoNewline)\n     } else {\n         render_attributes_in_code(w, meth);\n@@ -1038,10 +1039,16 @@ fn attributes(it: &clean::Item) -> Vec<String> {\n \n // When an attribute is rendered inside a `<pre>` tag, it is formatted using\n // a whitespace prefix and newline.\n-fn render_attributes_in_pre(w: &mut Buffer, it: &clean::Item, prefix: &str) {\n-    for a in attributes(it) {\n-        writeln!(w, \"{}{}\", prefix, a);\n-    }\n+fn render_attributes_in_pre<'a>(\n+    it: &'a clean::Item,\n+    prefix: &'a str,\n+) -> impl fmt::Display + Captures<'a> {\n+    crate::html::format::display_fn(move |f| {\n+        for a in attributes(it) {\n+            writeln!(f, \"{}{}\", prefix, a)?;\n+        }\n+        Ok(())\n+    })\n }\n \n // When an attribute is rendered inside a <code> tag, it is formatted using"}, {"sha": "b223c49a89993f719c7c443435070213c1f8b452", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/94faa5c7399202d9b3277e1851f34b3248675ec8/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94faa5c7399202d9b3277e1851f34b3248675ec8/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=94faa5c7399202d9b3277e1851f34b3248675ec8", "patch": "@@ -544,12 +544,12 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n         f.decl.output.as_return().and_then(|output| notable_traits_button(output, cx));\n \n     wrap_item(w, |w| {\n-        render_attributes_in_pre(w, it, \"\");\n         w.reserve(header_len);\n         write!(\n             w,\n-            \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n+            \"{attrs}{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n                 {name}{generics}{decl}{notable_traits}{where_clause}\",\n+            attrs = render_attributes_in_pre(it, \"\"),\n             vis = visibility,\n             constness = constness,\n             asyncness = asyncness,\n@@ -581,16 +581,16 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n \n     // Output the trait definition\n     wrap_item(w, |w| {\n-        render_attributes_in_pre(w, it, \"\");\n         write!(\n             w,\n-            \"{}{}{}trait {}{}{}\",\n+            \"{attrs}{}{}{}trait {}{}{}\",\n             visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n             t.unsafety(tcx).print_with_space(),\n             if t.is_auto(tcx) { \"auto \" } else { \"\" },\n             it.name.unwrap(),\n             t.generics.print(cx),\n-            bounds\n+            bounds,\n+            attrs = render_attributes_in_pre(it, \"\"),\n         );\n \n         if !t.generics.where_predicates.is_empty() {\n@@ -1057,14 +1057,14 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n \n fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::TraitAlias) {\n     wrap_item(w, |w| {\n-        render_attributes_in_pre(w, it, \"\");\n         write!(\n             w,\n-            \"trait {}{}{} = {};\",\n+            \"{attrs}trait {}{}{} = {};\",\n             it.name.unwrap(),\n             t.generics.print(cx),\n             print_where_clause(&t.generics, cx, 0, Ending::Newline),\n-            bounds(&t.bounds, true, cx)\n+            bounds(&t.bounds, true, cx),\n+            attrs = render_attributes_in_pre(it, \"\"),\n         );\n     });\n \n@@ -1079,14 +1079,14 @@ fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &\n \n fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::OpaqueTy) {\n     wrap_item(w, |w| {\n-        render_attributes_in_pre(w, it, \"\");\n         write!(\n             w,\n-            \"type {}{}{where_clause} = impl {bounds};\",\n+            \"{attrs}type {}{}{where_clause} = impl {bounds};\",\n             it.name.unwrap(),\n             t.generics.print(cx),\n             where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n             bounds = bounds(&t.bounds, false, cx),\n+            attrs = render_attributes_in_pre(it, \"\"),\n         );\n     });\n \n@@ -1102,15 +1102,15 @@ fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &cl\n fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::Typedef) {\n     fn write_content(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Typedef) {\n         wrap_item(w, |w| {\n-            render_attributes_in_pre(w, it, \"\");\n             write!(\n                 w,\n-                \"{}type {}{}{where_clause} = {type_};\",\n+                \"{attrs}{}type {}{}{where_clause} = {type_};\",\n                 visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n                 it.name.unwrap(),\n                 t.generics.print(cx),\n                 where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n                 type_ = t.type_.print(cx),\n+                attrs = render_attributes_in_pre(it, \"\"),\n             );\n         });\n     }\n@@ -1130,7 +1130,7 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n \n fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Union) {\n     wrap_item(w, |w| {\n-        render_attributes_in_pre(w, it, \"\");\n+        write!(w, \"{}\", render_attributes_in_pre(it, \"\"));\n         render_union(w, it, Some(&s.generics), &s.fields, cx);\n     });\n \n@@ -1197,13 +1197,13 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n     let tcx = cx.tcx();\n     let count_variants = e.variants().count();\n     wrap_item(w, |w| {\n-        render_attributes_in_pre(w, it, \"\");\n         write!(\n             w,\n-            \"{}enum {}{}\",\n+            \"{attrs}{}enum {}{}\",\n             visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n             it.name.unwrap(),\n             e.generics.print(cx),\n+            attrs = render_attributes_in_pre(it, \"\"),\n         );\n         if !print_where_clause_and_check(w, &e.generics, cx) {\n             // If there wasn't a `where` clause, we add a whitespace."}]}