{"sha": "50f2176721a08c0c5673db924a95c0544316682c", "node_id": "C_kwDOAAsO6NoAKDUwZjIxNzY3MjFhMDhjMGM1NjczZGI5MjRhOTVjMDU0NDMxNjY4MmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-08T00:46:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-08T00:46:58Z"}, "message": "Auto merge of #112012 - Kobzol:try-build-llvm-rebuild, r=nikic\n\nAvoid one `rustc` rebuild in the optimized build pipeline\n\nThis PR changes the optimized build pipeline to avoid one `rustc` rebuild, inspired by [this comment](https://github.com/rust-lang/rust/issues/112011#issuecomment-1564991175). This speeds up the pipeline by 5-10 minutes. After this change, we **no longer gather LLVM PGO profiles from compiling stage 2 of `rustc`**.\n\nNow we build `rustc` two times (1x PGO instrumented, 1x PGO optimized) and LLVM three times (1x normal, 1x PGO instrumented, 1x PGO optimized). It should be possible to cache the normal LLVM build, but I'll leave that for another PR.", "tree": {"sha": "c7dc2b197777dd1b8926fbef0d8b57c374e327c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7dc2b197777dd1b8926fbef0d8b57c374e327c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50f2176721a08c0c5673db924a95c0544316682c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50f2176721a08c0c5673db924a95c0544316682c", "html_url": "https://github.com/rust-lang/rust/commit/50f2176721a08c0c5673db924a95c0544316682c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50f2176721a08c0c5673db924a95c0544316682c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f383703e32dc583468a702213eff63c58c7f9ef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f383703e32dc583468a702213eff63c58c7f9ef5", "html_url": "https://github.com/rust-lang/rust/commit/f383703e32dc583468a702213eff63c58c7f9ef5"}, {"sha": "41f9f63de65a029393dfe7ec22c54a75fdf65d20", "url": "https://api.github.com/repos/rust-lang/rust/commits/41f9f63de65a029393dfe7ec22c54a75fdf65d20", "html_url": "https://github.com/rust-lang/rust/commit/41f9f63de65a029393dfe7ec22c54a75fdf65d20"}], "stats": {"total": 154, "additions": 99, "deletions": 55}, "files": [{"sha": "72d791b5434286cf72e14d8f1a32a0a9e16ac22c", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50f2176721a08c0c5673db924a95c0544316682c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f2176721a08c0c5673db924a95c0544316682c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=50f2176721a08c0c5673db924a95c0544316682c", "patch": "@@ -118,6 +118,10 @@ impl Step for Std {\n             || builder.config.keep_stage_std.contains(&compiler.stage)\n         {\n             builder.info(\"Warning: Using a potentially old libstd. This may not behave well.\");\n+\n+            copy_third_party_objects(builder, &compiler, target);\n+            copy_self_contained_objects(builder, &compiler, target);\n+\n             builder.ensure(StdLink::from_std(self, compiler));\n             return;\n         }"}, {"sha": "febc0492b9433064c944a48bc2ac0716273c5600", "filename": "src/ci/stage-build.py", "status": "modified", "additions": 95, "deletions": 55, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/50f2176721a08c0c5673db924a95c0544316682c/src%2Fci%2Fstage-build.py", "raw_url": "https://github.com/rust-lang/rust/raw/50f2176721a08c0c5673db924a95c0544316682c/src%2Fci%2Fstage-build.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fstage-build.py?ref=50f2176721a08c0c5673db924a95c0544316682c", "patch": "@@ -620,20 +620,25 @@ def get_files(directory: Path, filter: Optional[Callable[[Path], bool]] = None)\n             yield path\n \n \n-def build_rustc(\n+def bootstrap_build(\n         pipeline: Pipeline,\n         args: List[str],\n-        env: Optional[Dict[str, str]] = None\n+        env: Optional[Dict[str, str]] = None,\n+        targets: Iterable[str] = (\"library/std\", )\n ):\n+    if env is None:\n+        env = {}\n+    else:\n+        env = dict(env)\n+    env[\"RUST_BACKTRACE\"] = \"1\"\n     arguments = [\n                     sys.executable,\n                     pipeline.checkout_path() / \"x.py\",\n                     \"build\",\n                     \"--target\", PGO_HOST,\n                     \"--host\", PGO_HOST,\n                     \"--stage\", \"2\",\n-                    \"library/std\"\n-                ] + args\n+                    ] + list(targets) + args\n     cmd(arguments, env=env)\n \n \n@@ -776,18 +781,18 @@ def record_metrics(pipeline: Pipeline, timer: Timer):\n     if metrics is None:\n         return\n     llvm_steps = tuple(metrics.find_all_by_type(\"bootstrap::llvm::Llvm\"))\n-    assert len(llvm_steps) > 0\n     llvm_duration = sum(step.duration for step in llvm_steps)\n \n     rustc_steps = tuple(metrics.find_all_by_type(\"bootstrap::compile::Rustc\"))\n-    assert len(rustc_steps) > 0\n     rustc_duration = sum(step.duration for step in rustc_steps)\n \n     # The LLVM step is part of the Rustc step\n-    rustc_duration -= llvm_duration\n+    rustc_duration = max(0, rustc_duration - llvm_duration)\n \n-    timer.add_duration(\"LLVM\", llvm_duration)\n-    timer.add_duration(\"Rustc\", rustc_duration)\n+    if llvm_duration > 0:\n+        timer.add_duration(\"LLVM\", llvm_duration)\n+    if rustc_duration > 0:\n+        timer.add_duration(\"Rustc\", rustc_duration)\n \n     log_metrics(metrics)\n \n@@ -872,79 +877,114 @@ def extract_dist_dir(name: str) -> Path:\n     ))\n \n \n-def execute_build_pipeline(timer: Timer, pipeline: Pipeline, runner: BenchmarkRunner, final_build_args: List[str]):\n+def execute_build_pipeline(timer: Timer, pipeline: Pipeline, runner: BenchmarkRunner, dist_build_args: List[str]):\n     # Clear and prepare tmp directory\n     shutil.rmtree(pipeline.opt_artifacts(), ignore_errors=True)\n     os.makedirs(pipeline.opt_artifacts(), exist_ok=True)\n \n     pipeline.build_rustc_perf()\n \n-    # Stage 1: Build rustc + PGO instrumented LLVM\n-    with timer.section(\"Stage 1 (LLVM PGO)\") as stage1:\n-        with stage1.section(\"Build rustc and LLVM\") as rustc_build:\n-            build_rustc(pipeline, args=[\n-                \"--llvm-profile-generate\"\n-            ], env=dict(\n-                LLVM_PROFILE_DIR=str(pipeline.llvm_profile_dir_root() / \"prof-%p\")\n-            ))\n-            record_metrics(pipeline, rustc_build)\n+    \"\"\"\n+    Stage 1: Build PGO instrumented rustc\n+\n+    We use a normal build of LLVM, because gathering PGO profiles for LLVM and `rustc` at the same time\n+    can cause issues.\n+    \"\"\"\n+    with timer.section(\"Stage 1 (rustc PGO)\") as stage1:\n+        with stage1.section(\"Build PGO instrumented rustc and LLVM\") as rustc_pgo_instrument:\n+            bootstrap_build(pipeline, args=[\n+                \"--rust-profile-generate\",\n+                pipeline.rustc_profile_dir_root()\n+            ])\n+            record_metrics(pipeline, rustc_pgo_instrument)\n \n         with stage1.section(\"Gather profiles\"):\n-            gather_llvm_profiles(pipeline, runner)\n+            gather_rustc_profiles(pipeline, runner)\n         print_free_disk_space(pipeline)\n \n-    clear_llvm_files(pipeline)\n-    final_build_args += [\n-        \"--llvm-profile-use\",\n-        pipeline.llvm_profile_merged_file()\n-    ]\n-\n-    # Stage 2: Build PGO instrumented rustc + LLVM\n-    with timer.section(\"Stage 2 (rustc PGO)\") as stage2:\n-        with stage2.section(\"Build rustc and LLVM\") as rustc_build:\n-            build_rustc(pipeline, args=[\n-                \"--rust-profile-generate\",\n-                pipeline.rustc_profile_dir_root()\n+        with stage1.section(\"Build PGO optimized rustc\") as rustc_pgo_use:\n+            bootstrap_build(pipeline, args=[\n+                \"--rust-profile-use\",\n+                pipeline.rustc_profile_merged_file()\n             ])\n-            record_metrics(pipeline, rustc_build)\n+            record_metrics(pipeline, rustc_pgo_use)\n+        dist_build_args += [\n+            \"--rust-profile-use\",\n+            pipeline.rustc_profile_merged_file()\n+        ]\n+\n+    \"\"\"\n+    Stage 2: Gather LLVM PGO profiles\n+    \"\"\"\n+    with timer.section(\"Stage 2 (LLVM PGO)\") as stage2:\n+        # Clear normal LLVM artifacts\n+        clear_llvm_files(pipeline)\n+\n+        with stage2.section(\"Build PGO instrumented LLVM\") as llvm_pgo_instrument:\n+            bootstrap_build(pipeline, args=[\n+                \"--llvm-profile-generate\",\n+                # We want to keep the already built PGO-optimized `rustc`.\n+                \"--keep-stage\", \"0\",\n+                \"--keep-stage\", \"1\"\n+            ], env=dict(\n+                LLVM_PROFILE_DIR=str(pipeline.llvm_profile_dir_root() / \"prof-%p\")\n+            ))\n+            record_metrics(pipeline, llvm_pgo_instrument)\n \n         with stage2.section(\"Gather profiles\"):\n-            gather_rustc_profiles(pipeline, runner)\n+            gather_llvm_profiles(pipeline, runner)\n+\n+        dist_build_args += [\n+            \"--llvm-profile-use\",\n+            pipeline.llvm_profile_merged_file(),\n+        ]\n         print_free_disk_space(pipeline)\n \n-    clear_llvm_files(pipeline)\n-    final_build_args += [\n-        \"--rust-profile-use\",\n-        pipeline.rustc_profile_merged_file()\n-    ]\n+        # Clear PGO-instrumented LLVM artifacts\n+        clear_llvm_files(pipeline)\n \n-    # Stage 3: Build rustc + BOLT instrumented LLVM\n+    \"\"\"\n+    Stage 3: Build BOLT instrumented LLVM\n+\n+    We build a PGO optimized LLVM in this step, then instrument it with BOLT and gather BOLT profiles.\n+    Note that we don't remove LLVM artifacts after this step, so that they are reused in the final dist build.\n+    BOLT instrumentation is performed \"on-the-fly\" when the LLVM library is copied to the sysroot of rustc,\n+    therefore the LLVM artifacts on disk are not \"tainted\" with BOLT instrumentation and they can be reused.\n+    \"\"\"\n     if pipeline.supports_bolt():\n         with timer.section(\"Stage 3 (LLVM BOLT)\") as stage3:\n-            with stage3.section(\"Build rustc and LLVM\") as rustc_build:\n-                build_rustc(pipeline, args=[\n+            with stage3.section(\"Build BOLT instrumented LLVM\") as llvm_bolt_instrument:\n+                bootstrap_build(pipeline, args=[\n                     \"--llvm-profile-use\",\n                     pipeline.llvm_profile_merged_file(),\n                     \"--llvm-bolt-profile-generate\",\n-                    \"--rust-profile-use\",\n-                    pipeline.rustc_profile_merged_file()\n+                    # We want to keep the already built PGO-optimized `rustc`.\n+                    \"--keep-stage\", \"0\",\n+                    \"--keep-stage\", \"1\"\n                 ])\n-                record_metrics(pipeline, rustc_build)\n+                record_metrics(pipeline, llvm_bolt_instrument)\n \n             with stage3.section(\"Gather profiles\"):\n                 gather_llvm_bolt_profiles(pipeline, runner)\n \n-        # LLVM is not being cleared here, we want to reuse the previous build\n-        print_free_disk_space(pipeline)\n-        final_build_args += [\n-            \"--llvm-bolt-profile-use\",\n-            pipeline.llvm_bolt_profile_merged_file()\n-        ]\n+            dist_build_args += [\n+                \"--llvm-bolt-profile-use\",\n+                pipeline.llvm_bolt_profile_merged_file()\n+            ]\n+            print_free_disk_space(pipeline)\n \n-    # Stage 4: Build PGO optimized rustc + PGO/BOLT optimized LLVM\n-    with timer.section(\"Stage 4 (final build)\") as stage4:\n-        cmd(final_build_args)\n-        record_metrics(pipeline, stage4)\n+    # We want to keep the already built PGO-optimized `rustc`.\n+    dist_build_args += [\n+        \"--keep-stage\", \"0\",\n+        \"--keep-stage\", \"1\"\n+    ]\n+\n+    \"\"\"\n+    Final stage: Build PGO optimized rustc + PGO/BOLT optimized LLVM\n+    \"\"\"\n+    with timer.section(\"Final stage (dist build)\") as final_stage:\n+        cmd(dist_build_args)\n+        record_metrics(pipeline, final_stage)\n \n     # Try builds can be in various broken states, so we don't want to gatekeep them with tests\n     if not is_try_build():"}]}