{"sha": "2ba0b65c27724b99f2624c4245698e8ef36a2cf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYTBiNjVjMjc3MjRiOTlmMjYyNGM0MjQ1Njk4ZThlZjM2YTJjZjI=", "commit": {"author": {"name": "Son", "email": "leson.phung@gmail.com", "date": "2017-02-07T09:58:34Z"}, "committer": {"name": "Son", "email": "leson.phung@gmail.com", "date": "2017-02-07T09:58:34Z"}, "message": "Improve fmt float\n* Move to a separate float mod\n* Add more tests for f64 f32 lower exp upper exp\n* Use assert_eq for a clearer error message", "tree": {"sha": "042bb9afc93e895d4b066517e5b9bacbdfade2e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/042bb9afc93e895d4b066517e5b9bacbdfade2e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ba0b65c27724b99f2624c4245698e8ef36a2cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba0b65c27724b99f2624c4245698e8ef36a2cf2", "html_url": "https://github.com/rust-lang/rust/commit/2ba0b65c27724b99f2624c4245698e8ef36a2cf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ba0b65c27724b99f2624c4245698e8ef36a2cf2/comments", "author": {"login": "phungleson", "id": 93457, "node_id": "MDQ6VXNlcjkzNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/93457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phungleson", "html_url": "https://github.com/phungleson", "followers_url": "https://api.github.com/users/phungleson/followers", "following_url": "https://api.github.com/users/phungleson/following{/other_user}", "gists_url": "https://api.github.com/users/phungleson/gists{/gist_id}", "starred_url": "https://api.github.com/users/phungleson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phungleson/subscriptions", "organizations_url": "https://api.github.com/users/phungleson/orgs", "repos_url": "https://api.github.com/users/phungleson/repos", "events_url": "https://api.github.com/users/phungleson/events{/privacy}", "received_events_url": "https://api.github.com/users/phungleson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phungleson", "id": 93457, "node_id": "MDQ6VXNlcjkzNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/93457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phungleson", "html_url": "https://github.com/phungleson", "followers_url": "https://api.github.com/users/phungleson/followers", "following_url": "https://api.github.com/users/phungleson/following{/other_user}", "gists_url": "https://api.github.com/users/phungleson/gists{/gist_id}", "starred_url": "https://api.github.com/users/phungleson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phungleson/subscriptions", "organizations_url": "https://api.github.com/users/phungleson/orgs", "repos_url": "https://api.github.com/users/phungleson/repos", "events_url": "https://api.github.com/users/phungleson/events{/privacy}", "received_events_url": "https://api.github.com/users/phungleson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4711ac314c3380f992e218879b7c94b26ba4102b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4711ac314c3380f992e218879b7c94b26ba4102b", "html_url": "https://github.com/rust-lang/rust/commit/4711ac314c3380f992e218879b7c94b26ba4102b"}], "stats": {"total": 213, "additions": 123, "deletions": 90}, "files": [{"sha": "50248fabfcd451e879df2855fb59604b64b34dec", "filename": "src/libcore/fmt/float.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/2ba0b65c27724b99f2624c4245698e8ef36a2cf2/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba0b65c27724b99f2624c4245698e8ef36a2cf2/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=2ba0b65c27724b99f2624c4245698e8ef36a2cf2", "patch": "@@ -0,0 +1,94 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use fmt::{Formatter, Result, LowerExp, UpperExp, Display, Debug};\n+use num::flt2dec;\n+\n+// Common code of floating point Debug and Display.\n+fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T, negative_zero: bool) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    let force_sign = fmt.sign_plus();\n+    let sign = match (force_sign, negative_zero) {\n+        (false, false) => flt2dec::Sign::Minus,\n+        (false, true)  => flt2dec::Sign::MinusRaw,\n+        (true,  false) => flt2dec::Sign::MinusPlus,\n+        (true,  true)  => flt2dec::Sign::MinusPlusRaw,\n+    };\n+\n+    let mut buf = [0; 1024]; // enough for f32 and f64\n+    let mut parts = [flt2dec::Part::Zero(0); 16];\n+    let formatted = if let Some(precision) = fmt.precision {\n+        flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact, *num, sign,\n+                                    precision, false, &mut buf, &mut parts)\n+    } else {\n+        flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest, *num, sign,\n+                                 0, false, &mut buf, &mut parts)\n+    };\n+    fmt.pad_formatted_parts(&formatted)\n+}\n+\n+// Common code of floating point LowerExp and UpperExp.\n+fn float_to_exponential_common<T>(fmt: &mut Formatter, num: &T, upper: bool) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    let force_sign = fmt.sign_plus();\n+    let sign = match force_sign {\n+        false => flt2dec::Sign::Minus,\n+        true  => flt2dec::Sign::MinusPlus,\n+    };\n+\n+    let mut buf = [0; 1024]; // enough for f32 and f64\n+    let mut parts = [flt2dec::Part::Zero(0); 16];\n+    let formatted = if let Some(precision) = fmt.precision {\n+        // 1 integral digit + `precision` fractional digits = `precision + 1` total digits\n+        flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact, *num, sign,\n+                                  precision + 1, upper, &mut buf, &mut parts)\n+    } else {\n+        flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest, *num, sign,\n+                                     (0, 0), upper, &mut buf, &mut parts)\n+    };\n+    fmt.pad_formatted_parts(&formatted)\n+}\n+\n+macro_rules! floating {\n+    ($ty:ident) => (\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl Debug for $ty {\n+            fn fmt(&self, fmt: &mut Formatter) -> Result {\n+                float_to_decimal_common(fmt, self, true)\n+            }\n+        }\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl Display for $ty {\n+            fn fmt(&self, fmt: &mut Formatter) -> Result {\n+                float_to_decimal_common(fmt, self, false)\n+            }\n+        }\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl LowerExp for $ty {\n+            fn fmt(&self, fmt: &mut Formatter) -> Result {\n+                float_to_exponential_common(fmt, self, false)\n+            }\n+        }\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl UpperExp for $ty {\n+            fn fmt(&self, fmt: &mut Formatter) -> Result {\n+                float_to_exponential_common(fmt, self, true)\n+            }\n+        }\n+    )\n+}\n+\n+floating! { f32 }\n+floating! { f64 }"}, {"sha": "eb086c201812a3f0c9e3671c2abed863615aff66", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 83, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/2ba0b65c27724b99f2624c4245698e8ef36a2cf2/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba0b65c27724b99f2624c4245698e8ef36a2cf2/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=2ba0b65c27724b99f2624c4245698e8ef36a2cf2", "patch": "@@ -21,6 +21,10 @@ use result;\n use slice;\n use str;\n \n+mod float;\n+mod num;\n+mod builders;\n+\n #[unstable(feature = \"fmt_flags_align\", issue = \"27726\")]\n /// Possible alignments returned by `Formatter::align`\n #[derive(Debug)]\n@@ -38,9 +42,6 @@ pub enum Alignment {\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub use self::builders::{DebugStruct, DebugTuple, DebugSet, DebugList, DebugMap};\n \n-mod num;\n-mod builders;\n-\n #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n            issue = \"0\")]\n #[doc(hidden)]\n@@ -1511,86 +1512,6 @@ impl<'a, T: ?Sized> Pointer for &'a mut T {\n     }\n }\n \n-// Common code of floating point Debug and Display.\n-fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T, negative_zero: bool) -> Result\n-    where T: flt2dec::DecodableFloat\n-{\n-    let force_sign = fmt.sign_plus();\n-    let sign = match (force_sign, negative_zero) {\n-        (false, false) => flt2dec::Sign::Minus,\n-        (false, true)  => flt2dec::Sign::MinusRaw,\n-        (true,  false) => flt2dec::Sign::MinusPlus,\n-        (true,  true)  => flt2dec::Sign::MinusPlusRaw,\n-    };\n-\n-    let mut buf = [0; 1024]; // enough for f32 and f64\n-    let mut parts = [flt2dec::Part::Zero(0); 16];\n-    let formatted = if let Some(precision) = fmt.precision {\n-        flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact, *num, sign,\n-                                    precision, false, &mut buf, &mut parts)\n-    } else {\n-        flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest, *num, sign,\n-                                 0, false, &mut buf, &mut parts)\n-    };\n-    fmt.pad_formatted_parts(&formatted)\n-}\n-\n-// Common code of floating point LowerExp and UpperExp.\n-fn float_to_exponential_common<T>(fmt: &mut Formatter, num: &T, upper: bool) -> Result\n-    where T: flt2dec::DecodableFloat\n-{\n-    let force_sign = fmt.sign_plus();\n-    let sign = match force_sign {\n-        false => flt2dec::Sign::Minus,\n-        true  => flt2dec::Sign::MinusPlus,\n-    };\n-\n-    let mut buf = [0; 1024]; // enough for f32 and f64\n-    let mut parts = [flt2dec::Part::Zero(0); 16];\n-    let formatted = if let Some(precision) = fmt.precision {\n-        // 1 integral digit + `precision` fractional digits = `precision + 1` total digits\n-        flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact, *num, sign,\n-                                  precision + 1, upper, &mut buf, &mut parts)\n-    } else {\n-        flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest, *num, sign,\n-                                     (0, 0), upper, &mut buf, &mut parts)\n-    };\n-    fmt.pad_formatted_parts(&formatted)\n-}\n-\n-macro_rules! floating { ($ty:ident) => {\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl Debug for $ty {\n-        fn fmt(&self, fmt: &mut Formatter) -> Result {\n-            float_to_decimal_common(fmt, self, true)\n-        }\n-    }\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl Display for $ty {\n-        fn fmt(&self, fmt: &mut Formatter) -> Result {\n-            float_to_decimal_common(fmt, self, false)\n-        }\n-    }\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl LowerExp for $ty {\n-        fn fmt(&self, fmt: &mut Formatter) -> Result {\n-            float_to_exponential_common(fmt, self, false)\n-        }\n-    }\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl UpperExp for $ty {\n-        fn fmt(&self, fmt: &mut Formatter) -> Result {\n-            float_to_exponential_common(fmt, self, true)\n-        }\n-    }\n-} }\n-floating! { f32 }\n-floating! { f64 }\n-\n // Implementation of Display/Debug for various core types\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "695001312e4d5aeac1a40c15f9b0b9397906a8bd", "filename": "src/libcoretest/fmt/float.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2ba0b65c27724b99f2624c4245698e8ef36a2cf2/src%2Flibcoretest%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba0b65c27724b99f2624c4245698e8ef36a2cf2/src%2Flibcoretest%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Ffloat.rs?ref=2ba0b65c27724b99f2624c4245698e8ef36a2cf2", "patch": "@@ -9,11 +9,29 @@\n // except according to those terms.\n \n #[test]\n-fn test_format_float() {\n-    assert!(\"1\" == format!(\"{:.0}\", 1.0f64));\n-    assert!(\"9\" == format!(\"{:.0}\", 9.4f64));\n-    assert!(\"10\" == format!(\"{:.0}\", 9.9f64));\n-    assert!(\"9.8\" == format!(\"{:.1}\", 9.849f64));\n-    assert!(\"9.9\" == format!(\"{:.1}\", 9.851f64));\n-    assert!(\"1\" == format!(\"{:.0}\", 0.5f64));\n+fn test_format_f64() {\n+    assert_eq!(\"1\", format!(\"{:.0}\", 1.0f64));\n+    assert_eq!(\"9\", format!(\"{:.0}\", 9.4f64));\n+    assert_eq!(\"10\", format!(\"{:.0}\", 9.9f64));\n+    assert_eq!(\"9.8\", format!(\"{:.1}\", 9.849f64));\n+    assert_eq!(\"9.9\", format!(\"{:.1}\", 9.851f64));\n+    assert_eq!(\"1\", format!(\"{:.0}\", 0.5f64));\n+    assert_eq!(\"1.23456789e6\", format!(\"{:e}\", 1234567.89f64));\n+    assert_eq!(\"1.23456789e3\", format!(\"{:e}\", 1234.56789f64));\n+    assert_eq!(\"1.23456789E6\", format!(\"{:E}\", 1234567.89f64));\n+    assert_eq!(\"1.23456789E3\", format!(\"{:E}\", 1234.56789f64));\n+}\n+\n+#[test]\n+fn test_format_f32() {\n+    assert_eq!(\"1\", format!(\"{:.0}\", 1.0f32));\n+    assert_eq!(\"9\", format!(\"{:.0}\", 9.4f32));\n+    assert_eq!(\"10\", format!(\"{:.0}\", 9.9f32));\n+    assert_eq!(\"9.8\", format!(\"{:.1}\", 9.849f32));\n+    assert_eq!(\"9.9\", format!(\"{:.1}\", 9.851f32));\n+    assert_eq!(\"1\", format!(\"{:.0}\", 0.5f32));\n+    assert_eq!(\"1.2345679e6\", format!(\"{:e}\", 1234567.89f32));\n+    assert_eq!(\"1.2345679e3\", format!(\"{:e}\", 1234.56789f32));\n+    assert_eq!(\"1.2345679E6\", format!(\"{:E}\", 1234567.89f32));\n+    assert_eq!(\"1.2345679E3\", format!(\"{:E}\", 1234.56789f32));\n }"}]}