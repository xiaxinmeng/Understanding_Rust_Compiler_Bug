{"sha": "1f5d8d49eb6111931091f700d07518cd2b80bc18", "node_id": "C_kwDOAAsO6NoAKDFmNWQ4ZDQ5ZWI2MTExOTMxMDkxZjcwMGQwNzUxOGNkMmI4MGJjMTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-01T06:44:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-01T06:44:43Z"}, "message": "Auto merge of #98246 - joshtriplett:times, r=m-ou-se\n\nSupport setting file accessed/modified timestamps\n\nAdd `struct FileTimes` to contain the relevant file timestamps, since\nmost platforms require setting all of them at once. (This also allows\nfor future platform-specific extensions such as setting creation time.)\n\nAdd `File::set_file_time` to set the timestamps for a `File`.\n\nImplement the `sys` backends for UNIX, macOS (which needs to fall back\nto `futimes` before macOS 10.13 because it lacks `futimens`), Windows,\nand WASI.", "tree": {"sha": "82ad9931fc0f0bcb4e4cbdac234cea0c74858607", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82ad9931fc0f0bcb4e4cbdac234cea0c74858607"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f5d8d49eb6111931091f700d07518cd2b80bc18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5d8d49eb6111931091f700d07518cd2b80bc18", "html_url": "https://github.com/rust-lang/rust/commit/1f5d8d49eb6111931091f700d07518cd2b80bc18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f5d8d49eb6111931091f700d07518cd2b80bc18/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25bb1c13bd472b75ceebee3b8dcf4dcbc431a8be", "url": "https://api.github.com/repos/rust-lang/rust/commits/25bb1c13bd472b75ceebee3b8dcf4dcbc431a8be", "html_url": "https://github.com/rust-lang/rust/commit/25bb1c13bd472b75ceebee3b8dcf4dcbc431a8be"}, {"sha": "f8061ddb03f6b07108b0d041742f4faf0b3d5339", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8061ddb03f6b07108b0d041742f4faf0b3d5339", "html_url": "https://github.com/rust-lang/rust/commit/f8061ddb03f6b07108b0d041742f4faf0b3d5339"}], "stats": {"total": 265, "additions": 262, "deletions": 3}, "files": [{"sha": "c8e131b6ee14c32f7c0e6ee7579467ba276f8b28", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=1f5d8d49eb6111931091f700d07518cd2b80bc18", "patch": "@@ -184,6 +184,11 @@ pub struct DirEntry(fs_imp::DirEntry);\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OpenOptions(fs_imp::OpenOptions);\n \n+/// Representation of the various timestamps on a file.\n+#[derive(Copy, Clone, Debug, Default)]\n+#[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+pub struct FileTimes(fs_imp::FileTimes);\n+\n /// Representation of the various permissions on a file.\n ///\n /// This module only currently provides one bit of information,\n@@ -596,6 +601,58 @@ impl File {\n     pub fn set_permissions(&self, perm: Permissions) -> io::Result<()> {\n         self.inner.set_permissions(perm.0)\n     }\n+\n+    /// Changes the timestamps of the underlying file.\n+    ///\n+    /// # Platform-specific behavior\n+    ///\n+    /// This function currently corresponds to the `futimens` function on Unix (falling back to\n+    /// `futimes` on macOS before 10.13) and the `SetFileTime` function on Windows. Note that this\n+    /// [may change in the future][changes].\n+    ///\n+    /// [changes]: io#platform-specific-behavior\n+    ///\n+    /// # Errors\n+    ///\n+    /// This function will return an error if the user lacks permission to change timestamps on the\n+    /// underlying file. It may also return an error in other os-specific unspecified cases.\n+    ///\n+    /// This function may return an error if the operating system lacks support to change one or\n+    /// more of the timestamps set in the `FileTimes` structure.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(file_set_times)]\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     use std::fs::{self, File, FileTimes};\n+    ///\n+    ///     let src = fs::metadata(\"src\")?;\n+    ///     let dest = File::options().write(true).open(\"dest\")?;\n+    ///     let times = FileTimes::new()\n+    ///         .set_accessed(src.accessed()?)\n+    ///         .set_modified(src.modified()?);\n+    ///     dest.set_times(times)?;\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+    #[doc(alias = \"futimens\")]\n+    #[doc(alias = \"futimes\")]\n+    #[doc(alias = \"SetFileTime\")]\n+    pub fn set_times(&self, times: FileTimes) -> io::Result<()> {\n+        self.inner.set_times(times.0)\n+    }\n+\n+    /// Changes the modification time of the underlying file.\n+    ///\n+    /// This is an alias for `set_times(FileTimes::new().set_modified(time))`.\n+    #[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+    #[inline]\n+    pub fn set_modified(&self, time: SystemTime) -> io::Result<()> {\n+        self.set_times(FileTimes::new().set_modified(time))\n+    }\n }\n \n // In addition to the `impl`s here, `File` also has `impl`s for\n@@ -1252,6 +1309,30 @@ impl FromInner<fs_imp::FileAttr> for Metadata {\n     }\n }\n \n+impl FileTimes {\n+    /// Create a new `FileTimes` with no times set.\n+    ///\n+    /// Using the resulting `FileTimes` in [`File::set_times`] will not modify any timestamps.\n+    #[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+    pub fn new() -> Self {\n+        Self::default()\n+    }\n+\n+    /// Set the last access time of a file.\n+    #[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+    pub fn set_accessed(mut self, t: SystemTime) -> Self {\n+        self.0.set_accessed(t.into_inner());\n+        self\n+    }\n+\n+    /// Set the last modified time of a file.\n+    #[unstable(feature = \"file_set_times\", issue = \"98245\")]\n+    pub fn set_modified(mut self, t: SystemTime) -> Self {\n+        self.0.set_modified(t.into_inner());\n+        self\n+    }\n+}\n+\n impl Permissions {\n     /// Returns `true` if these permissions describe a readonly (unwritable) file.\n     ///"}, {"sha": "41405cbf65703a1e7712c0587a4b4c5b038df390", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=1f5d8d49eb6111931091f700d07518cd2b80bc18", "patch": "@@ -20,7 +20,7 @@ use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n     target_os = \"watchos\",\n ))]\n use crate::sys::weak::syscall;\n-#[cfg(target_os = \"macos\")]\n+#[cfg(any(target_os = \"android\", target_os = \"macos\"))]\n use crate::sys::weak::weak;\n \n use libc::{c_int, mode_t};\n@@ -313,6 +313,9 @@ pub struct FilePermissions {\n     mode: mode_t,\n }\n \n+#[derive(Copy, Clone)]\n+pub struct FileTimes([libc::timespec; 2]);\n+\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct FileType {\n     mode: mode_t,\n@@ -507,6 +510,48 @@ impl FilePermissions {\n     }\n }\n \n+impl FileTimes {\n+    pub fn set_accessed(&mut self, t: SystemTime) {\n+        self.0[0] = t.t.to_timespec().expect(\"Invalid system time\");\n+    }\n+\n+    pub fn set_modified(&mut self, t: SystemTime) {\n+        self.0[1] = t.t.to_timespec().expect(\"Invalid system time\");\n+    }\n+}\n+\n+struct TimespecDebugAdapter<'a>(&'a libc::timespec);\n+\n+impl fmt::Debug for TimespecDebugAdapter<'_> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"timespec\")\n+            .field(\"tv_sec\", &self.0.tv_sec)\n+            .field(\"tv_nsec\", &self.0.tv_nsec)\n+            .finish()\n+    }\n+}\n+\n+impl fmt::Debug for FileTimes {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"FileTimes\")\n+            .field(\"accessed\", &TimespecDebugAdapter(&self.0[0]))\n+            .field(\"modified\", &TimespecDebugAdapter(&self.0[1]))\n+            .finish()\n+    }\n+}\n+\n+impl Default for FileTimes {\n+    fn default() -> Self {\n+        // Redox doesn't appear to support `UTIME_OMIT`, so we stub it out here, and always return\n+        // an error in `set_times`.\n+        #[cfg(target_os = \"redox\")]\n+        let omit = libc::timespec { tv_sec: 0, tv_nsec: 0 };\n+        #[cfg(not(target_os = \"redox\"))]\n+        let omit = libc::timespec { tv_sec: 0, tv_nsec: libc::UTIME_OMIT as _ };\n+        Self([omit; 2])\n+    }\n+}\n+\n impl FileType {\n     pub fn is_dir(&self) -> bool {\n         self.is(libc::S_IFDIR)\n@@ -1029,6 +1074,48 @@ impl File {\n         cvt_r(|| unsafe { libc::fchmod(self.as_raw_fd(), perm.mode) })?;\n         Ok(())\n     }\n+\n+    pub fn set_times(&self, times: FileTimes) -> io::Result<()> {\n+        cfg_if::cfg_if! {\n+            if #[cfg(target_os = \"redox\")] {\n+                // Redox doesn't appear to support `UTIME_OMIT`.\n+                drop(times);\n+                Err(io::const_io_error!(\n+                    io::ErrorKind::Unsupported,\n+                    \"setting file times not supported\",\n+                ))\n+            } else if #[cfg(any(target_os = \"android\", target_os = \"macos\"))] {\n+                // futimens requires macOS 10.13, and Android API level 19\n+                cvt(unsafe {\n+                    weak!(fn futimens(c_int, *const libc::timespec) -> c_int);\n+                    match futimens.get() {\n+                        Some(futimens) => futimens(self.as_raw_fd(), times.0.as_ptr()),\n+                        #[cfg(target_os = \"macos\")]\n+                        None => {\n+                            fn ts_to_tv(ts: &libc::timespec) -> libc::timeval {\n+                                libc::timeval {\n+                                    tv_sec: ts.tv_sec,\n+                                    tv_usec: (ts.tv_nsec / 1000) as _\n+                                }\n+                            }\n+                            let timevals = [ts_to_tv(&times.0[0]), ts_to_tv(&times.0[1])];\n+                            libc::futimes(self.as_raw_fd(), timevals.as_ptr())\n+                        }\n+                        // futimes requires even newer Android.\n+                        #[cfg(target_os = \"android\")]\n+                        None => return Err(io::const_io_error!(\n+                            io::ErrorKind::Unsupported,\n+                            \"setting file times requires Android API level >= 19\",\n+                        )),\n+                    }\n+                })?;\n+                Ok(())\n+            } else {\n+                cvt(unsafe { libc::futimens(self.as_raw_fd(), times.0.as_ptr()) })?;\n+                Ok(())\n+            }\n+        }\n+    }\n }\n \n impl DirBuilder {"}, {"sha": "0e1a6257ed763e223630189b71c198fd1d95c320", "filename": "library/std/src/sys/unsupported/fs.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs?ref=1f5d8d49eb6111931091f700d07518cd2b80bc18", "patch": "@@ -17,6 +17,9 @@ pub struct DirEntry(!);\n #[derive(Clone, Debug)]\n pub struct OpenOptions {}\n \n+#[derive(Copy, Clone, Debug, Default)]\n+pub struct FileTimes {}\n+\n pub struct FilePermissions(!);\n \n pub struct FileType(!);\n@@ -86,6 +89,11 @@ impl fmt::Debug for FilePermissions {\n     }\n }\n \n+impl FileTimes {\n+    pub fn set_accessed(&mut self, _t: SystemTime) {}\n+    pub fn set_modified(&mut self, _t: SystemTime) {}\n+}\n+\n impl FileType {\n     pub fn is_dir(&self) -> bool {\n         self.0\n@@ -237,6 +245,10 @@ impl File {\n     pub fn set_permissions(&self, _perm: FilePermissions) -> io::Result<()> {\n         self.0\n     }\n+\n+    pub fn set_times(&self, _times: FileTimes) -> io::Result<()> {\n+        self.0\n+    }\n }\n \n impl DirBuilder {"}, {"sha": "6614ae397b57f43ec617eb6040ab9ed5c7ea3526", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=1f5d8d49eb6111931091f700d07518cd2b80bc18", "patch": "@@ -63,6 +63,12 @@ pub struct FilePermissions {\n     readonly: bool,\n }\n \n+#[derive(Copy, Clone, Debug, Default)]\n+pub struct FileTimes {\n+    accessed: Option<wasi::Timestamp>,\n+    modified: Option<wasi::Timestamp>,\n+}\n+\n #[derive(PartialEq, Eq, Hash, Debug, Copy, Clone)]\n pub struct FileType {\n     bits: wasi::Filetype,\n@@ -112,6 +118,16 @@ impl FilePermissions {\n     }\n }\n \n+impl FileTimes {\n+    pub fn set_accessed(&mut self, t: SystemTime) {\n+        self.accessed = Some(t.to_wasi_timestamp_or_panic());\n+    }\n+\n+    pub fn set_modified(&mut self, t: SystemTime) {\n+        self.modified = Some(t.to_wasi_timestamp_or_panic());\n+    }\n+}\n+\n impl FileType {\n     pub fn is_dir(&self) -> bool {\n         self.bits == wasi::FILETYPE_DIRECTORY\n@@ -459,6 +475,15 @@ impl File {\n         unsupported()\n     }\n \n+    pub fn set_times(&self, times: FileTimes) -> io::Result<()> {\n+        self.fd.filestat_set_times(\n+            times.accessed.unwrap_or(0),\n+            times.modified.unwrap_or(0),\n+            times.accessed.map_or(0, |_| wasi::FSTFLAGS_ATIM)\n+                | times.modified.map_or(0, |_| wasi::FSTFLAGS_MTIM),\n+        )\n+    }\n+\n     pub fn read_link(&self, file: &Path) -> io::Result<PathBuf> {\n         read_link(&self.fd, file)\n     }"}, {"sha": "3d326e49106cab07b0934819328d3e35e3c4130d", "filename": "library/std/src/sys/wasi/time.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs?ref=1f5d8d49eb6111931091f700d07518cd2b80bc18", "patch": "@@ -47,6 +47,10 @@ impl SystemTime {\n         SystemTime(Duration::from_nanos(ts))\n     }\n \n+    pub fn to_wasi_timestamp_or_panic(&self) -> wasi::Timestamp {\n+        self.0.as_nanos().try_into().expect(\"time does not fit in WASI timestamp\")\n+    }\n+\n     pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {\n         self.0.checked_sub(other.0).ok_or_else(|| other.0 - self.0)\n     }"}, {"sha": "478068c73ba88bb3c09cc611fa5b6a61d7f18dae", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=1f5d8d49eb6111931091f700d07518cd2b80bc18", "patch": "@@ -620,7 +620,7 @@ pub struct SOCKADDR {\n }\n \n #[repr(C)]\n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug, Default)]\n pub struct FILETIME {\n     pub dwLowDateTime: DWORD,\n     pub dwHighDateTime: DWORD,\n@@ -888,6 +888,12 @@ extern \"system\" {\n     pub fn GetSystemDirectoryW(lpBuffer: LPWSTR, uSize: UINT) -> UINT;\n     pub fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n     pub fn SetFileAttributesW(lpFileName: LPCWSTR, dwFileAttributes: DWORD) -> BOOL;\n+    pub fn SetFileTime(\n+        hFile: BorrowedHandle<'_>,\n+        lpCreationTime: Option<&FILETIME>,\n+        lpLastAccessTime: Option<&FILETIME>,\n+        lpLastWriteTime: Option<&FILETIME>,\n+    ) -> BOOL;\n     pub fn SetLastError(dwErrCode: DWORD);\n     pub fn GetCommandLineW() -> LPWSTR;\n     pub fn GetTempPathW(nBufferLength: DWORD, lpBuffer: LPCWSTR) -> DWORD;"}, {"sha": "aed082b3e0abf9919cd045d9fd9a700a22e40348", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=1f5d8d49eb6111931091f700d07518cd2b80bc18", "patch": "@@ -83,6 +83,12 @@ pub struct FilePermissions {\n     attrs: c::DWORD,\n }\n \n+#[derive(Copy, Clone, Debug, Default)]\n+pub struct FileTimes {\n+    accessed: Option<c::FILETIME>,\n+    modified: Option<c::FILETIME>,\n+}\n+\n #[derive(Debug)]\n pub struct DirBuilder;\n \n@@ -536,6 +542,21 @@ impl File {\n         })?;\n         Ok(())\n     }\n+\n+    pub fn set_times(&self, times: FileTimes) -> io::Result<()> {\n+        let is_zero = |t: c::FILETIME| t.dwLowDateTime == 0 && t.dwHighDateTime == 0;\n+        if times.accessed.map_or(false, is_zero) || times.modified.map_or(false, is_zero) {\n+            return Err(io::const_io_error!(\n+                io::ErrorKind::InvalidInput,\n+                \"Cannot set file timestamp to 0\",\n+            ));\n+        }\n+        cvt(unsafe {\n+            c::SetFileTime(self.as_handle(), None, times.accessed.as_ref(), times.modified.as_ref())\n+        })?;\n+        Ok(())\n+    }\n+\n     /// Get only basic file information such as attributes and file times.\n     fn basic_info(&self) -> io::Result<c::FILE_BASIC_INFO> {\n         unsafe {\n@@ -903,6 +924,16 @@ impl FilePermissions {\n     }\n }\n \n+impl FileTimes {\n+    pub fn set_accessed(&mut self, t: SystemTime) {\n+        self.accessed = Some(t.into_inner());\n+    }\n+\n+    pub fn set_modified(&mut self, t: SystemTime) {\n+        self.modified = Some(t.into_inner());\n+    }\n+}\n+\n impl FileType {\n     fn new(attrs: c::DWORD, reparse_tag: c::DWORD) -> FileType {\n         FileType { attributes: attrs, reparse_tag }"}, {"sha": "b8209a8544585f1f5f6bafbdb88a2538564ebde7", "filename": "library/std/src/sys/windows/time.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ftime.rs?ref=1f5d8d49eb6111931091f700d07518cd2b80bc18", "patch": "@@ -2,6 +2,7 @@ use crate::cmp::Ordering;\n use crate::fmt;\n use crate::mem;\n use crate::sys::c;\n+use crate::sys_common::IntoInner;\n use crate::time::Duration;\n \n use core::hash::{Hash, Hasher};\n@@ -136,6 +137,12 @@ impl From<c::FILETIME> for SystemTime {\n     }\n }\n \n+impl IntoInner<c::FILETIME> for SystemTime {\n+    fn into_inner(self) -> c::FILETIME {\n+        self.t\n+    }\n+}\n+\n impl Hash for SystemTime {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n         self.intervals().hash(state)"}, {"sha": "759a59e1f98d2e8c0dec05cf630f3eb0bbf5eb8f", "filename": "library/std/src/time.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5d8d49eb6111931091f700d07518cd2b80bc18/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=1f5d8d49eb6111931091f700d07518cd2b80bc18", "patch": "@@ -38,7 +38,7 @@ use crate::error::Error;\n use crate::fmt;\n use crate::ops::{Add, AddAssign, Sub, SubAssign};\n use crate::sys::time;\n-use crate::sys_common::FromInner;\n+use crate::sys_common::{FromInner, IntoInner};\n \n #[stable(feature = \"time\", since = \"1.3.0\")]\n pub use core::time::Duration;\n@@ -686,3 +686,9 @@ impl FromInner<time::SystemTime> for SystemTime {\n         SystemTime(time)\n     }\n }\n+\n+impl IntoInner<time::SystemTime> for SystemTime {\n+    fn into_inner(self) -> time::SystemTime {\n+        self.0\n+    }\n+}"}]}