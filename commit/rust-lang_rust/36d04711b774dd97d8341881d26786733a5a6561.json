{"sha": "36d04711b774dd97d8341881d26786733a5a6561", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZDA0NzExYjc3NGRkOTdkODM0MTg4MWQyNjc4NjczM2E1YTY1NjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T16:50:51Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-24T21:27:22Z"}, "message": "Remove bounds struct from TypeParameterDef. Bounds information is now\nexclusively stored in the where clauses.", "tree": {"sha": "20da28d8ad3c501d3240e5db322ca88f94780803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20da28d8ad3c501d3240e5db322ca88f94780803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36d04711b774dd97d8341881d26786733a5a6561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36d04711b774dd97d8341881d26786733a5a6561", "html_url": "https://github.com/rust-lang/rust/commit/36d04711b774dd97d8341881d26786733a5a6561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36d04711b774dd97d8341881d26786733a5a6561/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c782b742bb09d15ccc7bf52bf86091150ba4e5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c782b742bb09d15ccc7bf52bf86091150ba4e5d", "html_url": "https://github.com/rust-lang/rust/commit/3c782b742bb09d15ccc7bf52bf86091150ba4e5d"}], "stats": {"total": 95, "additions": 38, "deletions": 57}, "files": [{"sha": "e96d1b57cc7679e43c676434db1aba761b9b6590", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/36d04711b774dd97d8341881d26786733a5a6561/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d04711b774dd97d8341881d26786733a5a6561/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=36d04711b774dd97d8341881d26786733a5a6561", "patch": "@@ -822,7 +822,6 @@ fn parse_type_param_def_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)\n     assert_eq!(next(st), '|');\n     let index = parse_u32(st);\n     assert_eq!(next(st), '|');\n-    let bounds = parse_bounds_(st, conv);\n     let default = parse_opt(st, |st| parse_ty_(st, conv));\n     let object_lifetime_default = parse_object_lifetime_default(st, conv);\n \n@@ -831,28 +830,11 @@ fn parse_type_param_def_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)\n         def_id: def_id,\n         space: space,\n         index: index,\n-        bounds: bounds,\n         default: default,\n         object_lifetime_default: object_lifetime_default,\n     }\n }\n \n-fn parse_object_lifetime_default<'a,'tcx, F>(st: &mut PState<'a,'tcx>,\n-                                             conv: &mut F)\n-                                             -> Option<ty::ObjectLifetimeDefault>\n-    where F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n-{\n-    match next(st) {\n-        'n' => None,\n-        'a' => Some(ty::ObjectLifetimeDefault::Ambiguous),\n-        's' => {\n-            let region = parse_region_(st, conv);\n-            Some(ty::ObjectLifetimeDefault::Specific(region))\n-        }\n-        _ => panic!(\"parse_object_lifetime_default: bad input\")\n-    }\n-}\n-\n fn parse_existential_bounds<'a,'tcx, F>(st: &mut PState<'a,'tcx>,\n                                         mut conv: F)\n                                         -> ty::ExistentialBounds<'tcx> where\n@@ -924,18 +906,18 @@ fn parse_bounds_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)\n {\n     let builtin_bounds = parse_builtin_bounds_(st, conv);\n \n+    let region_bounds = parse_region_bounds_(st, conv);\n+\n     let mut param_bounds = ty::ParamBounds {\n-        region_bounds: Vec::new(),\n+        region_bounds: region_bounds,\n         builtin_bounds: builtin_bounds,\n         trait_bounds: Vec::new(),\n         projection_bounds: Vec::new(),\n     };\n+\n+\n     loop {\n         match next(st) {\n-            'R' => {\n-                param_bounds.region_bounds.push(\n-                    parse_region_(st, conv));\n-            }\n             'I' => {\n                 param_bounds.trait_bounds.push(\n                     ty::Binder(parse_trait_ref_(st, conv)));\n@@ -953,3 +935,18 @@ fn parse_bounds_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)\n         }\n     }\n }\n+\n+fn parse_region_bounds_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)\n+                              -> Vec<ty::Region> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    let mut region_bounds = Vec::new();\n+    loop {\n+        match next(st) {\n+            'R' => { region_bounds.push(parse_region_(st, conv)); }\n+            '.' => { return region_bounds; }\n+            c => { panic!(\"parse_bounds: bad bounds ('{}')\", c); }\n+        }\n+    }\n+}\n+"}, {"sha": "76a365259aa5713a3eb952a9a3eadfffeefb0bba", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/36d04711b774dd97d8341881d26786733a5a6561/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d04711b774dd97d8341881d26786733a5a6561/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=36d04711b774dd97d8341881d26786733a5a6561", "patch": "@@ -386,10 +386,7 @@ pub fn enc_bounds<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>,\n                             bs: &ty::ParamBounds<'tcx>) {\n     enc_builtin_bounds(w, cx, &bs.builtin_bounds);\n \n-    for &r in &bs.region_bounds {\n-        mywrite!(w, \"R\");\n-        enc_region(w, cx, r);\n-    }\n+    enc_region_bounds(w, cx, &bs.region_bounds);\n \n     for tp in &bs.trait_bounds {\n         mywrite!(w, \"I\");\n@@ -404,12 +401,22 @@ pub fn enc_bounds<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>,\n     mywrite!(w, \".\");\n }\n \n+pub fn enc_region_bounds<'a, 'tcx>(w: &mut SeekableMemWriter,\n+                            cx: &ctxt<'a, 'tcx>,\n+                            rs: &[ty::Region]) {\n+    for &r in rs {\n+        mywrite!(w, \"R\");\n+        enc_region(w, cx, r);\n+    }\n+\n+    mywrite!(w, \".\");\n+}\n+\n pub fn enc_type_param_def<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>,\n                                     v: &ty::TypeParameterDef<'tcx>) {\n     mywrite!(w, \"{}:{}|{}|{}|\",\n              token::get_name(v.name), (cx.ds)(v.def_id),\n              v.space.to_uint(), v.index);\n-    enc_bounds(w, cx, &v.bounds);\n     enc_opt(w, v.default, |w, t| enc_ty(w, cx, t));\n     enc_object_lifetime_default(w, cx, v.object_lifetime_default);\n }"}, {"sha": "78b8d4f7b1e28913ce747d166006804127f33c34", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36d04711b774dd97d8341881d26786733a5a6561/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d04711b774dd97d8341881d26786733a5a6561/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=36d04711b774dd97d8341881d26786733a5a6561", "patch": "@@ -1750,7 +1750,6 @@ pub struct TypeParameterDef<'tcx> {\n     pub def_id: ast::DefId,\n     pub space: subst::ParamSpace,\n     pub index: u32,\n-    pub bounds: ParamBounds<'tcx>,\n     pub default: Option<Ty<'tcx>>,\n     pub object_lifetime_default: Option<ObjectLifetimeDefault>,\n }"}, {"sha": "4bf47c3a75f8003761a99ca641a540b8ae4a7f96", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36d04711b774dd97d8341881d26786733a5a6561/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d04711b774dd97d8341881d26786733a5a6561/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=36d04711b774dd97d8341881d26786733a5a6561", "patch": "@@ -377,7 +377,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::TypeParameterDef<'tcx> {\n             def_id: self.def_id,\n             space: self.space,\n             index: self.index,\n-            bounds: self.bounds.fold_with(folder),\n             default: self.default.fold_with(folder),\n             object_lifetime_default: self.object_lifetime_default.fold_with(folder),\n         }"}, {"sha": "cd2e80d97e10fed06629ff3bf65537816bc55a15", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/36d04711b774dd97d8341881d26786733a5a6561/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d04711b774dd97d8341881d26786733a5a6561/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=36d04711b774dd97d8341881d26786733a5a6561", "patch": "@@ -1225,10 +1225,10 @@ fn convert_trait_predicates<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &ast::Item)\n         };\n     base_predicates.predicates.extend(subst::TypeSpace, assoc_predicates.into_iter());\n \n-    let self_bounds = &trait_def.generics.types.get_self().unwrap().bounds;\n-    base_predicates.predicates.extend(\n-        subst::SelfSpace,\n-        ty::predicates(ccx.tcx, self_param_ty, self_bounds).into_iter());\n+    // Add in a predicate that `Self:Trait` (where `Trait` is the\n+    // current trait).  This is needed for builtin bounds.\n+    let self_predicate = trait_def.trait_ref.to_poly_trait_ref().as_predicate();\n+    base_predicates.predicates.push(SelfSpace, self_predicate);\n \n     // add in the explicit where-clauses\n     let trait_predicates =\n@@ -1532,21 +1532,11 @@ fn ty_generics_for_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     // the node id for the Self type parameter.\n     let param_id = trait_id;\n \n-    let self_trait_ref =\n-        Rc::new(ty::TraitRef { def_id: local_def(trait_id),\n-                               substs: substs });\n-\n     let def = ty::TypeParameterDef {\n         space: subst::SelfSpace,\n         index: 0,\n         name: special_idents::type_self.name,\n         def_id: local_def(param_id),\n-        bounds: ty::ParamBounds {\n-            region_bounds: vec!(),\n-            builtin_bounds: ty::empty_builtin_bounds(),\n-            trait_bounds: vec!(ty::Binder(self_trait_ref.clone())),\n-            projection_bounds: vec!(),\n-        },\n         default: None,\n         object_lifetime_default: None,\n     };\n@@ -1761,13 +1751,6 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n         None => { }\n     }\n \n-    let param_ty = ty::ParamTy::new(space, index, param.ident.name);\n-    let bounds = compute_bounds(ccx,\n-                                generics_so_far,\n-                                param_ty.to_ty(ccx.tcx),\n-                                &param.bounds,\n-                                SizedByDefault::Yes,\n-                                param.span);\n     let default = match param.default {\n         None => None,\n         Some(ref path) => {\n@@ -1797,7 +1780,6 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n         index: index,\n         name: param.ident.name,\n         def_id: local_def(param.id),\n-        bounds: bounds,\n         default: default,\n         object_lifetime_default: object_lifetime_default,\n     };"}, {"sha": "36d39fa58ba7e5ec7e23a8bcc5cc2c595e59f341", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36d04711b774dd97d8341881d26786733a5a6561/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d04711b774dd97d8341881d26786733a5a6561/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=36d04711b774dd97d8341881d26786733a5a6561", "patch": "@@ -479,11 +479,10 @@ impl<'tcx> Clean<TyParam> for ty::TypeParameterDef<'tcx> {\n     fn clean(&self, cx: &DocContext) -> TyParam {\n         cx.external_typarams.borrow_mut().as_mut().unwrap()\n           .insert(self.def_id, self.name.clean(cx));\n-        let bounds = self.bounds.clean(cx);\n         TyParam {\n             name: self.name.clean(cx),\n             did: self.def_id,\n-            bounds: bounds,\n+            bounds: vec![], // these are filled in from the where-clauses\n             default: self.default.clean(cx),\n         }\n     }\n@@ -892,9 +891,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>,\n         // Bounds in the type_params and lifetimes fields are repeated in the predicates\n         // field (see rustc_typeck::collect::ty_generics), so remove them.\n         let stripped_typarams = gens.types.get_slice(space).iter().map(|tp| {\n-            let mut stp = tp.clone();\n-            stp.bounds = ty::ParamBounds::empty();\n-            stp.clean(cx)\n+            tp.clean(cx)\n         }).collect::<Vec<_>>();\n         let stripped_lifetimes = gens.regions.get_slice(space).iter().map(|rp| {\n             let mut srp = rp.clone();"}]}