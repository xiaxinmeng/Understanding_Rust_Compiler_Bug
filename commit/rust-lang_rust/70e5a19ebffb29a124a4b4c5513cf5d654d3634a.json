{"sha": "70e5a19ebffb29a124a4b4c5513cf5d654d3634a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZTVhMTllYmZmYjI5YTEyNGE0YjRjNTUxM2NmNWQ2NTRkMzYzNGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-19T03:00:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-08T21:22:15Z"}, "message": "core: Fix stage0 build errors", "tree": {"sha": "fcec23076a8fdef0c11bed81a61fc54863cb20d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcec23076a8fdef0c11bed81a61fc54863cb20d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70e5a19ebffb29a124a4b4c5513cf5d654d3634a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70e5a19ebffb29a124a4b4c5513cf5d654d3634a", "html_url": "https://github.com/rust-lang/rust/commit/70e5a19ebffb29a124a4b4c5513cf5d654d3634a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70e5a19ebffb29a124a4b4c5513cf5d654d3634a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63e25946f0ae4e776a853ebd3429d0cd67f437e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/63e25946f0ae4e776a853ebd3429d0cd67f437e1", "html_url": "https://github.com/rust-lang/rust/commit/63e25946f0ae4e776a853ebd3429d0cd67f437e1"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "7f440e3aeeef4f8510085f1b9ecfca3b5190dce7", "filename": "src/libcore/task.rs", "status": "modified", "additions": 48, "deletions": 19, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/70e5a19ebffb29a124a4b4c5513cf5d654d3634a/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e5a19ebffb29a124a4b4c5513cf5d654d3634a/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=70e5a19ebffb29a124a4b4c5513cf5d654d3634a", "patch": "@@ -1720,9 +1720,16 @@ fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n     // Unidirectional \"parenting\" shouldn't override bidirectional linked.\n     // We have to cheat with opts - the interface doesn't support them because\n     // they don't make sense (redundant with task().supervised()).\n+    let opts = {\n+        let mut opts = default_task_opts();\n+        opts.linked = true;\n+        opts.supervised = true;\n+        move opts\n+    };\n+\n     let b0 = task();\n     let b1 = TaskBuilder({\n-        opts: { linked: true, supervised: true,.. b0.opts },\n+        opts: move opts,\n         can_not_copy: None,\n         .. *b0\n     });\n@@ -1733,9 +1740,16 @@ fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n     // We have to cheat with opts - the interface doesn't support them because\n     // they don't make sense (redundant with task().supervised()).\n+    let opts = {\n+        let mut opts = default_task_opts();\n+        opts.linked = true;\n+        opts.supervised = true;\n+        move opts\n+    };\n+    \n     let b0 = task();\n     let b1 = TaskBuilder({\n-        opts: { linked: true, supervised: true,.. b0.opts },\n+        opts: move opts,\n         can_not_copy: None,\n         .. *b0\n     });\n@@ -1816,33 +1830,39 @@ fn test_spawn_linked_sup_propagate_sibling() {\n \n #[test]\n #[ignore(cfg(windows))]\n-fn test_spawn_raw_notify() {\n-    let task_po = comm::Port();\n-    let task_ch = comm::Chan(task_po);\n-    let notify_po = comm::Port();\n-    let notify_ch = comm::Chan(notify_po);\n+fn test_spawn_raw_notify_success() {\n+    let (task_ch, task_po) = pipes::stream();\n+    let (notify_ch, notify_po) = pipes::stream();\n \n     let opts = {\n-        notify_chan: Some(notify_ch),\n+        notify_chan: Some(move notify_ch)\n         .. default_task_opts()\n     };\n-    do spawn_raw(opts) {\n-        comm::send(task_ch, get_task());\n+    do spawn_raw(opts) |move task_ch| {\n+        task_ch.send(get_task());\n     }\n-    let task_ = comm::recv(task_po);\n-    assert comm::recv(notify_po) == Exit(task_, Success);\n+    let task_ = task_po.recv();\n+    assert notify_po.recv() == Exit(task_, Success);\n+}\n+\n+#[test]\n+#[ignore(cfg(windows))]\n+fn test_spawn_raw_notify_failure() {\n+    // New bindings for these\n+    let (task_ch, task_po) = pipes::stream();\n+    let (notify_ch, notify_po) = pipes::stream();\n \n     let opts = {\n         linked: false,\n         notify_chan: Some(notify_ch),\n         .. default_task_opts()\n     };\n     do spawn_raw(opts) {\n-        comm::send(task_ch, get_task());\n+        task_ch.send(get_task());\n         fail;\n     }\n-    let task_ = comm::recv(task_po);\n-    assert comm::recv(notify_po) == Exit(task_, Failure);\n+    let task_ = task_po.recv();\n+    assert notify_po.recv() == Exit(task_, Failure);\n }\n \n #[test]\n@@ -2140,8 +2160,13 @@ fn test_unkillable() {\n     let po = comm::Port();\n     let ch = po.chan();\n \n+    let opts = {\n+        let mut opts = default_task_opts();\n+        opts.linked = false;\n+        move opts\n+    };\n     // We want to do this after failing\n-    do spawn_raw({ linked: false,.. default_task_opts() }) {\n+    do spawn_raw(opts) {\n         for iter::repeat(10u) { yield() }\n         ch.send(());\n     }\n@@ -2173,11 +2198,15 @@ fn test_unkillable() {\n #[ignore(cfg(windows))]\n #[should_fail]\n fn test_unkillable_nested() {\n-    let po = comm::Port();\n-    let ch = po.chan();\n+    let (ch, po) = pipes::stream();\n \n     // We want to do this after failing\n-    do spawn_raw({ linked: false,.. default_task_opts() }) {\n+    let opts = {\n+        let mut opts = default_task_opts();\n+        opts.linked = false;\n+        move opts\n+    };\n+    do spawn_raw(opts) {\n         for iter::repeat(10u) { yield() }\n         ch.send(());\n     }"}]}