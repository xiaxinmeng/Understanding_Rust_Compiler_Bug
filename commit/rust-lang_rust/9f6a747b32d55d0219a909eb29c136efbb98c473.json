{"sha": "9f6a747b32d55d0219a909eb29c136efbb98c473", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNmE3NDdiMzJkNTVkMDIxOWE5MDllYjI5YzEzNmVmYmI5OGM0NzM=", "commit": {"author": {"name": "Corentin Henry", "email": "corentinhenry@gmail.com", "date": "2018-11-19T17:40:21Z"}, "committer": {"name": "Corentin Henry", "email": "corentinhenry@gmail.com", "date": "2019-04-22T14:03:39Z"}, "message": "std::net: fix Ipv4Addr::is_global()\n\nAs per @therealbstern's comment[0]:\n\nThe implementation of Ipv4::is_global is not complete, according to the\nIANA IPv4 Special-Purpose Address Registry.\n\n        - It compares the address to 0.0.0.0, but anything in 0.0.0.0/8\n          should not be considered global.\n                - 0/8 is not global and is currently forbidden because\n                  some systems used to treat it as the local network.\n                - The implementation of Ipv4::is_unspecified is correct.\n                  0.0.0.0 is the unspecified address.\n        - It does not examine 100.64.0.0/10, which is \"Shared Address\n          Space\" and not global.\n        - Ditto 192.0.0.0/24 (IETF Protocol Assignments), except for\n          192.0.0.9/32 and 192.0.0.10/32, which are carved out as\n          globally reachable.\n        - 198.18.0.0/15 is for \"Benchmarking\" and should not be globally\n          reachable.\n        - 240.0.0.0/4 is reserved and not currently reachable", "tree": {"sha": "b3119fe589eddef6e32213ac99ae2bb2bf7268fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3119fe589eddef6e32213ac99ae2bb2bf7268fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f6a747b32d55d0219a909eb29c136efbb98c473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6a747b32d55d0219a909eb29c136efbb98c473", "html_url": "https://github.com/rust-lang/rust/commit/9f6a747b32d55d0219a909eb29c136efbb98c473", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f6a747b32d55d0219a909eb29c136efbb98c473/comments", "author": {"login": "little-dude", "id": 6646324, "node_id": "MDQ6VXNlcjY2NDYzMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6646324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/little-dude", "html_url": "https://github.com/little-dude", "followers_url": "https://api.github.com/users/little-dude/followers", "following_url": "https://api.github.com/users/little-dude/following{/other_user}", "gists_url": "https://api.github.com/users/little-dude/gists{/gist_id}", "starred_url": "https://api.github.com/users/little-dude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/little-dude/subscriptions", "organizations_url": "https://api.github.com/users/little-dude/orgs", "repos_url": "https://api.github.com/users/little-dude/repos", "events_url": "https://api.github.com/users/little-dude/events{/privacy}", "received_events_url": "https://api.github.com/users/little-dude/received_events", "type": "User", "site_admin": false}, "committer": {"login": "little-dude", "id": 6646324, "node_id": "MDQ6VXNlcjY2NDYzMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6646324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/little-dude", "html_url": "https://github.com/little-dude", "followers_url": "https://api.github.com/users/little-dude/followers", "following_url": "https://api.github.com/users/little-dude/following{/other_user}", "gists_url": "https://api.github.com/users/little-dude/gists{/gist_id}", "starred_url": "https://api.github.com/users/little-dude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/little-dude/subscriptions", "organizations_url": "https://api.github.com/users/little-dude/orgs", "repos_url": "https://api.github.com/users/little-dude/repos", "events_url": "https://api.github.com/users/little-dude/events{/privacy}", "received_events_url": "https://api.github.com/users/little-dude/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67291cc9711eb4ceb717dc0860aba499bcdf55f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/67291cc9711eb4ceb717dc0860aba499bcdf55f7", "html_url": "https://github.com/rust-lang/rust/commit/67291cc9711eb4ceb717dc0860aba499bcdf55f7"}], "stats": {"total": 72, "additions": 64, "deletions": 8}, "files": [{"sha": "8d00bee0e3665bd64615a1f8ee4a6eabb23dc41c", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 64, "deletions": 8, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9f6a747b32d55d0219a909eb29c136efbb98c473/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6a747b32d55d0219a909eb29c136efbb98c473/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=9f6a747b32d55d0219a909eb29c136efbb98c473", "patch": "@@ -502,12 +502,19 @@ impl Ipv4Addr {\n     ///\n     /// The following return false:\n     ///\n-    /// - private address (10.0.0.0/8, 172.16.0.0/12 and 192.168.0.0/16)\n-    /// - the loopback address (127.0.0.0/8)\n-    /// - the link-local address (169.254.0.0/16)\n-    /// - the broadcast address (255.255.255.255/32)\n-    /// - test addresses used for documentation (192.0.2.0/24, 198.51.100.0/24 and 203.0.113.0/24)\n-    /// - the unspecified address (0.0.0.0)\n+    /// - private addresses (see [`is_private()`](#method.is_private))\n+    /// - the loopback address (see [`is_loopback()`](#method.is_loopback))\n+    /// - the link-local address (see [`is_link_local()`](#method.is_link_local))\n+    /// - the broadcast address (see [`is_broadcast()`](#method.is_broadcast))\n+    /// - addresses used for documentation (see [`is_documentation()`](#method.is_documentation))\n+    /// - the unspecified address (see [`is_unspecified()`](#method.is_unspecified)), and the whole\n+    ///   0.0.0.0/8 block\n+    /// - addresses reserved for future protocols (see\n+    /// [`is_ietf_protocol_assignment()`](#method.is_ietf_protocol_assignment), except\n+    /// `192.0.0.9/32` and `192.0.0.10/32` which are globally routable\n+    /// - addresses reserved for future use (see [`is_reserved()`](#method.is_reserved())\n+    /// - addresses reserved for networking devices benchmarking (see\n+    /// [`is_benchmarking`](#method.is_benchmarking))\n     ///\n     /// [ipv4-sr]: https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml\n     /// [`true`]: ../../std/primitive.bool.html\n@@ -520,16 +527,65 @@ impl Ipv4Addr {\n     /// use std::net::Ipv4Addr;\n     ///\n     /// fn main() {\n+    ///     // private addresses are not global\n     ///     assert_eq!(Ipv4Addr::new(10, 254, 0, 0).is_global(), false);\n     ///     assert_eq!(Ipv4Addr::new(192, 168, 10, 65).is_global(), false);\n     ///     assert_eq!(Ipv4Addr::new(172, 16, 10, 65).is_global(), false);\n+    ///\n+    ///     // the 0.0.0.0/8 block is not global\n+    ///     assert_eq!(Ipv4Addr::new(0, 1, 2, 3).is_global(), false);\n+    ///     // in particular, the unspecified address is not global\n     ///     assert_eq!(Ipv4Addr::new(0, 0, 0, 0).is_global(), false);\n+    ///\n+    ///     // the loopback address is not global\n+    ///     assert_eq!(Ipv4Addr::new(127, 0, 0, 1).is_global(), false);\n+    ///\n+    ///     // link local addresses are not global\n+    ///     assert_eq!(Ipv4Addr::new(169, 254, 45, 1).is_global(), false);\n+    ///\n+    ///     // the broadcast address is not global\n+    ///     assert_eq!(Ipv4Addr::new(255, 255, 255, 255).is_global(), false);\n+    ///\n+    ///     // the broadcast address is not global\n+    ///     assert_eq!(Ipv4Addr::new(192, 0, 2, 255).is_global(), false);\n+    ///     assert_eq!(Ipv4Addr::new(198, 51, 100, 65).is_global(), false);\n+    ///     assert_eq!(Ipv4Addr::new(203, 0, 113, 6).is_global(), false);\n+    ///\n+    ///     // shared addresses are not global\n+    ///     assert_eq!(Ipv4Addr::new(100, 100, 0, 0).is_global(), false);\n+    ///\n+    ///     // addresses reserved for protocol assignment are not global\n+    ///     assert_eq!(Ipv4Addr::new(192, 0, 0, 0).is_global(), false);\n+    ///     assert_eq!(Ipv4Addr::new(192, 0, 0, 255).is_global(), false);\n+    ///\n+    ///     // addresses reserved for future use are not global\n+    ///     assert_eq!(Ipv4Addr::new(250, 10, 20, 30).is_global(), false);\n+    ///\n+    ///     // addresses reserved for network devices benchmarking are not global\n+    ///     assert_eq!(Ipv4Addr::new(198, 18, 0, 0).is_global(), false);\n+    ///\n+    ///     // All the other addresses are global\n+    ///     assert_eq!(Ipv4Addr::new(1, 1, 1, 1).is_global(), true);\n     ///     assert_eq!(Ipv4Addr::new(80, 9, 12, 3).is_global(), true);\n     /// }\n     /// ```\n     pub fn is_global(&self) -> bool {\n-        !self.is_private() && !self.is_loopback() && !self.is_link_local() &&\n-        !self.is_broadcast() && !self.is_documentation() && !self.is_unspecified()\n+        // check if this address is 192.0.0.9 or 192.0.0.10. These addresses are the only two\n+        // globally routable addresses in the 192.0.0.0/24 range.\n+        if u32::from(*self) == 0xc0000009 || u32::from(*self) == 0xc000000a {\n+            return true;\n+        }\n+        !self.is_private()\n+            && !self.is_loopback()\n+            && !self.is_link_local()\n+            && !self.is_broadcast()\n+            && !self.is_documentation()\n+            && !self.is_shared()\n+            && !self.is_ietf_protocol_assignment()\n+            && !self.is_reserved()\n+            && !self.is_benchmarking()\n+            // Make sure the address is not in 0.0.0.0/8\n+            && self.octets()[0] != 0\n     }\n \n     /// Returns [`true`] if this address is part of the Shared Address Space defined in"}]}