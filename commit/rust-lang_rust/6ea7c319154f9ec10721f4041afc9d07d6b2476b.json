{"sha": "6ea7c319154f9ec10721f4041afc9d07d6b2476b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYTdjMzE5MTU0ZjllYzEwNzIxZjQwNDFhZmM5ZDA3ZDZiMjQ3NmI=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-11T03:04:02Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-11T03:04:02Z"}, "message": "Add extern source", "tree": {"sha": "bdd64414df9950213cc117e2975d8fd17f85fbfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdd64414df9950213cc117e2975d8fd17f85fbfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ea7c319154f9ec10721f4041afc9d07d6b2476b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ea7c319154f9ec10721f4041afc9d07d6b2476b", "html_url": "https://github.com/rust-lang/rust/commit/6ea7c319154f9ec10721f4041afc9d07d6b2476b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ea7c319154f9ec10721f4041afc9d07d6b2476b/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a292309c55639a12d10b3c37b9f800d8b802b6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a292309c55639a12d10b3c37b9f800d8b802b6d", "html_url": "https://github.com/rust-lang/rust/commit/5a292309c55639a12d10b3c37b9f800d8b802b6d"}], "stats": {"total": 60, "additions": 49, "deletions": 11}, "files": [{"sha": "3dc86ca2dab04f7cfd93fd485aeedd136329f555", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=6ea7c319154f9ec10721f4041afc9d07d6b2476b", "patch": "@@ -61,7 +61,14 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, ra_fixture: &str) -> FileId\n         };\n \n         let mut crate_graph = CrateGraph::default();\n-        crate_graph.add_crate_root(file_id, meta.edition, meta.krate, meta.cfg, meta.env);\n+        crate_graph.add_crate_root(\n+            file_id,\n+            meta.edition,\n+            meta.krate,\n+            meta.cfg,\n+            meta.env,\n+            Default::default(),\n+        );\n         crate_graph\n     } else {\n         let mut crate_graph = CrateGraph::default();\n@@ -71,6 +78,7 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, ra_fixture: &str) -> FileId\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         crate_graph\n     };\n@@ -119,6 +127,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n                 Some(krate.clone()),\n                 meta.cfg,\n                 meta.env,\n+                Default::default(),\n             );\n             let prev = crates.insert(krate.clone(), crate_id);\n             assert!(prev.is_none());\n@@ -155,6 +164,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n     } else {\n         for (from, to) in crate_deps {"}, {"sha": "06d40db96aa97d15916521db916047735646020b", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=6ea7c319154f9ec10721f4041afc9d07d6b2476b", "patch": "@@ -113,6 +113,7 @@ pub struct CrateData {\n     pub display_name: Option<String>,\n     pub cfg_options: CfgOptions,\n     pub env: Env,\n+    pub extern_source: ExternSource,\n     pub dependencies: Vec<Dependency>,\n }\n \n@@ -128,9 +129,13 @@ pub struct ExternSourceId(pub u32);\n #[derive(Default, Debug, Clone, PartialEq, Eq)]\n pub struct Env {\n     entries: FxHashMap<String, String>,\n+}\n \n-    // Note: Some env variables (e.g. OUT_DIR) are located outside of the\n-    // crate. We store a map to allow remap it to ExternSourceId\n+// FIXME: Redesign vfs for solve the following limitation ?\n+// Note: Some env variables (e.g. OUT_DIR) are located outside of the\n+// crate. We store a map to allow remap it to ExternSourceId\n+#[derive(Default, Debug, Clone, PartialEq, Eq)]\n+pub struct ExternSource {\n     extern_paths: FxHashMap<String, ExternSourceId>,\n }\n \n@@ -148,13 +153,15 @@ impl CrateGraph {\n         display_name: Option<String>,\n         cfg_options: CfgOptions,\n         env: Env,\n+        extern_source: ExternSource,\n     ) -> CrateId {\n         let data = CrateData {\n             root_file_id: file_id,\n             edition,\n             display_name,\n             cfg_options,\n             env,\n+            extern_source,\n             dependencies: Vec::new(),\n         };\n         let crate_id = CrateId(self.arena.len() as u32);\n@@ -276,7 +283,9 @@ impl Env {\n     pub fn get(&self, env: &str) -> Option<String> {\n         self.entries.get(env).cloned()\n     }\n+}\n \n+impl ExternSource {\n     pub fn extern_path(&self, path: &str) -> Option<(ExternSourceId, RelativePathBuf)> {\n         self.extern_paths.iter().find_map(|(root_path, id)| {\n             if path.starts_with(root_path) {\n@@ -292,8 +301,7 @@ impl Env {\n         })\n     }\n \n-    pub fn set_extern_path(&mut self, env: &str, root_path: &str, root: ExternSourceId) {\n-        self.entries.insert(env.to_owned(), root_path.to_owned());\n+    pub fn set_extern_path(&mut self, root_path: &str, root: ExternSourceId) {\n         self.extern_paths.insert(root_path.to_owned(), root);\n     }\n }\n@@ -327,20 +335,23 @@ mod tests {\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n@@ -356,20 +367,23 @@ mod tests {\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n@@ -384,13 +398,15 @@ mod tests {\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         assert!(graph\n             .add_dep(crate1, CrateName::normalize_dashes(\"crate-name-with-dashes\"), crate2)"}, {"sha": "d500d5e85bac42e8024fe9b68561c9d9392c95c9", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=6ea7c319154f9ec10721f4041afc9d07d6b2476b", "patch": "@@ -11,8 +11,8 @@ use ra_syntax::{ast, Parse, SourceFile, TextRange, TextUnit};\n pub use crate::{\n     cancellation::Canceled,\n     input::{\n-        CrateGraph, CrateId, CrateName, Dependency, Edition, Env, ExternSourceId, FileId,\n-        SourceRoot, SourceRootId,\n+        CrateGraph, CrateId, CrateName, Dependency, Edition, Env, ExternSource, ExternSourceId,\n+        FileId, SourceRoot, SourceRootId,\n     },\n };\n pub use relative_path::{RelativePath, RelativePathBuf};"}, {"sha": "a90007f264b0513e86a983f7b8ed562b0da3f746", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=6ea7c319154f9ec10721f4041afc9d07d6b2476b", "patch": "@@ -262,7 +262,8 @@ fn relative_file(db: &dyn AstDatabase, call_id: MacroCallId, path: &str) -> Opti\n \n     // Extern paths ?\n     let krate = db.relevant_crates(call_site).get(0)?.clone();\n-    let (extern_source_id, relative_file) = db.crate_graph()[krate].env.extern_path(path)?;\n+    let (extern_source_id, relative_file) =\n+        db.crate_graph()[krate].extern_source.extern_path(path)?;\n \n     db.resolve_extern_path(extern_source_id, &relative_file)\n }"}, {"sha": "39981ed3b15e809e692914620015862f6fa14d21", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=6ea7c319154f9ec10721f4041afc9d07d6b2476b", "patch": "@@ -217,6 +217,7 @@ impl Analysis {\n             None,\n             cfg_options,\n             Env::default(),\n+            Default::default(),\n         );\n         change.add_file(source_root, file_id, \"main.rs\".into(), Arc::new(text));\n         change.set_crate_graph(crate_graph);"}, {"sha": "25816cf6fc5b93311d1fe68e8dd671a16cc2bb7a", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=6ea7c319154f9ec10721f4041afc9d07d6b2476b", "patch": "@@ -102,6 +102,7 @@ impl MockAnalysis {\n                     None,\n                     cfg_options,\n                     Env::default(),\n+                    Default::default(),\n                 ));\n             } else if path.ends_with(\"/lib.rs\") {\n                 let crate_name = path.parent().unwrap().file_name().unwrap();\n@@ -111,6 +112,7 @@ impl MockAnalysis {\n                     Some(crate_name.to_owned()),\n                     cfg_options,\n                     Env::default(),\n+                    Default::default(),\n                 );\n                 if let Some(root_crate) = root_crate {\n                     crate_graph"}, {"sha": "76d130b9b9a8a0d8d134cb5842a3068e76adadf3", "filename": "crates/ra_ide/src/parent_module.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fparent_module.rs?ref=6ea7c319154f9ec10721f4041afc9d07d6b2476b", "patch": "@@ -136,6 +136,7 @@ mod tests {\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         let mut change = AnalysisChange::new();\n         change.set_crate_graph(crate_graph);"}, {"sha": "a6274709d5a1f64fd60cd25542c39ed5ca6e3d01", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea7c319154f9ec10721f4041afc9d07d6b2476b/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=6ea7c319154f9ec10721f4041afc9d07d6b2476b", "patch": "@@ -14,7 +14,7 @@ use std::{\n \n use anyhow::{bail, Context, Result};\n use ra_cfg::CfgOptions;\n-use ra_db::{CrateGraph, CrateName, Edition, Env, ExternSourceId, FileId};\n+use ra_db::{CrateGraph, CrateName, Edition, Env, ExternSource, ExternSourceId, FileId};\n use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n \n@@ -197,6 +197,7 @@ impl ProjectWorkspace {\n                                 None,\n                                 cfg_options,\n                                 Env::default(),\n+                                Default::default(),\n                             ),\n                         );\n                     }\n@@ -235,8 +236,10 @@ impl ProjectWorkspace {\n                         };\n \n                         let mut env = Env::default();\n+                        let mut extern_source = ExternSource::default();\n                         if let Some((id, path)) = outdirs.get(krate.name(&sysroot)) {\n-                            env.set_extern_path(\"OUT_DIR\", &path, *id);\n+                            env.set(\"OUT_DIR\", path.clone());\n+                            extern_source.set_extern_path(&path, *id);\n                         }\n \n                         let crate_id = crate_graph.add_crate_root(\n@@ -245,6 +248,7 @@ impl ProjectWorkspace {\n                             Some(krate.name(&sysroot).to_string()),\n                             cfg_options,\n                             env,\n+                            extern_source,\n                         );\n                         sysroot_crates.insert(krate, crate_id);\n                     }\n@@ -284,15 +288,18 @@ impl ProjectWorkspace {\n                                 opts\n                             };\n                             let mut env = Env::default();\n+                            let mut extern_source = ExternSource::default();\n                             if let Some((id, path)) = outdirs.get(pkg.name(&cargo)) {\n-                                env.set_extern_path(\"OUT_DIR\", &path, *id);\n+                                env.set(\"OUT_DIR\", path.clone());\n+                                extern_source.set_extern_path(&path, *id);\n                             }\n                             let crate_id = crate_graph.add_crate_root(\n                                 file_id,\n                                 edition,\n                                 Some(pkg.name(&cargo).to_string()),\n                                 cfg_options,\n                                 env,\n+                                extern_source,\n                             );\n                             if tgt.kind(&cargo) == TargetKind::Lib {\n                                 lib_tgt = Some(crate_id);"}]}