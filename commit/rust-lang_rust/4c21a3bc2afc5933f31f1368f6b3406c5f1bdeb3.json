{"sha": "4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMjFhM2JjMmFmYzU5MzNmMzFmMTM2OGY2YjM0MDZjNWYxYmRlYjM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-11-20T05:52:50Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-12-12T05:08:22Z"}, "message": "std: Depend directly on crates.io crates\n\nEver since we added a Cargo-based build system for the compiler the\nstandard library has always been a little special, it's never been able\nto depend on crates.io crates for runtime dependencies. This has been a\nresult of various limitations, namely that Cargo doesn't understand that\ncrates from crates.io depend on libcore, so Cargo tries to build crates\nbefore libcore is finished.\n\nI had an idea this afternoon, however, which lifts the strategy\nfrom #52919 to directly depend on crates.io crates from the standard\nlibrary. After all is said and done this removes a whopping three\nsubmodules that we need to manage!\n\nThe basic idea here is that for any crate `std` depends on it adds an\n*optional* dependency on an empty crate on crates.io, in this case named\n`rustc-std-workspace-core`. This crate is overridden via `[patch]` in\nthis repository to point to a local crate we write, and *that* has a\n`path` dependency on libcore.\n\nNote that all `no_std` crates also depend on `compiler_builtins`, but if\nwe're not using submodules we can publish `compiler_builtins` to\ncrates.io and all crates can depend on it anyway! The basic strategy\nthen looks like:\n\n* The standard library (or some transitive dep) decides to depend on a\n  crate `foo`.\n* The standard library adds\n\n  ```toml\n  [dependencies]\n  foo = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n  ```\n* The crate `foo` has an optional dependency on `rustc-std-workspace-core`\n* The crate `foo` has an optional dependency on `compiler_builtins`\n* The crate `foo` has a feature `rustc-dep-of-std` which activates these\n  crates and any other necessary infrastructure in the crate.\n\nA sample commit for `dlmalloc` [turns out to be quite simple][commit].\nAfter that all `no_std` crates should largely build \"as is\" and still be\npublishable on crates.io! Notably they should be able to continue to use\nstable Rust if necessary, since the `rename-dependency` feature of Cargo\nis soon stabilizing.\n\nAs a proof of concept, this commit removes the `dlmalloc`,\n`libcompiler_builtins`, and `libc` submodules from this repository. Long\nthorns in our side these are now gone for good and we can directly\ndepend on crates.io! It's hoped that in the long term we can bring in\nother crates as necessary, but for now this is largely intended to\nsimply make it easier to manage these crates and remove submodules.\n\nThis should be a transparent non-breaking change for all users, but one\npossible stickler is that this almost for sure breaks out-of-tree\n`std`-building tools like `xargo` and `cargo-xbuild`. I think it should\nbe relatively easy to get them working, however, as all that's needed is\nan entry in the `[patch]` section used to build the standard library.\nHopefully we can work with these tools to solve this problem!\n\n[commit]: https://github.com/alexcrichton/dlmalloc-rs/commit/28ee12db813a3b650a7c25d1c36d2c17dcb88ae3", "tree": {"sha": "0dd689f1ca062288d8fa442fe702492ae94fe9fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dd689f1ca062288d8fa442fe702492ae94fe9fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "html_url": "https://github.com/rust-lang/rust/commit/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c0116e13ffd4b84e6691cd3b1f09269c4e76728", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0116e13ffd4b84e6691cd3b1f09269c4e76728", "html_url": "https://github.com/rust-lang/rust/commit/4c0116e13ffd4b84e6691cd3b1f09269c4e76728"}], "stats": {"total": 545, "additions": 231, "deletions": 314}, "files": [{"sha": "70164d48a307bb88bdadb1464ab578ee7836b50d", "filename": ".gitmodules", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -5,9 +5,6 @@\n [submodule \"src/rust-installer\"]\n \tpath = src/tools/rust-installer\n \turl = https://github.com/rust-lang/rust-installer.git\n-[submodule \"src/liblibc\"]\n-\tpath = src/liblibc\n-\turl = https://github.com/rust-lang/libc.git\n [submodule \"src/doc/nomicon\"]\n \tpath = src/doc/nomicon\n \turl = https://github.com/rust-lang-nursery/nomicon.git\n@@ -23,9 +20,6 @@\n [submodule \"src/tools/rls\"]\n \tpath = src/tools/rls\n \turl = https://github.com/rust-lang-nursery/rls.git\n-[submodule \"src/libcompiler_builtins\"]\n-\tpath = src/libcompiler_builtins\n-\turl = https://github.com/rust-lang-nursery/compiler-builtins.git\n [submodule \"src/tools/clippy\"]\n \tpath = src/tools/clippy\n \turl = https://github.com/rust-lang-nursery/rust-clippy.git\n@@ -35,9 +29,6 @@\n [submodule \"src/tools/miri\"]\n \tpath = src/tools/miri\n \turl = https://github.com/solson/miri.git\n-[submodule \"src/dlmalloc\"]\n-\tpath = src/dlmalloc\n-\turl = https://github.com/alexcrichton/dlmalloc-rs.git\n [submodule \"src/doc/rust-by-example\"]\n \tpath = src/doc/rust-by-example\n \turl = https://github.com/rust-lang/rust-by-example.git\n@@ -67,6 +58,3 @@\n [submodule \"src/doc/edition-guide\"]\n \tpath = src/doc/edition-guide\n \turl = https://github.com/rust-lang-nursery/edition-guide\n-[submodule \"src/rust-sgx\"]\n-\tpath = src/rust-sgx\n-\turl = https://github.com/fortanix/rust-sgx"}, {"sha": "d22a91073394ac517bd0c9d06a3e281b36370b28", "filename": "Cargo.lock", "status": "modified", "additions": 47, "deletions": 38, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -15,9 +15,9 @@ dependencies = [\n name = \"alloc\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.0.0\",\n+ \"compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n- \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -407,10 +407,11 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.0.0\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"core 0.0.0\",\n+ \"rustc-std-workspace-core 1.0.0\",\n ]\n \n [[package]]\n@@ -456,7 +457,7 @@ dependencies = [\n name = \"core\"\n version = \"0.0.0\"\n dependencies = [\n- \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -658,10 +659,12 @@ dependencies = [\n \n [[package]]\n name = \"dlmalloc\"\n-version = \"0.0.0\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.0.0\",\n- \"core 0.0.0\",\n+ \"compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-std-workspace-core 1.0.0\",\n ]\n \n [[package]]\n@@ -814,10 +817,11 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"fortanix-sgx-abi\"\n-version = \"0.0.0\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.0.0\",\n- \"core 0.0.0\",\n+ \"compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-std-workspace-core 1.0.0\",\n ]\n \n [[package]]\n@@ -1138,18 +1142,13 @@ name = \"lazycell\"\n version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"libc\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"compiler_builtins 0.0.0\",\n- \"core 0.0.0\",\n-]\n-\n [[package]]\n name = \"libc\"\n version = \"0.2.45\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-std-workspace-core 1.0.0\",\n+]\n \n [[package]]\n name = \"libgit2-sys\"\n@@ -1520,19 +1519,19 @@ dependencies = [\n name = \"panic_abort\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.0.0\",\n+ \"compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n- \"libc 0.0.0\",\n+ \"libc 0.2.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"panic_unwind\"\n version = \"0.0.0\"\n dependencies = [\n  \"alloc 0.0.0\",\n- \"compiler_builtins 0.0.0\",\n+ \"compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n- \"libc 0.0.0\",\n+ \"libc 0.2.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unwind 0.0.0\",\n ]\n \n@@ -1683,7 +1682,7 @@ name = \"profiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n  \"cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.0.0\",\n+ \"compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -1814,7 +1813,7 @@ name = \"rand_chacha\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1836,7 +1835,7 @@ name = \"rand_hc\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1861,7 +1860,7 @@ name = \"rand_xorshift\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2242,6 +2241,13 @@ name = \"rustc-serialize\"\n version = \"0.3.24\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"rustc-std-workspace-core\"\n+version = \"1.0.0\"\n+dependencies = [\n+ \"core 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc-workspace-hack\"\n version = \"1.0.0\"\n@@ -2284,7 +2290,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.0.0\",\n+ \"compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2479,7 +2485,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.0.0\",\n+ \"compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2531,7 +2537,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.0.0\",\n+ \"compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2644,7 +2650,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.0.0\",\n+ \"compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2877,15 +2883,15 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.0.0\",\n+ \"compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n- \"dlmalloc 0.0.0\",\n- \"fortanix-sgx-abi 0.0.0\",\n- \"libc 0.0.0\",\n+ \"dlmalloc 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fortanix-sgx-abi 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n  \"profiler_builtins 0.0.0\",\n- \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_asan 0.0.0\",\n  \"rustc_lsan 0.0.0\",\n  \"rustc_msan 0.0.0\",\n@@ -3217,9 +3223,9 @@ dependencies = [\n name = \"unwind\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.0.0\",\n+ \"compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n- \"libc 0.0.0\",\n+ \"libc 0.2.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -3397,6 +3403,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum colored 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b0aa3473e85a3161b59845d6096b289bb577874cafeaf75ea1b1beaa6572c7fc\"\n \"checksum commoncrypto 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007\"\n \"checksum commoncrypto-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1fed34f46747aa73dfaa578069fd8279d2818ade2b55f38f22a9401c7f4083e2\"\n+\"checksum compiler_builtins 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ad611263b9f31bdb66e66227d3b781600fd1e68d5deee29b23f5e2ac9cb4892\"\n \"checksum compiletest_rs 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89747fe073b7838343bd2c2445e7a7c2e0d415598f8925f0fa9205b9cdfc48cb\"\n \"checksum core-foundation 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4e2640d6d0bf22e82bed1b73c6aef8d5dd31e5abe6666c57e6d45e2649f4f887\"\n \"checksum core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b\"\n@@ -3418,6 +3425,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\"\n \"checksum difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n \"checksum directories 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72d337a64190607d4fcca2cb78982c5dd57f4916e19696b48a575fa746b6cb0f\"\n+\"checksum dlmalloc 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c46c65de42b063004b31c67a98abe071089b289ff0919c660ed7ff4f59317f8\"\n \"checksum either 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3be565ca5c557d7f59e7cfcf1844f9e3033650c929c6566f511e8005f205c1d0\"\n \"checksum elasticlunr-rs 2.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a99a310cd1f9770e7bf8e48810c7bcbb0e078c8fb23a8c7bcf0da4c2bf61a455\"\n \"checksum ena 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f56c93cc076508c549d9bb747f79aa9b4eb098be7b8cad8830c3137ef52d1e00\"\n@@ -3434,6 +3442,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n \"checksum foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\n \"checksum foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n+\"checksum fortanix-sgx-abi 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"26105e20b4c3f7a319db1376b54ac9a46e5761e949405553375095d05a0cee4d\"\n \"checksum fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\n \"checksum fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5f2a4a2034423744d2cc7ca2068453168dcdb82c438419e639a26bd87839c674\"\n \"checksum fst 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d94485a00b1827b861dd9d1a2cc9764f9044d4c535514c0760a5a2012ef3399f\""}, {"sha": "667c55791bd171dbe31735a7af288a6eba308563", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -65,6 +65,10 @@ rustfmt-nightly = { path = \"src/tools/rustfmt\" }\n # here\n rustc-workspace-hack = { path = 'src/tools/rustc-workspace-hack' }\n \n+# See comments in `tools/rustc-std-workspace-core/README.md` for what's going on\n+# here\n+rustc-std-workspace-core = { path = 'src/tools/rustc-std-workspace-core' }\n+\n [patch.\"https://github.com/rust-lang/rust-clippy\"]\n clippy_lints = { path = \"src/tools/clippy/clippy_lints\" }\n rustc_tools_util = { path = \"src/tools/clippy/rustc_tools_util\" }"}, {"sha": "c84abe42a637225a3f7d25c682f74093a40354e4", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -152,11 +152,10 @@ pub fn std_cargo(builder: &Builder,\n \n     if builder.no_std(target) == Some(true) {\n         // for no-std targets we only compile a few no_std crates\n-        cargo.arg(\"--features\").arg(\"c mem\")\n+        cargo\n             .args(&[\"-p\", \"alloc\"])\n-            .args(&[\"-p\", \"compiler_builtins\"])\n             .arg(\"--manifest-path\")\n-            .arg(builder.src.join(\"src/rustc/compiler_builtins_shim/Cargo.toml\"));\n+            .arg(builder.src.join(\"src/liballoc/Cargo.toml\"));\n     } else {\n         let features = builder.std_features();\n "}, {"sha": "f03eefb7a129bd3c869006822b6004c1c4eaea48", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -857,12 +857,9 @@ impl Step for Src {\n         // (essentially libstd and all of its path dependencies)\n         let std_src_dirs = [\n             \"src/build_helper\",\n-            \"src/dlmalloc\",\n             \"src/liballoc\",\n             \"src/libbacktrace\",\n-            \"src/libcompiler_builtins\",\n             \"src/libcore\",\n-            \"src/liblibc\",\n             \"src/libpanic_abort\",\n             \"src/libpanic_unwind\",\n             \"src/librustc_asan\",\n@@ -871,21 +868,15 @@ impl Step for Src {\n             \"src/librustc_tsan\",\n             \"src/libstd\",\n             \"src/libunwind\",\n-            \"src/rustc/compiler_builtins_shim\",\n-            \"src/rustc/libc_shim\",\n-            \"src/rustc/dlmalloc_shim\",\n-            \"src/rustc/fortanix-sgx-abi_shim\",\n             \"src/libtest\",\n             \"src/libterm\",\n             \"src/libprofiler_builtins\",\n             \"src/stdsimd\",\n             \"src/libproc_macro\",\n-        ];\n-        let std_src_dirs_exclude = [\n-            \"src/libcompiler_builtins/compiler-rt/test\",\n+            \"src/tools/rustc-std-workspace-core\",\n         ];\n \n-        copy_src_dirs(builder, &std_src_dirs[..], &std_src_dirs_exclude[..], &dst_src);\n+        copy_src_dirs(builder, &std_src_dirs[..], &[], &dst_src);\n         for file in src_files.iter() {\n             builder.copy(&builder.src.join(file), &dst_src.join(file));\n         }\n@@ -909,7 +900,7 @@ impl Step for Src {\n     }\n }\n \n-const CARGO_VENDOR_VERSION: &str = \"0.1.19\";\n+const CARGO_VENDOR_VERSION: &str = \"0.1.22\";\n \n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct PlainSourceTarball;"}, {"sha": "c8792918db2e2654e95b3c208ca05373f5514cf3", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -1134,10 +1134,10 @@ impl Build {\n             let krate = &self.crates[&krate];\n             if krate.is_local(self) {\n                 ret.push(krate);\n-                for dep in &krate.deps {\n-                    if visited.insert(dep) && dep != \"build_helper\" {\n-                        list.push(*dep);\n-                    }\n+            }\n+            for dep in &krate.deps {\n+                if visited.insert(dep) && dep != \"build_helper\" {\n+                    list.push(*dep);\n                 }\n             }\n         }"}, {"sha": "dc061fe5099a590a8cb38ec3a3352c84c3d6faeb", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -1558,10 +1558,7 @@ impl Step for Crate {\n         let builder = run.builder;\n         run = run.krate(\"test\");\n         for krate in run.builder.in_tree_crates(\"std\") {\n-            if krate.is_local(&run.builder)\n-                && !(krate.name.starts_with(\"rustc_\") && krate.name.ends_with(\"san\"))\n-                && krate.name != \"dlmalloc\"\n-            {\n+            if !(krate.name.starts_with(\"rustc_\") && krate.name.ends_with(\"san\")) {\n                 run = run.path(krate.local_path(&builder).to_str().unwrap());\n             }\n         }"}, {"sha": "a580a874b3341ac699088ea495b847263ab96c80", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -224,14 +224,12 @@ impl Drop for NativeLibBoilerplate {\n // Timestamps are created automatically when the result of `native_lib_boilerplate` goes out\n // of scope, so all the build actions should be completed until then.\n pub fn native_lib_boilerplate(\n-    src_name: &str,\n+    src_dir: &Path,\n     out_name: &str,\n     link_name: &str,\n     search_subdir: &str,\n ) -> Result<NativeLibBoilerplate, ()> {\n-    let current_dir = PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\").unwrap());\n-    let src_dir = current_dir.join(\"..\").join(src_name);\n-    rerun_if_changed_anything_in_dir(&src_dir);\n+    rerun_if_changed_anything_in_dir(src_dir);\n \n     let out_dir = env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or_else(||\n         env::var_os(\"OUT_DIR\").unwrap());\n@@ -248,9 +246,9 @@ pub fn native_lib_boilerplate(\n     );\n \n     let timestamp = out_dir.join(\"rustbuild.timestamp\");\n-    if !up_to_date(Path::new(\"build.rs\"), &timestamp) || !up_to_date(&src_dir, &timestamp) {\n+    if !up_to_date(Path::new(\"build.rs\"), &timestamp) || !up_to_date(src_dir, &timestamp) {\n         Ok(NativeLibBoilerplate {\n-            src_dir: src_dir,\n+            src_dir: src_dir.to_path_buf(),\n             out_dir: out_dir,\n         })\n     } else {\n@@ -279,8 +277,11 @@ pub fn sanitizer_lib_boilerplate(sanitizer_name: &str)\n     } else {\n         format!(\"static={}\", link_name)\n     };\n+    // The source for `compiler-rt` comes from the `compiler-builtins` crate, so\n+    // load our env var set by cargo to find the source code.\n+    let dir = env::var_os(\"DEP_COMPILER_RT_COMPILER_RT\").unwrap();\n     let lib = native_lib_boilerplate(\n-        \"libcompiler_builtins/compiler-rt\",\n+        dir.as_ref(),\n         sanitizer_name,\n         &to_link,\n         search_path,"}, {"sha": "de99f4b0c886f5916cd1a146464276d65bef61b8", "filename": "src/dlmalloc", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdlmalloc?ref=4c0116e13ffd4b84e6691cd3b1f09269c4e76728", "patch": "@@ -1 +0,0 @@\n-Subproject commit de99f4b0c886f5916cd1a146464276d65bef61b8"}, {"sha": "b7faee1bc7da440e39dd7c79c067957171df4ba1", "filename": "src/liballoc/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fliballoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fliballoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2FCargo.toml?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -11,10 +11,10 @@ path = \"lib.rs\"\n \n [dependencies]\n core = { path = \"../libcore\" }\n-compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n+compiler_builtins = { version = \"0.1.0\", features = ['rustc-dep-of-std'] }\n \n [dev-dependencies]\n-rand = \"0.5\"\n+rand = \"0.6\"\n \n [[test]]\n name = \"collectionstests\""}, {"sha": "536291de8f0066b13041bbbb9d8d2c53e3705fdf", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -14,7 +14,7 @@ use std::collections::binary_heap::{Drain, PeekMut};\n use std::panic::{self, AssertUnwindSafe};\n use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n \n-use rand::{thread_rng, Rng};\n+use rand::{thread_rng, seq::SliceRandom};\n \n #[test]\n fn test_iterator() {\n@@ -332,7 +332,7 @@ fn panic_safe() {\n             let panic_item = PanicOrd(i, true);\n \n             // heapify the sane items\n-            rng.shuffle(&mut panic_ords);\n+            panic_ords.shuffle(&mut rng);\n             let mut heap = BinaryHeap::from(panic_ords);\n             let inner_data;\n "}, {"sha": "6f31e6ca1a1bdfe433ba5dfb6c5668bdf5fb9408", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -18,7 +18,7 @@ use std::sync::atomic::Ordering::Relaxed;\n use std::sync::atomic::{ATOMIC_USIZE_INIT, AtomicUsize};\n use std::thread;\n \n-use rand::{Rng, RngCore, thread_rng};\n+use rand::{Rng, RngCore, thread_rng, seq::SliceRandom};\n use rand::distributions::Standard;\n \n fn square(n: usize) -> usize {\n@@ -459,7 +459,7 @@ fn test_sort() {\n     for i in 0..v.len() {\n         v[i] = i as i32;\n     }\n-    v.sort_by(|_, _| *rng.choose(&[Less, Equal, Greater]).unwrap());\n+    v.sort_by(|_, _| *[Less, Equal, Greater].choose(&mut rng).unwrap());\n     v.sort();\n     for i in 0..v.len() {\n         assert_eq!(v[i], i as i32);"}, {"sha": "10f4f35f9670bb29715a8c1ec01284852d47ed35", "filename": "src/libcompiler_builtins", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins?ref=4c0116e13ffd4b84e6691cd3b1f09269c4e76728", "patch": "@@ -1 +0,0 @@\n-Subproject commit 10f4f35f9670bb29715a8c1ec01284852d47ed35"}, {"sha": "fa2ab11243b6ce723a4e0a72f74f6d8fe43d84cc", "filename": "src/libcore/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2FCargo.toml?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -20,7 +20,7 @@ name = \"corebenches\"\n path = \"../libcore/benches/lib.rs\"\n \n [dev-dependencies]\n-rand = \"0.5\"\n+rand = \"0.6\"\n \n [features]\n # Make panics and failed asserts immediately abort without formatting any message"}, {"sha": "21a7c9fc6b3374e0c575634ba172d9a190f2ae75", "filename": "src/libcore/tests/num/flt2dec/random.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -18,7 +18,8 @@ use core::num::flt2dec::strategy::grisu::format_exact_opt;\n use core::num::flt2dec::strategy::grisu::format_shortest_opt;\n use core::num::flt2dec::{decode, DecodableFloat, FullDecoded, Decoded};\n \n-use rand::{FromEntropy, XorShiftRng};\n+use rand::FromEntropy;\n+use rand::rngs::SmallRng;\n use rand::distributions::{Distribution, Uniform};\n \n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n@@ -71,7 +72,10 @@ fn iterate<F, G, V>(func: &str, k: usize, n: usize, mut f: F, mut g: G, mut v: V\n pub fn f32_random_equivalence_test<F, G>(f: F, g: G, k: usize, n: usize)\n         where F: FnMut(&Decoded, &mut [u8]) -> Option<(usize, i16)>,\n               G: FnMut(&Decoded, &mut [u8]) -> (usize, i16) {\n-    let mut rng = XorShiftRng::from_entropy();\n+    if cfg!(target_os = \"emscripten\") {\n+        return // using rng pulls in i128 support, which doesn't work\n+    }\n+    let mut rng = SmallRng::from_entropy();\n     let f32_range = Uniform::new(0x0000_0001u32, 0x7f80_0000);\n     iterate(\"f32_random_equivalence_test\", k, n, f, g, |_| {\n         let x = f32::from_bits(f32_range.sample(&mut rng));\n@@ -82,7 +86,10 @@ pub fn f32_random_equivalence_test<F, G>(f: F, g: G, k: usize, n: usize)\n pub fn f64_random_equivalence_test<F, G>(f: F, g: G, k: usize, n: usize)\n         where F: FnMut(&Decoded, &mut [u8]) -> Option<(usize, i16)>,\n               G: FnMut(&Decoded, &mut [u8]) -> (usize, i16) {\n-    let mut rng = XorShiftRng::from_entropy();\n+    if cfg!(target_os = \"emscripten\") {\n+        return // using rng pulls in i128 support, which doesn't work\n+    }\n+    let mut rng = SmallRng::from_entropy();\n     let f64_range = Uniform::new(0x0000_0000_0000_0001u64, 0x7ff0_0000_0000_0000);\n     iterate(\"f64_random_equivalence_test\", k, n, f, g, |_| {\n         let x = f64::from_bits(f64_range.sample(&mut rng));"}, {"sha": "4f00ebee1d227159bf10da311e99afb393f95000", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -1024,11 +1024,11 @@ fn test_rotate_right() {\n fn sort_unstable() {\n     use core::cmp::Ordering::{Equal, Greater, Less};\n     use core::slice::heapsort;\n-    use rand::{FromEntropy, Rng, XorShiftRng};\n+    use rand::{FromEntropy, Rng, rngs::SmallRng, seq::SliceRandom};\n \n     let mut v = [0; 600];\n     let mut tmp = [0; 600];\n-    let mut rng = XorShiftRng::from_entropy();\n+    let mut rng = SmallRng::from_entropy();\n \n     for len in (2..25).chain(500..510) {\n         let v = &mut v[0..len];\n@@ -1073,7 +1073,7 @@ fn sort_unstable() {\n     for i in 0..v.len() {\n         v[i] = i as i32;\n     }\n-    v.sort_unstable_by(|_, _| *rng.choose(&[Less, Equal, Greater]).unwrap());\n+    v.sort_unstable_by(|_, _| *[Less, Equal, Greater].choose(&mut rng).unwrap());\n     v.sort_unstable();\n     for i in 0..v.len() {\n         assert_eq!(v[i], i as i32);"}, {"sha": "5b403753da9ec8ff501adf34cb6d63b319b4a3ae", "filename": "src/liblibc", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=4c0116e13ffd4b84e6691cd3b1f09269c4e76728", "patch": "@@ -1 +0,0 @@\n-Subproject commit 5b403753da9ec8ff501adf34cb6d63b319b4a3ae"}, {"sha": "e304e61c32936f0cab3b383f920c91efe918da29", "filename": "src/libpanic_abort/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibpanic_abort%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibpanic_abort%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2FCargo.toml?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -11,5 +11,5 @@ doc = false\n \n [dependencies]\n core = { path = \"../libcore\" }\n-libc = { path = \"../rustc/libc_shim\" }\n-compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n+libc = { version = \"0.2\", default-features = false }\n+compiler_builtins = \"0.1.0\""}, {"sha": "c9fce621608a24cb8155f2a2d6256434b8459292", "filename": "src/libpanic_unwind/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibpanic_unwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibpanic_unwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2FCargo.toml?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -12,6 +12,6 @@ doc = false\n [dependencies]\n alloc = { path = \"../liballoc\" }\n core = { path = \"../libcore\" }\n-libc = { path = \"../rustc/libc_shim\" }\n+libc = { version = \"0.2\", default-features = false }\n unwind = { path = \"../libunwind\" }\n-compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n+compiler_builtins = \"0.1.0\""}, {"sha": "7c95cf0a0542a5532f76816d1bec75459dc27866", "filename": "src/libprofiler_builtins/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibprofiler_builtins%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibprofiler_builtins%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2FCargo.toml?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -13,7 +13,7 @@ doc = false\n \n [dependencies]\n core = { path = \"../libcore\" }\n-compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n+compiler_builtins = { version = \"0.1.0\", features = ['rustc-dep-of-std'] }\n \n [build-dependencies]\n cc = \"1.0.1\""}, {"sha": "db72ce77e720bd6a60f28195d6eb85dacef036d5", "filename": "src/libprofiler_builtins/build.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Fbuild.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -56,9 +56,15 @@ fn main() {\n         cfg.define(\"COMPILER_RT_HAS_UNAME\", Some(\"1\"));\n     }\n \n+    // The source for `compiler-rt` comes from the `compiler-builtins` crate, so\n+    // load our env var set by cargo to find the source code.\n+    let root = env::var_os(\"DEP_COMPILER_RT_COMPILER_RT\").unwrap();\n+    let root = Path::new(&root);\n+\n     for src in profile_sources {\n-        cfg.file(Path::new(\"../libcompiler_builtins/compiler-rt/lib/profile\").join(src));\n+        cfg.file(root.join(\"lib\").join(\"profile\").join(src));\n     }\n \n+    cfg.warnings(false);\n     cfg.compile(\"profiler-rt\");\n }"}, {"sha": "836caf22abfa5d09484b2a4db1b28f809c683968", "filename": "src/librustc_asan/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibrustc_asan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibrustc_asan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2FCargo.toml?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -16,4 +16,4 @@ cmake = \"0.1.18\"\n [dependencies]\n alloc = { path = \"../liballoc\" }\n core = { path = \"../libcore\" }\n-compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n+compiler_builtins = \"0.1.0\""}, {"sha": "a8e11df7670cfeaa911b60f3b43680826d361d2a", "filename": "src/librustc_lsan/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibrustc_lsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibrustc_lsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2FCargo.toml?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -16,4 +16,4 @@ cmake = \"0.1.18\"\n [dependencies]\n alloc = { path = \"../liballoc\" }\n core = { path = \"../libcore\" }\n-compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n+compiler_builtins = \"0.1.0\""}, {"sha": "78c39d03e45a9dff2ef649f0fdf588645589b2e4", "filename": "src/librustc_msan/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibrustc_msan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibrustc_msan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2FCargo.toml?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -16,4 +16,4 @@ cmake = \"0.1.18\"\n [dependencies]\n alloc = { path = \"../liballoc\" }\n core = { path = \"../libcore\" }\n-compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n+compiler_builtins = \"0.1.0\""}, {"sha": "7730239071410563106c1a797fde48c9a9d437d5", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -295,9 +295,8 @@ that has been imported into the current module.\n Erroneous code example:\n \n ```compile_fail,E0259\n-# #![feature(libc)]\n extern crate core;\n-extern crate libc as core;\n+extern crate std as core;\n \n fn main() {}\n ```\n@@ -308,9 +307,8 @@ external crate imported into the current module.\n Correct example:\n \n ```\n-# #![feature(libc)]\n extern crate core;\n-extern crate libc as other_name;\n+extern crate std as other_name;\n \n fn main() {}\n ```"}, {"sha": "f0618275f2f6a236fc5883e16100103feadf5dd0", "filename": "src/librustc_tsan/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibrustc_tsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibrustc_tsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2FCargo.toml?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -16,4 +16,4 @@ cmake = \"0.1.18\"\n [dependencies]\n alloc = { path = \"../liballoc\" }\n core = { path = \"../libcore\" }\n-compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n+compiler_builtins = \"0.1.0\""}, {"sha": "41e778b6a4c728d73f9e6657e2ce48a3acdae37f", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -17,13 +17,13 @@ alloc = { path = \"../liballoc\" }\n panic_unwind = { path = \"../libpanic_unwind\", optional = true }\n panic_abort = { path = \"../libpanic_abort\" }\n core = { path = \"../libcore\" }\n-libc = { path = \"../rustc/libc_shim\" }\n-compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n+libc = { version = \"0.2.44\", default-features = false, features = ['rustc-dep-of-std'] }\n+compiler_builtins = { version = \"0.1.1\" }\n profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n \n [dev-dependencies]\n-rand = \"0.5\"\n+rand = \"0.6.1\"\n \n [target.x86_64-apple-darwin.dependencies]\n rustc_asan = { path = \"../librustc_asan\" }\n@@ -36,10 +36,10 @@ rustc_msan = { path = \"../librustc_msan\" }\n rustc_tsan = { path = \"../librustc_tsan\" }\n \n [target.'cfg(any(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")), target_env = \"sgx\"))'.dependencies]\n-dlmalloc = { path = '../rustc/dlmalloc_shim' }\n+dlmalloc = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n \n [target.x86_64-fortanix-unknown-sgx.dependencies]\n-fortanix-sgx-abi = { path = \"../rustc/fortanix-sgx-abi_shim\" }\n+fortanix-sgx-abi = { version = \"0.3.1\", features = ['rustc-dep-of-std'] }\n \n [build-dependencies]\n cc = \"1.0\""}, {"sha": "2386f134b9026e73b8456a478327d38ea1917744", "filename": "src/libstd/build.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -82,7 +82,12 @@ fn main() {\n }\n \n fn build_libbacktrace(target: &str) -> Result<(), ()> {\n-    let native = native_lib_boilerplate(\"libbacktrace\", \"libbacktrace\", \"backtrace\", \"\")?;\n+    let native = native_lib_boilerplate(\n+        \"../libbacktrace\".as_ref(),\n+        \"libbacktrace\",\n+        \"backtrace\",\n+        \"\",\n+    )?;\n \n     let mut build = cc::Build::new();\n     build"}, {"sha": "d581ba1de23f29627284f6f1d71f2de11ebfa5f6", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -2089,7 +2089,7 @@ mod tests {\n     use fs::{self, File, OpenOptions};\n     use io::{ErrorKind, SeekFrom};\n     use path::Path;\n-    use rand::{StdRng, FromEntropy, RngCore};\n+    use rand::{rngs::StdRng, FromEntropy, RngCore};\n     use str;\n     use sys_common::io::test::{TempDir, tmpdir};\n     use thread;"}, {"sha": "7c1654f62fa5a51e73ce8fa57bfe5fa070093c2c", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -426,7 +426,7 @@ mod prim_unit { }\n /// ## 3. Get it from C.\n ///\n /// ```\n-/// # #![feature(libc)]\n+/// # #![feature(rustc_private)]\n /// extern crate libc;\n ///\n /// use std::mem;"}, {"sha": "af2f1998415ee8a267192ff1aa2b1d29ee12797a", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -348,7 +348,7 @@ pub trait OpenOptionsExt {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// # #![feature(libc)]\n+    /// # #![feature(rustc_private)]\n     /// extern crate libc;\n     /// use std::fs::OpenOptions;\n     /// use std::os::unix::fs::OpenOptionsExt;"}, {"sha": "2577d6dd31d8f671a69e99cd2c86c36b22e84506", "filename": "src/libunwind/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibunwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Flibunwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2FCargo.toml?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -13,5 +13,5 @@ doc = false\n \n [dependencies]\n core = { path = \"../libcore\" }\n-libc = { path = \"../rustc/libc_shim\" }\n-compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n+libc = { version = \"0.2.43\", features = ['rustc-dep-of-std'], default-features = false }\n+compiler_builtins = \"0.1.0\""}, {"sha": "9656260888095f44830641ca7bb3da609a793451", "filename": "src/rust-sgx", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frust-sgx?ref=4c0116e13ffd4b84e6691cd3b1f09269c4e76728", "patch": "@@ -1 +0,0 @@\n-Subproject commit 9656260888095f44830641ca7bb3da609a793451"}, {"sha": "9804177280f66b147a26773402ab102127a34915", "filename": "src/rustc/compiler_builtins_shim/Cargo.toml", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4c0116e13ffd4b84e6691cd3b1f09269c4e76728/src%2Frustc%2Fcompiler_builtins_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c0116e13ffd4b84e6691cd3b1f09269c4e76728/src%2Frustc%2Fcompiler_builtins_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fcompiler_builtins_shim%2FCargo.toml?ref=4c0116e13ffd4b84e6691cd3b1f09269c4e76728", "patch": "@@ -1,40 +0,0 @@\n-[package]\n-name = \"compiler_builtins\"\n-authors = [\"The Rust Project Developers\"]\n-version = \"0.0.0\"\n-build = \"../../libcompiler_builtins/build.rs\"\n-\n-[lib]\n-path = \"../../libcompiler_builtins/src/lib.rs\"\n-test = false\n-doctest = false\n-\n-[dependencies]\n-# Specify the path to libcore; at the time of writing, removing this shim in\n-# favor of using compiler-builtins from git results in a compilation failure:\n-#\n-# Building stage0 std artifacts (x86_64-apple-darwin -> x86_64-apple-darwin)\n-#    Compiling compiler_builtins v0.1.0 (https://github.com/rust-lang-nursery/compiler-builtins.git#23f14d3f)\n-# error[E0463]: can't find crate for `core`\n-#\n-# error: aborting due to previous error\n-#\n-# error: Could not compile `compiler_builtins`.\n-#\n-# Caused by:\n-#   process didn't exit successfully: `/Users/tamird/src/rust/build/bootstrap/debug/rustc --crate-name compiler_builtins /Users/tamird/.cargo/git/checkouts/compiler-builtins-ec094dc45a0179c8/23f14d3/src/lib.rs --error-format json --crate-type lib --emit=dep-info,link -C opt-level=2 --cfg feature=\"c\" --cfg feature=\"compiler-builtins\" --cfg feature=\"default\" --cfg feature=\"gcc\" -C metadata=876d429e8d7eae1f -C extra-filename=-876d429e8d7eae1f --out-dir /Users/tamird/src/rust/build/x86_64-apple-darwin/stage0-std/x86_64-apple-darwin/release/deps --target x86_64-apple-darwin -L dependency=/Users/tamird/src/rust/build/x86_64-apple-darwin/stage0-std/x86_64-apple-darwin/release/deps -L dependency=/Users/tamird/src/rust/build/x86_64-apple-darwin/stage0-std/release/deps --cap-lints allow -L native=/Users/tamird/src/rust/build/x86_64-apple-darwin/stage0-std/x86_64-apple-darwin/release/build/compiler_builtins-f18fab55928102ad/out -l static=compiler-rt` (exit code: 101)\n-# thread 'main' panicked at 'command did not execute successfully: \"/Users/tamird/src/rust/build/x86_64-apple-darwin/stage0/bin/cargo\" \"build\" \"-j\" \"4\" \"--target\" \"x86_64-apple-darwin\" \"--release\" \"--features\" \"panic-unwind jemalloc backtrace\" \"--manifest-path\" \"/Users/tamird/src/rust/src/libstd/Cargo.toml\" \"--message-format\" \"json\"\n-# expected success, got: exit code: 101', src/bootstrap/compile.rs:883:8\n-#\n-# See https://github.com/rust-lang/rfcs/pull/1133.\n-core = { path = \"../../libcore\" }\n-\n-[build-dependencies]\n-cc = \"1.0.1\"\n-\n-[features]\n-c = []\n-default = [\"rustbuild\", \"compiler-builtins\"]\n-mem = []\n-rustbuild = []\n-compiler-builtins = []"}, {"sha": "b37543e5f679db8ffc0733faae909268e8e90f6c", "filename": "src/rustc/compiler_builtins_shim/build.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c0116e13ffd4b84e6691cd3b1f09269c4e76728/src%2Frustc%2Fcompiler_builtins_shim%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0116e13ffd4b84e6691cd3b1f09269c4e76728/src%2Frustc%2Fcompiler_builtins_shim%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fcompiler_builtins_shim%2Fbuild.rs?ref=4c0116e13ffd4b84e6691cd3b1f09269c4e76728", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This file is left intentionally empty (and not removed) to avoid an issue\n-// where this crate is always considered dirty due to compiler-builtins'\n-// `cargo:rerun-if-changed=build.rs` directive; since the path is relative, it\n-// refers to this file when this shim crate is being built, and the absence of\n-// this file is considered by cargo to be equivalent to it having changed."}, {"sha": "b6f8550829fe0658726fe788f653bbf88dcbd0b8", "filename": "src/rustc/dlmalloc_shim/Cargo.toml", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c0116e13ffd4b84e6691cd3b1f09269c4e76728/src%2Frustc%2Fdlmalloc_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c0116e13ffd4b84e6691cd3b1f09269c4e76728/src%2Frustc%2Fdlmalloc_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdlmalloc_shim%2FCargo.toml?ref=4c0116e13ffd4b84e6691cd3b1f09269c4e76728", "patch": "@@ -1,14 +0,0 @@\n-[package]\n-name = \"dlmalloc\"\n-version = \"0.0.0\"\n-authors = [\"The Rust Project Developers\"]\n-\n-[lib]\n-path = \"../../dlmalloc/src/lib.rs\"\n-test = false\n-bench = false\n-doc = false\n-\n-[dependencies]\n-core = { path = \"../../libcore\" }\n-compiler_builtins = { path = \"../../rustc/compiler_builtins_shim\" }"}, {"sha": "fd81d3db3a79b0a84730e9c0d327de9aa4ed6acf", "filename": "src/rustc/fortanix-sgx-abi_shim/Cargo.toml", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c0116e13ffd4b84e6691cd3b1f09269c4e76728/src%2Frustc%2Ffortanix-sgx-abi_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c0116e13ffd4b84e6691cd3b1f09269c4e76728/src%2Frustc%2Ffortanix-sgx-abi_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffortanix-sgx-abi_shim%2FCargo.toml?ref=4c0116e13ffd4b84e6691cd3b1f09269c4e76728", "patch": "@@ -1,14 +0,0 @@\n-[package]\n-name = \"fortanix-sgx-abi\"\n-version = \"0.0.0\"\n-authors = [\"The Rust Project Developers\"]\n-\n-[lib]\n-path = \"../../rust-sgx/fortanix-sgx-abi/src/lib.rs\"\n-test = false\n-bench = false\n-doc = false\n-\n-[dependencies]\n-core = { path = \"../../libcore\" }\n-compiler_builtins = { path = \"../../rustc/compiler_builtins_shim\" }"}, {"sha": "ee037ac68c59bd6083ff78a0d848d3f8f2774779", "filename": "src/rustc/libc_shim/Cargo.toml", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4c0116e13ffd4b84e6691cd3b1f09269c4e76728/src%2Frustc%2Flibc_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c0116e13ffd4b84e6691cd3b1f09269c4e76728/src%2Frustc%2Flibc_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flibc_shim%2FCargo.toml?ref=4c0116e13ffd4b84e6691cd3b1f09269c4e76728", "patch": "@@ -1,40 +0,0 @@\n-[package]\n-name = \"libc\"\n-version = \"0.0.0\"\n-authors = [\"The Rust Project Developers\"]\n-\n-[lib]\n-name = \"libc\"\n-path = \"../../liblibc/src/lib.rs\"\n-test = false\n-bench = false\n-doc = false\n-\n-[dependencies]\n-# Specify the path to libcore; at the time of writing, removing this shim in\n-# favor of using libc from git results in a compilation failure:\n-#\n-# Building stage0 std artifacts (x86_64-apple-darwin -> x86_64-apple-darwin)\n-#    Compiling libc v0.0.0 (file:///Users/tamird/src/rust/src/rustc/libc_shim)\n-# error[E0463]: can't find crate for `core`\n-#\n-# error: aborting due to previous error\n-#\n-# error: Could not compile `libc`.\n-#\n-# Caused by:\n-#   process didn't exit successfully: `/Users/tamird/src/rust/build/bootstrap/debug/rustc --crate-name libc src/rustc/libc_shim/../../liblibc/src/lib.rs --error-format json --crate-type lib --emit=dep-info,link -C opt-level=2 --cfg feature=\"default\" --cfg feature=\"no_std\" --cfg feature=\"stdbuild\" -C metadata=d758f87058112d7d -C extra-filename=-d758f87058112d7d --out-dir /Users/tamird/src/rust/build/x86_64-apple-darwin/stage0-std/x86_64-apple-darwin/release/deps --target x86_64-apple-darwin -L dependency=/Users/tamird/src/rust/build/x86_64-apple-darwin/stage0-std/x86_64-apple-darwin/release/deps -L dependency=/Users/tamird/src/rust/build/x86_64-apple-darwin/stage0-std/release/deps` (exit code: 101)\n-# thread 'main' panicked at 'command did not execute successfully: \"/Users/tamird/src/rust/build/x86_64-apple-darwin/stage0/bin/cargo\" \"build\" \"-j\" \"4\" \"--target\" \"x86_64-apple-darwin\" \"--release\" \"--features\" \"panic-unwind jemalloc backtrace\" \"--manifest-path\" \"/Users/tamird/src/rust/src/libstd/Cargo.toml\" \"--message-format\" \"json\"\n-# expected success, got: exit code: 101', src/bootstrap/compile.rs:883:8\n-#\n-# See https://github.com/rust-lang/rfcs/pull/1133.\n-core = { path = \"../../libcore\" }\n-compiler_builtins = { path = \"../compiler_builtins_shim\" }\n-\n-\n-[features]\n-# Certain parts of libc are conditionally compiled differently than when used\n-# outside rustc. See https://github.com/rust-lang/libc/search?l=Rust&q=stdbuild&type=&utf8=%E2%9C%93.\n-stdbuild = []\n-default = [\"stdbuild\", \"align\"]\n-align = []"}, {"sha": "8369413777578bd596a14d08bbb87b6dd7574e0f", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2018-10-30\n+date: 2018-11-21\n rustc: beta\n cargo: beta\n "}, {"sha": "648e89be037ff49c9f37d8d249b7d493919a267d", "filename": "src/test/incremental/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fincremental%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fincremental%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fforeign.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -13,7 +13,7 @@\n \n // revisions: rpass1\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "0254c7cf40302ba9bb8b45dee0324b63ec94f0cc", "filename": "src/test/run-make-fulldeps/c-link-to-rust-va-list-fn/checkrust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -10,7 +10,7 @@\n \n #![crate_type = \"staticlib\"]\n #![feature(c_variadic)]\n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "b084092d727bbbaf4f4340fc6261b60fccf26b15", "filename": "src/test/run-make-fulldeps/issue-25581/test.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-make-fulldeps%2Fissue-25581%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-make-fulldeps%2Fissue-25581%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-25581%2Ftest.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -8,14 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(libc)]\n-\n-extern crate libc;\n-\n #[link(name = \"test\", kind = \"static\")]\n extern {\n-    fn slice_len(s: &[u8]) -> libc::size_t;\n-    fn slice_elem(s: &[u8], idx: libc::size_t) -> u8;\n+    fn slice_len(s: &[u8]) -> usize;\n+    fn slice_elem(s: &[u8], idx: usize) -> u8;\n }\n \n fn main() {"}, {"sha": "1427250b9f0a4f38dfb7667e7b943da800742533", "filename": "src/test/run-make-fulldeps/issue-26006/in/time/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-make-fulldeps%2Fissue-26006%2Fin%2Ftime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-make-fulldeps%2Fissue-26006%2Fin%2Ftime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-26006%2Fin%2Ftime%2Flib.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(libc)]\n+#![feature(rustc_private)]\n extern crate libc;\n \n fn main(){}"}, {"sha": "4d38dc8fa0fdb9b8aba9184961c41e386c9101e6", "filename": "src/test/run-make-fulldeps/link-path-order/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-make-fulldeps%2Flink-path-order%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-make-fulldeps%2Flink-path-order%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-path-order%2Fmain.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "afa9374ff6733b65029695a7129982703dd5d855", "filename": "src/test/run-pass-valgrind/osx-frameworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass-valgrind%2Fosx-frameworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass-valgrind%2Fosx-frameworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fosx-frameworks.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n // pretty-expanded FIXME #23616\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "daa2bd62882300dff6e1d3a148e310708917fdff", "filename": "src/test/run-pass/anon-extern-mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -11,7 +11,7 @@\n // pretty-expanded FIXME #23616\n // ignore-wasm32-bare no libc to test ffi with\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "7a90a022e0a0b26956a7a08882a74e81efad0d7c", "filename": "src/test/run-pass/array-slice-vec/vec-macro-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-macro-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-macro-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-macro-no-std.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -12,7 +12,7 @@\n \n // ignore-emscripten no no_std executables\n \n-#![feature(lang_items, start, libc, alloc)]\n+#![feature(lang_items, start, rustc_private, alloc)]\n #![no_std]\n \n extern crate std as other;"}, {"sha": "6b464c59f2abcc4c1acee1ee986db5114a39e32f", "filename": "src/test/run-pass/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![crate_name=\"anonexternmod\"]\n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "4d1acf31be32465fe41b932958686a59641812f9", "filename": "src/test/run-pass/auxiliary/check_static_recursion_foreign_helper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fauxiliary%2Fcheck_static_recursion_foreign_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fauxiliary%2Fcheck_static_recursion_foreign_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fcheck_static_recursion_foreign_helper.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -10,7 +10,7 @@\n \n // Helper definition for test/run-pass/check-static-recursion-foreign.rs.\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n #![crate_name = \"check_static_recursion_foreign_helper\"]\n #![crate_type = \"lib\"]"}, {"sha": "465feb8eaf7c64bb049315eb3a98787d5ad0b6de", "filename": "src/test/run-pass/auxiliary/foreign_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fforeign_lib.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -10,7 +10,7 @@\n \n #![crate_name=\"foreign_lib\"]\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n pub mod rustrt {\n     extern crate libc;"}, {"sha": "1f29a5201bdca8ecb27cb69645f319df288a74da", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -11,7 +11,7 @@\n // pretty-expanded FIXME #23616\n // ignore-wasm32-bare no libc to test ffi with\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n mod rustrt {\n     extern crate libc;"}, {"sha": "7dd3b9a7a5bf63aff5ae0ebc0bde53698de0069e", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-wasm32-bare no libc to test with\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "15f509a1753dd2ccc3b684e4d70a735237a01f33", "filename": "src/test/run-pass/check-static-recursion-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -16,7 +16,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(custom_attribute, libc)]\n+#![feature(custom_attribute, rustc_private)]\n \n extern crate check_static_recursion_foreign_helper;\n extern crate libc;"}, {"sha": "b78fa849d0d66c732cdb9518ba19e84504d2a084", "filename": "src/test/run-pass/command-before-exec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -13,7 +13,7 @@\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n-#![feature(process_exec, libc)]\n+#![feature(process_exec, rustc_private)]\n \n extern crate libc;\n "}, {"sha": "6b464c59f2abcc4c1acee1ee986db5114a39e32f", "filename": "src/test/run-pass/consts/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fconsts%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fconsts%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![crate_name=\"anonexternmod\"]\n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "902332656a8036ebcc406224df4619620ed2d368", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -20,7 +20,7 @@\n // memory, which makes for some *confusing* logs. That's why these are here\n // instead of in std.\n \n-#![feature(libc, duration)]\n+#![feature(rustc_private, duration)]\n \n extern crate libc;\n "}, {"sha": "6b464c59f2abcc4c1acee1ee986db5114a39e32f", "filename": "src/test/run-pass/cross-crate/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fcross-crate%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fcross-crate%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcross-crate%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![crate_name=\"anonexternmod\"]\n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "7e7899cf1518a6913f077a392ccfa7a1c35e0717", "filename": "src/test/run-pass/env-funky-keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fenv-funky-keys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fenv-funky-keys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-funky-keys.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -16,7 +16,7 @@\n // ignore-emscripten no execve\n // no-prefer-dynamic\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "cdbecf120c3e5ac1dc37782a11d7bd28ebb50f7f", "filename": "src/test/run-pass/env-null-vars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fenv-null-vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fenv-null-vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-null-vars.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -15,7 +15,7 @@\n \n // issue-53200\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n extern crate libc;\n \n use std::env;"}, {"sha": "d20d9dbac3d2c9df1c8b1f99abcd80b23ade9e98", "filename": "src/test/run-pass/extern/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fextern%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fextern%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -10,7 +10,7 @@\n \n #![crate_name=\"externcallback\"]\n #![crate_type = \"lib\"]\n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "f6eff601c4b7a9deb91f1eebeb5bbd559785350d", "filename": "src/test/run-pass/extern/extern-call-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-deep.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -11,7 +11,7 @@\n // run-pass\n // ignore-wasm32-bare no libc to test ffi with\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "8cb04771cb93a3b349cd8518ce07f8d0f7aee94b", "filename": "src/test/run-pass/extern/extern-call-deep2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-deep2.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -12,7 +12,7 @@\n #![allow(unused_must_use)]\n // ignore-emscripten no threads support\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n use std::thread;"}, {"sha": "d20721f2c91949f91f9b337d69b85868a0c8b745", "filename": "src/test/run-pass/extern/extern-call-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-indirect.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -11,7 +11,7 @@\n // run-pass\n // ignore-wasm32-bare no libc to test ffi with\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "5e158c2dfc970341b12259a21e163a5a96a9ca3a", "filename": "src/test/run-pass/extern/extern-call-scrub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-scrub.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -16,7 +16,7 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n use std::thread;"}, {"sha": "b99e27af920b249e3499652feb3b9df2100de92a", "filename": "src/test/run-pass/extern/extern-crosscrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fextern%2Fextern-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fextern%2Fextern-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-crosscrate.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -12,7 +12,7 @@\n // aux-build:extern-crosscrate-source.rs\n // ignore-wasm32-bare no libc to test ffi with\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate externcallback;\n extern crate libc;"}, {"sha": "33e64d832fc64867a19864fe0d0e7336f3a2ac16", "filename": "src/test/run-pass/fds-are-cloexec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -14,7 +14,7 @@\n // ignore-emscripten no processes\n // ignore-haiku\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "465feb8eaf7c64bb049315eb3a98787d5ad0b6de", "filename": "src/test/run-pass/foreign/auxiliary/foreign_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fforeign%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fforeign%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign%2Fauxiliary%2Fforeign_lib.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -10,7 +10,7 @@\n \n #![crate_name=\"foreign_lib\"]\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n pub mod rustrt {\n     extern crate libc;"}, {"sha": "e35ec88213252b4f114cee9455da8b7b9be58098", "filename": "src/test/run-pass/foreign/foreign-call-no-runtime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign-call-no-runtime.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -11,7 +11,7 @@\n // run-pass\n // ignore-emscripten no threads support\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "8fe90b7d4988014e82febf370ea94cdb7bef887a", "filename": "src/test/run-pass/foreign/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign-fn-linkname.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -11,7 +11,7 @@\n // run-pass\n // ignore-wasm32-bare no libc to test ffi with\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n use std::ffi::CString;"}, {"sha": "49ddd09beee4976ff1352d3fd5e2b09415fab0cb", "filename": "src/test/run-pass/foreign/foreign-no-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign-no-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign-no-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign-no-abi.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -14,7 +14,7 @@\n // ignore-wasm32-bare no libc to test ffi with\n // pretty-expanded FIXME #23616\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n mod rustrt {\n     extern crate libc;"}, {"sha": "f8942bc171252e9d3cd02f774485908fb5873bc9", "filename": "src/test/run-pass/foreign/foreign2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign2.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -13,7 +13,7 @@\n // ignore-wasm32-bare no libc to test ffi with\n // pretty-expanded FIXME #23616\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "3b8a265dd70a59cdceffaf556b7d704f4cdb0ae8", "filename": "src/test/run-pass/invalid_const_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -15,7 +15,7 @@\n // compile-flags: -C debug_assertions=yes\n \n #![stable(feature = \"rustc\", since = \"1.0.0\")]\n-#![feature(const_fn, libc, staged_api, rustc_attrs)]\n+#![feature(const_fn, rustc_private, staged_api, rustc_attrs)]\n #![allow(const_err)]\n \n extern crate libc;"}, {"sha": "9c983eab7d833b416b05ffdeb63a26efa7401590", "filename": "src/test/run-pass/issues/issue-13259-windows-tcb-trash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13259-windows-tcb-trash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13259-windows-tcb-trash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13259-windows-tcb-trash.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // run-pass\n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "f3795c216c85c3fab6e818bb3a65fcfa77a30b2d", "filename": "src/test/run-pass/issues/issue-2214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2214.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -11,7 +11,7 @@\n // run-pass\n // ignore-wasm32-bare no libc to test ffi with\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "47f60fb93d784e9896b225c603b8be4428b84129", "filename": "src/test/run-pass/issues/issue-30490.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30490.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30490.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30490.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -18,7 +18,7 @@\n // where the descriptors to inherit were already stdio descriptors.\n // This test checks to avoid that regression.\n \n-#![cfg_attr(unix, feature(libc))]\n+#![cfg_attr(unix, feature(rustc_private))]\n #![cfg_attr(windows, allow(unused_imports))]\n \n #[cfg(unix)]"}, {"sha": "99a72444d73a6b138e1679dff004d5d5eb9be117", "filename": "src/test/run-pass/issues/issue-3656.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3656.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -19,7 +19,7 @@\n // pretty-expanded FIXME #23616\n // ignore-wasm32-bare no libc to test with\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n use libc::{c_uint, uint32_t, c_void};"}, {"sha": "2f5bfbb501fd111b6aa55798fdd6175880614df5", "filename": "src/test/run-pass/no-stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fno-stdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fno-stdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-stdio.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -12,7 +12,7 @@\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "1c714e7f7fa182e1c623dc6815be000e68656711", "filename": "src/test/run-pass/out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -16,7 +16,7 @@\n // ignore-emscripten no processes\n \n #![feature(asm)]\n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n #[cfg(unix)]\n extern crate libc;"}, {"sha": "257c7f546b1c7a41293b88b3399090c038900fdd", "filename": "src/test/run-pass/rfcs/rfc-1014-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-1014-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-1014-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-1014-2.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -11,7 +11,7 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "578a7f4395cc7e9cc27acf0bf031ebcc55ccba89", "filename": "src/test/run-pass/rfcs/rfc-1014.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-1014.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-1014.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-1014.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -13,7 +13,7 @@\n // ignore-cloudabi stdout does not map to file descriptor 1 by default\n // ignore-wasm32-bare no libc\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "961b8020f3d9026414a36ead358304d04acad8e0", "filename": "src/test/run-pass/segfault-no-out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -12,7 +12,7 @@\n // ignore-cloudabi can't run commands\n // ignore-emscripten can't run commands\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "a79ab20c1605ca9fd5795ea37e564332f61411a6", "filename": "src/test/run-pass/signal-alternate-stack-cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fsignal-alternate-stack-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fsignal-alternate-stack-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-alternate-stack-cleanup.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -16,7 +16,7 @@\n // ignore-wasm32-bare no libc\n // ignore-windows\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n extern crate libc;\n \n use libc::*;"}, {"sha": "460d66a45926461cac599e7d4bdd91198f00e081", "filename": "src/test/run-pass/statics/static-mut-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fstatics%2Fstatic-mut-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fstatics%2Fstatic-mut-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatics%2Fstatic-mut-foreign.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -15,7 +15,7 @@\n \n // ignore-wasm32-bare no libc to test ffi with\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "d822b67a07c3b698e84dd0741c1afd616b7bff8a", "filename": "src/test/run-pass/wait-forked-but-failed-child.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -11,7 +11,7 @@\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "b3e633a701776dce214fe1cab604769708392aae", "filename": "src/test/ui/error-codes/E0259.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Ferror-codes%2FE0259.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Ferror-codes%2FE0259.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0259.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(alloc, libc)]\n+#![feature(alloc, rustc_private)]\n #![allow(unused_extern_crates)]\n \n extern crate alloc;"}, {"sha": "fb17934fa9b21e536ac2fecbf3d3e3bba625e22f", "filename": "src/test/ui/extern/extern-const.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -7,7 +7,7 @@\n // run-rustfix\n // ignore-wasm32 no external library to link to.\n // compile-flags: -g -Z continue-parse-after-error\n-#![feature(libc)]\n+#![feature(rustc_private)]\n extern crate libc;\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]"}, {"sha": "f2585f5199ea6f62561790f5f13bb9f0bd845a9a", "filename": "src/test/ui/extern/extern-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -7,7 +7,7 @@\n // run-rustfix\n // ignore-wasm32 no external library to link to.\n // compile-flags: -g -Z continue-parse-after-error\n-#![feature(libc)]\n+#![feature(rustc_private)]\n extern crate libc;\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]"}, {"sha": "125f6e1faa6691c6cc6cd97c302e38d9dc52214e", "filename": "src/test/ui/issues/issue-1251.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Fissues%2Fissue-1251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Fissues%2Fissue-1251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1251.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -14,7 +14,7 @@\n // pretty-expanded FIXME #23616\n // ignore-wasm32-bare no libc to test ffi with\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n #![crate_id=\"rust_get_test_int\"]\n "}, {"sha": "bee324f8746136f8da4715854413843a7a3e24ac", "filename": "src/test/ui/issues/issue-22034.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Fissues%2Fissue-22034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Fissues%2Fissue-22034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22034.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "7a5a5cde469e501ac56fabbcb96b6cae1b78ae24", "filename": "src/test/ui/issues/issue-37887.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Fissues%2Fissue-37887.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Fissues%2Fissue-37887.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37887.stderr?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -4,13 +4,13 @@ error[E0432]: unresolved import `libc`\n LL |     use libc::*; //~ ERROR unresolved import\n    |         ^^^^ maybe a missing `extern crate libc;`?\n \n-error[E0658]: use of unstable library feature 'libc': use `libc` from crates.io (see issue #27783)\n+error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead? (see issue #27812)\n   --> $DIR/issue-37887.rs:12:5\n    |\n LL |     extern crate libc; //~ ERROR use of unstable\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = help: add #![feature(libc)] to the crate attributes to enable\n+   = help: add #![feature(rustc_private)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4c9f1f980bdb8ec437163d11efdfdc1af0541769", "filename": "src/test/ui/lint/lint-ctypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![deny(improper_ctypes)]\n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n #![allow(private_in_public)]\n "}, {"sha": "35991901e9309d279c4b35ab37af87733e531fe4", "filename": "src/test/ui/non-copyable-void.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Fnon-copyable-void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Fnon-copyable-void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-copyable-void.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-wasm32-bare no libc to test ffi with\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n extern crate libc;\n "}, {"sha": "4eb3c3d6436bb3aa9bb775c87ed64fc351ec5280", "filename": "src/test/ui/unnecessary-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Funnecessary-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftest%2Fui%2Funnecessary-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funnecessary-extern-crate.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -11,7 +11,7 @@\n // edition:2018\n \n #![deny(unused_extern_crates)]\n-#![feature(alloc, test, libc, crate_visibility_modifier)]\n+#![feature(alloc, test, rustc_private, crate_visibility_modifier)]\n \n extern crate libc;\n //~^ ERROR unused extern crate"}, {"sha": "f000d634e1943bb3d55de07707968a229c61685c", "filename": "src/tools/rustc-std-workspace-core/Cargo.toml", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftools%2Frustc-std-workspace-core%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftools%2Frustc-std-workspace-core%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-std-workspace-core%2FCargo.toml?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -0,0 +1,14 @@\n+[package]\n+name = \"rustc-std-workspace-core\"\n+version = \"1.0.0\"\n+authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n+license = 'MIT/Apache-2.0'\n+description = \"\"\"\n+Hack for the compiler's own build system\n+\"\"\"\n+\n+[lib]\n+path = \"lib.rs\"\n+\n+[dependencies]\n+core = { path = \"../../libcore\" }"}, {"sha": "9c2b1fa91d3b3ed5c5cbbb7656404c0cb0ff1064", "filename": "src/tools/rustc-std-workspace-core/README.md", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftools%2Frustc-std-workspace-core%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftools%2Frustc-std-workspace-core%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-std-workspace-core%2FREADME.md?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -0,0 +1,29 @@\n+# The `rustc-std-workspace-core` crate\n+\n+This crate is a shim and empty crate which simply depends on `libcore` and\n+reexports all of its contents. The crate is the crux of empowering the standard\n+library to depend on crates from crates.io\n+\n+Crates on crates.io that the standard library depend on the\n+`rustc-std-workspace-core` crate from crates.io. On crates.io, however, this\n+crate is empty. We use `[patch]` to override it to this crate in this\n+repository. As a result, crates on crates.io will draw a dependency edge to\n+`libcore`, the version defined in this repository. That should draw all the\n+dependency edges to ensure Cargo builds crates successfully!\n+\n+Note that crates on crates.io need to depend on this crate with the name `core`\n+for everything to work correctly. To do that they can use:\n+\n+```toml\n+core = { version = \"1.0.0\", optional = true, package = 'rustc-std-workspace-core' }\n+```\n+\n+Through the use of the `package` key the crate is renamed to `core`, meaning\n+it'll look like\n+\n+```\n+--extern core=.../librustc_std_workspace_core-XXXXXXX.rlib\n+```\n+\n+when Cargo invokes the compiler, satisfying the implicit `extern crate core`\n+directive injected by the compiler."}, {"sha": "e2946fe2a97f1ee3bb768e67c02bed897a5d41b7", "filename": "src/tools/rustc-std-workspace-core/lib.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftools%2Frustc-std-workspace-core%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftools%2Frustc-std-workspace-core%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-std-workspace-core%2Flib.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -0,0 +1,6 @@\n+#![feature(no_core)]\n+#![no_core]\n+\n+extern crate core;\n+\n+pub use core::*;"}, {"sha": "2b5cff6e07b2a27b70d95aa5d109b7b63dd24700", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -53,6 +53,7 @@ const EXCEPTIONS: &[&str] = &[\n     \"bytesize\",           // Apache-2.0, cargo\n     \"im-rc\",              // MPL-2.0+, cargo\n     \"adler32\",            // BSD-3-Clause AND Zlib, cargo dep that isn't used\n+    \"fortanix-sgx-abi\",   // MPL-2.0+, libstd but only for sgx target\n ];\n \n /// Which crates to check against the whitelist?"}, {"sha": "614d2053a432be9d4cba6f7843ec7f81f902bdbf", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -56,15 +56,11 @@ pub mod libcoretest;\n \n fn filter_dirs(path: &Path) -> bool {\n     let skip = [\n-        \"src/dlmalloc\",\n         \"src/llvm\",\n         \"src/llvm-emscripten\",\n         \"src/libbacktrace\",\n-        \"src/libcompiler_builtins\",\n         \"src/librustc_data_structures/owning_ref\",\n-        \"src/compiler-rt\",\n-        \"src/liblibc\",\n-        \"src/rt/hoedown\",\n+        \"src/vendor\",\n         \"src/tools/cargo\",\n         \"src/tools/clang\",\n         \"src/tools/rls\","}, {"sha": "acf72022c60ed589c9ac0884d7ddaa14713d904f", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=4c21a3bc2afc5933f31f1368f6b3406c5f1bdeb3", "patch": "@@ -26,7 +26,6 @@\n //! exceptions:\n //!\n //! - core may not have platform-specific code\n-//! - libcompiler_builtins may have platform-specific code\n //! - libpanic_abort may have platform-specific code\n //! - libpanic_unwind may have platform-specific code\n //! - libunwind may have platform-specific code\n@@ -50,8 +49,6 @@ use std::iter::Iterator;\n // Paths that may contain platform-specific code\n const EXCEPTION_PATHS: &[&str] = &[\n     // std crates\n-    \"src/libcompiler_builtins\",\n-    \"src/liblibc\",\n     \"src/libpanic_abort\",\n     \"src/libpanic_unwind\",\n     \"src/libunwind\","}]}