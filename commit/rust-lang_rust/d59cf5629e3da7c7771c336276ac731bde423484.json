{"sha": "d59cf5629e3da7c7771c336276ac731bde423484", "node_id": "C_kwDOAAsO6NoAKGQ1OWNmNTYyOWUzZGE3Yzc3NzFjMzM2Mjc2YWM3MzFiZGU0MjM0ODQ", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-03-23T04:18:47Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-03-23T04:18:47Z"}, "message": "Refactor: Move argument building into args", "tree": {"sha": "d8a72545665e0caddef737fca7bdf23738afc57c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8a72545665e0caddef737fca7bdf23738afc57c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d59cf5629e3da7c7771c336276ac731bde423484", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmI6n6cACgkQcTRy8vRW\nJ94gwQ/9E2t9z1ZF75VFpA+lqFDEPQf0JVZWFJ//B8Ip0sgx6CDd1DwvxugQVE14\njaCeFpWoghhN/owPYzBSugVS0wq7MOd0ZM5DKCfkqKYOZ4k5Iqajob1JBOMDnlBt\n2TuTyzCjnnuILdLB+iMk8fsFUAgBHRCfPreDfxNJmkRWz0W23NC1Ka56mPNd1/1h\nPHYD6YGOq9DquYJle6DCPvEQ7WxnLSatzl4x6oE3kYbUtV57jaPfxB06ck7onnYn\nvGGQjT3swkDlFQRBsXwFDDM19oAmfK6sOQK+GcLuIyB9CtzlGIItH9L6tAI3Yj42\n3pAK1A0RGwvKDnW7y0FdmIMFrxtwlx4sMOsiKztw1fgr6xAQqWlFn05wTot+gelZ\ntCwP3mIaBPrS4+WFeLKh2cj9PUPbR/CDXXnVS72hV972bLaEWhQsMSR+q5mVde3+\nQ06OlPUksI2EvbQlHR51dyUVbyO7P3fSQKBSUe0U5m3TAMnMRKt+VJn56n1mhSbX\nDyiIOYjm5BYvqPFkJxJgug5OMxeszuAD3+hkK8fja3T5JXb6lxtQvh3Q8ucLSsml\nKEiRqTmbJovHxxlwdeiltkI6pjkr5Ra87OUF/JXZkDnwHaSpSev50mYjDbq8gYZz\nUECGLkyGANxvVdKm/JDt/E5oxIchFpJZhJdOwVXxMDcl+2OnTz8=\n=w0XK\n-----END PGP SIGNATURE-----", "payload": "tree d8a72545665e0caddef737fca7bdf23738afc57c\nparent 3ea44938e21f0de8ae7d4f6399a8a30f97867c70\nauthor Chris Denton <christophersdenton@gmail.com> 1648009127 +0000\ncommitter Chris Denton <christophersdenton@gmail.com> 1648009127 +0000\n\nRefactor: Move argument building into args\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d59cf5629e3da7c7771c336276ac731bde423484", "html_url": "https://github.com/rust-lang/rust/commit/d59cf5629e3da7c7771c336276ac731bde423484", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d59cf5629e3da7c7771c336276ac731bde423484/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ea44938e21f0de8ae7d4f6399a8a30f97867c70", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea44938e21f0de8ae7d4f6399a8a30f97867c70", "html_url": "https://github.com/rust-lang/rust/commit/3ea44938e21f0de8ae7d4f6399a8a30f97867c70"}], "stats": {"total": 139, "additions": 70, "deletions": 69}, "files": [{"sha": "b9c303f9cce94d088ed21cb0834a4c67f9d48b1d", "filename": "library/std/src/sys/windows/args.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/d59cf5629e3da7c7771c336276ac731bde423484/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59cf5629e3da7c7771c336276ac731bde423484/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs?ref=d59cf5629e3da7c7771c336276ac731bde423484", "patch": "@@ -8,12 +8,14 @@ mod tests;\n \n use crate::ffi::OsString;\n use crate::fmt;\n+use crate::io;\n use crate::marker::PhantomData;\n use crate::num::NonZeroU16;\n use crate::os::windows::prelude::*;\n use crate::path::PathBuf;\n use crate::ptr::NonNull;\n use crate::sys::c;\n+use crate::sys::process::ensure_no_nuls;\n use crate::sys::windows::os::current_exe;\n use crate::vec;\n \n@@ -234,3 +236,66 @@ impl Iterator for WStrUnits<'_> {\n         }\n     }\n }\n+\n+#[derive(Debug)]\n+pub(crate) enum Arg {\n+    /// Add quotes (if needed)\n+    Regular(OsString),\n+    /// Append raw string without quoting\n+    Raw(OsString),\n+}\n+\n+enum Quote {\n+    // Every arg is quoted\n+    Always,\n+    // Whitespace and empty args are quoted\n+    Auto,\n+    // Arg appended without any changes (#29494)\n+    Never,\n+}\n+\n+pub(crate) fn append_arg(cmd: &mut Vec<u16>, arg: &Arg, force_quotes: bool) -> io::Result<()> {\n+    let (arg, quote) = match arg {\n+        Arg::Regular(arg) => (arg, if force_quotes { Quote::Always } else { Quote::Auto }),\n+        Arg::Raw(arg) => (arg, Quote::Never),\n+    };\n+\n+    // If an argument has 0 characters then we need to quote it to ensure\n+    // that it actually gets passed through on the command line or otherwise\n+    // it will be dropped entirely when parsed on the other end.\n+    ensure_no_nuls(arg)?;\n+    let arg_bytes = arg.bytes();\n+    let (quote, escape) = match quote {\n+        Quote::Always => (true, true),\n+        Quote::Auto => {\n+            (arg_bytes.iter().any(|c| *c == b' ' || *c == b'\\t') || arg_bytes.is_empty(), true)\n+        }\n+        Quote::Never => (false, false),\n+    };\n+    if quote {\n+        cmd.push('\"' as u16);\n+    }\n+\n+    let mut backslashes: usize = 0;\n+    for x in arg.encode_wide() {\n+        if escape {\n+            if x == '\\\\' as u16 {\n+                backslashes += 1;\n+            } else {\n+                if x == '\"' as u16 {\n+                    // Add n+1 backslashes to total 2n+1 before internal '\"'.\n+                    cmd.extend((0..=backslashes).map(|_| '\\\\' as u16));\n+                }\n+                backslashes = 0;\n+            }\n+        }\n+        cmd.push(x);\n+    }\n+\n+    if quote {\n+        // Add n backslashes to total 2n before ending '\"'.\n+        cmd.extend((0..backslashes).map(|_| '\\\\' as u16));\n+        cmd.push('\"' as u16);\n+    }\n+    Ok(())\n+}"}, {"sha": "c98294069f9deb514f02ba293baf5b20fa8ca702", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 5, "deletions": 69, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d59cf5629e3da7c7771c336276ac731bde423484/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59cf5629e3da7c7771c336276ac731bde423484/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=d59cf5629e3da7c7771c336276ac731bde423484", "patch": "@@ -17,6 +17,7 @@ use crate::os::windows::ffi::{OsStrExt, OsStringExt};\n use crate::os::windows::io::{AsRawHandle, FromRawHandle, IntoRawHandle};\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n+use crate::sys::args::{self, Arg};\n use crate::sys::c;\n use crate::sys::c::NonZeroDWORD;\n use crate::sys::cvt;\n@@ -27,7 +28,7 @@ use crate::sys::pipe::{self, AnonPipe};\n use crate::sys::stdio;\n use crate::sys_common::mutex::StaticMutex;\n use crate::sys_common::process::{CommandEnv, CommandEnvs};\n-use crate::sys_common::{AsInner, IntoInner};\n+use crate::sys_common::IntoInner;\n \n use libc::{c_void, EXIT_FAILURE, EXIT_SUCCESS};\n \n@@ -147,7 +148,7 @@ impl AsRef<OsStr> for EnvKey {\n     }\n }\n \n-fn ensure_no_nuls<T: AsRef<OsStr>>(str: T) -> io::Result<T> {\n+pub(crate) fn ensure_no_nuls<T: AsRef<OsStr>>(str: T) -> io::Result<T> {\n     if str.as_ref().encode_wide().any(|b| b == 0) {\n         Err(io::const_io_error!(ErrorKind::InvalidInput, \"nul byte found in provided data\"))\n     } else {\n@@ -181,14 +182,6 @@ pub struct StdioPipes {\n     pub stderr: Option<AnonPipe>,\n }\n \n-#[derive(Debug)]\n-enum Arg {\n-    /// Add quotes (if needed)\n-    Regular(OsString),\n-    /// Append raw string without quoting\n-    Raw(OsString),\n-}\n-\n impl Command {\n     pub fn new(program: &OsStr) -> Command {\n         Command {\n@@ -724,15 +717,6 @@ fn zeroed_process_information() -> c::PROCESS_INFORMATION {\n     }\n }\n \n-enum Quote {\n-    // Every arg is quoted\n-    Always,\n-    // Whitespace and empty args are quoted\n-    Auto,\n-    // Arg appended without any changes (#29494)\n-    Never,\n-}\n-\n // Produces a wide string *without terminating null*; returns an error if\n // `prog` or any of the `args` contain a nul.\n fn make_command_line(\n@@ -763,57 +747,9 @@ fn make_command_line(\n \n     for arg in args {\n         cmd.push(' ' as u16);\n-        let (arg, quote) = match arg {\n-            Arg::Regular(arg) => (arg, if force_quotes { Quote::Always } else { Quote::Auto }),\n-            Arg::Raw(arg) => (arg, Quote::Never),\n-        };\n-        append_arg(&mut cmd, arg, quote)?;\n-    }\n-    if is_batch_file {\n-        cmd.push(b'\"' as u16);\n-    }\n-    return Ok(cmd);\n-\n-    fn append_arg(cmd: &mut Vec<u16>, arg: &OsStr, quote: Quote) -> io::Result<()> {\n-        // If an argument has 0 characters then we need to quote it to ensure\n-        // that it actually gets passed through on the command line or otherwise\n-        // it will be dropped entirely when parsed on the other end.\n-        ensure_no_nuls(arg)?;\n-        let arg_bytes = &arg.as_inner().inner.as_inner();\n-        let (quote, escape) = match quote {\n-            Quote::Always => (true, true),\n-            Quote::Auto => {\n-                (arg_bytes.iter().any(|c| *c == b' ' || *c == b'\\t') || arg_bytes.is_empty(), true)\n-            }\n-            Quote::Never => (false, false),\n-        };\n-        if quote {\n-            cmd.push('\"' as u16);\n-        }\n-\n-        let mut backslashes: usize = 0;\n-        for x in arg.encode_wide() {\n-            if escape {\n-                if x == '\\\\' as u16 {\n-                    backslashes += 1;\n-                } else {\n-                    if x == '\"' as u16 {\n-                        // Add n+1 backslashes to total 2n+1 before internal '\"'.\n-                        cmd.extend((0..=backslashes).map(|_| '\\\\' as u16));\n-                    }\n-                    backslashes = 0;\n-                }\n-            }\n-            cmd.push(x);\n-        }\n-\n-        if quote {\n-            // Add n backslashes to total 2n before ending '\"'.\n-            cmd.extend((0..backslashes).map(|_| '\\\\' as u16));\n-            cmd.push('\"' as u16);\n-        }\n-        Ok(())\n+        args::append_arg(&mut cmd, arg, force_quotes)?;\n     }\n+    Ok(cmd)\n }\n \n fn make_envp(maybe_env: Option<BTreeMap<EnvKey, OsString>>) -> io::Result<(*mut c_void, Vec<u16>)> {"}]}