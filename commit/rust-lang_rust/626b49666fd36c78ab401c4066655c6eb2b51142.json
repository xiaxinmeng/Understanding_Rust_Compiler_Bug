{"sha": "626b49666fd36c78ab401c4066655c6eb2b51142", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNmI0OTY2NmZkMzZjNzhhYjQwMWM0MDY2NjU1YzZlYjJiNTExNDI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-26T10:25:12Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-26T15:06:49Z"}, "message": "Rollup merge of #55358 - sinkuu:redundant_clone2, r=estebank\n\nRemove redundant clone (2)", "tree": {"sha": "aa29d97aee9b08161c240158bb2768a9acbd7baf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa29d97aee9b08161c240158bb2768a9acbd7baf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/626b49666fd36c78ab401c4066655c6eb2b51142", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvTLYoACgkQ/vbIBR0O\nATysSRAAqNQeyJFyN3L9C1prjOGjRtXilIDNceQKlOMltMjOTuoeMalsdVCAwO66\nNjhutAP5EI6QWCbixHmEnHgHkNQccy+SIoSFrxXpmxW810SG/pdmd+jbgDzkWTuA\nPlpnEd5mKtYW6Xq4ozOdvbqPZLFTB3yshFFBfi9iGHAhw4LDodCtkqaOIh7hu5Cf\nI+zsFSaNhwH0w51hOrPjOSB27lxH7cKf72lW7MaXCkAomLJd3RH0PTWCJJxTpvIg\nXeuQcckxp+DTTvffeA4PWkMyMn3b/bkagb5Kuga7+m3lwfiLVjDYMsBnnfiHQTX8\nVIhpXXV0nEk1ahXxK5fbLPwcmgMt+5DTvcHLWpFOoHjcmfO1ThV/DGgiP+52IByl\nPrb5ZJfqqjpV2JNwHAG8rqQ8zGV7L0HwMbRSlv2UpCbOGfqrZ4kWaJYxy27NG4LB\nuM8Hj0O7jMdhJggLgImG3uJyeJQg/1Wo0VFRvSmS6inY7+P1SgwpDWXJrpVpxR/j\nBJDMy65t6NMKkb7+AEzlrl+g1BN4CToGvc4qw/xzvfmsPwtpiSNZ7iRKgBhWUWUq\n12rOipS57KkG0hVN/KissrWpDUvpljde1rFDtYTrBMMi16ACyUFsbZ2IpecpoxYT\naow8WGzciq+MqqK+27aKkjkioc/mSrRn11otikajPlO9XFeWobU=\n=53SP\n-----END PGP SIGNATURE-----", "payload": "tree aa29d97aee9b08161c240158bb2768a9acbd7baf\nparent 9c55a4a8139bce312b832294a764012816e4fc44\nparent 3878d24ef6922c133539fe67e0c907166f6261cb\nauthor kennytm <kennytm@gmail.com> 1540549512 +0800\ncommitter kennytm <kennytm@gmail.com> 1540566409 +0800\n\nRollup merge of #55358 - sinkuu:redundant_clone2, r=estebank\n\nRemove redundant clone (2)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/626b49666fd36c78ab401c4066655c6eb2b51142", "html_url": "https://github.com/rust-lang/rust/commit/626b49666fd36c78ab401c4066655c6eb2b51142", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/626b49666fd36c78ab401c4066655c6eb2b51142/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c55a4a8139bce312b832294a764012816e4fc44", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c55a4a8139bce312b832294a764012816e4fc44", "html_url": "https://github.com/rust-lang/rust/commit/9c55a4a8139bce312b832294a764012816e4fc44"}, {"sha": "3878d24ef6922c133539fe67e0c907166f6261cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3878d24ef6922c133539fe67e0c907166f6261cb", "html_url": "https://github.com/rust-lang/rust/commit/3878d24ef6922c133539fe67e0c907166f6261cb"}], "stats": {"total": 121, "additions": 56, "deletions": 65}, "files": [{"sha": "fea6302d0a119e6a5f0916dfefa4628bc040eebe", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -1447,8 +1447,8 @@ impl Step for Extended {\n         tarballs.extend(rls_installer.clone());\n         tarballs.extend(clippy_installer.clone());\n         tarballs.extend(rustfmt_installer.clone());\n-        tarballs.extend(llvm_tools_installer.clone());\n-        tarballs.extend(lldb_installer.clone());\n+        tarballs.extend(llvm_tools_installer);\n+        tarballs.extend(lldb_installer);\n         tarballs.push(analysis_installer);\n         tarballs.push(std_installer);\n         if builder.config.docs {"}, {"sha": "f6032eb9931f79fc3abf76344ce21181364ab0a4", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -1052,7 +1052,7 @@ impl Step for Compiletest {\n         let hostflags = flags.clone();\n         cmd.arg(\"--host-rustcflags\").arg(hostflags.join(\" \"));\n \n-        let mut targetflags = flags.clone();\n+        let mut targetflags = flags;\n         targetflags.push(format!(\n             \"-Lnative={}\",\n             builder.test_helpers_out(target).display()"}, {"sha": "5db850f1588b6a24bd4c784d56a28e64751a95a6", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -458,7 +458,7 @@ where\n             );\n             debug!(\"projection_must_outlive: unique declared bound appears in trait ref\");\n             self.delegate\n-                .push_sub_region_constraint(origin.clone(), region, unique_bound);\n+                .push_sub_region_constraint(origin, region, unique_bound);\n             return;\n         }\n "}, {"sha": "c82603bf5605788cbd6db75fb9708df35087c6cc", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -749,7 +749,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n                 a // LUB(a,a) = a\n             }\n \n-            _ => self.combine_vars(tcx, Lub, a, b, origin.clone()),\n+            _ => self.combine_vars(tcx, Lub, a, b, origin),\n         }\n     }\n \n@@ -771,7 +771,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n                 a // GLB(a,a) = a\n             }\n \n-            _ => self.combine_vars(tcx, Glb, a, b, origin.clone()),\n+            _ => self.combine_vars(tcx, Glb, a, b, origin),\n         }\n     }\n "}, {"sha": "b6df8ebe909f500f0e2e55b29296b12366a15512", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -239,7 +239,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n             let msg = format!(\"type mismatch resolving `{}`\", predicate);\n             let error_id = (DiagnosticMessageId::ErrorId(271),\n-                            Some(obligation.cause.span), msg.clone());\n+                            Some(obligation.cause.span), msg);\n             let fresh = self.tcx.sess.one_time_diagnostics.borrow_mut().insert(error_id);\n             if fresh {\n                 let mut diag = struct_span_err!(\n@@ -379,7 +379,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n         if let Some(t) = self.get_parent_trait_ref(&obligation.cause.code) {\n-            flags.push((\"parent_trait\".to_owned(), Some(t.to_string())));\n+            flags.push((\"parent_trait\".to_owned(), Some(t)));\n         }\n \n         if let Some(k) = obligation.cause.span.compiler_desugaring_kind() {"}, {"sha": "4eda47d31ebb54cd11f5ecec427378ef3c7c0b56", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -594,7 +594,7 @@ fn opt_normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n \n             // But for now, let's classify this as an overflow:\n             let recursion_limit = *selcx.tcx().sess.recursion_limit.get();\n-            let obligation = Obligation::with_depth(cause.clone(),\n+            let obligation = Obligation::with_depth(cause,\n                                                     recursion_limit,\n                                                     param_env,\n                                                     projection_ty);"}, {"sha": "1686e3e0e0c09aeac74d2d5c2c91571fc4ddb9b2", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -1200,7 +1200,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             cstore,\n             global_arenas: &arenas.global,\n             global_interners: interners,\n-            dep_graph: dep_graph.clone(),\n+            dep_graph,\n             types: common_types,\n             trait_map,\n             export_map: resolutions.export_map.into_iter().map(|(k, v)| {"}, {"sha": "bf8d02313035cb7fb266b58291b5825d4b66c7d9", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -695,7 +695,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 let mut err = self.cannot_act_on_moved_value(use_span,\n                                                              verb,\n                                                              msg,\n-                                                             Some(nl.to_string()),\n+                                                             Some(nl),\n                                                              Origin::Ast);\n                 let need_note = match lp.ty.sty {\n                     ty::Closure(id, _) => {"}, {"sha": "8aa2e4641d4f9af5a9216f5082d87696b977dabf", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -347,7 +347,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n             lp = base_lp.clone();\n         }\n \n-        self.add_move_helper(tcx, orig_lp.clone(), id, kind);\n+        self.add_move_helper(tcx, orig_lp, id, kind);\n     }\n \n     fn add_move_helper(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -359,7 +359,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n                id,\n                kind);\n \n-        let path_index = self.move_path(tcx, lp.clone());\n+        let path_index = self.move_path(tcx, lp);\n         let move_index = MoveIndex(self.moves.borrow().len());\n \n         let next_move = self.path_first_move(path_index);\n@@ -402,7 +402,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n             }\n         }\n \n-        self.add_assignment_helper(tcx, lp.clone(), assign_id, span);\n+        self.add_assignment_helper(tcx, lp, assign_id, span);\n     }\n \n     fn add_assignment_helper(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "a9119d49e8b207d49501d789663db2812354c048", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -784,7 +784,7 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n        !tcx.sess.opts.output_types.should_codegen() {\n         let ongoing_codegen = write::start_async_codegen(\n             tcx,\n-            time_graph.clone(),\n+            time_graph,\n             metadata,\n             rx,\n             1);"}, {"sha": "66e98793f420d737954619b61010e4c45648473b", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -138,7 +138,7 @@ pub fn filename_for_input(sess: &Session,\n             let suffix = &sess.target.target.options.exe_suffix;\n             let out_filename = outputs.path(OutputType::Exe);\n             if suffix.is_empty() {\n-                out_filename.to_path_buf()\n+                out_filename\n             } else {\n                 out_filename.with_extension(&suffix[1..])\n             }"}, {"sha": "b2b92a6f857845ef8d626147cc6fc9cf0f4b8df6", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -1615,7 +1615,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 ProjectionElem::Index(..)\n                 | ProjectionElem::ConstantIndex { .. }\n                 | ProjectionElem::Subslice { .. } => {\n-                    self.describe_field(&proj.base, field).to_string()\n+                    self.describe_field(&proj.base, field)\n                 }\n             },\n         }"}, {"sha": "2f271e072c6e3254d324a674427518e0264b195b", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -265,7 +265,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     block,\n                     Statement {\n                         source_info,\n-                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, place.clone()),\n+                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, place),\n                     },\n                 );\n \n@@ -314,7 +314,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     Statement {\n                         source_info: ty_source_info,\n                         kind: StatementKind::AscribeUserType(\n-                            place.clone(),\n+                            place,\n                             ty::Variance::Invariant,\n                             box ascription_user_ty,\n                         ),"}, {"sha": "9e6f32909bdea00cb97abd1cae78e963e2d36726", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -324,7 +324,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let ref_ty = self.hir.tcx().mk_ref(region, tam);\n \n                     // let lhs_ref_place = &lhs;\n-                    let ref_rvalue = Rvalue::Ref(region, BorrowKind::Shared, place.clone());\n+                    let ref_rvalue = Rvalue::Ref(region, BorrowKind::Shared, place);\n                     let lhs_ref_place = self.temp(ref_ty, test.span);\n                     self.cfg.push_assign(block, source_info, &lhs_ref_place, ref_rvalue);\n                     let val = Operand::Move(lhs_ref_place);"}, {"sha": "6ea4628de24e91ed35732c85e5311de98fb676d7", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -644,7 +644,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n         }).collect()\n     });\n \n-    let mut builder = Builder::new(hir.clone(),\n+    let mut builder = Builder::new(hir,\n         span,\n         arguments.len(),\n         safety,\n@@ -714,7 +714,7 @@ fn construct_const<'a, 'gcx, 'tcx>(\n     let ty = hir.tables().expr_ty_adjusted(ast_expr);\n     let owner_id = tcx.hir.body_owner(body_id);\n     let span = tcx.hir.span(owner_id);\n-    let mut builder = Builder::new(hir.clone(), span, 0, Safety::Safe, ty, ty_span,vec![]);\n+    let mut builder = Builder::new(hir, span, 0, Safety::Safe, ty, ty_span,vec![]);\n \n     let mut block = START_BLOCK;\n     let expr = builder.hir.mirror(ast_expr);"}, {"sha": "d8f627fcf4dd74ae3affaa27eb1578d33509fa3a", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -547,7 +547,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         // `dest[i] = Clone::clone(src[beg])`;\n         // Goto #3 if ok, #5 if unwinding happens.\n         let dest_field = dest.clone().index(beg);\n-        let src_field = src.clone().index(beg);\n+        let src_field = src.index(beg);\n         self.make_clone_call(dest_field, src_field, ty, BasicBlock::new(3),\n                              BasicBlock::new(5));\n "}, {"sha": "d9a1e4a0fd63948d475b879340efced2c0918222", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -753,11 +753,11 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                 self.place.clone()\n             )));\n             drop_block_stmts.push(self.assign(&cur, Rvalue::Cast(\n-                CastKind::Misc, Operand::Move(tmp.clone()), iter_ty\n+                CastKind::Misc, Operand::Move(tmp), iter_ty\n             )));\n             drop_block_stmts.push(self.assign(&length_or_end,\n                 Rvalue::BinaryOp(BinOp::Offset,\n-                     Operand::Copy(cur.clone()), Operand::Move(length.clone())\n+                     Operand::Copy(cur), Operand::Move(length)\n             )));\n         } else {\n             // index = 0 (length already pushed)"}, {"sha": "a43a3c6ac5a606213e36959711bf89fa9c5f14ec", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -218,7 +218,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 };\n                 this.add_import_directive(\n                     base.into_iter().collect(),\n-                    subclass.clone(),\n+                    subclass,\n                     source.ident.span,\n                     id,\n                     root_use_tree.span,"}, {"sha": "c0b718e4863fc05afaf06e649433194f7dddea5f", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -105,7 +105,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             tcx: save_ctxt.tcx,\n             save_ctxt,\n             dumper,\n-            span: span_utils.clone(),\n+            span: span_utils,\n             cur_scope: CRATE_NODE_ID,\n             // mac_defs: FxHashSet::default(),\n             macro_calls: FxHashSet::default(),"}, {"sha": "d43d45f64a55c8fc57b46218d79cfa9abbe2a275", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -1132,7 +1132,7 @@ impl ToJson for Target {\n         macro_rules! target_val {\n             ($attr:ident) => ( {\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                d.insert(name.to_string(), self.$attr.to_json());\n+                d.insert(name, self.$attr.to_json());\n             } );\n             ($attr:ident, $key_name:expr) => ( {\n                 let name = $key_name;\n@@ -1144,7 +1144,7 @@ impl ToJson for Target {\n             ($attr:ident) => ( {\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n                 if default.$attr != self.options.$attr {\n-                    d.insert(name.to_string(), self.options.$attr.to_json());\n+                    d.insert(name, self.options.$attr.to_json());\n                 }\n             } );\n             ($attr:ident, $key_name:expr) => ( {\n@@ -1160,7 +1160,7 @@ impl ToJson for Target {\n                         .iter()\n                         .map(|(k, v)| (k.desc().to_owned(), v.clone()))\n                         .collect::<BTreeMap<_, _>>();\n-                    d.insert(name.to_string(), obj.to_json());\n+                    d.insert(name, obj.to_json());\n                 }\n             } );\n             (env - $attr:ident) => ( {\n@@ -1170,7 +1170,7 @@ impl ToJson for Target {\n                         .iter()\n                         .map(|&(ref k, ref v)| k.clone() + \"=\" + &v)\n                         .collect::<Vec<_>>();\n-                    d.insert(name.to_string(), obj.to_json());\n+                    d.insert(name, obj.to_json());\n                 }\n             } );\n "}, {"sha": "73489309d074247bcb5ca595f5a474997e332269", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -61,7 +61,7 @@ impl<'a, 'gcx, 'tcx> Iterator for Autoderef<'a, 'gcx, 'tcx> {\n             let suggested_limit = *tcx.sess.recursion_limit.get() * 2;\n             let msg = format!(\"reached the recursion limit while auto-dereferencing {:?}\",\n                               self.cur_ty);\n-            let error_id = (DiagnosticMessageId::ErrorId(55), Some(self.span), msg.clone());\n+            let error_id = (DiagnosticMessageId::ErrorId(55), Some(self.span), msg);\n             let fresh = tcx.sess.one_time_diagnostics.borrow_mut().insert(error_id);\n             if fresh {\n                 struct_span_err!(tcx.sess,"}, {"sha": "54c6c8f7b9322aba35bf87570aa138a7eb387fb0", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -325,7 +325,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         diag.span_suggestion_with_applicability(\n                             impl_err_span,\n                             \"consider change the type to match the mutability in trait\",\n-                            trait_err_str.to_string(),\n+                            trait_err_str,\n                             Applicability::MachineApplicable,\n                         );\n                     }"}, {"sha": "c506f23078f25fe32a3735103a85a84c4411f577", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -1157,7 +1157,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n                     // Convert the bounds into obligations.\n                     let impl_obligations = traits::predicates_for_generics(\n-                        cause.clone(), self.param_env, &impl_bounds);\n+                        cause, self.param_env, &impl_bounds);\n \n                     debug!(\"impl_obligations={:?}\", impl_obligations);\n                     impl_obligations.into_iter()\n@@ -1175,7 +1175,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 TraitCandidate(trait_ref) => {\n                     let predicate = trait_ref.to_predicate();\n                     let obligation =\n-                        traits::Obligation::new(cause.clone(), self.param_env, predicate);\n+                        traits::Obligation::new(cause, self.param_env, predicate);\n                     if !self.predicate_may_hold(&obligation) {\n                         if self.probe(|_| self.select_trait_candidate(trait_ref).is_err()) {\n                             // This candidate's primary obligation doesn't even"}, {"sha": "85c69d50a12493fdd1a2a485f63588ca0fcad70f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -4752,25 +4752,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         } else if !self.check_for_cast(err, expr, found, expected) {\n             let methods = self.get_conversion_methods(expr.span, expected, found);\n             if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {\n-                let suggestions = iter::repeat(expr_text).zip(methods.iter())\n+                let suggestions = iter::repeat(&expr_text).zip(methods.iter())\n                     .filter_map(|(receiver, method)| {\n                         let method_call = format!(\".{}()\", method.ident);\n                         if receiver.ends_with(&method_call) {\n                             None  // do not suggest code that is already there (#53348)\n                         } else {\n-                            /*\n-                            methods defined in `method_call_list` will overwrite\n-                            `.clone()` in copy of `receiver`\n-                            */\n                             let method_call_list = [\".to_vec()\", \".to_string()\"];\n                             if receiver.ends_with(\".clone()\")\n-                                    && method_call_list.contains(&method_call.as_str()){\n-                                // created copy of `receiver` because we don't want other\n-                                // suggestion to get affected\n-                                let mut new_receiver = receiver.clone();\n-                                let max_len = new_receiver.rfind(\".\").unwrap();\n-                                new_receiver.truncate(max_len);\n-                                Some(format!(\"{}{}\", new_receiver, method_call))\n+                                    && method_call_list.contains(&method_call.as_str()) {\n+                                let max_len = receiver.rfind(\".\").unwrap();\n+                                Some(format!(\"{}{}\", &receiver[..max_len], method_call))\n                             }\n                             else {\n                                 Some(format!(\"{}{}\", receiver, method_call))"}, {"sha": "fde8648c0c40ad7dbf0ba41ba60921709ab206fe", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -84,7 +84,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n             .into_iter()\n             .chain(self.get_auto_trait_impl_for(\n                 def_id,\n-                name.clone(),\n+                name,\n                 generics.clone(),\n                 def_ctor,\n                 tcx.require_lang_item(lang_items::SyncTraitLangItem),"}, {"sha": "8246c7bab27af8b461565885927a54f2571b86e6", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -67,7 +67,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> BlanketImplFinder <'a, 'tcx, 'rcx, 'cstore> {\n         }\n         let ty = self.cx.tcx.type_of(def_id);\n         let generics = self.cx.tcx.generics_of(def_id);\n-        let real_name = name.clone().map(|name| Ident::from_str(&name));\n+        let real_name = name.map(|name| Ident::from_str(&name));\n         let param_env = self.cx.tcx.param_env(def_id);\n         for &trait_def_id in self.cx.all_traits.iter() {\n             if !self.cx.renderinfo.borrow().access_levels.is_doc_reachable(trait_def_id) ||\n@@ -112,7 +112,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> BlanketImplFinder <'a, 'tcx, 'rcx, 'cstore> {\n                         );\n                         let may_apply = match infcx.evaluate_obligation(\n                             &traits::Obligation::new(\n-                                cause.clone(),\n+                                cause,\n                                 param_env,\n                                 trait_ref.to_predicate(),\n                             ),"}, {"sha": "88240e844edc23887fb5f66d4b4416854b8937f4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -3611,7 +3611,7 @@ impl ToSource for syntax_pos::Span {\n     fn to_src(&self, cx: &DocContext) -> String {\n         debug!(\"converting span {:?} to snippet\", self.clean(cx));\n         let sn = match cx.sess().source_map().span_to_snippet(*self) {\n-            Ok(x) => x.to_string(),\n+            Ok(x) => x,\n             Err(_) => String::new()\n         };\n         debug!(\"got snippet {}\", sn);"}, {"sha": "8b35ede4a02c07ec86552e138f7b26ba31c7e802", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -521,7 +521,7 @@ pub fn run(mut krate: clean::Crate,\n             external_html: external_html.clone(),\n             krate: krate.name.clone(),\n         },\n-        css_file_extension: css_file_extension.clone(),\n+        css_file_extension,\n         created_dirs: Default::default(),\n         sort_modules_alphabetically,\n         themes,\n@@ -1343,7 +1343,7 @@ impl DocFolder for Cache {\n                         self.search_index.push(IndexItem {\n                             ty: item.type_(),\n                             name: s.to_string(),\n-                            path: path.join(\"::\").to_string(),\n+                            path: path.join(\"::\"),\n                             desc: plain_summary_line(item.doc_value()),\n                             parent,\n                             parent_idx: None,\n@@ -2284,7 +2284,7 @@ fn document_short(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item, link\n             format!(\"{} [Read more]({})\",\n                     &plain_summary_line(Some(s)), naive_assoc_href(item, link))\n         } else {\n-            plain_summary_line(Some(s)).to_string()\n+            plain_summary_line(Some(s))\n         };\n         render_markdown(w, cx, &markdown, item.links(), prefix)?;\n     } else if !prefix.is_empty() {\n@@ -2436,7 +2436,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     // (which is the position in the vector).\n     indices.dedup_by_key(|i| (items[*i].def_id,\n                               if items[*i].name.as_ref().is_some() {\n-                                  Some(full_path(cx, &items[*i]).clone())\n+                                  Some(full_path(cx, &items[*i]))\n                               } else {\n                                   None\n                               },"}, {"sha": "45a0494849bfa4fcb3529054343d525692a88d84", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -460,7 +460,7 @@ fn main_args(args: &[String]) -> isize {\n     let externs = match parse_externs(&matches) {\n         Ok(ex) => ex,\n         Err(err) => {\n-            diag.struct_err(&err.to_string()).emit();\n+            diag.struct_err(&err).emit();\n             return 1;\n         }\n     };"}, {"sha": "2e6e76b5a4039ea4a0b1fe2c3aacf4cb243c2364", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -208,7 +208,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     // needs to be the result of SourceMap::span_to_unmapped_path\n     let input = config::Input::Str {\n         name: filename.to_owned(),\n-        input: test.to_owned(),\n+        input: test,\n     };\n     let outputs = OutputTypes::new(&[(OutputType::Exe, None)]);\n \n@@ -350,7 +350,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     let newpath = {\n         let path = env::var_os(var).unwrap_or(OsString::new());\n         let mut path = env::split_paths(&path).collect::<Vec<_>>();\n-        path.insert(0, libdir.clone());\n+        path.insert(0, libdir);\n         env::join_paths(path).unwrap()\n     };\n     cmd.env(var, &newpath);"}, {"sha": "e9149054a55e86b53dad80718a0fd82b0931b6cc", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -142,8 +142,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                 // Replace all the tokens for the corresponding positions in the macro, to maintain\n                 // proper positions in error reporting, while maintaining the macro_backtrace.\n                 if rhs_spans.len() == tts.len() {\n-                    tts = tts.map_enumerated(|i, tt| {\n-                        let mut tt = tt.clone();\n+                    tts = tts.map_enumerated(|i, mut tt| {\n                         let mut sp = rhs_spans[i];\n                         sp = sp.with_ctxt(tt.span().ctxt());\n                         tt.set_span(sp);"}, {"sha": "3d897d17e0b5c2781458a7388b8ef0feb0aea0b8", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -219,9 +219,9 @@ impl Add for LockstepIterSize {\n             LockstepIterSize::Unconstrained => other,\n             LockstepIterSize::Contradiction(_) => self,\n             LockstepIterSize::Constraint(l_len, ref l_id) => match other {\n-                LockstepIterSize::Unconstrained => self.clone(),\n+                LockstepIterSize::Unconstrained => self,\n                 LockstepIterSize::Contradiction(_) => other,\n-                LockstepIterSize::Constraint(r_len, _) if l_len == r_len => self.clone(),\n+                LockstepIterSize::Constraint(r_len, _) if l_len == r_len => self,\n                 LockstepIterSize::Constraint(r_len, r_id) => {\n                     let msg = format!(\"inconsistent lockstep iteration: \\\n                                        '{}' has {} items, but '{}' has {}\","}, {"sha": "8ff4b0d025c8d340c5e82bc05d2e8ad7b03f61a6", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -346,7 +346,7 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n \n     test_runner.span = sp;\n \n-    let test_main_path_expr = ecx.expr_path(test_runner.clone());\n+    let test_main_path_expr = ecx.expr_path(test_runner);\n     let call_test_main = ecx.expr_call(sp, test_main_path_expr,\n                                        vec![mk_tests_slice(cx)]);\n     let call_test_main = ecx.stmt_expr(call_test_main);"}, {"sha": "32a58de3529fdeab3e3fb187c5684eaf3421bd5f", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -178,7 +178,7 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<\n \n                 cx.expr_match(span, new, vec![eq_arm, neq_arm])\n             },\n-            equals_expr.clone(),\n+            equals_expr,\n             Box::new(|cx, span, (self_args, tag_tuple), _non_self_args| {\n         if self_args.len() != 2 {\n             cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")"}, {"sha": "55b3928d68eee310237b1e55eb84513910214d7e", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b49666fd36c78ab401c4066655c6eb2b51142/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=626b49666fd36c78ab401c4066655c6eb2b51142", "patch": "@@ -75,7 +75,7 @@ impl MultiItemModifier for ProcMacroDerive {\n         // Mark attributes as known, and used.\n         MarkAttrs(&self.attrs).visit_item(&item);\n \n-        let input = __internal::new_token_stream(ecx.resolver.eliminate_crate_var(item.clone()));\n+        let input = __internal::new_token_stream(ecx.resolver.eliminate_crate_var(item));\n         let res = __internal::set_sess(ecx, || {\n             let inner = self.inner;\n             panic::catch_unwind(panic::AssertUnwindSafe(|| inner(input)))"}]}