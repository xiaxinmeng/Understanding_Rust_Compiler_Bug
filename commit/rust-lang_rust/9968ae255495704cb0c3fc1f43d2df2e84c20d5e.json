{"sha": "9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NjhhZTI1NTQ5NTcwNGNiMGMzZmMxZjQzZDJkZjJlODRjMjBkNWU=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-08-23T10:41:32Z"}, "committer": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-08-24T07:53:01Z"}, "message": "Adjust the error messages to match the pattern \"expected foo, found bar\"\n\nCloses #8492", "tree": {"sha": "9812a6ca9aa9325047cba5294fdc1dc5b5ff1e97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9812a6ca9aa9325047cba5294fdc1dc5b5ff1e97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "html_url": "https://github.com/rust-lang/rust/commit/9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e5aea65cd2594f19b9043d8df0e6461504cda9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e5aea65cd2594f19b9043d8df0e6461504cda9b", "html_url": "https://github.com/rust-lang/rust/commit/2e5aea65cd2594f19b9043d8df0e6461504cda9b"}], "stats": {"total": 532, "additions": 266, "deletions": 266}, "files": [{"sha": "cef258fac20f0d98ffbcf3117c096dc3d56cb16c", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -200,7 +200,7 @@ impl<'a> Parser<'a> {\n                 self.cur.next();\n             }\n             Some((_, other)) => {\n-                self.err(format!(\"expected `{}` but found `{}`\",\n+                self.err(format!(\"expected `{}`, found `{}`\",\n                                  c,\n                                  other).as_slice());\n             }"}, {"sha": "b26a12d5cfc36b7c86a8600b5d16d36972e03254", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -575,12 +575,12 @@ pub fn parse_def_id(buf: &[u8]) -> ast::DefId {\n \n     let crate_num = match uint::parse_bytes(crate_part, 10u) {\n        Some(cn) => cn as ast::CrateNum,\n-       None => fail!(\"internal error: parse_def_id: crate number expected, but found {:?}\",\n+       None => fail!(\"internal error: parse_def_id: crate number expected, found {:?}\",\n                      crate_part)\n     };\n     let def_num = match uint::parse_bytes(def_part, 10u) {\n        Some(dn) => dn as ast::NodeId,\n-       None => fail!(\"internal error: parse_def_id: id expected, but found {:?}\",\n+       None => fail!(\"internal error: parse_def_id: id expected, found {:?}\",\n                      def_part)\n     };\n     ast::DefId { krate: crate_num, node: def_num }"}, {"sha": "dc4ecb358308d5e3a0cb91f2159b1ade2ee7c4ab", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -122,7 +122,7 @@ impl<'a> Visitor<()> for EffectCheckVisitor<'a> {\n                 // we need to create a new context, when we're\n                 // - outside `unsafe` and found a `unsafe` block\n                 //   (normal case)\n-                // - inside `unsafe` but found an `unsafe` block\n+                // - inside `unsafe`, found an `unsafe` block\n                 //   created internally to the compiler\n                 //\n                 // The second case is necessary to ensure that the"}, {"sha": "dc463ffe5df680d9fd68f15f5611f43bc165345d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -3603,17 +3603,17 @@ pub fn type_err_to_str(cx: &ctxt, err: &type_err) -> String {\n     match *err {\n         terr_mismatch => \"types differ\".to_string(),\n         terr_fn_style_mismatch(values) => {\n-            format!(\"expected {} fn but found {} fn\",\n+            format!(\"expected {} fn, found {} fn\",\n                     values.expected.to_string(),\n                     values.found.to_string())\n         }\n         terr_abi_mismatch(values) => {\n-            format!(\"expected {} fn but found {} fn\",\n+            format!(\"expected {} fn, found {} fn\",\n                     values.expected.to_string(),\n                     values.found.to_string())\n         }\n         terr_onceness_mismatch(values) => {\n-            format!(\"expected {} fn but found {} fn\",\n+            format!(\"expected {} fn, found {} fn\",\n                     values.expected.to_string(),\n                     values.found.to_string())\n         }\n@@ -3630,28 +3630,28 @@ pub fn type_err_to_str(cx: &ctxt, err: &type_err) -> String {\n         terr_ptr_mutability => \"pointers differ in mutability\".to_string(),\n         terr_ref_mutability => \"references differ in mutability\".to_string(),\n         terr_ty_param_size(values) => {\n-            format!(\"expected a type with {} type params \\\n-                     but found one with {} type params\",\n+            format!(\"expected a type with {} type params, \\\n+                     found one with {} type params\",\n                     values.expected,\n                     values.found)\n         }\n         terr_tuple_size(values) => {\n-            format!(\"expected a tuple with {} elements \\\n-                     but found one with {} elements\",\n+            format!(\"expected a tuple with {} elements, \\\n+                     found one with {} elements\",\n                     values.expected,\n                     values.found)\n         }\n         terr_record_size(values) => {\n-            format!(\"expected a record with {} fields \\\n-                     but found one with {} fields\",\n+            format!(\"expected a record with {} fields, \\\n+                     found one with {} fields\",\n                     values.expected,\n                     values.found)\n         }\n         terr_record_mutability => {\n             \"record elements differ in mutability\".to_string()\n         }\n         terr_record_fields(values) => {\n-            format!(\"expected a record with field `{}` but found one \\\n+            format!(\"expected a record with field `{}`, found one \\\n                      with field `{}`\",\n                     token::get_ident(values.expected),\n                     token::get_ident(values.found))\n@@ -3670,57 +3670,57 @@ pub fn type_err_to_str(cx: &ctxt, err: &type_err) -> String {\n         }\n         terr_regions_insufficiently_polymorphic(br, _) => {\n             format!(\"expected bound lifetime parameter {}, \\\n-                     but found concrete lifetime\",\n+                     found concrete lifetime\",\n                     bound_region_ptr_to_string(cx, br))\n         }\n         terr_regions_overly_polymorphic(br, _) => {\n             format!(\"expected concrete lifetime, \\\n-                     but found bound lifetime parameter {}\",\n+                     found bound lifetime parameter {}\",\n                     bound_region_ptr_to_string(cx, br))\n         }\n         terr_trait_stores_differ(_, ref values) => {\n-            format!(\"trait storage differs: expected `{}` but found `{}`\",\n+            format!(\"trait storage differs: expected `{}`, found `{}`\",\n                     trait_store_to_string(cx, (*values).expected),\n                     trait_store_to_string(cx, (*values).found))\n         }\n         terr_sorts(values) => {\n-            format!(\"expected {} but found {}\",\n+            format!(\"expected {}, found {}\",\n                     ty_sort_string(cx, values.expected),\n                     ty_sort_string(cx, values.found))\n         }\n         terr_traits(values) => {\n-            format!(\"expected trait `{}` but found trait `{}`\",\n+            format!(\"expected trait `{}`, found trait `{}`\",\n                     item_path_str(cx, values.expected),\n                     item_path_str(cx, values.found))\n         }\n         terr_builtin_bounds(values) => {\n             if values.expected.is_empty() {\n-                format!(\"expected no bounds but found `{}`\",\n+                format!(\"expected no bounds, found `{}`\",\n                         values.found.user_string(cx))\n             } else if values.found.is_empty() {\n-                format!(\"expected bounds `{}` but found no bounds\",\n+                format!(\"expected bounds `{}`, found no bounds\",\n                         values.expected.user_string(cx))\n             } else {\n-                format!(\"expected bounds `{}` but found bounds `{}`\",\n+                format!(\"expected bounds `{}`, found bounds `{}`\",\n                         values.expected.user_string(cx),\n                         values.found.user_string(cx))\n             }\n         }\n         terr_integer_as_char => {\n-            \"expected an integral type but found `char`\".to_string()\n+            \"expected an integral type, found `char`\".to_string()\n         }\n         terr_int_mismatch(ref values) => {\n-            format!(\"expected `{}` but found `{}`\",\n+            format!(\"expected `{}`, found `{}`\",\n                     values.expected.to_string(),\n                     values.found.to_string())\n         }\n         terr_float_mismatch(ref values) => {\n-            format!(\"expected `{}` but found `{}`\",\n+            format!(\"expected `{}`, found `{}`\",\n                     values.expected.to_string(),\n                     values.found.to_string())\n         }\n         terr_variadic_mismatch(ref values) => {\n-            format!(\"expected {} fn but found {} function\",\n+            format!(\"expected {} fn, found {} function\",\n                     if values.expected { \"variadic\" } else { \"non-variadic\" },\n                     if values.found { \"variadic\" } else { \"non-variadic\" })\n         }\n@@ -4548,7 +4548,7 @@ pub fn eval_repeat_count<T: ExprTyProvider>(tcx: &T, count_expr: &ast::Expr) ->\n         const_eval::const_int(count) => if count < 0 {\n             tcx.ty_ctxt().sess.span_err(count_expr.span,\n                                         \"expected positive integer for \\\n-                                         repeat count but found negative integer\");\n+                                         repeat count, found negative integer\");\n             return 0;\n         } else {\n             return count as uint\n@@ -4557,38 +4557,38 @@ pub fn eval_repeat_count<T: ExprTyProvider>(tcx: &T, count_expr: &ast::Expr) ->\n         const_eval::const_float(count) => {\n             tcx.ty_ctxt().sess.span_err(count_expr.span,\n                                         \"expected positive integer for \\\n-                                         repeat count but found float\");\n+                                         repeat count, found float\");\n             return count as uint;\n         }\n         const_eval::const_str(_) => {\n             tcx.ty_ctxt().sess.span_err(count_expr.span,\n                                         \"expected positive integer for \\\n-                                         repeat count but found string\");\n+                                         repeat count, found string\");\n             return 0;\n         }\n         const_eval::const_bool(_) => {\n             tcx.ty_ctxt().sess.span_err(count_expr.span,\n                                         \"expected positive integer for \\\n-                                         repeat count but found boolean\");\n+                                         repeat count, found boolean\");\n             return 0;\n         }\n         const_eval::const_binary(_) => {\n             tcx.ty_ctxt().sess.span_err(count_expr.span,\n                                         \"expected positive integer for \\\n-                                         repeat count but found binary array\");\n+                                         repeat count, found binary array\");\n             return 0;\n         }\n         const_eval::const_nil => {\n             tcx.ty_ctxt().sess.span_err(count_expr.span,\n                                         \"expected positive integer for \\\n-                                         repeat count but found ()\");\n+                                         repeat count, found ()\");\n             return 0;\n         }\n       },\n       Err(..) => {\n         tcx.ty_ctxt().sess.span_err(count_expr.span,\n-                                    \"expected constant integer for repeat count \\\n-                                     but found variable\");\n+                                    \"expected constant integer for repeat count, \\\n+                                     found variable\");\n         return 0;\n       }\n     }"}, {"sha": "129a039a267ba67043b7b7bbf565bdc5a0c73138", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -191,7 +191,7 @@ fn ast_path_substs<AC:AstConv,RS:RegionScope>(\n \n         if supplied_num_region_params != 0 || anon_regions.is_err() {\n             span_err!(tcx.sess, path.span, E0107,\n-                \"wrong number of lifetime parameters: expected {} but found {}\",\n+                \"wrong number of lifetime parameters: expected {}, found {}\",\n                 expected_num_region_params, supplied_num_region_params);\n         }\n \n@@ -216,7 +216,7 @@ fn ast_path_substs<AC:AstConv,RS:RegionScope>(\n             \"expected\"\n         };\n         this.tcx().sess.span_fatal(path.span,\n-            format!(\"wrong number of type arguments: {} {} but found {}\",\n+            format!(\"wrong number of type arguments: {} {}, found {}\",\n                     expected,\n                     required_ty_param_count,\n                     supplied_ty_param_count).as_slice());\n@@ -227,7 +227,7 @@ fn ast_path_substs<AC:AstConv,RS:RegionScope>(\n             \"expected\"\n         };\n         this.tcx().sess.span_fatal(path.span,\n-            format!(\"wrong number of type arguments: {} {} but found {}\",\n+            format!(\"wrong number of type arguments: {} {}, found {}\",\n                     expected,\n                     formal_ty_param_count,\n                     supplied_ty_param_count).as_slice());"}, {"sha": "18f4607a83cac11db2cff6972abe2a09ebd7ae16", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -169,7 +169,7 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: &ast::Pat, path: &ast::Path,\n                     fcx.infcx().type_error_message_str_with_expected(pat.span,\n                                                        |expected, actual| {\n                        expected.map_or(\"\".to_string(), |e| {\n-                        format!(\"mismatched types: expected `{}` but found {}\",\n+                        format!(\"mismatched types: expected `{}`, found {}\",\n                                 e, actual)\n                         })},\n                         Some(expected),\n@@ -223,7 +223,7 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: &ast::Pat, path: &ast::Path,\n                                                |expected, actual| {\n                                                expected.map_or(\"\".to_string(),\n                                                               |e| {\n-                        format!(\"mismatched types: expected `{}` but found {}\",\n+                        format!(\"mismatched types: expected `{}`, found {}\",\n                                 e, actual)\n                     })\n                 },\n@@ -395,7 +395,7 @@ pub fn check_struct_like_enum_variant_pat(pcx: &pat_ctxt,\n         Some(&def::DefTy(..)) => {\n             let name = pprust::path_to_string(path);\n             span_err!(tcx.sess, span, E0028,\n-                \"mismatched types: expected `{}` but found `{}`\",\n+                \"mismatched types: expected `{}`, found `{}`\",\n                 fcx.infcx().ty_to_string(expected), name);\n         }\n         _ => {\n@@ -548,7 +548,7 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                             expected.map_or(\"\".to_string(),\n                                             |e| {\n                                 format!(\"mismatched types: expected \\\n-                                        `{}` but found {}\", e, actual)\n+                                        `{}`, found {}\", e, actual)\n                             })},\n                             Some(expected),\n                             \"a structure pattern\".to_string(),\n@@ -607,8 +607,8 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                                                                  |expected,\n                                                                   actual| {\n                         expected.map_or(\"\".to_string(), |e| {\n-                            format!(\"mismatched types: expected `{}` \\\n-                                     but found {}\", e, actual)\n+                            format!(\"mismatched types: expected `{}`, \\\n+                                     found {}\", e, actual)\n                         }\n                     )},\n                     Some(expected),\n@@ -645,7 +645,7 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                 |expected, actual| {\n                     expected.map_or(\"\".to_string(),\n                                     |e| {\n-                        format!(\"mismatched types: expected `{}` but found {}\",\n+                        format!(\"mismatched types: expected `{}`, found {}\",\n                                 e, actual)\n                     })\n                 },\n@@ -763,7 +763,7 @@ fn check_pointer_pat(pcx: &pat_ctxt,\n                 span,\n                 |expected, actual| {\n                     expected.map_or(\"\".to_string(), |e| {\n-                        format!(\"mismatched types: expected `{}` but found {}\",\n+                        format!(\"mismatched types: expected `{}`, found {}\",\n                                 e, actual)\n                     })\n                 },"}, {"sha": "02115590c7e103f504de48e573916f97f5a1d08e", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -2313,7 +2313,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             ty::ty_closure(box ty::ClosureTy {sig: ref sig, ..}) => sig,\n             _ => {\n                 fcx.type_error_message(call_expr.span, |actual| {\n-                    format!(\"expected function but found `{}`\", actual)\n+                    format!(\"expected function, found `{}`\", actual)\n                 }, fn_ty, None);\n                 &error_fn_sig\n             }\n@@ -3811,7 +3811,7 @@ impl Repr for Expectation {\n pub fn require_uint(fcx: &FnCtxt, sp: Span, t: ty::t) {\n     if !type_is_uint(fcx, sp, t) {\n         fcx.type_error_message(sp, |actual| {\n-            format!(\"mismatched types: expected `uint` type but found `{}`\",\n+            format!(\"mismatched types: expected `uint` type, found `{}`\",\n                     actual)\n         }, t, None);\n     }\n@@ -3820,7 +3820,7 @@ pub fn require_uint(fcx: &FnCtxt, sp: Span, t: ty::t) {\n pub fn require_integral(fcx: &FnCtxt, sp: Span, t: ty::t) {\n     if !type_is_integral(fcx, sp, t) {\n         fcx.type_error_message(sp, |actual| {\n-            format!(\"mismatched types: expected integral type but found `{}`\",\n+            format!(\"mismatched types: expected integral type, found `{}`\",\n                     actual)\n         }, t, None);\n     }\n@@ -4336,28 +4336,28 @@ pub fn polytype_for_def(fcx: &FnCtxt,\n       def::DefTy(_) |\n       def::DefPrimTy(_) |\n       def::DefTyParam(..)=> {\n-        fcx.ccx.tcx.sess.span_bug(sp, \"expected value but found type\");\n+        fcx.ccx.tcx.sess.span_bug(sp, \"expected value, found type\");\n       }\n       def::DefMod(..) | def::DefForeignMod(..) => {\n-        fcx.ccx.tcx.sess.span_bug(sp, \"expected value but found module\");\n+        fcx.ccx.tcx.sess.span_bug(sp, \"expected value, found module\");\n       }\n       def::DefUse(..) => {\n-        fcx.ccx.tcx.sess.span_bug(sp, \"expected value but found use\");\n+        fcx.ccx.tcx.sess.span_bug(sp, \"expected value, found use\");\n       }\n       def::DefRegion(..) => {\n-        fcx.ccx.tcx.sess.span_bug(sp, \"expected value but found region\");\n+        fcx.ccx.tcx.sess.span_bug(sp, \"expected value, found region\");\n       }\n       def::DefTyParamBinder(..) => {\n-        fcx.ccx.tcx.sess.span_bug(sp, \"expected value but found type parameter\");\n+        fcx.ccx.tcx.sess.span_bug(sp, \"expected value, found type parameter\");\n       }\n       def::DefLabel(..) => {\n-        fcx.ccx.tcx.sess.span_bug(sp, \"expected value but found label\");\n+        fcx.ccx.tcx.sess.span_bug(sp, \"expected value, found label\");\n       }\n       def::DefSelfTy(..) => {\n-        fcx.ccx.tcx.sess.span_bug(sp, \"expected value but found self ty\");\n+        fcx.ccx.tcx.sess.span_bug(sp, \"expected value, found self ty\");\n       }\n       def::DefMethod(..) => {\n-        fcx.ccx.tcx.sess.span_bug(sp, \"expected value but found method\");\n+        fcx.ccx.tcx.sess.span_bug(sp, \"expected value, found method\");\n       }\n     }\n }\n@@ -4585,8 +4585,8 @@ pub fn instantiate_path(fcx: &FnCtxt,\n                 } else if i == type_count {\n                     span_err!(fcx.tcx().sess, typ.span, E0087,\n                         \"too many type parameters provided: \\\n-                         expected at most {} parameter(s) \\\n-                         but found {} parameter(s)\",\n+                         expected at most {} parameter(s), \\\n+                         found {} parameter(s)\",\n                          type_count, segment.types.len());\n                     substs.types.truncate(space, 0);\n                 }\n@@ -4603,7 +4603,7 @@ pub fn instantiate_path(fcx: &FnCtxt,\n                 } else if i == region_count {\n                     span_err!(fcx.tcx().sess, lifetime.span, E0088,\n                         \"too many lifetime parameters provided: \\\n-                         expected {} parameter(s) but found {} parameter(s)\",\n+                         expected {} parameter(s), found {} parameter(s)\",\n                         region_count,\n                         segment.lifetimes.len());\n                     substs.mut_regions().truncate(space, 0);\n@@ -4652,7 +4652,7 @@ pub fn instantiate_path(fcx: &FnCtxt,\n                 if desired.len() != required_len { \"at least \" } else { \"\" };\n             span_err!(fcx.tcx().sess, span, E0089,\n                 \"too few type parameters provided: expected {}{} parameter(s) \\\n-                 but found {} parameter(s)\",\n+                , found {} parameter(s)\",\n                 qualifier, required_len, provided_len);\n             substs.types.replace(space,\n                                  Vec::from_elem(desired.len(), ty::mk_err()));\n@@ -4705,8 +4705,8 @@ pub fn instantiate_path(fcx: &FnCtxt,\n         // Otherwise, too few were provided. Report an error and then\n         // use inference variables.\n         span_err!(fcx.tcx().sess, span, E0090,\n-            \"too few lifetime parameters provided: expected {} parameter(s) \\\n-             but found {} parameter(s)\",\n+            \"too few lifetime parameters provided: expected {} parameter(s), \\\n+             found {} parameter(s)\",\n             desired.len(), provided_len);\n \n         substs.mut_regions().replace("}, {"sha": "bc53ed58f6fd510b47c88617dbf2620affe375ba", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -206,7 +206,7 @@ fn relate_trait_refs(vcx: &VtableContext,\n                 !ty::trait_ref_contains_error(&r_exp_trait_ref)\n             {\n                 let tcx = vcx.tcx();\n-                span_err!(tcx.sess, span, E0095, \"expected {}, but found {} ({})\",\n+                span_err!(tcx.sess, span, E0095, \"expected {}, found {} ({})\",\n                           ppaux::trait_ref_to_string(tcx, &r_exp_trait_ref),\n                           ppaux::trait_ref_to_string(tcx, &r_act_trait_ref),\n                           ty::type_err_to_str(tcx, err));"}, {"sha": "5b9b37ab8441b8aeddae271022a190ce824010b9", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -377,7 +377,7 @@ impl<'a> ErrorReporting for InferCtxt<'a> {\n \n     fn values_str(&self, values: &ValuePairs) -> Option<String> {\n         /*!\n-         * Returns a string of the form \"expected `{}` but found `{}`\",\n+         * Returns a string of the form \"expected `{}`, found `{}`\",\n          * or None if this is a derived error.\n          */\n         match *values {\n@@ -405,7 +405,7 @@ impl<'a> ErrorReporting for InferCtxt<'a> {\n             return None;\n         }\n \n-        Some(format!(\"expected `{}` but found `{}`\",\n+        Some(format!(\"expected `{}`, found `{}`\",\n                      expected.user_string(self.tcx),\n                      found.user_string(self.tcx)))\n     }"}, {"sha": "5629a0855003f1b5da290d5c882a255d59bf628c", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -799,7 +799,7 @@ impl<'a> InferCtxt<'a> {\n             _ => {\n                 // if I leave out : String, it infers &str and complains\n                 |actual: String| {\n-                    format!(\"mismatched types: expected `{}` but found `{}`\",\n+                    format!(\"mismatched types: expected `{}`, found `{}`\",\n                             self.ty_to_string(resolved_expected),\n                             actual)\n                 }"}, {"sha": "180f2409b8a8cc9d887065ac39f5d679ad9c80ec", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -151,7 +151,7 @@ pub fn expand_asm(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                     clobs.push(clob);\n \n                     if OPTIONS.iter().any(|opt| s.equiv(opt)) {\n-                        cx.span_warn(p.last_span, \"expected a clobber, but found an option\");\n+                        cx.span_warn(p.last_span, \"expected a clobber, found an option\");\n                     }\n                 }\n "}, {"sha": "124e9e95942775116ffae5e0c790d3316fb034d1", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -128,7 +128,7 @@ fn parse_args(ecx: &mut ExtCtxt, sp: Span, allow_method: bool,\n                 }\n                 _ => {\n                     ecx.span_err(p.span,\n-                                 format!(\"expected ident for named argument, but found `{}`\",\n+                                 format!(\"expected ident for named argument, found `{}`\",\n                                          p.this_token_to_string()).as_slice());\n                     return (invocation, None);\n                 }"}, {"sha": "eca02d06ca9f846d50e97daf3b75cfae405cceac", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -92,7 +92,7 @@ impl<'a> ParserAttr for Parser<'a> {\n             }\n             _ => {\n                 let token_str = self.this_token_to_string();\n-                self.fatal(format!(\"expected `#` but found `{}`\",\n+                self.fatal(format!(\"expected `#`, found `{}`\",\n                                    token_str).as_slice());\n             }\n         };"}, {"sha": "e798ca0e38a8ade758884ac327d2a703988437d7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -413,7 +413,7 @@ impl<'a> Parser<'a> {\n         } else {\n             let token_str = Parser::token_to_string(t);\n             let this_token_str = self.this_token_to_string();\n-            self.fatal(format!(\"expected `{}` but found `{}`\",\n+            self.fatal(format!(\"expected `{}`, found `{}`\",\n                                token_str,\n                                this_token_str).as_slice())\n         }\n@@ -447,11 +447,11 @@ impl<'a> Parser<'a> {\n             let actual = self.this_token_to_string();\n             self.fatal(\n                 (if expected.len() != 1 {\n-                    (format!(\"expected one of `{}` but found `{}`\",\n+                    (format!(\"expected one of `{}`, found `{}`\",\n                              expect,\n                              actual))\n                 } else {\n-                    (format!(\"expected `{}` but found `{}`\",\n+                    (format!(\"expected `{}`, found `{}`\",\n                              expect,\n                              actual))\n                 }).as_slice()\n@@ -1314,7 +1314,7 @@ impl<'a> Parser<'a> {\n \n               _ => {\n                   let token_str = p.this_token_to_string();\n-                  p.fatal((format!(\"expected `;` or `{{` but found `{}`\",\n+                  p.fatal((format!(\"expected `;` or `{{`, found `{}`\",\n                                    token_str)).as_slice())\n               }\n             }\n@@ -3375,7 +3375,7 @@ impl<'a> Parser<'a> {\n                         \"\"\n                     };\n                     let tok_str = self.this_token_to_string();\n-                    self.fatal(format!(\"expected {}`(` or `{{`, but found `{}`\",\n+                    self.fatal(format!(\"expected {}`(` or `{{`, found `{}`\",\n                                        ident_str,\n                                        tok_str).as_slice())\n                 }\n@@ -3924,7 +3924,7 @@ impl<'a> Parser<'a> {\n             },\n             _ => {\n                 let token_str = self.this_token_to_string();\n-                self.fatal(format!(\"expected `self` but found `{}`\",\n+                self.fatal(format!(\"expected `self`, found `{}`\",\n                                    token_str).as_slice())\n             }\n         }\n@@ -4455,7 +4455,7 @@ impl<'a> Parser<'a> {\n         } else {\n             let token_str = self.this_token_to_string();\n             self.fatal(format!(\"expected `{}`, `(`, or `;` after struct \\\n-                                name but found `{}`\", \"{\",\n+                                name, found `{}`\", \"{\",\n                                token_str).as_slice())\n         }\n \n@@ -4486,7 +4486,7 @@ impl<'a> Parser<'a> {\n                 let span = self.span;\n                 let token_str = self.this_token_to_string();\n                 self.span_fatal(span,\n-                                format!(\"expected `,`, or `}}` but found `{}`\",\n+                                format!(\"expected `,`, or `}}`, found `{}`\",\n                                         token_str).as_slice())\n             }\n         }\n@@ -4566,7 +4566,7 @@ impl<'a> Parser<'a> {\n               }\n               _ => {\n                   let token_str = self.this_token_to_string();\n-                  self.fatal(format!(\"expected item but found `{}`\",\n+                  self.fatal(format!(\"expected item, found `{}`\",\n                                      token_str).as_slice())\n               }\n             }\n@@ -5107,7 +5107,7 @@ impl<'a> Parser<'a> {\n             let span = self.span;\n             let token_str = self.this_token_to_string();\n             self.span_fatal(span,\n-                            format!(\"expected `{}` or `fn` but found `{}`\", \"{\",\n+                            format!(\"expected `{}` or `fn`, found `{}`\", \"{\",\n                                     token_str).as_slice());\n         }\n "}, {"sha": "2826ecc1a12225540322959bc510ecda9bf91d33", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -184,7 +184,7 @@ pub fn parse(file: &mut io::Reader, longnames: bool)\n     // Check magic number\n     let magic = try!(file.read_le_u16());\n     if magic != 0x011A {\n-        return Err(format!(\"invalid magic number: expected {:x} but found {:x}\",\n+        return Err(format!(\"invalid magic number: expected {:x}, found {:x}\",\n                            0x011Au, magic as uint));\n     }\n "}, {"sha": "8e93b91276f2ea20b5539e20552dafb7e8bebbbe", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -29,7 +29,7 @@ pub fn main() {\n     unsafe {\n         // comma in place of a colon\n         asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8u) : \"cc\", \"volatile\");\n-        //~^ WARNING expected a clobber, but found an option\n+        //~^ WARNING expected a clobber, found an option\n     }\n     assert_eq!(x, 13);\n }"}, {"sha": "943169be00452630ad0ec8ca8ea66378e180de7e", "filename": "src/test/compile-fail/bad-bang-ann-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,7 +12,7 @@\n \n fn bad_bang(i: uint) -> ! {\n     return 7u;\n-    //~^ ERROR expected `!` but found `uint`\n+    //~^ ERROR expected `!`, found `uint`\n }\n \n fn main() { bad_bang(5u); }"}, {"sha": "18b98eb3a3881dacb81f740a4906652758abf790", "filename": "src/test/compile-fail/bad-bang-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,7 +12,7 @@\n \n fn bad_bang(i: uint) -> ! {\n     if i < 0u { } else { fail!(); }\n-    //~^ ERROR expected `!` but found `()`\n+    //~^ ERROR expected `!`, found `()`\n }\n \n fn main() { bad_bang(5u); }"}, {"sha": "13b19141c16cca344dd04440cc011eb4f8872dc3", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:expected `collections::string::String` but found `int`\n+// error-pattern:expected `collections::string::String`, found `int`\n \n static i: String = 10i;\n fn main() { println!(\"{}\", i); }"}, {"sha": "ff95f05279eea003c4c7d1abb1a6f826c00f562c", "filename": "src/test/compile-fail/bang-tailexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn f() -> ! {\n-    3i //~ ERROR expected `!` but found `int`\n+    3i //~ ERROR expected `!`, found `int`\n }\n fn main() { }"}, {"sha": "687171f8c1f9b348d3dbbb50f13a9a4962cc1fe6", "filename": "src/test/compile-fail/block-must-not-have-result-do.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-do.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-do.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-do.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:mismatched types: expected `()` but found `bool`\n+// error-pattern:mismatched types: expected `()`, found `bool`\n \n fn main() {\n     loop {"}, {"sha": "328c032325e0921a64542fd146c3c9368eebb837", "filename": "src/test/compile-fail/block-must-not-have-result-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:mismatched types: expected `()` but found `bool`\n+// error-pattern:mismatched types: expected `()`, found `bool`\n \n struct r;\n "}, {"sha": "ed903f3fd65517fe6acbdb950a68ccbf2593878a", "filename": "src/test/compile-fail/block-must-not-have-result-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:mismatched types: expected `()` but found `bool`\n+// error-pattern:mismatched types: expected `()`, found `bool`\n \n fn main() {\n     while true {"}, {"sha": "d69a56b76b0b4fe08506c5459389c5158c4d5c47", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -21,7 +21,7 @@ fn give_any(f: ||:) {\n \n fn give_owned(f: ||:Send) {\n     take_any(f);\n-    take_const_owned(f); //~ ERROR expected bounds `Send+Sync` but found bounds `Send`\n+    take_const_owned(f); //~ ERROR expected bounds `Send+Sync`, found bounds `Send`\n }\n \n fn main() {}"}, {"sha": "a00ded61758c28d8c4673ac6c6512604a3203ce9", "filename": "src/test/compile-fail/column-offset-1-based.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fcolumn-offset-1-based.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fcolumn-offset-1-based.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcolumn-offset-1-based.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-# //~ ERROR 11:1: 11:2 error: expected `[` but found `<eof>`\n+# //~ ERROR 11:1: 11:2 error: expected `[`, found `<eof>`"}, {"sha": "b5f17eef886853ff9bb725240dac89e5d4fec00e", "filename": "src/test/compile-fail/empty-impl-semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fempty-impl-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fempty-impl-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-impl-semicolon.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-impl Foo; //~ ERROR expected `{` but found `;`\n+impl Foo; //~ ERROR expected `{`, found `;`"}, {"sha": "b5346a1c5d1f71457b90340250a6cc5dec80a546", "filename": "src/test/compile-fail/explicit-self-lifetime-mismatch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -16,10 +16,10 @@ struct Foo<'a,'b> {\n impl<'a,'b> Foo<'a,'b> {\n     // The number of errors is related to the way invariance works.\n     fn bar(self: Foo<'b,'a>) {}\n-    //~^ ERROR mismatched types: expected `Foo<'a,'b>` but found `Foo<'b,'a>`\n-    //~^^ ERROR mismatched types: expected `Foo<'a,'b>` but found `Foo<'b,'a>`\n-    //~^^^ ERROR mismatched types: expected `Foo<'b,'a>` but found `Foo<'a,'b>`\n-    //~^^^^ ERROR mismatched types: expected `Foo<'b,'a>` but found `Foo<'a,'b>`\n+    //~^ ERROR mismatched types: expected `Foo<'a,'b>`, found `Foo<'b,'a>`\n+    //~^^ ERROR mismatched types: expected `Foo<'a,'b>`, found `Foo<'b,'a>`\n+    //~^^^ ERROR mismatched types: expected `Foo<'b,'a>`, found `Foo<'a,'b>`\n+    //~^^^^ ERROR mismatched types: expected `Foo<'b,'a>`, found `Foo<'a,'b>`\n }\n \n fn main() {}"}, {"sha": "7d1110cf6df83b48d81e137a88c1f0864f73bae6", "filename": "src/test/compile-fail/extern-expected-fn-or-brace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fextern-expected-fn-or-brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fextern-expected-fn-or-brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-expected-fn-or-brace.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -11,4 +11,4 @@\n // Verifies that the expected token errors for `extern crate` are\n // raised\n \n-extern \"C\" mod foo; //~ERROR expected `{` or `fn` but found `mod`\n+extern \"C\" mod foo; //~ERROR expected `{` or `fn`, found `mod`"}, {"sha": "97a5f2a11e96addc71e11850dd258ed679bc56ae", "filename": "src/test/compile-fail/extern-foreign-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fextern-foreign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fextern-foreign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-foreign-crate.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -11,4 +11,4 @@\n // Verifies that the expected token errors for `extern crate` are\n // raised\n \n-extern crate foo {} //~ERROR expected one of `=`, `;` but found `{`\n+extern crate foo {} //~ERROR expected one of `=`, `;`, found `{`"}, {"sha": "94af50dac0ea5d29f4aa6b02d220bbeed5404e49", "filename": "src/test/compile-fail/fully-qualified-type-name2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -20,7 +20,7 @@ mod y {\n \n fn bar(x: x::foo) -> y::foo {\n     return x;\n-    //~^ ERROR mismatched types: expected `y::foo` but found `x::foo`\n+    //~^ ERROR mismatched types: expected `y::foo`, found `x::foo`\n }\n \n fn main() {"}, {"sha": "0a5a54b9a275a885413b93b61ff63d1c1634e960", "filename": "src/test/compile-fail/fully-qualified-type-name3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name3.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -17,7 +17,7 @@ type T2 = int;\n \n fn bar(x: T1) -> T2 {\n     return x;\n-    //~^ ERROR mismatched types: expected `T2` but found `T1`\n+    //~^ ERROR mismatched types: expected `T2`, found `T1`\n }\n \n fn main() {"}, {"sha": "ec226061e2abed207765581e4c8edd18f63a40db", "filename": "src/test/compile-fail/generic-type-less-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -15,5 +15,5 @@ struct Heap;\n struct Vec<T, A = Heap>;\n \n fn main() {\n-    let _: Vec; //~ ERROR wrong number of type arguments: expected at least 1 but found 0\n+    let _: Vec; //~ ERROR wrong number of type arguments: expected at least 1, found 0\n }"}, {"sha": "b16abd1757548e0a82c378c544d72ca6b258d306", "filename": "src/test/compile-fail/generic-type-more-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -16,5 +16,5 @@ struct Vec<T, A = Heap>;\n \n fn main() {\n     let _: Vec<int, Heap, bool>;\n-    //~^ ERROR wrong number of type arguments: expected at most 2 but found 3\n+    //~^ ERROR wrong number of type arguments: expected at most 2, found 3\n }"}, {"sha": "87c865ab618b73a019c20027667e242a9b508874", "filename": "src/test/compile-fail/generic-type-params-name-repr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -21,23 +21,23 @@ struct HashMap<K, V, H = Hash<K>>;\n fn main() {\n     // Ensure that the printed type doesn't include the default type params...\n     let _: Foo<int> = ();\n-    //~^ ERROR mismatched types: expected `Foo<int>` but found `()`\n+    //~^ ERROR mismatched types: expected `Foo<int>`, found `()`\n \n     // ...even when they're present, but the same types as the defaults.\n     let _: Foo<int, B, C> = ();\n-    //~^ ERROR mismatched types: expected `Foo<int>` but found `()`\n+    //~^ ERROR mismatched types: expected `Foo<int>`, found `()`\n \n     // Including cases where the default is using previous type params.\n     let _: HashMap<String, int> = ();\n-    //~^ ERROR mismatched types: expected `HashMap<collections::string::String,int>` but found `()`\n+    //~^ ERROR mismatched types: expected `HashMap<collections::string::String,int>`, found `()`\n     let _: HashMap<String, int, Hash<String>> = ();\n-    //~^ ERROR mismatched types: expected `HashMap<collections::string::String,int>` but found `()`\n+    //~^ ERROR mismatched types: expected `HashMap<collections::string::String,int>`, found `()`\n \n     // But not when there's a different type in between.\n     let _: Foo<A, int, C> = ();\n-    //~^ ERROR mismatched types: expected `Foo<A,int>` but found `()`\n+    //~^ ERROR mismatched types: expected `Foo<A,int>`, found `()`\n \n     // And don't print <> at all when there's just defaults.\n     let _: Foo<A, B, C> = ();\n-    //~^ ERROR mismatched types: expected `Foo` but found `()`\n+    //~^ ERROR mismatched types: expected `Foo`, found `()`\n }"}, {"sha": "4a8c72c3877c52cd0a3ff6713614e211e64881a5", "filename": "src/test/compile-fail/if-branch-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fif-branch-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fif-branch-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-branch-types.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let x = if true { 10i } else { 10u };\n-    //~^ ERROR if and else have incompatible types: expected `int` but found `uint`\n+    //~^ ERROR if and else have incompatible types: expected `int`, found `uint`\n }"}, {"sha": "c22a8e3f7829994d03d3946a8c29f3566851a50f", "filename": "src/test/compile-fail/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:mismatched types: expected `()` but found `bool`\n+// error-pattern:mismatched types: expected `()`, found `bool`\n \n extern crate debug;\n "}, {"sha": "ec24be8bbe8d3613eda8e7d24378f9c29ec50e2e", "filename": "src/test/compile-fail/inherit-struct4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Finherit-struct4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Finherit-struct4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finherit-struct4.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,7 +12,7 @@\n #![feature(struct_inherit)]\n \n // With lifetime parameters.\n-struct S5<'a> : S4 { //~ ERROR wrong number of lifetime parameters: expected 1 but found 0\n+struct S5<'a> : S4 { //~ ERROR wrong number of lifetime parameters: expected 1, found 0\n     f4: int,\n }\n "}, {"sha": "1e42a9447f67a5feda876f8c507167209933b783", "filename": "src/test/compile-fail/integer-literal-suffix-inference.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -39,62 +39,62 @@ fn main() {\n     fn id_u64(n: u64) -> u64 { n }\n \n     id_i8(a8); // ok\n-    id_i8(a16); //~ ERROR mismatched types: expected `i8` but found `i16`\n-    id_i8(a32); //~ ERROR mismatched types: expected `i8` but found `i32`\n-    id_i8(a64); //~ ERROR mismatched types: expected `i8` but found `i64`\n+    id_i8(a16); //~ ERROR mismatched types: expected `i8`, found `i16`\n+    id_i8(a32); //~ ERROR mismatched types: expected `i8`, found `i32`\n+    id_i8(a64); //~ ERROR mismatched types: expected `i8`, found `i64`\n \n-    id_i16(a8); //~ ERROR mismatched types: expected `i16` but found `i8`\n+    id_i16(a8); //~ ERROR mismatched types: expected `i16`, found `i8`\n     id_i16(a16); // ok\n-    id_i16(a32); //~ ERROR mismatched types: expected `i16` but found `i32`\n-    id_i16(a64); //~ ERROR mismatched types: expected `i16` but found `i64`\n+    id_i16(a32); //~ ERROR mismatched types: expected `i16`, found `i32`\n+    id_i16(a64); //~ ERROR mismatched types: expected `i16`, found `i64`\n \n-    id_i32(a8); //~ ERROR mismatched types: expected `i32` but found `i8`\n-    id_i32(a16); //~ ERROR mismatched types: expected `i32` but found `i16`\n+    id_i32(a8); //~ ERROR mismatched types: expected `i32`, found `i8`\n+    id_i32(a16); //~ ERROR mismatched types: expected `i32`, found `i16`\n     id_i32(a32); // ok\n-    id_i32(a64); //~ ERROR mismatched types: expected `i32` but found `i64`\n+    id_i32(a64); //~ ERROR mismatched types: expected `i32`, found `i64`\n \n-    id_i64(a8); //~ ERROR mismatched types: expected `i64` but found `i8`\n-    id_i64(a16); //~ ERROR mismatched types: expected `i64` but found `i16`\n-    id_i64(a32); //~ ERROR mismatched types: expected `i64` but found `i32`\n+    id_i64(a8); //~ ERROR mismatched types: expected `i64`, found `i8`\n+    id_i64(a16); //~ ERROR mismatched types: expected `i64`, found `i16`\n+    id_i64(a32); //~ ERROR mismatched types: expected `i64`, found `i32`\n     id_i64(a64); // ok\n \n     id_i8(c8); // ok\n-    id_i8(c16); //~ ERROR mismatched types: expected `i8` but found `i16`\n-    id_i8(c32); //~ ERROR mismatched types: expected `i8` but found `i32`\n-    id_i8(c64); //~ ERROR mismatched types: expected `i8` but found `i64`\n+    id_i8(c16); //~ ERROR mismatched types: expected `i8`, found `i16`\n+    id_i8(c32); //~ ERROR mismatched types: expected `i8`, found `i32`\n+    id_i8(c64); //~ ERROR mismatched types: expected `i8`, found `i64`\n \n-    id_i16(c8); //~ ERROR mismatched types: expected `i16` but found `i8`\n+    id_i16(c8); //~ ERROR mismatched types: expected `i16`, found `i8`\n     id_i16(c16); // ok\n-    id_i16(c32); //~ ERROR mismatched types: expected `i16` but found `i32`\n-    id_i16(c64); //~ ERROR mismatched types: expected `i16` but found `i64`\n+    id_i16(c32); //~ ERROR mismatched types: expected `i16`, found `i32`\n+    id_i16(c64); //~ ERROR mismatched types: expected `i16`, found `i64`\n \n-    id_i32(c8); //~ ERROR mismatched types: expected `i32` but found `i8`\n-    id_i32(c16); //~ ERROR mismatched types: expected `i32` but found `i16`\n+    id_i32(c8); //~ ERROR mismatched types: expected `i32`, found `i8`\n+    id_i32(c16); //~ ERROR mismatched types: expected `i32`, found `i16`\n     id_i32(c32); // ok\n-    id_i32(c64); //~ ERROR mismatched types: expected `i32` but found `i64`\n+    id_i32(c64); //~ ERROR mismatched types: expected `i32`, found `i64`\n \n-    id_i64(a8); //~ ERROR mismatched types: expected `i64` but found `i8`\n-    id_i64(a16); //~ ERROR mismatched types: expected `i64` but found `i16`\n-    id_i64(a32); //~ ERROR mismatched types: expected `i64` but found `i32`\n+    id_i64(a8); //~ ERROR mismatched types: expected `i64`, found `i8`\n+    id_i64(a16); //~ ERROR mismatched types: expected `i64`, found `i16`\n+    id_i64(a32); //~ ERROR mismatched types: expected `i64`, found `i32`\n     id_i64(a64); // ok\n \n     id_u8(b8); // ok\n-    id_u8(b16); //~ ERROR mismatched types: expected `u8` but found `u16`\n-    id_u8(b32); //~ ERROR mismatched types: expected `u8` but found `u32`\n-    id_u8(b64); //~ ERROR mismatched types: expected `u8` but found `u64`\n+    id_u8(b16); //~ ERROR mismatched types: expected `u8`, found `u16`\n+    id_u8(b32); //~ ERROR mismatched types: expected `u8`, found `u32`\n+    id_u8(b64); //~ ERROR mismatched types: expected `u8`, found `u64`\n \n-    id_u16(b8); //~ ERROR mismatched types: expected `u16` but found `u8`\n+    id_u16(b8); //~ ERROR mismatched types: expected `u16`, found `u8`\n     id_u16(b16); // ok\n-    id_u16(b32); //~ ERROR mismatched types: expected `u16` but found `u32`\n-    id_u16(b64); //~ ERROR mismatched types: expected `u16` but found `u64`\n+    id_u16(b32); //~ ERROR mismatched types: expected `u16`, found `u32`\n+    id_u16(b64); //~ ERROR mismatched types: expected `u16`, found `u64`\n \n-    id_u32(b8); //~ ERROR mismatched types: expected `u32` but found `u8`\n-    id_u32(b16); //~ ERROR mismatched types: expected `u32` but found `u16`\n+    id_u32(b8); //~ ERROR mismatched types: expected `u32`, found `u8`\n+    id_u32(b16); //~ ERROR mismatched types: expected `u32`, found `u16`\n     id_u32(b32); // ok\n-    id_u32(b64); //~ ERROR mismatched types: expected `u32` but found `u64`\n+    id_u32(b64); //~ ERROR mismatched types: expected `u32`, found `u64`\n \n-    id_u64(b8); //~ ERROR mismatched types: expected `u64` but found `u8`\n-    id_u64(b16); //~ ERROR mismatched types: expected `u64` but found `u16`\n-    id_u64(b32); //~ ERROR mismatched types: expected `u64` but found `u32`\n+    id_u64(b8); //~ ERROR mismatched types: expected `u64`, found `u8`\n+    id_u64(b16); //~ ERROR mismatched types: expected `u64`, found `u16`\n+    id_u64(b32); //~ ERROR mismatched types: expected `u64`, found `u32`\n     id_u64(b64); // ok\n }"}, {"sha": "0733744b65210d724ed498d24abf969b69b27dfb", "filename": "src/test/compile-fail/issue-10764.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-10764.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-10764.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10764.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,4 +12,4 @@ fn f(_: extern \"Rust\" fn()) {}\n extern fn bar() {}\n \n fn main() { f(bar) }\n-//~^ ERROR: expected `fn()` but found `extern \"C\" fn()`\n+//~^ ERROR: expected `fn()`, found `extern \"C\" fn()`"}, {"sha": "c818b3bb26ce6a8d39dabbf2d75e50e4585a45a3", "filename": "src/test/compile-fail/issue-11319.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-11319.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-11319.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11319.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     match Some(10) {\n-    //~^ ERROR match arms have incompatible types: expected `bool` but found `()`\n+    //~^ ERROR match arms have incompatible types: expected `bool`, found `()`\n         Some(5) => false,\n         Some(2) => true,\n         None    => (), //~ NOTE match arm with an incompatible type"}, {"sha": "82cd38ad5b0438ab349c3bee45aaf70d105827c4", "filename": "src/test/compile-fail/issue-11515.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -14,5 +14,5 @@ struct Test<'s> {\n \n fn main() {\n     let test = box Test { func: proc() {} };\n-    //~^ ERROR: expected `||` but found `proc()`\n+    //~^ ERROR: expected `||`, found `proc()`\n }"}, {"sha": "83f6fb072329d88ddc1900540bfa275e3aa09006", "filename": "src/test/compile-fail/issue-12997-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,6 +12,6 @@\n \n //! Test that makes sure wrongly-typed bench functions are rejected\n \n-// error-pattern:expected &-ptr but found int\n+// error-pattern:expected &-ptr, found int\n #[bench]\n fn bar(x: int) { }"}, {"sha": "7159aa17623c086f862dbeb3c24f91c3b274ec11", "filename": "src/test/compile-fail/issue-13482.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,7 +12,7 @@ fn main() {\n   let x = [1,2];\n   let y = match x {\n     [] => None,\n-//~^ ERROR expected `[<generic integer #1>, .. 2]` but found a fixed vector pattern of size 0\n+//~^ ERROR expected `[<generic integer #1>, .. 2]`, found a fixed vector pattern of size 0\n     [a,_] => Some(a)\n   };\n }"}, {"sha": "eee23f1feba277915c394d233d5e5699af858591", "filename": "src/test/compile-fail/issue-13599.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-13599.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-13599.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13599.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -16,8 +16,8 @@ fn expect_proc(_: proc()) {}\n \n fn main() {\n     expect_closure(proc() {});\n-    //~^ ERROR mismatched types: expected `||` but found `proc()` (expected closure, found proc)\n+    //~^ ERROR mismatched types: expected `||`, found `proc()` (expected closure, found proc)\n \n     expect_proc(|| {});\n-    //~^ ERROR mismatched types: expected `proc()` but found `||` (expected proc, found closure)\n+    //~^ ERROR mismatched types: expected `proc()`, found `||` (expected proc, found closure)\n }"}, {"sha": "fc5a591ebd60fe3facaacc8b977b7a312cc05232", "filename": "src/test/compile-fail/issue-14845.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -16,9 +16,9 @@ struct X {\n fn main() {\n     let x = X { a: [0] };\n     let _f = &x.a as *mut u8;\n-    //~^ ERROR mismatched types: expected `*mut u8` but found `&[u8, .. 1]`\n+    //~^ ERROR mismatched types: expected `*mut u8`, found `&[u8, .. 1]`\n \n     let local = [0u8];\n     let _v = &local as *mut u8;\n-    //~^ ERROR mismatched types: expected `*mut u8` but found `&[u8, .. 1]`\n+    //~^ ERROR mismatched types: expected `*mut u8`, found `&[u8, .. 1]`\n }"}, {"sha": "c9e47b74d515d925645c927c624fb5a9a1f85b78", "filename": "src/test/compile-fail/issue-15094.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -18,7 +18,7 @@ struct Shower<T> {\n \n impl<T: fmt::Show> ops::Fn<(), ()> for Shower<T> {\n     fn call(&self, _args: ()) {\n-//~^ ERROR `call` has an incompatible type for trait: expected \"rust-call\" fn but found \"Rust\" fn\n+//~^ ERROR `call` has an incompatible type for trait: expected \"rust-call\" fn, found \"Rust\" fn\n         println!(\"{}\", self.x);\n     }\n }"}, {"sha": "d4b31066e5ac216f8e0375481c9f623af2f2fde8", "filename": "src/test/compile-fail/issue-16338.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,6 +12,6 @@ use std::raw::Slice;\n \n fn main() {\n     let Slice { data: data, len: len } = \"foo\";\n-    //~^ ERROR mismatched types: expected `&'static str` but found a structure pattern\n+    //~^ ERROR mismatched types: expected `&'static str`, found a structure pattern\n }\n "}, {"sha": "bece4381e4183e83425f56936897a8e8f9142b5d", "filename": "src/test/compile-fail/issue-16401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -13,7 +13,7 @@ use std::raw::Slice;\n fn main() {\n     match () {\n         Slice { data: data, len: len } => (),\n-        //~^ ERROR mismatched types: expected `()` but found a structure pattern\n+        //~^ ERROR mismatched types: expected `()`, found a structure pattern\n         _ => unreachable!()\n     }\n }"}, {"sha": "6bdcf5c5edced68d52077d9f5a3c5138e091a283", "filename": "src/test/compile-fail/issue-1655.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:expected `[` but found `vec`\n+// error-pattern:expected `[`, found `vec`\n mod blade_runner {\n     #vec[doc(\n         brief = \"Blade Runner is probably the best movie ever\","}, {"sha": "694bf05b21035b432e2a9c5e1a41138fae96d502", "filename": "src/test/compile-fail/issue-2951.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-2951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-2951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2951.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -10,7 +10,7 @@\n \n fn foo<T, U>(x: T, y: U) {\n     let mut xx = x;\n-    xx = y; //~ ERROR expected `T` but found `U`\n+    xx = y; //~ ERROR expected `T`, found `U`\n }\n \n fn main() {"}, {"sha": "5f56f6b8b6b99fbb17b90a9fcf0494b8d5f0ff8e", "filename": "src/test/compile-fail/issue-3036.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-3036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-3036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3036.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -13,4 +13,4 @@\n fn main()\n {\n     let x = 3\n-} //~ ERROR: expected `;` but found `}`\n+} //~ ERROR: expected `;`, found `}`"}, {"sha": "798a8cfec9a6e202bd1e194e74c2ca53a479d836", "filename": "src/test/compile-fail/issue-3477.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-3477.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-3477.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3477.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let _p: char = 100; //~ ERROR mismatched types: expected `char` but found\n+    let _p: char = 100; //~ ERROR mismatched types: expected `char`, found\n }"}, {"sha": "96a93c205feb7c1648d0288c4172e23b22599553", "filename": "src/test/compile-fail/issue-3680.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     match None {\n         Err(_) => ()\n         //~^ ERROR mismatched types: expected `core::option::Option<<generic #1>>`\n-        //         but found `core::result::Result<<generic #2>,<generic #3>>`\n+        //         , found `core::result::Result<<generic #2>,<generic #3>>`\n     }\n }"}, {"sha": "d80f2d1263d997e7ca7ab833dc3b5cadb2b39647", "filename": "src/test/compile-fail/issue-4517.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -13,6 +13,6 @@ fn bar(int_param: int) {}\n fn main() {\n     let foo: [u8, ..4] = [1u8, ..4u];\n     bar(foo);\n-    //~^ ERROR mismatched types: expected `int` but found `[u8, .. 4]`\n-    //         (expected int but found vector)\n+    //~^ ERROR mismatched types: expected `int`, found `[u8, .. 4]`\n+    //         (expected int, found vector)\n }"}, {"sha": "220fb76411abbb51b0caec0d4becb0b5d21c448a", "filename": "src/test/compile-fail/issue-4968.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -13,6 +13,6 @@\n static A: (int,int) = (4,2);\n fn main() {\n     match 42 { A => () }\n-    //~^ ERROR mismatched types: expected `<generic integer #0>` but found `(int,int)`\n-    //         (expected integral variable but found tuple)\n+    //~^ ERROR mismatched types: expected `<generic integer #0>`, found `(int,int)`\n+    //         (expected integral variable, found tuple)\n }"}, {"sha": "5c4127c5bae5ecb970b42fae4bdfcf3d5d155a1a", "filename": "src/test/compile-fail/issue-5100.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,33 +12,33 @@ enum A { B, C }\n \n fn main() {\n     match (true, false) {\n-        B => (), //~ ERROR expected `(bool,bool)` but found an enum or structure pattern\n+        B => (), //~ ERROR expected `(bool,bool)`, found an enum or structure pattern\n         _ => ()\n     }\n \n     match (true, false) {\n         (true, false, false) => ()\n-        //~^ ERROR mismatched types: expected `(bool,bool)` but found tuple\n-        //         (expected a tuple with 2 elements but found one with 3 elements)\n+        //~^ ERROR mismatched types: expected `(bool,bool)`, found tuple\n+        //         (expected a tuple with 2 elements, found one with 3 elements)\n     }\n \n     match (true, false) {\n         box (true, false) => ()\n-        //~^ ERROR mismatched types: expected `(bool,bool)` but found a box pattern\n+        //~^ ERROR mismatched types: expected `(bool,bool)`, found a box pattern\n     }\n \n     match (true, false) {\n         &(true, false) => ()\n-        //~^ ERROR mismatched types: expected `(bool,bool)` but found an `&`-pointer pattern\n+        //~^ ERROR mismatched types: expected `(bool,bool)`, found an `&`-pointer pattern\n     }\n \n \n-    let v = [('a', 'b')   //~ ERROR expected function but found `(char,char)`\n+    let v = [('a', 'b')   //~ ERROR expected function, found `(char,char)`\n              ('c', 'd'),\n              ('e', 'f')];\n \n     for &(x,y) in v.iter() {} // should be OK\n \n     // Make sure none of the errors above were fatal\n-    let x: char = true; //~ ERROR expected `char` but found `bool`\n+    let x: char = true; //~ ERROR expected `char`, found `bool`\n }"}, {"sha": "de715902f2a3db8f89ed37d37921b97fd43d4dbd", "filename": "src/test/compile-fail/issue-5358-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -13,7 +13,7 @@ struct S(Either<uint, uint>);\n \n fn main() {\n     match S(Left(5)) {\n-        Right(_) => {}  //~ ERROR mismatched types: expected `S` but found `Either\n+        Right(_) => {}  //~ ERROR mismatched types: expected `S`, found `Either\n         _ => {}\n     }\n }"}, {"sha": "166e91b27ac132e684910994c245a4a742c3a05f", "filename": "src/test/compile-fail/issue-6610.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-6610.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-6610.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6610.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo { fn a() } //~ ERROR expected `;` or `{` but found `}`\n+trait Foo { fn a() } //~ ERROR expected `;` or `{`, found `}`\n \n fn main() {}"}, {"sha": "a9e9416beb390c941d92c75f11bc38e3787923c8", "filename": "src/test/compile-fail/issue-7061.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -15,7 +15,7 @@ struct BarStruct;\n \n impl<'a> BarStruct {\n     fn foo(&'a mut self) -> Gc<BarStruct> { self }\n-    //~^ ERROR: error: mismatched types: expected `Gc<BarStruct>` but found `&'a mut BarStruct\n+    //~^ ERROR: error: mismatched types: expected `Gc<BarStruct>`, found `&'a mut BarStruct\n }\n \n fn main() {}"}, {"sha": "8b3df6f9f95e2aeef5c420788e93afcf06f0b432", "filename": "src/test/compile-fail/issue-7092.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -14,7 +14,7 @@ enum Whatever {\n fn foo(x: Whatever) {\n     match x {\n         Some(field) => field.access(),\n-        //~^ ERROR: mismatched types: expected `Whatever` but found\n+        //~^ ERROR: mismatched types: expected `Whatever`, found\n     }\n }\n "}, {"sha": "27369f77e883b41c190e8cc74af995fa6ea35784", "filename": "src/test/compile-fail/issue-8761.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-8761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue-8761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8761.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -10,9 +10,9 @@\n \n enum Foo {\n     A = 1i64,\n-    //~^ ERROR mismatched types: expected `int` but found `i64`\n+    //~^ ERROR mismatched types: expected `int`, found `i64`\n     B = 2u8\n-    //~^ ERROR mismatched types: expected `int` but found `u8`\n+    //~^ ERROR mismatched types: expected `int`, found `u8`\n }\n \n fn main() {}"}, {"sha": "227ed3fb83420d059057916a3ff82d7f0c77be38", "filename": "src/test/compile-fail/issue13359.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue13359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fissue13359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue13359.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -14,8 +14,8 @@ fn bar(_s: u32) { }\n \n fn main() {\n     foo(1*(1 as int));\n-    //~^ ERROR: mismatched types: expected `i16` but found `int` (expected `i16` but found `int`)\n+    //~^ ERROR: mismatched types: expected `i16`, found `int` (expected `i16`, found `int`)\n \n     bar(1*(1 as uint));\n-    //~^ ERROR: mismatched types: expected `u32` but found `uint` (expected `u32` but found `uint`)\n+    //~^ ERROR: mismatched types: expected `u32`, found `uint` (expected `u32`, found `uint`)\n }"}, {"sha": "d0e5249305493523ad48208d5ffbf2ddc5d58a4f", "filename": "src/test/compile-fail/loop-does-not-diverge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -14,7 +14,7 @@ fn forever() -> ! {\n   loop {\n     break;\n   }\n-  return 42i; //~ ERROR expected `!` but found `int`\n+  return 42i; //~ ERROR expected `!`, found `int`\n }\n \n fn main() {"}, {"sha": "75f7b5d4dd80937110037b3fcdca25cedd2af066", "filename": "src/test/compile-fail/macro-bad-delimiter-ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fmacro-bad-delimiter-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fmacro-bad-delimiter-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-bad-delimiter-ident.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    foo! bar < //~ ERROR expected `(` or `{`, but found `<`\n+    foo! bar < //~ ERROR expected `(` or `{`, found `<`\n }"}, {"sha": "2491d0b3769759f0ce9f29310f9252d966c29f29", "filename": "src/test/compile-fail/match-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -14,7 +14,7 @@ enum E { C(int) }\n \n fn main() {\n     match (S { a: 1 }) {\n-        C(_) => (), //~ ERROR mismatched types: expected `S` but found `E`\n+        C(_) => (), //~ ERROR mismatched types: expected `S`, found `E`\n         _ => ()\n     }\n }"}, {"sha": "fee49ad8fdb0614bf6fa034f751acebc9bd4c6d2", "filename": "src/test/compile-fail/match-vec-mismatch-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n     match () {\n-        [()] => { } //~ ERROR mismatched types: expected `()` but found a vector pattern\n+        [()] => { } //~ ERROR mismatched types: expected `()`, found a vector pattern\n     }\n }"}, {"sha": "795e3807d5ec67aa13df29d410e55f8da199d51e", "filename": "src/test/compile-fail/multitrait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fmultitrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fmultitrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmultitrait.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,7 +12,7 @@ struct S {\n  y: int\n }\n \n-impl Cmp, ToString for S { //~ ERROR: expected `{` but found `,`\n+impl Cmp, ToString for S { //~ ERROR: expected `{`, found `,`\n   fn eq(&&other: S) { false }\n   fn to_string(&self) -> String { \"hi\".to_string() }\n }"}, {"sha": "a33a603f7f564beb888570cbe2d3468b2c1f3168", "filename": "src/test/compile-fail/mut-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fmut-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fmut-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-patterns.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,5 +12,5 @@\n \n pub fn main() {\n     struct Foo { x: int }\n-    let mut Foo { x: x } = Foo { x: 3 }; //~ ERROR: expected `;` but found `{`\n+    let mut Foo { x: x } = Foo { x: 3 }; //~ ERROR: expected `;`, found `{`\n }"}, {"sha": "7e113d4a8c4cd49b40ff36a4de763b128d483f26", "filename": "src/test/compile-fail/noexporttypeexe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     // because the def_id associated with the type was\n     // not convertible to a path.\n   let x: int = noexporttypelib::foo();\n-    //~^ ERROR expected `int` but found `core::option::Option<int>`\n+    //~^ ERROR expected `int`, found `core::option::Option<int>`\n }"}, {"sha": "c4d5d734a71953383f066325d5913dac2df45fc7", "filename": "src/test/compile-fail/non-constant-enum-for-vec-repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,5 +12,5 @@ enum State { ST_NULL, ST_WHITESPACE }\n \n fn main() {\n     [ST_NULL, ..(ST_WHITESPACE as uint)];\n-    //~^ ERROR expected constant integer for repeat count but found variable\n+    //~^ ERROR expected constant integer for repeat count, found variable\n }"}, {"sha": "299e9d3dced3c0fb963153aa6f0cad0f70c7c50a", "filename": "src/test/compile-fail/non-constant-expr-for-vec-repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,6 +12,6 @@\n \n fn main() {\n     fn bar(n: uint) {\n-        let _x = [0, ..n]; //~ ERROR expected constant integer for repeat count but found variable\n+        let _x = [0, ..n]; //~ ERROR expected constant integer for repeat count, found variable\n     }\n }"}, {"sha": "c5ff885997b729bfcd5014890dc5b38958d9e936", "filename": "src/test/compile-fail/omitted-arg-in-item-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fomitted-arg-in-item-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fomitted-arg-in-item-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fomitted-arg-in-item-fn.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x) { //~ ERROR expected `:` but found `)`\n+fn foo(x) { //~ ERROR expected `:`, found `)`\n }"}, {"sha": "01feda34e0870a5cc98f0079189669f0459d3dd7", "filename": "src/test/compile-fail/pattern-error-continue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -29,9 +29,9 @@ fn main() {\n         _ => ()\n     }\n     match 'c' {\n-        S { .. } => (),   //~ ERROR mismatched types: expected `char` but found a structure pattern\n+        S { .. } => (),   //~ ERROR mismatched types: expected `char`, found a structure pattern\n \n         _ => ()\n     }\n-    f(true);            //~ ERROR mismatched types: expected `char` but found `bool`\n+    f(true);            //~ ERROR mismatched types: expected `char`, found `bool`\n }"}, {"sha": "4de56e32f560a98ba7dbb34e459bede38f950d01", "filename": "src/test/compile-fail/pptypedef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,8 +12,8 @@ fn let_in<T>(x: T, f: |T|) {}\n \n fn main() {\n     let_in(3u, |i| { assert!(i == 3i); });\n-    //~^ ERROR expected `uint` but found `int`\n+    //~^ ERROR expected `uint`, found `int`\n \n     let_in(3i, |i| { assert!(i == 3u); });\n-    //~^ ERROR expected `int` but found `uint`\n+    //~^ ERROR expected `int`, found `uint`\n }"}, {"sha": "4f3fb7d5b8ab28d55bf1565650e0a06300453fe3", "filename": "src/test/compile-fail/raw-str-unbalanced.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fraw-str-unbalanced.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fraw-str-unbalanced.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fraw-str-unbalanced.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -10,5 +10,5 @@\n \n static s: &'static str =\n     r#\"\n-      \"## //~ ERROR expected `;` but found `#`\n+      \"## //~ ERROR expected `;`, found `#`\n ;"}, {"sha": "68e198ea5b7a070f8efca32169eb3bec80b48042", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -16,12 +16,12 @@ struct an_enum<'a>(&'a int);\n struct a_class<'a> { x:&'a int }\n \n fn a_fn1<'a,'b>(e: an_enum<'a>) -> an_enum<'b> {\n-    return e; //~ ERROR mismatched types: expected `an_enum<'b>` but found `an_enum<'a>`\n+    return e; //~ ERROR mismatched types: expected `an_enum<'b>`, found `an_enum<'a>`\n     //~^ ERROR cannot infer\n }\n \n fn a_fn3<'a,'b>(e: a_class<'a>) -> a_class<'b> {\n-    return e; //~ ERROR mismatched types: expected `a_class<'b>` but found `a_class<'a>`\n+    return e; //~ ERROR mismatched types: expected `a_class<'b>`, found `a_class<'a>`\n     //~^ ERROR cannot infer\n }\n "}, {"sha": "519223e97535e58e06bfdbf03de6ea3317c945a5", "filename": "src/test/compile-fail/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -32,7 +32,7 @@ impl<'a> set_f<'a> for c<'a> {\n     }\n \n     fn set_f_bad(&self, b: Gc<b>) {\n-        self.f = b; //~ ERROR mismatched types: expected `Gc<Gc<&'a int>>` but found `Gc<Gc<&int>>`\n+        self.f = b; //~ ERROR mismatched types: expected `Gc<Gc<&'a int>>`, found `Gc<Gc<&int>>`\n         //~^ ERROR cannot infer\n     }\n }"}, {"sha": "772ccadda52730e9cb08a5d934bb9bfb56945c49", "filename": "src/test/compile-fail/regions-infer-paramd-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -40,7 +40,7 @@ trait set_foo_foo {\n \n impl<'a> set_foo_foo for with_foo<'a> {\n     fn set_foo(&mut self, f: @foo) {\n-        self.f = f; //~ ERROR mismatched types: expected `@foo/&self` but found `@foo/&`\n+        self.f = f; //~ ERROR mismatched types: expected `@foo/&self`, found `@foo/&`\n     }\n }\n "}, {"sha": "78d84fb7c757dfc315213d38f02ea7e427a98405", "filename": "src/test/compile-fail/regions-trait-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -26,7 +26,7 @@ trait get_ctxt<'a> {\n }\n \n fn make_gc1(gc: @get_ctxt<'a>) -> @get_ctxt<'b>  {\n-    return gc; //~ ERROR mismatched types: expected `@get_ctxt/&b` but found `@get_ctxt/&a`\n+    return gc; //~ ERROR mismatched types: expected `@get_ctxt/&b`, found `@get_ctxt/&a`\n }\n \n struct Foo {"}, {"sha": "a726e30b1de59500df552819be3f73d807a7d566", "filename": "src/test/compile-fail/removed-syntax-closure-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-closure-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-closure-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-closure-lifetime.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type closure = Box<lt/fn()>; //~ ERROR expected `,` but found `/`\n+type closure = Box<lt/fn()>; //~ ERROR expected `,`, found `/`"}, {"sha": "841c1ec59fdaad236375088866e248abba250c27", "filename": "src/test/compile-fail/removed-syntax-const-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-const-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-const-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-const-item.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const i: int = 42; //~ ERROR expected item but found `const`\n+const i: int = 42; //~ ERROR expected item, found `const`"}, {"sha": "b9c9c5f0a537bd4b98437f311ecbb60dd70cf684", "filename": "src/test/compile-fail/removed-syntax-enum-newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-enum-newtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-enum-newtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-enum-newtype.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum e = int; //~ ERROR expected `{` but found `=`\n+enum e = int; //~ ERROR expected `{`, found `=`"}, {"sha": "2b76db4f160a46bca219d703e314ae69f35d0037", "filename": "src/test/compile-fail/removed-syntax-field-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-field-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-field-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-field-let.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -11,5 +11,5 @@\n struct s {\n     let foo: (),\n     //~^  ERROR found `let` in ident position\n-    //~^^ ERROR expected `:` but found `foo`\n+    //~^^ ERROR expected `:`, found `foo`\n }"}, {"sha": "9bb3c649cdfe22a7d4f557dc50886f1d1f5ed945", "filename": "src/test/compile-fail/removed-syntax-field-semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-field-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-field-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-field-semicolon.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -10,5 +10,5 @@\n \n struct s {\n     bar: ();\n-    //~^ ERROR expected `,`, or `}` but found `;`\n+    //~^ ERROR expected `,`, or `}`, found `;`\n }"}, {"sha": "917b4e03ad0ed8d3339fc8b4ad9e6b5c67660684", "filename": "src/test/compile-fail/removed-syntax-fixed-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fixed-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fixed-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fixed-vec.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type v = [int * 3]; //~ ERROR expected `]` but found `*`\n+type v = [int * 3]; //~ ERROR expected `]`, found `*`"}, {"sha": "d569ea25c46a754a0907b0fb335711bf35d750eb", "filename": "src/test/compile-fail/removed-syntax-fn-pure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fn-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fn-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fn-pure.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pure fn f() {} //~ ERROR expected item but found `pure`\n+pure fn f() {} //~ ERROR expected item, found `pure`"}, {"sha": "83ebe7cc7a3bda8ce9bd128fec6fea3c17890cf2", "filename": "src/test/compile-fail/removed-syntax-fn-sigil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fn-sigil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fn-sigil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fn-sigil.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn f() {\n-    let x: fn~() = || (); //~ ERROR expected `(` but found `~`\n+    let x: fn~() = || (); //~ ERROR expected `(`, found `~`\n }"}, {"sha": "b2e856750df0156b4c0ad40c7eebea06358c1f46", "filename": "src/test/compile-fail/removed-syntax-larrow-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-larrow-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-larrow-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-larrow-init.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -11,5 +11,5 @@\n fn removed_moves() {\n     let mut x = 0;\n     let y <- x;\n-    //~^ ERROR expected `;` but found `<-`\n+    //~^ ERROR expected `;`, found `<-`\n }"}, {"sha": "e39fbe0f950ec29695344ae5a63e2bd782978eea", "filename": "src/test/compile-fail/removed-syntax-larrow-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-larrow-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-larrow-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-larrow-move.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,5 +12,5 @@ fn removed_moves() {\n     let mut x = 0;\n     let y = 0;\n     y <- x;\n-    //~^ ERROR expected one of `;`, `}` but found `<-`\n+    //~^ ERROR expected one of `;`, `}`, found `<-`\n }"}, {"sha": "9f0cc0107c1f8c48c8a0085f3a12cfbbe084f150", "filename": "src/test/compile-fail/removed-syntax-mut-vec-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-expr.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -11,5 +11,5 @@\n fn f() {\n     let v = [mut 1, 2, 3, 4];\n     //~^  ERROR found `mut` in ident position\n-    //~^^ ERROR expected `]` but found `1`\n+    //~^^ ERROR expected `]`, found `1`\n }"}, {"sha": "912952892e4f72e02327649aaa44f3f9ea388122", "filename": "src/test/compile-fail/removed-syntax-mut-vec-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-ty.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -10,4 +10,4 @@\n \n type v = [mut int];\n     //~^  ERROR found `mut` in ident position\n-    //~^^ ERROR expected `]` but found `int`\n+    //~^^ ERROR expected `]`, found `int`"}, {"sha": "0468ddd389a7c494b69db763ae102ae23c17be27", "filename": "src/test/compile-fail/removed-syntax-ptr-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-ptr-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-ptr-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-ptr-lifetime.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type bptr = &lifetime/int; //~ ERROR expected `;` but found `/`\n+type bptr = &lifetime/int; //~ ERROR expected `;`, found `/`"}, {"sha": "f4fc5b696fa4b6fa1d837c3e99c008693fb8c3f3", "filename": "src/test/compile-fail/removed-syntax-uniq-mut-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-uniq-mut-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-uniq-mut-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-uniq-mut-expr.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -11,5 +11,5 @@\n fn f() {\n     let a_box = box mut 42;\n     //~^  ERROR found `mut` in ident position\n-    //~^^ ERROR expected `;` but found `42`\n+    //~^^ ERROR expected `;`, found `42`\n }"}, {"sha": "a3fc27d8cf2e0f83b38ba7a64b6b0cf20f9723a5", "filename": "src/test/compile-fail/removed-syntax-uniq-mut-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-uniq-mut-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-uniq-mut-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-uniq-mut-ty.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -10,4 +10,4 @@\n \n type mut_box = Box<mut int>;\n     //~^  ERROR found `mut` in ident position\n-    //~^^ ERROR expected `,` but found `int`\n+    //~^^ ERROR expected `,`, found `int`"}, {"sha": "fd8cdb7b10edf51c380a4f91ca9879d255cada0f", "filename": "src/test/compile-fail/removed-syntax-with-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-with-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-with-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-with-1.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -16,5 +16,5 @@ fn removed_with() {\n \n     let a = S { foo: (), bar: () };\n     let b = S { foo: () with a };\n-    //~^ ERROR expected one of `,`, `}` but found `with`\n+    //~^ ERROR expected one of `,`, `}`, found `with`\n }"}, {"sha": "83c6897dee31175d9f7cbc105ddb4bdb1ba880f2", "filename": "src/test/compile-fail/removed-syntax-with-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-with-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-with-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-with-2.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -16,5 +16,5 @@ fn removed_with() {\n \n     let a = S { foo: (), bar: () };\n     let b = S { foo: (), with a };\n-    //~^ ERROR expected `:` but found `a`\n+    //~^ ERROR expected `:`, found `a`\n }"}, {"sha": "8a28819a7365acfda6b4e2b72d2ea177ae2b5ffb", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,17 +12,17 @@\n \n fn main() {\n     let n = 1;\n-    let a = [0, ..n]; //~ ERROR expected constant integer for repeat count but found variable\n-    let b = [0, ..()]; //~ ERROR expected positive integer for repeat count but found ()\n-    //~^ ERROR: expected `uint` but found `()`\n-    let c = [0, ..true]; //~ ERROR expected positive integer for repeat count but found boolean\n-    //~^ ERROR: expected `uint` but found `bool`\n-    let d = [0, ..0.5]; //~ ERROR expected positive integer for repeat count but found float\n-    //~^ ERROR: expected `uint` but found `<generic float #0>`\n-    let e = [0, ..\"foo\"]; //~ ERROR expected positive integer for repeat count but found string\n-    //~^ ERROR: expected `uint` but found `&'static str`\n+    let a = [0, ..n]; //~ ERROR expected constant integer for repeat count, found variable\n+    let b = [0, ..()]; //~ ERROR expected positive integer for repeat count, found ()\n+    //~^ ERROR: expected `uint`, found `()`\n+    let c = [0, ..true]; //~ ERROR expected positive integer for repeat count, found boolean\n+    //~^ ERROR: expected `uint`, found `bool`\n+    let d = [0, ..0.5]; //~ ERROR expected positive integer for repeat count, found float\n+    //~^ ERROR: expected `uint`, found `<generic float #0>`\n+    let e = [0, ..\"foo\"]; //~ ERROR expected positive integer for repeat count, found string\n+    //~^ ERROR: expected `uint`, found `&'static str`\n     let f = [0, ..-4];\n-    //~^ ERROR expected positive integer for repeat count but found negative integer\n+    //~^ ERROR expected positive integer for repeat count, found negative integer\n     let f = [0u, ..-1];\n-    //~^ ERROR expected positive integer for repeat count but found negative integer\n+    //~^ ERROR expected positive integer for repeat count, found negative integer\n }"}, {"sha": "aebe78b18e04713ce30260ff4c4351074446c68d", "filename": "src/test/compile-fail/slightly-nice-generic-literal-messages.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -13,7 +13,7 @@ struct Foo<T,U>(T);\n fn main() {\n     match Foo(1.1) {\n         1 => {}\n-        //~^ ERROR expected `Foo<<generic float #0>,<generic #2>>` but found `<generic integer #0>`\n+        //~^ ERROR expected `Foo<<generic float #0>,<generic #2>>`, found `<generic integer #0>`\n     }\n \n }"}, {"sha": "af6fc64535149a519b313d6a868fe5137c08d957", "filename": "src/test/compile-fail/struct-base-wrong-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -12,11 +12,11 @@ struct Foo { a: int, b: int }\n struct Bar { x: int }\n \n static bar: Bar = Bar { x: 5 };\n-static foo: Foo = Foo { a: 2, ..bar }; //~ ERROR mismatched types: expected `Foo` but found `Bar`\n+static foo: Foo = Foo { a: 2, ..bar }; //~ ERROR mismatched types: expected `Foo`, found `Bar`\n static foo_i: Foo = Foo { a: 2, ..4 }; //~ ERROR mismatched types: expected `Foo`\n \n fn main() {\n     let b = Bar { x: 5 };\n-    let f = Foo { a: 2, ..b }; //~ ERROR mismatched types: expected `Foo` but found `Bar`\n+    let f = Foo { a: 2, ..b }; //~ ERROR mismatched types: expected `Foo`, found `Bar`\n     let f_i = Foo { a: 2, ..4 }; //~ ERROR mismatched types: expected `Foo`\n }"}, {"sha": "a0a481401bd214e5bf65b68f430093944ab878c8", "filename": "src/test/compile-fail/structure-constructor-type-mismatch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -24,25 +24,25 @@ type PairF<U> = Pair<f32,U>;\n \n fn main() {\n     let pt = PointF {\n-        //~^ ERROR expected f32 but found int\n+        //~^ ERROR expected f32, found int\n         x: 1i,\n         y: 2i,\n     };\n \n     let pt2 = Point::<f32> {\n-        //~^ ERROR expected f32 but found int\n+        //~^ ERROR expected f32, found int\n         x: 3i,\n         y: 4i,\n     };\n \n     let pair = PairF {\n-        //~^ ERROR expected f32 but found int\n+        //~^ ERROR expected f32, found int\n         x: 5i,\n         y: 6i,\n     };\n \n     let pair2 = PairF::<int> {\n-        //~^ ERROR expected f32 but found int\n+        //~^ ERROR expected f32, found int\n         x: 7i,\n         y: 8i,\n     };"}, {"sha": "f13aabe52594aef923b37ef2b3d63ed0b0ffdda8", "filename": "src/test/compile-fail/suppressed-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let (x, y) = (); //~ ERROR expected `()` but found tuple (types differ)\n+    let (x, y) = (); //~ ERROR expected `()`, found tuple (types differ)\n     return x;\n }"}, {"sha": "9615e32bb1acf28f88ff00da9d2907467393bfe0", "filename": "src/test/compile-fail/tag-that-dare-not-speak-its-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:mismatched types: expected `char` but found\n+// error-pattern:mismatched types: expected `char`, found\n // Issue #876\n \n #![no_implicit_prelude]"}, {"sha": "88da7bc854201011056e68a802c4eff5d6e5b234", "filename": "src/test/compile-fail/terr-in-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -20,7 +20,7 @@ struct bar {\n \n fn want_foo(f: foo) {}\n fn have_bar(b: bar) {\n-    want_foo(b); //~ ERROR (expected struct foo but found struct bar)\n+    want_foo(b); //~ ERROR (expected struct foo, found struct bar)\n }\n \n fn main() {}"}, {"sha": "0817d7c610ad1987297b88130ab615a16a82d8c7", "filename": "src/test/compile-fail/terr-sorts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -20,7 +20,7 @@ type bar = Gc<foo>;\n \n fn want_foo(f: foo) {}\n fn have_bar(b: bar) {\n-    want_foo(b); //~ ERROR (expected struct foo but found Gc-ptr)\n+    want_foo(b); //~ ERROR (expected struct foo, found Gc-ptr)\n }\n \n fn main() {}"}, {"sha": "55e5a02cfaebf070948179155a3dd8954b3c3e38", "filename": "src/test/compile-fail/trait-coercion-generic-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -25,7 +25,7 @@ impl Trait<&'static str> for Struct {\n \n fn main() {\n     let s: Box<Trait<int>> = box Struct { person: \"Fred\" };\n-    //~^ ERROR expected Trait<int>, but found Trait<&'static str>\n-    //~^^ ERROR expected Trait<int>, but found Trait<&'static str>\n+    //~^ ERROR expected Trait<int>, found Trait<&'static str>\n+    //~^^ ERROR expected Trait<int>, found Trait<&'static str>\n     s.f(1);\n }"}, {"sha": "bd844cc58603eed2554c87bbbafe29f468deb764", "filename": "src/test/compile-fail/trait-impl-method-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -18,7 +18,7 @@ trait Mumbo {\n impl Mumbo for uint {\n     // Cannot have a larger effect than the trait:\n     unsafe fn jumbo(&self, x: Gc<uint>) { *self + *x; }\n-    //~^ ERROR expected normal fn but found unsafe fn\n+    //~^ ERROR expected normal fn, found unsafe fn\n }\n \n fn main() {}"}, {"sha": "27d272c9f319b4e6f9485a2e2f8eaff7597b5e8f", "filename": "src/test/compile-fail/tuple-arity-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -14,5 +14,5 @@ fn first((value, _): (int, f64)) -> int { value }\n \n fn main() {\n     let y = first ((1,2,3));\n-    //~^ ERROR expected a tuple with 2 elements but found one with 3 elements\n+    //~^ ERROR expected a tuple with 2 elements, found one with 3 elements\n }"}, {"sha": "c1be54b3f75e1256d94b3e911eb876caf61e031d", "filename": "src/test/compile-fail/tutorial-suffix-inference-test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -17,16 +17,16 @@ fn main() {\n \n     identity_u8(x);  // after this, `x` is assumed to have type `u8`\n     identity_u16(x);\n-    //~^ ERROR mismatched types: expected `u16` but found `u8`\n+    //~^ ERROR mismatched types: expected `u16`, found `u8`\n     identity_u16(y);\n-    //~^ ERROR mismatched types: expected `u16` but found `i32`\n+    //~^ ERROR mismatched types: expected `u16`, found `i32`\n \n     let a = 3i;\n \n     fn identity_i(n: int) -> int { n }\n \n     identity_i(a); // ok\n     identity_u16(a);\n-    //~^ ERROR mismatched types: expected `u16` but found `int`\n+    //~^ ERROR mismatched types: expected `u16`, found `int`\n \n }"}, {"sha": "e1a29afa737c8c43d13a8fc6e739efd7fc97c2c9", "filename": "src/test/compile-fail/type-parameter-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftype-parameter-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftype-parameter-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-names.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -11,6 +11,6 @@\n // Test that we print out the names of type parameters correctly in\n // our error messages.\n \n-fn foo<Foo, Bar>(x: Foo) -> Bar { x } //~ ERROR expected `Bar` but found `Foo`\n+fn foo<Foo, Bar>(x: Foo) -> Bar { x } //~ ERROR expected `Bar`, found `Foo`\n \n fn main() {}"}, {"sha": "4143d9d9b849a1f73fd0570ea4a526502a9d1c78", "filename": "src/test/compile-fail/type-params-in-different-spaces-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -15,12 +15,12 @@ trait Tr<T> {\n // these compile as if Self: Tr<U>, even tho only Self: Tr<Self or T>\n trait A:    Tr<Self> {\n     fn test<U>(u: U) -> Self {\n-        Tr::op(u)   //~ ERROR expected Tr<U>, but found Tr<Self>\n+        Tr::op(u)   //~ ERROR expected Tr<U>, found Tr<Self>\n     }\n }\n trait B<T>: Tr<T> {\n     fn test<U>(u: U) -> Self {\n-        Tr::op(u)   //~ ERROR expected Tr<U>, but found Tr<T>\n+        Tr::op(u)   //~ ERROR expected Tr<U>, found Tr<T>\n     }\n }\n "}, {"sha": "0f9cfab7b8aeb74ecc93339b561b4eeb216fc655", "filename": "src/test/compile-fail/typeck_type_placeholder_lifetime_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -17,5 +17,5 @@ struct Foo<'a, T> {\n \n pub fn main() {\n     let c: Foo<_, _> = Foo { r: &5u };\n-    //~^ ERROR wrong number of type arguments: expected 1 but found 2\n+    //~^ ERROR wrong number of type arguments: expected 1, found 2\n }"}, {"sha": "e9671b353b984b091779a7571e6083443f7504fb", "filename": "src/test/compile-fail/typeck_type_placeholder_lifetime_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_2.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -17,5 +17,5 @@ struct Foo<'a, T> {\n \n pub fn main() {\n     let c: Foo<_, uint> = Foo { r: &5 };\n-    //~^ ERROR wrong number of type arguments: expected 1 but found 2\n+    //~^ ERROR wrong number of type arguments: expected 1, found 2\n }"}, {"sha": "29d32b10539100bc9808860606e8e9067b3f2798", "filename": "src/test/compile-fail/typeck_type_placeholder_mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -19,11 +19,11 @@ pub fn main() {\n \n fn test1() {\n     let x: Foo<_> = Bar::<uint>;\n-    //~^ ERROR mismatched types: expected `Foo<<generic #0>>` but found `Bar<uint>`\n+    //~^ ERROR mismatched types: expected `Foo<<generic #0>>`, found `Bar<uint>`\n     let y: Foo<uint> = x;\n }\n \n fn test2() {\n     let x: Foo<_> = Bar::<uint>;\n-    //~^ ERROR mismatched types: expected `Foo<<generic #0>>` but found `Bar<uint>`\n+    //~^ ERROR mismatched types: expected `Foo<<generic #0>>`, found `Bar<uint>`\n }"}, {"sha": "43db4dfd395b059e1cbd835d653a1f28b28928ab", "filename": "src/test/compile-fail/unsized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -10,7 +10,7 @@\n \n // Test syntax checks for `type` keyword.\n \n-struct S1 for type; //~ ERROR expected `{`, `(`, or `;` after struct name but found `for`\n+struct S1 for type; //~ ERROR expected `{`, `(`, or `;` after struct name, found `for`\n \n pub fn main() {\n }"}, {"sha": "17a17dcdcf8d6c5119769ec98dffc389b7e1c57e", "filename": "src/test/compile-fail/variadic-ffi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -25,13 +25,13 @@ fn main() {\n \n         let x: unsafe extern \"C\" fn(f: int, x: u8) = foo;\n         //~^ ERROR: mismatched types: expected `unsafe extern \"C\" fn(int, u8)`\n-        //          but found `unsafe extern \"C\" fn(int, u8, ...)`\n-        //          (expected non-variadic fn but found variadic function)\n+        //         , found `unsafe extern \"C\" fn(int, u8, ...)`\n+        //          (expected non-variadic fn, found variadic function)\n \n         let y: unsafe extern \"C\" fn(f: int, x: u8, ...) = bar;\n         //~^ ERROR: mismatched types: expected `unsafe extern \"C\" fn(int, u8, ...)`\n-        //          but found `extern \"C\" extern fn(int, u8)`\n-        //          (expected variadic fn but found non-variadic function)\n+        //         , found `extern \"C\" extern fn(int, u8)`\n+        //          (expected variadic fn, found non-variadic function)\n \n         foo(1, 2, 3f32); //~ ERROR: can't pass an f32 to variadic function, cast to c_double\n         foo(1, 2, true); //~ ERROR: can't pass bool to variadic function, cast to c_int"}, {"sha": "e3aed148a2390bec92904898674d7efd1f8b634b", "filename": "src/test/compile-fail/wrong-mul-method-signature.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -20,7 +20,7 @@ struct Vec1 {\n // Expecting ref in input signature\n impl Mul<f64, Vec1> for Vec1 {\n     fn mul(&self, s: f64) -> Vec1 {\n-    //~^ ERROR: method `mul` has an incompatible type for trait: expected &-ptr but found f64\n+    //~^ ERROR: method `mul` has an incompatible type for trait: expected &-ptr, found f64\n         Vec1 {\n             x: self.x * s\n         }\n@@ -35,7 +35,7 @@ struct Vec2 {\n // Wrong type parameter ordering\n impl Mul<Vec2, f64> for Vec2 {\n     fn mul(&self, s: f64) -> Vec2 {\n-    //~^ ERROR: method `mul` has an incompatible type for trait: expected &-ptr but found f64\n+    //~^ ERROR: method `mul` has an incompatible type for trait: expected &-ptr, found f64\n         Vec2 {\n             x: self.x * s,\n             y: self.y * s\n@@ -52,7 +52,7 @@ struct Vec3 {\n // Unexpected return type\n impl Mul<f64, i32> for Vec3 {\n     fn mul(&self, s: &f64) -> f64 {\n-    //~^ ERROR: method `mul` has an incompatible type for trait: expected i32 but found f64\n+    //~^ ERROR: method `mul` has an incompatible type for trait: expected i32, found f64\n         *s\n     }\n }"}, {"sha": "31802dd9f06a065683fd407f2a44c69c67313e6c", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -65,6 +65,6 @@ fn main() {\n \n         // positive test so that this test will be updated when the\n         // compiler changes.\n-        assert!(err.as_slice().contains(\"expected item but found\"))\n+        assert!(err.as_slice().contains(\"expected item, found\"))\n     }\n }"}, {"sha": "d4b77ea4976029b018be912ce253cacb9b9f574d", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968ae255495704cb0c3fc1f43d2df2e84c20d5e/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=9968ae255495704cb0c3fc1f43d2df2e84c20d5e", "patch": "@@ -50,7 +50,7 @@ fn add_interface(_store: int, managed_ip: String, data: json::Json) -> (String,\n             (label, bool_value(false))\n         }\n         _ => {\n-            println!(\"Expected dict for {} interfaces but found {:?}\", managed_ip, data);\n+            println!(\"Expected dict for {} interfaces, found {:?}\", managed_ip, data);\n             (\"gnos:missing-interface\".to_string(), bool_value(true))\n         }\n     }\n@@ -68,7 +68,7 @@ fn add_interfaces(store: int, managed_ip: String, device: HashMap<String, json::\n         }\n         _ =>\n         {\n-            println!(\"Expected list for {} interfaces but found {:?}\", managed_ip,\n+            println!(\"Expected list for {} interfaces, found {:?}\", managed_ip,\n                    device.get(&\"interfaces\".to_string()));\n             Vec::new()\n         }"}]}