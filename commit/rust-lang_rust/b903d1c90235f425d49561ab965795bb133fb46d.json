{"sha": "b903d1c90235f425d49561ab965795bb133fb46d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MDNkMWM5MDIzNWY0MjVkNDk1NjFhYjk2NTc5NWJiMTMzZmI0NmQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-05-24T18:04:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-24T18:04:52Z"}, "message": "Merge pull request #2797 from mipli/2250-unimplemented-macro\n\nLint for unimplemented!()", "tree": {"sha": "cfe64d0faac0e2d6094855bf7ec68d3cedeed9ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfe64d0faac0e2d6094855bf7ec68d3cedeed9ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b903d1c90235f425d49561ab965795bb133fb46d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbBv7ECRBK7hj4Ov3rIwAAdHIIAGrCEIql+oDOFT7yFR6vsQYU\nA8UGvWSk3RDT3JcRB1gkpdaJodzgKeEoNtnqV/67X8M45rKcPmznP/7IXH0icl/N\nga44hUaKWBzfqt/yLE3DCDNIJdgJ+uciYxrk93t8YkDt2Sdw+lVuAAGU11ZiACNk\nML126DM+yHoo/rwYpDwQQvuk0pI3q///iLbmzmtENMHCACHi0qto3vSpMWgPmFSD\ncQcsz6mm4mm9oEjsJtsYxfO8e0uVRuftqBZ9/oHyAoGy1s4O0VhqfY3vJjuzJCDV\nPVt+7ItCommCyiE9ti32jWR0DAo+PYagp7kb9jh8a7Kgwaob1HF74YSsqctdhO0=\n=LvXy\n-----END PGP SIGNATURE-----\n", "payload": "tree cfe64d0faac0e2d6094855bf7ec68d3cedeed9ce\nparent e7a3e03c6e7dd2c342847adec6b3531324195d31\nparent 1f10dd26069d94488bbcb9669e4b60c66e295c60\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1527185092 +0200\ncommitter GitHub <noreply@github.com> 1527185092 +0200\n\nMerge pull request #2797 from mipli/2250-unimplemented-macro\n\nLint for unimplemented!()"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b903d1c90235f425d49561ab965795bb133fb46d", "html_url": "https://github.com/rust-lang/rust/commit/b903d1c90235f425d49561ab965795bb133fb46d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b903d1c90235f425d49561ab965795bb133fb46d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7a3e03c6e7dd2c342847adec6b3531324195d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a3e03c6e7dd2c342847adec6b3531324195d31", "html_url": "https://github.com/rust-lang/rust/commit/e7a3e03c6e7dd2c342847adec6b3531324195d31"}, {"sha": "1f10dd26069d94488bbcb9669e4b60c66e295c60", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f10dd26069d94488bbcb9669e4b60c66e295c60", "html_url": "https://github.com/rust-lang/rust/commit/1f10dd26069d94488bbcb9669e4b60c66e295c60"}], "stats": {"total": 199, "additions": 130, "deletions": 69}, "files": [{"sha": "9e233837be4345b0ef263a3167353cdd9e4c94d0", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b903d1c90235f425d49561ab965795bb133fb46d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b903d1c90235f425d49561ab965795bb133fb46d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b903d1c90235f425d49561ab965795bb133fb46d", "patch": "@@ -815,6 +815,7 @@ All notable changes to this project will be documented in this file.\n [`trivial_regex`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#trivial_regex\n [`type_complexity`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#type_complexity\n [`unicode_not_nfc`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unicode_not_nfc\n+[`unimplemented`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unimplemented\n [`unit_arg`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unit_arg\n [`unit_cmp`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unit_cmp\n [`unnecessary_cast`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unnecessary_cast"}, {"sha": "506615014778c6e88a36343fbe0d4c2d96350619", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903d1c90235f425d49561ab965795bb133fb46d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b903d1c90235f425d49561ab965795bb133fb46d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b903d1c90235f425d49561ab965795bb133fb46d", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 258 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+[There are 259 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "aaf2ef5738c34f45baf0423af60efd32ea746d66", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b903d1c90235f425d49561ab965795bb133fb46d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903d1c90235f425d49561ab965795bb133fb46d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b903d1c90235f425d49561ab965795bb133fb46d", "patch": "@@ -177,7 +177,7 @@ pub mod non_expressive_names;\n pub mod ok_if_let;\n pub mod open_options;\n pub mod overflow_check_conditional;\n-pub mod panic;\n+pub mod panic_unimplemented;\n pub mod partialeq_ne_impl;\n pub mod precedence;\n pub mod ptr;\n@@ -352,7 +352,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box escape::Pass{too_large_for_stack: conf.too_large_for_stack});\n     reg.register_early_lint_pass(box misc_early::MiscEarly);\n     reg.register_late_lint_pass(box array_indexing::ArrayIndexing);\n-    reg.register_late_lint_pass(box panic::Pass);\n+    reg.register_late_lint_pass(box panic_unimplemented::Pass);\n     reg.register_late_lint_pass(box strings::StringLitAsBytes);\n     reg.register_late_lint_pass(box derive::Derive);\n     reg.register_late_lint_pass(box types::CharLitAsU8);\n@@ -434,6 +434,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         methods::WRONG_PUB_SELF_CONVENTION,\n         misc::FLOAT_CMP_CONST,\n         missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n+        panic_unimplemented::UNIMPLEMENTED,\n         shadow::SHADOW_REUSE,\n         shadow::SHADOW_SAME,\n         shadow::SHADOW_UNRELATED,\n@@ -626,7 +627,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         ok_if_let::IF_LET_SOME_RESULT,\n         open_options::NONSENSICAL_OPEN_OPTIONS,\n         overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n-        panic::PANIC_PARAMS,\n+        panic_unimplemented::PANIC_PARAMS,\n         partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n         precedence::PRECEDENCE,\n         ptr::CMP_NULL,\n@@ -748,7 +749,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         non_expressive_names::JUST_UNDERSCORES_AND_DIGITS,\n         non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n         ok_if_let::IF_LET_SOME_RESULT,\n-        panic::PANIC_PARAMS,\n+        panic_unimplemented::PANIC_PARAMS,\n         ptr::CMP_NULL,\n         ptr::PTR_ARG,\n         question_mark::QUESTION_MARK,"}, {"sha": "bd44b8d9b03302a89d5863fc1d8e456a038f5d1e", "filename": "clippy_lints/src/panic.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e7a3e03c6e7dd2c342847adec6b3531324195d31/clippy_lints%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a3e03c6e7dd2c342847adec6b3531324195d31/clippy_lints%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic.rs?ref=e7a3e03c6e7dd2c342847adec6b3531324195d31", "patch": "@@ -1,58 +0,0 @@\n-use rustc::hir::*;\n-use rustc::lint::*;\n-use syntax::ast::LitKind;\n-use utils::{is_direct_expn_of, match_def_path, opt_def_id, paths, resolve_node, span_lint};\n-\n-/// **What it does:** Checks for missing parameters in `panic!`.\n-///\n-/// **Why is this bad?** Contrary to the `format!` family of macros, there are\n-/// two forms of `panic!`: if there are no parameters given, the first argument\n-/// is not a format string and used literally. So while `format!(\"{}\")` will\n-/// fail to compile, `panic!(\"{}\")` will not.\n-///\n-/// **Known problems:** None.\n-///\n-/// **Example:**\n-/// ```rust\n-/// panic!(\"This `panic!` is probably missing a parameter there: {}\");\n-/// ```\n-declare_clippy_lint! {\n-    pub PANIC_PARAMS,\n-    style,\n-    \"missing parameters in `panic!` calls\"\n-}\n-\n-#[allow(missing_copy_implementations)]\n-pub struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(PANIC_PARAMS)\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if_chain! {\n-            if let ExprBlock(ref block, _) = expr.node;\n-            if let Some(ref ex) = block.expr;\n-            if let ExprCall(ref fun, ref params) = ex.node;\n-            if params.len() == 2;\n-            if let ExprPath(ref qpath) = fun.node;\n-            if let Some(fun_def_id) = opt_def_id(resolve_node(cx, qpath, fun.hir_id));\n-            if match_def_path(cx.tcx, fun_def_id, &paths::BEGIN_PANIC);\n-            if let ExprLit(ref lit) = params[0].node;\n-            if is_direct_expn_of(expr.span, \"panic\").is_some();\n-            if let LitKind::Str(ref string, _) = lit.node;\n-            let string = string.as_str().replace(\"{{\", \"\").replace(\"}}\", \"\");\n-            if let Some(par) = string.find('{');\n-            if string[par..].contains('}');\n-            if params[0].span.source_callee().is_none();\n-            if params[0].span.lo() != params[0].span.hi();\n-            then {\n-                span_lint(cx, PANIC_PARAMS, params[0].span,\n-                          \"you probably are missing some parameter in your format string\");\n-            }\n-        }\n-    }\n-}"}, {"sha": "b257f5b3b940f9f34c2c988261661142e806d9f5", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/b903d1c90235f425d49561ab965795bb133fb46d/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903d1c90235f425d49561ab965795bb133fb46d/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=b903d1c90235f425d49561ab965795bb133fb46d", "patch": "@@ -0,0 +1,102 @@\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use syntax::ast::LitKind;\n+use syntax::ptr::P;\n+use syntax::ext::quote::rt::Span;\n+use utils::{is_direct_expn_of, is_expn_of, match_def_path, opt_def_id, paths, resolve_node, span_lint};\n+\n+/// **What it does:** Checks for missing parameters in `panic!`.\n+///\n+/// **Why is this bad?** Contrary to the `format!` family of macros, there are\n+/// two forms of `panic!`: if there are no parameters given, the first argument\n+/// is not a format string and used literally. So while `format!(\"{}\")` will\n+/// fail to compile, `panic!(\"{}\")` will not.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// panic!(\"This `panic!` is probably missing a parameter there: {}\");\n+/// ```\n+declare_clippy_lint! {\n+    pub PANIC_PARAMS,\n+    style,\n+    \"missing parameters in `panic!` calls\"\n+}\n+\n+/// **What it does:** Checks for usage of `unimplemented!`.\n+///\n+/// **Why is this bad?** This macro should not be present in production code\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// unimplemented!();\n+/// ```\n+declare_clippy_lint! {\n+    pub UNIMPLEMENTED,\n+    restriction,\n+    \"`unimplemented!` should not be present in production code\"\n+}\n+\n+#[allow(missing_copy_implementations)]\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(PANIC_PARAMS, UNIMPLEMENTED)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_chain! {\n+            if let ExprBlock(ref block, _) = expr.node;\n+            if let Some(ref ex) = block.expr;\n+            if let ExprCall(ref fun, ref params) = ex.node;\n+            if let ExprPath(ref qpath) = fun.node;\n+            if let Some(fun_def_id) = opt_def_id(resolve_node(cx, qpath, fun.hir_id));\n+            if match_def_path(cx.tcx, fun_def_id, &paths::BEGIN_PANIC);\n+            if params.len() == 2;\n+            then {\n+                if is_expn_of(expr.span, \"unimplemented\").is_some() {\n+                    let span = get_outer_span(expr);\n+                    span_lint(cx, UNIMPLEMENTED, span,\n+                              \"`unimplemented` should not be present in production code\");\n+                } else {\n+                    match_panic(params, expr, cx);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn get_outer_span(expr: &Expr) -> Span {\n+    if_chain! {\n+        if let Some(first) = expr.span.ctxt().outer().expn_info();\n+        if let Some(second) = first.call_site.ctxt().outer().expn_info();\n+        then {\n+            second.call_site\n+        } else {\n+            expr.span\n+        }\n+    }\n+}\n+\n+fn match_panic(params: &P<[Expr]>, expr: &Expr, cx: &LateContext) {\n+    if_chain! {\n+        if let ExprLit(ref lit) = params[0].node;\n+        if is_direct_expn_of(expr.span, \"panic\").is_some();\n+        if let LitKind::Str(ref string, _) = lit.node;\n+        let string = string.as_str().replace(\"{{\", \"\").replace(\"}}\", \"\");\n+        if let Some(par) = string.find('{');\n+        if string[par..].contains('}');\n+        if params[0].span.source_callee().is_none();\n+        if params[0].span.lo() != params[0].span.hi();\n+        then {\n+            span_lint(cx, PANIC_PARAMS, params[0].span,\n+                      \"you probably are missing some parameter in your format string\");\n+        }\n+    }\n+}"}, {"sha": "33050633f7fbae22e7564daa37673da9d3604a43", "filename": "tests/ui/panic_unimplemented.rs", "status": "renamed", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b903d1c90235f425d49561ab965795bb133fb46d/tests%2Fui%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903d1c90235f425d49561ab965795bb133fb46d/tests%2Fui%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_unimplemented.rs?ref=b903d1c90235f425d49561ab965795bb133fb46d", "patch": "@@ -1,7 +1,7 @@\n \n \n \n-#![warn(panic_params)]\n+#![warn(panic_params, unimplemented)]\n \n fn missing() {\n     if true {\n@@ -53,6 +53,12 @@ fn ok_escaped() {\n     panic!(\"{case }}\");\n }\n \n+fn unimplemented() {\n+    let a = 2;\n+    unimplemented!();\n+    let b = a + 2;\n+}\n+\n fn main() {\n     missing();\n     ok_single();\n@@ -61,4 +67,5 @@ fn main() {\n     ok_inner();\n     ok_nomsg();\n     ok_escaped();\n+    unimplemented();\n }", "previous_filename": "tests/ui/panic.rs"}, {"sha": "3bf5589c46825675eb94839b3c55faa1bb84774e", "filename": "tests/ui/panic_unimplemented.stderr", "status": "renamed", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b903d1c90235f425d49561ab965795bb133fb46d/tests%2Fui%2Fpanic_unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b903d1c90235f425d49561ab965795bb133fb46d/tests%2Fui%2Fpanic_unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_unimplemented.stderr?ref=b903d1c90235f425d49561ab965795bb133fb46d", "patch": "@@ -1,28 +1,36 @@\n error: you probably are missing some parameter in your format string\n- --> $DIR/panic.rs:8:16\n+ --> $DIR/panic_unimplemented.rs:8:16\n   |\n 8 |         panic!(\"{}\");\n   |                ^^^^\n   |\n   = note: `-D panic-params` implied by `-D warnings`\n \n error: you probably are missing some parameter in your format string\n-  --> $DIR/panic.rs:10:16\n+  --> $DIR/panic_unimplemented.rs:10:16\n    |\n 10 |         panic!(\"{:?}\");\n    |                ^^^^^^\n \n error: you probably are missing some parameter in your format string\n-  --> $DIR/panic.rs:12:23\n+  --> $DIR/panic_unimplemented.rs:12:23\n    |\n 12 |         assert!(true, \"here be missing values: {}\");\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you probably are missing some parameter in your format string\n-  --> $DIR/panic.rs:15:12\n+  --> $DIR/panic_unimplemented.rs:15:12\n    |\n 15 |     panic!(\"{{{this}}}\");\n    |            ^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: `unimplemented` should not be present in production code\n+  --> $DIR/panic_unimplemented.rs:58:5\n+   |\n+58 |     unimplemented!();\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D unimplemented` implied by `-D warnings`\n+\n+error: aborting due to 5 previous errors\n ", "previous_filename": "tests/ui/panic.stderr"}]}