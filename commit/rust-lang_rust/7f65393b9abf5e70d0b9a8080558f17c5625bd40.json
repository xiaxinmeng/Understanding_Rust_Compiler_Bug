{"sha": "7f65393b9abf5e70d0b9a8080558f17c5625bd40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNjUzOTNiOWFiZjVlNzBkMGI5YTgwODA1NThmMTdjNTYyNWJkNDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-01T18:00:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-01T18:00:52Z"}, "message": "Auto merge of #71759 - Dylan-DPC:rollup-5hncork, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #71744 (remove obsolete comment)\n - #71747 (Remove deadcode in eval_mir_constant_to_operand)\n - #71749 (fix Miri error message padding)\n - #71752 (make Stability doc a more readable (and fix rustdoc warning))\n - #71755 (fix doc reference)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "c2a5677067df14713207d9d45aa6d76fc9420ba6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2a5677067df14713207d9d45aa6d76fc9420ba6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f65393b9abf5e70d0b9a8080558f17c5625bd40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f65393b9abf5e70d0b9a8080558f17c5625bd40", "html_url": "https://github.com/rust-lang/rust/commit/7f65393b9abf5e70d0b9a8080558f17c5625bd40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f65393b9abf5e70d0b9a8080558f17c5625bd40/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a91d64873f5b8daa43f0e82dedad7e2bc39e8fba", "url": "https://api.github.com/repos/rust-lang/rust/commits/a91d64873f5b8daa43f0e82dedad7e2bc39e8fba", "html_url": "https://github.com/rust-lang/rust/commit/a91d64873f5b8daa43f0e82dedad7e2bc39e8fba"}, {"sha": "da42f6897e30e182b3372b996de2be3da3f42ed5", "url": "https://api.github.com/repos/rust-lang/rust/commits/da42f6897e30e182b3372b996de2be3da3f42ed5", "html_url": "https://github.com/rust-lang/rust/commit/da42f6897e30e182b3372b996de2be3da3f42ed5"}], "stats": {"total": 42, "additions": 12, "deletions": 30}, "files": [{"sha": "0a6a4821e278ec85eb6f74b706e0abeb62086823", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f65393b9abf5e70d0b9a8080558f17c5625bd40/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f65393b9abf5e70d0b9a8080558f17c5625bd40/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=7f65393b9abf5e70d0b9a8080558f17c5625bd40", "patch": "@@ -119,7 +119,11 @@ pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Op\n     })\n }\n \n-/// Represents the #[stable], #[unstable], #[rustc_deprecated] attributes.\n+/// Represents the following attributes:\n+///\n+/// - `#[stable]`\n+/// - `#[unstable]`\n+/// - `#[rustc_deprecated]`\n #[derive(RustcEncodable, RustcDecodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n #[derive(HashStable_Generic)]\n pub struct Stability {\n@@ -128,7 +132,7 @@ pub struct Stability {\n     pub rustc_depr: Option<RustcDeprecation>,\n }\n \n-/// Represents the #[rustc_const_unstable] and #[rustc_const_stable] attributes.\n+/// Represents the `#[rustc_const_unstable]` and `#[rustc_const_stable]` attributes.\n #[derive(RustcEncodable, RustcDecodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n #[derive(HashStable_Generic)]\n pub struct ConstStability {"}, {"sha": "d2629b771c2af5b631766f4afe308166fbb2edcc", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7f65393b9abf5e70d0b9a8080558f17c5625bd40/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f65393b9abf5e70d0b9a8080558f17c5625bd40/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=7f65393b9abf5e70d0b9a8080558f17c5625bd40", "patch": "@@ -16,25 +16,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx: &mut Bx,\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<OperandRef<'tcx, Bx::Value>, ErrorHandled> {\n-        match constant.literal.val {\n-            // Special case unevaluated statics, because statics have an identity and thus should\n-            // use `get_static` to get at their id.\n-            // FIXME(oli-obk): can we unify this somehow, maybe by making const eval of statics\n-            // always produce `&STATIC`. This may also simplify how const eval works with statics.\n-            ty::ConstKind::Unevaluated(def_id, substs, None) if self.cx.tcx().is_static(def_id) => {\n-                assert!(substs.is_empty(), \"we don't support generic statics yet\");\n-                let static_ = bx.get_static(def_id);\n-                // we treat operands referring to statics as if they were `&STATIC` instead\n-                let ptr_ty = self.cx.tcx().mk_mut_ptr(self.monomorphize(&constant.literal.ty));\n-                let layout = bx.layout_of(ptr_ty);\n-                Ok(OperandRef::from_immediate_or_packed_pair(bx, static_, layout))\n-            }\n-            _ => {\n-                let val = self.eval_mir_constant(constant)?;\n-                let ty = self.monomorphize(&constant.literal.ty);\n-                Ok(OperandRef::from_const(bx, val, ty))\n-            }\n-        }\n+        let val = self.eval_mir_constant(constant)?;\n+        let ty = self.monomorphize(&constant.literal.ty);\n+        Ok(OperandRef::from_const(bx, val, ty))\n     }\n \n     pub fn eval_mir_constant("}, {"sha": "258428d77da109aa8d94f31a95847a5d162d1255", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f65393b9abf5e70d0b9a8080558f17c5625bd40/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f65393b9abf5e70d0b9a8080558f17c5625bd40/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=7f65393b9abf5e70d0b9a8080558f17c5625bd40", "patch": "@@ -2050,7 +2050,7 @@ pub struct Param<'hir> {\n pub struct FnDecl<'hir> {\n     /// The types of the function's parameters.\n     ///\n-    /// Additional argument data is stored in the function's [body](Body::parameters).\n+    /// Additional argument data is stored in the function's [body](Body::params).\n     pub inputs: &'hir [Ty<'hir>],\n     pub output: FnRetTy<'hir>,\n     pub c_variadic: bool,"}, {"sha": "1292e96ff98e7d3c378202ddb5e14f222e3fbb34", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f65393b9abf5e70d0b9a8080558f17c5625bd40/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f65393b9abf5e70d0b9a8080558f17c5625bd40/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=7f65393b9abf5e70d0b9a8080558f17c5625bd40", "patch": "@@ -147,11 +147,6 @@ impl Constraint<'_> {\n     }\n }\n \n-/// `VerifyGenericBound(T, _, R, RS)`: the parameter type `T` (or\n-/// associated type) must outlive the region `R`. `T` is known to\n-/// outlive `RS`. Therefore, verify that `R <= RS[i]` for some\n-/// `i`. Inference variables may be involved (but this verification\n-/// step doesn't influence inference).\n #[derive(Debug, Clone)]\n pub struct Verify<'tcx> {\n     pub kind: GenericKind<'tcx>,\n@@ -687,7 +682,6 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         }\n     }\n \n-    /// See [`Verify::VerifyGenericBound`].\n     pub fn verify_generic_bound(\n         &mut self,\n         origin: SubregionOrigin<'tcx>,"}, {"sha": "0ab14b53e1b1f3954f00fb9daa94f91f0dab43ff", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f65393b9abf5e70d0b9a8080558f17c5625bd40/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f65393b9abf5e70d0b9a8080558f17c5625bd40/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=7f65393b9abf5e70d0b9a8080558f17c5625bd40", "patch": "@@ -439,10 +439,10 @@ impl fmt::Display for UndefinedBehaviorInfo {\n             DerefFunctionPointer(a) => write!(f, \"accessing {} which contains a function\", a),\n             ValidationFailure(ref err) => write!(f, \"type validation failed: {}\", err),\n             InvalidBool(b) => {\n-                write!(f, \"interpreting an invalid 8-bit value as a bool: 0x{:2x}\", b)\n+                write!(f, \"interpreting an invalid 8-bit value as a bool: 0x{:02x}\", b)\n             }\n             InvalidChar(c) => {\n-                write!(f, \"interpreting an invalid 32-bit value as a char: 0x{:8x}\", c)\n+                write!(f, \"interpreting an invalid 32-bit value as a char: 0x{:08x}\", c)\n             }\n             InvalidDiscriminant(val) => write!(f, \"enum value has invalid discriminant: {}\", val),\n             InvalidFunctionPointer(p) => {"}]}