{"sha": "fed5727ea2669712e5d85502767b5c150203ecfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZDU3MjdlYTI2Njk3MTJlNWQ4NTUwMjc2N2I1YzE1MDIwM2VjZmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-25T10:17:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-25T10:17:54Z"}, "message": "start incremental reparse", "tree": {"sha": "efcc5a784b44177caf5c585f1de9c22a0b715ef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efcc5a784b44177caf5c585f1de9c22a0b715ef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fed5727ea2669712e5d85502767b5c150203ecfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fed5727ea2669712e5d85502767b5c150203ecfc", "html_url": "https://github.com/rust-lang/rust/commit/fed5727ea2669712e5d85502767b5c150203ecfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fed5727ea2669712e5d85502767b5c150203ecfc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32c8ea93074286f3111317fe3077698c0afe929f", "url": "https://api.github.com/repos/rust-lang/rust/commits/32c8ea93074286f3111317fe3077698c0afe929f", "html_url": "https://github.com/rust-lang/rust/commit/32c8ea93074286f3111317fe3077698c0afe929f"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "bd6c84886d5ce0db83322e7a3316643062370c7d", "filename": "crates/libsyntax2/src/grammar/expressions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed5727ea2669712e5d85502767b5c150203ecfc/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed5727ea2669712e5d85502767b5c150203ecfc/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fmod.rs?ref=fed5727ea2669712e5d85502767b5c150203ecfc", "patch": "@@ -25,7 +25,7 @@ fn expr_no_struct(p: &mut Parser) {\n // fn b() { let _ = 1; }\n // fn c() { 1; 2; }\n // fn d() { 1; 2 }\n-pub(super) fn block(p: &mut Parser) {\n+pub(crate) fn block(p: &mut Parser) {\n     assert!(p.at(L_CURLY));\n     let m = p.start();\n     p.bump();"}, {"sha": "44ab92c634c748ba4638b587e0712af969f15e0b", "filename": "crates/libsyntax2/src/grammar/items/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed5727ea2669712e5d85502767b5c150203ecfc/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed5727ea2669712e5d85502767b5c150203ecfc/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs?ref=fed5727ea2669712e5d85502767b5c150203ecfc", "patch": "@@ -1,10 +1,12 @@\n-use super::*;\n \n mod consts;\n mod structs;\n mod traits;\n mod use_item;\n \n+use super::*;\n+pub(crate) use self::structs::named_field_def_list;\n+\n // test mod_contents\n // fn foo() {}\n // macro_rules! foo {}"}, {"sha": "93d3381f8bc254189be27a6aa695296e0741f1ea", "filename": "crates/libsyntax2/src/grammar/items/structs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed5727ea2669712e5d85502767b5c150203ecfc/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed5727ea2669712e5d85502767b5c150203ecfc/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fstructs.rs?ref=fed5727ea2669712e5d85502767b5c150203ecfc", "patch": "@@ -82,7 +82,7 @@ fn enum_variant_list(p: &mut Parser) {\n     m.complete(p, ENUM_VARIANT_LIST);\n }\n \n-fn named_field_def_list(p: &mut Parser) {\n+pub(crate) fn named_field_def_list(p: &mut Parser) {\n     assert!(p.at(L_CURLY));\n     let m = p.start();\n     p.bump();"}, {"sha": "46ba8a89afacd99e2f98a1d1cff48a53413c9397", "filename": "crates/libsyntax2/src/grammar/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed5727ea2669712e5d85502767b5c150203ecfc/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed5727ea2669712e5d85502767b5c150203ecfc/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs?ref=fed5727ea2669712e5d85502767b5c150203ecfc", "patch": "@@ -35,6 +35,10 @@ use {\n     parser_api::{Marker, CompletedMarker, Parser, TokenSet},\n     SyntaxKind::{self, *},\n };\n+pub(crate) use self::{\n+    expressions::block,\n+    items::named_field_def_list,\n+};\n \n pub(crate) fn file(p: &mut Parser) {\n     let file = p.start();"}, {"sha": "3a36a57b153d886a43e29147e43ae134bc327ef0", "filename": "crates/libsyntax2/src/lib.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fed5727ea2669712e5d85502767b5c150203ecfc/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed5727ea2669712e5d85502767b5c150203ecfc/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Flib.rs?ref=fed5727ea2669712e5d85502767b5c150203ecfc", "patch": "@@ -50,7 +50,11 @@ pub use {\n     yellow::{SyntaxNode, SyntaxNodeRef, OwnedRoot, RefRoot, TreeRoot, SyntaxError},\n };\n \n-use yellow::{GreenNode, SyntaxRoot};\n+use {\n+    SyntaxKind::*,\n+    yellow::{GreenNode, SyntaxRoot},\n+    parser_api::Parser,\n+};\n \n #[derive(Clone, Debug)]\n pub struct File {\n@@ -69,6 +73,22 @@ impl File {\n         let (root, errors) = parser_impl::parse::<yellow::GreenBuilder>(text, &tokens);\n         File::new(root, errors)\n     }\n+    pub fn reparse(&self, edit: &AtomEdit) -> File {\n+        self.incremental_reparse(edit).unwrap_or_else(|| {\n+            self.full_reparse(edit)\n+        })\n+    }\n+    fn incremental_reparse(&self, edit: &AtomEdit) -> Option<File> {\n+        let (node, reparser) = find_reparsable_node(self.syntax(), edit.delete)?;\n+        None\n+    }\n+    fn full_reparse(&self, edit: &AtomEdit) -> File {\n+        let start = u32::from(edit.delete.start()) as usize;\n+        let end = u32::from(edit.delete.end()) as usize;\n+        let mut text = self.syntax().text();\n+        text.replace_range(start..end, &edit.insert);\n+        File::parse(&text)\n+    }\n     pub fn ast(&self) -> ast::Root {\n         ast::Root::cast(self.syntax()).unwrap()\n     }\n@@ -132,3 +152,19 @@ impl AtomEdit {\n         AtomEdit::replace(TextRange::offset_len(offset, 0.into()), text)\n     }\n }\n+\n+fn find_reparsable_node(node: SyntaxNodeRef, range: TextRange) -> Option<(SyntaxNodeRef, fn(&mut Parser))> {\n+    let node = algo::find_covering_node(node, range);\n+    return algo::ancestors(node)\n+        .filter_map(|node| reparser(node).map(|r| (node, r)))\n+        .next();\n+\n+    fn reparser(node: SyntaxNodeRef) -> Option<fn(&mut Parser)> {\n+        let res = match node.kind() {\n+            BLOCK => grammar::block,\n+            NAMED_FIELD_DEF_LIST => grammar::named_field_def_list,\n+            _ => return None,\n+        };\n+        Some(res)\n+    }\n+}"}]}