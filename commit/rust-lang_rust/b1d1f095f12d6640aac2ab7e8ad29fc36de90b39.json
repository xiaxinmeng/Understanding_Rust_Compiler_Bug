{"sha": "b1d1f095f12d6640aac2ab7e8ad29fc36de90b39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZDFmMDk1ZjEyZDY2NDBhYWMyYWI3ZThhZDI5ZmMzNmRlOTBiMzk=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-28T16:00:24Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-28T19:24:36Z"}, "message": "Improve the DOC_MARKDOWN lint\n\n`_` can be used for emphasize text. `::` is equality as bad outside\nticks.", "tree": {"sha": "71aadc7c377e594ab07522c3f9cc1e87c98bbb09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71aadc7c377e594ab07522c3f9cc1e87c98bbb09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1d1f095f12d6640aac2ab7e8ad29fc36de90b39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d1f095f12d6640aac2ab7e8ad29fc36de90b39", "html_url": "https://github.com/rust-lang/rust/commit/b1d1f095f12d6640aac2ab7e8ad29fc36de90b39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1d1f095f12d6640aac2ab7e8ad29fc36de90b39/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42bf37f49f49829507be4f2dfd6c5db9b8234b66", "url": "https://api.github.com/repos/rust-lang/rust/commits/42bf37f49f49829507be4f2dfd6c5db9b8234b66", "html_url": "https://github.com/rust-lang/rust/commit/42bf37f49f49829507be4f2dfd6c5db9b8234b66"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "264bc6f010bbc1fe348cd7a5cbefb2c56c7bc678", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1d1f095f12d6640aac2ab7e8ad29fc36de90b39/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1d1f095f12d6640aac2ab7e8ad29fc36de90b39/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b1d1f095f12d6640aac2ab7e8ad29fc36de90b39", "patch": "@@ -43,7 +43,7 @@ name\n [cyclomatic_complexity](https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity)                       | warn    | finds functions that should be split up into multiple functions\n [deprecated_semver](https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver)                               | warn    | `Warn` on `#[deprecated(since = \"x\")]` where x is not semver\n [derive_hash_xor_eq](https://github.com/Manishearth/rust-clippy/wiki#derive_hash_xor_eq)                             | warn    | deriving `Hash` but implementing `PartialEq` explicitly\n-[doc_markdown](https://github.com/Manishearth/rust-clippy/wiki#doc_markdown)                                         | warn    | checks for the presence of the `_` character outside ticks in documentation\n+[doc_markdown](https://github.com/Manishearth/rust-clippy/wiki#doc_markdown)                                         | warn    | checks for the presence of `_`, `::` or camel-case outside ticks in documentation\n [drop_ref](https://github.com/Manishearth/rust-clippy/wiki#drop_ref)                                                 | warn    | call to `std::mem::drop` with a reference instead of an owned value, which will not call the `Drop::drop` method on the underlying value\n [duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument)       | warn    | Function arguments having names which only differ by an underscore\n [empty_loop](https://github.com/Manishearth/rust-clippy/wiki#empty_loop)                                             | warn    | empty `loop {}` detected"}, {"sha": "a4a0448c102e7a660e7486d5e04560268463be11", "filename": "src/doc.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b1d1f095f12d6640aac2ab7e8ad29fc36de90b39/src%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d1f095f12d6640aac2ab7e8ad29fc36de90b39/src%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc.rs?ref=b1d1f095f12d6640aac2ab7e8ad29fc36de90b39", "patch": "@@ -4,22 +4,23 @@ use syntax::ast;\n use syntax::codemap::Span;\n use utils::span_lint;\n \n-/// **What it does:** This lint checks for the presence of the `_` character outside ticks in\n-/// documentation.\n+/// **What it does:** This lint checks for the presence of `_`, `::` or camel-case words outside\n+/// ticks in documentation.\n ///\n-/// **Why is this bad?** *Rustdoc* supports markdown formatting, the `_` character probably\n+/// **Why is this bad?** *Rustdoc* supports markdown formatting, `_`, `::` and camel-case probably\n /// indicates some code which should be included between ticks.\n ///\n-/// **Known problems:** Lots of bad docs won\u2019t be fixed, the lint only checks for `_`.\n+/// **Known problems:** Lots of bad docs won\u2019t be fixed, what the lint checks for is limited.\n ///\n /// **Examples:**\n /// ```rust\n-/// /// Do something with the foo_bar parameter.\n+/// /// Do something with the foo_bar parameter. See also that::other::module::foo.\n+/// // ^ `foo_bar` and `that::other::module::foo` should be ticked.\n /// fn doit(foo_bar) { .. }\n /// ```\n declare_lint! {\n     pub DOC_MARKDOWN, Warn,\n-    \"checks for the presence of the `_` character outside ticks in documentation\"\n+    \"checks for the presence of `_`, `::` or camel-case outside ticks in documentation\"\n }\n \n #[derive(Copy,Clone)]\n@@ -71,10 +72,21 @@ fn collect_doc(attrs: &[ast::Attribute]) -> (Cow<str>, Option<Span>) {\n     }\n }\n \n-fn check_attrs<'a>(cx: &EarlyContext, attrs: &'a [ast::Attribute], default_span: Span) {\n+pub fn check_attrs<'a>(cx: &EarlyContext, attrs: &'a [ast::Attribute], default_span: Span) {\n     let (doc, span) = collect_doc(attrs);\n     let span = span.unwrap_or(default_span);\n \n+    // In markdown, `_` can be used to emphasize something, or, is a raw `_` depending on context.\n+    // There really is no markdown specification that would disambiguate this properly. This is\n+    // what GitHub and Rustdoc do:\n+    //\n+    // foo_bar test_quz    \u2192 foo_bar test_quz\n+    // foo_bar_baz         \u2192 foo_bar_baz (note that the \u201cofficial\u201d spec says this should be emphasized)\n+    // _foo bar_ test_quz_ \u2192 <em>foo bar</em> test_quz_\n+    // \\_foo bar\\_         \u2192 _foo bar_\n+    // (_baz_)             \u2192 (<em>baz</em>)\n+    // foo _ bar _ baz     \u2192 foo _ bar _ baz\n+\n     let mut in_ticks = false;\n     for word in doc.split_whitespace() {\n         let ticks = word.bytes().filter(|&b| b == b'`').count();\n@@ -106,7 +118,16 @@ fn check_word(cx: &EarlyContext, word: &str, span: Span) {\n         s.chars().filter(|&c| c.is_lowercase()).take(1).count() > 0\n     }\n \n-    if word.contains('_') || is_camel_case(word) {\n+    fn has_underscore(s: &str) -> bool {\n+        s != \"_\" && !s.contains(\"\\\\_\") && s.contains('_')\n+    }\n+\n+    // Trim punctuation as in `some comment (see foo::bar).`\n+    //                                                   ^^\n+    // Or even as `_foo bar_` which is emphasized.\n+    let word = word.trim_matches(|c: char| !c.is_alphanumeric());\n+\n+    if has_underscore(word) || word.contains(\"::\") || is_camel_case(word) {\n         span_lint(cx, DOC_MARKDOWN, span, &format!(\"you should put `{}` between ticks in the documentation\", word));\n     }\n }"}, {"sha": "35b5857d93725460c3e41e6447f6da800860ef35", "filename": "tests/compile-fail/doc.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1d1f095f12d6640aac2ab7e8ad29fc36de90b39/tests%2Fcompile-fail%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d1f095f12d6640aac2ab7e8ad29fc36de90b39/tests%2Fcompile-fail%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdoc.rs?ref=b1d1f095f12d6640aac2ab7e8ad29fc36de90b39", "patch": "@@ -6,9 +6,13 @@\n \n #![deny(doc_markdown)]\n \n-/// The foo_bar function does nothing.\n-//~^ ERROR: you should put `foo_bar` between ticks\n+/// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n+/// Markdown is _weird_. I mean _really weird_.  This \\_ is ok. So is `_`. But not Foo::some_fun\n+/// which should be reported only once despite being __doubly bad__.\n fn foo_bar() {\n+//~^ ERROR: you should put `foo_bar` between ticks\n+//~| ERROR: you should put `foo::bar` between ticks\n+//~| ERROR: you should put `Foo::some_fun` between ticks\n }\n \n /// That one tests multiline ticks."}]}