{"sha": "1576a7cc81c3eefa533ae84f81df4dabc0f85ee5", "node_id": "C_kwDOAAsO6NoAKDE1NzZhN2NjODFjM2VlZmE1MzNhZTg0ZjgxZGY0ZGFiYzBmODVlZTU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-11-19T04:06:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-19T04:06:38Z"}, "message": "Rollup merge of #90990 - nnethercote:arenas-cleanup, r=oli-obk\n\nArenas cleanup\n\nI was looking closely at the arenas code and here are some small improvement to readability.", "tree": {"sha": "3da746ea3f43b5f8e909bd6f66178ecf96f90ffb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3da746ea3f43b5f8e909bd6f66178ecf96f90ffb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhlyLPCRBK7hj4Ov3rIwAAzMUIAG3eYtvNPgflfySD+ypVlGRS\np8eO77Bj+bhXvh+d0wwWbrErhQyz3PBh3Q3XRiqVBCd9fz2owG8aW3UJ6TiFoB9b\nmOhiqaKzEUg5ahBZrQ+52va9lkb6LPOBZ67wtFV0sAQHQOuplNqUNMQqeDMdYysV\nSl2HqWfko+ZLb+U81waUsfwg5xry3kmR/dWYJ6FKo3c8+vM8dzwBIjf4dKUGWtDE\nQUfmhLKzXILyE7MtmoxtX7byhjYQc0Xqr8nFNpAsgMo3EAgUxJ+l3ntt6nhII6aI\n9amZHnflja45lFU8D/5vcjAIfSIqJeumSaQH0gdOGVk1eqs68/eJ1HXdEs2HvXQ=\n=3ine\n-----END PGP SIGNATURE-----\n", "payload": "tree 3da746ea3f43b5f8e909bd6f66178ecf96f90ffb\nparent c74ff8b563358435fa0da50e949159d043efc1a5\nparent 0a89598dbdf830ed16204a240e7b4f95c26f7ab4\nauthor Yuki Okushi <jtitor@2k36.org> 1637294798 +0900\ncommitter GitHub <noreply@github.com> 1637294798 +0900\n\nRollup merge of #90990 - nnethercote:arenas-cleanup, r=oli-obk\n\nArenas cleanup\n\nI was looking closely at the arenas code and here are some small improvement to readability.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5", "html_url": "https://github.com/rust-lang/rust/commit/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c74ff8b563358435fa0da50e949159d043efc1a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c74ff8b563358435fa0da50e949159d043efc1a5", "html_url": "https://github.com/rust-lang/rust/commit/c74ff8b563358435fa0da50e949159d043efc1a5"}, {"sha": "0a89598dbdf830ed16204a240e7b4f95c26f7ab4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a89598dbdf830ed16204a240e7b4f95c26f7ab4", "html_url": "https://github.com/rust-lang/rust/commit/0a89598dbdf830ed16204a240e7b4f95c26f7ab4"}], "stats": {"total": 151, "additions": 80, "deletions": 71}, "files": [{"sha": "6f9ecb9cd21e094afbc71354b6dcac6e1565a517", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=1576a7cc81c3eefa533ae84f81df4dabc0f85ee5", "patch": "@@ -111,7 +111,7 @@ impl<T> Default for TypedArena<T> {\n             // alloc() will trigger a grow().\n             ptr: Cell::new(ptr::null_mut()),\n             end: Cell::new(ptr::null_mut()),\n-            chunks: RefCell::new(vec![]),\n+            chunks: Default::default(),\n             _own: PhantomData,\n         }\n     }\n@@ -325,13 +325,17 @@ unsafe impl<#[may_dangle] T> Drop for TypedArena<T> {\n \n unsafe impl<T: Send> Send for TypedArena<T> {}\n \n+/// An arena that can hold objects of multiple different types that impl `Copy`\n+/// and/or satisfy `!mem::needs_drop`.\n pub struct DroplessArena {\n     /// A pointer to the start of the free space.\n     start: Cell<*mut u8>,\n \n     /// A pointer to the end of free space.\n     ///\n-    /// The allocation proceeds from the end of the chunk towards the start.\n+    /// The allocation proceeds downwards from the end of the chunk towards the\n+    /// start. (This is slightly simpler and faster than allocating upwards,\n+    /// see <https://fitzgeraldnick.com/2019/11/01/always-bump-downwards.html>.)\n     /// When this pointer crosses the start pointer, a new chunk is allocated.\n     end: Cell<*mut u8>,\n \n@@ -516,10 +520,14 @@ impl DroplessArena {\n     }\n }\n \n+// Declare an `Arena` containing one dropless arena and many typed arenas (the\n+// types of the typed arenas are specified by the arguments). The dropless\n+// arena will be used for any types that impl `Copy`, and also for any of the\n+// specified types that satisfy `!mem::needs_drop`.\n #[rustc_macro_transparency = \"semitransparent\"]\n-pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n+pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n     #[derive(Default)]\n-    pub struct Arena<$tcx> {\n+    pub struct Arena<'tcx> {\n         pub dropless: $crate::DroplessArena,\n         $($name: $crate::TypedArena<$ty>,)*\n     }\n@@ -532,6 +540,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n         ) -> &'a mut [Self];\n     }\n \n+    // Any type that impls `Copy` can be arena-allocated in the `DroplessArena`.\n     impl<'tcx, T: Copy> ArenaAllocatable<'tcx, ()> for T {\n         #[inline]\n         fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self {\n@@ -544,12 +553,11 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n         ) -> &'a mut [Self] {\n             arena.dropless.alloc_from_iter(iter)\n         }\n-\n     }\n     $(\n-        impl<$tcx> ArenaAllocatable<$tcx, $ty> for $ty {\n+        impl<'tcx> ArenaAllocatable<'tcx, $ty> for $ty {\n             #[inline]\n-            fn allocate_on<'a>(self, arena: &'a Arena<$tcx>) -> &'a mut Self {\n+            fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self {\n                 if !::std::mem::needs_drop::<Self>() {\n                     arena.dropless.alloc(self)\n                 } else {\n@@ -559,7 +567,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n \n             #[inline]\n             fn allocate_from_iter<'a>(\n-                arena: &'a Arena<$tcx>,\n+                arena: &'a Arena<'tcx>,\n                 iter: impl ::std::iter::IntoIterator<Item = Self>,\n             ) -> &'a mut [Self] {\n                 if !::std::mem::needs_drop::<Self>() {\n@@ -577,6 +585,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n             value.allocate_on(self)\n         }\n \n+        // Any type that impls `Copy` can have slices be arena-allocated in the `DroplessArena`.\n         #[inline]\n         pub fn alloc_slice<T: ::std::marker::Copy>(&self, value: &[T]) -> &mut [T] {\n             if value.is_empty() {"}, {"sha": "2b3a538772ecbc62d57ae5cea8eb7e34665a9e46", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=1576a7cc81c3eefa533ae84f81df4dabc0f85ee5", "patch": "@@ -84,7 +84,7 @@ mod item;\n mod pat;\n mod path;\n \n-rustc_hir::arena_types!(rustc_arena::declare_arena, 'tcx);\n+rustc_hir::arena_types!(rustc_arena::declare_arena);\n \n struct LoweringContext<'a, 'hir: 'a> {\n     /// Used to assign IDs to HIR nodes that do not directly correspond to AST nodes."}, {"sha": "f19ca497d8bf257f4a8853302366a54ad6c70dc7", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=1576a7cc81c3eefa533ae84f81df4dabc0f85ee5", "patch": "@@ -1,52 +1,52 @@\n-/// This declares a list of types which can be allocated by `Arena`.\n+/// This higher-order macro declares a list of types which can be allocated by `Arena`.\n ///\n /// Specifying the `decode` modifier will add decode impls for `&T` and `&[T]`,\n /// where `T` is the type listed. These impls will appear in the implement_ty_decoder! macro.\n #[macro_export]\n macro_rules! arena_types {\n-    ($macro:path, $tcx:lifetime) => (\n+    ($macro:path) => (\n         $macro!([\n             // HIR types\n-            [] hir_krate: rustc_hir::Crate<$tcx>,\n-            [] arm: rustc_hir::Arm<$tcx>,\n-            [] asm_operand: (rustc_hir::InlineAsmOperand<$tcx>, Span),\n+            [] hir_krate: rustc_hir::Crate<'tcx>,\n+            [] arm: rustc_hir::Arm<'tcx>,\n+            [] asm_operand: (rustc_hir::InlineAsmOperand<'tcx>, Span),\n             [] asm_template: rustc_ast::InlineAsmTemplatePiece,\n             [] attribute: rustc_ast::Attribute,\n-            [] block: rustc_hir::Block<$tcx>,\n-            [] bare_fn_ty: rustc_hir::BareFnTy<$tcx>,\n-            [] body: rustc_hir::Body<$tcx>,\n-            [] generic_arg: rustc_hir::GenericArg<$tcx>,\n-            [] generic_args: rustc_hir::GenericArgs<$tcx>,\n-            [] generic_bound: rustc_hir::GenericBound<$tcx>,\n-            [] generic_param: rustc_hir::GenericParam<$tcx>,\n-            [] expr: rustc_hir::Expr<$tcx>,\n-            [] expr_field: rustc_hir::ExprField<$tcx>,\n-            [] pat_field: rustc_hir::PatField<$tcx>,\n-            [] fn_decl: rustc_hir::FnDecl<$tcx>,\n-            [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n+            [] block: rustc_hir::Block<'tcx>,\n+            [] bare_fn_ty: rustc_hir::BareFnTy<'tcx>,\n+            [] body: rustc_hir::Body<'tcx>,\n+            [] generic_arg: rustc_hir::GenericArg<'tcx>,\n+            [] generic_args: rustc_hir::GenericArgs<'tcx>,\n+            [] generic_bound: rustc_hir::GenericBound<'tcx>,\n+            [] generic_param: rustc_hir::GenericParam<'tcx>,\n+            [] expr: rustc_hir::Expr<'tcx>,\n+            [] expr_field: rustc_hir::ExprField<'tcx>,\n+            [] pat_field: rustc_hir::PatField<'tcx>,\n+            [] fn_decl: rustc_hir::FnDecl<'tcx>,\n+            [] foreign_item: rustc_hir::ForeignItem<'tcx>,\n             [] foreign_item_ref: rustc_hir::ForeignItemRef,\n-            [] impl_item: rustc_hir::ImplItem<$tcx>,\n+            [] impl_item: rustc_hir::ImplItem<'tcx>,\n             [] impl_item_ref: rustc_hir::ImplItemRef,\n-            [] item: rustc_hir::Item<$tcx>,\n-            [] inline_asm: rustc_hir::InlineAsm<$tcx>,\n-            [] llvm_inline_asm: rustc_hir::LlvmInlineAsm<$tcx>,\n-            [] local: rustc_hir::Local<$tcx>,\n-            [] mod_: rustc_hir::Mod<$tcx>,\n-            [] owner_info: rustc_hir::OwnerInfo<$tcx>,\n-            [] param: rustc_hir::Param<$tcx>,\n-            [] pat: rustc_hir::Pat<$tcx>,\n-            [] path: rustc_hir::Path<$tcx>,\n-            [] path_segment: rustc_hir::PathSegment<$tcx>,\n-            [] poly_trait_ref: rustc_hir::PolyTraitRef<$tcx>,\n-            [] qpath: rustc_hir::QPath<$tcx>,\n-            [] stmt: rustc_hir::Stmt<$tcx>,\n-            [] field_def: rustc_hir::FieldDef<$tcx>,\n-            [] trait_item: rustc_hir::TraitItem<$tcx>,\n+            [] item: rustc_hir::Item<'tcx>,\n+            [] inline_asm: rustc_hir::InlineAsm<'tcx>,\n+            [] llvm_inline_asm: rustc_hir::LlvmInlineAsm<'tcx>,\n+            [] local: rustc_hir::Local<'tcx>,\n+            [] mod_: rustc_hir::Mod<'tcx>,\n+            [] owner_info: rustc_hir::OwnerInfo<'tcx>,\n+            [] param: rustc_hir::Param<'tcx>,\n+            [] pat: rustc_hir::Pat<'tcx>,\n+            [] path: rustc_hir::Path<'tcx>,\n+            [] path_segment: rustc_hir::PathSegment<'tcx>,\n+            [] poly_trait_ref: rustc_hir::PolyTraitRef<'tcx>,\n+            [] qpath: rustc_hir::QPath<'tcx>,\n+            [] stmt: rustc_hir::Stmt<'tcx>,\n+            [] field_def: rustc_hir::FieldDef<'tcx>,\n+            [] trait_item: rustc_hir::TraitItem<'tcx>,\n             [] trait_item_ref: rustc_hir::TraitItemRef,\n-            [] ty: rustc_hir::Ty<$tcx>,\n-            [] type_binding: rustc_hir::TypeBinding<$tcx>,\n-            [] variant: rustc_hir::Variant<$tcx>,\n-            [] where_predicate: rustc_hir::WherePredicate<$tcx>,\n-        ], $tcx);\n+            [] ty: rustc_hir::Ty<'tcx>,\n+            [] type_binding: rustc_hir::TypeBinding<'tcx>,\n+            [] variant: rustc_hir::Variant<'tcx>,\n+            [] where_predicate: rustc_hir::WherePredicate<'tcx>,\n+        ]);\n     )\n }"}, {"sha": "ee2e190e7cd44b7e698956f795101075a0f2423c", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=1576a7cc81c3eefa533ae84f81df4dabc0f85ee5", "patch": "@@ -1,33 +1,33 @@\n-/// This declares a list of types which can be allocated by `Arena`.\n+/// This higher-order macro declares a list of types which can be allocated by `Arena`.\n ///\n /// Specifying the `decode` modifier will add decode impls for `&T` and `&[T]` where `T` is the type\n /// listed. These impls will appear in the implement_ty_decoder! macro.\n #[macro_export]\n macro_rules! arena_types {\n-    ($macro:path, $tcx:lifetime) => (\n+    ($macro:path) => (\n         $macro!([\n             [] layout: rustc_target::abi::Layout,\n-            [] fn_abi: rustc_target::abi::call::FnAbi<$tcx, rustc_middle::ty::Ty<$tcx>>,\n+            [] fn_abi: rustc_target::abi::call::FnAbi<'tcx, rustc_middle::ty::Ty<'tcx>>,\n             // AdtDef are interned and compared by address\n             [] adt_def: rustc_middle::ty::AdtDef,\n-            [] steal_thir: rustc_data_structures::steal::Steal<rustc_middle::thir::Thir<$tcx>>,\n-            [] steal_mir: rustc_data_structures::steal::Steal<rustc_middle::mir::Body<$tcx>>,\n-            [decode] mir: rustc_middle::mir::Body<$tcx>,\n+            [] steal_thir: rustc_data_structures::steal::Steal<rustc_middle::thir::Thir<'tcx>>,\n+            [] steal_mir: rustc_data_structures::steal::Steal<rustc_middle::mir::Body<'tcx>>,\n+            [decode] mir: rustc_middle::mir::Body<'tcx>,\n             [] steal_promoted:\n                 rustc_data_structures::steal::Steal<\n                     rustc_index::vec::IndexVec<\n                         rustc_middle::mir::Promoted,\n-                        rustc_middle::mir::Body<$tcx>\n+                        rustc_middle::mir::Body<'tcx>\n                     >\n                 >,\n             [decode] promoted:\n                 rustc_index::vec::IndexVec<\n                     rustc_middle::mir::Promoted,\n-                    rustc_middle::mir::Body<$tcx>\n+                    rustc_middle::mir::Body<'tcx>\n                 >,\n-            [decode] typeck_results: rustc_middle::ty::TypeckResults<$tcx>,\n+            [decode] typeck_results: rustc_middle::ty::TypeckResults<'tcx>,\n             [decode] borrowck_result:\n-                rustc_middle::mir::BorrowCheckResult<$tcx>,\n+                rustc_middle::mir::BorrowCheckResult<'tcx>,\n             [decode] unsafety_check_result: rustc_middle::mir::UnsafetyCheckResult,\n             [decode] code_region: rustc_middle::mir::coverage::CodeRegion,\n             [] const_allocs: rustc_middle::mir::interpret::Allocation,\n@@ -78,14 +78,14 @@ macro_rules! arena_types {\n             [] foreign_modules: Vec<rustc_session::cstore::ForeignModule>,\n             [] upvars_mentioned: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n             [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n-            [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<$tcx>,\n+            [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<'tcx>,\n             [] attribute: rustc_ast::Attribute,\n             [] name_set: rustc_data_structures::fx::FxHashSet<rustc_span::symbol::Symbol>,\n             [] hir_id_set: rustc_hir::HirIdSet,\n \n             // Interned types\n-            [] tys: rustc_middle::ty::TyS<$tcx>,\n-            [] predicates: rustc_middle::ty::PredicateInner<$tcx>,\n+            [] tys: rustc_middle::ty::TyS<'tcx>,\n+            [] predicates: rustc_middle::ty::PredicateInner<'tcx>,\n \n             // Note that this deliberately duplicates items in the `rustc_hir::arena`,\n             // since we need to allocate this type on both the `rustc_hir` arena\n@@ -97,8 +97,8 @@ macro_rules! arena_types {\n             [decode] used_trait_imports: rustc_data_structures::fx::FxHashSet<rustc_hir::def_id::LocalDefId>,\n \n             [] dep_kind: rustc_middle::dep_graph::DepKindStruct,\n-        ], $tcx);\n+        ]);\n     )\n }\n \n-arena_types!(rustc_arena::declare_arena, 'tcx);\n+arena_types!(rustc_arena::declare_arena);"}, {"sha": "3f2b987b1e6307f1f8ad224cccc151487cbb02d1", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1576a7cc81c3eefa533ae84f81df4dabc0f85ee5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=1576a7cc81c3eefa533ae84f81df4dabc0f85ee5", "patch": "@@ -417,17 +417,17 @@ macro_rules! __impl_decoder_methods {\n macro_rules! impl_arena_allocatable_decoder {\n     ([]$args:tt) => {};\n     ([decode $(, $attrs:ident)*]\n-     [[$name:ident: $ty:ty], $tcx:lifetime]) => {\n-        impl<$tcx, D: TyDecoder<$tcx>> RefDecodable<$tcx, D> for $ty {\n+     [$name:ident: $ty:ty]) => {\n+        impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for $ty {\n             #[inline]\n-            fn decode(decoder: &mut D) -> Result<&$tcx Self, D::Error> {\n+            fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n                 decode_arena_allocable(decoder)\n             }\n         }\n \n-        impl<$tcx, D: TyDecoder<$tcx>> RefDecodable<$tcx, D> for [$ty] {\n+        impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [$ty] {\n             #[inline]\n-            fn decode(decoder: &mut D) -> Result<&$tcx Self, D::Error> {\n+            fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n                 decode_arena_allocable_slice(decoder)\n             }\n         }\n@@ -438,15 +438,15 @@ macro_rules! impl_arena_allocatable_decoder {\n }\n \n macro_rules! impl_arena_allocatable_decoders {\n-    ([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n+    ([$($a:tt $name:ident: $ty:ty,)*]) => {\n         $(\n-            impl_arena_allocatable_decoder!($a [[$name: $ty], $tcx]);\n+            impl_arena_allocatable_decoder!($a [$name: $ty]);\n         )*\n     }\n }\n \n-rustc_hir::arena_types!(impl_arena_allocatable_decoders, 'tcx);\n-arena_types!(impl_arena_allocatable_decoders, 'tcx);\n+rustc_hir::arena_types!(impl_arena_allocatable_decoders);\n+arena_types!(impl_arena_allocatable_decoders);\n \n #[macro_export]\n macro_rules! implement_ty_decoder {"}]}