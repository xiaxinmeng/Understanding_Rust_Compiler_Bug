{"sha": "267a6c815663582e651b32dcd33c07da05cd3371", "node_id": "C_kwDOAAsO6NoAKDI2N2E2YzgxNTY2MzU4MmU2NTFiMzJkY2QzM2MwN2RhMDVjZDMzNzE", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-01T18:20:11Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-01T18:20:11Z"}, "message": "std: show signal number along with name", "tree": {"sha": "6932a16c39e482b30c13121cdacb47c5fb07f194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6932a16c39e482b30c13121cdacb47c5fb07f194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/267a6c815663582e651b32dcd33c07da05cd3371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/267a6c815663582e651b32dcd33c07da05cd3371", "html_url": "https://github.com/rust-lang/rust/commit/267a6c815663582e651b32dcd33c07da05cd3371", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/267a6c815663582e651b32dcd33c07da05cd3371/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47030d300a7f3fe40fbab3454d298354c863fa10", "url": "https://api.github.com/repos/rust-lang/rust/commits/47030d300a7f3fe40fbab3454d298354c863fa10", "html_url": "https://github.com/rust-lang/rust/commit/47030d300a7f3fe40fbab3454d298354c863fa10"}], "stats": {"total": 96, "additions": 50, "deletions": 46}, "files": [{"sha": "31f1ea76701e338d812ff7904cf5600a37ff438d", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 47, "deletions": 43, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/267a6c815663582e651b32dcd33c07da05cd3371/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267a6c815663582e651b32dcd33c07da05cd3371/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=267a6c815663582e651b32dcd33c07da05cd3371", "patch": "@@ -696,41 +696,46 @@ impl From<c_int> for ExitStatus {\n }\n \n /// Convert a signal number to a readable, searchable name.\n-fn signal_string(signal: i32) -> String {\n-    (match signal {\n-        libc::SIGHUP => \"SIGHUP\",\n-        libc::SIGINT => \"SIGINT\",\n-        libc::SIGQUIT => \"SIGQUIT\",\n-        libc::SIGILL => \"SIGILL\",\n-        libc::SIGTRAP => \"SIGTRAP\",\n-        libc::SIGABRT => \"SIGABRT\",\n-        libc::SIGBUS => \"SIGBUS\",\n-        libc::SIGFPE => \"SIGFPE\",\n-        libc::SIGKILL => \"SIGKILL\",\n-        libc::SIGUSR1 => \"SIGUSR1\",\n-        libc::SIGSEGV => \"SIGSEGV\",\n-        libc::SIGUSR2 => \"SIGUSR2\",\n-        libc::SIGPIPE => \"SIGPIPE\",\n-        libc::SIGALRM => \"SIGALRM\",\n-        libc::SIGTERM => \"SIGTERM\",\n-        libc::SIGCHLD => \"SIGCHLD\",\n-        libc::SIGCONT => \"SIGCONT\",\n-        libc::SIGSTOP => \"SIGSTOP\",\n-        libc::SIGTSTP => \"SIGTSTP\",\n-        libc::SIGTTIN => \"SIGTTIN\",\n-        libc::SIGTTOU => \"SIGTTOU\",\n-        libc::SIGURG => \"SIGURG\",\n-        libc::SIGXCPU => \"SIGXCPU\",\n-        libc::SIGXFSZ => \"SIGXFSZ\",\n-        libc::SIGVTALRM => \"SIGVTALRM\",\n-        libc::SIGPROF => \"SIGPROF\",\n-        libc::SIGWINCH => \"SIGWINCH\",\n-        libc::SIGIO => \"SIGIO\",\n-        libc::SIGSYS => \"SIGSYS\",\n+///\n+/// This string should be displayed right after the signal number.\n+/// If a signal is unrecognized, it returns the empty string, so that\n+/// you just get the number like \"0\". If it is recognized, you'll get\n+/// something like \"9 (SIGKILL)\".\n+fn signal_string(signal: i32) -> &'static str {\n+    match signal {\n+        libc::SIGHUP => \" (SIGHUP)\",\n+        libc::SIGINT => \" (SIGINT)\",\n+        libc::SIGQUIT => \" (SIGQUIT)\",\n+        libc::SIGILL => \" (SIGILL)\",\n+        libc::SIGTRAP => \" (SIGTRAP)\",\n+        libc::SIGABRT => \" (SIGABRT)\",\n+        libc::SIGBUS => \" (SIGBUS)\",\n+        libc::SIGFPE => \" (SIGFPE)\",\n+        libc::SIGKILL => \" (SIGKILL)\",\n+        libc::SIGUSR1 => \" (SIGUSR1)\",\n+        libc::SIGSEGV => \" (SIGSEGV)\",\n+        libc::SIGUSR2 => \" (SIGUSR2)\",\n+        libc::SIGPIPE => \" (SIGPIPE)\",\n+        libc::SIGALRM => \" (SIGALRM)\",\n+        libc::SIGTERM => \" (SIGTERM)\",\n+        libc::SIGCHLD => \" (SIGCHLD)\",\n+        libc::SIGCONT => \" (SIGCONT)\",\n+        libc::SIGSTOP => \" (SIGSTOP)\",\n+        libc::SIGTSTP => \" (SIGTSTP)\",\n+        libc::SIGTTIN => \" (SIGTTIN)\",\n+        libc::SIGTTOU => \" (SIGTTOU)\",\n+        libc::SIGURG => \" (SIGURG)\",\n+        libc::SIGXCPU => \" (SIGXCPU)\",\n+        libc::SIGXFSZ => \" (SIGXFSZ)\",\n+        libc::SIGVTALRM => \" (SIGVTALRM)\",\n+        libc::SIGPROF => \" (SIGPROF)\",\n+        libc::SIGWINCH => \" (SIGWINCH)\",\n+        libc::SIGIO => \" (SIGIO)\",\n+        libc::SIGSYS => \" (SIGSYS)\",\n         #[cfg(target_os = \"linux\")]\n-        libc::SIGSTKFLT => \"SIGSTKFLT\",\n+        libc::SIGSTKFLT => \" (SIGSTKFLT)\",\n         #[cfg(target_os = \"linux\")]\n-        libc::SIGPWR => \"SIGPWR\",\n+        libc::SIGPWR => \" (SIGPWR)\",\n         #[cfg(any(\n             target_os = \"macos\",\n             target_os = \"ios\",\n@@ -740,7 +745,7 @@ fn signal_string(signal: i32) -> String {\n             target_os = \"openbsd\",\n             target_os = \"dragonfly\"\n         ))]\n-        libc::SIGEMT => \"SIGEMT\",\n+        libc::SIGEMT => \" (SIGEMT)\",\n         #[cfg(any(\n             target_os = \"macos\",\n             target_os = \"ios\",\n@@ -750,26 +755,25 @@ fn signal_string(signal: i32) -> String {\n             target_os = \"openbsd\",\n             target_os = \"dragonfly\"\n         ))]\n-        libc::SIGINFO => \"SIGINFO\",\n-        _ => return format!(\"{signal}\"),\n-    })\n-    .to_string()\n+        libc::SIGINFO => \" (SIGINFO)\",\n+        _ => \"\",\n+    }\n }\n \n impl fmt::Display for ExitStatus {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if let Some(code) = self.code() {\n             write!(f, \"exit status: {code}\")\n         } else if let Some(signal) = self.signal() {\n-            let signal = signal_string(signal);\n+            let signal_string = signal_string(signal);\n             if self.core_dumped() {\n-                write!(f, \"signal: {signal} (core dumped)\")\n+                write!(f, \"signal: {signal}{signal_string} (core dumped)\")\n             } else {\n-                write!(f, \"signal: {signal}\")\n+                write!(f, \"signal: {signal}{signal_string}\")\n             }\n         } else if let Some(signal) = self.stopped_signal() {\n-            let signal = signal_string(signal);\n-            write!(f, \"stopped (not terminated) by signal: {signal}\")\n+            let signal_string = signal_string(signal);\n+            write!(f, \"stopped (not terminated) by signal: {signal}{signal_string}\")\n         } else if self.continued() {\n             write!(f, \"continued (WIFCONTINUED)\")\n         } else {"}, {"sha": "e0e2d478fad731129216a02eefe66d7a4055d878", "filename": "library/std/src/sys/unix/process/process_unix/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/267a6c815663582e651b32dcd33c07da05cd3371/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267a6c815663582e651b32dcd33c07da05cd3371/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs?ref=267a6c815663582e651b32dcd33c07da05cd3371", "patch": "@@ -14,8 +14,8 @@ fn exitstatus_display_tests() {\n \n     let t = |v, s| assert_eq!(s, format!(\"{}\", <ExitStatus as ExitStatusExt>::from_raw(v)));\n \n-    t(0x0000f, \"signal: SIGTERM\");\n-    t(0x0008b, \"signal: SIGSEGV (core dumped)\");\n+    t(0x0000f, \"signal: 15 (SIGTERM)\");\n+    t(0x0008b, \"signal: 11 (SIGSEGV) (core dumped)\");\n     t(0x00000, \"exit status: 0\");\n     t(0x0ff00, \"exit status: 255\");\n \n@@ -24,7 +24,7 @@ fn exitstatus_display_tests() {\n     // The purpose of this test is to test our string formatting, not our understanding of the wait\n     // status magic numbers.  So restrict these to Linux.\n     if cfg!(target_os = \"linux\") {\n-        t(0x0137f, \"stopped (not terminated) by signal: SIGSTOP\");\n+        t(0x0137f, \"stopped (not terminated) by signal: 19 (SIGSTOP)\");\n         t(0x0ffff, \"continued (WIFCONTINUED)\");\n     }\n "}]}