{"sha": "9e8356c6adf119f983651d533d2b307544086cf9", "node_id": "C_kwDOAAsO6NoAKDllODM1NmM2YWRmMTE5Zjk4MzY1MWQ1MzNkMmIzMDc1NDQwODZjZjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-10T08:16:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-10T08:16:22Z"}, "message": "Auto merge of #88952 - skrap:add-armv7-uclibc, r=nagisa\n\nAdd new tier-3 target: armv7-unknown-linux-uclibceabihf\n\nThis change adds a new tier-3 target: armv7-unknown-linux-uclibceabihf\n\nThis target is primarily used in embedded linux devices where system resources are slim and glibc is deemed too heavyweight.  Cross compilation C toolchains are available [here](https://toolchains.bootlin.com/) or via [buildroot](https://buildroot.org).\n\nThe change is based largely on a previous PR #79380 with a few minor modifications.  The author of that PR was unable to push the PR forward, and graciously allowed me to take it over.\n\nPer the [target tier 3 policy](https://github.com/rust-lang/rfcs/blob/master/text/2803-target-tier-policy.md), I volunteer to be the \"target maintainer\".\n\nThis is my first PR to Rust itself, so I apologize if I've missed things!", "tree": {"sha": "8f23bff6053a3e2c58b5ca6befa475ad225f9762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f23bff6053a3e2c58b5ca6befa475ad225f9762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e8356c6adf119f983651d533d2b307544086cf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8356c6adf119f983651d533d2b307544086cf9", "html_url": "https://github.com/rust-lang/rust/commit/9e8356c6adf119f983651d533d2b307544086cf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e8356c6adf119f983651d533d2b307544086cf9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1cb97481a633bdfdf3d6b57c6dcebfdfadbcfdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1cb97481a633bdfdf3d6b57c6dcebfdfadbcfdf", "html_url": "https://github.com/rust-lang/rust/commit/c1cb97481a633bdfdf3d6b57c6dcebfdfadbcfdf"}, {"sha": "bd821729cb2020aabbb16616af5cf32b1ba30ab4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd821729cb2020aabbb16616af5cf32b1ba30ab4", "html_url": "https://github.com/rust-lang/rust/commit/bd821729cb2020aabbb16616af5cf32b1ba30ab4"}], "stats": {"total": 109, "additions": 103, "deletions": 6}, "files": [{"sha": "1bc924d3b90b0f5db6ba18c25375c728c9f2e2b3", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8356c6adf119f983651d533d2b307544086cf9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8356c6adf119f983651d533d2b307544086cf9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=9e8356c6adf119f983651d533d2b307544086cf9", "patch": "@@ -175,7 +175,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n             // should use dllimport for functions.\n             if cx.use_dll_storage_attrs\n                 && tcx.is_dllimport_foreign_item(instance_def_id)\n-                && tcx.sess.target.env != \"gnu\"\n+                && !matches!(tcx.sess.target.env.as_ref(), \"gnu\" | \"uclibc\")\n             {\n                 llvm::LLVMSetDLLStorageClass(llfn, llvm::DLLStorageClass::DllImport);\n             }"}, {"sha": "d0c7379c2d94d5aab856d8fb9ffbda0c6f795008", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e8356c6adf119f983651d533d2b307544086cf9/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8356c6adf119f983651d533d2b307544086cf9/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=9e8356c6adf119f983651d533d2b307544086cf9", "patch": "@@ -3012,7 +3012,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         };\n \n         let target = &self.tcx.sess.target;\n-        let target_env_gnu_like = matches!(&target.env[..], \"gnu\" | \"musl\");\n+        let target_env_gnu_like = matches!(&target.env[..], \"gnu\" | \"musl\" | \"uclibc\");\n         let win_x64_gnu = target.os == \"windows\" && target.arch == \"x86_64\" && target.env == \"gnu\";\n         let linux_s390x_gnu_like =\n             target.os == \"linux\" && target.arch == \"s390x\" && target_env_gnu_like;\n@@ -3110,7 +3110,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             if arg.layout.is_zst() {\n                 // For some forsaken reason, x86_64-pc-windows-gnu\n                 // doesn't ignore zero-sized struct arguments.\n-                // The same is true for {s390x,sparc64,powerpc}-unknown-linux-{gnu,musl}.\n+                // The same is true for {s390x,sparc64,powerpc}-unknown-linux-{gnu,musl,uclibc}.\n                 if is_return\n                     || rust_abi\n                     || (!win_x64_gnu"}, {"sha": "d230f77bde284bb72b6a8e7056e2e2809cb21f6c", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_uclibceabihf.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9e8356c6adf119f983651d533d2b307544086cf9/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8356c6adf119f983651d533d2b307544086cf9/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabihf.rs?ref=9e8356c6adf119f983651d533d2b307544086cf9", "patch": "@@ -0,0 +1,24 @@\n+use crate::spec::{Target, TargetOptions};\n+\n+// This target is for uclibc Linux on ARMv7 without NEON or\n+// thumb-mode. See the thumbv7neon variant for enabling both.\n+\n+pub fn target() -> Target {\n+    let base = super::linux_uclibc_base::opts();\n+    Target {\n+        llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+\n+        options: TargetOptions {\n+            // Info about features at https://wiki.debian.org/ArmHardFloatPort\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n+            cpu: \"generic\".to_string(),\n+            max_atomic_width: Some(64),\n+            mcount: \"_mcount\".to_string(),\n+            abi: \"eabihf\".to_string(),\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "ff5dfa3f746254b0364c4faf37b17f81e941346b", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8356c6adf119f983651d533d2b307544086cf9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8356c6adf119f983651d533d2b307544086cf9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=9e8356c6adf119f983651d533d2b307544086cf9", "patch": "@@ -952,6 +952,8 @@ supported_targets! {\n     (\"bpfel-unknown-none\", bpfel_unknown_none),\n \n     (\"armv6k-nintendo-3ds\", armv6k_nintendo_3ds),\n+\n+    (\"armv7-unknown-linux-uclibceabihf\", armv7_unknown_linux_uclibceabihf),\n }\n \n /// Warnings encountered when parsing the target `json`."}, {"sha": "2ba6c8d830ede552890c37898353615bf2a69dc8", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e8356c6adf119f983651d533d2b307544086cf9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8356c6adf119f983651d533d2b307544086cf9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=9e8356c6adf119f983651d533d2b307544086cf9", "patch": "@@ -307,6 +307,9 @@ cfg_if::cfg_if! {\n         #[link(name = \"zircon\")]\n         #[link(name = \"fdio\")]\n         extern \"C\" {}\n+    } else if #[cfg(all(target_os = \"linux\", target_env = \"uclibc\"))] {\n+        #[link(name = \"dl\")]\n+        extern \"C\" {}\n     }\n }\n "}, {"sha": "6f4863057aba431b0635eb11a4671e335e573913", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e8356c6adf119f983651d533d2b307544086cf9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8356c6adf119f983651d533d2b307544086cf9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=9e8356c6adf119f983651d533d2b307544086cf9", "patch": "@@ -594,7 +594,8 @@ pub mod guard {\n                 Some(stackaddr - guardsize..stackaddr)\n             } else if cfg!(all(target_os = \"linux\", target_env = \"musl\")) {\n                 Some(stackaddr - guardsize..stackaddr)\n-            } else if cfg!(all(target_os = \"linux\", target_env = \"gnu\")) {\n+            } else if cfg!(all(target_os = \"linux\", any(target_env = \"gnu\", target_env = \"uclibc\")))\n+            {\n                 // glibc used to include the guard area within the stack, as noted in the BUGS\n                 // section of `man pthread_attr_getguardsize`.  This has been corrected starting\n                 // with glibc 2.27, and in some distro backports, so the guard is now placed at the"}, {"sha": "e263780bf38796dbdae16e73b90bb8774edf39eb", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e8356c6adf119f983651d533d2b307544086cf9/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8356c6adf119f983651d533d2b307544086cf9/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=9e8356c6adf119f983651d533d2b307544086cf9", "patch": "@@ -63,7 +63,7 @@ cfg_if::cfg_if! {\n // don't want to duplicate it here.\n #[cfg(all(\n     target_os = \"linux\",\n-    target_env = \"gnu\",\n+    any(target_env = \"gnu\", target_env = \"uclibc\"),\n     not(feature = \"llvm-libunwind\"),\n     not(feature = \"system-llvm-libunwind\")\n ))]\n@@ -72,7 +72,7 @@ extern \"C\" {}\n \n #[cfg(all(\n     target_os = \"linux\",\n-    target_env = \"gnu\",\n+    any(target_env = \"gnu\", target_env = \"uclibc\"),\n     not(feature = \"llvm-libunwind\"),\n     feature = \"system-llvm-libunwind\"\n ))]"}, {"sha": "bbeab598f2292870baca8e070388fd632881b592", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e8356c6adf119f983651d533d2b307544086cf9/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/9e8356c6adf119f983651d533d2b307544086cf9/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=9e8356c6adf119f983651d533d2b307544086cf9", "patch": "@@ -220,6 +220,7 @@ target | std | host | notes\n `armv6-unknown-netbsd-eabihf` | ? |  |\n `armv6k-nintendo-3ds` | * |  | ARMv6K Nintendo 3DS, Horizon (Requires devkitARM toolchain)\n `armv7-apple-ios` | \u2713 |  | ARMv7 iOS, Cortex-a8\n+`armv7-unknown-linux-uclibceabihf` | \u2713 | ? | ARMv7 Linux uClibc\n `armv7-unknown-freebsd` | \u2713 | \u2713 | ARMv7 FreeBSD\n `armv7-unknown-netbsd-eabihf` | \u2713 | \u2713 |\n `armv7-wrs-vxworks-eabihf` | ? |  |"}, {"sha": "b3a4275c6ee92a3e19298067076844e7dbde6818", "filename": "src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabihf.md", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9e8356c6adf119f983651d533d2b307544086cf9/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabihf.md", "raw_url": "https://github.com/rust-lang/rust/raw/9e8356c6adf119f983651d533d2b307544086cf9/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabihf.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabihf.md?ref=9e8356c6adf119f983651d533d2b307544086cf9", "patch": "@@ -0,0 +1,66 @@\n+# armv7-unknown-linux-uclibceabihf\n+\n+**Tier: 3**\n+\n+This tier supports the ARMv7 processor running a Linux kernel and uClibc-ng standard library.  It provides full support for rust and the rust standard library.\n+\n+## Designated Developers\n+\n+* [@skrap](https://github.com/skrap)\n+\n+## Requirements\n+\n+This target is cross compiled, and requires a cross toolchain.  You can find suitable pre-built toolchains at [bootlin](https://toolchains.bootlin.com/) or build one yourself via [buildroot](https://buildroot.org).\n+\n+## Building\n+\n+### Get a C toolchain\n+\n+Compiling rust for this target has been tested on `x86_64` linux hosts.  Other host types have not been tested, but may work, if you can find a suitable cross compilation toolchain for them.\n+\n+If you don't already have a suitable toolchain, download one [here](https://toolchains.bootlin.com/downloads/releases/toolchains/armv7-eabihf/tarballs/armv7-eabihf--uclibc--bleeding-edge-2020.08-1.tar.bz2), and unpack it into a directory.\n+\n+### Configure rust\n+\n+The target can be built by enabling it for a `rustc` build, by placing the following in `config.toml`:\n+\n+```toml\n+[build]\n+target = [\"armv7-unknown-linux-uclibceabihf\"]\n+stage = 2\n+\n+[target.armv7-unknown-linux-uclibceabihf]\n+# ADJUST THIS PATH TO POINT AT YOUR TOOLCHAIN\n+cc = \"/TOOLCHAIN_PATH/bin/arm-buildroot-linux-uclibcgnueabihf-gcc\"\n+```\n+\n+### Build\n+\n+```sh\n+# in rust dir\n+./x.py build --stage 2\n+```\n+\n+## Building and Running Rust Programs\n+\n+To test cross-compiled binaries on a `x86_64` system, you can use the `qemu-arm` [userspace emulation](https://qemu-project.gitlab.io/qemu/user/main.html) program.  This avoids having a full emulated ARM system by doing dynamic binary translation and dynamic system call translation.  It lets you run ARM programs directly on your `x86_64` kernel.  It's very convenient!\n+\n+To use:\n+\n+* Install `qemu-arm` according to your distro.\n+* Link your built toolchain via:\n+  * `rustup toolchain link stage2 ${RUST}/build/x86_64-unknown-linux-gnu/stage2`\n+* Create a test program\n+\n+```sh\n+cargo new hello_world\n+cd hello_world\n+```\n+\n+* Build and run\n+\n+```sh\n+CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABIHF_RUNNER=\"qemu-arm -L ${TOOLCHAIN}/arm-buildroot-linux-uclibcgnueabihf/sysroot/\" \\\n+CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABIHF_LINKER=${TOOLCHAIN}/bin/arm-buildroot-linux-uclibcgnueabihf-gcc \\\n+cargo +stage2 run --target armv7-unknown-linux-uclibceabihf\n+```"}]}