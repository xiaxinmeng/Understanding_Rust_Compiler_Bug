{"sha": "4e406d7fdd55c6c499eb3af750c64292a88e4d9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNDA2ZDdmZGQ1NWM2YzQ5OWViM2FmNzUwYzY0MjkyYTg4ZTRkOWY=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-01T11:32:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-02T05:56:53Z"}, "message": "Make it work 1", "tree": {"sha": "8a2a4150f851887c0bcb802a55c815f5fd101e4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a2a4150f851887c0bcb802a55c815f5fd101e4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e406d7fdd55c6c499eb3af750c64292a88e4d9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e406d7fdd55c6c499eb3af750c64292a88e4d9f", "html_url": "https://github.com/rust-lang/rust/commit/4e406d7fdd55c6c499eb3af750c64292a88e4d9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e406d7fdd55c6c499eb3af750c64292a88e4d9f/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cccf9e5389eaeb93566c83da266aa5df70be812c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cccf9e5389eaeb93566c83da266aa5df70be812c", "html_url": "https://github.com/rust-lang/rust/commit/cccf9e5389eaeb93566c83da266aa5df70be812c"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "a2124880ea38947c73dfb70ddb284de2795964dc", "filename": "src/libcore/str.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e406d7fdd55c6c499eb3af750c64292a88e4d9f/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e406d7fdd55c6c499eb3af750c64292a88e4d9f/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=4e406d7fdd55c6c499eb3af750c64292a88e4d9f", "patch": "@@ -424,7 +424,7 @@ Failure:\n \n If `begin` + `len` is is greater than the byte length of the string\n */\n-fn substr(s: str, begin: uint, len: uint) -> str {\n+fn substr(s: str, begin: uint, len: uint) -> str unsafe {\n     ret unsafe::slice(s, begin, begin + len);\n }\n \n@@ -706,13 +706,14 @@ Returns:\n \n The original string with all occurances of `from` replaced with `to`\n */\n-fn replace(s: str, from: str, to: str) : is_not_empty(from) -> str {\n+fn replace(s: str, from: str, to: str) : is_not_empty(from) -> str unsafe {\n     // FIXME (694): Shouldn't have to check this\n     check (is_not_empty(from));\n     if byte_len(s) == 0u {\n         ret \"\";\n     } else if starts_with(s, from) {\n-        ret to + replace(unsafe::slice(s, byte_len(from), byte_len(s)), from, to);\n+        ret to + replace(unsafe::slice(s, byte_len(from), byte_len(s)),\n+                                       from, to);\n     } else {\n         let idx = find(s, from);\n         if idx == -1 {\n@@ -1401,7 +1402,8 @@ mod unsafe {\n \n    FIXME: rename to safe_range_byte_slice\n    */\n-   unsafe fn safe_slice(s: str, begin: uint, end: uint) : uint::le(begin, end) -> str {\n+   unsafe fn safe_slice(s: str, begin: uint, end: uint)\n+       : uint::le(begin, end) -> str {\n        // would need some magic to make this a precondition\n        assert (end <= byte_len(s));\n        ret slice(s, begin, end);\n@@ -1634,7 +1636,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_slice() {\n+    fn test_unsafe_slice() unsafe {\n         assert (eq(\"ab\", slice(\"abc\", 0u, 2u)));\n         assert (eq(\"bc\", slice(\"abc\", 1u, 3u)));\n         assert (eq(\"\", slice(\"abc\", 1u, 1u)));\n@@ -1651,7 +1653,7 @@ mod tests {\n             ret rs;\n         }\n         assert (eq(half_a_million_letter_a(),\n-                        slice(a_million_letter_a(), 0u, 500000u)));\n+                        unsafe::slice(a_million_letter_a(), 0u, 500000u)));\n     }\n \n     #[test]"}]}