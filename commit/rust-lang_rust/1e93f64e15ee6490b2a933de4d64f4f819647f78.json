{"sha": "1e93f64e15ee6490b2a933de4d64f4f819647f78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlOTNmNjRlMTVlZTY0OTBiMmE5MzNkZTRkNjRmNGY4MTk2NDdmNzg=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-19T04:31:21Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-19T04:31:21Z"}, "message": "Clean up read_value.", "tree": {"sha": "09f0c8704c654803de24c39e3b211394bb27e98d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09f0c8704c654803de24c39e3b211394bb27e98d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e93f64e15ee6490b2a933de4d64f4f819647f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e93f64e15ee6490b2a933de4d64f4f819647f78", "html_url": "https://github.com/rust-lang/rust/commit/1e93f64e15ee6490b2a933de4d64f4f819647f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e93f64e15ee6490b2a933de4d64f4f819647f78/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4da533729b74769812bd4ced542da88233a058c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4da533729b74769812bd4ced542da88233a058c8", "html_url": "https://github.com/rust-lang/rust/commit/4da533729b74769812bd4ced542da88233a058c8"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "230afdb14fdc891aea27007db120b67ced5414ab", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1e93f64e15ee6490b2a933de4d64f4f819647f78/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e93f64e15ee6490b2a933de4d64f4f819647f78/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=1e93f64e15ee6490b2a933de4d64f4f819647f78", "patch": "@@ -1242,17 +1242,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn read_value(&mut self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<'tcx, Value> {\n         use syntax::ast::FloatTy;\n \n-        let val = match &ty.sty {\n-            &ty::TyBool => PrimVal::Bool(self.memory.read_bool(ptr)?),\n-            &ty::TyChar => {\n+        let val = match ty.sty {\n+            ty::TyBool => PrimVal::Bool(self.memory.read_bool(ptr)?),\n+            ty::TyChar => {\n                 let c = self.memory.read_uint(ptr, 4)? as u32;\n                 match ::std::char::from_u32(c) {\n                     Some(ch) => PrimVal::Char(ch),\n                     None => return Err(EvalError::InvalidChar(c as u64)),\n                 }\n             }\n \n-            &ty::TyInt(int_ty) => {\n+            ty::TyInt(int_ty) => {\n                 use syntax::ast::IntTy::*;\n                 let size = match int_ty {\n                     I8 => 1,\n@@ -1265,7 +1265,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 PrimVal::int_with_size(n, size)\n             }\n \n-            &ty::TyUint(uint_ty) => {\n+            ty::TyUint(uint_ty) => {\n                 use syntax::ast::UintTy::*;\n                 let size = match uint_ty {\n                     U8 => 1,\n@@ -1278,16 +1278,16 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 PrimVal::uint_with_size(n, size)\n             }\n \n-            &ty::TyFloat(FloatTy::F32) => PrimVal::F32(self.memory.read_f32(ptr)?),\n-            &ty::TyFloat(FloatTy::F64) => PrimVal::F64(self.memory.read_f64(ptr)?),\n+            ty::TyFloat(FloatTy::F32) => PrimVal::F32(self.memory.read_f32(ptr)?),\n+            ty::TyFloat(FloatTy::F64) => PrimVal::F64(self.memory.read_f64(ptr)?),\n \n-            &ty::TyFnDef(def_id, substs, fn_ty) => {\n+            ty::TyFnDef(def_id, substs, fn_ty) => {\n                 PrimVal::FnPtr(self.memory.create_fn_ptr(def_id, substs, fn_ty))\n             },\n-            &ty::TyFnPtr(_) => self.memory.read_ptr(ptr).map(PrimVal::FnPtr)?,\n-            &ty::TyBox(ty) |\n-            &ty::TyRef(_, ty::TypeAndMut { ty, .. }) |\n-            &ty::TyRawPtr(ty::TypeAndMut { ty, .. }) => {\n+            ty::TyFnPtr(_) => self.memory.read_ptr(ptr).map(PrimVal::FnPtr)?,\n+            ty::TyBox(ty) |\n+            ty::TyRef(_, ty::TypeAndMut { ty, .. }) |\n+            ty::TyRawPtr(ty::TypeAndMut { ty, .. }) => {\n                 let p = self.memory.read_ptr(ptr)?;\n                 if self.type_is_sized(ty) {\n                     PrimVal::Ptr(p)\n@@ -1304,7 +1304,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n             }\n \n-            &ty::TyAdt(..) => {\n+            ty::TyAdt(..) => {\n                 use rustc::ty::layout::Layout::*;\n                 if let CEnum { discr, signed, .. } = *self.type_layout(ty) {\n                     let size = discr.size().bytes() as usize;\n@@ -1322,6 +1322,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             _ => bug!(\"primitive read of non-primitive type: {:?}\", ty),\n         };\n+\n         Ok(Value::ByVal(val))\n     }\n "}]}