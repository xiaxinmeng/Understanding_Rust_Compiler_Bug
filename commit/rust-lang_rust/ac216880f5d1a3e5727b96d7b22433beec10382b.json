{"sha": "ac216880f5d1a3e5727b96d7b22433beec10382b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMjE2ODgwZjVkMWEzZTU3MjdiOTZkN2IyMjQzM2JlZWMxMDM4MmI=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-16T23:08:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:37:25Z"}, "message": "Implement unlabeled struct field pattern inference", "tree": {"sha": "f9d87289f7d870e5346ecb5c007a9ea43e63651b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9d87289f7d870e5346ecb5c007a9ea43e63651b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac216880f5d1a3e5727b96d7b22433beec10382b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac216880f5d1a3e5727b96d7b22433beec10382b", "html_url": "https://github.com/rust-lang/rust/commit/ac216880f5d1a3e5727b96d7b22433beec10382b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac216880f5d1a3e5727b96d7b22433beec10382b/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3340807bd24f398dca158e85eebae74012d8ef4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3340807bd24f398dca158e85eebae74012d8ef4b", "html_url": "https://github.com/rust-lang/rust/commit/3340807bd24f398dca158e85eebae74012d8ef4b"}], "stats": {"total": 73, "additions": 26, "deletions": 47}, "files": [{"sha": "e7235c1a1e1e3a9ebf31995c76dcb39f3b51eea8", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac216880f5d1a3e5727b96d7b22433beec10382b/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac216880f5d1a3e5727b96d7b22433beec10382b/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=ac216880f5d1a3e5727b96d7b22433beec10382b", "patch": "@@ -332,7 +332,7 @@ impl_arena_id!(PatId);\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct FieldPat {\n     pub(crate) name: Name,\n-    pub(crate) pat: Option<PatId>,\n+    pub(crate) pat: PatId,\n }\n \n /// Close relative to rustc's hir::PatKind\n@@ -393,7 +393,7 @@ impl Pat {\n                 total_iter.map(|pat| *pat).for_each(f);\n             }\n             Pat::Struct { args, .. } => {\n-                args.iter().filter_map(|a| a.pat).for_each(f);\n+                args.iter().map(|f| f.pat).for_each(f);\n             }\n         }\n     }\n@@ -821,9 +821,10 @@ impl ExprCollector {\n                     .expect(\"every struct should have a field list\")\n                     .field_pats()\n                     .into_iter()\n-                    .map(|f| FieldPat {\n-                        name: Name::new(f.ident),\n-                        pat: f.pat.as_ref().map(|p| self.collect_pat(p)),\n+                    .map(|f| {\n+                        let name = Name::new(f.ident);\n+                        let pat = self.collect_pat(&*f.pat);\n+                        FieldPat { name, pat }\n                     })\n                     .collect();\n "}, {"sha": "66940ec305ab1a410a59a2ba5bf85ca4b8ebb298", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ac216880f5d1a3e5727b96d7b22433beec10382b/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac216880f5d1a3e5727b96d7b22433beec10382b/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=ac216880f5d1a3e5727b96d7b22433beec10382b", "patch": "@@ -937,19 +937,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         };\n \n         for sub_pat in sub_pats {\n-            let tyref = fields\n-                .iter()\n-                .find(|field| field.name == sub_pat.name)\n-                .map(|field| &field.type_ref);\n+            let matching_field = fields.iter().find(|field| field.name == sub_pat.name);\n \n-            if let Some(typeref) = tyref {\n+            if let Some(field) = matching_field {\n+                let typeref = &field.type_ref;\n                 let sub_ty = Ty::from_hir(self.db, &self.module, self.impl_block.as_ref(), typeref);\n-\n-                if let Some(pat) = sub_pat.pat {\n-                    self.infer_pat(pat, &Expectation::has_type(sub_ty));\n-                } else {\n-                    // TODO: deal with this case: S { x, y }\n-                }\n+                self.infer_pat(sub_pat.pat, &Expectation::has_type(sub_ty));\n             }\n         }\n "}, {"sha": "10842f96740ff5c021d23d56292ec39e626ae3bd", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac216880f5d1a3e5727b96d7b22433beec10382b/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac216880f5d1a3e5727b96d7b22433beec10382b/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=ac216880f5d1a3e5727b96d7b22433beec10382b", "patch": "@@ -389,6 +389,11 @@ fn test() {\n \n     let S(y, z) = foo;\n     let E::A { x: new_var } = e;\n+\n+    match e {\n+        E::A { x } => x,\n+        E::B => 1,\n+    };\n }\n \"#,\n         \"adt_pattern.txt\","}, {"sha": "4b7edbbe76e7d78af1a9e7aa337a13b502eff9e2", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 11, "deletions": 31, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ac216880f5d1a3e5727b96d7b22433beec10382b/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac216880f5d1a3e5727b96d7b22433beec10382b/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=ac216880f5d1a3e5727b96d7b22433beec10382b", "patch": "@@ -664,36 +664,11 @@ impl LiteralExpr {\n     }\n }\n \n-// STRUCT_PAT@[20; 42)\n-//   PATH@[20; 26)\n-//     PATH_SEGMENT@[20; 26)\n-//       NAME_REF@[20; 26)\n-//         IDENT@[20; 26) \"Strukt\"\n-//   WHITESPACE@[26; 27)\n-//   FIELD_PAT_LIST@[27; 42)\n-//     L_CURLY@[27; 28)\n-//     WHITESPACE@[28; 29)\n-//     IDENT@[29; 30) \"x\"\n-//     COLON@[30; 31)\n-//     WHITESPACE@[31; 32)\n-//     BIND_PAT@[32; 33)\n-//       NAME@[32; 33)\n-//         IDENT@[32; 33) \"x\"\n-//     COMMA@[33; 34)\n-//     WHITESPACE@[34; 35)\n-//     BIND_PAT@[35; 36)\n-//       NAME@[35; 36)\n-//         IDENT@[35; 36) \"y\"\n-//     COMMA@[36; 37)\n-//     WHITESPACE@[37; 38)\n-//     DOTDOT@[38; 40)\n-//     WHITESPACE@[40; 41)\n-//     R_CURLY@[41; 42)\n-\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct FieldPat {\n     pub ident: SmolStr,\n-    pub pat: Option<TreeArc<Pat>>,\n+    // FIXME: could we use a regular reference?\n+    pub pat: TreeArc<Pat>,\n }\n \n impl FieldPatList {\n@@ -704,12 +679,17 @@ impl FieldPatList {\n         let mut pats = Vec::new();\n \n         while let Some(node) = child_iter.next() {\n-            if node.kind() != IDENT {\n+            let kind = node.kind();\n+            if kind != IDENT && kind != BIND_PAT {\n                 continue;\n             }\n \n-            let ident = node.leaf_text().unwrap().clone();\n-            let mut pat = None;\n+            let ident = if let Some(text) = node.leaf_text() {\n+                text.clone()\n+            } else {\n+                SmolStr::new(node.text().to_string())\n+            };\n+            let mut pat = Pat::cast(node).map(AstNode::to_owned);\n \n             // get pat\n             while let Some(node) = child_iter.next() {\n@@ -724,7 +704,7 @@ impl FieldPatList {\n \n             let field_pat = FieldPat {\n                 ident: ident,\n-                pat: pat,\n+                pat: pat.unwrap(),\n             };\n             pats.push(field_pat);\n         }"}]}