{"sha": "cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMGI3YmRkMGMyOTIwZmNmNzdkYTY2MDhkNDgyOTk0NWExMTBiN2U=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2016-09-20T00:14:46Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2016-09-28T20:30:30Z"}, "message": "Call arrays \"arrays\" instead of \"vecs\" internally", "tree": {"sha": "9f7943076d9cfe55e8780038d534246542727408", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f7943076d9cfe55e8780038d534246542727408"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "html_url": "https://github.com/rust-lang/rust/commit/cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c3d0add4a35d0a643cbdec2d91fc28808618b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/69c3d0add4a35d0a643cbdec2d91fc28808618b0", "html_url": "https://github.com/rust-lang/rust/commit/69c3d0add4a35d0a643cbdec2d91fc28808618b0"}], "stats": {"total": 150, "additions": 74, "deletions": 76}, "files": [{"sha": "50d4cbc982e97b2be8633d71090024b430f76ddb", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.add_ast_node(pat.id, &[pats_exit])\n             }\n \n-            PatKind::Vec(ref pre, ref vec, ref post) => {\n+            PatKind::Slice(ref pre, ref vec, ref post) => {\n                 let pre_exit = self.pats_all(pre.iter(), pred);\n                 let vec_exit = self.pats_all(vec.iter(), pre_exit);\n                 let post_exit = self.pats_all(post.iter(), vec_exit);\n@@ -298,7 +298,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.add_unreachable_node()\n             }\n \n-            hir::ExprVec(ref elems) => {\n+            hir::ExprArray(ref elems) => {\n                 self.straightline(expr, pred, elems.iter().map(|e| &**e))\n             }\n "}, {"sha": "b1771f52da2c6fef8b4fa31ade542c9ea393c380", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -394,7 +394,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n     visitor.visit_id(typ.id);\n \n     match typ.node {\n-        TyVec(ref ty) => {\n+        TySlice(ref ty) => {\n             visitor.visit_ty(ty)\n         }\n         TyPtr(ref mutable_type) => {\n@@ -422,7 +422,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n         }\n-        TyFixedLengthVec(ref ty, ref expression) => {\n+        TyArray(ref ty, ref expression) => {\n             visitor.visit_ty(ty);\n             visitor.visit_expr(expression)\n         }\n@@ -520,7 +520,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n             visitor.visit_expr(upper_bound)\n         }\n         PatKind::Wild => (),\n-        PatKind::Vec(ref prepatterns, ref slice_pattern, ref postpatterns) => {\n+        PatKind::Slice(ref prepatterns, ref slice_pattern, ref postpatterns) => {\n             walk_list!(visitor, visit_pat, prepatterns);\n             walk_list!(visitor, visit_pat, slice_pattern);\n             walk_list!(visitor, visit_pat, postpatterns);\n@@ -749,7 +749,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         ExprBox(ref subexpression) => {\n             visitor.visit_expr(subexpression)\n         }\n-        ExprVec(ref subexpressions) => {\n+        ExprArray(ref subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }\n         ExprRepeat(ref element, ref count) => {"}, {"sha": "30a34e8a53b1a4d8b51b33e475596a0ba34ff73f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -227,7 +227,7 @@ impl<'a> LoweringContext<'a> {\n             id: t.id,\n             node: match t.node {\n                 Infer | ImplicitSelf => hir::TyInfer,\n-                Vec(ref ty) => hir::TyVec(self.lower_ty(ty)),\n+                Vec(ref ty) => hir::TySlice(self.lower_ty(ty)),\n                 Ptr(ref mt) => hir::TyPtr(self.lower_mt(mt)),\n                 Rptr(ref region, ref mt) => {\n                     hir::TyRptr(self.lower_opt_lifetime(region), self.lower_mt(mt))\n@@ -258,7 +258,7 @@ impl<'a> LoweringContext<'a> {\n                     hir::TyObjectSum(self.lower_ty(ty), self.lower_bounds(bounds))\n                 }\n                 FixedLengthVec(ref ty, ref e) => {\n-                    hir::TyFixedLengthVec(self.lower_ty(ty), self.lower_expr(e))\n+                    hir::TyArray(self.lower_ty(ty), self.lower_expr(e))\n                 }\n                 Typeof(ref expr) => {\n                     hir::TyTypeof(self.lower_expr(expr))\n@@ -892,7 +892,7 @@ impl<'a> LoweringContext<'a> {\n                     hir::PatKind::Range(self.lower_expr(e1), self.lower_expr(e2))\n                 }\n                 PatKind::Vec(ref before, ref slice, ref after) => {\n-                    hir::PatKind::Vec(before.iter().map(|x| self.lower_pat(x)).collect(),\n+                    hir::PatKind::Slice(before.iter().map(|x| self.lower_pat(x)).collect(),\n                                 slice.as_ref().map(|x| self.lower_pat(x)),\n                                 after.iter().map(|x| self.lower_pat(x)).collect())\n                 }\n@@ -1031,7 +1031,7 @@ impl<'a> LoweringContext<'a> {\n                 }\n \n                 ExprKind::Vec(ref exprs) => {\n-                    hir::ExprVec(exprs.iter().map(|x| self.lower_expr(x)).collect())\n+                    hir::ExprArray(exprs.iter().map(|x| self.lower_expr(x)).collect())\n                 }\n                 ExprKind::Repeat(ref expr, ref count) => {\n                     let expr = self.lower_expr(expr);"}, {"sha": "8959c8153296a186b25e64611c171324d3510781", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -448,7 +448,7 @@ impl<'ast> intravisit::Visitor<'ast> for DefCollector<'ast> {\n     }\n \n     fn visit_ty(&mut self, ty: &'ast hir::Ty) {\n-        if let hir::TyFixedLengthVec(_, ref length) = ty.node {\n+        if let hir::TyArray(_, ref length) = ty.node {\n             self.visit_hir_const_integer(length);\n         }\n         if let hir::TyImplTrait(..) = ty.node {"}, {"sha": "f64b0e9c7342cf994cfc8624b8261ea66443b500", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -478,7 +478,7 @@ impl Pat {\n             PatKind::Box(ref s) | PatKind::Ref(ref s, _) => {\n                 s.walk_(it)\n             }\n-            PatKind::Vec(ref before, ref slice, ref after) => {\n+            PatKind::Slice(ref before, ref slice, ref after) => {\n                 before.iter().all(|p| p.walk_(it)) &&\n                 slice.iter().all(|p| p.walk_(it)) &&\n                 after.iter().all(|p| p.walk_(it))\n@@ -554,8 +554,8 @@ pub enum PatKind {\n     /// A range pattern, e.g. `1...2`\n     Range(P<Expr>, P<Expr>),\n     /// `[a, b, ..i, y, z]` is represented as:\n-    ///     `PatKind::Vec(box [a, b], Some(i), box [y, z])`\n-    Vec(HirVec<P<Pat>>, Option<P<Pat>>, HirVec<P<Pat>>),\n+    ///     `PatKind::Slice(box [a, b], Some(i), box [y, z])`\n+    Slice(HirVec<P<Pat>>, Option<P<Pat>>, HirVec<P<Pat>>),\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n@@ -826,7 +826,7 @@ pub enum Expr_ {\n     /// A `box x` expression.\n     ExprBox(P<Expr>),\n     /// An array (`[a, b, c, d]`)\n-    ExprVec(HirVec<P<Expr>>),\n+    ExprArray(HirVec<P<Expr>>),\n     /// A function call\n     ///\n     /// The first field resolves to the function itself (usually an `ExprPath`),\n@@ -1080,10 +1080,10 @@ pub struct BareFnTy {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n /// The different kinds of types recognized by the compiler\n pub enum Ty_ {\n-    /// A variable length array (`[T]`)\n-    TyVec(P<Ty>),\n+    /// A variable length slice (`[T]`)\n+    TySlice(P<Ty>),\n     /// A fixed length array (`[T; n]`)\n-    TyFixedLengthVec(P<Ty>, P<Expr>),\n+    TyArray(P<Ty>, P<Expr>),\n     /// A raw pointer (`*const T` or `*mut T`)\n     TyPtr(MutTy),\n     /// A reference (`&'a T` or `&'a mut T`)"}, {"sha": "505d126db7f4fb9f6b848d58ec2d468c5de1ebfd", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -62,7 +62,7 @@ pub fn pat_is_refutable(dm: &DefMap, pat: &hir::Pat) -> bool {\n                 _ => false\n             }\n         }\n-        PatKind::Vec(..) => true,\n+        PatKind::Slice(..) => true,\n         _ => false\n     }\n }"}, {"sha": "90b92beb7a7fbf0eb17e332c6bed942b181e1ab8", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -486,7 +486,7 @@ impl<'a> State<'a> {\n         self.maybe_print_comment(ty.span.lo)?;\n         self.ibox(0)?;\n         match ty.node {\n-            hir::TyVec(ref ty) => {\n+            hir::TySlice(ref ty) => {\n                 word(&mut self.s, \"[\")?;\n                 self.print_type(&ty)?;\n                 word(&mut self.s, \"]\")?;\n@@ -543,7 +543,7 @@ impl<'a> State<'a> {\n             hir::TyImplTrait(ref bounds) => {\n                 self.print_bounds(\"impl \", &bounds[..])?;\n             }\n-            hir::TyFixedLengthVec(ref ty, ref v) => {\n+            hir::TyArray(ref ty, ref v) => {\n                 word(&mut self.s, \"[\")?;\n                 self.print_type(&ty)?;\n                 word(&mut self.s, \"; \")?;\n@@ -1319,7 +1319,7 @@ impl<'a> State<'a> {\n                 self.word_space(\"box\")?;\n                 self.print_expr(expr)?;\n             }\n-            hir::ExprVec(ref exprs) => {\n+            hir::ExprArray(ref exprs) => {\n                 self.print_expr_vec(&exprs[..])?;\n             }\n             hir::ExprRepeat(ref element, ref count) => {\n@@ -1829,7 +1829,7 @@ impl<'a> State<'a> {\n                 word(&mut self.s, \"...\")?;\n                 self.print_expr(&end)?;\n             }\n-            PatKind::Vec(ref before, ref slice, ref after) => {\n+            PatKind::Slice(ref before, ref slice, ref after) => {\n                 word(&mut self.s, \"[\")?;\n                 self.commasep(Inconsistent, &before[..], |s, p| s.print_pat(&p))?;\n                 if let Some(ref p) = *slice {"}, {"sha": "3f216d6916851a15867247edc15111a336d78c51", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -1433,8 +1433,8 @@ impl<'a, 'gcx, 'tcx> Rebuilder<'a, 'gcx, 'tcx> {\n                 hir::TyPtr(ref mut_ty) => {\n                     ty_queue.push(&mut_ty.ty);\n                 }\n-                hir::TyVec(ref ty) |\n-                hir::TyFixedLengthVec(ref ty, _) => {\n+                hir::TySlice(ref ty) |\n+                hir::TyArray(ref ty, _) => {\n                     ty_queue.push(&ty);\n                 }\n                 hir::TyTup(ref tys) => ty_queue.extend(tys.iter().map(|ty| &**ty)),\n@@ -1469,9 +1469,9 @@ impl<'a, 'gcx, 'tcx> Rebuilder<'a, 'gcx, 'tcx> {\n                             ty: build_to(mut_ty.ty, to),\n                         })\n                     }\n-                    hir::TyVec(ty) => hir::TyVec(build_to(ty, to)),\n-                    hir::TyFixedLengthVec(ty, e) => {\n-                        hir::TyFixedLengthVec(build_to(ty, to), e)\n+                    hir::TySlice(ty) => hir::TySlice(build_to(ty, to)),\n+                    hir::TyArray(ty, e) => {\n+                        hir::TyArray(build_to(ty, to), e)\n                     }\n                     hir::TyTup(tys) => {\n                         hir::TyTup(tys.into_iter().map(|ty| build_to(ty, to)).collect())"}, {"sha": "d7392338d5ed9539af80d2c660f5e75af5c870f7", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -442,7 +442,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            hir::ExprVec(ref exprs) => {\n+            hir::ExprArray(ref exprs) => {\n                 self.consume_exprs(exprs);\n             }\n "}, {"sha": "79396b9ca4dab155cda150de99f7af64395c3a90", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -490,7 +490,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n \n       // otherwise, live nodes are not required:\n       hir::ExprIndex(..) | hir::ExprField(..) | hir::ExprTupField(..) |\n-      hir::ExprVec(..) | hir::ExprCall(..) | hir::ExprMethodCall(..) |\n+      hir::ExprArray(..) | hir::ExprCall(..) | hir::ExprMethodCall(..) |\n       hir::ExprTup(..) | hir::ExprBinary(..) | hir::ExprAddrOf(..) |\n       hir::ExprCast(..) | hir::ExprUnary(..) | hir::ExprBreak(_) |\n       hir::ExprAgain(_) | hir::ExprLit(_) | hir::ExprRet(..) |\n@@ -1095,7 +1095,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n           // Uninteresting cases: just propagate in rev exec order\n \n-          hir::ExprVec(ref exprs) => {\n+          hir::ExprArray(ref exprs) => {\n             self.propagate_through_exprs(&exprs[..], succ)\n           }\n \n@@ -1436,7 +1436,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       hir::ExprCall(..) | hir::ExprMethodCall(..) | hir::ExprIf(..) |\n       hir::ExprMatch(..) | hir::ExprWhile(..) | hir::ExprLoop(..) |\n       hir::ExprIndex(..) | hir::ExprField(..) | hir::ExprTupField(..) |\n-      hir::ExprVec(..) | hir::ExprTup(..) | hir::ExprBinary(..) |\n+      hir::ExprArray(..) | hir::ExprTup(..) | hir::ExprBinary(..) |\n       hir::ExprCast(..) | hir::ExprUnary(..) | hir::ExprRet(..) |\n       hir::ExprBreak(..) | hir::ExprAgain(..) | hir::ExprLit(_) |\n       hir::ExprBlock(..) | hir::ExprAddrOf(..) |"}, {"sha": "c50e668a417946c59d12bc377ab43dce9c2bb88d", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -503,7 +503,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n           hir::ExprClosure(..) | hir::ExprRet(..) |\n           hir::ExprUnary(..) |\n           hir::ExprMethodCall(..) | hir::ExprCast(..) |\n-          hir::ExprVec(..) | hir::ExprTup(..) | hir::ExprIf(..) |\n+          hir::ExprArray(..) | hir::ExprTup(..) | hir::ExprIf(..) |\n           hir::ExprBinary(..) | hir::ExprWhile(..) |\n           hir::ExprBlock(..) | hir::ExprLoop(..) | hir::ExprMatch(..) |\n           hir::ExprLit(..) | hir::ExprBreak(..) |\n@@ -1155,7 +1155,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             self.cat_pattern_(subcmt, &subpat, op)?;\n           }\n \n-          PatKind::Vec(ref before, ref slice, ref after) => {\n+          PatKind::Slice(ref before, ref slice, ref after) => {\n             let context = InteriorOffsetKind::Pattern;\n             let elt_cmt = self.cat_index(pat, cmt, context)?;\n             for before_pat in before {"}, {"sha": "90b6cbad3d9aea54849a66893debd7e0279bcae0", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -961,7 +961,7 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor, local: &hir::Local) {\n                 field_pats.iter().any(|fp| is_binding_pat(&fp.node.pat))\n             }\n \n-            PatKind::Vec(ref pats1, ref pats2, ref pats3) => {\n+            PatKind::Slice(ref pats1, ref pats2, ref pats3) => {\n                 pats1.iter().any(|p| is_binding_pat(&p)) ||\n                 pats2.iter().any(|p| is_binding_pat(&p)) ||\n                 pats3.iter().any(|p| is_binding_pat(&p))\n@@ -1012,7 +1012,7 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor, local: &hir::Local) {\n                         visitor, &field.expr, blk_id);\n                 }\n             }\n-            hir::ExprVec(ref subexprs) |\n+            hir::ExprArray(ref subexprs) |\n             hir::ExprTup(ref subexprs) => {\n                 for subexpr in subexprs {\n                     record_rvalue_scope_if_borrow_expr("}, {"sha": "997d67506528d299e2135e2ee853eabad19269d2", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -1016,7 +1016,7 @@ pub enum CastKind {\n \n #[derive(Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum AggregateKind<'tcx> {\n-    Vec,\n+    Array,\n     Tuple,\n     /// The second field is variant number (discriminant), it's equal to 0\n     /// for struct and union expressions. The fourth field is active field\n@@ -1107,8 +1107,6 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n             }\n \n             Aggregate(ref kind, ref lvs) => {\n-                use self::AggregateKind::*;\n-\n                 fn fmt_tuple(fmt: &mut Formatter, lvs: &[Operand]) -> fmt::Result {\n                     let mut tuple_fmt = fmt.debug_tuple(\"\");\n                     for lv in lvs {\n@@ -1118,17 +1116,17 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                 }\n \n                 match *kind {\n-                    Vec => write!(fmt, \"{:?}\", lvs),\n+                    AggregateKind::Array => write!(fmt, \"{:?}\", lvs),\n \n-                    Tuple => {\n+                    AggregateKind::Tuple => {\n                         match lvs.len() {\n                             0 => write!(fmt, \"()\"),\n                             1 => write!(fmt, \"({:?},)\", lvs[0]),\n                             _ => fmt_tuple(fmt, lvs),\n                         }\n                     }\n \n-                    Adt(adt_def, variant, substs, _) => {\n+                    AggregateKind::Adt(adt_def, variant, substs, _) => {\n                         let variant_def = &adt_def.variants[variant];\n \n                         ppaux::parameterized(fmt, substs, variant_def.did,\n@@ -1147,7 +1145,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         }\n                     }\n \n-                    Closure(def_id, _) => ty::tls::with(|tcx| {\n+                    AggregateKind::Closure(def_id, _) => ty::tls::with(|tcx| {\n                         if let Some(node_id) = tcx.map.as_local_node_id(def_id) {\n                             let name = format!(\"[closure@{:?}]\", tcx.map.span(node_id));\n                             let mut struct_fmt = fmt.debug_struct(&name);"}, {"sha": "41b2c49072751664d713d235482cbef28730a503", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -175,7 +175,7 @@ impl<'tcx> Rvalue<'tcx> {\n             }\n             &Rvalue::Aggregate(ref ak, ref ops) => {\n                 match *ak {\n-                    AggregateKind::Vec => {\n+                    AggregateKind::Array => {\n                         if let Some(operand) = ops.get(0) {\n                             let ty = operand.ty(mir, tcx);\n                             Some(tcx.mk_array(ty, ops.len()))"}, {"sha": "eb098ef107ec3856d3d71f019d2e440e6d4d86e3", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -531,7 +531,7 @@ macro_rules! make_mir_visitor {\n                     Rvalue::Aggregate(ref $($mutability)* kind,\n                                       ref $($mutability)* operands) => {\n                         match *kind {\n-                            AggregateKind::Vec => {\n+                            AggregateKind::Array => {\n                             }\n                             AggregateKind::Tuple => {\n                             }"}, {"sha": "befc9533c387b338747e386c4e876ab0ff19ec44", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -24,7 +24,7 @@ pub enum SimplifiedType {\n     FloatSimplifiedType(ast::FloatTy),\n     AdtSimplifiedType(DefId),\n     StrSimplifiedType,\n-    VecSimplifiedType,\n+    ArraySimplifiedType,\n     PtrSimplifiedType,\n     NeverSimplifiedType,\n     TupleSimplifiedType(usize),\n@@ -57,7 +57,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::TyFloat(float_type) => Some(FloatSimplifiedType(float_type)),\n         ty::TyAdt(def, _) => Some(AdtSimplifiedType(def.did)),\n         ty::TyStr => Some(StrSimplifiedType),\n-        ty::TyArray(..) | ty::TySlice(_) => Some(VecSimplifiedType),\n+        ty::TyArray(..) | ty::TySlice(_) => Some(ArraySimplifiedType),\n         ty::TyRawPtr(_) => Some(PtrSimplifiedType),\n         ty::TyTrait(ref trait_info) => {\n             Some(TraitSimplifiedType(trait_info.principal.def_id()))"}, {"sha": "cc13299d4347585a8ce6f480e0951c1be6c963e6", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -2228,7 +2228,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             hir::ExprClosure(..) |\n             hir::ExprBlock(..) |\n             hir::ExprRepeat(..) |\n-            hir::ExprVec(..) |\n+            hir::ExprArray(..) |\n             hir::ExprBreak(..) |\n             hir::ExprAgain(..) |\n             hir::ExprRet(..) |"}, {"sha": "4a6f12e8ba3425418955ba9b25164eb8038ed9b0", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -610,14 +610,14 @@ fn construct_witness<'a,'tcx>(cx: &MatchCheckCtxt<'a,'tcx>, ctor: &Constructor,\n         ty::TySlice(_) => match ctor {\n             &Slice(n) => {\n                 assert_eq!(pats_len, n);\n-                PatKind::Vec(pats.collect(), None, hir::HirVec::new())\n+                PatKind::Slice(pats.collect(), None, hir::HirVec::new())\n             },\n             _ => unreachable!()\n         },\n \n         ty::TyArray(_, len) => {\n             assert_eq!(pats_len, len);\n-            PatKind::Vec(pats.collect(), None, hir::HirVec::new())\n+            PatKind::Slice(pats.collect(), None, hir::HirVec::new())\n         }\n \n         _ => {\n@@ -713,7 +713,7 @@ fn is_useful<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>,\n     };\n \n     let max_slice_length = rows.iter().filter_map(|row| match row[0].0.node {\n-        PatKind::Vec(ref before, _, ref after) => Some(before.len() + after.len()),\n+        PatKind::Slice(ref before, _, ref after) => Some(before.len() + after.len()),\n         _ => None\n     }).max().map_or(0, |v| v + 1);\n \n@@ -812,7 +812,7 @@ fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,\n             vec![ConstantValue(eval_const_expr(cx.tcx, &expr))],\n         PatKind::Range(ref lo, ref hi) =>\n             vec![ConstantRange(eval_const_expr(cx.tcx, &lo), eval_const_expr(cx.tcx, &hi))],\n-        PatKind::Vec(ref before, ref slice, ref after) =>\n+        PatKind::Slice(ref before, ref slice, ref after) =>\n             match left_ty.sty {\n                 ty::TyArray(..) => vec![Single],\n                 ty::TySlice(_) if slice.is_some() => {\n@@ -1001,7 +1001,7 @@ pub fn specialize<'a, 'b, 'tcx>(\n             }\n         }\n \n-        PatKind::Vec(ref before, ref slice, ref after) => {\n+        PatKind::Slice(ref before, ref slice, ref after) => {\n             let pat_len = before.len() + after.len();\n             match *constructor {\n                 Single => {"}, {"sha": "3bf936dc9960c26e206a5bcbc9e1320f98107008", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -317,11 +317,11 @@ pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             PatKind::Struct(path.clone(), field_pats, false)\n         }\n \n-        hir::ExprVec(ref exprs) => {\n+        hir::ExprArray(ref exprs) => {\n             let pats = exprs.iter()\n                             .map(|expr| const_expr_to_pat(tcx, &expr, pat_id, span))\n                             .collect::<Result<_, _>>()?;\n-            PatKind::Vec(pats, None, hir::HirVec::new())\n+            PatKind::Slice(pats, None, hir::HirVec::new())\n         }\n \n         hir::ExprPath(_, ref path) => {\n@@ -898,7 +898,7 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             Array(_, n) if idx >= n => {\n                 signal!(e, IndexOutOfBounds { len: n, index: idx })\n             }\n-            Array(v, n) => if let hir::ExprVec(ref v) = tcx.map.expect_expr(v).node {\n+            Array(v, n) => if let hir::ExprArray(ref v) = tcx.map.expect_expr(v).node {\n                 assert_eq!(n as usize as u64, n);\n                 eval_const_expr_partial(tcx, &v[idx as usize], ty_hint, fn_args)?\n             } else {\n@@ -925,7 +925,7 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             _ => signal!(e, IndexedNonVec),\n         }\n       }\n-      hir::ExprVec(ref v) => Array(e.id, v.len() as u64),\n+      hir::ExprArray(ref v) => Array(e.id, v.len() as u64),\n       hir::ExprRepeat(_, ref n) => {\n           let len_hint = ty_hint.checked_or(tcx.types.usize);\n           Repeat("}, {"sha": "d0ae83a9826c25fbe35b2447011c1da2ed9e419f", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -207,7 +207,7 @@ enum SawExprComponent<'a> {\n     SawExprAgain(Option<token::InternedString>),\n \n     SawExprBox,\n-    SawExprVec,\n+    SawExprArray,\n     SawExprCall,\n     SawExprMethodCall,\n     SawExprTup,\n@@ -235,7 +235,7 @@ enum SawExprComponent<'a> {\n fn saw_expr<'a>(node: &'a Expr_) -> SawExprComponent<'a> {\n     match *node {\n         ExprBox(..)              => SawExprBox,\n-        ExprVec(..)              => SawExprVec,\n+        ExprArray(..)            => SawExprArray,\n         ExprCall(..)             => SawExprCall,\n         ExprMethodCall(..)       => SawExprMethodCall,\n         ExprTup(..)              => SawExprTup,"}, {"sha": "2123235ddc1d887f7417d8f26e32c8aebe64ea0f", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -160,7 +160,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                           .map(|f| unpack!(block = this.as_operand(block, f)))\n                           .collect();\n \n-                block.and(Rvalue::Aggregate(AggregateKind::Vec, fields))\n+                block.and(Rvalue::Aggregate(AggregateKind::Array, fields))\n             }\n             ExprKind::Tuple { fields } => { // see (*) above\n                 // first process the set of fields"}, {"sha": "2840538ae5b4f473feca3ec31e11bccb692b3cbd", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -613,7 +613,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 value: value.to_ref(),\n                 value_extents: cx.tcx.region_maps.node_extent(value.id)\n             },\n-        hir::ExprVec(ref fields) =>\n+        hir::ExprArray(ref fields) =>\n             ExprKind::Vec { fields: fields.to_ref() },\n         hir::ExprTup(ref fields) =>\n             ExprKind::Tuple { fields: fields.to_ref() },"}, {"sha": "8751b1dc03aabd7780d2baf08b2a0a3641529c68", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -113,7 +113,7 @@ impl<'patcx, 'cx, 'gcx, 'tcx> PatCx<'patcx, 'cx, 'gcx, 'tcx> {\n                 PatternKind::Deref { subpattern: self.to_pattern(subpattern) }\n             }\n \n-            PatKind::Vec(ref prefix, ref slice, ref suffix) => {\n+            PatKind::Slice(ref prefix, ref slice, ref suffix) => {\n                 let ty = self.cx.tcx.node_id_to_type(pat.id);\n                 match ty.sty {\n                     ty::TyRef(_, mt) =>"}, {"sha": "2dcefcc12f6e5e3b3374773f561309f30c4ca9a7", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -202,7 +202,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BuildMir<'a, 'tcx> {\n \n     // Array lengths, i.e. [T; constant].\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n-        if let hir::TyFixedLengthVec(_, ref length) = ty.node {\n+        if let hir::TyArray(_, ref length) = ty.node {\n             self.build_const_integer(length);\n         }\n         intravisit::walk_ty(self, ty);"}, {"sha": "1b86c84a057026f324769d04ee6405a3d06962a3", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -602,7 +602,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n         hir::ExprIndex(..) |\n         hir::ExprField(..) |\n         hir::ExprTupField(..) |\n-        hir::ExprVec(_) |\n+        hir::ExprArray(_) |\n         hir::ExprType(..) |\n         hir::ExprTup(..) => {}\n "}, {"sha": "e97d40102af64d0448a8d3eca0fdc9d5abf4713e", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -572,7 +572,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 }\n \n                 match *kind {\n-                    mir::AggregateKind::Vec => {\n+                    mir::AggregateKind::Array => {\n                         self.const_array(dest_ty, &fields)\n                     }\n                     mir::AggregateKind::Adt(..) |"}, {"sha": "2f6fe8d77d2148ec6b300ebb713ffd48b5693c97", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -1623,7 +1623,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         }\n \n         let result_ty = match ast_ty.node {\n-            hir::TyVec(ref ty) => {\n+            hir::TySlice(ref ty) => {\n                 tcx.mk_slice(self.ast_ty_to_ty(rscope, &ty))\n             }\n             hir::TyObjectSum(ref ty, ref bounds) => {\n@@ -1758,7 +1758,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n                 ty\n             }\n-            hir::TyFixedLengthVec(ref ty, ref e) => {\n+            hir::TyArray(ref ty, ref e) => {\n                 if let Ok(length) = eval_length(tcx.global_tcx(), &e, \"array length\") {\n                     tcx.mk_array(self.ast_ty_to_ty(rscope, &ty), length)\n                 } else {"}, {"sha": "da9c88a65186c10a655cf329813fe69571ac8d6e", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -227,7 +227,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     tcx.types.err\n                 }\n             }\n-            PatKind::Vec(ref before, ref slice, ref after) => {\n+            PatKind::Slice(ref before, ref slice, ref after) => {\n                 let expected_ty = self.structurally_resolved_type(pat.span, expected);\n                 let (inner_ty, slice_ty) = match expected_ty.sty {\n                     ty::TyArray(inner_ty, size) => {"}, {"sha": "2ac2dab999bb0470d0ee7111a76a87d6b82ebd7a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -450,7 +450,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n \n     fn visit_ty(&mut self, t: &'tcx hir::Ty) {\n         match t.node {\n-            hir::TyFixedLengthVec(_, ref expr) => {\n+            hir::TyArray(_, ref expr) => {\n                 check_const_with_type(self.ccx, &expr, self.ccx.tcx.types.usize, expr.id);\n             }\n             _ => {}\n@@ -626,7 +626,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n     // need to record the type for that node\n     fn visit_ty(&mut self, t: &'gcx hir::Ty) {\n         match t.node {\n-            hir::TyFixedLengthVec(ref ty, ref count_expr) => {\n+            hir::TyArray(ref ty, ref count_expr) => {\n                 self.visit_ty(&ty);\n                 self.fcx.check_expr_with_hint(&count_expr, self.fcx.tcx.types.usize);\n             }\n@@ -3590,7 +3590,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               self.check_method_call(expr, name, &args[..], &tps[..], expected, lvalue_pref)\n           }\n           hir::ExprCast(ref e, ref t) => {\n-            if let hir::TyFixedLengthVec(_, ref count_expr) = t.node {\n+            if let hir::TyArray(_, ref count_expr) = t.node {\n                 self.check_expr_with_hint(&count_expr, tcx.types.usize);\n             }\n \n@@ -3623,7 +3623,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.check_expr_eq_type(&e, typ);\n             typ\n           }\n-          hir::ExprVec(ref args) => {\n+          hir::ExprArray(ref args) => {\n             let uty = expected.to_option(self).and_then(|uty| {\n                 match uty.sty {\n                     ty::TyArray(ty, _) | ty::TySlice(ty) => Some(ty),"}, {"sha": "8685f703a599c8888f7becf687f9091f53d364e8", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -247,7 +247,7 @@ impl<'cx, 'gcx, 'tcx, 'v> Visitor<'v> for WritebackCx<'cx, 'gcx, 'tcx> {\n \n     fn visit_ty(&mut self, t: &hir::Ty) {\n         match t.node {\n-            hir::TyFixedLengthVec(ref ty, ref count_expr) => {\n+            hir::TyArray(ref ty, ref count_expr) => {\n                 self.visit_ty(&ty);\n                 write_ty_to_tcx(self.fcx.ccx, count_expr.id, self.tcx().types.usize);\n             }"}, {"sha": "af482a940bc14421f902fca33c5ef48f50b44cf6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b7bdd0c2920fcf77da6608d4829945a110b7e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "patch": "@@ -1646,8 +1646,8 @@ impl Clean<Type> for hir::Ty {\n             TyRptr(ref l, ref m) =>\n                 BorrowedRef {lifetime: l.clean(cx), mutability: m.mutbl.clean(cx),\n                              type_: box m.ty.clean(cx)},\n-            TyVec(ref ty) => Vector(box ty.clean(cx)),\n-            TyFixedLengthVec(ref ty, ref e) => {\n+            TySlice(ref ty) => Vector(box ty.clean(cx)),\n+            TyArray(ref ty, ref e) => {\n                 let n = if let Some(tcx) = cx.tcx_opt() {\n                     use rustc_const_math::{ConstInt, ConstUsize};\n                     use rustc_const_eval::eval_const_expr;\n@@ -2699,7 +2699,7 @@ fn name_from_pat(p: &hir::Pat) -> String {\n         },\n         PatKind::Range(..) => panic!(\"tried to get argument name from PatKind::Range, \\\n                               which is not allowed in function arguments\"),\n-        PatKind::Vec(ref begin, ref mid, ref end) => {\n+        PatKind::Slice(ref begin, ref mid, ref end) => {\n             let begin = begin.iter().map(|p| name_from_pat(&**p));\n             let mid = mid.as_ref().map(|p| format!(\"..{}\", name_from_pat(&**p))).into_iter();\n             let end = end.iter().map(|p| name_from_pat(&**p));"}]}