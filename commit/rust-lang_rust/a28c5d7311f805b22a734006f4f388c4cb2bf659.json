{"sha": "a28c5d7311f805b22a734006f4f388c4cb2bf659", "node_id": "C_kwDOAAsO6NoAKGEyOGM1ZDczMTFmODA1YjIyYTczNDAwNmY0ZjM4OGM0Y2IyYmY2NTk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-27T10:45:36Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-27T10:45:36Z"}, "message": "Rename `Dyn*` nodes to `Any*` nodes", "tree": {"sha": "fdcb5f851fbb20393dd013707d899eda1413637d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdcb5f851fbb20393dd013707d899eda1413637d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a28c5d7311f805b22a734006f4f388c4cb2bf659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a28c5d7311f805b22a734006f4f388c4cb2bf659", "html_url": "https://github.com/rust-lang/rust/commit/a28c5d7311f805b22a734006f4f388c4cb2bf659", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a28c5d7311f805b22a734006f4f388c4cb2bf659/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "009e6ceb1ddcd27a9ced3bcb7d0ef823379185a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/009e6ceb1ddcd27a9ced3bcb7d0ef823379185a1", "html_url": "https://github.com/rust-lang/rust/commit/009e6ceb1ddcd27a9ced3bcb7d0ef823379185a1"}], "stats": {"total": 160, "additions": 80, "deletions": 80}, "files": [{"sha": "9de2c3211195a989184f075f1faa8d9259ba2758", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28c5d7311f805b22a734006f4f388c4cb2bf659/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28c5d7311f805b22a734006f4f388c4cb2bf659/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=a28c5d7311f805b22a734006f4f388c4cb2bf659", "patch": "@@ -682,7 +682,7 @@ impl<'db> SemanticsImpl<'db> {\n     fn resolve_lifetime_param(&self, lifetime: &ast::Lifetime) -> Option<LifetimeParam> {\n         let text = lifetime.text();\n         let lifetime_param = lifetime.syntax().ancestors().find_map(|syn| {\n-            let gpl = ast::DynGenericParamsOwner::cast(syn)?.generic_param_list()?;\n+            let gpl = ast::AnyGenericParamsOwner::cast(syn)?.generic_param_list()?;\n             gpl.lifetime_params()\n                 .find(|tp| tp.lifetime().as_ref().map(|lt| lt.text()).as_ref() == Some(&text))\n         })?;"}, {"sha": "95516e2e839d8f6200b53d06f23b9d2db8fb393b", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a28c5d7311f805b22a734006f4f388c4cb2bf659/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28c5d7311f805b22a734006f4f388c4cb2bf659/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=a28c5d7311f805b22a734006f4f388c4cb2bf659", "patch": "@@ -411,47 +411,47 @@ impl AttrsWithOwner {\n                 let file_id = id.parent.file_id(db);\n                 let root = db.parse_or_expand(file_id).unwrap();\n                 let owner = match &map[id.local_id] {\n-                    Either::Left(it) => ast::DynAttrsOwner::new(it.to_node(&root)),\n-                    Either::Right(it) => ast::DynAttrsOwner::new(it.to_node(&root)),\n+                    Either::Left(it) => ast::AnyAttrsOwner::new(it.to_node(&root)),\n+                    Either::Right(it) => ast::AnyAttrsOwner::new(it.to_node(&root)),\n                 };\n                 InFile::new(file_id, owner)\n             }\n             AttrDefId::AdtId(adt) => match adt {\n-                AdtId::StructId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n-                AdtId::UnionId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n-                AdtId::EnumId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n+                AdtId::StructId(id) => id.lookup(db).source(db).map(ast::AnyAttrsOwner::new),\n+                AdtId::UnionId(id) => id.lookup(db).source(db).map(ast::AnyAttrsOwner::new),\n+                AdtId::EnumId(id) => id.lookup(db).source(db).map(ast::AnyAttrsOwner::new),\n             },\n-            AttrDefId::FunctionId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n+            AttrDefId::FunctionId(id) => id.lookup(db).source(db).map(ast::AnyAttrsOwner::new),\n             AttrDefId::EnumVariantId(id) => {\n                 let map = db.variants_attrs_source_map(id.parent);\n                 let file_id = id.parent.lookup(db).id.file_id();\n                 let root = db.parse_or_expand(file_id).unwrap();\n-                InFile::new(file_id, ast::DynAttrsOwner::new(map[id.local_id].to_node(&root)))\n+                InFile::new(file_id, ast::AnyAttrsOwner::new(map[id.local_id].to_node(&root)))\n             }\n-            AttrDefId::StaticId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n-            AttrDefId::ConstId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n-            AttrDefId::TraitId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n-            AttrDefId::TypeAliasId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n+            AttrDefId::StaticId(id) => id.lookup(db).source(db).map(ast::AnyAttrsOwner::new),\n+            AttrDefId::ConstId(id) => id.lookup(db).source(db).map(ast::AnyAttrsOwner::new),\n+            AttrDefId::TraitId(id) => id.lookup(db).source(db).map(ast::AnyAttrsOwner::new),\n+            AttrDefId::TypeAliasId(id) => id.lookup(db).source(db).map(ast::AnyAttrsOwner::new),\n             AttrDefId::MacroDefId(id) => id.ast_id().either(\n-                |it| it.with_value(ast::DynAttrsOwner::new(it.to_node(db.upcast()))),\n-                |it| it.with_value(ast::DynAttrsOwner::new(it.to_node(db.upcast()))),\n+                |it| it.with_value(ast::AnyAttrsOwner::new(it.to_node(db.upcast()))),\n+                |it| it.with_value(ast::AnyAttrsOwner::new(it.to_node(db.upcast()))),\n             ),\n-            AttrDefId::ImplId(id) => id.lookup(db).source(db).map(ast::DynAttrsOwner::new),\n+            AttrDefId::ImplId(id) => id.lookup(db).source(db).map(ast::AnyAttrsOwner::new),\n             AttrDefId::GenericParamId(id) => match id {\n                 GenericParamId::TypeParamId(id) => {\n                     id.parent.child_source(db).map(|source| match &source[id.local_id] {\n-                        Either::Left(id) => ast::DynAttrsOwner::new(id.clone()),\n-                        Either::Right(id) => ast::DynAttrsOwner::new(id.clone()),\n+                        Either::Left(id) => ast::AnyAttrsOwner::new(id.clone()),\n+                        Either::Right(id) => ast::AnyAttrsOwner::new(id.clone()),\n                     })\n                 }\n                 GenericParamId::LifetimeParamId(id) => id\n                     .parent\n                     .child_source(db)\n-                    .map(|source| ast::DynAttrsOwner::new(source[id.local_id].clone())),\n+                    .map(|source| ast::AnyAttrsOwner::new(source[id.local_id].clone())),\n                 GenericParamId::ConstParamId(id) => id\n                     .parent\n                     .child_source(db)\n-                    .map(|source| ast::DynAttrsOwner::new(source[id.local_id].clone())),\n+                    .map(|source| ast::AnyAttrsOwner::new(source[id.local_id].clone())),\n             },\n         };\n "}, {"sha": "9fbd4aea198528ead6f289a31ea8a024c11c9a3f", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/a28c5d7311f805b22a734006f4f388c4cb2bf659/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28c5d7311f805b22a734006f4f388c4cb2bf659/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=a28c5d7311f805b22a734006f4f388c4cb2bf659", "patch": "@@ -1444,45 +1444,45 @@ pub enum GenericParam {\n }\n impl ast::AttrsOwner for GenericParam {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynArgListOwner {\n+pub struct AnyArgListOwner {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::ArgListOwner for DynArgListOwner {}\n+impl ast::ArgListOwner for AnyArgListOwner {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynAttrsOwner {\n+pub struct AnyAttrsOwner {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for DynAttrsOwner {}\n+impl ast::AttrsOwner for AnyAttrsOwner {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynGenericParamsOwner {\n+pub struct AnyGenericParamsOwner {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::GenericParamsOwner for DynGenericParamsOwner {}\n+impl ast::GenericParamsOwner for AnyGenericParamsOwner {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynLoopBodyOwner {\n+pub struct AnyLoopBodyOwner {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::LoopBodyOwner for DynLoopBodyOwner {}\n+impl ast::LoopBodyOwner for AnyLoopBodyOwner {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynModuleItemOwner {\n+pub struct AnyModuleItemOwner {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::ModuleItemOwner for DynModuleItemOwner {}\n+impl ast::ModuleItemOwner for AnyModuleItemOwner {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynNameOwner {\n+pub struct AnyNameOwner {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::NameOwner for DynNameOwner {}\n+impl ast::NameOwner for AnyNameOwner {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynTypeBoundsOwner {\n+pub struct AnyTypeBoundsOwner {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::TypeBoundsOwner for DynTypeBoundsOwner {}\n+impl ast::TypeBoundsOwner for AnyTypeBoundsOwner {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynVisibilityOwner {\n+pub struct AnyVisibilityOwner {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::VisibilityOwner for DynVisibilityOwner {}\n+impl ast::VisibilityOwner for AnyVisibilityOwner {}\n impl AstNode for Name {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == NAME }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3597,31 +3597,31 @@ impl AstNode for GenericParam {\n         }\n     }\n }\n-impl DynArgListOwner {\n+impl AnyArgListOwner {\n     #[inline]\n-    pub fn new<T: ast::ArgListOwner>(node: T) -> DynArgListOwner {\n-        DynArgListOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::ArgListOwner>(node: T) -> AnyArgListOwner {\n+        AnyArgListOwner { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynArgListOwner {\n+impl AstNode for AnyArgListOwner {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             CALL_EXPR | METHOD_CALL_EXPR => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynArgListOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyArgListOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl DynAttrsOwner {\n+impl AnyAttrsOwner {\n     #[inline]\n-    pub fn new<T: ast::AttrsOwner>(node: T) -> DynAttrsOwner {\n-        DynAttrsOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::AttrsOwner>(node: T) -> AnyAttrsOwner {\n+        AnyAttrsOwner { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynAttrsOwner {\n+impl AstNode for AnyAttrsOwner {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             MACRO_CALL\n@@ -3692,71 +3692,71 @@ impl AstNode for DynAttrsOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynAttrsOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyAttrsOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl DynGenericParamsOwner {\n+impl AnyGenericParamsOwner {\n     #[inline]\n-    pub fn new<T: ast::GenericParamsOwner>(node: T) -> DynGenericParamsOwner {\n-        DynGenericParamsOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::GenericParamsOwner>(node: T) -> AnyGenericParamsOwner {\n+        AnyGenericParamsOwner { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynGenericParamsOwner {\n+impl AstNode for AnyGenericParamsOwner {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             ENUM | FN | IMPL | STRUCT | TRAIT | TYPE_ALIAS | UNION => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynGenericParamsOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyGenericParamsOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl DynLoopBodyOwner {\n+impl AnyLoopBodyOwner {\n     #[inline]\n-    pub fn new<T: ast::LoopBodyOwner>(node: T) -> DynLoopBodyOwner {\n-        DynLoopBodyOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::LoopBodyOwner>(node: T) -> AnyLoopBodyOwner {\n+        AnyLoopBodyOwner { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynLoopBodyOwner {\n+impl AstNode for AnyLoopBodyOwner {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             FOR_EXPR | LOOP_EXPR | WHILE_EXPR => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynLoopBodyOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyLoopBodyOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl DynModuleItemOwner {\n+impl AnyModuleItemOwner {\n     #[inline]\n-    pub fn new<T: ast::ModuleItemOwner>(node: T) -> DynModuleItemOwner {\n-        DynModuleItemOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::ModuleItemOwner>(node: T) -> AnyModuleItemOwner {\n+        AnyModuleItemOwner { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynModuleItemOwner {\n+impl AstNode for AnyModuleItemOwner {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             MACRO_ITEMS | SOURCE_FILE | ITEM_LIST => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynModuleItemOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyModuleItemOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl DynNameOwner {\n+impl AnyNameOwner {\n     #[inline]\n-    pub fn new<T: ast::NameOwner>(node: T) -> DynNameOwner {\n-        DynNameOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::NameOwner>(node: T) -> AnyNameOwner {\n+        AnyNameOwner { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynNameOwner {\n+impl AstNode for AnyNameOwner {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             CONST | ENUM | FN | MACRO_RULES | MACRO_DEF | MODULE | STATIC | STRUCT | TRAIT\n@@ -3766,35 +3766,35 @@ impl AstNode for DynNameOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynNameOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyNameOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl DynTypeBoundsOwner {\n+impl AnyTypeBoundsOwner {\n     #[inline]\n-    pub fn new<T: ast::TypeBoundsOwner>(node: T) -> DynTypeBoundsOwner {\n-        DynTypeBoundsOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::TypeBoundsOwner>(node: T) -> AnyTypeBoundsOwner {\n+        AnyTypeBoundsOwner { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynTypeBoundsOwner {\n+impl AstNode for AnyTypeBoundsOwner {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             ASSOC_TYPE_ARG | TRAIT | TYPE_ALIAS | LIFETIME_PARAM | TYPE_PARAM | WHERE_PRED => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynTypeBoundsOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyTypeBoundsOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl DynVisibilityOwner {\n+impl AnyVisibilityOwner {\n     #[inline]\n-    pub fn new<T: ast::VisibilityOwner>(node: T) -> DynVisibilityOwner {\n-        DynVisibilityOwner { syntax: node.syntax().clone() }\n+    pub fn new<T: ast::VisibilityOwner>(node: T) -> AnyVisibilityOwner {\n+        AnyVisibilityOwner { syntax: node.syntax().clone() }\n     }\n }\n-impl AstNode for DynVisibilityOwner {\n+impl AstNode for AnyVisibilityOwner {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             CONST | ENUM | EXTERN_CRATE | FN | IMPL | MACRO_RULES | MACRO_DEF | MODULE | STATIC\n@@ -3805,7 +3805,7 @@ impl AstNode for DynVisibilityOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        Self::can_cast(syntax.kind()).then(|| DynVisibilityOwner { syntax })\n+        Self::can_cast(syntax.kind()).then(|| AnyVisibilityOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }"}, {"sha": "18a324e3ea9d83203bef9d547b4c4716cf565af2", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28c5d7311f805b22a734006f4f388c4cb2bf659/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28c5d7311f805b22a734006f4f388c4cb2bf659/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=a28c5d7311f805b22a734006f4f388c4cb2bf659", "patch": "@@ -531,7 +531,7 @@ impl ast::Variant {\n \n impl ast::Item {\n     pub fn generic_param_list(&self) -> Option<ast::GenericParamList> {\n-        ast::DynGenericParamsOwner::cast(self.syntax().clone())?.generic_param_list()\n+        ast::AnyGenericParamsOwner::cast(self.syntax().clone())?.generic_param_list()\n     }\n }\n "}, {"sha": "8897c29722f663918885d5eabfe233631cd8ea13", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a28c5d7311f805b22a734006f4f388c4cb2bf659/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28c5d7311f805b22a734006f4f388c4cb2bf659/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=a28c5d7311f805b22a734006f4f388c4cb2bf659", "patch": "@@ -209,15 +209,15 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n         })\n         .unzip();\n \n-    let (dyn_node_defs, dyn_node_boilerplate_impls): (Vec<_>, Vec<_>) = grammar\n+    let (any_node_defs, any_node_boilerplate_impls): (Vec<_>, Vec<_>) = grammar\n         .nodes\n         .iter()\n         .flat_map(|node| node.traits.iter().map(move |t| (t, node)))\n         .into_group_map()\n         .into_iter()\n         .sorted_by_key(|(k, _)| k.clone())\n         .map(|(trait_name, nodes)| {\n-            let name = format_ident!(\"Dyn{}\", trait_name);\n+            let name = format_ident!(\"Any{}\", trait_name);\n             let trait_name = format_ident!(\"{}\", trait_name);\n             let kinds: Vec<_> = nodes\n                 .iter()\n@@ -297,10 +297,10 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n \n         #(#node_defs)*\n         #(#enum_defs)*\n-        #(#dyn_node_defs)*\n+        #(#any_node_defs)*\n         #(#node_boilerplate_impls)*\n         #(#enum_boilerplate_impls)*\n-        #(#dyn_node_boilerplate_impls)*\n+        #(#any_node_boilerplate_impls)*\n         #(#display_impls)*\n     };\n "}]}