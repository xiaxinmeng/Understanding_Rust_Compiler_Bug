{"sha": "b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYWI2OWZjZjE4Y2Q3ZTRjNzg5NGQ1Y2VhNDBmMmFiY2M5ZTc1YTI=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-10-17T05:27:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-17T05:27:10Z"}, "message": "Merge pull request #3326 from mrbuzz/master\n\nReword help message for len_zero", "tree": {"sha": "94ec49ef32de0b9df0ff19429ebce520a86cffea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94ec49ef32de0b9df0ff19429ebce520a86cffea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbxsguCRBK7hj4Ov3rIwAAdHIIAFBj3avMfU0B0yBKqxjgohMN\nY0M5kZoOZ2mPIdX8X23m9hfG9s/xqDctoDHk1yJqIXqUJwsE5exqNzRYFY8jAd0G\ndfgUo805OAXIoS4DcU25Vo1EpVW7JKoFlf2b9iF1TmPAyQat5rc32NzmVaEJ6FKf\noIMCj0EJZ9oFeOIONuyeE39yRThrhH1QFXx1czpmDWIctGLaKjXmrkxVp/ZMuf88\n656BFjbvxXHqWDk29PUqyIX2JUzDYbHG362vxS4NAXkElmbLX/bfAw58Kn/yyzCA\n1z/wHfydN/duw2PCvOkigunLEd/oPjmYNfC27o9l9EJrV0DcGgnMaAeIZ+lagsY=\n=WQ1Y\n-----END PGP SIGNATURE-----\n", "payload": "tree 94ec49ef32de0b9df0ff19429ebce520a86cffea\nparent dae7abb16b973ed1c808e2a86644783d23838ab4\nparent aa88e68902663db1bc5e5aa93c7884e405dd6b32\nauthor Philipp Hansch <dev@phansch.net> 1539754030 +0200\ncommitter GitHub <noreply@github.com> 1539754030 +0200\n\nMerge pull request #3326 from mrbuzz/master\n\nReword help message for len_zero"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2", "html_url": "https://github.com/rust-lang/rust/commit/b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dae7abb16b973ed1c808e2a86644783d23838ab4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dae7abb16b973ed1c808e2a86644783d23838ab4", "html_url": "https://github.com/rust-lang/rust/commit/dae7abb16b973ed1c808e2a86644783d23838ab4"}, {"sha": "aa88e68902663db1bc5e5aa93c7884e405dd6b32", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa88e68902663db1bc5e5aa93c7884e405dd6b32", "html_url": "https://github.com/rust-lang/rust/commit/aa88e68902663db1bc5e5aa93c7884e405dd6b32"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "789a569f4cd1ee9d136f119b7535043e5577b79e", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2", "patch": "@@ -240,7 +240,7 @@ fn check_len(cx: &LateContext<'_, '_>, span: Span, method_name: Name, args: &[Ex\n                 LEN_ZERO,\n                 span,\n                 &format!(\"length comparison to {}\", if compare_to == 0 { \"zero\" } else { \"one\" }),\n-                \"using `is_empty` is more concise\",\n+                \"using `is_empty` is clearer and more explicit\",\n                 format!(\"{}{}.is_empty()\", op, snippet(cx, args[0].span, \"_\")),\n             );\n         }"}, {"sha": "1f937bafdefb4020802254b00ab76ae86ffa0b32", "filename": "tests/ui/len_zero.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=b0ab69fcf18cd7e4c7894d5cea40f2abcc9e75a2", "patch": "@@ -46,87 +46,87 @@ error: length comparison to zero\n    --> $DIR/len_zero.rs:151:8\n     |\n 151 |     if x.len() == 0 {\n-    |        ^^^^^^^^^^^^ help: using `is_empty` is more concise: `x.is_empty()`\n+    |        ^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `x.is_empty()`\n     |\n     = note: `-D clippy::len-zero` implied by `-D warnings`\n \n error: length comparison to zero\n    --> $DIR/len_zero.rs:155:8\n     |\n 155 |     if \"\".len() == 0 {}\n-    |        ^^^^^^^^^^^^^ help: using `is_empty` is more concise: `\"\".is_empty()`\n+    |        ^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `\"\".is_empty()`\n \n error: length comparison to zero\n    --> $DIR/len_zero.rs:170:8\n     |\n 170 |     if has_is_empty.len() == 0 {\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `has_is_empty.is_empty()`\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n    --> $DIR/len_zero.rs:173:8\n     |\n 173 |     if has_is_empty.len() != 0 {\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `!has_is_empty.is_empty()`\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n    --> $DIR/len_zero.rs:176:8\n     |\n 176 |     if has_is_empty.len() > 0 {\n-    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `!has_is_empty.is_empty()`\n+    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n    --> $DIR/len_zero.rs:179:8\n     |\n 179 |     if has_is_empty.len() < 1 {\n-    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `has_is_empty.is_empty()`\n+    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to one\n    --> $DIR/len_zero.rs:182:8\n     |\n 182 |     if has_is_empty.len() >= 1 {\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `!has_is_empty.is_empty()`\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n    --> $DIR/len_zero.rs:193:8\n     |\n 193 |     if 0 == has_is_empty.len() {\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `has_is_empty.is_empty()`\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n    --> $DIR/len_zero.rs:196:8\n     |\n 196 |     if 0 != has_is_empty.len() {\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `!has_is_empty.is_empty()`\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n    --> $DIR/len_zero.rs:199:8\n     |\n 199 |     if 0 < has_is_empty.len() {\n-    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `!has_is_empty.is_empty()`\n+    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n    --> $DIR/len_zero.rs:202:8\n     |\n 202 |     if 1 <= has_is_empty.len() {\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `!has_is_empty.is_empty()`\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n    --> $DIR/len_zero.rs:205:8\n     |\n 205 |     if 1 > has_is_empty.len() {\n-    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `has_is_empty.is_empty()`\n+    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n    --> $DIR/len_zero.rs:219:8\n     |\n 219 |     if with_is_empty.len() == 0 {\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is more concise: `with_is_empty.is_empty()`\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `with_is_empty.is_empty()`\n \n error: length comparison to zero\n    --> $DIR/len_zero.rs:232:8\n     |\n 232 |     if b.len() != 0 {}\n-    |        ^^^^^^^^^^^^ help: using `is_empty` is more concise: `!b.is_empty()`\n+    |        ^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!b.is_empty()`\n \n error: trait `DependsOnFoo` has a `len` method but no (possibly inherited) `is_empty` method\n    --> $DIR/len_zero.rs:238:1"}]}