{"sha": "4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b", "node_id": "C_kwDOAAsO6NoAKDRhYzM2MjZmMmUzNzI4ZTMzM2YxZGQwMjk4ZTVlOGMyZDlhMTZjNmI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-01T02:32:13Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T16:51:29Z"}, "message": "Move `DoubleComparison` into `Operators` lint pass", "tree": {"sha": "3ab0451767dd57373cd6c34c7a5d85de87cc9792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ab0451767dd57373cd6c34c7a5d85de87cc9792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b", "html_url": "https://github.com/rust-lang/rust/commit/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68a7fd22ad39e1d7a50f2fd052696517e719dd18", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a7fd22ad39e1d7a50f2fd052696517e719dd18", "html_url": "https://github.com/rust-lang/rust/commit/68a7fd22ad39e1d7a50f2fd052696517e719dd18"}], "stats": {"total": 189, "additions": 88, "deletions": 101}, "files": [{"sha": "ee0440e52ff85a1ec3bb65d8c88d4801348fa2d3", "filename": "clippy_lints/src/double_comparison.rs", "status": "removed", "additions": 0, "deletions": 96, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=68a7fd22ad39e1d7a50f2fd052696517e719dd18", "patch": "@@ -1,96 +0,0 @@\n-//! Lint on unnecessary double comparisons. Some examples:\n-\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::eq_expr_value;\n-use clippy_utils::source::snippet_with_applicability;\n-use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Span;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for double comparisons that could be simplified to a single expression.\n-    ///\n-    ///\n-    /// ### Why is this bad?\n-    /// Readability.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # let x = 1;\n-    /// # let y = 2;\n-    /// if x == y || x < y {}\n-    /// ```\n-    ///\n-    /// Use instead:\n-    ///\n-    /// ```rust\n-    /// # let x = 1;\n-    /// # let y = 2;\n-    /// if x <= y {}\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub DOUBLE_COMPARISONS,\n-    complexity,\n-    \"unnecessary double comparisons that can be simplified\"\n-}\n-\n-declare_lint_pass!(DoubleComparisons => [DOUBLE_COMPARISONS]);\n-\n-impl<'tcx> DoubleComparisons {\n-    #[expect(clippy::similar_names)]\n-    fn check_binop(cx: &LateContext<'tcx>, op: BinOpKind, lhs: &'tcx Expr<'_>, rhs: &'tcx Expr<'_>, span: Span) {\n-        let (lkind, llhs, lrhs, rkind, rlhs, rrhs) = match (&lhs.kind, &rhs.kind) {\n-            (ExprKind::Binary(lb, llhs, lrhs), ExprKind::Binary(rb, rlhs, rrhs)) => {\n-                (lb.node, llhs, lrhs, rb.node, rlhs, rrhs)\n-            },\n-            _ => return,\n-        };\n-        if !(eq_expr_value(cx, llhs, rlhs) && eq_expr_value(cx, lrhs, rrhs)) {\n-            return;\n-        }\n-        macro_rules! lint_double_comparison {\n-            ($op:tt) => {{\n-                let mut applicability = Applicability::MachineApplicable;\n-                let lhs_str = snippet_with_applicability(cx, llhs.span, \"\", &mut applicability);\n-                let rhs_str = snippet_with_applicability(cx, lrhs.span, \"\", &mut applicability);\n-                let sugg = format!(\"{} {} {}\", lhs_str, stringify!($op), rhs_str);\n-                span_lint_and_sugg(\n-                    cx,\n-                    DOUBLE_COMPARISONS,\n-                    span,\n-                    \"this binary expression can be simplified\",\n-                    \"try\",\n-                    sugg,\n-                    applicability,\n-                );\n-            }};\n-        }\n-        #[rustfmt::skip]\n-        match (op, lkind, rkind) {\n-            (BinOpKind::Or, BinOpKind::Eq, BinOpKind::Lt) | (BinOpKind::Or, BinOpKind::Lt, BinOpKind::Eq) => {\n-                lint_double_comparison!(<=);\n-            },\n-            (BinOpKind::Or, BinOpKind::Eq, BinOpKind::Gt) | (BinOpKind::Or, BinOpKind::Gt, BinOpKind::Eq) => {\n-                lint_double_comparison!(>=);\n-            },\n-            (BinOpKind::Or, BinOpKind::Lt, BinOpKind::Gt) | (BinOpKind::Or, BinOpKind::Gt, BinOpKind::Lt) => {\n-                lint_double_comparison!(!=);\n-            },\n-            (BinOpKind::And, BinOpKind::Le, BinOpKind::Ge) | (BinOpKind::And, BinOpKind::Ge, BinOpKind::Le) => {\n-                lint_double_comparison!(==);\n-            },\n-            _ => (),\n-        };\n-    }\n-}\n-\n-impl<'tcx> LateLintPass<'tcx> for DoubleComparisons {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if let ExprKind::Binary(ref kind, lhs, rhs) = expr.kind {\n-            Self::check_binop(cx, kind.node, lhs, rhs, expr.span);\n-        }\n-    }\n-}"}, {"sha": "22400f7b199654172e882dd22c79176fbc693166", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b", "patch": "@@ -48,7 +48,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(disallowed_types::DISALLOWED_TYPES),\n     LintId::of(doc::MISSING_SAFETY_DOC),\n     LintId::of(doc::NEEDLESS_DOCTEST_MAIN),\n-    LintId::of(double_comparison::DOUBLE_COMPARISONS),\n     LintId::of(double_parens::DOUBLE_PARENS),\n     LintId::of(drop_forget_ref::DROP_COPY),\n     LintId::of(drop_forget_ref::DROP_NON_DROP),\n@@ -258,6 +257,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(operators::ABSURD_EXTREME_COMPARISONS),\n     LintId::of(operators::ASSIGN_OP_PATTERN),\n     LintId::of(operators::BAD_BIT_MASK),\n+    LintId::of(operators::DOUBLE_COMPARISONS),\n     LintId::of(operators::INEFFECTIVE_BIT_MASK),\n     LintId::of(operators::MISREFACTORED_ASSIGN_OP),\n     LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),"}, {"sha": "03bb6788189e17c9433a7775bdd02e19daab6449", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b", "patch": "@@ -10,7 +10,6 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(casts::CHAR_LIT_AS_U8),\n     LintId::of(casts::UNNECESSARY_CAST),\n     LintId::of(derivable_impls::DERIVABLE_IMPLS),\n-    LintId::of(double_comparison::DOUBLE_COMPARISONS),\n     LintId::of(double_parens::DOUBLE_PARENS),\n     LintId::of(duration_subsec::DURATION_SUBSEC),\n     LintId::of(explicit_write::EXPLICIT_WRITE),\n@@ -71,6 +70,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n     LintId::of(no_effect::NO_EFFECT),\n     LintId::of(no_effect::UNNECESSARY_OPERATION),\n+    LintId::of(operators::DOUBLE_COMPARISONS),\n     LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n     LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n     LintId::of(precedence::PRECEDENCE),"}, {"sha": "a08ad4a31048a4bc60be06e1e9c1bc8727739828", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b", "patch": "@@ -122,7 +122,6 @@ store.register_lints(&[\n     doc::MISSING_SAFETY_DOC,\n     doc::NEEDLESS_DOCTEST_MAIN,\n     doc_link_with_quotes::DOC_LINK_WITH_QUOTES,\n-    double_comparison::DOUBLE_COMPARISONS,\n     double_parens::DOUBLE_PARENS,\n     drop_forget_ref::DROP_COPY,\n     drop_forget_ref::DROP_NON_DROP,\n@@ -432,6 +431,7 @@ store.register_lints(&[\n     operators::ABSURD_EXTREME_COMPARISONS,\n     operators::ASSIGN_OP_PATTERN,\n     operators::BAD_BIT_MASK,\n+    operators::DOUBLE_COMPARISONS,\n     operators::FLOAT_ARITHMETIC,\n     operators::INEFFECTIVE_BIT_MASK,\n     operators::INTEGER_ARITHMETIC,"}, {"sha": "931039d8c12bed31bc1b2d2ee40c853f6efd27c2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b", "patch": "@@ -209,7 +209,6 @@ mod disallowed_script_idents;\n mod disallowed_types;\n mod doc;\n mod doc_link_with_quotes;\n-mod double_comparison;\n mod double_parens;\n mod drop_forget_ref;\n mod duplicate_mod;\n@@ -726,7 +725,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(useless_conversion::UselessConversion::default()));\n     store.register_late_pass(|| Box::new(implicit_hasher::ImplicitHasher));\n     store.register_late_pass(|| Box::new(fallible_impl_from::FallibleImplFrom));\n-    store.register_late_pass(|| Box::new(double_comparison::DoubleComparisons));\n     store.register_late_pass(|| Box::new(question_mark::QuestionMark));\n     store.register_early_pass(|| Box::new(suspicious_operation_groupings::SuspiciousOperationGroupings));\n     store.register_late_pass(|| Box::new(suspicious_trait_impl::SuspiciousImpl));"}, {"sha": "56a86d0ffa212347bcf2b9ce12c554ad1cdabfe9", "filename": "clippy_lints/src/operators/double_comparison.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b/clippy_lints%2Fsrc%2Foperators%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b/clippy_lints%2Fsrc%2Foperators%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fdouble_comparison.rs?ref=4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b", "patch": "@@ -0,0 +1,54 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::eq_expr_value;\n+use clippy_utils::source::snippet_with_applicability;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_span::source_map::Span;\n+\n+use super::DOUBLE_COMPARISONS;\n+\n+#[expect(clippy::similar_names)]\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, op: BinOpKind, lhs: &'tcx Expr<'_>, rhs: &'tcx Expr<'_>, span: Span) {\n+    let (lkind, llhs, lrhs, rkind, rlhs, rrhs) = match (&lhs.kind, &rhs.kind) {\n+        (ExprKind::Binary(lb, llhs, lrhs), ExprKind::Binary(rb, rlhs, rrhs)) => {\n+            (lb.node, llhs, lrhs, rb.node, rlhs, rrhs)\n+        },\n+        _ => return,\n+    };\n+    if !(eq_expr_value(cx, llhs, rlhs) && eq_expr_value(cx, lrhs, rrhs)) {\n+        return;\n+    }\n+    macro_rules! lint_double_comparison {\n+        ($op:tt) => {{\n+            let mut applicability = Applicability::MachineApplicable;\n+            let lhs_str = snippet_with_applicability(cx, llhs.span, \"\", &mut applicability);\n+            let rhs_str = snippet_with_applicability(cx, lrhs.span, \"\", &mut applicability);\n+            let sugg = format!(\"{} {} {}\", lhs_str, stringify!($op), rhs_str);\n+            span_lint_and_sugg(\n+                cx,\n+                DOUBLE_COMPARISONS,\n+                span,\n+                \"this binary expression can be simplified\",\n+                \"try\",\n+                sugg,\n+                applicability,\n+            );\n+        }};\n+    }\n+    match (op, lkind, rkind) {\n+        (BinOpKind::Or, BinOpKind::Eq, BinOpKind::Lt) | (BinOpKind::Or, BinOpKind::Lt, BinOpKind::Eq) => {\n+            lint_double_comparison!(<=);\n+        },\n+        (BinOpKind::Or, BinOpKind::Eq, BinOpKind::Gt) | (BinOpKind::Or, BinOpKind::Gt, BinOpKind::Eq) => {\n+            lint_double_comparison!(>=);\n+        },\n+        (BinOpKind::Or, BinOpKind::Lt, BinOpKind::Gt) | (BinOpKind::Or, BinOpKind::Gt, BinOpKind::Lt) => {\n+            lint_double_comparison!(!=);\n+        },\n+        (BinOpKind::And, BinOpKind::Le, BinOpKind::Ge) | (BinOpKind::And, BinOpKind::Ge, BinOpKind::Le) => {\n+            lint_double_comparison!(==);\n+        },\n+        _ => (),\n+    };\n+}"}, {"sha": "b3ddab629e4ffe817cb092c197bbf4d19e81073b", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=4ac3626f2e3728e333f1dd0298e5e8c2d9a16c6b", "patch": "@@ -5,6 +5,7 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n mod absurd_extreme_comparisons;\n mod assign_op_pattern;\n mod bit_mask;\n+mod double_comparison;\n mod misrefactored_assign_op;\n mod numeric_arithmetic;\n mod verbose_bit_mask;\n@@ -242,6 +243,34 @@ declare_clippy_lint! {\n     \"expressions where a bit mask is less readable than the corresponding method call\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for double comparisons that could be simplified to a single expression.\n+    ///\n+    ///\n+    /// ### Why is this bad?\n+    /// Readability.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # let x = 1;\n+    /// # let y = 2;\n+    /// if x == y || x < y {}\n+    /// ```\n+    ///\n+    /// Use instead:\n+    ///\n+    /// ```rust\n+    /// # let x = 1;\n+    /// # let y = 2;\n+    /// if x <= y {}\n+    /// ```\n+    #[clippy::version = \"pre 1.29.0\"]\n+    pub DOUBLE_COMPARISONS,\n+    complexity,\n+    \"unnecessary double comparisons that can be simplified\"\n+}\n+\n pub struct Operators {\n     arithmetic_context: numeric_arithmetic::Context,\n     verbose_bit_mask_threshold: u64,\n@@ -255,6 +284,7 @@ impl_lint_pass!(Operators => [\n     BAD_BIT_MASK,\n     INEFFECTIVE_BIT_MASK,\n     VERBOSE_BIT_MASK,\n+    DOUBLE_COMPARISONS,\n ]);\n impl Operators {\n     pub fn new(verbose_bit_mask_threshold: u64) -> Self {\n@@ -274,6 +304,7 @@ impl<'tcx> LateLintPass<'tcx> for Operators {\n                 self.arithmetic_context.check_binary(cx, e, op.node, lhs, rhs);\n                 bit_mask::check(cx, e, op.node, lhs, rhs);\n                 verbose_bit_mask::check(cx, e, op.node, lhs, rhs, self.verbose_bit_mask_threshold);\n+                double_comparison::check(cx, op.node, lhs, rhs, e.span);\n             },\n             ExprKind::AssignOp(op, lhs, rhs) => {\n                 self.arithmetic_context.check_binary(cx, e, op.node, lhs, rhs);"}]}