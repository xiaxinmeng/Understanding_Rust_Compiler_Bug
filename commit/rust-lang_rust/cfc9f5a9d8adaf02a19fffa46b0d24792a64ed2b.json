{"sha": "cfc9f5a9d8adaf02a19fffa46b0d24792a64ed2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYzlmNWE5ZDhhZGFmMDJhMTlmZmZhNDZiMGQyNDc5MmE2NGVkMmI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T16:53:08Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T16:53:08Z"}, "message": "Temporary fix missing escape_href in hoedown_link by copying pulldown's code", "tree": {"sha": "4e1e8cb02459c95904ce88fbd0dbba624dd1b524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e1e8cb02459c95904ce88fbd0dbba624dd1b524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfc9f5a9d8adaf02a19fffa46b0d24792a64ed2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc9f5a9d8adaf02a19fffa46b0d24792a64ed2b", "html_url": "https://github.com/rust-lang/rust/commit/cfc9f5a9d8adaf02a19fffa46b0d24792a64ed2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfc9f5a9d8adaf02a19fffa46b0d24792a64ed2b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe93adad2c4f7a9709e44f157d97f2fe623c0236", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe93adad2c4f7a9709e44f157d97f2fe623c0236", "html_url": "https://github.com/rust-lang/rust/commit/fe93adad2c4f7a9709e44f157d97f2fe623c0236"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "b0cfd12c27ab776dee78ba34747f06e578ae3a9c", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cfc9f5a9d8adaf02a19fffa46b0d24792a64ed2b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfc9f5a9d8adaf02a19fffa46b0d24792a64ed2b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=cfc9f5a9d8adaf02a19fffa46b0d24792a64ed2b", "patch": "@@ -775,6 +775,55 @@ pub fn render(w: &mut fmt::Formatter,\n               links: &[(String, String)],\n               print_toc: bool,\n               html_flags: libc::c_uint) -> fmt::Result {\n+    // copied from pulldown-cmark (MIT license, Google)\n+    // https://github.com/google/pulldown-cmark\n+    // this is temporary till we remove the hoedown renderer\n+    static HREF_SAFE: [u8; 128] = [\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n+            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1,\n+            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1,\n+            0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,\n+        ];\n+\n+    static HEX_CHARS: &'static [u8] = b\"0123456789ABCDEF\";\n+\n+    fn escape_href(ob: &mut String, s: &str) {\n+        let mut mark = 0;\n+        for i in 0..s.len() {\n+            let c = s.as_bytes()[i];\n+            if c >= 0x80 || HREF_SAFE[c as usize] == 0 {\n+                // character needing escape\n+\n+                // write partial substring up to mark\n+                if mark < i {\n+                    ob.push_str(&s[mark..i]);\n+                }\n+                match c {\n+                    b'&' => {\n+                        ob.push_str(\"&amp;\");\n+                    },\n+                    b'\\'' => {\n+                        ob.push_str(\"&#x27;\");\n+                    },\n+                    _ => {\n+                        let mut buf = [0u8; 3];\n+                        buf[0] = b'%';\n+                        buf[1] = HEX_CHARS[((c as usize) >> 4) & 0xF];\n+                        buf[2] = HEX_CHARS[(c as usize) & 0xF];\n+                        ob.push_str(str::from_utf8(&buf).unwrap());\n+                    }\n+                }\n+                mark = i + 1;  // all escaped characters are ASCII\n+            }\n+        }\n+        ob.push_str(&s[mark..]);\n+    }\n+    // end code copied from pulldown-cmark\n+\n     extern fn hoedown_link(\n         ob: *mut hoedown_buffer,\n         content: *const hoedown_buffer,\n@@ -810,6 +859,9 @@ pub fn render(w: &mut fmt::Formatter,\n             })\n         };\n \n+        let mut link_buf = String::new();\n+        escape_href(&mut link_buf, &link);\n+\n         let title = unsafe {\n             title.as_ref().map(|t| {\n                 let s = t.as_bytes();\n@@ -818,7 +870,7 @@ pub fn render(w: &mut fmt::Formatter,\n         };\n \n         let link_out = format!(\"<a href=\\\"{link}\\\"{title}>{content}</a>\",\n-                               link = link,\n+                               link = link_buf,\n                                title = title.map_or(String::new(),\n                                                     |t| format!(\" title=\\\"{}\\\"\", t)),\n                                content = content.unwrap_or(String::new()));"}]}