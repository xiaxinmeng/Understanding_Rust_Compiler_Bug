{"sha": "343b9c6e76919c255466fd9b12fc7fd46f59022e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0M2I5YzZlNzY5MTljMjU1NDY2ZmQ5YjEyZmM3ZmQ0NmY1OTAyMmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-10T23:31:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-10T23:31:57Z"}, "message": "Merge #5303\n\n5303: Speed up completion r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "107769c5884b71e865b7efe44604cfad979e1f72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/107769c5884b71e865b7efe44604cfad979e1f72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/343b9c6e76919c255466fd9b12fc7fd46f59022e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCPptCRBK7hj4Ov3rIwAAdHIIACbRpnt+a2Kav6s/1vaGZzGB\n8Hyg2uFH5Bx7d7lsMb0WDhKt87cLQYWRxQfs+aJUC9vTBjpU1AzvGDmaTt/C0wu+\n/FJLQ0ol2lxgzE7S/bBeZDmr2T6yb1FIWg9rd2yU81jS6PAOHWH3iiiioA6l3Yo8\n29bLYahr2U7H7aMjBCMSZWsyQbuKx2Ugkvya4i1IMVP4hppNtykBAUgt+fk7vNV9\nPMlZWxqPjPPxxyAKFDZYWQMn2N65d68F9LVIRmzESCFtrPE6xBqcWni+Xvt4sAhu\nNamaz4iSQRX0Znm4ppsD2r97ATNFigEBwb4ZrRqBnDGvv2eqg1J2kanSnUvIm1Q=\n=RwQt\n-----END PGP SIGNATURE-----\n", "payload": "tree 107769c5884b71e865b7efe44604cfad979e1f72\nparent 349c4fcecaab90a521d4344cf965202ed7a0a54e\nparent a36ff4a100c2c321eec898f2cfee25c0be85ffc6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594423917 +0000\ncommitter GitHub <noreply@github.com> 1594423917 +0000\n\nMerge #5303\n\n5303: Speed up completion r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/343b9c6e76919c255466fd9b12fc7fd46f59022e", "html_url": "https://github.com/rust-lang/rust/commit/343b9c6e76919c255466fd9b12fc7fd46f59022e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/343b9c6e76919c255466fd9b12fc7fd46f59022e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "349c4fcecaab90a521d4344cf965202ed7a0a54e", "url": "https://api.github.com/repos/rust-lang/rust/commits/349c4fcecaab90a521d4344cf965202ed7a0a54e", "html_url": "https://github.com/rust-lang/rust/commit/349c4fcecaab90a521d4344cf965202ed7a0a54e"}, {"sha": "a36ff4a100c2c321eec898f2cfee25c0be85ffc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a36ff4a100c2c321eec898f2cfee25c0be85ffc6", "html_url": "https://github.com/rust-lang/rust/commit/a36ff4a100c2c321eec898f2cfee25c0be85ffc6"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "4a16ac5667de990cf361a5b103f35f4556941f94", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=343b9c6e76919c255466fd9b12fc7fd46f59022e", "patch": "@@ -568,6 +568,7 @@ fn find_root(node: &SyntaxNode) -> SyntaxNode {\n     node.ancestors().last().unwrap()\n }\n \n+#[derive(Debug)]\n pub struct SemanticsScope<'a> {\n     pub db: &'a dyn HirDatabase,\n     resolver: Resolver,"}, {"sha": "047299de9246e496b3af5760eb7fb11695801b9a", "filename": "crates/ra_ide/src/completion/complete_attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs?ref=343b9c6e76919c255466fd9b12fc7fd46f59022e", "patch": "@@ -195,7 +195,7 @@ fn parse_derive_input(derive_input: ast::TokenTree) -> Result<FxHashSet<String>,\n \n fn get_derive_names_in_scope(ctx: &CompletionContext) -> FxHashSet<String> {\n     let mut result = FxHashSet::default();\n-    ctx.scope().process_all_names(&mut |name, scope_def| {\n+    ctx.scope.process_all_names(&mut |name, scope_def| {\n         if let hir::ScopeDef::MacroDef(mac) = scope_def {\n             if mac.is_derive_macro() {\n                 result.insert(name.to_string());"}, {"sha": "5326652852f0ba7cd055c421ab54b0e8f5a394a0", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=343b9c6e76919c255466fd9b12fc7fd46f59022e", "patch": "@@ -29,7 +29,7 @@ pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: &Type) {\n     for receiver in receiver.autoderef(ctx.db) {\n         for (field, ty) in receiver.fields(ctx.db) {\n-            if ctx.scope().module().map_or(false, |m| !field.is_visible_from(ctx.db, m)) {\n+            if ctx.scope.module().map_or(false, |m| !field.is_visible_from(ctx.db, m)) {\n                 // Skip private field. FIXME: If the definition location of the\n                 // field is editable, we should show the completion\n                 continue;\n@@ -46,10 +46,10 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: &Ty\n fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: &Type) {\n     if let Some(krate) = ctx.krate {\n         let mut seen_methods = FxHashSet::default();\n-        let traits_in_scope = ctx.scope().traits_in_scope();\n+        let traits_in_scope = ctx.scope.traits_in_scope();\n         receiver.iterate_method_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, func| {\n             if func.has_self_param(ctx.db)\n-                && ctx.scope().module().map_or(true, |m| func.is_visible_from(ctx.db, m))\n+                && ctx.scope.module().map_or(true, |m| func.is_visible_from(ctx.db, m))\n                 && seen_methods.insert(func.name(ctx.db))\n             {\n                 acc.add_function(ctx, func, None);"}, {"sha": "0447f0511515401aaf605dbaa727677ed9d0b2b6", "filename": "crates/ra_ide/src/completion/complete_macro_in_item_position.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs?ref=343b9c6e76919c255466fd9b12fc7fd46f59022e", "patch": "@@ -5,7 +5,7 @@ use crate::completion::{CompletionContext, Completions};\n pub(super) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &CompletionContext) {\n     // Show only macros in top level.\n     if ctx.is_new_item {\n-        ctx.scope().process_all_names(&mut |name, res| {\n+        ctx.scope.process_all_names(&mut |name, res| {\n             if let hir::ScopeDef::MacroDef(mac) = res {\n                 acc.add_macro(ctx, Some(name.to_string()), mac);\n             }"}, {"sha": "aceb77cb5ccc2ddbbda05ec2f8ec9287b23e7414", "filename": "crates/ra_ide/src/completion/complete_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=343b9c6e76919c255466fd9b12fc7fd46f59022e", "patch": "@@ -13,7 +13,7 @@ pub(super) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n \n     // FIXME: ideally, we should look at the type we are matching against and\n     // suggest variants + auto-imports\n-    ctx.scope().process_all_names(&mut |name, res| {\n+    ctx.scope.process_all_names(&mut |name, res| {\n         match &res {\n             hir::ScopeDef::ModuleDef(def) => match def {\n                 hir::ModuleDef::Adt(hir::Adt::Enum(..))"}, {"sha": "b08f5b9b45e0bdfe07f21991e59cdc48302d687e", "filename": "crates/ra_ide/src/completion/complete_qualified_path.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs?ref=343b9c6e76919c255466fd9b12fc7fd46f59022e", "patch": "@@ -17,21 +17,20 @@ pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         return;\n     }\n \n-    let scope = ctx.scope();\n-    let context_module = scope.module();\n+    let context_module = ctx.scope.module();\n \n-    let res = match scope.resolve_hir_path_qualifier(&path) {\n+    let resolution = match ctx.scope.resolve_hir_path_qualifier(&path) {\n         Some(res) => res,\n         None => return,\n     };\n \n     // Add associated types on type parameters and `Self`.\n-    res.assoc_type_shorthand_candidates(ctx.db, |alias| {\n+    resolution.assoc_type_shorthand_candidates(ctx.db, |alias| {\n         acc.add_type_alias(ctx, alias);\n         None::<()>\n     });\n \n-    match res {\n+    match resolution {\n         PathResolution::Def(hir::ModuleDef::Module(module)) => {\n             let module_scope = module.scope(ctx.db, context_module);\n             for (name, def) in module_scope {\n@@ -68,7 +67,7 @@ pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n \n             let krate = ctx.krate;\n             if let Some(krate) = krate {\n-                let traits_in_scope = ctx.scope().traits_in_scope();\n+                let traits_in_scope = ctx.scope.traits_in_scope();\n                 ty.iterate_path_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, item| {\n                     if context_module.map_or(false, |m| !item.is_visible_from(ctx.db, m)) {\n                         return None;\n@@ -113,13 +112,13 @@ pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         }\n         PathResolution::TypeParam(_) | PathResolution::SelfType(_) => {\n             if let Some(krate) = ctx.krate {\n-                let ty = match res {\n+                let ty = match resolution {\n                     PathResolution::TypeParam(param) => param.ty(ctx.db),\n                     PathResolution::SelfType(impl_def) => impl_def.target_ty(ctx.db),\n                     _ => return,\n                 };\n \n-                let traits_in_scope = ctx.scope().traits_in_scope();\n+                let traits_in_scope = ctx.scope.traits_in_scope();\n                 let mut seen = FxHashSet::default();\n                 ty.iterate_path_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, item| {\n                     if context_module.map_or(false, |m| !item.is_visible_from(ctx.db, m)) {"}, {"sha": "bd9551f358a26f1cbce5ba638c1c1e01ea7c6097", "filename": "crates/ra_ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=343b9c6e76919c255466fd9b12fc7fd46f59022e", "patch": "@@ -25,7 +25,7 @@ pub(super) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         return;\n     }\n \n-    ctx.scope().process_all_names(&mut |name, res| {\n+    ctx.scope.process_all_names(&mut |name, res| {\n         if ctx.use_item_syntax.is_some() {\n             if let (ScopeDef::Unknown, Some(name_ref)) = (&res, &ctx.name_ref_syntax) {\n                 if name_ref.syntax().text() == name.to_string().as_str() {\n@@ -42,7 +42,7 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n     if let Some(Adt::Enum(enum_data)) = ty.as_adt() {\n         let variants = enum_data.variants(ctx.db);\n \n-        let module = if let Some(module) = ctx.scope().module() {\n+        let module = if let Some(module) = ctx.scope.module() {\n             // Compute path from the completion site if available.\n             module\n         } else {"}, {"sha": "3d93f70674f10c9d95b6062583d24941a7f9d1bc", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b9c6e76919c255466fd9b12fc7fd46f59022e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=343b9c6e76919c255466fd9b12fc7fd46f59022e", "patch": "@@ -24,6 +24,7 @@ use test_utils::mark;\n #[derive(Debug)]\n pub(crate) struct CompletionContext<'a> {\n     pub(super) sema: Semantics<'a, RootDatabase>,\n+    pub(super) scope: SemanticsScope<'a>,\n     pub(super) db: &'a RootDatabase,\n     pub(super) config: &'a CompletionConfig,\n     pub(super) offset: TextSize,\n@@ -106,8 +107,10 @@ impl<'a> CompletionContext<'a> {\n         let original_token =\n             original_file.syntax().token_at_offset(position.offset).left_biased()?;\n         let token = sema.descend_into_macros(original_token.clone());\n+        let scope = sema.scope_at_offset(&token.parent(), position.offset);\n         let mut ctx = CompletionContext {\n             sema,\n+            scope,\n             db,\n             config,\n             original_token,\n@@ -207,10 +210,6 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n-    pub(crate) fn scope(&self) -> SemanticsScope<'_> {\n-        self.sema.scope_at_offset(&self.token.parent(), self.offset)\n-    }\n-\n     fn fill_keyword_patterns(&mut self, file_with_fake_ident: &SyntaxNode, offset: TextSize) {\n         let fake_ident_token = file_with_fake_ident.token_at_offset(offset).right_biased().unwrap();\n         let syntax_element = NodeOrToken::Token(fake_ident_token.clone());"}]}