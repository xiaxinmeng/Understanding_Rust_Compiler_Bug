{"sha": "48701d758d1260346291b8b4c169c5e7e5480136", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NzAxZDc1OGQxMjYwMzQ2MjkxYjhiNGMxNjljNWU3ZTU0ODAxMzY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-09T13:08:54Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-09T13:08:54Z"}, "message": "Crash on some less code and fix a bug in discriminant read", "tree": {"sha": "8af3047e111efc31a869a21668ba7890fbb17ccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8af3047e111efc31a869a21668ba7890fbb17ccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48701d758d1260346291b8b4c169c5e7e5480136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48701d758d1260346291b8b4c169c5e7e5480136", "html_url": "https://github.com/rust-lang/rust/commit/48701d758d1260346291b8b4c169c5e7e5480136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48701d758d1260346291b8b4c169c5e7e5480136/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9422fd4d45c39020e4bc81b5a68d7861fbe9113", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9422fd4d45c39020e4bc81b5a68d7861fbe9113", "html_url": "https://github.com/rust-lang/rust/commit/e9422fd4d45c39020e4bc81b5a68d7861fbe9113"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "09389c6530fd5e39108860d689a4c063faf8562f", "filename": "build.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48701d758d1260346291b8b4c169c5e7e5480136/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/48701d758d1260346291b8b4c169c5e7e5480136/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=48701d758d1260346291b8b4c169c5e7e5480136", "patch": "@@ -17,7 +17,7 @@ RUSTC=\"rustc -Zcodegen-backend=$(pwd)/../target/debug/librustc_codegen_cranelift\n $RUSTC mini_core.rs --crate-name mini_core &&\n $RUSTC example.rs &&\n $RUSTC mini_core_hello_world.rs &&\n-$RUSTC ../target/libcore/src/libcore/lib.rs 2>&1 | (head -n 10; tail -n 100) ||\n+$RUSTC ../target/libcore/src/libcore/lib.rs 2>&1 | (head -n 10; echo \"====\"; tail -n 1000) ||\n (rm *.rlib; exit 1)\n \n rm *.rlib"}, {"sha": "ae33f4b0c5aecc6a600354c42577cd6e1e0a1363", "filename": "src/base.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/48701d758d1260346291b8b4c169c5e7e5480136/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48701d758d1260346291b8b4c169c5e7e5480136/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=48701d758d1260346291b8b4c169c5e7e5480136", "patch": "@@ -483,7 +483,8 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, cur_ebb: Ebb, stmt: &\n         | StatementKind::Validate(_, _)\n         | StatementKind::EndRegion(_)\n         | StatementKind::UserAssertTy(_, _) => {}\n-        StatementKind::InlineAsm { .. } => fx.tcx.sess.fatal(\"Inline assembly is not supported\"),\n+\n+        StatementKind::InlineAsm { .. } => unimpl!(\"Inline assembly is not supported\"),\n     }\n }\n \n@@ -527,8 +528,8 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n             ..\n         } => {\n             let niche_llty = fx.cton_type(discr_ty).unwrap();\n+            let dest_cton_ty = fx.cton_type(dest_layout.ty).unwrap();\n             if niche_variants.start() == niche_variants.end() {\n-                let dest_cton_ty = fx.cton_type(dest_layout.ty).unwrap();\n                 let b = fx\n                     .bcx\n                     .ins()\n@@ -557,7 +558,7 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n                 let if_false = fx\n                     .bcx\n                     .ins()\n-                    .iconst(niche_llty, dataful_variant as u64 as i64);\n+                    .iconst(dest_cton_ty, dataful_variant as u64 as i64);\n                 let val = fx.bcx.ins().select(b, if_true, if_false);\n                 return CValue::ByVal(val, dest_layout);\n             }\n@@ -826,6 +827,14 @@ fn trans_ptr_binop<'a, 'tcx: 'a>(\n     rhs: CValue<'tcx>,\n     ty: Ty<'tcx>,\n ) -> CValue<'tcx> {\n+    match lhs.layout().ty.sty {\n+        TypeVariants::TyRawPtr(TypeAndMut { ty, mutbl: _}) => {\n+            if !ty.is_sized(fx.tcx.at(DUMMY_SP), ParamEnv::reveal_all()) {\n+                unimpl!(\"Unsized values are not yet implemented\");\n+            }\n+        },\n+        _ => bug!(\"trans_ptr_binop on non ptr\"),\n+    }\n     binop_match! {\n         fx, bin_op, false, lhs, rhs, ty, \"ptr\";\n         Add (_) bug;"}, {"sha": "70e2d283f6010c7da9cf320c5522c20a2e8101f2", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48701d758d1260346291b8b4c169c5e7e5480136/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48701d758d1260346291b8b4c169c5e7e5480136/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=48701d758d1260346291b8b4c169c5e7e5480136", "patch": "@@ -32,15 +32,15 @@ pub fn cton_type_from_ty<'a, 'tcx: 'a>(\n             UintTy::U16 => types::I16,\n             UintTy::U32 => types::I32,\n             UintTy::U64 => types::I64,\n-            UintTy::U128 => unimplemented!(\"u128\"),\n+            UintTy::U128 => unimpl!(\"u128\"),\n             UintTy::Usize => types::I64,\n         },\n         TypeVariants::TyInt(size) => match size {\n             IntTy::I8 => types::I8,\n             IntTy::I16 => types::I16,\n             IntTy::I32 => types::I32,\n             IntTy::I64 => types::I64,\n-            IntTy::I128 => unimplemented!(\"i128\"),\n+            IntTy::I128 => unimpl!(\"i128\"),\n             IntTy::Isize => types::I64,\n         },\n         TypeVariants::TyChar => types::I32,"}]}