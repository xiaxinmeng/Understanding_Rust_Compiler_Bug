{"sha": "c8e30c429503de90f7bad8a4c336af11ffaa48e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZTMwYzQyOTUwM2RlOTBmN2JhZDhhNGMzMzZhZjExZmZhYTQ4ZTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-02T08:19:37Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-02T08:19:37Z"}, "message": "Reading values should not be looking at the variant", "tree": {"sha": "d00cbcf2d7e1f61fee4e9aa8adbfae23b63cee95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d00cbcf2d7e1f61fee4e9aa8adbfae23b63cee95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8e30c429503de90f7bad8a4c336af11ffaa48e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e30c429503de90f7bad8a4c336af11ffaa48e6", "html_url": "https://github.com/rust-lang/rust/commit/c8e30c429503de90f7bad8a4c336af11ffaa48e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8e30c429503de90f7bad8a4c336af11ffaa48e6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165", "html_url": "https://github.com/rust-lang/rust/commit/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165"}], "stats": {"total": 26, "additions": 7, "deletions": 19}, "files": [{"sha": "1d973e2091fadab4880b46efa66bfb1731625296", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c8e30c429503de90f7bad8a4c336af11ffaa48e6/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e30c429503de90f7bad8a4c336af11ffaa48e6/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=c8e30c429503de90f7bad8a4c336af11ffaa48e6", "patch": "@@ -1521,7 +1521,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n     }\n \n     pub fn try_read_value(&self, ptr: Scalar, ptr_align: Align, ty: Ty<'tcx>) -> EvalResult<'tcx, Option<Value>> {\n-        let mut layout = self.layout_of(ty)?;\n+        let layout = self.layout_of(ty)?;\n         self.memory.check_align(ptr, ptr_align)?;\n \n         if layout.size.bytes() == 0 {\n@@ -1530,19 +1530,6 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n         let ptr = ptr.to_ptr()?;\n \n-        match layout.variants {\n-            layout::Variants::NicheFilling { .. } |\n-            layout::Variants::Tagged { .. } => {\n-                let variant_index = self.read_discriminant_as_variant_index(\n-                    Place::from_ptr(ptr, ptr_align),\n-                    layout,\n-                )?;\n-                layout = layout.for_variant(self, variant_index);\n-                trace!(\"variant layout: {:#?}\", layout);\n-            },\n-            layout::Variants::Single { .. } => {},\n-        }\n-\n         match layout.abi {\n             layout::Abi::Scalar(..) => {\n                 let scalar = self.memory.read_scalar(ptr, ptr_align, layout.size)?;\n@@ -1558,7 +1545,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 let b_val = self.memory.read_scalar(b_ptr, ptr_align, b_size)?;\n                 Ok(Some(Value::ScalarPair(a_val, b_val)))\n             }\n-            _ => Ok(None),\n+            _ =>  Ok(None),\n         }\n     }\n "}, {"sha": "8538dd14afed19292d3678d20279354fa02246ce", "filename": "src/test/ui/const-eval/ub-enum-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e30c429503de90f7bad8a4c336af11ffaa48e6/src%2Ftest%2Fui%2Fconst-eval%2Fub-enum-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e30c429503de90f7bad8a4c336af11ffaa48e6/src%2Ftest%2Fui%2Fconst-eval%2Fub-enum-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fub-enum-ptr.rs?ref=c8e30c429503de90f7bad8a4c336af11ffaa48e6", "patch": "@@ -21,7 +21,7 @@ union Foo {\n \n // A pointer is guaranteed non-null\n const BAD_ENUM: Enum = unsafe { Foo { a: &1 }.b};\n-//~^ ERROR this constant cannot be used\n+//~^ ERROR this constant likely exhibits undefined behavior\n \n fn main() {\n }"}, {"sha": "4b7ccc25c6c014615bba5bd7b3c68a707a0b58a2", "filename": "src/test/ui/const-eval/ub-enum-ptr.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8e30c429503de90f7bad8a4c336af11ffaa48e6/src%2Ftest%2Fui%2Fconst-eval%2Fub-enum-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8e30c429503de90f7bad8a4c336af11ffaa48e6/src%2Ftest%2Fui%2Fconst-eval%2Fub-enum-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fub-enum-ptr.stderr?ref=c8e30c429503de90f7bad8a4c336af11ffaa48e6", "patch": "@@ -1,10 +1,11 @@\n-error: this constant cannot be used\n+error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/ub-enum-ptr.rs:23:1\n    |\n LL | const BAD_ENUM: Enum = unsafe { Foo { a: &1 }.b};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a raw memory access tried to access part of a pointer value as raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer at .TAG, but expected something in the range 0..=0\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}]}