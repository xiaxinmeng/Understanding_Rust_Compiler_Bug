{"sha": "704f93ff5e8a8079af4a16fe984fb9f84b347d11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNGY5M2ZmNWU4YTgwNzlhZjRhMTZmZTk4NGZiOWY4NGIzNDdkMTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-30T01:01:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-30T01:01:39Z"}, "message": "auto merge of #11893 : Armavica/rust/copyable-cloneable, r=huonw\n\nI found awkward to have `MutableCloneableVector` and `CloneableIterator` on the one hand, and `CopyableVector` etc. on the other hand.\r\n\r\nThe concerned traits are:\r\n* `CopyableVector` --> `CloneableVector`\r\n* `OwnedCopyableVector` --> `OwnedCloneableVector`\r\n* `ImmutableCopyableVector` --> `ImmutableCloneableVector`\r\n* `CopyableTuple` --> `CloneableTuple`", "tree": {"sha": "c643c4ffb3c18a66be6181a2dbd6b795f9d36476", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c643c4ffb3c18a66be6181a2dbd6b795f9d36476"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/704f93ff5e8a8079af4a16fe984fb9f84b347d11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/704f93ff5e8a8079af4a16fe984fb9f84b347d11", "html_url": "https://github.com/rust-lang/rust/commit/704f93ff5e8a8079af4a16fe984fb9f84b347d11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/704f93ff5e8a8079af4a16fe984fb9f84b347d11/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f84b7291e7606b35e800070bd826e4c2e2154228", "url": "https://api.github.com/repos/rust-lang/rust/commits/f84b7291e7606b35e800070bd826e4c2e2154228", "html_url": "https://github.com/rust-lang/rust/commit/f84b7291e7606b35e800070bd826e4c2e2154228"}, {"sha": "2d60691eb7a7d2735837cadf05883b3abfcbc160", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d60691eb7a7d2735837cadf05883b3abfcbc160", "html_url": "https://github.com/rust-lang/rust/commit/2d60691eb7a7d2735837cadf05883b3abfcbc160"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "47ac383e38c580708849f0491996475096deb060", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=704f93ff5e8a8079af4a16fe984fb9f84b347d11", "patch": "@@ -92,16 +92,16 @@ syn keyword rustTrait SendStr SendStrOwned SendStrStatic IntoSendStr\n syn keyword rustTrait Str StrVector StrSlice OwnedStr\n syn keyword rustTrait IterBytes\n syn keyword rustTrait ToStr IntoStr\n-syn keyword rustTrait CopyableTuple ImmutableTuple\n+syn keyword rustTrait CloneableTuple ImmutableTuple\n syn keyword rustTrait Tuple1 Tuple2 Tuple3 Tuple4\n syn keyword rustTrait Tuple5 Tuple6 Tuple7 Tuple8\n syn keyword rustTrait Tuple9 Tuple10 Tuple11 Tuple12\n syn keyword rustTrait ImmutableTuple1 ImmutableTuple2 ImmutableTuple3 ImmutableTuple4\n syn keyword rustTrait ImmutableTuple5 ImmutableTuple6 ImmutableTuple7 ImmutableTuple8\n syn keyword rustTrait ImmutableTuple9 ImmutableTuple10 ImmutableTuple11 ImmutableTuple12\n-syn keyword rustTrait ImmutableEqVector ImmutableTotalOrdVector ImmutableCopyableVector\n-syn keyword rustTrait OwnedVector OwnedCopyableVector OwnedEqVector MutableVector\n-syn keyword rustTrait Vector VectorVector CopyableVector ImmutableVector\n+syn keyword rustTrait ImmutableEqVector ImmutableTotalOrdVector ImmutableCloneableVector\n+syn keyword rustTrait OwnedVector OwnedCloneableVector OwnedEqVector MutableVector\n+syn keyword rustTrait Vector VectorVector CloneableVector ImmutableVector\n \n \"syn keyword rustFunction stream\n syn keyword rustTrait Port Chan GenericChan GenericSmartChan GenericPort Peekable"}, {"sha": "6e6aa9ad3faaf48f7b43e1ce1705e2d29f650214", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=704f93ff5e8a8079af4a16fe984fb9f84b347d11", "patch": "@@ -72,7 +72,7 @@ use ptr::RawPtr;\n use ptr;\n use str::StrSlice;\n use str;\n-use vec::{CopyableVector, ImmutableVector, MutableVector};\n+use vec::{CloneableVector, ImmutableVector, MutableVector};\n use vec;\n use unstable::intrinsics;\n "}, {"sha": "1eaa752d2a31a7e02aa5382a70b007db7ec9f757", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=704f93ff5e8a8079af4a16fe984fb9f84b347d11", "patch": "@@ -15,7 +15,7 @@ use cmp;\n use io;\n use option::{None, Option, Some};\n use super::{Reader, Writer};\n-use vec::{bytes, CopyableVector, MutableVector, ImmutableVector};\n+use vec::{bytes, CloneableVector, MutableVector, ImmutableVector};\n \n /// Allows reading from a port.\n ///"}, {"sha": "c185951fecac855562aec0c1c693693f010c226a", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=704f93ff5e8a8079af4a16fe984fb9f84b347d11", "patch": "@@ -17,7 +17,7 @@ use option::{Option, Some, None};\n use super::{Reader, Writer, Seek, Buffer, IoError, SeekStyle, io_error,\n             OtherIoError};\n use vec;\n-use vec::{Vector, ImmutableVector, MutableVector, OwnedCopyableVector};\n+use vec::{Vector, ImmutableVector, MutableVector, OwnedCloneableVector};\n \n /// Writes to an owned, growable byte vector\n ///"}, {"sha": "cadcbdd51f57b2af5d5687159fed0a6ac67c238b", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=704f93ff5e8a8079af4a16fe984fb9f84b347d11", "patch": "@@ -302,7 +302,7 @@ use str::{StrSlice, OwnedStr};\n use to_str::ToStr;\n use uint;\n use unstable::finally::Finally;\n-use vec::{OwnedVector, MutableVector, ImmutableVector, OwnedCopyableVector};\n+use vec::{OwnedVector, MutableVector, ImmutableVector, OwnedCloneableVector};\n use vec;\n \n // Reexports"}, {"sha": "67f6d006b5787896ddfbe185460b7c18ff6bbc7c", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=704f93ff5e8a8079af4a16fe984fb9f84b347d11", "patch": "@@ -18,7 +18,7 @@ use option::{None, Option, Some};\n use char;\n use str::{StrSlice};\n use str;\n-use vec::{CopyableVector, ImmutableVector, MutableVector};\n+use vec::{CloneableVector, ImmutableVector, MutableVector};\n use vec::OwnedVector;\n use num;\n use num::{NumCast, Zero, One, cast, Integer};"}, {"sha": "11f23b22c51fa2889bd88939893ead0583c7b1be", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=704f93ff5e8a8079af4a16fe984fb9f84b347d11", "patch": "@@ -73,7 +73,7 @@ use str;\n use str::{OwnedStr, Str, StrSlice};\n use to_str::ToStr;\n use vec;\n-use vec::{CopyableVector, OwnedCopyableVector, OwnedVector, Vector};\n+use vec::{CloneableVector, OwnedCloneableVector, OwnedVector, Vector};\n use vec::{ImmutableEqVector, ImmutableVector};\n \n /// Typedef for POSIX file paths."}, {"sha": "707ba18378a836324f18925749f87328621cf106", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=704f93ff5e8a8079af4a16fe984fb9f84b347d11", "patch": "@@ -21,8 +21,8 @@ use str;\n use str::Str;\n use to_bytes::IterBytes;\n use vec;\n-use vec::{CopyableVector, RevSplits, Splits, Vector, VectorVector,\n-          ImmutableEqVector, OwnedVector, ImmutableVector, OwnedCopyableVector};\n+use vec::{CloneableVector, RevSplits, Splits, Vector, VectorVector,\n+          ImmutableEqVector, OwnedVector, ImmutableVector, OwnedCloneableVector};\n use super::{BytesContainer, GenericPath, GenericPathUnsafe};\n \n /// Iterator that yields successive components of a Path as &[u8]\n@@ -332,7 +332,7 @@ impl Path {\n \n     /// Returns a normalized byte vector representation of a path, by removing all empty\n     /// components, and unnecessary . and .. components.\n-    fn normalize<V: Vector<u8>+CopyableVector<u8>>(v: V) -> ~[u8] {\n+    fn normalize<V: Vector<u8>+CloneableVector<u8>>(v: V) -> ~[u8] {\n         // borrowck is being very picky\n         let val = {\n             let is_abs = !v.as_slice().is_empty() && v.as_slice()[0] == SEP_BYTE;"}, {"sha": "c71dde3a101d1c0b3527c7467095241d06d28d04", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=704f93ff5e8a8079af4a16fe984fb9f84b347d11", "patch": "@@ -68,17 +68,17 @@ pub use send_str::{SendStr, SendStrOwned, SendStrStatic, IntoSendStr};\n pub use str::{Str, StrVector, StrSlice, OwnedStr};\n pub use to_bytes::IterBytes;\n pub use to_str::{ToStr, IntoStr};\n-pub use tuple::{CopyableTuple, ImmutableTuple};\n+pub use tuple::{CloneableTuple, ImmutableTuple};\n pub use tuple::{ImmutableTuple1, ImmutableTuple2, ImmutableTuple3, ImmutableTuple4};\n pub use tuple::{ImmutableTuple5, ImmutableTuple6, ImmutableTuple7, ImmutableTuple8};\n pub use tuple::{ImmutableTuple9, ImmutableTuple10, ImmutableTuple11, ImmutableTuple12};\n pub use tuple::{Tuple1, Tuple2, Tuple3, Tuple4};\n pub use tuple::{Tuple5, Tuple6, Tuple7, Tuple8};\n pub use tuple::{Tuple9, Tuple10, Tuple11, Tuple12};\n-pub use vec::{ImmutableEqVector, ImmutableTotalOrdVector, ImmutableCopyableVector};\n-pub use vec::{OwnedVector, OwnedCopyableVector,OwnedEqVector};\n+pub use vec::{ImmutableEqVector, ImmutableTotalOrdVector, ImmutableCloneableVector};\n+pub use vec::{OwnedVector, OwnedCloneableVector,OwnedEqVector};\n pub use vec::{MutableVector, MutableTotalOrdVector};\n-pub use vec::{Vector, VectorVector, CopyableVector, ImmutableVector};\n+pub use vec::{Vector, VectorVector, CloneableVector, ImmutableVector};\n \n // Reexported runtime types\n pub use comm::{Port, Chan, SharedChan};"}, {"sha": "9cc9799d0c017b2b9cba4f2c6248167ef0d2db93", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=704f93ff5e8a8079af4a16fe984fb9f84b347d11", "patch": "@@ -112,7 +112,7 @@ use to_str::ToStr;\n use from_str::FromStr;\n use uint;\n use vec;\n-use vec::{OwnedVector, OwnedCopyableVector, ImmutableVector, MutableVector};\n+use vec::{OwnedVector, OwnedCloneableVector, ImmutableVector, MutableVector};\n use default::Default;\n use send_str::{SendStr, SendStrOwned};\n use unstable::raw::Repr;\n@@ -594,7 +594,7 @@ impl<'a> Iterator<&'a str> for StrSplits<'a> {\n // Helper functions used for Unicode normalization\n fn canonical_sort(comb: &mut [(char, u8)]) {\n     use iter::range;\n-    use tuple::CopyableTuple;\n+    use tuple::CloneableTuple;\n \n     let len = comb.len();\n     for i in range(0, len) {"}, {"sha": "33d23df242ce2dd61a9110f173429773eb8160a5", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=704f93ff5e8a8079af4a16fe984fb9f84b347d11", "patch": "@@ -17,7 +17,7 @@ use clone::Clone;\n #[cfg(not(test))] use default::Default;\n \n /// Method extensions to pairs where both types satisfy the `Clone` bound\n-pub trait CopyableTuple<T, U> {\n+pub trait CloneableTuple<T, U> {\n     /// Return the first element of self\n     fn first(&self) -> T;\n     /// Return the second element of self\n@@ -26,7 +26,7 @@ pub trait CopyableTuple<T, U> {\n     fn swap(&self) -> (U, T);\n }\n \n-impl<T:Clone,U:Clone> CopyableTuple<T, U> for (T, U) {\n+impl<T:Clone,U:Clone> CloneableTuple<T, U> for (T, U) {\n     /// Return the first element of self\n     #[inline]\n     fn first(&self) -> T {"}, {"sha": "467bcf075f60cae573ad80b13aef6924dd54624c", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704f93ff5e8a8079af4a16fe984fb9f84b347d11/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=704f93ff5e8a8079af4a16fe984fb9f84b347d11", "patch": "@@ -798,8 +798,8 @@ impl<T> Container for ~[T] {\n     }\n }\n \n-/// Extension methods for vector slices with copyable elements\n-pub trait CopyableVector<T> {\n+/// Extension methods for vector slices with cloneable elements\n+pub trait CloneableVector<T> {\n     /// Copy `self` into a new owned vector\n     fn to_owned(&self) -> ~[T];\n \n@@ -808,7 +808,7 @@ pub trait CopyableVector<T> {\n }\n \n /// Extension methods for vector slices\n-impl<'a, T: Clone> CopyableVector<T> for &'a [T] {\n+impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n     /// Returns a copy of `v`.\n     #[inline]\n     fn to_owned(&self) -> ~[T] {\n@@ -824,7 +824,7 @@ impl<'a, T: Clone> CopyableVector<T> for &'a [T] {\n }\n \n /// Extension methods for owned vectors\n-impl<T: Clone> CopyableVector<T> for ~[T] {\n+impl<T: Clone> CloneableVector<T> for ~[T] {\n     #[inline]\n     fn to_owned(&self) -> ~[T] { self.clone() }\n \n@@ -833,7 +833,7 @@ impl<T: Clone> CopyableVector<T> for ~[T] {\n }\n \n /// Extension methods for managed vectors\n-impl<T: Clone> CopyableVector<T> for @[T] {\n+impl<T: Clone> CloneableVector<T> for @[T] {\n     #[inline]\n     fn to_owned(&self) -> ~[T] { self.as_slice().to_owned() }\n \n@@ -1261,7 +1261,7 @@ impl<'a, T: TotalOrd> ImmutableTotalOrdVector<T> for &'a [T] {\n }\n \n /// Extension methods for vectors containing `Clone` elements.\n-pub trait ImmutableCopyableVector<T> {\n+pub trait ImmutableCloneableVector<T> {\n     /**\n      * Partitions the vector into those that satisfies the predicate, and\n      * those that do not.\n@@ -1273,7 +1273,7 @@ pub trait ImmutableCopyableVector<T> {\n     fn permutations(self) -> Permutations<T>;\n }\n \n-impl<'a,T:Clone> ImmutableCopyableVector<T> for &'a [T] {\n+impl<'a,T:Clone> ImmutableCloneableVector<T> for &'a [T] {\n     #[inline]\n     fn partitioned(&self, f: |&T| -> bool) -> (~[T], ~[T]) {\n         let mut lefts  = ~[];\n@@ -1698,7 +1698,7 @@ impl<T> Mutable for ~[T] {\n }\n \n /// Extension methods for owned vectors containing `Clone` elements.\n-pub trait OwnedCopyableVector<T:Clone> {\n+pub trait OwnedCloneableVector<T:Clone> {\n     /// Iterates over the slice `rhs`, copies each element, and then appends it to\n     /// the vector provided `v`. The `rhs` vector is traversed in-order.\n     ///\n@@ -1732,7 +1732,7 @@ pub trait OwnedCopyableVector<T:Clone> {\n     fn grow_set(&mut self, index: uint, initval: &T, val: T);\n }\n \n-impl<T:Clone> OwnedCopyableVector<T> for ~[T] {\n+impl<T:Clone> OwnedCloneableVector<T> for ~[T] {\n     #[inline]\n     fn push_all(&mut self, rhs: &[T]) {\n         let new_len = self.len() + rhs.len();"}]}