{"sha": "1bfc732b78aa1664245009c1d40d47d9ac149e94", "node_id": "C_kwDOAAsO6NoAKDFiZmM3MzJiNzhhYTE2NjQyNDUwMDljMWQ0MGQ0N2Q5YWMxNDllOTQ", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-01-05T11:06:49Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-01-05T14:10:00Z"}, "message": "Store diverging flag for type variables as bitflags", "tree": {"sha": "c0923f826cd5c988405bd97402cc529a29f0228a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0923f826cd5c988405bd97402cc529a29f0228a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bfc732b78aa1664245009c1d40d47d9ac149e94", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmO22jgACgkQ4laYqTBY\nYXHvcRAAlf8uETtNxwgdyXr2KwUN9ZzqNiJMsbJrp0LsYboudamEMdZle5VHYM4D\nXngQpbg25oiDGvnDOWbOXZEEMzt7dv8eKNpBZEWrjnJ0LEOw0Wgirr5o7UO6zCP8\nSwKTFgveQtUgZCw+qrc5lJJuwyHa5kYBHPhQquVaymNYkUGJ78Mfn/Hbir3laQSr\ngmO0JS+E3fWeC/TDxcHciEp4bjb3cypcNs4VyOzZRe7gJZLwwSpN9lhwULTap6KY\nvC7Jol1kxEnN2dsoVOBWYkww2amRbbpnCUT2xuEedPDCq2oH/cfgXJuxzqz/boFi\nhrU+2yZs5ENPJU5Y2/HLj/WJJtgG0+tYenYU9HR6fcwccmoDuw/bhn7xl2ifPtUe\nqDBFMMdPVc7Zt+a4uZlDFa7dgT2q4nd2Soxw1VY6XJM/A/Qv3aU0yfpoaP/trTnL\nDuGcNhv0CCAqmSyZv8cCHROmqUJdMrbn2qYGz6NubRu2YIsVwdbhPs3ZTvs+5ec/\nb/njbPTaAhMzcx/NR86crPxxzcdZ8YoTQg91dXI01YRMVFGq5Y6cdwsL6rE6wwsw\nwsYHBXGFGjIdKgIEMlUX6Xty7Ofg9NW835tnJyzQlyR1G3FlO3SgkUvPT9WAK4IF\nguYwVoulOruW3KaQFGypg8KdORf6/ZBUBnmzmvdT8loqMgh4RDA=\n=kPjt\n-----END PGP SIGNATURE-----", "payload": "tree c0923f826cd5c988405bd97402cc529a29f0228a\nparent a97c71f92d574cb5104e3e1246eb9038d1a214a2\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1672916809 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1672927800 +0900\n\nStore diverging flag for type variables as bitflags\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfc732b78aa1664245009c1d40d47d9ac149e94", "html_url": "https://github.com/rust-lang/rust/commit/1bfc732b78aa1664245009c1d40d47d9ac149e94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bfc732b78aa1664245009c1d40d47d9ac149e94/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a97c71f92d574cb5104e3e1246eb9038d1a214a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a97c71f92d574cb5104e3e1246eb9038d1a214a2", "html_url": "https://github.com/rust-lang/rust/commit/a97c71f92d574cb5104e3e1246eb9038d1a214a2"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "59cd66756cd95f3c77d9b1de19207f5a77421fee", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bfc732b78aa1664245009c1d40d47d9ac149e94/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1bfc732b78aa1664245009c1d40d47d9ac149e94/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1bfc732b78aa1664245009c1d40d47d9ac149e94", "patch": "@@ -557,6 +557,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arrayvec\",\n  \"base-db\",\n+ \"bitflags\",\n  \"chalk-derive\",\n  \"chalk-ir\",\n  \"chalk-recursive\","}, {"sha": "ae837ac6dce880a0e4f756705fdbb2ccd567ec3a", "filename": "crates/hir-ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bfc732b78aa1664245009c1d40d47d9ac149e94/crates%2Fhir-ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1bfc732b78aa1664245009c1d40d47d9ac149e94/crates%2Fhir-ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2FCargo.toml?ref=1bfc732b78aa1664245009c1d40d47d9ac149e94", "patch": "@@ -13,6 +13,7 @@ doctest = false\n cov-mark = \"2.0.0-pre.1\"\n itertools = \"0.10.5\"\n arrayvec = \"0.7.2\"\n+bitflags = \"1.3.2\"\n smallvec = \"1.10.0\"\n ena = \"0.14.0\"\n tracing = \"0.1.35\""}, {"sha": "c4488d6d91ea58127775399e4bee827feba91bce", "filename": "crates/hir-ty/src/infer/unify.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1bfc732b78aa1664245009c1d40d47d9ac149e94/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfc732b78aa1664245009c1d40d47d9ac149e94/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs?ref=1bfc732b78aa1664245009c1d40d47d9ac149e94", "patch": "@@ -1,6 +1,6 @@\n //! Unification and canonicalization logic.\n \n-use std::{fmt, mem, sync::Arc};\n+use std::{fmt, iter, mem, sync::Arc};\n \n use chalk_ir::{\n     cast::Cast, fold::TypeFoldable, interner::HasInterner, zip::Zip, CanonicalVarKind, FloatTy,\n@@ -128,9 +128,11 @@ pub(crate) fn unify(\n     ))\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub(crate) struct TypeVariableData {\n-    diverging: bool,\n+bitflags::bitflags! {\n+    #[derive(Default)]\n+    pub(crate) struct TypeVariableFlags: u8 {\n+        const DIVERGING = 1 << 0;\n+    }\n }\n \n type ChalkInferenceTable = chalk_solve::infer::InferenceTable<Interner>;\n@@ -140,14 +142,14 @@ pub(crate) struct InferenceTable<'a> {\n     pub(crate) db: &'a dyn HirDatabase,\n     pub(crate) trait_env: Arc<TraitEnvironment>,\n     var_unification_table: ChalkInferenceTable,\n-    type_variable_table: Vec<TypeVariableData>,\n+    type_variable_table: Vec<TypeVariableFlags>,\n     pending_obligations: Vec<Canonicalized<InEnvironment<Goal>>>,\n }\n \n pub(crate) struct InferenceTableSnapshot {\n     var_table_snapshot: chalk_solve::infer::InferenceSnapshot<Interner>,\n     pending_obligations: Vec<Canonicalized<InEnvironment<Goal>>>,\n-    type_variable_table_snapshot: Vec<TypeVariableData>,\n+    type_variable_table_snapshot: Vec<TypeVariableFlags>,\n }\n \n impl<'a> InferenceTable<'a> {\n@@ -169,27 +171,27 @@ impl<'a> InferenceTable<'a> {\n     /// result.\n     pub(super) fn propagate_diverging_flag(&mut self) {\n         for i in 0..self.type_variable_table.len() {\n-            if !self.type_variable_table[i].diverging {\n+            if !self.type_variable_table[i].contains(TypeVariableFlags::DIVERGING) {\n                 continue;\n             }\n             let v = InferenceVar::from(i as u32);\n             let root = self.var_unification_table.inference_var_root(v);\n             if let Some(data) = self.type_variable_table.get_mut(root.index() as usize) {\n-                data.diverging = true;\n+                *data |= TypeVariableFlags::DIVERGING;\n             }\n         }\n     }\n \n     pub(super) fn set_diverging(&mut self, iv: InferenceVar, diverging: bool) {\n-        self.type_variable_table[iv.index() as usize].diverging = diverging;\n+        self.type_variable_table[iv.index() as usize].set(TypeVariableFlags::DIVERGING, diverging);\n     }\n \n     fn fallback_value(&self, iv: InferenceVar, kind: TyVariableKind) -> Ty {\n         match kind {\n             _ if self\n                 .type_variable_table\n                 .get(iv.index() as usize)\n-                .map_or(false, |data| data.diverging) =>\n+                .map_or(false, |data| data.contains(TypeVariableFlags::DIVERGING)) =>\n             {\n                 TyKind::Never\n             }\n@@ -247,18 +249,18 @@ impl<'a> InferenceTable<'a> {\n     }\n \n     fn extend_type_variable_table(&mut self, to_index: usize) {\n-        self.type_variable_table.extend(\n-            (0..1 + to_index - self.type_variable_table.len())\n-                .map(|_| TypeVariableData { diverging: false }),\n-        );\n+        let count = to_index - self.type_variable_table.len() + 1;\n+        self.type_variable_table.extend(iter::repeat(TypeVariableFlags::default()).take(count));\n     }\n \n     fn new_var(&mut self, kind: TyVariableKind, diverging: bool) -> Ty {\n         let var = self.var_unification_table.new_variable(UniverseIndex::ROOT);\n         // Chalk might have created some type variables for its own purposes that we don't know about...\n         self.extend_type_variable_table(var.index() as usize);\n         assert_eq!(var.index() as usize, self.type_variable_table.len() - 1);\n-        self.type_variable_table[var.index() as usize].diverging = diverging;\n+        if diverging {\n+            self.type_variable_table[var.index() as usize] |= TypeVariableFlags::DIVERGING;\n+        }\n         var.to_ty_with_kind(Interner, kind)\n     }\n "}]}