{"sha": "3d98744c2a929c35852d20b5724ef5b6be1e3312", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkOTg3NDRjMmE5MjljMzU4NTJkMjBiNTcyNGVmNWI2YmUxZTMzMTI=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-12T17:51:43Z"}, "committer": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-25T18:45:21Z"}, "message": "proptest strategies for TextUnit and AtomTextEdit", "tree": {"sha": "2125060d997f327d6ebeccd12833be0cf8ffce8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2125060d997f327d6ebeccd12833be0cf8ffce8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d98744c2a929c35852d20b5724ef5b6be1e3312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d98744c2a929c35852d20b5724ef5b6be1e3312", "html_url": "https://github.com/rust-lang/rust/commit/3d98744c2a929c35852d20b5724ef5b6be1e3312", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d98744c2a929c35852d20b5724ef5b6be1e3312/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fb426cb9eeefa69a53d7c8c3367f7c6b714b9b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb426cb9eeefa69a53d7c8c3367f7c6b714b9b8", "html_url": "https://github.com/rust-lang/rust/commit/5fb426cb9eeefa69a53d7c8c3367f7c6b714b9b8"}], "stats": {"total": 184, "additions": 184, "deletions": 0}, "files": [{"sha": "3a37935818fea0b9cdd032492863587731deafda", "filename": "Cargo.lock", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/3d98744c2a929c35852d20b5724ef5b6be1e3312/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3d98744c2a929c35852d20b5724ef5b6be1e3312/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3d98744c2a929c35852d20b5724ef5b6be1e3312", "patch": "@@ -73,6 +73,19 @@ dependencies = [\n  \"safemem 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"bit-set\"\n+version = \"0.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bit-vec 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"bit-vec\"\n+version = \"0.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"bitflags\"\n version = \"1.0.4\"\n@@ -302,6 +315,11 @@ dependencies = [\n  \"regex 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"fnv\"\n+version = \"1.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"fst\"\n version = \"0.3.3\"\n@@ -625,6 +643,28 @@ dependencies = [\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"proptest\"\n+version = \"0.8.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bit-set 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rusty-fork 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempfile 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"quick-error\"\n+version = \"1.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"quote\"\n version = \"0.6.10\"\n@@ -763,6 +803,7 @@ dependencies = [\n name = \"ra_text_edit\"\n version = \"0.1.0\"\n dependencies = [\n+ \"proptest 0.8.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n  \"text_unit 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -983,6 +1024,17 @@ dependencies = [\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rusty-fork\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempfile 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wait-timeout 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"ryu\"\n version = \"0.2.7\"\n@@ -1412,6 +1464,14 @@ name = \"void\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"wait-timeout\"\n+version = \"0.1.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"walkdir\"\n version = \"2.2.7\"\n@@ -1459,6 +1519,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum backtrace 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b5b493b66e03090ebc4343eb02f94ff944e0cbc9ac6571491d170ba026741eb5\"\n \"checksum backtrace-sys 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fcce89e5ad5c8949caa9434501f7b55415b3e7ad5270cb88c75a8d35e8f1279\"\n \"checksum base64 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"489d6c0ed21b11d038c31b6ceccca973e65d73ba3bd8ecb9a2babf5546164643\"\n+\"checksum bit-set 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6f1efcc46c18245a69c38fcc5cc650f16d3a59d034f3106e9ed63748f695730a\"\n+\"checksum bit-vec 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4440d5cb623bb7390ae27fec0bb6c61111969860f8e3ae198bfa0663645e67cf\"\n \"checksum bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"228047a76f468627ca71776ecdebd732a3423081fcf5125585bcd7c49886ce12\"\n \"checksum block-buffer 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a076c298b9ecdb530ed9d967e74a6027d6a7478924520acddcddc24c1c8ab3ab\"\n \"checksum byte-tools 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"560c32574a12a89ecd91f5e742165893f86e3ab98d21f8ea548658eb9eef5f40\"\n@@ -1487,6 +1549,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum failure_derive 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"64c2d913fe8ed3b6c6518eedf4538255b989945c14c2a7d5cbff62a5e2120596\"\n \"checksum fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed\"\n \"checksum flexi_logger 0.10.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4dda06444ccc8b0a6da19d939989b4a4e83f328710ada449eedaed48c8b903cd\"\n+\"checksum fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n \"checksum fst 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"db72126ca7dff566cdbbdd54af44668c544897d9d3862b198141f176f1238bdf\"\n \"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n \"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n@@ -1527,6 +1590,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum pest_generator 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ebee4e9680be4fd162e6f3394ae4192a6b60b1e4d17d845e631f0c68d1a3386\"\n \"checksum pest_meta 2.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f6d5f6f0e6082578c86af197d780dc38328e3f768cec06aac9bc46d714e8221\"\n \"checksum proc-macro2 0.4.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"77619697826f31a02ae974457af0b29b723e5619e113e9397b8b82c6bd253f09\"\n+\"checksum proptest 0.8.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"926d0604475349f463fe44130aae73f2294b5309ab2ca0310b998bd334ef191f\"\n+\"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n \"checksum quote 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"53fa22a1994bd0f9372d7a816207d8a2677ad0325b073f5c5332760f0fb62b5c\"\n \"checksum rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8356f47b32624fef5b3301c1be97e5944ecdd595409cc5da11d05f211db6cfbd\"\n \"checksum rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e464cd887e869cddcae8792a4ee31d23c7edd516700695608f5b98c67ee0131c\"\n@@ -1551,6 +1616,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rustc-demangle 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"01b90379b8664dd83460d59bdc5dd1fd3172b8913788db483ed1325171eab2f7\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n+\"checksum rusty-fork 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9591f190d2852720b679c21f66ad929f9f1d7bb09d1193c26167586029d8489c\"\n \"checksum ryu 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb9e9b8cde282a9fe6a42dd4681319bfb63f121b8a8ee9439c6f4107e58a46f7\"\n \"checksum safemem 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8dca453248a96cb0749e36ccdfe2b0b4e54a61bfef89fb97ec621eb8e0a93dd9\"\n \"checksum salsa 0.8.0 (git+https://github.com/matklad/salsa?branch=no-upgrade)\" = \"<none>\"\n@@ -1602,6 +1668,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n \"checksum version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"914b1a6776c4c929a602fafd8bc742e06365d4bcbe48c30f9cca5824f70dc9dd\"\n \"checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n+\"checksum wait-timeout 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b9f3bf741a801531993db6478b95682117471f76916f5e690dd8d45395b09349\"\n \"checksum walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9d9d7ed3431229a144296213105a390676cc49c9b6a72bd19f3176c98e129fa1\"\n \"checksum winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92c1eb33641e276cfa214a0522acad57be5c56b10cb348b3c5117db75f3ac4b0\"\n \"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\""}, {"sha": "67dfd0924dd1759a3c272d714c8f3512a15833f9", "filename": "crates/ra_text_edit/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d98744c2a929c35852d20b5724ef5b6be1e3312/crates%2Fra_text_edit%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3d98744c2a929c35852d20b5724ef5b6be1e3312/crates%2Fra_text_edit%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2FCargo.toml?ref=3d98744c2a929c35852d20b5724ef5b6be1e3312", "patch": "@@ -10,3 +10,4 @@ text_unit = \"0.1.5\"\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n+proptest = \"0.8.7\""}, {"sha": "0a407795e6fb9d0c703d22f3c0ee49747c1e2038", "filename": "crates/ra_text_edit/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d98744c2a929c35852d20b5724ef5b6be1e3312/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d98744c2a929c35852d20b5724ef5b6be1e3312/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Flib.rs?ref=3d98744c2a929c35852d20b5724ef5b6be1e3312", "patch": "@@ -1,5 +1,7 @@\n mod text_edit;\n pub mod text_utils;\n+#[cfg(test)]\n+pub mod test_utils;\n \n pub use crate::text_edit::{TextEdit, TextEditBuilder};\n "}, {"sha": "92b79ab5912711e12f9b5d96e795bdd4efdce634", "filename": "crates/ra_text_edit/src/test_utils.rs", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/3d98744c2a929c35852d20b5724ef5b6be1e3312/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d98744c2a929c35852d20b5724ef5b6be1e3312/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs?ref=3d98744c2a929c35852d20b5724ef5b6be1e3312", "patch": "@@ -0,0 +1,114 @@\n+use proptest::{prelude::*, proptest, proptest_helper};\n+use text_unit::{TextUnit, TextRange};\n+use crate::AtomTextEdit;\n+\n+pub fn arb_text() -> proptest::string::RegexGeneratorStrategy<String> {\n+    // generate multiple newlines\n+    proptest::string::string_regex(\"(.*\\n?)*\").unwrap()\n+}\n+\n+fn text_offsets(text: &str) -> Vec<TextUnit> {\n+    text.char_indices()\n+        .map(|(i, _)| TextUnit::from_usize(i))\n+        .collect()\n+}\n+\n+pub fn arb_offset(text: &str) -> BoxedStrategy<TextUnit> {\n+    let offsets = text_offsets(text);\n+    // this is necessary to avoid \"Uniform::new called with `low >= high`\" panic\n+    if offsets.is_empty() {\n+        Just(TextUnit::from(0)).boxed()\n+    } else {\n+        prop::sample::select(offsets).boxed()\n+    }\n+}\n+\n+pub fn arb_edits(text: &str) -> BoxedStrategy<Vec<AtomTextEdit>> {\n+    let offsets = text_offsets(text);\n+    let offsets_len = offsets.len();\n+\n+    if offsets_len == 0 {\n+        return proptest::bool::ANY\n+            .prop_flat_map(|b| {\n+                // only valid edits\n+                if b {\n+                    arb_text()\n+                        .prop_map(|text| vec![AtomTextEdit::insert(TextUnit::from(0), text)])\n+                        .boxed()\n+                } else {\n+                    Just(vec![]).boxed()\n+                }\n+            })\n+            .boxed();\n+    }\n+\n+    proptest::sample::subsequence(offsets, 0..offsets_len)\n+        .prop_flat_map(|xs| {\n+            let strategies: Vec<_> = xs\n+                .chunks(2)\n+                .map(|chunk| match chunk {\n+                    &[from, to] => {\n+                        let range = TextRange::from_to(from, to);\n+                        (proptest::bool::ANY)\n+                            .prop_flat_map(move |b| {\n+                                if b {\n+                                    Just(AtomTextEdit::delete(range)).boxed()\n+                                } else {\n+                                    arb_text()\n+                                        .prop_map(move |text| AtomTextEdit::replace(range, text))\n+                                        .boxed()\n+                                }\n+                            })\n+                            .boxed()\n+                    }\n+                    &[x] => arb_text()\n+                        .prop_map(move |text| AtomTextEdit::insert(x, text))\n+                        .boxed(),\n+                    _ => unreachable!(),\n+                })\n+                .collect();\n+            strategies\n+        })\n+        .boxed()\n+}\n+\n+fn arb_text_with_edits() -> BoxedStrategy<(String, Vec<AtomTextEdit>)> {\n+    let text = arb_text();\n+    text.prop_flat_map(|s| {\n+        let edits = arb_edits(&s);\n+        (Just(s), edits)\n+    })\n+    .boxed()\n+}\n+\n+fn intersect(r1: TextRange, r2: TextRange) -> Option<TextRange> {\n+    let start = r1.start().max(r2.start());\n+    let end = r1.end().min(r2.end());\n+    if start <= end {\n+        Some(TextRange::from_to(start, end))\n+    } else {\n+        None\n+    }\n+}\n+\n+proptest! {\n+#[test]\n+    fn atom_text_edits_are_valid((text, edits) in arb_text_with_edits()) {\n+        proptest_atom_text_edits_are_valid(text, edits)\n+    }\n+}\n+\n+fn proptest_atom_text_edits_are_valid(text: String, edits: Vec<AtomTextEdit>) {\n+    // slicing doesn't panic\n+    for e in &edits {\n+        let _ = &text[e.delete];\n+    }\n+    // ranges do not overlap\n+    for (i1, e1) in edits.iter().skip(1).enumerate() {\n+        for e2 in &edits[0..i1] {\n+            if intersect(e1.delete, e2.delete).is_some() {\n+                assert!(false, \"Overlapping ranges {} {}\", e1.delete, e2.delete);\n+            }\n+        }\n+    }\n+}"}]}