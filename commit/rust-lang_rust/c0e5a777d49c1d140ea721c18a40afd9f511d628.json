{"sha": "c0e5a777d49c1d140ea721c18a40afd9f511d628", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZTVhNzc3ZDQ5YzFkMTQwZWE3MjFjMThhNDBhZmQ5ZjUxMWQ2Mjg=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-09-06T16:38:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-06T16:38:03Z"}, "message": "Rollup merge of #36267 - Cobrand:E0559, r=jonathandturner\n\nUpdated E0559 to new format\n\nRefactored a method that printed one suggested field name,\ninto a method that returns an `Option` of a suggestion\n\n(Updated test cases accordingly)\n\nr? @jonathandturner\n\nCloses #36197", "tree": {"sha": "f65b1f982694fb593b5d1a68ccd1a026309f67c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f65b1f982694fb593b5d1a68ccd1a026309f67c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0e5a777d49c1d140ea721c18a40afd9f511d628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e5a777d49c1d140ea721c18a40afd9f511d628", "html_url": "https://github.com/rust-lang/rust/commit/c0e5a777d49c1d140ea721c18a40afd9f511d628", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0e5a777d49c1d140ea721c18a40afd9f511d628/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d266032190476df30a673622498a1519f1ef86d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d266032190476df30a673622498a1519f1ef86d", "html_url": "https://github.com/rust-lang/rust/commit/2d266032190476df30a673622498a1519f1ef86d"}, {"sha": "1aa777b51f03593eb557d4e550830f8406ee37c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa777b51f03593eb557d4e550830f8406ee37c3", "html_url": "https://github.com/rust-lang/rust/commit/1aa777b51f03593eb557d4e550830f8406ee37c3"}], "stats": {"total": 67, "additions": 40, "deletions": 27}, "files": [{"sha": "b059c2ab9f3a8d0f6f41b45d5c9b4f941275749e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c0e5a777d49c1d140ea721c18a40afd9f511d628/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e5a777d49c1d140ea721c18a40afd9f511d628/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c0e5a777d49c1d140ea721c18a40afd9f511d628", "patch": "@@ -118,7 +118,6 @@ use syntax::parse::token::{self, InternedString, keywords};\n use syntax::ptr::P;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{self, Span};\n-use errors::DiagnosticBuilder;\n \n use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir::{self, PatKind};\n@@ -2959,7 +2958,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }, expr_t);\n             match expr_t.sty {\n                 ty::TyStruct(def, _) | ty::TyUnion(def, _) => {\n-                    Self::suggest_field_names(&mut err, def.struct_variant(), field, vec![]);\n+                    if let Some(suggested_field_name) =\n+                        Self::suggest_field_name(def.struct_variant(), field, vec![]) {\n+                        err.span_help(field.span,\n+                                      &format!(\"did you mean `{}`?\", suggested_field_name));\n+                    };\n                 }\n                 ty::TyRawPtr(..) => {\n                     err.note(&format!(\"`{0}` is a native pointer; perhaps you need to deref with \\\n@@ -2972,11 +2975,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    // displays hints about the closest matches in field names\n-    fn suggest_field_names(err: &mut DiagnosticBuilder,\n-                           variant: ty::VariantDef<'tcx>,\n-                           field: &Spanned<ast::Name>,\n-                           skip : Vec<InternedString>) {\n+    // Return an hint about the closest match in field names\n+    fn suggest_field_name(variant: ty::VariantDef<'tcx>,\n+                          field: &Spanned<ast::Name>,\n+                          skip : Vec<InternedString>)\n+                          -> Option<InternedString> {\n         let name = field.node.as_str();\n         let names = variant.fields.iter().filter_map(|field| {\n             // ignore already set fields and private fields from non-local crates\n@@ -2989,10 +2992,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         });\n \n         // only find fits with at least one matching letter\n-        if let Some(name) = find_best_match_for_name(names, &name, Some(name.len())) {\n-            err.span_help(field.span,\n-                          &format!(\"did you mean `{}`?\", name));\n-        }\n+        find_best_match_for_name(names, &name, Some(name.len()))\n     }\n \n     // Check tuple index expressions\n@@ -3086,7 +3086,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ty);\n         // prevent all specified fields from being suggested\n         let skip_fields = skip_fields.iter().map(|ref x| x.name.node.as_str());\n-        Self::suggest_field_names(&mut err, variant, &field.name, skip_fields.collect());\n+        if let Some(field_name) = Self::suggest_field_name(variant,\n+                                                           &field.name,\n+                                                           skip_fields.collect()) {\n+            err.span_label(field.name.span,&format!(\"did you mean `{}`?\",field_name));\n+        };\n         err.emit();\n     }\n "}, {"sha": "aeeeae42228138cd473ea090cb2f1a7b51d9cf16", "filename": "src/test/compile-fail/E0559.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0e5a777d49c1d140ea721c18a40afd9f511d628/src%2Ftest%2Fcompile-fail%2FE0559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e5a777d49c1d140ea721c18a40afd9f511d628/src%2Ftest%2Fcompile-fail%2FE0559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0559.rs?ref=c0e5a777d49c1d140ea721c18a40afd9f511d628", "patch": "@@ -13,5 +13,7 @@ enum Field {\n }\n \n fn main() {\n-    let s = Field::Fool { joke: 0 }; //~ ERROR E0559\n+    let s = Field::Fool { joke: 0 };\n+    //~^ ERROR E0559\n+    //~| NOTE did you mean `x`?\n }"}, {"sha": "f25f01af33fd1f5e63f87ee6ab29e74fbc2626a0", "filename": "src/test/compile-fail/struct-fields-hints-no-dupe.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c0e5a777d49c1d140ea721c18a40afd9f511d628/src%2Ftest%2Fcompile-fail%2Fstruct-fields-hints-no-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e5a777d49c1d140ea721c18a40afd9f511d628/src%2Ftest%2Fcompile-fail%2Fstruct-fields-hints-no-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-fields-hints-no-dupe.rs?ref=c0e5a777d49c1d140ea721c18a40afd9f511d628", "patch": "@@ -17,8 +17,9 @@ struct A {\n fn main() {\n     let a = A {\n         foo : 5,\n-        bar : 42,//~ ERROR struct `A` has no field named `bar`\n-        //~^ HELP did you mean `barr`?\n+        bar : 42,\n+        //~^ ERROR struct `A` has no field named `bar`\n+        //~| NOTE did you mean `barr`?\n         car : 9,\n     };\n }"}, {"sha": "62ec6e6b0d2494b24d3d5e61e0562957877f01ea", "filename": "src/test/compile-fail/struct-fields-hints.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c0e5a777d49c1d140ea721c18a40afd9f511d628/src%2Ftest%2Fcompile-fail%2Fstruct-fields-hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e5a777d49c1d140ea721c18a40afd9f511d628/src%2Ftest%2Fcompile-fail%2Fstruct-fields-hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-fields-hints.rs?ref=c0e5a777d49c1d140ea721c18a40afd9f511d628", "patch": "@@ -17,7 +17,8 @@ struct A {\n fn main() {\n     let a = A {\n         foo : 5,\n-        bar : 42,//~ ERROR struct `A` has no field named `bar`\n-        //~^ HELP did you mean `car`?\n+        bar : 42,\n+        //~^ ERROR struct `A` has no field named `bar`\n+        //~| NOTE did you mean `car`?\n     };\n }"}, {"sha": "906bfc78498e43ef1e2c5ad837c86a0fb16aa56c", "filename": "src/test/compile-fail/suggest-private-fields.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c0e5a777d49c1d140ea721c18a40afd9f511d628/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e5a777d49c1d140ea721c18a40afd9f511d628/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs?ref=c0e5a777d49c1d140ea721c18a40afd9f511d628", "patch": "@@ -22,16 +22,20 @@ struct A {\n fn main () {\n     // external crate struct\n     let k = B {\n-        aa: 20, //~ ERROR struct `xc::B` has no field named `aa`\n-        //~^ HELP did you mean `a`?\n-        bb: 20, //~ ERROR struct `xc::B` has no field named `bb`\n-        //~^ HELP did you mean `a`?\n+        aa: 20,\n+        //~^ ERROR struct `xc::B` has no field named `aa`\n+        //~| NOTE did you mean `a`?\n+        bb: 20,\n+        //~^ ERROR struct `xc::B` has no field named `bb`\n+        //~| NOTE did you mean `a`?\n     };\n     // local crate struct\n     let l = A {\n-        aa: 20, //~ ERROR struct `A` has no field named `aa`\n-        //~^ HELP did you mean `a`?\n-        bb: 20, //~ ERROR struct `A` has no field named `bb`\n-        //~^ HELP did you mean `b`?\n+        aa: 20,\n+        //~^ ERROR struct `A` has no field named `aa`\n+        //~| NOTE did you mean `a`?\n+        bb: 20,\n+        //~^ ERROR struct `A` has no field named `bb`\n+        //~| NOTE did you mean `b`?\n     };\n }"}, {"sha": "92811b6b5be117e99407981cbb119e0cbf707536", "filename": "src/test/compile-fail/union/union-suggest-field.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c0e5a777d49c1d140ea721c18a40afd9f511d628/src%2Ftest%2Fcompile-fail%2Funion%2Funion-suggest-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e5a777d49c1d140ea721c18a40afd9f511d628/src%2Ftest%2Fcompile-fail%2Funion%2Funion-suggest-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-suggest-field.rs?ref=c0e5a777d49c1d140ea721c18a40afd9f511d628", "patch": "@@ -19,8 +19,9 @@ impl U {\n }\n \n fn main() {\n-    let u = U { principle: 0 }; //~ ERROR union `U` has no field named `principle`\n-                                //~^ HELP did you mean `principal`?\n+    let u = U { principle: 0 };\n+    //~^ ERROR union `U` has no field named `principle`\n+    //~| NOTE did you mean `principal`?\n     let w = u.principial; //~ ERROR attempted access of field `principial` on type `U`\n                           //~^ HELP did you mean `principal`?\n "}]}