{"sha": "f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYjUyNWZiOTdjNDg5NzZjNzQwZGE1MGEzOGVjOGM5ZTVmMjliN2U=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-20T23:16:59Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-21T19:19:27Z"}, "message": "test fallout", "tree": {"sha": "e64979e86caeca78330305fec3c5a628cd799045", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e64979e86caeca78330305fec3c5a628cd799045"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "html_url": "https://github.com/rust-lang/rust/commit/f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "585cf6fb5f0c2736c781b6efb4651ba6d317a753", "url": "https://api.github.com/repos/rust-lang/rust/commits/585cf6fb5f0c2736c781b6efb4651ba6d317a753", "html_url": "https://github.com/rust-lang/rust/commit/585cf6fb5f0c2736c781b6efb4651ba6d317a753"}], "stats": {"total": 80, "additions": 46, "deletions": 34}, "files": [{"sha": "36074a7ae0225369e4de694b829eecc00b7389a0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -70,6 +70,7 @@ pub fn compile_input(sess: Session,\n         (control.$point.callback)(state);\n \n         if control.$point.stop == Compilation::Stop {\n+            $tsess.abort_if_errors();\n             return;\n         }\n     })}\n@@ -469,7 +470,11 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n \n     let mut feature_gated_cfgs = vec![];\n     krate = time(time_passes, \"configuration 1\", || {\n-        syntax::config::strip_unconfigured_items(sess.diagnostic(), krate, &mut feature_gated_cfgs)\n+        sess.abort_if_new_errors(|| {\n+            syntax::config::strip_unconfigured_items(sess.diagnostic(),\n+                                                     krate,\n+                                                     &mut feature_gated_cfgs)\n+        })\n     });\n \n     *sess.crate_types.borrow_mut() = collect_crate_types(sess, &krate.attrs);\n@@ -605,17 +610,23 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     // JBC: make CFG processing part of expansion to avoid this problem:\n \n     // strip again, in case expansion added anything with a #[cfg].\n-    krate = time(time_passes, \"configuration 2\", || {\n-        syntax::config::strip_unconfigured_items(sess.diagnostic(), krate, &mut feature_gated_cfgs)\n-    });\n+    krate = sess.abort_if_new_errors(|| {\n+        let krate = time(time_passes, \"configuration 2\", || {\n+            syntax::config::strip_unconfigured_items(sess.diagnostic(),\n+                                                     krate,\n+                                                     &mut feature_gated_cfgs)\n+        });\n \n-    time(time_passes, \"gated configuration checking\", || {\n-        let features = sess.features.borrow();\n-        feature_gated_cfgs.sort();\n-        feature_gated_cfgs.dedup();\n-        for cfg in &feature_gated_cfgs {\n-            cfg.check_and_emit(sess.diagnostic(), &features, sess.codemap());\n-        }\n+        time(time_passes, \"gated configuration checking\", || {\n+            let features = sess.features.borrow();\n+            feature_gated_cfgs.sort();\n+            feature_gated_cfgs.dedup();\n+            for cfg in &feature_gated_cfgs {\n+                cfg.check_and_emit(sess.diagnostic(), &features, sess.codemap());\n+            }\n+        });\n+\n+        krate\n     });\n \n     krate = time(time_passes, \"maybe building test harness\", || {"}, {"sha": "a8697f45d9156d9d4dd729b1ec947c25bc9aae9e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -4229,7 +4229,9 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n             }\n             // Check for unrepresentable discriminant values\n             match hint {\n-                attr::ReprAny | attr::ReprExtern => (),\n+                attr::ReprAny | attr::ReprExtern => {\n+                    disr_vals.push(current_disr_val);\n+                }\n                 attr::ReprInt(sp, ity) => {\n                     if !disr_in_range(ccx, ity, current_disr_val) {\n                         let mut err = struct_span_err!(ccx.tcx.sess, v.span, E0082,\n@@ -4239,14 +4241,9 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                         err.emit();\n                     }\n                 }\n-                attr::ReprSimd => {\n-                    ccx.tcx.sess.bug(\"range_to_inttype: found ReprSimd on an enum\");\n-                }\n-                attr::ReprPacked => {\n-                    ccx.tcx.sess.bug(\"range_to_inttype: found ReprPacked on an enum\");\n-                }\n+                // Error reported elsewhere.\n+                attr::ReprSimd | attr::ReprPacked => {}\n             }\n-            disr_vals.push(current_disr_val);\n         }\n     }\n "}, {"sha": "b3ef3d72ca3bf77a99f9a3f8205a40b77bdaa344", "filename": "src/test/compile-fail/cfg-non-opt-expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fcfg-non-opt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fcfg-non-opt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcfg-non-opt-expr.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(stmt_expr_attributes)]\n+\n fn main() {\n     let _ = #[cfg(unset)] ();\n     //~^ ERROR removing an expression is not supported in this position"}, {"sha": "d6d7dbb4aecd82e05328cddb799024e9c122356e", "filename": "src/test/compile-fail/double-type-import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fdouble-type-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fdouble-type-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdouble-type-import.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -20,5 +20,5 @@ mod foo {\n }\n \n fn main() {\n-    let _ = foo::X;\n+    let _ = foo::X; //~ ERROR unresolved name `foo::X`\n }"}, {"sha": "489bcfbdefdd6cf880a6224a5a6880e6c1d5cf9f", "filename": "src/test/compile-fail/import-from-missing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -16,3 +16,4 @@ mod spam {\n }\n \n fn main() { ham(); eggs(); }\n+//~^ ERROR unresolved name `eggs`"}, {"sha": "86c4ce8b0380b008e6f98b3070a83c45eec46e50", "filename": "src/test/compile-fail/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -16,4 +16,4 @@ use zed::baz;\n mod zed {\n     pub fn bar() { println!(\"bar\"); }\n }\n-fn main(args: Vec<String>) { bar(); }\n+fn main() { bar(); }"}, {"sha": "1d2aecd4e3b7ffa11774a2b6a4608bc248384baf", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -16,4 +16,5 @@ mod baz {}\n mod zed {\n     pub fn bar() { println!(\"bar3\"); }\n }\n-fn main(args: Vec<String>) { bar(); }\n+fn main() { bar(); }\n+//~^ ERROR unresolved name `bar`"}, {"sha": "ea2dfca0714fc5f35468f8b9293301a1f54a24b9", "filename": "src/test/compile-fail/macro-reexport-malformed-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![no_std]\n #![feature(macro_reexport)]\n \n #[macro_reexport]  //~ ERROR bad macro reexport\n extern crate std;\n-\n-fn main() { }"}, {"sha": "844955fb7e6647a760cb7548f9562c0ac8f370a5", "filename": "src/test/compile-fail/macro-reexport-malformed-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![no_std]\n #![feature(macro_reexport)]\n \n #[macro_reexport=\"foo\"]  //~ ERROR bad macro reexport\n extern crate std;\n-\n-fn main() { }"}, {"sha": "381c22854e6545eac2d476d33496dfbc8ac546ea", "filename": "src/test/compile-fail/macro-reexport-malformed-3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![no_std]\n #![feature(macro_reexport)]\n \n #[macro_reexport(foo=\"bar\")]  //~ ERROR bad macro reexport\n extern crate std;\n-\n-fn main() { }"}, {"sha": "5bb0b8759f486c4d0407bc6e750269355be36aa2", "filename": "src/test/compile-fail/macro-reexport-undef.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:two_macros.rs\n \n+#![feature(macro_reexport)]\n+\n #[macro_use(macro_two)]\n #[macro_reexport(no_way)] //~ ERROR reexported macro not found\n extern crate two_macros;"}, {"sha": "39c09c6977963350b5903fb4d9728659c2f27233", "filename": "src/test/compile-fail/macro-use-bad-args-1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-1.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![no_std]\n+\n #[macro_use(foo(bar))]  //~ ERROR bad macro import\n extern crate std;\n-\n-fn main() {\n-}"}, {"sha": "11a0108b99b89a30e8fa1a2cae690cb42b08291f", "filename": "src/test/compile-fail/macro-use-bad-args-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-2.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![no_std]\n+\n #[macro_use(foo=\"bar\")]  //~ ERROR bad macro import\n extern crate std;\n-\n-fn main() {\n-}"}, {"sha": "6a203993ccf2d2784d8c42cc42f2d955dd139158", "filename": "src/test/compile-fail/privacy3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -28,6 +28,7 @@ fn test1() {\n     use bar::gpriv;\n     //~^ ERROR unresolved import `bar::gpriv`. There is no `gpriv` in `bar`\n     gpriv();\n+    //~^ ERROR unresolved name `gpriv`\n }\n \n #[start] fn main(_: isize, _: *const *const u8) -> isize { 3 }"}, {"sha": "e28197e81faf97804af90a6ee0d47fed23d11801", "filename": "src/test/compile-fail/self_type_keyword.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fself_type_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fself_type_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fself_type_keyword.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -29,6 +29,7 @@ pub fn main() {\n         //~^ ERROR expected identifier, found keyword `Self`\n         Self!() => (),\n         //~^ ERROR expected identifier, found keyword `Self`\n+        //~^^ ERROR macro undefined: 'Self!'\n         Foo { x: Self } => (),\n         //~^ ERROR expected identifier, found keyword `Self`\n         Foo { Self } => (),"}, {"sha": "9cc3c92e2e376b22cd2b2e269202d788d664a16f", "filename": "src/test/compile-fail/use-mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b525fb97c48976c740da50a38ec8c9e5f29b7e/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs?ref=f3b525fb97c48976c740da50a38ec8c9e5f29b7e", "patch": "@@ -14,6 +14,7 @@ use foo::bar::{\n     Bar,\n     self\n //~^ NOTE another `self` import appears here\n+//~^^ ERROR a module named `bar` has already been imported in this module\n };\n \n use {self};"}]}