{"sha": "be493fe8cc40c3d3f6030a1313c1ff747fce770d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNDkzZmU4Y2M0MGMzZDNmNjAzMGExMzEzYzFmZjc0N2ZjZTc3MGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-13T09:42:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-13T09:42:10Z"}, "message": "Auto merge of #69023 - Centril:parse_fn, r=petrochenkov\n\nparse: unify function front matter parsing\n\nPart of https://github.com/rust-lang/rust/pull/68728.\n\n- `const extern fn` feature gating is now done post-expansion such that we do not have conditional compatibilities of function qualifiers *in parsing*.\n\n- The `FnFrontMatter` grammar becomes:\n   ```rust\n   Extern = \"extern\" StringLit ;\n   FnQual = \"const\"? \"async\"? \"unsafe\"? Extern? ;\n   FnFrontMatter = FnQual \"fn\" ;\n   ```\n\n   That is, all item contexts now *syntactically* allow `const async unsafe extern \"C\" fn` and use semantic restrictions to rule out combinations previously prevented syntactically. The semantic restrictions include in particular:\n\n   - `fn`s in `extern { ... }` can have no qualifiers.\n   - `const` and `async` cannot be combined.\n\n- We change `ast::{Unsafety, Spanned<Constness>}>` into `enum ast::{Unsafe, Const} { Yes(Span), No }` respectively. This change in formulation allow us to exclude `Span` in the case of `No`, which facilitates parsing. Moreover, we also add a `Span` to `IsAsync` which is renamed to `Async`. The new `Span`s in `Unsafety` and `Async` are then taken advantage of for better diagnostics. A reason this change was made is to have a more uniform and clear naming scheme.\n\n  The HIR keeps the structures in AST (with those definitions moved into HIR) for now to avoid regressing perf.\n\nr? @petrochenkov", "tree": {"sha": "f5f5389477017c943087b76cdbec10c1a58b5b53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5f5389477017c943087b76cdbec10c1a58b5b53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be493fe8cc40c3d3f6030a1313c1ff747fce770d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be493fe8cc40c3d3f6030a1313c1ff747fce770d", "html_url": "https://github.com/rust-lang/rust/commit/be493fe8cc40c3d3f6030a1313c1ff747fce770d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be493fe8cc40c3d3f6030a1313c1ff747fce770d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e6eaceedeeda764056eb0e2134735793533770d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6eaceedeeda764056eb0e2134735793533770d", "html_url": "https://github.com/rust-lang/rust/commit/2e6eaceedeeda764056eb0e2134735793533770d"}, {"sha": "9828559aad8672bb320517bd0fa1992ce144b848", "url": "https://api.github.com/repos/rust-lang/rust/commits/9828559aad8672bb320517bd0fa1992ce144b848", "html_url": "https://github.com/rust-lang/rust/commit/9828559aad8672bb320517bd0fa1992ce144b848"}], "stats": {"total": 1431, "additions": 737, "deletions": 694}, "files": [{"sha": "3ab87ce8eb4a32b5cb600593bf1e113232995c7b", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -9,7 +9,6 @@ use crate::ty::fold::TypeFolder;\n use crate::ty::{Region, RegionVid};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use syntax::ast;\n \n use std::collections::hash_map::Entry;\n use std::collections::VecDeque;\n@@ -350,7 +349,7 @@ impl AutoTraitFinder<'tcx> {\n                         already_visited.remove(&pred);\n                         self.add_user_pred(\n                             &mut user_computed_preds,\n-                            ty::Predicate::Trait(pred, ast::Constness::NotConst),\n+                            ty::Predicate::Trait(pred, hir::Constness::NotConst),\n                         );\n                         predicates.push_back(pred);\n                     } else {"}, {"sha": "c25b392ec239ae87de88ad73e8bbe0a6f51c89a6", "filename": "src/librustc/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -695,7 +695,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             let unit_obligation = Obligation {\n                                 predicate: ty::Predicate::Trait(\n                                     predicate,\n-                                    ast::Constness::NotConst,\n+                                    hir::Constness::NotConst,\n                                 ),\n                                 ..obligation.clone()\n                             };"}, {"sha": "1fe8ab58d152caebce006519f9f23d0ddd0f5435", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -40,19 +40,19 @@ use crate::ty::fast_reject;\n use crate::ty::relate::TypeRelation;\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n-use rustc_hir::def_id::DefId;\n-\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::symbol::sym;\n use rustc_target::spec::abi::Abi;\n+use syntax::attr;\n+\n use std::cell::{Cell, RefCell};\n use std::cmp;\n use std::fmt::{self, Display};\n use std::iter;\n use std::rc::Rc;\n-use syntax::{ast, attr};\n \n pub use rustc::traits::types::select::*;\n \n@@ -677,7 +677,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // if the regions match exactly.\n             let cycle = stack.iter().skip(1).take_while(|s| s.depth >= cycle_depth);\n             let cycle = cycle.map(|stack| {\n-                ty::Predicate::Trait(stack.obligation.predicate, ast::Constness::NotConst)\n+                ty::Predicate::Trait(stack.obligation.predicate, hir::Constness::NotConst)\n             });\n             if self.coinductive_match(cycle) {\n                 debug!(\"evaluate_stack({:?}) --> recursive, coinductive\", stack.fresh_trait_ref);"}, {"sha": "1f007b970b0ca3dbce2b745dc3cacba3a394cae1", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -32,6 +32,7 @@\n //! looking for, and does not need to visit anything else.\n \n use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n+use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -150,7 +151,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n }\n \n-impl TypeFoldable<'tcx> for syntax::ast::Constness {\n+impl TypeFoldable<'tcx> for hir::Constness {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, _: &mut F) -> Self {\n         *self\n     }"}, {"sha": "2bda99e6d20fc4021d1e4c4a5f2e37e3c4b81bf5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -35,15 +35,15 @@ use rustc_data_structures::sync::{self, par_iter, Lrc, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc_hir::{GlobMap, Node, TraitMap};\n+use rustc_hir::{Constness, GlobMap, Node, TraitMap};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Encodable, Encoder};\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::Align;\n-use syntax::ast::{self, Constness, Ident, Name};\n+use syntax::ast::{self, Ident, Name};\n use syntax::node_id::{NodeId, NodeMap, NodeSet};\n \n use std::cell::RefCell;"}, {"sha": "384422956367a5dfc475f409421f20e55b309d32", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1818,7 +1818,7 @@ define_print_and_forward_display! {\n     ty::Predicate<'tcx> {\n         match *self {\n             ty::Predicate::Trait(ref data, constness) => {\n-                if let ast::Constness::Const = constness {\n+                if let hir::Constness::Const = constness {\n                     p!(write(\"const \"));\n                 }\n                 p!(print(data))"}, {"sha": "59dd41e9d56c911db38e293fc8606129823fafdb", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -7,6 +7,7 @@ use crate::mir::ProjectionKind;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::{self, InferConst, Lift, Ty, TyCtxt};\n+use rustc_hir as hir;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::CRATE_DEF_INDEX;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -15,7 +16,6 @@ use smallvec::SmallVec;\n use std::fmt;\n use std::rc::Rc;\n use std::sync::Arc;\n-use syntax::ast;\n \n impl fmt::Debug for ty::GenericParamDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n@@ -236,7 +236,7 @@ impl fmt::Debug for ty::Predicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             ty::Predicate::Trait(ref a, constness) => {\n-                if let ast::Constness::Const = constness {\n+                if let hir::Constness::Const = constness {\n                     write!(f, \"const \")?;\n                 }\n                 a.fmt(f)"}, {"sha": "b51d47655831215fd27413a044e8d317389036e3", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -106,7 +106,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ref body,\n                 fn_decl_span,\n             ) => {\n-                if let IsAsync::Async { closure_id, .. } = asyncness {\n+                if let Async::Yes { closure_id, .. } = asyncness {\n                     self.lower_expr_async_closure(\n                         capture_clause,\n                         closure_id,"}, {"sha": "73a25620b5a041c49eac54ec425296336fe3c16f", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 35, "deletions": 22, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -67,10 +67,12 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n             self.lctx.with_parent_item_lifetime_defs(hir_id, |this| {\n                 let this = &mut ItemLowerer { lctx: this };\n                 if let ItemKind::Impl { constness, ref of_trait, .. } = item.kind {\n-                    if constness == Constness::Const {\n+                    if let Const::Yes(span) = constness {\n                         this.lctx\n                             .diagnostic()\n-                            .span_err(item.span, \"const trait impls are not yet implemented\");\n+                            .struct_span_err(item.span, \"const trait impls are not yet implemented\")\n+                            .span_label(span, \"const because of this\")\n+                            .emit();\n                     }\n \n                     this.with_trait_impl_ref(of_trait, |this| visit::walk_item(this, item));\n@@ -297,7 +299,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     // `impl Future<Output = T>` here because lower_body\n                     // only cares about the input argument patterns in the function\n                     // declaration (decl), not the return types.\n-                    let asyncness = header.asyncness.node;\n+                    let asyncness = header.asyncness;\n                     let body_id =\n                         this.lower_maybe_async_body(span, &decl, asyncness, body.as_deref());\n \n@@ -413,10 +415,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     });\n \n                 hir::ItemKind::Impl {\n-                    unsafety,\n+                    unsafety: self.lower_unsafety(unsafety),\n                     polarity,\n                     defaultness: self.lower_defaultness(defaultness, true /* [1] */),\n-                    constness,\n+                    constness: self.lower_constness(constness),\n                     generics,\n                     of_trait: trait_ref,\n                     self_ty: lowered_ty,\n@@ -430,7 +432,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     .alloc_from_iter(items.iter().map(|item| self.lower_trait_item_ref(item)));\n                 hir::ItemKind::Trait(\n                     is_auto,\n-                    unsafety,\n+                    self.lower_unsafety(unsafety),\n                     self.lower_generics(generics, ImplTraitContext::disallowed()),\n                     bounds,\n                     items,\n@@ -834,19 +836,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n             AssocItemKind::Fn(ref sig, ref body) => {\n                 self.current_item = Some(i.span);\n-                let body_id = self.lower_maybe_async_body(\n-                    i.span,\n-                    &sig.decl,\n-                    sig.header.asyncness.node,\n-                    body.as_deref(),\n-                );\n+                let asyncness = sig.header.asyncness;\n+                let body_id =\n+                    self.lower_maybe_async_body(i.span, &sig.decl, asyncness, body.as_deref());\n                 let impl_trait_return_allow = !self.is_in_trait_impl;\n                 let (generics, sig) = self.lower_method_sig(\n                     &i.generics,\n                     sig,\n                     impl_item_def_id,\n                     impl_trait_return_allow,\n-                    sig.header.asyncness.node.opt_return_id(),\n+                    asyncness.opt_return_id(),\n                 );\n \n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n@@ -1031,12 +1030,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         &mut self,\n         span: Span,\n         decl: &FnDecl,\n-        asyncness: IsAsync,\n+        asyncness: Async,\n         body: Option<&Block>,\n     ) -> hir::BodyId {\n         let closure_id = match asyncness {\n-            IsAsync::Async { closure_id, .. } => closure_id,\n-            IsAsync::NotAsync => return self.lower_fn_body_block(span, decl, body),\n+            Async::Yes { closure_id, .. } => closure_id,\n+            Async::No => return self.lower_fn_body_block(span, decl, body),\n         };\n \n         self.lower_body(|this| {\n@@ -1245,9 +1244,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_fn_header(&mut self, h: FnHeader) -> hir::FnHeader {\n         hir::FnHeader {\n-            unsafety: h.unsafety,\n-            asyncness: self.lower_asyncness(h.asyncness.node),\n-            constness: h.constness.node,\n+            unsafety: self.lower_unsafety(h.unsafety),\n+            asyncness: self.lower_asyncness(h.asyncness),\n+            constness: self.lower_constness(h.constness),\n             abi: self.lower_extern(h.ext),\n         }\n     }\n@@ -1274,10 +1273,24 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             .emit();\n     }\n \n-    fn lower_asyncness(&mut self, a: IsAsync) -> hir::IsAsync {\n+    fn lower_asyncness(&mut self, a: Async) -> hir::IsAsync {\n         match a {\n-            IsAsync::Async { .. } => hir::IsAsync::Async,\n-            IsAsync::NotAsync => hir::IsAsync::NotAsync,\n+            Async::Yes { .. } => hir::IsAsync::Async,\n+            Async::No => hir::IsAsync::NotAsync,\n+        }\n+    }\n+\n+    fn lower_constness(&mut self, c: Const) -> hir::Constness {\n+        match c {\n+            Const::Yes(_) => hir::Constness::Const,\n+            Const::No => hir::Constness::NotConst,\n+        }\n+    }\n+\n+    pub(super) fn lower_unsafety(&mut self, u: Unsafe) -> hir::Unsafety {\n+        match u {\n+            Unsafe::Yes(_) => hir::Unsafety::Unsafe,\n+            Unsafe::No => hir::Unsafety::Normal,\n         }\n     }\n "}, {"sha": "618b1e7964b95da158b0b751e34c0d0718c61403", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1196,7 +1196,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             &NodeMap::default(),\n                             ImplTraitContext::disallowed(),\n                         ),\n-                        unsafety: f.unsafety,\n+                        unsafety: this.lower_unsafety(f.unsafety),\n                         abi: this.lower_extern(f.ext),\n                         decl: this.lower_fn_decl(&f.decl, None, false, None),\n                         param_names: this.lower_fn_params_to_names(&f.decl),"}, {"sha": "2f0495b8b5a48ec71e10259dc54f5271b9fadc54", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 45, "deletions": 22, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -13,7 +13,6 @@ use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY;\n use rustc_session::lint::LintBuffer;\n use rustc_session::Session;\n-use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use std::mem;\n@@ -222,27 +221,30 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_trait_fn_not_async(&self, span: Span, asyncness: IsAsync) {\n-        if asyncness.is_async() {\n-            struct_span_err!(self.session, span, E0706, \"trait fns cannot be declared `async`\")\n-                .note(\"`async` trait functions are not currently supported\")\n-                .note(\n-                    \"consider using the `async-trait` crate: \\\n-                       https://crates.io/crates/async-trait\",\n-                )\n-                .emit();\n+    fn check_trait_fn_not_async(&self, fn_span: Span, asyncness: Async) {\n+        if let Async::Yes { span, .. } = asyncness {\n+            struct_span_err!(\n+                self.session,\n+                fn_span,\n+                E0706,\n+                \"functions in traits cannot be declared `async`\"\n+            )\n+            .span_label(span, \"`async` because of this\")\n+            .note(\"`async` trait functions are not currently supported\")\n+            .note(\"consider using the `async-trait` crate: https://crates.io/crates/async-trait\")\n+            .emit();\n         }\n     }\n \n-    fn check_trait_fn_not_const(&self, constness: Spanned<Constness>) {\n-        if constness.node == Constness::Const {\n+    fn check_trait_fn_not_const(&self, constness: Const) {\n+        if let Const::Yes(span) = constness {\n             struct_span_err!(\n                 self.session,\n-                constness.span,\n+                span,\n                 E0379,\n-                \"trait fns cannot be declared const\"\n+                \"functions in traits cannot be declared const\"\n             )\n-            .span_label(constness.span, \"trait fns cannot be const\")\n+            .span_label(span, \"functions in traits cannot be const\")\n             .emit();\n         }\n     }\n@@ -487,7 +489,7 @@ impl<'a> AstValidator<'a> {\n             (Some(FnCtxt::Foreign), _) => return,\n             (Some(FnCtxt::Free), Some(header)) => match header.ext {\n                 Extern::Explicit(StrLit { symbol_unescaped: sym::C, .. }) | Extern::Implicit\n-                    if header.unsafety == Unsafety::Unsafe =>\n+                    if matches!(header.unsafety, Unsafe::Yes(_)) =>\n                 {\n                     return;\n                 }\n@@ -514,12 +516,16 @@ impl<'a> AstValidator<'a> {\n     /// FIXME(const_generics): Is this really true / necessary? Discuss with @varkor.\n     /// At any rate, the restriction feels too syntactic. Consider moving it to e.g. typeck.\n     fn check_const_fn_const_generic(&self, span: Span, sig: &FnSig, generics: &Generics) {\n-        if sig.header.constness.node == Constness::Const {\n+        if let Const::Yes(const_span) = sig.header.constness {\n             // Look for const generics and error if we find any.\n             for param in &generics.params {\n                 if let GenericParamKind::Const { .. } = param.kind {\n                     self.err_handler()\n-                        .struct_span_err(span, \"const parameters are not permitted in `const fn`\")\n+                        .struct_span_err(\n+                            span,\n+                            \"const parameters are not permitted in const functions\",\n+                        )\n+                        .span_label(const_span, \"`const` because of this\")\n                         .emit();\n                 }\n             }\n@@ -754,13 +760,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                             .help(\"use `auto trait Trait {}` instead\")\n                             .emit();\n                     }\n-                    if unsafety == Unsafety::Unsafe && polarity == ImplPolarity::Negative {\n+                    if let (Unsafe::Yes(span), ImplPolarity::Negative) = (unsafety, polarity) {\n                         struct_span_err!(\n                             this.session,\n                             item.span,\n                             E0198,\n                             \"negative impls cannot be unsafe\"\n                         )\n+                        .span_label(span, \"unsafe because of this\")\n                         .emit();\n                     }\n \n@@ -782,13 +789,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     &item.vis,\n                     Some(\"place qualifiers on individual impl items instead\"),\n                 );\n-                if unsafety == Unsafety::Unsafe {\n+                if let Unsafe::Yes(span) = unsafety {\n                     struct_span_err!(\n                         self.session,\n                         item.span,\n                         E0197,\n                         \"inherent impls cannot be unsafe\"\n                     )\n+                    .span_label(span, \"unsafe because of this\")\n                     .emit();\n                 }\n                 if polarity == ImplPolarity::Negative {\n@@ -800,9 +808,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .note(\"only trait implementations may be annotated with default\")\n                         .emit();\n                 }\n-                if constness == Constness::Const {\n+                if let Const::Yes(span) = constness {\n                     self.err_handler()\n                         .struct_span_err(item.span, \"inherent impls cannot be `const`\")\n+                        .span_label(span, \"`const` because of this\")\n                         .note(\"only trait implementations may be annotated with `const`\")\n                         .emit();\n                 }\n@@ -1091,6 +1100,20 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         self.check_c_varadic_type(fk);\n \n+        // Functions cannot both be `const async`\n+        if let Some(FnHeader {\n+            constness: Const::Yes(cspan),\n+            asyncness: Async::Yes { span: aspan, .. },\n+            ..\n+        }) = fk.header()\n+        {\n+            self.err_handler()\n+                .struct_span_err(span, \"functions cannot be both `const` and `async`\")\n+                .span_label(*cspan, \"`const` because of this\")\n+                .span_label(*aspan, \"`async` because of this\")\n+                .emit();\n+        }\n+\n         // Functions without bodies cannot have patterns.\n         if let FnKind::Fn(ctxt, _, sig, _, None) = fk {\n             Self::check_decl_no_pat(&sig.decl, |span, mut_ident| {\n@@ -1146,7 +1169,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             self.invalid_visibility(&item.vis, None);\n             if let AssocItemKind::Fn(sig, _) = &item.kind {\n                 self.check_trait_fn_not_const(sig.header.constness);\n-                self.check_trait_fn_not_async(item.span, sig.header.asyncness.node);\n+                self.check_trait_fn_not_async(item.span, sig.header.asyncness);\n             }\n         }\n "}, {"sha": "0b21de4d78b41a513258f823baae67efbf956990", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -496,6 +496,17 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         if let Some(header) = fn_kind.header() {\n             // Stability of const fn methods are covered in `visit_assoc_item` below.\n             self.check_extern(header.ext);\n+\n+            if let (ast::Const::Yes(_), ast::Extern::Implicit)\n+            | (ast::Const::Yes(_), ast::Extern::Explicit(_)) = (header.constness, header.ext)\n+            {\n+                gate_feature_post!(\n+                    &self,\n+                    const_extern_fn,\n+                    span,\n+                    \"`const extern fn` definitions are unstable\"\n+                );\n+            }\n         }\n \n         if fn_kind.ctxt() != Some(FnCtxt::Foreign) && fn_kind.decl().c_variadic() {\n@@ -538,8 +549,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n         match i.kind {\n             ast::AssocItemKind::Fn(ref sig, _) => {\n-                let constness = sig.header.constness.node;\n-                if let (ast::Constness::Const, AssocCtxt::Trait) = (constness, ctxt) {\n+                if let (ast::Const::Yes(_), AssocCtxt::Trait) = (sig.header.constness, ctxt) {\n                     gate_feature_post!(&self, const_fn, i.span, \"const fn is unstable\");\n                 }\n             }\n@@ -596,7 +606,6 @@ pub fn check_crate(\n     gate_all!(async_closure, \"async closures are unstable\");\n     gate_all!(generators, \"yield syntax is experimental\");\n     gate_all!(or_patterns, \"or-patterns syntax is experimental\");\n-    gate_all!(const_extern_fn, \"`const extern fn` definitions are unstable\");\n     gate_all!(raw_ref_op, \"raw address of syntax is experimental\");\n     gate_all!(const_trait_bound_opt_out, \"`?const` on trait bounds is experimental\");\n     gate_all!(const_trait_impl, \"const trait impls are experimental\");"}, {"sha": "b1fa818d0a8cf01c5e4045f0e5119a55ad7567d0", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -2449,7 +2449,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    crate fn print_asyncness(&mut self, asyncness: ast::IsAsync) {\n+    crate fn print_asyncness(&mut self, asyncness: ast::Async) {\n         if asyncness.is_async() {\n             self.word_nbsp(\"async\");\n         }\n@@ -2686,7 +2686,7 @@ impl<'a> State<'a> {\n     crate fn print_ty_fn(\n         &mut self,\n         ext: ast::Extern,\n-        unsafety: ast::Unsafety,\n+        unsafety: ast::Unsafe,\n         decl: &ast::FnDecl,\n         name: Option<ast::Ident>,\n         generic_params: &[ast::GenericParam],\n@@ -2733,12 +2733,8 @@ impl<'a> State<'a> {\n     crate fn print_fn_header_info(&mut self, header: ast::FnHeader, vis: &ast::Visibility) {\n         self.s.word(visibility_qualified(vis, \"\"));\n \n-        match header.constness.node {\n-            ast::Constness::NotConst => {}\n-            ast::Constness::Const => self.word_nbsp(\"const\"),\n-        }\n-\n-        self.print_asyncness(header.asyncness.node);\n+        self.print_constness(header.constness);\n+        self.print_asyncness(header.asyncness);\n         self.print_unsafety(header.unsafety);\n \n         match header.ext {\n@@ -2756,17 +2752,17 @@ impl<'a> State<'a> {\n         self.s.word(\"fn\")\n     }\n \n-    crate fn print_unsafety(&mut self, s: ast::Unsafety) {\n+    crate fn print_unsafety(&mut self, s: ast::Unsafe) {\n         match s {\n-            ast::Unsafety::Normal => {}\n-            ast::Unsafety::Unsafe => self.word_nbsp(\"unsafe\"),\n+            ast::Unsafe::No => {}\n+            ast::Unsafe::Yes(_) => self.word_nbsp(\"unsafe\"),\n         }\n     }\n \n-    crate fn print_constness(&mut self, s: ast::Constness) {\n+    crate fn print_constness(&mut self, s: ast::Const) {\n         match s {\n-            ast::Constness::Const => self.word_nbsp(\"const\"),\n-            ast::Constness::NotConst => {}\n+            ast::Const::No => {}\n+            ast::Const::Yes(_) => self.word_nbsp(\"const\"),\n         }\n     }\n "}, {"sha": "5cf233e222e7c0d7360437af671fa27ffabf00b6", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -700,7 +700,7 @@ impl<'a> TraitDef<'a> {\n         let mut a = vec![attr, unused_qual];\n         a.extend(self.attributes.iter().cloned());\n \n-        let unsafety = if self.is_unsafe { ast::Unsafety::Unsafe } else { ast::Unsafety::Normal };\n+        let unsafety = if self.is_unsafe { ast::Unsafe::Yes(self.span) } else { ast::Unsafe::No };\n \n         cx.item(\n             self.span,\n@@ -710,7 +710,7 @@ impl<'a> TraitDef<'a> {\n                 unsafety,\n                 polarity: ast::ImplPolarity::Positive,\n                 defaultness: ast::Defaultness::Final,\n-                constness: ast::Constness::NotConst,\n+                constness: ast::Const::No,\n                 generics: trait_generics,\n                 of_trait: opt_trait_ref,\n                 self_ty: self_type,\n@@ -960,7 +960,7 @@ impl<'a> MethodDef<'a> {\n         let fn_decl = cx.fn_decl(args, ast::FunctionRetTy::Ty(ret_type));\n         let body_block = cx.block_expr(body);\n \n-        let unsafety = if self.is_unsafe { ast::Unsafety::Unsafe } else { ast::Unsafety::Normal };\n+        let unsafety = if self.is_unsafe { ast::Unsafe::Yes(trait_.span) } else { ast::Unsafe::No };\n \n         let trait_lo_sp = trait_.span.shrink_to_lo();\n "}, {"sha": "63cd03527e15cb1569fe668bea45247cc17297ca", "filename": "src/librustc_builtin_macros/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -157,10 +157,10 @@ fn inject_impl_of_structural_trait(\n         ast::Ident::invalid(),\n         attrs,\n         ItemKind::Impl {\n-            unsafety: ast::Unsafety::Normal,\n+            unsafety: ast::Unsafe::No,\n             polarity: ast::ImplPolarity::Positive,\n             defaultness: ast::Defaultness::Final,\n-            constness: ast::Constness::NotConst,\n+            constness: ast::Const::No,\n             generics,\n             of_trait: Some(trait_ref),\n             self_ty: self_type,"}, {"sha": "52f033e8b1404f31b58d8bdae32d0a4462eb4384", "filename": "src/librustc_builtin_macros/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -4,7 +4,7 @@ use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use syntax::ast::{self, Attribute, Expr, FnHeader, FnSig, Generics, Ident, Param};\n-use syntax::ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafety};\n+use syntax::ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafe};\n use syntax::expand::allocator::{AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS};\n use syntax::ptr::P;\n \n@@ -64,7 +64,7 @@ impl AllocFnFactory<'_, '_> {\n         let result = self.call_allocator(method.name, args);\n         let (output_ty, output_expr) = self.ret_ty(&method.output, result);\n         let decl = self.cx.fn_decl(abi_args, ast::FunctionRetTy::Ty(output_ty));\n-        let header = FnHeader { unsafety: Unsafety::Unsafe, ..FnHeader::default() };\n+        let header = FnHeader { unsafety: Unsafe::Yes(self.span), ..FnHeader::default() };\n         let sig = FnSig { decl, header };\n         let kind = ItemKind::Fn(sig, Generics::default(), Some(self.cx.block_expr(output_expr)));\n         let item = self.cx.item("}, {"sha": "02a0bc00c1169b2c88b1b941bb8979f01debbb08", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -375,12 +375,16 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n     let has_should_panic_attr = attr::contains_name(&i.attrs, sym::should_panic);\n     let ref sd = cx.parse_sess.span_diagnostic;\n     if let ast::ItemKind::Fn(ref sig, ref generics, _) = i.kind {\n-        if sig.header.unsafety == ast::Unsafety::Unsafe {\n-            sd.span_err(i.span, \"unsafe functions cannot be used for tests\");\n+        if let ast::Unsafe::Yes(span) = sig.header.unsafety {\n+            sd.struct_span_err(i.span, \"unsafe functions cannot be used for tests\")\n+                .span_label(span, \"`unsafe` because of this\")\n+                .emit();\n             return false;\n         }\n-        if sig.header.asyncness.node.is_async() {\n-            sd.span_err(i.span, \"async functions cannot be used for tests\");\n+        if let ast::Async::Yes { span, .. } = sig.header.asyncness {\n+            sd.struct_span_err(i.span, \"async functions cannot be used for tests\")\n+                .span_label(span, \"`async` because of this\")\n+                .emit();\n             return false;\n         }\n "}, {"sha": "af22e46eb6afa58f61af92606fa4a007b7d49e43", "filename": "src/librustc_expand/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbuild.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -507,7 +507,7 @@ impl<'a> ExtCtxt<'a> {\n             span,\n             ast::ExprKind::Closure(\n                 ast::CaptureBy::Ref,\n-                ast::IsAsync::NotAsync,\n+                ast::Async::No,\n                 ast::Movability::Movable,\n                 fn_decl,\n                 body,\n@@ -530,7 +530,7 @@ impl<'a> ExtCtxt<'a> {\n             span,\n             ast::ExprKind::Closure(\n                 ast::CaptureBy::Ref,\n-                ast::IsAsync::NotAsync,\n+                ast::Async::No,\n                 ast::Movability::Movable,\n                 fn_decl,\n                 body,"}, {"sha": "c2ddaf7df316aef34459c8d12dbcf6e7b5b31649", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -19,7 +19,7 @@ use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, AsmDialect, CrateSugar, Ident, Name, NodeId};\n use syntax::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n pub use syntax::ast::{BorrowKind, ImplPolarity, IsAuto};\n-pub use syntax::ast::{CaptureBy, Constness, Movability, Mutability, Unsafety};\n+pub use syntax::ast::{CaptureBy, Movability, Mutability};\n use syntax::node_id::NodeMap;\n use syntax::tokenstream::TokenStream;\n use syntax::util::parser::ExprPrecedence;\n@@ -2109,18 +2109,8 @@ impl ImplicitSelfKind {\n     }\n }\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    HashStable_Generic,\n-    Ord,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Debug\n-)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum IsAsync {\n     Async,\n     NotAsync,\n@@ -2389,6 +2379,38 @@ pub struct Item<'hir> {\n     pub span: Span,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+#[derive(RustcEncodable, RustcDecodable, HashStable_Generic)]\n+pub enum Unsafety {\n+    Unsafe,\n+    Normal,\n+}\n+\n+impl Unsafety {\n+    pub fn prefix_str(&self) -> &'static str {\n+        match self {\n+            Self::Unsafe => \"unsafe \",\n+            Self::Normal => \"\",\n+        }\n+    }\n+}\n+\n+impl fmt::Display for Unsafety {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.write_str(match *self {\n+            Self::Unsafe => \"unsafe\",\n+            Self::Normal => \"normal\",\n+        })\n+    }\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+#[derive(RustcEncodable, RustcDecodable, HashStable_Generic)]\n+pub enum Constness {\n+    Const,\n+    NotConst,\n+}\n+\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct FnHeader {\n     pub unsafety: Unsafety,"}, {"sha": "e49f99fb717a3b16bd2be751c99f4062a828a0fd", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -648,7 +648,7 @@ impl<'a> State<'a> {\n                     self.s.space();\n                 }\n \n-                if constness == ast::Constness::Const {\n+                if constness == hir::Constness::Const {\n                     self.word_nbsp(\"const\");\n                 }\n "}, {"sha": "659323d1c2555d006e69d3e0ef3c566f29f462e2", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -668,7 +668,7 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n     }\n \n     fn is_sig_const(sig: &ast::FnSig) -> bool {\n-        sig.header.constness.node == ast::Constness::Const\n+        matches!(sig.header.constness, ast::Const::Yes(_))\n             || ReplaceBodyWithLoop::should_ignore_fn(&sig.decl.output)\n     }\n }"}, {"sha": "93fca43d67c1fb4fcd7171c1c0a5e2986046af16", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -258,13 +258,13 @@ impl EarlyLintPass for UnsafeCode {\n \n     fn check_item(&mut self, cx: &EarlyContext<'_>, it: &ast::Item) {\n         match it.kind {\n-            ast::ItemKind::Trait(_, ast::Unsafety::Unsafe, ..) => {\n+            ast::ItemKind::Trait(_, ast::Unsafe::Yes(_), ..) => {\n                 self.report_unsafe(cx, it.span, |lint| {\n                     lint.build(\"declaration of an `unsafe` trait\").emit()\n                 })\n             }\n \n-            ast::ItemKind::Impl { unsafety: ast::Unsafety::Unsafe, .. } => {\n+            ast::ItemKind::Impl { unsafety: ast::Unsafe::Yes(_), .. } => {\n                 self.report_unsafe(cx, it.span, |lint| {\n                     lint.build(\"implementation of an `unsafe` trait\").emit()\n                 })\n@@ -278,7 +278,7 @@ impl EarlyLintPass for UnsafeCode {\n         if let FnKind::Fn(\n             ctxt,\n             _,\n-            ast::FnSig { header: ast::FnHeader { unsafety: ast::Unsafety::Unsafe, .. }, .. },\n+            ast::FnSig { header: ast::FnHeader { unsafety: ast::Unsafe::Yes(_), .. }, .. },\n             _,\n             body,\n         ) = fk"}, {"sha": "4cbe41455894b531c6fefbe1e1cd19c8108fac9f", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -32,7 +32,6 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::{Span, DUMMY_SP};\n-use syntax::ast;\n \n use crate::dataflow::generic::ResultsCursor;\n use crate::dataflow::move_paths::MoveData;\n@@ -1938,7 +1937,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                                 tcx.mk_substs_trait(ty, &[]),\n                                             ),\n                                         }),\n-                                        ast::Constness::NotConst,\n+                                        hir::Constness::NotConst,\n                                     ),\n                                 ),\n                                 &traits::SelectionError::Unimplemented,\n@@ -2579,7 +2578,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         self.prove_predicates(\n             Some(ty::Predicate::Trait(\n                 trait_ref.to_poly_trait_ref().to_poly_trait_predicate(),\n-                ast::Constness::NotConst,\n+                hir::Constness::NotConst,\n             )),\n             locations,\n             category,"}, {"sha": "b12f4ce32698fb2c64114f5ac11ff02104f811fa", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -6,7 +6,6 @@ use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use std::borrow::Cow;\n-use syntax::ast;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n \n@@ -35,7 +34,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n                     match pred.skip_binder().self_ty().kind {\n                         ty::Param(ref p) => {\n                             // Allow `T: ?const Trait`\n-                            if *constness == ast::Constness::NotConst\n+                            if *constness == hir::Constness::NotConst\n                                 && feature_allowed(tcx, def_id, sym::const_trait_bound_opt_out)\n                             {\n                                 continue;"}, {"sha": "5a4225ece65aac3071a2df822942cef24d0c5743", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -13,7 +13,7 @@ use syntax::ast::{self, AttrStyle, AttrVec, CaptureBy, Field, Ident, Lit, DUMMY_\n use syntax::ast::{\n     AnonConst, BinOp, BinOpKind, FnDecl, FunctionRetTy, Mac, Param, Ty, TyKind, UnOp,\n };\n-use syntax::ast::{Arm, BlockCheckMode, Expr, ExprKind, IsAsync, Label, Movability, RangeLimits};\n+use syntax::ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n use syntax::ptr::P;\n use syntax::token::{self, Token, TokenKind};\n use syntax::util::classify;\n@@ -1348,7 +1348,7 @@ impl<'a> Parser<'a> {\n             if self.eat_keyword(kw::Static) { Movability::Static } else { Movability::Movable };\n \n         let asyncness =\n-            if self.token.span.rust_2018() { self.parse_asyncness() } else { IsAsync::NotAsync };\n+            if self.token.span.rust_2018() { self.parse_asyncness() } else { Async::No };\n         if asyncness.is_async() {\n             // Feature-gate `async ||` closures.\n             self.sess.gated_spans.gate(sym::async_closure, self.prev_span);"}, {"sha": "ccd55c5c08a70d82a83a084c16cd280c285d52cb", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 128, "deletions": 237, "changes": 365, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -6,13 +6,13 @@ use crate::maybe_whole;\n \n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, PResult, StashKey};\n-use rustc_span::source_map::{self, respan, Span};\n+use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::BytePos;\n use syntax::ast::{self, AttrKind, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n use syntax::ast::{AssocItem, AssocItemKind, Item, ItemKind, UseTree, UseTreeKind};\n+use syntax::ast::{Async, Const, Defaultness, IsAuto, PathSegment, StrLit, Unsafe};\n use syntax::ast::{BindingMode, Block, FnDecl, FnSig, Mac, MacArgs, MacDelimiter, Param, SelfKind};\n-use syntax::ast::{Constness, Defaultness, Extern, IsAsync, IsAuto, PathSegment, StrLit, Unsafety};\n use syntax::ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n use syntax::ast::{FnHeader, ForeignItem, ForeignItemKind, Mutability, Visibility, VisibilityKind};\n use syntax::ptr::P;\n@@ -96,59 +96,32 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n \n+        if self.check_fn_front_matter() {\n+            // FUNCTION ITEM\n+            let (ident, sig, generics, body) = self.parse_fn(&mut false, &mut attrs, |_| true)?;\n+            let kind = ItemKind::Fn(sig, generics, body);\n+            return self.mk_item_with_info(attrs, lo, vis, (ident, kind, None));\n+        }\n+\n         if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n+                // EXTERN CRATE\n                 return Ok(Some(self.parse_item_extern_crate(lo, vis, attrs)?));\n             }\n-\n+            // EXTERN BLOCK\n             let abi = self.parse_abi();\n-\n-            if self.eat_keyword(kw::Fn) {\n-                // EXTERN FUNCTION ITEM\n-                let fn_span = self.prev_span;\n-                let header = FnHeader {\n-                    unsafety: Unsafety::Normal,\n-                    asyncness: respan(fn_span, IsAsync::NotAsync),\n-                    constness: respan(fn_span, Constness::NotConst),\n-                    ext: Extern::from_abi(abi),\n-                };\n-                return self.parse_item_fn(lo, vis, attrs, header);\n-            } else if self.check(&token::OpenDelim(token::Brace)) {\n-                return Ok(Some(self.parse_item_foreign_mod(lo, abi, vis, attrs)?));\n-            }\n-\n-            self.unexpected()?;\n+            return Ok(Some(self.parse_item_foreign_mod(lo, abi, vis, attrs)?));\n         }\n \n         if self.is_static_global() {\n-            self.bump();\n             // STATIC ITEM\n+            self.bump();\n             let m = self.parse_mutability();\n             let info = self.parse_item_const(Some(m))?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n-        if self.eat_keyword(kw::Const) {\n-            let const_span = self.prev_span;\n-            if [kw::Fn, kw::Unsafe, kw::Extern].iter().any(|k| self.check_keyword(*k)) {\n-                // CONST FUNCTION ITEM\n-                let unsafety = self.parse_unsafety();\n-\n-                if self.check_keyword(kw::Extern) {\n-                    self.sess.gated_spans.gate(sym::const_extern_fn, lo.to(self.token.span));\n-                }\n-                let ext = self.parse_extern()?;\n-                self.expect_keyword(kw::Fn)?;\n-\n-                let header = FnHeader {\n-                    unsafety,\n-                    asyncness: respan(const_span, IsAsync::NotAsync),\n-                    constness: respan(const_span, Constness::Const),\n-                    ext,\n-                };\n-                return self.parse_item_fn(lo, vis, attrs, header);\n-            }\n-\n+        if let Const::Yes(const_span) = self.parse_constness() {\n             // CONST ITEM\n             if self.eat_keyword(kw::Mut) {\n                 let prev_span = self.prev_span;\n@@ -167,37 +140,10 @@ impl<'a> Parser<'a> {\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n-        // Parses `async unsafe? fn`.\n-        if self.check_keyword(kw::Async) {\n-            let async_span = self.token.span;\n-            if self.is_keyword_ahead(1, &[kw::Fn]) || self.is_keyword_ahead(2, &[kw::Fn]) {\n-                // ASYNC FUNCTION ITEM\n-                self.bump(); // `async`\n-                let unsafety = self.parse_unsafety(); // `unsafe`?\n-                self.expect_keyword(kw::Fn)?; // `fn`\n-                let fn_span = self.prev_span;\n-                let asyncness = respan(\n-                    async_span,\n-                    IsAsync::Async {\n-                        closure_id: DUMMY_NODE_ID,\n-                        return_impl_trait_id: DUMMY_NODE_ID,\n-                    },\n-                );\n-                self.ban_async_in_2015(async_span);\n-                let header = FnHeader {\n-                    unsafety,\n-                    asyncness,\n-                    constness: respan(fn_span, Constness::NotConst),\n-                    ext: Extern::None,\n-                };\n-                return self.parse_item_fn(lo, vis, attrs, header);\n-            }\n-        }\n-\n         if self.check_keyword(kw::Unsafe) && self.is_keyword_ahead(1, &[kw::Trait, kw::Auto]) {\n             // UNSAFE TRAIT ITEM\n-            self.bump(); // `unsafe`\n-            let info = self.parse_item_trait(lo, Unsafety::Unsafe)?;\n+            let unsafety = self.parse_unsafety();\n+            let info = self.parse_item_trait(lo, unsafety)?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n@@ -213,38 +159,6 @@ impl<'a> Parser<'a> {\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n-        if self.check_keyword(kw::Fn) {\n-            // FUNCTION ITEM\n-            self.bump();\n-            let fn_span = self.prev_span;\n-            let header = FnHeader {\n-                unsafety: Unsafety::Normal,\n-                asyncness: respan(fn_span, IsAsync::NotAsync),\n-                constness: respan(fn_span, Constness::NotConst),\n-                ext: Extern::None,\n-            };\n-            return self.parse_item_fn(lo, vis, attrs, header);\n-        }\n-\n-        if self.check_keyword(kw::Unsafe)\n-            && self.look_ahead(1, |t| *t != token::OpenDelim(token::Brace))\n-        {\n-            // UNSAFE FUNCTION ITEM\n-            self.bump(); // `unsafe`\n-            // `{` is also expected after `unsafe`; in case of error, include it in the diagnostic.\n-            self.check(&token::OpenDelim(token::Brace));\n-            let ext = self.parse_extern()?;\n-            self.expect_keyword(kw::Fn)?;\n-            let fn_span = self.prev_span;\n-            let header = FnHeader {\n-                unsafety: Unsafety::Unsafe,\n-                asyncness: respan(fn_span, IsAsync::NotAsync),\n-                constness: respan(fn_span, Constness::NotConst),\n-                ext,\n-            };\n-            return self.parse_item_fn(lo, vis, attrs, header);\n-        }\n-\n         if self.eat_keyword(kw::Mod) {\n             // MODULE ITEM\n             let info = self.parse_item_mod(&attrs[..])?;\n@@ -268,7 +182,7 @@ impl<'a> Parser<'a> {\n             || (self.check_keyword(kw::Auto) && self.is_keyword_ahead(1, &[kw::Trait]))\n         {\n             // TRAIT ITEM\n-            let info = self.parse_item_trait(lo, Unsafety::Normal)?;\n+            let info = self.parse_item_trait(lo, Unsafe::No)?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n@@ -547,7 +461,7 @@ impl<'a> Parser<'a> {\n     ///   `impl` GENERICS `const`? `!`? TYPE (`where` PREDICATES)? `{` BODY `}`\n     fn parse_item_impl(\n         &mut self,\n-        unsafety: Unsafety,\n+        unsafety: Unsafe,\n         defaultness: Defaultness,\n     ) -> PResult<'a, ItemInfo> {\n         // First, parse generic parameters if necessary.\n@@ -561,13 +475,10 @@ impl<'a> Parser<'a> {\n             generics\n         };\n \n-        let constness = if self.eat_keyword(kw::Const) {\n-            let span = self.prev_span;\n+        let constness = self.parse_constness();\n+        if let Const::Yes(span) = constness {\n             self.sess.gated_spans.gate(sym::const_trait_impl, span);\n-            Constness::Const\n-        } else {\n-            Constness::NotConst\n-        };\n+        }\n \n         // Disambiguate `impl !Trait for Type { ... }` and `impl ! { ... }` for the never type.\n         let polarity = if self.check(&token::Not) && self.look_ahead(1, |t| t.can_begin_type()) {\n@@ -707,7 +618,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses `auto? trait Foo { ... }` or `trait Foo = Bar;`.\n-    fn parse_item_trait(&mut self, lo: Span, unsafety: Unsafety) -> PResult<'a, ItemInfo> {\n+    fn parse_item_trait(&mut self, lo: Span, unsafety: Unsafe) -> PResult<'a, ItemInfo> {\n         // Parse optional `auto` prefix.\n         let is_auto = if self.eat_keyword(kw::Auto) { IsAuto::Yes } else { IsAuto::No };\n \n@@ -738,7 +649,7 @@ impl<'a> Parser<'a> {\n                 let msg = \"trait aliases cannot be `auto`\";\n                 self.struct_span_err(whole_span, msg).span_label(whole_span, msg).emit();\n             }\n-            if unsafety != Unsafety::Normal {\n+            if let Unsafe::Yes(_) = unsafety {\n                 let msg = \"trait aliases cannot be `unsafe`\";\n                 self.struct_span_err(whole_span, msg).span_label(whole_span, msg).emit();\n             }\n@@ -803,12 +714,12 @@ impl<'a> Parser<'a> {\n     fn parse_assoc_item(\n         &mut self,\n         at_end: &mut bool,\n-        is_name_required: fn(&token::Token) -> bool,\n+        req_name: fn(&token::Token) -> bool,\n     ) -> PResult<'a, P<AssocItem>> {\n         let attrs = self.parse_outer_attributes()?;\n         let mut unclosed_delims = vec![];\n         let (mut item, tokens) = self.collect_tokens(|this| {\n-            let item = this.parse_assoc_item_(at_end, attrs, is_name_required);\n+            let item = this.parse_assoc_item_(at_end, attrs, req_name);\n             unclosed_delims.append(&mut this.unclosed_delims);\n             item\n         })?;\n@@ -824,19 +735,20 @@ impl<'a> Parser<'a> {\n         &mut self,\n         at_end: &mut bool,\n         mut attrs: Vec<Attribute>,\n-        is_name_required: fn(&token::Token) -> bool,\n+        req_name: fn(&token::Token) -> bool,\n     ) -> PResult<'a, AssocItem> {\n         let lo = self.token.span;\n         let vis = self.parse_visibility(FollowedByType::No)?;\n         let defaultness = self.parse_defaultness();\n         let (name, kind, generics) = if self.eat_keyword(kw::Type) {\n             self.parse_assoc_ty()?\n-        } else if self.is_const_item() {\n-            self.parse_assoc_const()?\n+        } else if self.check_fn_front_matter() {\n+            let (ident, sig, generics, body) = self.parse_fn(at_end, &mut attrs, req_name)?;\n+            (ident, AssocItemKind::Fn(sig, body), generics)\n         } else if let Some(mac) = self.parse_assoc_macro_invoc(\"associated\", Some(&vis), at_end)? {\n             (Ident::invalid(), AssocItemKind::Macro(mac), Generics::default())\n         } else {\n-            self.parse_assoc_fn(at_end, &mut attrs, is_name_required)?\n+            self.parse_assoc_const()?\n         };\n \n         Ok(AssocItem {\n@@ -852,12 +764,6 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Returns `true` if we are looking at `const ID`\n-    /// (returns `false` for things like `const fn`, etc.).\n-    fn is_const_item(&self) -> bool {\n-        self.token.is_keyword(kw::Const) && !self.is_keyword_ahead(1, &[kw::Fn, kw::Unsafe])\n-    }\n-\n     /// This parses the grammar:\n     ///\n     ///     AssocConst = \"const\" Ident \":\" Ty \"=\" Expr \";\"\n@@ -1065,23 +971,33 @@ impl<'a> Parser<'a> {\n     pub fn parse_foreign_item(&mut self) -> PResult<'a, P<ForeignItem>> {\n         maybe_whole!(self, NtForeignItem, |ni| ni);\n \n-        let attrs = self.parse_outer_attributes()?;\n+        let mut attrs = self.parse_outer_attributes()?;\n         let lo = self.token.span;\n-        let visibility = self.parse_visibility(FollowedByType::No)?;\n+        let vis = self.parse_visibility(FollowedByType::No)?;\n \n-        // FOREIGN TYPE ITEM\n         if self.check_keyword(kw::Type) {\n-            return self.parse_item_foreign_type(visibility, lo, attrs);\n-        }\n-\n-        // FOREIGN STATIC ITEM\n-        if self.is_static_global() {\n+            // FOREIGN TYPE ITEM\n+            self.parse_item_foreign_type(vis, lo, attrs)\n+        } else if self.check_fn_front_matter() {\n+            // FOREIGN FUNCTION ITEM\n+            let (ident, sig, generics, body) = self.parse_fn(&mut false, &mut attrs, |_| true)?;\n+            let kind = ForeignItemKind::Fn(sig, generics, body);\n+            let span = lo.to(self.prev_span);\n+            Ok(P(ast::ForeignItem {\n+                ident,\n+                attrs,\n+                kind,\n+                id: DUMMY_NODE_ID,\n+                span,\n+                vis,\n+                tokens: None,\n+            }))\n+        } else if self.is_static_global() {\n+            // FOREIGN STATIC ITEM\n             self.bump(); // `static`\n-            return self.parse_item_foreign_static(visibility, lo, attrs);\n-        }\n-\n-        // Treat `const` as `static` for error recovery, but don't add it to expected tokens.\n-        if self.is_kw_followed_by_ident(kw::Const) {\n+            self.parse_item_foreign_static(vis, lo, attrs)\n+        } else if self.token.is_keyword(kw::Const) {\n+            // Treat `const` as `static` for error recovery, but don't add it to expected tokens.\n             self.bump(); // `const`\n             self.struct_span_err(self.prev_span, \"extern items cannot be `const`\")\n                 .span_suggestion(\n@@ -1091,32 +1007,17 @@ impl<'a> Parser<'a> {\n                     Applicability::MachineApplicable,\n                 )\n                 .emit();\n-            return self.parse_item_foreign_static(visibility, lo, attrs);\n-        }\n-\n-        // FOREIGN FUNCTION ITEM\n-        const MAY_INTRODUCE_FN: &[Symbol] = &[kw::Const, kw::Async, kw::Unsafe, kw::Extern, kw::Fn];\n-        if MAY_INTRODUCE_FN.iter().any(|&kw| self.check_keyword(kw)) {\n-            return self.parse_item_foreign_fn(visibility, lo, attrs);\n-        }\n-\n-        match self.parse_assoc_macro_invoc(\"extern\", Some(&visibility), &mut false)? {\n-            Some(mac) => Ok(P(ForeignItem {\n-                ident: Ident::invalid(),\n-                span: lo.to(self.prev_span),\n-                id: DUMMY_NODE_ID,\n-                attrs,\n-                vis: visibility,\n-                kind: ForeignItemKind::Macro(mac),\n-                tokens: None,\n-            })),\n-            None => {\n-                if !attrs.is_empty() {\n-                    self.expected_item_err(&attrs)?;\n-                }\n-\n-                self.unexpected()\n+            self.parse_item_foreign_static(vis, lo, attrs)\n+        } else if let Some(mac) = self.parse_assoc_macro_invoc(\"extern\", Some(&vis), &mut false)? {\n+            let kind = ForeignItemKind::Macro(mac);\n+            let span = lo.to(self.prev_span);\n+            let ident = Ident::invalid();\n+            Ok(P(ForeignItem { ident, span, id: DUMMY_NODE_ID, attrs, vis, kind, tokens: None }))\n+        } else {\n+            if !attrs.is_empty() {\n+                self.expected_item_err(&attrs)?;\n             }\n+            self.unexpected()\n         }\n     }\n \n@@ -1703,55 +1604,26 @@ impl<'a> Parser<'a> {\n }\n \n /// The parsing configuration used to parse a parameter list (see `parse_fn_params`).\n-pub(super) struct ParamCfg {\n-    /// `is_name_required` decides if, per-parameter,\n-    /// the parameter must have a pattern or just a type.\n-    pub is_name_required: fn(&token::Token) -> bool,\n-}\n+///\n+/// The function decides if, per-parameter `p`, `p` must have a pattern or just a type.\n+type ReqName = fn(&token::Token) -> bool;\n \n /// Parsing of functions and methods.\n impl<'a> Parser<'a> {\n-    /// Parses an item-position function declaration.\n-    fn parse_item_fn(\n-        &mut self,\n-        lo: Span,\n-        vis: Visibility,\n-        mut attrs: Vec<Attribute>,\n-        header: FnHeader,\n-    ) -> PResult<'a, Option<P<Item>>> {\n-        let cfg = ParamCfg { is_name_required: |_| true };\n-        let (ident, decl, generics) = self.parse_fn_sig(&cfg)?;\n-        let body = self.parse_fn_body(&mut false, &mut attrs)?;\n-        let kind = ItemKind::Fn(FnSig { decl, header }, generics, body);\n-        self.mk_item_with_info(attrs, lo, vis, (ident, kind, None))\n-    }\n-\n-    /// Parses a function declaration from a foreign module.\n-    fn parse_item_foreign_fn(\n-        &mut self,\n-        vis: ast::Visibility,\n-        lo: Span,\n-        mut attrs: Vec<Attribute>,\n-    ) -> PResult<'a, P<ForeignItem>> {\n-        let cfg = ParamCfg { is_name_required: |_| true };\n-        let header = self.parse_fn_front_matter()?;\n-        let (ident, decl, generics) = self.parse_fn_sig(&cfg)?;\n-        let body = self.parse_fn_body(&mut false, &mut attrs)?;\n-        let kind = ForeignItemKind::Fn(FnSig { header, decl }, generics, body);\n-        let span = lo.to(self.prev_span);\n-        Ok(P(ast::ForeignItem { ident, attrs, kind, id: DUMMY_NODE_ID, span, vis, tokens: None }))\n-    }\n-\n-    fn parse_assoc_fn(\n+    /// Parse a function starting from the front matter (`const ...`) to the body `{ ... }` or `;`.\n+    fn parse_fn(\n         &mut self,\n         at_end: &mut bool,\n         attrs: &mut Vec<Attribute>,\n-        is_name_required: fn(&token::Token) -> bool,\n-    ) -> PResult<'a, (Ident, AssocItemKind, Generics)> {\n-        let header = self.parse_fn_front_matter()?;\n-        let (ident, decl, generics) = self.parse_fn_sig(&&ParamCfg { is_name_required })?;\n-        let body = self.parse_fn_body(at_end, attrs)?;\n-        Ok((ident, AssocItemKind::Fn(FnSig { header, decl }, body), generics))\n+        req_name: ReqName,\n+    ) -> PResult<'a, (Ident, FnSig, Generics, Option<P<Block>>)> {\n+        let header = self.parse_fn_front_matter()?; // `const ... fn`\n+        let ident = self.parse_ident()?; // `foo`\n+        let mut generics = self.parse_generics()?; // `<'a, T, ...>`\n+        let decl = self.parse_fn_decl(req_name, AllowPlus::Yes)?; // `(p: u8, ...)`\n+        generics.where_clause = self.parse_where_clause()?; // `where T: Ord`\n+        let body = self.parse_fn_body(at_end, attrs)?; // `;` or `{ ... }`.\n+        Ok((ident, FnSig { header, decl }, generics, body))\n     }\n \n     /// Parse the \"body\" of a function.\n@@ -1785,29 +1657,44 @@ impl<'a> Parser<'a> {\n         Ok(body)\n     }\n \n-    /// Parses all the \"front matter\" for a `fn` declaration, up to\n-    /// and including the `fn` keyword:\n+    /// Is the current token the start of an `FnHeader` / not a valid parse?\n+    fn check_fn_front_matter(&mut self) -> bool {\n+        // We use an over-approximation here.\n+        // `const const`, `fn const` won't parse, but we're not stepping over other syntax either.\n+        const QUALS: [Symbol; 4] = [kw::Const, kw::Async, kw::Unsafe, kw::Extern];\n+        self.check_keyword(kw::Fn) // Definitely an `fn`.\n+            // `$qual fn` or `$qual $qual`:\n+            || QUALS.iter().any(|&kw| self.check_keyword(kw))\n+                && self.look_ahead(1, |t| {\n+                    // ...qualified and then `fn`, e.g. `const fn`.\n+                    t.is_keyword(kw::Fn)\n+                    // Two qualifiers. This is enough. Due `async` we need to check that it's reserved.\n+                    || t.is_non_raw_ident_where(|i| QUALS.contains(&i.name) && i.is_reserved())\n+                })\n+            // `extern ABI fn`\n+            || self.check_keyword(kw::Extern)\n+                && self.look_ahead(1, |t| t.can_begin_literal_or_bool())\n+                && self.look_ahead(2, |t| t.is_keyword(kw::Fn))\n+    }\n+\n+    /// Parses all the \"front matter\" (or \"qualifiers\") for a `fn` declaration,\n+    /// up to and including the `fn` keyword. The formal grammar is:\n     ///\n-    /// - `const fn`\n-    /// - `unsafe fn`\n-    /// - `const unsafe fn`\n-    /// - `extern fn`\n-    /// - etc.\n+    /// ```\n+    /// Extern = \"extern\" StringLit ;\n+    /// FnQual = \"const\"? \"async\"? \"unsafe\"? Extern? ;\n+    /// FnFrontMatter = FnQual? \"fn\" ;\n+    /// ```\n     fn parse_fn_front_matter(&mut self) -> PResult<'a, FnHeader> {\n-        let is_const_fn = self.eat_keyword(kw::Const);\n-        let const_span = self.prev_span;\n+        let constness = self.parse_constness();\n         let asyncness = self.parse_asyncness();\n-        if let IsAsync::Async { .. } = asyncness {\n-            self.ban_async_in_2015(self.prev_span);\n-        }\n-        let asyncness = respan(self.prev_span, asyncness);\n         let unsafety = self.parse_unsafety();\n-        let (constness, unsafety, ext) = if is_const_fn {\n-            (respan(const_span, Constness::Const), unsafety, Extern::None)\n-        } else {\n-            let ext = self.parse_extern()?;\n-            (respan(self.prev_span, Constness::NotConst), unsafety, ext)\n-        };\n+        let ext = self.parse_extern()?;\n+\n+        if let Async::Yes { span, .. } = asyncness {\n+            self.ban_async_in_2015(span);\n+        }\n+\n         if !self.eat_keyword(kw::Fn) {\n             // It is possible for `expect_one_of` to recover given the contents of\n             // `self.expected_tokens`, therefore, do not use `self.unexpected()` which doesn't\n@@ -1816,36 +1703,40 @@ impl<'a> Parser<'a> {\n                 unreachable!()\n             }\n         }\n+\n         Ok(FnHeader { constness, unsafety, asyncness, ext })\n     }\n \n-    /// Parse the \"signature\", including the identifier, parameters, and generics of a function.\n-    fn parse_fn_sig(&mut self, cfg: &ParamCfg) -> PResult<'a, (Ident, P<FnDecl>, Generics)> {\n-        let ident = self.parse_ident()?;\n-        let mut generics = self.parse_generics()?;\n-        let decl = self.parse_fn_decl(cfg, AllowPlus::Yes)?;\n-        generics.where_clause = self.parse_where_clause()?;\n-        Ok((ident, decl, generics))\n+    /// We are parsing `async fn`. If we are on Rust 2015, emit an error.\n+    fn ban_async_in_2015(&self, span: Span) {\n+        if span.rust_2015() {\n+            let diag = self.diagnostic();\n+            struct_span_err!(diag, span, E0670, \"`async fn` is not permitted in the 2015 edition\")\n+                .note(\"to use `async fn`, switch to Rust 2018\")\n+                .help(\"set `edition = \\\"2018\\\"` in `Cargo.toml`\")\n+                .note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\")\n+                .emit();\n+        }\n     }\n \n     /// Parses the parameter list and result type of a function declaration.\n     pub(super) fn parse_fn_decl(\n         &mut self,\n-        cfg: &ParamCfg,\n+        req_name: ReqName,\n         ret_allow_plus: AllowPlus,\n     ) -> PResult<'a, P<FnDecl>> {\n         Ok(P(FnDecl {\n-            inputs: self.parse_fn_params(cfg)?,\n+            inputs: self.parse_fn_params(req_name)?,\n             output: self.parse_ret_ty(ret_allow_plus, RecoverQPath::Yes)?,\n         }))\n     }\n \n     /// Parses the parameter list of a function, including the `(` and `)` delimiters.\n-    fn parse_fn_params(&mut self, cfg: &ParamCfg) -> PResult<'a, Vec<Param>> {\n+    fn parse_fn_params(&mut self, req_name: ReqName) -> PResult<'a, Vec<Param>> {\n         let mut first_param = true;\n         // Parse the arguments, starting out with `self` being allowed...\n         let (mut params, _) = self.parse_paren_comma_seq(|p| {\n-            let param = p.parse_param_general(&cfg, first_param).or_else(|mut e| {\n+            let param = p.parse_param_general(req_name, first_param).or_else(|mut e| {\n                 e.emit();\n                 let lo = p.prev_span;\n                 // Skip every token until next possible arg or end.\n@@ -1865,7 +1756,7 @@ impl<'a> Parser<'a> {\n     /// Parses a single function parameter.\n     ///\n     /// - `self` is syntactically allowed when `first_param` holds.\n-    fn parse_param_general(&mut self, cfg: &ParamCfg, first_param: bool) -> PResult<'a, Param> {\n+    fn parse_param_general(&mut self, req_name: ReqName, first_param: bool) -> PResult<'a, Param> {\n         let lo = self.token.span;\n         let attrs = self.parse_outer_attributes()?;\n \n@@ -1877,7 +1768,7 @@ impl<'a> Parser<'a> {\n \n         let is_name_required = match self.token.kind {\n             token::DotDotDot => false,\n-            _ => (cfg.is_name_required)(&self.token),\n+            _ => req_name(&self.token),\n         };\n         let (pat, ty) = if is_name_required || self.is_named_param() {\n             debug!(\"parse_param_general parse_pat (is_name_required:{})\", is_name_required);"}, {"sha": "4716d722778a62836b1c68e620559df9db40a9e4", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -22,8 +22,9 @@ use rustc_session::parse::ParseSess;\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{FileName, Span, DUMMY_SP};\n-use syntax::ast::{self, AttrStyle, AttrVec, CrateSugar, Extern, Ident, Unsafety, DUMMY_NODE_ID};\n-use syntax::ast::{IsAsync, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, VisibilityKind};\n+use syntax::ast::DUMMY_NODE_ID;\n+use syntax::ast::{self, AttrStyle, AttrVec, Const, CrateSugar, Extern, Ident, Unsafe};\n+use syntax::ast::{Async, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, VisibilityKind};\n use syntax::ptr::P;\n use syntax::token::{self, DelimToken, Token, TokenKind};\n use syntax::tokenstream::{self, DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n@@ -953,17 +954,23 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses asyncness: `async` or nothing.\n-    fn parse_asyncness(&mut self) -> IsAsync {\n+    fn parse_asyncness(&mut self) -> Async {\n         if self.eat_keyword(kw::Async) {\n-            IsAsync::Async { closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }\n+            let span = self.prev_span;\n+            Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }\n         } else {\n-            IsAsync::NotAsync\n+            Async::No\n         }\n     }\n \n     /// Parses unsafety: `unsafe` or nothing.\n-    fn parse_unsafety(&mut self) -> Unsafety {\n-        if self.eat_keyword(kw::Unsafe) { Unsafety::Unsafe } else { Unsafety::Normal }\n+    fn parse_unsafety(&mut self) -> Unsafe {\n+        if self.eat_keyword(kw::Unsafe) { Unsafe::Yes(self.prev_span) } else { Unsafe::No }\n+    }\n+\n+    /// Parses constness: `const` or nothing.\n+    fn parse_constness(&mut self) -> Const {\n+        if self.eat_keyword(kw::Const) { Const::Yes(self.prev_span) } else { Const::No }\n     }\n \n     /// Parses mutability (`mut` or nothing).\n@@ -1266,19 +1273,6 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// We are parsing `async fn`. If we are on Rust 2015, emit an error.\n-    fn ban_async_in_2015(&self, async_span: Span) {\n-        if async_span.rust_2015() {\n-            struct_span_err!(\n-                self.diagnostic(),\n-                async_span,\n-                E0670,\n-                \"`async fn` is not permitted in the 2015 edition\",\n-            )\n-            .emit();\n-        }\n-    }\n-\n     fn collect_tokens<R>(\n         &mut self,\n         f: impl FnOnce(&mut Self) -> PResult<'a, R>,"}, {"sha": "e97af0dc00c690774f3ce96f524dc85f69570a48", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -199,7 +199,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {\n+    fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {\n         self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())\n     }\n "}, {"sha": "f56ae65a03d02114824ef0269d638dff424c3576", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,4 +1,3 @@\n-use super::item::ParamCfg;\n use super::{Parser, PathStyle, TokenType};\n \n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n@@ -311,8 +310,7 @@ impl<'a> Parser<'a> {\n         let unsafety = self.parse_unsafety();\n         let ext = self.parse_extern()?;\n         self.expect_keyword(kw::Fn)?;\n-        let cfg = ParamCfg { is_name_required: |_| false };\n-        let decl = self.parse_fn_decl(&cfg, AllowPlus::No)?;\n+        let decl = self.parse_fn_decl(|_| false, AllowPlus::No)?;\n         Ok(TyKind::BareFn(P(BareFnTy { ext, unsafety, generic_params, decl })))\n     }\n "}, {"sha": "fe80dec513cfe7a16cc37085d5adf741a91cfc44", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -48,8 +48,8 @@ impl<'a> DefCollector<'a> {\n         decl: &'a FnDecl,\n         body: Option<&'a Block>,\n     ) {\n-        let (closure_id, return_impl_trait_id) = match header.asyncness.node {\n-            IsAsync::Async { closure_id, return_impl_trait_id } => {\n+        let (closure_id, return_impl_trait_id) = match header.asyncness {\n+            Async::Yes { span: _, closure_id, return_impl_trait_id } => {\n                 (closure_id, return_impl_trait_id)\n             }\n             _ => unreachable!(),\n@@ -117,7 +117,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             | ItemKind::ExternCrate(..)\n             | ItemKind::ForeignMod(..)\n             | ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n-            ItemKind::Fn(sig, generics, body) if sig.header.asyncness.node.is_async() => {\n+            ItemKind::Fn(sig, generics, body) if sig.header.asyncness.is_async() => {\n                 return self.visit_async_fn(\n                     i.id,\n                     i.ident.name,\n@@ -215,7 +215,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_assoc_item(&mut self, i: &'a AssocItem, ctxt: visit::AssocCtxt) {\n         let def_data = match &i.kind {\n-            AssocItemKind::Fn(FnSig { header, decl }, body) if header.asyncness.node.is_async() => {\n+            AssocItemKind::Fn(FnSig { header, decl }, body) if header.asyncness.is_async() => {\n                 return self.visit_async_fn(\n                     i.id,\n                     i.ident.name,\n@@ -255,10 +255,10 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 // we must create two defs.\n                 let closure_def = self.create_def(expr.id, DefPathData::ClosureExpr, expr.span);\n                 match asyncness {\n-                    IsAsync::Async { closure_id, .. } => {\n+                    Async::Yes { closure_id, .. } => {\n                         self.create_def(closure_id, DefPathData::ClosureExpr, expr.span)\n                     }\n-                    IsAsync::NotAsync => closure_def,\n+                    Async::No => closure_def,\n                 }\n             }\n             ExprKind::Async(_, async_id, _) => {"}, {"sha": "58ff7f447890c53ca4e357570d4f206019a809e9", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -2030,7 +2030,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             // `async |x| ...` gets desugared to `|x| future_from_generator(|| ...)`, so we need to\n             // resolve the arguments within the proper scopes so that usages of them inside the\n             // closure are detected as upvars rather than normal closure arg usages.\n-            ExprKind::Closure(_, IsAsync::Async { .. }, _, ref fn_decl, ref body, _span) => {\n+            ExprKind::Closure(_, Async::Yes { .. }, _, ref fn_decl, ref body, _span) => {\n                 self.with_rib(ValueNS, NormalRibKind, |this| {\n                     // Resolve arguments:\n                     this.resolve_params(&fn_decl.inputs);"}, {"sha": "01e3e3f368529d5d016e6d940464e1196dcf277c", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -290,8 +290,8 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 // as an `impl Trait` existential type. Because of this, to match\n                 // the definition paths when resolving nested types we need to\n                 // start walking from the newly-created definition.\n-                match sig.header.asyncness.node {\n-                    ast::IsAsync::Async { return_impl_trait_id, .. } => {\n+                match sig.header.asyncness {\n+                    ast::Async::Yes { return_impl_trait_id, .. } => {\n                         v.nest_tables(return_impl_trait_id, |v| v.visit_ty(ret_ty))\n                     }\n                     _ => v.visit_ty(ret_ty),\n@@ -383,8 +383,8 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     // as an `impl Trait` existential type. Because of this, to match\n                     // the definition paths when resolving nested types we need to\n                     // start walking from the newly-created definition.\n-                    match header.asyncness.node {\n-                        ast::IsAsync::Async { return_impl_trait_id, .. } => {\n+                    match header.asyncness {\n+                        ast::Async::Yes { return_impl_trait_id, .. } => {\n                             v.nest_tables(return_impl_trait_id, |v| v.visit_ty(ret_ty))\n                         }\n                         _ => v.visit_ty(ret_ty),"}, {"sha": "d3c4d6d5723b90c6e4001ae6cf1448406a08e5cd", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -225,7 +225,7 @@ impl Sig for ast::Ty {\n                     text.push('>');\n                 }\n \n-                if f.unsafety == ast::Unsafety::Unsafe {\n+                if let ast::Unsafe::Yes(_) = f.unsafety {\n                     text.push_str(\"unsafe \");\n                 }\n                 push_extern(&mut text, f.ext);\n@@ -365,13 +365,13 @@ impl Sig for ast::Item {\n             }\n             ast::ItemKind::Fn(ast::FnSig { ref decl, header }, ref generics, _) => {\n                 let mut text = String::new();\n-                if header.constness.node == ast::Constness::Const {\n+                if let ast::Const::Yes(_) = header.constness {\n                     text.push_str(\"const \");\n                 }\n-                if header.asyncness.node.is_async() {\n+                if header.asyncness.is_async() {\n                     text.push_str(\"async \");\n                 }\n-                if header.unsafety == ast::Unsafety::Unsafe {\n+                if let ast::Unsafe::Yes(_) = header.unsafety {\n                     text.push_str(\"unsafe \");\n                 }\n                 push_extern(&mut text, header.ext);\n@@ -453,7 +453,7 @@ impl Sig for ast::Item {\n                     text.push_str(\"auto \");\n                 }\n \n-                if unsafety == ast::Unsafety::Unsafe {\n+                if let ast::Unsafe::Yes(_) = unsafety {\n                     text.push_str(\"unsafe \");\n                 }\n                 text.push_str(\"trait \");\n@@ -496,11 +496,11 @@ impl Sig for ast::Item {\n                 if let ast::Defaultness::Default = defaultness {\n                     text.push_str(\"default \");\n                 }\n-                if unsafety == ast::Unsafety::Unsafe {\n+                if let ast::Unsafe::Yes(_) = unsafety {\n                     text.push_str(\"unsafe \");\n                 }\n                 text.push_str(\"impl\");\n-                if constness == ast::Constness::Const {\n+                if let ast::Const::Yes(_) = constness {\n                     text.push_str(\" const\");\n                 }\n \n@@ -884,13 +884,13 @@ fn make_method_signature(\n ) -> Result {\n     // FIXME code dup with function signature\n     let mut text = String::new();\n-    if m.header.constness.node == ast::Constness::Const {\n+    if let ast::Const::Yes(_) = m.header.constness {\n         text.push_str(\"const \");\n     }\n-    if m.header.asyncness.node.is_async() {\n+    if m.header.asyncness.is_async() {\n         text.push_str(\"async \");\n     }\n-    if m.header.unsafety == ast::Unsafety::Unsafe {\n+    if let ast::Unsafe::Yes(_) = m.header.unsafety {\n         text.push_str(\"unsafe \");\n     }\n     push_extern(&mut text, m.header.ext);"}, {"sha": "0e7c10541cad7038b6a0e223471a749012c69fa0", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -28,12 +28,12 @@ use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::print;\n-use rustc_hir::{ExprKind, GenericArg, GenericArgs};\n+use rustc_hir::{Constness, ExprKind, GenericArg, GenericArgs};\n use rustc_span::symbol::sym;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use smallvec::SmallVec;\n-use syntax::ast::{self, Constness};\n+use syntax::ast;\n use syntax::util::lev_distance::find_best_match_for_name;\n \n use std::collections::BTreeSet;\n@@ -1502,7 +1502,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .filter(|(trait_ref, _, _)| !tcx.trait_is_auto(trait_ref.def_id()));\n \n         for (base_trait_ref, span, constness) in regular_traits_refs_spans {\n-            assert_eq!(constness, ast::Constness::NotConst);\n+            assert_eq!(constness, Constness::NotConst);\n \n             for trait_ref in traits::elaborate_trait_ref(tcx, base_trait_ref) {\n                 debug!("}, {"sha": "a825856e38aa0370bd37fcebcaeca682ccb0e58f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -2693,13 +2693,13 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         None\n     }\n \n-    fn default_constness_for_trait_bounds(&self) -> ast::Constness {\n+    fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n         // FIXME: refactor this into a method\n         let node = self.tcx.hir().get(self.body_id);\n         if let Some(fn_like) = FnLikeNode::from_node(node) {\n             fn_like.constness()\n         } else {\n-            ast::Constness::NotConst\n+            hir::Constness::NotConst\n         }\n     }\n "}, {"sha": "5349c324ad8a7b6d0448e023a89bde5c35120346", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -300,11 +300,11 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         Some(self.item_def_id)\n     }\n \n-    fn default_constness_for_trait_bounds(&self) -> ast::Constness {\n+    fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n         if let Some(fn_like) = FnLikeNode::from_node(self.node()) {\n             fn_like.constness()\n         } else {\n-            ast::Constness::NotConst\n+            hir::Constness::NotConst\n         }\n     }\n \n@@ -2429,7 +2429,7 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n                     match bound {\n                         &hir::GenericBound::Trait(ref poly_trait_ref, modifier) => {\n                             let constness = match modifier {\n-                                hir::TraitBoundModifier::MaybeConst => ast::Constness::NotConst,\n+                                hir::TraitBoundModifier::MaybeConst => hir::Constness::NotConst,\n                                 hir::TraitBoundModifier::None => constness,\n                                 hir::TraitBoundModifier::Maybe => bug!(\"this wasn't handled\"),\n                             };\n@@ -2617,13 +2617,13 @@ fn predicates_from_bound<'tcx>(\n     astconv: &dyn AstConv<'tcx>,\n     param_ty: Ty<'tcx>,\n     bound: &'tcx hir::GenericBound<'tcx>,\n-    constness: ast::Constness,\n+    constness: hir::Constness,\n ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n     match *bound {\n         hir::GenericBound::Trait(ref tr, modifier) => {\n             let constness = match modifier {\n                 hir::TraitBoundModifier::Maybe => return vec![],\n-                hir::TraitBoundModifier::MaybeConst => ast::Constness::NotConst,\n+                hir::TraitBoundModifier::MaybeConst => hir::Constness::NotConst,\n                 hir::TraitBoundModifier::None => constness,\n             };\n "}, {"sha": "067b33c144742c58cfb1476cada479c906cec5f7", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -377,7 +377,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n         &item_cx,\n         hir_trait,\n         DUMMY_SP,\n-        syntax::ast::Constness::NotConst,\n+        hir::Constness::NotConst,\n         tcx.types.err,\n         &mut bounds,\n         true,"}, {"sha": "744201a00500bcf4be69e59b1477e1ede76f39ce", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -203,7 +203,7 @@ pub struct Impl<'hir> {\n     pub unsafety: hir::Unsafety,\n     pub polarity: hir::ImplPolarity,\n     pub defaultness: hir::Defaultness,\n-    pub constness: ast::Constness,\n+    pub constness: hir::Constness,\n     pub generics: &'hir hir::Generics<'hir>,\n     pub trait_: &'hir Option<hir::TraitRef<'hir>>,\n     pub for_: &'hir hir::Ty<'hir>,"}, {"sha": "72430fa9c17e415b02694d9a04cf02b20241fe71", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 31, "deletions": 63, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -34,7 +34,7 @@ use rustc_data_structures::thin_vec::ThinVec;\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{self, Decoder, Encoder};\n-use rustc_span::source_map::{dummy_spanned, respan, Spanned};\n+use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -1198,14 +1198,14 @@ pub enum ExprKind {\n     /// A closure (e.g., `move |a, b, c| a + b + c`).\n     ///\n     /// The final span is the span of the argument block `|...|`.\n-    Closure(CaptureBy, IsAsync, Movability, P<FnDecl>, P<Expr>, Span),\n+    Closure(CaptureBy, Async, Movability, P<FnDecl>, P<Expr>, Span),\n     /// A block (`'label: { ... }`).\n     Block(P<Block>, Option<Label>),\n     /// An async block (`async move { ... }`).\n     ///\n     /// The `NodeId` is the `NodeId` for the closure that results from\n     /// desugaring an async block, just like the NodeId field in the\n-    /// `IsAsync` enum. This is necessary in order to create a def for the\n+    /// `Async::Yes` variant. This is necessary in order to create a def for the\n     /// closure which can be used as a parent of any child defs. Defs\n     /// created during lowering cannot be made the parent of any other\n     /// preexisting defs.\n@@ -1863,7 +1863,7 @@ pub struct Ty {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct BareFnTy {\n-    pub unsafety: Unsafety,\n+    pub unsafety: Unsafe,\n     pub ext: Extern,\n     pub generic_params: Vec<GenericParam>,\n     pub decl: P<FnDecl>,\n@@ -2101,70 +2101,38 @@ pub enum IsAuto {\n     No,\n }\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Debug,\n-    HashStable_Generic\n-)]\n-pub enum Unsafety {\n-    Unsafe,\n-    Normal,\n-}\n-\n-impl Unsafety {\n-    pub fn prefix_str(&self) -> &'static str {\n-        match self {\n-            Unsafety::Unsafe => \"unsafe \",\n-            Unsafety::Normal => \"\",\n-        }\n-    }\n-}\n-\n-impl fmt::Display for Unsafety {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(\n-            match *self {\n-                Unsafety::Normal => \"normal\",\n-                Unsafety::Unsafe => \"unsafe\",\n-            },\n-            f,\n-        )\n-    }\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(HashStable_Generic)]\n+pub enum Unsafe {\n+    Yes(Span),\n+    No,\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub enum IsAsync {\n-    Async { closure_id: NodeId, return_impl_trait_id: NodeId },\n-    NotAsync,\n+pub enum Async {\n+    Yes { span: Span, closure_id: NodeId, return_impl_trait_id: NodeId },\n+    No,\n }\n \n-impl IsAsync {\n+impl Async {\n     pub fn is_async(self) -> bool {\n-        if let IsAsync::Async { .. } = self { true } else { false }\n+        if let Async::Yes { .. } = self { true } else { false }\n     }\n \n     /// In ths case this is an `async` return, the `NodeId` for the generated `impl Trait` item.\n     pub fn opt_return_id(self) -> Option<NodeId> {\n         match self {\n-            IsAsync::Async { return_impl_trait_id, .. } => Some(return_impl_trait_id),\n-            IsAsync::NotAsync => None,\n+            Async::Yes { return_impl_trait_id, .. } => Some(return_impl_trait_id),\n+            Async::No => None,\n         }\n     }\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n #[derive(HashStable_Generic)]\n-pub enum Constness {\n-    Const,\n-    NotConst,\n+pub enum Const {\n+    Yes(Span),\n+    No,\n }\n \n /// Item defaultness.\n@@ -2527,29 +2495,29 @@ impl Extern {\n /// included in this struct (e.g., `async unsafe fn` or `const extern \"C\" fn`).\n #[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n pub struct FnHeader {\n-    pub unsafety: Unsafety,\n-    pub asyncness: Spanned<IsAsync>,\n-    pub constness: Spanned<Constness>,\n+    pub unsafety: Unsafe,\n+    pub asyncness: Async,\n+    pub constness: Const,\n     pub ext: Extern,\n }\n \n impl FnHeader {\n     /// Does this function header have any qualifiers or is it empty?\n     pub fn has_qualifiers(&self) -> bool {\n         let Self { unsafety, asyncness, constness, ext } = self;\n-        matches!(unsafety, Unsafety::Unsafe)\n-            || asyncness.node.is_async()\n-            || matches!(constness.node, Constness::Const)\n+        matches!(unsafety, Unsafe::Yes(_))\n+            || asyncness.is_async()\n+            || matches!(constness, Const::Yes(_))\n             || !matches!(ext, Extern::None)\n     }\n }\n \n impl Default for FnHeader {\n     fn default() -> FnHeader {\n         FnHeader {\n-            unsafety: Unsafety::Normal,\n-            asyncness: dummy_spanned(IsAsync::NotAsync),\n-            constness: dummy_spanned(Constness::NotConst),\n+            unsafety: Unsafe::No,\n+            asyncness: Async::No,\n+            constness: Const::No,\n             ext: Extern::None,\n         }\n     }\n@@ -2606,7 +2574,7 @@ pub enum ItemKind {\n     /// A trait declaration (`trait`).\n     ///\n     /// E.g., `trait Foo { .. }`, `trait Foo<T> { .. }` or `auto trait Foo {}`.\n-    Trait(IsAuto, Unsafety, Generics, GenericBounds, Vec<P<AssocItem>>),\n+    Trait(IsAuto, Unsafe, Generics, GenericBounds, Vec<P<AssocItem>>),\n     /// Trait alias\n     ///\n     /// E.g., `trait Foo = Bar + Quux;`.\n@@ -2615,10 +2583,10 @@ pub enum ItemKind {\n     ///\n     /// E.g., `impl<A> Foo<A> { .. }` or `impl<A> Trait for Foo<A> { .. }`.\n     Impl {\n-        unsafety: Unsafety,\n+        unsafety: Unsafe,\n         polarity: ImplPolarity,\n         defaultness: Defaultness,\n-        constness: Constness,\n+        constness: Const,\n         generics: Generics,\n \n         /// The trait being implemented, if any."}, {"sha": "e0180d451936f3c6a8dbecae77beb7d6f3733962", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -114,7 +114,7 @@ pub trait MutVisitor: Sized {\n         noop_visit_fn_decl(d, self);\n     }\n \n-    fn visit_asyncness(&mut self, a: &mut IsAsync) {\n+    fn visit_asyncness(&mut self, a: &mut Async) {\n         noop_visit_asyncness(a, self);\n     }\n \n@@ -728,13 +728,13 @@ pub fn noop_visit_interpolated<T: MutVisitor>(nt: &mut token::Nonterminal, vis:\n     }\n }\n \n-pub fn noop_visit_asyncness<T: MutVisitor>(asyncness: &mut IsAsync, vis: &mut T) {\n+pub fn noop_visit_asyncness<T: MutVisitor>(asyncness: &mut Async, vis: &mut T) {\n     match asyncness {\n-        IsAsync::Async { closure_id, return_impl_trait_id } => {\n+        Async::Yes { span: _, closure_id, return_impl_trait_id } => {\n             vis.visit_id(closure_id);\n             vis.visit_id(return_impl_trait_id);\n         }\n-        IsAsync::NotAsync => {}\n+        Async::No => {}\n     }\n }\n \n@@ -980,7 +980,7 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n \n pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n     let FnHeader { unsafety: _, asyncness, constness: _, ext: _ } = header;\n-    vis.visit_asyncness(&mut asyncness.node);\n+    vis.visit_asyncness(asyncness);\n }\n \n pub fn noop_visit_mod<T: MutVisitor>(Mod { inner, items, inline: _ }: &mut Mod, vis: &mut T) {"}, {"sha": "862934300e08562f5b9ef7e3b3474ab76ef020d1", "filename": "src/libsyntax/token.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibsyntax%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibsyntax%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftoken.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -402,12 +402,14 @@ impl Token {\n \n     /// Returns `true` if the token is any literal, a minus (which can prefix a literal,\n     /// for example a '-42', or one of the boolean idents).\n+    ///\n+    /// Keep this in sync with `Lit::from_token`.\n     pub fn can_begin_literal_or_bool(&self) -> bool {\n         match self.kind {\n             Literal(..) | BinOp(Minus) => true,\n             Ident(name, false) if name.is_bool_lit() => true,\n-            Interpolated(ref nt) => match **nt {\n-                NtLiteral(..) => true,\n+            Interpolated(ref nt) => match &**nt {\n+                NtExpr(e) | NtLiteral(e) => matches!(e.kind, ast::ExprKind::Lit(_)),\n                 _ => false,\n             },\n             _ => false,\n@@ -530,7 +532,7 @@ impl Token {\n     }\n \n     /// Returns `true` if the token is a non-raw identifier for which `pred` holds.\n-    fn is_non_raw_ident_where(&self, pred: impl FnOnce(ast::Ident) -> bool) -> bool {\n+    pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(ast::Ident) -> bool) -> bool {\n         match self.ident() {\n             Some((id, false)) => pred(id),\n             _ => false,"}, {"sha": "0c611adc06bcfa014461fc5292291e8837925cf2", "filename": "src/libsyntax/util/literal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibsyntax%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Flibsyntax%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fliteral.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -188,6 +188,8 @@ impl Lit {\n     }\n \n     /// Converts arbitrary token into an AST literal.\n+    ///\n+    /// Keep this in sync with `Token::can_begin_literal_or_bool`.\n     pub fn from_token(token: &Token) -> Result<Lit, LitError> {\n         let lit = match token.kind {\n             token::Ident(name, false) if name.is_bool_lit() => {"}, {"sha": "7ac75c605f2e47a00bfb2f64ed70488731169185", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -121,7 +121,7 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                 });\n                 iter_exprs(depth - 1, &mut |e| g(\n                         ExprKind::Closure(CaptureBy::Value,\n-                                          IsAsync::NotAsync,\n+                                          Async::No,\n                                           Movability::Movable,\n                                           decl.clone(),\n                                           e,"}, {"sha": "f0403b76620c1ba076a7c07303783c7b420d141b", "filename": "src/test/ui/async-await/async-trait-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n trait T {\n-    async fn foo() {} //~ ERROR trait fns cannot be declared `async`\n-    async fn bar(&self) {} //~ ERROR trait fns cannot be declared `async`\n+    async fn foo() {} //~ ERROR functions in traits cannot be declared `async`\n+    async fn bar(&self) {} //~ ERROR functions in traits cannot be declared `async`\n }\n \n fn main() {}"}, {"sha": "6080b2815eeb8cd3577aaa74515ff4c3632f066a", "filename": "src/test/ui/async-await/async-trait-fn.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,17 +1,21 @@\n-error[E0706]: trait fns cannot be declared `async`\n+error[E0706]: functions in traits cannot be declared `async`\n   --> $DIR/async-trait-fn.rs:3:5\n    |\n LL |     async fn foo() {}\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     -----^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n-error[E0706]: trait fns cannot be declared `async`\n+error[E0706]: functions in traits cannot be declared `async`\n   --> $DIR/async-trait-fn.rs:4:5\n    |\n LL |     async fn bar(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     -----^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait"}, {"sha": "5d2d186137e164405f4c9170413236c7a949cf21", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -16,7 +16,7 @@ impl Foo {\n \n trait Bar {\n     async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n-                      //~^ ERROR trait fns cannot be declared `async`\n+                      //~^ ERROR functions in traits cannot be declared `async`\n }\n \n fn main() {"}, {"sha": "f3d982801bb992d5c196ebfe0bbb0f95908d08c4", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -3,60 +3,98 @@ error[E0670]: `async fn` is not permitted in the 2015 edition\n    |\n LL | async fn foo() {}\n    | ^^^^^\n+   |\n+   = note: to use `async fn`, switch to Rust 2018\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:5:12\n    |\n LL | fn baz() { async fn foo() {} }\n    |            ^^^^^\n+   |\n+   = note: to use `async fn`, switch to Rust 2018\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:7:1\n    |\n LL | async fn async_baz() {\n    | ^^^^^\n+   |\n+   = note: to use `async fn`, switch to Rust 2018\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:8:5\n    |\n LL |     async fn bar() {}\n    |     ^^^^^\n+   |\n+   = note: to use `async fn`, switch to Rust 2018\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:14:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^\n+   |\n+   = note: to use `async fn`, switch to Rust 2018\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:18:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^\n+   |\n+   = note: to use `async fn`, switch to Rust 2018\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:36:9\n    |\n LL |         async fn bar() {}\n    |         ^^^^^\n+   |\n+   = note: to use `async fn`, switch to Rust 2018\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:26:9\n    |\n LL |         async fn foo() {}\n    |         ^^^^^\n+   |\n+   = note: to use `async fn`, switch to Rust 2018\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:31:13\n    |\n LL |             async fn bar() {}\n    |             ^^^^^\n+   |\n+   = note: to use `async fn`, switch to Rust 2018\n+   = help: set `edition = \"2018\"` in `Cargo.toml`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0706]: trait fns cannot be declared `async`\n+error[E0706]: functions in traits cannot be declared `async`\n   --> $DIR/edition-deny-async-fns-2015.rs:18:5\n    |\n LL |     async fn foo() {}\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     -----^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait"}, {"sha": "963460c11824913074343c700c69ed73d5239567", "filename": "src/test/ui/async-await/no-async-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -2,4 +2,4 @@\n // compile-flags: --crate-type lib\n \n pub async const fn x() {}\n-//~^ ERROR expected one of `fn` or `unsafe`, found keyword `const`\n+//~^ ERROR expected one of `extern`, `fn`, or `unsafe`, found keyword `const`"}, {"sha": "e324a77187ab6c71cf43652a5a4c55fc75c6d761", "filename": "src/test/ui/async-await/no-async-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `fn` or `unsafe`, found keyword `const`\n+error: expected one of `extern`, `fn`, or `unsafe`, found keyword `const`\n   --> $DIR/no-async-const.rs:4:11\n    |\n LL | pub async const fn x() {}\n-   |           ^^^^^ expected one of `fn` or `unsafe`\n+   |           ^^^^^ expected one of `extern`, `fn`, or `unsafe`\n \n error: aborting due to previous error\n "}, {"sha": "b3c59734e036f7b0a57b729d99c3cd6f3026cc75", "filename": "src/test/ui/async-await/no-const-async.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -2,5 +2,4 @@\n // compile-flags: --crate-type lib\n \n pub const async fn x() {}\n-//~^ ERROR expected identifier, found keyword `async`\n-//~^^ expected `:`, found keyword `fn`\n+//~^ ERROR functions cannot be both `const` and `async`"}, {"sha": "f6ae0f1447ced96d832f6b2fb5717b86754a0207", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,14 +1,11 @@\n-error: expected identifier, found keyword `async`\n-  --> $DIR/no-const-async.rs:4:11\n+error: functions cannot be both `const` and `async`\n+  --> $DIR/no-const-async.rs:4:1\n    |\n LL | pub const async fn x() {}\n-   |           ^^^^^ expected identifier, found keyword\n+   | ^^^^-----^-----^^^^^^^^^^\n+   |     |     |\n+   |     |     `async` because of this\n+   |     `const` because of this\n \n-error: expected `:`, found keyword `fn`\n-  --> $DIR/no-const-async.rs:4:17\n-   |\n-LL | pub const async fn x() {}\n-   |                 ^^ expected `:`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "f40154e16f34eddd16ec3ec6ffdc3d7f2cacbdb0", "filename": "src/test/ui/async-await/no-unsafe-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -8,4 +8,4 @@ impl S {\n }\n \n #[cfg(FALSE)]\n-unsafe async fn f() {} //~ ERROR expected one of `extern`, `fn`, or `{`, found keyword `async`\n+unsafe async fn f() {} //~ ERROR expected one of `extern` or `fn`, found keyword `async`"}, {"sha": "2651588d59710ca106c09b2a90614143f8ad0bf8", "filename": "src/test/ui/async-await/no-unsafe-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -4,11 +4,11 @@ error: expected one of `extern` or `fn`, found keyword `async`\n LL |     unsafe async fn g() {}\n    |            ^^^^^ expected one of `extern` or `fn`\n \n-error: expected one of `extern`, `fn`, or `{`, found keyword `async`\n+error: expected one of `extern` or `fn`, found keyword `async`\n   --> $DIR/no-unsafe-async.rs:11:8\n    |\n LL | unsafe async fn f() {}\n-   |        ^^^^^ expected one of `extern`, `fn`, or `{`\n+   |        ^^^^^ expected one of `extern` or `fn`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4db66af6783cae505a82b474ccc742baee4ce3af", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -2,7 +2,9 @@ error[E0198]: negative impls cannot be unsafe\n   --> $DIR/coherence-negative-impls-safe.rs:7:1\n    |\n LL | unsafe impl !Send for TestType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | unsafe because of this\n \n error: aborting due to previous error\n "}, {"sha": "e9e236be556300d819da13aebee6fe28276f3619", "filename": "src/test/ui/const-generics/const-fn-with-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -2,7 +2,7 @@\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n const fn const_u32_identity<const X: u32>() -> u32 {\n-    //~^ ERROR const parameters are not permitted in `const fn`\n+    //~^ ERROR const parameters are not permitted in const functions\n     X\n }\n "}, {"sha": "ca31d695361f406539b7f8106b215977ca4edea8", "filename": "src/test/ui/const-generics/const-fn-with-const-param.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,7 +1,11 @@\n-error: const parameters are not permitted in `const fn`\n+error: const parameters are not permitted in const functions\n   --> $DIR/const-fn-with-const-param.rs:4:1\n    |\n-LL | / const fn const_u32_identity<const X: u32>() -> u32 {\n+LL |   const fn const_u32_identity<const X: u32>() -> u32 {\n+   |   ^----\n+   |   |\n+   |  _`const` because of this\n+   | |\n LL | |\n LL | |     X\n LL | | }"}, {"sha": "5667d5535274d161c5b38bf434638d6ba476a006", "filename": "src/test/ui/consts/const-extern-fn/feature-gate-const_extern_fn.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,12 +1,10 @@\n // Check that `const extern fn` and `const unsafe extern fn` are feature-gated.\n \n-#[cfg(FALSE)] const extern fn foo1() {} //~ ERROR `const extern fn` definitions are unstable\n-#[cfg(FALSE)] const extern \"C\" fn foo2() {} //~ ERROR `const extern fn` definitions are unstable\n-#[cfg(FALSE)] const extern \"Rust\" fn foo3() {} //~ ERROR `const extern fn` definitions are unstable\n-#[cfg(FALSE)] const unsafe extern fn bar1() {} //~ ERROR `const extern fn` definitions are unstable\n-#[cfg(FALSE)] const unsafe extern \"C\" fn bar2() {}\n-//~^ ERROR `const extern fn` definitions are unstable\n-#[cfg(FALSE)] const unsafe extern \"Rust\" fn bar3() {}\n-//~^ ERROR `const extern fn` definitions are unstable\n+const extern fn foo1() {} //~ ERROR `const extern fn` definitions are unstable\n+const extern \"C\" fn foo2() {} //~ ERROR `const extern fn` definitions are unstable\n+const extern \"Rust\" fn foo3() {} //~ ERROR `const extern fn` definitions are unstable\n+const unsafe extern fn bar1() {} //~ ERROR `const extern fn` definitions are unstable\n+const unsafe extern \"C\" fn bar2() {} //~ ERROR `const extern fn` definitions are unstable\n+const unsafe extern \"Rust\" fn bar3() {} //~ ERROR `const extern fn` definitions are unstable\n \n fn main() {}"}, {"sha": "bd5940a3fd60c17cf07a67b5fd6512c8ba149309", "filename": "src/test/ui/consts/const-extern-fn/feature-gate-const_extern_fn.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,53 +1,53 @@\n error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:3:15\n+  --> $DIR/feature-gate-const_extern_fn.rs:3:1\n    |\n-LL | #[cfg(FALSE)] const extern fn foo1() {}\n-   |               ^^^^^^^^^^^^\n+LL | const extern fn foo1() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:4:15\n+  --> $DIR/feature-gate-const_extern_fn.rs:4:1\n    |\n-LL | #[cfg(FALSE)] const extern \"C\" fn foo2() {}\n-   |               ^^^^^^^^^^^^\n+LL | const extern \"C\" fn foo2() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:5:15\n+  --> $DIR/feature-gate-const_extern_fn.rs:5:1\n    |\n-LL | #[cfg(FALSE)] const extern \"Rust\" fn foo3() {}\n-   |               ^^^^^^^^^^^^\n+LL | const extern \"Rust\" fn foo3() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:6:15\n+  --> $DIR/feature-gate-const_extern_fn.rs:6:1\n    |\n-LL | #[cfg(FALSE)] const unsafe extern fn bar1() {}\n-   |               ^^^^^^^^^^^^^^^^^^^\n+LL | const unsafe extern fn bar1() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:7:15\n+  --> $DIR/feature-gate-const_extern_fn.rs:7:1\n    |\n-LL | #[cfg(FALSE)] const unsafe extern \"C\" fn bar2() {}\n-   |               ^^^^^^^^^^^^^^^^^^^\n+LL | const unsafe extern \"C\" fn bar2() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:9:15\n+  --> $DIR/feature-gate-const_extern_fn.rs:8:1\n    |\n-LL | #[cfg(FALSE)] const unsafe extern \"Rust\" fn bar3() {}\n-   |               ^^^^^^^^^^^^^^^^^^^\n+LL | const unsafe extern \"Rust\" fn bar3() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable"}, {"sha": "6f575d055a29baa35109595e5a0478f7418fc784", "filename": "src/test/ui/consts/const-extern-fn/issue-68062-const-extern-fns-dont-need-fn-specifier.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fissue-68062-const-extern-fns-dont-need-fn-specifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fissue-68062-const-extern-fns-dont-need-fn-specifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fissue-68062-const-extern-fns-dont-need-fn-specifier.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -4,5 +4,4 @@ fn main() {}\n fn container() {\n     const extern \"Rust\" PUT_ANYTHING_YOU_WANT_HERE bug() -> usize { 1 }\n     //~^ ERROR expected `fn`\n-    //~| ERROR `const extern fn` definitions are unstable\n }"}, {"sha": "ec415ec9d0211c006382e9bbf6116b0032565c36", "filename": "src/test/ui/consts/const-extern-fn/issue-68062-const-extern-fns-dont-need-fn-specifier.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fissue-68062-const-extern-fns-dont-need-fn-specifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fissue-68062-const-extern-fns-dont-need-fn-specifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fissue-68062-const-extern-fns-dont-need-fn-specifier.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -4,15 +4,5 @@ error: expected `fn`, found `PUT_ANYTHING_YOU_WANT_HERE`\n LL |     const extern \"Rust\" PUT_ANYTHING_YOU_WANT_HERE bug() -> usize { 1 }\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fn`\n \n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/issue-68062-const-extern-fns-dont-need-fn-specifier.rs:5:5\n-   |\n-LL |     const extern \"Rust\" PUT_ANYTHING_YOU_WANT_HERE bug() -> usize { 1 }\n-   |     ^^^^^^^^^^^^\n-   |\n-   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n-   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "d4cfba6460c45a2cd85faa5606616b130152b34a", "filename": "src/test/ui/consts/const-fn-mismatch.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-mismatch.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -10,8 +10,10 @@ trait Foo {\n }\n \n impl Foo for u32 {\n-    const fn f() -> u32 { 22 }\n-    //~^ ERROR trait fns cannot be declared const\n+    const fn f() -> u32 {\n+        //~^ ERROR functions in traits cannot be declared const\n+        22\n+    }\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "0f4ce010fee00709b47cba4216a645f3dc0dfb02", "filename": "src/test/ui/consts/const-fn-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-mismatch.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,8 +1,8 @@\n-error[E0379]: trait fns cannot be declared const\n+error[E0379]: functions in traits cannot be declared const\n   --> $DIR/const-fn-mismatch.rs:13:5\n    |\n-LL |     const fn f() -> u32 { 22 }\n-   |     ^^^^^ trait fns cannot be const\n+LL |     const fn f() -> u32 {\n+   |     ^^^^^ functions in traits cannot be const\n \n error: aborting due to previous error\n "}, {"sha": "1006d854688a4ca860179e81bb17f897d1907bc6", "filename": "src/test/ui/consts/const-fn-not-in-trait.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-in-trait.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -5,9 +5,11 @@\n \n trait Foo {\n     const fn f() -> u32;\n-    //~^ ERROR trait fns cannot be declared const\n-    const fn g() -> u32 { 0 }\n-    //~^ ERROR trait fns cannot be declared const\n+    //~^ ERROR functions in traits cannot be declared const\n+    const fn g() -> u32 {\n+        //~^ ERROR functions in traits cannot be declared const\n+        0\n+    }\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "12ce3066037d1692a587b5c8e6c98345d143a19d", "filename": "src/test/ui/consts/const-fn-not-in-trait.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-in-trait.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,14 +1,14 @@\n-error[E0379]: trait fns cannot be declared const\n+error[E0379]: functions in traits cannot be declared const\n   --> $DIR/const-fn-not-in-trait.rs:7:5\n    |\n LL |     const fn f() -> u32;\n-   |     ^^^^^ trait fns cannot be const\n+   |     ^^^^^ functions in traits cannot be const\n \n-error[E0379]: trait fns cannot be declared const\n+error[E0379]: functions in traits cannot be declared const\n   --> $DIR/const-fn-not-in-trait.rs:9:5\n    |\n-LL |     const fn g() -> u32 { 0 }\n-   |     ^^^^^ trait fns cannot be const\n+LL |     const fn g() -> u32 {\n+   |     ^^^^^ functions in traits cannot be const\n \n error: aborting due to 2 previous errors\n "}, {"sha": "51ed9c83bc99924447a7359921d16b015daa1beb", "filename": "src/test/ui/error-codes/E0197.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -2,7 +2,9 @@ error[E0197]: inherent impls cannot be unsafe\n   --> $DIR/E0197.rs:3:1\n    |\n LL | unsafe impl Foo { }\n-   | ^^^^^^^^^^^^^^^^^^^\n+   | ------^^^^^^^^^^^^^\n+   | |\n+   | unsafe because of this\n \n error: aborting due to previous error\n "}, {"sha": "90e8b4abd1296dfad3286306e1863e25c76af464", "filename": "src/test/ui/error-codes/E0198.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -2,7 +2,9 @@ error[E0198]: negative impls cannot be unsafe\n   --> $DIR/E0198.rs:5:1\n    |\n LL | unsafe impl !Send for Foo { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | unsafe because of this\n \n error: aborting due to previous error\n "}, {"sha": "691c367aeb8597d9074f657c5cd702178e5ea014", "filename": "src/test/ui/feature-gates/feature-gate-const_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -4,13 +4,13 @@ const fn foo() -> usize { 0 } // ok\n \n trait Foo {\n     const fn foo() -> u32; //~ ERROR const fn is unstable\n-                           //~| ERROR trait fns cannot be declared const\n+                           //~| ERROR functions in traits cannot be declared const\n     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n-                                //~| ERROR trait fns cannot be declared const\n+                                //~| ERROR functions in traits cannot be declared const\n }\n \n impl Foo for u32 {\n-    const fn foo() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n+    const fn foo() -> u32 { 0 } //~ ERROR functions in traits cannot be declared const\n }\n \n trait Bar {}"}, {"sha": "843e56301375aaadd67f0166d922ac94a862ef93", "filename": "src/test/ui/feature-gates/feature-gate-const_fn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,20 +1,20 @@\n-error[E0379]: trait fns cannot be declared const\n+error[E0379]: functions in traits cannot be declared const\n   --> $DIR/feature-gate-const_fn.rs:6:5\n    |\n LL |     const fn foo() -> u32;\n-   |     ^^^^^ trait fns cannot be const\n+   |     ^^^^^ functions in traits cannot be const\n \n-error[E0379]: trait fns cannot be declared const\n+error[E0379]: functions in traits cannot be declared const\n   --> $DIR/feature-gate-const_fn.rs:8:5\n    |\n LL |     const fn bar() -> u32 { 0 }\n-   |     ^^^^^ trait fns cannot be const\n+   |     ^^^^^ functions in traits cannot be const\n \n-error[E0379]: trait fns cannot be declared const\n+error[E0379]: functions in traits cannot be declared const\n   --> $DIR/feature-gate-const_fn.rs:13:5\n    |\n LL |     const fn foo() -> u32 { 0 }\n-   |     ^^^^^ trait fns cannot be const\n+   |     ^^^^^ functions in traits cannot be const\n \n error[E0658]: const fn is unstable\n   --> $DIR/feature-gate-const_fn.rs:6:5"}, {"sha": "5a01e053ed038e13b3a48c2ac1a1e2e43a684c28", "filename": "src/test/ui/feature-gates/feature-gate-min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -4,13 +4,13 @@ const fn foo() -> usize { 0 } // stabilized\n \n trait Foo {\n     const fn foo() -> u32; //~ ERROR const fn is unstable\n-                           //~| ERROR trait fns cannot be declared const\n+                           //~| ERROR functions in traits cannot be declared const\n     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n-                                //~| ERROR trait fns cannot be declared const\n+                                //~| ERROR functions in traits cannot be declared const\n }\n \n impl Foo for u32 {\n-    const fn foo() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n+    const fn foo() -> u32 { 0 } //~ ERROR functions in traits cannot be declared const\n }\n \n trait Bar {}"}, {"sha": "56a882e30fc4af88c075b8e05752bcd459830aa1", "filename": "src/test/ui/feature-gates/feature-gate-min_const_fn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,20 +1,20 @@\n-error[E0379]: trait fns cannot be declared const\n+error[E0379]: functions in traits cannot be declared const\n   --> $DIR/feature-gate-min_const_fn.rs:6:5\n    |\n LL |     const fn foo() -> u32;\n-   |     ^^^^^ trait fns cannot be const\n+   |     ^^^^^ functions in traits cannot be const\n \n-error[E0379]: trait fns cannot be declared const\n+error[E0379]: functions in traits cannot be declared const\n   --> $DIR/feature-gate-min_const_fn.rs:8:5\n    |\n LL |     const fn bar() -> u32 { 0 }\n-   |     ^^^^^ trait fns cannot be const\n+   |     ^^^^^ functions in traits cannot be const\n \n-error[E0379]: trait fns cannot be declared const\n+error[E0379]: functions in traits cannot be declared const\n   --> $DIR/feature-gate-min_const_fn.rs:13:5\n    |\n LL |     const fn foo() -> u32 { 0 }\n-   |     ^^^^^ trait fns cannot be const\n+   |     ^^^^^ functions in traits cannot be const\n \n error[E0658]: const fn is unstable\n   --> $DIR/feature-gate-min_const_fn.rs:6:5"}, {"sha": "3d6355f5c5978f6cfb516c2dfb85087a787a52ac", "filename": "src/test/ui/issues/issue-54954.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -5,7 +5,7 @@ const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n \n trait Tt {\n     const fn const_val<T: Sized>() -> usize {\n-    //~^ ERROR trait fns cannot be declared const\n+        //~^ ERROR functions in traits cannot be declared const\n         core::mem::size_of::<T>()\n     }\n }"}, {"sha": "4967b82216e46bb689e89e50f20786ff598074b0", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,8 +1,8 @@\n-error[E0379]: trait fns cannot be declared const\n+error[E0379]: functions in traits cannot be declared const\n   --> $DIR/issue-54954.rs:7:5\n    |\n LL |     const fn const_val<T: Sized>() -> usize {\n-   |     ^^^^^ trait fns cannot be const\n+   |     ^^^^^ functions in traits cannot be const\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-54954.rs:3:24"}, {"sha": "1323f646be893596577912b182e53bda5b6b060a", "filename": "src/test/ui/issues/issue-60075.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -6,6 +6,5 @@ trait T {\n         });\n //~^ ERROR expected one of `async`\n //~| ERROR expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n-//~| ERROR expected identifier, found `;`\n         Some(4)\n     }"}, {"sha": "60eb99b46b79f9ace240d3bdee06fa6c2189a48c", "filename": "src/test/ui/issues/issue-60075.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -13,11 +13,5 @@ LL |         let _ = if true {\n LL |         });\n    |           ^ help: `}` may belong here\n \n-error: expected identifier, found `;`\n-  --> $DIR/issue-60075.rs:6:11\n-   |\n-LL |         });\n-   |           ^ expected identifier\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "9d4c72410a6d156f6b43816f07d1eefc0e628f7a", "filename": "src/test/ui/label/label_break_value_illegal_uses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -3,7 +3,7 @@\n // These are forbidden occurrences of label-break-value\n \n fn labeled_unsafe() {\n-    unsafe 'b: {} //~ ERROR expected one of `extern`, `fn`, or `{`\n+    unsafe 'b: {} //~ ERROR expected `{`, found `'b`\n }\n \n fn labeled_if() {"}, {"sha": "fd8850dd8dab255a8a374efffb12ac2f5eec3d60", "filename": "src/test/ui/label/label_break_value_illegal_uses.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `extern`, `fn`, or `{`, found `'b`\n+error: expected `{`, found `'b`\n   --> $DIR/label_break_value_illegal_uses.rs:6:12\n    |\n LL |     unsafe 'b: {}\n-   |            ^^ expected one of `extern`, `fn`, or `{`\n+   |            ^^ expected `{`\n \n error: expected `{`, found `'b`\n   --> $DIR/label_break_value_illegal_uses.rs:10:13"}, {"sha": "817582df27db1c9a0770936a44bd4874266b4a77", "filename": "src/test/ui/mismatched_types/const-fn-in-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,14 +1,14 @@\n-error[E0379]: trait fns cannot be declared const\n+error[E0379]: functions in traits cannot be declared const\n   --> $DIR/const-fn-in-trait.rs:7:5\n    |\n LL |     const fn g();\n-   |     ^^^^^ trait fns cannot be const\n+   |     ^^^^^ functions in traits cannot be const\n \n-error[E0379]: trait fns cannot be declared const\n+error[E0379]: functions in traits cannot be declared const\n   --> $DIR/const-fn-in-trait.rs:11:5\n    |\n LL |     const fn f() -> u32 { 22 }\n-   |     ^^^^^ trait fns cannot be const\n+   |     ^^^^^ functions in traits cannot be const\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6a54ac7f4a520eb8d6549f0140e3470ec37aab41", "filename": "src/test/ui/parser/extern-crate-async.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Fextern-crate-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Fextern-crate-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-crate-async.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -0,0 +1,12 @@\n+// Make sure that we don't parse `extern crate async`\n+// the front matter of a function leading us astray.\n+\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+extern crate async;\n+\n+#[cfg(FALSE)]\n+extern crate async as something_else;"}, {"sha": "7687f5e64094b2c4c52fb59206e85087c12d6d4e", "filename": "src/test/ui/parser/extern-crate-unexpected-token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Fextern-crate-unexpected-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Fextern-crate-unexpected-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-crate-unexpected-token.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1 +1 @@\n-extern crte foo; //~ ERROR expected one of `crate`, `fn`, or `{`, found `crte`\n+extern crte foo; //~ ERROR expected one of `crate` or `{`, found `crte`"}, {"sha": "e9d287ac0e9276a4aa60505ac82ed13c88359e5a", "filename": "src/test/ui/parser/extern-crate-unexpected-token.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Fextern-crate-unexpected-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Fextern-crate-unexpected-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-crate-unexpected-token.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `crate`, `fn`, or `{`, found `crte`\n+error: expected one of `crate` or `{`, found `crte`\n   --> $DIR/extern-crate-unexpected-token.rs:1:8\n    |\n LL | extern crte foo;\n-   |        ^^^^ expected one of `crate`, `fn`, or `{`\n+   |        ^^^^ expected one of `crate` or `{`\n \n error: aborting due to previous error\n "}, {"sha": "1dcea17445e7a7389abf3048b494ba47ff2ae796", "filename": "src/test/ui/parser/extern-expected-fn-or-brace.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,4 +1,3 @@\n-// Verifies that the expected token errors for `extern crate` are\n-// raised\n+// Verifies that the expected token errors for `extern crate` are raised.\n \n-extern \"C\" mod foo; //~ERROR expected one of `fn` or `{`, found keyword `mod`\n+extern \"C\" mod foo; //~ERROR expected `{`, found keyword `mod`"}, {"sha": "258a2c2680aaf4fb9e06360d8343e5094e1f6d4e", "filename": "src/test/ui/parser/extern-expected-fn-or-brace.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-expected-fn-or-brace.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `fn` or `{`, found keyword `mod`\n-  --> $DIR/extern-expected-fn-or-brace.rs:4:12\n+error: expected `{`, found keyword `mod`\n+  --> $DIR/extern-expected-fn-or-brace.rs:3:12\n    |\n LL | extern \"C\" mod foo;\n-   |            ^^^ expected one of `fn` or `{`\n+   |            ^^^ expected `{`\n \n error: aborting due to previous error\n "}, {"sha": "c327667f4cdc7344f1ced7f0fbf8ac6c908c7c7f", "filename": "src/test/ui/parser/fn-header-semantic-fail.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -10,48 +10,49 @@ fn main() {\n     unsafe fn ff2() {} // OK.\n     const fn ff3() {} // OK.\n     extern \"C\" fn ff4() {} // OK.\n-    const /* async */ unsafe extern \"C\" fn ff5() {} // OK.\n-    //^ FIXME(Centril): `async` should be legal syntactically, ensure it's illegal semantically.\n+    const async unsafe extern \"C\" fn ff5() {} // OK.\n+    //~^ ERROR functions cannot be both `const` and `async`\n \n     trait X {\n-        async fn ft1(); //~ ERROR trait fns cannot be declared `async`\n+        async fn ft1(); //~ ERROR functions in traits cannot be declared `async`\n         unsafe fn ft2(); // OK.\n-        const fn ft3(); //~ ERROR trait fns cannot be declared const\n+        const fn ft3(); //~ ERROR functions in traits cannot be declared const\n         extern \"C\" fn ft4(); // OK.\n-        /* const */ async unsafe extern \"C\" fn ft5();\n-        //~^ ERROR trait fns cannot be declared `async`\n-        //^ FIXME(Centril): `const` should be legal syntactically, ensure it's illegal semantically.\n+        const async unsafe extern \"C\" fn ft5();\n+        //~^ ERROR functions in traits cannot be declared `async`\n+        //~| ERROR functions in traits cannot be declared const\n+        //~| ERROR functions cannot be both `const` and `async`\n     }\n \n     struct Y;\n     impl X for Y {\n-        async fn ft1() {} //~ ERROR trait fns cannot be declared `async`\n+        async fn ft1() {} //~ ERROR functions in traits cannot be declared `async`\n         //~^ ERROR method `ft1` has an incompatible type for trait\n         unsafe fn ft2() {} // OK.\n-        const fn ft3() {} //~ ERROR trait fns cannot be declared const\n+        const fn ft3() {} //~ ERROR functions in traits cannot be declared const\n         extern \"C\" fn ft4() {}\n-        /* const */ async unsafe extern \"C\" fn ft5() {}\n-        //~^ ERROR trait fns cannot be declared `async`\n+        const async unsafe extern \"C\" fn ft5() {}\n+        //~^ ERROR functions in traits cannot be declared `async`\n+        //~| ERROR functions in traits cannot be declared const\n         //~| ERROR method `ft5` has an incompatible type for trait\n-        //^ FIXME(Centril): `const` should be legal syntactically, ensure it's illegal semantically.\n+        //~| ERROR functions cannot be both `const` and `async`\n     }\n \n     impl Y {\n         async fn fi1() {} // OK.\n         unsafe fn fi2() {} // OK.\n         const fn fi3() {} // OK.\n         extern \"C\" fn fi4() {} // OK.\n-        /* const */ async unsafe extern \"C\" fn fi5() {} // OK.\n-        //^ FIXME(Centril): `const` should be legal syntactically, ensure it's illegal semantically.\n+        const async unsafe extern \"C\" fn fi5() {}\n+        //~^ ERROR functions cannot be both `const` and `async`\n     }\n \n     extern {\n         async fn fe1(); //~ ERROR functions in `extern` blocks cannot have qualifiers\n         unsafe fn fe2(); //~ ERROR functions in `extern` blocks cannot have qualifiers\n         const fn fe3(); //~ ERROR functions in `extern` blocks cannot have qualifiers\n         extern \"C\" fn fe4(); //~ ERROR functions in `extern` blocks cannot have qualifiers\n-        /* const */ async unsafe extern \"C\" fn fe5();\n-        //~^ ERROR functions in `extern` blocks cannot have qualifiers\n-        //^ FIXME(Centril): `const` should be legal syntactically, ensure it's illegal semantically.\n+        const async unsafe extern \"C\" fn fe5(); //~ ERROR functions in `extern` blocks\n+        //~^ ERROR functions cannot be both `const` and `async`\n     }\n }"}, {"sha": "1142cee9851b02c6c1397cd701f371441d05598f", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 102, "deletions": 37, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,53 +1,109 @@\n-error[E0706]: trait fns cannot be declared `async`\n+error: functions cannot be both `const` and `async`\n+  --> $DIR/fn-header-semantic-fail.rs:13:5\n+   |\n+LL |     const async unsafe extern \"C\" fn ff5() {} // OK.\n+   |     -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |     |\n+   |     |     `async` because of this\n+   |     `const` because of this\n+\n+error[E0706]: functions in traits cannot be declared `async`\n   --> $DIR/fn-header-semantic-fail.rs:17:9\n    |\n LL |         async fn ft1();\n-   |         ^^^^^^^^^^^^^^^\n+   |         -----^^^^^^^^^^\n+   |         |\n+   |         `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n-error[E0379]: trait fns cannot be declared const\n+error[E0379]: functions in traits cannot be declared const\n   --> $DIR/fn-header-semantic-fail.rs:19:9\n    |\n LL |         const fn ft3();\n-   |         ^^^^^ trait fns cannot be const\n+   |         ^^^^^ functions in traits cannot be const\n+\n+error[E0379]: functions in traits cannot be declared const\n+  --> $DIR/fn-header-semantic-fail.rs:21:9\n+   |\n+LL |         const async unsafe extern \"C\" fn ft5();\n+   |         ^^^^^ functions in traits cannot be const\n \n-error[E0706]: trait fns cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:21:21\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/fn-header-semantic-fail.rs:21:9\n    |\n-LL |         /* const */ async unsafe extern \"C\" fn ft5();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         const async unsafe extern \"C\" fn ft5();\n+   |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               |\n+   |               `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n-error[E0706]: trait fns cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:28:9\n+error: functions cannot be both `const` and `async`\n+  --> $DIR/fn-header-semantic-fail.rs:21:9\n+   |\n+LL |         const async unsafe extern \"C\" fn ft5();\n+   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |     |\n+   |         |     `async` because of this\n+   |         `const` because of this\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/fn-header-semantic-fail.rs:29:9\n    |\n LL |         async fn ft1() {}\n-   |         ^^^^^^^^^^^^^^^^^\n+   |         -----^^^^^^^^^^^^\n+   |         |\n+   |         `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n-error[E0379]: trait fns cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:31:9\n+error[E0379]: functions in traits cannot be declared const\n+  --> $DIR/fn-header-semantic-fail.rs:32:9\n    |\n LL |         const fn ft3() {}\n-   |         ^^^^^ trait fns cannot be const\n+   |         ^^^^^ functions in traits cannot be const\n+\n+error[E0379]: functions in traits cannot be declared const\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n+   |\n+LL |         const async unsafe extern \"C\" fn ft5() {}\n+   |         ^^^^^ functions in traits cannot be const\n \n-error[E0706]: trait fns cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:33:21\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n-LL |         /* const */ async unsafe extern \"C\" fn ft5() {}\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         const async unsafe extern \"C\" fn ft5() {}\n+   |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               |\n+   |               `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n+error: functions cannot be both `const` and `async`\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n+   |\n+LL |         const async unsafe extern \"C\" fn ft5() {}\n+   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |     |\n+   |         |     `async` because of this\n+   |         `const` because of this\n+\n+error: functions cannot be both `const` and `async`\n+  --> $DIR/fn-header-semantic-fail.rs:46:9\n+   |\n+LL |         const async unsafe extern \"C\" fn fi5() {}\n+   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |     |\n+   |         |     `async` because of this\n+   |         `const` because of this\n+\n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:49:18\n+  --> $DIR/fn-header-semantic-fail.rs:51:18\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -57,7 +113,7 @@ LL |         async fn fe1();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:50:19\n+  --> $DIR/fn-header-semantic-fail.rs:52:19\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -68,7 +124,7 @@ LL |         unsafe fn fe2();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:51:18\n+  --> $DIR/fn-header-semantic-fail.rs:53:18\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -79,7 +135,7 @@ LL |         const fn fe3();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:52:23\n+  --> $DIR/fn-header-semantic-fail.rs:54:23\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -90,18 +146,27 @@ LL |         extern \"C\" fn fe4();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:53:48\n+  --> $DIR/fn-header-semantic-fail.rs:55:42\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n ...\n-LL |         /* const */ async unsafe extern \"C\" fn fe5();\n-   |                     ---------------------------^^^\n-   |                     |\n-   |                     help: remove the qualifiers: `fn`\n+LL |         const async unsafe extern \"C\" fn fe5();\n+   |         ---------------------------------^^^\n+   |         |\n+   |         help: remove the qualifiers: `fn`\n+\n+error: functions cannot be both `const` and `async`\n+  --> $DIR/fn-header-semantic-fail.rs:55:9\n+   |\n+LL |         const async unsafe extern \"C\" fn fe5();\n+   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |     |\n+   |         |     `async` because of this\n+   |         `const` because of this\n \n error[E0053]: method `ft1` has an incompatible type for trait\n-  --> $DIR/fn-header-semantic-fail.rs:28:24\n+  --> $DIR/fn-header-semantic-fail.rs:29:24\n    |\n LL |         async fn ft1();\n    |                       - type in trait\n@@ -116,21 +181,21 @@ LL |         async fn ft1() {}\n               found fn pointer `fn() -> impl std::future::Future`\n \n error[E0053]: method `ft5` has an incompatible type for trait\n-  --> $DIR/fn-header-semantic-fail.rs:33:54\n+  --> $DIR/fn-header-semantic-fail.rs:34:48\n    |\n-LL |         /* const */ async unsafe extern \"C\" fn ft5();\n-   |                                                     - type in trait\n+LL |         const async unsafe extern \"C\" fn ft5();\n+   |                                               - type in trait\n ...\n-LL |         /* const */ async unsafe extern \"C\" fn ft5() {}\n-   |                                                      ^\n-   |                                                      |\n-   |                                                      the `Output` of this `async fn`'s found opaque type\n-   |                                                      expected `()`, found opaque type\n+LL |         const async unsafe extern \"C\" fn ft5() {}\n+   |                                                ^\n+   |                                                |\n+   |                                                the `Output` of this `async fn`'s found opaque type\n+   |                                                expected `()`, found opaque type\n    |\n    = note: expected fn pointer `unsafe extern \"C\" fn()`\n               found fn pointer `unsafe extern \"C\" fn() -> impl std::future::Future`\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 20 previous errors\n \n Some errors have detailed explanations: E0053, E0379, E0706.\n For more information about an error, try `rustc --explain E0053`."}, {"sha": "9e44541993d92b3ed8638723ce63ff7af67f4718", "filename": "src/test/ui/parser/fn-header-syntactic-pass.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Ffn-header-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Ffn-header-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-syntactic-pass.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -3,9 +3,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(const_extern_fn)]\n-//^ FIXME(Centril): move check to ast_validation.\n-\n fn main() {}\n \n #[cfg(FALSE)]\n@@ -14,42 +11,37 @@ fn syntax() {\n     unsafe fn f();\n     const fn f();\n     extern \"C\" fn f();\n-    const /* async */ unsafe extern \"C\" fn f();\n-    //^ FIXME(Centril): `async` should be legal syntactically.\n+    const async unsafe extern \"C\" fn f();\n \n     trait X {\n         async fn f();\n         unsafe fn f();\n         const fn f();\n         extern \"C\" fn f();\n-        /* const */ async unsafe extern \"C\" fn f();\n-        //^ FIXME(Centril): `const` should be legal syntactically.\n+        const async unsafe extern \"C\" fn f();\n     }\n \n     impl X for Y {\n         async fn f();\n         unsafe fn f();\n         const fn f();\n         extern \"C\" fn f();\n-        /* const */ async unsafe extern \"C\" fn f();\n-        //^ FIXME(Centril): `const` should be legal syntactically.\n+        const async unsafe extern \"C\" fn f();\n     }\n \n     impl Y {\n         async fn f();\n         unsafe fn f();\n         const fn f();\n         extern \"C\" fn f();\n-        /* const */ async unsafe extern \"C\" fn f();\n-        //^ FIXME(Centril): `const` should be legal syntactically.\n+        const async unsafe extern \"C\" fn f();\n     }\n \n     extern {\n         async fn f();\n         unsafe fn f();\n         const fn f();\n         extern \"C\" fn f();\n-        /* const */ async unsafe extern \"C\" fn f();\n-        //^ FIXME(Centril): `const` should be legal syntactically.\n+        const async unsafe extern \"C\" fn f();\n     }\n }"}, {"sha": "2158a2fd6c11cb70a8c25a1f3edd2b3ff7b5e084", "filename": "src/test/ui/parser/issue-19398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,5 +1,5 @@\n trait T {\n-    extern \"Rust\" unsafe fn foo(); //~ ERROR expected `fn`, found keyword `unsafe`\n+    extern \"Rust\" unsafe fn foo(); //~ ERROR expected one of `async`, `const`\n }\n \n fn main() {}"}, {"sha": "201a6b2d66a7cba92566bd127e69eee9b4e40cfc", "filename": "src/test/ui/parser/issue-19398.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,8 +1,10 @@\n-error: expected `fn`, found keyword `unsafe`\n-  --> $DIR/issue-19398.rs:2:19\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found keyword `extern`\n+  --> $DIR/issue-19398.rs:2:5\n    |\n+LL | trait T {\n+   |          - expected one of 10 possible tokens\n LL |     extern \"Rust\" unsafe fn foo();\n-   |                   ^^^^^^ expected `fn`\n+   |     ^^^^^^ unexpected token\n \n error: aborting due to previous error\n "}, {"sha": "061af3c94b44d36af4b9d8db83a0bc52cd535520", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.gated.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -2,7 +2,9 @@ error: const trait impls are not yet implemented\n   --> $DIR/feature-gate.rs:9:1\n    |\n LL | impl const T for S {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^-----^^^^^^^^^^^\n+   |      |\n+   |      const because of this\n \n error: aborting due to previous error\n "}, {"sha": "cfe226ea7a7ce0053795818c67700b546288d499", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.stock.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -11,7 +11,9 @@ error: const trait impls are not yet implemented\n   --> $DIR/feature-gate.rs:9:1\n    |\n LL | impl const T for S {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^-----^^^^^^^^^^^\n+   |      |\n+   |      const because of this\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bdc95ff2a57b5339d86248245928a9bddc052990", "filename": "src/test/ui/rfc-2632-const-trait-impl/inherent-impl.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -2,29 +2,37 @@ error: inherent impls cannot be `const`\n   --> $DIR/inherent-impl.rs:9:1\n    |\n LL | impl const S {}\n-   | ^^^^^^^^^^^^^^^\n+   | ^^^^^-----^^^^^\n+   |      |\n+   |      `const` because of this\n    |\n    = note: only trait implementations may be annotated with `const`\n \n error: inherent impls cannot be `const`\n   --> $DIR/inherent-impl.rs:13:1\n    |\n LL | impl const T {}\n-   | ^^^^^^^^^^^^^^^\n+   | ^^^^^-----^^^^^\n+   |      |\n+   |      `const` because of this\n    |\n    = note: only trait implementations may be annotated with `const`\n \n error: const trait impls are not yet implemented\n   --> $DIR/inherent-impl.rs:9:1\n    |\n LL | impl const S {}\n-   | ^^^^^^^^^^^^^^^\n+   | ^^^^^-----^^^^^\n+   |      |\n+   |      const because of this\n \n error: const trait impls are not yet implemented\n   --> $DIR/inherent-impl.rs:13:1\n    |\n LL | impl const T {}\n-   | ^^^^^^^^^^^^^^^\n+   | ^^^^^-----^^^^^\n+   |      |\n+   |      const because of this\n \n error: aborting due to 4 previous errors\n "}, {"sha": "fef3a65088855df8fc32db0b11704f7fbc931549", "filename": "src/test/ui/syntax-trait-polarity.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -8,7 +8,9 @@ error[E0198]: negative impls cannot be unsafe\n   --> $DIR/syntax-trait-polarity.rs:12:1\n    |\n LL | unsafe impl !Send for TestType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | unsafe because of this\n \n error: inherent impls cannot be negative\n   --> $DIR/syntax-trait-polarity.rs:19:1\n@@ -20,7 +22,9 @@ error[E0198]: negative impls cannot be unsafe\n   --> $DIR/syntax-trait-polarity.rs:22:1\n    |\n LL | unsafe impl<T> !Send for TestType2<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | unsafe because of this\n \n error[E0192]: negative impls are only allowed for auto traits (e.g., `Send` and `Sync`)\n   --> $DIR/syntax-trait-polarity.rs:14:1"}, {"sha": "c398785d3949ec13b314db720fbc8ea55ec385e9", "filename": "src/test/ui/traits/trait-safety-inherent-impl.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,7 +1,11 @@\n error[E0197]: inherent impls cannot be unsafe\n   --> $DIR/trait-safety-inherent-impl.rs:5:1\n    |\n-LL | / unsafe impl SomeStruct {\n+LL |   unsafe impl SomeStruct {\n+   |   ^-----\n+   |   |\n+   |  _unsafe because of this\n+   | |\n LL | |     fn foo(self) { }\n LL | | }\n    | |_^"}, {"sha": "4e461161854e67dd90ebb80aa60edc111bc40511", "filename": "src/test/ui/unsafe/unsafe-block-without-braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.rs?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -3,4 +3,4 @@ fn main() {\n         std::mem::transmute::<f32, u32>(1.0);\n     //}\n }\n-//~^^^ ERROR expected one of `extern`, `fn`, or `{`, found `std`\n+//~^^^ ERROR expected `{`, found `std`"}, {"sha": "13e0c3681fa0070b3990cb9fb8c7dc0bd7b274ad", "filename": "src/test/ui/unsafe/unsafe-block-without-braces.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be493fe8cc40c3d3f6030a1313c1ff747fce770d/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.stderr?ref=be493fe8cc40c3d3f6030a1313c1ff747fce770d", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `extern`, `fn`, or `{`, found `std`\n+error: expected `{`, found `std`\n   --> $DIR/unsafe-block-without-braces.rs:3:9\n    |\n LL |     unsafe //{\n-   |           - expected one of `extern`, `fn`, or `{`\n+   |           - expected `{`\n LL |         std::mem::transmute::<f32, u32>(1.0);\n    |         ^^^ unexpected token\n "}]}