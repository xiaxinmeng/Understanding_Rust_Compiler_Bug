{"sha": "046e46672b47d0530afc7cbc81f099ee0c15ac70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NmU0NjY3MmI0N2QwNTMwYWZjN2NiYzgxZjA5OWVlMGMxNWFjNzA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-10T10:24:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-10T10:24:29Z"}, "message": "Merge #2782\n\n2782: Use correct rustfmt for codegen r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "23071b83610a2d0b61ffcb606f83c3e95a2809bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23071b83610a2d0b61ffcb606f83c3e95a2809bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/046e46672b47d0530afc7cbc81f099ee0c15ac70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeGFDdCRBK7hj4Ov3rIwAAdHIIAITxkQKcm1kfMVGH1zbk3vDr\ncXhyvmMTnOLYynSYVJZSxttOVygJORJAkxi/TL0OJiNFm3VxSl2i30Kx5sDwED8m\n34tVx/QqLIzXTpKRHWhRGwi5KtoRV0qmT9ivvIpwd20wQe3XOstq4nb3E2lnmDqW\nif/Rx+eozFvMJRUXtAw4XwWObJcAM1fhcZy+jIys6elwCe55sSm7pOzIBUpWM66K\nqS55S2upniLApeHYLiziTlb3AF7UnWb+yDiWrFayjMhp1mEiZt7ixutAEZuBlPOG\nBKfRIMpEBjrR1+KBQvlDYqkuGoKSDdicAqznv4I1SNGZuPd9qf+2dB2enmsCdRM=\n=gFWw\n-----END PGP SIGNATURE-----\n", "payload": "tree 23071b83610a2d0b61ffcb606f83c3e95a2809bd\nparent b77a7e29a5b345a5dcdf427a0b332630147bcd5b\nparent fd394ff424a8abde35f24643dfabbd5bd3f2f43c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1578651869 +0000\ncommitter GitHub <noreply@github.com> 1578651869 +0000\n\nMerge #2782\n\n2782: Use correct rustfmt for codegen r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/046e46672b47d0530afc7cbc81f099ee0c15ac70", "html_url": "https://github.com/rust-lang/rust/commit/046e46672b47d0530afc7cbc81f099ee0c15ac70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/046e46672b47d0530afc7cbc81f099ee0c15ac70/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b77a7e29a5b345a5dcdf427a0b332630147bcd5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b77a7e29a5b345a5dcdf427a0b332630147bcd5b", "html_url": "https://github.com/rust-lang/rust/commit/b77a7e29a5b345a5dcdf427a0b332630147bcd5b"}, {"sha": "fd394ff424a8abde35f24643dfabbd5bd3f2f43c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd394ff424a8abde35f24643dfabbd5bd3f2f43c", "html_url": "https://github.com/rust-lang/rust/commit/fd394ff424a8abde35f24643dfabbd5bd3f2f43c"}], "stats": {"total": 67, "additions": 32, "deletions": 35}, "files": [{"sha": "efa638e0603f2d4020e6f0cb575ce9a0ba17e612", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/046e46672b47d0530afc7cbc81f099ee0c15ac70/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046e46672b47d0530afc7cbc81f099ee0c15ac70/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=046e46672b47d0530afc7cbc81f099ee0c15ac70", "patch": "@@ -9,15 +9,9 @@ mod gen_syntax;\n mod gen_parser_tests;\n mod gen_assists_docs;\n \n-use std::{\n-    fs,\n-    io::Write,\n-    mem,\n-    path::Path,\n-    process::{Command, Stdio},\n-};\n+use std::{fs, mem, path::Path};\n \n-use crate::{project_root, Result};\n+use crate::Result;\n \n pub use self::{\n     gen_assists_docs::generate_assists_docs, gen_parser_tests::generate_parser_tests,\n@@ -62,20 +56,6 @@ fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n     }\n }\n \n-fn reformat(text: impl std::fmt::Display) -> Result<String> {\n-    let mut rustfmt = Command::new(\"rustfmt\")\n-        .arg(\"--config-path\")\n-        .arg(project_root().join(\"rustfmt.toml\"))\n-        .stdin(Stdio::piped())\n-        .stdout(Stdio::piped())\n-        .spawn()?;\n-    write!(rustfmt.stdin.take().unwrap(), \"{}\", text)?;\n-    let output = rustfmt.wait_with_output()?;\n-    let stdout = String::from_utf8(output.stdout)?;\n-    let preamble = \"Generated file, do not edit by hand, see `crate/ra_tools/src/codegen`\";\n-    Ok(format!(\"//! {}\\n\\n{}\", preamble, stdout))\n-}\n-\n fn extract_comment_blocks(text: &str) -> Vec<Vec<String>> {\n     do_extract_comment_blocks(text, false)\n }"}, {"sha": "69f9b487288ac4ebe1c06c305d84b08067882e47", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/046e46672b47d0530afc7cbc81f099ee0c15ac70/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046e46672b47d0530afc7cbc81f099ee0c15ac70/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=046e46672b47d0530afc7cbc81f099ee0c15ac70", "patch": "@@ -102,7 +102,7 @@ r#####\"\n \n         buf.push_str(&test)\n     }\n-    let buf = codegen::reformat(buf)?;\n+    let buf = crate::reformat(buf)?;\n     codegen::update(&project_root().join(codegen::ASSISTS_TESTS), &buf, mode)\n }\n "}, {"sha": "19fea67d8bfbc064345763969da6ad325261cfda", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/046e46672b47d0530afc7cbc81f099ee0c15ac70/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046e46672b47d0530afc7cbc81f099ee0c15ac70/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=046e46672b47d0530afc7cbc81f099ee0c15ac70", "patch": "@@ -152,7 +152,7 @@ fn generate_ast(grammar: AstSrc<'_>) -> Result<String> {\n         #(#enums)*\n     };\n \n-    let pretty = codegen::reformat(ast)?;\n+    let pretty = crate::reformat(ast)?;\n     Ok(pretty)\n }\n \n@@ -265,7 +265,7 @@ fn generate_syntax_kinds(grammar: KindsSrc<'_>) -> Result<String> {\n         }\n     };\n \n-    codegen::reformat(ast)\n+    crate::reformat(ast)\n }\n \n fn to_upper_snake_case(s: &str) -> String {"}, {"sha": "0a569cf5dc6fb8d9fcf33f0a1645e6b28c43e4e1", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/046e46672b47d0530afc7cbc81f099ee0c15ac70/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046e46672b47d0530afc7cbc81f099ee0c15ac70/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=046e46672b47d0530afc7cbc81f099ee0c15ac70", "patch": "@@ -10,6 +10,7 @@ mod ast_src;\n use anyhow::Context;\n use std::{\n     env, fs,\n+    io::Write,\n     path::{Path, PathBuf},\n     process::{Command, Stdio},\n };\n@@ -31,15 +32,7 @@ pub fn project_root() -> PathBuf {\n }\n \n pub fn run_rustfmt(mode: Mode) -> Result<()> {\n-    match Command::new(\"rustup\")\n-        .args(&[\"run\", TOOLCHAIN, \"--\", \"cargo\", \"fmt\", \"--version\"])\n-        .stderr(Stdio::null())\n-        .stdout(Stdio::null())\n-        .status()\n-    {\n-        Ok(status) if status.success() => (),\n-        _ => install_rustfmt().context(\"install rustfmt\")?,\n-    };\n+    ensure_rustfmt()?;\n \n     if mode == Mode::Verify {\n         run(&format!(\"rustup run {} -- cargo fmt -- --check\", TOOLCHAIN), \".\")?;\n@@ -49,7 +42,31 @@ pub fn run_rustfmt(mode: Mode) -> Result<()> {\n     Ok(())\n }\n \n-fn install_rustfmt() -> Result<()> {\n+fn reformat(text: impl std::fmt::Display) -> Result<String> {\n+    ensure_rustfmt()?;\n+    let mut rustfmt = Command::new(\"rustup\")\n+        .args(&[\"run\", TOOLCHAIN, \"--\", \"rustfmt\", \"--config-path\"])\n+        .arg(project_root().join(\"rustfmt.toml\"))\n+        .stdin(Stdio::piped())\n+        .stdout(Stdio::piped())\n+        .spawn()?;\n+    write!(rustfmt.stdin.take().unwrap(), \"{}\", text)?;\n+    let output = rustfmt.wait_with_output()?;\n+    let stdout = String::from_utf8(output.stdout)?;\n+    let preamble = \"Generated file, do not edit by hand, see `crate/ra_tools/src/codegen`\";\n+    Ok(format!(\"//! {}\\n\\n{}\", preamble, stdout))\n+}\n+\n+fn ensure_rustfmt() -> Result<()> {\n+    match Command::new(\"rustup\")\n+        .args(&[\"run\", TOOLCHAIN, \"--\", \"cargo\", \"fmt\", \"--version\"])\n+        .stderr(Stdio::null())\n+        .stdout(Stdio::null())\n+        .status()\n+    {\n+        Ok(status) if status.success() => return Ok(()),\n+        _ => (),\n+    };\n     run(&format!(\"rustup toolchain install {}\", TOOLCHAIN), \".\")?;\n     run(&format!(\"rustup component add rustfmt --toolchain {}\", TOOLCHAIN), \".\")\n }"}]}