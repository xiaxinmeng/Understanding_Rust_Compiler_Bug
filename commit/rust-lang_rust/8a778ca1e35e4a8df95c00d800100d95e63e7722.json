{"sha": "8a778ca1e35e4a8df95c00d800100d95e63e7722", "node_id": "C_kwDOAAsO6NoAKDhhNzc4Y2ExZTM1ZTRhOGRmOTVjMDBkODAwMTAwZDk1ZTYzZTc3MjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T13:12:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T13:12:53Z"}, "message": "Auto merge of #110405 - fee1-dead-contrib:rollup-9rkree6, r=fee1-dead\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #110397 (Move some utils out of `rustc_const_eval`)\n - #110398 (use matches! macro in more places)\n - #110400 (more clippy fixes: clippy::{iter_cloned_collect, unwarp_or_else_defau\u2026)\n - #110402 (Remove the loop in `Align::from_bytes`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f74a5282fe636aa9e51d238b2cb46a9092a5c38b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f74a5282fe636aa9e51d238b2cb46a9092a5c38b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a778ca1e35e4a8df95c00d800100d95e63e7722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a778ca1e35e4a8df95c00d800100d95e63e7722", "html_url": "https://github.com/rust-lang/rust/commit/8a778ca1e35e4a8df95c00d800100d95e63e7722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a778ca1e35e4a8df95c00d800100d95e63e7722/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "html_url": "https://github.com/rust-lang/rust/commit/1b50ea9abb65b33aac7285dbe36b37f9e33381a2"}, {"sha": "38215fb77aca2dcd25277ff7b3093ea56e4e8ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/38215fb77aca2dcd25277ff7b3093ea56e4e8ffb", "html_url": "https://github.com/rust-lang/rust/commit/38215fb77aca2dcd25277ff7b3093ea56e4e8ffb"}], "stats": {"total": 205, "additions": 91, "deletions": 114}, "files": [{"sha": "dee613226a895a48f8d9923f026e1449b072d914", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -4421,7 +4421,6 @@ dependencies = [\n  \"either\",\n  \"itertools\",\n  \"polonius-engine\",\n- \"rustc_const_eval\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_graphviz\","}, {"sha": "7a3defd2a5dc4aff0a56c6ab3a9c151d92ef667b", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -665,15 +665,12 @@ impl Align {\n             format!(\"`{}` is too large\", align)\n         }\n \n-        let mut bytes = align;\n-        let mut pow2: u8 = 0;\n-        while (bytes & 1) == 0 {\n-            pow2 += 1;\n-            bytes >>= 1;\n-        }\n-        if bytes != 1 {\n+        let tz = align.trailing_zeros();\n+        if align != (1 << tz) {\n             return Err(not_power_of_2(align));\n         }\n+\n+        let pow2 = tz as u8;\n         if pow2 > Self::MAX.pow2 {\n             return Err(too_large(align));\n         }"}, {"sha": "ab0409efb3b296eff4ab293f6163a94ffab68a50", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -1298,17 +1298,17 @@ impl Expr {\n \n     /// To a first-order approximation, is this a pattern?\n     pub fn is_approximately_pattern(&self) -> bool {\n-        match &self.peel_parens().kind {\n+        matches!(\n+            &self.peel_parens().kind,\n             ExprKind::Array(_)\n-            | ExprKind::Call(_, _)\n-            | ExprKind::Tup(_)\n-            | ExprKind::Lit(_)\n-            | ExprKind::Range(_, _, _)\n-            | ExprKind::Underscore\n-            | ExprKind::Path(_, _)\n-            | ExprKind::Struct(_) => true,\n-            _ => false,\n-        }\n+                | ExprKind::Call(_, _)\n+                | ExprKind::Tup(_)\n+                | ExprKind::Lit(_)\n+                | ExprKind::Range(_, _, _)\n+                | ExprKind::Underscore\n+                | ExprKind::Path(_, _)\n+                | ExprKind::Struct(_)\n+        )\n     }\n }\n "}, {"sha": "2af47e11637c588a47dc22ab9c8a061cd3c39432", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -332,10 +332,7 @@ enum FnDeclKind {\n \n impl FnDeclKind {\n     fn param_impl_trait_allowed(&self) -> bool {\n-        match self {\n-            FnDeclKind::Fn | FnDeclKind::Inherent | FnDeclKind::Impl | FnDeclKind::Trait => true,\n-            _ => false,\n-        }\n+        matches!(self, FnDeclKind::Fn | FnDeclKind::Inherent | FnDeclKind::Impl | FnDeclKind::Trait)\n     }\n \n     fn return_impl_trait_allowed(&self, tcx: TyCtxt<'_>) -> bool {"}, {"sha": "e0bb87336e54ae2a86a5dee4f763afeb75316840", "filename": "compiler/rustc_borrowck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2FCargo.toml?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -20,7 +20,6 @@ rustc_infer = { path = \"../rustc_infer\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_middle = { path = \"../rustc_middle\" }\n-rustc_const_eval = { path = \"../rustc_const_eval\" }\n rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "6259ae47e896b4238fa31a32e9437ceb179bcef0", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -1,5 +1,4 @@\n use either::Either;\n-use rustc_const_eval::util::CallKind;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::{\n@@ -18,6 +17,7 @@ use rustc_middle::mir::{\n     ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind, VarBindingForm,\n };\n use rustc_middle::ty::{self, suggest_constraining_type_params, PredicateKind, Ty};\n+use rustc_middle::util::CallKind;\n use rustc_mir_dataflow::move_paths::{InitKind, MoveOutIndex, MovePathIndex};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::hygiene::DesugaringKind;\n@@ -2424,7 +2424,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Some((method_did, method_substs)),\n         ) = (\n             &self.body[loan.reserve_location.block].terminator,\n-            rustc_const_eval::util::find_self_call(\n+            rustc_middle::util::find_self_call(\n                 tcx,\n                 self.body,\n                 loan.assigned_place.local,"}, {"sha": "dd003b5b0402b1e1a1718d09ad332a245f69f0ba", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -1,7 +1,6 @@\n //! Borrow checker diagnostics.\n \n use itertools::Itertools;\n-use rustc_const_eval::util::{call_kind, CallDesugaringKind};\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, Namespace};\n@@ -15,6 +14,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::print::Print;\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n+use rustc_middle::util::{call_kind, CallDesugaringKind};\n use rustc_mir_dataflow::move_paths::{InitLocation, LookupResult};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{symbol::sym, Span, Symbol, DUMMY_SP};\n@@ -45,7 +45,7 @@ pub(crate) use mutability_errors::AccessKind;\n pub(crate) use outlives_suggestion::OutlivesSuggestionBuilder;\n pub(crate) use region_errors::{ErrorConstraintInfo, RegionErrorKind, RegionErrors};\n pub(crate) use region_name::{RegionName, RegionNameSource};\n-pub(crate) use rustc_const_eval::util::CallKind;\n+pub(crate) use rustc_middle::util::CallKind;\n \n pub(super) struct DescribePlaceOpt {\n     pub including_downcast: bool,\n@@ -874,7 +874,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }) = &self.body[location.block].terminator\n         {\n             let Some((method_did, method_substs)) =\n-                rustc_const_eval::util::find_self_call(\n+            rustc_middle::util::find_self_call(\n                     self.infcx.tcx,\n                     &self.body,\n                     target_temp,"}, {"sha": "9c907147e5ad9a615f363de07ec7930ce51f4142", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -15,8 +15,8 @@ use rustc_span::{sym, BytePos, Span};\n use rustc_target::abi::FieldIdx;\n \n use crate::diagnostics::BorrowedContentSource;\n+use crate::util::FindAssignments;\n use crate::MirBorrowckCtxt;\n-use rustc_const_eval::util::collect_writes::FindAssignments;\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub(crate) enum AccessKind {"}, {"sha": "fdd82c7e3b281e6f44c723b218379f6f73f7406f", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -88,6 +88,7 @@ mod session_diagnostics;\n mod type_check;\n mod universal_regions;\n mod used_muts;\n+mod util;\n \n /// A public API provided for the Rust compiler consumers.\n pub mod consumers;"}, {"sha": "8d92bb359385780cdccebde4885f6c141640dc9b", "filename": "compiler/rustc_borrowck/src/util/collect_writes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_borrowck%2Fsrc%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_borrowck%2Fsrc%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Futil%2Fcollect_writes.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "previous_filename": "compiler/rustc_const_eval/src/util/collect_writes.rs"}, {"sha": "7377d4de7274f93d180207ee6301feb519f6f12e", "filename": "compiler/rustc_borrowck/src/util/mod.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_borrowck%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_borrowck%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Futil%2Fmod.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -0,0 +1,3 @@\n+mod collect_writes;\n+\n+pub use collect_writes::FindAssignments;"}, {"sha": "4fe842856aad1e9d9cae9c5a00a58de9c51ffac9", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -14,14 +14,14 @@ use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{suggest_constraining_type_param, Adt, Closure, FnDef, FnPtr, Param, Ty};\n use rustc_middle::ty::{Binder, TraitRef};\n+use rustc_middle::util::{call_kind, CallDesugaringKind, CallKind};\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, Pos, Span, Symbol};\n use rustc_trait_selection::traits::SelectionContext;\n \n use super::ConstCx;\n use crate::errors;\n-use crate::util::{call_kind, CallDesugaringKind, CallKind};\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum Status {"}, {"sha": "7641f560714d40052f1f28f11afd837d7c603290", "filename": "compiler/rustc_const_eval/src/util/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -1,14 +1,9 @@\n mod alignment;\n-mod call_kind;\n mod check_validity_requirement;\n-pub mod collect_writes;\n mod compare_types;\n-mod find_self_call;\n mod type_name;\n \n pub use self::alignment::is_disaligned;\n-pub use self::call_kind::{call_kind, CallDesugaringKind, CallKind};\n pub use self::check_validity_requirement::check_validity_requirement;\n pub use self::compare_types::{is_equal_up_to_subtyping, is_subtype};\n-pub use self::find_self_call::find_self_call;\n pub use self::type_name::type_name;"}, {"sha": "30bf8c2ad104bb03e6d01b019d83bf7b27eb38f3", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -234,10 +234,7 @@ impl DefKind {\n \n     #[inline]\n     pub fn is_fn_like(self) -> bool {\n-        match self {\n-            DefKind::Fn | DefKind::AssocFn | DefKind::Closure | DefKind::Generator => true,\n-            _ => false,\n-        }\n+        matches!(self, DefKind::Fn | DefKind::AssocFn | DefKind::Closure | DefKind::Generator)\n     }\n \n     /// Whether `query get_codegen_attrs` should be used with this definition."}, {"sha": "863a9977446c16ee850598f695d20ccaf917c0a0", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -1317,7 +1317,7 @@ fn compare_number_of_generics<'tcx>(\n                         impl_count,\n                         kind,\n                         pluralize!(impl_count),\n-                        suffix.unwrap_or_else(String::new),\n+                        suffix.unwrap_or_default(),\n                     ),\n                 );\n             }"}, {"sha": "7c07a1ebaec079e58eba9133906b1197ecb44896", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -1457,10 +1457,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n }\n \n fn is_foreign_item(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n-    match tcx.hir().get_by_def_id(def_id) {\n-        Node::ForeignItem(..) => true,\n-        _ => false,\n-    }\n+    matches!(tcx.hir().get_by_def_id(def_id), Node::ForeignItem(..))\n }\n \n fn generator_kind(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<hir::GeneratorKind> {"}, {"sha": "ffc73d64fc04b26b47e8f417b12ce4ec11114063", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -1735,10 +1735,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             } else {\n                 self.check_expr_has_type_or_error(base_expr, adt_ty, |_| {\n                     let base_ty = self.typeck_results.borrow().expr_ty(*base_expr);\n-                    let same_adt = match (adt_ty.kind(), base_ty.kind()) {\n-                        (ty::Adt(adt, _), ty::Adt(base_adt, _)) if adt == base_adt => true,\n-                        _ => false,\n-                    };\n+                    let same_adt = matches!((adt_ty.kind(), base_ty.kind()),\n+                        (ty::Adt(adt, _), ty::Adt(base_adt, _)) if adt == base_adt);\n                     if self.tcx.sess.is_nightly_build() && same_adt {\n                         feature_err(\n                             &self.tcx.sess.parse_sess,"}, {"sha": "27c3b796d14e53947450e6697ce69eb6ab25febe", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -312,13 +312,10 @@ pub fn suggest_new_region_bound(\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n-                } else if opaque.bounds.iter().any(|arg| match arg {\n-                    GenericBound::Outlives(Lifetime { ident, .. })\n-                        if ident.name.to_string() == lifetime_name =>\n-                    {\n-                        true\n-                    }\n-                    _ => false,\n+                } else if opaque.bounds.iter().any(|arg| {\n+                    matches!(arg,\n+                        GenericBound::Outlives(Lifetime { ident, .. })\n+                        if ident.name.to_string() == lifetime_name )\n                 }) {\n                 } else {\n                     // get a lifetime name of existing named lifetimes if any"}, {"sha": "f263a0773e4e17b55a06d878ed2b54efb674bd53", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -1577,10 +1577,10 @@ impl<'tcx> InferCtxt<'tcx> {\n             (TyOrConstInferVar::Ty(ty_var), Ok(inner)) => {\n                 use self::type_variable::TypeVariableValue;\n \n-                match inner.try_type_variables_probe_ref(ty_var) {\n-                    Some(TypeVariableValue::Unknown { .. }) => true,\n-                    _ => false,\n-                }\n+                matches!(\n+                    inner.try_type_variables_probe_ref(ty_var),\n+                    Some(TypeVariableValue::Unknown { .. })\n+                )\n             }\n             _ => false,\n         };"}, {"sha": "9dd4f0a8e4cece6daffbc17f017f659f42d642d7", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -89,10 +89,10 @@ impl<'tcx> PredicateObligation<'tcx> {\n impl<'tcx> TraitObligation<'tcx> {\n     /// Returns `true` if the trait predicate is considered `const` in its ParamEnv.\n     pub fn is_const(&self) -> bool {\n-        match (self.predicate.skip_binder().constness, self.param_env.constness()) {\n-            (ty::BoundConstness::ConstIfConst, hir::Constness::Const) => true,\n-            _ => false,\n-        }\n+        matches!(\n+            (self.predicate.skip_binder().constness, self.param_env.constness()),\n+            (ty::BoundConstness::ConstIfConst, hir::Constness::Const)\n+        )\n     }\n \n     pub fn derived_cause("}, {"sha": "1ddc08eac7dfea1201cdf1ef1a19ffbe98575cd6", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -99,13 +99,9 @@ pub mod mir;\n pub mod thir;\n pub mod traits;\n pub mod ty;\n+pub mod util;\n mod values;\n \n-pub mod util {\n-    pub mod bug;\n-    pub mod common;\n-}\n-\n // Allows macros to refer to this crate as `::rustc_middle`\n extern crate self as rustc_middle;\n "}, {"sha": "627c84c388c04c9eabe2b33f2ac0aa430e66e491", "filename": "compiler/rustc_middle/src/util/call_kind.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_middle%2Fsrc%2Futil%2Fcall_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_middle%2Fsrc%2Futil%2Fcall_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Fcall_kind.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -2,10 +2,10 @@\n //! as well as errors when attempting to call a non-const function in a const\n //! context.\n \n+use crate::ty::subst::SubstsRef;\n+use crate::ty::{AssocItemContainer, Instance, ParamEnv, Ty, TyCtxt};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{lang_items, LangItem};\n-use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{AssocItemContainer, Instance, ParamEnv, Ty, TyCtxt};\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, DesugaringKind, Span};\n ", "previous_filename": "compiler/rustc_const_eval/src/util/call_kind.rs"}, {"sha": "0eab0adf07e481de8f8d7c2949845b90321fa8b1", "filename": "compiler/rustc_middle/src/util/find_self_call.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_middle%2Fsrc%2Futil%2Ffind_self_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_middle%2Fsrc%2Futil%2Ffind_self_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Ffind_self_call.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -1,6 +1,6 @@\n-use rustc_middle::mir::*;\n-use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, TyCtxt};\n+use crate::mir::*;\n+use crate::ty::subst::SubstsRef;\n+use crate::ty::{self, TyCtxt};\n use rustc_span::def_id::DefId;\n \n /// Checks if the specified `local` is used as the `self` parameter of a method call", "previous_filename": "compiler/rustc_const_eval/src/util/find_self_call.rs"}, {"sha": "53b4257899bce97556e3a7f8c5321f8f1a921db8", "filename": "compiler/rustc_middle/src/util/mod.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_middle%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_middle%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Fmod.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -0,0 +1,7 @@\n+pub mod bug;\n+pub mod call_kind;\n+pub mod common;\n+pub mod find_self_call;\n+\n+pub use call_kind::{call_kind, CallDesugaringKind, CallKind};\n+pub use find_self_call::find_self_call;"}, {"sha": "dcdeaf008d671d3cea28dabf1a184771f6fcc3bf", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -384,13 +384,8 @@ impl<'a> IntoDiagnostic<'a> for NonExhaustivePatternsTypeNotEmpty<'_, '_, '_> {\n             diag.span_note(span, fluent::mir_build_def_note);\n         }\n \n-        let is_variant_list_non_exhaustive = match self.ty.kind() {\n-            ty::Adt(def, _) if def.is_variant_list_non_exhaustive() && !def.did().is_local() => {\n-                true\n-            }\n-            _ => false,\n-        };\n-\n+        let is_variant_list_non_exhaustive = matches!(self.ty.kind(),\n+            ty::Adt(def, _) if def.is_variant_list_non_exhaustive() && !def.did().is_local());\n         if is_variant_list_non_exhaustive {\n             diag.note(fluent::mir_build_non_exhaustive_type_note);\n         } else {"}, {"sha": "0ef48c42f875761853c2a337f99a9b81959d15b5", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -671,10 +671,8 @@ fn non_exhaustive_match<'p, 'tcx>(\n         };\n     };\n \n-    let is_variant_list_non_exhaustive = match scrut_ty.kind() {\n-        ty::Adt(def, _) if def.is_variant_list_non_exhaustive() && !def.did().is_local() => true,\n-        _ => false,\n-    };\n+    let is_variant_list_non_exhaustive = matches!(scrut_ty.kind(),\n+        ty::Adt(def, _) if def.is_variant_list_non_exhaustive() && !def.did().is_local());\n \n     adt_defined_here(cx, &mut err, scrut_ty, &witnesses);\n     err.note(&format!("}, {"sha": "57b24c9c552a594332ab249f31559b9ec530905c", "filename": "compiler/rustc_mir_transform/src/check_const_item_mutation.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -134,7 +134,12 @@ impl<'tcx> Visitor<'tcx> for ConstMutationChecker<'_, 'tcx> {\n                 // the `self` parameter of a method call (as the terminator of our current\n                 // BasicBlock). If so, we emit a more specific lint.\n                 let method_did = self.target_local.and_then(|target_local| {\n-                    crate::util::find_self_call(self.tcx, &self.body, target_local, loc.block)\n+                    rustc_middle::util::find_self_call(\n+                        self.tcx,\n+                        &self.body,\n+                        target_local,\n+                        loc.block,\n+                    )\n                 });\n                 let lint_loc =\n                     if method_did.is_some() { self.body.terminator_loc(loc.block) } else { loc };"}, {"sha": "e554c47064680137df597edf8fcea57ba8c319da", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -292,10 +292,8 @@ impl DebugCounters {\n     }\n \n     pub fn some_block_label(&self, operand: ExpressionOperandId) -> Option<&String> {\n-        self.some_counters.as_ref().map_or(None, |counters| {\n-            counters\n-                .get(&operand)\n-                .map_or(None, |debug_counter| debug_counter.some_block_label.as_ref())\n+        self.some_counters.as_ref().and_then(|counters| {\n+            counters.get(&operand).and_then(|debug_counter| debug_counter.some_block_label.as_ref())\n         })\n     }\n "}, {"sha": "f5fef6ad019ebd39e76441ea8b28e2d32dba0c97", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -2577,14 +2577,12 @@ impl<'a> Parser<'a> {\n     }\n \n     fn recover_self_param(&mut self) -> bool {\n-        match self\n-            .parse_outer_attributes()\n-            .and_then(|_| self.parse_self_param())\n-            .map_err(|e| e.cancel())\n-        {\n-            Ok(Some(_)) => true,\n-            _ => false,\n-        }\n+        matches!(\n+            self.parse_outer_attributes()\n+                .and_then(|_| self.parse_self_param())\n+                .map_err(|e| e.cancel()),\n+            Ok(Some(_))\n+        )\n     }\n }\n "}, {"sha": "adb0d372a40dffe13c9af5c8e40a39a0f6678d9d", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -20,12 +20,10 @@ impl<'a> Parser<'a> {\n     pub fn nonterminal_may_begin_with(kind: NonterminalKind, token: &Token) -> bool {\n         /// Checks whether the non-terminal may contain a single (non-keyword) identifier.\n         fn may_be_ident(nt: &token::Nonterminal) -> bool {\n-            match *nt {\n-                token::NtItem(_) | token::NtBlock(_) | token::NtVis(_) | token::NtLifetime(_) => {\n-                    false\n-                }\n-                _ => true,\n-            }\n+            !matches!(\n+                *nt,\n+                token::NtItem(_) | token::NtBlock(_) | token::NtVis(_) | token::NtLifetime(_)\n+            )\n         }\n \n         match kind {"}, {"sha": "c5ec19732be0d959a5528829e7ed356586368592", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -663,15 +663,17 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         Ident::with_dummy_span(name),\n                         Namespace::ValueNS,\n                         &parent_scope,\n-                        &|res: Res| match res {\n-                            Res::Def(\n-                                DefKind::Ctor(CtorOf::Variant, CtorKind::Const)\n-                                | DefKind::Ctor(CtorOf::Struct, CtorKind::Const)\n-                                | DefKind::Const\n-                                | DefKind::AssocConst,\n-                                _,\n-                            ) => true,\n-                            _ => false,\n+                        &|res: Res| {\n+                            matches!(\n+                                res,\n+                                Res::Def(\n+                                    DefKind::Ctor(CtorOf::Variant, CtorKind::Const)\n+                                        | DefKind::Ctor(CtorOf::Struct, CtorKind::Const)\n+                                        | DefKind::Const\n+                                        | DefKind::AssocConst,\n+                                    _,\n+                                )\n+                            )\n                         },\n                     );\n "}, {"sha": "a6d88b1342ae8038bedd9ae446c3fa618b5a2d32", "filename": "compiler/rustc_transmute/src/layout/tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -196,7 +196,7 @@ pub(crate) mod rustc {\n         fn from(err: LayoutError<'tcx>) -> Self {\n             match err {\n                 LayoutError::Unknown(..) => Self::Unknown,\n-                err @ _ => unimplemented!(\"{:?}\", err),\n+                err => unimplemented!(\"{:?}\", err),\n             }\n         }\n     }"}, {"sha": "eeee12a4310657c1ff937fcaeb46e9ab7aa5eb0d", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a778ca1e35e4a8df95c00d800100d95e63e7722/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a778ca1e35e4a8df95c00d800100d95e63e7722/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=8a778ca1e35e4a8df95c00d800100d95e63e7722", "patch": "@@ -141,7 +141,7 @@ where\n         let f = auto_trait::AutoTraitFinder::new(tcx);\n \n         debug!(\"get_auto_trait_impls({:?})\", ty);\n-        let auto_traits: Vec<_> = self.cx.auto_traits.iter().copied().collect();\n+        let auto_traits: Vec<_> = self.cx.auto_traits.to_vec();\n         let mut auto_traits: Vec<Item> = auto_traits\n             .into_iter()\n             .filter_map(|trait_def_id| {"}]}