{"sha": "6303d2d075131641ef325344124c71052d2bd3eb", "node_id": "C_kwDOAAsO6NoAKDYzMDNkMmQwNzUxMzE2NDFlZjMyNTM0NDEyNGM3MTA1MmQyYmQzZWI", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-19T00:18:07Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-19T00:18:07Z"}, "message": "Revert \"!: this is the commit that demonstrates the ICE\"\n\nThis reverts commit d85f903c91d909534003ee2ff0e16316b20687dc.", "tree": {"sha": "d2c045970508bdfad709872d1fe8ad5eac585896", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2c045970508bdfad709872d1fe8ad5eac585896"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6303d2d075131641ef325344124c71052d2bd3eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6303d2d075131641ef325344124c71052d2bd3eb", "html_url": "https://github.com/rust-lang/rust/commit/6303d2d075131641ef325344124c71052d2bd3eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6303d2d075131641ef325344124c71052d2bd3eb/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d85f903c91d909534003ee2ff0e16316b20687dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d85f903c91d909534003ee2ff0e16316b20687dc", "html_url": "https://github.com/rust-lang/rust/commit/d85f903c91d909534003ee2ff0e16316b20687dc"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "0c9066fda8226d008f7bf1d726075c85f34f63f9", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr.rs", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/6303d2d075131641ef325344124c71052d2bd3eb/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6303d2d075131641ef325344124c71052d2bd3eb/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr.rs?ref=6303d2d075131641ef325344124c71052d2bd3eb", "patch": "@@ -1,6 +1,11 @@\n-use clippy_utils::{consts::miri_to_const, consts::Constant, diagnostics::span_lint_and_help};\n+use clippy_utils::{\n+    diagnostics::{span_lint_and_help, span_lint_and_sugg, span_lint_and_then},\n+    source::{indent_of, snippet},\n+};\n+use rustc_errors::Applicability;\n use rustc_hir::{HirId, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{Const, TyS};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n@@ -37,15 +42,27 @@ impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutRepr {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         dbg!(item.ident);\n         if is_struct_with_trailing_zero_sized_array(cx, item) && !has_repr_attr(cx, item.hir_id()) {\n-            // span_lint_and_help(\n-            //     cx,\n-            //     TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR,\n-            //     item.span,\n-            //     \"trailing zero-sized array in a struct which is not marked with a `repr` attribute\",\n-            //     None,\n-            //     \"\",\n-            // );\n-            eprintln!(\"consider yourself linted \ud83d\ude0e\");\n+            let help_msg = format!(\n+                \"consider annotating {} with `#[repr(C)]` or another `repr` attribute\",\n+                cx.tcx\n+                    .type_of(item.def_id)\n+                    .ty_adt_def()\n+                    .map(|adt_def| cx.tcx.def_path_str(adt_def.did))\n+                    .unwrap_or_else(\n+                        // I don't think this will ever be the case, since we made it through\n+                        // `is_struct_with_trailing_zero_sized_array`, but I don't feel comfortable putting an `unwrap`\n+                        || \"the struct definition\".to_string()\n+                    )\n+            );\n+\n+            span_lint_and_help(\n+                cx,\n+                TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR,\n+                item.span,\n+                \"trailing zero-sized array in a struct which is not marked with a `repr` attribute\",\n+                None,\n+                &help_msg,\n+            );\n         }\n     }\n }\n@@ -58,19 +75,11 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx\n     if let ItemKind::Struct(data, _) = &item.kind {\n         if let Some(last_field) = data.fields().last() {\n             if let rustc_hir::TyKind::Array(_, length) = last_field.ty.kind {\n-                let length_did = cx.tcx.hir().body_owner_def_id(length.body).to_def_id();\n-                let ty = cx.tcx.type_of(length_did);\n-                let length = cx\n-                    .tcx\n-                    // ICE happens in `const_eval_poly` according to my backtrace\n-                    .const_eval_poly(length_did)\n-                    .ok()\n-                    .map(|val| rustc_middle::ty::Const::from_value(cx.tcx, val, ty));\n-                if let Some(Constant::Int(length)) = length.and_then(miri_to_const){\n-                    length == 0\n-                } else {\n-                    false\n-                }\n+                // Then check if that that array zero-sized\n+                let length_ldid = cx.tcx.hir().local_def_id(length.hir_id);\n+                let length = Const::from_anon_const(cx.tcx, length_ldid);\n+                let length = length.try_eval_usize(cx.tcx, cx.param_env);\n+                length == Some(0)\n             } else {\n                 false\n             }"}, {"sha": "52966c64db736a0e9078b117a67f27cedc333abd", "filename": "tests/ui/trailing_zero_sized_array_without_repr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6303d2d075131641ef325344124c71052d2bd3eb/tests%2Fui%2Ftrailing_zero_sized_array_without_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6303d2d075131641ef325344124c71052d2bd3eb/tests%2Fui%2Ftrailing_zero_sized_array_without_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zero_sized_array_without_repr.rs?ref=6303d2d075131641ef325344124c71052d2bd3eb", "patch": "@@ -1,8 +1,6 @@\n #![warn(clippy::trailing_zero_sized_array_without_repr)]\n #![feature(const_generics_defaults)]\n \n-// ICE note: All of these are fine\n-\n // Do lint:\n \n struct RarelyUseful {\n@@ -25,6 +23,8 @@ struct OnlyAnotherAttribute {\n     last: [usize; 0],\n }\n \n+// NOTE: Unfortunately the attribute isn't included in the lint output. I'm not sure how to make it\n+// show up.\n #[derive(Debug)]\n struct OnlyADeriveAttribute {\n     field: i32,\n@@ -150,16 +150,12 @@ struct TupleStructReprC(i32, [usize; 0]);\n \n type NamedTuple = (i32, [usize; 0]);\n \n-// ICE note: and then this one crashes\n-\n #[rustfmt::skip] // [rustfmt#4995](https://github.com/rust-lang/rustfmt/issues/4995)\n struct ConstParamZeroDefault<const N: usize = 0> {\n     field: i32,\n     last: [usize; N],\n }\n \n-// ICE notes: presumably these as well but I'm not sure\n-\n struct ConstParamNoDefault<const N: usize> {\n     field: i32,\n     last: [usize; N],"}]}