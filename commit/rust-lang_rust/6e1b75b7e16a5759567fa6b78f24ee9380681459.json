{"sha": "6e1b75b7e16a5759567fa6b78f24ee9380681459", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMWI3NWI3ZTE2YTU3NTk1NjdmYTZiNzhmMjRlZTkzODA2ODE0NTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-10T16:28:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-10T16:28:59Z"}, "message": "Rollup merge of #68986 - ecstatic-morse:const-ascii-ctype, r=Centril\n\nMake ASCII ctype functions unstably const\n\nMakes the following inherent methods on `u8` and `char` unstable `const fn`:\n\n * `is_ascii_alphabetic`\n * `is_ascii_uppercase`\n * `is_ascii_lowercase`\n * `is_ascii_alphanumeric`\n * `is_ascii_digit`\n * `is_ascii_hexdigit`\n * `is_ascii_punctuation`\n * `is_ascii_graphic`\n * `is_ascii_whitespace`\n * `is_ascii_control`\n\ncc #68983", "tree": {"sha": "cacc70619ae2e911d7b4001d29ebf5b6da83f176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cacc70619ae2e911d7b4001d29ebf5b6da83f176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e1b75b7e16a5759567fa6b78f24ee9380681459", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQYTLCRBK7hj4Ov3rIwAAdHIIAGIHQ7K6DEGAIs/fr92EnqlN\nmFZ+ZbgQtkgGgkJlR3QBQ5Io1r+cVvrpjwuS6LalN0e3BNMbBtJ+ArqaHuh12yf8\nAomRD3PwG1fjE6v/lG97ZB8aqxhesBWu4guOa2un3uCt845FU6UVuDZ1FfYbbi+W\nfKoepRgLeMR0Pa2+g1ovHpNWAT6pU5JfdG4vdiy/a67p+zLHjZd2tacdqTQlKJnP\n+bmq3dfx/Sr+uC/qJ5aB7HB2Fu4GWWQoHOfZGNzv7CdK2cc8J1Ex2g+J9CnXYN6c\ntVDRDOtBkDTMNo4BDBPL6rGpEQioCnPsrRlSGcd5csoSFZgyJVy5Y8hoL3aLfEQ=\n=2xX0\n-----END PGP SIGNATURE-----\n", "payload": "tree cacc70619ae2e911d7b4001d29ebf5b6da83f176\nparent 24260e5baec0b1b9f9b6abf4cf4033686034df3f\nparent ea958422da4f90b7158e007d5c3226c41d0a5f57\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581352139 +0100\ncommitter GitHub <noreply@github.com> 1581352139 +0100\n\nRollup merge of #68986 - ecstatic-morse:const-ascii-ctype, r=Centril\n\nMake ASCII ctype functions unstably const\n\nMakes the following inherent methods on `u8` and `char` unstable `const fn`:\n\n * `is_ascii_alphabetic`\n * `is_ascii_uppercase`\n * `is_ascii_lowercase`\n * `is_ascii_alphanumeric`\n * `is_ascii_digit`\n * `is_ascii_hexdigit`\n * `is_ascii_punctuation`\n * `is_ascii_graphic`\n * `is_ascii_whitespace`\n * `is_ascii_control`\n\ncc #68983\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e1b75b7e16a5759567fa6b78f24ee9380681459", "html_url": "https://github.com/rust-lang/rust/commit/6e1b75b7e16a5759567fa6b78f24ee9380681459", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e1b75b7e16a5759567fa6b78f24ee9380681459/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24260e5baec0b1b9f9b6abf4cf4033686034df3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/24260e5baec0b1b9f9b6abf4cf4033686034df3f", "html_url": "https://github.com/rust-lang/rust/commit/24260e5baec0b1b9f9b6abf4cf4033686034df3f"}, {"sha": "ea958422da4f90b7158e007d5c3226c41d0a5f57", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea958422da4f90b7158e007d5c3226c41d0a5f57", "html_url": "https://github.com/rust-lang/rust/commit/ea958422da4f90b7158e007d5c3226c41d0a5f57"}], "stats": {"total": 116, "additions": 96, "deletions": 20}, "files": [{"sha": "2b52c48cb9077578cb2204b922c1b66c6ebfb4a9", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6e1b75b7e16a5759567fa6b78f24ee9380681459/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1b75b7e16a5759567fa6b78f24ee9380681459/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=6e1b75b7e16a5759567fa6b78f24ee9380681459", "patch": "@@ -1072,8 +1072,9 @@ impl char {\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_alphabetic(&self) -> bool {\n+    pub const fn is_ascii_alphabetic(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_alphabetic()\n     }\n \n@@ -1104,8 +1105,9 @@ impl char {\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_uppercase(&self) -> bool {\n+    pub const fn is_ascii_uppercase(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_uppercase()\n     }\n \n@@ -1136,8 +1138,9 @@ impl char {\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_lowercase(&self) -> bool {\n+    pub const fn is_ascii_lowercase(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_lowercase()\n     }\n \n@@ -1171,8 +1174,9 @@ impl char {\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_alphanumeric(&self) -> bool {\n+    pub const fn is_ascii_alphanumeric(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_alphanumeric()\n     }\n \n@@ -1203,8 +1207,9 @@ impl char {\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_digit(&self) -> bool {\n+    pub const fn is_ascii_digit(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_digit()\n     }\n \n@@ -1238,8 +1243,9 @@ impl char {\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_hexdigit(&self) -> bool {\n+    pub const fn is_ascii_hexdigit(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_hexdigit()\n     }\n \n@@ -1274,8 +1280,9 @@ impl char {\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_punctuation(&self) -> bool {\n+    pub const fn is_ascii_punctuation(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_punctuation()\n     }\n \n@@ -1306,8 +1313,9 @@ impl char {\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_graphic(&self) -> bool {\n+    pub const fn is_ascii_graphic(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_graphic()\n     }\n \n@@ -1355,8 +1363,9 @@ impl char {\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_whitespace(&self) -> bool {\n+    pub const fn is_ascii_whitespace(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_whitespace()\n     }\n \n@@ -1389,8 +1398,9 @@ impl char {\n     /// assert!(esc.is_ascii_control());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_control(&self) -> bool {\n+    pub const fn is_ascii_control(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_control()\n     }\n }"}, {"sha": "176c36664a9b14404e7b09016861a6d40b5c29e0", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e1b75b7e16a5759567fa6b78f24ee9380681459/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1b75b7e16a5759567fa6b78f24ee9380681459/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=6e1b75b7e16a5759567fa6b78f24ee9380681459", "patch": "@@ -70,6 +70,7 @@\n #![feature(bound_cloned)]\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n+#![feature(const_ascii_ctype_on_intrinsics)]\n #![feature(const_alloc_layout)]\n #![feature(const_if_match)]\n #![feature(const_checked_int_methods)]"}, {"sha": "471ab966622495ca55e395999330e813f7aa38f8", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6e1b75b7e16a5759567fa6b78f24ee9380681459/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1b75b7e16a5759567fa6b78f24ee9380681459/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=6e1b75b7e16a5759567fa6b78f24ee9380681459", "patch": "@@ -4449,8 +4449,9 @@ impl u8 {\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_alphabetic(&self) -> bool {\n+    pub const fn is_ascii_alphabetic(&self) -> bool {\n         matches!(*self, b'A'..=b'Z' | b'a'..=b'z')\n     }\n \n@@ -4481,8 +4482,9 @@ impl u8 {\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_uppercase(&self) -> bool {\n+    pub const fn is_ascii_uppercase(&self) -> bool {\n         matches!(*self, b'A'..=b'Z')\n     }\n \n@@ -4513,8 +4515,9 @@ impl u8 {\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_lowercase(&self) -> bool {\n+    pub const fn is_ascii_lowercase(&self) -> bool {\n         matches!(*self, b'a'..=b'z')\n     }\n \n@@ -4548,8 +4551,9 @@ impl u8 {\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_alphanumeric(&self) -> bool {\n+    pub const fn is_ascii_alphanumeric(&self) -> bool {\n         matches!(*self, b'0'..=b'9' | b'A'..=b'Z' | b'a'..=b'z')\n     }\n \n@@ -4580,8 +4584,9 @@ impl u8 {\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_digit(&self) -> bool {\n+    pub const fn is_ascii_digit(&self) -> bool {\n         matches!(*self, b'0'..=b'9')\n     }\n \n@@ -4615,8 +4620,9 @@ impl u8 {\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_hexdigit(&self) -> bool {\n+    pub const fn is_ascii_hexdigit(&self) -> bool {\n         matches!(*self, b'0'..=b'9' | b'A'..=b'F' | b'a'..=b'f')\n     }\n \n@@ -4651,8 +4657,9 @@ impl u8 {\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_punctuation(&self) -> bool {\n+    pub const fn is_ascii_punctuation(&self) -> bool {\n         matches!(*self, b'!'..=b'/' | b':'..=b'@' | b'['..=b'`' | b'{'..=b'~')\n     }\n \n@@ -4683,8 +4690,9 @@ impl u8 {\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_graphic(&self) -> bool {\n+    pub const fn is_ascii_graphic(&self) -> bool {\n         matches!(*self, b'!'..=b'~')\n     }\n \n@@ -4732,8 +4740,9 @@ impl u8 {\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_whitespace(&self) -> bool {\n+    pub const fn is_ascii_whitespace(&self) -> bool {\n         matches!(*self, b'\\t' | b'\\n' | b'\\x0C' | b'\\r' | b' ')\n     }\n \n@@ -4766,8 +4775,9 @@ impl u8 {\n     /// assert!(esc.is_ascii_control());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n+    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n-    pub fn is_ascii_control(&self) -> bool {\n+    pub const fn is_ascii_control(&self) -> bool {\n         matches!(*self, b'\\0'..=b'\\x1F' | b'\\x7F')\n     }\n }"}, {"sha": "25b270ee49cae05fd1c2e9ea0e8f0b7f137e8d59", "filename": "src/test/ui/consts/ascii_ctype.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/6e1b75b7e16a5759567fa6b78f24ee9380681459/src%2Ftest%2Fui%2Fconsts%2Fascii_ctype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1b75b7e16a5759567fa6b78f24ee9380681459/src%2Ftest%2Fui%2Fconsts%2Fascii_ctype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fascii_ctype.rs?ref=6e1b75b7e16a5759567fa6b78f24ee9380681459", "patch": "@@ -0,0 +1,55 @@\n+// run-pass\n+\n+#![feature(const_ascii_ctype_on_intrinsics)]\n+\n+macro_rules! suite {\n+    ( $( $fn:ident => [$a:ident, $A:ident, $nine:ident, $dot:ident, $space:ident]; )* ) => {\n+        $(\n+            mod $fn {\n+                const CHAR_A_LOWER: bool = 'a'.$fn();\n+                const CHAR_A_UPPER: bool = 'A'.$fn();\n+                const CHAR_NINE: bool = '9'.$fn();\n+                const CHAR_DOT: bool = '.'.$fn();\n+                const CHAR_SPACE: bool = ' '.$fn();\n+\n+                const U8_A_LOWER: bool = b'a'.$fn();\n+                const U8_A_UPPER: bool = b'A'.$fn();\n+                const U8_NINE: bool = b'9'.$fn();\n+                const U8_DOT: bool = b'.'.$fn();\n+                const U8_SPACE: bool = b' '.$fn();\n+\n+                pub fn run() {\n+                    assert_eq!(CHAR_A_LOWER, $a);\n+                    assert_eq!(CHAR_A_UPPER, $A);\n+                    assert_eq!(CHAR_NINE, $nine);\n+                    assert_eq!(CHAR_DOT, $dot);\n+                    assert_eq!(CHAR_SPACE, $space);\n+\n+                    assert_eq!(U8_A_LOWER, $a);\n+                    assert_eq!(U8_A_UPPER, $A);\n+                    assert_eq!(U8_NINE, $nine);\n+                    assert_eq!(U8_DOT, $dot);\n+                    assert_eq!(U8_SPACE, $space);\n+                }\n+            }\n+        )*\n+\n+        fn main() {\n+            $( $fn::run(); )*\n+        }\n+    }\n+}\n+\n+suite! {\n+    //                        'a'    'A'    '9'    '.'    ' '\n+    is_ascii_alphabetic   => [true,  true,  false, false, false];\n+    is_ascii_uppercase    => [false, true,  false, false, false];\n+    is_ascii_lowercase    => [true,  false, false, false, false];\n+    is_ascii_alphanumeric => [true,  true,  true,  false, false];\n+    is_ascii_digit        => [false, false, true,  false, false];\n+    is_ascii_hexdigit     => [true,  true,  true,  false, false];\n+    is_ascii_punctuation  => [false, false, false, true,  false];\n+    is_ascii_graphic      => [true,  true,  true,  true,  false];\n+    is_ascii_whitespace   => [false, false, false, false, true];\n+    is_ascii_control      => [false, false, false, false, false];\n+}"}]}