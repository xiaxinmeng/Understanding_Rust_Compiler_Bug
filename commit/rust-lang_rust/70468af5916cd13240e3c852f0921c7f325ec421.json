{"sha": "70468af5916cd13240e3c852f0921c7f325ec421", "node_id": "C_kwDOAAsO6NoAKDcwNDY4YWY1OTE2Y2QxMzI0MGUzYzg1MmYwOTIxYzdmMzI1ZWM0MjE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-04T06:28:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-04T06:28:54Z"}, "message": "Rollup merge of #106200 - compiler-errors:suggest-impl-trait, r=estebank\n\nSuggest `impl Fn*` and `impl Future` in `-> _` return suggestions\n\nFollow-up to #106172, only the last commit is relevant. Can rebase once that PR is landed for easier review.\n\nSuggests `impl Future` and `impl Fn{,Mut,Once}` in `-> _` return suggestions.\n\nr? `@estebank`", "tree": {"sha": "31df00dc3b4a65edbe986cc1457ff4b8e36b719a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31df00dc3b4a65edbe986cc1457ff4b8e36b719a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70468af5916cd13240e3c852f0921c7f325ec421", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjtRymCRBK7hj4Ov3rIwAArCsIAGjj/bbg7lc+4mAvqdJM20Kt\nURlGCHBG+FSr0zlD4wiRBd6yFh5GGMZPwkXN20yW/lhtt90xPm+SZDCofEh3FNst\nM+3qWWe+zP5rcUdWcNRVXEfIwnc1lVQR1/cTfgaMtzuXf4wQ5fY2UBlF5STYV3aD\nzkAcb4Y1kvtRfomXCQX/1XLkJEPx0BoXk8LKwT60uMmjsD6CRo5lC+fg+vEaAUG2\n6cS2e0eWFyZSCrJ2GyQgxsd0Z2uFbbwECdgy5aTMRQviZW8pDViJdWO86ijsQChf\nWL2kkQbQbNsdrOitcaxwUWDXV9DV8phiZKzarVRp4ddlMGYPW02kLYYwTqcwcrI=\n=4i4z\n-----END PGP SIGNATURE-----\n", "payload": "tree 31df00dc3b4a65edbe986cc1457ff4b8e36b719a\nparent c361616c3ca3e3e3069dbdf90557181233387444\nparent 89086f7d36e3a692b48cae8a408057734f044567\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1672813734 +0100\ncommitter GitHub <noreply@github.com> 1672813734 +0100\n\nRollup merge of #106200 - compiler-errors:suggest-impl-trait, r=estebank\n\nSuggest `impl Fn*` and `impl Future` in `-> _` return suggestions\n\nFollow-up to #106172, only the last commit is relevant. Can rebase once that PR is landed for easier review.\n\nSuggests `impl Future` and `impl Fn{,Mut,Once}` in `-> _` return suggestions.\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70468af5916cd13240e3c852f0921c7f325ec421", "html_url": "https://github.com/rust-lang/rust/commit/70468af5916cd13240e3c852f0921c7f325ec421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70468af5916cd13240e3c852f0921c7f325ec421/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c361616c3ca3e3e3069dbdf90557181233387444", "url": "https://api.github.com/repos/rust-lang/rust/commits/c361616c3ca3e3e3069dbdf90557181233387444", "html_url": "https://github.com/rust-lang/rust/commit/c361616c3ca3e3e3069dbdf90557181233387444"}, {"sha": "89086f7d36e3a692b48cae8a408057734f044567", "url": "https://api.github.com/repos/rust-lang/rust/commits/89086f7d36e3a692b48cae8a408057734f044567", "html_url": "https://github.com/rust-lang/rust/commit/89086f7d36e3a692b48cae8a408057734f044567"}], "stats": {"total": 275, "additions": 220, "deletions": 55}, "files": [{"sha": "cf847047c906ffb962a2c6a0293f1ca05e1796d7", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 97, "deletions": 50, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/70468af5916cd13240e3c852f0921c7f325ec421/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70468af5916cd13240e3c852f0921c7f325ec421/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=70468af5916cd13240e3c852f0921c7f325ec421", "patch": "@@ -17,15 +17,16 @@\n use crate::astconv::AstConv;\n use crate::check::intrinsic::intrinsic_operation_unsafety;\n use crate::errors;\n+use hir::def::DefKind;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{GenericParamKind, Node};\n-use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::traits::ObligationCause;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n@@ -1195,12 +1196,11 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n                 ty::ReErased => tcx.lifetimes.re_static,\n                 _ => r,\n             });\n-            let fn_sig = ty::Binder::dummy(fn_sig);\n \n             let mut visitor = HirPlaceholderCollector::default();\n             visitor.visit_ty(ty);\n             let mut diag = bad_placeholder(tcx, visitor.0, \"return type\");\n-            let ret_ty = fn_sig.skip_binder().output();\n+            let ret_ty = fn_sig.output();\n             if ret_ty.is_suggestable(tcx, false) {\n                 diag.span_suggestion(\n                     ty.span,\n@@ -1223,26 +1223,26 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n                         Applicability::MachineApplicable,\n                     );\n                 }\n+            } else if let Some(sugg) = suggest_impl_trait(tcx, ret_ty, ty.span, hir_id, def_id) {\n+                diag.span_suggestion(\n+                    ty.span,\n+                    \"replace with an appropriate return type\",\n+                    sugg,\n+                    Applicability::MachineApplicable,\n+                );\n             } else if ret_ty.is_closure() {\n-                // We're dealing with a closure, so we should suggest using `impl Fn` or trait bounds\n-                // to prevent the user from getting a papercut while trying to use the unique closure\n-                // syntax (e.g. `[closure@src/lib.rs:2:5: 2:9]`).\n                 diag.help(\"consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\");\n+            }\n+            // Also note how `Fn` traits work just in case!\n+            if ret_ty.is_closure() {\n                 diag.note(\n                     \"for more information on `Fn` traits and closure types, see \\\n                      https://doc.rust-lang.org/book/ch13-01-closures.html\",\n                 );\n-            } else if let Some(i_ty) = suggest_impl_iterator(tcx, ret_ty, ty.span, hir_id, def_id) {\n-                diag.span_suggestion(\n-                    ty.span,\n-                    \"replace with an appropriate return type\",\n-                    format!(\"impl Iterator<Item = {}>\", i_ty),\n-                    Applicability::MachineApplicable,\n-                );\n             }\n             diag.emit();\n \n-            fn_sig\n+            ty::Binder::dummy(fn_sig)\n         }\n         None => <dyn AstConv<'_>>::ty_of_fn(\n             icx,\n@@ -1256,47 +1256,94 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n     }\n }\n \n-fn suggest_impl_iterator<'tcx>(\n+fn suggest_impl_trait<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ret_ty: Ty<'tcx>,\n     span: Span,\n     hir_id: hir::HirId,\n     def_id: LocalDefId,\n-) -> Option<Ty<'tcx>> {\n-    let Some(iter_trait) = tcx.get_diagnostic_item(sym::Iterator) else { return None; };\n-    let Some(iterator_item) = tcx.get_diagnostic_item(sym::IteratorItem) else { return None; };\n-    if !tcx\n-        .infer_ctxt()\n-        .build()\n-        .type_implements_trait(iter_trait, [ret_ty], tcx.param_env(def_id))\n-        .must_apply_modulo_regions()\n-    {\n-        return None;\n-    }\n-    let infcx = tcx.infer_ctxt().build();\n-    let ocx = ObligationCtxt::new_in_snapshot(&infcx);\n-    // Find the type of `Iterator::Item`.\n-    let origin = TypeVariableOrigin { kind: TypeVariableOriginKind::TypeInference, span };\n-    let ty_var = infcx.next_ty_var(origin);\n-    let projection = ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::Projection(\n-        ty::ProjectionPredicate {\n-            projection_ty: tcx.mk_alias_ty(iterator_item, tcx.mk_substs([ret_ty.into()].iter())),\n-            term: ty_var.into(),\n-        },\n-    )));\n-    // Add `<ret_ty as Iterator>::Item = _` obligation.\n-    ocx.register_obligation(crate::traits::Obligation::misc(\n-        tcx,\n-        span,\n-        hir_id,\n-        tcx.param_env(def_id),\n-        projection,\n-    ));\n-    if ocx.select_where_possible().is_empty()\n-        && let item_ty = infcx.resolve_vars_if_possible(ty_var)\n-        && item_ty.is_suggestable(tcx, false)\n-    {\n-        return Some(item_ty);\n+) -> Option<String> {\n+    let format_as_assoc: fn(_, _, _, _, _) -> _ =\n+        |tcx: TyCtxt<'tcx>,\n+         _: ty::SubstsRef<'tcx>,\n+         trait_def_id: DefId,\n+         assoc_item_def_id: DefId,\n+         item_ty: Ty<'tcx>| {\n+            let trait_name = tcx.item_name(trait_def_id);\n+            let assoc_name = tcx.item_name(assoc_item_def_id);\n+            Some(format!(\"impl {trait_name}<{assoc_name} = {item_ty}>\"))\n+        };\n+    let format_as_parenthesized: fn(_, _, _, _, _) -> _ =\n+        |tcx: TyCtxt<'tcx>,\n+         substs: ty::SubstsRef<'tcx>,\n+         trait_def_id: DefId,\n+         _: DefId,\n+         item_ty: Ty<'tcx>| {\n+            let trait_name = tcx.item_name(trait_def_id);\n+            let args_tuple = substs.type_at(1);\n+            let ty::Tuple(types) = *args_tuple.kind() else { return None; };\n+            if !types.is_suggestable(tcx, false) {\n+                return None;\n+            }\n+            let maybe_ret =\n+                if item_ty.is_unit() { String::new() } else { format!(\" -> {item_ty}\") };\n+            Some(format!(\n+                \"impl {trait_name}({}){maybe_ret}\",\n+                types.iter().map(|ty| ty.to_string()).collect::<Vec<_>>().join(\", \")\n+            ))\n+        };\n+\n+    for (trait_def_id, assoc_item_def_id, formatter) in [\n+        (\n+            tcx.get_diagnostic_item(sym::Iterator),\n+            tcx.get_diagnostic_item(sym::IteratorItem),\n+            format_as_assoc,\n+        ),\n+        (\n+            tcx.lang_items().future_trait(),\n+            tcx.get_diagnostic_item(sym::FutureOutput),\n+            format_as_assoc,\n+        ),\n+        (tcx.lang_items().fn_trait(), tcx.lang_items().fn_once_output(), format_as_parenthesized),\n+        (\n+            tcx.lang_items().fn_mut_trait(),\n+            tcx.lang_items().fn_once_output(),\n+            format_as_parenthesized,\n+        ),\n+        (\n+            tcx.lang_items().fn_once_trait(),\n+            tcx.lang_items().fn_once_output(),\n+            format_as_parenthesized,\n+        ),\n+    ] {\n+        let Some(trait_def_id) = trait_def_id else { continue; };\n+        let Some(assoc_item_def_id) = assoc_item_def_id else { continue; };\n+        if tcx.def_kind(assoc_item_def_id) != DefKind::AssocTy {\n+            continue;\n+        }\n+        let param_env = tcx.param_env(def_id);\n+        let infcx = tcx.infer_ctxt().build();\n+        let substs = ty::InternalSubsts::for_item(tcx, trait_def_id, |param, _| {\n+            if param.index == 0 { ret_ty.into() } else { infcx.var_for_def(span, param) }\n+        });\n+        if !infcx.type_implements_trait(trait_def_id, substs, param_env).must_apply_modulo_regions()\n+        {\n+            continue;\n+        }\n+        let ocx = ObligationCtxt::new_in_snapshot(&infcx);\n+        let item_ty = ocx.normalize(\n+            &ObligationCause::misc(span, hir_id),\n+            param_env,\n+            tcx.mk_projection(assoc_item_def_id, substs),\n+        );\n+        // FIXME(compiler-errors): We may benefit from resolving regions here.\n+        if ocx.select_where_possible().is_empty()\n+            && let item_ty = infcx.resolve_vars_if_possible(item_ty)\n+            && item_ty.is_suggestable(tcx, false)\n+            && let Some(sugg) = formatter(tcx, infcx.resolve_vars_if_possible(substs), trait_def_id, assoc_item_def_id, item_ty)\n+        {\n+            return Some(sugg);\n+        }\n     }\n     None\n }"}, {"sha": "5d5f8d6d65405c5fd00d57f741d95c39dd12b4a7", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70468af5916cd13240e3c852f0921c7f325ec421/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70468af5916cd13240e3c852f0921c7f325ec421/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=70468af5916cd13240e3c852f0921c7f325ec421", "patch": "@@ -193,6 +193,7 @@ symbols! {\n         FromIterator,\n         FromResidual,\n         Future,\n+        FutureOutput,\n         FxHashMap,\n         FxHashSet,\n         GlobalAlloc,"}, {"sha": "8c7111cb3ff0b875f22a2369480d03aed05d26ce", "filename": "library/core/src/future/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70468af5916cd13240e3c852f0921c7f325ec421/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70468af5916cd13240e3c852f0921c7f325ec421/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs?ref=70468af5916cd13240e3c852f0921c7f325ec421", "patch": "@@ -37,6 +37,7 @@ use crate::task::{Context, Poll};\n pub trait Future {\n     /// The type of value produced on completion.\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[rustc_diagnostic_item = \"FutureOutput\"]\n     type Output;\n \n     /// Attempt to resolve the future to a final value, registering"}, {"sha": "35e39bebb29ab85d7d1424e4ea28c01aac7190a8", "filename": "src/test/ui/fn/issue-80179.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70468af5916cd13240e3c852f0921c7f325ec421/src%2Ftest%2Fui%2Ffn%2Fissue-80179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70468af5916cd13240e3c852f0921c7f325ec421/src%2Ftest%2Fui%2Ffn%2Fissue-80179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fissue-80179.rs?ref=70468af5916cd13240e3c852f0921c7f325ec421", "patch": "@@ -18,9 +18,9 @@ fn returns_fn_ptr() -> _ {\n fn returns_closure() -> _ {\n //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types [E0121]\n //~| NOTE not allowed in type signatures\n-//~| HELP consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\n-//~| NOTE for more information on `Fn` traits and closure types, see\n-//        https://doc.rust-lang.org/book/ch13-01-closures.html\n+//~| HELP replace with an appropriate return type\n+//~| SUGGESTION impl Fn() -> i32\n+//~| NOTE for more information on `Fn` traits and closure types\n     || 0\n }\n "}, {"sha": "f5d6c44db75119be1fab07c1a1f006e8b90dfcb8", "filename": "src/test/ui/fn/issue-80179.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70468af5916cd13240e3c852f0921c7f325ec421/src%2Ftest%2Fui%2Ffn%2Fissue-80179.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70468af5916cd13240e3c852f0921c7f325ec421/src%2Ftest%2Fui%2Ffn%2Fissue-80179.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fissue-80179.stderr?ref=70468af5916cd13240e3c852f0921c7f325ec421", "patch": "@@ -11,9 +11,11 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n   --> $DIR/issue-80179.rs:18:25\n    |\n LL | fn returns_closure() -> _ {\n-   |                         ^ not allowed in type signatures\n+   |                         ^\n+   |                         |\n+   |                         not allowed in type signatures\n+   |                         help: replace with an appropriate return type: `impl Fn() -> i32`\n    |\n-   = help: consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\n    = note: for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\n \n error: aborting due to 2 previous errors"}, {"sha": "33daa1ea0b400705afcf78ae9a5be365f6567ba1", "filename": "src/test/ui/fn/suggest-return-closure.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/70468af5916cd13240e3c852f0921c7f325ec421/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70468af5916cd13240e3c852f0921c7f325ec421/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-closure.rs?ref=70468af5916cd13240e3c852f0921c7f325ec421", "patch": "@@ -0,0 +1,34 @@\n+fn fn_once() -> _ {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types [E0121]\n+    //~| NOTE not allowed in type signatures\n+    //~| HELP replace with an appropriate return type\n+    //~| SUGGESTION impl FnOnce()\n+    //~| NOTE for more information on `Fn` traits and closure types\n+    let x = String::new();\n+    || {\n+        drop(x);\n+    }\n+}\n+\n+fn fn_mut() -> _ {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types [E0121]\n+    //~| NOTE not allowed in type signatures\n+    //~| HELP replace with an appropriate return type\n+    //~| SUGGESTION impl FnMut(char)\n+    //~| NOTE for more information on `Fn` traits and closure types\n+    let x = String::new();\n+    |c| {\n+        x.push(c);\n+    }\n+}\n+\n+fn fun() -> _ {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types [E0121]\n+    //~| NOTE not allowed in type signatures\n+    //~| HELP replace with an appropriate return type\n+    //~| SUGGESTION impl Fn() -> i32\n+    //~| NOTE for more information on `Fn` traits and closure types\n+    || 1i32\n+}\n+\n+fn main() {}"}, {"sha": "341044469ea37d48299657723a8a6106be499099", "filename": "src/test/ui/fn/suggest-return-closure.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/70468af5916cd13240e3c852f0921c7f325ec421/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70468af5916cd13240e3c852f0921c7f325ec421/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-closure.stderr?ref=70468af5916cd13240e3c852f0921c7f325ec421", "patch": "@@ -0,0 +1,36 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/suggest-return-closure.rs:1:17\n+   |\n+LL | fn fn_once() -> _ {\n+   |                 ^\n+   |                 |\n+   |                 not allowed in type signatures\n+   |                 help: replace with an appropriate return type: `impl FnOnce()`\n+   |\n+   = note: for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/suggest-return-closure.rs:13:16\n+   |\n+LL | fn fn_mut() -> _ {\n+   |                ^\n+   |                |\n+   |                not allowed in type signatures\n+   |                help: replace with an appropriate return type: `impl FnMut(char)`\n+   |\n+   = note: for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/suggest-return-closure.rs:25:13\n+   |\n+LL | fn fun() -> _ {\n+   |             ^\n+   |             |\n+   |             not allowed in type signatures\n+   |             help: replace with an appropriate return type: `impl Fn() -> i32`\n+   |\n+   = note: for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "750740d9426106edfa5dda3798eda6eb7132af49", "filename": "src/test/ui/fn/suggest-return-future.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/70468af5916cd13240e3c852f0921c7f325ec421/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70468af5916cd13240e3c852f0921c7f325ec421/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-future.rs?ref=70468af5916cd13240e3c852f0921c7f325ec421", "patch": "@@ -0,0 +1,23 @@\n+// edition: 2021\n+\n+async fn a() -> i32 {\n+    0\n+}\n+\n+fn foo() -> _ {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types [E0121]\n+    //~| NOTE not allowed in type signatures\n+    //~| HELP replace with an appropriate return type\n+    //~| SUGGESTION impl Future<Output = i32>\n+    a()\n+}\n+\n+fn bar() -> _ {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types [E0121]\n+    //~| NOTE not allowed in type signatures\n+    //~| HELP replace with an appropriate return type\n+    //~| SUGGESTION impl Future<Output = i32>\n+    async { a().await }\n+}\n+\n+fn main() {}"}, {"sha": "a4c8b5d8c4b5dd864f6ce0f596b36fdbc5920b7e", "filename": "src/test/ui/fn/suggest-return-future.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/70468af5916cd13240e3c852f0921c7f325ec421/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70468af5916cd13240e3c852f0921c7f325ec421/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-future.stderr?ref=70468af5916cd13240e3c852f0921c7f325ec421", "patch": "@@ -0,0 +1,21 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/suggest-return-future.rs:7:13\n+   |\n+LL | fn foo() -> _ {\n+   |             ^\n+   |             |\n+   |             not allowed in type signatures\n+   |             help: replace with an appropriate return type: `impl Future<Output = i32>`\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/suggest-return-future.rs:15:13\n+   |\n+LL | fn bar() -> _ {\n+   |             ^\n+   |             |\n+   |             not allowed in type signatures\n+   |             help: replace with an appropriate return type: `impl Future<Output = i32>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0121`."}]}