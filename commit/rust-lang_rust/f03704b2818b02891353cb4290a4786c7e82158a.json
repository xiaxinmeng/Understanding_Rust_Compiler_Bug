{"sha": "f03704b2818b02891353cb4290a4786c7e82158a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMzcwNGIyODE4YjAyODkxMzUzY2I0MjkwYTQ3ODZjN2U4MjE1OGE=", "commit": {"author": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-02-07T01:17:48Z"}, "committer": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-02-07T01:17:48Z"}, "message": "Transition librustc_traits to 2018 edition", "tree": {"sha": "bde0c2e2cd6c7097619547871f926e5c82750d16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bde0c2e2cd6c7097619547871f926e5c82750d16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f03704b2818b02891353cb4290a4786c7e82158a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f03704b2818b02891353cb4290a4786c7e82158a", "html_url": "https://github.com/rust-lang/rust/commit/f03704b2818b02891353cb4290a4786c7e82158a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f03704b2818b02891353cb4290a4786c7e82158a/comments", "author": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "committer": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b139669f374eb5024a50eb13f116ff763b1c5935", "url": "https://api.github.com/repos/rust-lang/rust/commits/b139669f374eb5024a50eb13f116ff763b1c5935", "html_url": "https://github.com/rust-lang/rust/commit/b139669f374eb5024a50eb13f116ff763b1c5935"}], "stats": {"total": 43, "additions": 20, "deletions": 23}, "files": [{"sha": "da19cc95eb95a0485bc8c5fb4c3d7f503b121eec", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=f03704b2818b02891353cb4290a4786c7e82158a", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_traits\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_traits\""}, {"sha": "ffa696c90803933fe491caef56639ecf3165172b", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=f03704b2818b02891353cb4290a4786c7e82158a", "patch": "@@ -502,13 +502,13 @@ type ChalkHhGoal<'tcx> = HhGoal<ChalkArenas<'tcx>>;\n type ChalkExClause<'tcx> = ExClause<ChalkArenas<'tcx>>;\n \n impl Debug for ChalkContext<'cx, 'gcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"ChalkContext\")\n     }\n }\n \n impl Debug for ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"ChalkInferenceContext\")\n     }\n }\n@@ -658,7 +658,7 @@ impl<'tcx, 'gcx: 'tcx, T> Upcast<'tcx, 'gcx> for Canonical<'gcx, T>\n     }\n }\n \n-crate fn provide(p: &mut Providers) {\n+crate fn provide(p: &mut Providers<'_>) {\n     *p = Providers {\n         evaluate_goal,\n         ..*p"}, {"sha": "adfd26814db1eb0f5acbb9c44bbfbfa26e030d86", "filename": "src/librustc_traits/chalk_context/program_clauses.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs?ref=f03704b2818b02891353cb4290a4786c7e82158a", "patch": "@@ -220,7 +220,7 @@ fn wf_clause_for_slice<'tcx>(tcx: ty::TyCtxt<'_, '_, 'tcx>) -> Clauses<'tcx> {\n         def_id: sized_trait,\n         substs: tcx.mk_substs_trait(ty, ty::List::empty()),\n     };\n-    let sized_implemented: DomainGoal = ty::TraitPredicate {\n+    let sized_implemented: DomainGoal<'_> = ty::TraitPredicate {\n         trait_ref: sized_implemented\n     }.lower();\n \n@@ -252,7 +252,7 @@ fn wf_clause_for_array<'tcx>(\n         def_id: sized_trait,\n         substs: tcx.mk_substs_trait(ty, ty::List::empty()),\n     };\n-    let sized_implemented: DomainGoal = ty::TraitPredicate {\n+    let sized_implemented: DomainGoal<'_> = ty::TraitPredicate {\n         trait_ref: sized_implemented\n     }.lower();\n \n@@ -326,7 +326,7 @@ fn wf_clause_for_ref<'tcx>(\n         mutbl,\n     });\n \n-    let _outlives: DomainGoal = ty::OutlivesPredicate(ty, region).lower();\n+    let _outlives: DomainGoal<'_> = ty::OutlivesPredicate(ty, region).lower();\n     let wf_clause = ProgramClause {\n         goal: DomainGoal::WellFormed(WellFormed::Ty(ref_ty)),\n         hypotheses: ty::List::empty(),"}, {"sha": "45b19e1dc06af843ba5c2af13c372061eccbb68a", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=f03704b2818b02891353cb4290a4786c7e82158a", "patch": "@@ -10,7 +10,7 @@ use rustc::util::nodemap::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use syntax::source_map::{Span, DUMMY_SP};\n \n-crate fn provide(p: &mut Providers) {\n+crate fn provide(p: &mut Providers<'_>) {\n     *p = Providers {\n         dropck_outlives,\n         adt_dtorck_constraint,\n@@ -305,7 +305,7 @@ crate fn adt_dtorck_constraint<'a, 'tcx>(\n     let mut result = def.all_fields()\n         .map(|field| tcx.type_of(field.did))\n         .map(|fty| dtorck_constraint_for_ty(tcx, span, fty, 0, fty))\n-        .collect::<Result<DtorckConstraint, NoSolution>>()?;\n+        .collect::<Result<DtorckConstraint<'_>, NoSolution>>()?;\n     result.outlives.extend(tcx.destructor_constraints(def));\n     dedup_dtorck_constraint(&mut result);\n "}, {"sha": "83aebd16e2400889199bec1efd253d0f460806e1", "filename": "src/librustc_traits/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fevaluate_obligation.rs?ref=f03704b2818b02891353cb4290a4786c7e82158a", "patch": "@@ -6,7 +6,7 @@ use rustc::ty::query::Providers;\n use rustc::ty::{ParamEnvAnd, TyCtxt};\n use syntax::source_map::DUMMY_SP;\n \n-crate fn provide(p: &mut Providers) {\n+crate fn provide(p: &mut Providers<'_>) {\n     *p = Providers {\n         evaluate_obligation,\n         ..*p"}, {"sha": "e4a032aaf7b18a8266b9ae751fa88c26dd8c48de", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=f03704b2818b02891353cb4290a4786c7e82158a", "patch": "@@ -17,7 +17,7 @@ use rustc::traits::FulfillmentContext;\n \n use rustc_data_structures::sync::Lrc;\n \n-crate fn provide(p: &mut Providers) {\n+crate fn provide(p: &mut Providers<'_>) {\n     *p = Providers {\n         implied_outlives_bounds,\n         ..*p"}, {"sha": "d52a976981db06037ee2d1be2df6c9ba540c8243", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=f03704b2818b02891353cb4290a4786c7e82158a", "patch": "@@ -1,22 +1,18 @@\n //! New recursive solver modeled on Chalk's recursive solver. Most of\n //! the guts are broken up into modules; see the comments in those modules.\n \n+#![deny(rust_2018_idioms)]\n+\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n \n #![recursion_limit=\"256\"]\n \n-extern crate chalk_engine;\n #[macro_use]\n extern crate log;\n #[macro_use]\n extern crate rustc;\n-extern crate rustc_data_structures;\n-extern crate rustc_target;\n-extern crate syntax;\n-extern crate syntax_pos;\n-extern crate smallvec;\n \n mod chalk_context;\n mod dropck_outlives;\n@@ -30,7 +26,7 @@ mod type_op;\n \n use rustc::ty::query::Providers;\n \n-pub fn provide(p: &mut Providers) {\n+pub fn provide(p: &mut Providers<'_>) {\n     dropck_outlives::provide(p);\n     evaluate_obligation::provide(p);\n     implied_outlives_bounds::provide(p);"}, {"sha": "908fdcfe7430fc0102321ea85ea673ab5a2a1910", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=f03704b2818b02891353cb4290a4786c7e82158a", "patch": "@@ -23,7 +23,7 @@ use syntax::ast;\n \n use std::iter;\n \n-crate fn provide(p: &mut Providers) {\n+crate fn provide(p: &mut Providers<'_>) {\n     *p = Providers {\n         program_clauses_for,\n         program_clauses_for_env: environment::program_clauses_for_env,\n@@ -193,7 +193,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     };\n \n     // `Implemented(Self: Trait<P1..Pn>)`\n-    let impl_trait: DomainGoal = trait_pred.lower();\n+    let impl_trait: DomainGoal<'_> = trait_pred.lower();\n \n     // `FromEnv(Self: Trait<P1..Pn>)`\n     let from_env_goal = tcx.mk_goal(impl_trait.into_from_env_goal().into_goal());\n@@ -575,7 +575,7 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n     let ty = tcx.type_of(item_id);\n \n     // `Implemented(A0: Trait<A1..An>)`\n-    let trait_implemented: DomainGoal = ty::TraitPredicate { trait_ref }.lower();\n+    let trait_implemented: DomainGoal<'_> = ty::TraitPredicate { trait_ref }.lower();\n \n     // `<A0 as Trait<A1..An>>::AssocType<Pn+1..Pm>`\n     let projection_ty = ty::ProjectionTy::from_ref_and_name(tcx, trait_ref, item.ident);"}, {"sha": "412d2ca6dfcff06384242238a22e0b35af2c38fa", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=f03704b2818b02891353cb4290a4786c7e82158a", "patch": "@@ -4,7 +4,7 @@ use rustc::ty::query::Providers;\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use std::sync::atomic::Ordering;\n \n-crate fn provide(p: &mut Providers) {\n+crate fn provide(p: &mut Providers<'_>) {\n     *p = Providers {\n         normalize_ty_after_erasing_regions,\n         ..*p"}, {"sha": "6fe9e316cf36ec31e092d68dcfcdfe6a9765e2c9", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=f03704b2818b02891353cb4290a4786c7e82158a", "patch": "@@ -8,7 +8,7 @@ use std::sync::atomic::Ordering;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::DUMMY_SP;\n \n-crate fn provide(p: &mut Providers) {\n+crate fn provide(p: &mut Providers<'_>) {\n     *p = Providers {\n         normalize_projection_ty,\n         ..*p"}, {"sha": "3cc2f77187ac75c8bb6e8cb9db674290e60dda7e", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03704b2818b02891353cb4290a4786c7e82158a/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=f03704b2818b02891353cb4290a4786c7e82158a", "patch": "@@ -21,7 +21,7 @@ use std::fmt;\n use syntax::ast;\n use syntax_pos::DUMMY_SP;\n \n-crate fn provide(p: &mut Providers) {\n+crate fn provide(p: &mut Providers<'_>) {\n     *p = Providers {\n         type_op_ascribe_user_type,\n         type_op_eq,"}]}