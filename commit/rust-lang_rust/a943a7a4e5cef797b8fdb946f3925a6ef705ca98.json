{"sha": "a943a7a4e5cef797b8fdb946f3925a6ef705ca98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NDNhN2E0ZTVjZWY3OTdiOGZkYjk0NmYzOTI1YTZlZjcwNWNhOTg=", "commit": {"author": {"name": "Arcterus", "email": "Arcterus@mail.com", "date": "2014-12-06T18:58:18Z"}, "committer": {"name": "Arcterus", "email": "Arcterus@mail.com", "date": "2014-12-09T15:40:21Z"}, "message": "serialize: base64: improve newline handling speed", "tree": {"sha": "79ecf7e556a4412a49281364408f5f6b2bed85d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79ecf7e556a4412a49281364408f5f6b2bed85d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a943a7a4e5cef797b8fdb946f3925a6ef705ca98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a943a7a4e5cef797b8fdb946f3925a6ef705ca98", "html_url": "https://github.com/rust-lang/rust/commit/a943a7a4e5cef797b8fdb946f3925a6ef705ca98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a943a7a4e5cef797b8fdb946f3925a6ef705ca98/comments", "author": {"login": "Arcterus", "id": 829813, "node_id": "MDQ6VXNlcjgyOTgxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/829813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arcterus", "html_url": "https://github.com/Arcterus", "followers_url": "https://api.github.com/users/Arcterus/followers", "following_url": "https://api.github.com/users/Arcterus/following{/other_user}", "gists_url": "https://api.github.com/users/Arcterus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arcterus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arcterus/subscriptions", "organizations_url": "https://api.github.com/users/Arcterus/orgs", "repos_url": "https://api.github.com/users/Arcterus/repos", "events_url": "https://api.github.com/users/Arcterus/events{/privacy}", "received_events_url": "https://api.github.com/users/Arcterus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Arcterus", "id": 829813, "node_id": "MDQ6VXNlcjgyOTgxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/829813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arcterus", "html_url": "https://github.com/Arcterus", "followers_url": "https://api.github.com/users/Arcterus/followers", "following_url": "https://api.github.com/users/Arcterus/following{/other_user}", "gists_url": "https://api.github.com/users/Arcterus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arcterus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arcterus/subscriptions", "organizations_url": "https://api.github.com/users/Arcterus/orgs", "repos_url": "https://api.github.com/users/Arcterus/repos", "events_url": "https://api.github.com/users/Arcterus/events{/privacy}", "received_events_url": "https://api.github.com/users/Arcterus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "553ab271a31a9573fb6e95d03d8f4d00e17d6511", "url": "https://api.github.com/repos/rust-lang/rust/commits/553ab271a31a9573fb6e95d03d8f4d00e17d6511", "html_url": "https://github.com/rust-lang/rust/commit/553ab271a31a9573fb6e95d03d8f4d00e17d6511"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "17bb3dadaebc814429586cd512abd7db318290a2", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a943a7a4e5cef797b8fdb946f3925a6ef705ca98/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a943a7a4e5cef797b8fdb946f3925a6ef705ca98/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=a943a7a4e5cef797b8fdb946f3925a6ef705ca98", "patch": "@@ -14,7 +14,6 @@\n \n pub use self::FromBase64Error::*;\n pub use self::CharacterSet::*;\n-pub use self::Newline::*;\n \n use std::fmt;\n use std::error;\n@@ -55,15 +54,15 @@ impl Copy for Config {}\n \n /// Configuration for RFC 4648 standard base64 encoding\n pub static STANDARD: Config =\n-    Config {char_set: Standard, newline: CRLF, pad: true, line_length: None};\n+    Config {char_set: Standard, newline: Newline::CRLF, pad: true, line_length: None};\n \n /// Configuration for RFC 4648 base64url encoding\n pub static URL_SAFE: Config =\n-    Config {char_set: UrlSafe, newline: CRLF, pad: false, line_length: None};\n+    Config {char_set: UrlSafe, newline: Newline::CRLF, pad: false, line_length: None};\n \n /// Configuration for RFC 2045 MIME base64 encoding\n pub static MIME: Config =\n-    Config {char_set: Standard, newline: CRLF, pad: true, line_length: Some(76)};\n+    Config {char_set: Standard, newline: Newline::CRLF, pad: true, line_length: Some(76)};\n \n static STANDARD_CHARS: &'static[u8] = b\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n                                         abcdefghijklmnopqrstuvwxyz\\\n@@ -108,14 +107,15 @@ impl ToBase64 for [u8] {\n         let len = self.len();\n         let mod_len = len % 3;\n         let cond_len = len - mod_len;\n+        let newline = match config.newline {\n+            Newline::LF => b\"\\n\",\n+            Newline::CRLF => b\"\\r\\n\"\n+        };\n         while i < cond_len {\n             let (first, second, third) = (self[i], self[i + 1], self[i + 2]);\n             if let Some(line_length) = config.line_length {\n                 if cur_length >= line_length {\n-                    v.push_all(match config.newline {\n-                        LF => b\"\\n\",\n-                        CRLF => b\"\\r\\n\"\n-                    });\n+                    v.push_all(newline);\n                     cur_length = 0;\n                 }\n             }\n@@ -137,10 +137,7 @@ impl ToBase64 for [u8] {\n         if mod_len != 0 {\n             if let Some(line_length) = config.line_length {\n                 if cur_length >= line_length {\n-                    v.push_all(match config.newline {\n-                        LF => b\"\\n\",\n-                        CRLF => b\"\\r\\n\"\n-                    });\n+                    v.push_all(newline);\n                 }\n             }\n         }\n@@ -306,7 +303,7 @@ impl FromBase64 for [u8] {\n mod tests {\n     extern crate test;\n     use self::test::Bencher;\n-    use base64::{Config, FromBase64, ToBase64, STANDARD, URL_SAFE, LF};\n+    use base64::{Config, Newline, FromBase64, ToBase64, STANDARD, URL_SAFE};\n \n     #[test]\n     fn test_to_base64_basic() {\n@@ -330,12 +327,13 @@ mod tests {\n \n     #[test]\n     fn test_to_base64_lf_line_break() {\n-        assert!(![0u8, ..1000].to_base64(Config {line_length: None, newline: LF,\n+        assert!(![0u8, ..1000].to_base64(Config {line_length: None,\n+                                                 newline: Newline::LF,\n                                                  ..STANDARD})\n                               .as_slice()\n                               .contains(\"\\n\"));\n         assert_eq!(\"foobar\".as_bytes().to_base64(Config {line_length: Some(4),\n-                                                         newline: LF,\n+                                                         newline: Newline::LF,\n                                                          ..STANDARD}),\n                    \"Zm9v\\nYmFy\".to_string());\n     }"}]}