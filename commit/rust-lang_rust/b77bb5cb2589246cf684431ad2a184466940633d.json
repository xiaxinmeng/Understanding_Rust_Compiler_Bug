{"sha": "b77bb5cb2589246cf684431ad2a184466940633d", "node_id": "C_kwDOAAsO6NoAKGI3N2JiNWNiMjU4OTI0NmNmNjg0NDMxYWQyYTE4NDQ2Njk0MDYzM2Q", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-14T19:01:35Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-17T20:04:37Z"}, "message": "Update with final comments", "tree": {"sha": "bf5a37095016cb1ed1cb9840a3f3408d677fdf9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf5a37095016cb1ed1cb9840a3f3408d677fdf9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b77bb5cb2589246cf684431ad2a184466940633d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b77bb5cb2589246cf684431ad2a184466940633d", "html_url": "https://github.com/rust-lang/rust/commit/b77bb5cb2589246cf684431ad2a184466940633d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b77bb5cb2589246cf684431ad2a184466940633d/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "html_url": "https://github.com/rust-lang/rust/commit/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91"}], "stats": {"total": 41, "additions": 10, "deletions": 31}, "files": [{"sha": "f2ed5ae26a3c268569cf3174c25ef9d77e04407a", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77bb5cb2589246cf684431ad2a184466940633d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77bb5cb2589246cf684431ad2a184466940633d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=b77bb5cb2589246cf684431ad2a184466940633d", "patch": "@@ -756,7 +756,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                             // when we started out trying to unify\n                             // some inference variables. See the comment above\n                             // for more infomration\n-                            if p.term().skip_binder().ty().has_infer_types() {\n+                            if p.term().skip_binder().has_infer_types() {\n                                 if !self.evaluate_nested_obligations(\n                                     ty,\n                                     v.into_iter(),"}, {"sha": "f89349505bec5be970f0b90a5433dcae1428797c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b77bb5cb2589246cf684431ad2a184466940633d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77bb5cb2589246cf684431ad2a184466940633d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=b77bb5cb2589246cf684431ad2a184466940633d", "patch": "@@ -1804,11 +1804,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             ty::PredicateKind::Projection(data) => {\n                 let self_ty = data.projection_ty.self_ty();\n-                let ty = data.term.ty();\n+                let term = data.term;\n                 if predicate.references_error() || self.is_tainted_by_errors() {\n                     return;\n                 }\n-                if self_ty.needs_infer() && ty.needs_infer() {\n+                if self_ty.needs_infer() && term.needs_infer() {\n                     // We do this for the `foo.collect()?` case to produce a suggestion.\n                     let mut err = self.emit_inference_failure_err(\n                         body_id,"}, {"sha": "f49f53351aac8dc6a129eea5683a3fa095ec2811", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77bb5cb2589246cf684431ad2a184466940633d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77bb5cb2589246cf684431ad2a184466940633d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=b77bb5cb2589246cf684431ad2a184466940633d", "patch": "@@ -1802,7 +1802,7 @@ fn confirm_param_env_candidate<'cx, 'tcx>(\n         Ok(InferOk { value: _, obligations }) => {\n             nested_obligations.extend(obligations);\n             assoc_ty_own_obligations(selcx, obligation, &mut nested_obligations);\n-            // FIXME(...): Handle consts here as well? Maybe this progress type should just take\n+            // FIXME(associated_const_equality): Handle consts here as well? Maybe this progress type should just take\n             // a term instead.\n             Progress { ty: cache_entry.term.ty().unwrap(), obligations: nested_obligations }\n         }"}, {"sha": "7c53e49e280d6e7cd849c6d10f05124a8b3e9975", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b77bb5cb2589246cf684431ad2a184466940633d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77bb5cb2589246cf684431ad2a184466940633d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=b77bb5cb2589246cf684431ad2a184466940633d", "patch": "@@ -1403,9 +1403,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         // `trait_object_dummy_self`, so check for that.\n                         let references_self = match pred.skip_binder().term {\n                             ty::Term::Ty(ty) => ty.walk().any(|arg| arg == dummy_self.into()),\n-                            ty::Term::Const(c) => {\n-                                c.ty.walk().any(|arg| arg == dummy_self.into())\n-                            }\n+                            ty::Term::Const(c) => c.ty.walk().any(|arg| arg == dummy_self.into()),\n                         };\n \n                         // If the projection output contains `Self`, force the user to"}, {"sha": "cd4b42f9f84c8089123ee96a5f6e87df0e978379", "filename": "src/test/ui/associated-consts/assoc-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b77bb5cb2589246cf684431ad2a184466940633d/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77bb5cb2589246cf684431ad2a184466940633d/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.rs?ref=b77bb5cb2589246cf684431ad2a184466940633d", "patch": "@@ -1,3 +1,5 @@\n+#![feature(associated_const_equality)]\n+\n pub trait Foo {\n   const N: usize;\n }\n@@ -13,9 +15,7 @@ const TEST:usize = 3;\n \n fn foo<F: Foo<N=3>>() {}\n //~^ ERROR associated const equality is incomplete\n-//~| ERROR associated const equality is incomplete\n fn bar<F: Foo<N={TEST}>>() {}\n //~^ ERROR associated const equality is incomplete\n-//~| ERROR associated const equality is incomplete\n \n fn main() {}"}, {"sha": "ccaa6fa8ee8847156bd2170cba80504468f6ce05", "filename": "src/test/ui/associated-consts/assoc-const.stderr", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b77bb5cb2589246cf684431ad2a184466940633d/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b77bb5cb2589246cf684431ad2a184466940633d/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.stderr?ref=b77bb5cb2589246cf684431ad2a184466940633d", "patch": "@@ -1,33 +1,14 @@\n-error[E0658]: associated const equality is incomplete\n-  --> $DIR/assoc-const.rs:14:15\n-   |\n-LL | fn foo<F: Foo<N=3>>() {}\n-   |               ^^^\n-   |\n-   = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n-   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n-\n-error[E0658]: associated const equality is incomplete\n-  --> $DIR/assoc-const.rs:17:15\n-   |\n-LL | fn bar<F: Foo<N={TEST}>>() {}\n-   |               ^^^^^^^^\n-   |\n-   = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n-   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n-\n error: associated const equality is incomplete\n-  --> $DIR/assoc-const.rs:14:15\n+  --> $DIR/assoc-const.rs:16:15\n    |\n LL | fn foo<F: Foo<N=3>>() {}\n    |               ^^^ cannot yet relate associated const\n \n error: associated const equality is incomplete\n-  --> $DIR/assoc-const.rs:17:15\n+  --> $DIR/assoc-const.rs:18:15\n    |\n LL | fn bar<F: Foo<N={TEST}>>() {}\n    |               ^^^^^^^^ cannot yet relate associated const\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}]}