{"sha": "ff61949860813247b26d96eb374b41b46becba81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNjE5NDk4NjA4MTMyNDdiMjZkOTZlYjM3NGI0MWI0NmJlY2JhODE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-25T21:20:44Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-26T01:34:14Z"}, "message": "Tweak invalid `fn` header and body parsing\n\n* Recover empty `fn` bodies when encountering `}`\n* Recover trailing `>` in return types\n* Recover from non-type in array type `[<BAD TOKEN>; LEN]`", "tree": {"sha": "6d6b637fba7fd99eca376a8e3a17b831146dc5fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d6b637fba7fd99eca376a8e3a17b831146dc5fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff61949860813247b26d96eb374b41b46becba81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff61949860813247b26d96eb374b41b46becba81", "html_url": "https://github.com/rust-lang/rust/commit/ff61949860813247b26d96eb374b41b46becba81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff61949860813247b26d96eb374b41b46becba81/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "040f56881500279889fd847b767f5fde14b21028", "url": "https://api.github.com/repos/rust-lang/rust/commits/040f56881500279889fd847b767f5fde14b21028", "html_url": "https://github.com/rust-lang/rust/commit/040f56881500279889fd847b767f5fde14b21028"}], "stats": {"total": 80, "additions": 53, "deletions": 27}, "files": [{"sha": "3e9647096343ec44717eccbbf0886fb8f6ed8938", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ff61949860813247b26d96eb374b41b46becba81/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff61949860813247b26d96eb374b41b46becba81/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=ff61949860813247b26d96eb374b41b46becba81", "patch": "@@ -1538,7 +1538,7 @@ impl<'a> Parser<'a> {\n         generics.where_clause = self.parse_where_clause()?; // `where T: Ord`\n \n         let mut sig_hi = self.prev_token.span;\n-        let body = self.parse_fn_body(attrs, &mut sig_hi)?; // `;` or `{ ... }`.\n+        let body = self.parse_fn_body(attrs, &ident, &mut sig_hi)?; // `;` or `{ ... }`.\n         let fn_sig_span = sig_lo.to(sig_hi);\n         Ok((ident, FnSig { header, decl, span: fn_sig_span }, generics, body))\n     }\n@@ -1549,6 +1549,7 @@ impl<'a> Parser<'a> {\n     fn parse_fn_body(\n         &mut self,\n         attrs: &mut Vec<Attribute>,\n+        ident: &Ident,\n         sig_hi: &mut Span,\n     ) -> PResult<'a, Option<P<Block>>> {\n         let (inner_attrs, body) = if self.eat(&token::Semi) {\n@@ -1573,9 +1574,21 @@ impl<'a> Parser<'a> {\n                 .emit();\n             (Vec::new(), Some(self.mk_block_err(span)))\n         } else {\n-            return self\n-                .expected_one_of_not_found(&[], &[token::Semi, token::OpenDelim(token::Brace)])\n-                .map(|_| None);\n+            if let Err(mut err) =\n+                self.expected_one_of_not_found(&[], &[token::Semi, token::OpenDelim(token::Brace)])\n+            {\n+                if self.token.kind == token::CloseDelim(token::Brace) {\n+                    // The enclosing `mod`, `trait` or `impl` is being closed, so keep the `fn` in\n+                    // the AST for typechecking.\n+                    err.span_label(ident.span, \"while parsing this `fn`\");\n+                    err.emit();\n+                    (Vec::new(), None)\n+                } else {\n+                    return Err(err);\n+                }\n+            } else {\n+                unreachable!()\n+            }\n         };\n         attrs.extend(inner_attrs);\n         Ok(body)\n@@ -1653,10 +1666,19 @@ impl<'a> Parser<'a> {\n         req_name: ReqName,\n         ret_allow_plus: AllowPlus,\n     ) -> PResult<'a, P<FnDecl>> {\n-        Ok(P(FnDecl {\n-            inputs: self.parse_fn_params(req_name)?,\n-            output: self.parse_ret_ty(ret_allow_plus, RecoverQPath::Yes)?,\n-        }))\n+        let inputs = self.parse_fn_params(req_name)?;\n+        let output = self.parse_ret_ty(ret_allow_plus, RecoverQPath::Yes)?;\n+\n+        if let ast::FnRetTy::Ty(ty) = &output {\n+            if let TyKind::Path(_, Path { segments, .. }) = &ty.kind {\n+                if let [.., last] = &segments[..] {\n+                    // Detect and recover `fn foo() -> Vec<i32>> {}`\n+                    self.check_trailing_angle_brackets(last, &[&token::OpenDelim(token::Brace)]);\n+                }\n+            }\n+        }\n+\n+        Ok(P(FnDecl { inputs, output }))\n     }\n \n     /// Parses the parameter list of a function, including the `(` and `)` delimiters."}, {"sha": "7a6ebca4e1541db1a45346be11063a1fbaaaaf3d", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff61949860813247b26d96eb374b41b46becba81/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff61949860813247b26d96eb374b41b46becba81/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=ff61949860813247b26d96eb374b41b46becba81", "patch": "@@ -265,7 +265,19 @@ impl<'a> Parser<'a> {\n     /// Parses an array (`[TYPE; EXPR]`) or slice (`[TYPE]`) type.\n     /// The opening `[` bracket is already eaten.\n     fn parse_array_or_slice_ty(&mut self) -> PResult<'a, TyKind> {\n-        let elt_ty = self.parse_ty()?;\n+        let elt_ty = match self.parse_ty() {\n+            Ok(ty) => ty,\n+            Err(mut err)\n+                if self.look_ahead(1, |t| t.kind == token::CloseDelim(token::Bracket))\n+                    | self.look_ahead(1, |t| t.kind == token::Semi) =>\n+            {\n+                // Recover from `[LIT; EXPR]` and `[LIT]`\n+                self.bump();\n+                err.emit();\n+                self.mk_ty(self.prev_token.span, TyKind::Err)\n+            }\n+            Err(err) => return Err(err),\n+        };\n         let ty = if self.eat(&token::Semi) {\n             TyKind::Array(elt_ty, self.parse_anon_const_expr()?)\n         } else {"}, {"sha": "46b5aa334ca6f2fb9dcc7153d6a94500c957ec15", "filename": "src/test/ui/issues/issue-39616.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff61949860813247b26d96eb374b41b46becba81/src%2Ftest%2Fui%2Fissues%2Fissue-39616.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff61949860813247b26d96eb374b41b46becba81/src%2Ftest%2Fui%2Fissues%2Fissue-39616.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39616.rs?ref=ff61949860813247b26d96eb374b41b46becba81", "patch": "@@ -1,4 +1,3 @@\n fn foo(a: [0; 1]) {} //~ ERROR expected type, found `0`\n-//~| ERROR expected one of `)`, `,`, `->`, `;`, `where`, or `{`, found `]`\n \n fn main() {}"}, {"sha": "393d1f2e2ce676532abb776d2f7237336537e927", "filename": "src/test/ui/issues/issue-39616.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff61949860813247b26d96eb374b41b46becba81/src%2Ftest%2Fui%2Fissues%2Fissue-39616.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff61949860813247b26d96eb374b41b46becba81/src%2Ftest%2Fui%2Fissues%2Fissue-39616.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39616.stderr?ref=ff61949860813247b26d96eb374b41b46becba81", "patch": "@@ -4,11 +4,5 @@ error: expected type, found `0`\n LL | fn foo(a: [0; 1]) {}\n    |            ^ expected type\n \n-error: expected one of `)`, `,`, `->`, `;`, `where`, or `{`, found `]`\n-  --> $DIR/issue-39616.rs:1:16\n-   |\n-LL | fn foo(a: [0; 1]) {}\n-   |                ^ expected one of `)`, `,`, `->`, `;`, `where`, or `{`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "20665b549d2577ffe35adebcc4590234afdfe0ca", "filename": "src/test/ui/parser/issue-24780.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff61949860813247b26d96eb374b41b46becba81/src%2Ftest%2Fui%2Fparser%2Fissue-24780.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff61949860813247b26d96eb374b41b46becba81/src%2Ftest%2Fui%2Fparser%2Fissue-24780.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-24780.rs?ref=ff61949860813247b26d96eb374b41b46becba81", "patch": "@@ -1,8 +1,9 @@\n // Verify that '>' is not both expected and found at the same time, as it used\n // to happen in #24780. For example, following should be an error:\n-// expected one of ..., `>`, ... found `>`\n+// expected one of ..., `>`, ... found `>`. No longer exactly this, but keeping for posterity.\n \n-fn foo() -> Vec<usize>> {\n-    //~^ ERROR expected one of `!`, `+`, `::`, `;`, `where`, or `{`, found `>`\n+fn foo() -> Vec<usize>> { //~ ERROR unmatched angle bracket\n     Vec::new()\n }\n+\n+fn main() {}"}, {"sha": "d12b13d35f8ad4ed22572d770520f7cb22358821", "filename": "src/test/ui/parser/issue-24780.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff61949860813247b26d96eb374b41b46becba81/src%2Ftest%2Fui%2Fparser%2Fissue-24780.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff61949860813247b26d96eb374b41b46becba81/src%2Ftest%2Fui%2Fparser%2Fissue-24780.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-24780.stderr?ref=ff61949860813247b26d96eb374b41b46becba81", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `!`, `+`, `::`, `;`, `where`, or `{`, found `>`\n+error: unmatched angle bracket\n   --> $DIR/issue-24780.rs:5:23\n    |\n LL | fn foo() -> Vec<usize>> {\n-   |                       ^ expected one of `!`, `+`, `::`, `;`, `where`, or `{`\n+   |                       ^^ help: remove extra angle bracket\n \n error: aborting due to previous error\n "}, {"sha": "4a3bc752553b982ac47ebeff39eeeda7f2fa984f", "filename": "src/test/ui/parser/issue-6610.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff61949860813247b26d96eb374b41b46becba81/src%2Ftest%2Fui%2Fparser%2Fissue-6610.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff61949860813247b26d96eb374b41b46becba81/src%2Ftest%2Fui%2Fparser%2Fissue-6610.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-6610.stderr?ref=ff61949860813247b26d96eb374b41b46becba81", "patch": "@@ -2,11 +2,9 @@ error: expected one of `->`, `;`, `where`, or `{`, found `}`\n   --> $DIR/issue-6610.rs:1:20\n    |\n LL | trait Foo { fn a() }\n-   |           -        ^\n-   |           |        |\n-   |           |        expected one of `->`, `;`, `where`, or `{`\n-   |           |        the item list ends here\n-   |           while parsing this item list starting here\n+   |                -   ^ expected one of `->`, `;`, `where`, or `{`\n+   |                |\n+   |                while parsing this `fn`\n \n error: aborting due to previous error\n "}]}