{"sha": "43de95ca5b177bdb61a2ea8d8206a3234e75eff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZGU5NWNhNWIxNzdiZGI2MWEyZWE4ZDgyMDZhMzIzNGU3NWVmZjY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-06T08:25:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-06T08:25:28Z"}, "message": "Rollup merge of #48403 - lukaslueg:casted, r=steveklabnik\n\nFix spelling s/casted/cast/\n\nr? @GuillaumeGomez", "tree": {"sha": "afa07cfebb1a726ff2abbd1c9c9be10f237fb7b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afa07cfebb1a726ff2abbd1c9c9be10f237fb7b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43de95ca5b177bdb61a2ea8d8206a3234e75eff6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJanlB5CRBK7hj4Ov3rIwAAdHIIAIIpKk4O+0nlASFxHFzvoe6f\nRoXcC+FBGiySyvBs9C2gZNkjC9uL2RtyT11l0EXem4MgzeQ28H/u+3BuDksB3yFq\nUNFM0fGfEMpAviX02NYJfus3GTL0fPc2Szn1jWQ/4qpsjEYUgEYFu/wzj2BcLE6c\nlKYtcPmMynoBEYDBpxpcLwFAhxAAQwn1IPwWicy3BujmEoT2zLpdNKeIIYh3gTXb\nE4JSkSoT3o4H6aUgfRlKMB+OnTa1AG2gMGVa2LOYM7ns6WVFy8iaQHBPDvgMESYr\nyhkAVF+uusp8tER1giX3Gi/nHZNw0byWkemtREaRA24BvmTOqgS1gUV2WOzUunE=\n=rjf6\n-----END PGP SIGNATURE-----\n", "payload": "tree afa07cfebb1a726ff2abbd1c9c9be10f237fb7b5\nparent 1733a61141d125beb45587dd89d54cd4a01cdd5a\nparent f7693c06338c825d0d49eb1373e2039416b38389\nauthor kennytm <kennytm@gmail.com> 1520324728 +0800\ncommitter GitHub <noreply@github.com> 1520324728 +0800\n\nRollup merge of #48403 - lukaslueg:casted, r=steveklabnik\n\nFix spelling s/casted/cast/\n\nr? @GuillaumeGomez\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43de95ca5b177bdb61a2ea8d8206a3234e75eff6", "html_url": "https://github.com/rust-lang/rust/commit/43de95ca5b177bdb61a2ea8d8206a3234e75eff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1733a61141d125beb45587dd89d54cd4a01cdd5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1733a61141d125beb45587dd89d54cd4a01cdd5a", "html_url": "https://github.com/rust-lang/rust/commit/1733a61141d125beb45587dd89d54cd4a01cdd5a"}, {"sha": "f7693c06338c825d0d49eb1373e2039416b38389", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7693c06338c825d0d49eb1373e2039416b38389", "html_url": "https://github.com/rust-lang/rust/commit/f7693c06338c825d0d49eb1373e2039416b38389"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "55d4b590f9133603901949e19a20b6c6844bb064", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=43de95ca5b177bdb61a2ea8d8206a3234e75eff6", "patch": "@@ -79,7 +79,7 @@ pub const MAX: char = '\\u{10ffff}';\n \n /// Converts a `u32` to a `char`.\n ///\n-/// Note that all [`char`]s are valid [`u32`]s, and can be casted to one with\n+/// Note that all [`char`]s are valid [`u32`]s, and can be cast to one with\n /// [`as`]:\n ///\n /// ```\n@@ -131,7 +131,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n \n /// Converts a `u32` to a `char`, ignoring validity.\n ///\n-/// Note that all [`char`]s are valid [`u32`]s, and can be casted to one with\n+/// Note that all [`char`]s are valid [`u32`]s, and can be cast to one with\n /// [`as`]:\n ///\n /// ```"}, {"sha": "5431318dff959d4be9978e18c620ae5213b2446b", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=43de95ca5b177bdb61a2ea8d8206a3234e75eff6", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                         let mut err = cx.struct_span_lint(\n                                                              OVERFLOWING_LITERALS,\n                                                              parent_expr.span,\n-                                                             \"only u8 can be casted into char\");\n+                                                             \"only u8 can be cast into char\");\n                                         err.span_suggestion(parent_expr.span,\n                                                             &\"use a char literal instead\",\n                                                             format!(\"'\\\\u{{{:X}}}'\", lit_val));"}, {"sha": "da2a22df997d170f4a865e0963b0532f00080d28", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=43de95ca5b177bdb61a2ea8d8206a3234e75eff6", "patch": "@@ -3114,7 +3114,7 @@ impl<'a> Parser<'a> {\n                         let expr_str = self.sess.codemap().span_to_snippet(expr.span)\n                                                 .unwrap_or(pprust::expr_to_string(&expr));\n                         err.span_suggestion(expr.span,\n-                                            &format!(\"try {} the casted value\", op_verb),\n+                                            &format!(\"try {} the cast value\", op_verb),\n                                             format!(\"({})\", expr_str));\n                         err.emit();\n "}, {"sha": "0dede8eb70de046a594b06a28e0bd4948fefe717", "filename": "src/test/run-pass/extern-types-pointer-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Ftest%2Frun-pass%2Fextern-types-pointer-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Ftest%2Frun-pass%2Fextern-types-pointer-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-types-pointer-cast.rs?ref=43de95ca5b177bdb61a2ea8d8206a3234e75eff6", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that pointers to extern types can be casted from/to usize,\n+// Test that pointers to extern types can be cast from/to usize,\n // despite being !Sized.\n \n #![feature(extern_types)]"}, {"sha": "4dfa5037bc5551373a94232f5ce1e16b99c6796a", "filename": "src/test/ui/cast_char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Ftest%2Fui%2Fcast_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Ftest%2Fui%2Fcast_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast_char.rs?ref=43de95ca5b177bdb61a2ea8d8206a3234e75eff6", "patch": "@@ -12,9 +12,9 @@\n \n fn main() {\n     const XYZ: char = 0x1F888 as char;\n-    //~^ ERROR only u8 can be casted into char\n+    //~^ ERROR only u8 can be cast into char\n     const XY: char = 129160 as char;\n-    //~^ ERROR only u8 can be casted into char\n+    //~^ ERROR only u8 can be cast into char\n     const ZYX: char = '\\u{01F888}';\n     println!(\"{}\", XYZ);\n }"}, {"sha": "600d7e61a0986018af5515c29684555ca361efc6", "filename": "src/test/ui/cast_char.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Ftest%2Fui%2Fcast_char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Ftest%2Fui%2Fcast_char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast_char.stderr?ref=43de95ca5b177bdb61a2ea8d8206a3234e75eff6", "patch": "@@ -1,4 +1,4 @@\n-error: only u8 can be casted into char\n+error: only u8 can be cast into char\n   --> $DIR/cast_char.rs:14:23\n    |\n LL |     const XYZ: char = 0x1F888 as char;\n@@ -10,7 +10,7 @@ note: lint level defined here\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: only u8 can be casted into char\n+error: only u8 can be cast into char\n   --> $DIR/cast_char.rs:16:22\n    |\n LL |     const XY: char = 129160 as char;"}, {"sha": "257b9bd235d763a4f4fdb04f0235693a489b3624", "filename": "src/test/ui/issue-22644.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Ftest%2Fui%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Ftest%2Fui%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.stderr?ref=43de95ca5b177bdb61a2ea8d8206a3234e75eff6", "patch": "@@ -5,7 +5,7 @@ LL |     println!(\"{}\", a as usize < long_name); //~ ERROR `<` is interpreted as\n    |                    ---------- ^ --------- interpreted as generic arguments\n    |                    |          |\n    |                    |          not interpreted as comparison\n-   |                    help: try comparing the casted value: `(a as usize)`\n+   |                    help: try comparing the cast value: `(a as usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:17:33\n@@ -14,7 +14,7 @@ LL |     println!(\"{}{}\", a as usize < long_name, long_name);\n    |                      ---------- ^ -------------------- interpreted as generic arguments\n    |                      |          |\n    |                      |          not interpreted as comparison\n-   |                      help: try comparing the casted value: `(a as usize)`\n+   |                      help: try comparing the cast value: `(a as usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:19:31\n@@ -23,7 +23,7 @@ LL |     println!(\"{}\", a as usize < 4); //~ ERROR `<` is interpreted as a start\n    |                    ---------- ^ - interpreted as generic arguments\n    |                    |          |\n    |                    |          not interpreted as comparison\n-   |                    help: try comparing the casted value: `(a as usize)`\n+   |                    help: try comparing the cast value: `(a as usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:21:31\n@@ -32,7 +32,7 @@ LL |     println!(\"{}{}\", a: usize < long_name, long_name);\n    |                      -------- ^ -------------------- interpreted as generic arguments\n    |                      |        |\n    |                      |        not interpreted as comparison\n-   |                      help: try comparing the casted value: `(a: usize)`\n+   |                      help: try comparing the cast value: `(a: usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:23:29\n@@ -41,7 +41,7 @@ LL |     println!(\"{}\", a: usize < 4); //~ ERROR `<` is interpreted as a start o\n    |                    -------- ^ - interpreted as generic arguments\n    |                    |        |\n    |                    |        not interpreted as comparison\n-   |                    help: try comparing the casted value: `(a: usize)`\n+   |                    help: try comparing the cast value: `(a: usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:28:20\n@@ -50,7 +50,7 @@ LL |                    < //~ ERROR `<` is interpreted as a start of generic\n    |                    ^ not interpreted as comparison\n LL |                    4);\n    |                    - interpreted as generic arguments\n-help: try comparing the casted value\n+help: try comparing the cast value\n    |\n LL |     println!(\"{}\", (a\n LL |                    as\n@@ -64,7 +64,7 @@ LL |                    < //~ ERROR `<` is interpreted as a start of generic\n    |                    ^ not interpreted as comparison\n LL |                    5);\n    |                    - interpreted as generic arguments\n-help: try comparing the casted value\n+help: try comparing the cast value\n    |\n LL |     println!(\"{}\", (a\n LL | \n@@ -81,7 +81,7 @@ LL |     println!(\"{}\", a as usize << long_name); //~ ERROR `<` is interpreted a\n    |                    ---------- ^^ --------- interpreted as generic arguments\n    |                    |          |\n    |                    |          not interpreted as shift\n-   |                    help: try shifting the casted value: `(a as usize)`\n+   |                    help: try shifting the cast value: `(a as usize)`\n \n error: expected type, found `4`\n   --> $DIR/issue-22644.rs:42:28"}, {"sha": "9164434006f6170f39dfd1f9aec281b2dc3b2f67", "filename": "src/test/ui/issue-42954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Ftest%2Fui%2Fissue-42954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43de95ca5b177bdb61a2ea8d8206a3234e75eff6/src%2Ftest%2Fui%2Fissue-42954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42954.stderr?ref=43de95ca5b177bdb61a2ea8d8206a3234e75eff6", "patch": "@@ -5,7 +5,7 @@ LL |         $i as u32 < 0 //~ `<` is interpreted as a start of generic argument\n    |         --------- ^ - interpreted as generic arguments\n    |         |         |\n    |         |         not interpreted as comparison\n-   |         help: try comparing the casted value: `($i as u32)`\n+   |         help: try comparing the cast value: `($i as u32)`\n ...\n LL |     is_plainly_printable!(c);\n    |     ------------------------- in this macro invocation"}]}