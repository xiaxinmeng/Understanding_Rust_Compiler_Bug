{"sha": "fd6be2fa4eac4638174a484529ef782007d0fec1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNmJlMmZhNGVhYzQ2MzgxNzRhNDg0NTI5ZWY3ODIwMDdkMGZlYzE=", "commit": {"author": {"name": "Daniel Patterson", "email": "dbp@riseup.net", "date": "2012-10-04T22:18:02Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-17T19:59:30Z"}, "message": "std::treemap - changing types to reflect constraints, adding equality check (space expensive)", "tree": {"sha": "b4ab77d973cf84febaefefee96f408079ef4bc4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4ab77d973cf84febaefefee96f408079ef4bc4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd6be2fa4eac4638174a484529ef782007d0fec1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd6be2fa4eac4638174a484529ef782007d0fec1", "html_url": "https://github.com/rust-lang/rust/commit/fd6be2fa4eac4638174a484529ef782007d0fec1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd6be2fa4eac4638174a484529ef782007d0fec1/comments", "author": null, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2544d8d80f20e9c1e39c3c455b18ebe1922d1d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2544d8d80f20e9c1e39c3c455b18ebe1922d1d5", "html_url": "https://github.com/rust-lang/rust/commit/f2544d8d80f20e9c1e39c3c455b18ebe1922d1d5"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "f332c06d0bc3bb9816bc8d81f69289a0e1e650b0", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fd6be2fa4eac4638174a484529ef782007d0fec1/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6be2fa4eac4638174a484529ef782007d0fec1/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=fd6be2fa4eac4638174a484529ef782007d0fec1", "patch": "@@ -11,28 +11,28 @@ use core::cmp::{Eq, Ord};\n use core::option::{Some, None};\n use Option = core::Option;\n \n-pub type TreeMap<K, V> = @mut TreeEdge<K, V>;\n+pub type TreeMap<K: Copy Eq Ord, V: Copy> = @mut TreeEdge<K, V>;\n \n-type TreeEdge<K, V> = Option<@TreeNode<K, V>>;\n+type TreeEdge<K: Copy Eq Ord, V: Copy> = Option<@TreeNode<K, V>>;\n \n-enum TreeNode<K, V> = {\n+struct TreeNode<K: Copy Eq Ord, V: Copy> {\n     key: K,\n     mut value: V,\n     mut left: TreeEdge<K, V>,\n     mut right: TreeEdge<K, V>\n-};\n+}\n \n /// Create a treemap\n-pub fn TreeMap<K, V>() -> TreeMap<K, V> { @mut None }\n+pub fn TreeMap<K: Copy Eq Ord, V: Copy>() -> TreeMap<K, V> { @mut None }\n \n /// Insert a value into the map\n pub fn insert<K: Copy Eq Ord, V: Copy>(m: &mut TreeEdge<K, V>, k: K, v: V) {\n     match copy *m {\n       None => {\n-        *m = Some(@TreeNode({key: k,\n-                              mut value: v,\n-                              mut left: None,\n-                              mut right: None}));\n+        *m = Some(@TreeNode {key: k,\n+                             mut value: v,\n+                             mut left: None,\n+                             mut right: None});\n         return;\n       }\n       Some(node) => {\n@@ -67,7 +67,8 @@ pub fn find<K: Copy Eq Ord, V: Copy>(m: &const TreeEdge<K, V>, k: K)\n }\n \n /// Visit all pairs in the map in order.\n-pub fn traverse<K, V: Copy>(m: &const TreeEdge<K, V>, f: fn((&K), (&V))) {\n+pub fn traverse<K: Copy Eq Ord, V: Copy>(m: &const TreeEdge<K, V>, \n+                                         f: fn((&K), (&V))) {\n     match copy *m {\n       None => (),\n       Some(node) => {\n@@ -79,6 +80,19 @@ pub fn traverse<K, V: Copy>(m: &const TreeEdge<K, V>, f: fn((&K), (&V))) {\n     }\n }\n \n+/// Compare two treemaps and return true iff \n+/// they contain same keys and values\n+pub fn equals<K: Copy Eq Ord, V: Copy Eq>(t1: &const TreeEdge<K, V>,\n+                                          t2: &const TreeEdge<K, V>) \n+                                        -> bool {\n+    let mut v1 = ~[];\n+    let mut v2 = ~[];\n+    traverse(t1, |k,v| { v1.push((copy *k, copy *v)) });\n+    traverse(t2, |k,v| { v2.push((copy *k, copy *v)) });\n+    return v1 == v2;\n+}\n+\n+\n #[cfg(test)]\n mod tests {\n     #[legacy_exports];\n@@ -127,6 +141,28 @@ mod tests {\n         traverse(m, |x,y| t(n, *x, *y));\n     }\n \n+    #[test]\n+    fn equality() {\n+        let m1 = TreeMap();\n+        insert(m1, 3, ());\n+        insert(m1, 0, ());\n+        insert(m1, 4, ());\n+        insert(m1, 2, ());\n+        insert(m1, 1, ());\n+        let m2 = TreeMap();\n+        insert(m2, 2, ());\n+        insert(m2, 1, ());\n+        insert(m2, 3, ());\n+        insert(m2, 0, ());\n+        insert(m2, 4, ());\n+\n+        assert equals(m1, m2);\n+\n+        let m3 = TreeMap();\n+        assert !equals(m1,m3);\n+\n+    }\n+\n     #[test]\n     fn u8_map() {\n         let m = TreeMap();"}]}