{"sha": "8589a2d843487081530d49100927e385d80cb836", "node_id": "C_kwDOAAsO6NoAKDg1ODlhMmQ4NDM0ODcwODE1MzBkNDkxMDA5MjdlMzg1ZDgwY2I4MzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-26T11:30:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-26T11:30:40Z"}, "message": "Auto merge of #14849 - alibektas:14557n, r=Veykril\n\nenhancement : using doc aliases to search workspace symbols  ( fixes #14557 )\n\nDoc aliases are now visible among symbols and can be used for searching.", "tree": {"sha": "c9039ddb36cf9ad6dd25d3163d5def10db47f023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9039ddb36cf9ad6dd25d3163d5def10db47f023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8589a2d843487081530d49100927e385d80cb836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8589a2d843487081530d49100927e385d80cb836", "html_url": "https://github.com/rust-lang/rust/commit/8589a2d843487081530d49100927e385d80cb836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8589a2d843487081530d49100927e385d80cb836/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fd92604728174a54f2ac47af2713ddf06124867", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd92604728174a54f2ac47af2713ddf06124867", "html_url": "https://github.com/rust-lang/rust/commit/2fd92604728174a54f2ac47af2713ddf06124867"}, {"sha": "d49924dc6e3c236e305c28cb630d5f2888a7e363", "url": "https://api.github.com/repos/rust-lang/rust/commits/d49924dc6e3c236e305c28cb630d5f2888a7e363", "html_url": "https://github.com/rust-lang/rust/commit/d49924dc6e3c236e305c28cb630d5f2888a7e363"}], "stats": {"total": 386, "additions": 338, "deletions": 48}, "files": [{"sha": "207e8206c92d5cf0b0ddf50ee169649ca2b74cb2", "filename": "crates/hir/src/symbols.rs", "status": "modified", "additions": 61, "deletions": 37, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/8589a2d843487081530d49100927e385d80cb836/crates%2Fhir%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8589a2d843487081530d49100927e385d80cb836/crates%2Fhir%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsymbols.rs?ref=8589a2d843487081530d49100927e385d80cb836", "patch": "@@ -20,6 +20,7 @@ pub struct FileSymbol {\n     pub def: ModuleDef,\n     pub loc: DeclarationLocation,\n     pub container_name: Option<SmolStr>,\n+    pub is_alias: bool,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -249,46 +250,69 @@ impl<'a> SymbolCollector<'a> {\n         <L as Lookup>::Data: HasSource,\n         <<L as Lookup>::Data as HasSource>::Value: HasName,\n     {\n-        self.push_file_symbol(|s| {\n-            let loc = id.lookup(s.db.upcast());\n-            let source = loc.source(s.db.upcast());\n-            let name_node = source.value.name()?;\n-            Some(FileSymbol {\n-                name: name_node.text().into(),\n-                def: ModuleDef::from(id.into()),\n-                container_name: s.current_container_name.clone(),\n-                loc: DeclarationLocation {\n-                    hir_file_id: source.file_id,\n-                    ptr: SyntaxNodePtr::new(source.value.syntax()),\n-                    name_ptr: SyntaxNodePtr::new(name_node.syntax()),\n-                },\n-            })\n-        })\n-    }\n+        let loc = id.lookup(self.db.upcast());\n+        let source = loc.source(self.db.upcast());\n+        let Some(name_node) = source.value.name() else { return };\n+        let def = ModuleDef::from(id.into());\n+        let dec_loc = DeclarationLocation {\n+            hir_file_id: source.file_id,\n+            ptr: SyntaxNodePtr::new(source.value.syntax()),\n+            name_ptr: SyntaxNodePtr::new(name_node.syntax()),\n+        };\n+\n+        if let Some(attrs) = def.attrs(self.db) {\n+            for alias in attrs.doc_aliases() {\n+                self.symbols.push(FileSymbol {\n+                    name: alias,\n+                    def,\n+                    loc: dec_loc.clone(),\n+                    container_name: self.current_container_name.clone(),\n+                    is_alias: true,\n+                });\n+            }\n+        }\n \n-    fn push_module(&mut self, module_id: ModuleId) {\n-        self.push_file_symbol(|s| {\n-            let def_map = module_id.def_map(s.db.upcast());\n-            let module_data = &def_map[module_id.local_id];\n-            let declaration = module_data.origin.declaration()?;\n-            let module = declaration.to_node(s.db.upcast());\n-            let name_node = module.name()?;\n-            Some(FileSymbol {\n-                name: name_node.text().into(),\n-                def: ModuleDef::Module(module_id.into()),\n-                container_name: s.current_container_name.clone(),\n-                loc: DeclarationLocation {\n-                    hir_file_id: declaration.file_id,\n-                    ptr: SyntaxNodePtr::new(module.syntax()),\n-                    name_ptr: SyntaxNodePtr::new(name_node.syntax()),\n-                },\n-            })\n-        })\n+        self.symbols.push(FileSymbol {\n+            name: name_node.text().into(),\n+            def,\n+            container_name: self.current_container_name.clone(),\n+            loc: dec_loc,\n+            is_alias: false,\n+        });\n     }\n \n-    fn push_file_symbol(&mut self, f: impl FnOnce(&Self) -> Option<FileSymbol>) {\n-        if let Some(file_symbol) = f(self) {\n-            self.symbols.push(file_symbol);\n+    fn push_module(&mut self, module_id: ModuleId) {\n+        let def_map = module_id.def_map(self.db.upcast());\n+        let module_data = &def_map[module_id.local_id];\n+        let Some(declaration) = module_data.origin.declaration() else { return };\n+        let module = declaration.to_node(self.db.upcast());\n+        let Some(name_node) = module.name() else { return };\n+        let dec_loc = DeclarationLocation {\n+            hir_file_id: declaration.file_id,\n+            ptr: SyntaxNodePtr::new(module.syntax()),\n+            name_ptr: SyntaxNodePtr::new(name_node.syntax()),\n+        };\n+\n+        let def = ModuleDef::Module(module_id.into());\n+\n+        if let Some(attrs) = def.attrs(self.db) {\n+            for alias in attrs.doc_aliases() {\n+                self.symbols.push(FileSymbol {\n+                    name: alias,\n+                    def,\n+                    loc: dec_loc.clone(),\n+                    container_name: self.current_container_name.clone(),\n+                    is_alias: true,\n+                });\n+            }\n         }\n+\n+        self.symbols.push(FileSymbol {\n+            name: name_node.text().into(),\n+            def: ModuleDef::Module(module_id.into()),\n+            container_name: self.current_container_name.clone(),\n+            loc: dec_loc,\n+            is_alias: false,\n+        });\n     }\n }"}, {"sha": "b54c43b296b2addc4077405322c312963303ea49", "filename": "crates/ide-db/src/symbol_index.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8589a2d843487081530d49100927e385d80cb836/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8589a2d843487081530d49100927e385d80cb836/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs?ref=8589a2d843487081530d49100927e385d80cb836", "patch": "@@ -434,4 +434,31 @@ struct StructInModB;\n \n         expect_file![\"./test_data/test_symbol_index_collection.txt\"].assert_debug_eq(&symbols);\n     }\n+\n+    #[test]\n+    fn test_doc_alias() {\n+        let (db, _) = RootDatabase::with_single_file(\n+            r#\"\n+#[doc(alias=\"s1\")]\n+#[doc(alias=\"s2\")]\n+#[doc(alias(\"mul1\",\"mul2\"))]\n+struct Struct;\n+\n+#[doc(alias=\"s1\")]\n+struct Duplicate;\n+        \"#,\n+        );\n+\n+        let symbols: Vec<_> = Crate::from(db.test_crate())\n+            .modules(&db)\n+            .into_iter()\n+            .map(|module_id| {\n+                let mut symbols = SymbolCollector::collect_module(&db, module_id);\n+                symbols.sort_by_key(|it| it.name.clone());\n+                (module_id, symbols)\n+            })\n+            .collect();\n+\n+        expect_file![\"./test_data/test_doc_alias.txt\"].assert_debug_eq(&symbols);\n+    }\n }"}, {"sha": "77714efa350409179ee53f541fbb22be3f6b665f", "filename": "crates/ide-db/src/test_data/test_doc_alias.txt", "status": "added", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/8589a2d843487081530d49100927e385d80cb836/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_doc_alias.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8589a2d843487081530d49100927e385d80cb836/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_doc_alias.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_doc_alias.txt?ref=8589a2d843487081530d49100927e385d80cb836", "patch": "@@ -0,0 +1,202 @@\n+[\n+    (\n+        Module {\n+            id: ModuleId {\n+                krate: Idx::<CrateData>(0),\n+                block: None,\n+                local_id: Idx::<ModuleData>(0),\n+            },\n+        },\n+        [\n+            FileSymbol {\n+                name: \"Duplicate\",\n+                def: Adt(\n+                    Struct(\n+                        Struct {\n+                            id: StructId(\n+                                1,\n+                            ),\n+                        },\n+                    ),\n+                ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: STRUCT,\n+                        range: 83..119,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 109..118,\n+                    },\n+                },\n+                container_name: None,\n+                is_alias: false,\n+            },\n+            FileSymbol {\n+                name: \"Struct\",\n+                def: Adt(\n+                    Struct(\n+                        Struct {\n+                            id: StructId(\n+                                0,\n+                            ),\n+                        },\n+                    ),\n+                ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: STRUCT,\n+                        range: 0..81,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 74..80,\n+                    },\n+                },\n+                container_name: None,\n+                is_alias: false,\n+            },\n+            FileSymbol {\n+                name: \"mul1\",\n+                def: Adt(\n+                    Struct(\n+                        Struct {\n+                            id: StructId(\n+                                0,\n+                            ),\n+                        },\n+                    ),\n+                ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: STRUCT,\n+                        range: 0..81,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 74..80,\n+                    },\n+                },\n+                container_name: None,\n+                is_alias: true,\n+            },\n+            FileSymbol {\n+                name: \"mul2\",\n+                def: Adt(\n+                    Struct(\n+                        Struct {\n+                            id: StructId(\n+                                0,\n+                            ),\n+                        },\n+                    ),\n+                ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: STRUCT,\n+                        range: 0..81,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 74..80,\n+                    },\n+                },\n+                container_name: None,\n+                is_alias: true,\n+            },\n+            FileSymbol {\n+                name: \"s1\",\n+                def: Adt(\n+                    Struct(\n+                        Struct {\n+                            id: StructId(\n+                                0,\n+                            ),\n+                        },\n+                    ),\n+                ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: STRUCT,\n+                        range: 0..81,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 74..80,\n+                    },\n+                },\n+                container_name: None,\n+                is_alias: true,\n+            },\n+            FileSymbol {\n+                name: \"s1\",\n+                def: Adt(\n+                    Struct(\n+                        Struct {\n+                            id: StructId(\n+                                1,\n+                            ),\n+                        },\n+                    ),\n+                ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: STRUCT,\n+                        range: 83..119,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 109..118,\n+                    },\n+                },\n+                container_name: None,\n+                is_alias: true,\n+            },\n+            FileSymbol {\n+                name: \"s2\",\n+                def: Adt(\n+                    Struct(\n+                        Struct {\n+                            id: StructId(\n+                                0,\n+                            ),\n+                        },\n+                    ),\n+                ),\n+                loc: DeclarationLocation {\n+                    hir_file_id: HirFileId(\n+                        0,\n+                    ),\n+                    ptr: SyntaxNodePtr {\n+                        kind: STRUCT,\n+                        range: 0..81,\n+                    },\n+                    name_ptr: SyntaxNodePtr {\n+                        kind: NAME,\n+                        range: 74..80,\n+                    },\n+                },\n+                container_name: None,\n+                is_alias: true,\n+            },\n+        ],\n+    ),\n+]"}, {"sha": "b5adfc13d964404055403ca1c96bf166273d4f7a", "filename": "crates/ide-db/src/test_data/test_symbol_index_collection.txt", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8589a2d843487081530d49100927e385d80cb836/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8589a2d843487081530d49100927e385d80cb836/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt?ref=8589a2d843487081530d49100927e385d80cb836", "patch": "@@ -31,6 +31,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"CONST\",\n@@ -55,6 +56,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"CONST_WITH_INNER\",\n@@ -79,6 +81,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"Enum\",\n@@ -105,6 +108,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"Macro\",\n@@ -131,6 +135,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"STATIC\",\n@@ -155,6 +160,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"Struct\",\n@@ -181,6 +187,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"StructFromMacro\",\n@@ -207,6 +214,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"StructInFn\",\n@@ -235,6 +243,7 @@\n                 container_name: Some(\n                     \"main\",\n                 ),\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"StructInNamedConst\",\n@@ -263,6 +272,7 @@\n                 container_name: Some(\n                     \"CONST_WITH_INNER\",\n                 ),\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"StructInUnnamedConst\",\n@@ -289,6 +299,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"Trait\",\n@@ -313,6 +324,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"Union\",\n@@ -339,6 +351,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"a_mod\",\n@@ -365,6 +378,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"b_mod\",\n@@ -391,6 +405,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"define_struct\",\n@@ -417,6 +432,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"impl_fn\",\n@@ -441,6 +457,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"macro_rules_macro\",\n@@ -467,6 +484,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"main\",\n@@ -491,6 +509,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n             FileSymbol {\n                 name: \"trait_fn\",\n@@ -517,6 +536,7 @@\n                 container_name: Some(\n                     \"Trait\",\n                 ),\n+                is_alias: false,\n             },\n         ],\n     ),\n@@ -554,6 +574,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n         ],\n     ),\n@@ -591,6 +612,7 @@\n                     },\n                 },\n                 container_name: None,\n+                is_alias: false,\n             },\n         ],\n     ),"}, {"sha": "4e641357e372851cd25716ef5f49557b065e515e", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8589a2d843487081530d49100927e385d80cb836/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8589a2d843487081530d49100927e385d80cb836/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=8589a2d843487081530d49100927e385d80cb836", "patch": "@@ -113,6 +113,7 @@ fn try_lookup_include_path(\n         file_id,\n         full_range: TextRange::new(0.into(), size),\n         name: path.into(),\n+        alias: None,\n         focus_range: None,\n         kind: None,\n         container_name: None,"}, {"sha": "4e5f01e716691a863f4b503035b7e378cd580590", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8589a2d843487081530d49100927e385d80cb836/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8589a2d843487081530d49100927e385d80cb836/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=8589a2d843487081530d49100927e385d80cb836", "patch": "@@ -405,7 +405,7 @@ impl Analysis {\n         self.with_db(|db| {\n             symbol_index::world_symbols(db, query)\n                 .into_iter() // xx: should we make this a par iter?\n-                .filter_map(|s| s.def.try_to_nav(db))\n+                .filter_map(|s| s.try_to_nav(db))\n                 .collect::<Vec<_>>()\n         })\n     }"}, {"sha": "7ec7788a245b07bce7e345fee8d30104184e1825", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8589a2d843487081530d49100927e385d80cb836/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8589a2d843487081530d49100927e385d80cb836/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=8589a2d843487081530d49100927e385d80cb836", "patch": "@@ -45,6 +45,9 @@ pub struct NavigationTarget {\n     pub container_name: Option<SmolStr>,\n     pub description: Option<String>,\n     pub docs: Option<Documentation>,\n+    /// In addition to a `name` field, a `NavigationTarget` may also be aliased\n+    /// In such cases we want a `NavigationTarget` to be accessible by its alias\n+    pub alias: Option<SmolStr>,\n }\n \n impl fmt::Debug for NavigationTarget {\n@@ -154,6 +157,7 @@ impl NavigationTarget {\n             container_name: None,\n             description: None,\n             docs: None,\n+            alias: None,\n         }\n     }\n }\n@@ -165,7 +169,8 @@ impl TryToNav for FileSymbol {\n \n         Some(NavigationTarget {\n             file_id: full_range.file_id,\n-            name: self.name.clone(),\n+            name: if self.is_alias { self.def.name(db)?.to_smol_str() } else { self.name.clone() },\n+            alias: if self.is_alias { Some(self.name.clone()) } else { None },\n             kind: Some(hir::ModuleDefId::from(self.def).into()),\n             full_range: full_range.range,\n             focus_range: Some(name_range.range),\n@@ -466,6 +471,7 @@ impl ToNav for LocalSource {\n         NavigationTarget {\n             file_id,\n             name,\n+            alias: None,\n             kind: Some(kind),\n             full_range,\n             focus_range,\n@@ -494,6 +500,7 @@ impl ToNav for hir::Label {\n         NavigationTarget {\n             file_id,\n             name,\n+            alias: None,\n             kind: Some(SymbolKind::Label),\n             full_range,\n             focus_range,\n@@ -534,6 +541,7 @@ impl TryToNav for hir::TypeParam {\n         Some(NavigationTarget {\n             file_id,\n             name,\n+            alias: None,\n             kind: Some(SymbolKind::TypeParam),\n             full_range,\n             focus_range,\n@@ -560,6 +568,7 @@ impl TryToNav for hir::LifetimeParam {\n         Some(NavigationTarget {\n             file_id,\n             name,\n+            alias: None,\n             kind: Some(SymbolKind::LifetimeParam),\n             full_range,\n             focus_range: Some(full_range),\n@@ -589,6 +598,7 @@ impl TryToNav for hir::ConstParam {\n         Some(NavigationTarget {\n             file_id,\n             name,\n+            alias: None,\n             kind: Some(SymbolKind::ConstParam),\n             full_range,\n             focus_range,\n@@ -643,6 +653,7 @@ fn foo() { enum FooInner { } }\n                     focus_range: 34..42,\n                     name: \"FooInner\",\n                     kind: Enum,\n+                    container_name: \"foo\",\n                     description: \"enum FooInner\",\n                 },\n             ]"}, {"sha": "27ad63d820d6c6470ac164c949548c07d2c34c8e", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8589a2d843487081530d49100927e385d80cb836/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8589a2d843487081530d49100927e385d80cb836/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=8589a2d843487081530d49100927e385d80cb836", "patch": "@@ -2242,14 +2242,14 @@ mod tests {\n                             file_id: FileId(\n                                 0,\n                             ),\n-                            full_range: 52..115,\n-                            focus_range: 67..75,\n-                            name: \"foo_test\",\n+                            full_range: 121..185,\n+                            focus_range: 136..145,\n+                            name: \"foo2_test\",\n                             kind: Function,\n                         },\n                         kind: Test {\n                             test_id: Path(\n-                                \"tests::foo_test\",\n+                                \"tests::foo2_test\",\n                             ),\n                             attr: TestAttr {\n                                 ignore: false,\n@@ -2263,14 +2263,14 @@ mod tests {\n                             file_id: FileId(\n                                 0,\n                             ),\n-                            full_range: 121..185,\n-                            focus_range: 136..145,\n-                            name: \"foo2_test\",\n+                            full_range: 52..115,\n+                            focus_range: 67..75,\n+                            name: \"foo_test\",\n                             kind: Function,\n                         },\n                         kind: Test {\n                             test_id: Path(\n-                                \"tests::foo2_test\",\n+                                \"tests::foo_test\",\n                             ),\n                             attr: TestAttr {\n                                 ignore: false,"}, {"sha": "eabc39b3e09cd94583e7894a5810da8e8a3b9238", "filename": "crates/rust-analyzer/src/handlers/request.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8589a2d843487081530d49100927e385d80cb836/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8589a2d843487081530d49100927e385d80cb836/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs?ref=8589a2d843487081530d49100927e385d80cb836", "patch": "@@ -520,7 +520,10 @@ pub(crate) fn handle_workspace_symbol(\n \n             #[allow(deprecated)]\n             let info = SymbolInformation {\n-                name: nav.name.to_string(),\n+                name: match &nav.alias {\n+                    Some(alias) => format!(\"{} (alias for {})\", alias, nav.name),\n+                    None => format!(\"{}\", nav.name),\n+                },\n                 kind: nav\n                     .kind\n                     .map(to_proto::symbol_kind)"}]}