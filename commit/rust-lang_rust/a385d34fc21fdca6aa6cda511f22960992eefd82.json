{"sha": "a385d34fc21fdca6aa6cda511f22960992eefd82", "node_id": "C_kwDOAAsO6NoAKGEzODVkMzRmYzIxZmRjYTZhYTZjZGE1MTFmMjI5NjA5OTJlZWZkODI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-04T19:27:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-04T19:27:11Z"}, "message": "Auto merge of #10107 - tylerjw:suggest_path, r=Alexendoo\n\nSuggest using Path for comparing extensions\n\nfixes #10042\n\nchangelog: Sugg: [`case_sensitive_file_extension_comparisons`]: Now displays a suggestion with `Path`\n[#10107](https://github.com/rust-lang/rust-clippy/pull/10107)\n<!-- changelog_checked -->", "tree": {"sha": "e14fe9448bed7ce671fffdfc721fca9c46d494ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e14fe9448bed7ce671fffdfc721fca9c46d494ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a385d34fc21fdca6aa6cda511f22960992eefd82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a385d34fc21fdca6aa6cda511f22960992eefd82", "html_url": "https://github.com/rust-lang/rust/commit/a385d34fc21fdca6aa6cda511f22960992eefd82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a385d34fc21fdca6aa6cda511f22960992eefd82/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bca8dd2547fcc46796b53d338c0734575e51c72", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bca8dd2547fcc46796b53d338c0734575e51c72", "html_url": "https://github.com/rust-lang/rust/commit/0bca8dd2547fcc46796b53d338c0734575e51c72"}, {"sha": "ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5", "html_url": "https://github.com/rust-lang/rust/commit/ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5"}], "stats": {"total": 192, "additions": 175, "deletions": 17}, "files": [{"sha": "0b3bf22743fae1b0c446c72112b6be8536a1ef4c", "filename": "clippy_lints/src/methods/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a385d34fc21fdca6aa6cda511f22960992eefd82/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a385d34fc21fdca6aa6cda511f22960992eefd82/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs?ref=a385d34fc21fdca6aa6cda511f22960992eefd82", "patch": "@@ -1,7 +1,10 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::source::{indent_of, reindent_multiline};\n use clippy_utils::ty::is_type_lang_item;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n+use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, LangItem};\n use rustc_lint::LateContext;\n use rustc_span::{source_map::Spanned, Span};\n@@ -15,6 +18,15 @@ pub(super) fn check<'tcx>(\n     recv: &'tcx Expr<'_>,\n     arg: &'tcx Expr<'_>,\n ) {\n+    if let ExprKind::MethodCall(path_segment, ..) = recv.kind {\n+        if matches!(\n+            path_segment.ident.name.as_str(),\n+            \"to_lowercase\" | \"to_uppercase\" | \"to_ascii_lowercase\" | \"to_ascii_uppercase\"\n+        ) {\n+            return;\n+        }\n+    }\n+\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n@@ -28,13 +40,37 @@ pub(super) fn check<'tcx>(\n         let recv_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n         if recv_ty.is_str() || is_type_lang_item(cx, recv_ty, LangItem::String);\n         then {\n-            span_lint_and_help(\n+            span_lint_and_then(\n                 cx,\n                 CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n-                call_span,\n+                recv.span.to(call_span),\n                 \"case-sensitive file extension comparison\",\n-                None,\n-                \"consider using a case-insensitive comparison instead\",\n+                |diag| {\n+                    diag.help(\"consider using a case-insensitive comparison instead\");\n+                    if let Some(mut recv_source) = snippet_opt(cx, recv.span) {\n+\n+                        if !cx.typeck_results().expr_ty(recv).is_ref() {\n+                            recv_source = format!(\"&{recv_source}\");\n+                        }\n+\n+                        let suggestion_source = reindent_multiline(\n+                            format!(\n+                                \"std::path::Path::new({})\n+                                    .extension()\n+                                    .map_or(false, |ext| ext.eq_ignore_ascii_case(\\\"{}\\\"))\",\n+                                recv_source, ext_str.strip_prefix('.').unwrap()).into(),\n+                            true,\n+                            Some(indent_of(cx, call_span).unwrap_or(0) + 4)\n+                        );\n+\n+                        diag.span_suggestion(\n+                            recv.span.to(call_span),\n+                            \"use std::path::Path\",\n+                            suggestion_source,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n             );\n         }\n     }"}, {"sha": "5fbaa64db39edb8406855012a3c1ef35e83cce28", "filename": "tests/ui/case_sensitive_file_extension_comparisons.fixed", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a385d34fc21fdca6aa6cda511f22960992eefd82/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a385d34fc21fdca6aa6cda511f22960992eefd82/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.fixed?ref=a385d34fc21fdca6aa6cda511f22960992eefd82", "patch": "@@ -0,0 +1,67 @@\n+// run-rustfix\n+#![warn(clippy::case_sensitive_file_extension_comparisons)]\n+\n+use std::string::String;\n+\n+struct TestStruct;\n+\n+impl TestStruct {\n+    fn ends_with(self, _arg: &str) {}\n+}\n+\n+#[allow(dead_code)]\n+fn is_rust_file(filename: &str) -> bool {\n+    std::path::Path::new(filename)\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"rs\"))\n+}\n+\n+fn main() {\n+    // std::string::String and &str should trigger the lint failure with .ext12\n+    let _ = std::path::Path::new(&String::new())\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+    let _ = std::path::Path::new(\"str\")\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+\n+    // The fixup should preserve the indentation level\n+    {\n+        let _ = std::path::Path::new(\"str\")\n+            .extension()\n+            .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+    }\n+\n+    // The test struct should not trigger the lint failure with .ext12\n+    TestStruct {}.ends_with(\".ext12\");\n+\n+    // std::string::String and &str should trigger the lint failure with .EXT12\n+    let _ = std::path::Path::new(&String::new())\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+    let _ = std::path::Path::new(\"str\")\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+\n+    // Should not trigger the lint failure because of the calls to to_lowercase and to_uppercase\n+    let _ = String::new().to_lowercase().ends_with(\".EXT12\");\n+    let _ = String::new().to_uppercase().ends_with(\".EXT12\");\n+\n+    // The test struct should not trigger the lint failure with .EXT12\n+    TestStruct {}.ends_with(\".EXT12\");\n+\n+    // Should not trigger the lint failure with .eXT12\n+    let _ = String::new().ends_with(\".eXT12\");\n+    let _ = \"str\".ends_with(\".eXT12\");\n+    TestStruct {}.ends_with(\".eXT12\");\n+\n+    // Should not trigger the lint failure with .EXT123 (too long)\n+    let _ = String::new().ends_with(\".EXT123\");\n+    let _ = \"str\".ends_with(\".EXT123\");\n+    TestStruct {}.ends_with(\".EXT123\");\n+\n+    // Shouldn't fail if it doesn't start with a dot\n+    let _ = String::new().ends_with(\"a.ext\");\n+    let _ = \"str\".ends_with(\"a.extA\");\n+    TestStruct {}.ends_with(\"a.ext\");\n+}"}, {"sha": "3c0d4821f9f3a8ee9ff18b66e51e855cadc3655b", "filename": "tests/ui/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a385d34fc21fdca6aa6cda511f22960992eefd82/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a385d34fc21fdca6aa6cda511f22960992eefd82/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs?ref=a385d34fc21fdca6aa6cda511f22960992eefd82", "patch": "@@ -1,13 +1,15 @@\n+// run-rustfix\n #![warn(clippy::case_sensitive_file_extension_comparisons)]\n \n use std::string::String;\n \n struct TestStruct;\n \n impl TestStruct {\n-    fn ends_with(self, arg: &str) {}\n+    fn ends_with(self, _arg: &str) {}\n }\n \n+#[allow(dead_code)]\n fn is_rust_file(filename: &str) -> bool {\n     filename.ends_with(\".rs\")\n }\n@@ -17,13 +19,22 @@ fn main() {\n     let _ = String::new().ends_with(\".ext12\");\n     let _ = \"str\".ends_with(\".ext12\");\n \n+    // The fixup should preserve the indentation level\n+    {\n+        let _ = \"str\".ends_with(\".ext12\");\n+    }\n+\n     // The test struct should not trigger the lint failure with .ext12\n     TestStruct {}.ends_with(\".ext12\");\n \n     // std::string::String and &str should trigger the lint failure with .EXT12\n     let _ = String::new().ends_with(\".EXT12\");\n     let _ = \"str\".ends_with(\".EXT12\");\n \n+    // Should not trigger the lint failure because of the calls to to_lowercase and to_uppercase\n+    let _ = String::new().to_lowercase().ends_with(\".EXT12\");\n+    let _ = String::new().to_uppercase().ends_with(\".EXT12\");\n+\n     // The test struct should not trigger the lint failure with .EXT12\n     TestStruct {}.ends_with(\".EXT12\");\n "}, {"sha": "44c8e3fdf7403d05c6eba7101d231cc6c89d7e14", "filename": "tests/ui/case_sensitive_file_extension_comparisons.stderr", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a385d34fc21fdca6aa6cda511f22960992eefd82/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a385d34fc21fdca6aa6cda511f22960992eefd82/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr?ref=a385d34fc21fdca6aa6cda511f22960992eefd82", "patch": "@@ -1,43 +1,87 @@\n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:12:14\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:14:5\n    |\n LL |     filename.ends_with(\".rs\")\n-   |              ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n    = note: `-D clippy::case-sensitive-file-extension-comparisons` implied by `-D warnings`\n+help: use std::path::Path\n+   |\n+LL ~     std::path::Path::new(filename)\n+LL +         .extension()\n+LL +         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"rs\"))\n+   |\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:17:27\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:19:13\n    |\n LL |     let _ = String::new().ends_with(\".ext12\");\n-   |                           ^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n+help: use std::path::Path\n+   |\n+LL ~     let _ = std::path::Path::new(&String::new())\n+LL +         .extension()\n+LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+   |\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:18:19\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:20:13\n    |\n LL |     let _ = \"str\".ends_with(\".ext12\");\n-   |                   ^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n+help: use std::path::Path\n+   |\n+LL ~     let _ = std::path::Path::new(\"str\")\n+LL +         .extension()\n+LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+   |\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:24:27\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:24:17\n+   |\n+LL |         let _ = \"str\".ends_with(\".ext12\");\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a case-insensitive comparison instead\n+help: use std::path::Path\n+   |\n+LL ~         let _ = std::path::Path::new(\"str\")\n+LL +             .extension()\n+LL ~             .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+   |\n+\n+error: case-sensitive file extension comparison\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:31:13\n    |\n LL |     let _ = String::new().ends_with(\".EXT12\");\n-   |                           ^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n+help: use std::path::Path\n+   |\n+LL ~     let _ = std::path::Path::new(&String::new())\n+LL +         .extension()\n+LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+   |\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:25:19\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:32:13\n    |\n LL |     let _ = \"str\".ends_with(\".EXT12\");\n-   |                   ^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n+help: use std::path::Path\n+   |\n+LL ~     let _ = std::path::Path::new(\"str\")\n+LL +         .extension()\n+LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+   |\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n "}]}