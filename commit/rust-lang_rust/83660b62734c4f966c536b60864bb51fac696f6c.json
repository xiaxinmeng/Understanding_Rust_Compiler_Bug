{"sha": "83660b62734c4f966c536b60864bb51fac696f6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNjYwYjYyNzM0YzRmOTY2YzUzNmI2MDg2NGJiNTFmYWM2OTZmNmM=", "commit": {"author": {"name": "memoryruins", "email": "memoryruinsmusic@gmail.com", "date": "2019-05-28T18:48:04Z"}, "committer": {"name": "memoryruins", "email": "memoryruinsmusic@gmail.com", "date": "2019-05-29T04:57:42Z"}, "message": "Update libstd doctests to use dyn", "tree": {"sha": "722872e6d9f2f99bd85c7f212183e6b764f2c832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/722872e6d9f2f99bd85c7f212183e6b764f2c832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83660b62734c4f966c536b60864bb51fac696f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83660b62734c4f966c536b60864bb51fac696f6c", "html_url": "https://github.com/rust-lang/rust/commit/83660b62734c4f966c536b60864bb51fac696f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83660b62734c4f966c536b60864bb51fac696f6c/comments", "author": {"login": "memoryruins", "id": 6868531, "node_id": "MDQ6VXNlcjY4Njg1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/6868531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/memoryruins", "html_url": "https://github.com/memoryruins", "followers_url": "https://api.github.com/users/memoryruins/followers", "following_url": "https://api.github.com/users/memoryruins/following{/other_user}", "gists_url": "https://api.github.com/users/memoryruins/gists{/gist_id}", "starred_url": "https://api.github.com/users/memoryruins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/memoryruins/subscriptions", "organizations_url": "https://api.github.com/users/memoryruins/orgs", "repos_url": "https://api.github.com/users/memoryruins/repos", "events_url": "https://api.github.com/users/memoryruins/events{/privacy}", "received_events_url": "https://api.github.com/users/memoryruins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "memoryruins", "id": 6868531, "node_id": "MDQ6VXNlcjY4Njg1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/6868531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/memoryruins", "html_url": "https://github.com/memoryruins", "followers_url": "https://api.github.com/users/memoryruins/followers", "following_url": "https://api.github.com/users/memoryruins/following{/other_user}", "gists_url": "https://api.github.com/users/memoryruins/gists{/gist_id}", "starred_url": "https://api.github.com/users/memoryruins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/memoryruins/subscriptions", "organizations_url": "https://api.github.com/users/memoryruins/orgs", "repos_url": "https://api.github.com/users/memoryruins/repos", "events_url": "https://api.github.com/users/memoryruins/events{/privacy}", "received_events_url": "https://api.github.com/users/memoryruins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd347a8735b94d2320c0caff4c860d3501d53b31", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd347a8735b94d2320c0caff4c860d3501d53b31", "html_url": "https://github.com/rust-lang/rust/commit/fd347a8735b94d2320c0caff4c860d3501d53b31"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "c8978a94fcda46507e007c3cdf58fc0bfaadc453", "filename": "src/libstd/error.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/83660b62734c4f966c536b60864bb51fac696f6c/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83660b62734c4f966c536b60864bb51fac696f6c/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=83660b62734c4f966c536b60864bb51fac696f6c", "patch": "@@ -94,7 +94,7 @@ pub trait Error: Debug + Display {\n     ///         \"I'm the superhero of errors\"\n     ///     }\n     ///\n-    ///     fn cause(&self) -> Option<&Error> {\n+    ///     fn cause(&self) -> Option<&dyn Error> {\n     ///         Some(&self.side)\n     ///     }\n     /// }\n@@ -244,7 +244,7 @@ impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     ///\n     /// let an_error = AnError;\n     /// assert!(0 == mem::size_of_val(&an_error));\n-    /// let a_boxed_error = Box::<Error>::from(an_error);\n+    /// let a_boxed_error = Box::<dyn Error>::from(an_error);\n     /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(err: E) -> Box<dyn Error + 'a> {\n@@ -287,7 +287,7 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n     ///\n     /// let an_error = AnError;\n     /// assert!(0 == mem::size_of_val(&an_error));\n-    /// let a_boxed_error = Box::<Error + Send + Sync>::from(an_error);\n+    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(an_error);\n     /// assert!(\n     ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n@@ -309,7 +309,7 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n     /// use std::mem;\n     ///\n     /// let a_string_error = \"a string error\".to_string();\n-    /// let a_boxed_error = Box::<Error + Send + Sync>::from(a_string_error);\n+    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_string_error);\n     /// assert!(\n     ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n@@ -344,7 +344,7 @@ impl From<String> for Box<dyn Error> {\n     /// use std::mem;\n     ///\n     /// let a_string_error = \"a string error\".to_string();\n-    /// let a_boxed_error = Box::<Error>::from(a_string_error);\n+    /// let a_boxed_error = Box::<dyn Error>::from(a_string_error);\n     /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(str_err: String) -> Box<dyn Error> {\n@@ -367,7 +367,7 @@ impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n     /// use std::mem;\n     ///\n     /// let a_str_error = \"a str error\";\n-    /// let a_boxed_error = Box::<Error + Send + Sync>::from(a_str_error);\n+    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_str_error);\n     /// assert!(\n     ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n@@ -389,7 +389,7 @@ impl From<&str> for Box<dyn Error> {\n     /// use std::mem;\n     ///\n     /// let a_str_error = \"a str error\";\n-    /// let a_boxed_error = Box::<Error>::from(a_str_error);\n+    /// let a_boxed_error = Box::<dyn Error>::from(a_str_error);\n     /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(err: &str) -> Box<dyn Error> {\n@@ -412,7 +412,7 @@ impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n     /// use std::borrow::Cow;\n     ///\n     /// let a_cow_str_error = Cow::from(\"a str error\");\n-    /// let a_boxed_error = Box::<Error + Send + Sync>::from(a_cow_str_error);\n+    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_cow_str_error);\n     /// assert!(\n     ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n@@ -436,7 +436,7 @@ impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     /// use std::borrow::Cow;\n     ///\n     /// let a_cow_str_error = Cow::from(\"a str error\");\n-    /// let a_boxed_error = Box::<Error>::from(a_cow_str_error);\n+    /// let a_boxed_error = Box::<dyn Error>::from(a_cow_str_error);\n     /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(err: Cow<'a, str>) -> Box<dyn Error> {"}, {"sha": "d41b3a3a1233f563a097edf4775a1858f0ab43b8", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83660b62734c4f966c536b60864bb51fac696f6c/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83660b62734c4f966c536b60864bb51fac696f6c/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=83660b62734c4f966c536b60864bb51fac696f6c", "patch": "@@ -1976,7 +1976,7 @@ pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// use std::path::Path;\n ///\n /// // one possible implementation of walking a directory only visiting files\n-/// fn visit_dirs(dir: &Path, cb: &Fn(&DirEntry)) -> io::Result<()> {\n+/// fn visit_dirs(dir: &Path, cb: &dyn Fn(&DirEntry)) -> io::Result<()> {\n ///     if dir.is_dir() {\n ///         for entry in fs::read_dir(dir)? {\n ///             let entry = entry?;"}]}