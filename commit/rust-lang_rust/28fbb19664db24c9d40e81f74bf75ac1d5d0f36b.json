{"sha": "28fbb19664db24c9d40e81f74bf75ac1d5d0f36b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZmJiMTk2NjRkYjI0YzlkNDBlODFmNzRiZjc1YWMxZDVkMGYzNmI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T00:23:34Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T00:43:33Z"}, "message": "rustc: Switch the --no-core switch to a #[no_core] attribute", "tree": {"sha": "f11aafd32c44b3f90c981668f6e2fe2533a0ffe0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f11aafd32c44b3f90c981668f6e2fe2533a0ffe0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b", "html_url": "https://github.com/rust-lang/rust/commit/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2220d0f20f7faf63de3bb805fcfa0fa7a4c416ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/2220d0f20f7faf63de3bb805fcfa0fa7a4c416ee", "html_url": "https://github.com/rust-lang/rust/commit/2220d0f20f7faf63de3bb805fcfa0fa7a4c416ee"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "1b57c627455ff8ed16ffcbc4e261e1cc1c8f72f3", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=28fbb19664db24c9d40e81f74bf75ac1d5d0f36b", "patch": "@@ -366,7 +366,6 @@ fn build_session_options(match: getopts::match,\n         } else if opt_present(match, \"emit-llvm\") {\n             link::output_type_bitcode\n         } else { link::output_type_exe };\n-    let libcore = !opt_present(match, \"no-core\");\n     let verify = !opt_present(match, \"no-verify\");\n     let save_temps = opt_present(match, \"save-temps\");\n     let extra_debuginfo = opt_present(match, \"xg\");\n@@ -414,7 +413,6 @@ fn build_session_options(match: getopts::match,\n     let sopts: @session::options =\n         @{crate_type: crate_type,\n           static: static,\n-          libcore: libcore,\n           optimize: opt_level,\n           debuginfo: debuginfo,\n           extra_debuginfo: extra_debuginfo,\n@@ -494,10 +492,11 @@ fn opts() -> [getopts::opt] {\n          optflag(\"no-verify\"),\n          optflag(\"no-lint-ctypes\"),\n          optmulti(\"cfg\"), optflag(\"test\"),\n-         optflag(\"no-core\"),\n          optflag(\"lib\"), optflag(\"bin\"), optflag(\"static\"), optflag(\"gc\"),\n          optflag(\"no-asm-comments\"),\n-         optflag(\"warn-unused-imports\")];\n+         optflag(\"warn-unused-imports\"),\n+         // FIXME: Transitional. Please remove\n+         optflag(\"no-core\")];\n }\n \n type output_filenames = @{out_filename: str, obj_filename:str};"}, {"sha": "12d10e8065378dd5ed5a9bc3573ef5e7b1e3948c", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=28fbb19664db24c9d40e81f74bf75ac1d5d0f36b", "patch": "@@ -33,7 +33,6 @@ options:\n     --lib              compile a library crate\n     --bin              compile an executable crate (default)\n     --static           use or produce static libraries\n-    --no-core          omit the 'core' library (used and imported by default)\n     --pretty [type]    pretty-print the input instead of compiling\n     --ls               list the symbols defined by a crate file\n     -L <path>          add a directory to the library search path"}, {"sha": "b570744a6655f224ba5336d9ec2a6c461e17f161", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=28fbb19664db24c9d40e81f74bf75ac1d5d0f36b", "patch": "@@ -29,7 +29,6 @@ type options =\n     // with additional crate configurations during the compile process\n     {crate_type: crate_type,\n      static: bool,\n-     libcore: bool,\n      optimize: uint,\n      debuginfo: bool,\n      extra_debuginfo: bool,"}, {"sha": "54960d653603c6d827c7ee7be86db919b520736a", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=28fbb19664db24c9d40e81f74bf75ac1d5d0f36b", "patch": "@@ -9,6 +9,7 @@ export attr_meta;\n export attr_metas;\n export find_linkage_metas;\n export find_attrs_by_name;\n+export attrs_contains_name;\n export find_meta_items_by_name;\n export contains;\n export contains_name;\n@@ -56,6 +57,10 @@ fn find_attrs_by_name(attrs: [ast::attribute], name: ast::ident) ->\n     ret vec::filter_map(attrs, filter);\n }\n \n+fn attrs_contains_name(attrs: [ast::attribute], name: ast::ident) -> bool {\n+    vec::is_not_empty(find_attrs_by_name(attrs, name))\n+}\n+\n fn get_attr_name(attr: ast::attribute) -> ast::ident {\n     get_meta_item_name(@attr.node.value)\n }"}, {"sha": "f285d4bf67b94df91632cf42a2c36b9a36192fdb", "filename": "src/comp/front/core_inject.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Fcomp%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Fcomp%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcore_inject.rs?ref=28fbb19664db24c9d40e81f74bf75ac1d5d0f36b", "patch": "@@ -1,18 +1,23 @@\n import driver::session::session;\n-import syntax::ast;\n import syntax::codemap;\n+import syntax::ast;\n+import front::attr;\n \n export maybe_inject_libcore_ref;\n \n fn maybe_inject_libcore_ref(sess: session,\n                             crate: @ast::crate) -> @ast::crate {\n-    if sess.opts.libcore {\n+    if use_core(crate) {\n         inject_libcore_ref(sess, crate)\n     } else {\n         crate\n     }\n }\n \n+fn use_core(crate: @ast::crate) -> bool {\n+    !attr::attrs_contains_name(crate.node.attrs, \"no_core\")\n+}\n+\n fn inject_libcore_ref(sess: session,\n                       crate: @ast::crate) -> @ast::crate {\n "}, {"sha": "b90c1c16d1a8a589ab9c04188dc9534af1f4b1af", "filename": "src/libcore/core.rc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=28fbb19664db24c9d40e81f74bf75ac1d5d0f36b", "patch": "@@ -7,9 +7,13 @@\n #[license = \"MIT\"];\n #[crate_type = \"lib\"];\n \n+// Don't link to core. We are core.\n+#[no_core];\n+\n #[doc(\n     brief = \"The Rust core library\",\n     desc = \"\n+\n The core library provides functionality that is closely tied to the Rust\n built-in types and runtime services, or that is used in nearly every\n non-trivial program.\n@@ -20,7 +24,8 @@ as though the user had written the following:\n     use core;\n     import core::*;\n \n-This behavior can be disabled with the `--no-core` compiler flag.\"\n+This behavior can be disabled with the `no_core` crate attribute.\"\n+\n )];\n \n export box, char, float, bessel, f32, f64, int, str, ptr;"}, {"sha": "bd998b0eec08b9efd437d40e06027a023d9d7672", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=28fbb19664db24c9d40e81f74bf75ac1d5d0f36b", "patch": "@@ -66,7 +66,6 @@ fn build_session() -> session::session {\n     let sopts: @session::options = @{\n         crate_type: session::lib_crate,\n         static: false,\n-        libcore: false,\n         optimize: 0u,\n         debuginfo: false,\n         extra_debuginfo: false,"}, {"sha": "7ed010476cdac2c980463033c6e6084844c1e470", "filename": "src/test/compile-fail/no-core-attribute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Ftest%2Fcompile-fail%2Fno-core-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fbb19664db24c9d40e81f74bf75ac1d5d0f36b/src%2Ftest%2Fcompile-fail%2Fno-core-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-core-attribute.rs?ref=28fbb19664db24c9d40e81f74bf75ac1d5d0f36b", "patch": "@@ -1,6 +1,6 @@\n-// error-pattern: whatever\n+// error-pattern:unresolved name: debug\n #[no_core];\n \n fn main() {\n-    log(debug, core::int::max_value);\n+    log(debug, 0);\n }\n\\ No newline at end of file"}]}