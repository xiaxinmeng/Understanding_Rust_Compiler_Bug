{"sha": "3caf63cc00f5cec580954bdb117f4fa756cc757d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYWY2M2NjMDBmNWNlYzU4MDk1NGJkYjExN2Y0ZmE3NTZjYzc1N2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-24T20:31:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-24T20:31:29Z"}, "message": "Auto merge of #37313 - raphlinus:fuchsia, r=alexcrichton\n\nAdd Fuchsia support\n\nAdds support for the x86_64-unknown-fuchsia target, which covers the\nFuchsia operating system.", "tree": {"sha": "265134910df7fecafce5d3869e13f245dc8b5113", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/265134910df7fecafce5d3869e13f245dc8b5113"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3caf63cc00f5cec580954bdb117f4fa756cc757d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3caf63cc00f5cec580954bdb117f4fa756cc757d", "html_url": "https://github.com/rust-lang/rust/commit/3caf63cc00f5cec580954bdb117f4fa756cc757d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3caf63cc00f5cec580954bdb117f4fa756cc757d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd2427307018a68e0b77438bbe40d339a54e587", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd2427307018a68e0b77438bbe40d339a54e587", "html_url": "https://github.com/rust-lang/rust/commit/7bd2427307018a68e0b77438bbe40d339a54e587"}, {"sha": "cea61408c335826a0e3fcd781ac5d05ae5ad432e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cea61408c335826a0e3fcd781ac5d05ae5ad432e", "html_url": "https://github.com/rust-lang/rust/commit/cea61408c335826a0e3fcd781ac5d05ae5ad432e"}], "stats": {"total": 585, "additions": 545, "deletions": 40}, "files": [{"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/x86_64-unknown-fuchsia.mk", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/mk%2Fcfg%2Fx86_64-unknown-fuchsia.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/mk%2Fcfg%2Fx86_64-unknown-fuchsia.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-fuchsia.mk?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -0,0 +1 @@\n+# rustbuild-only target"}, {"sha": "08a1f8ae8c6caf9d33915fe25bcb6e2649196358", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -36,7 +36,7 @@ fn main() {\n     // targets, which means we have to build the alloc_jemalloc crate\n     // for targets like emscripten, even if we don't use it.\n     if target.contains(\"rumprun\") || target.contains(\"bitrig\") || target.contains(\"openbsd\") ||\n-       target.contains(\"msvc\") || target.contains(\"emscripten\") {\n+       target.contains(\"msvc\") || target.contains(\"emscripten\") || target.contains(\"fuchsia\") {\n         println!(\"cargo:rustc-cfg=dummy_jemalloc\");\n         return;\n     }"}, {"sha": "c95defce07a82f2f759f140c937dabd43a4f3d97", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -1 +1 @@\n-Subproject commit ebeab042e6bb14a447627b57ed9a493e2cc0e095\n+Subproject commit c95defce07a82f2f759f140c937dabd43a4f3d97"}, {"sha": "69546684cb70bda5c5626811199f0b72c56c8bc0", "filename": "src/librustc_back/target/fuchsia_base.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibrustc_back%2Ftarget%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibrustc_back%2Ftarget%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Ffuchsia_base.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::TargetOptions;\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    TargetOptions {\n+        dynamic_linking: true,\n+        executables: true,\n+        linker_is_gnu: true,\n+        has_rpath: true,\n+        pre_link_args: vec![\n+            // We want to be able to strip as much executable code as possible\n+            // from the linker command line, and this flag indicates to the\n+            // linker that it can avoid linking in dynamic libraries that don't\n+            // actually satisfy any symbols up to that point (as with many other\n+            // resolutions the linker does). This option only applies to all\n+            // following libraries so we're sure to pass it as one of the first\n+            // arguments.\n+            // FIXME: figure out whether these linker args are desirable\n+            //\"-Wl,--as-needed\".to_string(),\n+\n+            // Always enable NX protection when it is available\n+            //\"-Wl,-z,noexecstack\".to_string(),\n+        ],\n+        position_independent_executables: true,\n+        exe_allocation_crate: \"alloc_system\".to_string(),\n+        has_elf_tls: true,\n+        .. Default::default()\n+    }\n+}"}, {"sha": "931080daef271b670e7a09c79596401b892c74a3", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -67,6 +67,7 @@ mod solaris_base;\n mod windows_base;\n mod windows_msvc_base;\n mod thumb_base;\n+mod fuchsia_base;\n \n pub type TargetResult = Result<Target, String>;\n \n@@ -175,6 +176,8 @@ supported_targets! {\n     (\"x86_64-apple-darwin\", x86_64_apple_darwin),\n     (\"i686-apple-darwin\", i686_apple_darwin),\n \n+    (\"x86_64-unknown-fuchsia\", x86_64_unknown_fuchsia),\n+\n     (\"i386-apple-ios\", i386_apple_ios),\n     (\"x86_64-apple-ios\", x86_64_apple_ios),\n     (\"aarch64-apple-ios\", aarch64_apple_ios),"}, {"sha": "08fe17a556ecca1f74a5f81d7bc0a700ebd26eb0", "filename": "src/librustc_back/target/x86_64_unknown_fuchsia.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_fuchsia.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::fuchsia_base::opts();\n+    base.cpu = \"x86-64\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.pre_link_args.push(\"-m64\".to_string());\n+\n+    Ok(Target {\n+        llvm_target: \"x86_64-unknown-fuchsia\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"fuchsia\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: base,\n+    })\n+}"}, {"sha": "c811ed3bded9edf79db395e34c46850daa91e261", "filename": "src/libstd/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -26,7 +26,7 @@ fn main() {\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     if cfg!(feature = \"backtrace\") && !target.contains(\"apple\") && !target.contains(\"msvc\") &&\n-        !target.contains(\"emscripten\") {\n+        !target.contains(\"emscripten\") && !target.contains(\"fuchsia\") {\n         build_libbacktrace(&host, &target);\n     }\n "}, {"sha": "d22f9a628bd1733e7c929546f5f772d66e29cd10", "filename": "src/libstd/os/fuchsia/fs.rs", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fos%2Ffuchsia%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fos%2Ffuchsia%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffuchsia%2Ffs.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -0,0 +1,103 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use fs::Metadata;\n+use sys_common::AsInner;\n+\n+/// OS-specific extension methods for `fs::Metadata`\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+}"}, {"sha": "1ebcbba9147e5cfbaa8aaa33b2564661be63270e", "filename": "src/libstd/os/fuchsia/mod.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fos%2Ffuchsia%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fos%2Ffuchsia%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffuchsia%2Fmod.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Fuchsia-specific definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+pub mod raw;\n+pub mod fs;"}, {"sha": "5d017351492dd1cb61d239868aec7001c60ab8f0", "filename": "src/libstd/os/fuchsia/raw.rs", "status": "added", "additions": 270, "deletions": 0, "changes": 270, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fos%2Ffuchsia%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fos%2Ffuchsia%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffuchsia%2Fraw.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -0,0 +1,270 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Fuchsia-specific raw type definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(since = \"1.8.0\",\n+                    reason = \"these type aliases are no longer supported by \\\n+                              the standard library, the `libc` crate on \\\n+                              crates.io should be used instead for the correct \\\n+                              definitions\")]\n+#![allow(deprecated)]\n+\n+use os::raw::c_ulong;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n+\n+#[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n+pub type pthread_t = c_ulong;\n+\n+#[doc(inline)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub use self::arch::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n+\n+#[cfg(any(target_arch = \"x86\",\n+          target_arch = \"le32\",\n+          target_arch = \"powerpc\",\n+          target_arch = \"arm\"))]\n+mod arch {\n+    use os::raw::{c_long, c_short, c_uint};\n+\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+\n+    #[repr(C)]\n+    #[derive(Clone)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_dev: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad1: c_short,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __st_ino: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mode: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_nlink: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_uid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_gid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_rdev: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad2: c_uint,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_size: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blksize: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blocks: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ino: u64,\n+    }\n+}\n+\n+#[cfg(target_arch = \"mips\")]\n+mod arch {\n+    use os::raw::{c_long, c_ulong};\n+\n+    #[cfg(target_env = \"musl\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+    #[cfg(not(target_env = \"musl\"))]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n+    #[cfg(target_env = \"musl\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+    #[cfg(not(target_env = \"musl\"))]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+    #[cfg(target_env = \"musl\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n+    #[cfg(not(target_env = \"musl\"))]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+\n+    #[repr(C)]\n+    #[derive(Clone)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_dev: c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_pad1: [c_long; 3],\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ino: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mode: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_nlink: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_uid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_gid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_rdev: c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_pad2: [c_long; 2],\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_size: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blksize: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blocks: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_pad5: [c_long; 14],\n+    }\n+}\n+\n+#[cfg(target_arch = \"mips64\")]\n+mod arch {\n+    pub use libc::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n+}\n+\n+#[cfg(target_arch = \"aarch64\")]\n+mod arch {\n+    use os::raw::{c_long, c_int};\n+\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+\n+    #[repr(C)]\n+    #[derive(Clone)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_dev: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ino: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mode: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_nlink: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_uid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_gid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_rdev: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad1: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_size: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blksize: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad2: c_int,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blocks: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __unused: [c_int; 2],\n+    }\n+}\n+\n+#[cfg(target_arch = \"x86_64\")]\n+mod arch {\n+    use os::raw::{c_long, c_int};\n+\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+\n+    #[repr(C)]\n+    #[derive(Clone)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_dev: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ino: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_nlink: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mode: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_uid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_gid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad0: c_int,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_rdev: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_size: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blksize: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blocks: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __unused: [c_long; 3],\n+    }\n+}"}, {"sha": "366a167415684feef36e9b686b9a489638605370", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -33,5 +33,6 @@ pub use sys::ext as windows;\n #[cfg(target_os = \"openbsd\")]   pub mod openbsd;\n #[cfg(target_os = \"solaris\")]   pub mod solaris;\n #[cfg(target_os = \"emscripten\")] pub mod emscripten;\n+#[cfg(target_os = \"fuchsia\")]    pub mod fuchsia;\n \n pub mod raw;"}, {"sha": "c04fd863674d4b9128604579308ef685ce170a1d", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -58,7 +58,8 @@ impl DoubleEndedIterator for Args {\n           target_os = \"openbsd\",\n           target_os = \"solaris\",\n           target_os = \"emscripten\",\n-          target_os = \"haiku\"))]\n+          target_os = \"haiku\",\n+          target_os = \"fuchsia\"))]\n mod imp {\n     use os::unix::prelude::*;\n     use mem;"}, {"sha": "eff3a8c2a34a4422f240f21641b3b5d9be053155", "filename": "src/libstd/sys/unix/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fenv.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -171,3 +171,14 @@ pub mod os {\n     pub const EXE_SUFFIX: &'static str = \".js\";\n     pub const EXE_EXTENSION: &'static str = \"js\";\n }\n+\n+#[cfg(target_os = \"fuchsia\")]\n+pub mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"fuchsia\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}"}, {"sha": "0b43fd2ac8c4df3a670c2899046ba9c0f1c301e2", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -312,7 +312,8 @@ impl DirEntry {\n               target_os = \"emscripten\",\n               target_os = \"android\",\n               target_os = \"solaris\",\n-              target_os = \"haiku\"))]\n+              target_os = \"haiku\",\n+              target_os = \"fuchsia\"))]\n     pub fn ino(&self) -> u64 {\n         self.entry.d_ino as u64\n     }\n@@ -342,7 +343,8 @@ impl DirEntry {\n     #[cfg(any(target_os = \"android\",\n               target_os = \"linux\",\n               target_os = \"emscripten\",\n-              target_os = \"haiku\"))]\n+              target_os = \"haiku\",\n+              target_os = \"fuchsia\"))]\n     fn name_bytes(&self) -> &[u8] {\n         unsafe {\n             CStr::from_ptr(self.entry.d_name.as_ptr()).to_bytes()"}, {"sha": "66bc9d4a4915f5a6f93706c7b12111b5136b9864", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -26,6 +26,7 @@ use libc;\n #[cfg(target_os = \"openbsd\")]   pub use os::openbsd as platform;\n #[cfg(target_os = \"solaris\")]   pub use os::solaris as platform;\n #[cfg(target_os = \"emscripten\")] pub use os::emscripten as platform;\n+#[cfg(target_os = \"fuchsia\")]   pub use os::fuchsia as platform;\n \n #[macro_use]\n pub mod weak;\n@@ -88,11 +89,11 @@ pub fn init() {\n         }\n     }\n \n-    #[cfg(not(any(target_os = \"nacl\", target_os = \"emscripten\")))]\n+    #[cfg(not(any(target_os = \"nacl\", target_os = \"emscripten\", target_os=\"fuchsia\")))]\n     unsafe fn reset_sigpipe() {\n         assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != !0);\n     }\n-    #[cfg(any(target_os = \"nacl\", target_os = \"emscripten\"))]\n+    #[cfg(any(target_os = \"nacl\", target_os = \"emscripten\", target_os=\"fuchsia\"))]\n     unsafe fn reset_sigpipe() {}\n }\n "}, {"sha": "e591f25cac1571d69c6c21098dbb79dcdcc6855e", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -38,7 +38,7 @@ static ENV_LOCK: Mutex = Mutex::new();\n \n extern {\n     #[cfg(not(target_os = \"dragonfly\"))]\n-    #[cfg_attr(any(target_os = \"linux\", target_os = \"emscripten\"),\n+    #[cfg_attr(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"fuchsia\"),\n                link_name = \"__errno_location\")]\n     #[cfg_attr(any(target_os = \"bitrig\",\n                    target_os = \"netbsd\",\n@@ -346,6 +346,12 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     }\n }\n \n+#[cfg(target_os = \"fuchsia\")]\n+pub fn current_exe() -> io::Result<PathBuf> {\n+    use io::ErrorKind;\n+    Err(io::Error::new(ErrorKind::Other, \"Not yet implemented on fuchsia\"))\n+}\n+\n pub struct Env {\n     iter: vec::IntoIter<(OsString, OsString)>,\n     _dont_send_or_sync_me: PhantomData<*mut ()>,"}, {"sha": "1642baa34d636ca65b9877eceba69d1967c2a330", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -135,6 +135,10 @@ impl Thread {\n     pub fn set_name(_name: &CStr) {\n         // Newlib, Illumos, Haiku, and Emscripten have no way to set a thread name.\n     }\n+    #[cfg(target_os = \"fuchsia\")]\n+    pub fn set_name(_name: &CStr) {\n+        // FIXME: determine whether Fuchsia has a way to set a thread name.\n+    }\n \n     pub fn sleep(dur: Duration) {\n         let mut secs = dur.as_secs();"}, {"sha": "54d3f7930456c5798050524000f16b137f752c35", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 42, "deletions": 30, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -358,36 +358,8 @@ pub mod elf {\n         }\n     }\n \n-    // Since what appears to be glibc 2.18 this symbol has been shipped which\n-    // GCC and clang both use to invoke destructors in thread_local globals, so\n-    // let's do the same!\n-    //\n-    // Note, however, that we run on lots older linuxes, as well as cross\n-    // compiling from a newer linux to an older linux, so we also have a\n-    // fallback implementation to use as well.\n-    //\n-    // Due to rust-lang/rust#18804, make sure this is not generic!\n-    #[cfg(target_os = \"linux\")]\n-    unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n-        use mem;\n-        use libc;\n-        use sys_common::thread_local as os;\n-\n-        extern {\n-            #[linkage = \"extern_weak\"]\n-            static __dso_handle: *mut u8;\n-            #[linkage = \"extern_weak\"]\n-            static __cxa_thread_atexit_impl: *const libc::c_void;\n-        }\n-        if !__cxa_thread_atexit_impl.is_null() {\n-            type F = unsafe extern fn(dtor: unsafe extern fn(*mut u8),\n-                                      arg: *mut u8,\n-                                      dso_handle: *mut u8) -> libc::c_int;\n-            mem::transmute::<*const libc::c_void, F>(__cxa_thread_atexit_impl)\n-            (dtor, t, &__dso_handle as *const _ as *mut _);\n-            return\n-        }\n-\n+    #[cfg(any(target_os = \"linux\", target_os = \"fuchsia\"))]\n+    unsafe fn register_dtor_fallback(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n         // The fallback implementation uses a vanilla OS-based TLS key to track\n         // the list of destructors that need to be run for this thread. The key\n         // then has its own destructor which runs all the other destructors.\n@@ -397,6 +369,8 @@ pub mod elf {\n         // *should* be the case that this loop always terminates because we\n         // provide the guarantee that a TLS key cannot be set after it is\n         // flagged for destruction.\n+        use sys_common::thread_local as os;\n+\n         static DTORS: os::StaticKey = os::StaticKey::new(Some(run_dtors));\n         type List = Vec<(*mut u8, unsafe extern fn(*mut u8))>;\n         if DTORS.get().is_null() {\n@@ -418,6 +392,37 @@ pub mod elf {\n         }\n     }\n \n+    // Since what appears to be glibc 2.18 this symbol has been shipped which\n+    // GCC and clang both use to invoke destructors in thread_local globals, so\n+    // let's do the same!\n+    //\n+    // Note, however, that we run on lots older linuxes, as well as cross\n+    // compiling from a newer linux to an older linux, so we also have a\n+    // fallback implementation to use as well.\n+    //\n+    // Due to rust-lang/rust#18804, make sure this is not generic!\n+    #[cfg(target_os = \"linux\")]\n+    unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n+        use mem;\n+        use libc;\n+\n+        extern {\n+            #[linkage = \"extern_weak\"]\n+            static __dso_handle: *mut u8;\n+            #[linkage = \"extern_weak\"]\n+            static __cxa_thread_atexit_impl: *const libc::c_void;\n+        }\n+        if !__cxa_thread_atexit_impl.is_null() {\n+            type F = unsafe extern fn(dtor: unsafe extern fn(*mut u8),\n+                                      arg: *mut u8,\n+                                      dso_handle: *mut u8) -> libc::c_int;\n+            mem::transmute::<*const libc::c_void, F>(__cxa_thread_atexit_impl)\n+            (dtor, t, &__dso_handle as *const _ as *mut _);\n+            return\n+        }\n+        register_dtor_fallback(t, dtor);\n+    }\n+\n     // OSX's analog of the above linux function is this _tlv_atexit function.\n     // The disassembly of thread_local globals in C++ (at least produced by\n     // clang) will have this show up in the output.\n@@ -430,6 +435,13 @@ pub mod elf {\n         _tlv_atexit(dtor, t);\n     }\n \n+    // Just use the thread_local fallback implementation, at least until there's\n+    // a more direct implementation.\n+    #[cfg(target_os = \"fuchsia\")]\n+    unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n+        register_dtor_fallback(t, dtor);\n+    }\n+\n     pub unsafe extern fn destroy_value<T>(ptr: *mut u8) {\n         let ptr = ptr as *mut Key<T>;\n         // Right before we run the user destructor be sure to flag the"}, {"sha": "8b0fd1ca0cbfaafb6ee77bfc0ab355a411e1d635", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -1036,7 +1036,8 @@ fn get_concurrency() -> usize {\n               target_os = \"ios\",\n               target_os = \"android\",\n               target_os = \"solaris\",\n-              target_os = \"emscripten\"))]\n+              target_os = \"emscripten\",\n+              target_os = \"fuchsia\"))]\n     fn num_cpus() -> usize {\n         unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as usize }\n     }"}, {"sha": "db41a368a1680ed67e5e5f1eec05fcc47f9ac03b", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -35,5 +35,7 @@ fn main() {\n         println!(\"cargo:rustc-link-lib=gcc_pic\");\n     } else if target.contains(\"windows-gnu\") {\n         println!(\"cargo:rustc-link-lib=gcc_eh\");\n+    } else if target.contains(\"fuchsia\") {\n+        println!(\"cargo:rustc-link-lib=unwind\");\n     }\n }"}, {"sha": "bbac6c07c570a7418b14d3570f9ddd490effb4b9", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf63cc00f5cec580954bdb117f4fa756cc757d/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=3caf63cc00f5cec580954bdb117f4fa756cc757d", "patch": "@@ -252,6 +252,8 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n                any(target_arch = \"x86\", target_arch = \"x86_64\"),\n                not(test)),\n            link(name = \"unwind\", kind = \"static\"))]\n+#[cfg_attr(target_os = \"fuchsia\",\n+           link(name = \"unwind\"))]\n #[cfg_attr(any(target_os = \"android\", target_os = \"openbsd\"),\n            link(name = \"gcc\"))]\n #[cfg_attr(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),"}]}