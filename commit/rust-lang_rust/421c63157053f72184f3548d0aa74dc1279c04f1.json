{"sha": "421c63157053f72184f3548d0aa74dc1279c04f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMWM2MzE1NzA1M2Y3MjE4NGYzNTQ4ZDBhYTc0ZGMxMjc5YzA0ZjE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-11-09T04:10:09Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-11-09T04:24:46Z"}, "message": "add `clone_from` and `deep_clone_from`\n\nCloses #10240", "tree": {"sha": "9e0840d8e7aded5a5f0c8b2e9e8f5f8c006d6340", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e0840d8e7aded5a5f0c8b2e9e8f5f8c006d6340"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/421c63157053f72184f3548d0aa74dc1279c04f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/421c63157053f72184f3548d0aa74dc1279c04f1", "html_url": "https://github.com/rust-lang/rust/commit/421c63157053f72184f3548d0aa74dc1279c04f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/421c63157053f72184f3548d0aa74dc1279c04f1/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a594a999fbccf04710c9dfea3ef3d231c14e1bd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a594a999fbccf04710c9dfea3ef3d231c14e1bd1", "html_url": "https://github.com/rust-lang/rust/commit/a594a999fbccf04710c9dfea3ef3d231c14e1bd1"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "92db250eccad8b69954dc3aa0ce4d79488091e02", "filename": "src/libstd/clone.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/421c63157053f72184f3548d0aa74dc1279c04f1/src%2Flibstd%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421c63157053f72184f3548d0aa74dc1279c04f1/src%2Flibstd%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fclone.rs?ref=421c63157053f72184f3548d0aa74dc1279c04f1", "patch": "@@ -29,12 +29,27 @@ pub trait Clone {\n     /// are copied to maintain uniqueness, while the contents of\n     /// managed pointers are not copied.\n     fn clone(&self) -> Self;\n+\n+    /// Perform copy-assignment from `source`.\n+    ///\n+    /// `a.clone_from(&b)` is equivalent to `a = b.clone()` in functionality,\n+    /// but can be overriden to reuse the resources of `a` to avoid unnecessary\n+    /// allocations.\n+    #[inline(always)]\n+    fn clone_from(&mut self, source: &Self) {\n+        *self = source.clone()\n+    }\n }\n \n impl<T: Clone> Clone for ~T {\n-    /// Return a deep copy of the owned box.\n+    /// Return a copy of the owned box.\n     #[inline]\n     fn clone(&self) -> ~T { ~(**self).clone() }\n+\n+    /// Perform copy-assignment from `source` by reusing the existing allocation.\n+    fn clone_from(&mut self, source: &~T) {\n+        **self = (**source).clone()\n+    }\n }\n \n impl<T> Clone for @T {\n@@ -122,12 +137,27 @@ pub trait DeepClone {\n     /// Return a deep copy of the value. Unlike `Clone`, the contents of shared pointer types\n     /// *are* copied.\n     fn deep_clone(&self) -> Self;\n+\n+    /// Perform deep copy-assignment from `source`.\n+    ///\n+    /// `a.deep_clone_from(&b)` is equivalent to `a = b.deep_clone()` in\n+    /// functionality, but can be overriden to reuse the resources of `a` to\n+    /// avoid unnecessary allocations.\n+    #[inline(always)]\n+    fn deep_clone_from(&mut self, source: &Self) {\n+        *self = source.deep_clone()\n+    }\n }\n \n impl<T: DeepClone> DeepClone for ~T {\n     /// Return a deep copy of the owned box.\n     #[inline]\n     fn deep_clone(&self) -> ~T { ~(**self).deep_clone() }\n+\n+    /// Perform deep copy-assignment from `source` by reusing the existing allocation.\n+    fn deep_clone_from(&mut self, source: &~T) {\n+        **self = (**source).deep_clone()\n+    }\n }\n \n // FIXME: #6525: should also be implemented for `T: Send + DeepClone`\n@@ -234,6 +264,22 @@ fn test_borrowed_clone() {\n     assert_eq!(*z, 5);\n }\n \n+#[test]\n+fn test_clone_from() {\n+    let a = ~5;\n+    let mut b = ~10;\n+    b.clone_from(&a);\n+    assert_eq!(*b, 5);\n+}\n+\n+#[test]\n+fn test_deep_clone_from() {\n+    let a = ~5;\n+    let mut b = ~10;\n+    b.deep_clone_from(&a);\n+    assert_eq!(*b, 5);\n+}\n+\n #[test]\n fn test_extern_fn_clone() {\n     trait Empty {}"}, {"sha": "055b0b92121af8d956e33586075929ef980c7387", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/421c63157053f72184f3548d0aa74dc1279c04f1/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421c63157053f72184f3548d0aa74dc1279c04f1/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=421c63157053f72184f3548d0aa74dc1279c04f1", "patch": "@@ -2029,7 +2029,7 @@ impl<'self, T:Clone> MutableCloneableVector<T> for &'self mut [T] {\n     #[inline]\n     fn copy_from(self, src: &[T]) -> uint {\n         for (a, b) in self.mut_iter().zip(src.iter()) {\n-            *a = b.clone();\n+            a.clone_from(b);\n         }\n         cmp::min(self.len(), src.len())\n     }\n@@ -2282,13 +2282,35 @@ impl<A: Clone> Clone for ~[A] {\n     fn clone(&self) -> ~[A] {\n         self.iter().map(|item| item.clone()).collect()\n     }\n+\n+    fn clone_from(&mut self, source: &~[A]) {\n+        if self.len() < source.len() {\n+            *self = source.clone()\n+        } else {\n+            self.truncate(source.len());\n+            for (x, y) in self.mut_iter().zip(source.iter()) {\n+                x.clone_from(y);\n+            }\n+        }\n+    }\n }\n \n impl<A: DeepClone> DeepClone for ~[A] {\n     #[inline]\n     fn deep_clone(&self) -> ~[A] {\n         self.iter().map(|item| item.deep_clone()).collect()\n     }\n+\n+    fn deep_clone_from(&mut self, source: &~[A]) {\n+        if self.len() < source.len() {\n+            *self = source.deep_clone()\n+        } else {\n+            self.truncate(source.len());\n+            for (x, y) in self.mut_iter().zip(source.iter()) {\n+                x.deep_clone_from(y);\n+            }\n+        }\n+    }\n }\n \n // This works because every lifetime is a sub-lifetime of 'static"}]}