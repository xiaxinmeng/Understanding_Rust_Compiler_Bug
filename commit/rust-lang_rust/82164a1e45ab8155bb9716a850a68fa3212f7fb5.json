{"sha": "82164a1e45ab8155bb9716a850a68fa3212f7fb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMTY0YTFlNDVhYjgxNTViYjk3MTZhODUwYTY4ZmEzMjEyZjdmYjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-11T23:49:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-11T23:49:40Z"}, "message": "auto merge of #6402 : kud1ing/rust/fixes, r=pcwalton", "tree": {"sha": "693395a69789e2df4e249156428ff90e21f72c3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/693395a69789e2df4e249156428ff90e21f72c3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82164a1e45ab8155bb9716a850a68fa3212f7fb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82164a1e45ab8155bb9716a850a68fa3212f7fb5", "html_url": "https://github.com/rust-lang/rust/commit/82164a1e45ab8155bb9716a850a68fa3212f7fb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82164a1e45ab8155bb9716a850a68fa3212f7fb5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ee8d506d99f5e992bd0010ad68d3014d959c4ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee8d506d99f5e992bd0010ad68d3014d959c4ec", "html_url": "https://github.com/rust-lang/rust/commit/9ee8d506d99f5e992bd0010ad68d3014d959c4ec"}, {"sha": "52610c398034705ab32bdda95d8e6e345f39fe38", "url": "https://api.github.com/repos/rust-lang/rust/commits/52610c398034705ab32bdda95d8e6e345f39fe38", "html_url": "https://github.com/rust-lang/rust/commit/52610c398034705ab32bdda95d8e6e345f39fe38"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "9d75fa644a37330c82789ea7a7c8c4247711ddaa", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -1007,7 +1007,7 @@ pub impl Resolver {\n                     let ns = namespace_for_duplicate_checking_mode(\n                         duplicate_checking_mode);\n                     self.session.span_err(sp,\n-                        fmt!(\"duplicate definition of %s %s\",\n+                        fmt!(\"duplicate definition of %s `%s`\",\n                              namespace_to_str(ns),\n                              *self.session.str_of(name)));\n                     for child.span_for_namespace(ns).each |sp| {\n@@ -1959,7 +1959,7 @@ pub impl Resolver {\n             match self.resolve_import_for_module(module, import_directive) {\n                 Failed => {\n                     // We presumably emitted an error. Continue.\n-                    let msg = fmt!(\"failed to resolve import: %s\",\n+                    let msg = fmt!(\"failed to resolve import `%s`\",\n                                    *self.import_path_to_str(\n                                        import_directive.module_path,\n                                        *import_directive.subclass));\n@@ -2488,7 +2488,7 @@ pub impl Resolver {\n                         self.session.span_err(span {lo: span.lo, hi: span.lo +\n                                               BytePos(str::len(*segment_name)), expn_info:\n                                               span.expn_info}, fmt!(\"unresolved import. maybe \\\n-                                                                    a missing 'extern mod %s'?\",\n+                                                                    a missing `extern mod %s`?\",\n                                                                     *segment_name));\n                         return Failed;\n                     }\n@@ -2511,7 +2511,7 @@ pub impl Resolver {\n                                     // Not a module.\n                                     self.session.span_err(span,\n                                                           fmt!(\"not a \\\n-                                                                module: %s\",\n+                                                                module `%s`\",\n                                                                *self.session.\n                                                                    str_of(\n                                                                     name)));\n@@ -2525,7 +2525,7 @@ pub impl Resolver {\n                         None => {\n                             // There are no type bindings at all.\n                             self.session.span_err(span,\n-                                                  fmt!(\"not a module: %s\",\n+                                                  fmt!(\"not a module `%s`\",\n                                                        *self.session.str_of(\n                                                             name)));\n                             return Failed;\n@@ -2976,7 +2976,7 @@ pub impl Resolver {\n         }\n \n         // We're out of luck.\n-        debug!(\"(resolving name in module) failed to resolve %s\",\n+        debug!(\"(resolving name in module) failed to resolve `%s`\",\n                *self.session.str_of(name));\n         return Failed;\n     }\n@@ -4158,7 +4158,7 @@ pub impl Resolver {\n                                       // in the same disjunct, which is an\n                                       // error\n                                      self.session.span_err(pattern.span,\n-                                       fmt!(\"Identifier %s is bound more \\\n+                                       fmt!(\"Identifier `%s` is bound more \\\n                                              than once in the same pattern\",\n                                             path_to_str(path, self.session\n                                                         .intr())));\n@@ -4199,7 +4199,7 @@ pub impl Resolver {\n                         Some(_) => {\n                             self.session.span_err(\n                                 path.span,\n-                                fmt!(\"not an enum variant or constant: %s\",\n+                                fmt!(\"`%s` is not an enum variant or constant\",\n                                      *self.session.str_of(\n                                          *path.idents.last())));\n                         }\n@@ -4227,7 +4227,7 @@ pub impl Resolver {\n                         Some(_) => {\n                             self.session.span_err(\n                                 path.span,\n-                                fmt!(\"not an enum variant, struct or const: %s\",\n+                                fmt!(\"`%s` is not an enum variant, struct or const\",\n                                      *self.session.str_of(\n                                          *path.idents.last())));\n                         }\n@@ -4723,8 +4723,8 @@ pub impl Resolver {\n                             path.idents);\n                         if self.name_exists_in_scope_struct(wrong_name) {\n                             self.session.span_err(expr.span,\n-                                        fmt!(\"unresolved name: `%s`. \\\n-                                            Did you mean: `self.%s`?\",\n+                                        fmt!(\"unresolved name `%s`. \\\n+                                            Did you mean `self.%s`?\",\n                                         wrong_name,\n                                         wrong_name));\n                         }\n@@ -4734,13 +4734,13 @@ pub impl Resolver {\n                             match self.find_best_match_for_name(wrong_name, 5) {\n                                 Some(m) => {\n                                     self.session.span_err(expr.span,\n-                                            fmt!(\"unresolved name: `%s`. \\\n-                                                Did you mean: `%s`?\",\n+                                            fmt!(\"unresolved name `%s`. \\\n+                                                Did you mean `%s`?\",\n                                                 wrong_name, m));\n                                 }\n                                 None => {\n                                     self.session.span_err(expr.span,\n-                                            fmt!(\"unresolved name: `%s`.\",\n+                                            fmt!(\"unresolved name `%s`.\",\n                                                 wrong_name));\n                                 }\n                             }"}, {"sha": "3caac6dbcfee09e471972e6ee8af353eb92ae9d7", "filename": "src/test/compile-fail/alt-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-join.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -16,6 +16,6 @@ fn my_fail() -> ! { fail!(); }\n fn main() {\n     match true { false => { my_fail(); } true => { } }\n \n-    debug!(x); //~ ERROR unresolved name: `x`.\n+    debug!(x); //~ ERROR unresolved name `x`.\n     let x: int;\n }"}, {"sha": "c17baf40d6446c4ac784554bf57b1aeab4e2bb86", "filename": "src/test/compile-fail/bad-expr-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved name: `m1::a`. Did you mean: `args`?\n+// error-pattern: unresolved name `m1::a`. Did you mean `args`?\n \n mod m1 {}\n "}, {"sha": "936f893ae8e66a742cbe63dd602e2eec1984e287", "filename": "src/test/compile-fail/bad-expr-path2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved name: `m1::a`. Did you mean: `args`?\n+// error-pattern: unresolved name `m1::a`. Did you mean `args`?\n \n mod m1 {\n     pub mod a {}"}, {"sha": "1dacbe9a1994ce18661b1c10b3d86e5b76d62a57", "filename": "src/test/compile-fail/does-nothing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern: unresolved name: `this_does_nothing_what_the`.\n+// error-pattern: unresolved name `this_does_nothing_what_the`.\n fn main() { debug!(\"doing\"); this_does_nothing_what_the; debug!(\"boing\"); }"}, {"sha": "f223cd428ec13a59b726c227ac0a100d1e2e31fd", "filename": "src/test/compile-fail/issue-1476.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    error!(x); //~ ERROR unresolved name: `x`.\n+    error!(x); //~ ERROR unresolved name `x`.\n }"}, {"sha": "60c80c1a3158b601ca3d6a20cfe79fec4eb165e0", "filename": "src/test/compile-fail/issue-2281-part1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved name: `foobar`.\n+// error-pattern: unresolved name `foobar`.\n \n fn main(args: ~[str]) { debug!(foobar); }"}, {"sha": "3769154c9d948d6c4420549485403488925b6067", "filename": "src/test/compile-fail/issue-3021-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -19,7 +19,7 @@ fn siphash(k0 : u64) {\n     pub impl siphash {\n         fn reset(&mut self) {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture\n-           //~^ ERROR unresolved name: `k0`.\n+           //~^ ERROR unresolved name `k0`.\n         }\n     }\n }"}, {"sha": "55c8e8aa51dd8de7088cda44a3e5cc40a13dd323", "filename": "src/test/compile-fail/issue-3021-d.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -31,9 +31,9 @@ fn siphash(k0 : u64, k1 : u64) -> siphash {\n    impl siphash for SipState {\n         fn reset(&self) {\n             self.v0 = k0 ^ 0x736f6d6570736575;  //~ ERROR attempted dynamic environment-capture\n-            //~^ ERROR unresolved name: `k0`.\n+            //~^ ERROR unresolved name `k0`.\n             self.v1 = k1 ^ 0x646f72616e646f6d;   //~ ERROR attempted dynamic environment-capture\n-            //~^ ERROR unresolved name: `k1`.\n+            //~^ ERROR unresolved name `k1`.\n         }\n         fn result(&self) -> u64 { return mk_result(self); }\n     }"}, {"sha": "f2cf2d19a864eac78cd1ce460e4984a66a7b9bdf", "filename": "src/test/compile-fail/issue-3021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -22,7 +22,7 @@ fn siphash(k0 : u64) -> SipHash {\n     impl SipHash for SipState {\n         fn reset(&self) {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture\n-           //~^ ERROR unresolved name: `k0`.\n+           //~^ ERROR unresolved name `k0`.\n         }\n     }\n     fail!();"}, {"sha": "1cdb226e39e5d154f4f653ce504bfd43f166b56e", "filename": "src/test/compile-fail/issue-3038.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -20,16 +20,16 @@ fn main()\n \n     let _z = match g(1, 2) {\n       g(x, x) => { debug!(x + x); }\n-      //~^ ERROR Identifier x is bound more than once in the same pattern\n+      //~^ ERROR Identifier `x` is bound more than once in the same pattern\n     };\n \n     let _z = match i(l(1, 2), m(3, 4)) {\n-      i(l(x, _), m(_, x))  //~ ERROR Identifier x is bound more than once in the same pattern\n+      i(l(x, _), m(_, x))  //~ ERROR Identifier `x` is bound more than once in the same pattern\n         => { error!(x + x); }\n     };\n \n     let _z = match (1, 2) {\n-        (x, x) => { x } //~ ERROR Identifier x is bound more than once in the same pattern\n+        (x, x) => { x } //~ ERROR Identifier `x` is bound more than once in the same pattern\n     };\n \n }"}, {"sha": "1b11fcac8a385bb0ba403d17a285e608456eed3e", "filename": "src/test/compile-fail/issue-3099-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-3099-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-3099-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3099-a.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -10,6 +10,6 @@\n \n enum a { b, c }\n \n-enum a { d, e } //~ ERROR duplicate definition of type a\n+enum a { d, e } //~ ERROR duplicate definition of type `a`\n \n fn main() {}"}, {"sha": "3d22a59d6bd408aa369b35fefa124586073d1170", "filename": "src/test/compile-fail/issue-3099-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -10,6 +10,6 @@\n \n pub mod a {}\n \n-pub mod a {} //~ ERROR duplicate definition of type a\n+pub mod a {} //~ ERROR duplicate definition of type `a`\n \n fn main() {}"}, {"sha": "abc76b9da0fd7880cfbaf403f7c947494c25d8b6", "filename": "src/test/compile-fail/issue-3099.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-3099.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-3099.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3099.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -12,7 +12,7 @@ fn a(x: ~str) -> ~str {\n     fmt!(\"First function with %s\", x)\n }\n \n-fn a(x: ~str, y: ~str) -> ~str { //~ ERROR duplicate definition of value a\n+fn a(x: ~str, y: ~str) -> ~str { //~ ERROR duplicate definition of value `a`\n     fmt!(\"Second function with %s and %s\", x, y)\n }\n "}, {"sha": "a1a77092b12a586d16cce2baff3451bf341089c8", "filename": "src/test/compile-fail/issue-4265.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-4265.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-4265.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4265.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -17,7 +17,7 @@ impl Foo {\n         Foo { baz: 0 }.bar();\n     }\n \n-    fn bar() { //~ ERROR duplicate definition of value bar\n+    fn bar() { //~ ERROR duplicate definition of value `bar`\n     }\n }\n "}, {"sha": "98599b5d080810be0e1c7fea58873bfb196f1e82", "filename": "src/test/compile-fail/issue-4366.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -25,7 +25,7 @@ mod a {\n     }\n     pub mod sub {\n         use a::b::*;\n-        fn sub() -> bar { foo(); 1 } //~ ERROR: unresolved name: `foo`\n+        fn sub() -> bar { foo(); 1 } //~ ERROR: unresolved name `foo`\n         //~^ ERROR: use of undeclared type name `bar`\n     }\n }\n@@ -35,5 +35,5 @@ mod m1 {\n }\n \n fn main() {\n-    foo(); //~ ERROR: unresolved name: `foo`\n+    foo(); //~ ERROR: unresolved name `foo`\n }"}, {"sha": "a8c528135135a56c8fc8406130ed43a2d1210378", "filename": "src/test/compile-fail/test-cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Ftest-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82164a1e45ab8155bb9716a850a68fa3212f7fb5/src%2Ftest%2Fcompile-fail%2Ftest-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftest-cfg.rs?ref=82164a1e45ab8155bb9716a850a68fa3212f7fb5", "patch": "@@ -14,5 +14,5 @@\n fn foo() {}\n \n fn main() {\n-    foo(); //~ ERROR unresolved name: `foo`.\n+    foo(); //~ ERROR unresolved name `foo`.\n }"}]}