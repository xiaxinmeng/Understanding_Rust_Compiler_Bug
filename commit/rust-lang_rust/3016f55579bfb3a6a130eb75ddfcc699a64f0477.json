{"sha": "3016f55579bfb3a6a130eb75ddfcc699a64f0477", "node_id": "C_kwDOAAsO6NoAKDMwMTZmNTU1NzliZmIzYTZhMTMwZWI3NWRkZmNjNjk5YTY0ZjA0Nzc", "commit": {"author": {"name": "Matthew J Perez", "email": "matt@mperez.io", "date": "2023-01-25T17:10:26Z"}, "committer": {"name": "Matthew J Perez", "email": "matt@mperez.io", "date": "2023-01-26T05:07:34Z"}, "message": "improve fn pointer notes\n\n- add note and suggestion for casting both expected and found fn items\n  to fn pointers\n- add note for casting expected fn item to fn pointer", "tree": {"sha": "8614e30edcb3fb82f8e82e93974637edee929a3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8614e30edcb3fb82f8e82e93974637edee929a3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3016f55579bfb3a6a130eb75ddfcc699a64f0477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3016f55579bfb3a6a130eb75ddfcc699a64f0477", "html_url": "https://github.com/rust-lang/rust/commit/3016f55579bfb3a6a130eb75ddfcc699a64f0477", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3016f55579bfb3a6a130eb75ddfcc699a64f0477/comments", "author": {"login": "mattjperez", "id": 41358385, "node_id": "MDQ6VXNlcjQxMzU4Mzg1", "avatar_url": "https://avatars.githubusercontent.com/u/41358385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjperez", "html_url": "https://github.com/mattjperez", "followers_url": "https://api.github.com/users/mattjperez/followers", "following_url": "https://api.github.com/users/mattjperez/following{/other_user}", "gists_url": "https://api.github.com/users/mattjperez/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjperez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjperez/subscriptions", "organizations_url": "https://api.github.com/users/mattjperez/orgs", "repos_url": "https://api.github.com/users/mattjperez/repos", "events_url": "https://api.github.com/users/mattjperez/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjperez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattjperez", "id": 41358385, "node_id": "MDQ6VXNlcjQxMzU4Mzg1", "avatar_url": "https://avatars.githubusercontent.com/u/41358385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjperez", "html_url": "https://github.com/mattjperez", "followers_url": "https://api.github.com/users/mattjperez/followers", "following_url": "https://api.github.com/users/mattjperez/following{/other_user}", "gists_url": "https://api.github.com/users/mattjperez/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjperez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjperez/subscriptions", "organizations_url": "https://api.github.com/users/mattjperez/orgs", "repos_url": "https://api.github.com/users/mattjperez/repos", "events_url": "https://api.github.com/users/mattjperez/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjperez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a17174ee639f8e0a3cee307d5685d38beb474ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a17174ee639f8e0a3cee307d5685d38beb474ba", "html_url": "https://github.com/rust-lang/rust/commit/2a17174ee639f8e0a3cee307d5685d38beb474ba"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "768cef89f3c439b2c61092d4bdcfa7a65ea5151b", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3016f55579bfb3a6a130eb75ddfcc699a64f0477/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3016f55579bfb3a6a130eb75ddfcc699a64f0477/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=3016f55579bfb3a6a130eb75ddfcc699a64f0477", "patch": "@@ -380,7 +380,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     return;\n                 }\n \n-                let (msg, sugg) = match (expected.is_ref(), found.is_ref()) {\n+                let (msg, sug) = match (expected.is_ref(), found.is_ref()) {\n                     (true, false) => {\n                         let msg = \"consider using a reference\";\n                         let sug = format!(\"&{fn_name}\");\n@@ -404,22 +404,58 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         (msg, sug)\n                     }\n                 };\n-                diag.span_suggestion(span, msg, &sugg, Applicability::MaybeIncorrect);\n+                diag.span_suggestion(span, msg, sug, Applicability::MaybeIncorrect);\n             }\n             (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n                 let expected_sig =\n                     &(self.normalize_fn_sig)(self.tcx.bound_fn_sig(*did1).subst(self.tcx, substs1));\n                 let found_sig =\n                     &(self.normalize_fn_sig)(self.tcx.bound_fn_sig(*did2).subst(self.tcx, substs2));\n \n-                if self.same_type_modulo_infer(*found_sig, *expected_sig) {\n-                    diag.note(\n-                    \"different fn items have unique types, even if their signatures are the same\",\n-                    );\n+                if self.same_type_modulo_infer(*expected_sig, *found_sig) {\n+                    diag.note(\"different fn items have unique types, even if their signatures are the same\");\n+                }\n+\n+                if !self.same_type_modulo_infer(*found_sig, *expected_sig)\n+                    || !found_sig.is_suggestable(self.tcx, true)\n+                    || !expected_sig.is_suggestable(self.tcx, true)\n+                    || ty::util::is_intrinsic(self.tcx, *did1)\n+                    || ty::util::is_intrinsic(self.tcx, *did2)\n+                {\n+                    return;\n                 }\n+\n+                let fn_name = self.tcx.def_path_str_with_substs(*did2, substs2);\n+                let sug = if found.is_ref() {\n+                    format!(\"&({fn_name} as {found_sig})\")\n+                } else {\n+                    format!(\"{fn_name} as {found_sig}\")\n+                };\n+\n+                let msg = format!(\n+                    \"consider casting both fn items to fn pointers using `as {expected_sig}`\"\n+                );\n+\n+                diag.span_suggestion_hidden(span, msg, sug, Applicability::MaybeIncorrect);\n             }\n-            (ty::FnDef(_, _), ty::FnPtr(_)) => {\n-                diag.note(\"fn items are distinct from fn pointers\");\n+            (ty::FnDef(did, substs), ty::FnPtr(sig)) => {\n+                let expected_sig =\n+                    &(self.normalize_fn_sig)(self.tcx.bound_fn_sig(*did).subst(self.tcx, substs));\n+                let found_sig = &(self.normalize_fn_sig)(*sig);\n+\n+                if !self.same_type_modulo_infer(*found_sig, *expected_sig) {\n+                    return;\n+                }\n+\n+                let fn_name = self.tcx.def_path_str_with_substs(*did, substs);\n+\n+                let casting = if expected.is_ref() {\n+                    format!(\"&({fn_name} as {found_sig})\")\n+                } else {\n+                    format!(\"{fn_name} as {found_sig}\")\n+                };\n+\n+                diag.help(&format!(\"consider casting the fn item to a fn pointer: `{}`\", casting));\n             }\n             _ => {\n                 return;"}, {"sha": "b4e71e75fdb9a196a556be0afb8eafffd5bf869d", "filename": "tests/ui/fn/fn-compare-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3016f55579bfb3a6a130eb75ddfcc699a64f0477/tests%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3016f55579bfb3a6a130eb75ddfcc699a64f0477/tests%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-compare-mismatch.stderr?ref=3016f55579bfb3a6a130eb75ddfcc699a64f0477", "patch": "@@ -20,6 +20,7 @@ LL |     let x = f == g;\n    = note: expected fn item `fn() {f}`\n               found fn item `fn() {g}`\n    = note: different fn items have unique types, even if their signatures are the same\n+   = help: consider casting both fn items to fn pointers using `as fn()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9d41243ef11917479aca7c97468b5e5768578352", "filename": "tests/ui/fn/fn-item-type.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3016f55579bfb3a6a130eb75ddfcc699a64f0477/tests%2Fui%2Ffn%2Ffn-item-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3016f55579bfb3a6a130eb75ddfcc699a64f0477/tests%2Fui%2Ffn%2Ffn-item-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-item-type.stderr?ref=3016f55579bfb3a6a130eb75ddfcc699a64f0477", "patch": "@@ -14,6 +14,7 @@ note: function defined here\n    |\n LL | fn eq<T>(x: T, y: T) {}\n    |    ^^          ----\n+   = help: consider casting both fn items to fn pointers using `as fn(isize) -> isize`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:29:19\n@@ -31,6 +32,7 @@ note: function defined here\n    |\n LL | fn eq<T>(x: T, y: T) {}\n    |    ^^          ----\n+   = help: consider casting both fn items to fn pointers using `as fn(isize) -> isize`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:34:23\n@@ -48,6 +50,7 @@ note: function defined here\n    |\n LL | fn eq<T>(x: T, y: T) {}\n    |    ^^          ----\n+   = help: consider casting both fn items to fn pointers using `as fn(isize) -> isize`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:41:26\n@@ -65,6 +68,7 @@ note: function defined here\n    |\n LL | fn eq<T>(x: T, y: T) {}\n    |    ^^          ----\n+   = help: consider casting both fn items to fn pointers using `as fn()`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:46:19\n@@ -76,7 +80,7 @@ LL |     eq(foo::<u8>, bar::<u8> as fn(isize) -> isize);\n    |\n    = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n            found fn pointer `fn(_) -> _`\n-   = note: fn items are distinct from fn pointers\n+   = help: consider casting the fn item to a fn pointer: `foo::<u8> as fn(isize) -> isize`\n note: function defined here\n   --> $DIR/fn-item-type.rs:11:4\n    |"}, {"sha": "e0bd60fbc0b5ececeb825f217bc42413b073d26d", "filename": "tests/ui/fn/fn-pointer-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3016f55579bfb3a6a130eb75ddfcc699a64f0477/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3016f55579bfb3a6a130eb75ddfcc699a64f0477/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr?ref=3016f55579bfb3a6a130eb75ddfcc699a64f0477", "patch": "@@ -9,6 +9,7 @@ LL |     let g = if n % 2 == 0 { &foo } else { &bar };\n    = note: expected reference `&fn(u32) -> u32 {foo}`\n               found reference `&fn(u32) -> u32 {bar}`\n    = note: different fn items have unique types, even if their signatures are the same\n+   = help: consider casting both fn items to fn pointers using `as fn(u32) -> u32`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-pointer-mismatch.rs:23:9\n@@ -21,6 +22,7 @@ LL |     a = bar;\n    = note: expected fn item `fn(_) -> _ {foo}`\n               found fn item `fn(_) -> _ {bar}`\n    = note: different fn items have unique types, even if their signatures are the same\n+   = help: consider casting both fn items to fn pointers using `as fn(u32) -> u32`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-pointer-mismatch.rs:31:18\n@@ -35,6 +37,7 @@ LL |     b = Box::new(bar);\n    = note: different fn items have unique types, even if their signatures are the same\n note: associated function defined here\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+   = help: consider casting both fn items to fn pointers using `as fn(u32) -> u32`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-pointer-mismatch.rs:36:29"}]}