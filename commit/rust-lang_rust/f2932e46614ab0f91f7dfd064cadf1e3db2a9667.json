{"sha": "f2932e46614ab0f91f7dfd064cadf1e3db2a9667", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOTMyZTQ2NjE0YWIwZjkxZjdkZmQwNjRjYWRmMWUzZGIyYTk2Njc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-10-02T11:51:39Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-10-02T14:02:52Z"}, "message": "make small (<= size_of::<int>()) enums immediate\n\nC-like enums are excluded from this for now, because the code paths\nspecific to them need to be changed.\n\n    fn foo() -> Option<~int> { Some(~5) }\n\nBefore:\n\n    ; Function Attrs: uwtable\n    define void @_ZN3foo18hdec6e36682b87eeaf4v0.0E(%\"enum.std::option::Option<~int>[#1]\"* noalias nocapture sret, { i64, %tydesc*, i8*, i8*, i8 }* nocapture readnone) #0 {\n    \"function top level\":\n      %2 = tail call %\"enum.std::libc::types::common::c95::c_void[#1]\"* @\"_ZN2rt11global_heap10malloc_raw17h56c543b77f9b78aY11v0.9$x2dpreE\"({ i64, %tydesc*, i8*, i8*, i8 }* undef, i64 8)\n      %3 = bitcast %\"enum.std::libc::types::common::c95::c_void[#1]\"* %2 to i64*\n      store i64 5, i64* %3, align 8\n      %4 = getelementptr inbounds %\"enum.std::option::Option<~int>[#1]\"* %0, i64 0, i32 0\n      store i64* %3, i64** %4, align 8\n      ret void\n    }\n\nAfter:\n\n    ; Function Attrs: uwtable\n    define %\"enum.std::option::Option<~int>[#1]\" @_ZN3foo18h2cbf6557a3143edah4v0.0E({ i64, %tydesc*, i8*, i8*, i8 }* nocapture readnone) #0 {\n    \"function top level\":\n      %1 = tail call %\"enum.std::libc::types::common::c95::c_void[#1]\"* @\"_ZN2rt11global_heap10malloc_raw18hb1e9dd1beab35edau11v0.9$x2dpreE\"({ i64, %tydesc*, i8*, i8*, i8 }* undef, i64 8)\n      %2 = bitcast %\"enum.std::libc::types::common::c95::c_void[#1]\"* %1 to i64*\n      store i64 5, i64* %2, align 8\n      %oldret = insertvalue %\"enum.std::option::Option<~int>[#1]\" undef, i64* %2, 0\n      ret %\"enum.std::option::Option<~int>[#1]\" %oldret\n    }", "tree": {"sha": "8761c525ec6903be085f8d03fc678baf81d68b67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8761c525ec6903be085f8d03fc678baf81d68b67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2932e46614ab0f91f7dfd064cadf1e3db2a9667", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2932e46614ab0f91f7dfd064cadf1e3db2a9667", "html_url": "https://github.com/rust-lang/rust/commit/f2932e46614ab0f91f7dfd064cadf1e3db2a9667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2932e46614ab0f91f7dfd064cadf1e3db2a9667/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abe648d60854c7dbbc0c9db5f29111268c66961d", "url": "https://api.github.com/repos/rust-lang/rust/commits/abe648d60854c7dbbc0c9db5f29111268c66961d", "html_url": "https://github.com/rust-lang/rust/commit/abe648d60854c7dbbc0c9db5f29111268c66961d"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "bbed6324543f669feffe55c6d8386e42eabb5325", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2932e46614ab0f91f7dfd064cadf1e3db2a9667/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2932e46614ab0f91f7dfd064cadf1e3db2a9667/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=f2932e46614ab0f91f7dfd064cadf1e3db2a9667", "patch": "@@ -69,9 +69,13 @@ pub fn type_is_immediate(ccx: &mut CrateContext, ty: ty::t) -> bool {\n     if simple {\n         return true;\n     }\n+    // FIXME: #9651: C-like enums should also be immediate\n+    if ty::type_is_c_like_enum(ccx.tcx, ty) {\n+        return false;\n+    }\n     match ty::get(ty).sty {\n-        // FIXME: #9651: small `ty_struct` and `ty_enum` should also be immediate\n-        ty::ty_tup(*) => {\n+        // FIXME: #9651: small `ty_struct` should also be immediate\n+        ty::ty_enum(*) | ty::ty_tup(*) => {\n             let llty = sizing_type_of(ccx, ty);\n             llsize_of_alloc(ccx, llty) <= llsize_of_alloc(ccx, ccx.int_type)\n         }"}]}