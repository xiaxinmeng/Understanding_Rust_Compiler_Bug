{"sha": "3bf9fc0c2a532c32704dd710c8dd40cf9c296205", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZjlmYzBjMmE1MzJjMzI3MDRkZDcxMGM4ZGQ0MGNmOWMyOTYyMDU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-11T08:15:14Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-14T04:53:33Z"}, "message": "Fix fallout in rustdoc", "tree": {"sha": "2d88877b52f263b4745ca507240c50d475b733df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d88877b52f263b4745ca507240c50d475b733df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bf9fc0c2a532c32704dd710c8dd40cf9c296205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf9fc0c2a532c32704dd710c8dd40cf9c296205", "html_url": "https://github.com/rust-lang/rust/commit/3bf9fc0c2a532c32704dd710c8dd40cf9c296205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bf9fc0c2a532c32704dd710c8dd40cf9c296205/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e5942469dfedea0ba7d64d116d04b4c7e17d9cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb", "html_url": "https://github.com/rust-lang/rust/commit/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "1e9796c5f66f993cd0ee8aae0672f443bb18ad8b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bf9fc0c2a532c32704dd710c8dd40cf9c296205/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf9fc0c2a532c32704dd710c8dd40cf9c296205/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=3bf9fc0c2a532c32704dd710c8dd40cf9c296205", "patch": "@@ -122,7 +122,7 @@ fn try_inline_def(cx: &DocContext, tcx: &TyCtxt,\n         name: Some(tcx.item_name(did).to_string()),\n         attrs: load_attrs(cx, tcx, did),\n         inner: inner,\n-        visibility: Some(hir::Public),\n+        visibility: Some(clean::Public),\n         stability: stability::lookup_stability(tcx, did).clean(cx),\n         deprecation: stability::lookup_deprecation(tcx, did).clean(cx),\n         def_id: did,\n@@ -323,7 +323,7 @@ pub fn build_impl(cx: &DocContext,\n             source: clean::Span::empty(),\n             name: None,\n             attrs: attrs,\n-            visibility: Some(hir::Inherited),\n+            visibility: Some(clean::Inherited),\n             stability: stability::lookup_stability(tcx, did).clean(cx),\n             deprecation: stability::lookup_deprecation(tcx, did).clean(cx),\n             def_id: did,\n@@ -444,7 +444,7 @@ pub fn build_impl(cx: &DocContext,\n         source: clean::Span::empty(),\n         name: None,\n         attrs: attrs,\n-        visibility: Some(hir::Inherited),\n+        visibility: Some(clean::Inherited),\n         stability: stability::lookup_stability(tcx, did).clean(cx),\n         deprecation: stability::lookup_deprecation(tcx, did).clean(cx),\n         def_id: did,"}, {"sha": "42db93e180344a8bb1b7224e2f0d86bf8af14c49", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3bf9fc0c2a532c32704dd710c8dd40cf9c296205/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf9fc0c2a532c32704dd710c8dd40cf9c296205/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3bf9fc0c2a532c32704dd710c8dd40cf9c296205", "patch": "@@ -22,6 +22,7 @@ pub use self::Attribute::*;\n pub use self::TyParamBound::*;\n pub use self::SelfTy::*;\n pub use self::FunctionRetTy::*;\n+pub use self::Visibility::*;\n \n use syntax;\n use syntax::abi::Abi;\n@@ -183,7 +184,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n                     source: Span::empty(),\n                     name: Some(prim.to_url_str().to_string()),\n                     attrs: child.attrs.clone(),\n-                    visibility: Some(hir::Public),\n+                    visibility: Some(Public),\n                     stability: None,\n                     deprecation: None,\n                     def_id: DefId::local(prim.to_def_index()),\n@@ -1391,7 +1392,7 @@ impl<'tcx> Clean<Item> for ty::Method<'tcx> {\n \n         Item {\n             name: Some(self.name.clean(cx)),\n-            visibility: Some(hir::Inherited),\n+            visibility: Some(Inherited),\n             stability: get_stability(cx, self.def_id),\n             deprecation: get_deprecation(cx, self.def_id),\n             def_id: self.def_id,\n@@ -1777,17 +1778,21 @@ impl<'tcx> Clean<Item> for ty::FieldDefData<'tcx, 'static> {\n     }\n }\n \n-pub type Visibility = hir::Visibility;\n+#[derive(Clone, PartialEq, Eq, RustcDecodable, RustcEncodable, Debug)]\n+pub enum Visibility {\n+    Public,\n+    Inherited,\n+}\n \n impl Clean<Option<Visibility>> for hir::Visibility {\n     fn clean(&self, _: &DocContext) -> Option<Visibility> {\n-        Some(self.clone())\n+        Some(if *self == hir::Visibility::Public { Public } else { Inherited })\n     }\n }\n \n impl Clean<Option<Visibility>> for ty::Visibility {\n     fn clean(&self, _: &DocContext) -> Option<Visibility> {\n-        Some(if *self == ty::Visibility::Public { hir::Public } else { hir::Inherited })\n+        Some(if *self == ty::Visibility::Public { Public } else { Inherited })\n     }\n }\n \n@@ -1919,7 +1924,7 @@ impl<'tcx> Clean<Item> for ty::VariantDefData<'tcx, 'static> {\n             name: Some(self.name.clean(cx)),\n             attrs: inline::load_attrs(cx, cx.tcx(), self.did),\n             source: Span::empty(),\n-            visibility: Some(hir::Inherited),\n+            visibility: Some(Inherited),\n             def_id: self.did,\n             inner: VariantItem(Variant { kind: kind }),\n             stability: get_stability(cx, self.did),\n@@ -2341,7 +2346,7 @@ impl Clean<Item> for doctree::DefaultImpl {\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n             def_id: cx.map.local_def_id(self.id),\n-            visibility: Some(hir::Public),\n+            visibility: Some(Public),\n             stability: None,\n             deprecation: None,\n             inner: DefaultImplItem(DefaultImpl {\n@@ -2700,7 +2705,7 @@ impl Clean<Item> for doctree::Macro {\n             name: Some(name.clone()),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            visibility: hir::Public.clean(cx),\n+            visibility: Some(Public),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n             def_id: cx.map.local_def_id(self.id),"}, {"sha": "d2b43ae5bda1539a966d8e6b128286b38b42eae7", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bf9fc0c2a532c32704dd710c8dd40cf9c296205/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf9fc0c2a532c32704dd710c8dd40cf9c296205/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=3bf9fc0c2a532c32704dd710c8dd40cf9c296205", "patch": "@@ -31,7 +31,7 @@ use html::render::{cache, CURRENT_LOCATION_KEY};\n /// Helper to render an optional visibility with a space after it (if the\n /// visibility is preset)\n #[derive(Copy, Clone)]\n-pub struct VisSpace<'a>(pub &'a Option<hir::Visibility>);\n+pub struct VisSpace<'a>(pub &'a Option<clean::Visibility>);\n /// Similarly to VisSpace, this structure is used to render a function style with a\n /// space after it.\n #[derive(Copy, Clone)]\n@@ -57,7 +57,7 @@ pub struct CommaSep<'a, T: 'a>(pub &'a [T]);\n pub struct AbiSpace(pub Abi);\n \n impl<'a> VisSpace<'a> {\n-    pub fn get(self) -> &'a Option<hir::Visibility> {\n+    pub fn get(self) -> &'a Option<clean::Visibility> {\n         let VisSpace(v) = self; v\n     }\n }\n@@ -639,8 +639,8 @@ impl<'a> fmt::Display for Method<'a> {\n impl<'a> fmt::Display for VisSpace<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self.get() {\n-            Some(hir::Public) => write!(f, \"pub \"),\n-            Some(hir::Inherited) | None => Ok(())\n+            Some(clean::Public) => write!(f, \"pub \"),\n+            Some(clean::Inherited) | None => Ok(())\n         }\n     }\n }"}, {"sha": "92e014e81eaf2558a3e9f005b480bb5eaa052f67", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bf9fc0c2a532c32704dd710c8dd40cf9c296205/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf9fc0c2a532c32704dd710c8dd40cf9c296205/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3bf9fc0c2a532c32704dd710c8dd40cf9c296205", "patch": "@@ -1408,7 +1408,8 @@ impl Context {\n         match it.inner {\n             clean::StrippedItem(..) => true,\n             clean::ModuleItem(ref m) => {\n-                it.doc_value().is_none() && m.items.is_empty() && it.visibility != Some(hir::Public)\n+                it.doc_value().is_none() && m.items.is_empty()\n+                                         && it.visibility != Some(clean::Public)\n             },\n             _ => false,\n         }"}, {"sha": "0042afb1fd5147695274e7151c2c9265a5ff6587", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3bf9fc0c2a532c32704dd710c8dd40cf9c296205/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf9fc0c2a532c32704dd710c8dd40cf9c296205/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=3bf9fc0c2a532c32704dd710c8dd40cf9c296205", "patch": "@@ -14,7 +14,6 @@ use rustc::util::nodemap::DefIdSet;\n use std::cmp;\n use std::string::String;\n use std::usize;\n-use rustc::hir;\n \n use clean::{self, Attributes, GetDefId};\n use clean::Item;\n@@ -133,13 +132,13 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             }\n \n             clean::StructFieldItem(..) => {\n-                if i.visibility != Some(hir::Public) {\n+                if i.visibility != Some(clean::Public) {\n                     return Strip(i).fold();\n                 }\n             }\n \n             clean::ModuleItem(..) => {\n-                if i.def_id.is_local() && i.visibility != Some(hir::Public) {\n+                if i.def_id.is_local() && i.visibility != Some(clean::Public) {\n                     return Strip(self.fold_item_recur(i).unwrap()).fold()\n                 }\n             }\n@@ -226,7 +225,7 @@ impl fold::DocFolder for ImportStripper {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         match i.inner {\n             clean::ExternCrateItem(..) |\n-            clean::ImportItem(..) if i.visibility != Some(hir::Public) => None,\n+            clean::ImportItem(..) if i.visibility != Some(clean::Public) => None,\n             _ => self.fold_item_recur(i)\n         }\n     }"}]}