{"sha": "f25c81a51a752786ce8936b503c16912478a89fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNWM4MWE1MWE3NTI3ODZjZTg5MzZiNTAzYzE2OTEyNDc4YTg5ZmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-16T06:20:53Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-25T03:59:54Z"}, "message": "rustuv: Fix a use-after-free on destruction\n\nThe uv loop was being destroyed before the async handle was being destroyed, so\nclosing the async handle was causing a use-after-free in the uv loop. This was\nfixed by moving destruction of the queue's async handle to an earlier location\nand then actually freeing it once the loop has been dropped.", "tree": {"sha": "e6335e5796487812f4a8c3c7e76b7966cb1506ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6335e5796487812f4a8c3c7e76b7966cb1506ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f25c81a51a752786ce8936b503c16912478a89fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f25c81a51a752786ce8936b503c16912478a89fd", "html_url": "https://github.com/rust-lang/rust/commit/f25c81a51a752786ce8936b503c16912478a89fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f25c81a51a752786ce8936b503c16912478a89fd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "962af9198f8f2a1e2d5121ac216b6f4d574ae54c", "url": "https://api.github.com/repos/rust-lang/rust/commits/962af9198f8f2a1e2d5121ac216b6f4d574ae54c", "html_url": "https://github.com/rust-lang/rust/commit/962af9198f8f2a1e2d5121ac216b6f4d574ae54c"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "32f8d8532a209f83448ec745e940d359fe3aeb43", "filename": "src/librustuv/queue.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f25c81a51a752786ce8936b503c16912478a89fd/src%2Flibrustuv%2Fqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c81a51a752786ce8936b503c16912478a89fd/src%2Flibrustuv%2Fqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fqueue.rs?ref=f25c81a51a752786ce8936b503c16912478a89fd", "patch": "@@ -138,6 +138,10 @@ impl QueuePool {\n         }\n         Queue { queue: self.producer.clone() }\n     }\n+\n+    pub fn handle(&self) -> *uvll::uv_async_t {\n+        unsafe { (*self.producer.packet()).handle }\n+    }\n }\n \n impl Queue {\n@@ -180,7 +184,9 @@ impl Drop for State {\n     fn drop(&mut self) {\n         unsafe {\n             uvll::uv_close(self.handle, cast::transmute(0));\n-            uvll::free_handle(self.handle);\n+            // Note that this does *not* free the handle, that is the\n+            // responsibility of the caller because the uv loop must be closed\n+            // before we deallocate this uv handle.\n         }\n     }\n }"}, {"sha": "322bead8be44248ccdc79c4aabd3ed6fb4e640f2", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f25c81a51a752786ce8936b503c16912478a89fd/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c81a51a752786ce8936b503c16912478a89fd/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=f25c81a51a752786ce8936b503c16912478a89fd", "patch": "@@ -67,9 +67,13 @@ impl Drop for UvEventLoop {\n     fn drop(&mut self) {\n         // Must first destroy the pool of handles before we destroy the loop\n         // because otherwise the contained async handle will be destroyed after\n-        // the loop is free'd (use-after-free)\n+        // the loop is free'd (use-after-free). We also must free the uv handle\n+        // after the loop has been closed because during the closing of the loop\n+        // the handle is required to be used apparently.\n+        let handle = self.uvio.handle_pool.get_ref().handle();\n         self.uvio.handle_pool.take();\n         self.uvio.loop_.close();\n+        unsafe { uvll::free_handle(handle) }\n     }\n }\n "}]}