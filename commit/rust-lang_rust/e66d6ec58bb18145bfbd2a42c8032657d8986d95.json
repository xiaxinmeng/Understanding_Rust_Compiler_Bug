{"sha": "e66d6ec58bb18145bfbd2a42c8032657d8986d95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NmQ2ZWM1OGJiMTgxNDViZmJkMmE0MmM4MDMyNjU3ZDg5ODZkOTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-03-10T17:21:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-10T17:21:53Z"}, "message": "Merge pull request #660 from rust-lang/readme\n\nREADME: mention --exclude-should-panic", "tree": {"sha": "37241cab18dbacc533979bdb3272e6796c70f79f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37241cab18dbacc533979bdb3272e6796c70f79f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e66d6ec58bb18145bfbd2a42c8032657d8986d95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJchUexCRBK7hj4Ov3rIwAAdHIIAFChoAv0s7inamkKfsfOq6L9\n53Nme6OhKtes8DO08yQXHarO2FseOee8MgxTfpUxRxpBJWDnU+csJS2gqOYYOP/C\neCVRDyiRGbGDW6y84Iv6YIZDg6WDhisKqmfY8n85XwYwWgdEXtnq4S/OELcm9Yma\n5Jfvt99ip5LCkzlYGRjdu4FESN1rfA7AEBvjwibqI+nV+97ltp4aqgFkMNsi3c4Y\ngqv8erZE8IOKQXH4KuJEf2lUM4bATsQ4Cg4lNJ8Gic6lklOzJ5YPlIzabw6k1k5K\nNg8QyDd+NucGFUvu1n6lKhexiOgguzeNN1D5gy5wlaw0Gg4H0W7b/pe8fbQTxAM=\n=+5Xt\n-----END PGP SIGNATURE-----\n", "payload": "tree 37241cab18dbacc533979bdb3272e6796c70f79f\nparent a6cbc054c7cdcc04ceadb7ca4e320628212bf7ee\nparent 8c74325441c3d571f0439a772f9287ac94975f54\nauthor Ralf Jung <post@ralfj.de> 1552238513 +0100\ncommitter GitHub <noreply@github.com> 1552238513 +0100\n\nMerge pull request #660 from rust-lang/readme\n\nREADME: mention --exclude-should-panic"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e66d6ec58bb18145bfbd2a42c8032657d8986d95", "html_url": "https://github.com/rust-lang/rust/commit/e66d6ec58bb18145bfbd2a42c8032657d8986d95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e66d6ec58bb18145bfbd2a42c8032657d8986d95/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6cbc054c7cdcc04ceadb7ca4e320628212bf7ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6cbc054c7cdcc04ceadb7ca4e320628212bf7ee", "html_url": "https://github.com/rust-lang/rust/commit/a6cbc054c7cdcc04ceadb7ca4e320628212bf7ee"}, {"sha": "8c74325441c3d571f0439a772f9287ac94975f54", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c74325441c3d571f0439a772f9287ac94975f54", "html_url": "https://github.com/rust-lang/rust/commit/8c74325441c3d571f0439a772f9287ac94975f54"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "184e37a894a9e088aa1fe0a548311747744cc18c", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e66d6ec58bb18145bfbd2a42c8032657d8986d95/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e66d6ec58bb18145bfbd2a42c8032657d8986d95/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e66d6ec58bb18145bfbd2a42c8032657d8986d95", "patch": "@@ -61,8 +61,8 @@ You can pass arguments to Miri after the first `--`, and pass arguments to the\n interpreted program or test suite after the second `--`.  For example, `cargo\n +nightly miri run -- -Zmiri-disable-validation` runs the program without\n validation of basic type invariants and references.  `cargo +nightly miri test\n--- -- filter` passes `filter` to the test suite the same way `cargo test filter`\n-would.\n+-- -- -Zunstable-options --exclude-should-panic` skips `#[should_panic]` tests,\n+which is a good idea because Miri does not support unwinding or catching panics.\n \n When running code via `cargo miri`, the `miri` config flag is set.  You can\n use this to exclude test cases that will fail under Miri because they do things"}, {"sha": "50570554f450c4805fdd7f6cee30b7f614630ef9", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e66d6ec58bb18145bfbd2a42c8032657d8986d95/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e66d6ec58bb18145bfbd2a42c8032657d8986d95/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=e66d6ec58bb18145bfbd2a42c8032657d8986d95", "patch": "@@ -329,11 +329,8 @@ fn in_cargo_miri() {\n             \"badly formatted cargo metadata: target::kind is an empty array\",\n         );\n         // Now we run `cargo rustc $FLAGS $ARGS`, giving the user the\n-        // change to add additional flags. `FLAGS` is set to identify\n+        // change to add additional arguments. `FLAGS` is set to identify\n         // this target.  The user gets to control what gets actually passed to Miri.\n-        // However, we need to add a flag to what gets passed to rustc for the finaly\n-        // binary, so that we know to interpret that with Miri.\n-        // So after the first `--`, we add `-Zcargo-miri-marker`.\n         let mut cmd = Command::new(\"cargo\");\n         cmd.arg(\"rustc\");\n         match (subcommand, kind.as_str()) {\n@@ -363,7 +360,8 @@ fn in_cargo_miri() {\n             cmd.arg(arg);\n         }\n         // Add `--` (to end the `cargo` flags), and then the user flags. We add markers around the\n-        // user flags to be able to identify them later.\n+        // user flags to be able to identify them later.  \"cargo rustc\" adds more stuff after this,\n+        // so we have to mark both the beginning and the end.\n         cmd\n             .arg(\"--\")\n             .arg(\"cargo-miri-marker-begin\")"}]}