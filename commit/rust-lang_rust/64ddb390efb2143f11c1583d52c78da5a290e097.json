{"sha": "64ddb390efb2143f11c1583d52c78da5a290e097", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZGRiMzkwZWZiMjE0M2YxMWMxNTgzZDUyYzc4ZGE1YTI5MGUwOTc=", "commit": {"author": {"name": "memoryleak47", "email": "memoryleak47@protonmail.ch", "date": "2018-04-05T11:04:00Z"}, "committer": {"name": "memoryleak47", "email": "memoryleak47@protonmail.ch", "date": "2018-04-05T11:04:00Z"}, "message": "typos", "tree": {"sha": "b3326301ab1eb33deb4a8f4fc14063270544ddcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3326301ab1eb33deb4a8f4fc14063270544ddcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ddb390efb2143f11c1583d52c78da5a290e097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ddb390efb2143f11c1583d52c78da5a290e097", "html_url": "https://github.com/rust-lang/rust/commit/64ddb390efb2143f11c1583d52c78da5a290e097", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ddb390efb2143f11c1583d52c78da5a290e097/comments", "author": {"login": "memoryleak47", "id": 5725430, "node_id": "MDQ6VXNlcjU3MjU0MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5725430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/memoryleak47", "html_url": "https://github.com/memoryleak47", "followers_url": "https://api.github.com/users/memoryleak47/followers", "following_url": "https://api.github.com/users/memoryleak47/following{/other_user}", "gists_url": "https://api.github.com/users/memoryleak47/gists{/gist_id}", "starred_url": "https://api.github.com/users/memoryleak47/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/memoryleak47/subscriptions", "organizations_url": "https://api.github.com/users/memoryleak47/orgs", "repos_url": "https://api.github.com/users/memoryleak47/repos", "events_url": "https://api.github.com/users/memoryleak47/events{/privacy}", "received_events_url": "https://api.github.com/users/memoryleak47/received_events", "type": "User", "site_admin": false}, "committer": {"login": "memoryleak47", "id": 5725430, "node_id": "MDQ6VXNlcjU3MjU0MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5725430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/memoryleak47", "html_url": "https://github.com/memoryleak47", "followers_url": "https://api.github.com/users/memoryleak47/followers", "following_url": "https://api.github.com/users/memoryleak47/following{/other_user}", "gists_url": "https://api.github.com/users/memoryleak47/gists{/gist_id}", "starred_url": "https://api.github.com/users/memoryleak47/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/memoryleak47/subscriptions", "organizations_url": "https://api.github.com/users/memoryleak47/orgs", "repos_url": "https://api.github.com/users/memoryleak47/repos", "events_url": "https://api.github.com/users/memoryleak47/events{/privacy}", "received_events_url": "https://api.github.com/users/memoryleak47/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be5d360cd8a9338d1408b3998874313240db395", "url": "https://api.github.com/repos/rust-lang/rust/commits/4be5d360cd8a9338d1408b3998874313240db395", "html_url": "https://github.com/rust-lang/rust/commit/4be5d360cd8a9338d1408b3998874313240db395"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "67ef47569d631b10839bc5b3740dda98296c1893", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ddb390efb2143f11c1583d52c78da5a290e097/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ddb390efb2143f11c1583d52c78da5a290e097/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=64ddb390efb2143f11c1583d52c78da5a290e097", "patch": "@@ -380,7 +380,7 @@ extern crate compiler_builtins;\n // During testing, this crate is not actually the \"real\" std library, but rather\n // it links to the real std library, which was compiled from this same source\n // code. So any lang items std defines are conditionally excluded (or else they\n-// wolud generate duplicate lang item errors), and any globals it defines are\n+// would generate duplicate lang item errors), and any globals it defines are\n // _not_ the globals used by \"real\" std. So this import, defined only during\n // testing gives test-std access to real-std lang items and globals. See #2912\n #[cfg(test)] extern crate std as realstd;"}, {"sha": "28c178307a51049aa413d236a1ccd6d0561440e9", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ddb390efb2143f11c1583d52c78da5a290e097/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ddb390efb2143f11c1583d52c78da5a290e097/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=64ddb390efb2143f11c1583d52c78da5a290e097", "patch": "@@ -188,7 +188,7 @@ pub struct AssertUnwindSafe<T>(\n // * By default everything is unwind safe\n // * pointers T contains mutability of some form are not unwind safe\n // * Unique, an owning pointer, lifts an implementation\n-// * Types like Mutex/RwLock which are explicilty poisoned are unwind safe\n+// * Types like Mutex/RwLock which are explicitly poisoned are unwind safe\n // * Our custom AssertUnwindSafe wrapper is indeed unwind safe\n \n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]"}, {"sha": "df1dd7401af619476582db504075646df2ea6109", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ddb390efb2143f11c1583d52c78da5a290e097/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ddb390efb2143f11c1583d52c78da5a290e097/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=64ddb390efb2143f11c1583d52c78da5a290e097", "patch": "@@ -236,7 +236,7 @@ enum State {\n impl<'a> AsyncPipe<'a> {\n     fn new(pipe: Handle, dst: &'a mut Vec<u8>) -> io::Result<AsyncPipe<'a>> {\n         // Create an event which we'll use to coordinate our overlapped\n-        // opreations, this event will be used in WaitForMultipleObjects\n+        // operations, this event will be used in WaitForMultipleObjects\n         // and passed as part of the OVERLAPPED handle.\n         //\n         // Note that we do a somewhat clever thing here by flagging the"}]}