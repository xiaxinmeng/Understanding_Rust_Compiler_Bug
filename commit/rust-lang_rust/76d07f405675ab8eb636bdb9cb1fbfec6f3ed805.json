{"sha": "76d07f405675ab8eb636bdb9cb1fbfec6f3ed805", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZDA3ZjQwNTY3NWFiOGViNjM2YmRiOWNiMWZiZmVjNmYzZWQ4MDU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-15T16:34:57Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-15T23:44:06Z"}, "message": "Remove dynastack support from runtime\n\nIssue #1982", "tree": {"sha": "82ce909be5ff62aa63299ba022fcf500ba41d6b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82ce909be5ff62aa63299ba022fcf500ba41d6b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76d07f405675ab8eb636bdb9cb1fbfec6f3ed805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76d07f405675ab8eb636bdb9cb1fbfec6f3ed805", "html_url": "https://github.com/rust-lang/rust/commit/76d07f405675ab8eb636bdb9cb1fbfec6f3ed805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76d07f405675ab8eb636bdb9cb1fbfec6f3ed805/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "146b61189a5c206d744a09b9336c26e3dc1637c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/146b61189a5c206d744a09b9336c26e3dc1637c4", "html_url": "https://github.com/rust-lang/rust/commit/146b61189a5c206d744a09b9336c26e3dc1637c4"}], "stats": {"total": 369, "additions": 0, "deletions": 369}, "files": [{"sha": "1e079e2f556ffb5d577a722d379fe59e15994089", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76d07f405675ab8eb636bdb9cb1fbfec6f3ed805/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/76d07f405675ab8eb636bdb9cb1fbfec6f3ed805/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=76d07f405675ab8eb636bdb9cb1fbfec6f3ed805", "patch": "@@ -56,7 +56,6 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_srv.cpp \\\n               rt/rust_kernel.cpp \\\n               rt/rust_shape.cpp \\\n-              rt/rust_obstack.cpp \\\n               rt/rust_abi.cpp \\\n               rt/rust_cc.cpp \\\n               rt/rust_debug.cpp \\\n@@ -76,7 +75,6 @@ RUNTIME_HDR_$(1) := rt/globals.h \\\n                rt/rust_internal.h \\\n                rt/rust_util.h \\\n                rt/rust_env.h \\\n-               rt/rust_obstack.h \\\n                rt/rust_unwind.h \\\n                rt/rust_upcall.h \\\n                rt/rust_port.h \\"}, {"sha": "ec12c8f4554338b1a3ae5a5bf64aa7b7650d6e4f", "filename": "src/rt/rust_obstack.cpp", "status": "removed", "additions": 0, "deletions": 195, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_obstack.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_obstack.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_obstack.cpp?ref=146b61189a5c206d744a09b9336c26e3dc1637c4", "patch": "@@ -1,195 +0,0 @@\n-// Object stacks, used in lieu of dynamically-sized frames.\n-\n-#include <algorithm>\n-#include <cassert>\n-#include <cstdlib>\n-#include <iostream>\n-#include <new>\n-#include <stdint.h>\n-\n-#include \"rust_internal.h\"\n-#include \"rust_obstack.h\"\n-#include \"rust_shape.h\"\n-#include \"rust_task.h\"\n-\n-// ISAAC, let go of max()!\n-#ifdef max\n-#undef max\n-#endif\n-\n-#undef DPRINT\n-#define DPRINT(fmt, ...) \n-\n-const size_t DEFAULT_CHUNK_SIZE = 128;\n-const size_t MAX_CHUNK_SIZE = (1024*64);\n-const size_t DEFAULT_ALIGNMENT = 16;\n-\n-// A single type-tagged allocation in a chunk.\n-struct rust_obstack_alloc {\n-    size_t len;\n-    const type_desc *tydesc;\n-    uint32_t pad0;  // FIXME: x86-specific\n-    uint32_t pad1;\n-    uint8_t data[];\n-\n-    rust_obstack_alloc(size_t in_len, const type_desc *in_tydesc)\n-    : len(in_len), tydesc(in_tydesc) {}\n-};\n-\n-void *\n-rust_obstack_chunk::alloc(size_t len, type_desc *tydesc) {\n-    DPRINT(\"alloc(%lu) alen=%lu size=%lu\\n\", len, alen, size);\n-\n-    size_t aligned_alen = align_to(alen, DEFAULT_ALIGNMENT);\n-    size_t end_alen = aligned_alen + sizeof(rust_obstack_alloc) + len;\n-    if (end_alen > size) {\n-        DPRINT(\"Not enough space, len=%lu alen=%lu aligned=%lu end=%lu!\\n\",\n-               len, alen, aligned_alen, end_alen);\n-        return NULL;    // Not enough space.\n-    }\n-\n-    rust_obstack_alloc *a =\n-      new(data + aligned_alen) rust_obstack_alloc(len, tydesc);\n-    memset(a->data, '\\0', len); // FIXME: For GC.\n-    alen = end_alen;\n-    return &a->data;\n-}\n-\n-bool\n-rust_obstack_chunk::free(void *ptr) {\n-    uint8_t *p = (uint8_t *)ptr;\n-    if (p < data || p > data + size)\n-        return false;\n-    assert(p <= data + alen);\n-    alen = (size_t)(p - data);\n-    return true;\n-}\n-\n-void *\n-rust_obstack_chunk::mark() {\n-    uint8_t *m = data + alen;\n-    assert (m >= data && m <= data+size);\n-    return m;\n-}\n-\n-// Allocates the given number of bytes in a new chunk.\n-void *\n-rust_obstack::alloc_new(size_t len, type_desc *tydesc) {\n-    size_t default_chunk_size = DEFAULT_CHUNK_SIZE;\n-    if (chunk) {\n-\tdefault_chunk_size = std::min(chunk->size * 2, MAX_CHUNK_SIZE);\n-    }\n-\n-    size_t chunk_size = std::max(sizeof(rust_obstack_alloc) + len,\n-                                 default_chunk_size);\n-    void *ptr = task->malloc(sizeof(rust_obstack_chunk) + chunk_size,\n-\t\t\t     \"obstack\");\n-    DPRINT(\"making new chunk at %p, len %lu\\n\", ptr, chunk_size);\n-    chunk = new(ptr) rust_obstack_chunk(chunk, chunk_size);\n-    return chunk->alloc(len, tydesc);\n-}\n-\n-rust_obstack::~rust_obstack() {\n-    while (chunk) {\n-        rust_obstack_chunk *prev = chunk->prev;\n-        task->free(chunk);\n-        chunk = prev;\n-    }\n-}\n-\n-void *\n-rust_obstack::alloc(size_t len, type_desc *tydesc) {\n-    if (!chunk)\n-        return alloc_new(len, tydesc);\n-\n-    void *ptr = chunk->alloc(len, tydesc);\n-    ptr = ptr ? ptr : alloc_new(len, tydesc);\n-\n-    return ptr;\n-}\n-\n-void\n-rust_obstack::free(void *ptr) {\n-    if (!ptr)\n-        return;\n-\n-    assert(chunk);\n-    while (!chunk->free(ptr)) {\n-        DPRINT(\"deleting chunk at %p (ptr=%p, data=%p-%p)\\n\",\n-               chunk, ptr,\n-               chunk->data, chunk->data + chunk->size);\n-        rust_obstack_chunk *prev = chunk->prev;\n-        task->free(chunk);\n-        chunk = prev;\n-        assert(chunk);\n-    }\n-}\n-\n-void *\n-rust_obstack::mark() {\n-    void *m = chunk ? chunk->mark() : NULL;\n-    DPRINT(\"mark == %p, chunk == %p, data == %p-%p\\n\", m, chunk,\n-           (chunk ? chunk->data : NULL),\n-           (chunk ? chunk->data + chunk->size : NULL));\n-    return m;\n-}\n-\n-\n-// Iteration over self-describing obstacks\n-\n-std::pair<const type_desc *,void *>\n-rust_obstack::iterator::operator*() const {\n-    return std::make_pair(alloc->tydesc, alloc->data);\n-}\n-\n-rust_obstack::iterator &\n-rust_obstack::iterator::operator++() {\n-    uint8_t *adata = align_to(alloc->data + alloc->len, DEFAULT_ALIGNMENT);\n-    alloc = reinterpret_cast<rust_obstack_alloc *>(adata);\n-    if (reinterpret_cast<uint8_t *>(alloc) >= chunk->data + chunk->alen) {\n-        // We reached the end of this chunk; go on to the next one.\n-        chunk = chunk->prev;\n-        if (chunk)\n-            alloc = reinterpret_cast<rust_obstack_alloc *>(chunk->data);\n-        else\n-            alloc = NULL;\n-    }\n-    return *this;\n-}\n-\n-bool\n-rust_obstack::iterator::operator==(const rust_obstack::iterator &other)\n-        const {\n-    return chunk == other.chunk && alloc == other.alloc;\n-}\n-\n-bool\n-rust_obstack::iterator::operator!=(const rust_obstack::iterator &other)\n-        const {\n-    return !(*this == other);\n-}\n-\n-\n-// Debugging\n-\n-void\n-rust_obstack::dump() const {\n-    iterator b = begin(), e = end();\n-    while (b != e) {\n-        std::pair<const type_desc *,void *> data = *b;\n-        uint8_t *dp = reinterpret_cast<uint8_t *>(data.second);\n-\n-        shape::arena arena;\n-        shape::type_param *params =\n-            shape::type_param::from_tydesc_and_data(data.first, dp, arena);\n-        shape::log log(task, true, data.first->shape, params,\n-                       data.first->shape_tables, dp, std::cerr);\n-        log.walk();\n-        std::cerr << \"\\n\";\n-\n-        ++b;\n-    }\n-\n-    std::cerr << \"end of dynastack dump\\n\";\n-}\n-"}, {"sha": "99d9ba801b4f84255decdd20f70780bfd91e9d30", "filename": "src/rt/rust_obstack.h", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_obstack.h", "raw_url": "https://github.com/rust-lang/rust/raw/146b61189a5c206d744a09b9336c26e3dc1637c4/src%2Frt%2Frust_obstack.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_obstack.h?ref=146b61189a5c206d744a09b9336c26e3dc1637c4", "patch": "@@ -1,75 +0,0 @@\n-// Object stacks, used in lieu of dynamically-sized frames.\n-\n-#ifndef RUST_OBSTACK_H\n-#define RUST_OBSTACK_H\n-\n-#include <utility>\n-\n-struct rust_obstack_alloc;\n-struct rust_task;\n-struct type_desc;\n-\n-// A contiguous set of allocations.\n-struct rust_obstack_chunk {\n-    rust_obstack_chunk *prev;\n-    size_t size;\n-    size_t alen;\n-    size_t pad;\n-    uint8_t data[];\n-\n-    rust_obstack_chunk(rust_obstack_chunk *in_prev, size_t in_size)\n-    : prev(in_prev), size(in_size), alen(0) {}\n-\n-    void *alloc(size_t len, type_desc *tydesc);\n-    bool free(void *ptr);\n-    void *mark();\n-};\n-\n-class rust_obstack {\n-    rust_obstack_chunk *chunk;\n-    rust_task *task;\n-\n-    // Allocates the given number of bytes in a new chunk.\n-    void *alloc_new(size_t len, type_desc *tydesc);\n-\n-public:\n-    class iterator {\n-        rust_obstack_chunk *chunk;\n-        rust_obstack_alloc *alloc;\n-\n-    public:\n-        iterator(rust_obstack_chunk *in_chunk)\n-        : chunk(in_chunk),\n-          alloc(in_chunk\n-                ? reinterpret_cast<rust_obstack_alloc *>(in_chunk->data)\n-                : NULL) {}\n-\n-        std::pair<const type_desc *,void *> operator*() const;\n-        iterator &operator++();\n-        bool operator==(const iterator &other) const;\n-        bool operator!=(const iterator &other) const;\n-    };\n-\n-    rust_obstack(rust_task *in_task) : chunk(NULL), task(in_task) {}\n-    ~rust_obstack();\n-\n-    inline iterator begin() const {\n-        iterator it(chunk);\n-        return it;\n-    }\n-\n-    inline iterator end() const {\n-        iterator it(NULL);\n-        return it;\n-    }\n-\n-    void *alloc(size_t len, type_desc *tydesc);\n-    void free(void *ptr);\n-    void *mark();\n-\n-    /** Debugging tool: dumps the contents of this obstack to stderr. */\n-    void dump() const;\n-};\n-\n-#endif\n-"}, {"sha": "32f1e0eb887d053ba1de85573750852996f59349", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76d07f405675ab8eb636bdb9cb1fbfec6f3ed805/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/76d07f405675ab8eb636bdb9cb1fbfec6f3ed805/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=76d07f405675ab8eb636bdb9cb1fbfec6f3ed805", "patch": "@@ -79,7 +79,6 @@ rust_task::rust_task(rust_task_thread *thread, rust_task_list *state,\n     boxed(&local_region),\n     unwinding(false),\n     propagate_failure(true),\n-    dynastack(this),\n     cc_counter(0),\n     total_stack_sz(0),\n     state(state),"}, {"sha": "eaa28740236144f86624e65de01c4a8d70013481", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76d07f405675ab8eb636bdb9cb1fbfec6f3ed805/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/76d07f405675ab8eb636bdb9cb1fbfec6f3ed805/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=76d07f405675ab8eb636bdb9cb1fbfec6f3ed805", "patch": "@@ -13,7 +13,6 @@\n #include \"rust_debug.h\"\n #include \"rust_internal.h\"\n #include \"rust_kernel.h\"\n-#include \"rust_obstack.h\"\n #include \"boxed_region.h\"\n #include \"rust_stack.h\"\n #include \"rust_port_selector.h\"\n@@ -80,8 +79,6 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n \n     bool propagate_failure;\n \n-    rust_obstack dynastack;\n-\n     uint32_t cc_counter;\n \n     debug::task_debug_info debug;"}, {"sha": "28a8e0a4716c25a9313f4ace66d2193183c170ad", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/76d07f405675ab8eb636bdb9cb1fbfec6f3ed805/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/76d07f405675ab8eb636bdb9cb1fbfec6f3ed805/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=76d07f405675ab8eb636bdb9cb1fbfec6f3ed805", "patch": "@@ -382,95 +382,6 @@ upcall_vec_grow(rust_vec** vp, size_t new_sz) {\n     UPCALL_SWITCH_STACK(&args, upcall_s_vec_grow);\n }\n \n-\n-/**********************************************************************\n- * Returns a token that can be used to deallocate all of the allocated space\n- * space in the dynamic stack.\n- */\n-\n-struct s_dynastack_mark_args {\n-    void *retval;\n-};\n-\n-extern \"C\" CDECL void\n-upcall_s_dynastack_mark(s_dynastack_mark_args *args) {\n-    args->retval = rust_task_thread::get_task()->dynastack.mark();\n-}\n-\n-extern \"C\" CDECL void *\n-upcall_dynastack_mark() {\n-    s_dynastack_mark_args args = {0};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_dynastack_mark);\n-    return args.retval;\n-}\n-\n-/**********************************************************************\n- * Allocates space in the dynamic stack and returns it.\n- *\n- * FIXME: Deprecated since dynamic stacks need to be self-describing for GC.\n- */\n-\n-struct s_dynastack_alloc_args {\n-    void *retval;\n-    size_t sz;\n-};\n-\n-extern \"C\" CDECL void\n-upcall_s_dynastack_alloc(s_dynastack_alloc_args *args) {\n-    size_t sz = args->sz;\n-    args->retval = sz ?\n-        rust_task_thread::get_task()->dynastack.alloc(sz, NULL) : NULL;\n-}\n-\n-extern \"C\" CDECL void *\n-upcall_dynastack_alloc(size_t sz) {\n-    s_dynastack_alloc_args args = {0, sz};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_dynastack_alloc);\n-    return args.retval;\n-}\n-\n-/**********************************************************************\n- * Allocates space associated with a type descriptor in the dynamic stack and\n- * returns it.\n- */\n-\n-struct s_dynastack_alloc_2_args {\n-    void *retval;\n-    size_t sz;\n-    type_desc *ty;\n-};\n-\n-extern \"C\" CDECL void\n-upcall_s_dynastack_alloc_2(s_dynastack_alloc_2_args *args) {\n-    size_t sz = args->sz;\n-    type_desc *ty = args->ty;\n-    args->retval = sz ?\n-        rust_task_thread::get_task()->dynastack.alloc(sz, ty) : NULL;\n-}\n-\n-extern \"C\" CDECL void *\n-upcall_dynastack_alloc_2(size_t sz, type_desc *ty) {\n-    s_dynastack_alloc_2_args args = {0, sz, ty};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_dynastack_alloc_2);\n-    return args.retval;\n-}\n-\n-struct s_dynastack_free_args {\n-    void *ptr;\n-};\n-\n-extern \"C\" CDECL void\n-upcall_s_dynastack_free(s_dynastack_free_args *args) {\n-    return rust_task_thread::get_task()->dynastack.free(args->ptr);\n-}\n-\n-/** Frees space in the dynamic stack. */\n-extern \"C\" CDECL void\n-upcall_dynastack_free(void *ptr) {\n-    s_dynastack_free_args args = {ptr};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_dynastack_free);\n-}\n-\n extern \"C\" _Unwind_Reason_Code\n __gxx_personality_v0(int version,\n                      _Unwind_Action actions,"}, {"sha": "67542eb93dd26838c1cfbb9a590b241b5d1b2a79", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76d07f405675ab8eb636bdb9cb1fbfec6f3ed805/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/76d07f405675ab8eb636bdb9cb1fbfec6f3ed805/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=76d07f405675ab8eb636bdb9cb1fbfec6f3ed805", "patch": "@@ -56,10 +56,6 @@ str_reserve_shared\n vec_from_buf_shared\n unsupervise\n upcall_cmp_type\n-upcall_dynastack_alloc\n-upcall_dynastack_alloc_2\n-upcall_dynastack_free\n-upcall_dynastack_mark\n upcall_fail\n upcall_free\n upcall_validate_box"}]}