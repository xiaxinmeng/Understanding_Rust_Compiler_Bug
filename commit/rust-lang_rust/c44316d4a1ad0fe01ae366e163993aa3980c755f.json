{"sha": "c44316d4a1ad0fe01ae366e163993aa3980c755f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NDMxNmQ0YTFhZDBmZTAxYWUzNjZlMTYzOTkzYWEzOTgwYzc1NWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-26T08:27:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-26T08:27:59Z"}, "message": "Auto merge of #29303 - petrochenkov:unistrimp, r=eddyb\n\nAnd use `VariantData` instead of `P<VariantData>` in `Item_` and `Variant_`\r\n\r\nImprovements suggested by @eddyb in https://github.com/rust-lang/rust/pull/28816#discussion_r42483587 and https://github.com/rust-lang/rust/pull/28816#discussion_r42483648\r\n\r\nplugin-[breaking-change]\r\n\r\nr? @eddyb", "tree": {"sha": "9cb9fddfc6ea9f431222ea9a4e8ea9b54e6e9f8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cb9fddfc6ea9f431222ea9a4e8ea9b54e6e9f8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c44316d4a1ad0fe01ae366e163993aa3980c755f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c44316d4a1ad0fe01ae366e163993aa3980c755f", "html_url": "https://github.com/rust-lang/rust/commit/c44316d4a1ad0fe01ae366e163993aa3980c755f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c44316d4a1ad0fe01ae366e163993aa3980c755f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72ed590f8b2210fccd26489d2237310cc2db2603", "url": "https://api.github.com/repos/rust-lang/rust/commits/72ed590f8b2210fccd26489d2237310cc2db2603", "html_url": "https://github.com/rust-lang/rust/commit/72ed590f8b2210fccd26489d2237310cc2db2603"}, {"sha": "e8ddbba2ed356df4f5ef8f0742b810a4ecf82a50", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ddbba2ed356df4f5ef8f0742b810a4ecf82a50", "html_url": "https://github.com/rust-lang/rust/commit/e8ddbba2ed356df4f5ef8f0742b810a4ecf82a50"}], "stats": {"total": 214, "additions": 90, "deletions": 124}, "files": [{"sha": "458e423b826d0849fd0b3ad86c0290cd01cc2a6d", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -152,7 +152,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                 // If this is a tuple-like struct, register the constructor.\n                 if !struct_def.is_struct() {\n                     self.insert_def(struct_def.id(),\n-                                    NodeStructCtor(&**struct_def),\n+                                    NodeStructCtor(struct_def),\n                                     DefPathData::StructCtor);\n                 }\n "}, {"sha": "8c995ca29235cc699ecedb544ce9ac8ded76dceb", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n                         _: &hir::Generics, _: ast::NodeId, _: codemap::Span) {\n         let has_extern_repr = self.struct_has_extern_repr;\n         let inherited_pub_visibility = self.inherited_pub_visibility;\n-        let live_fields = def.fields().filter(|f| {\n+        let live_fields = def.fields().iter().filter(|f| {\n             has_extern_repr || inherited_pub_visibility || match f.node.kind {\n                 hir::NamedField(_, hir::Public) => true,\n                 _ => false"}, {"sha": "c1bcba1830f6485c61a634b4d6dced03a973ef9f", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -223,8 +223,8 @@ pub trait Folder : Sized {\n         noop_fold_poly_trait_ref(p, self)\n     }\n \n-    fn fold_variant_data(&mut self, struct_def: P<VariantData>) -> P<VariantData> {\n-        noop_fold_struct_def(struct_def, self)\n+    fn fold_variant_data(&mut self, vdata: VariantData) -> VariantData {\n+        noop_fold_variant_data(vdata, self)\n     }\n \n     fn fold_lifetimes(&mut self, lts: Vec<Lifetime>) -> Vec<Lifetime> {\n@@ -693,18 +693,16 @@ pub fn noop_fold_where_predicate<T: Folder>(pred: WherePredicate, fld: &mut T) -\n     }\n }\n \n-pub fn noop_fold_struct_def<T: Folder>(struct_def: P<VariantData>, fld: &mut T) -> P<VariantData> {\n-    struct_def.map(|vdata| {\n-        match vdata {\n-            VariantData::Struct(fields, id) => {\n-                VariantData::Struct(fields.move_map(|f| fld.fold_struct_field(f)), fld.new_id(id))\n-            }\n-            VariantData::Tuple(fields, id) => {\n-                VariantData::Tuple(fields.move_map(|f| fld.fold_struct_field(f)), fld.new_id(id))\n-            }\n-            VariantData::Unit(id) => VariantData::Unit(fld.new_id(id))\n+pub fn noop_fold_variant_data<T: Folder>(vdata: VariantData, fld: &mut T) -> VariantData {\n+    match vdata {\n+        VariantData::Struct(fields, id) => {\n+            VariantData::Struct(fields.move_map(|f| fld.fold_struct_field(f)), fld.new_id(id))\n         }\n-    })\n+        VariantData::Tuple(fields, id) => {\n+            VariantData::Tuple(fields.move_map(|f| fld.fold_struct_field(f)), fld.new_id(id))\n+        }\n+        VariantData::Unit(id) => VariantData::Unit(fld.new_id(id))\n+    }\n }\n \n pub fn noop_fold_trait_ref<T: Folder>(p: TraitRef, fld: &mut T) -> TraitRef {"}, {"sha": "079bf677c8ea6e984532d4e5b764ba0e23a89844", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -49,7 +49,6 @@ use print::pprust;\n use util;\n \n use std::fmt;\n-use std::{iter, option, slice};\n use serialize::{Encodable, Encoder, Decoder};\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n@@ -1024,7 +1023,7 @@ pub struct EnumDef {\n pub struct Variant_ {\n     pub name: Name,\n     pub attrs: Vec<Attribute>,\n-    pub data: P<VariantData>,\n+    pub data: VariantData,\n     /// Explicit discriminant, eg `Foo = 1`\n     pub disr_expr: Option<P<Expr>>,\n }\n@@ -1179,17 +1178,12 @@ pub enum VariantData {\n     Unit(NodeId),\n }\n \n-pub type FieldIter<'a> = iter::FlatMap<option::IntoIter<&'a Vec<StructField>>,\n-                                       slice::Iter<'a, StructField>,\n-                                       fn(&Vec<StructField>) -> slice::Iter<StructField>>;\n-\n impl VariantData {\n-    pub fn fields(&self) -> FieldIter {\n-        fn vec_iter<T>(v: &Vec<T>) -> slice::Iter<T> { v.iter() }\n+    pub fn fields(&self) -> &[StructField] {\n         match *self {\n-            VariantData::Struct(ref fields, _) | VariantData::Tuple(ref fields, _) => Some(fields),\n-            _ => None,\n-        }.into_iter().flat_map(vec_iter)\n+            VariantData::Struct(ref fields, _) | VariantData::Tuple(ref fields, _) => fields,\n+            _ => &[],\n+        }\n     }\n     pub fn id(&self) -> NodeId {\n         match *self {\n@@ -1248,7 +1242,7 @@ pub enum Item_ {\n     /// An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`\n     ItemEnum(EnumDef, Generics),\n     /// A struct definition, e.g. `struct Foo<A> {x: A}`\n-    ItemStruct(P<VariantData>, Generics),\n+    ItemStruct(VariantData, Generics),\n     /// Represents a Trait Declaration\n     ItemTrait(Unsafety, Generics, TyParamBounds, Vec<P<TraitItem>>),\n "}, {"sha": "42b84b392f37525b4009a115a79f29da113c22b2", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -266,7 +266,7 @@ pub fn lower_variant(_lctx: &LoweringContext, v: &Variant) -> P<hir::Variant> {\n         node: hir::Variant_ {\n             name: v.node.name.name,\n             attrs: v.node.attrs.clone(),\n-            data: lower_struct_def(_lctx, &v.node.data),\n+            data: lower_variant_data(_lctx, &v.node.data),\n             disr_expr: v.node.disr_expr.as_ref().map(|e| lower_expr(_lctx, e)),\n         },\n         span: v.span,\n@@ -498,8 +498,8 @@ pub fn lower_where_predicate(_lctx: &LoweringContext,\n     }\n }\n \n-pub fn lower_struct_def(_lctx: &LoweringContext, sd: &VariantData) -> P<hir::VariantData> {\n-    P(match *sd {\n+pub fn lower_variant_data(_lctx: &LoweringContext, vdata: &VariantData) -> hir::VariantData {\n+    match *vdata {\n         VariantData::Struct(ref fields, id) => {\n             hir::VariantData::Struct(fields.iter()\n                                            .map(|f| lower_struct_field(_lctx, f)).collect(), id)\n@@ -509,7 +509,7 @@ pub fn lower_struct_def(_lctx: &LoweringContext, sd: &VariantData) -> P<hir::Var\n                                           .map(|f| lower_struct_field(_lctx, f)).collect(), id)\n         }\n         VariantData::Unit(id) => hir::VariantData::Unit(id)\n-    })\n+    }\n }\n \n pub fn lower_trait_ref(_lctx: &LoweringContext, p: &TraitRef) -> hir::TraitRef {\n@@ -611,7 +611,7 @@ pub fn lower_item_underscore(_lctx: &LoweringContext, i: &Item_) -> hir::Item_ {\n                           lower_generics(_lctx, generics))\n         }\n         ItemStruct(ref struct_def, ref generics) => {\n-            let struct_def = lower_struct_def(_lctx, struct_def);\n+            let struct_def = lower_variant_data(_lctx, struct_def);\n             hir::ItemStruct(struct_def, lower_generics(_lctx, generics))\n         }\n         ItemDefaultImpl(unsafety, ref trait_ref) => {"}, {"sha": "a3a4bede379e9c739c3aa690ac4e1256a237706d", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -734,7 +734,7 @@ impl<'a> State<'a> {\n             }\n             hir::ItemStruct(ref struct_def, ref generics) => {\n                 try!(self.head(&visibility_qualified(item.vis, \"struct\")));\n-                try!(self.print_struct(&**struct_def, generics, item.name, item.span, true));\n+                try!(self.print_struct(struct_def, generics, item.name, item.span, true));\n             }\n \n             hir::ItemDefaultImpl(unsafety, ref trait_ref) => {\n@@ -899,7 +899,7 @@ impl<'a> State<'a> {\n         if !struct_def.is_struct() {\n             if struct_def.is_tuple() {\n                 try!(self.popen());\n-                try!(self.commasep_iter(Inconsistent,\n+                try!(self.commasep(Inconsistent,\n                                    struct_def.fields(),\n                                    |s, field| {\n                                        match field.node.kind {"}, {"sha": "a004a068be4e3e03d5f0a35d95c3cf0762cd265f", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -1114,7 +1114,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            hir::ItemStruct(ref def, _) => check_struct(&**def),\n+            hir::ItemStruct(ref def, _) => check_struct(def),\n \n             hir::ItemEnum(..) |\n             hir::ItemExternCrate(_) | hir::ItemUse(_) |"}, {"sha": "1fdffa38b5b1eb5cfe360e359460455118e18b35", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -514,7 +514,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 }\n \n                 // Record the def ID and fields of this struct.\n-                let named_fields = struct_def.fields().filter_map(|f| {\n+                let named_fields = struct_def.fields().iter().filter_map(|f| {\n                     match f.node.kind {\n                         NamedField(name, _) => Some(name),\n                         UnnamedField(_) => None"}, {"sha": "f6f504e27aefcdf22c8c8bc4678440c61485a601", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -918,7 +918,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                 self.process_static_or_const_item(item, typ, expr),\n             ast::ItemConst(ref typ, ref expr) =>\n                 self.process_static_or_const_item(item, &typ, &expr),\n-            ast::ItemStruct(ref def, ref ty_params) => self.process_struct(item, &**def, ty_params),\n+            ast::ItemStruct(ref def, ref ty_params) => self.process_struct(item, def, ty_params),\n             ast::ItemEnum(ref def, ref ty_params) => self.process_enum(item, def, ty_params),\n             ast::ItemImpl(_, _,\n                           ref ty_params,"}, {"sha": "14fea610fcf92b202aab2c972f96e7c3c6a9a9cc", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -2435,7 +2435,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n             } else {\n                 v.node.data.fields()\n             };\n-            assert!(fields.count() != 0);\n+            assert!(!fields.is_empty());\n             let ty = ccx.tcx().node_id_to_type(id);\n             let parent = ccx.tcx().map.get_parent(id);\n             let enm = ccx.tcx().map.expect_item(parent);"}, {"sha": "e41b4de7ba1fd657f9b9c855676d60586b204011", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -103,7 +103,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             }\n             hir::ItemStruct(ref struct_def, ref ast_generics) => {\n                 self.check_type_defn(item, |fcx| {\n-                    vec![struct_variant(fcx, &**struct_def)]\n+                    vec![struct_variant(fcx, struct_def)]\n                 });\n \n                 self.check_variances_for_type_defn(item, ast_generics);\n@@ -627,7 +627,7 @@ fn struct_variant<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                             struct_def: &hir::VariantData)\n                             -> AdtVariant<'tcx> {\n     let fields =\n-        struct_def.fields()\n+        struct_def.fields().iter()\n         .map(|field| {\n             let field_ty = fcx.tcx().node_id_to_type(field.node.id);\n             let field_ty = fcx.instantiate_type_scheme(field.span,"}, {"sha": "ab091472d2ca3957d5a87e564deca8d52478fc46", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -112,7 +112,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             }\n             hir::ItemStruct(ref struct_def, ref ast_generics) => {\n                 self.check_type_defn(item, |fcx| {\n-                    vec![struct_variant(fcx, &**struct_def)]\n+                    vec![struct_variant(fcx, struct_def)]\n                 });\n \n                 self.check_variances_for_type_defn(item, ast_generics);\n@@ -524,7 +524,7 @@ fn struct_variant<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                             struct_def: &hir::VariantData)\n                             -> AdtVariant<'tcx> {\n     let fields =\n-        struct_def.fields()\n+        struct_def.fields().iter()\n         .map(|field| {\n             let field_ty = fcx.tcx().node_id_to_type(field.node.id);\n             let field_ty = fcx.instantiate_type_scheme(field.span,"}, {"sha": "c096070785c28f82e5efc90b980007ed86c321c3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -1010,7 +1010,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n             let it_def_id = ccx.tcx.map.local_def_id(it.id);\n             let variant = tcx.lookup_adt_def_master(it_def_id).struct_variant();\n \n-            for (f, ty_f) in struct_def.fields().zip(variant.fields.iter()) {\n+            for (f, ty_f) in struct_def.fields().iter().zip(variant.fields.iter()) {\n                 convert_field(ccx, &scheme.generics, &predicates, f, ty_f)\n             }\n \n@@ -1067,7 +1067,7 @@ fn convert_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                         variants: &[P<hir::Variant>]) {\n     // fill the field types\n     for (variant, ty_variant) in variants.iter().zip(def.variants.iter()) {\n-        for (f, ty_f) in variant.node.data.fields().zip(ty_variant.fields.iter()) {\n+        for (f, ty_f) in variant.node.data.fields().iter().zip(ty_variant.fields.iter()) {\n             convert_field(ccx, &scheme.generics, &predicates, f, ty_f)\n         }\n \n@@ -1089,7 +1089,7 @@ fn convert_struct_variant<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                 disr_val: ty::Disr,\n                                 def: &hir::VariantData) -> ty::VariantDefData<'tcx, 'tcx> {\n     let mut seen_fields: FnvHashMap<ast::Name, Span> = FnvHashMap();\n-    let fields = def.fields().map(|f| {\n+    let fields = def.fields().iter().map(|f| {\n         let fid = tcx.map.local_def_id(f.node.id);\n         match f.node.kind {\n             hir::NamedField(name, vis) => {"}, {"sha": "75144ff27b0a732ad669b2d66e2750abeb9d6a7d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -1809,7 +1809,7 @@ impl Clean<VariantStruct> for ::rustc_front::hir::VariantData {\n     fn clean(&self, cx: &DocContext) -> VariantStruct {\n         VariantStruct {\n             struct_type: doctree::struct_type_from_def(self),\n-            fields: self.fields().map(|x| x.clean(cx)).collect(),\n+            fields: self.fields().iter().map(|x| x.clean(cx)).collect(),\n             fields_stripped: false,\n         }\n     }\n@@ -1923,7 +1923,7 @@ fn struct_def_to_variant_kind(struct_def: &hir::VariantData, cx: &DocContext) ->\n     } else if struct_def.is_unit() {\n         CLikeVariant\n     } else {\n-        TupleVariant(struct_def.fields().map(|x| x.node.ty.clean(cx)).collect())\n+        TupleVariant(struct_def.fields().iter().map(|x| x.node.ty.clean(cx)).collect())\n     }\n }\n "}, {"sha": "9550109fe9ff8279558b067ddcd4650f10c8927a", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -119,7 +119,7 @@ pub struct Enum {\n pub struct Variant {\n     pub name: Name,\n     pub attrs: Vec<ast::Attribute>,\n-    pub def: P<hir::VariantData>,\n+    pub def: hir::VariantData,\n     pub stab: Option<attr::Stability>,\n     pub whence: Span,\n }\n@@ -236,7 +236,7 @@ pub struct Import {\n pub fn struct_type_from_def(sd: &hir::VariantData) -> StructType {\n     if !sd.is_struct() {\n         // We are in a tuple-struct\n-        match sd.fields().count() {\n+        match sd.fields().len() {\n             0 => Unit,\n             1 => Newtype,\n             _ => Tuple"}, {"sha": "b6c93bf00af5fa1f8255a9d9fa2a3fe95485f159", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             stab: self.stability(item.id),\n             attrs: item.attrs.clone(),\n             generics: generics.clone(),\n-            fields: sd.fields().cloned().collect(),\n+            fields: sd.fields().iter().cloned().collect(),\n             whence: item.span\n         }\n     }\n@@ -298,7 +298,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             hir::ItemEnum(ref ed, ref gen) =>\n                 om.enums.push(self.visit_enum_def(item, name, ed, gen)),\n             hir::ItemStruct(ref sd, ref gen) =>\n-                om.structs.push(self.visit_variant_data(item, name, &**sd, gen)),\n+                om.structs.push(self.visit_variant_data(item, name, sd, gen)),\n             hir::ItemFn(ref fd, ref unsafety, constness, ref abi, ref gen, _) =>\n                 om.fns.push(self.visit_fn(item, name, &**fd, unsafety,\n                                           constness, abi, gen)),"}, {"sha": "7b3c33d53a390971af4c8d6ae6b622436574f882", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -65,7 +65,6 @@ use std::fmt;\n use std::rc::Rc;\n use std::borrow::Cow;\n use std::hash::{Hash, Hasher};\n-use std::{iter, option, slice};\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n /// A name is a part of an identifier, representing a string or gensym. It's\n@@ -1578,7 +1577,7 @@ pub struct EnumDef {\n pub struct Variant_ {\n     pub name: Ident,\n     pub attrs: Vec<Attribute>,\n-    pub data: P<VariantData>,\n+    pub data: VariantData,\n     /// Explicit discriminant, eg `Foo = 1`\n     pub disr_expr: Option<P<Expr>>,\n }\n@@ -1757,17 +1756,12 @@ pub enum VariantData {\n     Unit(NodeId),\n }\n \n-pub type FieldIter<'a> = iter::FlatMap<option::IntoIter<&'a Vec<StructField>>,\n-                                       slice::Iter<'a, StructField>,\n-                                       fn(&Vec<StructField>) -> slice::Iter<StructField>>;\n-\n impl VariantData {\n-    pub fn fields(&self) -> FieldIter {\n-        fn vec_iter<T>(v: &Vec<T>) -> slice::Iter<T> { v.iter() }\n+    pub fn fields(&self) -> &[StructField] {\n         match *self {\n-            VariantData::Struct(ref fields, _) | VariantData::Tuple(ref fields, _) => Some(fields),\n-            _ => None,\n-        }.into_iter().flat_map(vec_iter)\n+            VariantData::Struct(ref fields, _) | VariantData::Tuple(ref fields, _) => fields,\n+            _ => &[],\n+        }\n     }\n     pub fn id(&self) -> NodeId {\n         match *self {\n@@ -1826,7 +1820,7 @@ pub enum Item_ {\n     /// An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`\n     ItemEnum(EnumDef, Generics),\n     /// A struct definition, e.g. `struct Foo<A> {x: A}`\n-    ItemStruct(P<VariantData>, Generics),\n+    ItemStruct(VariantData, Generics),\n     /// Represents a Trait Declaration\n     ItemTrait(Unsafety,\n               Generics,"}, {"sha": "aa674bdbcf3a4d6db4c184abd462b9c7de532eef", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -164,24 +164,22 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n     fold::noop_fold_item_underscore(item, cx)\n }\n \n-fn fold_struct<F>(cx: &mut Context<F>, def: P<ast::VariantData>) -> P<ast::VariantData> where\n+fn fold_struct<F>(cx: &mut Context<F>, vdata: ast::VariantData) -> ast::VariantData where\n     F: FnMut(&[ast::Attribute]) -> bool\n {\n-    def.map(|vdata| {\n-        match vdata {\n-            ast::VariantData::Struct(fields, id) => {\n-                ast::VariantData::Struct(fields.into_iter().filter(|m| {\n-                    (cx.in_cfg)(&m.node.attrs)\n-                }).collect(), id)\n-            }\n-            ast::VariantData::Tuple(fields, id) => {\n-                ast::VariantData::Tuple(fields.into_iter().filter(|m| {\n-                    (cx.in_cfg)(&m.node.attrs)\n-                }).collect(), id)\n-            }\n-            ast::VariantData::Unit(id) => ast::VariantData::Unit(id)\n+    match vdata {\n+        ast::VariantData::Struct(fields, id) => {\n+            ast::VariantData::Struct(fields.into_iter().filter(|m| {\n+                (cx.in_cfg)(&m.node.attrs)\n+            }).collect(), id)\n         }\n-    })\n+        ast::VariantData::Tuple(fields, id) => {\n+            ast::VariantData::Tuple(fields.into_iter().filter(|m| {\n+                (cx.in_cfg)(&m.node.attrs)\n+            }).collect(), id)\n+        }\n+        ast::VariantData::Unit(id) => ast::VariantData::Unit(id)\n+    }\n }\n \n fn retain_stmt<F>(cx: &mut Context<F>, stmt: &ast::Stmt) -> bool where"}, {"sha": "16a5eb05c4b5f780f083535cc798af1202e6d0e9", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -1012,7 +1012,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                ast::Variant_ {\n                    name: name,\n                    attrs: Vec::new(),\n-                   data: P(vdata),\n+                   data: vdata,\n                    disr_expr: None,\n                })\n     }\n@@ -1041,7 +1041,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn item_struct_poly(&self, span: Span, name: Ident,\n         struct_def: ast::VariantData, generics: Generics) -> P<ast::Item> {\n-        self.item(span, name, Vec::new(), ast::ItemStruct(P(struct_def), generics))\n+        self.item(span, name, Vec::new(), ast::ItemStruct(struct_def, generics))\n     }\n \n     fn item_mod(&self, span: Span, inner_span: Span, name: Ident,"}, {"sha": "5c6e2fce8adcea845f8ddb607608648c9b622476", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -652,7 +652,7 @@ impl<'a> TraitDef<'a> {\n                          struct_def: &'a VariantData,\n                          type_ident: Ident,\n                          generics: &Generics) -> P<ast::Item> {\n-        let field_tys: Vec<P<ast::Ty>> = struct_def.fields()\n+        let field_tys: Vec<P<ast::Ty>> = struct_def.fields().iter()\n             .map(|field| field.node.ty.clone())\n             .collect();\n \n@@ -700,7 +700,7 @@ impl<'a> TraitDef<'a> {\n         let mut field_tys = Vec::new();\n \n         for variant in &enum_def.variants {\n-            field_tys.extend(variant.node.data.fields()\n+            field_tys.extend(variant.node.data.fields().iter()\n                 .map(|field| field.node.ty.clone()));\n         }\n \n@@ -1483,15 +1483,15 @@ impl<'a> TraitDef<'a> {\n                              -> (P<ast::Pat>, Vec<(Span, Option<Ident>,\n                                                    P<Expr>,\n                                                    &'a [ast::Attribute])>) {\n-        if struct_def.fields().count() == 0 {\n+        if struct_def.fields().is_empty() {\n             return (cx.pat_enum(self.span, struct_path, vec![]), vec![]);\n         }\n \n         let mut paths = Vec::new();\n         let mut ident_expr = Vec::new();\n         let mut struct_type = Unknown;\n \n-        for (i, struct_field) in struct_def.fields().enumerate() {\n+        for (i, struct_field) in struct_def.fields().iter().enumerate() {\n             let sp = self.set_expn_info(cx, struct_field.span);\n             let opt_id = match struct_field.node.kind {\n                 ast::NamedField(ident, _) if (struct_type == Unknown ||"}, {"sha": "a0c089aff217225ad7d8664057322d27b1b1a083", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -859,7 +859,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n \n     fn visit_variant_data(&mut self, s: &'v ast::VariantData, _: ast::Ident,\n                         _: &'v ast::Generics, _: ast::NodeId, span: Span) {\n-        if s.fields().count() == 0 {\n+        if s.fields().is_empty() {\n             if s.is_struct() {\n                 self.gate_feature(\"braced_empty_structs\", span,\n                                   \"empty structs and enum variants with braces are unstable\");"}, {"sha": "be910285db356f65b9a67dade99d481b7c6616b3", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -231,8 +231,8 @@ pub trait Folder : Sized {\n         noop_fold_poly_trait_ref(p, self)\n     }\n \n-    fn fold_variant_data(&mut self, struct_def: P<VariantData>) -> P<VariantData> {\n-        noop_fold_struct_def(struct_def, self)\n+    fn fold_variant_data(&mut self, vdata: VariantData) -> VariantData {\n+        noop_fold_variant_data(vdata, self)\n     }\n \n     fn fold_lifetimes(&mut self, lts: Vec<Lifetime>) -> Vec<Lifetime> {\n@@ -814,20 +814,18 @@ pub fn noop_fold_where_predicate<T: Folder>(\n     }\n }\n \n-pub fn noop_fold_struct_def<T: Folder>(struct_def: P<VariantData>, fld: &mut T) -> P<VariantData> {\n-    struct_def.map(|vdata| {\n-        match vdata {\n-            ast::VariantData::Struct(fields, id) => {\n-                ast::VariantData::Struct(fields.move_map(|f| fld.fold_struct_field(f)),\n-                                         fld.new_id(id))\n-            }\n-            ast::VariantData::Tuple(fields, id) => {\n-                ast::VariantData::Tuple(fields.move_map(|f| fld.fold_struct_field(f)),\n-                                        fld.new_id(id))\n-            }\n-            ast::VariantData::Unit(id) => ast::VariantData::Unit(fld.new_id(id))\n+pub fn noop_fold_variant_data<T: Folder>(vdata: VariantData, fld: &mut T) -> VariantData {\n+    match vdata {\n+        ast::VariantData::Struct(fields, id) => {\n+            ast::VariantData::Struct(fields.move_map(|f| fld.fold_struct_field(f)),\n+                                     fld.new_id(id))\n         }\n-    })\n+        ast::VariantData::Tuple(fields, id) => {\n+            ast::VariantData::Tuple(fields.move_map(|f| fld.fold_struct_field(f)),\n+                                    fld.new_id(id))\n+        }\n+        ast::VariantData::Unit(id) => ast::VariantData::Unit(fld.new_id(id))\n+    }\n }\n \n pub fn noop_fold_trait_ref<T: Folder>(p: TraitRef, fld: &mut T) -> TraitRef {"}, {"sha": "4259812692059c30902d04738bb558b0b616eb31", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -4678,9 +4678,7 @@ impl<'a> Parser<'a> {\n                                             name, found `{}`\", token_str)))\n         };\n \n-        Ok((class_name,\n-            ItemStruct(P(vdata), generics),\n-            None))\n+        Ok((class_name, ItemStruct(vdata, generics), None))\n     }\n \n     pub fn parse_record_struct_body(&mut self) -> PResult<Vec<StructField>> {\n@@ -5111,14 +5109,14 @@ impl<'a> Parser<'a> {\n \n     /// Parse a structure-like enum variant definition\n     /// this should probably be renamed or refactored...\n-    fn parse_struct_def(&mut self) -> PResult<P<VariantData>> {\n+    fn parse_struct_def(&mut self) -> PResult<VariantData> {\n         let mut fields: Vec<StructField> = Vec::new();\n         while self.token != token::CloseDelim(token::Brace) {\n             fields.push(try!(self.parse_struct_decl_field(false)));\n         }\n         try!(self.bump());\n \n-        Ok(P(VariantData::Struct(fields, ast::DUMMY_NODE_ID)))\n+        Ok(VariantData::Struct(fields, ast::DUMMY_NODE_ID))\n     }\n \n     /// Parse the part of an \"enum\" decl following the '{'\n@@ -5154,13 +5152,13 @@ impl<'a> Parser<'a> {\n                         id: ast::DUMMY_NODE_ID,\n                     }});\n                 }\n-                struct_def = P(ast::VariantData::Tuple(fields, ast::DUMMY_NODE_ID));\n+                struct_def = ast::VariantData::Tuple(fields, ast::DUMMY_NODE_ID);\n             } else if try!(self.eat(&token::Eq) ){\n                 disr_expr = Some(try!(self.parse_expr_nopanic()));\n                 any_disr = disr_expr.as_ref().map(|expr| expr.span);\n-                struct_def = P(ast::VariantData::Unit(ast::DUMMY_NODE_ID));\n+                struct_def = ast::VariantData::Unit(ast::DUMMY_NODE_ID);\n             } else {\n-                struct_def = P(ast::VariantData::Unit(ast::DUMMY_NODE_ID));\n+                struct_def = ast::VariantData::Unit(ast::DUMMY_NODE_ID);\n             }\n \n             let vr = ast::Variant_ {"}, {"sha": "397293f61cafb2f94d713f677698cd4ab1e4944a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44316d4a1ad0fe01ae366e163993aa3980c755f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c44316d4a1ad0fe01ae366e163993aa3980c755f", "patch": "@@ -520,19 +520,6 @@ pub trait PrintState<'a> {\n         self.end()\n     }\n \n-    fn commasep_iter<'it, T: 'it, F, I>(&mut self, b: Breaks, elts: I, mut op: F) -> io::Result<()>\n-        where F: FnMut(&mut Self, &T) -> io::Result<()>,\n-              I: Iterator<Item=&'it T>,\n-    {\n-        try!(self.rbox(0, b));\n-        let mut first = true;\n-        for elt in elts {\n-            if first { first = false; } else { try!(self.word_space(\",\")); }\n-            try!(op(self, elt));\n-        }\n-        self.end()\n-    }\n-\n     fn next_lit(&mut self, pos: BytePos) -> Option<comments::Literal> {\n         let mut cur_lit = self.cur_cmnt_and_lit().cur_lit;\n \n@@ -1407,7 +1394,7 @@ impl<'a> State<'a> {\n         if !struct_def.is_struct() {\n             if struct_def.is_tuple() {\n                 try!(self.popen());\n-                try!(self.commasep_iter(\n+                try!(self.commasep(\n                     Inconsistent, struct_def.fields(),\n                     |s, field| {\n                         match field.node.kind {\n@@ -3104,7 +3091,6 @@ mod tests {\n     use ast_util;\n     use codemap;\n     use parse::token;\n-    use ptr::P;\n \n     #[test]\n     fn test_fun_to_string() {\n@@ -3131,7 +3117,7 @@ mod tests {\n             name: ident,\n             attrs: Vec::new(),\n             // making this up as I go.... ?\n-            data: P(ast::VariantData::Unit(ast::DUMMY_NODE_ID)),\n+            data: ast::VariantData::Unit(ast::DUMMY_NODE_ID),\n             disr_expr: None,\n         });\n "}]}