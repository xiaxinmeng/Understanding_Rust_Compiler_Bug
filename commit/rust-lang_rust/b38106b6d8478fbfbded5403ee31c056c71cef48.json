{"sha": "b38106b6d8478fbfbded5403ee31c056c71cef48", "node_id": "C_kwDOAAsO6NoAKGIzODEwNmI2ZDg0NzhmYmZiZGVkNTQwM2VlMzFjMDU2YzcxY2VmNDg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-17T04:22:30Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-29T05:42:13Z"}, "message": "Replace `rustc_data_structures::thin_vec::ThinVec` with `thin_vec::ThinVec`.\n\n`rustc_data_structures::thin_vec::ThinVec` looks like this:\n```\npub struct ThinVec<T>(Option<Box<Vec<T>>>);\n```\nIt's just a zero word if the vector is empty, but requires two\nallocations if it is non-empty. So it's only usable in cases where the\nvector is empty most of the time.\n\nThis commit removes it in favour of `thin_vec::ThinVec`, which is also\nword-sized, but stores the length and capacity in the same allocation as\nthe elements. It's good in a wider variety of situation, e.g. in enum\nvariants where the vector is usually/always non-empty.\n\nThe commit also:\n- Sorts some `Cargo.toml` dependency lists, to make additions easier.\n- Sorts some `use` item lists, to make additions easier.\n- Changes `clean_trait_ref_with_bindings` to take a\n  `ThinVec<TypeBinding>` rather than a `&[TypeBinding]`, because this\n  avoid some unnecessary allocations.", "tree": {"sha": "f5ba97063be433b2d8c8099f7312853a24ac8fb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5ba97063be433b2d8c8099f7312853a24ac8fb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b38106b6d8478fbfbded5403ee31c056c71cef48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b38106b6d8478fbfbded5403ee31c056c71cef48", "html_url": "https://github.com/rust-lang/rust/commit/b38106b6d8478fbfbded5403ee31c056c71cef48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b38106b6d8478fbfbded5403ee31c056c71cef48/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "223d16ebbde1bd309c58e853b053e14318e56b0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/223d16ebbde1bd309c58e853b053e14318e56b0e", "html_url": "https://github.com/rust-lang/rust/commit/223d16ebbde1bd309c58e853b053e14318e56b0e"}], "stats": {"total": 520, "additions": 164, "deletions": 356}, "files": [{"sha": "f7d66e1c465dd533ef6ac284a2da16cf178bac5b", "filename": "Cargo.lock", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -3207,6 +3207,7 @@ dependencies = [\n  \"rustc_serialize\",\n  \"rustc_span\",\n  \"smallvec\",\n+ \"thin-vec\",\n  \"tracing\",\n ]\n \n@@ -3228,6 +3229,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"smallvec\",\n+ \"thin-vec\",\n  \"tracing\",\n ]\n \n@@ -3322,6 +3324,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"smallvec\",\n+ \"thin-vec\",\n  \"tracing\",\n ]\n \n@@ -3446,6 +3449,7 @@ dependencies = [\n  \"stable_deref_trait\",\n  \"stacker\",\n  \"tempfile\",\n+ \"thin-vec\",\n  \"tracing\",\n  \"winapi\",\n ]\n@@ -3827,6 +3831,7 @@ dependencies = [\n  \"rustc_target\",\n  \"rustc_type_ir\",\n  \"smallvec\",\n+ \"thin-vec\",\n  \"tracing\",\n ]\n \n@@ -4014,6 +4019,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n+ \"thin-vec\",\n  \"tracing\",\n ]\n \n@@ -4036,6 +4042,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"smallvec\",\n+ \"thin-vec\",\n  \"tracing\",\n ]\n \n@@ -4091,6 +4098,7 @@ dependencies = [\n  \"indexmap\",\n  \"rustc_macros\",\n  \"smallvec\",\n+ \"thin-vec\",\n ]\n \n [[package]]\n@@ -4325,6 +4333,7 @@ dependencies = [\n  \"serde_json\",\n  \"smallvec\",\n  \"tempfile\",\n+ \"thin-vec\",\n  \"tracing\",\n  \"tracing-subscriber\",\n  \"tracing-tree\",\n@@ -4878,6 +4887,12 @@ version = \"0.15.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"b1141d4d61095b28419e22cb0bbf02755f5e54e0526f97f1e3d1d160e60885fb\"\n \n+[[package]]\n+name = \"thin-vec\"\n+version = \"0.2.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"104c2cb3180b6fb6d5b2278768e9b88b578d32ba751ea6e8d026688a40d7ed87\"\n+\n [[package]]\n name = \"thiserror\"\n version = \"1.0.30\""}, {"sha": "c24180bacfc1b05207ebfbc0b7ccbfd06a558678", "filename": "compiler/rustc_ast/Cargo.toml", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_ast%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_ast%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2FCargo.toml?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -7,12 +7,13 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n-rustc_serialize = { path = \"../rustc_serialize\" }\n-tracing = \"0.1\"\n-rustc_span = { path = \"../rustc_span\" }\n+bitflags = \"1.2.1\"\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_macros = { path = \"../rustc_macros\" }\n+rustc_serialize = { path = \"../rustc_serialize\" }\n+rustc_span = { path = \"../rustc_span\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n-bitflags = \"1.2.1\"\n+thin-vec = \"0.2.8\"\n+tracing = \"0.1\""}, {"sha": "3af6dee9e43f7fb888e6d5f5a95c1babc17b33a4", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -25,21 +25,19 @@ pub use UnsafeSource::*;\n use crate::ptr::P;\n use crate::token::{self, CommentKind, Delimiter};\n use crate::tokenstream::{DelimSpan, LazyTokenStream, TokenStream};\n-\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_data_structures::sync::Lrc;\n-use rustc_data_structures::thin_vec::ThinVec;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-\n use std::cmp::Ordering;\n use std::convert::TryFrom;\n use std::fmt;\n use std::mem;\n+use thin_vec::ThinVec;\n \n /// A \"Label\" is an identifier of some point in sources,\n /// e.g. in the following code:"}, {"sha": "3964e615d66e667f49fe7d760667f044e5c3e0c1", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -426,7 +426,8 @@ impl TokenStream {\n         let attr_annotated = if attrs.is_empty() {\n             tokens.create_token_stream()\n         } else {\n-            let attr_data = AttributesData { attrs: attrs.to_vec().into(), tokens: tokens.clone() };\n+            let attr_data =\n+                AttributesData { attrs: attrs.iter().cloned().collect(), tokens: tokens.clone() };\n             AttrAnnotatedTokenStream::new(vec![(\n                 AttrAnnotatedTokenTree::Attributes(attr_data),\n                 Spacing::Alone,"}, {"sha": "ce1c8d4997d745b3c4760649db7786ef48bfccef", "filename": "compiler/rustc_ast_lowering/Cargo.toml", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_ast_lowering%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_ast_lowering%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2FCargo.toml?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -8,17 +8,18 @@ doctest = false\n \n [dependencies]\n rustc_arena = { path = \"../rustc_arena\" }\n-tracing = \"0.1\"\n+rustc_ast = { path = \"../rustc_ast\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n-rustc_hir = { path = \"../rustc_hir\" }\n-rustc_target = { path = \"../rustc_target\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_errors = { path = \"../rustc_errors\" }\n+rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_query_system = { path = \"../rustc_query_system\" }\n-rustc_span = { path = \"../rustc_span\" }\n-rustc_errors = { path = \"../rustc_errors\" }\n rustc_session = { path = \"../rustc_session\" }\n-rustc_ast = { path = \"../rustc_ast\" }\n+rustc_span = { path = \"../rustc_span\" }\n+rustc_target = { path = \"../rustc_target\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n+thin-vec = \"0.2.8\"\n+tracing = \"0.1\""}, {"sha": "e4a36f4d9ff931d1c8ae9f48553ce3ab02eaba3e", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -7,7 +7,6 @@ use super::errors::{\n use super::ResolverAstLoweringExt;\n use super::{ImplTraitContext, LoweringContext, ParamMode, ParenthesizedGenericArgs};\n use crate::{FnDeclKind, ImplTraitPosition};\n-\n use rustc_ast::attr;\n use rustc_ast::ptr::P as AstP;\n use rustc_ast::*;\n@@ -18,6 +17,7 @@ use rustc_hir::definitions::DefPathData;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::DUMMY_SP;\n+use thin_vec::thin_vec;\n \n impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_exprs(&mut self, exprs: &[AstP<Expr>]) -> &'hir [hir::Expr<'hir>] {\n@@ -1535,7 +1535,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             };\n             attr::mk_attr_outer(allow)\n         };\n-        let attrs: AttrVec = vec![attr].into();\n+        let attrs: AttrVec = thin_vec![attr];\n \n         // `ControlFlow::Continue(val) => #[allow(unreachable_code)] val,`\n         let continue_arm = {"}, {"sha": "6469d0d7b88a68440c2b27735de6aede13a93f39", "filename": "compiler/rustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2FCargo.toml?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -7,20 +7,21 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n-rustc_parse_format = { path = \"../rustc_parse_format\" }\n-tracing = \"0.1\"\n+rustc_ast = { path = \"../rustc_ast\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n+rustc_expand = { path = \"../rustc_expand\" }\n rustc_feature = { path = \"../rustc_feature\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n rustc_macros = { path = \"../rustc_macros\" }\n+rustc_parse_format = { path = \"../rustc_parse_format\" }\n rustc_parse = { path = \"../rustc_parse\" }\n-rustc_target = { path = \"../rustc_target\" }\n rustc_session = { path = \"../rustc_session\" }\n-smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n-rustc_ast = { path = \"../rustc_ast\" }\n-rustc_expand = { path = \"../rustc_expand\" }\n rustc_span = { path = \"../rustc_span\" }\n+rustc_target = { path = \"../rustc_target\" }\n+smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n+thin-vec = \"0.2.8\"\n+tracing = \"0.1\""}, {"sha": "973a8cb85c2b9c12b652f8f60e81cda603377550", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -13,6 +13,7 @@ use rustc_span::{\n     symbol::{sym, Ident, Symbol},\n     Span,\n };\n+use thin_vec::thin_vec;\n \n pub(super) struct Context<'cx, 'a> {\n     // An optimization.\n@@ -116,11 +117,10 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             self.cx.item(\n                 self.span,\n                 Ident::empty(),\n-                vec![self.cx.attribute(attr::mk_list_item(\n+                thin_vec![self.cx.attribute(attr::mk_list_item(\n                     Ident::new(sym::allow, self.span),\n                     vec![attr::mk_nested_word_item(Ident::new(sym::unused_imports, self.span))],\n-                ))]\n-                .into(),\n+                ))],\n                 ItemKind::Use(UseTree {\n                     prefix: self.cx.path(self.span, self.cx.std_path(&[sym::asserting])),\n                     kind: UseTreeKind::Nested(vec!["}, {"sha": "c7f2d95e72f0c45e817a06b5e149ecdd0f1ec1cf", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -1,12 +1,12 @@\n use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::path_std;\n-\n use rustc_ast::{self as ast, Generics, ItemKind, MetaItem, VariantData};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n+use thin_vec::thin_vec;\n \n pub fn expand_deriving_clone(\n     cx: &mut ExtCtxt<'_>,\n@@ -68,7 +68,7 @@ pub fn expand_deriving_clone(\n     }\n \n     let inline = cx.meta_word(span, sym::inline);\n-    let attrs = vec![cx.attribute(inline)].into();\n+    let attrs = thin_vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(clone::Clone),"}, {"sha": "5b556c5c9b9d1848c25193dcc1ecb64d0010c0a8", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -7,6 +7,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n+use thin_vec::thin_vec;\n \n pub fn expand_deriving_eq(\n     cx: &mut ExtCtxt<'_>,\n@@ -20,7 +21,7 @@ pub fn expand_deriving_eq(\n     let hidden = rustc_ast::attr::mk_nested_word_item(Ident::new(sym::hidden, span));\n     let doc = rustc_ast::attr::mk_list_item(Ident::new(sym::doc, span), vec![hidden]);\n     let no_coverage = cx.meta_word(span, sym::no_coverage);\n-    let attrs = vec![cx.attribute(inline), cx.attribute(doc), cx.attribute(no_coverage)].into();\n+    let attrs = thin_vec![cx.attribute(inline), cx.attribute(doc), cx.attribute(no_coverage)];\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::Eq),"}, {"sha": "72625869558119ec908051a5e21ca8d9e718c574", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -1,11 +1,11 @@\n use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::path_std;\n-\n use rustc_ast::MetaItem;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n+use thin_vec::thin_vec;\n \n pub fn expand_deriving_ord(\n     cx: &mut ExtCtxt<'_>,\n@@ -15,7 +15,7 @@ pub fn expand_deriving_ord(\n     push: &mut dyn FnMut(Annotatable),\n ) {\n     let inline = cx.meta_word(span, sym::inline);\n-    let attrs = vec![cx.attribute(inline)].into();\n+    let attrs = thin_vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::Ord),"}, {"sha": "42ee65b570a2a95a2fff7ee0f6ffe794661673ae", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -1,12 +1,12 @@\n use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::{path_local, path_std};\n-\n use rustc_ast::ptr::P;\n use rustc_ast::{BinOpKind, BorrowKind, Expr, ExprKind, MetaItem, Mutability};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n+use thin_vec::thin_vec;\n \n pub fn expand_deriving_partial_eq(\n     cx: &mut ExtCtxt<'_>,\n@@ -68,7 +68,7 @@ pub fn expand_deriving_partial_eq(\n     // No need to generate `ne`, the default suffices, and not generating it is\n     // faster.\n     let inline = cx.meta_word(span, sym::inline);\n-    let attrs = vec![cx.attribute(inline)].into();\n+    let attrs = thin_vec![cx.attribute(inline)];\n     let methods = vec![MethodDef {\n         name: sym::eq,\n         generics: Bounds::empty(),"}, {"sha": "516892aeda96f9da303e693e041542bf6ab8916b", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -1,11 +1,11 @@\n use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::{path_std, pathvec_std};\n-\n use rustc_ast::MetaItem;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n+use thin_vec::thin_vec;\n \n pub fn expand_deriving_partial_ord(\n     cx: &mut ExtCtxt<'_>,\n@@ -19,7 +19,7 @@ pub fn expand_deriving_partial_ord(\n         Path(Path::new_(pathvec_std!(option::Option), vec![Box::new(ordering_ty)], PathKind::Std));\n \n     let inline = cx.meta_word(span, sym::inline);\n-    let attrs = vec![cx.attribute(inline)].into();\n+    let attrs = thin_vec![cx.attribute(inline)];\n \n     let partial_cmp_def = MethodDef {\n         name: sym::partial_cmp,"}, {"sha": "a94c8a996e6423fbf1151ace70f135a89f6cd6f0", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -1,6 +1,5 @@\n use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n-\n use rustc_ast as ast;\n use rustc_ast::{walk_list, EnumDef, VariantData};\n use rustc_errors::Applicability;\n@@ -9,6 +8,7 @@ use rustc_span::symbol::Ident;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use smallvec::SmallVec;\n+use thin_vec::thin_vec;\n \n pub fn expand_deriving_default(\n     cx: &mut ExtCtxt<'_>,\n@@ -20,7 +20,7 @@ pub fn expand_deriving_default(\n     item.visit_with(&mut DetectNonVariantDefaultAttr { cx });\n \n     let inline = cx.meta_word(span, sym::inline);\n-    let attrs = vec![cx.attribute(inline)].into();\n+    let attrs = thin_vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n         span,\n         path: Path::new(vec![kw::Default, sym::Default]),"}, {"sha": "a7917bf2ead1ce0b85f43153ea460f2f6d3c0e8d", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -162,22 +162,20 @@\n pub use StaticFields::*;\n pub use SubstructureFields::*;\n \n-use std::cell::RefCell;\n-use std::iter;\n-use std::vec;\n-\n+use crate::deriving;\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, EnumDef, Expr, Generics, PatKind};\n use rustc_ast::{GenericArg, GenericParamKind, VariantData};\n use rustc_attr as attr;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n-\n+use std::cell::RefCell;\n+use std::iter;\n+use std::vec;\n+use thin_vec::thin_vec;\n use ty::{Bounds, Path, Ref, Self_, Ty};\n \n-use crate::deriving;\n-\n pub mod ty;\n \n pub struct TraitDef<'a> {\n@@ -716,7 +714,7 @@ impl<'a> TraitDef<'a> {\n         let self_type = cx.ty_path(path);\n \n         let attr = cx.attribute(cx.meta_word(self.span, sym::automatically_derived));\n-        let attrs = vec![attr].into();\n+        let attrs = thin_vec![attr];\n         let opt_trait_ref = Some(trait_ref);\n \n         cx.item("}, {"sha": "45b9b8ab6b6410e0034793b06f8f77cfc4888504", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -9,6 +9,7 @@ use rustc_ast::{Fn, ItemKind, Mutability, Stmt, Ty, TyKind, Unsafe};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n+use thin_vec::thin_vec;\n \n pub fn expand(\n     ecx: &mut ExtCtxt<'_>,\n@@ -116,7 +117,7 @@ impl AllocFnFactory<'_, '_> {\n     fn attrs(&self) -> AttrVec {\n         let special = sym::rustc_std_internal_symbol;\n         let special = self.cx.meta_word(self.span, special);\n-        vec![self.cx.attribute(special)].into()\n+        thin_vec![self.cx.attribute(special)]\n     }\n \n     fn arg_ty("}, {"sha": "49ef538f04e14ab83ffe4ed173e5646b7ca40d30", "filename": "compiler/rustc_builtin_macros/src/standard_library_imports.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -6,6 +6,7 @@ use rustc_span::edition::Edition::*;\n use rustc_span::hygiene::AstPass;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n+use thin_vec::thin_vec;\n \n pub fn inject(\n     mut krate: ast::Crate,\n@@ -51,7 +52,7 @@ pub fn inject(\n             cx.item(\n                 span,\n                 ident,\n-                vec![cx.attribute(cx.meta_word(span, sym::macro_use))].into(),\n+                thin_vec![cx.attribute(cx.meta_word(span, sym::macro_use))],\n                 ast::ItemKind::ExternCrate(None),\n             ),\n         );\n@@ -78,7 +79,7 @@ pub fn inject(\n     let use_item = cx.item(\n         span,\n         Ident::empty(),\n-        vec![cx.attribute(cx.meta_word(span, sym::prelude_import))].into(),\n+        thin_vec![cx.attribute(cx.meta_word(span, sym::prelude_import))],\n         ast::ItemKind::Use(ast::UseTree {\n             prefix: cx.path(span, import_path),\n             kind: ast::UseTreeKind::Glob,"}, {"sha": "7eee80733666cf56e1657c6612ce31495032b9b4", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -1,7 +1,6 @@\n /// The expansion from a test function to the appropriate test struct for libtest\n /// Ideally, this code would be in libtest but for efficiency and error messages it lives here.\n use crate::util::{check_builtin_macro_attribute, warn_on_duplicate_attribute};\n-\n use rustc_ast as ast;\n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n@@ -11,8 +10,8 @@ use rustc_expand::base::*;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n-\n use std::iter;\n+use thin_vec::thin_vec;\n \n // #[test_case] is used by custom test authors to mark tests\n // When building for test, it needs to make the item public and gensym the name\n@@ -219,16 +218,15 @@ pub fn expand_test_or_bench(\n     let mut test_const = cx.item(\n         sp,\n         Ident::new(item.ident.name, sp),\n-        vec![\n+        thin_vec![\n             // #[cfg(test)]\n             cx.attribute(attr::mk_list_item(\n                 Ident::new(sym::cfg, attr_sp),\n                 vec![attr::mk_nested_word_item(Ident::new(sym::test, attr_sp))],\n             )),\n             // #[rustc_test_marker]\n             cx.attribute(cx.meta_word(attr_sp, sym::rustc_test_marker)),\n-        ]\n-        .into(),\n+        ],\n         // const $ident: test::TestDescAndFn =\n         ast::ItemKind::Const(\n             ast::Defaultness::Final,"}, {"sha": "89b0d2cc9be2eed8df75ae903645553f5dfcf1b2", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -14,6 +14,7 @@ use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::PanicStrategy;\n use smallvec::{smallvec, SmallVec};\n+use thin_vec::thin_vec;\n use tracing::debug;\n \n use std::{iter, mem};\n@@ -335,7 +336,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n \n     let main = P(ast::Item {\n         ident: main_id,\n-        attrs: vec![main_attr].into(),\n+        attrs: thin_vec![main_attr],\n         id: ast::DUMMY_NODE_ID,\n         kind: main,\n         vis: ast::Visibility { span: sp, kind: ast::VisibilityKind::Public, tokens: None },"}, {"sha": "2d8658db5e6aacb45eed5283d42b1c67d148b41d", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -8,25 +8,26 @@ doctest = false\n \n [dependencies]\n arrayvec = { version = \"0.7\", default-features = false }\n+bitflags = \"1.2.1\"\n+cfg-if = \"0.1.2\"\n ena = \"0.14\"\n indexmap = { version = \"1.9.1\" }\n-tracing = \"0.1\"\n jobserver_crate = { version = \"0.1.13\", package = \"jobserver\" }\n-rustc_serialize = { path = \"../rustc_serialize\" }\n-rustc_macros = { path = \"../rustc_macros\" }\n-rustc_graphviz = { path = \"../rustc_graphviz\" }\n-cfg-if = \"0.1.2\"\n-stable_deref_trait = \"1.0.0\"\n-rayon = { version = \"0.4.0\", package = \"rustc-rayon\", optional = true }\n+libc = \"0.2\"\n+measureme = \"10.0.0\"\n rayon-core = { version = \"0.4.0\", package = \"rustc-rayon-core\", optional = true }\n+rayon = { version = \"0.4.0\", package = \"rustc-rayon\", optional = true }\n+rustc_graphviz = { path = \"../rustc_graphviz\" }\n rustc-hash = \"1.1.0\"\n-smallvec = { version = \"1.8.1\", features = [\"const_generics\", \"union\", \"may_dangle\"] }\n rustc_index = { path = \"../rustc_index\", package = \"rustc_index\" }\n-bitflags = \"1.2.1\"\n-measureme = \"10.0.0\"\n-libc = \"0.2\"\n+rustc_macros = { path = \"../rustc_macros\" }\n+rustc_serialize = { path = \"../rustc_serialize\" }\n+smallvec = { version = \"1.8.1\", features = [\"const_generics\", \"union\", \"may_dangle\"] }\n+stable_deref_trait = \"1.0.0\"\n stacker = \"0.1.14\"\n tempfile = \"3.2\"\n+thin-vec = \"0.2.8\"\n+tracing = \"0.1\"\n \n [dependencies.parking_lot]\n version = \"0.11\""}, {"sha": "a7429ed008fb8d1d496c0b4f6e58ac5b96579c46", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -75,7 +75,6 @@ pub mod profiling;\n pub mod sharded;\n pub mod stack;\n pub mod sync;\n-pub mod thin_vec;\n pub mod tiny_list;\n pub mod transitive_relation;\n pub mod vec_linked_list;"}, {"sha": "a0d4b7ade1f33385e751e48b4379fa9323183f1c", "filename": "compiler/rustc_data_structures/src/map_in_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_data_structures%2Fsrc%2Fmap_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_data_structures%2Fsrc%2Fmap_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fmap_in_place.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -1,6 +1,6 @@\n-use crate::thin_vec::ThinVec;\n use smallvec::{Array, SmallVec};\n use std::ptr;\n+use thin_vec::ThinVec;\n \n pub trait MapInPlace<T>: Sized {\n     fn map_in_place<F>(&mut self, mut f: F)"}, {"sha": "fce42e709ab74cfefcf6d81ebff7d2ddc164ea32", "filename": "compiler/rustc_data_structures/src/thin_vec.rs", "status": "removed", "additions": 0, "deletions": 180, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/223d16ebbde1bd309c58e853b053e14318e56b0e/compiler%2Frustc_data_structures%2Fsrc%2Fthin_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223d16ebbde1bd309c58e853b053e14318e56b0e/compiler%2Frustc_data_structures%2Fsrc%2Fthin_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fthin_vec.rs?ref=223d16ebbde1bd309c58e853b053e14318e56b0e", "patch": "@@ -1,180 +0,0 @@\n-use crate::stable_hasher::{HashStable, StableHasher};\n-\n-use std::iter::FromIterator;\n-\n-/// A vector type optimized for cases where this size is usually 0 (cf. `SmallVec`).\n-/// The `Option<Box<..>>` wrapping allows us to represent a zero sized vector with `None`,\n-/// which uses only a single (null) pointer.\n-#[derive(Clone, Encodable, Decodable, Debug, Hash, Eq, PartialEq)]\n-pub struct ThinVec<T>(Option<Box<Vec<T>>>);\n-\n-impl<T> ThinVec<T> {\n-    pub fn new() -> Self {\n-        ThinVec(None)\n-    }\n-\n-    pub fn iter(&self) -> std::slice::Iter<'_, T> {\n-        self.into_iter()\n-    }\n-\n-    pub fn iter_mut(&mut self) -> std::slice::IterMut<'_, T> {\n-        self.into_iter()\n-    }\n-\n-    pub fn push(&mut self, item: T) {\n-        match *self {\n-            ThinVec(Some(ref mut vec)) => vec.push(item),\n-            ThinVec(None) => *self = vec![item].into(),\n-        }\n-    }\n-\n-    /// Note: if `set_len(0)` is called on a non-empty `ThinVec`, it will\n-    /// remain in the `Some` form. This is required for some code sequences\n-    /// (such as the one in `flat_map_in_place`) that call `set_len(0)` before\n-    /// an operation that might panic, and then call `set_len(n)` again\n-    /// afterwards.\n-    pub unsafe fn set_len(&mut self, new_len: usize) {\n-        match *self {\n-            ThinVec(None) => {\n-                // A prerequisite of `Vec::set_len` is that `new_len` must be\n-                // less than or equal to capacity(). The same applies here.\n-                if new_len != 0 {\n-                    panic!(\"unsafe ThinVec::set_len({})\", new_len);\n-                }\n-            }\n-            ThinVec(Some(ref mut vec)) => vec.set_len(new_len),\n-        }\n-    }\n-\n-    pub fn insert(&mut self, index: usize, value: T) {\n-        match *self {\n-            ThinVec(None) => {\n-                if index == 0 {\n-                    *self = vec![value].into();\n-                } else {\n-                    panic!(\"invalid ThinVec::insert\");\n-                }\n-            }\n-            ThinVec(Some(ref mut vec)) => vec.insert(index, value),\n-        }\n-    }\n-\n-    pub fn remove(&mut self, index: usize) -> T {\n-        match self {\n-            ThinVec(None) => panic!(\"invalid ThinVec::remove\"),\n-            ThinVec(Some(vec)) => vec.remove(index),\n-        }\n-    }\n-\n-    pub fn as_slice(&self) -> &[T] {\n-        match self {\n-            ThinVec(None) => &[],\n-            ThinVec(Some(vec)) => vec.as_slice(),\n-        }\n-    }\n-}\n-\n-impl<T> From<Vec<T>> for ThinVec<T> {\n-    fn from(vec: Vec<T>) -> Self {\n-        if vec.is_empty() { ThinVec(None) } else { ThinVec(Some(Box::new(vec))) }\n-    }\n-}\n-\n-impl<T> Into<Vec<T>> for ThinVec<T> {\n-    fn into(self) -> Vec<T> {\n-        match self {\n-            ThinVec(None) => Vec::new(),\n-            ThinVec(Some(vec)) => *vec,\n-        }\n-    }\n-}\n-\n-impl<T> ::std::ops::Deref for ThinVec<T> {\n-    type Target = [T];\n-    fn deref(&self) -> &[T] {\n-        match *self {\n-            ThinVec(None) => &[],\n-            ThinVec(Some(ref vec)) => vec,\n-        }\n-    }\n-}\n-\n-impl<T> ::std::ops::DerefMut for ThinVec<T> {\n-    fn deref_mut(&mut self) -> &mut [T] {\n-        match *self {\n-            ThinVec(None) => &mut [],\n-            ThinVec(Some(ref mut vec)) => vec,\n-        }\n-    }\n-}\n-\n-impl<T> FromIterator<T> for ThinVec<T> {\n-    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {\n-        // `Vec::from_iter()` should not allocate if the iterator is empty.\n-        let vec: Vec<_> = iter.into_iter().collect();\n-        if vec.is_empty() { ThinVec(None) } else { ThinVec(Some(Box::new(vec))) }\n-    }\n-}\n-\n-impl<T> IntoIterator for ThinVec<T> {\n-    type Item = T;\n-    type IntoIter = std::vec::IntoIter<T>;\n-\n-    fn into_iter(self) -> Self::IntoIter {\n-        // This is still performant because `Vec::new()` does not allocate.\n-        self.0.map_or_else(Vec::new, |ptr| *ptr).into_iter()\n-    }\n-}\n-\n-impl<'a, T> IntoIterator for &'a ThinVec<T> {\n-    type Item = &'a T;\n-    type IntoIter = std::slice::Iter<'a, T>;\n-\n-    fn into_iter(self) -> Self::IntoIter {\n-        self.as_ref().iter()\n-    }\n-}\n-\n-impl<'a, T> IntoIterator for &'a mut ThinVec<T> {\n-    type Item = &'a mut T;\n-    type IntoIter = std::slice::IterMut<'a, T>;\n-\n-    fn into_iter(self) -> Self::IntoIter {\n-        self.as_mut().iter_mut()\n-    }\n-}\n-\n-impl<T> Extend<T> for ThinVec<T> {\n-    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n-        match *self {\n-            ThinVec(Some(ref mut vec)) => vec.extend(iter),\n-            ThinVec(None) => *self = iter.into_iter().collect::<Vec<_>>().into(),\n-        }\n-    }\n-\n-    fn extend_one(&mut self, item: T) {\n-        self.push(item)\n-    }\n-\n-    fn extend_reserve(&mut self, additional: usize) {\n-        match *self {\n-            ThinVec(Some(ref mut vec)) => vec.reserve(additional),\n-            ThinVec(None) => *self = Vec::with_capacity(additional).into(),\n-        }\n-    }\n-}\n-\n-impl<T: HashStable<CTX>, CTX> HashStable<CTX> for ThinVec<T> {\n-    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n-        (**self).hash_stable(hcx, hasher)\n-    }\n-}\n-\n-impl<T> Default for ThinVec<T> {\n-    fn default() -> Self {\n-        Self(None)\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests;"}, {"sha": "0221b9912bbdcdc0af0f8a291a84ce4dba8a9bde", "filename": "compiler/rustc_data_structures/src/thin_vec/tests.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/223d16ebbde1bd309c58e853b053e14318e56b0e/compiler%2Frustc_data_structures%2Fsrc%2Fthin_vec%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223d16ebbde1bd309c58e853b053e14318e56b0e/compiler%2Frustc_data_structures%2Fsrc%2Fthin_vec%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fthin_vec%2Ftests.rs?ref=223d16ebbde1bd309c58e853b053e14318e56b0e", "patch": "@@ -1,42 +0,0 @@\n-use super::*;\n-\n-impl<T> ThinVec<T> {\n-    fn into_vec(self) -> Vec<T> {\n-        self.into()\n-    }\n-}\n-\n-#[test]\n-fn test_from_iterator() {\n-    assert_eq!(std::iter::empty().collect::<ThinVec<String>>().into_vec(), Vec::<String>::new());\n-    assert_eq!(std::iter::once(42).collect::<ThinVec<_>>().into_vec(), vec![42]);\n-    assert_eq!([1, 2].into_iter().collect::<ThinVec<_>>().into_vec(), vec![1, 2]);\n-    assert_eq!([1, 2, 3].into_iter().collect::<ThinVec<_>>().into_vec(), vec![1, 2, 3]);\n-}\n-\n-#[test]\n-fn test_into_iterator_owned() {\n-    assert_eq!(ThinVec::new().into_iter().collect::<Vec<String>>(), Vec::<String>::new());\n-    assert_eq!(ThinVec::from(vec![1]).into_iter().collect::<Vec<_>>(), vec![1]);\n-    assert_eq!(ThinVec::from(vec![1, 2]).into_iter().collect::<Vec<_>>(), vec![1, 2]);\n-    assert_eq!(ThinVec::from(vec![1, 2, 3]).into_iter().collect::<Vec<_>>(), vec![1, 2, 3]);\n-}\n-\n-#[test]\n-fn test_into_iterator_ref() {\n-    assert_eq!(ThinVec::new().iter().collect::<Vec<&String>>(), Vec::<&String>::new());\n-    assert_eq!(ThinVec::from(vec![1]).iter().collect::<Vec<_>>(), vec![&1]);\n-    assert_eq!(ThinVec::from(vec![1, 2]).iter().collect::<Vec<_>>(), vec![&1, &2]);\n-    assert_eq!(ThinVec::from(vec![1, 2, 3]).iter().collect::<Vec<_>>(), vec![&1, &2, &3]);\n-}\n-\n-#[test]\n-fn test_into_iterator_ref_mut() {\n-    assert_eq!(ThinVec::new().iter_mut().collect::<Vec<&mut String>>(), Vec::<&mut String>::new());\n-    assert_eq!(ThinVec::from(vec![1]).iter_mut().collect::<Vec<_>>(), vec![&mut 1]);\n-    assert_eq!(ThinVec::from(vec![1, 2]).iter_mut().collect::<Vec<_>>(), vec![&mut 1, &mut 2]);\n-    assert_eq!(\n-        ThinVec::from(vec![1, 2, 3]).iter_mut().collect::<Vec<_>>(),\n-        vec![&mut 1, &mut 2, &mut 3],\n-    );\n-}"}, {"sha": "cca17a4eccd3afc52243554f13277b9006f8fd44", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -7,34 +7,35 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n-rustc_arena = { path = \"../rustc_arena\" }\n bitflags = \"1.2.1\"\n+chalk-ir = \"0.80.0\"\n either = \"1.5.0\"\n gsgdt = \"0.1.2\"\n-tracing = \"0.1\"\n-rustc-rayon = { version = \"0.4.0\", optional = true }\n-rustc-rayon-core = { version = \"0.4.0\", optional = true }\n polonius-engine = \"0.13.0\"\n+rand = \"0.8.4\"\n+rand_xoshiro = \"0.6.0\"\n rustc_apfloat = { path = \"../rustc_apfloat\" }\n+rustc_arena = { path = \"../rustc_arena\" }\n+rustc_ast = { path = \"../rustc_ast\" }\n rustc_attr = { path = \"../rustc_attr\" }\n-rustc_feature = { path = \"../rustc_feature\" }\n-rustc_hir = { path = \"../rustc_hir\" }\n-rustc_target = { path = \"../rustc_target\" }\n-rustc_macros = { path = \"../rustc_macros\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n-rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_errors = { path = \"../rustc_errors\" }\n+rustc_feature = { path = \"../rustc_feature\" }\n rustc_graphviz = { path = \"../rustc_graphviz\" }\n+rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n+rustc_macros = { path = \"../rustc_macros\" }\n+rustc_query_system = { path = \"../rustc_query_system\" }\n+rustc-rayon-core = { version = \"0.4.0\", optional = true }\n+rustc-rayon = { version = \"0.4.0\", optional = true }\n rustc_serialize = { path = \"../rustc_serialize\" }\n-rustc_ast = { path = \"../rustc_ast\" }\n-rustc_span = { path = \"../rustc_span\" }\n-chalk-ir = \"0.80.0\"\n-smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n rustc_session = { path = \"../rustc_session\" }\n+rustc_span = { path = \"../rustc_span\" }\n+rustc_target = { path = \"../rustc_target\" }\n rustc_type_ir = { path = \"../rustc_type_ir\" }\n-rand = \"0.8.4\"\n-rand_xoshiro = \"0.6.0\"\n+smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n+thin-vec = \"0.2.8\"\n+tracing = \"0.1\"\n \n [features]\n rustc_use_parallel_compiler = [\"rustc-rayon\", \"rustc-rayon-core\"]"}, {"sha": "ba14f9f0203706c41f8e6d21857707e98da348db", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -1829,9 +1829,9 @@ pub mod tls {\n     use crate::dep_graph::TaskDepsRef;\n     use crate::ty::query;\n     use rustc_data_structures::sync::{self, Lock};\n-    use rustc_data_structures::thin_vec::ThinVec;\n     use rustc_errors::Diagnostic;\n     use std::mem;\n+    use thin_vec::ThinVec;\n \n     #[cfg(not(parallel_compiler))]\n     use std::cell::Cell;"}, {"sha": "d6a32d888bdbde563fb67339abde8778f4fcfe68", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -355,7 +355,7 @@ impl<'a> Parser<'a> {\n             && matches!(self.capture_state.capturing, Capturing::Yes)\n             && has_cfg_or_cfg_attr(final_attrs)\n         {\n-            let attr_data = AttributesData { attrs: final_attrs.to_vec().into(), tokens };\n+            let attr_data = AttributesData { attrs: final_attrs.iter().cloned().collect(), tokens };\n \n             // Replace the entire AST node that we just parsed, including attributes,\n             // with a `FlatToken::AttrTarget`. If this AST node is inside an item"}, {"sha": "e7f12caaf33e523d03598df61ada434300698815", "filename": "compiler/rustc_query_impl/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_query_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_query_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2FCargo.toml?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -8,7 +8,6 @@ doctest = false\n \n [dependencies]\n measureme = \"10.0.0\"\n-rustc-rayon-core = { version = \"0.4.0\", optional = true }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n@@ -17,10 +16,12 @@ rustc_index = { path = \"../rustc_index\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_query_system = { path = \"../rustc_query_system\" }\n+rustc-rayon-core = { version = \"0.4.0\", optional = true }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }\n+thin-vec = \"0.2.8\"\n tracing = \"0.1\"\n \n [features]"}, {"sha": "f38f29e14afd4c4fba99299f62117620e6805906", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -4,6 +4,9 @@\n \n use crate::keys::Key;\n use crate::{on_disk_cache, Queries};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::sync::Lock;\n+use rustc_errors::{Diagnostic, Handler};\n use rustc_middle::dep_graph::{self, DepKind, DepNodeIndex, SerializedDepNodeIndex};\n use rustc_middle::ty::tls::{self, ImplicitCtxt};\n use rustc_middle::ty::{self, TyCtxt};\n@@ -12,14 +15,9 @@ use rustc_query_system::ich::StableHashingContext;\n use rustc_query_system::query::{\n     QueryContext, QueryJobId, QueryMap, QuerySideEffects, QueryStackFrame,\n };\n-\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_data_structures::sync::Lock;\n-use rustc_data_structures::thin_vec::ThinVec;\n-use rustc_errors::{Diagnostic, Handler};\n-\n use std::any::Any;\n use std::num::NonZeroU64;\n+use thin_vec::ThinVec;\n \n #[derive(Copy, Clone)]\n pub struct QueryCtxt<'tcx> {"}, {"sha": "bafc6b0a082334826d40a6c0aa9980b05b91c3e7", "filename": "compiler/rustc_query_system/Cargo.toml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_query_system%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_query_system%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2FCargo.toml?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -7,22 +7,23 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n+parking_lot = \"0.11\"\n rustc_arena = { path = \"../rustc_arena\" }\n-tracing = \"0.1\"\n-rustc-rayon-core = { version = \"0.4.0\", optional = true }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_feature = { path = \"../rustc_feature\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_macros = { path = \"../rustc_macros\" }\n+rustc-rayon-core = { version = \"0.4.0\", optional = true }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }\n-parking_lot = \"0.11\"\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n+thin-vec = \"0.2.8\"\n+tracing = \"0.1\"\n \n [features]\n rustc_use_parallel_compiler = [\"rustc-rayon-core\"]"}, {"sha": "51b4a2f35e296ec0152100f75cd72a5d4633ede8", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -15,12 +15,11 @@ mod config;\n pub use self::config::{QueryConfig, QueryDescription, QueryVTable};\n \n use crate::dep_graph::{DepContext, DepNodeIndex, HasDepContext, SerializedDepNodeIndex};\n-\n use rustc_data_structures::sync::Lock;\n-use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::Diagnostic;\n use rustc_hir::def::DefKind;\n use rustc_span::Span;\n+use thin_vec::ThinVec;\n \n /// Description of a frame in the query stack.\n ///"}, {"sha": "aa10d2d3442471749fd7a58865b334df7e1c0fa5", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -14,7 +14,6 @@ use rustc_data_structures::profiling::TimingGuard;\n #[cfg(parallel_compiler)]\n use rustc_data_structures::sharded::Sharded;\n use rustc_data_structures::sync::Lock;\n-use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed, FatalError};\n use rustc_session::Session;\n use rustc_span::{Span, DUMMY_SP};\n@@ -24,6 +23,7 @@ use std::fmt::Debug;\n use std::hash::Hash;\n use std::mem;\n use std::ptr;\n+use thin_vec::ThinVec;\n \n pub struct QueryState<K> {\n     #[cfg(parallel_compiler)]"}, {"sha": "3b0b3144f2cd7d924fb0e4c3019b4c6654b8f0e0", "filename": "compiler/rustc_serialize/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_serialize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_serialize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2FCargo.toml?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -6,6 +6,7 @@ edition = \"2021\"\n [dependencies]\n indexmap = \"1.9.1\"\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n+thin-vec = \"0.2.8\"\n \n [dev-dependencies]\n rustc_macros = { path = \"../rustc_macros\" }"}, {"sha": "8f8c504117cc1c795f0326c561690c65557eb049", "filename": "compiler/rustc_serialize/src/collection_impls.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -1,13 +1,12 @@\n //! Implementations of serialization for structures found in liballoc\n \n-use std::hash::{BuildHasher, Hash};\n-\n use crate::{Decodable, Decoder, Encodable, Encoder};\n+use smallvec::{Array, SmallVec};\n use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet, LinkedList, VecDeque};\n+use std::hash::{BuildHasher, Hash};\n use std::rc::Rc;\n use std::sync::Arc;\n-\n-use smallvec::{Array, SmallVec};\n+use thin_vec::ThinVec;\n \n impl<S: Encoder, A: Array<Item: Encodable<S>>> Encodable<S> for SmallVec<A> {\n     fn encode(&self, s: &mut S) {\n@@ -23,6 +22,19 @@ impl<D: Decoder, A: Array<Item: Decodable<D>>> Decodable<D> for SmallVec<A> {\n     }\n }\n \n+impl<S: Encoder, T: Encodable<S>> Encodable<S> for ThinVec<T> {\n+    fn encode(&self, s: &mut S) {\n+        self.as_slice().encode(s);\n+    }\n+}\n+\n+impl<D: Decoder, T: Decodable<D>> Decodable<D> for ThinVec<T> {\n+    fn decode(d: &mut D) -> ThinVec<T> {\n+        let len = d.read_usize();\n+        (0..len).map(|_| Decodable::decode(d)).collect()\n+    }\n+}\n+\n impl<S: Encoder, T: Encodable<S>> Encodable<S> for LinkedList<T> {\n     fn encode(&self, s: &mut S) {\n         s.emit_usize(self.len());"}, {"sha": "7bc35c7d5516f16e537aa809197f831c26c8e6ab", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -10,18 +10,19 @@ path = \"lib.rs\"\n arrayvec = { version = \"0.7\", default-features = false }\n askama = { version = \"0.11\", default-features = false, features = [\"config\"] }\n atty = \"0.2\"\n-pulldown-cmark = { version = \"0.9.2\", default-features = false }\n+itertools = \"0.10.1\"\n minifier = \"0.2.2\"\n-serde = { version = \"1.0\", features = [\"derive\"] }\n+once_cell = \"1.10.0\"\n+pulldown-cmark = { version = \"0.9.2\", default-features = false }\n+regex = \"1\"\n+rustdoc-json-types = { path = \"../rustdoc-json-types\" }\n serde_json = \"1.0\"\n+serde = { version = \"1.0\", features = [\"derive\"] }\n smallvec = \"1.8.1\"\n tempfile = \"3\"\n-itertools = \"0.10.1\"\n-regex = \"1\"\n-rustdoc-json-types = { path = \"../rustdoc-json-types\" }\n+thin-vec = \"0.2.8\"\n tracing = \"0.1\"\n tracing-tree = \"0.2.0\"\n-once_cell = \"1.10.0\"\n \n [dependencies.tracing-subscriber]\n version = \"0.3.3\""}, {"sha": "0239b8da57ee06450bba6359c258b030eb40663e", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -123,7 +123,7 @@ where\n             kind: Box::new(ImplItem(Box::new(Impl {\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n-                trait_: Some(clean_trait_ref_with_bindings(self.cx, trait_ref, &[])),\n+                trait_: Some(clean_trait_ref_with_bindings(self.cx, trait_ref, ThinVec::new())),\n                 for_: clean_middle_ty(ty, self.cx, None),\n                 items: Vec::new(),\n                 polarity,"}, {"sha": "cc734389e070b29e5fc6c87455ad9fb204dba490", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             ),\n                             // FIXME(eddyb) compute both `trait_` and `for_` from\n                             // the post-inference `trait_ref`, as it's more accurate.\n-                            trait_: Some(clean_trait_ref_with_bindings(cx, trait_ref.0, &[])),\n+                            trait_: Some(clean_trait_ref_with_bindings(cx, trait_ref.0, ThinVec::new())),\n                             for_: clean_middle_ty(ty.0, cx, None),\n                             items: cx.tcx\n                                 .associated_items(impl_def_id)"}, {"sha": "f000b79d31048501182911647893315ba364c149", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -3,9 +3,10 @@\n use std::iter::once;\n use std::sync::Arc;\n \n+use thin_vec::ThinVec;\n+\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::thin_vec::ThinVec;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -461,7 +462,7 @@ pub(crate) fn build_impl(\n         ),\n     };\n     let polarity = tcx.impl_polarity(did);\n-    let trait_ = associated_trait.map(|t| clean_trait_ref_with_bindings(cx, t, &[]));\n+    let trait_ = associated_trait.map(|t| clean_trait_ref_with_bindings(cx, t, ThinVec::new()));\n     if trait_.as_ref().map(|t| t.def_id()) == tcx.lang_items().deref_trait() {\n         super::build_deref_target_impls(cx, &trait_items, ret);\n     }"}, {"sha": "a27d1a16e3bf9c0cab5fed5926bda9f392cde223", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -33,7 +33,8 @@ use std::collections::hash_map::Entry;\n use std::collections::BTreeMap;\n use std::default::Default;\n use std::hash::Hash;\n-use std::{mem, vec};\n+use std::mem;\n+use thin_vec::ThinVec;\n \n use crate::core::{self, DocContext, ImplTraitParam};\n use crate::formats::item_type::ItemType;\n@@ -125,7 +126,7 @@ fn clean_generic_bound<'tcx>(\n                 bug!(\"clean: parenthesized `GenericBound::LangItemTrait`\");\n             };\n \n-            let trait_ = clean_trait_ref_with_bindings(cx, trait_ref, &bindings);\n+            let trait_ = clean_trait_ref_with_bindings(cx, trait_ref, bindings);\n             GenericBound::TraitBound(\n                 PolyTrait { trait_, generic_params: vec![] },\n                 hir::TraitBoundModifier::None,\n@@ -147,14 +148,14 @@ fn clean_generic_bound<'tcx>(\n pub(crate) fn clean_trait_ref_with_bindings<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     trait_ref: ty::TraitRef<'tcx>,\n-    bindings: &[TypeBinding],\n+    bindings: ThinVec<TypeBinding>,\n ) -> Path {\n     let kind = cx.tcx.def_kind(trait_ref.def_id).into();\n     if !matches!(kind, ItemType::Trait | ItemType::TraitAlias) {\n         span_bug!(cx.tcx.def_span(trait_ref.def_id), \"`TraitRef` had unexpected kind {:?}\", kind);\n     }\n     inline::record_extern_fqn(cx, trait_ref.def_id, kind);\n-    let path = external_path(cx, trait_ref.def_id, true, bindings.to_vec(), trait_ref.substs);\n+    let path = external_path(cx, trait_ref.def_id, true, bindings, trait_ref.substs);\n \n     debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n \n@@ -164,7 +165,7 @@ pub(crate) fn clean_trait_ref_with_bindings<'tcx>(\n fn clean_poly_trait_ref_with_bindings<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     poly_trait_ref: ty::PolyTraitRef<'tcx>,\n-    bindings: &[TypeBinding],\n+    bindings: ThinVec<TypeBinding>,\n ) -> GenericBound {\n     let poly_trait_ref = poly_trait_ref.lift_to_tcx(cx.tcx).unwrap();\n \n@@ -327,7 +328,7 @@ fn clean_poly_trait_predicate<'tcx>(\n     let poly_trait_ref = pred.map_bound(|pred| pred.trait_ref);\n     Some(WherePredicate::BoundPredicate {\n         ty: clean_middle_ty(poly_trait_ref.skip_binder().self_ty(), cx, None),\n-        bounds: vec![clean_poly_trait_ref_with_bindings(cx, poly_trait_ref, &[])],\n+        bounds: vec![clean_poly_trait_ref_with_bindings(cx, poly_trait_ref, ThinVec::new())],\n         bound_params: Vec::new(),\n     })\n }\n@@ -402,7 +403,7 @@ fn clean_projection<'tcx>(\n     def_id: Option<DefId>,\n ) -> Type {\n     let lifted = ty.lift_to_tcx(cx.tcx).unwrap();\n-    let trait_ = clean_trait_ref_with_bindings(cx, lifted.trait_ref(cx.tcx), &[]);\n+    let trait_ = clean_trait_ref_with_bindings(cx, lifted.trait_ref(cx.tcx), ThinVec::new());\n     let self_type = clean_middle_ty(ty.self_ty(), cx, None);\n     let self_def_id = if let Some(def_id) = def_id {\n         cx.tcx.opt_parent(def_id).or(Some(def_id))\n@@ -1588,12 +1589,12 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                 AdtKind::Enum => ItemType::Enum,\n             };\n             inline::record_extern_fqn(cx, did, kind);\n-            let path = external_path(cx, did, false, vec![], substs);\n+            let path = external_path(cx, did, false, ThinVec::new(), substs);\n             Type::Path { path }\n         }\n         ty::Foreign(did) => {\n             inline::record_extern_fqn(cx, did, ItemType::ForeignType);\n-            let path = external_path(cx, did, false, vec![], InternalSubsts::empty());\n+            let path = external_path(cx, did, false, ThinVec::new(), InternalSubsts::empty());\n             Type::Path { path }\n         }\n         ty::Dynamic(obj, ref reg) => {\n@@ -1617,7 +1618,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             let mut bounds = dids\n                 .map(|did| {\n                     let empty = cx.tcx.intern_substs(&[]);\n-                    let path = external_path(cx, did, false, vec![], empty);\n+                    let path = external_path(cx, did, false, ThinVec::new(), empty);\n                     inline::record_extern_fqn(cx, did, ItemType::Trait);\n                     PolyTrait { trait_: path, generic_params: Vec::new() }\n                 })\n@@ -1693,7 +1694,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                         }\n                     }\n \n-                    let bindings: Vec<_> = bounds\n+                    let bindings: ThinVec<_> = bounds\n                         .iter()\n                         .filter_map(|bound| {\n                             if let ty::PredicateKind::Projection(proj) = bound.kind().skip_binder()\n@@ -1714,7 +1715,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                         })\n                         .collect();\n \n-                    Some(clean_poly_trait_ref_with_bindings(cx, trait_ref, &bindings))\n+                    Some(clean_poly_trait_ref_with_bindings(cx, trait_ref, bindings))\n                 })\n                 .collect::<Vec<_>>();\n             bounds.extend(regions);\n@@ -1845,12 +1846,8 @@ fn clean_generic_args<'tcx>(\n             })\n             .collect::<Vec<_>>()\n             .into();\n-        let bindings = generic_args\n-            .bindings\n-            .iter()\n-            .map(|x| clean_type_binding(x, cx))\n-            .collect::<Vec<_>>()\n-            .into();\n+        let bindings =\n+            generic_args.bindings.iter().map(|x| clean_type_binding(x, cx)).collect::<ThinVec<_>>();\n         GenericArgs::AngleBracketed { args, bindings }\n     }\n }"}, {"sha": "2808b400a0b531fbfa462e53b565feb42e1f88f3", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -8,14 +8,14 @@ use std::sync::OnceLock as OnceCell;\n use std::{cmp, fmt, iter};\n \n use arrayvec::ArrayVec;\n+use thin_vec::ThinVec;\n \n use rustc_ast::attr;\n use rustc_ast::util::comments::beautify_doc_string;\n use rustc_ast::{self as ast, AttrStyle};\n use rustc_attr::{ConstStability, Deprecation, Stability, StabilityLevel};\n use rustc_const_eval::const_eval::is_unstable_const_fn;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::thin_vec::ThinVec;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -1303,7 +1303,7 @@ impl GenericBound {\n     pub(crate) fn maybe_sized(cx: &mut DocContext<'_>) -> GenericBound {\n         let did = cx.tcx.require_lang_item(LangItem::Sized, None);\n         let empty = cx.tcx.intern_substs(&[]);\n-        let path = external_path(cx, did, false, vec![], empty);\n+        let path = external_path(cx, did, false, ThinVec::new(), empty);\n         inline::record_extern_fqn(cx, did, ItemType::Trait);\n         GenericBound::TraitBound(\n             PolyTrait { trait_: path, generic_params: Vec::new() },"}, {"sha": "ac9ab33961676c4b4bc90a387ceccc4240055402", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -12,7 +12,6 @@ use crate::visit_lib::LibEmbargoVisitor;\n \n use rustc_ast as ast;\n use rustc_ast::tokenstream::TokenTree;\n-use rustc_data_structures::thin_vec::ThinVec;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n@@ -23,6 +22,7 @@ use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::fmt::Write as _;\n use std::mem;\n+use thin_vec::ThinVec;\n \n #[cfg(test)]\n mod tests;\n@@ -102,7 +102,7 @@ fn external_generic_args<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     did: DefId,\n     has_self: bool,\n-    bindings: Vec<TypeBinding>,\n+    bindings: ThinVec<TypeBinding>,\n     substs: SubstsRef<'tcx>,\n ) -> GenericArgs {\n     let args = substs_to_args(cx, substs, has_self);\n@@ -112,7 +112,7 @@ fn external_generic_args<'tcx>(\n             // The trait's first substitution is the one after self, if there is one.\n             match substs.iter().nth(if has_self { 1 } else { 0 }).unwrap().expect_ty().kind() {\n                 ty::Tuple(tys) => tys.iter().map(|t| clean_middle_ty(t, cx, None)).collect::<Vec<_>>().into(),\n-                _ => return GenericArgs::AngleBracketed { args: args.into(), bindings: bindings.into() },\n+                _ => return GenericArgs::AngleBracketed { args: args.into(), bindings },\n             };\n         let output = None;\n         // FIXME(#20299) return type comes from a projection now\n@@ -130,7 +130,7 @@ pub(super) fn external_path<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     did: DefId,\n     has_self: bool,\n-    bindings: Vec<TypeBinding>,\n+    bindings: ThinVec<TypeBinding>,\n     substs: SubstsRef<'tcx>,\n ) -> Path {\n     let def_kind = cx.tcx.def_kind(did);"}, {"sha": "b124490f747abc4302a3de9e336abe4704466768", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38106b6d8478fbfbded5403ee31c056c71cef48/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=b38106b6d8478fbfbded5403ee31c056c71cef48", "patch": "@@ -223,6 +223,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"time\",\n     \"tinystr\",\n     \"tinyvec\",\n+    \"thin-vec\",\n     \"tracing\",\n     \"tracing-attributes\",\n     \"tracing-core\","}]}