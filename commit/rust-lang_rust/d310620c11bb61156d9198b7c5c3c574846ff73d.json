{"sha": "d310620c11bb61156d9198b7c5c3c574846ff73d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMTA2MjBjMTFiYjYxMTU2ZDkxOThiN2M1YzNjNTc0ODQ2ZmY3M2Q=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-01-26T08:07:43Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-01-26T08:13:54Z"}, "message": "Allow configuring the failure rate with -Zmiri-compare-exchange-weak-failure-rate", "tree": {"sha": "31fa4b93b5d7d55d830c1b41ed75006b5e3c7767", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31fa4b93b5d7d55d830c1b41ed75006b5e3c7767"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d310620c11bb61156d9198b7c5c3c574846ff73d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d310620c11bb61156d9198b7c5c3c574846ff73d", "html_url": "https://github.com/rust-lang/rust/commit/d310620c11bb61156d9198b7c5c3c574846ff73d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d310620c11bb61156d9198b7c5c3c574846ff73d/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4b592ed17471622d27deeab8a1d8d89bc5c17d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4b592ed17471622d27deeab8a1d8d89bc5c17d1", "html_url": "https://github.com/rust-lang/rust/commit/d4b592ed17471622d27deeab8a1d8d89bc5c17d1"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "bd3bc8dbb412561958057ecfcf24e9a94773c2a4", "filename": "src/bin/miri.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d310620c11bb61156d9198b7c5c3c574846ff73d/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d310620c11bb61156d9198b7c5c3c574846ff73d/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=d310620c11bb61156d9198b7c5c3c574846ff73d", "patch": "@@ -282,6 +282,14 @@ fn main() {\n                     };\n                     miri_config.tracked_alloc_id = Some(miri::AllocId(id));\n                 }\n+                arg if arg.starts_with(\"-Zmiri-compare-exchange-weak-failure-rate=\") => {\n+                    let rate = match arg.strip_prefix(\"-Zmiri-compare-exchange-weak-failure-rate=\").unwrap().parse::<f64>() {\n+                        Ok(rate) if rate >= 0.0 && rate <= 1.0 => rate,\n+                        Ok(_) => panic!(\"-Zmiri-compare-exchange-weak-failure-rate must be between `0.0` and `1.0`\"),\n+                        Err(err) => panic!(\"-Zmiri-compare-exchange-weak-failure-rate requires a `f64` between `0.0` and `1.0`: {}\", err),\n+                    };\n+                    miri_config.cmpxchg_weak_failure_rate = rate;\n+                }\n                 _ => {\n                     // Forward to rustc.\n                     rustc_args.push(arg);"}, {"sha": "f79775e12fe7495cf58f1614c5a5f6966aa926ef", "filename": "src/data_race.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d310620c11bb61156d9198b7c5c3c574846ff73d/src%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d310620c11bb61156d9198b7c5c3c574846ff73d/src%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdata_race.rs?ref=d310620c11bb61156d9198b7c5c3c574846ff73d", "patch": "@@ -567,10 +567,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n         let old = this.allow_data_races_mut(|this| this.read_immediate(place.into()))?;\n         // `binary_op` will bail if either of them is not a scalar.\n         let eq = this.overflowing_binary_op(mir::BinOp::Eq, old, expect_old)?.0;\n-        // If the operation would succeed, but is \"weak\", fail 80% of the time.\n-        // FIXME: this is quite arbitrary.\n+        // If the operation would succeed, but is \"weak\", fail some portion\n+        // of the time, based on `rate`.\n+        let rate = this.memory.extra.cmpxchg_weak_failure_rate;\n         let cmpxchg_success = eq.to_bool()?\n-            && (!can_fail_spuriously || this.memory.extra.rng.borrow_mut().gen_range(0, 10) < 8);\n+            && (!can_fail_spuriously || this.memory.extra.rng.borrow_mut().gen::<f64>() < rate);\n         let res = Immediate::ScalarPair(\n             old.to_scalar_or_uninit(),\n             Scalar::from_bool(cmpxchg_success).into(),"}, {"sha": "b6d4fa05e1e5aeeb6f9e3ad3e436da3dfc61f5c3", "filename": "src/eval.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d310620c11bb61156d9198b7c5c3c574846ff73d/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d310620c11bb61156d9198b7c5c3c574846ff73d/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=d310620c11bb61156d9198b7c5c3c574846ff73d", "patch": "@@ -50,6 +50,9 @@ pub struct MiriConfig {\n     pub track_raw: bool,\n     /// Determine if data race detection should be enabled\n     pub data_race_detector: bool,\n+    /// Rate of spurious failures for compare_exchange_weak atomic operations,\n+    /// between 0.0 and 1.0, defaulting to 0.8 (80% chance of failure).\n+    pub cmpxchg_weak_failure_rate: f64,\n }\n \n impl Default for MiriConfig {\n@@ -68,6 +71,7 @@ impl Default for MiriConfig {\n             tracked_alloc_id: None,\n             track_raw: false,\n             data_race_detector: true,\n+            cmpxchg_weak_failure_rate: 0.8,\n         }\n     }\n }"}, {"sha": "60a6dae0f81b3748de20e3bd4ae123a2c947d6b5", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d310620c11bb61156d9198b7c5c3c574846ff73d/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d310620c11bb61156d9198b7c5c3c574846ff73d/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=d310620c11bb61156d9198b7c5c3c574846ff73d", "patch": "@@ -135,6 +135,9 @@ pub struct MemoryExtra {\n \n     /// Controls whether alignment of memory accesses is being checked.\n     pub(crate) check_alignment: AlignmentCheck,\n+\n+    /// Failure rate of compare_exchange_weak, between 0.0 and 1.0\n+    pub(crate) cmpxchg_weak_failure_rate: f64,\n }\n \n impl MemoryExtra {\n@@ -162,6 +165,7 @@ impl MemoryExtra {\n             rng: RefCell::new(rng),\n             tracked_alloc_id: config.tracked_alloc_id,\n             check_alignment: config.check_alignment,\n+            cmpxchg_weak_failure_rate: config.cmpxchg_weak_failure_rate,\n         }\n     }\n "}]}