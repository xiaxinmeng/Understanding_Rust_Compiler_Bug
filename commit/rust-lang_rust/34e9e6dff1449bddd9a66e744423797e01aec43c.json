{"sha": "34e9e6dff1449bddd9a66e744423797e01aec43c", "node_id": "C_kwDOAAsO6NoAKDM0ZTllNmRmZjE0NDliZGRkOWE2NmU3NDQ0MjM3OTdlMDFhZWM0M2M", "commit": {"author": {"name": "Daniel Xu", "email": "dxu@dxuuu.xyz", "date": "2022-07-09T02:03:03Z"}, "committer": {"name": "Daniel Xu", "email": "dxu@dxuuu.xyz", "date": "2022-07-09T02:03:03Z"}, "message": "Fix duplicated type annotation suggestion\n\nBefore, there was more or less duplicated suggestions to add type hints.\nFix by clearing more generic suggestions when a more specific suggestion\nis possible.\n\nThis fixes #93506 .", "tree": {"sha": "3fa4ba6ab1c5b3b8f83b698e480fca9f29ff2dff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fa4ba6ab1c5b3b8f83b698e480fca9f29ff2dff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34e9e6dff1449bddd9a66e744423797e01aec43c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34e9e6dff1449bddd9a66e744423797e01aec43c", "html_url": "https://github.com/rust-lang/rust/commit/34e9e6dff1449bddd9a66e744423797e01aec43c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34e9e6dff1449bddd9a66e744423797e01aec43c/comments", "author": {"login": "danobi", "id": 824615, "node_id": "MDQ6VXNlcjgyNDYxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/824615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danobi", "html_url": "https://github.com/danobi", "followers_url": "https://api.github.com/users/danobi/followers", "following_url": "https://api.github.com/users/danobi/following{/other_user}", "gists_url": "https://api.github.com/users/danobi/gists{/gist_id}", "starred_url": "https://api.github.com/users/danobi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danobi/subscriptions", "organizations_url": "https://api.github.com/users/danobi/orgs", "repos_url": "https://api.github.com/users/danobi/repos", "events_url": "https://api.github.com/users/danobi/events{/privacy}", "received_events_url": "https://api.github.com/users/danobi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danobi", "id": 824615, "node_id": "MDQ6VXNlcjgyNDYxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/824615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danobi", "html_url": "https://github.com/danobi", "followers_url": "https://api.github.com/users/danobi/followers", "following_url": "https://api.github.com/users/danobi/following{/other_user}", "gists_url": "https://api.github.com/users/danobi/gists{/gist_id}", "starred_url": "https://api.github.com/users/danobi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danobi/subscriptions", "organizations_url": "https://api.github.com/users/danobi/orgs", "repos_url": "https://api.github.com/users/danobi/repos", "events_url": "https://api.github.com/users/danobi/events{/privacy}", "received_events_url": "https://api.github.com/users/danobi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06754d8852bea286a3a76d373ccd17e66afb5a8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/06754d8852bea286a3a76d373ccd17e66afb5a8b", "html_url": "https://github.com/rust-lang/rust/commit/06754d8852bea286a3a76d373ccd17e66afb5a8b"}], "stats": {"total": 36, "additions": 12, "deletions": 24}, "files": [{"sha": "da321c45875090cfcc455ad9ec535e8bbdd7f27a", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34e9e6dff1449bddd9a66e744423797e01aec43c/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e9e6dff1449bddd9a66e744423797e01aec43c/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=34e9e6dff1449bddd9a66e744423797e01aec43c", "patch": "@@ -614,6 +614,14 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Clear any existing suggestions.\n+    pub fn clear_suggestions(&mut self) -> &mut Self {\n+        if let Ok(suggestions) = &mut self.suggestions {\n+            suggestions.clear();\n+        }\n+        self\n+    }\n+\n     /// Helper for pushing to `self.suggestions`, if available (not disable).\n     fn push_suggestion(&mut self, suggestion: CodeSuggestion) {\n         if let Ok(suggestions) = &mut self.suggestions {"}, {"sha": "99ac6a3546ed69caf2a464faa89819e7db7c7574", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34e9e6dff1449bddd9a66e744423797e01aec43c/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e9e6dff1449bddd9a66e744423797e01aec43c/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=34e9e6dff1449bddd9a66e744423797e01aec43c", "patch": "@@ -461,6 +461,7 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n     forward!(pub fn set_is_lint(&mut self,) -> &mut Self);\n \n     forward!(pub fn disable_suggestions(&mut self,) -> &mut Self);\n+    forward!(pub fn clear_suggestions(&mut self,) -> &mut Self);\n \n     forward!(pub fn multipart_suggestion(\n         &mut self,"}, {"sha": "875831cf78bc5de4ad6dfd146862074c968f2236", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34e9e6dff1449bddd9a66e744423797e01aec43c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e9e6dff1449bddd9a66e744423797e01aec43c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=34e9e6dff1449bddd9a66e744423797e01aec43c", "patch": "@@ -2074,6 +2074,9 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         //    |\n                         //    = note: cannot satisfy `_: Tt`\n \n+                        // Clear any more general suggestions in favor of our specific one\n+                        err.clear_suggestions();\n+\n                         err.span_suggestion_verbose(\n                             span.shrink_to_hi(),\n                             &format!("}, {"sha": "5c52e7bcfab694f5c494fc7a3733be25facadba3", "filename": "src/test/ui/inference/erase-type-params-in-label.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34e9e6dff1449bddd9a66e744423797e01aec43c/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34e9e6dff1449bddd9a66e744423797e01aec43c/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr?ref=34e9e6dff1449bddd9a66e744423797e01aec43c", "patch": "@@ -10,10 +10,6 @@ note: required by a bound in `foo`\n    |\n LL | fn foo<T, K, W: Default, Z: Default>(t: T, k: K) -> Foo<T, K, W, Z> {\n    |                 ^^^^^^^ required by this bound in `foo`\n-help: consider giving `foo` an explicit type, where the type for type parameter `W` is specified\n-   |\n-LL |     let foo: Foo<i32, &str, W, Z> = foo(1, \"\");\n-   |            ++++++++++++++++++++++\n help: consider specifying the type arguments in the function call\n    |\n LL |     let foo = foo::<T, K, W, Z>(1, \"\");\n@@ -31,10 +27,6 @@ note: required by a bound in `bar`\n    |\n LL | fn bar<T, K, Z: Default>(t: T, k: K) -> Bar<T, K, Z> {\n    |                 ^^^^^^^ required by this bound in `bar`\n-help: consider giving `bar` an explicit type, where the type for type parameter `Z` is specified\n-   |\n-LL |     let bar: Bar<i32, &str, Z> = bar(1, \"\");\n-   |            +++++++++++++++++++\n help: consider specifying the type arguments in the function call\n    |\n LL |     let bar = bar::<T, K, Z>(1, \"\");"}, {"sha": "04673a375cf0176f780abe3d45b33bfe8a97c407", "filename": "src/test/ui/inference/issue-71732.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34e9e6dff1449bddd9a66e744423797e01aec43c/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34e9e6dff1449bddd9a66e744423797e01aec43c/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr?ref=34e9e6dff1449bddd9a66e744423797e01aec43c", "patch": "@@ -13,10 +13,6 @@ note: required by a bound in `HashMap::<K, V, S>::get`\n    |\n LL |         K: Borrow<Q>,\n    |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n-help: consider specifying the generic argument\n-   |\n-LL |         .get::<Q>(&\"key\".into())\n-   |             +++++\n help: consider specifying the type argument in the function call\n    |\n LL |         .get::<Q>(&\"key\".into())"}, {"sha": "2b832e27c5224ac26a388ed73810dc9a4f6a77b7", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34e9e6dff1449bddd9a66e744423797e01aec43c/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34e9e6dff1449bddd9a66e744423797e01aec43c/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=34e9e6dff1449bddd9a66e744423797e01aec43c", "patch": "@@ -13,10 +13,6 @@ note: required by a bound in `HashMap::<K, V, S>::get`\n    |\n LL |         K: Borrow<Q>,\n    |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n-help: consider specifying the generic argument\n-   |\n-LL |     opts.get::<Q>(opt.as_ref());\n-   |             +++++\n help: consider specifying the type argument in the function call\n    |\n LL |     opts.get::<Q>(opt.as_ref());"}, {"sha": "cbec35934214886d693b3d5a6625b1ec0ca16033", "filename": "src/test/ui/traits/multidispatch-convert-ambig-dest.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34e9e6dff1449bddd9a66e744423797e01aec43c/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34e9e6dff1449bddd9a66e744423797e01aec43c/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr?ref=34e9e6dff1449bddd9a66e744423797e01aec43c", "patch": "@@ -30,10 +30,6 @@ LL | fn test<T,U>(_: T, _: U)\n    |    ---- required by a bound in this\n LL | where T : Convert<U>\n    |           ^^^^^^^^^^ required by this bound in `test`\n-help: consider specifying the generic arguments\n-   |\n-LL |     test::<i32, U>(22, std::default::Default::default());\n-   |         ++++++++++\n help: consider specifying the type arguments in the function call\n    |\n LL |     test::<T, U>(22, std::default::Default::default());"}, {"sha": "4af4c22f75166153ab35739f1c1c2fd8ac3869df", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34e9e6dff1449bddd9a66e744423797e01aec43c/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34e9e6dff1449bddd9a66e744423797e01aec43c/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=34e9e6dff1449bddd9a66e744423797e01aec43c", "patch": "@@ -10,10 +10,6 @@ note: required by a bound in `foo`\n    |\n LL | fn foo<T: Into<String>>(x: i32) {}\n    |           ^^^^^^^^^^^^ required by this bound in `foo`\n-help: consider specifying the generic argument\n-   |\n-LL |     foo::<T>(42);\n-   |        +++++\n help: consider specifying the type argument in the function call\n    |\n LL |     foo::<T>(42);"}]}