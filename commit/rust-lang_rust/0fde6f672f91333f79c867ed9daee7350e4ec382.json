{"sha": "0fde6f672f91333f79c867ed9daee7350e4ec382", "node_id": "C_kwDOAAsO6NoAKDBmZGU2ZjY3MmY5MTMzM2Y3OWM4NjdlZDlkYWVlNzM1MGU0ZWMzODI", "commit": {"author": {"name": "sireliah", "email": "sajuukk@gmail.com", "date": "2021-10-10T12:58:12Z"}, "committer": {"name": "sireliah", "email": "sajuukk@gmail.com", "date": "2021-10-11T19:48:35Z"}, "message": "Clarify the error descriptions", "tree": {"sha": "2f7604dced286365230b2049740104d84e3473b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f7604dced286365230b2049740104d84e3473b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fde6f672f91333f79c867ed9daee7350e4ec382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fde6f672f91333f79c867ed9daee7350e4ec382", "html_url": "https://github.com/rust-lang/rust/commit/0fde6f672f91333f79c867ed9daee7350e4ec382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fde6f672f91333f79c867ed9daee7350e4ec382/comments", "author": {"login": "sireliah", "id": 17201781, "node_id": "MDQ6VXNlcjE3MjAxNzgx", "avatar_url": "https://avatars.githubusercontent.com/u/17201781?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sireliah", "html_url": "https://github.com/sireliah", "followers_url": "https://api.github.com/users/sireliah/followers", "following_url": "https://api.github.com/users/sireliah/following{/other_user}", "gists_url": "https://api.github.com/users/sireliah/gists{/gist_id}", "starred_url": "https://api.github.com/users/sireliah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sireliah/subscriptions", "organizations_url": "https://api.github.com/users/sireliah/orgs", "repos_url": "https://api.github.com/users/sireliah/repos", "events_url": "https://api.github.com/users/sireliah/events{/privacy}", "received_events_url": "https://api.github.com/users/sireliah/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sireliah", "id": 17201781, "node_id": "MDQ6VXNlcjE3MjAxNzgx", "avatar_url": "https://avatars.githubusercontent.com/u/17201781?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sireliah", "html_url": "https://github.com/sireliah", "followers_url": "https://api.github.com/users/sireliah/followers", "following_url": "https://api.github.com/users/sireliah/following{/other_user}", "gists_url": "https://api.github.com/users/sireliah/gists{/gist_id}", "starred_url": "https://api.github.com/users/sireliah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sireliah/subscriptions", "organizations_url": "https://api.github.com/users/sireliah/orgs", "repos_url": "https://api.github.com/users/sireliah/repos", "events_url": "https://api.github.com/users/sireliah/events{/privacy}", "received_events_url": "https://api.github.com/users/sireliah/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14aae67bbc53eb248ee85eace8f648bd69e43c2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/14aae67bbc53eb248ee85eace8f648bd69e43c2a", "html_url": "https://github.com/rust-lang/rust/commit/14aae67bbc53eb248ee85eace8f648bd69e43c2a"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "58ebf43cc98ced9ff3652ea13f49b10f067400c1", "filename": "compiler/rustc_error_codes/src/error_codes/E0482.md", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0fde6f672f91333f79c867ed9daee7350e4ec382/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0482.md", "raw_url": "https://github.com/rust-lang/rust/raw/0fde6f672f91333f79c867ed9daee7350e4ec382/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0482.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0482.md?ref=0fde6f672f91333f79c867ed9daee7350e4ec382", "patch": "@@ -1,68 +1,73 @@\n-A lifetime of return value does not outlive the function call.\n+A lifetime of a returned value does not outlive the function call.\n \n Erroneous code example:\n \n ```compile_fail,E0482\n fn prefix<'a>(\n     words: impl Iterator<Item = &'a str>\n-) -> impl Iterator<Item = String> {\n+) -> impl Iterator<Item = String> { // error!\n     words.map(|v| format!(\"foo-{}\", v))\n }\n ```\n \n-To fix this error, make the lifetime of the returned value explicit.\n+To fix this error, make the lifetime of the returned value explicit:\n \n ```\n fn prefix<'a>(\n     words: impl Iterator<Item = &'a str> + 'a\n-) -> impl Iterator<Item = String> + 'a {\n+) -> impl Iterator<Item = String> + 'a { // ok!\n     words.map(|v| format!(\"foo-{}\", v))\n }\n ```\n \n-[`impl Trait`] feature in return type have implicit `'static` lifetime\n-restriction and the type implementing the `Iterator` passed to the function\n-lives just `'a`, so shorter time.\n+The [`impl Trait`] feature in this example uses an implicit `'static` lifetime\n+restriction in the returned type. However the type implementing the `Iterator`\n+passed to the function lives just as long as `'a`, which is not long enough.\n \n The solution involves adding lifetime bound to both function argument and\n the return value to make sure that the values inside the iterator\n are not dropped when the function goes out of the scope.\n \n-Alternative solution would be to guarantee that the `Item` references\n+An alternative solution would be to guarantee that the `Item` references\n in the iterator are alive for the whole lifetime of the program.\n \n ```\n fn prefix(\n     words: impl Iterator<Item = &'static str>\n-) -> impl Iterator<Item = String> {\n+) -> impl Iterator<Item = String> {  // ok!\n     words.map(|v| format!(\"foo-{}\", v))\n }\n ```\n \n-Similar lifetime problem might arise when returning closures.\n-\n-Erroneous code example:\n+A similar lifetime problem might arise when returning closures:\n \n ```compile_fail,E0482\n-fn foo(x: &mut Vec<i32>) -> impl FnMut(&mut Vec<i32>) -> &[i32] {\n+fn foo(\n+    x: &mut Vec<i32>\n+) -> impl FnMut(&mut Vec<i32>) -> &[i32] { // error!\n     |y| {\n         y.append(x);\n         y\n     }\n }\n ```\n \n-Analogically, solution here is to use explicit return lifetime\n+Analogically, a solution here is to use explicit return lifetime\n and move the ownership of the variable to the closure.\n \n ```\n-fn foo<'a>(x: &'a mut Vec<i32>) -> impl FnMut(&mut Vec<i32>) -> &[i32] + 'a {\n+fn foo<'a>(\n+    x: &'a mut Vec<i32>\n+) -> impl FnMut(&mut Vec<i32>) -> &[i32] + 'a { // ok!\n     move |y| {\n         y.append(x);\n         y\n     }\n }\n ```\n \n-- [`impl Trait`]: https://doc.rust-lang.org/reference/types/impl-trait.html\n-- [RFC 1951]: https://rust-lang.github.io/rfcs/1951-expand-impl-trait.html\n+To better understand the lifetime treatment in the [`impl Trait`],\n+please see the [RFC 1951].\n+\n+[`impl Trait`]: https://doc.rust-lang.org/reference/types/impl-trait.html\n+[RFC 1951]: https://rust-lang.github.io/rfcs/1951-expand-impl-trait.html"}]}