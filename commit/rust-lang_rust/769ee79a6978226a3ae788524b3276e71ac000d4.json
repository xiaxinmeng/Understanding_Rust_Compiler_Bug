{"sha": "769ee79a6978226a3ae788524b3276e71ac000d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OWVlNzlhNjk3ODIyNmEzYWU3ODg1MjRiMzI3NmU3MWFjMDAwZDQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-04T14:14:54Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-08T13:52:02Z"}, "message": "Fallout", "tree": {"sha": "954fdc4f0484ebdd46f8dbbdf2e02ff7b618d5fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/954fdc4f0484ebdd46f8dbbdf2e02ff7b618d5fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/769ee79a6978226a3ae788524b3276e71ac000d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/769ee79a6978226a3ae788524b3276e71ac000d4", "html_url": "https://github.com/rust-lang/rust/commit/769ee79a6978226a3ae788524b3276e71ac000d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/769ee79a6978226a3ae788524b3276e71ac000d4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00e524ce340e1f0c11903d2e20e687d396f567d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/00e524ce340e1f0c11903d2e20e687d396f567d6", "html_url": "https://github.com/rust-lang/rust/commit/00e524ce340e1f0c11903d2e20e687d396f567d6"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "cd8064adf520eefa6062d7a94232912ca8938b30", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/769ee79a6978226a3ae788524b3276e71ac000d4/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769ee79a6978226a3ae788524b3276e71ac000d4/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=769ee79a6978226a3ae788524b3276e71ac000d4", "patch": "@@ -10,9 +10,10 @@\n \n //! The virtual memory representation of the MIR interpreter\n \n+use super::{Pointer, EvalResult, AllocId};\n+\n use ty::layout::{Size, Align};\n use syntax::ast::Mutability;\n-use rustc_target::abi::HasDataLayout;\n use std::iter;\n use mir;\n use std::ops::{Deref, DerefMut};\n@@ -40,7 +41,7 @@ pub struct Allocation<Tag=(),Extra=()> {\n     pub extra: Extra,\n }\n \n-trait AllocationExtra<Tag> {\n+pub trait AllocationExtra<Tag>: ::std::fmt::Debug + Default + Clone {\n     /// Hook for performing extra checks on a memory read access.\n     ///\n     /// Takes read-only access to the allocation so we can keep all the memory read\n@@ -49,7 +50,7 @@ trait AllocationExtra<Tag> {\n     #[inline]\n     fn memory_read(\n         &self,\n-        _ptr: Pointer<Self::PointerTag>,\n+        _ptr: Pointer<Tag>,\n         _size: Size,\n     ) -> EvalResult<'tcx> {\n         Ok(())\n@@ -63,13 +64,15 @@ trait AllocationExtra<Tag> {\n     #[inline]\n     fn memory_written(\n         &mut self,\n-        _ptr: Pointer<Self::PointerTag>,\n+        _ptr: Pointer<Tag>,\n         _size: Size,\n     ) -> EvalResult<'tcx> {\n         Ok(())\n     }\n }\n \n+impl AllocationExtra<()> for () {}\n+\n impl<Tag, Extra: Default> Allocation<Tag, Extra> {\n     /// Creates a read-only allocation initialized by the given bytes\n     pub fn from_bytes(slice: &[u8], align: Align) -> Self {"}, {"sha": "047996777ea968907592791c4c3701049ab8670a", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/769ee79a6978226a3ae788524b3276e71ac000d4/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769ee79a6978226a3ae788524b3276e71ac000d4/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=769ee79a6978226a3ae788524b3276e71ac000d4", "patch": "@@ -20,7 +20,7 @@ use rustc::mir;\n use rustc::ty::{self, layout::{Size, TyLayout}, query::TyCtxtAt};\n \n use super::{\n-    Allocation, AllocId, EvalResult, Scalar,\n+    Allocation, AllocId, EvalResult, Scalar, AllocationExtra,\n     EvalContext, PlaceTy, MPlaceTy, OpTy, Pointer, MemoryKind,\n };\n \n@@ -78,7 +78,7 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n     type PointerTag: ::std::fmt::Debug + Default + Copy + Eq + Hash + 'static;\n \n     /// Extra data stored in every allocation.\n-    type AllocExtra: ::std::fmt::Debug + Default + Clone;\n+    type AllocExtra: AllocationExtra<Self::PointerTag>;\n \n     /// Memory's allocation map\n     type MemoryMap:"}, {"sha": "ef2510dec358fc842f3ceb0a1ebc18e0f85c7e2c", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/769ee79a6978226a3ae788524b3276e71ac000d4/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769ee79a6978226a3ae788524b3276e71ac000d4/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=769ee79a6978226a3ae788524b3276e71ac000d4", "patch": "@@ -28,7 +28,7 @@ use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use syntax::ast::Mutability;\n \n use super::{\n-    Pointer, AllocId, Allocation, ConstValue, GlobalId,\n+    Pointer, AllocId, Allocation, ConstValue, GlobalId, AllocationExtra,\n     EvalResult, Scalar, EvalErrorKind, AllocType, PointerArithmetic,\n     Machine, AllocMap, MayLeak, ScalarMaybeUndef, ErrorHandled,\n };\n@@ -637,7 +637,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         }\n \n         let alloc = self.get(ptr.alloc_id)?;\n-        M::memory_read(alloc, ptr, size)?;\n+        AllocationExtra::memory_read(&alloc.extra, ptr, size)?;\n \n         assert_eq!(ptr.offset.bytes() as usize as u64, ptr.offset.bytes());\n         assert_eq!(size.bytes() as usize as u64, size.bytes());\n@@ -683,7 +683,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         self.clear_relocations(ptr, size)?;\n \n         let alloc = self.get_mut(ptr.alloc_id)?;\n-        M::memory_written(alloc, ptr, size)?;\n+        AllocationExtra::memory_written(&mut alloc.extra, ptr, size)?;\n \n         assert_eq!(ptr.offset.bytes() as usize as u64, ptr.offset.bytes());\n         assert_eq!(size.bytes() as usize as u64, size.bytes());"}, {"sha": "6f8bbf3c4a97de0475f2807c7b018a4c748b468d", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/769ee79a6978226a3ae788524b3276e71ac000d4/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769ee79a6978226a3ae788524b3276e71ac000d4/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=769ee79a6978226a3ae788524b3276e71ac000d4", "patch": "@@ -24,7 +24,7 @@ use rustc::mir::interpret::{\n     GlobalId, AllocId, Allocation, Scalar, EvalResult, Pointer, PointerArithmetic\n };\n use super::{\n-    EvalContext, Machine, AllocMap,\n+    EvalContext, Machine, AllocMap, AllocationExtra,\n     Immediate, ImmTy, ScalarMaybeUndef, Operand, OpTy, MemoryKind\n };\n \n@@ -264,6 +264,7 @@ where\n     Tag: ::std::fmt::Debug+Default+Copy+Eq+Hash+'static,\n     M: Machine<'a, 'mir, 'tcx, PointerTag=Tag>,\n     M::MemoryMap: AllocMap<AllocId, (MemoryKind<M::MemoryKinds>, Allocation<Tag, M::AllocExtra>)>,\n+    M::AllocExtra: AllocationExtra<Tag>,\n {\n     /// Take a value, which represents a (thin or fat) reference, and make it a place.\n     /// Alignment is just based on the type.  This is the inverse of `create_ref`."}, {"sha": "84aa5b6756660ceb4f224c37324e1ec6fe7d3668", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/769ee79a6978226a3ae788524b3276e71ac000d4/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769ee79a6978226a3ae788524b3276e71ac000d4/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=769ee79a6978226a3ae788524b3276e71ac000d4", "patch": "@@ -17,7 +17,7 @@ use rustc::ty::layout::{self, Size, Align, TyLayout, LayoutOf};\n use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n use rustc::mir::interpret::{\n-    Scalar, AllocType, EvalResult, EvalErrorKind\n+    Scalar, AllocType, EvalResult, EvalErrorKind,\n };\n \n use super::{"}]}