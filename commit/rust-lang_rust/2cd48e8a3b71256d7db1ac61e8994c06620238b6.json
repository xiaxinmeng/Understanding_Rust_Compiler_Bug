{"sha": "2cd48e8a3b71256d7db1ac61e8994c06620238b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZDQ4ZThhM2I3MTI1NmQ3ZGIxYWM2MWU4OTk0YzA2NjIwMjM4YjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-07T12:11:59Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-08T08:32:20Z"}, "message": "ast::MethodSig -> ast::FnSig", "tree": {"sha": "a715eff456e90df3daefcec91ee395cd2e6eaddb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a715eff456e90df3daefcec91ee395cd2e6eaddb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cd48e8a3b71256d7db1ac61e8994c06620238b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cd48e8a3b71256d7db1ac61e8994c06620238b6", "html_url": "https://github.com/rust-lang/rust/commit/2cd48e8a3b71256d7db1ac61e8994c06620238b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cd48e8a3b71256d7db1ac61e8994c06620238b6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27511b22dfb08c98e53a8f672b2789d4de872f55", "url": "https://api.github.com/repos/rust-lang/rust/commits/27511b22dfb08c98e53a8f672b2789d4de872f55", "html_url": "https://github.com/rust-lang/rust/commit/27511b22dfb08c98e53a8f672b2789d4de872f55"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "861130f0c69b2d8faabb4479ef8576709b1b60cf", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=2cd48e8a3b71256d7db1ac61e8994c06620238b6", "patch": "@@ -1255,7 +1255,7 @@ impl LoweringContext<'_> {\n     fn lower_method_sig(\n         &mut self,\n         generics: &Generics,\n-        sig: &MethodSig,\n+        sig: &FnSig,\n         fn_def_id: DefId,\n         impl_trait_return_allow: bool,\n         is_async: Option<NodeId>,"}, {"sha": "d705737cc93d4912e405eddfa75ed5abc154b640", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=2cd48e8a3b71256d7db1ac61e8994c06620238b6", "patch": "@@ -228,7 +228,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n         let def_data = match ii.kind {\n-            ImplItemKind::Method(MethodSig {\n+            ImplItemKind::Method(FnSig {\n                 ref header,\n                 ref decl,\n             }, ref body) if header.asyncness.node.is_async() => {"}, {"sha": "cd7af3be9b5ee2687c09476920d8844e38db139e", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=2cd48e8a3b71256d7db1ac61e8994c06620238b6", "patch": "@@ -802,7 +802,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n     fn flat_map_trait_item(&mut self, i: ast::TraitItem) -> SmallVec<[ast::TraitItem; 1]> {\n         let is_const = match i.kind {\n             ast::TraitItemKind::Const(..) => true,\n-            ast::TraitItemKind::Method(ast::MethodSig { ref decl, ref header, .. }, _) =>\n+            ast::TraitItemKind::Method(ast::FnSig { ref decl, ref header, .. }, _) =>\n                 header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n             _ => false,\n         };\n@@ -812,7 +812,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n     fn flat_map_impl_item(&mut self, i: ast::ImplItem) -> SmallVec<[ast::ImplItem; 1]> {\n         let is_const = match i.kind {\n             ast::ImplItemKind::Const(..) => true,\n-            ast::ImplItemKind::Method(ast::MethodSig { ref decl, ref header, .. }, _) =>\n+            ast::ImplItemKind::Method(ast::FnSig { ref decl, ref header, .. }, _) =>\n                 header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n             _ => false,\n         };"}, {"sha": "883d896456421b001145b21cfdac7041e086ec4a", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=2cd48e8a3b71256d7db1ac61e8994c06620238b6", "patch": "@@ -272,7 +272,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n \n     fn process_method(\n         &mut self,\n-        sig: &'l ast::MethodSig,\n+        sig: &'l ast::FnSig,\n         body: Option<&'l ast::Block>,\n         id: ast::NodeId,\n         ident: ast::Ident,"}, {"sha": "887aeb03b8957de6e7530bc83c4401d7a303f3f9", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=2cd48e8a3b71256d7db1ac61e8994c06620238b6", "patch": "@@ -72,7 +72,7 @@ pub fn method_signature(\n     id: NodeId,\n     ident: ast::Ident,\n     generics: &ast::Generics,\n-    m: &ast::MethodSig,\n+    m: &ast::FnSig,\n     scx: &SaveContext<'_, '_>,\n ) -> Option<Signature> {\n     if !scx.config.signatures {\n@@ -932,7 +932,7 @@ fn make_method_signature(\n     id: NodeId,\n     ident: ast::Ident,\n     generics: &ast::Generics,\n-    m: &ast::MethodSig,\n+    m: &ast::FnSig,\n     scx: &SaveContext<'_, '_>,\n ) -> Result {\n     // FIXME code dup with function signature"}, {"sha": "86a353cdfd2f60afb15dc8e9d4bdb21d62c7a0f7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=2cd48e8a3b71256d7db1ac61e8994c06620238b6", "patch": "@@ -1501,10 +1501,10 @@ pub struct MutTy {\n     pub mutbl: Mutability,\n }\n \n-/// Represents a method's signature in a trait declaration,\n-/// or in an implementation.\n+/// Represents a function's signature in a trait declaration,\n+/// trait implementation, or free function.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct MethodSig {\n+pub struct FnSig {\n     pub header: FnHeader,\n     pub decl: P<FnDecl>,\n }\n@@ -1528,7 +1528,7 @@ pub struct TraitItem {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum TraitItemKind {\n     Const(P<Ty>, Option<P<Expr>>),\n-    Method(MethodSig, Option<P<Block>>),\n+    Method(FnSig, Option<P<Block>>),\n     Type(GenericBounds, Option<P<Ty>>),\n     Macro(Mac),\n }\n@@ -1552,7 +1552,7 @@ pub struct ImplItem {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum ImplItemKind {\n     Const(P<Ty>, P<Expr>),\n-    Method(MethodSig, P<Block>),\n+    Method(FnSig, P<Block>),\n     TyAlias(P<Ty>),\n     OpaqueTy(GenericBounds),\n     Macro(Mac),"}, {"sha": "f2ad7dea73b2b3a671b466c594917f466d29f60e", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=2cd48e8a3b71256d7db1ac61e8994c06620238b6", "patch": "@@ -357,7 +357,7 @@ pub fn visit_bounds<T: MutVisitor>(bounds: &mut GenericBounds, vis: &mut T) {\n }\n \n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n-pub fn visit_method_sig<T: MutVisitor>(MethodSig { header, decl }: &mut MethodSig, vis: &mut T) {\n+pub fn visit_method_sig<T: MutVisitor>(FnSig { header, decl }: &mut FnSig, vis: &mut T) {\n     vis.visit_fn_header(header);\n     vis.visit_fn_decl(decl);\n }"}, {"sha": "500e70ae8e5c8eab51e30f041a5c36459e2a2eab", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=2cd48e8a3b71256d7db1ac61e8994c06620238b6", "patch": "@@ -8,7 +8,7 @@ use crate::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, Use\n use crate::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness};\n use crate::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n use crate::ast::{Ty, TyKind, Generics, GenericBounds, TraitRef, EnumDef, VariantData, StructField};\n-use crate::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, MethodSig, SelfKind, Param};\n+use crate::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, FnSig, SelfKind, Param};\n use crate::parse::token;\n use crate::tokenstream::{TokenTree, TokenStream};\n use crate::symbol::{kw, sym};\n@@ -1897,14 +1897,14 @@ impl<'a> Parser<'a> {\n     fn parse_method_sig(\n         &mut self,\n         is_name_required: fn(&token::Token) -> bool,\n-    ) -> PResult<'a, (Ident, MethodSig, Generics)> {\n+    ) -> PResult<'a, (Ident, FnSig, Generics)> {\n         let header = self.parse_fn_front_matter()?;\n         let (ident, decl, generics) = self.parse_fn_sig(ParamCfg {\n             is_self_allowed: true,\n             allow_c_variadic: false,\n             is_name_required,\n         })?;\n-        Ok((ident, MethodSig { header, decl }, generics))\n+        Ok((ident, FnSig { header, decl }, generics))\n     }\n \n     /// Parses all the \"front matter\" for a `fn` declaration, up to"}, {"sha": "e7335a00cb088fb7d30ee91688fdb0fa95c06396", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2cd48e8a3b71256d7db1ac61e8994c06620238b6", "patch": "@@ -1541,7 +1541,7 @@ impl<'a> State<'a> {\n     crate fn print_method_sig(&mut self,\n                             ident: ast::Ident,\n                             generics: &ast::Generics,\n-                            m: &ast::MethodSig,\n+                            m: &ast::FnSig,\n                             vis: &ast::Visibility)\n                             {\n         self.print_fn(&m.decl,"}, {"sha": "e2983db4318e4ccf42654856a9901385fa4e3c40", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=2cd48e8a3b71256d7db1ac61e8994c06620238b6", "patch": "@@ -25,7 +25,7 @@ pub enum FnKind<'a> {\n     ItemFn(Ident, &'a FnHeader, &'a Visibility, &'a Block),\n \n     /// E.g., `fn foo(&self)`.\n-    Method(Ident, &'a MethodSig, Option<&'a Visibility>, &'a Block),\n+    Method(Ident, &'a FnSig, Option<&'a Visibility>, &'a Block),\n \n     /// E.g., `|x, y| body`.\n     Closure(&'a Expr),"}, {"sha": "b24306def7482941591fbdbd6692aeb15dc35c11", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd48e8a3b71256d7db1ac61e8994c06620238b6/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=2cd48e8a3b71256d7db1ac61e8994c06620238b6", "patch": "@@ -950,7 +950,7 @@ impl<'a> MethodDef<'a> {\n \n         let trait_lo_sp = trait_.span.shrink_to_lo();\n \n-        let sig = ast::MethodSig {\n+        let sig = ast::FnSig {\n             header: ast::FnHeader {\n                 unsafety,\n                 abi: Abi::new(abi, trait_lo_sp),"}]}