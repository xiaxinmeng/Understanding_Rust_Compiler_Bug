{"sha": "d52f988dbb8c147d310926434b7ed2415a4a8719", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MmY5ODhkYmI4YzE0N2QzMTA5MjY0MzRiN2VkMjQxNWE0YTg3MTk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-19T05:43:54Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-13T03:43:37Z"}, "message": "Make moves explicit in rustdoc", "tree": {"sha": "3f6e983ff2634119b1b8664af3cd1eb493d07ff1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f6e983ff2634119b1b8664af3cd1eb493d07ff1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d52f988dbb8c147d310926434b7ed2415a4a8719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d52f988dbb8c147d310926434b7ed2415a4a8719", "html_url": "https://github.com/rust-lang/rust/commit/d52f988dbb8c147d310926434b7ed2415a4a8719", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d52f988dbb8c147d310926434b7ed2415a4a8719/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90d06b80fdc7f07c5589ecd702da17998d0ef7ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/90d06b80fdc7f07c5589ecd702da17998d0ef7ca", "html_url": "https://github.com/rust-lang/rust/commit/90d06b80fdc7f07c5589ecd702da17998d0ef7ca"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "27d4d51a010f327338206fbcec227c87840566d3", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=d52f988dbb8c147d310926434b7ed2415a4a8719", "patch": "@@ -57,14 +57,14 @@ fn from_file<T>(file: ~str, owner: SrvOwner<T>) -> T {\n fn run<T>(owner: SrvOwner<T>, source: ~str, +parse: Parser) -> T {\n \n     let srv_ = Srv({\n-        ch: do task::spawn_listener |po| {\n+        ch: do task::spawn_listener |move parse, po| {\n             act(po, source, parse);\n         }\n     });\n \n     let res = owner(srv_);\n     comm::send(srv_.ch, Exit);\n-    return res;\n+    move res\n }\n \n fn act(po: comm::Port<Msg>, source: ~str, parse: Parser) {\n@@ -97,7 +97,7 @@ fn exec<T:Send>(\n     let msg = HandleRequest(fn~(move f, ctxt: Ctxt) {\n         comm::send(ch, f(ctxt))\n     });\n-    comm::send(srv.ch, msg);\n+    comm::send(srv.ch, move msg);\n     comm::recv(po)\n }\n "}, {"sha": "cd310791b4dfd34e6ab7f231719011bfd5a2e1dd", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=d52f988dbb8c147d310926434b7ed2415a4a8719", "patch": "@@ -93,7 +93,7 @@ fn parse_item_attrs<T:Send>(\n     srv: astsrv::Srv,\n     id: doc::AstId,\n     +parse_attrs: fn~(~[ast::attribute]) -> T) -> T {\n-    do astsrv::exec(srv) |ctxt| {\n+    do astsrv::exec(srv) |move parse_attrs, ctxt| {\n         let attrs = match ctxt.ast_map.get(id) {\n           ast_map::node_item(item, _) => item.attrs,\n           ast_map::node_foreign_item(item, _, _) => item.attrs,"}, {"sha": "e8d914bd2cb8a4f99b487b1891c04ed2c5255b11", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=d52f988dbb8c147d310926434b7ed2415a4a8719", "patch": "@@ -71,18 +71,18 @@ fn mk_fold<T:Copy>(\n ) -> Fold<T> {\n     Fold({\n         ctxt: ctxt,\n-        fold_doc: fold_doc,\n-        fold_crate: fold_crate,\n-        fold_item: fold_item,\n-        fold_mod: fold_mod,\n-        fold_nmod: fold_nmod,\n-        fold_fn: fold_fn,\n-        fold_const: fold_const,\n-        fold_enum: fold_enum,\n-        fold_trait: fold_trait,\n-        fold_impl: fold_impl,\n-        fold_type: fold_type,\n-        fold_struct: fold_struct,\n+        fold_doc: move fold_doc,\n+        fold_crate: move fold_crate,\n+        fold_item: move fold_item,\n+        fold_mod: move fold_mod,\n+        fold_nmod: move fold_nmod,\n+        fold_fn: move fold_fn,\n+        fold_const: move fold_const,\n+        fold_enum: move fold_enum,\n+        fold_trait: move fold_trait,\n+        fold_impl: move fold_impl,\n+        fold_type: move fold_type,\n+        fold_struct: move fold_struct\n     })\n }\n "}, {"sha": "99357e254a4742b63c51632557702a95fe5d8319", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=d52f988dbb8c147d310926434b7ed2415a4a8719", "patch": "@@ -9,13 +9,14 @@ export mk_pass;\n export header_kind, header_name, header_text;\n \n fn mk_pass(+writer_factory: WriterFactory) -> Pass {\n-    let f = fn~(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n+    let f = fn~(move writer_factory,\n+                srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n         run(srv, doc, copy writer_factory)\n     };\n \n     {\n         name: ~\"markdown\",\n-        f: f\n+        f: move f\n     }\n }\n \n@@ -44,7 +45,7 @@ fn run(\n         ~\"mods last\", mods_last\n     ).f(srv, doc);\n \n-    write_markdown(sorted_doc, writer_factory);\n+    write_markdown(sorted_doc, move writer_factory);\n \n     return doc;\n }\n@@ -118,9 +119,9 @@ fn should_request_new_writer_for_each_page() {\n     let (srv, doc) = test::create_doc_srv(~\"mod a { }\");\n     // Split the document up into pages\n     let doc = page_pass::mk_pass(config::DocPerMod).f(srv, doc);\n-    write_markdown(doc, writer_factory);\n+    write_markdown(doc, move writer_factory);\n     // We expect two pages to have been written\n-    for iter::repeat(2u) {\n+    for iter::repeat(2) {\n         comm::recv(po);\n     }\n }\n@@ -150,8 +151,8 @@ fn should_write_title_for_each_page() {\n     let (srv, doc) = test::create_doc_srv(\n         ~\"#[link(name = \\\"core\\\")]; mod a { }\");\n     let doc = page_pass::mk_pass(config::DocPerMod).f(srv, doc);\n-    write_markdown(doc, writer_factory);\n-    for iter::repeat(2u) {\n+    write_markdown(doc, move writer_factory);\n+    for iter::repeat(2) {\n         let (page, markdown) = comm::recv(po);\n         match page {\n           doc::CratePage(_) => {\n@@ -845,7 +846,7 @@ mod test {\n         doc: doc::Doc\n     ) -> ~str {\n         let (writer_factory, po) = markdown_writer::future_writer_factory();\n-        write_markdown(doc, writer_factory);\n+        write_markdown(doc, move writer_factory);\n         return comm::recv(po).second();\n     }\n \n@@ -854,7 +855,7 @@ mod test {\n         doc: doc::Doc\n     ) -> ~str {\n         let (writer_factory, po) = markdown_writer::future_writer_factory();\n-        let pass = mk_pass(writer_factory);\n+        let pass = mk_pass(move writer_factory);\n         pass.f(srv, doc);\n         return comm::recv(po).second();\n     }"}, {"sha": "ea559ae2ee6bcb3046308529d70c69e09ade21e2", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=d52f988dbb8c147d310926434b7ed2415a4a8719", "patch": "@@ -146,7 +146,8 @@ fn readclose(fd: libc::c_int) -> ~str {\n }\n \n fn generic_writer(+process: fn~(markdown: ~str)) -> Writer {\n-    let ch = do task::spawn_listener |po: comm::Port<WriteInstr>| {\n+    let ch = do task::spawn_listener\n+        |move process, po: comm::Port<WriteInstr>| {\n         let mut markdown = ~\"\";\n         let mut keep_going = true;\n         while keep_going {\n@@ -155,7 +156,7 @@ fn generic_writer(+process: fn~(markdown: ~str)) -> Writer {\n               Done => keep_going = false\n             }\n         }\n-        process(markdown);\n+        process(move markdown);\n     };\n \n     fn~(+instr: WriteInstr) {\n@@ -274,22 +275,22 @@ fn future_writer_factory(\n         let writer_ch = comm::Chan(&writer_po);\n         do task::spawn {\n             let (writer, future) = future_writer();\n-            comm::send(writer_ch, writer);\n+            comm::send(writer_ch, move writer);\n             let s = future::get(&future);\n             comm::send(markdown_ch, (page, s));\n         }\n         comm::recv(writer_po)\n     };\n \n-    (writer_factory, markdown_po)\n+    (move writer_factory, markdown_po)\n }\n \n fn future_writer() -> (Writer, future::Future<~str>) {\n     let (chan, port) = pipes::stream();\n-    let writer = fn~(+instr: WriteInstr) {\n+    let writer = fn~(move chan, +instr: WriteInstr) {\n         chan.send(copy instr);\n     };\n-    let future = do future::from_fn {\n+    let future = do future::from_fn |move port| {\n         let mut res = ~\"\";\n         loop {\n             match port.recv() {\n@@ -299,5 +300,5 @@ fn future_writer() -> (Writer, future::Future<~str>) {\n         }\n         res\n     };\n-    (writer, future)\n+    (move writer, move future)\n }"}, {"sha": "fc911d23e043a66c70fd39e7874cfec266ab6bb9", "filename": "src/rustdoc/page_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpage_pass.rs?ref=d52f988dbb8c147d310926434b7ed2415a4a8719", "patch": "@@ -46,7 +46,7 @@ fn make_doc_from_pages(page_port: PagePort) -> doc::Doc {\n     loop {\n         let val = comm::recv(page_port);\n         if val.is_some() {\n-            pages += ~[option::unwrap(val)];\n+            pages += ~[option::unwrap(move val)];\n         } else {\n             break;\n         }"}, {"sha": "e09f57339a7c6451a3fbef70bdfd2c49616eed80", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=d52f988dbb8c147d310926434b7ed2415a4a8719", "patch": "@@ -87,5 +87,5 @@ fn time<T>(what: ~str, f: fn() -> T) -> T {\n     let rv = f();\n     let end = std::time::precise_time_s();\n     info!(\"time: %3.3f s    %s\", end - start, what);\n-    return rv;\n+    move rv\n }"}, {"sha": "0f0ee1a1066374ace96a285e4f4d155c62ed8a30", "filename": "src/rustdoc/sort_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_pass.rs?ref=d52f988dbb8c147d310926434b7ed2415a4a8719", "patch": "@@ -10,7 +10,7 @@ type ItemLtEq = pure fn~(v1: &doc::ItemTag, v2:  &doc::ItemTag) -> bool;\n fn mk_pass(name: ~str, +lteq: ItemLtEq) -> Pass {\n     {\n         name: name,\n-        f: fn~(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n+        f: fn~(move lteq, srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n             run(srv, doc, lteq)\n         }\n     }"}, {"sha": "f5ba9e9a2c9a417c7fb2141398ee22267fc8cfa4", "filename": "src/rustdoc/text_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52f988dbb8c147d310926434b7ed2415a4a8719/src%2Frustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftext_pass.rs?ref=d52f988dbb8c147d310926434b7ed2415a4a8719", "patch": "@@ -7,7 +7,7 @@ export mk_pass;\n fn mk_pass(name: ~str, +op: fn~(~str) -> ~str) -> Pass {\n     {\n         name: name,\n-        f: fn~(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n+        f: fn~(move op, srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n             run(srv, doc, op)\n         }\n     }"}]}