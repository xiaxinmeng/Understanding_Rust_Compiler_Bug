{"sha": "db02e61038a83cdd0208019a9a5e8037c5c42a21", "node_id": "C_kwDOAAsO6NoAKGRiMDJlNjEwMzhhODNjZGQwMjA4MDE5YTlhNWU4MDM3YzVjNDJhMjE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-09T17:10:48Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-04T09:09:52Z"}, "message": "Generate an intermediate temporary for `Drop` constants.\n\nTo limit the fallout from this, don't do this for the last (or only) operand in an rvalue.", "tree": {"sha": "d1c6c51defe6fca55c64010ee6e71ba41bdc8719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1c6c51defe6fca55c64010ee6e71ba41bdc8719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db02e61038a83cdd0208019a9a5e8037c5c42a21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db02e61038a83cdd0208019a9a5e8037c5c42a21", "html_url": "https://github.com/rust-lang/rust/commit/db02e61038a83cdd0208019a9a5e8037c5c42a21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db02e61038a83cdd0208019a9a5e8037c5c42a21/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afcd33a6fc37a5bfc4dbeebefffb73d54e95211c", "url": "https://api.github.com/repos/rust-lang/rust/commits/afcd33a6fc37a5bfc4dbeebefffb73d54e95211c", "html_url": "https://github.com/rust-lang/rust/commit/afcd33a6fc37a5bfc4dbeebefffb73d54e95211c"}], "stats": {"total": 160, "additions": 122, "deletions": 38}, "files": [{"sha": "c413b8ff82b2b9ae101963ae9cf5049ca4aa4d53", "filename": "compiler/rustc_mir_build/src/build/expr/as_operand.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/db02e61038a83cdd0208019a9a5e8037c5c42a21/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db02e61038a83cdd0208019a9a5e8037c5c42a21/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs?ref=db02e61038a83cdd0208019a9a5e8037c5c42a21", "patch": "@@ -1,7 +1,7 @@\n //! See docs in build/expr/mod.rs\n \n use crate::build::expr::category::Category;\n-use crate::build::{BlockAnd, BlockAndExtension, Builder};\n+use crate::build::{BlockAnd, BlockAndExtension, Builder, NeedsTemporary};\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n@@ -20,7 +20,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         expr: &Expr<'tcx>,\n     ) -> BlockAnd<Operand<'tcx>> {\n         let local_scope = self.local_scope();\n-        self.as_operand(block, Some(local_scope), expr, None)\n+        self.as_operand(block, Some(local_scope), expr, None, NeedsTemporary::Maybe)\n     }\n \n     /// Returns an operand suitable for use until the end of the current scope expression and\n@@ -94,32 +94,33 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ///\n     /// Like `as_local_call_operand`, except that the argument will\n     /// not be valid once `scope` ends.\n+    #[instrument(level = \"debug\", skip(self, scope))]\n     crate fn as_operand(\n         &mut self,\n         mut block: BasicBlock,\n         scope: Option<region::Scope>,\n         expr: &Expr<'tcx>,\n         local_info: Option<Box<LocalInfo<'tcx>>>,\n+        needs_temporary: NeedsTemporary,\n     ) -> BlockAnd<Operand<'tcx>> {\n-        debug!(\"as_operand(block={:?}, expr={:?} local_info={:?})\", block, expr, local_info);\n         let this = self;\n \n         if let ExprKind::Scope { region_scope, lint_level, value } = expr.kind {\n             let source_info = this.source_info(expr.span);\n             let region_scope = (region_scope, source_info);\n             return this.in_scope(region_scope, lint_level, |this| {\n-                this.as_operand(block, scope, &this.thir[value], local_info)\n+                this.as_operand(block, scope, &this.thir[value], local_info, needs_temporary)\n             });\n         }\n \n         let category = Category::of(&expr.kind).unwrap();\n-        debug!(\"as_operand: category={:?} for={:?}\", category, expr.kind);\n+        debug!(?category, ?expr.kind);\n         match category {\n-            Category::Constant => {\n+            Category::Constant if let NeedsTemporary::No = needs_temporary || !expr.ty.needs_drop(this.tcx, this.param_env) => {\n                 let constant = this.as_constant(expr);\n                 block.and(Operand::Constant(Box::new(constant)))\n             }\n-            Category::Place | Category::Rvalue(..) => {\n+            Category::Constant | Category::Place | Category::Rvalue(..) => {\n                 let operand = unpack!(block = this.as_temp(block, scope, expr, Mutability::Mut));\n                 if this.local_decls[operand].local_info.is_none() {\n                     this.local_decls[operand].local_info = local_info;\n@@ -176,6 +177,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         }\n \n-        this.as_operand(block, scope, expr, None)\n+        this.as_operand(block, scope, expr, None, NeedsTemporary::Maybe)\n     }\n }"}, {"sha": "d807500f1fbdc36f571a87672c3f3e0bb357aae1", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 67, "deletions": 18, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/db02e61038a83cdd0208019a9a5e8037c5c42a21/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db02e61038a83cdd0208019a9a5e8037c5c42a21/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=db02e61038a83cdd0208019a9a5e8037c5c42a21", "patch": "@@ -4,7 +4,7 @@ use rustc_index::vec::Idx;\n \n use crate::build::expr::as_place::PlaceBase;\n use crate::build::expr::category::{Category, RvalueFunc};\n-use crate::build::{BlockAnd, BlockAndExtension, Builder};\n+use crate::build::{BlockAnd, BlockAndExtension, Builder, NeedsTemporary};\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::middle::region;\n use rustc_middle::mir::AssertKind;\n@@ -52,17 +52,28 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 })\n             }\n             ExprKind::Repeat { value, count } => {\n-                let value_operand =\n-                    unpack!(block = this.as_operand(block, scope, &this.thir[value], None));\n+                let value_operand = unpack!(\n+                    block =\n+                        this.as_operand(block, scope, &this.thir[value], None, NeedsTemporary::No)\n+                );\n                 block.and(Rvalue::Repeat(value_operand, count))\n             }\n             ExprKind::Binary { op, lhs, rhs } => {\n-                let lhs = unpack!(block = this.as_operand(block, scope, &this.thir[lhs], None));\n-                let rhs = unpack!(block = this.as_operand(block, scope, &this.thir[rhs], None));\n+                let lhs = unpack!(\n+                    block =\n+                        this.as_operand(block, scope, &this.thir[lhs], None, NeedsTemporary::Maybe)\n+                );\n+                let rhs = unpack!(\n+                    block =\n+                        this.as_operand(block, scope, &this.thir[rhs], None, NeedsTemporary::No)\n+                );\n                 this.build_binary_op(block, op, expr_span, expr.ty, lhs, rhs)\n             }\n             ExprKind::Unary { op, arg } => {\n-                let arg = unpack!(block = this.as_operand(block, scope, &this.thir[arg], None));\n+                let arg = unpack!(\n+                    block =\n+                        this.as_operand(block, scope, &this.thir[arg], None, NeedsTemporary::No)\n+                );\n                 // Check for -MIN on signed integers\n                 if this.check_overflow && op == UnOp::Neg && expr.ty.is_signed() {\n                     let bool_ty = this.tcx.types.bool;\n@@ -167,13 +178,17 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block.and(Rvalue::Use(Operand::Move(Place::from(result))))\n             }\n             ExprKind::Cast { source } => {\n-                let source =\n-                    unpack!(block = this.as_operand(block, scope, &this.thir[source], None));\n+                let source = unpack!(\n+                    block =\n+                        this.as_operand(block, scope, &this.thir[source], None, NeedsTemporary::No)\n+                );\n                 block.and(Rvalue::Cast(CastKind::Misc, source, expr.ty))\n             }\n             ExprKind::Pointer { cast, source } => {\n-                let source =\n-                    unpack!(block = this.as_operand(block, scope, &this.thir[source], None));\n+                let source = unpack!(\n+                    block =\n+                        this.as_operand(block, scope, &this.thir[source], None, NeedsTemporary::No)\n+                );\n                 block.and(Rvalue::Cast(CastKind::Pointer(cast), source, expr.ty))\n             }\n             ExprKind::Array { ref fields } => {\n@@ -208,7 +223,17 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let fields: Vec<_> = fields\n                     .into_iter()\n                     .copied()\n-                    .map(|f| unpack!(block = this.as_operand(block, scope, &this.thir[f], None)))\n+                    .map(|f| {\n+                        unpack!(\n+                            block = this.as_operand(\n+                                block,\n+                                scope,\n+                                &this.thir[f],\n+                                None,\n+                                NeedsTemporary::Maybe\n+                            )\n+                        )\n+                    })\n                     .collect();\n \n                 block.and(Rvalue::Aggregate(Box::new(AggregateKind::Array(el_ty)), fields))\n@@ -219,7 +244,17 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let fields: Vec<_> = fields\n                     .into_iter()\n                     .copied()\n-                    .map(|f| unpack!(block = this.as_operand(block, scope, &this.thir[f], None)))\n+                    .map(|f| {\n+                        unpack!(\n+                            block = this.as_operand(\n+                                block,\n+                                scope,\n+                                &this.thir[f],\n+                                None,\n+                                NeedsTemporary::Maybe\n+                            )\n+                        )\n+                    })\n                     .collect();\n \n                 block.and(Rvalue::Aggregate(Box::new(AggregateKind::Tuple), fields))\n@@ -296,7 +331,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                         )\n                                     ),\n                                     _ => {\n-                                        unpack!(block = this.as_operand(block, scope, upvar, None))\n+                                        unpack!(\n+                                            block = this.as_operand(\n+                                                block,\n+                                                scope,\n+                                                upvar,\n+                                                None,\n+                                                NeedsTemporary::Maybe\n+                                            )\n+                                        )\n                                     }\n                                 }\n                             }\n@@ -325,13 +368,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     literal: ConstantKind::zero_sized(this.tcx.types.unit),\n                 }))))\n             }\n-            ExprKind::Yield { .. }\n-            | ExprKind::Literal { .. }\n+\n+            ExprKind::Literal { .. }\n             | ExprKind::NamedConst { .. }\n             | ExprKind::NonHirLiteral { .. }\n             | ExprKind::ConstParam { .. }\n             | ExprKind::ConstBlock { .. }\n-            | ExprKind::StaticRef { .. }\n+            | ExprKind::StaticRef { .. } => {\n+                let constant = this.as_constant(expr);\n+                block.and(Rvalue::Use(Operand::Constant(Box::new(constant))))\n+            }\n+\n+            ExprKind::Yield { .. }\n             | ExprKind::Block { .. }\n             | ExprKind::Match { .. }\n             | ExprKind::If { .. }\n@@ -359,9 +407,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // so make an operand and then return that\n                 debug_assert!(!matches!(\n                     Category::of(&expr.kind),\n-                    Some(Category::Rvalue(RvalueFunc::AsRvalue))\n+                    Some(Category::Rvalue(RvalueFunc::AsRvalue) | Category::Constant)\n                 ));\n-                let operand = unpack!(block = this.as_operand(block, scope, expr, None));\n+                let operand =\n+                    unpack!(block = this.as_operand(block, scope, expr, None, NeedsTemporary::No));\n                 block.and(Rvalue::Use(operand))\n             }\n         }"}, {"sha": "4399fdf8520a1bc69d78bc967d2f0467a86d4ecb", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/db02e61038a83cdd0208019a9a5e8037c5c42a21/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db02e61038a83cdd0208019a9a5e8037c5c42a21/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=db02e61038a83cdd0208019a9a5e8037c5c42a21", "patch": "@@ -1,7 +1,7 @@\n //! See docs in build/expr/mod.rs\n \n use crate::build::expr::category::{Category, RvalueFunc};\n-use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n+use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder, NeedsTemporary};\n use rustc_ast::InlineAsmOptions;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n@@ -329,7 +329,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                     block,\n                                     Some(scope),\n                                     &this.thir[f.expr],\n-                                    Some(local_info)\n+                                    Some(local_info),\n+                                    NeedsTemporary::Maybe,\n                                 )\n                             ),\n                         )\n@@ -516,8 +517,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             ExprKind::Yield { value } => {\n                 let scope = this.local_scope();\n-                let value =\n-                    unpack!(block = this.as_operand(block, Some(scope), &this.thir[value], None));\n+                let value = unpack!(\n+                    block = this.as_operand(\n+                        block,\n+                        Some(scope),\n+                        &this.thir[value],\n+                        None,\n+                        NeedsTemporary::No\n+                    )\n+                );\n                 let resume = this.cfg.start_new_block();\n                 this.cfg.terminate(\n                     block,"}, {"sha": "ce57e5fe846eb7e37323ae80451bbb544716658c", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db02e61038a83cdd0208019a9a5e8037c5c42a21/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db02e61038a83cdd0208019a9a5e8037c5c42a21/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=db02e61038a83cdd0208019a9a5e8037c5c42a21", "patch": "@@ -549,6 +549,18 @@ rustc_index::newtype_index! {\n     struct ScopeId { .. }\n }\n \n+#[derive(Debug)]\n+enum NeedsTemporary {\n+    /// Use this variant when whatever you are converting with `as_operand`\n+    /// is the last thing you are converting. This means that if we introduced\n+    /// an intermediate temporary, we'd only read it immediately after, so we can\n+    /// also avoid it.\n+    No,\n+    /// For all cases where you aren't sure or that are too expensive to compute\n+    /// for now. It is always safe to fall back to this.\n+    Maybe,\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n /// The `BlockAnd` \"monad\" packages up the new basic block along with a\n /// produced value (sometimes just unit, of course). The `unpack!`"}, {"sha": "a2a1a86ad989cee2c742a8112614fe29f264c783", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db02e61038a83cdd0208019a9a5e8037c5c42a21/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db02e61038a83cdd0208019a9a5e8037c5c42a21/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=db02e61038a83cdd0208019a9a5e8037c5c42a21", "patch": "@@ -6,6 +6,7 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n+#![feature(if_let_guard)]\n #![feature(let_chains)]\n #![feature(let_else)]\n #![feature(min_specialization)]"}, {"sha": "7613afdf4fef55d5e1164a6f31e32eb754ec0509", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db02e61038a83cdd0208019a9a5e8037c5c42a21/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/db02e61038a83cdd0208019a9a5e8037c5c42a21/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=db02e61038a83cdd0208019a9a5e8037c5c42a21", "patch": "@@ -16,6 +16,7 @@\n       scope 2 {\n       }\n +     scope 3 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         let mut _8: alloc::raw_vec::RawVec<u32>; // in scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +     }\n   \n       bb0: {\n@@ -34,8 +35,8 @@\n -         (*_5) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         Deinit((*_7));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: NonNull::<u32> { pointer: {0x4 as *const u32} }, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         StorageLive(_8);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         _8 = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: NonNull::<u32> { pointer: {0x4 as *const u32} }, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n@@ -46,7 +47,10 @@\n +                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++         Deinit((*_7));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         ((*_7).0: alloc::raw_vec::RawVec<u32>) = move _8; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_7).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         StorageDead(_8);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n           _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43"}, {"sha": "a2f70f61cac9d2981010bd0ef46a8fbb48ccd3d9", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db02e61038a83cdd0208019a9a5e8037c5c42a21/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/db02e61038a83cdd0208019a9a5e8037c5c42a21/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=db02e61038a83cdd0208019a9a5e8037c5c42a21", "patch": "@@ -16,6 +16,7 @@\n       scope 2 {\n       }\n +     scope 3 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         let mut _8: alloc::raw_vec::RawVec<u32>; // in scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +     }\n   \n       bb0: {\n@@ -34,8 +35,8 @@\n -         (*_5) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         Deinit((*_7));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: NonNull::<u32> { pointer: {0x4 as *const u32} }, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         StorageLive(_8);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         _8 = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: NonNull::<u32> { pointer: {0x4 as *const u32} }, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n@@ -46,7 +47,10 @@\n +                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++         Deinit((*_7));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         ((*_7).0: alloc::raw_vec::RawVec<u32>) = move _8; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_7).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         StorageDead(_8);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n           _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43"}, {"sha": "78d387386f8957c2c89996356391aba15b27901e", "filename": "src/test/ui/consts/issue-90762.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/db02e61038a83cdd0208019a9a5e8037c5c42a21/src%2Ftest%2Fui%2Fconsts%2Fissue-90762.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db02e61038a83cdd0208019a9a5e8037c5c42a21/src%2Ftest%2Fui%2Fconsts%2Fissue-90762.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90762.rs?ref=db02e61038a83cdd0208019a9a5e8037c5c42a21", "patch": "@@ -1,26 +1,31 @@\n // run-pass\n #![allow(unreachable_code)]\n \n-use std::sync::atomic::{AtomicBool, Ordering};\n+use std::sync::atomic::{AtomicBool, Ordering, AtomicUsize};\n \n struct Print(usize);\n \n impl Drop for Print {\n     fn drop(&mut self) {\n+        println!(\"{}\", self.0);\n         FOO[self.0].store(true, Ordering::Relaxed);\n+        assert_eq!(BAR.fetch_sub(1, Ordering::Relaxed), self.0);\n     }\n }\n \n const A: Print = Print(0);\n const B: Print = Print(1);\n \n-static FOO: [AtomicBool; 3] = [AtomicBool::new(false), AtomicBool::new(false), AtomicBool::new(false)];\n+static FOO: [AtomicBool; 3] =\n+    [AtomicBool::new(false), AtomicBool::new(false), AtomicBool::new(false)];\n+static BAR: AtomicUsize = AtomicUsize::new(2);\n \n fn main() {\n     loop {\n-        std::mem::forget(({A}, B, Print(2), break));\n+        std::mem::forget(({ A }, B, Print(2), break));\n     }\n     for (i, b) in FOO.iter().enumerate() {\n         assert!(b.load(Ordering::Relaxed), \"{} not set\", i);\n     }\n-}\n\\ No newline at end of file\n+    assert_eq!(BAR.fetch_add(1, Ordering::Relaxed), usize::max_value());\n+}"}]}