{"sha": "096df4e134b3ed4e7f6152d7c8326e38dfbd7309", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NmRmNGUxMzRiM2VkNGU3ZjYxNTJkN2M4MzI2ZTM4ZGZiZDczMDk=", "commit": {"author": {"name": "Jonathan S", "email": "gereeter@gmail.com", "date": "2014-12-30T18:30:42Z"}, "committer": {"name": "Jonathan S", "email": "gereeter@gmail.com", "date": "2014-12-30T18:30:42Z"}, "message": "Purged ReducedGraphParent", "tree": {"sha": "e276a1eb62a98eb473824c05a85d610c8263b1c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e276a1eb62a98eb473824c05a85d610c8263b1c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/096df4e134b3ed4e7f6152d7c8326e38dfbd7309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/096df4e134b3ed4e7f6152d7c8326e38dfbd7309", "html_url": "https://github.com/rust-lang/rust/commit/096df4e134b3ed4e7f6152d7c8326e38dfbd7309", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/096df4e134b3ed4e7f6152d7c8326e38dfbd7309/comments", "author": null, "committer": null, "parents": [{"sha": "28659cf8041327bfcf03af944a5c228b6b6847d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/28659cf8041327bfcf03af944a5c228b6b6847d2", "html_url": "https://github.com/rust-lang/rust/commit/28659cf8041327bfcf03af944a5c228b6b6847d2"}], "stats": {"total": 126, "additions": 41, "deletions": 85}, "files": [{"sha": "755a9ebcd79a17d9fd79934f3432f03b2dc473eb", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 41, "deletions": 68, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/096df4e134b3ed4e7f6152d7c8326e38dfbd7309/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096df4e134b3ed4e7f6152d7c8326e38dfbd7309/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=096df4e134b3ed4e7f6152d7c8326e38dfbd7309", "patch": "@@ -23,7 +23,6 @@ use Namespace::{TypeNS, ValueNS};\n use NameBindings;\n use ParentLink::{mod, ModuleParentLink, BlockParentLink};\n use Resolver;\n-use ReducedGraphParent::{mod, ModuleReducedGraphParent};\n use RibKind::*;\n use Shadowable;\n use TypeNsDef;\n@@ -111,7 +110,7 @@ impl<'a, 'b:'a, 'tcx:'b> DerefMut<Resolver<'b, 'tcx>> for GraphBuilder<'a, 'b, '\n impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     /// Constructs the reduced graph for the entire crate.\n     fn build_reduced_graph(self, krate: &ast::Crate) {\n-        let parent = ModuleReducedGraphParent(self.graph_root.get_module());\n+        let parent = self.graph_root.get_module();\n         let mut visitor = BuildReducedGraphVisitor {\n             builder: self,\n             parent: parent\n@@ -131,7 +130,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     /// a block.\n     fn add_child(&self,\n                  name: Name,\n-                 reduced_graph_parent: ReducedGraphParent,\n+                 parent: Rc<Module>,\n                  duplicate_checking_mode: DuplicateCheckingMode,\n                  // For printing errors\n                  sp: Span)\n@@ -140,18 +139,16 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         // child name directly. Otherwise, we create or reuse an anonymous\n         // module and add the child to that.\n \n-        let module_ = reduced_graph_parent.module();\n-\n-        self.check_for_conflicts_between_external_crates_and_items(&*module_,\n+        self.check_for_conflicts_between_external_crates_and_items(&*parent,\n                                                                    name,\n                                                                    sp);\n \n         // Add or reuse the child.\n-        let child = module_.children.borrow().get(&name).cloned();\n+        let child = parent.children.borrow().get(&name).cloned();\n         match child {\n             None => {\n                 let child = Rc::new(NameBindings::new());\n-                module_.children.borrow_mut().insert(name, child.clone());\n+                parent.children.borrow_mut().insert(name, child.clone());\n                 child\n             }\n             Some(child) => {\n@@ -268,20 +265,16 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         return false;\n     }\n \n-    fn get_parent_link(&mut self, parent: ReducedGraphParent, name: Name)\n+    fn get_parent_link(&mut self, parent: Rc<Module>, name: Name)\n                        -> ParentLink {\n-        match parent {\n-            ModuleReducedGraphParent(module_) => {\n-                return ModuleParentLink(module_.downgrade(), name);\n-            }\n-        }\n+        ModuleParentLink(parent.downgrade(), name)\n     }\n \n     /// Constructs the reduced graph for one item.\n     fn build_reduced_graph_for_item(&mut self,\n                                     item: &Item,\n-                                    parent: ReducedGraphParent)\n-                                    -> ReducedGraphParent\n+                                    parent: Rc<Module>)\n+                                    -> Rc<Module>\n     {\n         let name = item.ident.name;\n         let sp = item.span;\n@@ -302,7 +295,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                             item.vis == ast::Public,\n                                             sp);\n \n-                ModuleReducedGraphParent(name_bindings.get_module())\n+                name_bindings.get_module()\n             }\n \n             ItemForeignMod(..) => parent,\n@@ -370,7 +363,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     self.build_reduced_graph_for_variant(\n                         &**variant,\n                         local_def(item.id),\n-                        ModuleReducedGraphParent(name_bindings.get_module()));\n+                        name_bindings.get_module());\n                 }\n                 parent\n             }\n@@ -446,22 +439,19 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     }\n                     Some(mod_name) => {\n                         // Create the module and add all methods.\n-                        let parent_opt = parent.module().children.borrow()\n-                            .get(&mod_name).cloned();\n+                        let parent_opt = parent.children.borrow().get(&mod_name).cloned();\n                         let new_parent = match parent_opt {\n                             // It already exists\n                             Some(ref child) if child.get_module_if_available()\n                                 .is_some() &&\n                                 (child.get_module().kind.get() == ImplModuleKind ||\n                                  child.get_module().kind.get() == TraitModuleKind) => {\n-                                    ModuleReducedGraphParent(child.get_module())\n+                                    child.get_module()\n                                 }\n                             Some(ref child) if child.get_module_if_available()\n                                 .is_some() &&\n                                 child.get_module().kind.get() ==\n-                                EnumModuleKind => {\n-                                    ModuleReducedGraphParent(child.get_module())\n-                                }\n+                                EnumModuleKind => child.get_module(),\n                             // Create the module\n                             _ => {\n                                 let name_bindings =\n@@ -485,8 +475,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                                             is_public,\n                                                             sp);\n \n-                                ModuleReducedGraphParent(\n-                                    name_bindings.get_module())\n+                                name_bindings.get_module()\n                             }\n                         };\n \n@@ -576,8 +565,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                             false,\n                                             item.vis == ast::Public,\n                                             sp);\n-                let module_parent = ModuleReducedGraphParent(name_bindings.\n-                                                             get_module());\n+                let module_parent = name_bindings.get_module();\n \n                 let def_id = local_def(item.id);\n \n@@ -654,7 +642,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     fn build_reduced_graph_for_variant(&mut self,\n                                        variant: &Variant,\n                                        item_id: DefId,\n-                                       parent: ReducedGraphParent) {\n+                                       parent: Rc<Module>) {\n         let name = variant.node.name.name;\n         let is_exported = match variant.node.kind {\n             TupleVariantKind(_) => false,\n@@ -680,8 +668,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n     /// Constructs the reduced graph for one 'view item'. View items consist\n     /// of imports and use directives.\n-    fn build_reduced_graph_for_view_item(&mut self, view_item: &ViewItem,\n-                                         parent: ReducedGraphParent) {\n+    fn build_reduced_graph_for_view_item(&mut self, view_item: &ViewItem, parent: Rc<Module>) {\n         match view_item.node {\n             ViewItemUse(ref view_path) => {\n                 // Extract and intern the module part of the path. For\n@@ -703,7 +690,6 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 };\n \n                 // Build up the import directives.\n-                let module_ = parent.module();\n                 let is_public = view_item.vis == ast::Public;\n                 let shadowable =\n                     view_item.attrs\n@@ -729,7 +715,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n                         let subclass = SingleImport(binding.name,\n                                                     source_name);\n-                        self.build_import_directive(&*module_,\n+                        self.build_import_directive(&*parent,\n                                                     module_path,\n                                                     subclass,\n                                                     view_path.span,\n@@ -771,7 +757,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                 }\n                             };\n                             self.build_import_directive(\n-                                &*module_,\n+                                &*parent,\n                                 module_path,\n                                 SingleImport(name, name),\n                                 source_item.span,\n@@ -781,7 +767,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                         }\n                     }\n                     ViewPathGlob(_, id) => {\n-                        self.build_import_directive(&*module_,\n+                        self.build_import_directive(&*parent,\n                                                     module_path,\n                                                     GlobImport,\n                                                     view_path.span,\n@@ -798,8 +784,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                      .find_extern_mod_stmt_cnum(node_id).iter() {\n                     let def_id = DefId { krate: crate_id, node: 0 };\n                     self.external_exports.insert(def_id);\n-                    let parent_link =\n-                        ModuleParentLink(parent.module().downgrade(), name.name);\n+                    let parent_link = ModuleParentLink(parent.downgrade(), name.name);\n                     let external_module = Rc::new(Module::new(parent_link,\n                                                               Some(def_id),\n                                                               NormalModuleKind,\n@@ -808,11 +793,11 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     debug!(\"(build reduced graph for item) found extern `{}`\",\n                             self.module_to_string(&*external_module));\n                     self.check_for_conflicts_between_external_crates(\n-                        &*parent.module(),\n+                        &*parent,\n                         name.name,\n                         view_item.span);\n-                    parent.module().external_module_children.borrow_mut()\n-                                   .insert(name.name, external_module.clone());\n+                    parent.external_module_children.borrow_mut()\n+                          .insert(name.name, external_module.clone());\n                     self.build_reduced_graph_for_external_crate(external_module);\n                 }\n             }\n@@ -822,7 +807,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     /// Constructs the reduced graph for one foreign item.\n     fn build_reduced_graph_for_foreign_item<F>(&mut self,\n                                                foreign_item: &ForeignItem,\n-                                               parent: ReducedGraphParent,\n+                                               parent: Rc<Module>,\n                                                f: F) where\n         F: FnOnce(&mut Resolver),\n     {\n@@ -854,28 +839,22 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn build_reduced_graph_for_block(&mut self,\n-                                         block: &Block,\n-                                         parent: ReducedGraphParent)\n-                                            -> ReducedGraphParent\n-    {\n+    fn build_reduced_graph_for_block(&mut self, block: &Block, parent: Rc<Module>) -> Rc<Module> {\n         if self.block_needs_anonymous_module(block) {\n             let block_id = block.id;\n \n             debug!(\"(building reduced graph for block) creating a new \\\n                     anonymous module for block {}\",\n                    block_id);\n \n-            let parent_module = parent.module();\n             let new_module = Rc::new(Module::new(\n-                BlockParentLink(parent_module.downgrade(), block_id),\n+                BlockParentLink(parent.downgrade(), block_id),\n                 None,\n                 AnonymousModuleKind,\n                 false,\n                 false));\n-            parent_module.anonymous_children.borrow_mut()\n-                         .insert(block_id, new_module.clone());\n-            ModuleReducedGraphParent(new_module)\n+            parent.anonymous_children.borrow_mut().insert(block_id, new_module.clone());\n+            new_module\n         } else {\n             parent\n         }\n@@ -887,19 +866,15 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                            child_name_bindings: &NameBindings,\n                            final_ident: &str,\n                            name: Name,\n-                           new_parent: ReducedGraphParent) {\n+                           new_parent: Rc<Module>) {\n         debug!(\"(building reduced graph for \\\n                 external crate) building external def, priv {}\",\n                vis);\n         let is_public = vis == ast::Public;\n         let modifiers = if is_public { PUBLIC } else { DefModifiers::empty() } | IMPORTABLE;\n-        let is_exported = is_public && match new_parent {\n-            ModuleReducedGraphParent(ref module) => {\n-                match module.def_id.get() {\n-                    None => true,\n-                    Some(did) => self.external_exports.contains(&did)\n-                }\n-            }\n+        let is_exported = is_public && match new_parent.def_id.get() {\n+            None => true,\n+            Some(did) => self.external_exports.contains(&did)\n         };\n         if is_exported {\n             self.external_exports.insert(def.def_id());\n@@ -969,7 +944,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 Some(ref def) => (modifiers & !IMPORTABLE) | (def.modifiers & IMPORTABLE),\n                 None => modifiers\n             };\n-            if new_parent.module().kind.get() != NormalModuleKind {\n+            if new_parent.kind.get() != NormalModuleKind {\n                 modifiers = modifiers & !IMPORTABLE;\n             }\n             child_name_bindings.define_value(def, DUMMY_SP, modifiers);\n@@ -1070,7 +1045,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     _ => {\n                         let child_name_bindings =\n                             self.add_child(name,\n-                                           ModuleReducedGraphParent(root.clone()),\n+                                           root.clone(),\n                                            OverwriteDuplicates,\n                                            DUMMY_SP);\n \n@@ -1079,7 +1054,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                                  &*child_name_bindings,\n                                                  token::get_name(name).get(),\n                                                  name,\n-                                                 ModuleReducedGraphParent(root));\n+                                                 root);\n                     }\n                 }\n             }\n@@ -1100,7 +1075,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                 let child_name_bindings =\n                                     self.add_child(\n                                         final_name,\n-                                        ModuleReducedGraphParent(root.clone()),\n+                                        root.clone(),\n                                         OverwriteDuplicates,\n                                         DUMMY_SP);\n \n@@ -1123,8 +1098,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                     }\n                                     Some(_) | None => {\n                                         let parent_link =\n-                                            self.get_parent_link(ModuleReducedGraphParent(root),\n-                                                                 final_name);\n+                                            self.get_parent_link(root, final_name);\n                                         child_name_bindings.define_module(\n                                             parent_link,\n                                             Some(def),\n@@ -1139,8 +1113,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                 }\n \n                                 // Add each static method to the module.\n-                                let new_parent =\n-                                    ModuleReducedGraphParent(type_module);\n+                                let new_parent = type_module;\n                                 for method_info in methods.iter() {\n                                     let name = method_info.name;\n                                     debug!(\"(building reduced graph for \\\n@@ -1290,7 +1263,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n struct BuildReducedGraphVisitor<'a, 'b:'a, 'tcx:'b> {\n     builder: GraphBuilder<'a, 'b, 'tcx>,\n-    parent: ReducedGraphParent\n+    parent: Rc<Module>\n }\n \n impl<'a, 'b, 'v, 'tcx> Visitor<'v> for BuildReducedGraphVisitor<'a, 'b, 'tcx> {"}, {"sha": "a1412bf2ffe450b399a6e666d23ddd1a52f6dc5c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/096df4e134b3ed4e7f6152d7c8326e38dfbd7309/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096df4e134b3ed4e7f6152d7c8326e38dfbd7309/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=096df4e134b3ed4e7f6152d7c8326e38dfbd7309", "patch": "@@ -29,7 +29,6 @@ use self::Namespace::*;\n use self::NamespaceResult::*;\n use self::NameDefinition::*;\n use self::ImportDirectiveSubclass::*;\n-use self::ReducedGraphParent::*;\n use self::ResolveResult::*;\n use self::FallbackSuggestion::*;\n use self::TypeParameters::*;\n@@ -185,22 +184,6 @@ enum ImportDirectiveSubclass {\n     GlobImport\n }\n \n-/// The context that we thread through while building the reduced graph.\n-#[deriving(Clone)]\n-enum ReducedGraphParent {\n-    ModuleReducedGraphParent(Rc<Module>)\n-}\n-\n-impl ReducedGraphParent {\n-    fn module(&self) -> Rc<Module> {\n-        match *self {\n-            ModuleReducedGraphParent(ref m) => {\n-                m.clone()\n-            }\n-        }\n-    }\n-}\n-\n type ErrorMessage = Option<(Span, String)>;\n \n enum ResolveResult<T> {"}]}