{"sha": "c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "node_id": "C_kwDOAAsO6NoAKGM5NTcwN2EyOWJjN2ZkYzRmNmVlNjVkNDczNGIxNzQyNGZkYzdkMjU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-28T10:11:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-28T10:11:09Z"}, "message": "Rollup merge of #107398 - scottmcm:its-their-funeral, r=dtolnay\n\nRemove `ControlFlow::{BREAK, CONTINUE}`\n\nLibs-API decided to remove these in #102697.\n\nFollow-up to #107023, which removed them from `compiler/`, but a couple new ones showed up since that was merged.\n\nr? libs", "tree": {"sha": "dc1cfa7b7c9d93a1453ef1c60ec744b1c4943562", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc1cfa7b7c9d93a1453ef1c60ec744b1c4943562"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj1PS9CRBK7hj4Ov3rIwAAv4UIAIOk8OQWqy9W4jOZtnper22x\nTGvmmGJqohjJRhhznRlY7uTZ5CQFTACzqeAGiwhroP83m4dbBQzaOCEuYwgGDzfo\nXwuJ0CxgBZmiHzlOUyvfeQt2DuCMbEYEA5e8G1buBmyWAV+ugM0bEy09R28p122q\npS01/NKDfNSyga2blTEvhkoHXMVDpeEjbs0Y4tQYS2Kxq60vUM5EtIYe2rXc7df2\n8mgPTPlh64WjGY/x23k+xynwx5C+IXxf+9ACqDyCqr6699kG3nvmm9OIfO0DICJT\nOsXhQPupMjHwJObij2mF1PS25cXIcAuiqPtLzg47gyFrvAxI6zNzRP+6+0MT+30=\n=cwD6\n-----END PGP SIGNATURE-----\n", "payload": "tree dc1cfa7b7c9d93a1453ef1c60ec744b1c4943562\nparent 6bd09e0cd66a085e14103b1bda84287bdf1f44b2\nparent c4fa0d3ea6e8a8d1e8f2965b5a84d9775f31610b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674900669 +0100\ncommitter GitHub <noreply@github.com> 1674900669 +0100\n\nRollup merge of #107398 - scottmcm:its-their-funeral, r=dtolnay\n\nRemove `ControlFlow::{BREAK, CONTINUE}`\n\nLibs-API decided to remove these in #102697.\n\nFollow-up to #107023, which removed them from `compiler/`, but a couple new ones showed up since that was merged.\n\nr? libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "html_url": "https://github.com/rust-lang/rust/commit/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bd09e0cd66a085e14103b1bda84287bdf1f44b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bd09e0cd66a085e14103b1bda84287bdf1f44b2", "html_url": "https://github.com/rust-lang/rust/commit/6bd09e0cd66a085e14103b1bda84287bdf1f44b2"}, {"sha": "c4fa0d3ea6e8a8d1e8f2965b5a84d9775f31610b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4fa0d3ea6e8a8d1e8f2965b5a84d9775f31610b", "html_url": "https://github.com/rust-lang/rust/commit/c4fa0d3ea6e8a8d1e8f2965b5a84d9775f31610b"}], "stats": {"total": 102, "additions": 28, "deletions": 74}, "files": [{"sha": "1961344e8385f18e9aa938369dae9c4c4cdfdd2a", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "patch": "@@ -93,24 +93,24 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if t.needs_infer() {\n                     if ty::Term::from(t) == self.term {\n-                        ControlFlow::BREAK\n+                        ControlFlow::Break(())\n                     } else {\n                         t.super_visit_with(self)\n                     }\n                 } else {\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n             }\n \n             fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if c.needs_infer() {\n                     if ty::Term::from(c) == self.term {\n-                        ControlFlow::BREAK\n+                        ControlFlow::Break(())\n                     } else {\n                         c.super_visit_with(self)\n                     }\n                 } else {\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n             }\n         }"}, {"sha": "6bdf53f7fc9dd8a0d0a0ced46f5dd9ea2941bf7d", "filename": "library/core/src/iter/adapters/filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs?ref=c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "patch": "@@ -99,7 +99,7 @@ where\n         ) -> impl FnMut((), T) -> ControlFlow<B> + '_ {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n-                None => ControlFlow::CONTINUE,\n+                None => ControlFlow::Continue(()),\n             }\n         }\n "}, {"sha": "b040a0ea9011bb88ae1fc35fe153367be3eec980", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "patch": "@@ -539,7 +539,7 @@ where\n         #[rustc_inherit_overflow_checks]\n         fn advance<U: Iterator>(n: usize, iter: &mut U) -> ControlFlow<(), usize> {\n             match iter.advance_by(n) {\n-                Ok(()) => ControlFlow::BREAK,\n+                Ok(()) => ControlFlow::Break(()),\n                 Err(advanced) => ControlFlow::Continue(n - advanced),\n             }\n         }\n@@ -629,7 +629,7 @@ where\n         #[rustc_inherit_overflow_checks]\n         fn advance<U: DoubleEndedIterator>(n: usize, iter: &mut U) -> ControlFlow<(), usize> {\n             match iter.advance_back_by(n) {\n-                Ok(()) => ControlFlow::BREAK,\n+                Ok(()) => ControlFlow::Break(()),\n                 Err(advanced) => ControlFlow::Continue(n - advanced),\n             }\n         }"}, {"sha": "ed23873cdde7cc7e0ae7232504265d5494b96842", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "patch": "@@ -352,7 +352,7 @@ pub trait DoubleEndedIterator: Iterator {\n         #[inline]\n         fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {\n             move |(), x| {\n-                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n+                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }\n             }\n         }\n "}, {"sha": "5a0b8594104ee1d1d5e120f5704539205d8bf946", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "patch": "@@ -2601,10 +2601,10 @@ pub trait Iterator {\n         #[inline]\n         fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {\n             move |(), x| {\n-                if f(x) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }\n+                if f(x) { ControlFlow::Continue(()) } else { ControlFlow::Break(()) }\n             }\n         }\n-        self.try_fold((), check(f)) == ControlFlow::CONTINUE\n+        self.try_fold((), check(f)) == ControlFlow::Continue(())\n     }\n \n     /// Tests if any element of the iterator matches a predicate.\n@@ -2654,11 +2654,11 @@ pub trait Iterator {\n         #[inline]\n         fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {\n             move |(), x| {\n-                if f(x) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n+                if f(x) { ControlFlow::Break(()) } else { ControlFlow::Continue(()) }\n             }\n         }\n \n-        self.try_fold((), check(f)) == ControlFlow::BREAK\n+        self.try_fold((), check(f)) == ControlFlow::Break(())\n     }\n \n     /// Searches for an element of an iterator that satisfies a predicate.\n@@ -2717,7 +2717,7 @@ pub trait Iterator {\n         #[inline]\n         fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {\n             move |(), x| {\n-                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n+                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }\n             }\n         }\n \n@@ -2749,7 +2749,7 @@ pub trait Iterator {\n         fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut((), T) -> ControlFlow<B> {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n-                None => ControlFlow::CONTINUE,\n+                None => ControlFlow::Continue(()),\n             }\n         }\n \n@@ -2812,7 +2812,7 @@ pub trait Iterator {\n             R: Residual<Option<I>>,\n         {\n             move |(), x| match f(&x).branch() {\n-                ControlFlow::Continue(false) => ControlFlow::CONTINUE,\n+                ControlFlow::Continue(false) => ControlFlow::Continue(()),\n                 ControlFlow::Continue(true) => ControlFlow::Break(Try::from_output(Some(x))),\n                 ControlFlow::Break(r) => ControlFlow::Break(FromResidual::from_residual(r)),\n             }\n@@ -3491,7 +3491,7 @@ pub trait Iterator {\n             F: FnMut(X, Y) -> Ordering,\n         {\n             move |x, y| match cmp(x, y) {\n-                Ordering::Equal => ControlFlow::CONTINUE,\n+                Ordering::Equal => ControlFlow::Continue(()),\n                 non_eq => ControlFlow::Break(non_eq),\n             }\n         }\n@@ -3567,7 +3567,7 @@ pub trait Iterator {\n             F: FnMut(X, Y) -> Option<Ordering>,\n         {\n             move |x, y| match partial_cmp(x, y) {\n-                Some(Ordering::Equal) => ControlFlow::CONTINUE,\n+                Some(Ordering::Equal) => ControlFlow::Continue(()),\n                 non_eq => ControlFlow::Break(non_eq),\n             }\n         }\n@@ -3625,7 +3625,7 @@ pub trait Iterator {\n             F: FnMut(X, Y) -> bool,\n         {\n             move |x, y| {\n-                if eq(x, y) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }\n+                if eq(x, y) { ControlFlow::Continue(()) } else { ControlFlow::Break(()) }\n             }\n         }\n \n@@ -3859,7 +3859,7 @@ pub trait Iterator {\n \n /// Compares two iterators element-wise using the given function.\n ///\n-/// If `ControlFlow::CONTINUE` is returned from the function, the comparison moves on to the next\n+/// If `ControlFlow::Continue(())` is returned from the function, the comparison moves on to the next\n /// elements of both iterators. Returning `ControlFlow::Break(x)` short-circuits the iteration and\n /// returns `ControlFlow::Break(x)`. If one of the iterators runs out of elements,\n /// `ControlFlow::Continue(ord)` is returned where `ord` is the result of comparing the lengths of"}, {"sha": "117706fb4b28d3379bf1d8176a4cf9bbc2832018", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "patch": "@@ -259,46 +259,3 @@ impl<R: ops::Try> ControlFlow<R, R::Output> {\n         }\n     }\n }\n-\n-impl<B> ControlFlow<B, ()> {\n-    /// It's frequently the case that there's no value needed with `Continue`,\n-    /// so this provides a way to avoid typing `(())`, if you prefer it.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(control_flow_enum)]\n-    /// use std::ops::ControlFlow;\n-    ///\n-    /// let mut partial_sum = 0;\n-    /// let last_used = (1..10).chain(20..25).try_for_each(|x| {\n-    ///     partial_sum += x;\n-    ///     if partial_sum > 100 { ControlFlow::Break(x) }\n-    ///     else { ControlFlow::CONTINUE }\n-    /// });\n-    /// assert_eq!(last_used.break_value(), Some(22));\n-    /// ```\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n-    pub const CONTINUE: Self = ControlFlow::Continue(());\n-}\n-\n-impl<C> ControlFlow<(), C> {\n-    /// APIs like `try_for_each` don't need values with `Break`,\n-    /// so this provides a way to avoid typing `(())`, if you prefer it.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(control_flow_enum)]\n-    /// use std::ops::ControlFlow;\n-    ///\n-    /// let mut partial_sum = 0;\n-    /// (1..10).chain(20..25).try_for_each(|x| {\n-    ///     if partial_sum > 100 { ControlFlow::BREAK }\n-    ///     else { partial_sum += x; ControlFlow::CONTINUE }\n-    /// });\n-    /// assert_eq!(partial_sum, 108);\n-    /// ```\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n-    pub const BREAK: Self = ControlFlow::Break(());\n-}"}, {"sha": "4c8db2c6784a52267c06cfb68db3c2382296624c", "filename": "src/librustdoc/html/length_limit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs?ref=c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "patch": "@@ -61,14 +61,14 @@ impl HtmlWithLimit {\n     /// and returns [`ControlFlow::Break`].\n     pub(super) fn push(&mut self, text: &str) -> ControlFlow<(), ()> {\n         if self.len + text.len() > self.limit {\n-            return ControlFlow::BREAK;\n+            return ControlFlow::Break(());\n         }\n \n         self.flush_queue();\n         write!(self.buf, \"{}\", Escape(text)).unwrap();\n         self.len += text.len();\n \n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     /// Open an HTML tag."}, {"sha": "2185c034890fa3de43c28546d9a6844f465a2d99", "filename": "src/librustdoc/html/length_limit/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Flibrustdoc%2Fhtml%2Flength_limit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Flibrustdoc%2Fhtml%2Flength_limit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flength_limit%2Ftests.rs?ref=c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "patch": "@@ -83,7 +83,7 @@ fn past_the_limit() {\n         buf.push(\"word#\")?;\n         buf.push(&n.to_string())?;\n         buf.close_tag();\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     });\n     buf.close_tag();\n     assert_eq!("}, {"sha": "00e3f859bfcb30dd62dd1f1cde00a9ba41a294ea", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "patch": "@@ -1188,18 +1188,18 @@ fn markdown_summary_with_limit(\n             Event::Start(tag) => match tag {\n                 Tag::Emphasis => buf.open_tag(\"em\"),\n                 Tag::Strong => buf.open_tag(\"strong\"),\n-                Tag::CodeBlock(..) => return ControlFlow::BREAK,\n+                Tag::CodeBlock(..) => return ControlFlow::Break(()),\n                 _ => {}\n             },\n             Event::End(tag) => match tag {\n                 Tag::Emphasis | Tag::Strong => buf.close_tag(),\n-                Tag::Paragraph | Tag::Heading(..) => return ControlFlow::BREAK,\n+                Tag::Paragraph | Tag::Heading(..) => return ControlFlow::Break(()),\n                 _ => {}\n             },\n             Event::HardBreak | Event::SoftBreak => buf.push(\" \")?,\n             _ => {}\n         };\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     });\n \n     (buf.finish(), stopped_early)"}, {"sha": "64108c882851838286923356613f93490bf5e7a2", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "patch": "@@ -6,7 +6,6 @@\n #![feature(array_methods)]\n #![feature(assert_matches)]\n #![feature(box_patterns)]\n-#![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(is_terminal)]\n #![feature(let_chains)]"}, {"sha": "d06830397761bd4b9d52997caaaf2c024820c34a", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "patch": "@@ -1,7 +1,6 @@\n #![feature(array_windows)]\n #![feature(binary_heap_into_iter_sorted)]\n #![feature(box_patterns)]\n-#![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(iter_intersperse)]\n #![feature(let_chains)]"}, {"sha": "5e01ed90ff0997402337ae9cba753f55495c2fb4", "filename": "src/tools/clippy/clippy_lints/src/methods/collapsible_str_replace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcollapsible_str_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcollapsible_str_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcollapsible_str_replace.rs?ref=c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "patch": "@@ -54,7 +54,7 @@ fn collect_replace_calls<'tcx>(\n                 from_args.push_front(from);\n                 ControlFlow::Continue(())\n             } else {\n-                ControlFlow::BREAK\n+                ControlFlow::Break(())\n             }\n         } else {\n             ControlFlow::Continue(())"}, {"sha": "a246291f9a9bdab545c0372bc3e2d0d96774580b", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "patch": "@@ -1,6 +1,5 @@\n #![feature(array_chunks)]\n #![feature(box_patterns)]\n-#![feature(control_flow_enum)]\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n #![feature(never_type)]"}, {"sha": "d7f466c1976361bb293a087f657f7478c9537ca5", "filename": "src/tools/clippy/clippy_utils/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs?ref=c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "patch": "@@ -327,7 +327,7 @@ fn is_assert_arg(cx: &LateContext<'_>, expr: &Expr<'_>, assert_expn: ExpnId) ->\n         } else {\n             match cx.tcx.item_name(macro_call.def_id) {\n                 // `cfg!(debug_assertions)` in `debug_assert!`\n-                sym::cfg => ControlFlow::CONTINUE,\n+                sym::cfg => ControlFlow::Continue(()),\n                 // assert!(other_macro!(..))\n                 _ => ControlFlow::Break(true),\n             }"}, {"sha": "5836eb73bd94c30e2a833250ddd538689a53b7ff", "filename": "src/tools/clippy/clippy_utils/src/mir/possible_borrower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs?ref=c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "patch": "@@ -140,7 +140,7 @@ impl TypeVisitor<'_> for ContainsRegion {\n     type BreakTy = ();\n \n     fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<Self::BreakTy> {\n-        ControlFlow::BREAK\n+        ControlFlow::Break(())\n     }\n }\n "}]}