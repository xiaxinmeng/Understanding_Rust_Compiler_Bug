{"sha": "b91dc035106f4c203d67d2a0db0077c7a887224b", "node_id": "C_kwDOAAsO6NoAKGI5MWRjMDM1MTA2ZjRjMjAzZDY3ZDJhMGRiMDA3N2M3YTg4NzIyNGI", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-10-01T16:59:17Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-10-01T17:23:53Z"}, "message": "Add `as_ptr_cast_mut` lint\n\nThis lint detects calls to a `&self`-taking `as_ptr` method, where\nthe result is then immediately cast to a `*mut T`. Code like this\nis probably invalid, as that pointer will not have write permissions,\nand `*mut T` is usually used to write through.", "tree": {"sha": "e8036658dfd1eab9e9617e60e1f868e05a5435c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8036658dfd1eab9e9617e60e1f868e05a5435c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b91dc035106f4c203d67d2a0db0077c7a887224b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgbSfWKRQb2tiqhuHtakDJeupmrF\nChDbM0msU+PXaBOk8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQOuRUnDbtV/14e1YMaAfHyp2kSqZ7x3tkDW9BI8hNHEuv+lgaQ5ezVAK/eP0flIziX\nFWVqaoiy9oD1Ca/tlCVAA=\n-----END SSH SIGNATURE-----", "payload": "tree e8036658dfd1eab9e9617e60e1f868e05a5435c4\nparent 31b17411a6cd5c4b36cde6ff008de1d3ec128ac4\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1664643557 +0200\ncommitter Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1664645033 +0200\n\nAdd `as_ptr_cast_mut` lint\n\nThis lint detects calls to a `&self`-taking `as_ptr` method, where\nthe result is then immediately cast to a `*mut T`. Code like this\nis probably invalid, as that pointer will not have write permissions,\nand `*mut T` is usually used to write through.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b91dc035106f4c203d67d2a0db0077c7a887224b", "html_url": "https://github.com/rust-lang/rust/commit/b91dc035106f4c203d67d2a0db0077c7a887224b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b91dc035106f4c203d67d2a0db0077c7a887224b/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31b17411a6cd5c4b36cde6ff008de1d3ec128ac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/31b17411a6cd5c4b36cde6ff008de1d3ec128ac4", "html_url": "https://github.com/rust-lang/rust/commit/31b17411a6cd5c4b36cde6ff008de1d3ec128ac4"}], "stats": {"total": 145, "additions": 144, "deletions": 1}, "files": [{"sha": "754d5f506d4c4c3b4fa71060662539a826de7659", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b91dc035106f4c203d67d2a0db0077c7a887224b/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b91dc035106f4c203d67d2a0db0077c7a887224b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b91dc035106f4c203d67d2a0db0077c7a887224b", "patch": "@@ -3735,6 +3735,7 @@ Released 2018-09-13\n [`approx_constant`]: https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n [`arithmetic_side_effects`]: https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects\n [`as_conversions`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions\n+[`as_ptr_cast_mut`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_ptr_cast_mut\n [`as_underscore`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_underscore\n [`assertions_on_constants`]: https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n [`assertions_on_result_states`]: https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_result_states"}, {"sha": "9409f4844f54b4140217260c97d1f9f09e32f8e4", "filename": "clippy_lints/src/casts/as_ptr_cast_mut.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b91dc035106f4c203d67d2a0db0077c7a887224b/clippy_lints%2Fsrc%2Fcasts%2Fas_ptr_cast_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91dc035106f4c203d67d2a0db0077c7a887224b/clippy_lints%2Fsrc%2Fcasts%2Fas_ptr_cast_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fas_ptr_cast_mut.rs?ref=b91dc035106f4c203d67d2a0db0077c7a887224b", "patch": "@@ -0,0 +1,38 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_opt;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::{\n+    mir::Mutability,\n+    ty::{self, Ty, TypeAndMut},\n+};\n+\n+use super::AS_PTR_CAST_MUT;\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_to: Ty<'_>) {\n+    if let ty::RawPtr(ptrty @ TypeAndMut { mutbl: Mutability::Mut, .. }) = cast_to.kind()\n+        && let ty::RawPtr(TypeAndMut { mutbl: Mutability::Not, .. }) =\n+            cx.typeck_results().node_type(cast_expr.hir_id).kind()\n+        && let ExprKind::MethodCall(method_name, receiver, [], _) = cast_expr.peel_blocks().kind\n+        && method_name.ident.name == rustc_span::sym::as_ptr\n+        && let Some(as_ptr_did) = cx.typeck_results().type_dependent_def_id(cast_expr.peel_blocks().hir_id)\n+        && let as_ptr_sig = cx.tcx.fn_sig(as_ptr_did)\n+        && let Some(first_param_ty) = as_ptr_sig.skip_binder().inputs().iter().next()\n+        && let ty::Ref(_, _, Mutability::Not) = first_param_ty.kind()\n+        && let Some(recv) = snippet_opt(cx, receiver.span)\n+    {\n+        // `as_mut_ptr` might not exist\n+        let applicability = Applicability::MaybeIncorrect;\n+\n+        span_lint_and_sugg(\n+            cx,\n+            AS_PTR_CAST_MUT,\n+            expr.span,\n+            &format!(\"casting the result of `as_ptr` to *{ptrty}\"),\n+            \"replace with\",\n+            format!(\"{recv}.as_mut_ptr()\"),\n+            applicability\n+        );\n+    }\n+}"}, {"sha": "fb0bd4d30f767ef6ec8fd4e9ccde4739dc1d256a", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b91dc035106f4c203d67d2a0db0077c7a887224b/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91dc035106f4c203d67d2a0db0077c7a887224b/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=b91dc035106f4c203d67d2a0db0077c7a887224b", "patch": "@@ -1,3 +1,4 @@\n+mod as_ptr_cast_mut;\n mod as_underscore;\n mod borrow_as_ptr;\n mod cast_abs_to_unsigned;\n@@ -596,6 +597,32 @@ declare_clippy_lint! {\n     \"casting a slice created from a pointer and length to a slice pointer\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for the result of a `&self`-taking `as_ptr` being cast to a mutable pointer\n+    ///\n+    /// ### Why is this bad?\n+    /// Since `as_ptr` took a `&self`, the pointer won't have write permissions, making it\n+    /// unlikely that having it as a mutable pointer is correct.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let string = String::with_capacity(1);\n+    /// let ptr = string.as_ptr() as *mut _;\n+    /// unsafe { ptr.write(4) }; // UNDEFINED BEHAVIOUR\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let mut string = String::with_capacity(1);\n+    /// let string = string.as_mut_ptr();\n+    /// unsafe { ptr.write(4) };\n+    /// ```\n+    #[clippy::version = \"1.66.0\"]\n+    pub AS_PTR_CAST_MUT,\n+    nursery,\n+    \"casting the result of the `&self`-taking as_ptr to a mutabe point\"\n+}\n+\n pub struct Casts {\n     msrv: Option<RustcVersion>,\n }\n@@ -627,7 +654,8 @@ impl_lint_pass!(Casts => [\n     CAST_ABS_TO_UNSIGNED,\n     AS_UNDERSCORE,\n     BORROW_AS_PTR,\n-    CAST_SLICE_FROM_RAW_PARTS\n+    CAST_SLICE_FROM_RAW_PARTS,\n+    AS_PTR_CAST_MUT,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Casts {\n@@ -653,6 +681,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                 return;\n             }\n             cast_slice_from_raw_parts::check(cx, expr, cast_expr, cast_to, self.msrv);\n+            as_ptr_cast_mut::check(cx, expr, cast_expr, cast_to);\n             fn_to_numeric_cast_any::check(cx, expr, cast_expr, cast_from, cast_to);\n             fn_to_numeric_cast::check(cx, expr, cast_expr, cast_from, cast_to);\n             fn_to_numeric_cast_with_truncation::check(cx, expr, cast_expr, cast_from, cast_to);"}, {"sha": "2c84970136550a3293c4c68d15c01478bfd91e79", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b91dc035106f4c203d67d2a0db0077c7a887224b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91dc035106f4c203d67d2a0db0077c7a887224b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=b91dc035106f4c203d67d2a0db0077c7a887224b", "patch": "@@ -66,6 +66,7 @@ store.register_lints(&[\n     cargo::NEGATIVE_FEATURE_NAMES,\n     cargo::REDUNDANT_FEATURE_NAMES,\n     cargo::WILDCARD_DEPENDENCIES,\n+    casts::AS_PTR_CAST_MUT,\n     casts::AS_UNDERSCORE,\n     casts::BORROW_AS_PTR,\n     casts::CAST_ABS_TO_UNSIGNED,"}, {"sha": "a75bc81b2222c0d9685f4c9eff42b8f51ed077a8", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b91dc035106f4c203d67d2a0db0077c7a887224b/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91dc035106f4c203d67d2a0db0077c7a887224b/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=b91dc035106f4c203d67d2a0db0077c7a887224b", "patch": "@@ -4,6 +4,7 @@\n \n store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n+    LintId::of(casts::AS_PTR_CAST_MUT),\n     LintId::of(cognitive_complexity::COGNITIVE_COMPLEXITY),\n     LintId::of(copies::BRANCHES_SHARING_CODE),\n     LintId::of(derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ),"}, {"sha": "c3cbd2942d8638ae8323490e0862776e526d8017", "filename": "src/docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b91dc035106f4c203d67d2a0db0077c7a887224b/src%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91dc035106f4c203d67d2a0db0077c7a887224b/src%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs.rs?ref=b91dc035106f4c203d67d2a0db0077c7a887224b", "patch": "@@ -28,6 +28,7 @@ docs! {\n     \"approx_constant\",\n     \"arithmetic_side_effects\",\n     \"as_conversions\",\n+    \"as_ptr_cast_mut\",\n     \"as_underscore\",\n     \"assertions_on_constants\",\n     \"assertions_on_result_states\","}, {"sha": "0192a0b686fb75f9ac56f39e1f12bd07d9ea5767", "filename": "src/docs/as_ptr_cast_mut.txt", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b91dc035106f4c203d67d2a0db0077c7a887224b/src%2Fdocs%2Fas_ptr_cast_mut.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b91dc035106f4c203d67d2a0db0077c7a887224b/src%2Fdocs%2Fas_ptr_cast_mut.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Fas_ptr_cast_mut.txt?ref=b91dc035106f4c203d67d2a0db0077c7a887224b", "patch": "@@ -0,0 +1,19 @@\n+### What it does\n+Checks for the result of a `&self`-taking `as_ptr` being cast to a mutable pointer\n+\n+### Why is this bad?\n+Since `as_ptr` took a `&self`, the pointer won't have write permissions, making it\n+unlikely that having it as a mutable pointer is correct.\n+\n+### Example\n+```\n+let string = String::with_capacity(1);\n+let ptr = string.as_ptr() as *mut _;\n+unsafe { ptr.write(4) }; // UNDEFINED BEHAVIOUR\n+```\n+Use instead:\n+```\n+let mut string = String::with_capacity(1);\n+let string = string.as_mut_ptr();\n+unsafe { ptr.write(4) };\n+```\n\\ No newline at end of file"}, {"sha": "0d1d9258433b215589e77f03437e3578f3631c2f", "filename": "tests/ui/as_ptr_cast_mut.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b91dc035106f4c203d67d2a0db0077c7a887224b/tests%2Fui%2Fas_ptr_cast_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91dc035106f4c203d67d2a0db0077c7a887224b/tests%2Fui%2Fas_ptr_cast_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fas_ptr_cast_mut.rs?ref=b91dc035106f4c203d67d2a0db0077c7a887224b", "patch": "@@ -0,0 +1,37 @@\n+#![allow(unused)]\n+#![warn(clippy::as_ptr_cast_mut)]\n+#![allow(clippy::wrong_self_convention)]\n+\n+struct MutPtrWrapper(Vec<u8>);\n+impl MutPtrWrapper {\n+    fn as_ptr(&mut self) -> *const u8 {\n+        self.0.as_mut_ptr() as *const u8\n+    }\n+}\n+\n+struct Covariant<T>(*const T);\n+impl<T> Covariant<T> {\n+    fn as_ptr(self) -> *const T {\n+        self.0\n+    }\n+}\n+\n+fn main() {\n+    let mut string = String::new();\n+    let _ = string.as_ptr() as *mut u8;\n+    let _: *mut i8 = string.as_ptr() as *mut _;\n+    let _ = string.as_ptr() as *const i8;\n+    let _ = string.as_mut_ptr();\n+    let _ = string.as_mut_ptr() as *mut u8;\n+    let _ = string.as_mut_ptr() as *const u8;\n+\n+    let nn = std::ptr::NonNull::new(4 as *mut u8).unwrap();\n+    let _ = nn.as_ptr() as *mut u8;\n+\n+    let mut wrap = MutPtrWrapper(Vec::new());\n+    let _ = wrap.as_ptr() as *mut u8;\n+\n+    let mut local = 4;\n+    let ref_with_write_perm = Covariant(std::ptr::addr_of_mut!(local) as *const _);\n+    let _ = ref_with_write_perm.as_ptr() as *mut u8;\n+}"}, {"sha": "2189c3d2f8556d702b708d94f64957390d18369a", "filename": "tests/ui/as_ptr_cast_mut.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b91dc035106f4c203d67d2a0db0077c7a887224b/tests%2Fui%2Fas_ptr_cast_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b91dc035106f4c203d67d2a0db0077c7a887224b/tests%2Fui%2Fas_ptr_cast_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fas_ptr_cast_mut.stderr?ref=b91dc035106f4c203d67d2a0db0077c7a887224b", "patch": "@@ -0,0 +1,16 @@\n+error: casting the result of `as_ptr` to *mut u8\n+  --> $DIR/as_ptr_cast_mut.rs:21:13\n+   |\n+LL |     let _ = string.as_ptr() as *mut u8;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `string.as_mut_ptr()`\n+   |\n+   = note: `-D clippy::as-ptr-cast-mut` implied by `-D warnings`\n+\n+error: casting the result of `as_ptr` to *mut i8\n+  --> $DIR/as_ptr_cast_mut.rs:22:22\n+   |\n+LL |     let _: *mut i8 = string.as_ptr() as *mut _;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `string.as_mut_ptr()`\n+\n+error: aborting due to 2 previous errors\n+"}]}