{"sha": "7ac6b58237dca474a5ff187a8fc9d0cea884d91f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYzZiNTgyMzdkY2E0NzRhNWZmMTg3YThmYzlkMGNlYTg4NGQ5MWY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-06-06T18:37:23Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-06-06T18:37:23Z"}, "message": "Mark str::to_uppercase and str::to_lowercase as stable.", "tree": {"sha": "f6e464167e483ab16f21a9405f9868ae6962a6ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6e464167e483ab16f21a9405f9868ae6962a6ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ac6b58237dca474a5ff187a8fc9d0cea884d91f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac6b58237dca474a5ff187a8fc9d0cea884d91f", "html_url": "https://github.com/rust-lang/rust/commit/7ac6b58237dca474a5ff187a8fc9d0cea884d91f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ac6b58237dca474a5ff187a8fc9d0cea884d91f/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f901086b0db092f331b9555199298c58d685f668", "url": "https://api.github.com/repos/rust-lang/rust/commits/f901086b0db092f331b9555199298c58d685f668", "html_url": "https://github.com/rust-lang/rust/commit/f901086b0db092f331b9555199298c58d685f668"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "7da2b372f6c97c0fc3d5df8632e090db0ce793df", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ac6b58237dca474a5ff187a8fc9d0cea884d91f/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac6b58237dca474a5ff187a8fc9d0cea884d91f/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=7ac6b58237dca474a5ff187a8fc9d0cea884d91f", "patch": "@@ -1851,7 +1851,7 @@ impl str {\n     /// let s = \"HELLO\";\n     /// assert_eq!(s.to_lowercase(), \"hello\");\n     /// ```\n-    #[unstable(feature = \"collections\")]\n+    #[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n     pub fn to_lowercase(&self) -> String {\n         let mut s = String::with_capacity(self.len());\n         for (i, c) in self[..].char_indices() {\n@@ -1892,7 +1892,7 @@ impl str {\n     /// let s = \"hello\";\n     /// assert_eq!(s.to_uppercase(), \"HELLO\");\n     /// ```\n-    #[unstable(feature = \"collections\")]\n+    #[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n     pub fn to_uppercase(&self) -> String {\n         let mut s = String::with_capacity(self.len());\n         s.extend(self[..].chars().flat_map(|c| c.to_uppercase()));"}, {"sha": "196ee45979b31a6418e1e71e43f1e65fcded90df", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ac6b58237dca474a5ff187a8fc9d0cea884d91f/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac6b58237dca474a5ff187a8fc9d0cea884d91f/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=7ac6b58237dca474a5ff187a8fc9d0cea884d91f", "patch": "@@ -70,10 +70,10 @@ impl Iterator for ToUppercase {\n /// An iterator over the titlecase mapping of a given character, returned from\n /// the [`to_titlecase` method](../primitive.char.html#method.to_titlecase) on\n /// characters.\n-#[stable(feature = \"char_to_titlecase\", since = \"1.2.0\")]\n+#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n pub struct ToTitlecase(CaseMappingIter);\n \n-#[stable(feature = \"char_to_titlecase\", since = \"1.2.0\")]\n+#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n impl Iterator for ToTitlecase {\n     type Item = char;\n     fn next(&mut self) -> Option<char> { self.0.next() }\n@@ -481,7 +481,7 @@ impl char {\n     /// Returns an iterator which yields the characters corresponding to the\n     /// lowercase equivalent of the character. If no conversion is possible then\n     /// an iterator with just the input character is returned.\n-    #[stable(feature = \"char_to_titlecase\", since = \"1.2.0\")]\n+    #[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n     #[inline]\n     pub fn to_titlecase(self) -> ToTitlecase {\n         ToTitlecase(CaseMappingIter::new(conversions::to_title(self)))"}]}