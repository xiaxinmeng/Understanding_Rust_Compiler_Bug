{"sha": "c34047cbd5222c239bdaaf306a5962d881908007", "node_id": "C_kwDOAAsO6NoAKGMzNDA0N2NiZDUyMjJjMjM5YmRhYWYzMDZhNTk2MmQ4ODE5MDgwMDc", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-09-02T11:31:08Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-09-06T10:05:54Z"}, "message": "Fix CI failures on windows and aarch64-linux", "tree": {"sha": "149c6683df44e69995d6a0a379697c857978b0a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/149c6683df44e69995d6a0a379697c857978b0a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c34047cbd5222c239bdaaf306a5962d881908007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c34047cbd5222c239bdaaf306a5962d881908007", "html_url": "https://github.com/rust-lang/rust/commit/c34047cbd5222c239bdaaf306a5962d881908007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c34047cbd5222c239bdaaf306a5962d881908007/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b67271507d5a26416f83f1afe0e8f43cc77567ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/b67271507d5a26416f83f1afe0e8f43cc77567ba", "html_url": "https://github.com/rust-lang/rust/commit/b67271507d5a26416f83f1afe0e8f43cc77567ba"}], "stats": {"total": 56, "additions": 36, "deletions": 20}, "files": [{"sha": "a3fed88cc4baaf0e6005a5c619351837daacc4f8", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c34047cbd5222c239bdaaf306a5962d881908007/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34047cbd5222c239bdaaf306a5962d881908007/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=c34047cbd5222c239bdaaf306a5962d881908007", "patch": "@@ -2403,6 +2403,14 @@ fn add_upstream_rust_crates<'a>(\n                                 bundle: Some(false),\n                                 whole_archive: Some(false) | None,\n                             } => {\n+                                // HACK/FIXME: Fixup a circular dependency between libgcc and libc\n+                                // with glibc. This logic should be moved to the libc crate.\n+                                if sess.target.os == \"linux\"\n+                                    && sess.target.env == \"gnu\"\n+                                    && name == \"c\"\n+                                {\n+                                    cmd.link_staticlib(\"gcc\", false);\n+                                }\n                                 cmd.link_staticlib(name, lib.verbatim.unwrap_or(false));\n                             }\n                             NativeLibKind::LinkArg => {"}, {"sha": "5f140d709d838364a3470a74aa9b79f717e56ff5", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c34047cbd5222c239bdaaf306a5962d881908007/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34047cbd5222c239bdaaf306a5962d881908007/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=c34047cbd5222c239bdaaf306a5962d881908007", "patch": "@@ -849,26 +849,34 @@ impl CrateInfo {\n \n         // Handle circular dependencies in the standard library.\n         // See comment before `add_linked_symbol_object` function for the details.\n-        let missing_weak_lang_items: FxHashSet<&Symbol> = info\n-            .used_crates\n-            .iter()\n-            .flat_map(|cnum| {\n-                tcx.missing_lang_items(*cnum)\n-                    .iter()\n-                    .filter(|l| lang_items::required(tcx, **l))\n-                    .filter_map(|item| WEAK_ITEMS_SYMBOLS.get(item))\n-            })\n-            .collect();\n-        info.linked_symbols\n-            .iter_mut()\n-            .filter(|(crate_type, _)| !matches!(crate_type, CrateType::Rlib | CrateType::Staticlib))\n-            .for_each(|(_, linked_symbols)| {\n-                linked_symbols.extend(\n-                    missing_weak_lang_items\n+        // With msvc-like linkers it's both unnecessary (they support circular dependencies),\n+        // and causes linking issues (when weak lang item symbols are \"privatized\" by LTO).\n+        let target = &tcx.sess.target;\n+        if !target.is_like_msvc {\n+            let missing_weak_lang_items: FxHashSet<&Symbol> = info\n+                .used_crates\n+                .iter()\n+                .flat_map(|cnum| {\n+                    tcx.missing_lang_items(*cnum)\n                         .iter()\n-                        .map(|item| (item.to_string(), SymbolExportKind::Text)),\n-                )\n-            });\n+                        .filter(|l| lang_items::required(tcx, **l))\n+                        .filter_map(|item| WEAK_ITEMS_SYMBOLS.get(item))\n+                })\n+                .collect();\n+            let prefix = if target.is_like_windows && target.arch == \"x86\" { \"_\" } else { \"\" };\n+            info.linked_symbols\n+                .iter_mut()\n+                .filter(|(crate_type, _)| {\n+                    !matches!(crate_type, CrateType::Rlib | CrateType::Staticlib)\n+                })\n+                .for_each(|(_, linked_symbols)| {\n+                    linked_symbols.extend(\n+                        missing_weak_lang_items\n+                            .iter()\n+                            .map(|item| (format!(\"{prefix}{item}\"), SymbolExportKind::Text)),\n+                    )\n+                });\n+        }\n \n         let embed_visualizers = tcx.sess.crate_types().iter().any(|&crate_type| match crate_type {\n             CrateType::Executable | CrateType::Dylib | CrateType::Cdylib => {\n@@ -888,7 +896,7 @@ impl CrateInfo {\n             }\n         });\n \n-        if tcx.sess.target.is_like_msvc && embed_visualizers {\n+        if target.is_like_msvc && embed_visualizers {\n             info.natvis_debugger_visualizers =\n                 collect_debugger_visualizers_transitive(tcx, DebuggerVisualizerType::Natvis);\n         }"}]}