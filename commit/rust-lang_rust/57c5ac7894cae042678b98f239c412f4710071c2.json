{"sha": "57c5ac7894cae042678b98f239c412f4710071c2", "node_id": "C_kwDOAAsO6NoAKDU3YzVhYzc4OTRjYWUwNDI2NzhiOThmMjM5YzQxMmY0NzEwMDcxYzI", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-21T08:31:17Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-22T00:48:36Z"}, "message": "Tweak the post-order for multi-successor blocks", "tree": {"sha": "85998aebe696ac357ce18cca6002d63b0a1411cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85998aebe696ac357ce18cca6002d63b0a1411cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c5ac7894cae042678b98f239c412f4710071c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c5ac7894cae042678b98f239c412f4710071c2", "html_url": "https://github.com/rust-lang/rust/commit/57c5ac7894cae042678b98f239c412f4710071c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c5ac7894cae042678b98f239c412f4710071c2/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe76e14955329df4bc54aab78c297e58fe58c115", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe76e14955329df4bc54aab78c297e58fe58c115", "html_url": "https://github.com/rust-lang/rust/commit/fe76e14955329df4bc54aab78c297e58fe58c115"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "561ef371b09048c413cd5442a89b4d5387540797", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c5ac7894cae042678b98f239c412f4710071c2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c5ac7894cae042678b98f239c412f4710071c2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=57c5ac7894cae042678b98f239c412f4710071c2", "patch": "@@ -105,7 +105,7 @@ pub struct Terminator<'tcx> {\n     pub kind: TerminatorKind<'tcx>,\n }\n \n-pub type Successors<'a> = impl Iterator<Item = BasicBlock> + 'a;\n+pub type Successors<'a> = impl DoubleEndedIterator<Item = BasicBlock> + 'a;\n pub type SuccessorsMut<'a> =\n     iter::Chain<std::option::IntoIter<&'a mut BasicBlock>, slice::IterMut<'a, BasicBlock>>;\n "}, {"sha": "99ead14139aec1e6441268ec3abeaf08e7b46bf8", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/57c5ac7894cae042678b98f239c412f4710071c2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c5ac7894cae042678b98f239c412f4710071c2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=57c5ac7894cae042678b98f239c412f4710071c2", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n         //      B     C\n         //      |     |\n         //      |     |\n-        //      D     |\n+        //      |     D\n         //       \\   /\n         //        \\ /\n         //         E\n@@ -159,26 +159,26 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n         //\n         // When the first call to `traverse_successor` happens, the following happens:\n         //\n-        //     [(B, [D]),  // `B` taken from the successors of `A`, pushed to the\n-        //                 // top of the stack along with the successors of `B`\n-        //      (A, [C])]\n+        //     [(C, [D]),  // `C` taken from the successors of `A`, pushed to the\n+        //                 // top of the stack along with the successors of `C`\n+        //      (A, [B])]\n         //\n-        //     [(D, [E]),  // `D` taken from successors of `B`, pushed to stack\n-        //      (B, []),\n-        //      (A, [C])]\n+        //     [(D, [E]),  // `D` taken from successors of `C`, pushed to stack\n+        //      (C, []),\n+        //      (A, [B])]\n         //\n         //     [(E, []),   // `E` taken from successors of `D`, pushed to stack\n         //      (D, []),\n-        //      (B, []),\n-        //      (A, [C])]\n+        //      (C, []),\n+        //      (A, [B])]\n         //\n         // Now that the top of the stack has no successors we can traverse, each item will\n-        // be popped off during iteration until we get back to `A`. This yields [E, D, B].\n+        // be popped off during iteration until we get back to `A`. This yields [E, D, C].\n         //\n-        // When we yield `B` and call `traverse_successor`, we push `C` to the stack, but\n+        // When we yield `C` and call `traverse_successor`, we push `B` to the stack, but\n         // since we've already visited `E`, that child isn't added to the stack. The last\n-        // two iterations yield `C` and finally `A` for a final traversal of [E, D, B, C, A]\n-        while let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() && let Some(bb) = iter.next() {\n+        // two iterations yield `B` and finally `A` for a final traversal of [E, D, C, B, A]\n+        while let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() && let Some(bb) = iter.next_back() {\n             if self.visited.insert(bb) {\n                 if let Some(term) = &self.basic_blocks[bb].terminator {\n                     self.visit_stack.push((bb, term.successors()));"}, {"sha": "2f397f6b5853232ce557d009b143cbcf70103eff", "filename": "tests/ui/borrowck/borrowck-thread-local-static-borrow-outlives-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c5ac7894cae042678b98f239c412f4710071c2/tests%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c5ac7894cae042678b98f239c412f4710071c2/tests%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.stderr?ref=57c5ac7894cae042678b98f239c412f4710071c2", "patch": "@@ -4,7 +4,7 @@ error[E0712]: thread-local variable borrowed past end of function\n LL |      assert_static(&FOO);\n    |                    ^^^^ thread-local variables cannot be borrowed beyond the end of the function\n LL | }\n-   | - end of enclosing function is here\n+   |  - end of enclosing function is here\n \n error: aborting due to previous error\n "}, {"sha": "3e3706bcb7de9fc36aba1b45f11438c12716c5d0", "filename": "tests/ui/issues/issue-17954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c5ac7894cae042678b98f239c412f4710071c2/tests%2Fui%2Fissues%2Fissue-17954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c5ac7894cae042678b98f239c412f4710071c2/tests%2Fui%2Fissues%2Fissue-17954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-17954.stderr?ref=57c5ac7894cae042678b98f239c412f4710071c2", "patch": "@@ -5,7 +5,7 @@ LL |     let a = &FOO;\n    |             ^^^^ thread-local variables cannot be borrowed beyond the end of the function\n ...\n LL | }\n-   | - end of enclosing function is here\n+   |  - end of enclosing function is here\n \n error: aborting due to previous error\n "}, {"sha": "0812976cf40924d2ef327571f3717d7c1568af58", "filename": "tests/ui/issues/issue-52049.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c5ac7894cae042678b98f239c412f4710071c2/tests%2Fui%2Fissues%2Fissue-52049.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c5ac7894cae042678b98f239c412f4710071c2/tests%2Fui%2Fissues%2Fissue-52049.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-52049.stderr?ref=57c5ac7894cae042678b98f239c412f4710071c2", "patch": "@@ -2,12 +2,10 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-52049.rs:6:10\n    |\n LL |     foo(&unpromotable(5u32));\n-   |     -----^^^^^^^^^^^^^^^^^^-\n+   |     -----^^^^^^^^^^^^^^^^^^-- temporary value is freed at the end of this statement\n    |     |    |\n    |     |    creates a temporary value which is freed while still in use\n    |     argument requires that borrow lasts for `'static`\n-LL | }\n-   | - temporary value is freed at the end of this statement\n \n error: aborting due to previous error\n "}, {"sha": "598f14241913768d2ff6c6fe370eefbcef595629", "filename": "tests/ui/lifetimes/issue-90600-expected-return-static-indirect.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c5ac7894cae042678b98f239c412f4710071c2/tests%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c5ac7894cae042678b98f239c412f4710071c2/tests%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr?ref=57c5ac7894cae042678b98f239c412f4710071c2", "patch": "@@ -10,7 +10,7 @@ LL |     let read = &refcell as &RefCell<dyn Read>;\n    |                -------- cast requires that `foo` is borrowed for `'static`\n ...\n LL | }\n-   | - `foo` dropped here while still borrowed\n+   |  - `foo` dropped here while still borrowed\n \n error: lifetime may not live long enough\n   --> $DIR/issue-90600-expected-return-static-indirect.rs:9:16"}]}