{"sha": "5afe784daae5782389b97f0ec1317193433ba9a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZmU3ODRkYWFlNTc4MjM4OWI5N2YwZWMxMzE3MTkzNDMzYmE5YTI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-07T04:37:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-10T16:16:21Z"}, "message": "Expect macro defs in save-analysis and add expn info to spans for attr proc macros", "tree": {"sha": "bacda16580e5cbade71bd9e641304e9597bf758b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bacda16580e5cbade71bd9e641304e9597bf758b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5afe784daae5782389b97f0ec1317193433ba9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5afe784daae5782389b97f0ec1317193433ba9a2", "html_url": "https://github.com/rust-lang/rust/commit/5afe784daae5782389b97f0ec1317193433ba9a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5afe784daae5782389b97f0ec1317193433ba9a2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f573db4f80c75f156df8a743f456bf087ec81dc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f573db4f80c75f156df8a743f456bf087ec81dc2", "html_url": "https://github.com/rust-lang/rust/commit/f573db4f80c75f156df8a743f456bf087ec81dc2"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "33d5c17a41921f9122942da41b394c85c9f1de0f", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5afe784daae5782389b97f0ec1317193433ba9a2/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5afe784daae5782389b97f0ec1317193433ba9a2/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=5afe784daae5782389b97f0ec1317193433ba9a2", "patch": "@@ -327,6 +327,9 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     scope: scope\n                 }.lower(self.tcx));\n             }\n+            // With macros 2.0, we can legitimately get a ref to a macro, but\n+            // we don't handle it properly for now (FIXME).\n+            Def::Macro(..) => {}\n             Def::Local(..) |\n             Def::Upvar(..) |\n             Def::SelfTy(..) |\n@@ -336,7 +339,6 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             Def::AssociatedTy(..) |\n             Def::AssociatedConst(..) |\n             Def::PrimTy(_) |\n-            Def::Macro(..) |\n             Def::Err => {\n                span_bug!(span,\n                          \"process_def_kind for unexpected item: {:?}\","}, {"sha": "f7dcd00e40976d7ba8f16464ca4428dcdc95ce1c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5afe784daae5782389b97f0ec1317193433ba9a2/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5afe784daae5782389b97f0ec1317193433ba9a2/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=5afe784daae5782389b97f0ec1317193433ba9a2", "patch": "@@ -464,8 +464,20 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 let attr_toks = stream_for_attr_args(&attr, &self.cx.parse_sess);\n                 let item_toks = stream_for_item(&item, &self.cx.parse_sess);\n \n+                let span = Span {\n+                    expn_id: self.cx.codemap().record_expansion(ExpnInfo {\n+                        call_site: attr.span,\n+                        callee: NameAndSpan {\n+                            format: MacroAttribute(name),\n+                            span: None,\n+                            allow_internal_unstable: false,\n+                        },\n+                    }),\n+                    ..attr.span\n+                };\n+\n                 let tok_result = mac.expand(self.cx, attr.span, attr_toks, item_toks);\n-                self.parse_expansion(tok_result, kind, name, attr.span)\n+                self.parse_expansion(tok_result, kind, name, span)\n             }\n             SyntaxExtension::ProcMacroDerive(..) | SyntaxExtension::BuiltinDerive(..) => {\n                 self.cx.span_err(attr.span, &format!(\"`{}` is a derive mode\", name));"}]}