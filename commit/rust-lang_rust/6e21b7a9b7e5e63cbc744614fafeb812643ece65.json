{"sha": "6e21b7a9b7e5e63cbc744614fafeb812643ece65", "node_id": "C_kwDOAAsO6NoAKDZlMjFiN2E5YjdlNWU2M2NiYzc0NDYxNGZhZmViODEyNjQzZWNlNjU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-20T23:24:45Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-20T23:24:45Z"}, "message": "Do not suggest trivially false const predicates", "tree": {"sha": "92ca26a71d67ec43d11beba33002106511dde7c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ca26a71d67ec43d11beba33002106511dde7c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e21b7a9b7e5e63cbc744614fafeb812643ece65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e21b7a9b7e5e63cbc744614fafeb812643ece65", "html_url": "https://github.com/rust-lang/rust/commit/6e21b7a9b7e5e63cbc744614fafeb812643ece65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e21b7a9b7e5e63cbc744614fafeb812643ece65/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ffa67d7309047ff47b9c624ba4061fb8c004c31", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ffa67d7309047ff47b9c624ba4061fb8c004c31", "html_url": "https://github.com/rust-lang/rust/commit/5ffa67d7309047ff47b9c624ba4061fb8c004c31"}], "stats": {"total": 73, "additions": 7, "deletions": 66}, "files": [{"sha": "c850b30259ed395cca90e3e85a3d6b5d3d93c979", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e21b7a9b7e5e63cbc744614fafeb812643ece65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e21b7a9b7e5e63cbc744614fafeb812643ece65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=6e21b7a9b7e5e63cbc744614fafeb812643ece65", "patch": "@@ -764,6 +764,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             self.suggest_borrowing_for_object_cast(&mut err, &root_obligation, *concrete_ty, *obj_ty);\n                         }\n \n+                        let mut unsatisfied_const = false;\n                         if trait_predicate.is_const_if_const() && obligation.param_env.is_const() {\n                             let non_const_predicate = trait_ref.without_const();\n                             let non_const_obligation = Obligation {\n@@ -773,6 +774,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 recursion_depth: obligation.recursion_depth,\n                             };\n                             if self.predicate_may_hold(&non_const_obligation) {\n+                                unsatisfied_const = true;\n                                 err.span_note(\n                                     span,\n                                     &format!(\n@@ -924,7 +926,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 }\n                             }\n                         } else if !trait_ref.has_non_region_infer()\n-                            && self.predicate_can_apply(obligation.param_env, trait_ref)\n+                            && self.predicate_can_apply(obligation.param_env, trait_predicate)\n                         {\n                             // If a where-clause may be useful, remind the\n                             // user that they can add it.\n@@ -939,7 +941,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 None,\n                                 obligation.cause.body_id,\n                             );\n-                        } else if !suggested {\n+                        } else if !suggested && !unsatisfied_const {\n                             // Can't show anything else useful, try to find similar impls.\n                             let impl_candidates = self.find_similar_impl_candidates(trait_predicate);\n                             if !self.report_similar_impl_candidates(\n@@ -1433,7 +1435,7 @@ trait InferCtxtPrivExt<'tcx> {\n     fn predicate_can_apply(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        pred: ty::PolyTraitRef<'tcx>,\n+        pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool;\n \n     fn note_obligation_cause(&self, err: &mut Diagnostic, obligation: &PredicateObligation<'tcx>);\n@@ -2508,7 +2510,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     fn predicate_can_apply(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        pred: ty::PolyTraitRef<'tcx>,\n+        pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n         struct ParamToVarFolder<'a, 'tcx> {\n             infcx: &'a InferCtxt<'tcx>,\n@@ -2552,7 +2554,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             let obligation = Obligation::new(\n                 ObligationCause::dummy(),\n                 param_env,\n-                cleaned_pred.without_const().to_predicate(selcx.tcx()),\n+                cleaned_pred.to_predicate(selcx.tcx()),\n             );\n \n             self.predicate_may_hold(&obligation)"}, {"sha": "12244450e7f8f769d840aa0ce8804f014624cd87", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=6e21b7a9b7e5e63cbc744614fafeb812643ece65", "patch": "@@ -10,16 +10,6 @@ note: the trait `PartialEq<_>` is implemented for `*const i32`, but that impleme\n    |\n LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n    |                                           ^^\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n \n error[E0277]: can't compare `*const i32` with `_` in const contexts\n   --> $DIR/const_raw_ptr_ops.rs:6:44\n@@ -33,16 +23,6 @@ note: the trait `PartialEq<_>` is implemented for `*const i32`, but that impleme\n    |\n LL | const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };\n    |                                            ^^\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n \n error: aborting due to 2 previous errors\n "}, {"sha": "905c5ee6eb4a0530ed1fe2858466041d0b83b869", "filename": "src/test/ui/consts/issue-25826.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr?ref=6e21b7a9b7e5e63cbc744614fafeb812643ece65", "patch": "@@ -10,10 +10,6 @@ note: the trait `PartialOrd` is implemented for `*const ()`, but that implementa\n    |\n LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n    |                                                    ^\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() where *const (): ~const PartialOrd {\n-   |           ++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "f4683f7f5361dedcf2b4c1c25ed52989b8a5c3bd", "filename": "src/test/ui/consts/issue-94675.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr?ref=6e21b7a9b7e5e63cbc744614fafeb812643ece65", "patch": "@@ -23,10 +23,6 @@ note: the trait `IndexMut<usize>` is implemented for `Vec<usize>`, but that impl\n    |\n LL |         self.bar[0] = baz.len();\n    |         ^^^^^^^^^^^\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | impl<'a> Foo<'a> where Vec<usize>: ~const IndexMut<usize> {\n-   |                  ++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "89177b0f1ac1c5bd49d2d7870e7a53478932c80a", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=6e21b7a9b7e5e63cbc744614fafeb812643ece65", "patch": "@@ -15,10 +15,6 @@ note: required by a bound in `Foo::Bar`\n    |\n LL |     type Bar: ~const std::ops::Add;\n    |               ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Foo::Bar`\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | impl const Foo for NonConstAdd where NonConstAdd: ~const Add {\n-   |                                +++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "7350909ba8e19f075ee8c2161d9879866539d174", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-const-trait-method-fail.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr?ref=6e21b7a9b7e5e63cbc744614fafeb812643ece65", "patch": "@@ -9,10 +9,6 @@ note: the trait `Plus` is implemented for `u32`, but that implementation is not\n    |\n LL |     a.plus(b)\n    |       ^^^^\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | pub const fn add_u32(a: u32, b: u32) -> u32 where u32: ~const Plus {\n-   |                                             ++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "31e6dbdab2258111b1f6de71384adf30870bad6d", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr?ref=6e21b7a9b7e5e63cbc744614fafeb812643ece65", "patch": "@@ -9,7 +9,6 @@ note: the trait `PartialEq<_>` is implemented for `T`, but that implementation i\n    |\n LL |     *t == *t\n    |        ^^\n-   = help: the trait `PartialEq<&B>` is implemented for `&A`\n \n error: aborting due to previous error\n "}, {"sha": "c64930db9bee2ee1b695337ff1f12ed29c797e2e", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr?ref=6e21b7a9b7e5e63cbc744614fafeb812643ece65", "patch": "@@ -11,10 +11,6 @@ note: the trait `ConstDefaultFn` is implemented for `NonConstImpl`, but that imp\n    |\n LL |     NonConstImpl.a();\n    |     ^^^^^^^^^^^^\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | const fn test() where NonConstImpl: ~const ConstDefaultFn {\n-   |                 +++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "925ae53e3249961c776b16e6d3e0de54ecb03ffc", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.gatednc.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr?ref=6e21b7a9b7e5e63cbc744614fafeb812643ece65", "patch": "@@ -11,10 +11,6 @@ note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst\n    |\n LL |     NonConst.func();\n    |     ^^^^^^^^\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | const fn const_context() where cross_crate::NonConst: ~const cross_crate::MyTrait {\n-   |                          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "11db0c2b8f290bff0447a0cc2a7cb3a6b2ac6e7d", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.stocknc.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr?ref=6e21b7a9b7e5e63cbc744614fafeb812643ece65", "patch": "@@ -11,10 +11,6 @@ note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst\n    |\n LL |     NonConst.func();\n    |     ^^^^^^^^\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | const fn const_context() where cross_crate::NonConst: ~const cross_crate::MyTrait {\n-   |                          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "a244ab10cab6bd8590d01ead973ca6488bdbc921", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-body-checking.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr?ref=6e21b7a9b7e5e63cbc744614fafeb812643ece65", "patch": "@@ -14,10 +14,6 @@ note: required by a bound in `foo`\n    |\n LL | const fn foo<T>() where T: ~const Tr {}\n    |                            ^^^^^^^^^ required by this bound in `foo`\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | pub trait Foo where (): ~const Tr {\n-   |               +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "c2c16921c2eb233fb9ef3ea76cc96e0f25dddd26", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr?ref=6e21b7a9b7e5e63cbc744614fafeb812643ece65", "patch": "@@ -11,10 +11,6 @@ note: the trait `Tr` is implemented for `()`, but that implementation is not `co\n    |\n LL |         ().a()\n    |         ^^\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | pub trait Tr where (): ~const Tr {\n-   |              +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "1f8f312df012886392d5c36affb290851a342598", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e21b7a9b7e5e63cbc744614fafeb812643ece65/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr?ref=6e21b7a9b7e5e63cbc744614fafeb812643ece65", "patch": "@@ -14,10 +14,6 @@ note: required by a bound in `Bar`\n    |\n LL | trait Bar: ~const Foo {}\n    |            ^^^^^^^^^^ required by this bound in `Bar`\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | impl const Bar for S where S: ~const Foo {}\n-   |                      +++++++++++++++++++\n \n error: aborting due to previous error\n "}]}