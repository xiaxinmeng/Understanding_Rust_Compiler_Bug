{"sha": "47e4abf47397438ca86e96ed3f848276dddd5738", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZTRhYmY0NzM5NzQzOGNhODZlOTZlZDNmODQ4Mjc2ZGRkZDU3Mzg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-25T00:48:33Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-28T17:38:56Z"}, "message": "Fix plain_summary_line function", "tree": {"sha": "b3ede916681449699b57c8b549884fb49311db19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3ede916681449699b57c8b549884fb49311db19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47e4abf47397438ca86e96ed3f848276dddd5738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47e4abf47397438ca86e96ed3f848276dddd5738", "html_url": "https://github.com/rust-lang/rust/commit/47e4abf47397438ca86e96ed3f848276dddd5738", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47e4abf47397438ca86e96ed3f848276dddd5738/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cba67ad8012c63ddae8b4c540bbb6f70a93c8ddf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cba67ad8012c63ddae8b4c540bbb6f70a93c8ddf", "html_url": "https://github.com/rust-lang/rust/commit/cba67ad8012c63ddae8b4c540bbb6f70a93c8ddf"}], "stats": {"total": 85, "additions": 51, "deletions": 34}, "files": [{"sha": "4d67e8b53299990471c253d49937631080fb104b", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 51, "deletions": 33, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/47e4abf47397438ca86e96ed3f848276dddd5738/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e4abf47397438ca86e96ed3f848276dddd5738/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=47e4abf47397438ca86e96ed3f848276dddd5738", "patch": "@@ -106,11 +106,19 @@ thread_local!(pub static PLAYGROUND: RefCell<Option<(Option<String>, String)>> =\n \n macro_rules! event_loop_break {\n     ($parser:expr, $toc_builder:expr, $shorter:expr, $buf:expr, $($end_event:pat)|*) => {{\n+        event_loop_break($parser, $toc_builder, $shorter, $buf, false, $($end_event:pat)|*);\n+    }};\n+    ($parser:expr, $toc_builder:expr, $shorter:expr, $buf:expr, $escape:expr,\n+     $($end_event:pat)|*) => {{\n         while let Some(event) = $parser.next() {\n             match event {\n                 $($end_event)|* => break,\n                 Event::Text(ref s) => {\n-                    $buf.push_str(s);\n+                    if $escape {\n+                        $buf.push_str(&escape(s));\n+                    } else {\n+                        $buf.push_str(s);\n+                    }\n                 }\n                 Event::SoftBreak | Event::HardBreak if !$buf.is_empty() => {\n                     $buf.push(' ');\n@@ -127,6 +135,13 @@ pub fn render(w: &mut fmt::Formatter,\n               s: &str,\n               print_toc: bool,\n               shorter: MarkdownOutputStyle) -> fmt::Result {\n+    fn escape(entry: &str) -> String {\n+        entry.replace(\"<\", \"&lt;\")\n+             .replace(\"'\", \"&#39;\")\n+             .replace(\">\", \"&gt;\")\n+             .replace(\"&\", \"&amp;\")\n+    }\n+\n     fn block(parser: &mut Parser, buffer: &mut String, lang: &str) {\n         let mut origtext = String::new();\n         while let Some(event) = parser.next() {\n@@ -208,7 +223,7 @@ pub fn render(w: &mut fmt::Formatter,\n     fn header(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n               shorter: MarkdownOutputStyle, level: i32) {\n         let mut ret = String::new();\n-        event_loop_break!(parser, toc_builder, shorter, ret, Event::End(Tag::Header(_)));\n+        event_loop_break!(parser, toc_builder, shorter, ret, true, Event::End(Tag::Header(_)));\n         ret = ret.trim_right().to_owned();\n \n         let id = ret.clone();\n@@ -241,28 +256,28 @@ pub fn render(w: &mut fmt::Formatter,\n     fn codespan(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n                 shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n-        event_loop_break!(parser, toc_builder, shorter, content, Event::End(Tag::Code));\n+        event_loop_break!(parser, toc_builder, shorter, content, true, Event::End(Tag::Code));\n         buffer.push_str(&format!(\"<code>{}</code>\",\n                                  Escape(&collapse_whitespace(content.trim_right()))));\n     }\n \n     fn link(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n             shorter: MarkdownOutputStyle, url: &str, mut title: String) {\n-        event_loop_break!(parser, toc_builder, shorter, title, Event::End(Tag::Link(_, _)));\n+        event_loop_break!(parser, toc_builder, shorter, title, true, Event::End(Tag::Link(_, _)));\n         buffer.push_str(&format!(\"<a href=\\\"{}\\\">{}</a>\", url, title));\n     }\n \n     fn paragraph(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n                  shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n-        event_loop_break!(parser, toc_builder, shorter, content, Event::End(Tag::Paragraph));\n+        event_loop_break!(parser, toc_builder, shorter, content, true, Event::End(Tag::Paragraph));\n         buffer.push_str(&format!(\"<p>{}</p>\", content.trim_right()));\n     }\n \n     fn cell(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n             shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n-        event_loop_break!(parser, toc_builder, shorter, content,\n+        event_loop_break!(parser, toc_builder, shorter, content, true,\n                           Event::End(Tag::TableHead) |\n                               Event::End(Tag::Table(_)) |\n                               Event::End(Tag::TableRow) |\n@@ -336,7 +351,7 @@ pub fn render(w: &mut fmt::Formatter,\n     fn blockquote(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n                   shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n-        event_loop_break!(parser, toc_builder, shorter, content, Event::End(Tag::BlockQuote));\n+        event_loop_break!(parser, toc_builder, shorter, content, true, Event::End(Tag::BlockQuote));\n         buffer.push_str(&format!(\"<blockquote>{}</blockquote>\", content.trim_right()));\n     }\n \n@@ -347,7 +362,7 @@ pub fn render(w: &mut fmt::Formatter,\n             match event {\n                 Event::End(Tag::Item) => break,\n                 Event::Text(ref s) => {\n-                    content.push_str(s);\n+                    content.push_str(&escape(s));\n                 }\n                 x => {\n                     looper(parser, &mut content, Some(x), toc_builder, shorter);\n@@ -377,14 +392,14 @@ pub fn render(w: &mut fmt::Formatter,\n     fn emphasis(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n                 shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n-        event_loop_break!(parser, toc_builder, shorter, content, Event::End(Tag::Emphasis));\n+        event_loop_break!(parser, toc_builder, shorter, content, true, Event::End(Tag::Emphasis));\n         buffer.push_str(&format!(\"<em>{}</em>\", content));\n     }\n \n     fn strong(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n               shorter: MarkdownOutputStyle) {\n         let mut content = String::new();\n-        event_loop_break!(parser, toc_builder, shorter, content, Event::End(Tag::Strong));\n+        event_loop_break!(parser, toc_builder, shorter, content, true, Event::End(Tag::Strong));\n         buffer.push_str(&format!(\"<strong>{}</strong>\", content));\n     }\n \n@@ -644,9 +659,12 @@ pub fn plain_summary_line(md: &str) -> String {\n                 Event::Start(Tag::Link(_, ref t)) if !self.is_first => {\n                     (Some(t.as_ref().to_owned()), 1)\n                 }\n+                Event::Start(Tag::Code) => (Some(\"`\".to_owned()), 1),\n+                Event::End(Tag::Code) => (Some(\"`\".to_owned()), -1),\n+                Event::Start(Tag::Header(_)) => (None, 1),\n                 Event::Text(ref s) if self.is_in > 0 => (Some(s.as_ref().to_owned()), 0),\n                 Event::End(Tag::Link(_, ref t)) => (Some(t.as_ref().to_owned()), -1),\n-                Event::End(Tag::Paragraph) => (None, -1),\n+                Event::End(Tag::Paragraph) | Event::End(Tag::Header(_)) => (None, -1),\n                 _ => (None, 0),\n             };\n             if is_in > 0 || (is_in < 0 && self.is_in > 0) {\n@@ -728,17 +746,17 @@ mod tests {\n             reset_ids(true);\n         }\n \n-        t(\"# Foo bar\", \"\\n<h1 id='foo-bar' class='section-header'>\\\n-          <a href='#foo-bar'>Foo bar</a></h1>\");\n-        t(\"## Foo-bar_baz qux\", \"\\n<h2 id='foo-bar_baz-qux' class=\\'section-\\\n-          header'><a href='#foo-bar_baz-qux'>Foo-bar_baz qux</a></h2>\");\n+        t(\"# Foo bar\", \"<h1 id=\\\"foo-bar\\\" class=\\\"section-header\\\">\\\n+          <a href=\\\"#foo-bar\\\">Foo bar</a></h1>\");\n+        t(\"## Foo-bar_baz qux\", \"<h2 id=\\\"foo-bar_baz-qux\\\" class=\\\"section-\\\n+          header\\\"><a href=\\\"#foo-bar_baz-qux\\\">Foo-bar_baz qux</a></h2>\");\n         t(\"### **Foo** *bar* baz!?!& -_qux_-%\",\n-          \"\\n<h3 id='foo-bar-baz--_qux_-' class='section-header'>\\\n-          <a href='#foo-bar-baz--_qux_-'><strong>Foo</strong> \\\n+          \"<h3 id=\\\"foo-bar-baz--_qux_-\\\" class=\\\"section-header\\\">\\\n+          <a href=\\\"#foo-bar-baz--_qux_-\\\"><strong>Foo</strong> \\\n           <em>bar</em> baz!?!&amp; -_qux_-%</a></h3>\");\n         t(\"####**Foo?** & \\\\*bar?!*  _`baz`_ \u2764 #qux\",\n-          \"\\n<h4 id='foo--bar--baz--qux' class='section-header'>\\\n-          <a href='#foo--bar--baz--qux'><strong>Foo?</strong> &amp; *bar?!*  \\\n+          \"<h4 id=\\\"foo--bar--baz--qux\\\" class=\\\"section-header\\\">\\\n+          <a href=\\\"#foo--bar--baz--qux\\\"><strong>Foo?</strong> &amp; *bar?!*  \\\n           <em><code>baz</code></em> \u2764 #qux</a></h4>\");\n     }\n \n@@ -750,18 +768,18 @@ mod tests {\n         }\n \n         let test = || {\n-            t(\"# Example\", \"\\n<h1 id='example' class='section-header'>\\\n-              <a href='#example'>Example</a></h1>\");\n-            t(\"# Panics\", \"\\n<h1 id='panics' class='section-header'>\\\n-              <a href='#panics'>Panics</a></h1>\");\n-            t(\"# Example\", \"\\n<h1 id='example-1' class='section-header'>\\\n-              <a href='#example-1'>Example</a></h1>\");\n-            t(\"# Main\", \"\\n<h1 id='main-1' class='section-header'>\\\n-              <a href='#main-1'>Main</a></h1>\");\n-            t(\"# Example\", \"\\n<h1 id='example-2' class='section-header'>\\\n-              <a href='#example-2'>Example</a></h1>\");\n-            t(\"# Panics\", \"\\n<h1 id='panics-1' class='section-header'>\\\n-              <a href='#panics-1'>Panics</a></h1>\");\n+            t(\"# Example\", \"<h1 id=\\\"example\\\" class=\\\"section-header\\\">\\\n+              <a href=\\\"#example\\\">Example</a></h1>\");\n+            t(\"# Panics\", \"<h1 id=\\\"panics\\\" class=\\\"section-header\\\">\\\n+              <a href=\\\"#panics\\\">Panics</a></h1>\");\n+            t(\"# Example\", \"<h1 id=\\\"example-1\\\" class=\\\"section-header\\\">\\\n+              <a href=\\\"#example-1\\\">Example</a></h1>\");\n+            t(\"# Main\", \"<h1 id=\\\"main-1\\\" class=\\\"section-header\\\">\\\n+              <a href=\\\"#main-1\\\">Main</a></h1>\");\n+            t(\"# Example\", \"<h1 id=\\\"example-2\\\" class=\\\"section-header\\\">\\\n+              <a href=\\\"#example-2\\\">Example</a></h1>\");\n+            t(\"# Panics\", \"<h1 id=\\\"panics-1\\\" class=\\\"section-header\\\">\\\n+              <a href=\\\"#panics-1\\\">Panics</a></h1>\");\n         };\n         test();\n         reset_ids(true);\n@@ -789,7 +807,7 @@ mod tests {\n             assert_eq!(output, expect);\n         }\n \n-        t(\"`Struct<'a, T>`\", \"<p><code>Struct&lt;&#39;a, T&gt;</code></p>\\n\");\n-        t(\"Struct<'a, T>\", \"<p>Struct&lt;&#39;a, T&gt;</p>\\n\");\n+        t(\"`Struct<'a, T>`\", \"<p><code>Struct&lt;&#39;a, T&gt;</code></p>\");\n+        t(\"Struct<'a, T>\", \"<p>Struct&lt;&#39;a, T&gt;</p>\");\n     }\n }"}, {"sha": "a4f43c42623d33be11e547c4b6f9f1694f841e6b", "filename": "src/rustc/rustdoc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47e4abf47397438ca86e96ed3f848276dddd5738/src%2Frustc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e4abf47397438ca86e96ed3f848276dddd5738/src%2Frustc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustdoc.rs?ref=47e4abf47397438ca86e96ed3f848276dddd5738", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustdoc)]\n #![feature(rustc_private)]\n \n extern crate rustdoc;"}]}