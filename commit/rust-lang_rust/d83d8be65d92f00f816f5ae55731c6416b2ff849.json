{"sha": "d83d8be65d92f00f816f5ae55731c6416b2ff849", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4M2Q4YmU2NWQ5MmYwMGY4MTZmNWFlNTU3MzFjNjQxNmIyZmY4NDk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-01T17:49:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-01T17:49:13Z"}, "message": "Rollup merge of #71747 - spastorino:safety-scheme-around-consts-cleanup, r=oli-obk\n\nRemove deadcode in eval_mir_constant_to_operand\n\nr? @oli-obk @RalfJung", "tree": {"sha": "c98f2da6377e53bfdb264d26c72866ebdbbf15e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c98f2da6377e53bfdb264d26c72866ebdbbf15e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d83d8be65d92f00f816f5ae55731c6416b2ff849", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJerGEZCRBK7hj4Ov3rIwAAdHIIACcZpZaizybYHUU6fZCTxpq6\nKrWmmJzz/mU5j035g7t3qtUbssJT7hAtj9+2r9Oo10D/GKjQCl6Mu/7fHHHNJqAi\nnp+6gM3SEt9zQpmtNmoLjCg5btmlf1RCw7Eg3Y6MHHqJNquzFaoKVap8eB/uQlqB\ng1bJQcFUjh92TBt3cQhCY/oeztTqfKZfB2eKK+TG4s1P0nFXVlOvQfbAuPskyfjz\ndI/P1djnCtzG7AQl9AgppIKIGoL6YHyBR7o6UMG8sreg4kgYe03k8AkwfDn6QHM8\nTp60coakkFLy6gtZk/55zPVKkiy/tBi1r9Z8d+g964Wz+3pXzReGpOHRyDcC3jE=\n=A7UH\n-----END PGP SIGNATURE-----\n", "payload": "tree c98f2da6377e53bfdb264d26c72866ebdbbf15e0\nparent 54013532cd5db91219127eed2f9f1e7045154ecb\nparent 8bdf988be21471fb56a484e7f32379e42cecc0a5\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588355353 +0200\ncommitter GitHub <noreply@github.com> 1588355353 +0200\n\nRollup merge of #71747 - spastorino:safety-scheme-around-consts-cleanup, r=oli-obk\n\nRemove deadcode in eval_mir_constant_to_operand\n\nr? @oli-obk @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d83d8be65d92f00f816f5ae55731c6416b2ff849", "html_url": "https://github.com/rust-lang/rust/commit/d83d8be65d92f00f816f5ae55731c6416b2ff849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d83d8be65d92f00f816f5ae55731c6416b2ff849/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54013532cd5db91219127eed2f9f1e7045154ecb", "url": "https://api.github.com/repos/rust-lang/rust/commits/54013532cd5db91219127eed2f9f1e7045154ecb", "html_url": "https://github.com/rust-lang/rust/commit/54013532cd5db91219127eed2f9f1e7045154ecb"}, {"sha": "8bdf988be21471fb56a484e7f32379e42cecc0a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bdf988be21471fb56a484e7f32379e42cecc0a5", "html_url": "https://github.com/rust-lang/rust/commit/8bdf988be21471fb56a484e7f32379e42cecc0a5"}], "stats": {"total": 22, "additions": 3, "deletions": 19}, "files": [{"sha": "d2629b771c2af5b631766f4afe308166fbb2edcc", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d83d8be65d92f00f816f5ae55731c6416b2ff849/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d83d8be65d92f00f816f5ae55731c6416b2ff849/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=d83d8be65d92f00f816f5ae55731c6416b2ff849", "patch": "@@ -16,25 +16,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx: &mut Bx,\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<OperandRef<'tcx, Bx::Value>, ErrorHandled> {\n-        match constant.literal.val {\n-            // Special case unevaluated statics, because statics have an identity and thus should\n-            // use `get_static` to get at their id.\n-            // FIXME(oli-obk): can we unify this somehow, maybe by making const eval of statics\n-            // always produce `&STATIC`. This may also simplify how const eval works with statics.\n-            ty::ConstKind::Unevaluated(def_id, substs, None) if self.cx.tcx().is_static(def_id) => {\n-                assert!(substs.is_empty(), \"we don't support generic statics yet\");\n-                let static_ = bx.get_static(def_id);\n-                // we treat operands referring to statics as if they were `&STATIC` instead\n-                let ptr_ty = self.cx.tcx().mk_mut_ptr(self.monomorphize(&constant.literal.ty));\n-                let layout = bx.layout_of(ptr_ty);\n-                Ok(OperandRef::from_immediate_or_packed_pair(bx, static_, layout))\n-            }\n-            _ => {\n-                let val = self.eval_mir_constant(constant)?;\n-                let ty = self.monomorphize(&constant.literal.ty);\n-                Ok(OperandRef::from_const(bx, val, ty))\n-            }\n-        }\n+        let val = self.eval_mir_constant(constant)?;\n+        let ty = self.monomorphize(&constant.literal.ty);\n+        Ok(OperandRef::from_const(bx, val, ty))\n     }\n \n     pub fn eval_mir_constant("}]}