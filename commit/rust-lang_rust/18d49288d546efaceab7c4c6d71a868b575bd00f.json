{"sha": "18d49288d546efaceab7c4c6d71a868b575bd00f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZDQ5Mjg4ZDU0NmVmYWNlYWI3YzRjNmQ3MWE4NjhiNTc1YmQwMGY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-12-22T21:24:29Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-12-27T02:06:23Z"}, "message": "PTX support\n\n- `--emit=asm --target=nvptx64-nvidia-cuda` can be used to turn a crate\n  into a PTX module (a `.s` file).\n\n- intrinsics like `__syncthreads` and `blockIdx.x` are exposed as\n  `\"platform-intrinsics\"`.\n\n- \"cabi\" has been implemented for the nvptx and nvptx64 architectures.\n  i.e. `extern \"C\"` works.\n\n- a new ABI, `\"ptx-kernel\"`. That can be used to generate \"global\"\n  functions. Example: `extern \"ptx-kernel\" fn kernel() { .. }`. All\n  other functions are \"device\" functions.", "tree": {"sha": "9df84415f9655febf4372df9ad2a0a6bdaf511e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9df84415f9655febf4372df9ad2a0a6bdaf511e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18d49288d546efaceab7c4c6d71a868b575bd00f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18d49288d546efaceab7c4c6d71a868b575bd00f", "html_url": "https://github.com/rust-lang/rust/commit/18d49288d546efaceab7c4c6d71a868b575bd00f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18d49288d546efaceab7c4c6d71a868b575bd00f/comments", "author": null, "committer": null, "parents": [{"sha": "b7e5148bbd95062ae8c5e018dec8fd44a8028e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d", "html_url": "https://github.com/rust-lang/rust/commit/b7e5148bbd95062ae8c5e018dec8fd44a8028e0d"}], "stats": {"total": 347, "additions": 344, "deletions": 3}, "files": [{"sha": "80f27a5ab673f5f464cf2f6ce4c2da1f3266ad0d", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=18d49288d546efaceab7c4c6d71a868b575bd00f", "patch": "@@ -81,7 +81,7 @@ pub fn llvm(build: &Build, target: &str) {\n        .profile(profile)\n        .define(\"LLVM_ENABLE_ASSERTIONS\", assertions)\n        .define(\"LLVM_TARGETS_TO_BUILD\",\n-               \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc\")\n+               \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX\")\n        .define(\"LLVM_INCLUDE_EXAMPLES\", \"OFF\")\n        .define(\"LLVM_INCLUDE_TESTS\", \"OFF\")\n        .define(\"LLVM_INCLUDE_DOCS\", \"OFF\")"}, {"sha": "1beaaeb5d8718161e5ceba4a42d9d3fe3b903c07", "filename": "src/etc/platform-intrinsics/nvptx/cuda.json", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Fcuda.json", "raw_url": "https://github.com/rust-lang/rust/raw/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Fcuda.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Fcuda.json?ref=18d49288d546efaceab7c4c6d71a868b575bd00f", "patch": "@@ -0,0 +1,13 @@\n+{\n+    \"intrinsic_prefix\": \"_\",\n+    \"llvm_prefix\": \"llvm.cuda.\",\n+    \"intrinsics\": [\n+        {\n+            \"intrinsic\": \"syncthreads\",\n+            \"width\": [\"0\"],\n+            \"llvm\": \"syncthreads\",\n+            \"ret\": \"V\",\n+            \"args\": []\n+        }\n+    ]\n+}"}, {"sha": "80332c54e04141dff0866ad6a104fd6225214418", "filename": "src/etc/platform-intrinsics/nvptx/info.json", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Finfo.json", "raw_url": "https://github.com/rust-lang/rust/raw/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Finfo.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Finfo.json?ref=18d49288d546efaceab7c4c6d71a868b575bd00f", "patch": "@@ -0,0 +1,7 @@\n+{\n+  \"platform\": \"nvptx\",\n+  \"number_info\": {\n+    \"signed\": {}\n+  },\n+  \"width_info\": {}\n+}"}, {"sha": "33d97f2694699d0069d54266135347efe88acaf4", "filename": "src/etc/platform-intrinsics/nvptx/sreg.json", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Fsreg.json", "raw_url": "https://github.com/rust-lang/rust/raw/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Fsreg.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fnvptx%2Fsreg.json?ref=18d49288d546efaceab7c4c6d71a868b575bd00f", "patch": "@@ -0,0 +1,90 @@\n+{\n+    \"intrinsic_prefix\": \"_\",\n+    \"llvm_prefix\": \"llvm.nvvm.read.ptx.sreg.\",\n+    \"intrinsics\": [\n+        {\n+            \"intrinsic\": \"block_dim_x\",\n+            \"width\": [\"0\"],\n+            \"llvm\": \"ntid.x\",\n+            \"ret\": \"S32\",\n+            \"args\": []\n+        },\n+        {\n+            \"intrinsic\": \"block_dim_y\",\n+            \"width\": [\"0\"],\n+            \"llvm\": \"ntid.y\",\n+            \"ret\": \"S32\",\n+            \"args\": []\n+        },\n+        {\n+            \"intrinsic\": \"block_dim_z\",\n+            \"width\": [\"0\"],\n+            \"llvm\": \"ntid.z\",\n+            \"ret\": \"S32\",\n+            \"args\": []\n+        },\n+        {\n+            \"intrinsic\": \"block_idx_x\",\n+            \"width\": [\"0\"],\n+            \"llvm\": \"ctaid.x\",\n+            \"ret\": \"S32\",\n+            \"args\": []\n+        },\n+        {\n+            \"intrinsic\": \"block_idx_y\",\n+            \"width\": [\"0\"],\n+            \"llvm\": \"ctaid.y\",\n+            \"ret\": \"S32\",\n+            \"args\": []\n+        },\n+        {\n+            \"intrinsic\": \"block_idx_z\",\n+            \"width\": [\"0\"],\n+            \"llvm\": \"ctaid.z\",\n+            \"ret\": \"S32\",\n+            \"args\": []\n+        },\n+        {\n+            \"intrinsic\": \"grid_dim_x\",\n+            \"width\": [\"0\"],\n+            \"llvm\": \"nctaid.x\",\n+            \"ret\": \"S32\",\n+            \"args\": []\n+        },\n+        {\n+            \"intrinsic\": \"grid_dim_y\",\n+            \"width\": [\"0\"],\n+            \"llvm\": \"nctaid.y\",\n+            \"ret\": \"S32\",\n+            \"args\": []\n+        },\n+        {\n+            \"intrinsic\": \"grid_dim_z\",\n+            \"width\": [\"0\"],\n+            \"llvm\": \"nctaid.z\",\n+            \"ret\": \"S32\",\n+            \"args\": []\n+        },\n+        {\n+            \"intrinsic\": \"thread_idx_x\",\n+            \"width\": [\"0\"],\n+            \"llvm\": \"tid.x\",\n+            \"ret\": \"S32\",\n+            \"args\": []\n+        },\n+        {\n+            \"intrinsic\": \"thread_idx_y\",\n+            \"width\": [\"0\"],\n+            \"llvm\": \"tid.y\",\n+            \"ret\": \"S32\",\n+            \"args\": []\n+        },\n+        {\n+            \"intrinsic\": \"thread_idx_z\",\n+            \"width\": [\"0\"],\n+            \"llvm\": \"tid.z\",\n+            \"ret\": \"S32\",\n+            \"args\": []\n+        }\n+    ]\n+}"}, {"sha": "2ee4cc49435611316e1a7e1d3b717dae609c8574", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=18d49288d546efaceab7c4c6d71a868b575bd00f", "patch": "@@ -96,7 +96,7 @@ fn main() {\n \n     let optional_components =\n         [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\", \"jsbackend\", \"msp430\",\n-         \"sparc\"];\n+         \"sparc\", \"nvptx\"];\n \n     // FIXME: surely we don't need all these components, right? Stuff like mcjit\n     //        or interpreter the compiler itself never uses."}, {"sha": "334a1dbdec160b10125d1e3fcef084240825798d", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=18d49288d546efaceab7c4c6d71a868b575bd00f", "patch": "@@ -42,6 +42,7 @@ pub enum CallConv {\n     X86StdcallCallConv = 64,\n     X86FastcallCallConv = 65,\n     ArmAapcsCallConv = 67,\n+    PtxKernel = 71,\n     X86_64_SysV = 78,\n     X86_64_Win64 = 79,\n     X86_VectorCall = 80,"}, {"sha": "679e9c17a8b924ee16fef09a6b2743d583d1ac9a", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=18d49288d546efaceab7c4c6d71a868b575bd00f", "patch": "@@ -377,6 +377,11 @@ pub fn initialize_available_targets() {\n                  LLVMInitializeSparcTargetMC,\n                  LLVMInitializeSparcAsmPrinter,\n                  LLVMInitializeSparcAsmParser);\n+    init_target!(llvm_component = \"nvptx\",\n+                 LLVMInitializeNVPTXTargetInfo,\n+                 LLVMInitializeNVPTXTarget,\n+                 LLVMInitializeNVPTXTargetMC,\n+                 LLVMInitializeNVPTXAsmPrinter);\n }\n \n pub fn last_error() -> Option<String> {"}, {"sha": "e814050e9609771a0d859249dcd95c173ed7c703", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=18d49288d546efaceab7c4c6d71a868b575bd00f", "patch": "@@ -95,6 +95,7 @@ static VOID: Type = Type::Void;\n mod x86;\n mod arm;\n mod aarch64;\n+mod nvptx;\n \n impl Intrinsic {\n     pub fn find(name: &str) -> Option<Intrinsic> {\n@@ -104,6 +105,8 @@ impl Intrinsic {\n             arm::find(name)\n         } else if name.starts_with(\"aarch64_\") {\n             aarch64::find(name)\n+        } else if name.starts_with(\"nvptx_\") {\n+            nvptx::find(name)\n         } else {\n             None\n         }"}, {"sha": "82408723ebe6fafe8cf342b58514c1c62cec63b5", "filename": "src/librustc_platform_intrinsics/nvptx.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_platform_intrinsics%2Fnvptx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_platform_intrinsics%2Fnvptx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fnvptx.rs?ref=18d49288d546efaceab7c4c6d71a868b575bd00f", "patch": "@@ -0,0 +1,92 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// DO NOT EDIT: autogenerated by etc/platform-intrinsics/generator.py\n+// ignore-tidy-linelength\n+\n+#![allow(unused_imports)]\n+\n+use {Intrinsic, Type};\n+use IntrinsicDef::Named;\n+\n+// The default inlining settings trigger a pathological behaviour in\n+// LLVM, which causes makes compilation very slow. See #28273.\n+#[inline(never)]\n+pub fn find(name: &str) -> Option<Intrinsic> {\n+    if !name.starts_with(\"nvptx\") { return None }\n+    Some(match &name[\"nvptx\".len()..] {\n+        \"_syncthreads\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n+            output: &::VOID,\n+            definition: Named(\"llvm.cuda.syncthreads\")\n+        },\n+        \"_block_dim_x\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n+            output: &::I32,\n+            definition: Named(\"llvm.nvvm.read.ptx.sreg.ntid.x\")\n+        },\n+        \"_block_dim_y\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n+            output: &::I32,\n+            definition: Named(\"llvm.nvvm.read.ptx.sreg.ntid.y\")\n+        },\n+        \"_block_dim_z\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n+            output: &::I32,\n+            definition: Named(\"llvm.nvvm.read.ptx.sreg.ntid.z\")\n+        },\n+        \"_block_idx_x\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n+            output: &::I32,\n+            definition: Named(\"llvm.nvvm.read.ptx.sreg.ctaid.x\")\n+        },\n+        \"_block_idx_y\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n+            output: &::I32,\n+            definition: Named(\"llvm.nvvm.read.ptx.sreg.ctaid.y\")\n+        },\n+        \"_block_idx_z\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n+            output: &::I32,\n+            definition: Named(\"llvm.nvvm.read.ptx.sreg.ctaid.z\")\n+        },\n+        \"_grid_dim_x\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n+            output: &::I32,\n+            definition: Named(\"llvm.nvvm.read.ptx.sreg.nctaid.x\")\n+        },\n+        \"_grid_dim_y\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n+            output: &::I32,\n+            definition: Named(\"llvm.nvvm.read.ptx.sreg.nctaid.y\")\n+        },\n+        \"_grid_dim_z\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n+            output: &::I32,\n+            definition: Named(\"llvm.nvvm.read.ptx.sreg.nctaid.z\")\n+        },\n+        \"_thread_idx_x\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n+            output: &::I32,\n+            definition: Named(\"llvm.nvvm.read.ptx.sreg.tid.x\")\n+        },\n+        \"_thread_idx_y\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n+            output: &::I32,\n+            definition: Named(\"llvm.nvvm.read.ptx.sreg.tid.y\")\n+        },\n+        \"_thread_idx_z\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 0] = []; &INPUTS },\n+            output: &::I32,\n+            definition: Named(\"llvm.nvvm.read.ptx.sreg.tid.z\")\n+        },\n+        _ => return None,\n+    })\n+}"}, {"sha": "81e4b4d1f21c76c84ed115ac748d519a007617ff", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=18d49288d546efaceab7c4c6d71a868b575bd00f", "patch": "@@ -25,6 +25,8 @@ use cabi_mips64;\n use cabi_asmjs;\n use cabi_msp430;\n use cabi_sparc;\n+use cabi_nvptx;\n+use cabi_nvptx64;\n use machine::{llalign_of_min, llsize_of, llsize_of_alloc};\n use type_::Type;\n use type_of;\n@@ -353,6 +355,7 @@ impl FnType {\n             Win64 => llvm::X86_64_Win64,\n             SysV64 => llvm::X86_64_SysV,\n             Aapcs => llvm::ArmAapcsCallConv,\n+            PtxKernel => llvm::PtxKernel,\n \n             // These API constants ought to be more specific...\n             Cdecl => llvm::CCallConv,\n@@ -608,6 +611,8 @@ impl FnType {\n             \"wasm32\" => cabi_asmjs::compute_abi_info(ccx, self),\n             \"msp430\" => cabi_msp430::compute_abi_info(ccx, self),\n             \"sparc\" => cabi_sparc::compute_abi_info(ccx, self),\n+            \"nvptx\" => cabi_nvptx::compute_abi_info(ccx, self),\n+            \"nvptx64\" => cabi_nvptx64::compute_abi_info(ccx, self),\n             a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }\n "}, {"sha": "5ece19f764a8ac2572f9161815e7f62a9040c22e", "filename": "src/librustc_trans/cabi_nvptx.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_trans%2Fcabi_nvptx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_trans%2Fcabi_nvptx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_nvptx.rs?ref=18d49288d546efaceab7c4c6d71a868b575bd00f", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Reference: PTX Writer's Guide to Interoperability\n+// http://docs.nvidia.com/cuda/ptx-writers-guide-to-interoperability\n+\n+#![allow(non_upper_case_globals)]\n+\n+use llvm::Struct;\n+\n+use abi::{self, ArgType, FnType};\n+use context::CrateContext;\n+use type_::Type;\n+\n+fn ty_size(ty: Type) -> usize {\n+    abi::ty_size(ty, 4)\n+}\n+\n+fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) {\n+    if ret.ty.kind() == Struct && ty_size(ret.ty) > 32 {\n+        ret.make_indirect(ccx);\n+    } else {\n+        ret.extend_integer_width_to(32);\n+    }\n+}\n+\n+fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType) {\n+    if arg.ty.kind() == Struct && ty_size(arg.ty) > 32 {\n+        arg.make_indirect(ccx);\n+    } else {\n+        arg.extend_integer_width_to(32);\n+    }\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(ccx, &mut fty.ret);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+        classify_arg_ty(ccx, arg);\n+    }\n+}"}, {"sha": "880c6cfd7a8ac24387c183f97ef9848bb577ec89", "filename": "src/librustc_trans/cabi_nvptx64.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_trans%2Fcabi_nvptx64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_trans%2Fcabi_nvptx64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_nvptx64.rs?ref=18d49288d546efaceab7c4c6d71a868b575bd00f", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Reference: PTX Writer's Guide to Interoperability\n+// http://docs.nvidia.com/cuda/ptx-writers-guide-to-interoperability\n+\n+#![allow(non_upper_case_globals)]\n+\n+use llvm::Struct;\n+\n+use abi::{self, ArgType, FnType};\n+use context::CrateContext;\n+use type_::Type;\n+\n+fn ty_size(ty: Type) -> usize {\n+    abi::ty_size(ty, 8)\n+}\n+\n+fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) {\n+    if ret.ty.kind() == Struct && ty_size(ret.ty) > 64 {\n+        ret.make_indirect(ccx);\n+    } else {\n+        ret.extend_integer_width_to(64);\n+    }\n+}\n+\n+fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType) {\n+    if arg.ty.kind() == Struct && ty_size(arg.ty) > 64 {\n+        arg.make_indirect(ccx);\n+    } else {\n+        arg.extend_integer_width_to(64);\n+    }\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(ccx, &mut fty.ret);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+        classify_arg_ty(ccx, arg);\n+    }\n+}"}, {"sha": "0d3e1853f011eb001cb0f8219e6cf1996b6c3b5a", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=18d49288d546efaceab7c4c6d71a868b575bd00f", "patch": "@@ -103,6 +103,8 @@ mod cabi_asmjs;\n mod cabi_mips;\n mod cabi_mips64;\n mod cabi_msp430;\n+mod cabi_nvptx;\n+mod cabi_nvptx64;\n mod cabi_powerpc;\n mod cabi_powerpc64;\n mod cabi_s390x;"}, {"sha": "0cc62fb43a54d270cbf287167944c44782fd41f1", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=18d49288d546efaceab7c4c6d71a868b575bd00f", "patch": "@@ -41,6 +41,7 @@ pub enum Abi {\n     Aapcs,\n     Win64,\n     SysV64,\n+    PtxKernel,\n \n     // Multiplatform / generic ABIs\n     Rust,\n@@ -82,6 +83,7 @@ const AbiDatas: &'static [AbiData] = &[\n     AbiData {abi: Abi::Aapcs, name: \"aapcs\", generic: false },\n     AbiData {abi: Abi::Win64, name: \"win64\", generic: false },\n     AbiData {abi: Abi::SysV64, name: \"sysv64\", generic: false },\n+    AbiData {abi: Abi::PtxKernel, name: \"ptx-kernel\", generic: false },\n \n     // Cross-platform ABIs\n     AbiData {abi: Abi::Rust, name: \"Rust\", generic: true },"}, {"sha": "625af803458b5bd939782b4a4dafb698342b9e78", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d49288d546efaceab7c4c6d71a868b575bd00f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=18d49288d546efaceab7c4c6d71a868b575bd00f", "patch": "@@ -318,6 +318,9 @@ declare_features! (\n \n     // Allow safe suggestions for potential type conversions.\n     (active, safe_suggestion, \"1.0.0\", Some(37384)),\n+\n+    // `extern \"ptx-*\" fn()`\n+    (active, abi_ptx, \"1.15.0\", None),\n );\n \n declare_features! (\n@@ -986,7 +989,19 @@ impl<'a> PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, abi_sysv64, span,\n                                    \"sysv64 ABI is experimental and subject to change\");\n             },\n-            _ => {}\n+            Abi::PtxKernel => {\n+                gate_feature_post!(&self, abi_ptx, span,\n+                                   \"PTX ABIs are experimental and subject to change\");\n+            }\n+            // Stable\n+            Abi::Cdecl |\n+            Abi::Stdcall |\n+            Abi::Fastcall |\n+            Abi::Aapcs |\n+            Abi::Win64 |\n+            Abi::Rust |\n+            Abi::C |\n+            Abi::System => {}\n         }\n     }\n }"}]}