{"sha": "3bdf2e0972a1458c28b3095f8d57e580130d09d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZGYyZTA5NzJhMTQ1OGMyOGIzMDk1ZjhkNTdlNTgwMTMwZDA5ZDM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-28T16:22:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-28T16:22:18Z"}, "message": "Merge #2917\n\n2917: Prefer imports starting with std r=matklad a=SomeoneToIgnore\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/2915\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "d1d3c23018cb1554d1c4ba63d9c8861305d537a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1d3c23018cb1554d1c4ba63d9c8861305d537a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bdf2e0972a1458c28b3095f8d57e580130d09d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeMF+6CRBK7hj4Ov3rIwAAdHIIAKgbSFGAxXJW72uVCl6MiWvH\n1gpgrvEzKSCMCYJnX41eq9S2YI3W+WWRFnliMNd1VGHxEz8KGCmZReuQ2TzLgOfk\nIlM7CSYabLj/g7URBwiInCaDZGhKd/Hi3047tI5tI30+RVT8PPvvcTdZLf7JMUo7\nMeNIR6nlUtSSi3Tzj46bFfghELSmH6iOAdyYgQJtLq8aJDGWgMxR9NUcB5gJ6yky\nyZMq1iPmj3mI4pLMwhRFNdFJUDWFp/iqhewMguWCnPHb/40FdBFVNvtPbnQV8pQ5\nANai3dAHMmRmnQQxan/X+x98f+QEKHGyV+GayVqPjOJ2C10T5ATBGbayVJtl2OA=\n=82YU\n-----END PGP SIGNATURE-----\n", "payload": "tree d1d3c23018cb1554d1c4ba63d9c8861305d537a2\nparent 50b6a989d28b4b79e978d2c682859c12f4b75385\nparent 713870ee0c51a11dc0d2a5b8eafbc2624d42c359\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580228538 +0000\ncommitter GitHub <noreply@github.com> 1580228538 +0000\n\nMerge #2917\n\n2917: Prefer imports starting with std r=matklad a=SomeoneToIgnore\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/2915\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bdf2e0972a1458c28b3095f8d57e580130d09d3", "html_url": "https://github.com/rust-lang/rust/commit/3bdf2e0972a1458c28b3095f8d57e580130d09d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bdf2e0972a1458c28b3095f8d57e580130d09d3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50b6a989d28b4b79e978d2c682859c12f4b75385", "url": "https://api.github.com/repos/rust-lang/rust/commits/50b6a989d28b4b79e978d2c682859c12f4b75385", "html_url": "https://github.com/rust-lang/rust/commit/50b6a989d28b4b79e978d2c682859c12f4b75385"}, {"sha": "713870ee0c51a11dc0d2a5b8eafbc2624d42c359", "url": "https://api.github.com/repos/rust-lang/rust/commits/713870ee0c51a11dc0d2a5b8eafbc2624d42c359", "html_url": "https://github.com/rust-lang/rust/commit/713870ee0c51a11dc0d2a5b8eafbc2624d42c359"}], "stats": {"total": 102, "additions": 88, "deletions": 14}, "files": [{"sha": "43b9b124a2d403a27595eab5894ab57153ce2868", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 85, "deletions": 14, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/3bdf2e0972a1458c28b3095f8d57e580130d09d3/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdf2e0972a1458c28b3095f8d57e580130d09d3/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=3bdf2e0972a1458c28b3095f8d57e580130d09d3", "patch": "@@ -7,10 +7,39 @@ use crate::{\n     visibility::Visibility,\n     CrateId, ModuleDefId, ModuleId,\n };\n-use hir_expand::name::Name;\n+use hir_expand::name::{known, Name};\n+use test_utils::tested_by;\n \n const MAX_PATH_LEN: usize = 15;\n \n+impl ModPath {\n+    fn starts_with_std(&self) -> bool {\n+        self.segments.first().filter(|&first_segment| first_segment == &known::std).is_some()\n+    }\n+\n+    // When std library is present, paths starting with `std::`\n+    // should be preferred over paths starting with `core::` and `alloc::`\n+    fn should_start_with_std(&self) -> bool {\n+        self.segments\n+            .first()\n+            .filter(|&first_segment| {\n+                first_segment == &known::alloc || first_segment == &known::core\n+            })\n+            .is_some()\n+    }\n+\n+    fn len(&self) -> usize {\n+        self.segments.len()\n+            + match self.kind {\n+                PathKind::Plain => 0,\n+                PathKind::Super(i) => i as usize,\n+                PathKind::Crate => 1,\n+                PathKind::Abs => 0,\n+                PathKind::DollarCrate(_) => 1,\n+            }\n+    }\n+}\n+\n // FIXME: handle local items\n \n /// Find a path that can be used to refer to a certain item. This can depend on\n@@ -112,23 +141,27 @@ fn find_path_inner(\n             Some(path) => path,\n         };\n         path.segments.push(name);\n-        if path_len(&path) < best_path_len {\n-            best_path_len = path_len(&path);\n-            best_path = Some(path);\n-        }\n+\n+        let new_path =\n+            if let Some(best_path) = best_path { select_best_path(best_path, path) } else { path };\n+        best_path_len = new_path.len();\n+        best_path = Some(new_path);\n     }\n     best_path\n }\n \n-fn path_len(path: &ModPath) -> usize {\n-    path.segments.len()\n-        + match path.kind {\n-            PathKind::Plain => 0,\n-            PathKind::Super(i) => i as usize,\n-            PathKind::Crate => 1,\n-            PathKind::Abs => 0,\n-            PathKind::DollarCrate(_) => 1,\n-        }\n+fn select_best_path(old_path: ModPath, new_path: ModPath) -> ModPath {\n+    if old_path.starts_with_std() && new_path.should_start_with_std() {\n+        tested_by!(prefer_std_paths);\n+        old_path\n+    } else if new_path.starts_with_std() && old_path.should_start_with_std() {\n+        tested_by!(prefer_std_paths);\n+        new_path\n+    } else if new_path.len() < old_path.len() {\n+        new_path\n+    } else {\n+        old_path\n+    }\n }\n \n fn find_importable_locations(\n@@ -201,6 +234,7 @@ mod tests {\n     use hir_expand::hygiene::Hygiene;\n     use ra_db::fixture::WithFixture;\n     use ra_syntax::ast::AstNode;\n+    use test_utils::covers;\n \n     /// `code` needs to contain a cursor marker; checks that `find_path` for the\n     /// item the `path` refers to returns that same path when called from the\n@@ -452,4 +486,41 @@ mod tests {\n         \"#;\n         check_found_path(code, \"crate::foo::S\");\n     }\n+\n+    #[test]\n+    fn prefer_std_paths_over_alloc() {\n+        covers!(prefer_std_paths);\n+        let code = r#\"\n+        //- /main.rs crate:main deps:alloc,std\n+        <|>\n+\n+        //- /std.rs crate:std deps:alloc\n+        pub mod sync {\n+            pub use alloc::sync::Arc;\n+        }\n+\n+        //- /zzz.rs crate:alloc\n+        pub mod sync {\n+            pub struct Arc;\n+        }\n+        \"#;\n+        check_found_path(code, \"std::sync::Arc\");\n+    }\n+\n+    #[test]\n+    fn prefer_shorter_paths_if_not_alloc() {\n+        let code = r#\"\n+        //- /main.rs crate:main deps:megaalloc,std\n+        <|>\n+\n+        //- /std.rs crate:std deps:megaalloc\n+        pub mod sync {\n+            pub use megaalloc::sync::Arc;\n+        }\n+\n+        //- /zzz.rs crate:megaalloc\n+        pub struct Arc;\n+        \"#;\n+        check_found_path(code, \"megaalloc::Arc\");\n+    }\n }"}, {"sha": "daa49d5f1040b6e792127d3299261fe685b76322", "filename": "crates/ra_hir_def/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bdf2e0972a1458c28b3095f8d57e580130d09d3/crates%2Fra_hir_def%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdf2e0972a1458c28b3095f8d57e580130d09d3/crates%2Fra_hir_def%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fmarks.rs?ref=3bdf2e0972a1458c28b3095f8d57e580130d09d3", "patch": "@@ -13,4 +13,5 @@ test_utils::marks!(\n     macro_dollar_crate_self\n     macro_dollar_crate_other\n     infer_resolve_while_let\n+    prefer_std_paths\n );"}, {"sha": "b2e10f445f3360d19126e7f61766e96ec2361a92", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bdf2e0972a1458c28b3095f8d57e580130d09d3/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdf2e0972a1458c28b3095f8d57e580130d09d3/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=3bdf2e0972a1458c28b3095f8d57e580130d09d3", "patch": "@@ -141,6 +141,8 @@ pub mod known {\n         macro_rules,\n         // Components of known path (value or mod name)\n         std,\n+        core,\n+        alloc,\n         iter,\n         ops,\n         future,"}]}