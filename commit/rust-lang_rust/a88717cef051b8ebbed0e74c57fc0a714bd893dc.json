{"sha": "a88717cef051b8ebbed0e74c57fc0a714bd893dc", "node_id": "C_kwDOAAsO6NoAKGE4ODcxN2NlZjA1MWI4ZWJiZWQwZTc0YzU3ZmMwYTcxNGJkODkzZGM", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-03-31T09:24:46Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-05T06:01:03Z"}, "message": "macros: support translatable labels\n\nExtends support for generating `DiagnosticMessage::FluentIdentifier`\nmessages from `SessionDiagnostic` derive to `#[label]`.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "da04f2a5e842261b84379a6b240700367f6127e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da04f2a5e842261b84379a6b240700367f6127e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a88717cef051b8ebbed0e74c57fc0a714bd893dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a88717cef051b8ebbed0e74c57fc0a714bd893dc", "html_url": "https://github.com/rust-lang/rust/commit/a88717cef051b8ebbed0e74c57fc0a714bd893dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a88717cef051b8ebbed0e74c57fc0a714bd893dc/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72dec56028d848ba18a7e1a9bf9da0b6faf5f7da", "url": "https://api.github.com/repos/rust-lang/rust/commits/72dec56028d848ba18a7e1a9bf9da0b6faf5f7da", "html_url": "https://github.com/rust-lang/rust/commit/72dec56028d848ba18a7e1a9bf9da0b6faf5f7da"}], "stats": {"total": 235, "additions": 140, "deletions": 95}, "files": [{"sha": "ecb3cdd627cec71bf6c1d8f1ce9522f9070188ba", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a88717cef051b8ebbed0e74c57fc0a714bd893dc/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88717cef051b8ebbed0e74c57fc0a714bd893dc/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=a88717cef051b8ebbed0e74c57fc0a714bd893dc", "patch": "@@ -277,7 +277,7 @@ impl Diagnostic {\n     ///\n     /// This span is *not* considered a [\"primary span\"][`MultiSpan`]; only\n     /// the `Span` supplied when creating the diagnostic is primary.\n-    pub fn span_label<T: Into<String>>(&mut self, span: Span, label: T) -> &mut Self {\n+    pub fn span_label(&mut self, span: Span, label: impl Into<DiagnosticMessage>) -> &mut Self {\n         self.span.push_span_label(span, label.into());\n         self\n     }"}, {"sha": "74e0f7429461389194ae4f943e251750fafed9ac", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a88717cef051b8ebbed0e74c57fc0a714bd893dc/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88717cef051b8ebbed0e74c57fc0a714bd893dc/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=a88717cef051b8ebbed0e74c57fc0a714bd893dc", "patch": "@@ -408,7 +408,7 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n     /// the diagnostic was constructed. However, the label span is *not* considered a\n     /// [\"primary span\"][`MultiSpan`]; only the `Span` supplied when creating the diagnostic is\n     /// primary.\n-    pub fn span_label(&mut self, span: Span, label: impl Into<String>) -> &mut Self);\n+    pub fn span_label(&mut self, span: Span, label: impl Into<DiagnosticMessage>) -> &mut Self);\n \n     forward!(\n     /// Labels all the given spans with the provided label."}, {"sha": "efbffabbd03454244ab6947b0be1c9bec64ea630", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 75, "deletions": 34, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/a88717cef051b8ebbed0e74c57fc0a714bd893dc/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88717cef051b8ebbed0e74c57fc0a714bd893dc/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=a88717cef051b8ebbed0e74c57fc0a714bd893dc", "patch": "@@ -561,6 +561,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n     ) -> Result<proc_macro2::TokenStream, SessionDiagnosticDeriveError> {\n         let diag = &self.diag;\n         let field_binding = &info.binding.binding;\n+\n         let name = attr.path.segments.last().unwrap().ident.to_string();\n         let name = name.as_str();\n \n@@ -573,46 +574,38 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                     Ok(quote! {})\n                 }\n                 \"primary_span\" => {\n-                    if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n-                        return Ok(quote! {\n-                            #diag.set_span(*#field_binding);\n-                        });\n-                    } else {\n-                        throw_span_err!(\n-                            attr.span().unwrap(),\n-                            \"the `#[primary_span]` attribute can only be applied to fields of type `Span`\"\n-                        );\n-                    }\n+                    self.report_error_if_not_applied_to_span(attr, info)?;\n+                    Ok(quote! {\n+                        #diag.set_span(*#field_binding);\n+                    })\n+                }\n+                \"label\" => {\n+                    self.report_error_if_not_applied_to_span(attr, info)?;\n+                    Ok(self.add_subdiagnostic(field_binding, name, \"label\"))\n                 }\n                 other => throw_span_err!(\n                     attr.span().unwrap(),\n                     &format!(\"`#[{}]` is not a valid `SessionDiagnostic` field attribute\", other)\n                 ),\n             },\n-            syn::Meta::NameValue(syn::MetaNameValue { lit: syn::Lit::Str(s), .. }) => {\n-                let formatted_str = self.build_format(&s.value(), attr.span());\n-                match name {\n-                    \"label\" => {\n-                        if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n-                            return Ok(quote! {\n-                                #diag.span_label(*#field_binding, #formatted_str);\n-                            });\n-                        } else {\n-                            throw_span_err!(\n-                                attr.span().unwrap(),\n-                                \"the `#[label = ...]` attribute can only be applied to fields of type `Span`\"\n-                            );\n-                        }\n-                    }\n-                    other => throw_span_err!(\n-                        attr.span().unwrap(),\n-                        &format!(\n-                            \"`#[{} = ...]` is not a valid `SessionDiagnostic` field attribute\",\n-                            other\n-                        )\n-                    ),\n+            syn::Meta::NameValue(syn::MetaNameValue { lit: syn::Lit::Str(s), .. }) => match name {\n+                \"label\" => {\n+                    self.report_error_if_not_applied_to_span(attr, info)?;\n+                    Ok(self.add_subdiagnostic(field_binding, name, &s.value()))\n                 }\n-            }\n+                other => throw_span_err!(\n+                    attr.span().unwrap(),\n+                    &format!(\n+                        \"`#[{} = ...]` is not a valid `SessionDiagnostic` field attribute\",\n+                        other\n+                    )\n+                ),\n+            },\n+            syn::Meta::NameValue(_) => throw_span_err!(\n+                attr.span().unwrap(),\n+                &format!(\"`#[{} = ...]` is not a valid `SessionDiagnostic` field attribute\", name),\n+                |diag| diag.help(\"value must be a string\")\n+            ),\n             syn::Meta::List(list) => {\n                 match list.path.segments.iter().last().unwrap().ident.to_string().as_str() {\n                     suggestion_kind @ \"suggestion\"\n@@ -681,7 +674,55 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                     ),\n                 }\n             }\n-            _ => panic!(\"unhandled meta kind\"),\n+        }\n+    }\n+\n+    /// Reports an error if the field's type is not `Span`.\n+    fn report_error_if_not_applied_to_span(\n+        &self,\n+        attr: &syn::Attribute,\n+        info: FieldInfo<'_>,\n+    ) -> Result<(), SessionDiagnosticDeriveError> {\n+        if !type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n+            let name = attr.path.segments.last().unwrap().ident.to_string();\n+            let name = name.as_str();\n+            let meta = attr.parse_meta()?;\n+\n+            throw_span_err!(\n+                attr.span().unwrap(),\n+                &format!(\n+                    \"the `#[{}{}]` attribute can only be applied to fields of type `Span`\",\n+                    name,\n+                    match meta {\n+                        syn::Meta::Path(_) => \"\",\n+                        syn::Meta::NameValue(_) => \" = ...\",\n+                        syn::Meta::List(_) => \"(...)\",\n+                    }\n+                )\n+            );\n+        }\n+\n+        Ok(())\n+    }\n+\n+    /// Adds a subdiagnostic by generating a `diag.span_$kind` call with the current slug and\n+    /// `fluent_attr_identifier`.\n+    fn add_subdiagnostic(\n+        &self,\n+        field_binding: &proc_macro2::Ident,\n+        kind: &str,\n+        fluent_attr_identifier: &str,\n+    ) -> proc_macro2::TokenStream {\n+        let diag = &self.diag;\n+\n+        let slug =\n+            self.slug.as_ref().map(|(slug, _)| slug.as_str()).unwrap_or_else(|| \"missing-slug\");\n+        let fn_name = format_ident!(\"span_{}\", kind);\n+        quote! {\n+            #diag.#fn_name(\n+                *#field_binding,\n+                rustc_errors::DiagnosticMessage::fluent_attr(#slug, #fluent_attr_identifier)\n+            );\n         }\n     }\n "}, {"sha": "72733e087c282e553651e5baeb1de7e359800b51", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a88717cef051b8ebbed0e74c57fc0a714bd893dc/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88717cef051b8ebbed0e74c57fc0a714bd893dc/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=a88717cef051b8ebbed0e74c57fc0a714bd893dc", "patch": "@@ -6,9 +6,9 @@ use rustc_span::{symbol::Ident, Span, Symbol};\n #[error(code = \"E0062\", slug = \"typeck-field-multiply-specified-in-initializer\")]\n pub struct FieldMultiplySpecifiedInInitializer {\n     #[primary_span]\n-    #[label = \"used more than once\"]\n+    #[label]\n     pub span: Span,\n-    #[label = \"first use of `{ident}`\"]\n+    #[label = \"previous-use-label\"]\n     pub prev_span: Span,\n     pub ident: Ident,\n }\n@@ -17,7 +17,7 @@ pub struct FieldMultiplySpecifiedInInitializer {\n #[error(code = \"E0092\", slug = \"typeck-unrecognized-atomic-operation\")]\n pub struct UnrecognizedAtomicOperation<'a> {\n     #[primary_span]\n-    #[label = \"unrecognized atomic operation\"]\n+    #[label]\n     pub span: Span,\n     pub op: &'a str,\n }\n@@ -26,7 +26,7 @@ pub struct UnrecognizedAtomicOperation<'a> {\n #[error(code = \"E0094\", slug = \"typeck-wrong-number-of-generic-arguments-to-intrinsic\")]\n pub struct WrongNumberOfGenericArgumentsToIntrinsic<'a> {\n     #[primary_span]\n-    #[label = \"expected {expected} {descr} parameter{expected_pluralize}\"]\n+    #[label]\n     pub span: Span,\n     pub found: usize,\n     pub expected: usize,\n@@ -38,7 +38,7 @@ pub struct WrongNumberOfGenericArgumentsToIntrinsic<'a> {\n #[error(code = \"E0093\", slug = \"typeck-unrecognized-intrinsic-function\")]\n pub struct UnrecognizedIntrinsicFunction {\n     #[primary_span]\n-    #[label = \"unrecognized intrinsic\"]\n+    #[label]\n     pub span: Span,\n     pub name: Symbol,\n }\n@@ -47,9 +47,9 @@ pub struct UnrecognizedIntrinsicFunction {\n #[error(code = \"E0195\", slug = \"typeck-lifetimes-or-bounds-mismatch-on-trait\")]\n pub struct LifetimesOrBoundsMismatchOnTrait {\n     #[primary_span]\n-    #[label = \"lifetimes do not match {item_kind} in trait\"]\n+    #[label]\n     pub span: Span,\n-    #[label = \"lifetimes in impl do not match this {item_kind} in trait\"]\n+    #[label = \"generics-label\"]\n     pub generics_span: Option<Span>,\n     pub item_kind: &'static str,\n     pub ident: Ident,\n@@ -59,7 +59,7 @@ pub struct LifetimesOrBoundsMismatchOnTrait {\n #[error(code = \"E0120\", slug = \"typeck-drop-impl-on-wrong-item\")]\n pub struct DropImplOnWrongItem {\n     #[primary_span]\n-    #[label = \"must be a struct, enum, or union\"]\n+    #[label]\n     pub span: Span,\n }\n \n@@ -68,17 +68,17 @@ pub struct DropImplOnWrongItem {\n pub struct FieldAlreadyDeclared {\n     pub field_name: Ident,\n     #[primary_span]\n-    #[label = \"field already declared\"]\n+    #[label]\n     pub span: Span,\n-    #[label = \"`{field_name}` first declared here\"]\n+    #[label = \"previous-decl-label\"]\n     pub prev_span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0184\", slug = \"typeck-copy-impl-on-type-with-dtor\")]\n pub struct CopyImplOnTypeWithDtor {\n     #[primary_span]\n-    #[label = \"Copy not allowed on types with destructors\"]\n+    #[label]\n     pub span: Span,\n }\n \n@@ -93,7 +93,7 @@ pub struct MultipleRelaxedDefaultBounds {\n #[error(code = \"E0206\", slug = \"typeck-copy-impl-on-non-adt\")]\n pub struct CopyImplOnNonAdt {\n     #[primary_span]\n-    #[label = \"type is not a structure or enumeration\"]\n+    #[label]\n     pub span: Span,\n }\n \n@@ -115,7 +115,7 @@ pub struct AmbiguousLifetimeBound {\n #[error(code = \"E0229\", slug = \"typeck-assoc-type-binding-not-allowed\")]\n pub struct AssocTypeBindingNotAllowed {\n     #[primary_span]\n-    #[label = \"associated type not allowed here\"]\n+    #[label]\n     pub span: Span,\n }\n \n@@ -130,7 +130,7 @@ pub struct FunctionalRecordUpdateOnNonStruct {\n #[error(code = \"E0516\", slug = \"typeck-typeof-reserved-keyword-used\")]\n pub struct TypeofReservedKeywordUsed {\n     #[primary_span]\n-    #[label = \"reserved keyword\"]\n+    #[label]\n     pub span: Span,\n }\n \n@@ -139,9 +139,9 @@ pub struct TypeofReservedKeywordUsed {\n pub struct ReturnStmtOutsideOfFnBody {\n     #[primary_span]\n     pub span: Span,\n-    #[label = \"the return is part of this body...\"]\n+    #[label = \"encl-body-label\"]\n     pub encl_body_span: Option<Span>,\n-    #[label = \"...not the enclosing function body\"]\n+    #[label = \"encl-fn-label\"]\n     pub encl_fn_span: Option<Span>,\n }\n \n@@ -171,9 +171,9 @@ pub struct MethodCallOnUnknownType {\n #[error(code = \"E0719\", slug = \"typeck-value-of-associated-struct-already-specified\")]\n pub struct ValueOfAssociatedStructAlreadySpecified {\n     #[primary_span]\n-    #[label = \"re-bound here\"]\n+    #[label]\n     pub span: Span,\n-    #[label = \"`{item_name}` bound here first\"]\n+    #[label = \"previous-bound-label\"]\n     pub prev_span: Span,\n     pub item_name: Ident,\n     pub def_path: String,\n@@ -183,6 +183,6 @@ pub struct ValueOfAssociatedStructAlreadySpecified {\n #[error(code = \"E0745\", slug = \"typeck-address-of-temporary-taken\")]\n pub struct AddressOfTemporaryTaken {\n     #[primary_span]\n-    #[label = \"temporary value\"]\n+    #[label]\n     pub span: Span,\n }"}, {"sha": "68f24f1f68589159ddcb0dfee42318009a2fd5bf", "filename": "src/test/ui-fulldeps/session-derive-errors.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a88717cef051b8ebbed0e74c57fc0a714bd893dc/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88717cef051b8ebbed0e74c57fc0a714bd893dc/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs?ref=a88717cef051b8ebbed0e74c57fc0a714bd893dc", "patch": "@@ -139,57 +139,57 @@ struct InvalidPathFieldAttr {\n #[error(code = \"E0123\", slug = \"foo\")]\n struct ErrorWithField {\n     name: String,\n-    #[label = \"This error has a field, and references {name}\"]\n+    #[label = \"bar\"]\n     span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct ErrorWithMessageAppliedToField {\n-    #[label = \"this message is applied to a String field\"]\n+    #[label = \"bar\"]\n     //~^ ERROR the `#[label = ...]` attribute can only be applied to fields of type `Span`\n     name: String,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct ErrorWithNonexistentField {\n-    #[label = \"This error has a field, and references {name}\"]\n+    #[suggestion(message = \"This is a suggestion\", code = \"{name}\")]\n     //~^ ERROR `name` doesn't refer to a field on this type\n-    foo: Span,\n+    suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n //~^ ERROR invalid format string: expected `'}'`\n+#[error(code = \"E0123\", slug = \"foo\")]\n struct ErrorMissingClosingBrace {\n-    #[label = \"This is missing a closing brace: {name\"]\n-    foo: Span,\n+    #[suggestion(message = \"This is a suggestion\", code = \"{name\")]\n+    suggestion: (Span, Applicability),\n     name: String,\n     val: usize,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(code = \"E0123\", slug = \"foo\")]\n //~^ ERROR invalid format string: unmatched `}`\n+#[error(code = \"E0123\", slug = \"foo\")]\n struct ErrorMissingOpeningBrace {\n-    #[label = \"This is missing an opening brace: name}\"]\n-    foo: Span,\n+    #[suggestion(message = \"This is a suggestion\", code = \"name}\")]\n+    suggestion: (Span, Applicability),\n     name: String,\n     val: usize,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct LabelOnSpan {\n-    #[label = \"See here\"]\n+    #[label = \"bar\"]\n     sp: Span,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct LabelOnNonSpan {\n-    #[label = \"See here\"]\n+    #[label = \"bar\"]\n     //~^ ERROR the `#[label = ...]` attribute can only be applied to fields of type `Span`\n     id: u32,\n }\n@@ -276,15 +276,15 @@ struct SuggestWithDuplicateApplicabilityAndSpan {\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct WrongKindOfAnnotation {\n-    #[label(\"wrong kind of annotation for label\")]\n+    #[label(\"bar\")]\n     //~^ ERROR invalid annotation list `#[label(...)]`\n     z: Span,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct OptionsInErrors {\n-    #[label = \"Label message\"]\n+    #[label = \"bar\"]\n     label: Option<Span>,\n     #[suggestion(message = \"suggestion message\")]\n     opt_sugg: Option<(Span, Applicability)>,\n@@ -296,9 +296,9 @@ struct MoveOutOfBorrowError<'tcx> {\n     name: Ident,\n     ty: Ty<'tcx>,\n     #[primary_span]\n-    #[label = \"cannot move out of borrow\"]\n+    #[label = \"bar\"]\n     span: Span,\n-    #[label = \"`{ty}` first borrowed here\"]\n+    #[label = \"qux\"]\n     other_span: Span,\n     #[suggestion(message = \"consider cloning here\", code = \"{name}.clone()\")]\n     opt_sugg: Option<(Span, Applicability)>,\n@@ -307,7 +307,15 @@ struct MoveOutOfBorrowError<'tcx> {\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct ErrorWithLifetime<'a> {\n-    #[label = \"Some message that references {name}\"]\n+    #[label = \"bar\"]\n+    span: Span,\n+    name: &'a str,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct ErrorWithDefaultLabelAttr<'a> {\n+    #[label]\n     span: Span,\n     name: &'a str,\n }"}, {"sha": "902bc785ce7cc8cd6cf658256f14d21f8bf111ea", "filename": "src/test/ui-fulldeps/session-derive-errors.stderr", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a88717cef051b8ebbed0e74c57fc0a714bd893dc/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a88717cef051b8ebbed0e74c57fc0a714bd893dc/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr?ref=a88717cef051b8ebbed0e74c57fc0a714bd893dc", "patch": "@@ -162,44 +162,40 @@ LL |     #[nonsense]\n error: the `#[label = ...]` attribute can only be applied to fields of type `Span`\n   --> $DIR/session-derive-errors.rs:149:5\n    |\n-LL |     #[label = \"this message is applied to a String field\"]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[label = \"bar\"]\n+   |     ^^^^^^^^^^^^^^^^\n \n error: `name` doesn't refer to a field on this type\n-  --> $DIR/session-derive-errors.rs:157:5\n+  --> $DIR/session-derive-errors.rs:157:52\n    |\n-LL |     #[label = \"This error has a field, and references {name}\"]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[suggestion(message = \"This is a suggestion\", code = \"{name}\")]\n+   |                                                    ^^^^^^^^^^^^^^^\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/session-derive-errors.rs:163:20\n+  --> $DIR/session-derive-errors.rs:162:16\n    |\n LL | #[derive(SessionDiagnostic)]\n-   |          ----------------- in this derive macro expansion\n-LL | #[error(code = \"E0123\", slug = \"foo\")]\n-   |               -    ^ expected `'}'` in format string\n-   |               |\n-   |               because of this opening brace\n+   |           -    ^ expected `'}'` in format string\n+   |           |\n+   |           because of this opening brace\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/session-derive-errors.rs:173:20\n+  --> $DIR/session-derive-errors.rs:172:15\n    |\n LL | #[derive(SessionDiagnostic)]\n-   |          ----------------- in this derive macro expansion\n-LL | #[error(code = \"E0123\", slug = \"foo\")]\n-   |                    ^ unmatched `}` in format string\n+   |               ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: the `#[label = ...]` attribute can only be applied to fields of type `Span`\n   --> $DIR/session-derive-errors.rs:192:5\n    |\n-LL |     #[label = \"See here\"]\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[label = \"bar\"]\n+   |     ^^^^^^^^^^^^^^^^\n \n error: `nonsense` is not a valid key for `#[suggestion(...)]`\n   --> $DIR/session-derive-errors.rs:217:18\n@@ -250,8 +246,8 @@ LL | |     suggestion: (Applicability, Applicability, Span),\n error: invalid annotation list `#[label(...)]`\n   --> $DIR/session-derive-errors.rs:279:7\n    |\n-LL |     #[label(\"wrong kind of annotation for label\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[label(\"bar\")]\n+   |       ^^^^^^^^^^^^\n \n error: cannot find attribute `nonsense` in this scope\n   --> $DIR/session-derive-errors.rs:51:3\n@@ -266,7 +262,7 @@ LL |     #[nonsense]\n    |       ^^^^^^^^\n \n error[E0599]: no method named `into_diagnostic_arg` found for struct `Hello` in the current scope\n-  --> $DIR/session-derive-errors.rs:315:10\n+  --> $DIR/session-derive-errors.rs:323:10\n    |\n LL | struct Hello {}\n    | ------------ method `into_diagnostic_arg` not found for this"}, {"sha": "bb3017b6ec26adad6984cbc7e8d9c1fb1ec1bc79", "filename": "src/test/ui/error-codes/E0184.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a88717cef051b8ebbed0e74c57fc0a714bd893dc/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a88717cef051b8ebbed0e74c57fc0a714bd893dc/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr?ref=a88717cef051b8ebbed0e74c57fc0a714bd893dc", "patch": "@@ -2,7 +2,7 @@ error[E0184]: the trait `Copy` may not be implemented for this type; the type ha\n   --> $DIR/E0184.rs:1:10\n    |\n LL | #[derive(Copy)]\n-   |          ^^^^ Copy not allowed on types with destructors\n+   |          ^^^^ `Copy` not allowed on types with destructors\n    |\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "8649c8abbfa7f9035ef618bb3e0d30cb88a8ebaa", "filename": "src/test/ui/exclusive-drop-and-copy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a88717cef051b8ebbed0e74c57fc0a714bd893dc/src%2Ftest%2Fui%2Fexclusive-drop-and-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a88717cef051b8ebbed0e74c57fc0a714bd893dc/src%2Ftest%2Fui%2Fexclusive-drop-and-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-drop-and-copy.stderr?ref=a88717cef051b8ebbed0e74c57fc0a714bd893dc", "patch": "@@ -2,15 +2,15 @@ error[E0184]: the trait `Copy` may not be implemented for this type; the type ha\n   --> $DIR/exclusive-drop-and-copy.rs:3:10\n    |\n LL | #[derive(Copy, Clone)]\n-   |          ^^^^ Copy not allowed on types with destructors\n+   |          ^^^^ `Copy` not allowed on types with destructors\n    |\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0184]: the trait `Copy` may not be implemented for this type; the type has a destructor\n   --> $DIR/exclusive-drop-and-copy.rs:10:10\n    |\n LL | #[derive(Copy, Clone)]\n-   |          ^^^^ Copy not allowed on types with destructors\n+   |          ^^^^ `Copy` not allowed on types with destructors\n    |\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}]}