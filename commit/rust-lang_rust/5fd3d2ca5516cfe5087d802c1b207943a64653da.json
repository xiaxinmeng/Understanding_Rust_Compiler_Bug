{"sha": "5fd3d2ca5516cfe5087d802c1b207943a64653da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZDNkMmNhNTUxNmNmZTUwODdkODAyYzFiMjA3OTQzYTY0NjUzZGE=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-01T17:55:18Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-04T16:34:05Z"}, "message": "Refactor the view_item code so that it is similar to the code used for\nparsing regular items.", "tree": {"sha": "58f566f7cc707efb7436ec7173a69844a60c169d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58f566f7cc707efb7436ec7173a69844a60c169d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fd3d2ca5516cfe5087d802c1b207943a64653da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd3d2ca5516cfe5087d802c1b207943a64653da", "html_url": "https://github.com/rust-lang/rust/commit/5fd3d2ca5516cfe5087d802c1b207943a64653da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fd3d2ca5516cfe5087d802c1b207943a64653da/comments", "author": null, "committer": null, "parents": [{"sha": "35c745da03078c9bc58e6f6f2cf57c84e354f09d", "url": "https://api.github.com/repos/rust-lang/rust/commits/35c745da03078c9bc58e6f6f2cf57c84e354f09d", "html_url": "https://github.com/rust-lang/rust/commit/35c745da03078c9bc58e6f6f2cf57c84e354f09d"}], "stats": {"total": 70, "additions": 40, "deletions": 30}, "files": [{"sha": "55207de09edc961506776b04f2136ab254877ae0", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3d2ca5516cfe5087d802c1b207943a64653da/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3d2ca5516cfe5087d802c1b207943a64653da/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=5fd3d2ca5516cfe5087d802c1b207943a64653da", "patch": "@@ -40,17 +40,6 @@ tag def {\n type crate = spanned[crate_];\n type crate_ = rec(_mod module);\n \n-type use_node = spanned[use_node_];\n-type use_node_ = rec(ident name, vec[@meta_item] metadata);\n-\n-type import_node = spanned[import_node_];\n-type import_node_ = rec(vec[ident] identifiers);\n-\n-tag view_item {\n-    view_item_use(@use_node);\n-    view_item_import(@import_node);\n-}\n-\n type meta_item = spanned[meta_item_];\n type meta_item_ = rec(ident name, str value);\n \n@@ -233,6 +222,12 @@ type _mod = rec(vec[@item] items,\n type variant_arg = rec(@ty ty, def_id id);\n type variant = rec(str name, vec[variant_arg] args, def_id id, ann ann);\n \n+type view_item = spanned[view_item_];\n+tag view_item_ {\n+    view_item_use(ident, vec[@meta_item]);\n+    view_item_import(vec[ident]);\n+}\n+\n type item = spanned[item_];\n tag item_ {\n     item_const(ident, @ty, @expr, def_id, ann);"}, {"sha": "cdf2ae172ab04effb05409afd85c723ad6968137", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3d2ca5516cfe5087d802c1b207943a64653da/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3d2ca5516cfe5087d802c1b207943a64653da/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=5fd3d2ca5516cfe5087d802c1b207943a64653da", "patch": "@@ -1662,17 +1662,18 @@ impure fn parse_optional_meta(parser p) -> vec[@ast.meta_item] {\n     }\n }\n \n-impure fn parse_use(parser p) -> @ast.use_node {\n+impure fn parse_use(parser p) -> @ast.view_item {\n     auto lo = p.get_span();\n     auto hi = lo;\n     expect(p, token.USE);\n     auto ident = parse_ident(p);\n     auto metadata = parse_optional_meta(p);\n     expect(p, token.SEMI);\n-    ret @spanned(lo, hi, rec(name = ident, metadata = metadata));\n+    auto use_decl = ast.view_item_use(ident, metadata);\n+    ret @spanned(lo, hi, use_decl);\n }\n \n-impure fn parse_rest_import_name(parser p, ast.ident id) -> @ast.import_node {\n+impure fn parse_rest_import_name(parser p, ast.ident id) -> @ast.view_item {\n     auto lo = p.get_span();\n     auto hi = lo;\n     let vec[ast.ident] identifiers = vec();\n@@ -1683,10 +1684,11 @@ impure fn parse_rest_import_name(parser p, ast.ident id) -> @ast.import_node {\n         identifiers += i;\n     }\n     p.bump();\n-    ret @spanned(lo, hi, rec(identifiers = identifiers));\n+    auto import_decl = ast.view_item_import(identifiers);\n+    ret @spanned(lo, hi, import_decl);\n }\n \n-impure fn parse_full_import_name(parser p) -> @ast.import_node {\n+impure fn parse_full_import_name(parser p) -> @ast.view_item {\n     alt (p.peek()) {\n         case (token.IDENT(?ident)) {\n             p.bump();\n@@ -1699,7 +1701,7 @@ impure fn parse_full_import_name(parser p) -> @ast.import_node {\n     fail;\n }\n \n-impure fn parse_import(parser p) -> @ast.import_node {\n+impure fn parse_import(parser p) -> @ast.view_item {\n     expect(p, token.IMPORT);\n     alt (p.peek()) {\n         case (token.IDENT(?ident)) {\n@@ -1721,21 +1723,34 @@ impure fn parse_import(parser p) -> @ast.import_node {\n     fail;\n }\n \n-impure fn parse_view(parser p) -> vec[ast.view_item] {\n-    let vec[ast.view_item] items = vec();\n-    while (true) {\n-        alt (p.peek()) {\n-            case (token.USE) {\n-                items += vec(ast.view_item_use(parse_use(p)));\n-            }\n-            case (token.IMPORT) {\n-                items += vec(ast.view_item_import(parse_import(p)));\n-            }\n-            case (_) {\n-                ret items;\n-            }\n+impure fn parse_use_or_import(parser p) -> @ast.view_item {\n+    alt (p.peek()) {\n+        case (token.USE) {\n+            ret parse_use(p);\n         }\n+        case (token.IMPORT) {\n+            ret parse_import(p);\n+        }\n+    }\n+}\n+\n+fn is_use_or_import(token.token t) -> bool {\n+    if (t == token.USE) {\n+        ret true;\n+    }\n+    if (t == token.IMPORT) {\n+        ret true;\n+    }\n+    ret false;\n+}\n+\n+impure fn parse_view(parser p) -> vec[@ast.view_item] {\n+    let vec[@ast.view_item] items = vec();\n+    while (is_use_or_import(p.peek())) {\n+        auto item = parse_use_or_import(p);\n+        items += vec(item);\n     }\n+    ret items;\n }\n \n impure fn parse_crate_from_crate_file(parser p) -> @ast.crate {"}]}