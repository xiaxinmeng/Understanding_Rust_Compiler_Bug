{"sha": "2216eceea51b344560f4791336b3ea2c897eec39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMTZlY2VlYTUxYjM0NDU2MGY0NzkxMzM2YjNlYTJjODk3ZWVjMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-16T23:31:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-16T23:31:24Z"}, "message": "auto merge of #14216 : kballard/rust/macos_precise_time_ns, r=alexcrichton\n\nUse sync::one::Once to fetch the mach_timebase_info only once when\r\nrunning precise_time_ns(). This helps because mach_timebase_info() is\r\nsurprisingly inefficient. Also fix the order of operations when applying\r\nthe timebase to the mach absolute time value.\r\n\r\nThis improves the time on my machine from\r\n\r\n```\r\ntest tests::bench_precise_time_ns ... bench:       157 ns/iter (+/- 4)\r\n```\r\n\r\nto\r\n\r\n```\r\ntest tests::bench_precise_time_ns ... bench:        38 ns/iter (+/- 3)\r\n```\r\n\r\nand it will get even faster once #14174 lands.", "tree": {"sha": "231d3f6640253dc2371426efe5ea67ff53b8d226", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/231d3f6640253dc2371426efe5ea67ff53b8d226"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2216eceea51b344560f4791336b3ea2c897eec39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2216eceea51b344560f4791336b3ea2c897eec39", "html_url": "https://github.com/rust-lang/rust/commit/2216eceea51b344560f4791336b3ea2c897eec39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2216eceea51b344560f4791336b3ea2c897eec39/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cea4803d4cf56ded65be6a9e043a6219c661c572", "url": "https://api.github.com/repos/rust-lang/rust/commits/cea4803d4cf56ded65be6a9e043a6219c661c572", "html_url": "https://github.com/rust-lang/rust/commit/cea4803d4cf56ded65be6a9e043a6219c661c572"}, {"sha": "8ef3e227198f6ff674b1626d0862c4112358c1a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef3e227198f6ff674b1626d0862c4112358c1a1", "html_url": "https://github.com/rust-lang/rust/commit/8ef3e227198f6ff674b1626d0862c4112358c1a1"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "4ac4abe9063ef9662855ec4b8d444cf9a3223b09", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2216eceea51b344560f4791336b3ea2c897eec39/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2216eceea51b344560f4791336b3ea2c897eec39/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=2216eceea51b344560f4791336b3ea2c897eec39", "patch": "@@ -83,7 +83,7 @@ DEPS_fourcc := syntax std\n DEPS_hexfloat := syntax std\n DEPS_num := std rand\n DEPS_test := std collections getopts serialize term time regex\n-DEPS_time := std serialize\n+DEPS_time := std serialize sync\n DEPS_rand := std\n DEPS_url := std collections\n DEPS_workcache := std serialize collections log"}, {"sha": "0e67076dc08e3f2e2c2a4dcc66250b05b9ace2f1", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2216eceea51b344560f4791336b3ea2c897eec39/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216eceea51b344560f4791336b3ea2c897eec39/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=2216eceea51b344560f4791336b3ea2c897eec39", "patch": "@@ -24,6 +24,8 @@\n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n extern crate serialize;\n extern crate libc;\n+#[cfg(target_os = \"macos\")]\n+extern crate sync;\n \n use std::io::BufReader;\n use std::num;\n@@ -159,10 +161,16 @@ pub fn precise_time_ns() -> u64 {\n \n     #[cfg(target_os = \"macos\")]\n     fn os_precise_time_ns() -> u64 {\n-        let time = unsafe { imp::mach_absolute_time() };\n-        let mut info = libc::mach_timebase_info { numer: 0, denom: 0 };\n-        unsafe { imp::mach_timebase_info(&mut info); }\n-        return time * ((info.numer / info.denom) as u64);\n+        static mut TIMEBASE: libc::mach_timebase_info = libc::mach_timebase_info { numer: 0,\n+                                                                                   denom: 0 };\n+        static mut ONCE: sync::one::Once = sync::one::ONCE_INIT;\n+        unsafe {\n+            ONCE.doit(|| {\n+                imp::mach_timebase_info(&mut TIMEBASE);\n+            });\n+            let time = imp::mach_absolute_time();\n+            time * TIMEBASE.numer as u64 / TIMEBASE.denom as u64\n+        }\n     }\n \n     #[cfg(not(windows), not(target_os = \"macos\"))]\n@@ -1080,11 +1088,13 @@ pub fn strftime(format: &str, tm: &Tm) -> StrBuf {\n \n #[cfg(test)]\n mod tests {\n+    extern crate test;\n     use super::{Timespec, get_time, precise_time_ns, precise_time_s, tzset,\n                 at_utc, at, strptime};\n \n     use std::f64;\n     use std::result::{Err, Ok};\n+    use self::test::Bencher;\n \n     #[cfg(windows)]\n     fn set_time_zone() {\n@@ -1520,4 +1530,9 @@ mod tests {\n         test_strftime();\n         test_timespec_eq_ord();\n     }\n+\n+    #[bench]\n+    fn bench_precise_time_ns(b: &mut Bencher) {\n+        b.iter(|| precise_time_ns())\n+    }\n }"}]}