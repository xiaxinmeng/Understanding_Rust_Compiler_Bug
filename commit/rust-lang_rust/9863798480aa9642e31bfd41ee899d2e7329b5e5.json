{"sha": "9863798480aa9642e31bfd41ee899d2e7329b5e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NjM3OTg0ODBhYTk2NDJlMzFiZmQ0MWVlODk5ZDJlNzMyOWI1ZTU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-09T22:45:49Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-09T22:45:49Z"}, "message": "Rename the method to avoid false promises", "tree": {"sha": "d1a9c8ce7df146d13faa6a783833ba4d31957390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1a9c8ce7df146d13faa6a783833ba4d31957390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9863798480aa9642e31bfd41ee899d2e7329b5e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9863798480aa9642e31bfd41ee899d2e7329b5e5", "html_url": "https://github.com/rust-lang/rust/commit/9863798480aa9642e31bfd41ee899d2e7329b5e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9863798480aa9642e31bfd41ee899d2e7329b5e5/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ee885b3b3019b32d5c481bddf1b2667fba7fb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ee885b3b3019b32d5c481bddf1b2667fba7fb3", "html_url": "https://github.com/rust-lang/rust/commit/f4ee885b3b3019b32d5c481bddf1b2667fba7fb3"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "2ea0d503465ffebaf8c0be3972f2b06407fd6305", "filename": "crates/ide/src/completion/complete_mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9863798480aa9642e31bfd41ee899d2e7329b5e5/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9863798480aa9642e31bfd41ee899d2e7329b5e5/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs?ref=9863798480aa9642e31bfd41ee899d2e7329b5e5", "patch": "@@ -52,11 +52,11 @@ pub(super) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Op\n         .filter_map(|submodule_file| {\n             let submodule_path = source_root.path_for_file(&submodule_file)?;\n             let directory_with_submodule = submodule_path.parent()?;\n-            match submodule_path.file_name_and_extension()? {\n+            match submodule_path.name_and_extension()? {\n                 (\"lib\", Some(\"rs\")) | (\"main\", Some(\"rs\")) => None,\n                 (\"mod\", Some(\"rs\")) => {\n                     if directory_with_submodule.parent()? == directory_to_look_for_submodules {\n-                        match directory_with_submodule.file_name_and_extension()? {\n+                        match directory_with_submodule.name_and_extension()? {\n                             (directory_name, None) => Some(directory_name.to_owned()),\n                             _ => None,\n                         }\n@@ -93,7 +93,7 @@ fn directory_to_look_for_submodules(\n     module_file_path: &VfsPath,\n ) -> Option<VfsPath> {\n     let directory_with_module_path = module_file_path.parent()?;\n-    let base_directory = match module_file_path.file_name_and_extension()? {\n+    let base_directory = match module_file_path.name_and_extension()? {\n         (\"mod\", Some(\"rs\")) | (\"lib\", Some(\"rs\")) | (\"main\", Some(\"rs\")) => {\n             Some(directory_with_module_path)\n         }\n@@ -103,8 +103,8 @@ fn directory_to_look_for_submodules(\n                     directory_with_module_path\n                         .parent()\n                         .as_ref()\n-                        .and_then(|path| path.file_name_and_extension()),\n-                    directory_with_module_path.file_name_and_extension(),\n+                        .and_then(|path| path.name_and_extension()),\n+                    directory_with_module_path.name_and_extension(),\n                 ),\n                 (Some((\"src\", None)), Some((\"bin\", None)))\n             ) {"}, {"sha": "022a0be1e39240fd9144d809d8afc81f7179c5b9", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9863798480aa9642e31bfd41ee899d2e7329b5e5/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9863798480aa9642e31bfd41ee899d2e7329b5e5/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=9863798480aa9642e31bfd41ee899d2e7329b5e5", "patch": "@@ -57,13 +57,13 @@ impl VfsPath {\n         }\n     }\n \n-    pub fn file_name_and_extension(&self) -> Option<(&str, Option<&str>)> {\n+    pub fn name_and_extension(&self) -> Option<(&str, Option<&str>)> {\n         match &self.0 {\n             VfsPathRepr::PathBuf(p) => Some((\n                 p.file_stem()?.to_str()?,\n                 p.extension().and_then(|extension| extension.to_str()),\n             )),\n-            VfsPathRepr::VirtualPath(p) => p.file_name_and_extension(),\n+            VfsPathRepr::VirtualPath(p) => p.name_and_extension(),\n         }\n     }\n \n@@ -287,9 +287,7 @@ impl VirtualPath {\n         Some(res)\n     }\n \n-    // FIXME: Currently VirtualPath does is unable to distinguish a directory from a file\n-    // hence this method will return `Some(\"directory_name\", None)` for a directory\n-    pub fn file_name_and_extension(&self) -> Option<(&str, Option<&str>)> {\n+    pub fn name_and_extension(&self) -> Option<(&str, Option<&str>)> {\n         let file_path = if self.0.ends_with('/') { &self.0[..&self.0.len() - 1] } else { &self.0 };\n         let file_name = match file_path.rfind('/') {\n             Some(position) => &file_path[position + 1..],\n@@ -318,29 +316,29 @@ mod tests {\n \n     #[test]\n     fn virtual_path_extensions() {\n-        assert_eq!(VirtualPath(\"/\".to_string()).file_name_and_extension(), None);\n+        assert_eq!(VirtualPath(\"/\".to_string()).name_and_extension(), None);\n         assert_eq!(\n-            VirtualPath(\"/directory\".to_string()).file_name_and_extension(),\n+            VirtualPath(\"/directory\".to_string()).name_and_extension(),\n             Some((\"directory\", None))\n         );\n         assert_eq!(\n-            VirtualPath(\"/directory/\".to_string()).file_name_and_extension(),\n+            VirtualPath(\"/directory/\".to_string()).name_and_extension(),\n             Some((\"directory\", None))\n         );\n         assert_eq!(\n-            VirtualPath(\"/directory/file\".to_string()).file_name_and_extension(),\n+            VirtualPath(\"/directory/file\".to_string()).name_and_extension(),\n             Some((\"file\", None))\n         );\n         assert_eq!(\n-            VirtualPath(\"/directory/.file\".to_string()).file_name_and_extension(),\n+            VirtualPath(\"/directory/.file\".to_string()).name_and_extension(),\n             Some((\".file\", None))\n         );\n         assert_eq!(\n-            VirtualPath(\"/directory/.file.rs\".to_string()).file_name_and_extension(),\n+            VirtualPath(\"/directory/.file.rs\".to_string()).name_and_extension(),\n             Some((\".file\", Some(\"rs\")))\n         );\n         assert_eq!(\n-            VirtualPath(\"/directory/file.rs\".to_string()).file_name_and_extension(),\n+            VirtualPath(\"/directory/file.rs\".to_string()).name_and_extension(),\n             Some((\"file\", Some(\"rs\")))\n         );\n     }"}]}