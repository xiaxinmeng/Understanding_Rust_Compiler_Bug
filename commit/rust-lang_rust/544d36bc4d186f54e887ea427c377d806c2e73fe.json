{"sha": "544d36bc4d186f54e887ea427c377d806c2e73fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NGQzNmJjNGQxODZmNTRlODg3ZWE0MjdjMzc3ZDgwNmMyZTczZmU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-12T00:49:54Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-12T01:18:53Z"}, "message": "manual: fixes to match expression examples and explanation.", "tree": {"sha": "c574111bf1713ea3d40d7db5d0e7cbe1884cf04c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c574111bf1713ea3d40d7db5d0e7cbe1884cf04c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/544d36bc4d186f54e887ea427c377d806c2e73fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/544d36bc4d186f54e887ea427c377d806c2e73fe", "html_url": "https://github.com/rust-lang/rust/commit/544d36bc4d186f54e887ea427c377d806c2e73fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/544d36bc4d186f54e887ea427c377d806c2e73fe/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "533cce80504b5cc6d29b1d2d3e0dfc0d77095702", "url": "https://api.github.com/repos/rust-lang/rust/commits/533cce80504b5cc6d29b1d2d3e0dfc0d77095702", "html_url": "https://github.com/rust-lang/rust/commit/533cce80504b5cc6d29b1d2d3e0dfc0d77095702"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "8e8a01715217a68ab949171b991c0f014ef6f102", "filename": "doc/rust.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/544d36bc4d186f54e887ea427c377d806c2e73fe/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/544d36bc4d186f54e887ea427c377d806c2e73fe/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=544d36bc4d186f54e887ea427c377d806c2e73fe", "patch": "@@ -2186,7 +2186,7 @@ match_pat : pat [ \"..\" pat ] ? [ \"if\" expr ] ;\n \n A `match` expression branches on a *pattern*. The exact form of matching that\n occurs depends on the pattern. Patterns consist of some combination of\n-literals, destructured enum constructors, records and tuples, variable binding\n+literals, destructured enum constructors, structures, records and tuples, variable binding\n specifications, wildcards (`*`), and placeholders (`_`). A `match` expression has a *head\n expression*, which is the value to compare to the patterns. The type of the\n patterns must equal the type of the head expression.\n@@ -2196,19 +2196,19 @@ In a pattern whose head expression has an `enum` type, a placeholder (`_`) stand\n variant. For example:\n \n ~~~~\n-enum list<X> { nil, cons(X, @list<X>) }\n+enum List<X> { Nil, Cons(X, @List<X>) }\n \n-let x: list<int> = cons(10, @cons(11, @nil));\n+let x: List<int> = Cons(10, @Cons(11, @Nil));\n \n match x {\n-    cons(_, @nil) => fail ~\"singleton list\",\n-    cons(*)       => return,\n-    nil           => fail ~\"empty list\"\n+    Cons(_, @Nil) => fail ~\"singleton list\",\n+    Cons(*)       => return,\n+    Nil           => fail ~\"empty list\"\n }\n ~~~~\n \n-The first pattern matches lists constructed by applying `cons` to any head value, and a\n-tail value of `@nil`. The second pattern matches `any` list constructed with `cons`,\n+The first pattern matches lists constructed by applying `Cons` to any head value, and a\n+tail value of `@Nil`. The second pattern matches _any_ list constructed with `Cons`,\n ignoring the values of its arguments. The difference between `_` and `*` is that the pattern `C(_)` is only type-correct if\n `C` has exactly one argument, while the pattern `C(*)` is type-correct for any enum variant `C`, regardless of how many arguments `C` has.\n \n@@ -2225,18 +2225,18 @@ An example of an `match` expression:\n # fn process_pair(a: int, b: int) { }\n # fn process_ten() { }\n \n-enum list<X> { nil, cons(X, @list<X>) }\n+enum List<X> { Nil, Cons(X, @List<X>) }\n \n-let x: list<int> = cons(10, @cons(11, @nil));\n+let x: List<int> = Cons(10, @Cons(11, @Nil));\n \n match x {\n-    cons(a, @cons(b, _)) => {\n+    Cons(a, @Cons(b, _)) => {\n         process_pair(a,b);\n     }\n-    cons(10, _) => {\n+    Cons(10, _) => {\n         process_ten();\n     }\n-    nil => {\n+    Nil => {\n         return;\n     }\n     _ => {\n@@ -2245,7 +2245,7 @@ match x {\n }\n ~~~~\n \n-Records can also be pattern-matched and their fields bound to variables.\n+Records and structures can also be pattern-matched and their fields bound to variables.\n When matching fields of a record, the fields being matched are specified\n first, then a placeholder (`_`) represents the remaining fields.\n "}]}