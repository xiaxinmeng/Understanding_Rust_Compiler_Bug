{"sha": "919177f7e42f7585bbc8353b942a0feb1b67705e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxOTE3N2Y3ZTQyZjc1ODViYmM4MzUzYjk0MmEwZmViMWI2NzcwNWU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-11T19:59:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-11T19:59:03Z"}, "message": "Rollup merge of #78873 - tmiasko:inline-opts, r=oli-obk\n\nAdd flags customizing behaviour of MIR inlining\n\n* `-Zinline-mir-threshold` to change the default threshold.\n* `-Zinline-mir-hint-threshold` to change the threshold used by\n  functions with inline hint.\n\nHaving those as configurable flags makes it possible to experiment with with\ndifferent inlining thresholds and substantially increase test coverage of MIR\ninlining when used with increased thresholds (for example, necessary to test\n#78844).", "tree": {"sha": "edf72a25387af0820651526be41e679a13fed9a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edf72a25387af0820651526be41e679a13fed9a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/919177f7e42f7585bbc8353b942a0feb1b67705e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfrEKHCRBK7hj4Ov3rIwAAdHIIADiWL3kwN702G5gVRitMtW6m\n69LNslLEcTcf98pGuY4BC4ah1b+H9p0uwb/a2OeP90iHd0rd6XAhW85sP0cIMwJk\n+nzfR0PCTt/AKIJOlHFXVjmc2YTyJgUniYnhtQEELu91QXP/JXmOkPjYQkCMDL2I\nuk/DdzwOnD7lEgp9bg70UnbJ1dRn6Bk5Ym4vZQios+0d0sJmmskkaDxK3tI421wK\nbm4OIKjlL8TC8y7ai3zZ3mHwyNJuRpl2CBixJjx+Rta/xVi9R/6UCuMDkChRtmgg\nzeklfP3C4W4uAxshRQbM+w0gRLZcBYZtwwJbrZ047qze6qfBLEQRm3V2vZaixj0=\n=9RLM\n-----END PGP SIGNATURE-----\n", "payload": "tree edf72a25387af0820651526be41e679a13fed9a3\nparent 2e0a0b42adb53969752a1848630a0849e35c873c\nparent c8943c62f7a139b466648249045d557259cf22fe\nauthor Jonas Schievink <jonasschievink@gmail.com> 1605124743 +0100\ncommitter GitHub <noreply@github.com> 1605124743 +0100\n\nRollup merge of #78873 - tmiasko:inline-opts, r=oli-obk\n\nAdd flags customizing behaviour of MIR inlining\n\n* `-Zinline-mir-threshold` to change the default threshold.\n* `-Zinline-mir-hint-threshold` to change the threshold used by\n  functions with inline hint.\n\nHaving those as configurable flags makes it possible to experiment with with\ndifferent inlining thresholds and substantially increase test coverage of MIR\ninlining when used with increased thresholds (for example, necessary to test\n#78844).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/919177f7e42f7585bbc8353b942a0feb1b67705e", "html_url": "https://github.com/rust-lang/rust/commit/919177f7e42f7585bbc8353b942a0feb1b67705e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/919177f7e42f7585bbc8353b942a0feb1b67705e/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e0a0b42adb53969752a1848630a0849e35c873c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0a0b42adb53969752a1848630a0849e35c873c", "html_url": "https://github.com/rust-lang/rust/commit/2e0a0b42adb53969752a1848630a0849e35c873c"}, {"sha": "c8943c62f7a139b466648249045d557259cf22fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8943c62f7a139b466648249045d557259cf22fe", "html_url": "https://github.com/rust-lang/rust/commit/c8943c62f7a139b466648249045d557259cf22fe"}], "stats": {"total": 90, "additions": 86, "deletions": 4}, "files": [{"sha": "1fc2d281e793536271f6fa2b1c8a0fa53572a983", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919177f7e42f7585bbc8353b942a0feb1b67705e/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919177f7e42f7585bbc8353b942a0feb1b67705e/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=919177f7e42f7585bbc8353b942a0feb1b67705e", "patch": "@@ -554,6 +554,8 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(function_sections, Some(false));\n     tracked!(human_readable_cgu_names, true);\n     tracked!(inline_in_all_cgus, Some(true));\n+    tracked!(inline_mir_threshold, 123);\n+    tracked!(inline_mir_hint_threshold, 123);\n     tracked!(insert_sideeffect, true);\n     tracked!(instrument_coverage, true);\n     tracked!(instrument_mcount, true);"}, {"sha": "c6da256e6b5105bc8be6bb2bfe9982674b1fa204", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/919177f7e42f7585bbc8353b942a0feb1b67705e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919177f7e42f7585bbc8353b942a0feb1b67705e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=919177f7e42f7585bbc8353b942a0feb1b67705e", "patch": "@@ -16,9 +16,6 @@ use crate::transform::MirPass;\n use std::iter;\n use std::ops::{Range, RangeFrom};\n \n-const DEFAULT_THRESHOLD: usize = 50;\n-const HINT_THRESHOLD: usize = 100;\n-\n const INSTR_COST: usize = 5;\n const CALL_PENALTY: usize = 25;\n const LANDINGPAD_PENALTY: usize = 50;\n@@ -248,7 +245,11 @@ impl Inliner<'tcx> {\n             }\n         }\n \n-        let mut threshold = if hinted { HINT_THRESHOLD } else { DEFAULT_THRESHOLD };\n+        let mut threshold = if hinted {\n+            self.tcx.sess.opts.debugging_opts.inline_mir_hint_threshold\n+        } else {\n+            self.tcx.sess.opts.debugging_opts.inline_mir_threshold\n+        };\n \n         // Significantly lower the threshold for inlining cold functions\n         if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::COLD) {"}, {"sha": "1cd3d11e3215367f8468c4bffa290a3a13fca96e", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/919177f7e42f7585bbc8353b942a0feb1b67705e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919177f7e42f7585bbc8353b942a0feb1b67705e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=919177f7e42f7585bbc8353b942a0feb1b67705e", "patch": "@@ -929,6 +929,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         (default: no)\"),\n     incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],\n         \"verify incr. comp. hashes of green query instances (default: no)\"),\n+    inline_mir_threshold: usize = (50, parse_uint, [TRACKED],\n+        \"a default MIR inlining threshold (default: 50)\"),\n+    inline_mir_hint_threshold: usize = (100, parse_uint, [TRACKED],\n+        \"inlining threshold for functions with inline hint (default: 100)\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"control whether `#[inline]` functions are in all CGUs\"),\n     input_stats: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "477f050b69e42ac8fba5142de12ac62e4308b8dd", "filename": "src/test/mir-opt/inline/inline-options.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/919177f7e42f7585bbc8353b942a0feb1b67705e/src%2Ftest%2Fmir-opt%2Finline%2Finline-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919177f7e42f7585bbc8353b942a0feb1b67705e/src%2Ftest%2Fmir-opt%2Finline%2Finline-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-options.rs?ref=919177f7e42f7585bbc8353b942a0feb1b67705e", "patch": "@@ -0,0 +1,19 @@\n+// Checks that inlining threshold can be controlled with\n+// inline-mir-threshold and inline-hint-threshold options.\n+//\n+// compile-flags: -Zinline-mir-threshold=90\n+// compile-flags: -Zinline-mir-hint-threshold=50\n+\n+// EMIT_MIR inline_options.main.Inline.after.mir\n+fn main() {\n+    not_inlined();\n+    inlined::<u32>();\n+}\n+\n+// Cost is approximately 3 * 25 + 5 = 80.\n+#[inline]\n+pub fn not_inlined() { g(); g(); g(); }\n+pub fn inlined<T>() { g(); g(); g(); }\n+\n+#[inline(never)]\n+fn g() {}"}, {"sha": "4cbdde2ba07d7114ffd3b738b511d57b0e259292", "filename": "src/test/mir-opt/inline/inline_options.main.Inline.after.mir", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/919177f7e42f7585bbc8353b942a0feb1b67705e/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/919177f7e42f7585bbc8353b942a0feb1b67705e/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir?ref=919177f7e42f7585bbc8353b942a0feb1b67705e", "patch": "@@ -0,0 +1,56 @@\n+// MIR for `main` after Inline\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/inline-options.rs:8:11: 8:11\n+    let _1: ();                          // in scope 0 at $DIR/inline-options.rs:9:5: 9:18\n+    let _2: ();                          // in scope 0 at $DIR/inline-options.rs:10:5: 10:21\n+    scope 1 (inlined inlined::<u32>) {   // at $DIR/inline-options.rs:10:5: 10:21\n+        let _3: ();                      // in scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        let _4: ();                      // in scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        let _5: ();                      // in scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/inline-options.rs:9:5: 9:18\n+        _1 = not_inlined() -> bb1;       // scope 0 at $DIR/inline-options.rs:9:5: 9:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-options.rs:9:5: 9:16\n+                                         // + literal: Const { ty: fn() {not_inlined}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_1);                 // scope 0 at $DIR/inline-options.rs:9:18: 9:19\n+        StorageLive(_2);                 // scope 0 at $DIR/inline-options.rs:10:5: 10:21\n+        StorageLive(_3);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        _3 = g() -> bb2;                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-options.rs:10:5: 10:21\n+                                         // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb2: {\n+        StorageDead(_3);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        _4 = g() -> bb3;                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-options.rs:10:5: 10:21\n+                                         // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb3: {\n+        StorageDead(_4);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        StorageLive(_5);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        _5 = g() -> bb4;                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-options.rs:10:5: 10:21\n+                                         // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb4: {\n+        StorageDead(_5);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        _2 = const ();                   // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        StorageDead(_2);                 // scope 0 at $DIR/inline-options.rs:10:21: 10:22\n+        _0 = const ();                   // scope 0 at $DIR/inline-options.rs:8:11: 11:2\n+        return;                          // scope 0 at $DIR/inline-options.rs:11:2: 11:2\n+    }\n+}"}]}