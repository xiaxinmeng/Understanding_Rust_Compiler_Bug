{"sha": "7ac844ffb850a73b98cd47cbdec909d1f03c7987", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYzg0NGZmYjg1MGE3M2I5OGNkNDdjYmRlYzkwOWQxZjAzYzc5ODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-21T01:53:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-21T01:53:20Z"}, "message": "Auto merge of #42130 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 6 pull requests\n\n- Successful merges: #41892, #42062, #42091, #42093, #42098, #42127\n- Failed merges:", "tree": {"sha": "45c04ee9ee8bea15018df1fc3ad800e05c057341", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45c04ee9ee8bea15018df1fc3ad800e05c057341"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ac844ffb850a73b98cd47cbdec909d1f03c7987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac844ffb850a73b98cd47cbdec909d1f03c7987", "html_url": "https://github.com/rust-lang/rust/commit/7ac844ffb850a73b98cd47cbdec909d1f03c7987", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ac844ffb850a73b98cd47cbdec909d1f03c7987/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92ee08ad1c1cbd0aa6e7b9a3f8295081439403fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/92ee08ad1c1cbd0aa6e7b9a3f8295081439403fa", "html_url": "https://github.com/rust-lang/rust/commit/92ee08ad1c1cbd0aa6e7b9a3f8295081439403fa"}, {"sha": "382c0eb810b9cd9f1e944df629f14a2dae0b13f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/382c0eb810b9cd9f1e944df629f14a2dae0b13f4", "html_url": "https://github.com/rust-lang/rust/commit/382c0eb810b9cd9f1e944df629f14a2dae0b13f4"}], "stats": {"total": 183, "additions": 129, "deletions": 54}, "files": [{"sha": "10ae95695a2dbdd55aefc2142a63fe48cddf95df", "filename": "src/doc/unstable-book/src/library-features/needs-drop.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fneeds-drop.md", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fneeds-drop.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fneeds-drop.md?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -0,0 +1,7 @@\n+# `needs_drop`\n+\n+The tracking issue for this feature is: [#41890]\n+\n+[#41890]: https://github.com/rust-lang/rust/issues/41890\n+\n+------------------------"}, {"sha": "4338ac7fd022c362f1065147fad6ecc8eb445b67", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -32,6 +32,7 @@\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(generic_param_attrs)]\n+#![feature(needs_drop)]\n #![cfg_attr(stage0, feature(staged_api))]\n #![cfg_attr(test, feature(test))]\n \n@@ -82,7 +83,7 @@ impl<T> TypedArenaChunk<T> {\n     unsafe fn destroy(&mut self, len: usize) {\n         // The branch on needs_drop() is an -O1 performance optimization.\n         // Without the branch, dropping TypedArena<u8> takes linear time.\n-        if intrinsics::needs_drop::<T>() {\n+        if mem::needs_drop::<T>() {\n             let mut start = self.start();\n             // Destroy all allocated objects.\n             for _ in 0..len {\n@@ -350,7 +351,7 @@ impl DroplessArena {\n     #[inline]\n     pub fn alloc<T>(&self, object: T) -> &mut T {\n         unsafe {\n-            assert!(!intrinsics::needs_drop::<T>());\n+            assert!(!mem::needs_drop::<T>());\n             assert!(mem::size_of::<T>() != 0);\n \n             self.align_for::<T>();\n@@ -379,9 +380,7 @@ impl DroplessArena {\n     #[inline]\n     pub fn alloc_slice<T>(&self, slice: &[T]) -> &mut [T]\n         where T: Copy {\n-        unsafe {\n-            assert!(!intrinsics::needs_drop::<T>());\n-        }\n+        assert!(!mem::needs_drop::<T>());\n         assert!(mem::size_of::<T>() != 0);\n         assert!(slice.len() != 0);\n         self.align_for::<T>();"}, {"sha": "18428d378e3d24fde213900059110830111ccd7e", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -302,6 +302,58 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n     unsafe { intrinsics::min_align_of_val(val) }\n }\n \n+/// Returns whether dropping values of type `T` matters.\n+///\n+/// This is purely an optimization hint, and may be implemented conservatively.\n+/// For instance, always returning `true` would be a valid implementation of\n+/// this function.\n+///\n+/// Low level implementations of things like collections, which need to manually\n+/// drop their data, should use this function to avoid unnecessarily\n+/// trying to drop all their contents when they are destroyed. This might not\n+/// make a difference in release builds (where a loop that has no side-effects\n+/// is easily detected and eliminated), but is often a big win for debug builds.\n+///\n+/// Note that `ptr::drop_in_place` already performs this check, so if your workload\n+/// can be reduced to some small number of drop_in_place calls, using this is\n+/// unnecessary. In particular note that you can drop_in_place a slice, and that\n+/// will do a single needs_drop check for all the values.\n+///\n+/// Types like Vec therefore just `drop_in_place(&mut self[..])` without using\n+/// needs_drop explicitly. Types like HashMap, on the other hand, have to drop\n+/// values one at a time and should use this API.\n+///\n+///\n+/// # Examples\n+///\n+/// Here's an example of how a collection might make use of needs_drop:\n+///\n+/// ```ignore\n+/// #![feature(needs_drop)]\n+/// use std::{mem, ptr};\n+///\n+/// pub struct MyCollection<T> { /* ... */ }\n+///\n+/// impl<T> Drop for MyCollection<T> {\n+///     fn drop(&mut self) {\n+///         unsafe {\n+///             // drop the data\n+///             if mem::needs_drop::<T>() {\n+///                 for x in self.iter_mut() {\n+///                     ptr::drop_in_place(x);\n+///                 }\n+///             }\n+///             self.free_buffer();\n+///         }\n+///     }\n+/// }\n+/// ```\n+#[inline]\n+#[unstable(feature = \"needs_drop\", issue = \"41890\")]\n+pub fn needs_drop<T>() -> bool {\n+    unsafe { intrinsics::needs_drop::<T>() }\n+}\n+\n /// Creates a value whose bytes are all zero.\n ///\n /// This has the same effect as allocating space with"}, {"sha": "d647a94a1efde0b26a361ad22a8089f75e5b7bc4", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -918,6 +918,7 @@ impl<T> AtomicPtr<T> {\n     }\n }\n \n+#[cfg(target_has_atomic = \"ptr\")]\n macro_rules! atomic_int {\n     ($stable:meta,\n      $stable_cxchg:meta,"}, {"sha": "0515e1cc304356f738a5c009e7d266d2ac164b59", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                         heading: &str, span: Span)\n                                         -> (String, Option<Span>) {\n             let lo = tcx.sess.codemap().lookup_char_pos_adj(span.lo);\n-            (format!(\"the {} at {}:{}\", heading, lo.line, lo.col.to_usize()),\n+            (format!(\"the {} at {}:{}\", heading, lo.line, lo.col.to_usize() + 1),\n              Some(span))\n         }\n "}, {"sha": "0081339a363f73f98ba35168ece1e11833540d49", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -192,8 +192,8 @@ impl<'a> Debug for DiagnosticBuilder<'a> {\n     }\n }\n \n-/// Destructor bomb - a DiagnosticBuilder must be either emitted or cancelled or\n-/// we emit a bug.\n+/// Destructor bomb - a `DiagnosticBuilder` must be either emitted or cancelled\n+/// or we emit a bug.\n impl<'a> Drop for DiagnosticBuilder<'a> {\n     fn drop(&mut self) {\n         if !panicking() && !self.cancelled() {"}, {"sha": "a9645f9ab7bb2305398a4ff23535cc93ee3d73c7", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -1296,10 +1296,8 @@ impl Write for BufferedWriter {\n     }\n     fn flush(&mut self) -> io::Result<()> {\n         let mut stderr = io::stderr();\n-        let result = (|| {\n-            stderr.write_all(&self.buffer)?;\n-            stderr.flush()\n-        })();\n+        let result = stderr.write_all(&self.buffer)\n+                           .and_then(|_| stderr.flush());\n         self.buffer.clear();\n         result\n     }"}, {"sha": "c91dc9d87978dedb3c1011792010971c70ab0e29", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -383,7 +383,7 @@ impl Handler {\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> FatalError {\n         self.emit(&sp.into(), msg, Fatal);\n         self.panic_if_treat_err_as_bug();\n-        return FatalError;\n+        FatalError\n     }\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(&self,\n                                                     sp: S,\n@@ -392,7 +392,7 @@ impl Handler {\n                                                     -> FatalError {\n         self.emit_with_code(&sp.into(), msg, code, Fatal);\n         self.panic_if_treat_err_as_bug();\n-        return FatalError;\n+        FatalError\n     }\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Error);"}, {"sha": "50c721db849aa7307eeb18430e1eca93e4570fa5", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -12,9 +12,8 @@ use alloc::heap::{allocate, deallocate};\n \n use cmp;\n use hash::{BuildHasher, Hash, Hasher};\n-use intrinsics::needs_drop;\n use marker;\n-use mem::{align_of, size_of};\n+use mem::{align_of, size_of, needs_drop};\n use mem;\n use ops::{Deref, DerefMut};\n use ptr::{self, Unique, Shared};"}, {"sha": "27b40793ff64a7c8034e959fc623b708cee0eab7", "filename": "src/libstd/env.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -13,6 +13,13 @@\n //! This module contains functions to inspect various aspects such as\n //! environment variables, process arguments, the current directory, and various\n //! other important directories.\n+//!\n+//! There are several functions and structs in this module that have a\n+//! counterpart ending in `os`. Those ending in `os` will return an [`OsString`]\n+//! and those without will be returning a [`String`].\n+//!\n+//! [`OsString`]: ../../std/ffi/struct.OsString.html\n+//! [`String`]: ../string/struct.String.html\n \n #![stable(feature = \"env\", since = \"1.0.0\")]\n \n@@ -74,15 +81,17 @@ pub fn set_current_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n \n /// An iterator over a snapshot of the environment variables of this process.\n ///\n-/// This structure is created through the [`std::env::vars`] function.\n+/// This structure is created by the [`std::env::vars`] function. See its\n+/// documentation for more.\n ///\n /// [`std::env::vars`]: fn.vars.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Vars { inner: VarsOs }\n \n /// An iterator over a snapshot of the environment variables of this process.\n ///\n-/// This structure is created through the [`std::env::vars_os`] function.\n+/// This structure is created by the [`std::env::vars_os`] function. See\n+/// its documentation for more.\n ///\n /// [`std::env::vars_os`]: fn.vars_os.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n@@ -176,12 +185,10 @@ impl fmt::Debug for VarsOs {\n \n /// Fetches the environment variable `key` from the current process.\n ///\n-/// The returned result is [`Ok(s)`] if the environment variable is present and is\n-/// valid unicode. If the environment variable is not present, or it is not\n-/// valid unicode, then [`VarError`] will be returned.\n+/// # Errors\n ///\n-/// [`Ok(s)`]: ../result/enum.Result.html#variant.Ok\n-/// [`VarError`]: enum.VarError.html\n+/// * Environment variable is not present\n+/// * Environment variable is not valid unicode\n ///\n /// # Examples\n ///\n@@ -233,7 +240,8 @@ fn _var_os(key: &OsStr) -> Option<OsString> {\n     })\n }\n \n-/// Possible errors from the [`env::var`] function.\n+/// The error type for operations interacting with environment variables.\n+/// Possibly returned from the [`env::var`] function.\n ///\n /// [`env::var`]: fn.var.html\n #[derive(Debug, PartialEq, Eq, Clone)]\n@@ -356,10 +364,13 @@ fn _remove_var(k: &OsStr) {\n     })\n }\n \n-/// An iterator over `PathBuf` instances for parsing an environment variable\n-/// according to platform-specific conventions.\n+/// An iterator that splits an environment variable into paths according to\n+/// platform-specific conventions.\n ///\n-/// This structure is returned from `std::env::split_paths`.\n+/// This structure is created by the [`std::env::split_paths`] function See its\n+/// documentation for more.\n+///\n+/// [`std::env::split_paths`]: fn.split_paths.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct SplitPaths<'a> { inner: os_imp::SplitPaths<'a> }\n \n@@ -402,8 +413,10 @@ impl<'a> fmt::Debug for SplitPaths<'a> {\n     }\n }\n \n-/// Error type returned from `std::env::join_paths` when paths fail to be\n-/// joined.\n+/// The error type for operations on the `PATH` variable. Possibly returned from\n+/// the [`env::join_paths`] function.\n+///\n+/// [`env::join_paths`]: fn.join_paths.html\n #[derive(Debug)]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct JoinPathsError {\n@@ -413,7 +426,7 @@ pub struct JoinPathsError {\n /// Joins a collection of [`Path`]s appropriately for the `PATH`\n /// environment variable.\n ///\n-/// Returns an [`OsString`] on success.\n+/// # Errors\n ///\n /// Returns an [`Err`][err] (containing an error message) if one of the input\n /// [`Path`]s contains an invalid character for constructing the `PATH`\n@@ -493,12 +506,16 @@ pub fn home_dir() -> Option<PathBuf> {\n \n /// Returns the path of a temporary directory.\n ///\n-/// On Unix, returns the value of the `TMPDIR` environment variable if it is\n+/// # Unix\n+///\n+/// Returns the value of the `TMPDIR` environment variable if it is\n /// set, otherwise for non-Android it returns `/tmp`. If Android, since there\n /// is no global temporary folder (it is usually allocated per-app), it returns\n /// `/data/local/tmp`.\n ///\n-/// On Windows, returns the value of, in order, the `TMP`, `TEMP`,\n+/// # Windows\n+///\n+/// Returns the value of, in order, the `TMP`, `TEMP`,\n /// `USERPROFILE` environment variable if any are set and not the empty\n /// string. Otherwise, `temp_dir` returns the path of the Windows directory.\n /// This behavior is identical to that of [`GetTempPath`][msdn], which this"}, {"sha": "f497734e249c5c5d9c0cc3e5628cb85f014ba38e", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -530,7 +530,7 @@ impl<'a> From<&'a OsStr> for Box<OsStr> {\n }\n \n #[stable(feature = \"os_string_from_box\", since = \"1.18.0\")]\n-impl<'a> From<Box<OsStr>> for OsString {\n+impl From<Box<OsStr>> for OsString {\n     fn from(boxed: Box<OsStr>) -> OsString {\n         boxed.into_os_string()\n     }"}, {"sha": "b0820d6f05a0533c4471d4b7157e63af7f403de2", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -281,6 +281,7 @@\n #![feature(linkage)]\n #![feature(macro_reexport)]\n #![feature(needs_panic_runtime)]\n+#![feature(needs_drop)]\n #![feature(never_type)]\n #![feature(num_bits_bytes)]\n #![feature(old_wrapping)]"}, {"sha": "e128a4164d74a27da3c2605cc8dd2f8407c6310e", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -1342,7 +1342,7 @@ impl<'a> From<&'a Path> for Box<Path> {\n }\n \n #[stable(feature = \"path_buf_from_box\", since = \"1.18.0\")]\n-impl<'a> From<Box<Path>> for PathBuf {\n+impl From<Box<Path>> for PathBuf {\n     fn from(boxed: Box<Path>) -> PathBuf {\n         boxed.into_path_buf()\n     }"}, {"sha": "7dc61ce6654b9253673d3a9d857b2a557553b7d0", "filename": "src/libstd/sys/redox/fast_thread_local.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -12,9 +12,10 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n \n use cell::{Cell, UnsafeCell};\n-use intrinsics;\n+use mem;\n use ptr;\n \n+\n pub struct Key<T> {\n     inner: UnsafeCell<Option<T>>,\n \n@@ -37,7 +38,7 @@ impl<T> Key<T> {\n \n     pub fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n         unsafe {\n-            if intrinsics::needs_drop::<T>() && self.dtor_running.get() {\n+            if mem::needs_drop::<T>() && self.dtor_running.get() {\n                 return None\n             }\n             self.register_dtor();\n@@ -46,7 +47,7 @@ impl<T> Key<T> {\n     }\n \n     unsafe fn register_dtor(&self) {\n-        if !intrinsics::needs_drop::<T>() || self.dtor_registered.get() {\n+        if !mem::needs_drop::<T>() || self.dtor_registered.get() {\n             return\n         }\n "}, {"sha": "6b3973de84c97d940a575ff1ea78561fb3954348", "filename": "src/libstd/sys/unix/fast_thread_local.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -13,7 +13,7 @@\n \n use cell::{Cell, UnsafeCell};\n use fmt;\n-use intrinsics;\n+use mem;\n use ptr;\n \n pub struct Key<T> {\n@@ -44,7 +44,7 @@ impl<T> Key<T> {\n \n     pub fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n         unsafe {\n-            if intrinsics::needs_drop::<T>() && self.dtor_running.get() {\n+            if mem::needs_drop::<T>() && self.dtor_running.get() {\n                 return None\n             }\n             self.register_dtor();\n@@ -53,7 +53,7 @@ impl<T> Key<T> {\n     }\n \n     unsafe fn register_dtor(&self) {\n-        if !intrinsics::needs_drop::<T>() || self.dtor_registered.get() {\n+        if !mem::needs_drop::<T>() || self.dtor_registered.get() {\n             return\n         }\n "}, {"sha": "0fa4184606e452b348205688ad9f851853711bde", "filename": "src/test/compile-fail/issue-27942.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Ftest%2Fcompile-fail%2Fissue-27942.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Ftest%2Fcompile-fail%2Fissue-27942.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27942.rs?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -11,7 +11,7 @@\n pub trait Resources<'a> {}\n \n pub trait Buffer<'a, R: Resources<'a>> {\n-    //~^ NOTE the lifetime 'a as defined on the trait at 13:0...\n+    //~^ NOTE the lifetime 'a as defined on the trait at 13:1...\n     //~| NOTE ...does not necessarily outlive the lifetime 'a as defined on the trait\n \n     fn select(&self) -> BufferViewHandle<R>;\n@@ -22,7 +22,7 @@ pub trait Buffer<'a, R: Resources<'a>> {\n     //~| ERROR mismatched types\n     //~| lifetime mismatch\n     //~| NOTE expected type `Resources<'_>`\n-    //~| NOTE the anonymous lifetime #1 defined on the method body at 17:4...\n+    //~| NOTE the anonymous lifetime #1 defined on the method body at 17:5...\n }\n \n pub struct BufferViewHandle<'a, R: 'a+Resources<'a>>(&'a R);"}, {"sha": "f325d10b548735ca04af219b6f7a044777fd9786", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -4,14 +4,14 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n 12 |     if x > y { x } else { y }\n    |                           ^\n    |\n-note: ...the reference is valid for the lifetime 'a as defined on the function body at 11:0...\n+note: ...the reference is valid for the lifetime 'a as defined on the function body at 11:1...\n   --> $DIR/ex1-return-one-existing-name-if-else.rs:11:1\n    |\n 11 | / fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n 12 | |     if x > y { x } else { y }\n 13 | | }\n    | |_^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #1 defined on the function body at 11:0\n+note: ...but the borrowed content is only valid for the anonymous lifetime #1 defined on the function body at 11:1\n   --> $DIR/ex1-return-one-existing-name-if-else.rs:11:1\n    |\n 11 | / fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {"}, {"sha": "df484a14927c737ce514e9ab27e550585b7a6330", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -6,14 +6,14 @@ error[E0308]: mismatched types\n    |\n    = note: expected type `Ref<'a, _>`\n               found type `Ref<'_, _>`\n-note: the anonymous lifetime #2 defined on the function body at 15:0...\n+note: the anonymous lifetime #2 defined on the function body at 15:1...\n   --> $DIR/ex2a-push-one-existing-name.rs:15:1\n    |\n 15 | / fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n 16 | |     x.push(y);\n 17 | | }\n    | |_^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the function body at 15:0\n+note: ...does not necessarily outlive the lifetime 'a as defined on the function body at 15:1\n   --> $DIR/ex2a-push-one-existing-name.rs:15:1\n    |\n 15 | / fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {"}, {"sha": "6764c58f4bb59aeb1b9b345eab5f840ba0032c48", "filename": "src/test/ui/lifetime-errors/ex2b-push-no-existing-names.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -6,14 +6,14 @@ error[E0308]: mismatched types\n    |\n    = note: expected type `Ref<'_, _>`\n               found type `Ref<'_, _>`\n-note: the anonymous lifetime #3 defined on the function body at 15:0...\n+note: the anonymous lifetime #3 defined on the function body at 15:1...\n   --> $DIR/ex2b-push-no-existing-names.rs:15:1\n    |\n 15 | / fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n 16 | |     x.push(y);\n 17 | | }\n    | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 15:0\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 15:1\n   --> $DIR/ex2b-push-no-existing-names.rs:15:1\n    |\n 15 | / fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {"}, {"sha": "7356fc11862f6e104d004cd642852161b18e5e1b", "filename": "src/test/ui/lifetime-errors/ex2c-push-inference-variable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n 16 |     let z = Ref { data: y.data };\n    |             ^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'c as defined on the function body at 15:0...\n+note: first, the lifetime cannot outlive the lifetime 'c as defined on the function body at 15:1...\n   --> $DIR/ex2c-push-inference-variable.rs:15:1\n    |\n 15 | / fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n@@ -17,7 +17,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n 16 |     let z = Ref { data: y.data };\n    |                         ^^^^^^\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 15:0...\n+note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 15:1...\n   --> $DIR/ex2c-push-inference-variable.rs:15:1\n    |\n 15 | / fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {"}, {"sha": "38b0acf9339e0e89595a6c0ee889abca1f2c221e", "filename": "src/test/ui/lifetime-errors/ex2d-push-inference-variable-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n 17 |     let b = Ref { data: y.data };\n    |             ^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'c as defined on the function body at 15:0...\n+note: first, the lifetime cannot outlive the lifetime 'c as defined on the function body at 15:1...\n   --> $DIR/ex2d-push-inference-variable-2.rs:15:1\n    |\n 15 | / fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n@@ -18,7 +18,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n 17 |     let b = Ref { data: y.data };\n    |                         ^^^^^^\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 15:0...\n+note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 15:1...\n   --> $DIR/ex2d-push-inference-variable-2.rs:15:1\n    |\n 15 | / fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {"}, {"sha": "035e516e8628e9b933157645e651ef281f272c01", "filename": "src/test/ui/lifetime-errors/ex2e-push-inference-variable-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ac844ffb850a73b98cd47cbdec909d1f03c7987/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr?ref=7ac844ffb850a73b98cd47cbdec909d1f03c7987", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n 17 |     let b = Ref { data: y.data };\n    |             ^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'c as defined on the function body at 15:0...\n+note: first, the lifetime cannot outlive the lifetime 'c as defined on the function body at 15:1...\n   --> $DIR/ex2e-push-inference-variable-3.rs:15:1\n    |\n 15 | / fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n@@ -18,7 +18,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n 17 |     let b = Ref { data: y.data };\n    |                         ^^^^^^\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 15:0...\n+note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 15:1...\n   --> $DIR/ex2e-push-inference-variable-3.rs:15:1\n    |\n 15 | / fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {"}]}