{"sha": "e33f7f7de1df090f890063296608dca65be55ac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzM2Y3ZjdkZTFkZjA5MGY4OTAwNjMyOTY2MDhkY2E2NWJlNTVhYzA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-21T02:42:10Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-21T02:42:10Z"}, "message": "Explain type mismatch cause pointing to return type when it is `impl Trait`", "tree": {"sha": "270de458d4e9b868bebde2018f8ecd0caaf926bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/270de458d4e9b868bebde2018f8ecd0caaf926bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e33f7f7de1df090f890063296608dca65be55ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e33f7f7de1df090f890063296608dca65be55ac0", "html_url": "https://github.com/rust-lang/rust/commit/e33f7f7de1df090f890063296608dca65be55ac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e33f7f7de1df090f890063296608dca65be55ac0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e73069767f11d992f0dca7e31d53d7e1a77fd237", "url": "https://api.github.com/repos/rust-lang/rust/commits/e73069767f11d992f0dca7e31d53d7e1a77fd237", "html_url": "https://github.com/rust-lang/rust/commit/e73069767f11d992f0dca7e31d53d7e1a77fd237"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "e3aae21584c218cffdd431d76280e1926ec338d1", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e33f7f7de1df090f890063296608dca65be55ac0/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33f7f7de1df090f890063296608dca65be55ac0/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=e33f7f7de1df090f890063296608dca65be55ac0", "patch": "@@ -1199,7 +1199,6 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                     (self.final_ty.unwrap_or(self.expected_ty), expression_ty)\n                 };\n \n-                let reason_label = \"expected because of this statement\";\n                 let mut db;\n                 match cause.code {\n                     ObligationCauseCode::ReturnNoExpression => {\n@@ -1244,26 +1243,46 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                         // as prior return coercions would not be relevant (#57664).\n                         let parent_id = fcx.tcx.hir().get_parent_node(blk_id);\n                         let parent = fcx.tcx.hir().get(fcx.tcx.hir().get_parent_node(parent_id));\n-                        if fcx.get_node_fn_decl(parent).is_some() && !pointing_at_return_type {\n+                        if let (Some((fn_decl, _, _)), false) = (\n+                            fcx.get_node_fn_decl(parent),\n+                            pointing_at_return_type,\n+                        ) {\n                             if let Some(sp) = fcx.ret_coercion_span.borrow().as_ref() {\n-                                db.span_label(*sp, reason_label);\n+                                db.span_label(\n+                                    fn_decl.output.span(),\n+                                    \"expected because this return type...\",\n+                                );\n+                                db.span_label(*sp, format!(\n+                                    \"...is found to be `{}` here\",\n+                                    fcx.resolve_type_vars_with_obligations(expected),\n+                                ));\n                             }\n                         }\n                     }\n                     ObligationCauseCode::ReturnType(_id) => {\n                         db = fcx.report_mismatched_types(cause, expected, found, err);\n                         let _id = fcx.tcx.hir().get_parent_node(_id);\n                         let mut pointing_at_return_type = false;\n+                        let mut return_sp = None;\n                         if let Some((fn_decl, can_suggest)) = fcx.get_fn_decl(_id) {\n                             pointing_at_return_type = fcx.suggest_missing_return_type(\n                                 &mut db, &fn_decl, expected, found, can_suggest);\n+                            if !pointing_at_return_type {\n+                                return_sp = Some(fn_decl.output.span()); // `impl Trait` return type\n+                            }\n                         }\n                         if let (Some(sp), false) = (\n                             fcx.ret_coercion_span.borrow().as_ref(),\n                             pointing_at_return_type,\n                         ) {\n-                            if !sp.overlaps(cause.span) {\n-                                db.span_label(*sp, reason_label);\n+                            if let Some(return_sp) = return_sp {\n+                                db.span_label(return_sp, \"expected because this return type...\");\n+                                db.span_label( *sp, format!(\n+                                    \"...is found to be `{}` here\",\n+                                    fcx.resolve_type_vars_with_obligations(expected),\n+                                ));\n+                            } else if !sp.overlaps(cause.span) {\n+                                db.span_label(*sp, \"expected because of this statement\");\n                             }\n                         }\n                     }"}, {"sha": "6cd9d07748c27043ddd019388e3b08cd98373007", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e33f7f7de1df090f890063296608dca65be55ac0/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e33f7f7de1df090f890063296608dca65be55ac0/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=e33f7f7de1df090f890063296608dca65be55ac0", "patch": "@@ -1,8 +1,11 @@\n error[E0308]: mismatched types\n   --> $DIR/equality.rs:15:5\n    |\n+LL | fn two(x: bool) -> impl Foo {\n+   |                    -------- expected because this return type...\n+LL |     if x {\n LL |         return 1_i32;\n-   |                ----- expected because of this statement\n+   |                ----- ...is found to be `i32` here\n LL |     }\n LL |     0_u32\n    |     ^^^^^ expected i32, found u32"}, {"sha": "5ebe00e624fc1ddfa2fc564d217078ef3f26257a", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e33f7f7de1df090f890063296608dca65be55ac0/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e33f7f7de1df090f890063296608dca65be55ac0/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=e33f7f7de1df090f890063296608dca65be55ac0", "patch": "@@ -1,8 +1,11 @@\n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:5:5\n    |\n+LL | fn foo() -> impl std::fmt::Display {\n+   |             ---------------------- expected because this return type...\n+LL |     if false {\n LL |         return 0i32;\n-   |                ---- expected because of this statement\n+   |                ---- ...is found to be `i32` here\n LL |     }\n LL |     1u32\n    |     ^^^^ expected i32, found u32\n@@ -13,8 +16,11 @@ LL |     1u32\n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:13:16\n    |\n+LL | fn bar() -> impl std::fmt::Display {\n+   |             ---------------------- expected because this return type...\n+LL |     if false {\n LL |         return 0i32;\n-   |                ---- expected because of this statement\n+   |                ---- ...is found to be `i32` here\n LL |     } else {\n LL |         return 1u32;\n    |                ^^^^ expected i32, found u32\n@@ -25,10 +31,12 @@ LL |         return 1u32;\n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:19:5\n    |\n+LL |   fn baz() -> impl std::fmt::Display {\n+   |               ---------------------- expected because this return type...\n LL | /     if false {\n LL | |     //~^ ERROR mismatched types\n LL | |         return 0i32;\n-   | |                ---- expected because of this statement\n+   | |                ---- ...is found to be `i32` here\n LL | |     } else {\n LL | |         1u32\n LL | |     }"}]}