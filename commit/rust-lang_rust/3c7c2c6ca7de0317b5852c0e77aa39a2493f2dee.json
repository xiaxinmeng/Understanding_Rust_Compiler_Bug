{"sha": "3c7c2c6ca7de0317b5852c0e77aa39a2493f2dee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjN2MyYzZjYTdkZTAzMTdiNTg1MmMwZTc3YWEzOWEyNDkzZjJkZWU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-13T00:14:51Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-14T19:45:18Z"}, "message": "Handle --extern-private properly on musl\n\nOn musl (and some other platforms), compiletest ends up creating a static rlib\n(instead of a dylib) when building 'aux-build' crates.\n\nThis commit changes the '--extern-private' path computed by compiletest\nto properly take this into account", "tree": {"sha": "d5fd564bdb9f51ddf5f0519e94cec93c5c608ca8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5fd564bdb9f51ddf5f0519e94cec93c5c608ca8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c7c2c6ca7de0317b5852c0e77aa39a2493f2dee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlyzjc4ACgkQtAh+UQ6Y\nsWSivA/7BSfh52OGXPtdLMgVktfbLkRbX89BwM7Hw4XhplEyctdC4Tc+9fI4TILp\nsi9F8G3T9qO2xmFj/Bu93OB20ISQb3JFcAhTFeu3QFPJfUsLRFYXTQZGtkwD/nLa\n0SvD2wv090aaoJNlOiJB9Chvx0wuhaI+jV4lUWxpRGSorguG/W/JXWGTQhg0cwi/\n3wBB6/kZj8eQTkCz2+djPFHhrVXT/+vZ0lar98s42E44tD2AIfZnHwNk/q+yab7A\nAEdJFmpZ9vPByMA0DRjduJ5syaBRGc7kpx2uHk+vWaQPbpgaHXT1YSnabOjQjKt+\nFZ0R1jhBsM+kg5Tp+ZiC6VGSI31TOPTRRsZt81eV8NdqM0+ZrQD5gCJ6e86TgZyH\no2FWm/LWEaoyKYhyNkHYpI/vc8+fUd9hPOTkziQN619rmOHEEObUYRGCOm3bfpBZ\nMBiRxd+lXP6EDrwGUkGs4FQPlnAEVIOsjSE29C1/OCB9gcGtQAaQ2KV71KvcQkPr\nNiprNGIigpq0QmNTsHxMyty1nh9j78hBrP68joEou4zC0wfamDH3fuH0Eq/USDMD\nnsl4EZBn2INFa/MfIGaCBlNWl2l3S/6XlwCckTa+jUXF2fa2FmiqmA9C/djptgqP\nRLVbLE6oWR+bTpbuNUW7Mdt2ZNmkk93ZfOXLmp0bAexcoPrCmTI=\n=HSb/\n-----END PGP SIGNATURE-----", "payload": "tree d5fd564bdb9f51ddf5f0519e94cec93c5c608ca8\nparent 4dfce34912f866d6fef52907f1e5c56117becf27\nauthor Aaron Hill <aa1ronham@gmail.com> 1555114491 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1555271118 -0400\n\nHandle --extern-private properly on musl\n\nOn musl (and some other platforms), compiletest ends up creating a static rlib\n(instead of a dylib) when building 'aux-build' crates.\n\nThis commit changes the '--extern-private' path computed by compiletest\nto properly take this into account\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7c2c6ca7de0317b5852c0e77aa39a2493f2dee", "html_url": "https://github.com/rust-lang/rust/commit/3c7c2c6ca7de0317b5852c0e77aa39a2493f2dee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c7c2c6ca7de0317b5852c0e77aa39a2493f2dee/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dfce34912f866d6fef52907f1e5c56117becf27", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dfce34912f866d6fef52907f1e5c56117becf27", "html_url": "https://github.com/rust-lang/rust/commit/4dfce34912f866d6fef52907f1e5c56117becf27"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "9e3c49119deafd16a44ad66fbdc4242b09bebc94", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c7c2c6ca7de0317b5852c0e77aa39a2493f2dee/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7c2c6ca7de0317b5852c0e77aa39a2493f2dee/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=3c7c2c6ca7de0317b5852c0e77aa39a2493f2dee", "patch": "@@ -1,5 +1,6 @@\n #![crate_name = \"compiletest\"]\n #![feature(test)]\n+#![feature(vec_remove_item)]\n #![deny(warnings, rust_2018_idioms)]\n \n #[cfg(unix)]"}, {"sha": "e6e937f5db4450c29f4967459e8516a5fbf53e39", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3c7c2c6ca7de0317b5852c0e77aa39a2493f2dee/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7c2c6ca7de0317b5852c0e77aa39a2493f2dee/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=3c7c2c6ca7de0317b5852c0e77aa39a2493f2dee", "patch": "@@ -75,7 +75,15 @@ pub fn dylib_env_var() -> &'static str {\n }\n \n /// The platform-specific library file extension\n-pub fn lib_extension() -> &'static str {\n+pub fn lib_extension(dylib: bool) -> &'static str {\n+    // In some casess (e.g. MUSL), we build a static\n+    // library, rather than a dynamic library.\n+    // In this case, the only path we can pass\n+    // with '--extern-meta' is the '.lib' file\n+    if !dylib {\n+        return \".rlib\"\n+    }\n+\n     if cfg!(windows) {\n         \".dll\"\n     } else if cfg!(target_os = \"macos\") {\n@@ -1596,12 +1604,15 @@ impl<'test> TestCx<'test> {\n             create_dir_all(&aux_dir).unwrap();\n         }\n \n-        for priv_dep in &self.props.extern_private {\n-            let lib_name = format!(\"lib{}{}\", priv_dep, lib_extension());\n+        // Use a Vec instead of a HashMap to preserve original order\n+        let mut extern_priv = self.props.extern_private.clone();\n+\n+        let mut add_extern_priv = |priv_dep: &str, dylib: bool| {\n+            let lib_name = format!(\"lib{}{}\", priv_dep, lib_extension(dylib));\n             rustc\n                 .arg(\"--extern-private\")\n                 .arg(format!(\"{}={}\", priv_dep, aux_dir.join(lib_name).to_str().unwrap()));\n-        }\n+        };\n \n         for rel_ab in &self.props.aux_builds {\n             let aux_testpaths = self.compute_aux_test_paths(rel_ab);\n@@ -1619,8 +1630,8 @@ impl<'test> TestCx<'test> {\n             create_dir_all(aux_cx.output_base_dir()).unwrap();\n             let mut aux_rustc = aux_cx.make_compile_args(&aux_testpaths.file, aux_output);\n \n-            let crate_type = if aux_props.no_prefer_dynamic {\n-                None\n+            let (dylib, crate_type) = if aux_props.no_prefer_dynamic {\n+                (true, None)\n             } else if self.config.target.contains(\"cloudabi\")\n                 || self.config.target.contains(\"emscripten\")\n                 || (self.config.target.contains(\"musl\") && !aux_props.force_host)\n@@ -1636,11 +1647,20 @@ impl<'test> TestCx<'test> {\n                 // dynamic libraries so we just go back to building a normal library. Note,\n                 // however, that for MUSL if the library is built with `force_host` then\n                 // it's ok to be a dylib as the host should always support dylibs.\n-                Some(\"lib\")\n+                (false, Some(\"lib\"))\n             } else {\n-                Some(\"dylib\")\n+                (true, Some(\"dylib\"))\n             };\n \n+            let trimmed = rel_ab.trim_end_matches(\".rs\").to_string();\n+\n+            // Normally, every 'extern-private' has a correspodning 'aux-build'\n+            // entry. If so, we remove it from our list of private crates,\n+            // and add an '--extern-private' flag to rustc\n+            if extern_priv.remove_item(&trimmed).is_some() {\n+                add_extern_priv(&trimmed, dylib);\n+            }\n+\n             if let Some(crate_type) = crate_type {\n                 aux_rustc.args(&[\"--crate-type\", crate_type]);\n             }\n@@ -1664,6 +1684,12 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n+        // Add any '--extenr-private' entries without a matching\n+        // 'aux-build'\n+        for private_lib in extern_priv {\n+            add_extern_priv(&private_lib, true);\n+        }\n+\n         rustc.envs(self.props.rustc_env.clone());\n         self.compose_and_run(\n             rustc,"}]}