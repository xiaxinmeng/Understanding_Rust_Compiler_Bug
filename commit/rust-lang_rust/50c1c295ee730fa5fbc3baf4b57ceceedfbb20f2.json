{"sha": "50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYzFjMjk1ZWU3MzBmYTVmYmMzYmFmNGI1N2NlY2VlZGZiYjIwZjI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-14T23:24:47Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-04-17T18:30:23Z"}, "message": "Make `needs_drop` less pessimistic on generators", "tree": {"sha": "8132c323617e2e846f392d1779fc215929fa9ab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8132c323617e2e846f392d1779fc215929fa9ab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2", "html_url": "https://github.com/rust-lang/rust/commit/50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d67f576b56e8fc98a31123e5963f8d00e40611c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d67f576b56e8fc98a31123e5963f8d00e40611c", "html_url": "https://github.com/rust-lang/rust/commit/8d67f576b56e8fc98a31123e5963f8d00e40611c"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "239507e19e00136b0243d683d2c8e385076f827b", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2", "patch": "@@ -1047,10 +1047,7 @@ pub fn needs_drop_components(\n         // Foreign types can never have destructors.\n         ty::Foreign(..) => Ok(SmallVec::new()),\n \n-        // Pessimistically assume that all generators will require destructors\n-        // as we don't know if a destructor is a noop or not until after the MIR\n-        // state transformation pass.\n-        ty::Generator(..) | ty::Dynamic(..) | ty::Error => Err(AlwaysRequiresDrop),\n+        ty::Dynamic(..) | ty::Error => Err(AlwaysRequiresDrop),\n \n         ty::Slice(ty) => needs_drop_components(ty, target_layout),\n         ty::Array(elem_ty, size) => {\n@@ -1083,7 +1080,8 @@ pub fn needs_drop_components(\n         | ty::Placeholder(..)\n         | ty::Opaque(..)\n         | ty::Infer(_)\n-        | ty::Closure(..) => Ok(smallvec![ty]),\n+        | ty::Closure(..)\n+        | ty::Generator(..) => Ok(smallvec![ty]),\n     }\n }\n "}, {"sha": "515cf6f29116431868d999b60e740fe44d4faa65", "filename": "src/librustc_ty/needs_drop.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2/src%2Flibrustc_ty%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2/src%2Flibrustc_ty%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fneeds_drop.rs?ref=50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2", "patch": "@@ -99,6 +99,23 @@ where\n                         }\n                     }\n \n+                    ty::Generator(def_id, substs, _) => {\n+                        let substs = substs.as_generator();\n+                        for upvar_ty in substs.upvar_tys(def_id, tcx) {\n+                            queue_type(self, upvar_ty);\n+                        }\n+\n+                        let witness = substs.witness(def_id, tcx);\n+                        let interior_tys = match &witness.kind {\n+                            ty::GeneratorWitness(tys) => tcx.erase_late_bound_regions(tys),\n+                            _ => bug!(),\n+                        };\n+\n+                        for interior_ty in interior_tys {\n+                            queue_type(self, interior_ty);\n+                        }\n+                    }\n+\n                     // Check for a `Drop` impl and whether this is a union or\n                     // `ManuallyDrop`. If it's a struct or enum without a `Drop`\n                     // impl then check whether the field types need `Drop`."}, {"sha": "38e1ace8c4efbc358033fce0f69245851ee47dd6", "filename": "src/test/ui/generator/borrowing.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr?ref=50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2", "patch": "@@ -1,19 +1,16 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:9:33\n    |\n+LL |     let _b = {\n+   |         -- borrow later stored here\n+LL |         let a = 3;\n LL |         Pin::new(&mut || yield &a).resume(())\n-   |                       ----------^\n-   |                       |         |\n-   |                       |         borrowed value does not live long enough\n+   |                       --        ^ borrowed value does not live long enough\n+   |                       |\n    |                       value captured here by generator\n-   |                       a temporary with access to the borrow is created here ...\n LL |\n LL |     };\n-   |     -- ... and the borrow might be used here, when that temporary is dropped and runs the destructor for generator\n-   |     |\n-   |     `a` dropped here while still borrowed\n-   |\n-   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+   |     - `a` dropped here while still borrowed\n \n error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:16:20"}, {"sha": "e33310d12d9ef762c7bf9ba2f02fe3fa5d371fe0", "filename": "src/test/ui/generator/retain-resume-ref.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.stderr?ref=50c1c295ee730fa5fbc3baf4b57ceceedfbb20f2", "patch": "@@ -4,10 +4,9 @@ error[E0499]: cannot borrow `thing` as mutable more than once at a time\n LL |     gen.as_mut().resume(&mut thing);\n    |                         ---------- first mutable borrow occurs here\n LL |     gen.as_mut().resume(&mut thing);\n-   |                         ^^^^^^^^^^ second mutable borrow occurs here\n-LL |\n-LL | }\n-   | - first borrow might be used here, when `gen` is dropped and runs the destructor for generator\n+   |                  ------ ^^^^^^^^^^ second mutable borrow occurs here\n+   |                  |\n+   |                  first borrow later used by call\n \n error: aborting due to previous error\n "}]}