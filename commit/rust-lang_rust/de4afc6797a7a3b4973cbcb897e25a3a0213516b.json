{"sha": "de4afc6797a7a3b4973cbcb897e25a3a0213516b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNGFmYzY3OTdhN2EzYjQ5NzNjYmNiODk3ZTI1YTNhMDIxMzUxNmI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-07-05T23:14:20Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-07-08T06:55:55Z"}, "message": "Implement O(1)-time Iterator::nth for Range*", "tree": {"sha": "9a766996e5085cedea887e3253c9b3a4ea7ed5e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a766996e5085cedea887e3253c9b3a4ea7ed5e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de4afc6797a7a3b4973cbcb897e25a3a0213516b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de4afc6797a7a3b4973cbcb897e25a3a0213516b", "html_url": "https://github.com/rust-lang/rust/commit/de4afc6797a7a3b4973cbcb897e25a3a0213516b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de4afc6797a7a3b4973cbcb897e25a3a0213516b/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e8fd024198a059b759ae8472d6a29ba6a206b01", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8fd024198a059b759ae8472d6a29ba6a206b01", "html_url": "https://github.com/rust-lang/rust/commit/8e8fd024198a059b759ae8472d6a29ba6a206b01"}], "stats": {"total": 107, "additions": 89, "deletions": 18}, "files": [{"sha": "32c32e327eb2d6709b919600f630c72631a30e9b", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 84, "deletions": 5, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/de4afc6797a7a3b4973cbcb897e25a3a0213516b/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4afc6797a7a3b4973cbcb897e25a3a0213516b/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=de4afc6797a7a3b4973cbcb897e25a3a0213516b", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use convert::TryFrom;\n use mem;\n use ops::{self, Add, Sub};\n use usize;\n@@ -21,7 +22,7 @@ use super::{FusedIterator, TrustedLen};\n #[unstable(feature = \"step_trait\",\n            reason = \"likely to be replaced by finer-grained traits\",\n            issue = \"42168\")]\n-pub trait Step: PartialOrd + Sized {\n+pub trait Step: Clone + PartialOrd + Sized {\n     /// Returns the number of steps between two step objects. The count is\n     /// inclusive of `start` and exclusive of `end`.\n     ///\n@@ -40,6 +41,9 @@ pub trait Step: PartialOrd + Sized {\n \n     /// Subtracts one to this step, returning the result\n     fn sub_one(&self) -> Self;\n+\n+    /// Add an usize, returning None on overflow\n+    fn add_usize(&self, n: usize) -> Option<Self>;\n }\n \n // These are still macro-generated because the integer literals resolve to different types.\n@@ -84,12 +88,20 @@ macro_rules! step_impl_unsigned {\n                 }\n             }\n \n+            #[inline]\n+            fn add_usize(&self, n: usize) -> Option<Self> {\n+                match <$t>::try_from(n) {\n+                    Ok(n_as_t) => self.checked_add(n_as_t),\n+                    Err(_) => None,\n+                }\n+            }\n+\n             step_identical_methods!();\n         }\n     )*)\n }\n macro_rules! step_impl_signed {\n-    ($($t:ty)*) => ($(\n+    ($( [$t:ty : $unsigned:ty] )*) => ($(\n         #[unstable(feature = \"step_trait\",\n                    reason = \"likely to be replaced by finer-grained traits\",\n                    issue = \"42168\")]\n@@ -107,6 +119,24 @@ macro_rules! step_impl_signed {\n                 }\n             }\n \n+            #[inline]\n+            fn add_usize(&self, n: usize) -> Option<Self> {\n+                match <$unsigned>::try_from(n) {\n+                    Ok(n_as_unsigned) => {\n+                        // Wrapping in unsigned space handles cases like\n+                        // `-120_i8.add_usize(200) == Some(80_i8)`,\n+                        // even though 200_usize is out of range for i8.\n+                        let wrapped = (*self as $unsigned).wrapping_add(n_as_unsigned) as $t;\n+                        if wrapped >= *self {\n+                            Some(wrapped)\n+                        } else {\n+                            None  // Addition overflowed\n+                        }\n+                    }\n+                    Err(_) => None,\n+                }\n+            }\n+\n             step_identical_methods!();\n         }\n     )*)\n@@ -123,17 +153,22 @@ macro_rules! step_impl_no_between {\n                 None\n             }\n \n+            #[inline]\n+            fn add_usize(&self, n: usize) -> Option<Self> {\n+                self.checked_add(n as $t)\n+            }\n+\n             step_identical_methods!();\n         }\n     )*)\n }\n \n step_impl_unsigned!(usize u8 u16 u32);\n-step_impl_signed!(isize i8 i16 i32);\n+step_impl_signed!([isize: usize] [i8: u8] [i16: u16] [i32: u32]);\n #[cfg(target_pointer_width = \"64\")]\n step_impl_unsigned!(u64);\n #[cfg(target_pointer_width = \"64\")]\n-step_impl_signed!(i64);\n+step_impl_signed!([i64: u64]);\n // If the target pointer width is not 64-bits, we\n // assume here that it is less than 64-bits.\n #[cfg(not(target_pointer_width = \"64\"))]\n@@ -194,6 +229,19 @@ impl<A: Step> Iterator for ops::Range<A> {\n             None => (0, None)\n         }\n     }\n+\n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<A> {\n+        if let Some(plus_n) = self.start.add_usize(n) {\n+            if plus_n < self.end {\n+                self.start = plus_n.add_one();\n+                return Some(plus_n)\n+            }\n+        }\n+\n+        self.start = self.end.clone();\n+        None\n+    }\n }\n \n // These macros generate `ExactSizeIterator` impls for various range types.\n@@ -211,7 +259,7 @@ range_trusted_len_impl!(usize isize u8 i8 u16 i16 u32 i32 i64 u64);\n range_incl_trusted_len_impl!(usize isize u8 i8 u16 i16 u32 i32 i64 u64);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<A: Step + Clone> DoubleEndedIterator for ops::Range<A> {\n+impl<A: Step> DoubleEndedIterator for ops::Range<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         if self.start < self.end {\n@@ -241,6 +289,13 @@ impl<A: Step> Iterator for ops::RangeFrom<A> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (usize::MAX, None)\n     }\n+\n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<A> {\n+        let plus_n = self.start.add_usize(n).expect(\"overflow in RangeFrom::nth\");\n+        self.start = plus_n.add_one();\n+        Some(plus_n)\n+    }\n }\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n@@ -279,6 +334,30 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n             None => (0, None),\n         }\n     }\n+\n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<A> {\n+        if let Some(plus_n) = self.start.add_usize(n) {\n+            use cmp::Ordering::*;\n+\n+            match plus_n.partial_cmp(&self.end) {\n+                Some(Less) => {\n+                    self.start = plus_n.add_one();\n+                    return Some(plus_n)\n+                }\n+                Some(Equal) => {\n+                    self.start.replace_one();\n+                    self.end.replace_zero();\n+                    return Some(plus_n)\n+                }\n+                _ => {}\n+            }\n+        }\n+\n+        self.start.replace_one();\n+        self.end.replace_zero();\n+        None\n+    }\n }\n \n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]"}, {"sha": "84d86cfdf65a43f938406231bd804ac91232cb54", "filename": "src/test/run-pass/impl-trait/example-calendar.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de4afc6797a7a3b4973cbcb897e25a3a0213516b/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4afc6797a7a3b4973cbcb897e25a3a0213516b/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs?ref=de4afc6797a7a3b4973cbcb897e25a3a0213516b", "patch": "@@ -162,22 +162,10 @@ impl<'a, 'b> std::ops::Add<&'b NaiveDate> for &'a NaiveDate {\n }\n \n impl std::iter::Step for NaiveDate {\n-    fn step(&self, by: &Self) -> Option<Self> {\n-        Some(self + by)\n-    }\n-\n-    fn steps_between(_: &Self, _: &Self, _: &Self) -> Option<usize> {\n-        unimplemented!()\n-    }\n-\n-    fn steps_between_by_one(_: &Self, _: &Self) -> Option<usize> {\n+    fn steps_between(_: &Self, _: &Self) -> Option<usize> {\n         unimplemented!()\n     }\n \n-    fn is_negative(&self) -> bool {\n-        false\n-    }\n-\n     fn replace_one(&mut self) -> Self {\n         mem::replace(self, NaiveDate(0, 0, 1))\n     }\n@@ -193,6 +181,10 @@ impl std::iter::Step for NaiveDate {\n     fn sub_one(&self) -> Self {\n         unimplemented!()\n     }\n+\n+    fn add_usize(&self, _: usize) -> Option<Self> {\n+        unimplemented!()\n+    }\n }\n \n #[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]"}]}