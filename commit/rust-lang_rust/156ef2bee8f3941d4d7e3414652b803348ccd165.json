{"sha": "156ef2bee8f3941d4d7e3414652b803348ccd165", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NmVmMmJlZThmMzk0MWQ0ZDdlMzQxNDY1MmI4MDMzNDhjY2QxNjU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-10T20:59:30Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-10T21:33:06Z"}, "message": "Attach tokens to `ast::Stmt`\n\nWe currently only attach tokens when parsing a `:stmt` matcher for a\n`macro_rules!` macro. Proc-macro attributes on statements are still\nunstable, and need additional work.", "tree": {"sha": "31a9945d066ecafa5b22a893cf999fb77fef6181", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31a9945d066ecafa5b22a893cf999fb77fef6181"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/156ef2bee8f3941d4d7e3414652b803348ccd165", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl9am5IACgkQtAh+UQ6Y\nsWQDIxAAo84nogBwZ6m/u+9bkAIqKsFdOVmYIZdg/RU/xz232mpCOxJEIXcLiTgS\nZvV8Ll2q+ec6iDWFFK66Bdj24MAXtSeCWejazFF7wji0vgudkQcUVMr7w6zJArvb\nE4svQ4KmaE0TaEinpD8dSN6P/MZmtSfDvW49Tp4Ni6jJY2wr9AvpdVqq5orKh+H7\ns/gdRVlgY+yOCPMQ2QLt+6Q0B7CzqTt74J/OTuUpFH/khAoFlEz/ts002KYMnE9m\nS0Mfqmb9h0aaphW6SFXBNUSCsQ4XdMyIrb/GDioHb2it/VBMzR0XF9PpuIm1SsHB\nq7m2eoWEOmIItWJoqy+eTS8j72CHq3HgtI3c+nI8K5adQmEj+2138+UwyUAv+4g8\nlCOG5INZCRJSQue3ylvfWb7fgamcRQ+zIOe121wjgB/VRy5+ga0UJU9kmXHO6fnU\nKNghGAHhXvivctLxFZnmJV6m+8pMqbrCtyGVc298xB52pMVt9LTK+DKo9tj1rJG0\neKxoluGHtTH9RdXDgvBMVpYuySwrcTku5R/UlRRhehx/0sE0cXH20r8S8BxfaIOj\nxaF+YlDFsk/nBDGvGL2oD4nd26dW4Am5j94jTeQeWziGm6rhozwbgXAeexmwrQDQ\nfnITAUDWOfggAdSJH8+ToaOpF+Ff8VHX3mta9Ga7kZ4nlOQpJNA=\n=EPWl\n-----END PGP SIGNATURE-----", "payload": "tree 31a9945d066ecafa5b22a893cf999fb77fef6181\nparent c1011165e63480dabf1913e308da8b344dfa8f8a\nauthor Aaron Hill <aa1ronham@gmail.com> 1599771570 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1599773586 -0400\n\nAttach tokens to `ast::Stmt`\n\nWe currently only attach tokens when parsing a `:stmt` matcher for a\n`macro_rules!` macro. Proc-macro attributes on statements are still\nunstable, and need additional work.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/156ef2bee8f3941d4d7e3414652b803348ccd165", "html_url": "https://github.com/rust-lang/rust/commit/156ef2bee8f3941d4d7e3414652b803348ccd165", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/156ef2bee8f3941d4d7e3414652b803348ccd165/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1011165e63480dabf1913e308da8b344dfa8f8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1011165e63480dabf1913e308da8b344dfa8f8a", "html_url": "https://github.com/rust-lang/rust/commit/c1011165e63480dabf1913e308da8b344dfa8f8a"}], "stats": {"total": 71, "additions": 56, "deletions": 15}, "files": [{"sha": "dee3a16f9b133a6153f0c3ff4a088b3fa298444e", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=156ef2bee8f3941d4d7e3414652b803348ccd165", "patch": "@@ -918,6 +918,7 @@ pub struct Stmt {\n     pub id: NodeId,\n     pub kind: StmtKind,\n     pub span: Span,\n+    pub tokens: Option<TokenStream>,\n }\n \n impl Stmt {"}, {"sha": "425ef83b57af5ab203cb056f16dd40bb56e875d4", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=156ef2bee8f3941d4d7e3414652b803348ccd165", "patch": "@@ -1286,12 +1286,15 @@ pub fn noop_filter_map_expr<T: MutVisitor>(mut e: P<Expr>, vis: &mut T) -> Optio\n }\n \n pub fn noop_flat_map_stmt<T: MutVisitor>(\n-    Stmt { kind, mut span, mut id }: Stmt,\n+    Stmt { kind, mut span, mut id, tokens }: Stmt,\n     vis: &mut T,\n ) -> SmallVec<[Stmt; 1]> {\n     vis.visit_id(&mut id);\n     vis.visit_span(&mut span);\n-    noop_flat_map_stmt_kind(kind, vis).into_iter().map(|kind| Stmt { id, kind, span }).collect()\n+    noop_flat_map_stmt_kind(kind, vis)\n+        .into_iter()\n+        .map(|kind| Stmt { id, kind, span, tokens: tokens.clone() })\n+        .collect()\n }\n \n pub fn noop_flat_map_stmt_kind<T: MutVisitor>("}, {"sha": "d84b3956475d848be81faa7645c34327b4a5c08c", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=156ef2bee8f3941d4d7e3414652b803348ccd165", "patch": "@@ -133,5 +133,5 @@ fn stmt_let_underscore(cx: &mut ExtCtxt<'_>, sp: Span, expr: P<ast::Expr>) -> as\n         span: sp,\n         attrs: ast::AttrVec::new(),\n     });\n-    ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span: sp }\n+    ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span: sp, tokens: None }\n }"}, {"sha": "926e3dbfc52660009b4f8203268d265284156ca8", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=156ef2bee8f3941d4d7e3414652b803348ccd165", "patch": "@@ -400,6 +400,7 @@ macro_rules! make_stmts_default {\n                 id: ast::DUMMY_NODE_ID,\n                 span: e.span,\n                 kind: ast::StmtKind::Expr(e),\n+                tokens: None\n             }]\n         })\n     };\n@@ -642,6 +643,7 @@ impl MacResult for DummyResult {\n             id: ast::DUMMY_NODE_ID,\n             kind: ast::StmtKind::Expr(DummyResult::raw_expr(self.span, self.is_error)),\n             span: self.span,\n+            tokens: None\n         }])\n     }\n "}, {"sha": "a5a7ee6c9a349532e3e1b9ee45f1a7c0f50fd048", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=156ef2bee8f3941d4d7e3414652b803348ccd165", "patch": "@@ -158,7 +158,12 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     pub fn stmt_expr(&self, expr: P<ast::Expr>) -> ast::Stmt {\n-        ast::Stmt { id: ast::DUMMY_NODE_ID, span: expr.span, kind: ast::StmtKind::Expr(expr) }\n+        ast::Stmt {\n+            id: ast::DUMMY_NODE_ID,\n+            span: expr.span,\n+            kind: ast::StmtKind::Expr(expr),\n+            tokens: None,\n+        }\n     }\n \n     pub fn stmt_let(&self, sp: Span, mutbl: bool, ident: Ident, ex: P<ast::Expr>) -> ast::Stmt {\n@@ -176,7 +181,12 @@ impl<'a> ExtCtxt<'a> {\n             span: sp,\n             attrs: AttrVec::new(),\n         });\n-        ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span: sp }\n+        ast::Stmt {\n+            id: ast::DUMMY_NODE_ID,\n+            kind: ast::StmtKind::Local(local),\n+            span: sp,\n+            tokens: None,\n+        }\n     }\n \n     // Generates `let _: Type;`, which is usually used for type assertions.\n@@ -189,11 +199,16 @@ impl<'a> ExtCtxt<'a> {\n             span,\n             attrs: AttrVec::new(),\n         });\n-        ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span }\n+        ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span, tokens: None }\n     }\n \n     pub fn stmt_item(&self, sp: Span, item: P<ast::Item>) -> ast::Stmt {\n-        ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Item(item), span: sp }\n+        ast::Stmt {\n+            id: ast::DUMMY_NODE_ID,\n+            kind: ast::StmtKind::Item(item),\n+            span: sp,\n+            tokens: None,\n+        }\n     }\n \n     pub fn block_expr(&self, expr: P<ast::Expr>) -> P<ast::Block> {\n@@ -203,6 +218,7 @@ impl<'a> ExtCtxt<'a> {\n                 id: ast::DUMMY_NODE_ID,\n                 span: expr.span,\n                 kind: ast::StmtKind::Expr(expr),\n+                tokens: None,\n             }],\n         )\n     }"}, {"sha": "e5cfb866938e56a397a67e368cf1277e4831dd54", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=156ef2bee8f3941d4d7e3414652b803348ccd165", "patch": "@@ -1396,10 +1396,10 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         // The placeholder expander gives ids to statements, so we avoid folding the id here.\n-        let ast::Stmt { id, kind, span } = stmt;\n+        let ast::Stmt { id, kind, span, tokens } = stmt;\n         noop_flat_map_stmt_kind(kind, self)\n             .into_iter()\n-            .map(|kind| ast::Stmt { id, kind, span })\n+            .map(|kind| ast::Stmt { id, kind, span, tokens: tokens.clone() })\n             .collect()\n     }\n "}, {"sha": "4c9271a58df58b469691d61f7c18de909c6230c3", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=156ef2bee8f3941d4d7e3414652b803348ccd165", "patch": "@@ -105,7 +105,7 @@ pub fn placeholder(\n                 style: ast::MacStmtStyle::Braces,\n                 attrs: ast::AttrVec::new(),\n             });\n-            ast::Stmt { id, span, kind: ast::StmtKind::MacCall(mac) }\n+            ast::Stmt { id, span, kind: ast::StmtKind::MacCall(mac), tokens: None }\n         }]),\n         AstFragmentKind::Arms => AstFragment::Arms(smallvec![ast::Arm {\n             attrs: Default::default(),"}, {"sha": "f15eb413833ae0389cdab6a37291df953128d3ce", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=156ef2bee8f3941d4d7e3414652b803348ccd165", "patch": "@@ -710,6 +710,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n                 id: resolver.next_node_id(),\n                 kind: ast::StmtKind::Expr(expr),\n                 span: rustc_span::DUMMY_SP,\n+                tokens: None,\n             }\n         }\n \n@@ -726,6 +727,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n             id: self.resolver.next_node_id(),\n             span: rustc_span::DUMMY_SP,\n             kind: ast::StmtKind::Expr(loop_expr),\n+            tokens: None,\n         };\n \n         if self.within_static_or_const {"}, {"sha": "dedb9850b5a19f75a160250f5ea4615585511abe", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=156ef2bee8f3941d4d7e3414652b803348ccd165", "patch": "@@ -269,6 +269,13 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n             prepend_attrs(sess, &item.attrs, item.tokens.as_ref(), span)\n         }\n         Nonterminal::NtBlock(ref block) => block.tokens.clone(),\n+        Nonterminal::NtStmt(ref stmt) => {\n+            // FIXME: We currently only collect tokens for `:stmt`\n+            // matchers in `macro_rules!` macros. When we start collecting\n+            // tokens for attributes on statements, we will need to prepend\n+            // attributes here\n+            stmt.tokens.clone()\n+        }\n         Nonterminal::NtPat(ref pat) => pat.tokens.clone(),\n         Nonterminal::NtTy(ref ty) => ty.tokens.clone(),\n         Nonterminal::NtIdent(ident, is_raw) => {"}, {"sha": "15660fd574c13a53daa7413282e0d90a6122ff3f", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=156ef2bee8f3941d4d7e3414652b803348ccd165", "patch": "@@ -119,10 +119,20 @@ impl<'a> Parser<'a> {\n                 }\n                 token::NtBlock(block)\n             }\n-            NonterminalKind::Stmt => match self.parse_stmt()? {\n-                Some(s) => token::NtStmt(s),\n-                None => return Err(self.struct_span_err(self.token.span, \"expected a statement\")),\n-            },\n+            NonterminalKind::Stmt => {\n+                let (stmt, tokens) = self.collect_tokens(|this| this.parse_stmt())?;\n+                match stmt {\n+                    Some(mut s) => {\n+                        if s.tokens.is_none() {\n+                            s.tokens = Some(tokens);\n+                        }\n+                        token::NtStmt(s)\n+                    }\n+                    None => {\n+                        return Err(self.struct_span_err(self.token.span, \"expected a statement\"));\n+                    }\n+                }\n+            }\n             NonterminalKind::Pat => {\n                 let (mut pat, tokens) = self.collect_tokens(|this| this.parse_pat(None))?;\n                 // We have have eaten an NtPat, which could already have tokens"}, {"sha": "64b959e83251d2c29c316c364546fffdfb1a2cd3", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156ef2bee8f3941d4d7e3414652b803348ccd165/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=156ef2bee8f3941d4d7e3414652b803348ccd165", "patch": "@@ -415,7 +415,7 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn mk_stmt(&self, span: Span, kind: StmtKind) -> Stmt {\n-        Stmt { id: DUMMY_NODE_ID, kind, span }\n+        Stmt { id: DUMMY_NODE_ID, kind, span, tokens: None }\n     }\n \n     fn mk_stmt_err(&self, span: Span) -> Stmt {"}]}