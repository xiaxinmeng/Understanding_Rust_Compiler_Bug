{"sha": "d13ffbe3feeb4dfef16c85ff39155137b7be1278", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxM2ZmYmUzZmVlYjRkZmVmMTZjODVmZjM5MTU1MTM3YjdiZTEyNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-27T06:02:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-27T06:02:05Z"}, "message": "Auto merge of #5522 - CrazyRoka:match_vec_item, r=phansch\n\nNew  lint `match_vec_item`\n\nAdded new lint to warn a match on index item which can panic. It's always better to use `get(..)` instead.\nCloses #5500\nchangelog: New lint `match_on_vec_items`", "tree": {"sha": "5316da9945e96a79cf68b6ca1fa0975b43ccb63f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5316da9945e96a79cf68b6ca1fa0975b43ccb63f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d13ffbe3feeb4dfef16c85ff39155137b7be1278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d13ffbe3feeb4dfef16c85ff39155137b7be1278", "html_url": "https://github.com/rust-lang/rust/commit/d13ffbe3feeb4dfef16c85ff39155137b7be1278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d13ffbe3feeb4dfef16c85ff39155137b7be1278/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d8a3e8724f587c6b2a888087a3643ead5534fde", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8a3e8724f587c6b2a888087a3643ead5534fde", "html_url": "https://github.com/rust-lang/rust/commit/5d8a3e8724f587c6b2a888087a3643ead5534fde"}, {"sha": "b574941dcbf34b529b5c1eb1fa75ca6b1496b666", "url": "https://api.github.com/repos/rust-lang/rust/commits/b574941dcbf34b529b5c1eb1fa75ca6b1496b666", "html_url": "https://github.com/rust-lang/rust/commit/b574941dcbf34b529b5c1eb1fa75ca6b1496b666"}], "stats": {"total": 290, "additions": 287, "deletions": 3}, "files": [{"sha": "575773580c0be25ee59792a3e2d2e9a3aa0ebc6b", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d13ffbe3feeb4dfef16c85ff39155137b7be1278/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d13ffbe3feeb4dfef16c85ff39155137b7be1278/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d13ffbe3feeb4dfef16c85ff39155137b7be1278", "patch": "@@ -1431,6 +1431,7 @@ Released 2018-09-13\n [`map_flatten`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten\n [`match_as_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_as_ref\n [`match_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_bool\n+[`match_on_vec_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_on_vec_items\n [`match_overlapping_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_overlapping_arm\n [`match_ref_pats`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_ref_pats\n [`match_same_arms`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms"}, {"sha": "81ddc8c0067c7184dd0e35af2bd5129724e2e7d2", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d13ffbe3feeb4dfef16c85ff39155137b7be1278/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13ffbe3feeb4dfef16c85ff39155137b7be1278/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=d13ffbe3feeb4dfef16c85ff39155137b7be1278", "patch": "@@ -358,9 +358,9 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             },\n             (Some(Constant::Vec(vec)), _) => {\n                 if !vec.is_empty() && vec.iter().all(|x| *x == vec[0]) {\n-                    match vec[0] {\n-                        Constant::F32(x) => Some(Constant::F32(x)),\n-                        Constant::F64(x) => Some(Constant::F64(x)),\n+                    match vec.get(0) {\n+                        Some(Constant::F32(x)) => Some(Constant::F32(*x)),\n+                        Some(Constant::F64(x)) => Some(Constant::F64(*x)),\n                         _ => None,\n                     }\n                 } else {"}, {"sha": "c995be5edc25cacc01b05afd9072f0484f6e6c9b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d13ffbe3feeb4dfef16c85ff39155137b7be1278/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13ffbe3feeb4dfef16c85ff39155137b7be1278/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d13ffbe3feeb4dfef16c85ff39155137b7be1278", "patch": "@@ -249,6 +249,7 @@ mod macro_use;\n mod main_recursion;\n mod map_clone;\n mod map_unit_fn;\n+mod match_on_vec_items;\n mod matches;\n mod mem_discriminant;\n mod mem_forget;\n@@ -630,6 +631,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &map_clone::MAP_CLONE,\n         &map_unit_fn::OPTION_MAP_UNIT_FN,\n         &map_unit_fn::RESULT_MAP_UNIT_FN,\n+        &match_on_vec_items::MATCH_ON_VEC_ITEMS,\n         &matches::INFALLIBLE_DESTRUCTURING_MATCH,\n         &matches::MATCH_AS_REF,\n         &matches::MATCH_BOOL,\n@@ -1061,6 +1063,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box future_not_send::FutureNotSend);\n     store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n     store.register_late_pass(|| box if_let_mutex::IfLetMutex);\n+    store.register_late_pass(|| box match_on_vec_items::MatchOnVecItems);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1280,6 +1283,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&map_clone::MAP_CLONE),\n         LintId::of(&map_unit_fn::OPTION_MAP_UNIT_FN),\n         LintId::of(&map_unit_fn::RESULT_MAP_UNIT_FN),\n+        LintId::of(&match_on_vec_items::MATCH_ON_VEC_ITEMS),\n         LintId::of(&matches::INFALLIBLE_DESTRUCTURING_MATCH),\n         LintId::of(&matches::MATCH_AS_REF),\n         LintId::of(&matches::MATCH_OVERLAPPING_ARM),\n@@ -1643,6 +1647,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::NEVER_LOOP),\n         LintId::of(&loops::REVERSE_RANGE_LOOP),\n         LintId::of(&loops::WHILE_IMMUTABLE_CONDITION),\n+        LintId::of(&match_on_vec_items::MATCH_ON_VEC_ITEMS),\n         LintId::of(&mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_UNINIT),\n         LintId::of(&methods::CLONE_DOUBLE_REF),"}, {"sha": "4071406cc84c3366cd29e94d6e0012038ebe0cf1", "filename": "clippy_lints/src/match_on_vec_items.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/d13ffbe3feeb4dfef16c85ff39155137b7be1278/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13ffbe3feeb4dfef16c85ff39155137b7be1278/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs?ref=d13ffbe3feeb4dfef16c85ff39155137b7be1278", "patch": "@@ -0,0 +1,89 @@\n+use crate::utils::{is_type_diagnostic_item, snippet, span_lint_and_sugg, walk_ptrs_ty};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, MatchSource};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `match vec[idx]` or `match vec[n..m]`.\n+    ///\n+    /// **Why is this bad?** This can panic at runtime.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust, no_run\n+    /// let arr = vec![0, 1, 2, 3];\n+    /// let idx = 1;\n+    ///\n+    /// // Bad\n+    /// match arr[idx] {\n+    ///     0 => println!(\"{}\", 0),\n+    ///     1 => println!(\"{}\", 3),\n+    ///     _ => {},\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust, no_run\n+    /// let arr = vec![0, 1, 2, 3];\n+    /// let idx = 1;\n+    ///\n+    /// // Good\n+    /// match arr.get(idx) {\n+    ///     Some(0) => println!(\"{}\", 0),\n+    ///     Some(1) => println!(\"{}\", 3),\n+    ///     _ => {},\n+    /// }\n+    /// ```\n+    pub MATCH_ON_VEC_ITEMS,\n+    correctness,\n+    \"matching on vector elements can panic\"\n+}\n+\n+declare_lint_pass!(MatchOnVecItems => [MATCH_ON_VEC_ITEMS]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MatchOnVecItems {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if_chain! {\n+            if !in_external_macro(cx.sess(), expr.span);\n+            if let ExprKind::Match(ref match_expr, _, MatchSource::Normal) = expr.kind;\n+            if let Some(idx_expr) = is_vec_indexing(cx, match_expr);\n+            if let ExprKind::Index(vec, idx) = idx_expr.kind;\n+\n+            then {\n+                // FIXME: could be improved to suggest surrounding every pattern with Some(_),\n+                // but only when `or_patterns` are stabilized.\n+                span_lint_and_sugg(\n+                    cx,\n+                    MATCH_ON_VEC_ITEMS,\n+                    match_expr.span,\n+                    \"indexing into a vector may panic\",\n+                    \"try this\",\n+                    format!(\n+                        \"{}.get({})\",\n+                        snippet(cx, vec.span, \"..\"),\n+                        snippet(cx, idx.span, \"..\")\n+                    ),\n+                    Applicability::MaybeIncorrect\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn is_vec_indexing<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n+    if_chain! {\n+        if let ExprKind::Index(ref array, _) = expr.kind;\n+        let ty = cx.tables.expr_ty(array);\n+        let ty = walk_ptrs_ty(ty);\n+        if is_type_diagnostic_item(cx, ty, sym!(vec_type));\n+\n+        then {\n+            return Some(expr);\n+        }\n+    }\n+\n+    None\n+}"}, {"sha": "72675c25175c98fdb421d25a79ed457ce795344e", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d13ffbe3feeb4dfef16c85ff39155137b7be1278/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13ffbe3feeb4dfef16c85ff39155137b7be1278/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=d13ffbe3feeb4dfef16c85ff39155137b7be1278", "patch": "@@ -1144,6 +1144,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"matches\",\n     },\n+    Lint {\n+        name: \"match_on_vec_items\",\n+        group: \"correctness\",\n+        desc: \"matching on vector elements can panic\",\n+        deprecation: None,\n+        module: \"match_on_vec_items\",\n+    },\n     Lint {\n         name: \"match_overlapping_arm\",\n         group: \"style\","}, {"sha": "0bb39d77e461ea9edd610d0f82535537ba1a7654", "filename": "tests/ui/match_on_vec_items.rs", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/d13ffbe3feeb4dfef16c85ff39155137b7be1278/tests%2Fui%2Fmatch_on_vec_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13ffbe3feeb4dfef16c85ff39155137b7be1278/tests%2Fui%2Fmatch_on_vec_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_on_vec_items.rs?ref=d13ffbe3feeb4dfef16c85ff39155137b7be1278", "patch": "@@ -0,0 +1,130 @@\n+#![warn(clippy::match_on_vec_items)]\n+\n+fn match_with_wildcard() {\n+    let arr = vec![0, 1, 2, 3];\n+    let range = 1..3;\n+    let idx = 1;\n+\n+    // Lint, may panic\n+    match arr[idx] {\n+        0 => println!(\"0\"),\n+        1 => println!(\"1\"),\n+        _ => {},\n+    }\n+\n+    // Lint, may panic\n+    match arr[range] {\n+        [0, 1] => println!(\"0 1\"),\n+        [1, 2] => println!(\"1 2\"),\n+        _ => {},\n+    }\n+}\n+\n+fn match_without_wildcard() {\n+    let arr = vec![0, 1, 2, 3];\n+    let range = 1..3;\n+    let idx = 2;\n+\n+    // Lint, may panic\n+    match arr[idx] {\n+        0 => println!(\"0\"),\n+        1 => println!(\"1\"),\n+        num => {},\n+    }\n+\n+    // Lint, may panic\n+    match arr[range] {\n+        [0, 1] => println!(\"0 1\"),\n+        [1, 2] => println!(\"1 2\"),\n+        [ref sub @ ..] => {},\n+    }\n+}\n+\n+fn match_wildcard_and_action() {\n+    let arr = vec![0, 1, 2, 3];\n+    let range = 1..3;\n+    let idx = 3;\n+\n+    // Lint, may panic\n+    match arr[idx] {\n+        0 => println!(\"0\"),\n+        1 => println!(\"1\"),\n+        _ => println!(\"Hello, World!\"),\n+    }\n+\n+    // Lint, may panic\n+    match arr[range] {\n+        [0, 1] => println!(\"0 1\"),\n+        [1, 2] => println!(\"1 2\"),\n+        _ => println!(\"Hello, World!\"),\n+    }\n+}\n+\n+fn match_vec_ref() {\n+    let arr = &vec![0, 1, 2, 3];\n+    let range = 1..3;\n+    let idx = 3;\n+\n+    // Lint, may panic\n+    match arr[idx] {\n+        0 => println!(\"0\"),\n+        1 => println!(\"1\"),\n+        _ => {},\n+    }\n+\n+    // Lint, may panic\n+    match arr[range] {\n+        [0, 1] => println!(\"0 1\"),\n+        [1, 2] => println!(\"1 2\"),\n+        _ => {},\n+    }\n+}\n+\n+fn match_with_get() {\n+    let arr = vec![0, 1, 2, 3];\n+    let range = 1..3;\n+    let idx = 3;\n+\n+    // Ok\n+    match arr.get(idx) {\n+        Some(0) => println!(\"0\"),\n+        Some(1) => println!(\"1\"),\n+        _ => {},\n+    }\n+\n+    // Ok\n+    match arr.get(range) {\n+        Some(&[0, 1]) => println!(\"0 1\"),\n+        Some(&[1, 2]) => println!(\"1 2\"),\n+        _ => {},\n+    }\n+}\n+\n+fn match_with_array() {\n+    let arr = [0, 1, 2, 3];\n+    let range = 1..3;\n+    let idx = 3;\n+\n+    // Ok\n+    match arr[idx] {\n+        0 => println!(\"0\"),\n+        1 => println!(\"1\"),\n+        _ => {},\n+    }\n+\n+    // Ok\n+    match arr[range] {\n+        [0, 1] => println!(\"0 1\"),\n+        [1, 2] => println!(\"1 2\"),\n+        _ => {},\n+    }\n+}\n+\n+fn main() {\n+    match_with_wildcard();\n+    match_without_wildcard();\n+    match_wildcard_and_action();\n+    match_vec_ref();\n+    match_with_get();\n+    match_with_array();\n+}"}, {"sha": "49446d715abe26682174f6f707475954cba14e1e", "filename": "tests/ui/match_on_vec_items.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d13ffbe3feeb4dfef16c85ff39155137b7be1278/tests%2Fui%2Fmatch_on_vec_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d13ffbe3feeb4dfef16c85ff39155137b7be1278/tests%2Fui%2Fmatch_on_vec_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_on_vec_items.stderr?ref=d13ffbe3feeb4dfef16c85ff39155137b7be1278", "patch": "@@ -0,0 +1,52 @@\n+error: indexing into a vector may panic\n+  --> $DIR/match_on_vec_items.rs:9:11\n+   |\n+LL |     match arr[idx] {\n+   |           ^^^^^^^^ help: try this: `arr.get(idx)`\n+   |\n+   = note: `-D clippy::match-on-vec-items` implied by `-D warnings`\n+\n+error: indexing into a vector may panic\n+  --> $DIR/match_on_vec_items.rs:16:11\n+   |\n+LL |     match arr[range] {\n+   |           ^^^^^^^^^^ help: try this: `arr.get(range)`\n+\n+error: indexing into a vector may panic\n+  --> $DIR/match_on_vec_items.rs:29:11\n+   |\n+LL |     match arr[idx] {\n+   |           ^^^^^^^^ help: try this: `arr.get(idx)`\n+\n+error: indexing into a vector may panic\n+  --> $DIR/match_on_vec_items.rs:36:11\n+   |\n+LL |     match arr[range] {\n+   |           ^^^^^^^^^^ help: try this: `arr.get(range)`\n+\n+error: indexing into a vector may panic\n+  --> $DIR/match_on_vec_items.rs:49:11\n+   |\n+LL |     match arr[idx] {\n+   |           ^^^^^^^^ help: try this: `arr.get(idx)`\n+\n+error: indexing into a vector may panic\n+  --> $DIR/match_on_vec_items.rs:56:11\n+   |\n+LL |     match arr[range] {\n+   |           ^^^^^^^^^^ help: try this: `arr.get(range)`\n+\n+error: indexing into a vector may panic\n+  --> $DIR/match_on_vec_items.rs:69:11\n+   |\n+LL |     match arr[idx] {\n+   |           ^^^^^^^^ help: try this: `arr.get(idx)`\n+\n+error: indexing into a vector may panic\n+  --> $DIR/match_on_vec_items.rs:76:11\n+   |\n+LL |     match arr[range] {\n+   |           ^^^^^^^^^^ help: try this: `arr.get(range)`\n+\n+error: aborting due to 8 previous errors\n+"}]}