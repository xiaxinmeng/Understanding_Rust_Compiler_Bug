{"sha": "9b3292541c74b8de48a0dc11b3ce56800d812f86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMzI5MjU0MWM3NGI4ZGU0OGEwZGMxMWIzY2U1NjgwMGQ4MTJmODY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-04T13:54:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-04T14:03:28Z"}, "message": "internal: improve feedback for relevance tests", "tree": {"sha": "5cf409ee63e67d9fe4bf5c5a950a9d21099e3d35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cf409ee63e67d9fe4bf5c5a950a9d21099e3d35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b3292541c74b8de48a0dc11b3ce56800d812f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3292541c74b8de48a0dc11b3ce56800d812f86", "html_url": "https://github.com/rust-lang/rust/commit/9b3292541c74b8de48a0dc11b3ce56800d812f86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b3292541c74b8de48a0dc11b3ce56800d812f86/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbb9d69758b71b6eb1f9e039c968d9ad9f11370b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb9d69758b71b6eb1f9e039c968d9ad9f11370b", "html_url": "https://github.com/rust-lang/rust/commit/fbb9d69758b71b6eb1f9e039c968d9ad9f11370b"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "f1ce3aa7130978ccdbadcab455cdbeabf2d44249", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9b3292541c74b8de48a0dc11b3ce56800d812f86/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3292541c74b8de48a0dc11b3ce56800d812f86/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=9b3292541c74b8de48a0dc11b3ce56800d812f86", "patch": "@@ -330,6 +330,8 @@ fn compute_ref_match(\n \n #[cfg(test)]\n mod tests {\n+    use std::cmp;\n+\n     use expect_test::{expect, Expect};\n     use itertools::Itertools;\n \n@@ -352,9 +354,12 @@ mod tests {\n \n     #[track_caller]\n     fn check_relevance_for_kinds(kinds: &[CompletionKind], ra_fixture: &str, expect: Expect) {\n-        let actual = get_all_items(TEST_CONFIG, ra_fixture)\n+        let mut actual = get_all_items(TEST_CONFIG, ra_fixture);\n+        actual.retain(|it| kinds.contains(&it.completion_kind));\n+        actual.sort_by_key(|it| cmp::Reverse(it.relevance().score()));\n+\n+        let actual = actual\n             .into_iter()\n-            .filter(|it| kinds.contains(&it.completion_kind))\n             .flat_map(|it| {\n                 let mut items = vec![];\n \n@@ -921,9 +926,9 @@ fn test(bar: u32) { }\n fn foo(s: S) { test(s.$0) }\n \"#,\n             expect![[r#\"\n-                fd foo []\n                 fd bar [type+name]\n                 fd baz [type]\n+                fd foo []\n             \"#]],\n         );\n     }\n@@ -937,9 +942,9 @@ struct B { x: (), y: f32, bar: u32 }\n fn foo(a: A) { B { bar: a.$0 }; }\n \"#,\n             expect![[r#\"\n-                fd foo []\n                 fd bar [type+name]\n                 fd baz [type]\n+                fd foo []\n             \"#]],\n         )\n     }\n@@ -967,9 +972,9 @@ fn f(foo: i64) {  }\n fn foo(a: A) { f(B { bar: a.$0 }); }\n \"#,\n             expect![[r#\"\n-                fd foo []\n                 fd bar [type+name]\n                 fd baz [type]\n+                fd foo []\n             \"#]],\n         );\n     }\n@@ -1015,9 +1020,9 @@ fn bar() -> u8 { 0 }\n fn f() { A { bar: b$0 }; }\n \"#,\n             expect![[r#\"\n+                fn bar() [type+name]\n                 fn baz() [type]\n                 st A []\n-                fn bar() [type+name]\n                 fn f() []\n             \"#]],\n         );\n@@ -1340,9 +1345,9 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n+                lc foo [type+local]\n                 ev Foo::A(\u2026) [type_could_unify]\n                 ev Foo::B [type_could_unify]\n-                lc foo [type+local]\n                 en Foo []\n                 fn baz() []\n                 fn bar() []\n@@ -1373,9 +1378,10 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n+                sn not [snippet]\n+                me not() (ops::Not) [type_could_unify]\n                 sn if []\n                 sn while []\n-                sn not [snippet]\n                 sn ref []\n                 sn refm []\n                 sn match []\n@@ -1386,7 +1392,6 @@ fn main() {\n                 sn dbg []\n                 sn dbgr []\n                 sn call []\n-                me not() (ops::Not) [type_could_unify]\n             \"#]],\n         );\n     }"}]}