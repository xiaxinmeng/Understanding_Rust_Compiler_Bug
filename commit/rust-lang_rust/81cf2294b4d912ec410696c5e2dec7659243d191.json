{"sha": "81cf2294b4d912ec410696c5e2dec7659243d191", "node_id": "C_kwDOAAsO6NoAKDgxY2YyMjk0YjRkOTEyZWM0MTA2OTZjNWUyZGVjNzY1OTI0M2QxOTE", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-07-11T17:46:24Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-07-15T15:13:49Z"}, "message": "macros: support adding warnings to diags\n\nBoth diagnostic and subdiagnostic derives were missing the ability to\nadd warnings to diagnostics - this is made more difficult by the `warn`\nattribute already existing, so this name being unavailable for the\nderives to use. `#[warn_]` is used instead, which requires\nspecial-casing so that `{span_,}warn` is called instead of\n`{span_,}warn_`.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "6859d706f4be0d1bd9963d02681f12900a747b37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6859d706f4be0d1bd9963d02681f12900a747b37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81cf2294b4d912ec410696c5e2dec7659243d191", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81cf2294b4d912ec410696c5e2dec7659243d191", "html_url": "https://github.com/rust-lang/rust/commit/81cf2294b4d912ec410696c5e2dec7659243d191", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81cf2294b4d912ec410696c5e2dec7659243d191/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88c11c5bfffea445c6cc49b62da17f172eb8f055", "url": "https://api.github.com/repos/rust-lang/rust/commits/88c11c5bfffea445c6cc49b62da17f172eb8f055", "html_url": "https://github.com/rust-lang/rust/commit/88c11c5bfffea445c6cc49b62da17f172eb8f055"}], "stats": {"total": 95, "additions": 70, "deletions": 25}, "files": [{"sha": "6b5b8b5932018abfb6e5d54b55dc38853885b0a5", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81cf2294b4d912ec410696c5e2dec7659243d191/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81cf2294b4d912ec410696c5e2dec7659243d191/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=81cf2294b4d912ec410696c5e2dec7659243d191", "patch": "@@ -59,7 +59,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                         return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n                     }\n                     (Some(DiagnosticDeriveKind::Lint), _) => {\n-                        span_err(span, \"only `#[error(..)]` and `#[warn(..)]` are supported\")\n+                        span_err(span, \"only `#[error(..)]` and `#[warning(..)]` are supported\")\n                             .help(\"use the `#[error(...)]` attribute to create a error\")\n                             .emit();\n                         return DiagnosticDeriveError::ErrorHandled.to_compile_error();"}, {"sha": "5c5275b7cfb928256231d848423b019a2cdb2829", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/81cf2294b4d912ec410696c5e2dec7659243d191/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81cf2294b4d912ec410696c5e2dec7659243d191/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=81cf2294b4d912ec410696c5e2dec7659243d191", "patch": "@@ -8,7 +8,7 @@ use crate::diagnostics::utils::{\n     report_error_if_not_applied_to_span, report_type_error, type_is_unit, type_matches_path,\n     Applicability, FieldInfo, FieldInnerTy, HasFieldMap, SetOnce,\n };\n-use proc_macro2::{Ident, TokenStream};\n+use proc_macro2::{Ident, Span, TokenStream};\n use quote::{format_ident, quote};\n use std::collections::HashMap;\n use std::str::FromStr;\n@@ -156,16 +156,20 @@ impl DiagnosticDeriveBuilder {\n         let name = name.as_str();\n         let meta = attr.parse_meta()?;\n \n-        let is_help_or_note = matches!(name, \"help\" | \"note\");\n+        let is_help_note_or_warn = matches!(name, \"help\" | \"note\" | \"warn_\");\n \n         let nested = match meta {\n             // Most attributes are lists, like `#[error(..)]`/`#[warning(..)]` for most cases or\n             // `#[help(..)]`/`#[note(..)]` when the user is specifying a alternative slug.\n             Meta::List(MetaList { ref nested, .. }) => nested,\n             // Subdiagnostics without spans can be applied to the type too, and these are just\n             // paths: `#[help]` and `#[note]`\n-            Meta::Path(_) if is_help_or_note => {\n-                let fn_name = proc_macro2::Ident::new(name, attr.span());\n+            Meta::Path(_) if is_help_note_or_warn => {\n+                let fn_name = if name == \"warn_\" {\n+                    Ident::new(\"warn\", attr.span())\n+                } else {\n+                    Ident::new(name, attr.span())\n+                };\n                 return Ok(quote! { #diag.#fn_name(rustc_errors::fluent::_subdiag::#fn_name); });\n             }\n             _ => throw_invalid_attr!(attr, &meta),\n@@ -177,9 +181,11 @@ impl DiagnosticDeriveBuilder {\n             \"error\" => self.kind.set_once((DiagnosticDeriveKind::Error, span)),\n             \"warning\" => self.kind.set_once((DiagnosticDeriveKind::Warn, span)),\n             \"lint\" => self.kind.set_once((DiagnosticDeriveKind::Lint, span)),\n-            \"help\" | \"note\" => (),\n+            \"help\" | \"note\" | \"warn_\" => (),\n             _ => throw_invalid_attr!(attr, &meta, |diag| {\n-                diag.help(\"only `error`, `warning`, `help` and `note` are valid attributes\")\n+                diag.help(\n+                    \"only `error`, `warning`, `help`, `note` and `warn_` are valid attributes\",\n+                )\n             }),\n         }\n \n@@ -188,22 +194,24 @@ impl DiagnosticDeriveBuilder {\n         let mut nested_iter = nested.into_iter();\n         if let Some(nested_attr) = nested_iter.next() {\n             // Report an error if there are any other list items after the path.\n-            if is_help_or_note && nested_iter.next().is_some() {\n+            if is_help_note_or_warn && nested_iter.next().is_some() {\n                 throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                    diag.help(\"`help` and `note` struct attributes can only have one argument\")\n+                    diag.help(\n+                        \"`help`, `note` and `warn_` struct attributes can only have one argument\",\n+                    )\n                 });\n             }\n \n             match nested_attr {\n-                NestedMeta::Meta(Meta::Path(path)) if is_help_or_note => {\n+                NestedMeta::Meta(Meta::Path(path)) if is_help_note_or_warn => {\n                     let fn_name = proc_macro2::Ident::new(name, attr.span());\n                     return Ok(quote! { #diag.#fn_name(rustc_errors::fluent::#path); });\n                 }\n                 NestedMeta::Meta(Meta::Path(path)) => {\n                     self.slug.set_once((path.clone(), span));\n                 }\n                 NestedMeta::Meta(meta @ Meta::NameValue(_))\n-                    if !is_help_or_note\n+                    if !is_help_note_or_warn\n                         && meta.path().segments.last().unwrap().ident.to_string() == \"code\" =>\n                 {\n                     // don't error for valid follow-up attributes\n@@ -347,10 +355,12 @@ impl DiagnosticDeriveBuilder {\n                 report_error_if_not_applied_to_span(attr, &info)?;\n                 Ok(self.add_spanned_subdiagnostic(binding, ident, parse_quote! { _subdiag::label }))\n             }\n-            \"note\" | \"help\" => {\n-                let path = match name {\n-                    \"note\" => parse_quote! { _subdiag::note },\n-                    \"help\" => parse_quote! { _subdiag::help },\n+            \"note\" | \"help\" | \"warn_\" => {\n+                let warn_ident = Ident::new(\"warn\", Span::call_site());\n+                let (ident, path) = match name {\n+                    \"note\" => (ident, parse_quote! { _subdiag::note }),\n+                    \"help\" => (ident, parse_quote! { _subdiag::help }),\n+                    \"warn_\" => (&warn_ident, parse_quote! { _subdiag::warn }),\n                     _ => unreachable!(),\n                 };\n                 if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n@@ -387,10 +397,10 @@ impl DiagnosticDeriveBuilder {\n             \"suggestion\" | \"suggestion_short\" | \"suggestion_hidden\" | \"suggestion_verbose\" => {\n                 return self.generate_inner_field_code_suggestion(attr, info);\n             }\n-            \"label\" | \"help\" | \"note\" => (),\n+            \"label\" | \"help\" | \"note\" | \"warn_\" => (),\n             _ => throw_invalid_attr!(attr, &meta, |diag| {\n                 diag.help(\n-                    \"only `label`, `note`, `help` or `suggestion{,_short,_hidden,_verbose}` are \\\n+                    \"only `label`, `help`, `note`, `warn` or `suggestion{,_short,_hidden,_verbose}` are \\\n                      valid field attributes\",\n                 )\n             }),\n@@ -419,7 +429,14 @@ impl DiagnosticDeriveBuilder {\n                 Ok(self.add_spanned_subdiagnostic(binding, ident, msg))\n             }\n             \"note\" | \"help\" if type_is_unit(&info.ty) => Ok(self.add_subdiagnostic(ident, msg)),\n-            \"note\" | \"help\" => report_type_error(attr, \"`Span` or `()`\")?,\n+            // `warn_` must be special-cased because the attribute `warn` already has meaning and\n+            // so isn't used, despite the diagnostic API being named `warn`.\n+            \"warn_\" if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) => Ok(self\n+                .add_spanned_subdiagnostic(binding, &Ident::new(\"warn\", Span::call_site()), msg)),\n+            \"warn_\" if type_is_unit(&info.ty) => {\n+                Ok(self.add_subdiagnostic(&Ident::new(\"warn\", Span::call_site()), msg))\n+            }\n+            \"note\" | \"help\" | \"warn_\" => report_type_error(attr, \"`Span` or `()`\")?,\n             _ => unreachable!(),\n         }\n     }"}, {"sha": "1170d2b3c59a47749a10de6d4e15aedfdc6be18c", "filename": "compiler/rustc_macros/src/diagnostics/fluent.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81cf2294b4d912ec410696c5e2dec7659243d191/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81cf2294b4d912ec410696c5e2dec7659243d191/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs?ref=81cf2294b4d912ec410696c5e2dec7659243d191", "patch": "@@ -260,10 +260,12 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n             #generated\n \n             pub mod _subdiag {\n-                pub const note: crate::SubdiagnosticMessage =\n-                    crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"note\"));\n                 pub const help: crate::SubdiagnosticMessage =\n                     crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"help\"));\n+                pub const note: crate::SubdiagnosticMessage =\n+                    crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"note\"));\n+                pub const warn: crate::SubdiagnosticMessage =\n+                    crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"warn\"));\n                 pub const label: crate::SubdiagnosticMessage =\n                     crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"label\"));\n                 pub const suggestion: crate::SubdiagnosticMessage ="}, {"sha": "edf4dbed9853eeb8e2dbc8266ba3e92dc3012588", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81cf2294b4d912ec410696c5e2dec7659243d191/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81cf2294b4d912ec410696c5e2dec7659243d191/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=81cf2294b4d912ec410696c5e2dec7659243d191", "patch": "@@ -37,6 +37,8 @@ enum SubdiagnosticKind {\n     Note,\n     /// `#[help(...)]`\n     Help,\n+    /// `#[warn_(...)]`\n+    Warn,\n     /// `#[suggestion{,_short,_hidden,_verbose}]`\n     Suggestion(SubdiagnosticSuggestionKind),\n }\n@@ -49,6 +51,7 @@ impl FromStr for SubdiagnosticKind {\n             \"label\" => Ok(SubdiagnosticKind::Label),\n             \"note\" => Ok(SubdiagnosticKind::Note),\n             \"help\" => Ok(SubdiagnosticKind::Help),\n+            \"warn_\" => Ok(SubdiagnosticKind::Warn),\n             \"suggestion\" => Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Normal)),\n             \"suggestion_short\" => {\n                 Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Short))\n@@ -70,6 +73,7 @@ impl quote::IdentFragment for SubdiagnosticKind {\n             SubdiagnosticKind::Label => write!(f, \"label\"),\n             SubdiagnosticKind::Note => write!(f, \"note\"),\n             SubdiagnosticKind::Help => write!(f, \"help\"),\n+            SubdiagnosticKind::Warn => write!(f, \"warn\"),\n             SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Normal) => {\n                 write!(f, \"suggestion\")\n             }"}, {"sha": "ab509b26f1c55eeb4a1b6a5469f6cff33a1e5c0b", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81cf2294b4d912ec410696c5e2dec7659243d191/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81cf2294b4d912ec410696c5e2dec7659243d191/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=81cf2294b4d912ec410696c5e2dec7659243d191", "patch": "@@ -130,8 +130,9 @@ decl_derive!(\n         warning,\n         error,\n         lint,\n-        note,\n         help,\n+        note,\n+        warn_,\n         // field attributes\n         skip_arg,\n         primary_span,\n@@ -148,8 +149,9 @@ decl_derive!(\n         warning,\n         error,\n         lint,\n-        note,\n         help,\n+        note,\n+        warn_,\n         // field attributes\n         skip_arg,\n         primary_span,\n@@ -166,6 +168,7 @@ decl_derive!(\n         label,\n         help,\n         note,\n+        warn_,\n         suggestion,\n         suggestion_short,\n         suggestion_hidden,"}, {"sha": "0a210cbdc94307677afd1428e626190bb68503eb", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81cf2294b4d912ec410696c5e2dec7659243d191/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81cf2294b4d912ec410696c5e2dec7659243d191/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=81cf2294b4d912ec410696c5e2dec7659243d191", "patch": "@@ -538,7 +538,7 @@ struct LabelWithTrailingList {\n \n #[derive(SessionDiagnostic)]\n #[lint(typeck::ambiguous_lifetime_bound)]\n-//~^ ERROR only `#[error(..)]` and `#[warn(..)]` are supported\n+//~^ ERROR only `#[error(..)]` and `#[warning(..)]` are supported\n struct LintsBad {\n }\n \n@@ -559,3 +559,10 @@ struct ErrorWithMultiSpan {\n     #[primary_span]\n     span: MultiSpan,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[warn_]\n+struct ErrorWithWarn {\n+    val: String,\n+}"}, {"sha": "c1080aa24521f7735bac376335686928b7c5dc76", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81cf2294b4d912ec410696c5e2dec7659243d191/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81cf2294b4d912ec410696c5e2dec7659243d191/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=81cf2294b4d912ec410696c5e2dec7659243d191", "patch": "@@ -21,7 +21,7 @@ error: `#[nonsense(...)]` is not a valid attribute\n LL | #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: only `error`, `warning`, `help` and `note` are valid attributes\n+   = help: only `error`, `warning`, `help`, `note` and `warn_` are valid attributes\n \n error: diagnostic kind not specified\n   --> $DIR/diagnostic-derive.rs:53:1\n@@ -363,7 +363,7 @@ error: `#[label(...)]` is not a valid attribute\n LL |     #[label(typeck::label, foo(\"...\"))]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: only `#[error(..)]` and `#[warn(..)]` are supported\n+error: only `#[error(..)]` and `#[warning(..)]` are supported\n   --> $DIR/diagnostic-derive.rs:540:1\n    |\n LL | / #[lint(typeck::ambiguous_lifetime_bound)]"}, {"sha": "16da25c402b570eac91383ed760b915a6d9ffc2b", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81cf2294b4d912ec410696c5e2dec7659243d191/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81cf2294b4d912ec410696c5e2dec7659243d191/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=81cf2294b4d912ec410696c5e2dec7659243d191", "patch": "@@ -508,3 +508,15 @@ enum AX {\n         span: Span,\n     }\n }\n+\n+#[derive(SessionSubdiagnostic)]\n+#[warn_(parser::add_paren)]\n+struct AY {\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[warn_(parser::add_paren)]\n+struct AZ {\n+    #[primary_span]\n+    span: Span,\n+}"}]}