{"sha": "3349b40d471bea1e1b154213b19fbeb5a965943c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNDliNDBkNDcxYmVhMWUxYjE1NDIxM2IxOWZiZWI1YTk2NTk0M2M=", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2021-01-20T22:19:46Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2021-01-20T22:19:46Z"}, "message": "Remove StructType entirely and replace it with CtorKind", "tree": {"sha": "449e9a1b2e7ca744dbb3738f08a96619240ce546", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/449e9a1b2e7ca744dbb3738f08a96619240ce546"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3349b40d471bea1e1b154213b19fbeb5a965943c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETdpCnQmiF6hBYUqdfsyTL4sscx4FAmAIrIMACgkQfsyTL4ss\ncx5iGQ/+K9Sds4nSJW3q1+DzPXdRTzqD9buMHW0A+QUt/nMZZ2VhYGxTay0lmtxf\n2HkS51/Pq1ygzYQASMhRcOcnpPYA9CgB8amD9hUhVpiCg1U+yod8MZnr87adJL4C\n5NCsp+VdgSZO+Sa6ILEcp7+4ePwXw93zw2TXJE4YGCCksLVu4uVuJycTuivUgBo6\n2MzQ2zLob/qc2F1mM+IlYU7npQeLiFDRjaG7oJc54hhTQQERCEZY2A8//E6GH1dc\nZwKhpj19N7br5H75/s4p0xGIDnKVy1KV1MmQEzeugv7tyrwQZJ0FWDnweUnrqboG\nActO79qAIyRvUKZLRlW1uEzjnZ8NqDbLy5bvnwkpBv35YG2vW/6RkQc2sUsZrHPy\nfw19jVdbjJNY0rlwaKwTBIhr+N6Urm8rtA3AToRI0qg6ldTlBcaGxRjihTDsyT4c\ng/aUHkgjA9zes2dutImFk14egFbxGIuIAvhNz8s+0QG0hhnmp3PUDCgQoNmoxyFi\noitYfS+CectCibYe74vgjw4qqNeMWes7lQGunrEo3n1yaV1Eeq43/eejq3a2wFHd\nzweYIMZH8Kle8LsHZIYOuMAAJ2uFql1q32LDJeOHoGRPgBb6NmJNZBBIKECnpl6I\nDJFE0LpFHFzTLMEKSehUhs9yE5NFUYI1M+U51kC+g1Rbo+aNBvU=\n=ua9f\n-----END PGP SIGNATURE-----", "payload": "tree 449e9a1b2e7ca744dbb3738f08a96619240ce546\nparent 450c5eae1d1cdb6a8d853ca43c848e02a9010d9b\nauthor Rune Tynan <runetynan@gmail.com> 1611181186 -0500\ncommitter Rune Tynan <runetynan@gmail.com> 1611181186 -0500\n\nRemove StructType entirely and replace it with CtorKind\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3349b40d471bea1e1b154213b19fbeb5a965943c", "html_url": "https://github.com/rust-lang/rust/commit/3349b40d471bea1e1b154213b19fbeb5a965943c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3349b40d471bea1e1b154213b19fbeb5a965943c/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "450c5eae1d1cdb6a8d853ca43c848e02a9010d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b", "html_url": "https://github.com/rust-lang/rust/commit/450c5eae1d1cdb6a8d853ca43c848e02a9010d9b"}], "stats": {"total": 66, "additions": 22, "deletions": 44}, "files": [{"sha": "1f9e7f8ae5cd424be37326c3fc198a1c336b03e4", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3349b40d471bea1e1b154213b19fbeb5a965943c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3349b40d471bea1e1b154213b19fbeb5a965943c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=3349b40d471bea1e1b154213b19fbeb5a965943c", "patch": "@@ -5,7 +5,7 @@ use std::iter::once;\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n-use rustc_hir::def::{CtorKind, DefKind, Res};\n+use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::Mutability;\n use rustc_metadata::creader::LoadedMacro;\n@@ -15,7 +15,7 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n-use crate::clean::{self, Attributes, GetDefId, ToSource, TypeKind, StructType};\n+use crate::clean::{self, Attributes, GetDefId, ToSource, TypeKind};\n use crate::core::DocContext;\n \n use super::Clean;\n@@ -245,11 +245,7 @@ fn build_struct(cx: &DocContext<'_>, did: DefId) -> clean::Struct {\n     let variant = cx.tcx.adt_def(did).non_enum_variant();\n \n     clean::Struct {\n-        struct_type: match variant.ctor_kind {\n-            CtorKind::Fictive => StructType::Plain,\n-            CtorKind::Fn => StructType::Tuple,\n-            CtorKind::Const => StructType::Unit,\n-        },\n+        struct_type: variant.ctor_kind,\n         generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n         fields: variant.fields.clean(cx),\n         fields_stripped: false,"}, {"sha": "8fa60fa7178ae3d136c09b240c8bfc2b7cab7bd3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3349b40d471bea1e1b154213b19fbeb5a965943c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3349b40d471bea1e1b154213b19fbeb5a965943c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3349b40d471bea1e1b154213b19fbeb5a965943c", "patch": "@@ -1824,19 +1824,10 @@ impl Clean<Visibility> for ty::Visibility {\n     }\n }\n \n-crate fn struct_type_from_def(vdata: &hir::VariantData<'_>) -> StructType {\n-    use StructType::*;\n-    match *vdata {\n-        hir::VariantData::Struct(..) => Plain,\n-        hir::VariantData::Tuple(..) => Tuple,\n-        hir::VariantData::Unit(..) => Unit,\n-    }\n-}\n-\n impl Clean<VariantStruct> for rustc_hir::VariantData<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> VariantStruct {\n         VariantStruct {\n-            struct_type: struct_type_from_def(self),\n+            struct_type: CtorKind::from_hir(self),\n             fields: self.fields().iter().map(|x| x.clean(cx)).collect(),\n             fields_stripped: false,\n         }\n@@ -1851,7 +1842,7 @@ impl Clean<Item> for ty::VariantDef {\n                 self.fields.iter().map(|f| cx.tcx.type_of(f.did).clean(cx)).collect(),\n             ),\n             CtorKind::Fictive => Variant::Struct(VariantStruct {\n-                struct_type: StructType::Plain,\n+                struct_type: CtorKind::Fictive,\n                 fields_stripped: false,\n                 fields: self\n                     .fields\n@@ -2010,7 +2001,7 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                     fields_stripped: false,\n                 }),\n                 ItemKind::Struct(ref variant_data, ref generics) => StructItem(Struct {\n-                    struct_type: struct_type_from_def(&variant_data),\n+                    struct_type: CtorKind::from_hir(variant_data),\n                     generics: generics.clean(cx),\n                     fields: variant_data.fields().clean(cx),\n                     fields_stripped: false,"}, {"sha": "c767b9dd85bf906a9f86da896ac10efc1be062b8", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3349b40d471bea1e1b154213b19fbeb5a965943c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3349b40d471bea1e1b154213b19fbeb5a965943c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=3349b40d471bea1e1b154213b19fbeb5a965943c", "patch": "@@ -16,7 +16,7 @@ use rustc_attr::{ConstStability, Deprecation, Stability, StabilityLevel};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n-use rustc_hir::def::Res;\n+use rustc_hir::def::{CtorKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::Mutability;\n@@ -1682,19 +1682,9 @@ impl Visibility {\n     }\n }\n \n-#[derive(Debug, Clone, Copy)]\n-crate enum StructType {\n-    /// A braced struct\n-    Plain,\n-    /// A tuple struct\n-    Tuple,\n-    /// A unit struct\n-    Unit,\n-}\n-\n #[derive(Clone, Debug)]\n crate struct Struct {\n-    crate struct_type: StructType,\n+    crate struct_type: CtorKind,\n     crate generics: Generics,\n     crate fields: Vec<Item>,\n     crate fields_stripped: bool,\n@@ -1712,7 +1702,7 @@ crate struct Union {\n /// only as a variant in an enum.\n #[derive(Clone, Debug)]\n crate struct VariantStruct {\n-    crate struct_type: StructType,\n+    crate struct_type: CtorKind,\n     crate fields: Vec<Item>,\n     crate fields_stripped: bool,\n }"}, {"sha": "70ea38892d32fe069d1ba85b73e2f242bdf7821c", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3349b40d471bea1e1b154213b19fbeb5a965943c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3349b40d471bea1e1b154213b19fbeb5a965943c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=3349b40d471bea1e1b154213b19fbeb5a965943c", "patch": "@@ -52,6 +52,7 @@ use rustc_attr::{Deprecation, StabilityLevel};\n use rustc_data_structures::flock;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n+use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Mutability;\n use rustc_middle::middle::stability;\n@@ -3100,7 +3101,7 @@ fn item_struct(\n             _ => None,\n         })\n         .peekable();\n-    if let clean::StructType::Plain = s.struct_type {\n+    if let CtorKind::Fictive = s.struct_type {\n         if fields.peek().is_some() {\n             write!(\n                 w,\n@@ -3350,7 +3351,7 @@ fn render_struct(\n     w: &mut Buffer,\n     it: &clean::Item,\n     g: Option<&clean::Generics>,\n-    ty: clean::StructType,\n+    ty: CtorKind,\n     fields: &[clean::Item],\n     tab: &str,\n     structhead: bool,\n@@ -3367,7 +3368,7 @@ fn render_struct(\n         write!(w, \"{}\", g.print())\n     }\n     match ty {\n-        clean::StructType::Plain => {\n+        CtorKind::Fictive => {\n             if let Some(g) = g {\n                 write!(w, \"{}\", WhereClause { gens: g, indent: 0, end_newline: true })\n             }\n@@ -3399,7 +3400,7 @@ fn render_struct(\n             }\n             write!(w, \"}}\");\n         }\n-        clean::StructType::Tuple => {\n+        CtorKind::Fn => {\n             write!(w, \"(\");\n             for (i, field) in fields.iter().enumerate() {\n                 if i > 0 {\n@@ -3424,7 +3425,7 @@ fn render_struct(\n             }\n             write!(w, \";\");\n         }\n-        clean::StructType::Unit => {\n+        CtorKind::Const => {\n             // Needed for PhantomData.\n             if let Some(g) = g {\n                 write!(w, \"{}\", WhereClause { gens: g, indent: 0, end_newline: false })\n@@ -4459,7 +4460,7 @@ fn sidebar_struct(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, s: &clea\n     let fields = get_struct_fields_name(&s.fields);\n \n     if !fields.is_empty() {\n-        if let clean::StructType::Plain = s.struct_type {\n+        if let CtorKind::Fictive = s.struct_type {\n             sidebar.push_str(&format!(\n                 \"<a class=\\\"sidebar-title\\\" href=\\\"#fields\\\">Fields</a>\\\n                  <div class=\\\"sidebar-links\\\">{}</div>\","}, {"sha": "32def4dde1b38c208cb01776d03a645ea83f25ef", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3349b40d471bea1e1b154213b19fbeb5a965943c/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3349b40d471bea1e1b154213b19fbeb5a965943c/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=3349b40d471bea1e1b154213b19fbeb5a965943c", "patch": "@@ -5,6 +5,7 @@\n use std::convert::From;\n \n use rustc_ast::ast;\n+use rustc_hir::def::CtorKind;\n use rustc_span::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_span::Pos;\n \n@@ -220,13 +221,12 @@ impl From<clean::Union> for Struct {\n     }\n }\n \n-impl From<clean::StructType> for StructType {\n-    fn from(struct_type: clean::StructType) -> Self {\n-        use clean::StructType::*;\n+impl From<CtorKind> for StructType {\n+    fn from(struct_type: CtorKind) -> Self {\n         match struct_type {\n-            Plain => StructType::Plain,\n-            Tuple => StructType::Tuple,\n-            Unit => StructType::Unit,\n+            CtorKind::Fictive => StructType::Plain,\n+            CtorKind::Fn => StructType::Tuple,\n+            CtorKind::Const => StructType::Unit,\n         }\n     }\n }"}]}