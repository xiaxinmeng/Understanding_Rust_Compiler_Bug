{"sha": "daf93df430eddbaeb31fea2fcb91c974b0b7bcf5", "node_id": "C_kwDOAAsO6NoAKGRhZjkzZGY0MzBlZGRiYWViMzFmZWEyZmNiOTFjOTc0YjBiN2JjZjU", "commit": {"author": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-11-21T23:29:39Z"}, "committer": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-11-21T23:29:39Z"}, "message": "restore control flow on error in EUV", "tree": {"sha": "0f5f90c129cabbdb127575c67c9edb665464b35d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f5f90c129cabbdb127575c67c9edb665464b35d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daf93df430eddbaeb31fea2fcb91c974b0b7bcf5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE0u8S3YU336XkLsQOPNdIZH7vY1kFAmN8CeMACgkQPNdIZH7v\nY1kbSw/7Bf/ZGtKk8w3a/AXIkFQzSVleKw025g8hh6mvInbXHrJjP2kJHyjP4I0/\nGohD8F5jYYpr5FLpdj8GhXqzbPC0Lst/1Pw40C0jo8qIcGHpOtH0AplAjMjRZoS+\nXUoOzpcjVGehicrjgO0j77XIFAbdOkXpeG+pALidcT9sCq+LHAUAqln/Deu5+MJ+\nbwBpR/3kbVdt4kZPjAvuisIdWua3sa5u8zfl/vri95YqPvIyBMTNns7dZVpmYRLj\ns58S93k9chtqdeAsWKIxmMZolLxELb/L8HUTB6bnBhijo+HN9RT3Q3Bf0knZZttP\nTq2F4RUhjRtG61FPqpTM8Byfnh1kjLfD9xyYCUJr8RLuseIMSSUyXRO15GVlxhsr\njRsAoOhYuo5LQdFMyZxbKOusEPVSHwseqnQHsIfmvMinKgmQCysMDzPicxqwAQCd\nwmKQKb2jCFARmKkU7iwrUEu3u2QvQDfffiLTTXFK1CvUlRo+8W4kVkyX/5h2EEWH\nSj0pLNMv3SIq8SJjx8TUYfMIxvwnRV9gvw9omBeanSzFqgPpkJrsesmk9xdDe13j\nz2I59uNYlDZfAR5AdzEtQxOck3/v1q71mSd7fn+7FhPcJ1tIdnte+LN8eCKjyfTT\n1yvASkOFAuZIOur3pqeauIoaUGoNpMPRQWqxmD7dYhsVa7F2fxU=\n=DDj0\n-----END PGP SIGNATURE-----", "payload": "tree 0f5f90c129cabbdb127575c67c9edb665464b35d\nparent b7bc90fea3b441234a84b49fdafeb75815eebbab\nauthor Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1669073379 +0800\ncommitter Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1669073379 +0800\n\nrestore control flow on error in EUV\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daf93df430eddbaeb31fea2fcb91c974b0b7bcf5", "html_url": "https://github.com/rust-lang/rust/commit/daf93df430eddbaeb31fea2fcb91c974b0b7bcf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daf93df430eddbaeb31fea2fcb91c974b0b7bcf5/comments", "author": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7bc90fea3b441234a84b49fdafeb75815eebbab", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7bc90fea3b441234a84b49fdafeb75815eebbab", "html_url": "https://github.com/rust-lang/rust/commit/b7bc90fea3b441234a84b49fdafeb75815eebbab"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "e5e798f4b933f2ec18ae1dc5bdc8c4e6bd411cbe", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/daf93df430eddbaeb31fea2fcb91c974b0b7bcf5/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf93df430eddbaeb31fea2fcb91c974b0b7bcf5/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=daf93df430eddbaeb31fea2fcb91c974b0b7bcf5", "patch": "@@ -252,11 +252,11 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n             hir::ExprKind::Match(ref discr, arms, _) => {\n                 let discr_place = return_if_err!(self.mc.cat_expr(discr));\n-                self.maybe_read_scrutinee(\n+                return_if_err!(self.maybe_read_scrutinee(\n                     discr,\n                     discr_place.clone(),\n                     arms.iter().map(|arm| arm.pat),\n-                );\n+                ));\n \n                 // treatment of the discriminant is handled while walking the arms.\n                 for arm in arms {\n@@ -390,15 +390,15 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         discr: &Expr<'_>,\n         discr_place: PlaceWithHirId<'tcx>,\n         pats: impl Iterator<Item = &'t hir::Pat<'t>>,\n-    ) {\n+    ) -> Result<(), ()> {\n         // Matching should not always be considered a use of the place, hence\n         // discr does not necessarily need to be borrowed.\n         // We only want to borrow discr if the pattern contain something other\n         // than wildcards.\n         let ExprUseVisitor { ref mc, body_owner: _, delegate: _ } = *self;\n         let mut needs_to_be_read = false;\n         for pat in pats {\n-            return_if_err!(mc.cat_pattern(discr_place.clone(), pat, |place, pat| {\n+            mc.cat_pattern(discr_place.clone(), pat, |place, pat| {\n                 match &pat.kind {\n                     PatKind::Binding(.., opt_sub_pat) => {\n                         // If the opt_sub_pat is None, than the binding does not count as\n@@ -453,7 +453,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                         // examined\n                     }\n                 }\n-            }));\n+            })?\n         }\n \n         if needs_to_be_read {\n@@ -474,6 +474,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             // that the discriminant has been initialized.\n             self.walk_expr(discr);\n         }\n+        Ok(())\n     }\n \n     fn walk_local<F>(\n@@ -490,7 +491,11 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         f(self);\n         if let Some(els) = els {\n             // borrowing because we need to test the discriminant\n-            self.maybe_read_scrutinee(expr, expr_place.clone(), from_ref(pat).iter());\n+            return_if_err!(self.maybe_read_scrutinee(\n+                expr,\n+                expr_place.clone(),\n+                from_ref(pat).iter()\n+            ));\n             self.walk_block(els)\n         }\n         self.walk_irrefutable_pat(&expr_place, &pat);"}, {"sha": "b68508f9e683ecbf82bd30e810ca856aaa0b1a30", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daf93df430eddbaeb31fea2fcb91c974b0b7bcf5/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf93df430eddbaeb31fea2fcb91c974b0b7bcf5/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=daf93df430eddbaeb31fea2fcb91c974b0b7bcf5", "patch": "@@ -2184,7 +2184,7 @@ fn determine_place_ancestry_relation<'tcx>(\n     place_a: &Place<'tcx>,\n     place_b: &Place<'tcx>,\n ) -> PlaceAncestryRelation {\n-    // If Place A and Place B, don't start off from the same root variable, they are divergent.\n+    // If Place A and Place B don't start off from the same root variable, they are divergent.\n     if place_a.base != place_b.base {\n         return PlaceAncestryRelation::Divergent;\n     }"}]}