{"sha": "4d9de48e06e5448136d216a5bb60f53568e1a9d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkOWRlNDhlMDZlNTQ0ODEzNmQyMTZhNWJiNjBmNTM1NjhlMWE5ZDA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-11T08:26:00Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-11T08:26:00Z"}, "message": "Add `--check` flag.\n\ncc #1976", "tree": {"sha": "a03e75789c1b2dda28dc8a50418412c51ba127a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a03e75789c1b2dda28dc8a50418412c51ba127a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d9de48e06e5448136d216a5bb60f53568e1a9d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d9de48e06e5448136d216a5bb60f53568e1a9d0", "html_url": "https://github.com/rust-lang/rust/commit/4d9de48e06e5448136d216a5bb60f53568e1a9d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d9de48e06e5448136d216a5bb60f53568e1a9d0/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "798bffb8b1e24b05a93745db14ce287d5ecddef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/798bffb8b1e24b05a93745db14ce287d5ecddef6", "html_url": "https://github.com/rust-lang/rust/commit/798bffb8b1e24b05a93745db14ce287d5ecddef6"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "f01c260adffe86fab65c9367b263f1ddef46d3a0", "filename": "src/bin/main.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d9de48e06e5448136d216a5bb60f53568e1a9d0/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9de48e06e5448136d216a5bb60f53568e1a9d0/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=4d9de48e06e5448136d216a5bb60f53568e1a9d0", "patch": "@@ -91,6 +91,12 @@ fn make_opts() -> Options {\n     let mut opts = Options::new();\n \n     // Sorted in alphabetical order.\n+    opts.optflag(\n+        \"\",\n+        \"check\",\n+        \"Run in 'check' mode. Exits with 0 if input if formatted correctly. Exits \\\n+         with 1 and prints a diff if formatting is required.\",\n+    );\n     opts.optopt(\n         \"\",\n         \"color\",\n@@ -308,7 +314,8 @@ fn print_usage_to_stdout(opts: &Options, reason: &str) {\n }\n \n fn print_help_file_lines() {\n-    println!(\"If you want to restrict reformatting to specific sets of lines, you can\n+    println!(\n+        \"If you want to restrict reformatting to specific sets of lines, you can\n use the `--file-lines` option. Its argument is a JSON array of objects\n with `file` and `range` properties, where `file` is a file name, and\n `range` is an array representing a range of lines like `[7,13]`. Ranges\n@@ -325,7 +332,8 @@ rustfmt --file-lines '[\n \n would format lines `7-13` and `21-29` of `src/lib.rs`, and lines `10-11`,\n and `15` of `src/foo.rs`. No other files would be formatted, even if they\n-are included as out of line modules from `src/lib.rs`.\");\n+are included as out of line modules from `src/lib.rs`.\"\n+    );\n }\n \n fn print_version() {"}, {"sha": "be3aa1f13d4257b10c4e06efe2eb82db2c7433ed", "filename": "src/config/options.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4d9de48e06e5448136d216a5bb60f53568e1a9d0/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9de48e06e5448136d216a5bb60f53568e1a9d0/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=4d9de48e06e5448136d216a5bb60f53568e1a9d0", "patch": "@@ -332,6 +332,7 @@ pub struct CliOptions {\n     verbose: bool,\n     pub(super) config_path: Option<PathBuf>,\n     write_mode: Option<WriteMode>,\n+    check: bool,\n     color: Option<Color>,\n     file_lines: FileLines, // Default is all lines in all files.\n     unstable_features: bool,\n@@ -361,7 +362,11 @@ impl CliOptions {\n \n         options.config_path = matches.opt_str(\"config-path\").map(PathBuf::from);\n \n+        options.check = matches.opt_present(\"check\");\n         if let Some(ref write_mode) = matches.opt_str(\"write-mode\") {\n+            if options.check {\n+                return Err(format_err!(\"Invalid to set write-mode and `--check`\"));\n+            }\n             if let Ok(write_mode) = WriteMode::from_str(write_mode) {\n                 options.write_mode = Some(write_mode);\n             } else {\n@@ -410,7 +415,9 @@ impl CliOptions {\n         if let Some(error_on_unformatted) = self.error_on_unformatted {\n             config.set().error_on_unformatted(error_on_unformatted);\n         }\n-        if let Some(write_mode) = self.write_mode {\n+        if self.check {\n+            config.set().write_mode(WriteMode::Check);\n+        } else if let Some(write_mode) = self.write_mode {\n             config.set().write_mode(write_mode);\n         }\n         if let Some(color) = self.color {"}, {"sha": "98983da1164a4965a7d3be4069da7417f50dda63", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d9de48e06e5448136d216a5bb60f53568e1a9d0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9de48e06e5448136d216a5bb60f53568e1a9d0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4d9de48e06e5448136d216a5bb60f53568e1a9d0", "patch": "@@ -68,8 +68,7 @@ pub use config::{file_lines, load_config, Config, Verbosity, WriteMode};\n \n pub type FmtResult<T> = std::result::Result<T, failure::Error>;\n \n-pub const WRITE_MODE_LIST: &str =\n-    \"[replace|overwrite|display|plain|diff|coverage|checkstyle|check]\";\n+pub const WRITE_MODE_LIST: &str = \"[replace|overwrite|display|plain|diff|coverage|checkstyle]\";\n \n #[macro_use]\n mod utils;"}]}