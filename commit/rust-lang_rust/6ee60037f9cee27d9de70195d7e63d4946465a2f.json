{"sha": "6ee60037f9cee27d9de70195d7e63d4946465a2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZTYwMDM3ZjljZWUyN2Q5ZGU3MDE5NWQ3ZTYzZDQ5NDY0NjVhMmY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-25T09:13:36Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-10T11:50:13Z"}, "message": "infer integral types in presence of a type hint", "tree": {"sha": "d9cc0edf60b80d9823139ca93439c22f35f09e2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9cc0edf60b80d9823139ca93439c22f35f09e2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ee60037f9cee27d9de70195d7e63d4946465a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee60037f9cee27d9de70195d7e63d4946465a2f", "html_url": "https://github.com/rust-lang/rust/commit/6ee60037f9cee27d9de70195d7e63d4946465a2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ee60037f9cee27d9de70195d7e63d4946465a2f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41f11d95c70cc2f65ee9f068d46a7a6de8f911b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/41f11d95c70cc2f65ee9f068d46a7a6de8f911b3", "html_url": "https://github.com/rust-lang/rust/commit/41f11d95c70cc2f65ee9f068d46a7a6de8f911b3"}], "stats": {"total": 114, "additions": 110, "deletions": 4}, "files": [{"sha": "66ec1d691490eb6ed76a40d7b70159a78885582a", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 110, "deletions": 4, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/6ee60037f9cee27d9de70195d7e63d4946465a2f/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee60037f9cee27d9de70195d7e63d4946465a2f/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=6ee60037f9cee27d9de70195d7e63d4946465a2f", "patch": "@@ -36,6 +36,7 @@ use syntax::codemap::Span;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n use syntax::codemap;\n+use syntax::attr::IntType;\n \n use std::borrow::Cow;\n use std::cmp::Ordering;\n@@ -462,6 +463,10 @@ pub enum ErrKind {\n \n     IndexOpFeatureGated,\n     Math(ConstMathErr),\n+\n+    IntermediateUnsignedNegative,\n+    InferredWrongType(ConstInt),\n+    BadType(ConstVal),\n }\n \n impl From<ConstMathErr> for ErrKind {\n@@ -518,6 +523,13 @@ impl ConstEvalErr {\n             MiscCatchAll => \"unsupported constant expr\".into_cow(),\n             IndexOpFeatureGated => \"the index operation on const values is unstable\".into_cow(),\n             Math(ref err) => err.description().into_cow(),\n+\n+            IntermediateUnsignedNegative => \"during the computation of an unsigned a negative \\\n+                                             number was encountered. This is most likely a bug in\\\n+                                             the constant evaluator\".into_cow(),\n+\n+            InferredWrongType(ref i) => format!(\"inferred wrong type for {}\", i).into_cow(),\n+            BadType(ref i) => format!(\"value of wrong type: {:?}\", i).into_cow(),\n         }\n     }\n }\n@@ -974,7 +986,101 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n       _ => signal!(e, MiscCatchAll)\n     };\n \n-    Ok(result)\n+    match (ety.map(|t| &t.sty), result) {\n+        (Some(ref ty_hint), Integral(i)) => Ok(Integral(try!(infer(i, tcx, ty_hint, e.span)))),\n+        (_, result) => Ok(result),\n+    }\n+}\n+\n+fn infer<'tcx>(\n+    i: ConstInt,\n+    tcx: &TyCtxt<'tcx>,\n+    ty_hint: &ty::TypeVariants<'tcx>,\n+    span: Span\n+) -> Result<ConstInt, ConstEvalErr> {\n+    use syntax::ast::*;\n+    const I8MAX: u64 = ::std::i8::MAX as u64;\n+    const I16MAX: u64 = ::std::i16::MAX as u64;\n+    const I32MAX: u64 = ::std::i32::MAX as u64;\n+    const I64MAX: u64 = ::std::i64::MAX as u64;\n+\n+    const U8MAX: u64 = ::std::u8::MAX as u64;\n+    const U16MAX: u64 = ::std::u16::MAX as u64;\n+    const U32MAX: u64 = ::std::u32::MAX as u64;\n+\n+    const I8MAXI: i64 = ::std::i8::MAX as i64;\n+    const I16MAXI: i64 = ::std::i16::MAX as i64;\n+    const I32MAXI: i64 = ::std::i32::MAX as i64;\n+\n+    const I8MINI: i64 = ::std::i8::MIN as i64;\n+    const I16MINI: i64 = ::std::i16::MIN as i64;\n+    const I32MINI: i64 = ::std::i32::MIN as i64;\n+\n+    let err = |e| ConstEvalErr {\n+        span: span,\n+        kind: e,\n+    };\n+\n+    match (ty_hint, i) {\n+        (&ty::TyInt(IntTy::I8), result @ I8(_)) => Ok(result),\n+        (&ty::TyInt(IntTy::I16), result @ I16(_)) => Ok(result),\n+        (&ty::TyInt(IntTy::I32), result @ I32(_)) => Ok(result),\n+        (&ty::TyInt(IntTy::I64), result @ I64(_)) => Ok(result),\n+        (&ty::TyInt(IntTy::Is), result @ Isize(_)) => Ok(result),\n+\n+        (&ty::TyUint(UintTy::U8), result @ U8(_)) => Ok(result),\n+        (&ty::TyUint(UintTy::U16), result @ U16(_)) => Ok(result),\n+        (&ty::TyUint(UintTy::U32), result @ U32(_)) => Ok(result),\n+        (&ty::TyUint(UintTy::U64), result @ U64(_)) => Ok(result),\n+        (&ty::TyUint(UintTy::Us), result @ Usize(_)) => Ok(result),\n+\n+        (&ty::TyInt(IntTy::I8), Infer(i @ 0...I8MAX)) => Ok(I8(i as i8)),\n+        (&ty::TyInt(IntTy::I16), Infer(i @ 0...I16MAX)) => Ok(I16(i as i16)),\n+        (&ty::TyInt(IntTy::I32), Infer(i @ 0...I32MAX)) => Ok(I32(i as i32)),\n+        (&ty::TyInt(IntTy::I64), Infer(i @ 0...I64MAX)) => Ok(I64(i as i64)),\n+        (&ty::TyInt(IntTy::Is), Infer(i @ 0...I64MAX)) => {\n+            match ConstIsize::new(i as i64, tcx.sess.target.int_type) {\n+                Ok(val) => Ok(Isize(val)),\n+                Err(e) => Err(err(e.into())),\n+            }\n+        },\n+        (&ty::TyInt(_), Infer(_)) => Err(err(Math(ConstMathErr::NotInRange))),\n+\n+        (&ty::TyInt(IntTy::I8), InferSigned(i @ I8MINI...I8MAXI)) => Ok(I8(i as i8)),\n+        (&ty::TyInt(IntTy::I16), InferSigned(i @ I16MINI...I16MAXI)) => Ok(I16(i as i16)),\n+        (&ty::TyInt(IntTy::I32), InferSigned(i @ I32MINI...I32MAXI)) => Ok(I32(i as i32)),\n+        (&ty::TyInt(IntTy::I64), InferSigned(i)) => Ok(I64(i)),\n+        (&ty::TyInt(IntTy::Is), InferSigned(i)) => {\n+            match ConstIsize::new(i, tcx.sess.target.int_type) {\n+                Ok(val) => Ok(Isize(val)),\n+                Err(e) => Err(err(e.into())),\n+            }\n+        },\n+        (&ty::TyInt(_), InferSigned(_)) => Err(err(Math(ConstMathErr::NotInRange))),\n+\n+        (&ty::TyUint(UintTy::U8), Infer(i @ 0...U8MAX)) => Ok(U8(i as u8)),\n+        (&ty::TyUint(UintTy::U16), Infer(i @ 0...U16MAX)) => Ok(U16(i as u16)),\n+        (&ty::TyUint(UintTy::U32), Infer(i @ 0...U32MAX)) => Ok(U32(i as u32)),\n+        (&ty::TyUint(UintTy::U64), Infer(i)) => Ok(U64(i)),\n+        (&ty::TyUint(UintTy::Us), Infer(i)) => {\n+            match ConstUsize::new(i, tcx.sess.target.uint_type) {\n+                Ok(val) => Ok(Usize(val)),\n+                Err(e) => Err(err(e.into())),\n+            }\n+        },\n+        (&ty::TyUint(_), Infer(_)) => Err(err(Math(ConstMathErr::NotInRange))),\n+        (&ty::TyUint(_), InferSigned(_)) => Err(err(IntermediateUnsignedNegative)),\n+\n+        (&ty::TyInt(_), i) |\n+        (&ty::TyUint(_), i) => Err(err(InferredWrongType(i))),\n+\n+        (&ty::TyEnum(ref adt, _), i) => {\n+            let hints = tcx.lookup_repr_hints(adt.did);\n+            let int_ty = tcx.enum_repr_type(hints.iter().next());\n+            infer(i, tcx, &int_ty.to_ty(tcx).sty, span)\n+        },\n+        (_, i) => Err(err(BadType(ConstVal::Integral(i)))),\n+    }\n }\n \n fn impl_or_trait_container(tcx: &TyCtxt, def_id: DefId) -> ty::ImplOrTraitItemContainer {\n@@ -1083,7 +1189,7 @@ fn cast_const_int<'tcx>(tcx: &TyCtxt<'tcx>, val: ConstInt, ty: ty::Ty) -> CastRe\n     }\n }\n \n-fn cast_const_float<'tcx>(tcx: &ty::ctxt<'tcx>, f: f64, ty: ty::Ty) -> CastResult {\n+fn cast_const_float<'tcx>(tcx: &TyCtxt<'tcx>, f: f64, ty: ty::Ty) -> CastResult {\n     match ty.sty {\n         ty::TyInt(_) if f >= 0.0 => cast_const_int(tcx, Infer(f as u64), ty),\n         ty::TyInt(_) => cast_const_int(tcx, InferSigned(f as i64), ty),\n@@ -1094,7 +1200,7 @@ fn cast_const_float<'tcx>(tcx: &ty::ctxt<'tcx>, f: f64, ty: ty::Ty) -> CastResul\n     }\n }\n \n-fn cast_const<'tcx>(tcx: &ty::ctxt<'tcx>, val: ConstVal, ty: ty::Ty) -> CastResult {\n+fn cast_const<'tcx>(tcx: &TyCtxt<'tcx>, val: ConstVal, ty: ty::Ty) -> CastResult {\n     match val {\n         Integral(i) => cast_const_int(tcx, i, ty),\n         Bool(b) => cast_const_int(tcx, Infer(b as u64), ty),\n@@ -1105,7 +1211,7 @@ fn cast_const<'tcx>(tcx: &ty::ctxt<'tcx>, val: ConstVal, ty: ty::Ty) -> CastResu\n }\n \n fn lit_to_const<'tcx>(lit: &ast::LitKind,\n-                      tcx: &ty::ctxt<'tcx>,\n+                      tcx: &TyCtxt<'tcx>,\n                       ty_hint: Option<Ty<'tcx>>,\n                       span: Span,\n                       ) -> Result<ConstVal, ConstMathErr> {"}]}