{"sha": "33fd73fedeb5cd61dbbb7562fd927c0b6994653a", "node_id": "C_kwDOAAsO6NoAKDMzZmQ3M2ZlZGViNWNkNjFkYmJiNzU2MmZkOTI3YzBiNjk5NDY1M2E", "commit": {"author": {"name": "Patrick Mooney", "email": "pmooney@pfmooney.com", "date": "2022-04-04T17:55:30Z"}, "committer": {"name": "Patrick Mooney", "email": "pmooney@oxide.computer", "date": "2022-04-05T16:22:32Z"}, "message": "Update libc to 0.2.121\n\nWith the updated libc, UNIX stack overflow handling in libstd can now\nuse the common `si_addr` accessor function, rather than attempting to\nuse a field from that name in `siginfo_t`.  This simplifies the\ncollection of the fault address, particularly on platforms where that\ndata resides within a union in `siginfo_t`.", "tree": {"sha": "e3a4ae176e25ffb1c2642d79cd47ba9416f9588a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3a4ae176e25ffb1c2642d79cd47ba9416f9588a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33fd73fedeb5cd61dbbb7562fd927c0b6994653a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33fd73fedeb5cd61dbbb7562fd927c0b6994653a", "html_url": "https://github.com/rust-lang/rust/commit/33fd73fedeb5cd61dbbb7562fd927c0b6994653a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33fd73fedeb5cd61dbbb7562fd927c0b6994653a/comments", "author": {"login": "pfmooney", "id": 1555070, "node_id": "MDQ6VXNlcjE1NTUwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1555070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pfmooney", "html_url": "https://github.com/pfmooney", "followers_url": "https://api.github.com/users/pfmooney/followers", "following_url": "https://api.github.com/users/pfmooney/following{/other_user}", "gists_url": "https://api.github.com/users/pfmooney/gists{/gist_id}", "starred_url": "https://api.github.com/users/pfmooney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pfmooney/subscriptions", "organizations_url": "https://api.github.com/users/pfmooney/orgs", "repos_url": "https://api.github.com/users/pfmooney/repos", "events_url": "https://api.github.com/users/pfmooney/events{/privacy}", "received_events_url": "https://api.github.com/users/pfmooney/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pfmooney", "id": 1555070, "node_id": "MDQ6VXNlcjE1NTUwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1555070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pfmooney", "html_url": "https://github.com/pfmooney", "followers_url": "https://api.github.com/users/pfmooney/followers", "following_url": "https://api.github.com/users/pfmooney/following{/other_user}", "gists_url": "https://api.github.com/users/pfmooney/gists{/gist_id}", "starred_url": "https://api.github.com/users/pfmooney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pfmooney/subscriptions", "organizations_url": "https://api.github.com/users/pfmooney/orgs", "repos_url": "https://api.github.com/users/pfmooney/repos", "events_url": "https://api.github.com/users/pfmooney/events{/privacy}", "received_events_url": "https://api.github.com/users/pfmooney/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "634770c0a7f8598164ab825cfe419cc8b03c36e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/634770c0a7f8598164ab825cfe419cc8b03c36e5", "html_url": "https://github.com/rust-lang/rust/commit/634770c0a7f8598164ab825cfe419cc8b03c36e5"}], "stats": {"total": 22, "additions": 3, "deletions": 19}, "files": [{"sha": "bdfb51761760f21fed8d2eb89175ead386267511", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33fd73fedeb5cd61dbbb7562fd927c0b6994653a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/33fd73fedeb5cd61dbbb7562fd927c0b6994653a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=33fd73fedeb5cd61dbbb7562fd927c0b6994653a", "patch": "@@ -2019,9 +2019,9 @@ checksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.116\"\n+version = \"0.2.121\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"565dbd88872dbe4cc8a46e527f26483c1d1f7afa6b884a3bd6cd893d4f98da74\"\n+checksum = \"efaa7b300f3b5fe8eb6bf21ce3895e1751d9665086af2d64b42f19701015ff4f\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]"}, {"sha": "75a5c0f927982b3e8b542048839b7e9a0a8e7278", "filename": "library/std/src/sys/unix/stack_overflow.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/33fd73fedeb5cd61dbbb7562fd927c0b6994653a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33fd73fedeb5cd61dbbb7562fd927c0b6994653a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs?ref=33fd73fedeb5cd61dbbb7562fd927c0b6994653a", "patch": "@@ -54,22 +54,6 @@ mod imp {\n     use crate::sys::unix::os::page_size;\n     use crate::sys_common::thread_info;\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-    unsafe fn siginfo_si_addr(info: *mut libc::siginfo_t) -> usize {\n-        #[repr(C)]\n-        struct siginfo_t {\n-            a: [libc::c_int; 3], // si_signo, si_errno, si_code\n-            si_addr: *mut libc::c_void,\n-        }\n-\n-        (*(info as *const siginfo_t)).si_addr as usize\n-    }\n-\n-    #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n-    unsafe fn siginfo_si_addr(info: *mut libc::siginfo_t) -> usize {\n-        (*info).si_addr as usize\n-    }\n-\n     // Signal handler for the SIGSEGV and SIGBUS handlers. We've got guard pages\n     // (unmapped pages) at the end of every thread's stack, so if a thread ends\n     // up running into the guard page it'll trigger this handler. We want to\n@@ -97,7 +81,7 @@ mod imp {\n         _data: *mut libc::c_void,\n     ) {\n         let guard = thread_info::stack_guard().unwrap_or(0..0);\n-        let addr = siginfo_si_addr(info);\n+        let addr = (*info).si_addr() as usize;\n \n         // If the faulting address is within the guard page, then we print a\n         // message saying so and abort."}]}