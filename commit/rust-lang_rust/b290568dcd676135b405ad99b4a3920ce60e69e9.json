{"sha": "b290568dcd676135b405ad99b4a3920ce60e69e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOTA1NjhkY2Q2NzYxMzViNDA1YWQ5OWI0YTM5MjBjZTYwZTY5ZTk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-13T15:37:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-13T15:37:55Z"}, "message": "Rollup merge of #45133 - GuillaumeGomez:usize-index-msg, r=dtolnay\n\nusize index message for vec", "tree": {"sha": "f220375b8722e27d80db92cabd3b71b2fdfbcb28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f220375b8722e27d80db92cabd3b71b2fdfbcb28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b290568dcd676135b405ad99b4a3920ce60e69e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b290568dcd676135b405ad99b4a3920ce60e69e9", "html_url": "https://github.com/rust-lang/rust/commit/b290568dcd676135b405ad99b4a3920ce60e69e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b290568dcd676135b405ad99b4a3920ce60e69e9/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eab4ec823c9f7a19ac9516e3858891b46225828", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eab4ec823c9f7a19ac9516e3858891b46225828", "html_url": "https://github.com/rust-lang/rust/commit/9eab4ec823c9f7a19ac9516e3858891b46225828"}, {"sha": "a28b2465d366c0169aedf76ed932dc695d0ff049", "url": "https://api.github.com/repos/rust-lang/rust/commits/a28b2465d366c0169aedf76ed932dc695d0ff049", "html_url": "https://github.com/rust-lang/rust/commit/a28b2465d366c0169aedf76ed932dc695d0ff049"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "0cbfc9e9dacbb3f04d7f9f30f3c89e0d44d9bf4b", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b290568dcd676135b405ad99b4a3920ce60e69e9/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b290568dcd676135b405ad99b4a3920ce60e69e9/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=b290568dcd676135b405ad99b4a3920ce60e69e9", "patch": "@@ -121,6 +121,7 @@\n #![feature(unique)]\n #![feature(unsize)]\n #![feature(allocator_internals)]\n+#![feature(on_unimplemented)]\n \n #![cfg_attr(not(test), feature(fused, fn_traits, placement_new_protocol, swap_with_slice, i128))]\n #![cfg_attr(test, feature(test, box_heap))]"}, {"sha": "cf34e195dea76fe1d8262d412eab2823cb965e87", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b290568dcd676135b405ad99b4a3920ce60e69e9/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b290568dcd676135b405ad99b4a3920ce60e69e9/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=b290568dcd676135b405ad99b4a3920ce60e69e9", "patch": "@@ -1543,6 +1543,7 @@ impl<T: Hash> Hash for Vec<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n impl<T> Index<usize> for Vec<T> {\n     type Output = T;\n \n@@ -1554,6 +1555,7 @@ impl<T> Index<usize> for Vec<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n impl<T> IndexMut<usize> for Vec<T> {\n     #[inline]\n     fn index_mut(&mut self, index: usize) -> &mut T {\n@@ -1562,8 +1564,8 @@ impl<T> IndexMut<usize> for Vec<T> {\n     }\n }\n \n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n impl<T> ops::Index<ops::Range<usize>> for Vec<T> {\n     type Output = [T];\n \n@@ -1572,7 +1574,9 @@ impl<T> ops::Index<ops::Range<usize>> for Vec<T> {\n         Index::index(&**self, index)\n     }\n }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n impl<T> ops::Index<ops::RangeTo<usize>> for Vec<T> {\n     type Output = [T];\n \n@@ -1581,7 +1585,9 @@ impl<T> ops::Index<ops::RangeTo<usize>> for Vec<T> {\n         Index::index(&**self, index)\n     }\n }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n impl<T> ops::Index<ops::RangeFrom<usize>> for Vec<T> {\n     type Output = [T];\n \n@@ -1590,7 +1596,9 @@ impl<T> ops::Index<ops::RangeFrom<usize>> for Vec<T> {\n         Index::index(&**self, index)\n     }\n }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n impl<T> ops::Index<ops::RangeFull> for Vec<T> {\n     type Output = [T];\n \n@@ -1599,7 +1607,9 @@ impl<T> ops::Index<ops::RangeFull> for Vec<T> {\n         self\n     }\n }\n+\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n impl<T> ops::Index<ops::RangeInclusive<usize>> for Vec<T> {\n     type Output = [T];\n \n@@ -1608,7 +1618,9 @@ impl<T> ops::Index<ops::RangeInclusive<usize>> for Vec<T> {\n         Index::index(&**self, index)\n     }\n }\n+\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n impl<T> ops::Index<ops::RangeToInclusive<usize>> for Vec<T> {\n     type Output = [T];\n \n@@ -1619,41 +1631,52 @@ impl<T> ops::Index<ops::RangeToInclusive<usize>> for Vec<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n impl<T> ops::IndexMut<ops::Range<usize>> for Vec<T> {\n     #[inline]\n     fn index_mut(&mut self, index: ops::Range<usize>) -> &mut [T] {\n         IndexMut::index_mut(&mut **self, index)\n     }\n }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n impl<T> ops::IndexMut<ops::RangeTo<usize>> for Vec<T> {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut [T] {\n         IndexMut::index_mut(&mut **self, index)\n     }\n }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n impl<T> ops::IndexMut<ops::RangeFrom<usize>> for Vec<T> {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut [T] {\n         IndexMut::index_mut(&mut **self, index)\n     }\n }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n impl<T> ops::IndexMut<ops::RangeFull> for Vec<T> {\n     #[inline]\n     fn index_mut(&mut self, _index: ops::RangeFull) -> &mut [T] {\n         self\n     }\n }\n+\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n impl<T> ops::IndexMut<ops::RangeInclusive<usize>> for Vec<T> {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut [T] {\n         IndexMut::index_mut(&mut **self, index)\n     }\n }\n+\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n impl<T> ops::IndexMut<ops::RangeToInclusive<usize>> for Vec<T> {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut [T] {"}, {"sha": "2d37fc79250357f9d1b0deab53e123c48103c5c3", "filename": "src/test/compile-fail/index-help.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b290568dcd676135b405ad99b4a3920ce60e69e9/src%2Ftest%2Fcompile-fail%2Findex-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b290568dcd676135b405ad99b4a3920ce60e69e9/src%2Ftest%2Fcompile-fail%2Findex-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findex-help.rs?ref=b290568dcd676135b405ad99b4a3920ce60e69e9", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = vec![1];\n+    x[0i32]; //~ ERROR E0277\n+             //~| NOTE vector indices are of type `usize` or ranges of `usize`\n+}"}]}