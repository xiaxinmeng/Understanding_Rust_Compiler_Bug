{"sha": "ac836dd79c2d7c631ca601dc468de13cb5c785da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjODM2ZGQ3OWMyZDdjNjMxY2E2MDFkYzQ2OGRlMTNjYjVjNzg1ZGE=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-24T22:23:39Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-24T22:29:08Z"}, "message": "There is only one yield glue.", "tree": {"sha": "e3ef73e6cb624ba406ccff65035dd1a439bd7e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3ef73e6cb624ba406ccff65035dd1a439bd7e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac836dd79c2d7c631ca601dc468de13cb5c785da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac836dd79c2d7c631ca601dc468de13cb5c785da", "html_url": "https://github.com/rust-lang/rust/commit/ac836dd79c2d7c631ca601dc468de13cb5c785da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac836dd79c2d7c631ca601dc468de13cb5c785da/comments", "author": null, "committer": null, "parents": [{"sha": "b1292580b95ea4a2ab22682ff04a91004c44cd06", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1292580b95ea4a2ab22682ff04a91004c44cd06", "html_url": "https://github.com/rust-lang/rust/commit/b1292580b95ea4a2ab22682ff04a91004c44cd06"}], "stats": {"total": 109, "additions": 52, "deletions": 57}, "files": [{"sha": "3ca15beb31a24728f638649536c4738d19bc26f1", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac836dd79c2d7c631ca601dc468de13cb5c785da/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ac836dd79c2d7c631ca601dc468de13cb5c785da/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=ac836dd79c2d7c631ca601dc468de13cb5c785da", "patch": "@@ -33,7 +33,7 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n \n RUNTIME_LL := rt/new_exit.ll\n \n-RUNTIME_S := rt/activate_glue.s\n+RUNTIME_S := rt/activate_glue.s rt/yield_glue.s\n \n RUNTIME_HDR := rt/globals.h \\\n                rt/rust.h \\"}, {"sha": "79235df1d99d7985ebbbbb55db05b3dbe660587a", "filename": "src/comp/back/x86.rs", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ac836dd79c2d7c631ca601dc468de13cb5c785da/src%2Fcomp%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac836dd79c2d7c631ca601dc468de13cb5c785da/src%2Fcomp%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86.rs?ref=ac836dd79c2d7c631ca601dc468de13cb5c785da", "patch": "@@ -86,43 +86,6 @@ fn store_esp_to_runtime_sp_second_arg() -> vec[str] {\n     ret [\"movl  %esp, \" + wstr(abi::task_field_runtime_sp) + \"(%edx)\"];\n }\n \n-\n-/* More glue code, this time the 'bottom half' of yielding.\n- *\n- * We arrived here because an native call decided to deschedule the\n- * running task. So the native call's return address got patched to the\n- * first instruction of this glue code.\n- *\n- * When the native call does 'ret' it will come here, and its esp will be\n- * pointing to the last argument pushed on the C stack before making\n- * the native call: the 0th argument to the native call, which is always\n- * the task ptr performing the native call. That's where we take over.\n- *\n- * Our goal is to complete the descheduling\n- *\n- *   - Switch over to the task stack temporarily.\n- *\n- *   - Save the task's callee-saves onto the task stack.\n- *     (the task is now 'descheduled', safe to set aside)\n- *\n- *   - Switch *back* to the C stack.\n- *\n- *   - Restore the C-stack callee-saves.\n- *\n- *   - Return to the caller on the C stack that activated the task.\n- *\n- */\n-\n-fn rust_yield_glue() -> vec[str] {\n-    ret [\"movl  0(%esp), %ecx    # ecx = rust_task\"]\n-        + load_esp_from_rust_sp_first_arg()\n-        + save_callee_saves()\n-        + store_esp_to_rust_sp_first_arg()\n-        + load_esp_from_runtime_sp_first_arg()\n-        + restore_callee_saves()\n-        + [\"ret\"];\n-}\n-\n fn native_glue(int n_args, abi::native_glue_type ngt) -> vec[str] {\n \n     let bool pass_task;\n@@ -218,11 +181,8 @@ fn get_module_asm() -> str {\n \n     auto prefix = get_symbol_prefix();\n \n-    auto glues =\n-        [decl_glue(align, prefix,\n-                   abi::yield_glue_name(),\n-                   rust_yield_glue())]\n-\n+    let vec[str] glues =\n+        []\n         + vec::init_fn[str](bind decl_native_glue(align, prefix,\n             abi::ngt_rust, _), (abi::n_native_glues + 1) as uint)\n         + vec::init_fn[str](bind decl_native_glue(align, prefix,"}, {"sha": "9895cb47d12999b61c8b8156f4d22b83db74d564", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac836dd79c2d7c631ca601dc468de13cb5c785da/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac836dd79c2d7c631ca601dc468de13cb5c785da/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ac836dd79c2d7c631ca601dc468de13cb5c785da", "patch": "@@ -7660,9 +7660,6 @@ fn create_crate_constant(ValueRef crate_ptr, @glue_fns glues) {\n \n     let ValueRef crate_addr = p2i(crate_ptr);\n \n-    let ValueRef yield_glue_off =\n-        llvm::LLVMConstSub(p2i(glues.yield_glue), crate_addr);\n-\n     let ValueRef crate_val =\n         C_struct([C_null(T_int()),     // ptrdiff_t image_base_off\n                      p2i(crate_ptr),      // uintptr_t self_addr\n@@ -7671,10 +7668,10 @@ fn create_crate_constant(ValueRef crate_ptr, @glue_fns glues) {\n                      C_null(T_int()),     // ptrdiff_t debug_info_off\n                      C_null(T_int()),     // size_t debug_info_sz\n                      C_null(T_int()),     // size_t pad\n-                     yield_glue_off,      // size_t yield_glue_off\n                      C_null(T_int()),     // size_t pad\n-                     C_null(T_int()),     // size_t gc_glue_off\n                      C_null(T_int()),     // size_t pad2\n+                     C_null(T_int()),     // size_t gc_glue_off\n+                     C_null(T_int()),     // size_t pad3\n                      C_null(T_int()),     // int n_rust_syms\n                      C_null(T_int()),     // int n_c_syms\n                      C_null(T_int())      // int n_libs"}, {"sha": "2e312c8c564b08b5ce726d4fdec1950c87fe76cd", "filename": "src/rt/rust_crate.cpp", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac836dd79c2d7c631ca601dc468de13cb5c785da/src%2Frt%2Frust_crate.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ac836dd79c2d7c631ca601dc468de13cb5c785da/src%2Frt%2Frust_crate.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate.cpp?ref=ac836dd79c2d7c631ca601dc468de13cb5c785da", "patch": "@@ -16,11 +16,6 @@ rust_crate::get_gc_glue() const {\n   return ((uintptr_t)this + gc_glue_off);\n }\n \n-uintptr_t\n-rust_crate::get_yield_glue() const {\n-  return ((uintptr_t)this + yield_glue_off);\n-}\n-\n rust_crate::mem_area::mem_area(rust_dom *dom, uintptr_t pos, size_t sz)\n   : dom(dom),\n     base(pos),"}, {"sha": "03022812a091628e0e3ce611c31aadd8daa4810d", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac836dd79c2d7c631ca601dc468de13cb5c785da/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/ac836dd79c2d7c631ca601dc468de13cb5c785da/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=ac836dd79c2d7c631ca601dc468de13cb5c785da", "patch": "@@ -232,10 +232,10 @@ class rust_crate {\n     size_t debug_info_sz;         // Size of .debug_info.\n \n     ptrdiff_t activate_glue_off;\n-    ptrdiff_t yield_glue_off;\n     ptrdiff_t pad;\n-    ptrdiff_t gc_glue_off;\n     ptrdiff_t pad2;\n+    ptrdiff_t gc_glue_off;\n+    ptrdiff_t pad3;\n \n public:\n \n@@ -247,7 +247,6 @@ class rust_crate {\n \n     uintptr_t get_image_base() const;\n     ptrdiff_t get_relocation_diff() const;\n-    uintptr_t get_yield_glue() const;\n     uintptr_t get_gc_glue() const;\n \n     struct mem_area"}, {"sha": "bd57eb89cca3be7edd139554bdcd670b324137a9", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac836dd79c2d7c631ca601dc468de13cb5c785da/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ac836dd79c2d7c631ca601dc468de13cb5c785da/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=ac836dd79c2d7c631ca601dc468de13cb5c785da", "patch": "@@ -317,12 +317,14 @@ rust_task::yield(size_t nargs) {\n     yield(nargs, 0);\n }\n \n+extern \"C\" void new_rust_yield_glue(void) asm(\"new_rust_yield_glue\");\n+\n void\n rust_task::yield(size_t nargs, size_t time_in_us) {\n     LOG(this, task, \"task %s @0x%\" PRIxPTR \" yielding for %d us\",\n         name, this, time_in_us);\n     yield_timer.reset(time_in_us);\n-    run_after_return(nargs, dom->root_crate->get_yield_glue());\n+    run_after_return(nargs, (uintptr_t) new_rust_yield_glue);\n }\n \n static inline uintptr_t"}, {"sha": "767c9c5cae6ddbc960a096da990aac8897cb55a1", "filename": "src/rt/yield_glue.s", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ac836dd79c2d7c631ca601dc468de13cb5c785da/src%2Frt%2Fyield_glue.s", "raw_url": "https://github.com/rust-lang/rust/raw/ac836dd79c2d7c631ca601dc468de13cb5c785da/src%2Frt%2Fyield_glue.s", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fyield_glue.s?ref=ac836dd79c2d7c631ca601dc468de13cb5c785da", "patch": "@@ -0,0 +1,42 @@\n+/* More glue code, this time the 'bottom half' of yielding.\n+ *\n+ * We arrived here because an native call decided to deschedule the\n+ * running task. So the native call's return address got patched to the\n+ * first instruction of this glue code.\n+ *\n+ * When the native call does 'ret' it will come here, and its esp will be\n+ * pointing to the last argument pushed on the C stack before making\n+ * the native call: the 0th argument to the native call, which is always\n+ * the task ptr performing the native call. That's where we take over.\n+ *\n+ * Our goal is to complete the descheduling\n+ *\n+ *   - Switch over to the task stack temporarily.\n+ *\n+ *   - Save the task's callee-saves onto the task stack.\n+ *     (the task is now 'descheduled', safe to set aside)\n+ *\n+ *   - Switch *back* to the C stack.\n+ *\n+ *   - Restore the C-stack callee-saves.\n+ *\n+ *   - Return to the caller on the C stack that activated the task.\n+ *\n+ */\n+\n+\t.globl new_rust_yield_glue\n+\t.balign 4\n+new_rust_yield_glue:\n+\tmovl  0(%esp), %ecx    # ecx = rust_task\n+\tmovl  16(%ecx), %esp\n+\tpushl %ebp\n+\tpushl %edi\n+\tpushl %esi\n+\tpushl %ebx\n+\tmovl  %esp, 16(%ecx)\n+\tmovl  12(%ecx), %esp\n+\tpopl  %ebx\n+\tpopl  %esi\n+\tpopl  %edi\n+\tpopl  %ebp\n+\tret"}]}