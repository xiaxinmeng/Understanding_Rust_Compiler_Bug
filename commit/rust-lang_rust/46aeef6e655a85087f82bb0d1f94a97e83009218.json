{"sha": "46aeef6e655a85087f82bb0d1f94a97e83009218", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YWVlZjZlNjU1YTg1MDg3ZjgyYmIwZDFmOTRhOTdlODMwMDkyMTg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-07T23:55:29Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-07T23:55:29Z"}, "message": "Poison generators when any terminator unwinds\n\nThis didn't cause issues before since generator types were always\nconsidered to \"need drop\", leading to unwind paths\n(including a `Resume` block) always getting generated.", "tree": {"sha": "26f643bd80dcae50b7d5af2813cb5eaa4d96749c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26f643bd80dcae50b7d5af2813cb5eaa4d96749c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46aeef6e655a85087f82bb0d1f94a97e83009218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46aeef6e655a85087f82bb0d1f94a97e83009218", "html_url": "https://github.com/rust-lang/rust/commit/46aeef6e655a85087f82bb0d1f94a97e83009218", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46aeef6e655a85087f82bb0d1f94a97e83009218/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ac41a1a8d28493c7aa927ae49c664b9b9dce476", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac41a1a8d28493c7aa927ae49c664b9b9dce476", "html_url": "https://github.com/rust-lang/rust/commit/5ac41a1a8d28493c7aa927ae49c664b9b9dce476"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "ffbf4ae939334f97c42bf0db43844350d0abf04a", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/46aeef6e655a85087f82bb0d1f94a97e83009218/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46aeef6e655a85087f82bb0d1f94a97e83009218/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=46aeef6e655a85087f82bb0d1f94a97e83009218", "patch": "@@ -1055,11 +1055,37 @@ fn create_generator_resume_function<'tcx>(\n     body: &mut BodyAndCache<'tcx>,\n     can_return: bool,\n ) {\n+    let can_unwind = can_unwind(tcx, body);\n+\n     // Poison the generator when it unwinds\n-    for block in body.basic_blocks_mut() {\n-        let source_info = block.terminator().source_info;\n-        if let &TerminatorKind::Resume = &block.terminator().kind {\n-            block.statements.push(transform.set_discr(VariantIdx::new(POISONED), source_info));\n+    if can_unwind {\n+        let poison_block = BasicBlock::new(body.basic_blocks().len());\n+        let source_info = source_info(body);\n+        body.basic_blocks_mut().push(BasicBlockData {\n+            statements: vec![transform.set_discr(VariantIdx::new(POISONED), source_info)],\n+            terminator: Some(Terminator { source_info, kind: TerminatorKind::Resume }),\n+            is_cleanup: true,\n+        });\n+\n+        for (idx, block) in body.basic_blocks_mut().iter_enumerated_mut() {\n+            let source_info = block.terminator().source_info;\n+\n+            if let TerminatorKind::Resume = block.terminator().kind {\n+                // An existing `Resume` terminator is redirected to jump to our dedicated\n+                // \"poisoning block\" above.\n+                if idx != poison_block {\n+                    *block.terminator_mut() = Terminator {\n+                        source_info,\n+                        kind: TerminatorKind::Goto { target: poison_block },\n+                    };\n+                }\n+            } else if !block.is_cleanup {\n+                // Any terminators that *can* unwind but don't have an unwind target set are also\n+                // pointed at our poisoning block (unless they're part of the cleanup path).\n+                if let Some(unwind @ None) = block.terminator_mut().unwind_mut() {\n+                    *unwind = Some(poison_block);\n+                }\n+            }\n         }\n     }\n \n@@ -1080,7 +1106,7 @@ fn create_generator_resume_function<'tcx>(\n         );\n     }\n \n-    if can_unwind(tcx, body) {\n+    if can_unwind {\n         cases.insert(\n             2,\n             (POISONED, insert_panic_block(tcx, body, ResumedAfterPanic(generator_kind))),"}]}