{"sha": "1dafe6d1c328d2f0580763e8438a227e490deb10", "node_id": "C_kwDOAAsO6NoAKDFkYWZlNmQxYzMyOGQyZjA1ODA3NjNlODQzOGEyMjdlNDkwZGViMTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-15T09:35:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-15T09:35:45Z"}, "message": "Auto merge of #88540 - ibraheemdev:swap-unchecked, r=kennytm\n\nadd `slice::swap_unchecked`\n\nAn unsafe version of `slice::swap` that does not do bounds checking.", "tree": {"sha": "55e620682c5ded6496738c1c4c06bdb29ad4d44c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55e620682c5ded6496738c1c4c06bdb29ad4d44c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dafe6d1c328d2f0580763e8438a227e490deb10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dafe6d1c328d2f0580763e8438a227e490deb10", "html_url": "https://github.com/rust-lang/rust/commit/1dafe6d1c328d2f0580763e8438a227e490deb10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dafe6d1c328d2f0580763e8438a227e490deb10/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72d66064e77281536588189a916af28a1819b313", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d66064e77281536588189a916af28a1819b313", "html_url": "https://github.com/rust-lang/rust/commit/72d66064e77281536588189a916af28a1819b313"}, {"sha": "cf12732a38a2c038c8cbd5e0266cb38c43cb0c5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf12732a38a2c038c8cbd5e0266cb38c43cb0c5d", "html_url": "https://github.com/rust-lang/rust/commit/cf12732a38a2c038c8cbd5e0266cb38c43cb0c5d"}], "stats": {"total": 98, "additions": 85, "deletions": 13}, "files": [{"sha": "c0e0589d5edeed1ca238b30b35f9bd3e5bb3d585", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1dafe6d1c328d2f0580763e8438a227e490deb10/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dafe6d1c328d2f0580763e8438a227e490deb10/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=1dafe6d1c328d2f0580763e8438a227e490deb10", "patch": "@@ -560,15 +560,52 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn swap(&mut self, a: usize, b: usize) {\n-        // Can't take two mutable loans from one vector, so instead use raw pointers.\n-        let pa = ptr::addr_of_mut!(self[a]);\n-        let pb = ptr::addr_of_mut!(self[b]);\n-        // SAFETY: `pa` and `pb` have been created from safe mutable references and refer\n-        // to elements in the slice and therefore are guaranteed to be valid and aligned.\n-        // Note that accessing the elements behind `a` and `b` is checked and will\n-        // panic when out of bounds.\n+        let _ = &self[a];\n+        let _ = &self[b];\n+\n+        // SAFETY: we just checked that both `a` and `b` are in bounds\n+        unsafe { self.swap_unchecked(a, b) }\n+    }\n+\n+    /// Swaps two elements in the slice, without doing bounds checking.\n+    ///\n+    /// For a safe alternative see [`swap`].\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * a - The index of the first element\n+    /// * b - The index of the second element\n+    ///\n+    /// # Safety\n+    ///\n+    /// Calling this method with an out-of-bounds index is *[undefined behavior]*.\n+    /// The caller has to ensure that `a < self.len()` and `b < self.len()`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_swap_unchecked)]\n+    ///\n+    /// let mut v = [\"a\", \"b\", \"c\", \"d\"];\n+    /// // SAFETY: we know that 1 and 3 are both indices of the slice\n+    /// unsafe { v.swap_unchecked(1, 3) };\n+    /// assert!(v == [\"a\", \"d\", \"c\", \"b\"]);\n+    /// ```\n+    ///\n+    /// [`swap`]: slice::swap\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    #[unstable(feature = \"slice_swap_unchecked\", issue = \"88539\")]\n+    pub unsafe fn swap_unchecked(&mut self, a: usize, b: usize) {\n+        #[cfg(debug_assertions)]\n+        {\n+            let _ = &self[a];\n+            let _ = &self[b];\n+        }\n+\n+        let ptr = self.as_mut_ptr();\n+        // SAFETY: caller has to guarantee that `a < self.len()` and `b < self.len()`\n         unsafe {\n-            ptr::swap(pa, pb);\n+            ptr::swap(ptr.add(a), ptr.add(b));\n         }\n     }\n \n@@ -675,11 +712,7 @@ impl<T> [T] {\n             // The resulting pointers `pa` and `pb` are therefore valid and\n             // aligned, and can be read from and written to.\n             unsafe {\n-                // Unsafe swap to avoid the bounds check in safe swap.\n-                let ptr = self.as_mut_ptr();\n-                let pa = ptr.add(i);\n-                let pb = ptr.add(ln - i - 1);\n-                ptr::swap(pa, pb);\n+                self.swap_unchecked(i, ln - i - 1);\n             }\n             i += 1;\n         }"}, {"sha": "b6a326f3d7368007b3453ccf56fee296d6476e5e", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1dafe6d1c328d2f0580763e8438a227e490deb10/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dafe6d1c328d2f0580763e8438a227e490deb10/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=1dafe6d1c328d2f0580763e8438a227e490deb10", "patch": "@@ -2152,3 +2152,42 @@ fn test_slice_fill_with_uninit() {\n     let mut a = [MaybeUninit::<u8>::uninit(); 10];\n     a.fill(MaybeUninit::uninit());\n }\n+\n+#[test]\n+fn test_swap() {\n+    let mut x = [\"a\", \"b\", \"c\", \"d\"];\n+    x.swap(1, 3);\n+    assert_eq!(x, [\"a\", \"d\", \"c\", \"b\"]);\n+    x.swap(0, 3);\n+    assert_eq!(x, [\"b\", \"d\", \"c\", \"a\"]);\n+}\n+\n+mod swap_panics {\n+    #[test]\n+    #[should_panic(expected = \"index out of bounds: the len is 4 but the index is 4\")]\n+    fn index_a_equals_len() {\n+        let mut x = [\"a\", \"b\", \"c\", \"d\"];\n+        x.swap(4, 2);\n+    }\n+\n+    #[test]\n+    #[should_panic(expected = \"index out of bounds: the len is 4 but the index is 4\")]\n+    fn index_b_equals_len() {\n+        let mut x = [\"a\", \"b\", \"c\", \"d\"];\n+        x.swap(2, 4);\n+    }\n+\n+    #[test]\n+    #[should_panic(expected = \"index out of bounds: the len is 4 but the index is 5\")]\n+    fn index_a_greater_than_len() {\n+        let mut x = [\"a\", \"b\", \"c\", \"d\"];\n+        x.swap(5, 2);\n+    }\n+\n+    #[test]\n+    #[should_panic(expected = \"index out of bounds: the len is 4 but the index is 5\")]\n+    fn index_b_greater_than_len() {\n+        let mut x = [\"a\", \"b\", \"c\", \"d\"];\n+        x.swap(2, 5);\n+    }\n+}"}]}