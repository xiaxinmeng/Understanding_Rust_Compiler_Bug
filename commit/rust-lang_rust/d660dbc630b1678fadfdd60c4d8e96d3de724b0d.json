{"sha": "d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NjBkYmM2MzBiMTY3OGZhZGZkZDYwYzRkOGU5NmQzZGU3MjRiMGQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-30T16:21:25Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-20T13:34:50Z"}, "message": "Check associated type satisfy their bounds\n\nThis was currently only happening due to eager normalization, which\nisn't possible if there's specialization or bound variables.", "tree": {"sha": "a1886b5f49133548c5086476324029553cb6d480", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1886b5f49133548c5086476324029553cb6d480"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "html_url": "https://github.com/rust-lang/rust/commit/d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04e589ced8a48818f93d6daff94a4f85e3b07271", "url": "https://api.github.com/repos/rust-lang/rust/commits/04e589ced8a48818f93d6daff94a4f85e3b07271", "html_url": "https://github.com/rust-lang/rust/commit/04e589ced8a48818f93d6daff94a4f85e3b07271"}], "stats": {"total": 631, "additions": 625, "deletions": 6}, "files": [{"sha": "98c341f4bed411c75546fdaf9272d6cb85cf860c", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 154, "deletions": 4, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -4,15 +4,17 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit;\n use rustc_hir::{GenericParamKind, ImplItemKind, TraitItemKind};\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n+use rustc_middle::ty;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::subst::{InternalSubsts, Subst};\n+use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::util::ExplicitSelf;\n-use rustc_middle::ty::{self, GenericParamDefKind, TyCtxt};\n+use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt, WithConstness};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n \n use super::{potentially_plural_count, FnCtxt, Inherited};\n+use std::iter;\n \n /// Checks that a method from an impl conforms to the signature of\n /// the same method as declared in the trait.\n@@ -1057,13 +1059,15 @@ crate fn compare_ty_impl<'tcx>(\n     let _: Result<(), ErrorReported> = (|| {\n         compare_number_of_generics(tcx, impl_ty, impl_ty_span, trait_ty, trait_item_span)?;\n \n-        compare_type_predicate_entailment(tcx, impl_ty, impl_ty_span, trait_ty, impl_trait_ref)\n+        compare_type_predicate_entailment(tcx, impl_ty, impl_ty_span, trait_ty, impl_trait_ref)?;\n+\n+        compare_projection_bounds(tcx, trait_ty, impl_ty, impl_ty_span, impl_trait_ref)\n     })();\n }\n \n /// The equivalent of [compare_predicate_entailment], but for associated types\n /// instead of associated functions.\n-fn compare_type_predicate_entailment(\n+fn compare_type_predicate_entailment<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_ty: &ty::AssocItem,\n     impl_ty_span: Span,\n@@ -1165,6 +1169,152 @@ fn compare_type_predicate_entailment(\n     })\n }\n \n+/// Validate that `ProjectionCandidate`s created for this associated type will\n+/// be valid.\n+///\n+/// Usually given\n+///\n+/// trait X { type Y: Copy } impl X for T { type Y = S; }\n+///\n+/// We are able to normalize `<T as X>::U` to `S`, and so when we check the\n+/// impl is well-formed we have to prove `S: Copy`.\n+///\n+/// For default associated types the normalization is not possible (the value\n+/// from the impl could be overridden). We also can't normalize generic\n+/// associated types (yet) because they contain bound parameters.\n+fn compare_projection_bounds<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    trait_ty: &ty::AssocItem,\n+    impl_ty: &ty::AssocItem,\n+    impl_ty_span: Span,\n+    impl_trait_ref: ty::TraitRef<'tcx>,\n+) -> Result<(), ErrorReported> {\n+    let is_gat = !tcx.generics_of(impl_ty.def_id).params.is_empty();\n+    if impl_ty.defaultness.is_final() && !is_gat {\n+        // For \"final\", non-generic associate type implementations, we\n+        // don't need this as described above.\n+        return Ok(());\n+    }\n+\n+    let param_env = tcx.param_env(impl_ty.def_id);\n+\n+    let impl_substs = InternalSubsts::identity_for_item(tcx, impl_ty.container.id());\n+    let impl_ty_value = tcx.type_of(impl_ty.def_id);\n+\n+    // Map the predicate from the trait to the corresponding one for the impl.\n+    // For example:\n+    //\n+    // trait X<A> { type Y<'a>: PartialEq<A> } impl X for T { type Y<'a> = &'a S; }\n+    // impl<'x> X<&'x u32> for () { type Y<'c> = &'c u32; }\n+    //\n+    // For the `for<'a> <<Self as X<A>>::Y<'a>: PartialEq<A>` bound, this\n+    // function would translate and partially normalize\n+    // `[<Self as X<A>>::Y<'a>, A]` to `[&'a u32, &'x u32]`.\n+    let translate_predicate_substs = move |predicate_substs: SubstsRef<'tcx>| {\n+        let normalized_self = if !is_gat {\n+            // projection_predicates only includes projections where the\n+            // substs of the trait ref are exactly the trait's identity\n+            // substs, so we can simply return the value from the impl.\n+            impl_ty_value\n+        } else {\n+            let predicate_self_ty = predicate_substs.type_at(0);\n+            let impl_ty_substs = if let ty::Projection(p) = predicate_self_ty.kind {\n+                assert!(\n+                    p.item_def_id == trait_ty.def_id,\n+                    \"projection_predicates returned predicate for the wrong type: {}\",\n+                    predicate_self_ty,\n+                );\n+                p.substs.rebase_onto(tcx, impl_trait_ref.def_id, impl_substs)\n+            } else {\n+                bug!(\n+                    \"projection_predicates returned predicate for the wrong type `{}`\",\n+                    predicate_self_ty,\n+                );\n+            };\n+            impl_ty_value.subst(tcx, impl_ty_substs)\n+        };\n+\n+        tcx.mk_substs(\n+            iter::once(normalized_self.into())\n+                .chain(predicate_substs[1..].iter().map(|s| s.subst(tcx, impl_trait_ref.substs))),\n+        )\n+    };\n+\n+    tcx.infer_ctxt().enter(move |infcx| {\n+        let inh = Inherited::new(infcx, impl_ty.def_id.expect_local());\n+        let infcx = &inh.infcx;\n+        let mut selcx = traits::SelectionContext::new(&infcx);\n+\n+        let impl_ty_hir_id = tcx.hir().as_local_hir_id(impl_ty.def_id.expect_local());\n+        let normalize_cause = traits::ObligationCause::misc(impl_ty_span, impl_ty_hir_id);\n+        let cause = ObligationCause::new(\n+            impl_ty_span,\n+            impl_ty_hir_id,\n+            ObligationCauseCode::ItemObligation(trait_ty.def_id),\n+        );\n+\n+        let predicates = tcx.projection_predicates(trait_ty.def_id);\n+\n+        debug!(\"compare_projection_bounds: projection_predicates={:?}\", predicates);\n+\n+        for predicate in predicates {\n+            let concrete_ty_predicate = match predicate.kind() {\n+                ty::PredicateKind::Trait(poly_tr, c) => poly_tr\n+                    .map_bound(|tr| {\n+                        let trait_substs = translate_predicate_substs(tr.trait_ref.substs);\n+                        ty::TraitRef { def_id: tr.def_id(), substs: trait_substs }\n+                    })\n+                    .with_constness(*c)\n+                    .to_predicate(tcx),\n+                ty::PredicateKind::Projection(poly_projection) => poly_projection\n+                    .map_bound(|projection| {\n+                        let projection_substs =\n+                            translate_predicate_substs(projection.projection_ty.substs);\n+                        ty::ProjectionPredicate {\n+                            projection_ty: ty::ProjectionTy {\n+                                substs: projection_substs,\n+                                item_def_id: projection.projection_ty.item_def_id,\n+                            },\n+                            ty: projection.ty.subst(tcx, impl_trait_ref.substs),\n+                        }\n+                    })\n+                    .to_predicate(tcx),\n+                _ => bug!(\"unexepected projection predicate kind: `{:?}`\", predicate),\n+            };\n+\n+            let traits::Normalized { value: normalized_predicate, obligations } = traits::normalize(\n+                &mut selcx,\n+                param_env,\n+                normalize_cause.clone(),\n+                &concrete_ty_predicate,\n+            );\n+\n+            debug!(\"compare_projection_bounds: normalized predicate = {:?}\", normalized_predicate);\n+\n+            inh.register_predicates(obligations);\n+            inh.register_predicate(traits::Obligation::new(\n+                cause.clone(),\n+                param_env,\n+                normalized_predicate,\n+            ));\n+        }\n+\n+        // Check that all obligations are satisfied by the implementation's\n+        // version.\n+        if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n+            infcx.report_fulfillment_errors(errors, None, false);\n+            return Err(ErrorReported);\n+        }\n+\n+        // Finally, resolve all regions. This catches wily misuses of\n+        // lifetime parameters.\n+        let fcx = FnCtxt::new(&inh, param_env, impl_ty_hir_id);\n+        fcx.regionck_item(impl_ty_hir_id, impl_ty_span, &[]);\n+\n+        Ok(())\n+    })\n+}\n+\n fn assoc_item_kind_str(impl_item: &ty::AssocItem) -> &'static str {\n     match impl_item.kind {\n         ty::AssocKind::Const => \"const\","}, {"sha": "71f9b2967dc5838c8178170a7f44fbabf9c0e553", "filename": "src/test/ui/generic-associated-types/issue-68641-check-gat-bounds.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.rs?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,32 @@\n+// Regression test for #68641\n+\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n+\n+trait UnsafeCopy {\n+    type Item<'a>: Copy;\n+\n+    fn copy<'a>(item: &Self::Item<'a>) -> Self::Item<'a> {\n+        *item\n+    }\n+}\n+\n+impl<T> UnsafeCopy for T {\n+    type Item<'a> = T;\n+    //~^ ERROR the trait bound `T: std::marker::Copy` is not satisfied\n+}\n+\n+fn main() {\n+    let mut s = String::from(\"Hello world!\");\n+\n+    let copy = String::copy(&s);\n+\n+    // Do we indeed point to the samme memory?\n+    assert!(s.as_ptr() == copy.as_ptr());\n+\n+    // Any use of `copy` is certeinly UB after this\n+    drop(s);\n+\n+    // UB UB UB UB UB!!\n+    println!(\"{}\", copy);\n+}"}, {"sha": "eeff7c340ac962fa2e67ecdacc122647d2a2dc30", "filename": "src/test/ui/generic-associated-types/issue-68641-check-gat-bounds.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,26 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68641-check-gat-bounds.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/issue-68641-check-gat-bounds.rs:15:5\n+   |\n+LL | trait UnsafeCopy {\n+   | ---------------- required by `UnsafeCopy`\n+...\n+LL |     type Item<'a> = T;\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: std::marker::Copy> UnsafeCopy for T {\n+   |       ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c99073c13284df70da827045e47a710595031c46", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.rs?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #68642\n+\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n+\n+trait Fun {\n+    type F<'a>: Fn() -> u32;\n+\n+    fn callme<'a>(f: Self::F<'a>) -> u32 {\n+        f()\n+    }\n+}\n+\n+impl<T> Fun for T {\n+    type F<'a> = Self;\n+    //~^ ERROR expected a `std::ops::Fn<()>` closure, found `T`\n+}\n+\n+fn main() {\n+    <fn() -> usize>::callme(|| 1);\n+}"}, {"sha": "b3d4b8d465180611480b1837e8c0c625885ba71b", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,28 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68642-broken-llvm-ir.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0277]: expected a `std::ops::Fn<()>` closure, found `T`\n+  --> $DIR/issue-68642-broken-llvm-ir.rs:15:5\n+   |\n+LL | trait Fun {\n+   | --------- required by `Fun`\n+...\n+LL |     type F<'a> = Self;\n+   |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n+   |\n+   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n+   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: std::ops::Fn<()>> Fun for T {\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "24133e75cccee0f37289820cd5e3c5825eb06380", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.rs?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #68643\n+\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n+\n+trait Fun {\n+    type F<'a>: Fn() -> u32;\n+\n+    fn callme<'a>(f: Self::F<'a>) -> u32 {\n+        f()\n+    }\n+}\n+\n+impl<T> Fun for T {\n+    type F<'a> = Self;\n+    //~^ ERROR expected a `std::ops::Fn<()>` closure, found `T`\n+}\n+\n+pub fn main() {\n+    <fn()>::callme(|| {});\n+}"}, {"sha": "6e23fe02de8cd8ab33df4b33564cfe0b32c0bbd6", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,28 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68643-broken-mir.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0277]: expected a `std::ops::Fn<()>` closure, found `T`\n+  --> $DIR/issue-68643-broken-mir.rs:15:5\n+   |\n+LL | trait Fun {\n+   | --------- required by `Fun`\n+...\n+LL |     type F<'a> = Self;\n+   |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n+   |\n+   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n+   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: std::ops::Fn<()>> Fun for T {\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "22620c61b83903c8294e5c7646985abb72a2f75a", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.rs?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #68644\n+\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n+\n+trait Fun {\n+    type F<'a>: Fn() -> u32;\n+\n+    fn callme<'a>(f: Self::F<'a>) -> u32 {\n+        f()\n+    }\n+}\n+\n+impl<T> Fun for T {\n+    type F<'a> = Self;\n+    //~^ ERROR expected a `std::ops::Fn<()>` closure, found `T`\n+}\n+\n+fn main() {\n+    <u8>::callme(0);\n+}"}, {"sha": "234f5c8a0cc021cbc41cc756e74bc03e24d16995", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,28 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68644-codegen-selection.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0277]: expected a `std::ops::Fn<()>` closure, found `T`\n+  --> $DIR/issue-68644-codegen-selection.rs:15:5\n+   |\n+LL | trait Fun {\n+   | --------- required by `Fun`\n+...\n+LL |     type F<'a> = Self;\n+   |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n+   |\n+   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n+   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: std::ops::Fn<()>> Fun for T {\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "423b80e8476f445cc9a288820c0557f5201ba45e", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.rs?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #68645\n+\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n+\n+trait Fun {\n+    type F<'a>: Fn() -> u32;\n+\n+    fn callme<'a>(f: Self::F<'a>) -> u32 {\n+        f()\n+    }\n+}\n+\n+impl<T> Fun for T {\n+    type F<'a> = Self;\n+    //~^ ERROR expected a `std::ops::Fn<()>` closure, found `T`\n+}\n+\n+fn main() {\n+    <&dyn Iterator<Item = u8>>::callme(&std::iter::once(1));\n+}"}, {"sha": "ac2d5063fbb5d1a2122dbe324c58bce960707d9d", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,28 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68645-codegen-fulfillment.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0277]: expected a `std::ops::Fn<()>` closure, found `T`\n+  --> $DIR/issue-68645-codegen-fulfillment.rs:15:5\n+   |\n+LL | trait Fun {\n+   | --------- required by `Fun`\n+...\n+LL |     type F<'a> = Self;\n+   |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n+   |\n+   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n+   = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: std::ops::Fn<()>> Fun for T {\n+   |       ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4ccd42ba6432d22027e8f272461d1c9bd05bc4d5", "filename": "src/test/ui/generic-associated-types/issue-68656-unsized-values.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.rs?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,22 @@\n+// Regression test for #68656\n+\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types` is incomplete and may not\n+\n+trait UnsafeCopy<T: Copy> {\n+    type Item<'a>: std::ops::Deref<Target = T>;\n+\n+    fn bug<'a>(item: &Self::Item<'a>) -> () {\n+        let x: T = **item;\n+        &x as *const _;\n+    }\n+}\n+\n+impl<T: Copy + std::ops::Deref> UnsafeCopy<T> for T {\n+    type Item<'a> = T;\n+    //~^ ERROR type mismatch resolving `<T as std::ops::Deref>::Target == T`\n+}\n+\n+fn main() {\n+    <&'static str>::bug(&\"\");\n+}"}, {"sha": "e4eb7991f7637be16c0221a00a105ffc9fb1305c", "filename": "src/test/ui/generic-associated-types/issue-68656-unsized-values.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,30 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68656-unsized-values.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0271]: type mismatch resolving `<T as std::ops::Deref>::Target == T`\n+  --> $DIR/issue-68656-unsized-values.rs:16:5\n+   |\n+LL | trait UnsafeCopy<T: Copy> {\n+   | ------------------------- required by `UnsafeCopy`\n+...\n+LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<T> for T {\n+   |      - this type parameter\n+LL |     type Item<'a> = T;\n+   |     ^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found associated type\n+   |\n+   = note: expected type parameter `T`\n+             found associated type `<T as std::ops::Deref>::Target`\n+help: consider further restricting this bound\n+   |\n+LL | impl<T: Copy + std::ops::Deref + std::ops::Deref<Target = T>> UnsafeCopy<T> for T {\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "a84391b94d1de3fd60eac77f439330c959cb8539", "filename": "src/test/ui/issues/issue-38091.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fissues%2Fissue-38091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fissues%2Fissue-38091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38091.rs?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -1,4 +1,3 @@\n-// run-pass\n #![feature(specialization)]\n //~^ WARN the feature `specialization` is incomplete\n \n@@ -8,6 +7,7 @@ trait Iterate<'a> {\n }\n impl<'a, T> Iterate<'a> for T where T: Check {\n     default type Ty = ();\n+    //~^ ERROR the trait bound `(): Valid` is not satisfied\n     default fn iterate(self) {}\n }\n "}, {"sha": "4d3369c5b648617c02fa780029470535c2345b6c", "filename": "src/test/ui/issues/issue-38091.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -7,5 +7,15 @@ LL | #![feature(specialization)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n \n-warning: 1 warning emitted\n+error[E0277]: the trait bound `(): Valid` is not satisfied\n+  --> $DIR/issue-38091.rs:8:5\n+   |\n+LL | trait Iterate<'a> {\n+   | ----------------- required by `Iterate`\n+...\n+LL |     default type Ty = ();\n+   |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Valid` is not implemented for `()`\n+\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "272a5e3fe10c614d74c3d45e7bbebd4e29f60e8e", "filename": "src/test/ui/specialization/deafult-associated-type-bound-1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.rs?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,24 @@\n+// Check that we check that default associated types satisfy the required\n+// bounds on them.\n+\n+#![feature(specialization)]\n+//~^ WARNING `specialization` is incomplete\n+\n+trait X {\n+    type U: Clone;\n+    fn unsafe_clone(&self, x: Option<&Self::U>) {\n+        x.cloned();\n+    }\n+}\n+\n+// We cannot normalize `<T as X>::U` to `str` here, because the default could\n+// be overridden. The error here must therefore be found by a method other than\n+// normalization.\n+impl<T> X for T {\n+    default type U = str;\n+    //~^ ERROR the trait bound `str: std::clone::Clone` is not satisfied\n+}\n+\n+pub fn main() {\n+    1.unsafe_clone(None);\n+}"}, {"sha": "8b3d6a913a7a061181a1b22d0623d9426cba302a", "filename": "src/test/ui/specialization/deafult-associated-type-bound-1.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/deafult-associated-type-bound-1.rs:4:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+error[E0277]: the trait bound `str: std::clone::Clone` is not satisfied\n+  --> $DIR/deafult-associated-type-bound-1.rs:18:5\n+   |\n+LL | trait X {\n+   | ------- required by `X`\n+...\n+LL |     default type U = str;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `str`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "0a21b1f09106ba36feeef0cd479eb277603586ba", "filename": "src/test/ui/specialization/deafult-associated-type-bound-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.rs?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,22 @@\n+// Check that generic predicates are also checked for default associated types.\n+#![feature(specialization)]\n+//~^ WARNING `specialization` is incomplete\n+\n+trait X<T> {\n+    type U: PartialEq<T>;\n+    fn unsafe_compare(x: Option<Self::U>, y: Option<T>) {\n+        match (x, y) {\n+            (Some(a), Some(b)) => a == b,\n+            _ => false,\n+        };\n+    }\n+}\n+\n+impl<B: 'static, T> X<B> for T {\n+    default type U = &'static B;\n+    //~^ ERROR can't compare `&'static B` with `B`\n+}\n+\n+pub fn main() {\n+    <i32 as X<i32>>::unsafe_compare(None, None);\n+}"}, {"sha": "4d21f47051fab017cd9f7c159dba0cb8ce701cdf", "filename": "src/test/ui/specialization/deafult-associated-type-bound-2.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/deafult-associated-type-bound-2.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+error[E0277]: can't compare `&'static B` with `B`\n+  --> $DIR/deafult-associated-type-bound-2.rs:16:5\n+   |\n+LL | trait X<T> {\n+   | ---------- required by `X`\n+...\n+LL |     default type U = &'static B;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `&'static B == B`\n+   |\n+   = help: the trait `std::cmp::PartialEq<B>` is not implemented for `&'static B`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8a94ea658d2d0c72f1d842fdfccc20e663fdd525", "filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.rs?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,27 @@\n+// Check that default generics associated types are validated.\n+\n+#![feature(specialization)]\n+#![feature(generic_associated_types)]\n+//~^^ WARNING `specialization` is incomplete\n+//~^^ WARNING the feature `generic_associated_types` is incomplete\n+\n+trait X {\n+    type U<'a>: PartialEq<&'a Self>;\n+    fn unsafe_compare<'b>(x: Option<Self::U<'b>>, y: Option<&'b Self>) {\n+        match (x, y) {\n+            (Some(a), Some(b)) => a == b,\n+            _ => false,\n+        };\n+    }\n+}\n+\n+impl<T: 'static> X for T {\n+    default type U<'a> = &'a T;\n+    //~^ ERROR can't compare `T` with `T`\n+}\n+\n+struct NotComparable;\n+\n+pub fn main() {\n+    <NotComparable as X>::unsafe_compare(None, None);\n+}"}, {"sha": "1aac9e70d87d8fae74a925621626db527098dcfc", "filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d660dbc630b1678fadfdd60c4d8e96d3de724b0d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr?ref=d660dbc630b1678fadfdd60c4d8e96d3de724b0d", "patch": "@@ -0,0 +1,36 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/deafult-generic-associated-type-bound.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/deafult-generic-associated-type-bound.rs:4:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0277]: can't compare `T` with `T`\n+  --> $DIR/deafult-generic-associated-type-bound.rs:19:5\n+   |\n+LL | trait X {\n+   | ------- required by `X`\n+...\n+LL |     default type U<'a> = &'a T;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `T == T`\n+   |\n+   = help: the trait `std::cmp::PartialEq` is not implemented for `T`\n+   = note: required because of the requirements on the impl of `for<'a> std::cmp::PartialEq` for `&'a T`\n+help: consider further restricting this bound\n+   |\n+LL | impl<T: 'static + std::cmp::PartialEq> X for T {\n+   |                 ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}]}