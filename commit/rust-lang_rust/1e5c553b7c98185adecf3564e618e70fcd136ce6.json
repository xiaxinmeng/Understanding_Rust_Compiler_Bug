{"sha": "1e5c553b7c98185adecf3564e618e70fcd136ce6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNWM1NTNiN2M5ODE4NWFkZWNmMzU2NGU2MThlNzBmY2QxMzZjZTY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-15T02:03:28Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-18T00:54:11Z"}, "message": "make Eq implementation O(n)", "tree": {"sha": "d775dca7f1cf529b24f3f302b30fff36ee13ec7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d775dca7f1cf529b24f3f302b30fff36ee13ec7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e5c553b7c98185adecf3564e618e70fcd136ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e5c553b7c98185adecf3564e618e70fcd136ce6", "html_url": "https://github.com/rust-lang/rust/commit/1e5c553b7c98185adecf3564e618e70fcd136ce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e5c553b7c98185adecf3564e618e70fcd136ce6/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cc9a7582c11201c76745f4d190aaa21f4073e32", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc9a7582c11201c76745f4d190aaa21f4073e32", "html_url": "https://github.com/rust-lang/rust/commit/9cc9a7582c11201c76745f4d190aaa21f4073e32"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "a954860a789b42ee78a44c8d0d5833467175c6c1", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1e5c553b7c98185adecf3564e618e70fcd136ce6/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5c553b7c98185adecf3564e618e70fcd136ce6/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=1e5c553b7c98185adecf3564e618e70fcd136ce6", "patch": "@@ -39,19 +39,26 @@ pub struct TreeMap<K: Ord, V> {\n     priv length: uint\n }\n \n-// FIXME: this is a naive O(n*log(m)) implementation, could be O(n)\n-impl <K: Ord, V: Eq> TreeMap<K, V>: Eq {\n+impl <K: Eq Ord, V: Eq> TreeMap<K, V>: Eq {\n     pure fn eq(&self, other: &TreeMap<K, V>) -> bool {\n         if self.len() != other.len() {\n             return false\n         }\n-        for self.each |x, y| {\n-            match other.find(x) {\n-                Some(z) => if z != y { return false },\n-                None => return false\n+        unsafe { // purity workaround\n+            let mut x = self.iter();\n+            let mut y = other.iter();\n+            for self.len().times {\n+                // ICE: x.next() != y.next()\n+\n+                let (x1, x2) = x.next().unwrap();\n+                let (y1, y2) = y.next().unwrap();\n+\n+                if x1 != y1 || x2 != y2 {\n+                    return false\n+                }\n             }\n+            true\n         }\n-        true\n     }\n     pure fn ne(&self, other: &TreeMap<K, V>) -> bool {\n         !self.eq(other)\n@@ -137,8 +144,8 @@ impl <K: Ord, V> TreeMap<K, V> {\n         ret\n     }\n \n-    /// Get a lazy iterator over the nodes in the map. Requires that it\n-    /// be frozen (immutable).\n+    /// Get a lazy iterator over the key-value pairs in the map.\n+    /// Requires that it be frozen (immutable).\n     fn iter(&self) -> TreeMapIterator/&self<K, V> {\n         TreeMapIterator{stack: ~[], node: &self.root}\n     }\n@@ -183,7 +190,7 @@ impl <T: Ord> TreeSet<T>: iter::BaseIter<T> {\n     pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n \n-impl <T: Ord> TreeSet<T>: Eq {\n+impl <T: Eq Ord> TreeSet<T>: Eq {\n     pure fn eq(&self, other: &TreeSet<T>) -> bool { self.map == other.map }\n     pure fn ne(&self, other: &TreeSet<T>) -> bool { self.map != other.map }\n }"}]}