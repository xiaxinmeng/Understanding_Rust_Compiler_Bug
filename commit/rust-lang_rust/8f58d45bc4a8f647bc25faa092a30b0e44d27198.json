{"sha": "8f58d45bc4a8f647bc25faa092a30b0e44d27198", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNThkNDViYzRhOGY2NDdiYzI1ZmFhMDkyYTMwYjBlNDRkMjcxOTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-13T09:12:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-13T09:12:28Z"}, "message": "Merge #5739\n\n5739: Cleanup **Move Guard** assist\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6fa8fa4bf84db66c4ef5c167fa6af4e54379d3bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fa8fa4bf84db66c4ef5c167fa6af4e54379d3bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f58d45bc4a8f647bc25faa092a30b0e44d27198", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNQP8CRBK7hj4Ov3rIwAAdHIIAI36z8TU1Zo06yABp2jCvOO5\n0n5H7Gt87Zidn+MMatjGp9P+1kNYbwMjCb/jcJ9bbljsxkqPifl3p/7LSxY94zLP\n23GKtxDISHY0WiptDK2O3uLO+oF2VH2HNgQOQ5LbKOoyaKMGMOD2PVtuiFUuHqmq\nqrS6asaIX+92IsyBXYh9y6oBE450O0/HyPfkpbeVdnGa+N5zd6Wt7wuUqeVp5gp+\nSSST53Qmn42EP4qjR1yNGBBHnD/pRO3ckPWwFHQ4uxy2ekr8B/DLy2VvOLkh1ogU\nrn37QfN+8k3jVFe9lRt5OvnXZZ3pm20TG7Fp4JahpnVPjtSviyprXFrVyyKR3Bk=\n=9HQr\n-----END PGP SIGNATURE-----\n", "payload": "tree 6fa8fa4bf84db66c4ef5c167fa6af4e54379d3bb\nparent 982b29925275403697b52dd88bd79868ea8b67d9\nparent 26b98b07aa0e4430bc872b28eadbc822cfee7b6e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597309948 +0000\ncommitter GitHub <noreply@github.com> 1597309948 +0000\n\nMerge #5739\n\n5739: Cleanup **Move Guard** assist\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f58d45bc4a8f647bc25faa092a30b0e44d27198", "html_url": "https://github.com/rust-lang/rust/commit/8f58d45bc4a8f647bc25faa092a30b0e44d27198", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f58d45bc4a8f647bc25faa092a30b0e44d27198/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "982b29925275403697b52dd88bd79868ea8b67d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/982b29925275403697b52dd88bd79868ea8b67d9", "html_url": "https://github.com/rust-lang/rust/commit/982b29925275403697b52dd88bd79868ea8b67d9"}, {"sha": "26b98b07aa0e4430bc872b28eadbc822cfee7b6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/26b98b07aa0e4430bc872b28eadbc822cfee7b6e", "html_url": "https://github.com/rust-lang/rust/commit/26b98b07aa0e4430bc872b28eadbc822cfee7b6e"}], "stats": {"total": 229, "additions": 112, "deletions": 117}, "files": [{"sha": "452115fe6721882d49cb79a518531bc40c6a82f4", "filename": "crates/ra_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 106, "deletions": 116, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/8f58d45bc4a8f647bc25faa092a30b0e44d27198/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f58d45bc4a8f647bc25faa092a30b0e44d27198/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=8f58d45bc4a8f647bc25faa092a30b0e44d27198", "patch": "@@ -1,5 +1,5 @@\n use syntax::{\n-    ast::{AstNode, IfExpr, MatchArm},\n+    ast::{edit::AstNodeEdit, make, AstNode, IfExpr, MatchArm},\n     SyntaxKind::WHITESPACE,\n };\n \n@@ -25,7 +25,9 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // fn handle(action: Action) {\n //     match action {\n-//         Action::Move { distance } => if distance > 10 { foo() },\n+//         Action::Move { distance } => if distance > 10 {\n+//             foo()\n+//         },\n //         _ => (),\n //     }\n // }\n@@ -35,9 +37,13 @@ pub(crate) fn move_guard_to_arm_body(acc: &mut Assists, ctx: &AssistContext) ->\n     let guard = match_arm.guard()?;\n     let space_before_guard = guard.syntax().prev_sibling_or_token();\n \n-    let guard_conditions = guard.expr()?;\n+    let guard_condition = guard.expr()?;\n     let arm_expr = match_arm.expr()?;\n-    let buf = format!(\"if {} {{ {} }}\", guard_conditions.syntax().text(), arm_expr.syntax().text());\n+    let if_expr = make::expr_if(\n+        make::condition(guard_condition, None),\n+        make::block_expr(None, Some(arm_expr.clone())),\n+    )\n+    .indent(arm_expr.indent_level());\n \n     let target = guard.syntax().text_range();\n     acc.add(\n@@ -53,7 +59,7 @@ pub(crate) fn move_guard_to_arm_body(acc: &mut Assists, ctx: &AssistContext) ->\n             };\n \n             edit.delete(guard.syntax().text_range());\n-            edit.replace_node_and_indent(arm_expr.syntax(), buf);\n+            edit.replace_ast(arm_expr, if_expr);\n         },\n     )\n }\n@@ -134,16 +140,14 @@ mod tests {\n         check_assist_target(\n             move_guard_to_arm_body,\n             r#\"\n-            fn f() {\n-                let t = 'a';\n-                let chars = \"abcd\";\n-                match t {\n-                    '\\r' <|>if chars.clone().next() == Some('\\n') => false,\n-                    _ => true\n-                }\n-            }\n-            \"#,\n-            r#\"if chars.clone().next() == Some('\\n')\"#,\n+fn main() {\n+    match 92 {\n+        x <|>if x > 10 => false,\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"if x > 10\"#,\n         );\n     }\n \n@@ -152,25 +156,23 @@ mod tests {\n         check_assist(\n             move_guard_to_arm_body,\n             r#\"\n-            fn f() {\n-                let t = 'a';\n-                let chars = \"abcd\";\n-                match t {\n-                    '\\r' <|>if chars.clone().next() == Some('\\n') => false,\n-                    _ => true\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match 92 {\n+        x <|>if x > 10 => false,\n+        _ => true\n+    }\n+}\n+\"#,\n             r#\"\n-            fn f() {\n-                let t = 'a';\n-                let chars = \"abcd\";\n-                match t {\n-                    '\\r' => if chars.clone().next() == Some('\\n') { false },\n-                    _ => true\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match 92 {\n+        x => if x > 10 {\n+            false\n+        },\n+        _ => true\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -179,21 +181,23 @@ mod tests {\n         check_assist(\n             move_guard_to_arm_body,\n             r#\"\n-            fn f() {\n-                match x {\n-                    <|>y @ 4 | y @ 5    if y > 5 => true,\n-                    _ => false\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match 92 {\n+        <|>x @ 4 | x @ 5    if x > 5 => true,\n+        _ => false\n+    }\n+}\n+\"#,\n             r#\"\n-            fn f() {\n-                match x {\n-                    y @ 4 | y @ 5 => if y > 5 { true },\n-                    _ => false\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match 92 {\n+        x @ 4 | x @ 5 => if x > 5 {\n+            true\n+        },\n+        _ => false\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -202,25 +206,21 @@ mod tests {\n         check_assist(\n             move_arm_cond_to_match_guard,\n             r#\"\n-            fn f() {\n-                let t = 'a';\n-                let chars = \"abcd\";\n-                match t {\n-                    '\\r' => if chars.clone().next() == Some('\\n') { <|>false },\n-                    _ => true\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match 92 {\n+        x => if x > 10 { <|>false },\n+        _ => true\n+    }\n+}\n+\"#,\n             r#\"\n-            fn f() {\n-                let t = 'a';\n-                let chars = \"abcd\";\n-                match t {\n-                    '\\r' if chars.clone().next() == Some('\\n') => false,\n-                    _ => true\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match 92 {\n+        x if x > 10 => false,\n+        _ => true\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -229,15 +229,13 @@ mod tests {\n         check_assist_not_applicable(\n             move_arm_cond_to_match_guard,\n             r#\"\n-            fn f() {\n-                let t = 'a';\n-                let chars = \"abcd\";\n-                match t {\n-                    '\\r' => if let Some(_) = chars.clone().next() { <|>false },\n-                    _ => true\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match 92 {\n+        x => if let 62 = x { <|>false },\n+        _ => true\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -246,25 +244,21 @@ mod tests {\n         check_assist(\n             move_arm_cond_to_match_guard,\n             r#\"\n-            fn f() {\n-                let t = 'a';\n-                let chars = \"abcd\";\n-                match t {\n-                    '\\r' => if chars.clone().next().is_some() { <|> },\n-                    _ => true\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match 92 {\n+        x => if x > 10 { <|> },\n+        _ => true\n+    }\n+}\n+\"#,\n             r#\"\n-            fn f() {\n-                let t = 'a';\n-                let chars = \"abcd\";\n-                match t {\n-                    '\\r' if chars.clone().next().is_some() => {  },\n-                    _ => true\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match 92 {\n+        x if x > 10 => {  },\n+        _ => true\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -273,31 +267,27 @@ mod tests {\n         check_assist(\n             move_arm_cond_to_match_guard,\n             r#\"\n-            fn f() {\n-                let mut t = 'a';\n-                let chars = \"abcd\";\n-                match t {\n-                    '\\r' => if chars.clone().next().is_some() {\n-                        t = 'e';<|>\n-                        false\n-                    },\n-                    _ => true\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match 92 {\n+        x => if x > 10 {\n+            92;<|>\n+            false\n+        },\n+        _ => true\n+    }\n+}\n+\"#,\n             r#\"\n-            fn f() {\n-                let mut t = 'a';\n-                let chars = \"abcd\";\n-                match t {\n-                    '\\r' if chars.clone().next().is_some() => {\n-                        t = 'e';\n-                        false\n-                    },\n-                    _ => true\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    match 92 {\n+        x if x > 10 => {\n+            92;\n+            false\n+        },\n+        _ => true\n+    }\n+}\n+\"#,\n         );\n     }\n }"}, {"sha": "d16e6fb0a63b2c6535a78f1c42ee28ffaa175cd2", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f58d45bc4a8f647bc25faa092a30b0e44d27198/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f58d45bc4a8f647bc25faa092a30b0e44d27198/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=8f58d45bc4a8f647bc25faa092a30b0e44d27198", "patch": "@@ -690,7 +690,9 @@ enum Action { Move { distance: u32 }, Stop }\n \n fn handle(action: Action) {\n     match action {\n-        Action::Move { distance } => if distance > 10 { foo() },\n+        Action::Move { distance } => if distance > 10 {\n+            foo()\n+        },\n         _ => (),\n     }\n }"}, {"sha": "190746e09e619d65eeb5294a41694381e0964e58", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f58d45bc4a8f647bc25faa092a30b0e44d27198/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f58d45bc4a8f647bc25faa092a30b0e44d27198/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=8f58d45bc4a8f647bc25faa092a30b0e44d27198", "patch": "@@ -601,6 +601,9 @@ pub trait AstNodeEdit: AstNode + Clone + Sized {\n         }\n         rewriter.rewrite_ast(self)\n     }\n+    fn indent_level(&self) -> IndentLevel {\n+        IndentLevel::from_node(self.syntax())\n+    }\n     #[must_use]\n     fn indent(&self, level: IndentLevel) -> Self {\n         Self::cast(level.increase_indent(self.syntax().clone())).unwrap()"}]}