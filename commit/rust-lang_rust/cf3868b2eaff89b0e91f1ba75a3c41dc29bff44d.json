{"sha": "cf3868b2eaff89b0e91f1ba75a3c41dc29bff44d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMzg2OGIyZWFmZjg5YjBlOTFmMWJhNzVhM2M0MWRjMjliZmY0NGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-23T17:44:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-23T17:44:25Z"}, "message": "Auto merge of #1358 - dtolnay:ci, r=RalfJung\n\nDisable interactive prompts in CI\n\nCloses #1357.", "tree": {"sha": "a3a429fb217f85723648e195a5389ecb61eb4624", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3a429fb217f85723648e195a5389ecb61eb4624"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf3868b2eaff89b0e91f1ba75a3c41dc29bff44d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf3868b2eaff89b0e91f1ba75a3c41dc29bff44d", "html_url": "https://github.com/rust-lang/rust/commit/cf3868b2eaff89b0e91f1ba75a3c41dc29bff44d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf3868b2eaff89b0e91f1ba75a3c41dc29bff44d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c73dc3a4d455209ca8b87388df4afc1ca535ffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c73dc3a4d455209ca8b87388df4afc1ca535ffa", "html_url": "https://github.com/rust-lang/rust/commit/7c73dc3a4d455209ca8b87388df4afc1ca535ffa"}, {"sha": "a4dd463eaf548de04c55296c8ed31516fe5c5983", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4dd463eaf548de04c55296c8ed31516fe5c5983", "html_url": "https://github.com/rust-lang/rust/commit/a4dd463eaf548de04c55296c8ed31516fe5c5983"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "ea2aa955ba4da808eeea7f1054424ee184c5889c", "filename": "README.md", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf3868b2eaff89b0e91f1ba75a3c41dc29bff44d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/cf3868b2eaff89b0e91f1ba75a3c41dc29bff44d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=cf3868b2eaff89b0e91f1ba75a3c41dc29bff44d", "patch": "@@ -127,16 +127,11 @@ MIRI_NIGHTLY=nightly-$(curl -s https://rust-lang.github.io/rustup-components-his\n echo \"Installing latest nightly with Miri: $MIRI_NIGHTLY\"\n rustup set profile minimal\n rustup default \"$MIRI_NIGHTLY\"\n-\n rustup component add miri\n-cargo miri setup\n \n cargo miri test\n ```\n \n-We use `cargo miri setup` to avoid getting interactive questions about the extra\n-setup needed for Miri.\n-\n ### Common Problems\n \n When using the above instructions, you may encounter a number of confusing compiler"}, {"sha": "17d7ecf8c8708ff7a15f01fff77769974f14b6a9", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cf3868b2eaff89b0e91f1ba75a3c41dc29bff44d/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3868b2eaff89b0e91f1ba75a3c41dc29bff44d/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=cf3868b2eaff89b0e91f1ba75a3c41dc29bff44d", "patch": "@@ -1,5 +1,6 @@\n #![feature(inner_deref)]\n \n+use std::env;\n use std::fs::{self, File};\n use std::io::{self, BufRead, Write};\n use std::ops::Not;\n@@ -247,7 +248,8 @@ fn xargo_version() -> Option<(u32, u32, u32)> {\n }\n \n fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n-    if ask {\n+    // Disable interactive prompts in CI (GitHub Actions, Travis, AppVeyor, etc).\n+    if ask && env::var_os(\"CI\").is_none() {\n         let mut buf = String::new();\n         print!(\"I will run `{:?}` to {}. Proceed? [Y/n] \", cmd, text);\n         io::stdout().flush().unwrap();\n@@ -270,14 +272,18 @@ fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n /// Performs the setup required to make `cargo miri` work: Getting a custom-built libstd. Then sets\n /// `MIRI_SYSROOT`. Skipped if `MIRI_SYSROOT` is already set, in which case we expect the user has\n /// done all this already.\n-fn setup(ask_user: bool) {\n+fn setup(subcommand: MiriCommand) {\n     if std::env::var(\"MIRI_SYSROOT\").is_ok() {\n-        if !ask_user {\n+        if subcommand == MiriCommand::Setup {\n             println!(\"WARNING: MIRI_SYSROOT already set, not doing anything.\")\n         }\n         return;\n     }\n \n+    // Subcommands other than `setup` will do a setup if necessary, but\n+    // interactively confirm first.\n+    let ask_user = subcommand != MiriCommand::Setup;\n+\n     // First, we need xargo.\n     if xargo_version().map_or(true, |v| v < XARGO_MIN_VERSION) {\n         if std::env::var(\"XARGO_CHECK\").is_ok() {\n@@ -360,7 +366,8 @@ path = \"lib.rs\"\n     File::create(dir.join(\"lib.rs\")).unwrap();\n     // Prepare xargo invocation.\n     let target = get_arg_flag_value(\"--target\");\n-    let print_sysroot = !ask_user && has_arg_flag(\"--print-sysroot\"); // whether we just print the sysroot path\n+    let print_sysroot = subcommand == MiriCommand::Setup\n+        && has_arg_flag(\"--print-sysroot\"); // whether we just print the sysroot path\n     let mut command = xargo_check();\n     command.arg(\"build\").arg(\"-q\");\n     command.current_dir(&dir);\n@@ -388,7 +395,7 @@ path = \"lib.rs\"\n     if print_sysroot {\n         // Print just the sysroot and nothing else; this way we do not need any escaping.\n         println!(\"{}\", sysroot.display());\n-    } else if !ask_user {\n+    } else if subcommand == MiriCommand::Setup {\n         println!(\"A libstd for Miri is now available in `{}`.\", sysroot.display());\n     }\n }\n@@ -435,8 +442,7 @@ fn in_cargo_miri() {\n     test_sysroot_consistency();\n \n     // We always setup.\n-    let ask = subcommand != MiriCommand::Setup;\n-    setup(ask);\n+    setup(subcommand);\n     if subcommand == MiriCommand::Setup {\n         // Stop here.\n         return;"}]}