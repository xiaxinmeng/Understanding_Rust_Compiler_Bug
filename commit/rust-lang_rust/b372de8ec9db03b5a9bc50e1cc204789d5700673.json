{"sha": "b372de8ec9db03b5a9bc50e1cc204789d5700673", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNzJkZThlYzlkYjAzYjVhOWJjNTBlMWNjMjA0Nzg5ZDU3MDA2NzM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-26T01:15:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-26T01:15:43Z"}, "message": "move undef-check-on-release-validation out, to catch more cases", "tree": {"sha": "803982761a943a0e358491e109708678a1352ede", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/803982761a943a0e358491e109708678a1352ede"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b372de8ec9db03b5a9bc50e1cc204789d5700673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b372de8ec9db03b5a9bc50e1cc204789d5700673", "html_url": "https://github.com/rust-lang/rust/commit/b372de8ec9db03b5a9bc50e1cc204789d5700673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b372de8ec9db03b5a9bc50e1cc204789d5700673/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "858e5eef92666503bab45d7f11536e18f857efcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/858e5eef92666503bab45d7f11536e18f857efcf", "html_url": "https://github.com/rust-lang/rust/commit/858e5eef92666503bab45d7f11536e18f857efcf"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "8d0af524d57aa6b1852d889452cf3148ded025a7", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b372de8ec9db03b5a9bc50e1cc204789d5700673/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b372de8ec9db03b5a9bc50e1cc204789d5700673/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=b372de8ec9db03b5a9bc50e1cc204789d5700673", "patch": "@@ -46,6 +46,8 @@ std::mem::swap::|\\\n std::mem::uninitialized::|\\\n std::ptr::read::|\\\n std::panicking::try::do_call::|\\\n+<std::heap::Heap as std::heap::Alloc>::alloc$|\\\n+<std::mem::ManuallyDrop<T>><std::heap::AllocErr>::new$|\\\n std::sync::atomic::AtomicBool::get_mut$|\\\n <std::vec::Vec<T>><[a-zA-Z0-9_]+>::into_boxed_slice$\\\n )\").unwrap();\n@@ -125,7 +127,18 @@ std::sync::atomic::AtomicBool::get_mut$|\\\n         // Check alignment and non-NULLness\n         let (_, align) = self.size_and_align_of_dst(pointee_ty, val)?;\n         let ptr = val.into_ptr(&mut self.memory)?;\n-        match self.memory.check_align(ptr, align) {\n+        self.memory.check_align(ptr, align)?;\n+\n+        // Recurse\n+        let pointee_lvalue = self.val_to_lvalue(val, pointee_ty)?;\n+        self.validate(ValidationQuery { lval: pointee_lvalue, ty: pointee_ty, re, mutbl }, mode)\n+    }\n+\n+    /// Validate the lvalue at the given type. If `acquire` is false, just do a release of all write locks\n+    #[inline]\n+    fn validate(&mut self, query: ValidationQuery<'tcx>, mode: ValidationMode) -> EvalResult<'tcx>\n+    {\n+        match self.try_validate(query, mode) {\n             // HACK: If, during releasing, we hit memory we cannot use, we just ignore that.\n             // This can happen because releases are added before drop elaboration.\n             // TODO: Fix the MIR so that these releases do not happen.\n@@ -136,15 +149,10 @@ std::sync::atomic::AtomicBool::get_mut$|\\\n                 res\n             }\n             res => res,\n-        }?;\n-\n-        // Recurse\n-        let pointee_lvalue = self.val_to_lvalue(val, pointee_ty)?;\n-        self.validate(ValidationQuery { lval: pointee_lvalue, ty: pointee_ty, re, mutbl }, mode)\n+        }\n     }\n \n-    /// Validate the lvalue at the given type. If `acquire` is false, just do a release of all write locks\n-    fn validate(&mut self, mut query: ValidationQuery<'tcx>, mode: ValidationMode) -> EvalResult<'tcx>\n+    fn try_validate(&mut self, mut query: ValidationQuery<'tcx>, mode: ValidationMode) -> EvalResult<'tcx>\n     {\n         use rustc::ty::TypeVariants::*;\n         use rustc::ty::RegionKind::*;"}]}