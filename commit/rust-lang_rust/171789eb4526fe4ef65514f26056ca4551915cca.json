{"sha": "171789eb4526fe4ef65514f26056ca4551915cca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MTc4OWViNDUyNmZlNGVmNjU1MTRmMjYwNTZjYTQ1NTE5MTVjY2E=", "commit": {"author": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-05-05T19:17:49Z"}, "committer": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-05-07T16:00:51Z"}, "message": "needless_collect: Lint `LinkedList` and `BinaryHeap` in direct usage.\n\nThose two types are supported already when used indirectly.\nThis commit adds support for direct usage as well.", "tree": {"sha": "e28a14746b40b19cc9f67e2c581ff064dfe868f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e28a14746b40b19cc9f67e2c581ff064dfe868f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/171789eb4526fe4ef65514f26056ca4551915cca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/171789eb4526fe4ef65514f26056ca4551915cca", "html_url": "https://github.com/rust-lang/rust/commit/171789eb4526fe4ef65514f26056ca4551915cca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/171789eb4526fe4ef65514f26056ca4551915cca/comments", "author": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59ccc1efb368a9a3b036510f7b2d56519608da85", "url": "https://api.github.com/repos/rust-lang/rust/commits/59ccc1efb368a9a3b036510f7b2d56519608da85", "html_url": "https://github.com/rust-lang/rust/commit/59ccc1efb368a9a3b036510f7b2d56519608da85"}], "stats": {"total": 64, "additions": 60, "deletions": 4}, "files": [{"sha": "89c95f3d127d42b67c888b94ecf72da161d44270", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/171789eb4526fe4ef65514f26056ca4551915cca/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171789eb4526fe4ef65514f26056ca4551915cca/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=171789eb4526fe4ef65514f26056ca4551915cca", "patch": "@@ -31,7 +31,9 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n             let is_empty_sugg = Some(\"next().is_none()\".to_string());\n             let method_name = &*method.ident.name.as_str();\n             let sugg = if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n-                        is_type_diagnostic_item(cx, ty, sym::vecdeque_type) {\n+                        is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n+                        is_type_diagnostic_item(cx, ty, sym::LinkedList) ||\n+                        is_type_diagnostic_item(cx, ty, sym::BinaryHeap) {\n                 match method_name {\n                     \"len\" => Some(\"count()\".to_string()),\n                     \"is_empty\" => is_empty_sugg,"}, {"sha": "6ecbbcb62495553c3630cff05f0dc4dc871b6639", "filename": "tests/ui/needless_collect.fixed", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/171789eb4526fe4ef65514f26056ca4551915cca/tests%2Fui%2Fneedless_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/171789eb4526fe4ef65514f26056ca4551915cca/tests%2Fui%2Fneedless_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.fixed?ref=171789eb4526fe4ef65514f26056ca4551915cca", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(unused, clippy::suspicious_map, clippy::iter_count)]\n \n-use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet};\n+use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList};\n \n #[warn(clippy::needless_collect)]\n #[allow(unused_variables, clippy::iter_cloned_collect, clippy::iter_next_slice)]\n@@ -24,4 +24,13 @@ fn main() {\n     sample.iter().collect::<HashSet<_>>().len();\n     // Neither should this\n     sample.iter().collect::<BTreeSet<_>>().len();\n+\n+    sample.iter().count();\n+    sample.iter().next().is_none();\n+    sample.iter().cloned().any(|x| x == 1);\n+    sample.iter().any(|x| x == &1);\n+\n+    // `BinaryHeap` doesn't have `contains` method\n+    sample.iter().count();\n+    sample.iter().next().is_none();\n }"}, {"sha": "8dc69bcf5b38df30295e0539b1a038916613861e", "filename": "tests/ui/needless_collect.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/171789eb4526fe4ef65514f26056ca4551915cca/tests%2Fui%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171789eb4526fe4ef65514f26056ca4551915cca/tests%2Fui%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.rs?ref=171789eb4526fe4ef65514f26056ca4551915cca", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(unused, clippy::suspicious_map, clippy::iter_count)]\n \n-use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet};\n+use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList};\n \n #[warn(clippy::needless_collect)]\n #[allow(unused_variables, clippy::iter_cloned_collect, clippy::iter_next_slice)]\n@@ -24,4 +24,13 @@ fn main() {\n     sample.iter().collect::<HashSet<_>>().len();\n     // Neither should this\n     sample.iter().collect::<BTreeSet<_>>().len();\n+\n+    sample.iter().collect::<LinkedList<_>>().len();\n+    sample.iter().collect::<LinkedList<_>>().is_empty();\n+    sample.iter().cloned().collect::<LinkedList<_>>().contains(&1);\n+    sample.iter().collect::<LinkedList<_>>().contains(&&1);\n+\n+    // `BinaryHeap` doesn't have `contains` method\n+    sample.iter().collect::<BinaryHeap<_>>().len();\n+    sample.iter().collect::<BinaryHeap<_>>().is_empty();\n }"}, {"sha": "039091627a8d632c3fed7cabff373e95e4315bfc", "filename": "tests/ui/needless_collect.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/171789eb4526fe4ef65514f26056ca4551915cca/tests%2Fui%2Fneedless_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/171789eb4526fe4ef65514f26056ca4551915cca/tests%2Fui%2Fneedless_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.stderr?ref=171789eb4526fe4ef65514f26056ca4551915cca", "patch": "@@ -30,5 +30,41 @@ error: avoid using `collect()` when not needed\n LL |     sample.iter().map(|x| (x, x)).collect::<BTreeMap<_, _>>().is_empty();\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `next().is_none()`\n \n-error: aborting due to 5 previous errors\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:28:19\n+   |\n+LL |     sample.iter().collect::<LinkedList<_>>().len();\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `count()`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:29:19\n+   |\n+LL |     sample.iter().collect::<LinkedList<_>>().is_empty();\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `next().is_none()`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:30:28\n+   |\n+LL |     sample.iter().cloned().collect::<LinkedList<_>>().contains(&1);\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `any(|x| x == 1)`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:31:19\n+   |\n+LL |     sample.iter().collect::<LinkedList<_>>().contains(&&1);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `any(|x| x == &1)`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:34:19\n+   |\n+LL |     sample.iter().collect::<BinaryHeap<_>>().len();\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `count()`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:35:19\n+   |\n+LL |     sample.iter().collect::<BinaryHeap<_>>().is_empty();\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `next().is_none()`\n+\n+error: aborting due to 11 previous errors\n "}]}