{"sha": "beb79ed104c686d8704eb7042318eefea78770df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYjc5ZWQxMDRjNjg2ZDg3MDRlYjcwNDIzMThlZWZlYTc4NzcwZGY=", "commit": {"author": {"name": "Aaron Wood", "email": "aaronwood@google.com", "date": "2020-05-08T23:59:52Z"}, "committer": {"name": "Aaron Wood", "email": "aaronwood@google.com", "date": "2020-05-08T23:59:52Z"}, "message": "Begin transition to new fields for JsonProject crate cfgs\n\nThis starts the transition to a new method of documenting the cfgs that are\nenabled for a given crate in the json file.  This is changing from a list\nof atoms and a dict of key:value pairs, to a list of strings that is\nequivalent to that returned by `rustc --print cfg ..`, and parsed in the\nsame manner by rust-analyzer.\n\nThis is the first of two changes, which adds the new field that contains\nthe list of strings.  Next change will complete the transition and remove\nthe previous fields.", "tree": {"sha": "7395959cc669503894600407f38b381616045943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7395959cc669503894600407f38b381616045943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beb79ed104c686d8704eb7042318eefea78770df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beb79ed104c686d8704eb7042318eefea78770df", "html_url": "https://github.com/rust-lang/rust/commit/beb79ed104c686d8704eb7042318eefea78770df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beb79ed104c686d8704eb7042318eefea78770df/comments", "author": {"login": "woody77", "id": 17480512, "node_id": "MDQ6VXNlcjE3NDgwNTEy", "avatar_url": "https://avatars.githubusercontent.com/u/17480512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/woody77", "html_url": "https://github.com/woody77", "followers_url": "https://api.github.com/users/woody77/followers", "following_url": "https://api.github.com/users/woody77/following{/other_user}", "gists_url": "https://api.github.com/users/woody77/gists{/gist_id}", "starred_url": "https://api.github.com/users/woody77/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/woody77/subscriptions", "organizations_url": "https://api.github.com/users/woody77/orgs", "repos_url": "https://api.github.com/users/woody77/repos", "events_url": "https://api.github.com/users/woody77/events{/privacy}", "received_events_url": "https://api.github.com/users/woody77/received_events", "type": "User", "site_admin": false}, "committer": {"login": "woody77", "id": 17480512, "node_id": "MDQ6VXNlcjE3NDgwNTEy", "avatar_url": "https://avatars.githubusercontent.com/u/17480512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/woody77", "html_url": "https://github.com/woody77", "followers_url": "https://api.github.com/users/woody77/followers", "following_url": "https://api.github.com/users/woody77/following{/other_user}", "gists_url": "https://api.github.com/users/woody77/gists{/gist_id}", "starred_url": "https://api.github.com/users/woody77/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/woody77/subscriptions", "organizations_url": "https://api.github.com/users/woody77/orgs", "repos_url": "https://api.github.com/users/woody77/repos", "events_url": "https://api.github.com/users/woody77/events{/privacy}", "received_events_url": "https://api.github.com/users/woody77/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5f2b16366f027ad60c58266a66eb7fbdcbda9f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f2b16366f027ad60c58266a66eb7fbdcbda9f9", "html_url": "https://github.com/rust-lang/rust/commit/a5f2b16366f027ad60c58266a66eb7fbdcbda9f9"}], "stats": {"total": 94, "additions": 92, "deletions": 2}, "files": [{"sha": "bd2bae15e6905831bd1f49c55ccb1734ad485814", "filename": "crates/ra_project_model/src/json_project.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/beb79ed104c686d8704eb7042318eefea78770df/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb79ed104c686d8704eb7042318eefea78770df/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs?ref=beb79ed104c686d8704eb7042318eefea78770df", "patch": "@@ -20,8 +20,17 @@ pub struct Crate {\n     pub(crate) root_module: PathBuf,\n     pub(crate) edition: Edition,\n     pub(crate) deps: Vec<Dep>,\n+\n+    // This is the preferred method of providing cfg options.\n+    #[serde(default)]\n+    pub(crate) cfg: FxHashSet<String>,\n+\n+    // These two are here for transition only.\n+    #[serde(default)]\n     pub(crate) atom_cfgs: FxHashSet<String>,\n+    #[serde(default)]\n     pub(crate) key_value_cfgs: FxHashMap<String, String>,\n+\n     pub(crate) out_dir: Option<PathBuf>,\n     pub(crate) proc_macro_dylib_path: Option<PathBuf>,\n }\n@@ -54,3 +63,73 @@ pub struct JsonProject {\n     pub(crate) roots: Vec<Root>,\n     pub(crate) crates: Vec<Crate>,\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use serde_json::json;\n+\n+    #[test]\n+    fn test_crate_deserialization() {\n+        let raw_json = json!(    {\n+            \"crate_id\": 2,\n+            \"root_module\": \"this/is/a/file/path.rs\",\n+            \"deps\": [\n+              {\n+                \"crate\": 1,\n+                \"name\": \"some_dep_crate\"\n+              },\n+            ],\n+            \"edition\": \"2015\",\n+            \"cfg\": [\n+              \"atom_1\",\n+              \"atom_2\",\n+              \"feature=feature_1\",\n+              \"feature=feature_2\",\n+              \"other=value\",\n+            ],\n+\n+        });\n+\n+        let krate: Crate = serde_json::from_value(raw_json).unwrap();\n+\n+        assert!(krate.cfg.contains(&\"atom_1\".to_string()));\n+        assert!(krate.cfg.contains(&\"atom_2\".to_string()));\n+        assert!(krate.cfg.contains(&\"feature=feature_1\".to_string()));\n+        assert!(krate.cfg.contains(&\"feature=feature_2\".to_string()));\n+        assert!(krate.cfg.contains(&\"other=value\".to_string()));\n+    }\n+\n+    #[test]\n+    fn test_crate_deserialization_old_json() {\n+        let raw_json = json!(    {\n+           \"crate_id\": 2,\n+           \"root_module\": \"this/is/a/file/path.rs\",\n+           \"deps\": [\n+             {\n+               \"crate\": 1,\n+               \"name\": \"some_dep_crate\"\n+             },\n+           ],\n+           \"edition\": \"2015\",\n+           \"atom_cfgs\": [\n+             \"atom_1\",\n+             \"atom_2\",\n+           ],\n+           \"key_value_cfgs\": {\n+             \"feature\": \"feature_1\",\n+             \"feature\": \"feature_2\",\n+             \"other\": \"value\",\n+           },\n+        });\n+\n+        let krate: Crate = serde_json::from_value(raw_json).unwrap();\n+\n+        assert!(krate.atom_cfgs.contains(&\"atom_1\".to_string()));\n+        assert!(krate.atom_cfgs.contains(&\"atom_2\".to_string()));\n+        assert!(krate.key_value_cfgs.contains_key(&\"feature\".to_string()));\n+        assert_eq!(krate.key_value_cfgs.get(\"feature\"), Some(&\"feature_2\".to_string()));\n+        assert!(krate.key_value_cfgs.contains_key(&\"other\".to_string()));\n+        assert_eq!(krate.key_value_cfgs.get(\"other\"), Some(&\"value\".to_string()));\n+    }\n+}"}, {"sha": "e7da683d6edf3cc5f3d3ca24f5b87ce2bbfb885b", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/beb79ed104c686d8704eb7042318eefea78770df/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb79ed104c686d8704eb7042318eefea78770df/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=beb79ed104c686d8704eb7042318eefea78770df", "patch": "@@ -273,6 +273,16 @@ impl ProjectWorkspace {\n                         };\n                         let cfg_options = {\n                             let mut opts = default_cfg_options.clone();\n+                            for cfg in &krate.cfg {\n+                                match cfg.find('=') {\n+                                    None => opts.insert_atom(cfg.into()),\n+                                    Some(pos) => {\n+                                        let key = &cfg[..pos];\n+                                        let value = cfg[pos + 1..].trim_matches('\"');\n+                                        opts.insert_key_value(key.into(), value.into());\n+                                    }\n+                                }\n+                            }\n                             for name in &krate.atom_cfgs {\n                                 opts.insert_atom(name.into());\n                             }"}, {"sha": "3d5574c7ff9ad2ac06c40109b868fb0ae5f9a0c9", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/beb79ed104c686d8704eb7042318eefea78770df/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb79ed104c686d8704eb7042318eefea78770df/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=beb79ed104c686d8704eb7042318eefea78770df", "patch": "@@ -384,8 +384,9 @@ fn test_missing_module_code_action_in_json_project() {\n             \"root_module\": path.join(\"src/lib.rs\"),\n             \"deps\": [],\n             \"edition\": \"2015\",\n-            \"atom_cfgs\": [],\n-            \"key_value_cfgs\": {}\n+            \"cfg\": [ \"cfg_atom_1\", \"feature=cfg_1\"],\n+            \"atom_cfgs\": [\"atom_2\"],\n+            \"key_value_cfgs\": { \"feature\": \"key_value_feature\", \"other\": \"value\"}\n         } ]\n     });\n "}]}