{"sha": "631bca786f43c4dbe98a079ca2cce67b72a20f10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMWJjYTc4NmY0M2M0ZGJlOThhMDc5Y2EyY2NlNjdiNzJhMjBmMTA=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-24T01:14:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-24T01:15:41Z"}, "message": "Highlight declarations and references for both defs in field shorthands", "tree": {"sha": "d1c92fcfdbf01d09b20bc496b2a53ba139515d6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1c92fcfdbf01d09b20bc496b2a53ba139515d6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/631bca786f43c4dbe98a079ca2cce67b72a20f10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/631bca786f43c4dbe98a079ca2cce67b72a20f10", "html_url": "https://github.com/rust-lang/rust/commit/631bca786f43c4dbe98a079ca2cce67b72a20f10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/631bca786f43c4dbe98a079ca2cce67b72a20f10/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ced65f77c45b0636ffb1c37c8e1992f3885e5e0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ced65f77c45b0636ffb1c37c8e1992f3885e5e0a", "html_url": "https://github.com/rust-lang/rust/commit/ced65f77c45b0636ffb1c37c8e1992f3885e5e0a"}], "stats": {"total": 107, "additions": 75, "deletions": 32}, "files": [{"sha": "4fc2d35538df34fa0b254514faadceaca8c8626e", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 74, "deletions": 28, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/631bca786f43c4dbe98a079ca2cce67b72a20f10/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631bca786f43c4dbe98a079ca2cce67b72a20f10/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=631bca786f43c4dbe98a079ca2cce67b72a20f10", "patch": "@@ -1,14 +1,14 @@\n use hir::Semantics;\n use ide_db::{\n     base_db::FilePosition,\n-    defs::Definition,\n+    defs::{Definition, NameClass, NameRefClass},\n     helpers::{for_each_break_expr, for_each_tail_expr, pick_best_token},\n     search::{FileReference, ReferenceAccess, SearchScope},\n     RootDatabase,\n };\n use syntax::{\n     ast::{self, LoopBodyOwner},\n-    match_ast, AstNode, SyntaxNode, SyntaxToken, TextRange, T,\n+    match_ast, AstNode, SyntaxNode, SyntaxToken, TextRange, TextSize, T,\n };\n \n use crate::{display::TryToNav, references, NavigationTarget};\n@@ -70,35 +70,36 @@ fn highlight_references(\n     syntax: &SyntaxNode,\n     FilePosition { offset, file_id }: FilePosition,\n ) -> Option<Vec<HighlightedRange>> {\n-    let def = references::find_def(sema, syntax, offset)?;\n-    let usages = def\n-        .usages(sema)\n-        .set_scope(Some(SearchScope::single_file(file_id)))\n-        .include_self_refs()\n-        .all();\n-\n-    let declaration = match def {\n-        Definition::ModuleDef(hir::ModuleDef::Module(module)) => {\n-            Some(NavigationTarget::from_module_to_decl(sema.db, module))\n+    let defs = find_defs(sema, syntax, offset)?;\n+    let usages = defs\n+        .iter()\n+        .flat_map(|&d| {\n+            d.usages(sema)\n+                .set_scope(Some(SearchScope::single_file(file_id)))\n+                .include_self_refs()\n+                .all()\n+                .references\n+                .remove(&file_id)\n+        })\n+        .flatten()\n+        .map(|FileReference { access, range, .. }| HighlightedRange { range, access });\n+\n+    let declarations = defs.iter().flat_map(|def| {\n+        match def {\n+            &Definition::ModuleDef(hir::ModuleDef::Module(module)) => {\n+                Some(NavigationTarget::from_module_to_decl(sema.db, module))\n+            }\n+            def => def.try_to_nav(sema.db),\n         }\n-        def => def.try_to_nav(sema.db),\n-    }\n-    .filter(|decl| decl.file_id == file_id)\n-    .and_then(|decl| {\n-        let range = decl.focus_range?;\n-        let access = references::decl_access(&def, syntax, range);\n-        Some(HighlightedRange { range, access })\n+        .filter(|decl| decl.file_id == file_id)\n+        .and_then(|decl| {\n+            let range = decl.focus_range?;\n+            let access = references::decl_access(&def, syntax, range);\n+            Some(HighlightedRange { range, access })\n+        })\n     });\n \n-    let file_refs = usages.references.get(&file_id).map_or(&[][..], Vec::as_slice);\n-    let mut res = Vec::with_capacity(file_refs.len() + 1);\n-    res.extend(declaration);\n-    res.extend(\n-        file_refs\n-            .iter()\n-            .map(|&FileReference { access, range, .. }| HighlightedRange { range, access }),\n-    );\n-    Some(res)\n+    Some(declarations.chain(usages).collect())\n }\n \n fn highlight_exit_points(\n@@ -265,6 +266,35 @@ fn cover_range(r0: Option<TextRange>, r1: Option<TextRange>) -> Option<TextRange\n     }\n }\n \n+fn find_defs(\n+    sema: &Semantics<RootDatabase>,\n+    syntax: &SyntaxNode,\n+    offset: TextSize,\n+) -> Option<Vec<Definition>> {\n+    let defs = match sema.find_node_at_offset_with_descend(syntax, offset)? {\n+        ast::NameLike::NameRef(name_ref) => match NameRefClass::classify(sema, &name_ref)? {\n+            NameRefClass::Definition(def) => vec![def],\n+            NameRefClass::FieldShorthand { local_ref, field_ref } => {\n+                vec![Definition::Local(local_ref), Definition::Field(field_ref)]\n+            }\n+        },\n+        ast::NameLike::Name(name) => match NameClass::classify(sema, &name)? {\n+            NameClass::Definition(it) | NameClass::ConstReference(it) => vec![it],\n+            NameClass::PatFieldShorthand { local_def, field_ref } => {\n+                vec![Definition::Local(local_def), Definition::Field(field_ref)]\n+            }\n+        },\n+        ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n+            .and_then(|class| match class {\n+                NameRefClass::Definition(it) => Some(it),\n+                _ => None,\n+            })\n+            .or_else(|| NameClass::classify_lifetime(sema, &lifetime).and_then(NameClass::defined))\n+            .map(|it| vec![it])?,\n+    };\n+    Some(defs)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::fixture;\n@@ -773,6 +803,22 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn test_hl_field_shorthand() {\n+        check(\n+            r#\"\n+struct Struct { field: u32 }\n+              //^^^^^\n+fn function(field: u32) {\n+          //^^^^^\n+    Struct { field$0 }\n+           //^^^^^ read\n+           //^^^^^ read\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_hl_disabled_ref_local() {\n         let config = HighlightRelatedConfig {"}, {"sha": "8fa84e7c3e5ece577cc3077de4a3abbb1462dfaf", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/631bca786f43c4dbe98a079ca2cce67b72a20f10/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631bca786f43c4dbe98a079ca2cce67b72a20f10/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=631bca786f43c4dbe98a079ca2cce67b72a20f10", "patch": "@@ -118,10 +118,7 @@ pub(crate) fn find_def(\n                 _ => None,\n             })\n             .or_else(|| {\n-                NameClass::classify_lifetime(sema, &lifetime).and_then(|class| match class {\n-                    NameClass::Definition(it) => Some(it),\n-                    _ => None,\n-                })\n+                NameClass::classify_lifetime(sema, &lifetime).and_then(NameClass::defined)\n             })?,\n     };\n     Some(def)"}]}