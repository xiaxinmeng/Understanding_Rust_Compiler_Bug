{"sha": "8015e6d52b7eeea47f9e61c6ac42487935474ca4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMTVlNmQ1MmI3ZWVlYTQ3ZjllNjFjNmFjNDI0ODc5MzU0NzRjYTQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-22T12:34:43Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-22T12:34:43Z"}, "message": "Return a new type var instead of nil when failing to typecheck a field\n\nThe previous solution was usually causing a second spurious error\nmessage.", "tree": {"sha": "1921e75efee6aa0fc4838b01cf01a17698f8b65b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1921e75efee6aa0fc4838b01cf01a17698f8b65b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8015e6d52b7eeea47f9e61c6ac42487935474ca4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8015e6d52b7eeea47f9e61c6ac42487935474ca4", "html_url": "https://github.com/rust-lang/rust/commit/8015e6d52b7eeea47f9e61c6ac42487935474ca4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8015e6d52b7eeea47f9e61c6ac42487935474ca4/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffd50b9cdfa38bc80f2444d917eef5a02c38c32f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd50b9cdfa38bc80f2444d917eef5a02c38c32f", "html_url": "https://github.com/rust-lang/rust/commit/ffd50b9cdfa38bc80f2444d917eef5a02c38c32f"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "ed9eb3c3560045fed51413a60481f5040fc9f960", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8015e6d52b7eeea47f9e61c6ac42487935474ca4/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8015e6d52b7eeea47f9e61c6ac42487935474ca4/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=8015e6d52b7eeea47f9e61c6ac42487935474ca4", "patch": "@@ -1146,8 +1146,10 @@ mod writeback {\n                                   typ) {\n           fix_ok(new_type) { ret some(new_type); }\n           fix_err(vid) {\n-            fcx.ccx.tcx.sess.span_err(sp, \"cannot determine a type \\\n-                                           for this expression\");\n+            if !fcx.ccx.tcx.sess.has_errors() {\n+                fcx.ccx.tcx.sess.span_err(sp, \"cannot determine a type \\\n+                                               for this expression\");\n+            }\n             ret none;\n           }\n         }\n@@ -2546,7 +2548,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                                field, ty_to_str(tcx, t_err)];\n                 tcx.sess.span_err(expr.span, msg);\n                 // NB: Adding a bogus type to allow typechecking to continue\n-                write_ty(tcx, id, ty::mk_nil(tcx));\n+                write_ty(tcx, id, next_ty_var(fcx));\n               }\n             }\n         }"}]}