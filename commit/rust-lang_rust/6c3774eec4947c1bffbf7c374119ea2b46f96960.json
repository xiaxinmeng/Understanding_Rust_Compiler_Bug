{"sha": "6c3774eec4947c1bffbf7c374119ea2b46f96960", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMzc3NGVlYzQ5NDdjMWJmZmJmN2MzNzQxMTllYTJiNDZmOTY5NjA=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-07-14T06:21:08Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-07-14T06:21:08Z"}, "message": "ExprUseVisitor::Delegate consume only when moving", "tree": {"sha": "209afefb2db4139c6cc098b1e332390218d890f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/209afefb2db4139c6cc098b1e332390218d890f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c3774eec4947c1bffbf7c374119ea2b46f96960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c3774eec4947c1bffbf7c374119ea2b46f96960", "html_url": "https://github.com/rust-lang/rust/commit/6c3774eec4947c1bffbf7c374119ea2b46f96960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c3774eec4947c1bffbf7c374119ea2b46f96960/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36f51c96dc4f48ad50663f44980afe3fb529bd2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f51c96dc4f48ad50663f44980afe3fb529bd2c", "html_url": "https://github.com/rust-lang/rust/commit/36f51c96dc4f48ad50663f44980afe3fb529bd2c"}], "stats": {"total": 72, "additions": 21, "deletions": 51}, "files": [{"sha": "39874f48eb014071aa5d279b5e3cf48bba7dc5e6", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6c3774eec4947c1bffbf7c374119ea2b46f96960/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c3774eec4947c1bffbf7c374119ea2b46f96960/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=6c3774eec4947c1bffbf7c374119ea2b46f96960", "patch": "@@ -1528,19 +1528,11 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n         &mut self,\n         place_with_id: &PlaceWithHirId<'tcx>,\n         diag_expr_id: hir::HirId,\n-        mode: euv::ConsumeMode,\n     ) {\n         debug!(\n-            \"adjust_upvar_borrow_kind_for_consume(place_with_id={:?}, diag_expr_id={:?}, mode={:?})\",\n-            place_with_id, diag_expr_id, mode\n+            \"adjust_upvar_borrow_kind_for_consume(place_with_id={:?}, diag_expr_id={:?})\",\n+            place_with_id, diag_expr_id\n         );\n-\n-        // Copy types in ByValue scenarios need should be treated as ImmBorrows\n-        match mode {\n-            euv::ConsumeMode::Copy => unreachable!(),\n-            euv::ConsumeMode::Move => {}\n-        };\n-\n         let tcx = self.fcx.tcx;\n         let upvar_id = if let PlaceBase::Upvar(upvar_id) = place_with_id.place.base {\n             upvar_id\n@@ -1715,22 +1707,14 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n         }\n     }\n \n-    fn consume(\n-        &mut self,\n-        place_with_id: &PlaceWithHirId<'tcx>,\n-        diag_expr_id: hir::HirId,\n-        mode: euv::ConsumeMode,\n-    ) {\n-        debug!(\n-            \"consume(place_with_id={:?}, diag_expr_id={:?}, mode={:?})\",\n-            place_with_id, diag_expr_id, mode\n-        );\n+    fn consume(&mut self, place_with_id: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n+        debug!(\"consume(place_with_id={:?}, diag_expr_id={:?})\", place_with_id, diag_expr_id);\n \n         if !self.capture_information.contains_key(&place_with_id.place) {\n             self.init_capture_info_for_place(&place_with_id, diag_expr_id);\n         }\n \n-        self.adjust_upvar_borrow_kind_for_consume(&place_with_id, diag_expr_id, mode);\n+        self.adjust_upvar_borrow_kind_for_consume(&place_with_id, diag_expr_id);\n     }\n \n     fn borrow("}, {"sha": "dceeac48d6a3d451e88df6b07964ce8064c0a720", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6c3774eec4947c1bffbf7c374119ea2b46f96960/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c3774eec4947c1bffbf7c374119ea2b46f96960/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=6c3774eec4947c1bffbf7c374119ea2b46f96960", "patch": "@@ -2,8 +2,6 @@\n //! normal visitor, which just walks the entire body in one shot, the\n //! `ExprUseVisitor` determines how expressions are being used.\n \n-pub use self::ConsumeMode::*;\n-\n // Export these here so that Clippy can use them.\n pub use rustc_middle::hir::place::{Place, PlaceBase, PlaceWithHirId, Projection};\n \n@@ -28,19 +26,14 @@ use crate::mem_categorization as mc;\n /// This trait defines the callbacks you can expect to receive when\n /// employing the ExprUseVisitor.\n pub trait Delegate<'tcx> {\n-    // The value found at `place` is either copied or moved, depending\n+    // The value found at `place` is moved, depending\n     // on `mode`. Where `diag_expr_id` is the id used for diagnostics for `place`.\n     //\n     // The parameter `diag_expr_id` indicates the HIR id that ought to be used for\n     // diagnostics. Around pattern matching such as `let pat = expr`, the diagnostic\n     // id will be the id of the expression `expr` but the place itself will have\n     // the id of the binding in the pattern `pat`.\n-    fn consume(\n-        &mut self,\n-        place_with_id: &PlaceWithHirId<'tcx>,\n-        diag_expr_id: hir::HirId,\n-        mode: ConsumeMode,\n-    );\n+    fn consume(&mut self, place_with_id: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId);\n \n     // The value found at `place` is being borrowed with kind `bk`.\n     // `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n@@ -60,7 +53,7 @@ pub trait Delegate<'tcx> {\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n-pub enum ConsumeMode {\n+enum ConsumeMode {\n     Copy, // reference to x where x has a type that copies\n     Move, // reference to x where x has a type that moves\n }\n@@ -146,7 +139,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         let mode = copy_or_move(&self.mc, place_with_id);\n \n         match mode {\n-            ConsumeMode::Move => self.delegate.consume(place_with_id, diag_expr_id, mode),\n+            ConsumeMode::Move => self.delegate.consume(place_with_id, diag_expr_id),\n             ConsumeMode::Copy => {\n                 self.delegate.borrow(place_with_id, diag_expr_id, ty::BorrowKind::ImmBorrow)\n             }\n@@ -662,9 +655,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                             debug!(\"walk_pat binding consuming pat\");\n                             let mode = copy_or_move(mc, &place);\n                             match mode {\n-                                ConsumeMode::Move => {\n-                                    delegate.consume(place, discr_place.hir_id, mode)\n-                                }\n+                                ConsumeMode::Move => delegate.consume(place, discr_place.hir_id),\n                                 ConsumeMode::Copy => delegate.borrow(\n                                     place,\n                                     discr_place.hir_id,\n@@ -812,8 +803,8 @@ fn copy_or_move<'a, 'tcx>(\n         place_with_id.place.ty(),\n         mc.tcx().hir().span(place_with_id.hir_id),\n     ) {\n-        Move\n+        ConsumeMode::Move\n     } else {\n-        Copy\n+        ConsumeMode::Copy\n     }\n }"}, {"sha": "5f400d079da2f1d7b5277e8450703003a6d2a0cc", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6c3774eec4947c1bffbf7c374119ea2b46f96960/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c3774eec4947c1bffbf7c374119ea2b46f96960/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=6c3774eec4947c1bffbf7c374119ea2b46f96960", "patch": "@@ -11,7 +11,7 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::kw;\n use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n+use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n #[derive(Copy, Clone)]\n pub struct BoxedLocal {\n@@ -133,13 +133,10 @@ fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n }\n \n impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n-    fn consume(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, mode: ConsumeMode) {\n+    fn consume(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId) {\n         if cmt.place.projections.is_empty() {\n             if let PlaceBase::Local(lid) = cmt.place.base {\n-                if let ConsumeMode::Move = mode {\n-                    // moved out or in. clearly can't be localized\n-                    self.set.remove(&lid);\n-                }\n+                self.set.remove(&lid);\n                 let map = &self.cx.tcx.hir();\n                 if let Some(Node::Binding(_)) = map.find(cmt.hir_id) {\n                     if self.set.contains(&lid) {"}, {"sha": "1e54a1e2de165e8781a4c581606d5da9cbf72efe", "filename": "src/tools/clippy/clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c3774eec4947c1bffbf7c374119ea2b46f96960/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c3774eec4947c1bffbf7c374119ea2b46f96960/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=6c3774eec4947c1bffbf7c374119ea2b46f96960", "patch": "@@ -7,7 +7,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::{mir::FakeReadCause, ty};\n use rustc_span::source_map::Span;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n+use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, body: &Expr<'_>) {\n     if let Some(higher::Range {\n@@ -82,7 +82,7 @@ struct MutatePairDelegate<'a, 'tcx> {\n }\n \n impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n-    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId, _: ConsumeMode) {}\n+    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {"}, {"sha": "57fd03f4e12a68afd6fc8b322cd0b69cf7d599db", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c3774eec4947c1bffbf7c374119ea2b46f96960/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c3774eec4947c1bffbf7c374119ea2b46f96960/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=6c3774eec4947c1bffbf7c374119ea2b46f96960", "patch": "@@ -326,10 +326,8 @@ impl MovedVariablesCtxt {\n }\n \n impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n-    fn consume(&mut self, cmt: &euv::PlaceWithHirId<'tcx>, _: HirId, mode: euv::ConsumeMode) {\n-        if let euv::ConsumeMode::Move = mode {\n-            self.move_common(cmt);\n-        }\n+    fn consume(&mut self, cmt: &euv::PlaceWithHirId<'tcx>, _: HirId) {\n+        self.move_common(cmt);\n     }\n \n     fn borrow(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind) {}"}, {"sha": "82e4b300068046c2731dbab59551795fdb6ecb6d", "filename": "src/tools/clippy/clippy_utils/src/usage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c3774eec4947c1bffbf7c374119ea2b46f96960/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c3774eec4947c1bffbf7c374119ea2b46f96960/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs?ref=6c3774eec4947c1bffbf7c374119ea2b46f96960", "patch": "@@ -10,7 +10,7 @@ use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n+use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n /// Returns a set of mutated local variable IDs, or `None` if mutations could not be determined.\n pub fn mutated_variables<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) -> Option<HirIdSet> {\n@@ -67,7 +67,7 @@ impl<'tcx> MutVarsDelegate {\n }\n \n impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n-    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId, _: ConsumeMode) {}\n+    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {"}]}