{"sha": "c18a1327e3ccf02ae9f755ca280d53177eeb298d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOGExMzI3ZTNjY2YwMmFlOWY3NTVjYTI4MGQ1MzE3N2VlYjI5OGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-07T11:16:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-07T20:51:30Z"}, "message": "Make TyTrait embed a `TraitRef`, so that when we extend TraitRef, it naturally carries over to object types.\n\nI wanted to embed an `Rc<TraitRef>`, but I was foiled by the current\nstatic rules, which prohibit non-Sync values from being stored in\nstatic locations. This means that the constants for `ty_int` and so\nforth cannot be initialized.", "tree": {"sha": "1472273c1b5c6373d7e7bc4e3a9529707e7cfe7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1472273c1b5c6373d7e7bc4e3a9529707e7cfe7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c18a1327e3ccf02ae9f755ca280d53177eeb298d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c18a1327e3ccf02ae9f755ca280d53177eeb298d", "html_url": "https://github.com/rust-lang/rust/commit/c18a1327e3ccf02ae9f755ca280d53177eeb298d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c18a1327e3ccf02ae9f755ca280d53177eeb298d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a3cbf8cf44e41072c11277363a5100cf3a8a161", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3cbf8cf44e41072c11277363a5100cf3a8a161", "html_url": "https://github.com/rust-lang/rust/commit/0a3cbf8cf44e41072c11277363a5100cf3a8a161"}], "stats": {"total": 370, "additions": 178, "deletions": 192}, "files": [{"sha": "26b2afd2f3c319c6a8c6709f111e0f5d6638c696", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -389,11 +389,10 @@ fn parse_ty(st: &mut PState, conv: conv_did) -> ty::t {\n       }\n       'x' => {\n         assert_eq!(next(st), '[');\n-        let def = parse_def(st, NominalType, |x,y| conv(x,y));\n-        let substs = parse_substs(st, |x,y| conv(x,y));\n+        let trait_ref = parse_trait_ref(st, |x,y| conv(x,y));\n         let bounds = parse_existential_bounds(st, |x,y| conv(x,y));\n         assert_eq!(next(st), ']');\n-        return ty::mk_trait(st.tcx, def, substs, bounds);\n+        return ty::mk_trait(st.tcx, trait_ref, bounds);\n       }\n       'p' => {\n         let did = parse_def(st, TypeParameter, |x,y| conv(x,y));"}, {"sha": "a7b64cb20e58812fa5fdb0b966b43656b658b535", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -231,13 +231,10 @@ fn enc_sty(w: &mut SeekableMemWriter, cx: &ctxt, st: &ty::sty) {\n             enc_substs(w, cx, substs);\n             mywrite!(w, \"]\");\n         }\n-        ty::ty_trait(box ty::TyTrait {\n-                def_id,\n-                ref substs,\n-                ref bounds\n-            }) => {\n-            mywrite!(w, \"x[{}|\", (cx.ds)(def_id));\n-            enc_substs(w, cx, substs);\n+        ty::ty_trait(box ty::TyTrait { ref principal,\n+                                       ref bounds }) => {\n+            mywrite!(w, \"x[\");\n+            enc_trait_ref(w, cx, principal);\n             enc_existential_bounds(w, cx, bounds);\n             mywrite!(w, \"]\");\n         }"}, {"sha": "aaf3b16c5eedb356f62c734c491bec8c659f677b", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -1085,16 +1085,19 @@ impl<'a> rbml_writer_helpers for Encoder<'a> {\n                         this.emit_enum_variant_arg(1, |this| idx.encode(this))\n                     })\n                 }\n-                ty::UnsizeVtable(ty::TyTrait { def_id,\n-                                               bounds: ref b,\n-                                               ref substs },\n+                ty::UnsizeVtable(ty::TyTrait { ref principal,\n+                                               bounds: ref b },\n                                  self_ty) => {\n                     this.emit_enum_variant(\"UnsizeVtable\", 2, 4, |this| {\n-                        this.emit_enum_variant_arg(\n-                            0, |this| Ok(this.emit_existential_bounds(ecx, b)));\n-                        this.emit_enum_variant_arg(1, |this| def_id.encode(this));\n-                        this.emit_enum_variant_arg(2, |this| Ok(this.emit_ty(ecx, self_ty)));\n-                        this.emit_enum_variant_arg(3, |this| Ok(this.emit_substs(ecx, substs)))\n+                        this.emit_enum_variant_arg(0, |this| {\n+                            try!(this.emit_struct_field(\"principal\", 0, |this| {\n+                                Ok(this.emit_trait_ref(ecx, &*principal))\n+                            }));\n+                            this.emit_struct_field(\"bounds\", 1, |this| {\n+                                Ok(this.emit_existential_bounds(ecx, b))\n+                            })\n+                        });\n+                        this.emit_enum_variant_arg(1, |this| Ok(this.emit_ty(ecx, self_ty)))\n                     })\n                 }\n             }\n@@ -1693,18 +1696,19 @@ impl<'a> rbml_decoder_decoder_helpers for reader::Decoder<'a> {\n                         ty::UnsizeStruct(box uk, idx)\n                     }\n                     2 => {\n-                        let b =\n-                            this.read_enum_variant_arg(\n-                                0, |this| Ok(this.read_existential_bounds(dcx))).unwrap();\n-                        let def_id: ast::DefId =\n-                            this.read_enum_variant_arg(1, |this| Decodable::decode(this)).unwrap();\n+                        let ty_trait = try!(this.read_enum_variant_arg(0, |this| {\n+                            let principal = try!(this.read_struct_field(\"principal\", 0, |this| {\n+                                Ok(this.read_trait_ref(dcx))\n+                            }));\n+                            Ok(ty::TyTrait {\n+                                principal: (*principal).clone(),\n+                                bounds: try!(this.read_struct_field(\"bounds\", 1, |this| {\n+                                    Ok(this.read_existential_bounds(dcx))\n+                                })),\n+                            })\n+                        }));\n                         let self_ty =\n-                            this.read_enum_variant_arg(2, |this| Ok(this.read_ty(dcx))).unwrap();\n-                        let substs = this.read_enum_variant_arg(3,\n-                            |this| Ok(this.read_substs(dcx))).unwrap();\n-                        let ty_trait = ty::TyTrait { def_id: def_id.tr(dcx),\n-                                                     bounds: b,\n-                                                     substs: substs };\n+                            this.read_enum_variant_arg(1, |this| Ok(this.read_ty(dcx))).unwrap();\n                         ty::UnsizeVtable(ty_trait, self_ty)\n                     }\n                     _ => panic!(\"bad enum variant for ty::UnsizeKind\")"}, {"sha": "9900620b229dab9f5044c8e17ed05591a2f6f351", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -143,7 +143,7 @@ pub fn ty_is_local(tcx: &ty::ctxt,\n         }\n \n         ty::ty_trait(ref tt) => {\n-            tt.def_id.krate == ast::LOCAL_CRATE\n+            tt.principal.def_id.krate == ast::LOCAL_CRATE\n         }\n \n         // Type parameters may be bound to types that are not local to"}, {"sha": "5b2e978e11fee3d803824b70943fa9a43d109bcb", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -423,8 +423,8 @@ impl TypeMap {\n \n                 from_def_id_and_substs(self,\n                                        cx,\n-                                       trait_data.def_id,\n-                                       &trait_data.substs,\n+                                       trait_data.principal.def_id,\n+                                       &trait_data.principal.substs,\n                                        &mut unique_type_id);\n             },\n             ty::ty_bare_fn(ty::BareFnTy{ fn_style, abi, ref sig } ) => {\n@@ -2813,7 +2813,7 @@ fn trait_pointer_metadata(cx: &CrateContext,\n     // But it does not describe the trait's methods.\n \n     let def_id = match ty::get(trait_type).sty {\n-        ty::ty_trait(box ty::TyTrait { def_id, .. }) => def_id,\n+        ty::ty_trait(box ty::TyTrait { ref principal, .. }) => principal.def_id,\n         _ => {\n             let pp_type_name = ppaux::ty_to_string(cx.tcx(), trait_type);\n             cx.sess().bug(format!(\"debuginfo: Unexpected trait-object type in \\\n@@ -3739,8 +3739,8 @@ fn push_debuginfo_type_name(cx: &CrateContext,\n             output.push(']');\n         },\n         ty::ty_trait(ref trait_data) => {\n-            push_item_name(cx, trait_data.def_id, false, output);\n-            push_type_params(cx, &trait_data.substs, output);\n+            push_item_name(cx, trait_data.principal.def_id, false, output);\n+            push_type_params(cx, &trait_data.principal.substs, output);\n         },\n         ty::ty_bare_fn(ty::BareFnTy{ fn_style, abi, ref sig } ) => {\n             if fn_style == ast::UnsafeFn {"}, {"sha": "4b61f0c1409116a003c7004f6867ff7e87bf8e91", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -324,10 +324,10 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 _ => bcx.sess().bug(format!(\"UnsizeStruct with bad sty: {}\",\n                                           bcx.ty_to_string(unsized_ty)).as_slice())\n             },\n-            &ty::UnsizeVtable(ty::TyTrait { def_id, ref substs, .. }, _) => {\n-                let substs = substs.with_self_ty(unsized_ty);\n+            &ty::UnsizeVtable(ty::TyTrait { ref principal, .. }, _) => {\n+                let substs = principal.substs.with_self_ty(unsized_ty);\n                 let trait_ref =\n-                    Rc::new(ty::TraitRef { def_id: def_id,\n+                    Rc::new(ty::TraitRef { def_id: principal.def_id,\n                                            substs: substs });\n                 let trait_ref =\n                     trait_ref.subst(bcx.tcx(), &bcx.fcx.param_substs.substs);"}, {"sha": "3e8a7bb842ca81839469f0ba7c703c0ba61a146f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -378,14 +378,14 @@ pub fn type_of_adjust(cx: &ctxt, adj: &AutoAdjustment) -> Option<t> {\n     fn type_of_autoref(cx: &ctxt, autoref: &AutoRef) -> Option<t> {\n         match autoref {\n             &AutoUnsize(ref k) => match k {\n-                &UnsizeVtable(TyTrait { def_id, ref substs, bounds }, _) => {\n-                    Some(mk_trait(cx, def_id, substs.clone(), bounds))\n+                &UnsizeVtable(TyTrait { ref principal, bounds }, _) => {\n+                    Some(mk_trait(cx, (*principal).clone(), bounds))\n                 }\n                 _ => None\n             },\n             &AutoUnsizeUniq(ref k) => match k {\n-                &UnsizeVtable(TyTrait { def_id, ref substs, bounds }, _) => {\n-                    Some(mk_uniq(cx, mk_trait(cx, def_id, substs.clone(), bounds)))\n+                &UnsizeVtable(TyTrait { ref principal, bounds }, _) => {\n+                    Some(mk_uniq(cx, mk_trait(cx, (*principal).clone(), bounds)))\n                 }\n                 _ => None\n             },\n@@ -983,12 +983,12 @@ pub enum sty {\n \n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct TyTrait {\n-    pub def_id: DefId,\n-    pub substs: Substs,\n+    // Principal trait reference.\n+    pub principal: TraitRef, // would use Rc<TraitRef>, but it runs afoul of some static rules\n     pub bounds: ExistentialBounds\n }\n \n-#[deriving(PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct TraitRef {\n     pub def_id: DefId,\n     pub substs: Substs,\n@@ -1643,8 +1643,8 @@ pub fn mk_t(cx: &ctxt, st: sty) -> t {\n       &ty_enum(_, ref substs) | &ty_struct(_, ref substs) => {\n           flags = flags | sflags(substs);\n       }\n-      &ty_trait(box TyTrait { ref substs, ref bounds, .. }) => {\n-          flags = flags | sflags(substs);\n+      &ty_trait(box TyTrait { ref principal, ref bounds }) => {\n+          flags = flags | sflags(&principal.substs);\n           flags = flags | flags_for_bounds(bounds);\n       }\n       &ty_uniq(tt) | &ty_vec(tt, _) | &ty_open(tt) => {\n@@ -1874,14 +1874,12 @@ pub fn mk_ctor_fn(cx: &ctxt,\n \n \n pub fn mk_trait(cx: &ctxt,\n-                did: ast::DefId,\n-                substs: Substs,\n+                principal: ty::TraitRef,\n                 bounds: ExistentialBounds)\n                 -> t {\n     // take a copy of substs so that we own the vectors inside\n     let inner = box TyTrait {\n-        def_id: did,\n-        substs: substs,\n+        principal: principal,\n         bounds: bounds\n     };\n     mk_t(cx, ty_trait(inner))\n@@ -1934,9 +1932,15 @@ pub fn maybe_walk_ty(ty: t, f: |t| -> bool) {\n         ty_ptr(ref tm) | ty_rptr(_, ref tm) => {\n             maybe_walk_ty(tm.ty, f);\n         }\n-        ty_enum(_, ref substs) | ty_struct(_, ref substs) | ty_unboxed_closure(_, _, ref substs) |\n-        ty_trait(box TyTrait { ref substs, .. }) => {\n-            for subty in (*substs).types.iter() {\n+        ty_trait(box TyTrait { ref principal, .. }) => {\n+            for subty in principal.substs.types.iter() {\n+                maybe_walk_ty(*subty, |x| f(x));\n+            }\n+        }\n+        ty_enum(_, ref substs) |\n+        ty_struct(_, ref substs) |\n+        ty_unboxed_closure(_, _, ref substs) => {\n+            for subty in substs.types.iter() {\n                 maybe_walk_ty(*subty, |x| f(x));\n             }\n         }\n@@ -3554,8 +3558,8 @@ pub fn unsize_ty(cx: &ctxt,\n                                   format!(\"UnsizeStruct with bad sty: {}\",\n                                           ty_to_string(cx, ty)).as_slice())\n         },\n-        &UnsizeVtable(TyTrait { def_id, ref substs, bounds }, _) => {\n-            mk_trait(cx, def_id, substs.clone(), bounds)\n+        &UnsizeVtable(TyTrait { ref principal, bounds }, _) => {\n+            mk_trait(cx, (*principal).clone(), bounds)\n         }\n     }\n }\n@@ -3808,7 +3812,7 @@ pub fn ty_sort_string(cx: &ctxt, t: t) -> String {\n         ty_bare_fn(_) => \"extern fn\".to_string(),\n         ty_closure(_) => \"fn\".to_string(),\n         ty_trait(ref inner) => {\n-            format!(\"trait {}\", item_path_str(cx, inner.def_id))\n+            format!(\"trait {}\", item_path_str(cx, inner.principal.def_id))\n         }\n         ty_struct(id, _) => {\n             format!(\"struct {}\", item_path_str(cx, id))\n@@ -4230,11 +4234,14 @@ pub fn try_add_builtin_trait(\n \n pub fn ty_to_def_id(ty: t) -> Option<ast::DefId> {\n     match get(ty).sty {\n-        ty_trait(box TyTrait { def_id: id, .. }) |\n+        ty_trait(ref tt) =>\n+            Some(tt.principal.def_id),\n         ty_struct(id, _) |\n         ty_enum(id, _) |\n-        ty_unboxed_closure(id, _, _) => Some(id),\n-        _ => None\n+        ty_unboxed_closure(id, _, _) =>\n+            Some(id),\n+        _ =>\n+            None\n     }\n }\n \n@@ -5213,9 +5220,9 @@ pub fn hash_crate_independent(tcx: &ctxt, t: t, svh: &Svh) -> u64 {\n                     }\n                 }\n             }\n-            ty_trait(box TyTrait { def_id: d, bounds, .. }) => {\n+            ty_trait(box TyTrait { ref principal, bounds }) => {\n                 byte!(17);\n-                did(&mut state, d);\n+                did(&mut state, principal.def_id);\n                 hash!(bounds);\n             }\n             ty_struct(d, _) => {\n@@ -5504,12 +5511,13 @@ pub fn accumulate_lifetimes_in_type(accumulator: &mut Vec<ty::Region>,\n                                     typ: t) {\n     walk_ty(typ, |typ| {\n         match get(typ).sty {\n-            ty_rptr(region, _) => accumulator.push(region),\n+            ty_rptr(region, _) => {\n+                accumulator.push(region)\n+            }\n+            ty_trait(ref t) => {\n+                accumulator.push_all(t.principal.substs.regions().as_slice());\n+            }\n             ty_enum(_, ref substs) |\n-            ty_trait(box TyTrait {\n-                ref substs,\n-                ..\n-            }) |\n             ty_struct(_, ref substs) => {\n                 accum_substs(accumulator, substs);\n             }"}, {"sha": "2b83da35c3ba8a7bb28f53f518f05ea93b907bd2", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -373,12 +373,11 @@ impl TypeFoldable for ty::UnsizeKind {\n         match *self {\n             ty::UnsizeLength(len) => ty::UnsizeLength(len),\n             ty::UnsizeStruct(box ref k, n) => ty::UnsizeStruct(box k.fold_with(folder), n),\n-            ty::UnsizeVtable(ty::TyTrait{bounds, def_id, ref substs}, self_ty) => {\n+            ty::UnsizeVtable(ty::TyTrait{ref principal, bounds}, self_ty) => {\n                 ty::UnsizeVtable(\n                     ty::TyTrait {\n+                        principal: principal.fold_with(folder),\n                         bounds: bounds.fold_with(folder),\n-                        def_id: def_id,\n-                        substs: substs.fold_with(folder)\n                     },\n                     self_ty.fold_with(folder))\n             }\n@@ -529,15 +528,10 @@ pub fn super_fold_sty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n         ty::ty_enum(tid, ref substs) => {\n             ty::ty_enum(tid, substs.fold_with(this))\n         }\n-        ty::ty_trait(box ty::TyTrait {\n-                def_id,\n-                ref substs,\n-                bounds\n-            }) => {\n+        ty::ty_trait(box ty::TyTrait { ref principal, bounds }) => {\n             ty::ty_trait(box ty::TyTrait {\n-                def_id: def_id,\n-                substs: substs.fold_with(this),\n-                bounds: this.fold_existential_bounds(bounds),\n+                principal: (*principal).fold_with(this),\n+                bounds: bounds.fold_with(this),\n             })\n         }\n         ty::ty_tup(ref ts) => {"}, {"sha": "6430362f9cdfd39b93e80dd9a476670f3e6dff93", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -405,11 +405,11 @@ pub fn ast_path_to_trait_ref<'tcx,AC,RS>(this: &AC,\n                                          associated_type: Option<ty::t>,\n                                          path: &ast::Path,\n                                          binder_id: ast::NodeId)\n-                                         -> Rc<ty::TraitRef>\n+                                         -> ty::TraitRef\n                                          where AC: AstConv<'tcx>,\n                                                RS: RegionScope {\n     let trait_def = this.get_trait_def(trait_def_id);\n-    Rc::new(ty::TraitRef {\n+    ty::TraitRef {\n         def_id: trait_def_id,\n         substs: ast_path_substs(this,\n                                 rscope,\n@@ -419,7 +419,7 @@ pub fn ast_path_to_trait_ref<'tcx,AC,RS>(this: &AC,\n                                 associated_type,\n                                 path,\n                                 binder_id)\n-    })\n+    }\n }\n \n pub fn ast_path_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n@@ -702,26 +702,17 @@ fn mk_pointer<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                                                        None,\n                                                        path,\n                                                        id);\n-                    let bounds = match *opt_bounds {\n-                        None => {\n-                            conv_existential_bounds(this,\n-                                                    rscope,\n-                                                    path.span,\n-                                                    [result.clone()].as_slice(),\n-                                                    [].as_slice())\n-                        }\n-                        Some(ref bounds) => {\n-                            conv_existential_bounds(this,\n-                                                    rscope,\n-                                                    path.span,\n-                                                    [result.clone()].as_slice(),\n-                                                    bounds.as_slice())\n-                        }\n-                    };\n+                    let empty_vec = [];\n+                    let bounds = match *opt_bounds { None => empty_vec.as_slice(),\n+                                                     Some(ref bounds) => bounds.as_slice() };\n+                    let existential_bounds = conv_existential_bounds(this,\n+                                                                     rscope,\n+                                                                     path.span,\n+                                                                     &[Rc::new(result.clone())],\n+                                                                     bounds);\n                     let tr = ty::mk_trait(tcx,\n-                                          result.def_id,\n-                                          result.substs.clone(),\n-                                          bounds);\n+                                          result,\n+                                          existential_bounds);\n                     return match ptr_ty {\n                         Uniq => {\n                             return ty::mk_uniq(tcx, tr);\n@@ -943,11 +934,10 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                         let bounds = conv_existential_bounds(this,\n                                                              rscope,\n                                                              ast_ty.span,\n-                                                             &[result.clone()],\n+                                                             &[Rc::new(result.clone())],\n                                                              ast_bounds);\n                         ty::mk_trait(tcx,\n-                                     result.def_id,\n-                                     result.substs.clone(),\n+                                     result,\n                                      bounds)\n                     }\n                     def::DefTy(did, _) | def::DefStruct(did) => {"}, {"sha": "6280fce035a6cdf50dcf9b449ed0243db7e6003b", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -632,9 +632,9 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n         let span = self.self_expr.map_or(self.span, |e| e.span);\n         check::autoderef(self.fcx, span, self_ty, None, NoPreference, |self_ty, _| {\n             match get(self_ty).sty {\n-                ty_trait(box TyTrait { def_id, ref substs, bounds, .. }) => {\n-                    self.push_inherent_candidates_from_object(self_ty, def_id, substs, bounds);\n-                    self.push_inherent_impl_candidates_for_type(def_id);\n+                ty_trait(box TyTrait { ref principal, bounds, .. }) => {\n+                    self.push_inherent_candidates_from_object(self_ty, &*principal, bounds);\n+                    self.push_inherent_impl_candidates_for_type(principal.def_id);\n                 }\n                 ty_enum(did, _) |\n                 ty_struct(did, _) |\n@@ -744,24 +744,23 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n \n     fn push_inherent_candidates_from_object(&mut self,\n                                             self_ty: ty::t,\n-                                            did: DefId,\n-                                            substs: &subst::Substs,\n+                                            principal: &ty::TraitRef,\n                                             _bounds: ty::ExistentialBounds) {\n         debug!(\"push_inherent_candidates_from_object(self_ty={})\",\n                self_ty.repr(self.tcx()));\n \n         let tcx = self.tcx();\n \n-        // It is illegal to invoke a method on a trait instance that refers to\n-        // the `Self` type.  Here, we use a substitution that replaces `Self`\n-        // with the object type itself. Hence, a `&self` method will wind up\n-        // with an argument type like `&Trait`.\n-        let rcvr_substs = substs.with_self_ty(self_ty);\n-\n-        let trait_ref = Rc::new(TraitRef {\n-            def_id: did,\n-            substs: rcvr_substs.clone()\n-        });\n+        // It is illegal to invoke a method on a trait instance that\n+        // refers to the `Self` type. An error will be reported by\n+        // `enforce_object_limitations()` if the method refers to the\n+        // `Self` type anywhere other than the receiver. Here, we use\n+        // a substitution that replaces `Self` with the object type\n+        // itself. Hence, a `&self` method will wind up with an\n+        // argument type like `&Trait`.\n+        let rcvr_substs = principal.substs.with_self_ty(self_ty);\n+        let trait_ref = Rc::new(TraitRef { def_id: principal.def_id,\n+                                           substs: rcvr_substs.clone() });\n \n         self.push_inherent_candidates_from_bounds_inner(\n             &[trait_ref.clone()],\n@@ -796,7 +795,7 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n                     method_ty: m,\n                     origin: MethodTraitObject(MethodObject {\n                         trait_ref: new_trait_ref,\n-                        object_trait_id: did,\n+                        object_trait_id: principal.def_id,\n                         method_num: method_num,\n                         real_index: vtable_index\n                     })\n@@ -1151,17 +1150,19 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n     fn auto_slice_trait(&self, ty: ty::t, autoderefs: uint) -> Option<MethodResult> {\n         debug!(\"auto_slice_trait\");\n         match ty::get(ty).sty {\n-            ty_trait(box ty::TyTrait {\n-                    def_id: trt_did,\n-                    substs: ref trt_substs,\n-                    bounds: b,\n-                    .. }) => {\n+            ty_trait(box ty::TyTrait { ref principal,\n+                                       bounds: b,\n+                                       .. }) => {\n+                let trt_did = principal.def_id;\n+                let trt_substs = &principal.substs;\n                 let tcx = self.tcx();\n                 self.search_for_some_kind_of_autorefd_method(\n                     |r, m| AutoPtr(r, m, None),\n                     autoderefs, [MutImmutable, MutMutable],\n                     |m, r| {\n-                        let tr = ty::mk_trait(tcx, trt_did, trt_substs.clone(), b);\n+                        let principal = ty::TraitRef::new(trt_did,\n+                                                          trt_substs.clone());\n+                        let tr = ty::mk_trait(tcx, principal, b);\n                         ty::mk_rptr(tcx, r, ty::mt{ ty: tr, mutbl: m })\n                     })\n             }"}, {"sha": "498594716e7ab795339db49c5caf36b39187f721", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -140,11 +140,11 @@ pub fn check_object_safety(tcx: &ty::ctxt, object_trait: &ty::TyTrait, span: Spa\n     // `call_once` which is the method which takes self by value. What could go\n     // wrong?\n     match tcx.lang_items.fn_once_trait() {\n-        Some(def_id) if def_id == object_trait.def_id => return,\n+        Some(def_id) if def_id == object_trait.principal.def_id => return,\n         _ => {}\n     }\n \n-    let trait_items = ty::trait_items(tcx, object_trait.def_id);\n+    let trait_items = ty::trait_items(tcx, object_trait.principal.def_id);\n \n     let mut errors = Vec::new();\n     for item in trait_items.iter() {\n@@ -158,7 +158,7 @@ pub fn check_object_safety(tcx: &ty::ctxt, object_trait: &ty::TyTrait, span: Spa\n \n     let mut errors = errors.iter().flat_map(|x| x.iter()).peekable();\n     if errors.peek().is_some() {\n-        let trait_name = ty::item_path_str(tcx, object_trait.def_id);\n+        let trait_name = ty::item_path_str(tcx, object_trait.principal.def_id);\n         span_err!(tcx.sess, span, E0038,\n             \"cannot convert to a trait object because trait `{}` is not object-safe\",\n             trait_name);\n@@ -241,8 +241,7 @@ pub fn register_object_cast_obligations(fcx: &FnCtxt,\n     // needs some refactoring so there is a more convenient type to pass around.\n     let object_trait_ty =\n         ty::mk_trait(fcx.tcx(),\n-                     object_trait.def_id,\n-                     object_trait.substs.clone(),\n+                     object_trait.principal.clone(),\n                      object_trait.bounds);\n \n     debug!(\"register_object_cast_obligations: referent_ty={} object_trait_ty={}\",\n@@ -252,13 +251,13 @@ pub fn register_object_cast_obligations(fcx: &FnCtxt,\n     // Take the type parameters from the object type, but set\n     // the Self type (which is unknown, for the object type)\n     // to be the type we are casting from.\n-    let mut object_substs = object_trait.substs.clone();\n+    let mut object_substs = object_trait.principal.substs.clone();\n     assert!(object_substs.self_ty().is_none());\n     object_substs.types.push(SelfSpace, referent_ty);\n \n     // Create the obligation for casting from T to Trait.\n     let object_trait_ref =\n-        Rc::new(ty::TraitRef { def_id: object_trait.def_id,\n+        Rc::new(ty::TraitRef { def_id: object_trait.principal.def_id,\n                                substs: object_substs });\n     let object_obligation =\n         Obligation::new("}, {"sha": "898d987ace7cb0367422f8ba7a0e2ac3ee0fb062", "filename": "src/librustc/middle/typeck/coherence/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -112,17 +112,17 @@ fn get_base_type_def_id(inference_context: &InferCtxt,\n                 ty_rptr(_, ty::mt {ty, ..}) |\n                 ty_uniq(ty) => {\n                     match ty::get(ty).sty {\n-                        ty_trait(box ty::TyTrait { def_id, .. }) => {\n-                            Some(def_id)\n+                        ty_trait(box ty::TyTrait { ref principal, .. }) => {\n+                            Some(principal.def_id)\n                         }\n                         _ => {\n                             panic!(\"get_base_type() returned a type that wasn't an \\\n                                    enum, struct, or trait\");\n                         }\n                     }\n                 }\n-                ty_trait(box ty::TyTrait { def_id, .. }) => {\n-                    Some(def_id)\n+                ty_trait(box ty::TyTrait { ref principal, .. }) => {\n+                    Some(principal.def_id)\n                 }\n                 _ => {\n                     panic!(\"get_base_type() returned a type that wasn't an \\"}, {"sha": "ba362fb878c81b8d85c2c903ec2d70635ae05e99", "filename": "src/librustc/middle/typeck/coherence/orphan.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Forphan.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -18,6 +18,7 @@ use middle::ty;\n use syntax::ast::{Item, ItemImpl};\n use syntax::ast;\n use syntax::ast_util;\n+use syntax::codemap::Span;\n use syntax::visit;\n use util::ppaux::Repr;\n \n@@ -30,6 +31,17 @@ struct OrphanChecker<'cx, 'tcx:'cx> {\n     tcx: &'cx ty::ctxt<'tcx>\n }\n \n+impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n+    fn check_def_id(&self, span: Span, def_id: ast::DefId) {\n+        if def_id.krate != ast::LOCAL_CRATE {\n+            span_err!(self.tcx.sess, span, E0116,\n+                      \"cannot associate methods with a type outside the \\\n+                       crate the type is defined in; define and implement \\\n+                       a trait or new type instead\");\n+        }\n+    }\n+}\n+\n impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v ast::Item) {\n         let def_id = ast_util::local_def(item.id);\n@@ -41,14 +53,11 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                 let self_ty = ty::lookup_item_type(self.tcx, def_id).ty;\n                 match ty::get(self_ty).sty {\n                     ty::ty_enum(def_id, _) |\n-                    ty::ty_struct(def_id, _) |\n-                    ty::ty_trait(box ty::TyTrait{ def_id, ..}) => {\n-                        if def_id.krate != ast::LOCAL_CRATE {\n-                            span_err!(self.tcx.sess, item.span, E0116,\n-                                      \"cannot associate methods with a type outside the \\\n-                                      crate the type is defined in; define and implement \\\n-                                      a trait or new type instead\");\n-                        }\n+                    ty::ty_struct(def_id, _) => {\n+                        self.check_def_id(item.span, def_id);\n+                    }\n+                    ty::ty_trait(box ty::TyTrait{ ref principal, ..}) => {\n+                        self.check_def_id(item.span, principal.def_id);\n                     }\n                     _ => {\n                         span_err!(self.tcx.sess, item.span, E0118,"}, {"sha": "d365c54c70121d6d152223bb16f2131cc4f1af62", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -1335,13 +1335,13 @@ pub fn instantiate_trait_ref<'tcx,AC>(this: &AC,\n                          ast_trait_ref.ref_id) {\n         def::DefTrait(trait_did) => {\n             let trait_ref =\n-                astconv::ast_path_to_trait_ref(this,\n-                                               &rscope,\n-                                               trait_did,\n-                                               Some(self_ty),\n-                                               associated_type,\n-                                               &ast_trait_ref.path,\n-                                               ast_trait_ref.ref_id);\n+                Rc::new(astconv::ast_path_to_trait_ref(this,\n+                                                       &rscope,\n+                                                       trait_did,\n+                                                       Some(self_ty),\n+                                                       associated_type,\n+                                                       &ast_trait_ref.path,\n+                                                       ast_trait_ref.ref_id));\n \n             this.tcx().trait_refs.borrow_mut().insert(ast_trait_ref.ref_id,\n                                                       trait_ref.clone());"}, {"sha": "718d70050a08e449e234000039f33c0bd6e74cd9", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -413,15 +413,14 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                     let ty = ty::mk_vec(tcx, t_a, None);\n                     Some((ty, ty::UnsizeLength(len)))\n                 }\n-                (&ty::ty_trait(..), &ty::ty_trait(..)) => None,\n-                (_, &ty::ty_trait(box ty::TyTrait { def_id, ref substs, bounds })) => {\n-                    let ty = ty::mk_trait(tcx,\n-                                          def_id,\n-                                          substs.clone(),\n-                                          bounds);\n-                    Some((ty, ty::UnsizeVtable(ty::TyTrait { def_id: def_id,\n-                                                             bounds: bounds,\n-                                                             substs: substs.clone() },\n+                (&ty::ty_trait(..), &ty::ty_trait(..)) => {\n+                    None\n+                }\n+                (_, &ty::ty_trait(box ty::TyTrait { ref principal, bounds })) => {\n+                    // FIXME what is the purpose of `ty`?\n+                    let ty = ty::mk_trait(tcx, (*principal).clone(), bounds);\n+                    Some((ty, ty::UnsizeVtable(ty::TyTrait { principal: (*principal).clone(),\n+                                                             bounds: bounds },\n                                                ty_a)))\n                 }\n                 (&ty::ty_struct(did_a, ref substs_a), &ty::ty_struct(did_b, ref substs_b))\n@@ -524,16 +523,10 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         match *sty_a {\n             ty::ty_rptr(_, ty::mt{ty, mutbl}) => match ty::get(ty).sty {\n-                ty::ty_trait(box ty::TyTrait {\n-                        def_id,\n-                        ref substs,\n-                        bounds,\n-                        ..\n-                    }) =>\n-                {\n+                ty::ty_trait(box ty::TyTrait { ref principal, bounds }) => {\n                     debug!(\"mutbl={} b_mutbl={}\", mutbl, b_mutbl);\n-\n-                    let tr = ty::mk_trait(tcx, def_id, substs.clone(), bounds);\n+                    // FIXME what is purpose of this type `tr`?\n+                    let tr = ty::mk_trait(tcx, (*principal).clone(), bounds);\n                     try!(self.subtype(mk_ty(tr), b));\n                     Ok(Some(AdjustDerefRef(AutoDerefRef {\n                         autoderefs: 1,"}, {"sha": "ab3ec4991c39bca2a0a8c26a30bd7fdd6ae6fd25", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -461,15 +461,11 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C, a: ty::t, b: ty::t) -> cres<t\n       }\n \n       (&ty::ty_trait(ref a_),\n-       &ty::ty_trait(ref b_))\n-      if a_.def_id == b_.def_id => {\n+       &ty::ty_trait(ref b_)) => {\n           debug!(\"Trying to match traits {} and {}\", a, b);\n-          let substs = try!(this.substs(a_.def_id, &a_.substs, &b_.substs));\n+          let principal = try!(this.trait_refs(&a_.principal, &b_.principal));\n           let bounds = try!(this.existential_bounds(a_.bounds, b_.bounds));\n-          Ok(ty::mk_trait(tcx,\n-                          a_.def_id,\n-                          substs.clone(),\n-                          bounds))\n+          Ok(ty::mk_trait(tcx, principal, bounds))\n       }\n \n       (&ty::ty_struct(a_id, ref a_substs), &ty::ty_struct(b_id, ref b_substs))"}, {"sha": "23000949115c3ea916db553e7fc1ee80cbf1792a", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -856,16 +856,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                                       -> ty::TraitRef {\n         // make up a dummy type just to reuse/abuse the resolve machinery\n         let dummy0 = ty::mk_trait(self.tcx,\n-                                  trait_ref.def_id,\n-                                  trait_ref.substs.clone(),\n+                                  (*trait_ref).clone(),\n                                   ty::region_existential_bound(ty::ReStatic));\n         let dummy1 = self.resolve_type_vars_if_possible(dummy0);\n         match ty::get(dummy1).sty {\n-            ty::ty_trait(box ty::TyTrait { ref def_id, ref substs, .. }) => {\n-                ty::TraitRef {\n-                    def_id: *def_id,\n-                    substs: (*substs).clone(),\n-                }\n+            ty::ty_trait(box ty::TyTrait { ref principal, .. }) => {\n+                (*principal).clone()\n             }\n             _ => {\n                 self.tcx.sess.bug("}, {"sha": "b6d8c85fa0b7ca0687a97c8537d168f343ac686a", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -778,14 +778,14 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                     variance);\n             }\n \n-            ty::ty_trait(box ty::TyTrait { def_id, ref substs, bounds }) => {\n-                let trait_def = ty::lookup_trait_def(self.tcx(), def_id);\n+            ty::ty_trait(box ty::TyTrait { ref principal, bounds }) => {\n+                let trait_def = ty::lookup_trait_def(self.tcx(), principal.def_id);\n                 let generics = &trait_def.generics;\n \n                 // Traits DO have a Self type parameter, but it is\n                 // erased from object types.\n                 assert!(!generics.types.is_empty_in(subst::SelfSpace) &&\n-                        substs.types.is_empty_in(subst::SelfSpace));\n+                        principal.substs.types.is_empty_in(subst::SelfSpace));\n \n                 // Traits never declare region parameters in the self\n                 // space.\n@@ -801,10 +801,10 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_region(bounds.region_bound, contra);\n \n                 self.add_constraints_from_substs(\n-                    def_id,\n+                    principal.def_id,\n                     generics.types.get_slice(subst::TypeSpace),\n                     generics.regions.get_slice(subst::TypeSpace),\n-                    substs,\n+                    &principal.substs,\n                     variance);\n             }\n "}, {"sha": "60a7436dbaa19e63d57c14cb3c2f6ecb3f7398c1", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18a1327e3ccf02ae9f755ca280d53177eeb298d/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=c18a1327e3ccf02ae9f755ca280d53177eeb298d", "patch": "@@ -435,12 +435,12 @@ pub fn ty_to_string(cx: &ctxt, typ: t) -> String {\n             parameterized(cx, base.as_slice(), substs, &generics)\n         }\n         ty_trait(box ty::TyTrait {\n-            def_id: did, ref substs, ref bounds\n+            ref principal, ref bounds\n         }) => {\n-            let base = ty::item_path_str(cx, did);\n-            let trait_def = ty::lookup_trait_def(cx, did);\n+            let base = ty::item_path_str(cx, principal.def_id);\n+            let trait_def = ty::lookup_trait_def(cx, principal.def_id);\n             let ty = parameterized(cx, base.as_slice(),\n-                                   substs, &trait_def.generics);\n+                                   &principal.substs, &trait_def.generics);\n             let bound_str = bounds.user_string(cx);\n             let bound_sep = if bound_str.is_empty() { \"\" } else { \"+\" };\n             format!(\"{}{}{}\","}]}