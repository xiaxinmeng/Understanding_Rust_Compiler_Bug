{"sha": "5cf05a29922eea5b2ef0bd1d9465214107cec2fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZjA1YTI5OTIyZWVhNWIyZWYwYmQxZDk0NjUyMTQxMDdjZWMyZmQ=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-08-18T14:20:12Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-08-18T14:20:12Z"}, "message": "Update tests", "tree": {"sha": "2c2a8aa324c30a3e6e783c7e94a600907e717d66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c2a8aa324c30a3e6e783c7e94a600907e717d66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cf05a29922eea5b2ef0bd1d9465214107cec2fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf05a29922eea5b2ef0bd1d9465214107cec2fd", "html_url": "https://github.com/rust-lang/rust/commit/5cf05a29922eea5b2ef0bd1d9465214107cec2fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cf05a29922eea5b2ef0bd1d9465214107cec2fd/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63ac49638b32fd9daebb36e75ee213580503bf9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ac49638b32fd9daebb36e75ee213580503bf9e", "html_url": "https://github.com/rust-lang/rust/commit/63ac49638b32fd9daebb36e75ee213580503bf9e"}], "stats": {"total": 60, "additions": 41, "deletions": 19}, "files": [{"sha": "68a79bb0ab0ac5f9a864047d3bfc415eeb93cc72", "filename": "tests/source/configs-match_pattern_separator_break_point-Front.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5cf05a29922eea5b2ef0bd1d9465214107cec2fd/tests%2Fsource%2Fconfigs-match_pattern_separator_break_point-Front.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf05a29922eea5b2ef0bd1d9465214107cec2fd/tests%2Fsource%2Fconfigs-match_pattern_separator_break_point-Front.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-match_pattern_separator_break_point-Front.rs?ref=5cf05a29922eea5b2ef0bd1d9465214107cec2fd", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-match_pattern_separator_break_point: Front\n+// Whether `|` goes to front or to back.\n+\n+fn main() {\n+    match lorem {\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa | bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb | cccccccccccccccccccccccccccccccccccccccc | dddddddddddddddddddddddddddddddddddddddd => (),\n+        _ => (),\n+    }\n+}"}, {"sha": "527ceea06ef64f88e33da359e6fd2518d2ea4f84", "filename": "tests/source/match.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cf05a29922eea5b2ef0bd1d9465214107cec2fd/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf05a29922eea5b2ef0bd1d9465214107cec2fd/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=5cf05a29922eea5b2ef0bd1d9465214107cec2fd", "patch": "@@ -159,10 +159,9 @@ fn issue339() {\n         // t comment\n         t => 1,\n         u => 2,\n-        // TODO uncomment when block-support exists\n-        // v => {\n-        // } /* funky block\n-        //    * comment */\n+        v => {\n+        } /* funky block\n+           * comment */\n         // final comment\n     }\n }"}, {"sha": "d6cb87e012128bab531758b1e2868e644daae709", "filename": "tests/target/configs-match_pattern_separator_break_point-Front.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5cf05a29922eea5b2ef0bd1d9465214107cec2fd/tests%2Ftarget%2Fconfigs-match_pattern_separator_break_point-Front.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf05a29922eea5b2ef0bd1d9465214107cec2fd/tests%2Ftarget%2Fconfigs-match_pattern_separator_break_point-Front.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-match_pattern_separator_break_point-Front.rs?ref=5cf05a29922eea5b2ef0bd1d9465214107cec2fd", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-match_pattern_separator_break_point: Front\n+// Whether `|` goes to front or to back.\n+\n+fn main() {\n+    match lorem {\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+        | bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n+        | cccccccccccccccccccccccccccccccccccccccc\n+        | dddddddddddddddddddddddddddddddddddddddd => (),\n+        _ => (),\n+    }\n+}"}, {"sha": "5b368fd08dbdfe2efbd747052e39edb09c207355", "filename": "tests/target/control-brace-style-always-next-line.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cf05a29922eea5b2ef0bd1d9465214107cec2fd/tests%2Ftarget%2Fcontrol-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf05a29922eea5b2ef0bd1d9465214107cec2fd/tests%2Ftarget%2Fcontrol-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcontrol-brace-style-always-next-line.rs?ref=5cf05a29922eea5b2ef0bd1d9465214107cec2fd", "patch": "@@ -41,7 +41,8 @@ fn main() {\n     }\n \n     match some_var\n-    { // match comment\n+    {\n+        // match comment\n         pattern0 => val0,\n         pattern1 => val1,\n         pattern2 | pattern3 =>"}, {"sha": "46b74b95d825d9c42bf2a069e3050ed4cd359bf9", "filename": "tests/target/control-brace-style-always-same-line.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cf05a29922eea5b2ef0bd1d9465214107cec2fd/tests%2Ftarget%2Fcontrol-brace-style-always-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf05a29922eea5b2ef0bd1d9465214107cec2fd/tests%2Ftarget%2Fcontrol-brace-style-always-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcontrol-brace-style-always-same-line.rs?ref=5cf05a29922eea5b2ef0bd1d9465214107cec2fd", "patch": "@@ -34,7 +34,8 @@ fn main() {\n         }\n     }\n \n-    match some_var { // match comment\n+    match some_var {\n+        // match comment\n         pattern0 => val0,\n         pattern1 => val1,\n         pattern2 | pattern3 => {"}, {"sha": "314c05962e5c41be3d55225e53ed5dd4b699713d", "filename": "tests/target/match.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5cf05a29922eea5b2ef0bd1d9465214107cec2fd/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf05a29922eea5b2ef0bd1d9465214107cec2fd/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=5cf05a29922eea5b2ef0bd1d9465214107cec2fd", "patch": "@@ -128,13 +128,15 @@ fn issue339() {\n         h => {\n             // comment above block\n         }\n-        i => {} // comment below block\n+        i => {}\n+        // comment below block\n         j => {\n             // comment inside block\n         }\n         j2 => {\n             // comments inside...\n-        } // ... and after\n+        }\n+        // ... and after\n         // TODO uncomment when vertical whitespace is handled better\n         // k => {\n         //\n@@ -156,11 +158,9 @@ fn issue339() {\n         // t comment\n         t => 1,\n         u => 2,\n-        // TODO uncomment when block-support exists\n-        // v => {\n-        // } /* funky block\n-        //    * comment */\n-        // final comment\n+        v => {} /* funky block\n+                 * comment */\n+                /* final comment */\n     }\n }\n \n@@ -173,8 +173,8 @@ fn issue355() {\n         e => vec![1, 2],\n         f => vec![3; 4],\n         h => println!(\"a\", b), // h comment\n-        i => vec![1, 2], // i comment\n-        j => vec![3; 4], // j comment\n+        i => vec![1, 2],       // i comment\n+        j => vec![3; 4],       // j comment\n         // k comment\n         k => println!(\"a\", b),\n         // l comment\n@@ -213,11 +213,11 @@ fn issue355() {\n         y => vec![3; 4],\n         // Brackets with comments\n         tc => println!{\"a\", b}, // comment\n-        uc => vec![1, 2], // comment\n-        vc => vec![3; 4], // comment\n+        uc => vec![1, 2],       // comment\n+        vc => vec![3; 4],       // comment\n         wc => println![\"a\", b], // comment\n-        xc => vec![1, 2], // comment\n-        yc => vec![3; 4], // comment\n+        xc => vec![1, 2],       // comment\n+        yc => vec![3; 4],       // comment\n         yd => looooooooooooooooooooooooooooooooooooooooooooooooooooooooong_func(\n             aaaaaaaaaa,\n             bbbbbbbbbb,"}]}