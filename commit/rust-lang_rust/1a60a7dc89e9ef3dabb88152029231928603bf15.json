{"sha": "1a60a7dc89e9ef3dabb88152029231928603bf15", "node_id": "C_kwDOAAsO6NoAKDFhNjBhN2RjODllOWVmM2RhYmI4ODE1MjAyOTIzMTkyODYwM2JmMTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-05T11:56:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-05T11:56:14Z"}, "message": "Auto merge of #2334 - RalfJung:range, r=RalfJung\n\nwe don't need HexRange any more", "tree": {"sha": "9a41133ef85d4dd7930b19b4a6983a0fc309627d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a41133ef85d4dd7930b19b4a6983a0fc309627d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a60a7dc89e9ef3dabb88152029231928603bf15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a60a7dc89e9ef3dabb88152029231928603bf15", "html_url": "https://github.com/rust-lang/rust/commit/1a60a7dc89e9ef3dabb88152029231928603bf15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a60a7dc89e9ef3dabb88152029231928603bf15/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "723fa96c8d1c7e9ea3f805cd41d9449ca281662d", "url": "https://api.github.com/repos/rust-lang/rust/commits/723fa96c8d1c7e9ea3f805cd41d9449ca281662d", "html_url": "https://github.com/rust-lang/rust/commit/723fa96c8d1c7e9ea3f805cd41d9449ca281662d"}, {"sha": "a07398d44139fe675bbf3560462151a6524d8065", "url": "https://api.github.com/repos/rust-lang/rust/commits/a07398d44139fe675bbf3560462151a6524d8065", "html_url": "https://github.com/rust-lang/rust/commit/a07398d44139fe675bbf3560462151a6524d8065"}], "stats": {"total": 46, "additions": 21, "deletions": 25}, "files": [{"sha": "11b5a21b2af898fcb4be0199b1210c826488e568", "filename": "src/diagnostics.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1a60a7dc89e9ef3dabb88152029231928603bf15/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a60a7dc89e9ef3dabb88152029231928603bf15/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=1a60a7dc89e9ef3dabb88152029231928603bf15", "patch": "@@ -8,7 +8,6 @@ use rustc_middle::ty;\n use rustc_span::{source_map::DUMMY_SP, Span, SpanData, Symbol};\n use rustc_target::abi::{Align, Size};\n \n-use crate::helpers::HexRange;\n use crate::stacked_borrows::{diagnostics::TagHistory, AccessKind};\n use crate::*;\n \n@@ -184,14 +183,14 @@ pub fn report_error<'tcx, 'mir>(\n                     ];\n                     match history {\n                         Some(TagHistory::Tagged {tag, created: (created_range, created_span), invalidated, protected }) => {\n-                            let msg = format!(\"{:?} was created by a retag at offsets {}\", tag, HexRange(*created_range));\n+                            let msg = format!(\"{tag:?} was created by a retag at offsets {created_range:?}\");\n                             helps.push((Some(*created_span), msg));\n                             if let Some((invalidated_range, invalidated_span)) = invalidated {\n-                                let msg = format!(\"{:?} was later invalidated at offsets {}\", tag, HexRange(*invalidated_range));\n+                                let msg = format!(\"{tag:?} was later invalidated at offsets {invalidated_range:?}\");\n                                 helps.push((Some(*invalidated_span), msg));\n                             }\n                             if let Some((protecting_tag, protecting_tag_span, protection_span)) = protected {\n-                                helps.push((Some(*protecting_tag_span), format!(\"{:?} was protected due to {:?} which was created here\", tag, protecting_tag)));\n+                                helps.push((Some(*protecting_tag_span), format!(\"{tag:?} was protected due to {protecting_tag:?} which was created here\")));\n                                 helps.push((Some(*protection_span), format!(\"this protector is live for this call\")));\n                             }\n                         }\n@@ -448,32 +447,38 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             for e in diagnostics.drain(..) {\n                 use NonHaltingDiagnostic::*;\n                 let msg = match e {\n-                    CreatedPointerTag(tag, None) => format!(\"created tag {tag:?}\"),\n+                    CreatedPointerTag(tag, None) =>\n+                        format!(\"created tag {tag:?}\"),\n                     CreatedPointerTag(tag, Some((alloc_id, range))) =>\n-                        format!(\"created tag {tag:?} at {alloc_id:?}{}\", HexRange(range)),\n+                        format!(\"created tag {tag:?} at {alloc_id:?}{range:?}\"),\n                     PoppedPointerTag(item, tag) =>\n                         match tag {\n                             None =>\n                                 format!(\n-                                    \"popped tracked tag for item {:?} due to deallocation\",\n-                                    item\n+                                    \"popped tracked tag for item {item:?} due to deallocation\",\n                                 ),\n                             Some((tag, access)) => {\n                                 format!(\n-                                    \"popped tracked tag for item {:?} due to {:?} access for {:?}\",\n-                                    item, access, tag\n+                                    \"popped tracked tag for item {item:?} due to {access:?} access for {tag:?}\",\n                                 )\n                             }\n                         },\n-                    CreatedCallId(id) => format!(\"function call with id {id}\"),\n+                    CreatedCallId(id) =>\n+                        format!(\"function call with id {id}\"),\n                     CreatedAlloc(AllocId(id), size, align, kind) =>\n-                        format!(\"created {kind} allocation of {} bytes (alignment {} bytes) with id {id}\", size.bytes(), align.bytes()),\n-                    FreedAlloc(AllocId(id)) => format!(\"freed allocation with id {id}\"),\n+                        format!(\n+                            \"created {kind} allocation of {size} bytes (alignment {align} bytes) with id {id}\",\n+                            size = size.bytes(),\n+                            align = align.bytes(),\n+                        ),\n+                    FreedAlloc(AllocId(id)) =>\n+                        format!(\"freed allocation with id {id}\"),\n                     RejectedIsolatedOp(ref op) =>\n                         format!(\"{op} was made to return an error due to isolation\"),\n                     ProgressReport =>\n                         format!(\"progress report: current operation being executed is here\"),\n-                    Int2Ptr { .. } => format!(\"integer-to-pointer cast\"),\n+                    Int2Ptr { .. } =>\n+                        format!(\"integer-to-pointer cast\"),\n                 };\n \n                 let (title, diag_level) = match e {"}, {"sha": "4b2604afa2c1532ea3f3cc177bf1e19ac3db0d0f", "filename": "src/helpers.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a60a7dc89e9ef3dabb88152029231928603bf15/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a60a7dc89e9ef3dabb88152029231928603bf15/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=1a60a7dc89e9ef3dabb88152029231928603bf15", "patch": "@@ -905,15 +905,6 @@ pub fn get_local_crates(tcx: TyCtxt<'_>) -> Vec<CrateNum> {\n     local_crates\n }\n \n-/// Formats an AllocRange like [0x1..0x3], for use in diagnostics.\n-pub struct HexRange(pub AllocRange);\n-\n-impl std::fmt::Display for HexRange {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        write!(f, \"[{:#x}..{:#x}]\", self.0.start.bytes(), self.0.end().bytes())\n-    }\n-}\n-\n /// Helper function used inside the shims of foreign functions to check that\n /// `target_os` is a supported UNIX OS.\n pub fn target_os_is_unix(target_os: &str) -> bool {"}, {"sha": "cee643fdf82122807dbb005173dfb28d59322f6f", "filename": "src/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a60a7dc89e9ef3dabb88152029231928603bf15/src%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a60a7dc89e9ef3dabb88152029231928603bf15/src%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fdiagnostics.rs?ref=1a60a7dc89e9ef3dabb88152029231928603bf15", "patch": "@@ -4,7 +4,7 @@ use rustc_middle::mir::interpret::{AllocId, AllocRange};\n use rustc_span::{Span, SpanData};\n use rustc_target::abi::Size;\n \n-use crate::helpers::{CurrentSpan, HexRange};\n+use crate::helpers::CurrentSpan;\n use crate::stacked_borrows::{err_sb_ub, AccessKind, Permission};\n use crate::Item;\n use crate::SbTag;\n@@ -178,7 +178,7 @@ fn operation_summary(\n     alloc_id: AllocId,\n     alloc_range: AllocRange,\n ) -> String {\n-    format!(\"this error occurs as part of {} at {:?}{}\", operation, alloc_id, HexRange(alloc_range))\n+    format!(\"this error occurs as part of {operation} at {alloc_id:?}{alloc_range:?}\")\n }\n \n fn error_cause(stack: &Stack, tag: SbTagExtra) -> &'static str {"}]}