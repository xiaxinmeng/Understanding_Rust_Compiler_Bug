{"sha": "226202d9026b0f24b4f7aad4de398bd8378774cd", "node_id": "C_kwDOAAsO6NoAKDIyNjIwMmQ5MDI2YjBmMjRiNGY3YWFkNGRlMzk4YmQ4Mzc4Nzc0Y2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-06T00:53:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-06T00:53:01Z"}, "message": "Auto merge of #105119 - JakobDegen:inline-experiments, r=cjgillot\n\nDisable top down MIR inlining\n\nThe current MIR inliner has exponential behavior in some cases: <https://godbolt.org/z/7jnWah4fE>. The cause of this is top-down inlining, where we repeatedly do inlining like `call_a() => { call_b(); call_b(); }`. Each decision on its own seems to make sense, but the result is exponential.\n\nDisabling top-down inlining fundamentally prevents this. Each call site in the original, unoptimized source code is now considered for inlining exactly one time, which means that the total growth in MIR size is limited to number of call sites * inlining threshold.\n\nTop down inlining may be worth re-introducing at some point, but it needs to be accompanied with a principled way to prevent this kind of behavior.", "tree": {"sha": "679a85a3146a7cdd82c2b04217b5f1b06535a2a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/679a85a3146a7cdd82c2b04217b5f1b06535a2a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/226202d9026b0f24b4f7aad4de398bd8378774cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/226202d9026b0f24b4f7aad4de398bd8378774cd", "html_url": "https://github.com/rust-lang/rust/commit/226202d9026b0f24b4f7aad4de398bd8378774cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/226202d9026b0f24b4f7aad4de398bd8378774cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e440b03761f725d452120a992723c7e261822b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e440b03761f725d452120a992723c7e261822b2", "html_url": "https://github.com/rust-lang/rust/commit/8e440b03761f725d452120a992723c7e261822b2"}, {"sha": "f4f777772e751066b0ca75f942d403111595c45c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f777772e751066b0ca75f942d403111595c45c", "html_url": "https://github.com/rust-lang/rust/commit/f4f777772e751066b0ca75f942d403111595c45c"}], "stats": {"total": 358, "additions": 243, "deletions": 115}, "files": [{"sha": "220cf7df9c6c7e99cd35d103fa959988f9b1db34", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/226202d9026b0f24b4f7aad4de398bd8378774cd/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226202d9026b0f24b4f7aad4de398bd8378774cd/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=226202d9026b0f24b4f7aad4de398bd8378774cd", "patch": "@@ -8,7 +8,6 @@ use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n-use rustc_span::def_id::DefId;\n use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n@@ -87,13 +86,8 @@ fn inline<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n \n     let param_env = tcx.param_env_reveal_all_normalized(def_id);\n \n-    let mut this = Inliner {\n-        tcx,\n-        param_env,\n-        codegen_fn_attrs: tcx.codegen_fn_attrs(def_id),\n-        history: Vec::new(),\n-        changed: false,\n-    };\n+    let mut this =\n+        Inliner { tcx, param_env, codegen_fn_attrs: tcx.codegen_fn_attrs(def_id), changed: false };\n     let blocks = BasicBlock::new(0)..body.basic_blocks.next_index();\n     this.process_blocks(body, blocks);\n     this.changed\n@@ -104,12 +98,6 @@ struct Inliner<'tcx> {\n     param_env: ParamEnv<'tcx>,\n     /// Caller codegen attributes.\n     codegen_fn_attrs: &'tcx CodegenFnAttrs,\n-    /// Stack of inlined instances.\n-    /// We only check the `DefId` and not the substs because we want to\n-    /// avoid inlining cases of polymorphic recursion.\n-    /// The number of `DefId`s is finite, so checking history is enough\n-    /// to ensure that we do not loop endlessly while inlining.\n-    history: Vec<DefId>,\n     /// Indicates that the caller body has been modified.\n     changed: bool,\n }\n@@ -134,12 +122,12 @@ impl<'tcx> Inliner<'tcx> {\n                     debug!(\"not-inlined {} [{}]\", callsite.callee, reason);\n                     continue;\n                 }\n-                Ok(new_blocks) => {\n+                Ok(_) => {\n                     debug!(\"inlined {}\", callsite.callee);\n                     self.changed = true;\n-                    self.history.push(callsite.callee.def_id());\n-                    self.process_blocks(caller_body, new_blocks);\n-                    self.history.pop();\n+                    // We could process the blocks returned by `try_inlining` here. However, that\n+                    // leads to exponential compile times due to the top-down nature of this kind\n+                    // of inlining.\n                 }\n             }\n         }\n@@ -313,10 +301,6 @@ impl<'tcx> Inliner<'tcx> {\n                     return None;\n                 }\n \n-                if self.history.contains(&callee.def_id()) {\n-                    return None;\n-                }\n-\n                 let fn_sig = self.tcx.bound_fn_sig(def_id).subst(self.tcx, substs);\n \n                 return Some(CallSite {"}, {"sha": "afe157ccd7faa3d08361122791c41967f3014620", "filename": "src/test/mir-opt/inline/cycle.g.Inline.diff", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff?ref=226202d9026b0f24b4f7aad4de398bd8378774cd", "patch": "@@ -10,8 +10,6 @@\n +         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         let mut _4: &fn() {main};        // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         scope 2 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n-+         }\n +     }\n   \n       bb0: {\n@@ -29,7 +27,10 @@\n +         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         _3 = move (*_4)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         _3 = <fn() {main} as Fn<()>>::call(move _4, move _5) -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++                                          // mir::Constant\n++                                          // + span: $DIR/cycle.rs:6:5: 6:6\n++                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() {main}, ()) -> <fn() {main} as FnOnce<()>>::Output {<fn() {main} as Fn<()>>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -39,19 +40,19 @@\n           return;                          // scope 0 at $DIR/cycle.rs:+2:2: +2:2\n +     }\n + \n-+     bb2 (cleanup): {\n-+         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++     bb2: {\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n++         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n +     }\n + \n +     bb3 (cleanup): {\n-+         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n++         drop(_2) -> bb4;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n +     }\n + \n-+     bb4: {\n-+         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n-+         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++     bb4 (cleanup): {\n++         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n       }\n   }\n   "}, {"sha": "bd89e09ecd148b4e52384621802be95f24c94e43", "filename": "src/test/mir-opt/inline/cycle.main.Inline.diff", "status": "modified", "additions": 12, "deletions": 28, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff?ref=226202d9026b0f24b4f7aad4de398bd8378774cd", "patch": "@@ -10,18 +10,6 @@\n +         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         let mut _4: &fn() {g};           // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         scope 2 (inlined <fn() {g} as Fn<()>>::call - shim(fn() {g})) { // at $DIR/cycle.rs:6:5: 6:8\n-+             scope 3 (inlined g) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n-+                 let mut _6: fn() {main}; // in scope 3 at $DIR/cycle.rs:12:5: 12:12\n-+                 scope 4 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n-+                     debug g => _6;       // in scope 4 at $DIR/cycle.rs:5:6: 5:7\n-+                     let _7: ();          // in scope 4 at $DIR/cycle.rs:6:5: 6:8\n-+                     let mut _8: &fn() {main}; // in scope 4 at $DIR/cycle.rs:6:5: 6:6\n-+                     scope 5 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n-+                     }\n-+                 }\n-+             }\n-+         }\n +     }\n   \n       bb0: {\n@@ -39,11 +27,10 @@\n +         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:12:5: 12:12\n-+         StorageLive(_7);                 // scope 4 at $DIR/cycle.rs:6:5: 6:8\n-+         StorageLive(_8);                 // scope 4 at $DIR/cycle.rs:6:5: 6:6\n-+         _8 = &_6;                        // scope 4 at $DIR/cycle.rs:6:5: 6:6\n-+         _7 = move (*_8)() -> [return: bb4, unwind: bb2]; // scope 5 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         _3 = <fn() {g} as Fn<()>>::call(move _4, move _5) -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++                                          // mir::Constant\n++                                          // + span: $DIR/cycle.rs:6:5: 6:6\n++                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() {g}, ()) -> <fn() {g} as FnOnce<()>>::Output {<fn() {g} as Fn<()>>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -53,22 +40,19 @@\n           return;                          // scope 0 at $DIR/cycle.rs:+2:2: +2:2\n +     }\n + \n-+     bb2 (cleanup): {\n-+         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++     bb2: {\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n++         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n +     }\n + \n +     bb3 (cleanup): {\n-+         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n++         drop(_2) -> bb4;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n +     }\n + \n-+     bb4: {\n-+         StorageDead(_8);                 // scope 4 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_7);                 // scope 4 at $DIR/cycle.rs:6:8: 6:9\n-+         StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:12:5: 12:12\n-+         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n-+         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++     bb4 (cleanup): {\n++         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n       }\n   }\n   "}, {"sha": "d9fd7b324c7619e79a1fa373b9ebba312225d8c6", "filename": "src/test/mir-opt/inline/exponential_runtime.main.Inline.diff", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff?ref=226202d9026b0f24b4f7aad4de398bd8378774cd", "patch": "@@ -0,0 +1,50 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/exponential_runtime.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n++     scope 1 (inlined <() as G>::call) {  // at $DIR/exponential_runtime.rs:86:5: 86:22\n++         let _2: ();                      // in scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n++         let _3: ();                      // in scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         let _4: ();                      // in scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n+-         _1 = <() as G>::call() -> bb1;   // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n++         StorageLive(_2);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n++         _2 = <() as F>::call() -> bb1;   // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n+                                           // mir::Constant\n+-                                          // + span: $DIR/exponential_runtime.rs:86:5: 86:20\n+-                                          // + literal: Const { ty: fn() {<() as G>::call}, val: Value(<ZST>) }\n++                                          // + span: $DIR/exponential_runtime.rs:73:9: 73:23\n++                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n++         StorageDead(_2);                 // scope 1 at $DIR/exponential_runtime.rs:73:25: 73:26\n++         StorageLive(_3);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         _3 = <() as F>::call() -> bb2;   // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:74:9: 74:23\n++                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb2: {\n++         StorageDead(_3);                 // scope 1 at $DIR/exponential_runtime.rs:74:25: 74:26\n++         StorageLive(_4);                 // scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n++         _4 = <() as F>::call() -> bb3;   // scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:75:9: 75:23\n++                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb3: {\n++         StorageDead(_4);                 // scope 1 at $DIR/exponential_runtime.rs:75:25: 75:26\n+          StorageDead(_1);                 // scope 0 at $DIR/exponential_runtime.rs:+1:22: +1:23\n+          _0 = const ();                   // scope 0 at $DIR/exponential_runtime.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/exponential_runtime.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "d9219d76a98bc6ee11d606eca475d588e7be1181", "filename": "src/test/mir-opt/inline/exponential_runtime.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Fexponential_runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Fexponential_runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fexponential_runtime.rs?ref=226202d9026b0f24b4f7aad4de398bd8378774cd", "patch": "@@ -0,0 +1,87 @@\n+// Checks that code with exponential runtime does not have exponential behavior in inlining.\n+\n+trait A {\n+    fn call();\n+}\n+\n+trait B {\n+    fn call();\n+}\n+impl<T: A> B for T {\n+    #[inline]\n+    fn call() {\n+        <T as A>::call();\n+        <T as A>::call();\n+        <T as A>::call();\n+    }\n+}\n+\n+trait C {\n+    fn call();\n+}\n+impl<T: B> C for T {\n+    #[inline]\n+    fn call() {\n+        <T as B>::call();\n+        <T as B>::call();\n+        <T as B>::call();\n+    }\n+}\n+\n+trait D {\n+    fn call();\n+}\n+impl<T: C> D for T {\n+    #[inline]\n+    fn call() {\n+        <T as C>::call();\n+        <T as C>::call();\n+        <T as C>::call();\n+    }\n+}\n+\n+trait E {\n+    fn call();\n+}\n+impl<T: D> E for T {\n+    #[inline]\n+    fn call() {\n+        <T as D>::call();\n+        <T as D>::call();\n+        <T as D>::call();\n+    }\n+}\n+\n+trait F {\n+    fn call();\n+}\n+impl<T: E> F for T {\n+    #[inline]\n+    fn call() {\n+        <T as E>::call();\n+        <T as E>::call();\n+        <T as E>::call();\n+    }\n+}\n+\n+trait G {\n+    fn call();\n+}\n+impl<T: F> G for T {\n+    #[inline]\n+    fn call() {\n+        <T as F>::call();\n+        <T as F>::call();\n+        <T as F>::call();\n+    }\n+}\n+\n+impl A for () {\n+    #[inline(never)]\n+    fn call() {}\n+}\n+\n+// EMIT_MIR exponential_runtime.main.Inline.diff\n+fn main() {\n+    <() as G>::call();\n+}"}, {"sha": "f54a1a747d47436aba941cb1ab4df23f43bad2b4", "filename": "src/test/mir-opt/inline/inline_cycle.one.Inline.diff", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff?ref=226202d9026b0f24b4f7aad4de398bd8378774cd", "patch": "@@ -5,20 +5,17 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle.rs:+0:10: +0:10\n       let _1: ();                          // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n +     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle.rs:14:5: 14:24\n-+         scope 2 (inlined <A<C> as Call>::call) { // at $DIR/inline_cycle.rs:43:9: 43:23\n-+             scope 3 (inlined <B<C> as Call>::call) { // at $DIR/inline_cycle.rs:28:9: 28:31\n-+             }\n-+         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n-+         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline_cycle.rs:36:9: 36:28\n++         _1 = <A<C> as Call>::call() -> bb1; // scope 1 at $DIR/inline_cycle.rs:43:9: 43:23\n                                            // mir::Constant\n -                                          // + span: $DIR/inline_cycle.rs:14:5: 14:22\n-+                                          // + span: $DIR/inline_cycle.rs:36:9: 36:26\n-                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n++                                          // + span: $DIR/inline_cycle.rs:43:9: 43:21\n++                                          // + literal: Const { ty: fn() {<A<C> as Call>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "a940848c269cda8d5a5a98dd968f334f687dd0a4", "filename": "src/test/mir-opt/inline/inline_cycle.two.Inline.diff", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff?ref=226202d9026b0f24b4f7aad4de398bd8378774cd", "patch": "@@ -9,11 +9,6 @@\n +         debug f => _2;                   // in scope 1 at $DIR/inline_cycle.rs:53:22: 53:23\n +         let _3: ();                      // in scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n +         let mut _4: ();                  // in scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n-+         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline_cycle.rs:54:5: 54:8\n-+             scope 3 (inlined f) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n-+                 let _5: ();              // in scope 3 at $DIR/inline_cycle.rs:59:5: 59:12\n-+             }\n-+         }\n +     }\n   \n       bb0: {\n@@ -23,23 +18,19 @@\n +         _2 = f;                          // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n                                            // mir::Constant\n -                                          // + span: $DIR/inline_cycle.rs:49:5: 49:9\n-+                                          // + span: $DIR/inline_cycle.rs:49:10: 49:11\n-+                                          // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: fn(fn() {f}) {call::<fn() {f}>}, val: Value(<ZST>) }\n+-                                          // mir::Constant\n+                                           // + span: $DIR/inline_cycle.rs:49:10: 49:11\n+                                           // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n +         StorageLive(_3);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n +         StorageLive(_4);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n-+         StorageLive(_5);                 // scope 3 at $DIR/inline_cycle.rs:59:5: 59:12\n-+         _5 = call::<fn() {f}>(f) -> bb1; // scope 3 at $DIR/inline_cycle.rs:59:5: 59:12\n++         _3 = <fn() {f} as FnOnce<()>>::call_once(move _2, move _4) -> bb1; // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n +                                          // mir::Constant\n-+                                          // + span: $DIR/inline_cycle.rs:59:5: 59:9\n-                                           // + literal: Const { ty: fn(fn() {f}) {call::<fn() {f}>}, val: Value(<ZST>) }\n-                                           // mir::Constant\n--                                          // + span: $DIR/inline_cycle.rs:49:10: 49:11\n-+                                          // + span: $DIR/inline_cycle.rs:59:10: 59:11\n-                                           // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n++                                          // + span: $DIR/inline_cycle.rs:54:5: 54:6\n++                                          // + literal: Const { ty: extern \"rust-call\" fn(fn() {f}, ()) -> <fn() {f} as FnOnce<()>>::Output {<fn() {f} as FnOnce<()>>::call_once}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-+         StorageDead(_5);                 // scope 3 at $DIR/inline_cycle.rs:59:12: 59:13\n +         StorageDead(_4);                 // scope 1 at $DIR/inline_cycle.rs:54:7: 54:8\n +         StorageDead(_3);                 // scope 1 at $DIR/inline_cycle.rs:54:8: 54:9\n +         StorageDead(_2);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12"}, {"sha": "04de3e61e5ff81f6b148d18fae783ac62bad7dc8", "filename": "src/test/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=226202d9026b0f24b4f7aad4de398bd8378774cd", "patch": "@@ -6,21 +6,18 @@\n       let _1: ();                          // in scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n +     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle_generic.rs:9:5: 9:24\n +         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline_cycle_generic.rs:38:9: 38:31\n-+             scope 3 (inlined <A as Call>::call) { // at $DIR/inline_cycle_generic.rs:31:9: 31:28\n-+                 scope 4 (inlined <B<C> as Call>::call) { // at $DIR/inline_cycle_generic.rs:23:9: 23:31\n-+                 }\n-+             }\n +         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n-+         _1 = <C as Call>::call() -> bb1; // scope 4 at $DIR/inline_cycle_generic.rs:31:9: 31:28\n++         _1 = <A as Call>::call() -> bb1; // scope 2 at $DIR/inline_cycle_generic.rs:31:9: 31:28\n                                            // mir::Constant\n -                                          // + span: $DIR/inline_cycle_generic.rs:9:5: 9:22\n+-                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n +                                          // + span: $DIR/inline_cycle_generic.rs:31:9: 31:26\n-                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n++                                          // + literal: Const { ty: fn() {<A as Call>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "a01bcf1645b0571fe7f662353b5bf6ce1db23725", "filename": "src/test/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=226202d9026b0f24b4f7aad4de398bd8378774cd", "patch": "@@ -19,14 +19,6 @@\n +             scope 3 {\n +                 debug b => _9;           // in scope 3 at $DIR/inline_diverging.rs:28:9: 28:10\n +             }\n-+             scope 6 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline_diverging.rs:28:13: 28:16\n-+                 scope 7 (inlined sleep) { // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n-+                 }\n-+             }\n-+         }\n-+         scope 4 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline_diverging.rs:27:13: 27:16\n-+             scope 5 (inlined sleep) {    // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n-+             }\n +         }\n +     }\n   \n@@ -46,11 +38,51 @@\n +         StorageLive(_4);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n +         _4 = &_2;                        // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n +         StorageLive(_5);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n-+         goto -> bb1;                     // scope 5 at $DIR/inline_diverging.rs:39:5: 39:12\n++         _3 = <fn() -> ! {sleep} as Fn<()>>::call(move _4, move _5) -> [return: bb1, unwind: bb5]; // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n++                                          // mir::Constant\n++                                          // + span: $DIR/inline_diverging.rs:27:13: 27:14\n++                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() -> ! {sleep}, ()) -> <fn() -> ! {sleep} as FnOnce<()>>::Output {<fn() -> ! {sleep} as Fn<()>>::call}, val: Value(<ZST>) }\n +     }\n + \n +     bb1: {\n-+         goto -> bb1;                     // scope 5 at $DIR/inline_diverging.rs:39:5: 39:12\n++         StorageDead(_5);                 // scope 1 at $DIR/inline_diverging.rs:27:15: 27:16\n++         StorageDead(_4);                 // scope 1 at $DIR/inline_diverging.rs:27:15: 27:16\n++         StorageLive(_6);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n++         _6 = &_2;                        // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n++         StorageLive(_7);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16\n++         _9 = <fn() -> ! {sleep} as Fn<()>>::call(move _6, move _7) -> [return: bb2, unwind: bb4]; // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16\n++                                          // mir::Constant\n++                                          // + span: $DIR/inline_diverging.rs:28:13: 28:14\n++                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() -> ! {sleep}, ()) -> <fn() -> ! {sleep} as FnOnce<()>>::Output {<fn() -> ! {sleep} as Fn<()>>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb2: {\n++         StorageDead(_7);                 // scope 2 at $DIR/inline_diverging.rs:28:15: 28:16\n++         StorageDead(_6);                 // scope 2 at $DIR/inline_diverging.rs:28:15: 28:16\n++         StorageLive(_8);                 // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n++         _8 = move _3;                    // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n++         Deinit(_1);                      // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11\n++         (_1.0: !) = move _8;             // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11\n++         (_1.1: !) = move _9;             // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11\n++         StorageDead(_8);                 // scope 3 at $DIR/inline_diverging.rs:29:10: 29:11\n++         StorageDead(_3);                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n++         drop(_2) -> bb3;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n++     }\n++ \n++     bb3: {\n++         unreachable;                     // scope 0 at $DIR/inline_diverging.rs:30:2: 30:2\n++     }\n++ \n++     bb4 (cleanup): {\n++         drop(_3) -> bb5;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n++     }\n++ \n++     bb5 (cleanup): {\n++         drop(_2) -> bb6;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n++     }\n++ \n++     bb6 (cleanup): {\n++         resume;                          // scope 1 at $DIR/inline_diverging.rs:26:1: 30:2\n       }\n   }\n   "}, {"sha": "b28c6f687f70d75a37707306fa7efc2a4cb91f5b", "filename": "src/test/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/226202d9026b0f24b4f7aad4de398bd8378774cd/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=226202d9026b0f24b4f7aad4de398bd8378774cd", "patch": "@@ -22,9 +22,6 @@\n                   let mut _18: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                   scope 9 {\n                       debug e => _16;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-                      scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n-                          debug t => _18;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-                      }\n                   }\n               }\n           }\n@@ -95,18 +92,11 @@\n           StorageLive(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n-          StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n+-         _17 = <i32 as From<i32>>::from(move _18) -> bb8; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n++         _17 = <i32 as From<i32>>::from(move _18) -> bb7; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/result.rs:LL:COL\n+                                           // + literal: Const { ty: fn(i32) -> i32 {<i32 as From<i32>>::from}, val: Value(<ZST>) }\n       }\n   \n -     bb5: {\n@@ -152,5 +142,20 @@\n +         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n +         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n       }\n+  \n+-     bb8: {\n++     bb7: {\n+          StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n+          StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n+          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n+          StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n+      }\n   }\n   "}]}