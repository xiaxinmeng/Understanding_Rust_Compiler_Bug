{"sha": "ff191a808e563d36b4c8bedbd2a67aa44156faf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMTkxYTgwOGU1NjNkMzZiNGM4YmVkYmQyYTY3YWE0NDE1NmZhZjk=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-01-06T14:05:04Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-01-06T14:34:36Z"}, "message": "Restrict use_self on nested items", "tree": {"sha": "98a65593155573f12b42a3de134817476a4f49c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98a65593155573f12b42a3de134817476a4f49c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff191a808e563d36b4c8bedbd2a67aa44156faf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff191a808e563d36b4c8bedbd2a67aa44156faf9", "html_url": "https://github.com/rust-lang/rust/commit/ff191a808e563d36b4c8bedbd2a67aa44156faf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff191a808e563d36b4c8bedbd2a67aa44156faf9/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c63b6349b44019146cc2edcef8141692891b9401", "url": "https://api.github.com/repos/rust-lang/rust/commits/c63b6349b44019146cc2edcef8141692891b9401", "html_url": "https://github.com/rust-lang/rust/commit/c63b6349b44019146cc2edcef8141692891b9401"}], "stats": {"total": 49, "additions": 34, "deletions": 15}, "files": [{"sha": "e3e175a17c7e7026f25c8b9cfd14a368ed2258f3", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff191a808e563d36b4c8bedbd2a67aa44156faf9/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff191a808e563d36b4c8bedbd2a67aa44156faf9/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=ff191a808e563d36b4c8bedbd2a67aa44156faf9", "patch": "@@ -10,13 +10,12 @@\n use crate::utils::span_lint_and_sugg;\n use if_chain::if_chain;\n use rustc::hir::def::{CtorKind, Def};\n-use rustc::hir::intravisit::{walk_path, walk_ty, NestedVisitorMap, Visitor};\n+use rustc::hir::intravisit::{walk_item, walk_path, walk_ty, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n-use syntax::ast::NodeId;\n use syntax_pos::symbol::keywords::SelfUpper;\n \n /// **What it does:** Checks for unnecessary repetition of structure name when a\n@@ -242,8 +241,17 @@ impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n         walk_path(self, path);\n     }\n \n-    fn visit_use(&mut self, _path: &'tcx Path, _id: NodeId, _hir_id: HirId) {\n-        // Don't check use statements\n+    fn visit_item(&mut self, item: &'tcx Item) {\n+        match item.node {\n+            ItemKind::Use(..)\n+            | ItemKind::Static(..)\n+            | ItemKind::Enum(..)\n+            | ItemKind::Struct(..)\n+            | ItemKind::Union(..) => {\n+                // Don't check statements that shadow `Self` or where `Self` can't be used\n+            },\n+            _ => walk_item(self, item),\n+        }\n     }\n \n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {"}, {"sha": "f3bd4a05005bd7b12e007041c1680c7d1baa0042", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ff191a808e563d36b4c8bedbd2a67aa44156faf9/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff191a808e563d36b4c8bedbd2a67aa44156faf9/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=ff191a808e563d36b4c8bedbd2a67aa44156faf9", "patch": "@@ -242,6 +242,28 @@ mod macros {\n     }\n }\n \n+mod nesting {\n+    struct Foo {}\n+    impl Foo {\n+        fn foo() {\n+            use self::Foo; // Can't use Self here\n+            struct Bar {\n+                foo: Foo, // Foo != Self\n+            }\n+        }\n+    }\n+\n+    enum Enum {\n+        A,\n+    }\n+    impl Enum {\n+        fn method() {\n+            use self::Enum::*;\n+            static STATIC: Enum = Enum::A; // Can't use Self as type\n+        }\n+    }\n+}\n+\n mod issue3410 {\n \n     struct A;\n@@ -255,14 +277,3 @@ mod issue3410 {\n         fn a(_: Vec<A>) {}\n     }\n }\n-\n-mod issue3425 {\n-    enum Enum {\n-        A,\n-    }\n-    impl Enum {\n-        fn a() {\n-            use self::Enum::*;\n-        }\n-    }\n-}"}]}