{"sha": "3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZGExMWE0Zjc5MTAzYTdmNmQ3M2MzOGU1ZTRmMDg4MGUyNmNjM2M=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T18:23:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T19:57:28Z"}, "message": "test: Remove `pure` from the test suite", "tree": {"sha": "0a0175a52524bf5812b0185adc52743fa706bbc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a0175a52524bf5812b0185adc52743fa706bbc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "html_url": "https://github.com/rust-lang/rust/commit/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0", "html_url": "https://github.com/rust-lang/rust/commit/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0"}], "stats": {"total": 311, "additions": 153, "deletions": 158}, "files": [{"sha": "edda0644b16a6fc69be5e99104f7cc8000300dfb", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -18,7 +18,7 @@ pub mod kitty {\n     }\n \n     impl ToStr for cat {\n-       pure fn to_str(&self) -> ~str { copy self.name }\n+       fn to_str(&self) -> ~str { copy self.name }\n     }\n \n     priv impl cat {"}, {"sha": "c120a971c6b90fdbbff6638a0860b38ebbbbb172", "filename": "src/test/auxiliary/crateresolve5-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -25,11 +25,11 @@ pub enum e {\n \n pub fn nominal() -> e { e_val }\n \n-pub pure fn nominal_eq(e1: e, e2: e) -> bool { true }\n+pub fn nominal_eq(e1: e, e2: e) -> bool { true }\n \n impl Eq for e {\n-    pure fn eq(&self, other: &e) -> bool { nominal_eq(*self, *other) }\n-    pure fn ne(&self, other: &e) -> bool { !nominal_eq(*self, *other) }\n+    fn eq(&self, other: &e) -> bool { nominal_eq(*self, *other) }\n+    fn ne(&self, other: &e) -> bool { !nominal_eq(*self, *other) }\n }\n \n pub fn f() -> int { 10 }"}, {"sha": "230fdad04689179b4658de72423fae8dac6a121f", "filename": "src/test/auxiliary/crateresolve5-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -23,12 +23,12 @@ pub enum e {\n }\n \n impl Eq for e {\n-    pure fn eq(&self, other: &e) -> bool { !nominal_neq(*self, *other) }\n-    pure fn ne(&self, other: &e) -> bool { nominal_neq(*self, *other) }\n+    fn eq(&self, other: &e) -> bool { !nominal_neq(*self, *other) }\n+    fn ne(&self, other: &e) -> bool { nominal_neq(*self, *other) }\n }\n \n pub fn nominal() -> e { e_val }\n \n-pub pure fn nominal_neq(e1: e, e2: e) -> bool { false }\n+pub fn nominal_neq(e1: e, e2: e) -> bool { false }\n \n pub fn f() -> int { 20 }"}, {"sha": "0fa15fa14f61310dc36eafe2b86fa992bf55b3f1", "filename": "src/test/auxiliary/impl_privacy_xc_2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_2.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -7,8 +7,8 @@ pub struct Fish {\n mod unexported {\n     use super::Fish;\n     impl Eq for Fish {\n-        pure fn eq(&self, _: &Fish) -> bool { true }\n-        pure fn ne(&self, _: &Fish) -> bool { false }\n+        fn eq(&self, _: &Fish) -> bool { true }\n+        fn ne(&self, _: &Fish) -> bool { false }\n     }\n }\n "}, {"sha": "cc03ac38943045d23e307050a5559c34843aebab", "filename": "src/test/auxiliary/static_fn_trait_xc_aux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fauxiliary%2Fstatic_fn_trait_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fauxiliary%2Fstatic_fn_trait_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic_fn_trait_xc_aux.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -1,11 +1,11 @@\n pub mod num {\n     pub trait Num2 {\n-        pure fn from_int2(n: int) -> Self;\n+        fn from_int2(n: int) -> Self;\n     }\n }\n \n pub mod float {\n     impl ::num::Num2 for float {\n-        pure fn from_int2(n: int) -> float { return n as float;  }\n+        fn from_int2(n: int) -> float { return n as float;  }\n     }\n }"}, {"sha": "1b480ff17b330fd16c632d5293afc3ffe55effa3", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -18,24 +18,24 @@ pub struct MyInt {\n }\n \n impl Add<MyInt, MyInt> for MyInt {\n-    pure fn add(&self, other: &MyInt) -> MyInt { mi(self.val + other.val) }\n+    fn add(&self, other: &MyInt) -> MyInt { mi(self.val + other.val) }\n }\n \n impl Sub<MyInt, MyInt> for MyInt {\n-    pure fn sub(&self, other: &MyInt) -> MyInt { mi(self.val - other.val) }\n+    fn sub(&self, other: &MyInt) -> MyInt { mi(self.val - other.val) }\n }\n \n impl Mul<MyInt, MyInt> for MyInt {\n-    pure fn mul(&self, other: &MyInt) -> MyInt { mi(self.val * other.val) }\n+    fn mul(&self, other: &MyInt) -> MyInt { mi(self.val * other.val) }\n }\n \n impl Eq for MyInt {\n-    pure fn eq(&self, other: &MyInt) -> bool { self.val == other.val }\n+    fn eq(&self, other: &MyInt) -> bool { self.val == other.val }\n \n-    pure fn ne(&self, other: &MyInt) -> bool { !self.eq(other) }\n+    fn ne(&self, other: &MyInt) -> bool { !self.eq(other) }\n }\n \n impl MyNum for MyInt;\n \n-pure fn mi(v: int) -> MyInt { MyInt { val: v } }\n+fn mi(v: int) -> MyInt { MyInt { val: v } }\n "}, {"sha": "f0847b635b4bd285ee48f708457eaff2c64ec5d2", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -27,14 +27,14 @@ fn sort_and_fmt(mm: HashMap<~[u8], uint>, total: uint) -> ~str {\n       return (xx as float) * 100f / (yy as float);\n    }\n \n-   pure fn le_by_val<TT:Copy,UU:Copy + Ord>(kv0: &(TT,UU),\n+   fn le_by_val<TT:Copy,UU:Copy + Ord>(kv0: &(TT,UU),\n                                          kv1: &(TT,UU)) -> bool {\n       let (_, v0) = *kv0;\n       let (_, v1) = *kv1;\n       return v0 >= v1;\n    }\n \n-   pure fn le_by_key<TT:Copy + Ord,UU:Copy>(kv0: &(TT,UU),\n+   fn le_by_key<TT:Copy + Ord,UU:Copy>(kv0: &(TT,UU),\n                                          kv1: &(TT,UU)) -> bool {\n       let (k0, _) = *kv0;\n       let (k1, _) = *kv1;"}, {"sha": "ada5ff7be2fa8461d2dc575e68f45e685f40c17d", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -33,7 +33,7 @@ struct cmplx {\n }\n \n impl ops::Mul<cmplx,cmplx> for cmplx {\n-    pure fn mul(&self, x: &cmplx) -> cmplx {\n+    fn mul(&self, x: &cmplx) -> cmplx {\n         cmplx {\n             re: self.re*(*x).re - self.im*(*x).im,\n             im: self.re*(*x).im + self.im*(*x).re\n@@ -42,7 +42,7 @@ impl ops::Mul<cmplx,cmplx> for cmplx {\n }\n \n impl ops::Add<cmplx,cmplx> for cmplx {\n-    pure fn add(&self, x: &cmplx) -> cmplx {\n+    fn add(&self, x: &cmplx) -> cmplx {\n         cmplx {\n             re: self.re + (*x).re,\n             im: self.im + (*x).im\n@@ -52,7 +52,7 @@ impl ops::Add<cmplx,cmplx> for cmplx {\n \n struct Line {i: uint, b: ~[u8]}\n \n-pure fn cabs(x: cmplx) -> f64\n+fn cabs(x: cmplx) -> f64\n {\n     x.re*x.re + x.im*x.im\n }"}, {"sha": "609e8de87d68b58cf3229c07baf90f71592f802e", "filename": "src/test/compile-fail/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -20,9 +20,9 @@ fn main() {\n }\n \n trait MyIter {\n-    pure fn test_mut(&mut self);\n+    fn test_mut(&mut self);\n }\n \n impl MyIter for &'self [int] {\n-    pure fn test_mut(&mut self) { }\n+    fn test_mut(&mut self) { }\n }"}, {"sha": "482d1b6b8b617f6f9598f162a99a0ffa79c0b4d1", "filename": "src/test/compile-fail/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -13,7 +13,7 @@\n struct foo(~uint);\n \n impl Add<foo, foo> for foo {\n-    pure fn add(f: &foo) -> foo {\n+    fn add(f: &foo) -> foo {\n         foo(~(**self + **(*f)))\n     }\n }"}, {"sha": "a4ad7e69b3336902745f2a30bc7669825227890b", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -14,7 +14,7 @@ struct Point {\n }\n \n impl ops::Add<int,int> for Point {\n-    pure fn add(&self, z: &int) -> int {\n+    fn add(&self, z: &int) -> int {\n         self.x + self.y + (*z)\n     }\n }"}, {"sha": "4473574926a34d85fe66b21fb8569337593c7c0a", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -13,7 +13,7 @@ struct point { x: int, y: int }\n trait methods {\n     fn impurem(&self);\n     fn blockm(&self, f: &fn());\n-    pure fn purem(&self);\n+    fn purem(&self);\n }\n \n impl methods for point {\n@@ -22,7 +22,7 @@ impl methods for point {\n \n     fn blockm(&self, f: &fn()) { f() }\n \n-    pure fn purem(&self) {\n+    fn purem(&self) {\n     }\n }\n "}, {"sha": "e931a8fa7e144fce3e4b2c475106c4224ca1fa24", "filename": "src/test/compile-fail/issue-3344.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -10,8 +10,8 @@\n \n struct thing(uint);\n impl cmp::Ord for thing { //~ ERROR missing method `gt`\n-    pure fn lt(&self, other: &thing) -> bool { **self < **other }\n-    pure fn le(&self, other: &thing) -> bool { **self < **other }\n-    pure fn ge(&self, other: &thing) -> bool { **self < **other }\n+    fn lt(&self, other: &thing) -> bool { **self < **other }\n+    fn le(&self, other: &thing) -> bool { **self < **other }\n+    fn ge(&self, other: &thing) -> bool { **self < **other }\n }\n fn main() {}"}, {"sha": "2c8f94c4695b0192c07515fa3cb13eadf9dce82c", "filename": "src/test/compile-fail/issue-3707.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -14,10 +14,10 @@ struct Obj {\n }\n \n pub impl Obj {\n-    pure fn boom() -> bool {\n+    fn boom() -> bool {\n         return 1+1 == 2\n     }\n-    pure fn chirp() {\n+    fn chirp() {\n         self.boom(); //~ ERROR wat\n     }\n }"}, {"sha": "68c00494b9b4d66023ba0337fd9cab0d4a432edb", "filename": "src/test/compile-fail/issue-3820.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -14,7 +14,7 @@ struct Thing {\n }\n \n impl Mul<int, Thing>*/ for Thing/* { //~ ERROR Look ma, no Mul!\n-    pure fn mul(c: &int) -> Thing {\n+    fn mul(c: &int) -> Thing {\n         Thing {x: self.x * *c}\n     }\n }"}, {"sha": "b726f090e7db74e6db9545275d039f7d56edf408", "filename": "src/test/compile-fail/issue-3953.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -25,8 +25,8 @@ struct Lol(int);\n impl Hahaha for Lol { }\n \n impl Eq for Lol {\n-    pure fn eq(&self, other: &Lol) -> bool { **self != **other }\n-    pure fn ne(&self, other: &Lol) -> bool { **self == **other }\n+    fn eq(&self, other: &Lol) -> bool { **self != **other }\n+    fn ne(&self, other: &Lol) -> bool { **self == **other }\n }\n \n fn main() {"}, {"sha": "b1d741f9186b392a3a21ff4a692288f28983d866", "filename": "src/test/compile-fail/issue-3973.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -20,7 +20,7 @@ impl ToStr for Point { //~ ERROR implements a method not defined in the trait\n         Point { x: x, y: y }\n     }\n \n-    pure fn to_str(&self) -> ~str {\n+    fn to_str(&self) -> ~str {\n         fmt!(\"(%f, %f)\", self.x, self.y)\n     }\n }"}, {"sha": "67cf67bfa5a04de29c07c60c2ea8f617a008e039", "filename": "src/test/compile-fail/missing-derivable-attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n trait MyEq {\n-    pure fn eq(&self, other: &Self) -> bool;\n+    fn eq(&self, other: &Self) -> bool;\n }\n \n struct A {\n     x: int\n }\n \n impl MyEq for int {\n-    pure fn eq(&self, other: &int) -> bool { *self == *other }\n+    fn eq(&self, other: &int) -> bool { *self == *other }\n }\n \n impl MyEq for A;  //~ ERROR missing method"}, {"sha": "296fba2ae9bcce3752db2007d0a85510e8152456", "filename": "src/test/run-fail/die-macro-pure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-fail%2Fdie-macro-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-fail%2Fdie-macro-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdie-macro-pure.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:test\n \n-pure fn f() {\n+fn f() {\n     fail!(~\"test\");\n }\n "}, {"sha": "a77d520b07e9583320320d33d7b7a8e83c9de418", "filename": "src/test/run-fail/if-check-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-check-fail.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern:Number is odd\n-pure fn even(x: uint) -> bool {\n+fn even(x: uint) -> bool {\n     if x < 2u {\n         return false;\n     } else if x == 2u { return true; } else { return even(x - 2u); }"}, {"sha": "1a8ad446c7954718ad35db0566147d5cde95b85e", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -60,7 +60,7 @@ enum Expr {\n }\n \n impl cmp::Eq for Expr {\n-    pure fn eq(&self, other: &Expr) -> bool {\n+    fn eq(&self, other: &Expr) -> bool {\n         match *self {\n             Val(e0a) => {\n                 match *other {\n@@ -82,18 +82,18 @@ impl cmp::Eq for Expr {\n             }\n         }\n     }\n-    pure fn ne(&self, other: &Expr) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &Expr) -> bool { !(*self).eq(other) }\n }\n \n impl cmp::Eq for Point {\n-    pure fn eq(&self, other: &Point) -> bool {\n+    fn eq(&self, other: &Point) -> bool {\n         self.x == other.x && self.y == other.y\n     }\n-    pure fn ne(&self, other: &Point) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &Point) -> bool { !(*self).eq(other) }\n }\n \n impl<T:cmp::Eq> cmp::Eq for Quark<T> {\n-    pure fn eq(&self, other: &Quark<T>) -> bool {\n+    fn eq(&self, other: &Quark<T>) -> bool {\n         match *self {\n             Top(ref q) => {\n                 match *other {\n@@ -109,14 +109,14 @@ impl<T:cmp::Eq> cmp::Eq for Quark<T> {\n             },\n         }\n     }\n-    pure fn ne(&self, other: &Quark<T>) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &Quark<T>) -> bool { !(*self).eq(other) }\n }\n \n impl cmp::Eq for CLike {\n-    pure fn eq(&self, other: &CLike) -> bool {\n+    fn eq(&self, other: &CLike) -> bool {\n         (*self) as int == *other as int\n     }\n-    pure fn ne(&self, other: &CLike) -> bool { !self.eq(other) }\n+    fn ne(&self, other: &CLike) -> bool { !self.eq(other) }\n }\n \n #[auto_encode]"}, {"sha": "65366a350efa3716f2fd7100f9d272ab6d90ec08", "filename": "src/test/run-pass/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -12,18 +12,18 @@\n // and also references them to create the &self pointer\n \n trait MyIter {\n-    pure fn test_imm(&self);\n-    pure fn test_const(&const self);\n+    fn test_imm(&self);\n+    fn test_const(&const self);\n }\n \n impl MyIter for &'self [int] {\n-    pure fn test_imm(&self) { fail_unless!(self[0] == 1) }\n-    pure fn test_const(&const self) { fail_unless!(self[0] == 1) }\n+    fn test_imm(&self) { fail_unless!(self[0] == 1) }\n+    fn test_const(&const self) { fail_unless!(self[0] == 1) }\n }\n \n impl MyIter for &'self str {\n-    pure fn test_imm(&self) { fail_unless!(*self == \"test\") }\n-    pure fn test_const(&const self) { fail_unless!(*self == \"test\") }\n+    fn test_imm(&self) { fail_unless!(*self == \"test\") }\n+    fn test_const(&const self) { fail_unless!(*self == \"test\") }\n }\n \n pub fn main() {"}, {"sha": "40dd1a46574b1ce8961d9c95e755c54c5fa58e39", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -16,10 +16,10 @@ use core::iter::BaseIter;\n enum cat_type { tuxedo, tabby, tortoiseshell }\n \n impl cmp::Eq for cat_type {\n-    pure fn eq(&self, other: &cat_type) -> bool {\n+    fn eq(&self, other: &cat_type) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }\n-    pure fn ne(&self, other: &cat_type) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &cat_type) -> bool { !(*self).eq(other) }\n }\n \n // Very silly -- this just returns the value of the name field\n@@ -50,34 +50,34 @@ pub impl<T> cat<T> {\n }\n \n impl<T> BaseIter<(int, &'self T)> for cat<T> {\n-    pure fn each(&self, f: &fn(&(int, &'self T)) -> bool) {\n+    fn each(&self, f: &fn(&(int, &'self T)) -> bool) {\n         let mut n = int::abs(self.meows);\n         while n > 0 {\n             if !f(&(n, &self.name)) { break; }\n             n -= 1;\n         }\n     }\n \n-    pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n+    fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n \n impl<T> Container for cat<T> {\n-    pure fn len(&const self) -> uint { self.meows as uint }\n-    pure fn is_empty(&const self) -> bool { self.meows == 0 }\n+    fn len(&const self) -> uint { self.meows as uint }\n+    fn is_empty(&const self) -> bool { self.meows == 0 }\n }\n \n impl<T> Mutable for cat<T> {\n     fn clear(&mut self) {}\n }\n \n impl<T> Map<int, T> for cat<T> {\n-    pure fn contains_key(&self, k: &int) -> bool { *k <= self.meows }\n+    fn contains_key(&self, k: &int) -> bool { *k <= self.meows }\n \n-    pure fn each_key(&self, f: &fn(v: &int) -> bool) {\n+    fn each_key(&self, f: &fn(v: &int) -> bool) {\n         for self.each |&(k, _)| { if !f(&k) { break; } loop;};\n     }\n \n-    pure fn each_value(&self, f: &fn(v: &T) -> bool) {\n+    fn each_value(&self, f: &fn(v: &T) -> bool) {\n         for self.each |&(_, v)| { if !f(v) { break; } loop;};\n     }\n \n@@ -90,7 +90,7 @@ impl<T> Map<int, T> for cat<T> {\n         true\n     }\n \n-    pure fn find(&self, k: &int) -> Option<&'self T> {\n+    fn find(&self, k: &int) -> Option<&'self T> {\n         if *k <= self.meows {\n             Some(&self.name)\n         } else {\n@@ -108,14 +108,14 @@ impl<T> Map<int, T> for cat<T> {\n }\n \n pub impl<T> cat<T> {\n-    pure fn get(&self, k: &int) -> &'self T {\n+    fn get(&self, k: &int) -> &'self T {\n         match self.find(k) {\n           Some(v) => { v }\n           None    => { fail!(~\"epic fail\"); }\n         }\n     }\n \n-    pure fn new(in_x: int, in_y: int, in_name: T) -> cat<T> {\n+    fn new(in_x: int, in_y: int, in_name: T) -> cat<T> {\n         cat{meows: in_x, how_hungry: in_y, name: in_name }\n     }\n }"}, {"sha": "168f2d872e7373606c5831f3682913d198ea9f3d", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -51,7 +51,7 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n }\n \n impl ToStr for cat {\n-    pure fn to_str(&self) -> ~str {\n+    fn to_str(&self) -> ~str {\n         // FIXME #5384: this unsafe block is to work around purity\n         unsafe {\n             self.name.clone()"}, {"sha": "e40272bb7a4d546ba5ea59efb7beb3add3908720", "filename": "src/test/run-pass/coerce-reborrow-imm-ptr-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-arg.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -1,4 +1,4 @@\n-pure fn negate(x: &int) -> int {\n+fn negate(x: &int) -> int {\n     -*x\n }\n "}, {"sha": "12ca00fedd3f9b729c7579b0426fea1b8f050777", "filename": "src/test/run-pass/coerce-reborrow-imm-ptr-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -3,7 +3,7 @@ struct SpeechMaker {\n }\n \n pub impl SpeechMaker {\n-    pure fn how_many(&const self) -> uint { self.speeches }\n+    fn how_many(&const self) -> uint { self.speeches }\n }\n \n fn foo(speaker: &const SpeechMaker) -> uint {"}, {"sha": "ad5eb50ccef306f85a330fe51e4ce98fc4d30c0b", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -1,6 +1,6 @@\n // xfail-test\n \n-pure fn sum(x: &[int]) -> int {\n+fn sum(x: &[int]) -> int {\n     let mut sum = 0;\n     for x.each |y| { sum += *y; }\n     return sum;"}, {"sha": "7643799df0637fe2feedbc18f9700789e9d28c8e", "filename": "src/test/run-pass/coherence-impl-in-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -11,9 +11,9 @@\n pub fn main() {\n     enum x { foo }\n     impl ::core::cmp::Eq for x {\n-        pure fn eq(&self, other: &x) -> bool {\n+        fn eq(&self, other: &x) -> bool {\n             (*self) as int == (*other) as int\n         }\n-        pure fn ne(&self, other: &x) -> bool { !(*self).eq(other) }\n+        fn ne(&self, other: &x) -> bool { !(*self).eq(other) }\n     }\n }"}, {"sha": "f2b5be4e36ff9e09081efdea7d673a21034c5bb2", "filename": "src/test/run-pass/const-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -12,12 +12,12 @@\n struct foo { a: int, b: int, c: int }\n \n impl cmp::Eq for foo {\n-    pure fn eq(&self, other: &foo) -> bool {\n+    fn eq(&self, other: &foo) -> bool {\n         (*self).a == (*other).a &&\n         (*self).b == (*other).b &&\n         (*self).c == (*other).c\n     }\n-    pure fn ne(&self, other: &foo) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &foo) -> bool { !(*self).eq(other) }\n }\n \n const x : foo = foo { a:1, b:2, c: 3 };"}, {"sha": "08056f59acd3f3e0bf000bd8fa03781b66824c3a", "filename": "src/test/run-pass/do-pure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fdo-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fdo-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-pure.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pure fn f(f: &fn()) {\n+fn f(f: &fn()) {\n }\n \n-pure fn g() {\n+fn g() {\n     // `f || { }` is considered pure, so `do f { }` should be too\n     do f { }\n }"}, {"sha": "0589ffc79e054ccb66239e28ebf3ae1c15eb8867", "filename": "src/test/run-pass/empty-tag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-tag.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -11,10 +11,10 @@\n enum chan { chan_t, }\n \n impl cmp::Eq for chan {\n-    pure fn eq(&self, other: &chan) -> bool {\n+    fn eq(&self, other: &chan) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }\n-    pure fn ne(&self, other: &chan) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &chan) -> bool { !(*self).eq(other) }\n }\n \n fn wrapper3(i: chan) {"}, {"sha": "e22e739f570ff6ad910c21e90b0d52f1554e2491", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -15,8 +15,8 @@ extern mod std;\n  *\n  * The hash should concentrate entropy in the lower bits.\n  */\n-type HashFn<K> = ~pure fn(K) -> uint;\n-type EqFn<K> = ~pure fn(K, K) -> bool;\n+type HashFn<K> = ~fn(K) -> uint;\n+type EqFn<K> = ~fn(K, K) -> bool;\n \n struct LM { resize_at: uint, size: uint }\n "}, {"sha": "4634cc4ef1101cb2ad1c0c570dd4e07d0a604d01", "filename": "src/test/run-pass/export-unexported-dep.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -16,10 +16,10 @@ mod foo {\n     enum t { t1, t2, }\n \n     impl cmp::Eq for t {\n-        pure fn eq(&self, other: &t) -> bool {\n+        fn eq(&self, other: &t) -> bool {\n             ((*self) as uint) == ((*other) as uint)\n         }\n-        pure fn ne(&self, other: &t) -> bool { !(*self).eq(other) }\n+        fn ne(&self, other: &t) -> bool { !(*self).eq(other) }\n     }\n \n     pub fn f() -> t { return t1; }"}, {"sha": "03358f2511bb6d0c00b4da71bed2ba32c55ce727", "filename": "src/test/run-pass/expr-alt-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -24,10 +24,10 @@ fn test_rec() {\n enum mood { happy, sad, }\n \n impl cmp::Eq for mood {\n-    pure fn eq(&self, other: &mood) -> bool {\n+    fn eq(&self, other: &mood) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }\n-    pure fn ne(&self, other: &mood) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &mood) -> bool { !(*self).eq(other) }\n }\n \n fn test_tag() {"}, {"sha": "142123478357598249c51c31bab1ea60ec7ab221", "filename": "src/test/run-pass/expr-if-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -25,10 +25,10 @@ fn test_rec() {\n enum mood { happy, sad, }\n \n impl cmp::Eq for mood {\n-    pure fn eq(&self, other: &mood) -> bool {\n+    fn eq(&self, other: &mood) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }\n-    pure fn ne(&self, other: &mood) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &mood) -> bool { !(*self).eq(other) }\n }\n \n fn test_tag() {"}, {"sha": "5c72de87ccbefaa0a25d33760e8d9ce08b265dea", "filename": "src/test/run-pass/if-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fif-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fif-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-check.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pure fn even(x: uint) -> bool {\n+fn even(x: uint) -> bool {\n     if x < 2u {\n         return false;\n     } else if x == 2u { return true; } else { return even(x - 2u); }"}, {"sha": "343e62b2d0c5923d844a4ee74c3bfcc794379d55", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -28,7 +28,7 @@ enum square {\n }\n \n impl to_str::ToStr for square {\n-    pure fn to_str(&self) -> ~str {\n+    fn to_str(&self) -> ~str {\n         match *self {\n           bot => { ~\"R\" }\n           wall => { ~\"#\" }"}, {"sha": "e433141c44dbd34bce971176c2c130f00fe5222a", "filename": "src/test/run-pass/issue-3149.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fissue-3149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fissue-3149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3149.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pure fn Matrix4<T:Copy>(m11: T, m12: T, m13: T, m14: T,\n-                        m21: T, m22: T, m23: T, m24: T,\n-                        m31: T, m32: T, m33: T, m34: T,\n-                        m41: T, m42: T, m43: T, m44: T)\n-                     -> Matrix4<T> {\n+fn Matrix4<T:Copy>(m11: T, m12: T, m13: T, m14: T,\n+                   m21: T, m22: T, m23: T, m24: T,\n+                   m31: T, m32: T, m33: T, m34: T,\n+                   m41: T, m42: T, m43: T, m44: T)\n+                -> Matrix4<T> {\n \n     Matrix4 {\n         m11: m11, m12: m12, m13: m13, m14: m14,"}, {"sha": "aaff822398d6f1df4fa48cd743bbf256d6c7b507", "filename": "src/test/run-pass/issue-3480.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fissue-3480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fissue-3480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3480.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -13,13 +13,12 @@ type IMap<K:Copy,V:Copy> = ~[(K, V)];\n \n trait ImmutableMap<K:Copy,V:Copy>\n {\n-    pure fn contains_key(key: K) -> bool;\n+    fn contains_key(key: K) -> bool;\n }\n \n impl<K:Copy,V:Copy> IMap<K, V> : ImmutableMap<K, V>\n {\n-    pure fn contains_key(key: K) -> bool\n-    {\n+    fn contains_key(key: K) -> bool {\n         vec::find(self, |e| {e.first() == key}).is_some()\n     }\n }"}, {"sha": "fdbd7ec304edd22251aae00984b73fe173fc27fe", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -111,8 +111,7 @@ impl AsciiArt\n // Allows AsciiArt to be converted to a string using the libcore ToStr trait.\n // Note that the %s fmt! specifier will not call this automatically.\n impl ToStr for AsciiArt {\n-    pure fn to_str(&self) -> ~str\n-    {\n+    fn to_str(&self) -> ~str {\n         // Convert each line into a string.\n         let lines = do self.lines.map |line| {str::from_chars(*line)};\n "}, {"sha": "f54d2f9fafc4e4d59d4cc9895d5c299a6793cc5a", "filename": "src/test/run-pass/issue-3874.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fissue-3874.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fissue-3874.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3874.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -11,7 +11,7 @@\n // xfail-test\n enum PureCounter { PureCounter(uint) }\n \n-pure fn each(self: PureCounter, blk: &fn(v: &uint)) {\n+fn each(self: PureCounter, blk: &fn(v: &uint)) {\n     let PureCounter(ref x) = self;\n     blk(x);\n }"}, {"sha": "8628d84d4e7dbfb26cdf390ea756fb5fe50afc4e", "filename": "src/test/run-pass/mod-merge-hack-template.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fmod-merge-hack-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fmod-merge-hack-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-merge-hack-template.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -13,4 +13,4 @@\n use T = self::inst::T;\n \n pub const bits: uint = inst::bits;\n-pub pure fn min(x: T, y: T) -> T { if x < y { x } else { y } }\n+pub fn min(x: T, y: T) -> T { if x < y { x } else { y } }"}, {"sha": "12b41fc91485e30b578f8e77e2cf4b05e3401fc4", "filename": "src/test/run-pass/new-impl-syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -4,7 +4,7 @@ struct Thingy {\n }\n \n impl ToStr for Thingy {\n-    pure fn to_str(&self) -> ~str {\n+    fn to_str(&self) -> ~str {\n         fmt!(\"{ x: %d, y: %d }\", self.x, self.y)\n     }\n }\n@@ -14,7 +14,7 @@ struct PolymorphicThingy<T> {\n }\n \n impl<T:ToStr> ToStr for PolymorphicThingy<T> {\n-    pure fn to_str(&self) -> ~str {\n+    fn to_str(&self) -> ~str {\n         self.x.to_str()\n     }\n }"}, {"sha": "ae241e458fc1504657b49ffaadb4b54db929684e", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -14,13 +14,13 @@ extern mod std;\n \n use std::list::*;\n \n-pure fn pure_length_go<T:Copy>(ls: @List<T>, acc: uint) -> uint {\n+fn pure_length_go<T:Copy>(ls: @List<T>, acc: uint) -> uint {\n     match *ls { Nil => { acc } Cons(_, tl) => { pure_length_go(tl, acc + 1u) } }\n }\n \n-pure fn pure_length<T:Copy>(ls: @List<T>) -> uint { pure_length_go(ls, 0u) }\n+fn pure_length<T:Copy>(ls: @List<T>) -> uint { pure_length_go(ls, 0u) }\n \n-pure fn nonempty_list<T:Copy>(ls: @List<T>) -> bool { pure_length(ls) > 0u }\n+fn nonempty_list<T:Copy>(ls: @List<T>) -> bool { pure_length(ls) > 0u }\n \n fn safe_head<T:Copy>(ls: @List<T>) -> T {\n     fail_unless!(!is_empty(ls));"}, {"sha": "9299e3e365e33dccb3de736177ccd1f9bed3f6d6", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -16,40 +16,40 @@ struct Point {\n }\n \n impl ops::Add<Point,Point> for Point {\n-    pure fn add(&self, other: &Point) -> Point {\n+    fn add(&self, other: &Point) -> Point {\n         Point {x: self.x + (*other).x, y: self.y + (*other).y}\n     }\n }\n \n impl ops::Sub<Point,Point> for Point {\n-    pure fn sub(&self, other: &Point) -> Point {\n+    fn sub(&self, other: &Point) -> Point {\n         Point {x: self.x - (*other).x, y: self.y - (*other).y}\n     }\n }\n \n impl ops::Neg<Point> for Point {\n-    pure fn neg(&self) -> Point {\n+    fn neg(&self) -> Point {\n         Point {x: -self.x, y: -self.y}\n     }\n }\n \n impl ops::Not<Point> for Point {\n-    pure fn not(&self) -> Point {\n+    fn not(&self) -> Point {\n         Point {x: !self.x, y: !self.y }\n     }\n }\n \n impl ops::Index<bool,int> for Point {\n-    pure fn index(&self, +x: bool) -> int {\n+    fn index(&self, +x: bool) -> int {\n         if x { self.x } else { self.y }\n     }\n }\n \n impl cmp::Eq for Point {\n-    pure fn eq(&self, other: &Point) -> bool {\n+    fn eq(&self, other: &Point) -> bool {\n         (*self).x == (*other).x && (*self).y == (*other).y\n     }\n-    pure fn ne(&self, other: &Point) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &Point) -> bool { !(*self).eq(other) }\n }\n \n pub fn main() {"}, {"sha": "127b845ad4ce4d9a89fef13a7787293a1dd22c61", "filename": "src/test/run-pass/pred-not-bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fpred-not-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fpred-not-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpred-not-bool.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -11,6 +11,6 @@\n // this checks that a pred with a non-bool return\n // type is rejected, even if the pred is never used\n \n-pure fn bad(a: int) -> int { return 37; } //~ ERROR Non-boolean return type\n+fn bad(a: int) -> int { return 37; } //~ ERROR Non-boolean return type\n \n pub fn main() { }"}, {"sha": "424a5e4e8efa64f15507b2d576cf822c67a67598", "filename": "src/test/run-pass/pure-fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fpure-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fpure-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-fmt.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -13,7 +13,7 @@\n struct Big { b: @~str, c: uint, d: int, e: char,\n             f: float, g: bool }\n \n-pure fn foo() {\n+fn foo() {\n     let a = Big {\n         b: @~\"hi\",\n         c: 0,"}, {"sha": "6327a3f238d41adf4f60b83ef03c53e384ffac15", "filename": "src/test/run-pass/pure-sum.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-sum.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Check that pure functions can modify local state.\n+// Check that functions can modify local state.\n \n-pure fn sums_to(v: ~[int], sum: int) -> bool {\n+fn sums_to(v: ~[int], sum: int) -> bool {\n     let mut i = 0u, sum0 = 0;\n     while i < v.len() {\n         sum0 += v[i];\n@@ -19,7 +19,7 @@ pure fn sums_to(v: ~[int], sum: int) -> bool {\n     return sum0 == sum;\n }\n \n-pure fn sums_to_using_uniq(v: ~[int], sum: int) -> bool {\n+fn sums_to_using_uniq(v: ~[int], sum: int) -> bool {\n     let mut i = 0u, sum0 = ~0;\n     while i < v.len() {\n         *sum0 += v[i];\n@@ -28,7 +28,7 @@ pure fn sums_to_using_uniq(v: ~[int], sum: int) -> bool {\n     return *sum0 == sum;\n }\n \n-pure fn sums_to_using_rec(v: ~[int], sum: int) -> bool {\n+fn sums_to_using_rec(v: ~[int], sum: int) -> bool {\n     let mut i = 0u, sum0 = F {f: 0};\n     while i < v.len() {\n         sum0.f += v[i];\n@@ -39,7 +39,7 @@ pure fn sums_to_using_rec(v: ~[int], sum: int) -> bool {\n \n struct F<T> { f: T }\n \n-pure fn sums_to_using_uniq_rec(v: ~[int], sum: int) -> bool {\n+fn sums_to_using_uniq_rec(v: ~[int], sum: int) -> bool {\n     let mut i = 0u, sum0 = F {f: ~0};\n     while i < v.len() {\n         *sum0.f += v[i];"}, {"sha": "debde77b21128d08853803e6a500898682218ba7", "filename": "src/test/run-pass/purity-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fpurity-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fpurity-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpurity-infer.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn something(f: &pure fn()) { f(); }\n+fn something(f: &fn()) { f(); }\n pub fn main() {\n     something(|| error!(\"hi!\") );\n }"}, {"sha": "624a38b789b1c9c3e6bbfa03fa61f563ea89c508", "filename": "src/test/run-pass/static-method-test.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -35,28 +35,25 @@ impl bool_like for int {\n \n // A trait for sequences that can be constructed imperatively.\n trait buildable<A> {\n-     pure fn build_sized(size: uint,\n-                         builder: &fn(push: &pure fn(+v: A))) -> Self;\n+     fn build_sized(size: uint, builder: &fn(push: &fn(+v: A))) -> Self;\n }\n \n \n impl<A> buildable<A> for @[A] {\n     #[inline(always)]\n-     pure fn build_sized(size: uint,\n-                         builder: &fn(push: &pure fn(+v: A))) -> @[A] {\n+     fn build_sized(size: uint, builder: &fn(push: &fn(+v: A))) -> @[A] {\n          at_vec::build_sized(size, builder)\n      }\n }\n impl<A> buildable<A> for ~[A] {\n     #[inline(always)]\n-     pure fn build_sized(size: uint,\n-                         builder: &fn(push: &pure fn(+v: A))) -> ~[A] {\n+     fn build_sized(size: uint, builder: &fn(push: &fn(+v: A))) -> ~[A] {\n          vec::build_sized(size, builder)\n      }\n }\n \n #[inline(always)]\n-pure fn build<A, B: buildable<A>>(builder: &fn(push: &pure fn(+v: A))) -> B {\n+fn build<A, B: buildable<A>>(builder: &fn(push: &fn(+v: A))) -> B {\n     buildable::build_sized(4, builder)\n }\n "}, {"sha": "20e6efa11f0903aa9ab190dffee2e4b903c2717d", "filename": "src/test/run-pass/static-methods-in-traits2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits2.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -1,17 +1,17 @@\n pub trait Number: NumConv {\n-    pure fn from<T:Number>(n: T) -> Self;\n+    fn from<T:Number>(n: T) -> Self;\n }\n \n impl Number for float {\n-    pure fn from<T:Number>(n: T) -> float { n.to_float() }\n+    fn from<T:Number>(n: T) -> float { n.to_float() }\n }\n \n pub trait NumConv {\n-    pure fn to_float(&self) -> float;\n+    fn to_float(&self) -> float;\n }\n \n impl NumConv for float {\n-    pure fn to_float(&self) -> float { *self }\n+    fn to_float(&self) -> float { *self }\n }\n \n pub fn main() {"}, {"sha": "d987203344723b351dcf51d4de5811ad72ee3e88", "filename": "src/test/run-pass/structured-compare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructured-compare.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -13,10 +13,10 @@\n enum foo { large, small, }\n \n impl cmp::Eq for foo {\n-    pure fn eq(&self, other: &foo) -> bool {\n+    fn eq(&self, other: &foo) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }\n-    pure fn ne(&self, other: &foo) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &foo) -> bool { !(*self).eq(other) }\n }\n \n pub fn main() {"}, {"sha": "63300342bd33ce2d1f49e6aa0216643d9b1b4d29", "filename": "src/test/run-pass/tag-variant-disr-val.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -20,10 +20,10 @@ enum color {\n }\n \n impl cmp::Eq for color {\n-    pure fn eq(&self, other: &color) -> bool {\n+    fn eq(&self, other: &color) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }\n-    pure fn ne(&self, other: &color) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &color) -> bool { !(*self).eq(other) }\n }\n \n pub fn main() {"}, {"sha": "4e126379410be9ca5723690f9038e817f97ccc2c", "filename": "src/test/run-pass/tag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -15,7 +15,7 @@\n enum colour { red(int, int), green, }\n \n impl cmp::Eq for colour {\n-    pure fn eq(&self, other: &colour) -> bool {\n+    fn eq(&self, other: &colour) -> bool {\n         match *self {\n             red(a0, b0) => {\n                 match (*other) {\n@@ -31,7 +31,7 @@ impl cmp::Eq for colour {\n             }\n         }\n     }\n-    pure fn ne(&self, other: &colour) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &colour) -> bool { !(*self).eq(other) }\n }\n \n fn f() { let x = red(1, 2); let y = green; fail_unless!((x != y)); }"}, {"sha": "89dad2d462ccaa013cada7f93b15628862fdda05", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -52,7 +52,7 @@ enum t {\n }\n \n impl cmp::Eq for t {\n-    pure fn eq(&self, other: &t) -> bool {\n+    fn eq(&self, other: &t) -> bool {\n         match *self {\n             tag1 => {\n                 match (*other) {\n@@ -75,7 +75,7 @@ impl cmp::Eq for t {\n             }\n         }\n     }\n-    pure fn ne(&self, other: &t) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &t) -> bool { !(*self).eq(other) }\n }\n \n fn test_tag() {"}, {"sha": "283ed8ae2c188e5d666b8251c5b40bab23e5ba8c", "filename": "src/test/run-pass/trait-inheritance-overloading-simple.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -15,8 +15,8 @@ trait MyNum : Eq { }\n struct MyInt { val: int }\n \n impl Eq for MyInt {\n-    pure fn eq(&self, other: &MyInt) -> bool { self.val == other.val }\n-    pure fn ne(&self, other: &MyInt) -> bool { !self.eq(other) }\n+    fn eq(&self, other: &MyInt) -> bool { self.val == other.val }\n+    fn ne(&self, other: &MyInt) -> bool { !self.eq(other) }\n }\n \n impl MyNum for MyInt;\n@@ -25,7 +25,7 @@ fn f<T:MyNum>(x: T, y: T) -> bool {\n     return x == y;\n }\n \n-pure fn mi(v: int) -> MyInt { MyInt { val: v } }\n+fn mi(v: int) -> MyInt { MyInt { val: v } }\n \n pub fn main() {\n     let (x, y, z) = (mi(3), mi(5), mi(3));"}, {"sha": "d4d16f2b43ebd432387cd498e507690b739c6876", "filename": "src/test/run-pass/trait-inheritance-overloading-xc-exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-xc-exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-xc-exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-xc-exe.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -18,7 +18,7 @@ fn f<T:Copy + MyNum>(x: T, y: T) -> (T, T, T) {\n     return (x + y, x - y, x * y);\n }\n \n-pure fn mi(v: int) -> MyInt { MyInt { val: v } }\n+fn mi(v: int) -> MyInt { MyInt { val: v } }\n \n pub fn main() {\n     let (x, y) = (mi(3), mi(5));"}, {"sha": "d4f8d50b92b647b8b8e738aed8ce6081294c8f06", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -15,20 +15,20 @@ trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + Eq { }\n struct MyInt { val: int }\n \n impl Add<MyInt, MyInt> for MyInt {\n-    pure fn add(&self, other: &MyInt) -> MyInt { mi(self.val + other.val) }\n+    fn add(&self, other: &MyInt) -> MyInt { mi(self.val + other.val) }\n }\n \n impl Sub<MyInt, MyInt> for MyInt {\n-    pure fn sub(&self, other: &MyInt) -> MyInt { mi(self.val - other.val) }\n+    fn sub(&self, other: &MyInt) -> MyInt { mi(self.val - other.val) }\n }\n \n impl Mul<MyInt, MyInt> for MyInt {\n-    pure fn mul(&self, other: &MyInt) -> MyInt { mi(self.val * other.val) }\n+    fn mul(&self, other: &MyInt) -> MyInt { mi(self.val * other.val) }\n }\n \n impl Eq for MyInt {\n-    pure fn eq(&self, other: &MyInt) -> bool { self.val == other.val }\n-    pure fn ne(&self, other: &MyInt) -> bool { !self.eq(other) }\n+    fn eq(&self, other: &MyInt) -> bool { self.val == other.val }\n+    fn ne(&self, other: &MyInt) -> bool { !self.eq(other) }\n }\n \n impl MyNum for MyInt;\n@@ -37,7 +37,7 @@ fn f<T:Copy + MyNum>(x: T, y: T) -> (T, T, T) {\n     return (x + y, x - y, x * y);\n }\n \n-pure fn mi(v: int) -> MyInt { MyInt { val: v } }\n+fn mi(v: int) -> MyInt { MyInt { val: v } }\n \n pub fn main() {\n     let (x, y) = (mi(3), mi(5));"}, {"sha": "9d0e5fa1f13d4dcee944774017367078ae0abab2", "filename": "src/test/run-pass/trait-inheritance-subst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n pub trait Add<RHS,Result> {\n-    pure fn add(&self, rhs: &RHS) -> Result;\n+    fn add(&self, rhs: &RHS) -> Result;\n }\n \n trait MyNum : Add<Self,Self> { }\n \n struct MyInt { val: int }\n \n impl Add<MyInt, MyInt> for MyInt {\n-    pure fn add(&self, other: &MyInt) -> MyInt { mi(self.val + other.val) }\n+    fn add(&self, other: &MyInt) -> MyInt { mi(self.val + other.val) }\n }\n \n impl MyNum for MyInt;\n@@ -26,7 +26,7 @@ fn f<T:MyNum>(x: T, y: T) -> T {\n     return x.add(&y);\n }\n \n-pure fn mi(v: int) -> MyInt { MyInt { val: v } }\n+fn mi(v: int) -> MyInt { MyInt { val: v } }\n \n pub fn main() {\n     let (x, y) = (mi(3), mi(5));"}, {"sha": "a8a579422a372fe8d0b835cfd66c95ebc42f6dec", "filename": "src/test/run-pass/trait-static-method-overwriting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -12,15 +12,15 @@\n \n mod base {\n     pub trait HasNew<T> {\n-        pure fn new() -> T;\n+        fn new() -> T;\n     }\n \n     pub struct Foo {\n         dummy: (),\n     }\n \n     impl ::base::HasNew<Foo> for Foo {\n-        pure fn new() -> Foo {\n+        fn new() -> Foo {\n \t\t\tunsafe { io::println(\"Foo\"); }\n             Foo { dummy: () }\n         }\n@@ -31,7 +31,7 @@ mod base {\n     }\n \n     impl ::base::HasNew<Bar> for Bar {\n-        pure fn new() -> Bar {\n+        fn new() -> Bar {\n \t\t\tunsafe { io::println(\"Bar\"); }\n             Bar { dummy: () }\n         }"}, {"sha": "4228f72b7caa4c7cb9b17bc14481113ccd3b355d", "filename": "src/test/run-pass/tstate-loop-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftstate-loop-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Ftstate-loop-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftstate-loop-break.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test\n \n-pure fn is_even(i: int) -> bool { (i%2) == 0 }\n+fn is_even(i: int) -> bool { (i%2) == 0 }\n fn even(i: int) : is_even(i) -> int { i }\n \n fn test() {"}, {"sha": "0af35a6c619e5df9ad196ffbc59bf378fcf62c1d", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=3eda11a4f79103a7f6d73c38e5e4f0880e26cc3c", "patch": "@@ -56,7 +56,7 @@ fn notsure() {\n }\n \n fn canttouchthis() -> uint {\n-    pure fn p() -> bool { true }\n+    fn p() -> bool { true }\n     let _a = (fail_unless!((true)) == (fail_unless!(p())));\n     let _c = (fail_unless!((p())) == ());\n     let _b: bool = (debug!(\"%d\", 0) == (return 0u));"}]}