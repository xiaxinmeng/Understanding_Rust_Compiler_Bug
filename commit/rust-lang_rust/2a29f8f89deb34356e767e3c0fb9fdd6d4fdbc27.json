{"sha": "2a29f8f89deb34356e767e3c0fb9fdd6d4fdbc27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMjlmOGY4OWRlYjM0MzU2ZTc2N2UzYzBmYjlmZGQ2ZDRmZGJjMjc=", "commit": {"author": {"name": "Matthias Schiffer", "email": "mschiffer@universe-factory.net", "date": "2020-04-13T18:58:23Z"}, "committer": {"name": "Matthias Schiffer", "email": "mschiffer@universe-factory.net", "date": "2020-04-14T16:49:29Z"}, "message": "ptr: introduce len() method on raw slices\n\nIt is already possible to extract the pointer part of a raw slice by a\nsimple cast, but retrieving the length is not possible without relying\non the representation of the raw slice when it is not valid to convert\nthe raw slice into a slice reference (i.e. the pointer is null or\nunaligned).\n\nIntroduce a len() method on raw slices to add this missing feature.", "tree": {"sha": "60c5525398496d355baf0b88480b2ae9070f6e60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60c5525398496d355baf0b88480b2ae9070f6e60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a29f8f89deb34356e767e3c0fb9fdd6d4fdbc27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEZmTnvaa2aYgexS51Fu8/ZMsgHZwFAl6V6ZkACgkQFu8/ZMsg\nHZwcAw//YoE3/xNk7Lb25ALWEVYM77+LFX84Sa6UPlwALt7FoGoVNgldw28OMBjF\nxHg65mxG40ZDQfF2ldrkQex5ta6uEvbhOk+q0qKqqN++yfRGpsqIf5zTxe1hysIC\n0dRx2aHi+/2YM0yyH/WdkWk/wbKJXag2eVUfm64VSQA0x+bOxG0kgIUJfmV30cgo\n2yr75BVvZNbKfQ2j5oj3+YlSGuA4Xc8goRrS69UPldf/rs3RLvvzFkmagaHivRqc\ndEHOM5svSfujTVdbrRz/zJE1KmMFwKhRQ0cwlLYaqMfBgScDhLZsldDVj8dKu/vv\nQ523BnCxnTjWWkV0YlKS97xaOhyspPpqoHUCVl5Lc3GViNUNzRq7mAtLm4zCSM3N\nojaq28pFchDbAQGm9kTcMdk2KPD2/3fkJr1WHTA9SkWrCGHSgougSJ/sJarGCOu+\nuFmND63n+6Ic50k742g/b1FeAbRAhE93tHGXQjYVugxQ7OPvphYwbl5hpD3IvPdp\nmwJtJJMa0Fmun0R4Fo1G8C9MiUTDZ/4e2/J56JahTj+0EwgWmNDiob3XfiQeonGd\nygPfn6bOUNZ7hBX7IIOd5D05AZ1NoGHloaDTWtznIbWt1udnt/PHMuuKRxYFvVmW\nOZDjhsvYgnPIVWOK4lglPZ8PZ2d9guDPxL0Sp+dfH0iOZDHBg3I=\n=sZ3I\n-----END PGP SIGNATURE-----", "payload": "tree 60c5525398496d355baf0b88480b2ae9070f6e60\nparent 43612e21a61bf6cd4bf741ffce64d7dd3b8ee19f\nauthor Matthias Schiffer <mschiffer@universe-factory.net> 1586804303 +0200\ncommitter Matthias Schiffer <mschiffer@universe-factory.net> 1586882969 +0200\n\nptr: introduce len() method on raw slices\n\nIt is already possible to extract the pointer part of a raw slice by a\nsimple cast, but retrieving the length is not possible without relying\non the representation of the raw slice when it is not valid to convert\nthe raw slice into a slice reference (i.e. the pointer is null or\nunaligned).\n\nIntroduce a len() method on raw slices to add this missing feature.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a29f8f89deb34356e767e3c0fb9fdd6d4fdbc27", "html_url": "https://github.com/rust-lang/rust/commit/2a29f8f89deb34356e767e3c0fb9fdd6d4fdbc27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a29f8f89deb34356e767e3c0fb9fdd6d4fdbc27/comments", "author": {"login": "NeoRaider", "id": 419139, "node_id": "MDQ6VXNlcjQxOTEzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/419139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeoRaider", "html_url": "https://github.com/NeoRaider", "followers_url": "https://api.github.com/users/NeoRaider/followers", "following_url": "https://api.github.com/users/NeoRaider/following{/other_user}", "gists_url": "https://api.github.com/users/NeoRaider/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeoRaider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeoRaider/subscriptions", "organizations_url": "https://api.github.com/users/NeoRaider/orgs", "repos_url": "https://api.github.com/users/NeoRaider/repos", "events_url": "https://api.github.com/users/NeoRaider/events{/privacy}", "received_events_url": "https://api.github.com/users/NeoRaider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "NeoRaider", "id": 419139, "node_id": "MDQ6VXNlcjQxOTEzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/419139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeoRaider", "html_url": "https://github.com/NeoRaider", "followers_url": "https://api.github.com/users/NeoRaider/followers", "following_url": "https://api.github.com/users/NeoRaider/following{/other_user}", "gists_url": "https://api.github.com/users/NeoRaider/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeoRaider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeoRaider/subscriptions", "organizations_url": "https://api.github.com/users/NeoRaider/orgs", "repos_url": "https://api.github.com/users/NeoRaider/repos", "events_url": "https://api.github.com/users/NeoRaider/events{/privacy}", "received_events_url": "https://api.github.com/users/NeoRaider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43612e21a61bf6cd4bf741ffce64d7dd3b8ee19f", "url": "https://api.github.com/repos/rust-lang/rust/commits/43612e21a61bf6cd4bf741ffce64d7dd3b8ee19f", "html_url": "https://github.com/rust-lang/rust/commit/43612e21a61bf6cd4bf741ffce64d7dd3b8ee19f"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "33c9e0b53151897d9b0d5cdd9fdacad8181f70d6", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a29f8f89deb34356e767e3c0fb9fdd6d4fdbc27/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a29f8f89deb34356e767e3c0fb9fdd6d4fdbc27/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=2a29f8f89deb34356e767e3c0fb9fdd6d4fdbc27", "patch": "@@ -708,7 +708,31 @@ impl<T: ?Sized> *const T {\n \n #[cfg(not(bootstrap))]\n #[lang = \"const_slice_ptr\"]\n-impl<T> *const [T] {}\n+impl<T> *const [T] {\n+    /// Returns the length of a raw slice.\n+    ///\n+    /// The returned value is the number of **elements**, not the number of bytes.\n+    ///\n+    /// This function is safe, even when the raw slice cannot be cast to a slice\n+    /// reference because the pointer is null or unaligned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(slice_ptr_len)]\n+    ///\n+    /// use std::ptr;\n+    ///\n+    /// let slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);\n+    /// assert_eq!(slice.len(), 3);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"slice_ptr_len\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"none\")]\n+    pub const fn len(self) -> usize {\n+        unsafe { Repr { rust: self }.raw }.len\n+    }\n+}\n \n // Equality for pointers\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "89475973675cf1364f1c5cd432116bd695ecbd78", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a29f8f89deb34356e767e3c0fb9fdd6d4fdbc27/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a29f8f89deb34356e767e3c0fb9fdd6d4fdbc27/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=2a29f8f89deb34356e767e3c0fb9fdd6d4fdbc27", "patch": "@@ -896,7 +896,31 @@ impl<T: ?Sized> *mut T {\n \n #[cfg(not(bootstrap))]\n #[lang = \"mut_slice_ptr\"]\n-impl<T> *mut [T] {}\n+impl<T> *mut [T] {\n+    /// Returns the length of a raw slice.\n+    ///\n+    /// The returned value is the number of **elements**, not the number of bytes.\n+    ///\n+    /// This function is safe, even when the raw slice cannot be cast to a slice\n+    /// reference because the pointer is null or unaligned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(slice_ptr_len)]\n+    ///\n+    /// use std::ptr;\n+    ///\n+    /// let slice: *mut [i8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), 3);\n+    /// assert_eq!(slice.len(), 3);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"slice_ptr_len\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"none\")]\n+    pub const fn len(self) -> usize {\n+        unsafe { Repr { rust_mut: self }.raw }.len\n+    }\n+}\n \n // Equality for pointers\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}