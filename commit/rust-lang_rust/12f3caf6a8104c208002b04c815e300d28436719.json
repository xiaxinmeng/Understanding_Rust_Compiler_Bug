{"sha": "12f3caf6a8104c208002b04c815e300d28436719", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZjNjYWY2YTgxMDRjMjA4MDAyYjA0YzgxNWUzMDBkMjg0MzY3MTk=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-11-22T20:49:58Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-11-22T20:49:58Z"}, "message": "ICH: Add test case for struct constructor expressions.", "tree": {"sha": "b0ded891459fa0d8720c20b05379afdaac3bb7e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0ded891459fa0d8720c20b05379afdaac3bb7e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12f3caf6a8104c208002b04c815e300d28436719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12f3caf6a8104c208002b04c815e300d28436719", "html_url": "https://github.com/rust-lang/rust/commit/12f3caf6a8104c208002b04c815e300d28436719", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12f3caf6a8104c208002b04c815e300d28436719/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f7c75b74fb7adc436eedc66c0032879293eeac6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7c75b74fb7adc436eedc66c0032879293eeac6", "html_url": "https://github.com/rust-lang/rust/commit/0f7c75b74fb7adc436eedc66c0032879293eeac6"}], "stats": {"total": 254, "additions": 254, "deletions": 0}, "files": [{"sha": "c4366ea11e3f648acfc9a93f06f1436756316a19", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "added", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/rust-lang/rust/blob/12f3caf6a8104c208002b04c815e300d28436719/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f3caf6a8104c208002b04c815e300d28436719/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=12f3caf6a8104c208002b04c815e300d28436719", "patch": "@@ -0,0 +1,254 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for struct constructor expressions.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+struct RegularStruct {\n+    x: i32,\n+    y: i64,\n+    z: i16,\n+}\n+\n+// Change field value (regular struct) -----------------------------------------\n+#[cfg(cfail1)]\n+fn change_field_value_regular_struct() -> RegularStruct {\n+    RegularStruct {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_field_value_regular_struct() -> RegularStruct {\n+    RegularStruct {\n+        x: 0,\n+        y: 2,\n+        z: 2,\n+    }\n+}\n+\n+\n+\n+// Change field order (regular struct) -----------------------------------------\n+#[cfg(cfail1)]\n+fn change_field_order_regular_struct() -> RegularStruct {\n+    RegularStruct {\n+        x: 3,\n+        y: 4,\n+        z: 5,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_field_order_regular_struct() -> RegularStruct {\n+    RegularStruct {\n+        y: 4,\n+        x: 3,\n+        z: 5,\n+    }\n+}\n+\n+\n+\n+// Add field (regular struct) --------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_field_regular_struct() -> RegularStruct {\n+    let struct1 = RegularStruct {\n+        x: 3,\n+        y: 4,\n+        z: 5,\n+    };\n+\n+    RegularStruct {\n+        x: 7,\n+        .. struct1\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_field_regular_struct() -> RegularStruct {\n+    let struct1 = RegularStruct {\n+        x: 3,\n+        y: 4,\n+        z: 5,\n+    };\n+\n+    RegularStruct {\n+        x: 7,\n+        y: 8,\n+        .. struct1\n+    }\n+}\n+\n+\n+\n+// Change field label (regular struct) -----------------------------------------\n+#[cfg(cfail1)]\n+fn change_field_label_regular_struct() -> RegularStruct {\n+    let struct1 = RegularStruct {\n+        x: 3,\n+        y: 4,\n+        z: 5,\n+    };\n+\n+    RegularStruct {\n+        x: 7,\n+        y: 9,\n+        .. struct1\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_field_label_regular_struct() -> RegularStruct {\n+    let struct1 = RegularStruct {\n+        x: 3,\n+        y: 4,\n+        z: 5,\n+    };\n+\n+    RegularStruct {\n+        x: 7,\n+        z: 9,\n+        .. struct1\n+    }\n+}\n+\n+\n+\n+struct RegularStruct2 {\n+    x: i8,\n+    y: i8,\n+    z: i8,\n+}\n+\n+// Change constructor path (regular struct) ------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_path_regular_struct() {\n+    let _ = RegularStruct {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    };\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_path_regular_struct() {\n+    let _ = RegularStruct2 {\n+        x: 0,\n+        y: 1,\n+        z: 2,\n+    };\n+}\n+\n+\n+\n+// Change constructor path indirectly (regular struct) -------------------------\n+mod change_constructor_path_indirectly_regular_struct {\n+    #[cfg(cfail1)]\n+    use super::RegularStruct as Struct;\n+    #[cfg(not(cfail1))]\n+    use super::RegularStruct2 as Struct;\n+\n+    fn function() -> Struct {\n+        Struct {\n+            x: 0,\n+            y: 1,\n+            z: 2,\n+        }\n+    }\n+}\n+\n+\n+\n+struct TupleStruct(i32, i64, i16);\n+\n+// Change field value (tuple struct) -------------------------------------------\n+#[cfg(cfail1)]\n+fn change_field_value_tuple_struct() -> TupleStruct {\n+    TupleStruct(0, 1, 2)\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_field_value_tuple_struct() -> TupleStruct {\n+    TupleStruct(0, 1, 3)\n+}\n+\n+\n+\n+struct TupleStruct2(u16, u16, u16);\n+\n+// Change constructor path (tuple struct) --------------------------------------\n+#[cfg(cfail1)]\n+fn change_constructor_path_tuple_struct() {\n+    let _ = TupleStruct(0, 1, 2);\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_constructor_path_tuple_struct() {\n+    let _ = TupleStruct2(0, 1, 2);\n+}\n+\n+\n+\n+// Change constructor path indirectly (tuple struct) ---------------------------\n+mod change_constructor_path_indirectly_tuple_struct {\n+    #[cfg(cfail1)]\n+    use super::TupleStruct as Struct;\n+    #[cfg(not(cfail1))]\n+    use super::TupleStruct2 as Struct;\n+\n+    fn function() -> Struct {\n+        Struct(0, 1, 2)\n+    }\n+}"}]}