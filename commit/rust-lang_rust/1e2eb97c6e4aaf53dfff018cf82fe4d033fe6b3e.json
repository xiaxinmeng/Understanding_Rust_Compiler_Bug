{"sha": "1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e", "node_id": "C_kwDOAAsO6NoAKDFlMmViOTdjNmU0YWFmNTNkZmZmMDE4Y2Y4MmZlNGQwMzNmZTZiM2U", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-19T01:27:32Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-19T17:11:40Z"}, "message": "Don't call `own_existential_vtable_entries` on unresolved trait ref", "tree": {"sha": "8e5e72498c7d20d20e687a765d9a531a4756b156", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e5e72498c7d20d20e687a765d9a531a4756b156"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e", "html_url": "https://github.com/rust-lang/rust/commit/1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6b5f95fb028f9feb4a2957c06b35035be2c6155", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b5f95fb028f9feb4a2957c06b35035be2c6155", "html_url": "https://github.com/rust-lang/rust/commit/a6b5f95fb028f9feb4a2957c06b35035be2c6155"}], "stats": {"total": 27, "additions": 8, "deletions": 19}, "files": [{"sha": "ea81d4465fb88827f43c42be8238eca0ff364f76", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e", "patch": "@@ -1207,9 +1207,9 @@ rustc_queries! {\n     }\n \n     query own_existential_vtable_entries(\n-        key: ty::PolyExistentialTraitRef<'tcx>\n+        key: DefId\n     ) -> &'tcx [DefId] {\n-        desc { |tcx| \"finding all existential vtable entries for trait `{}`\", tcx.def_path_str(key.def_id()) }\n+        desc { |tcx| \"finding all existential vtable entries for trait `{}`\", tcx.def_path_str(key) }\n     }\n \n     query vtable_entries(key: ty::PolyTraitRef<'tcx>)"}, {"sha": "0bf54c096cd40b6c034f8b0870fb783b7cc8d00b", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e", "patch": "@@ -764,12 +764,9 @@ fn dump_vtable_entries<'tcx>(\n     });\n }\n \n-fn own_existential_vtable_entries<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    trait_ref: ty::PolyExistentialTraitRef<'tcx>,\n-) -> &'tcx [DefId] {\n+fn own_existential_vtable_entries<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId) -> &'tcx [DefId] {\n     let trait_methods = tcx\n-        .associated_items(trait_ref.def_id())\n+        .associated_items(trait_def_id)\n         .in_definition_order()\n         .filter(|item| item.kind == ty::AssocKind::Fn);\n     // Now list each method's DefId (for within its trait).\n@@ -778,7 +775,7 @@ fn own_existential_vtable_entries<'tcx>(\n         let def_id = trait_method.def_id;\n \n         // Some methods cannot be called on an object; skip those.\n-        if !is_vtable_safe_method(tcx, trait_ref.def_id(), &trait_method) {\n+        if !is_vtable_safe_method(tcx, trait_def_id, &trait_method) {\n             debug!(\"own_existential_vtable_entry: not vtable safe\");\n             return None;\n         }\n@@ -810,7 +807,7 @@ fn vtable_entries<'tcx>(\n \n                 // Lookup the shape of vtable for the trait.\n                 let own_existential_entries =\n-                    tcx.own_existential_vtable_entries(existential_trait_ref);\n+                    tcx.own_existential_vtable_entries(existential_trait_ref.def_id());\n \n                 let own_entries = own_existential_entries.iter().copied().map(|def_id| {\n                     debug!(\"vtable_entries: trait_method={:?}\", def_id);"}, {"sha": "ed47d2f83df6535b64f5130458c3ec6d388e58da", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e", "patch": "@@ -268,10 +268,7 @@ pub fn count_own_vtable_entries<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>,\n ) -> usize {\n-    let existential_trait_ref =\n-        trait_ref.map_bound(|trait_ref| ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref));\n-    let existential_trait_ref = tcx.erase_regions(existential_trait_ref);\n-    tcx.own_existential_vtable_entries(existential_trait_ref).len()\n+    tcx.own_existential_vtable_entries(trait_ref.def_id()).len()\n }\n \n /// Given an upcast trait object described by `object`, returns the\n@@ -282,15 +279,10 @@ pub fn get_vtable_index_of_object_method<'tcx, N>(\n     object: &super::ImplSourceObjectData<'tcx, N>,\n     method_def_id: DefId,\n ) -> Option<usize> {\n-    let existential_trait_ref = object\n-        .upcast_trait_ref\n-        .map_bound(|trait_ref| ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref));\n-    let existential_trait_ref = tcx.erase_regions(existential_trait_ref);\n-\n     // Count number of methods preceding the one we are selecting and\n     // add them to the total offset.\n     if let Some(index) = tcx\n-        .own_existential_vtable_entries(existential_trait_ref)\n+        .own_existential_vtable_entries(object.upcast_trait_ref.def_id())\n         .iter()\n         .copied()\n         .position(|def_id| def_id == method_def_id)"}]}