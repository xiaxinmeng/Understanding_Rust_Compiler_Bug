{"sha": "0af0b580c29cea76028e2c83d124d4144528b37b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZjBiNTgwYzI5Y2VhNzYwMjhlMmM4M2QxMjRkNDE0NDUyOGIzN2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-13T20:45:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-13T20:45:26Z"}, "message": "Auto merge of #39787 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 5 pull requests\n\n- Successful merges: #39716, #39758, #39759, #39774, #39784\n- Failed merges:", "tree": {"sha": "3df1285f4cd0776011705f58fd80012ac759ebf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3df1285f4cd0776011705f58fd80012ac759ebf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0af0b580c29cea76028e2c83d124d4144528b37b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0af0b580c29cea76028e2c83d124d4144528b37b", "html_url": "https://github.com/rust-lang/rust/commit/0af0b580c29cea76028e2c83d124d4144528b37b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0af0b580c29cea76028e2c83d124d4144528b37b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee", "html_url": "https://github.com/rust-lang/rust/commit/717ac960b51a5a2bbedf0e4da899aec7ab2ab7ee"}, {"sha": "2a030bf6f106994ed59e341658782d8d44d4b3f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a030bf6f106994ed59e341658782d8d44d4b3f8", "html_url": "https://github.com/rust-lang/rust/commit/2a030bf6f106994ed59e341658782d8d44d4b3f8"}], "stats": {"total": 129, "additions": 90, "deletions": 39}, "files": [{"sha": "d529375277bd9ef682515bd03a0249a715a2d934", "filename": "configure", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0af0b580c29cea76028e2c83d124d4144528b37b/configure", "raw_url": "https://github.com/rust-lang/rust/raw/0af0b580c29cea76028e2c83d124d4144528b37b/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=0af0b580c29cea76028e2c83d124d4144528b37b", "patch": "@@ -644,7 +644,6 @@ opt stage0-landing-pads 1 \"enable landing pads during bootstrap with stage0\"\n opt dist-host-only 0 \"only install bins for the host architecture\"\n opt inject-std-version 1 \"inject the current compiler version of libstd into programs\"\n opt llvm-version-check 1 \"check if the LLVM version is supported, build anyway\"\n-opt rustbuild 1 \"use the rust and cargo based build system\"\n opt codegen-tests 1 \"run the src/test/codegen tests\"\n opt option-checking 1 \"complain about unrecognized options in this configure script\"\n opt ninja 0 \"build LLVM using the Ninja generator (for MSVC, requires building in the correct environment)\""}, {"sha": "caf2402f40c4baed766601db6158fee60bc98b33", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=0af0b580c29cea76028e2c83d124d4144528b37b", "patch": "@@ -315,7 +315,7 @@ def build_triple(self):\n         try:\n             ostype = subprocess.check_output(['uname', '-s']).strip().decode(default_encoding)\n             cputype = subprocess.check_output(['uname', '-m']).strip().decode(default_encoding)\n-        except (subprocess.CalledProcessError, WindowsError):\n+        except (subprocess.CalledProcessError, OSError):\n             if sys.platform == 'win32':\n                 return 'x86_64-pc-windows-msvc'\n             err = \"uname not found\"\n@@ -345,6 +345,21 @@ def build_triple(self):\n             ostype = 'unknown-openbsd'\n         elif ostype == 'NetBSD':\n             ostype = 'unknown-netbsd'\n+        elif ostype == 'SunOS':\n+            ostype = 'sun-solaris'\n+            # On Solaris, uname -m will return a machine classification instead\n+            # of a cpu type, so uname -p is recommended instead.  However, the\n+            # output from that option is too generic for our purposes (it will\n+            # always emit 'i386' on x86/amd64 systems).  As such, isainfo -k\n+            # must be used instead.\n+            try:\n+                cputype = subprocess.check_output(['isainfo',\n+                  '-k']).strip().decode(default_encoding)\n+            except (subprocess.CalledProcessError, OSError):\n+                err = \"isainfo not found\"\n+                if self.verbose:\n+                    raise Exception(err)\n+                sys.exit(err)\n         elif ostype == 'Darwin':\n             ostype = 'apple-darwin'\n         elif ostype.startswith('MINGW'):"}, {"sha": "9e3f117f9b20e15e2b0dc85f7137bed975b4dd18", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=0af0b580c29cea76028e2c83d124d4144528b37b", "patch": "@@ -1213,7 +1213,7 @@ impl<T: Clone> Vec<T> {\n         unsafe {\n             let mut ptr = self.as_mut_ptr().offset(self.len() as isize);\n             // Use SetLenOnDrop to work around bug where compiler\n-            // may not realize the store through `ptr` trough self.set_len()\n+            // may not realize the store through `ptr` through self.set_len()\n             // don't alias.\n             let mut local_len = SetLenOnDrop::new(&mut self.len);\n "}, {"sha": "d130b0279a20d103756584fb7a35b2eb656c05e3", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=0af0b580c29cea76028e2c83d124d4144528b37b", "patch": "@@ -186,6 +186,7 @@ use fmt::{self, Debug, Display};\n use marker::Unsize;\n use mem;\n use ops::{Deref, DerefMut, CoerceUnsized};\n+use ptr;\n \n /// A mutable memory location.\n ///\n@@ -387,6 +388,32 @@ impl<T> Cell<T> {\n         drop(old);\n     }\n \n+    /// Swaps the values of two Cells.\n+    /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(move_cell)]\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c1 = Cell::new(5i32);\n+    /// let c2 = Cell::new(10i32);\n+    /// c1.swap(&c2);\n+    /// assert_eq!(10, c1.get());\n+    /// assert_eq!(5, c2.get());\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"move_cell\", issue = \"39264\")]\n+    pub fn swap(&self, other: &Self) {\n+        if ptr::eq(self, other) {\n+            return;\n+        }\n+        unsafe {\n+            ptr::swap(self.value.get(), other.value.get());\n+        }\n+    }\n+\n     /// Replaces the contained value.\n     ///\n     /// # Examples"}, {"sha": "4b36e682f1e82e446428cde49efcda9a061450ab", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0af0b580c29cea76028e2c83d124d4144528b37b", "patch": "@@ -4510,28 +4510,32 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n \n-        let count = |n| {\n-            format!(\"{} parameter{}\", n, if n == 1 { \"\" } else { \"s\" })\n+        let count_lifetime_params = |n| {\n+            format!(\"{} lifetime parameter{}\", n, if n == 1 { \"\" } else { \"s\" })\n+        };\n+        let count_type_params = |n| {\n+            format!(\"{} type parameter{}\", n, if n == 1 { \"\" } else { \"s\" })\n         };\n \n         // Check provided lifetime parameters.\n         let lifetime_defs = segment.map_or(&[][..], |(_, generics)| &generics.regions);\n         if lifetimes.len() > lifetime_defs.len() {\n+            let expected_text = count_lifetime_params(lifetime_defs.len());\n+            let actual_text = count_lifetime_params(lifetimes.len());\n             struct_span_err!(self.tcx.sess, span, E0088,\n                              \"too many lifetime parameters provided: \\\n-                              expected {}, found {}\",\n-                              count(lifetime_defs.len()),\n-                              count(lifetimes.len()))\n-                .span_label(span, &format!(\"unexpected lifetime parameter{}\",\n-                                           match lifetimes.len() { 1 => \"\", _ => \"s\" }))\n+                              expected at most {}, found {}\",\n+                             expected_text, actual_text)\n+                .span_label(span, &format!(\"expected {}\", expected_text))\n                 .emit();\n         } else if lifetimes.len() > 0 && lifetimes.len() < lifetime_defs.len() {\n+            let expected_text = count_lifetime_params(lifetime_defs.len());\n+            let actual_text = count_lifetime_params(lifetimes.len());\n             struct_span_err!(self.tcx.sess, span, E0090,\n                              \"too few lifetime parameters provided: \\\n-                             expected {}, found {}\",\n-                             count(lifetime_defs.len()),\n-                             count(lifetimes.len()))\n-                .span_label(span, &format!(\"too few lifetime parameters\"))\n+                              expected {}, found {}\",\n+                             expected_text, actual_text)\n+                .span_label(span, &format!(\"expected {}\", expected_text))\n                 .emit();\n         }\n \n@@ -4552,29 +4556,27 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                     .count();\n         if types.len() > type_defs.len() {\n             let span = types[type_defs.len()].span;\n+            let expected_text = count_type_params(type_defs.len());\n+            let actual_text = count_type_params(types.len());\n             struct_span_err!(self.tcx.sess, span, E0087,\n                              \"too many type parameters provided: \\\n                               expected at most {}, found {}\",\n-                             count(type_defs.len()),\n-                             count(types.len()))\n-                .span_label(span, &format!(\"too many type parameters\")).emit();\n+                             expected_text, actual_text)\n+                .span_label(span, &format!(\"expected {}\", expected_text))\n+                .emit();\n \n             // To prevent derived errors to accumulate due to extra\n             // type parameters, we force instantiate_value_path to\n             // use inference variables instead of the provided types.\n             *segment = None;\n         } else if !infer_types && types.len() < required_len {\n-            let adjust = |len| if len > 1 { \"parameters\" } else { \"parameter\" };\n-            let required_param_str = adjust(required_len);\n-            let actual_param_str = adjust(types.len());\n+            let expected_text = count_type_params(required_len);\n+            let actual_text = count_type_params(types.len());\n             struct_span_err!(self.tcx.sess, span, E0089,\n                              \"too few type parameters provided: \\\n-                              expected {} {}, found {} {}\",\n-                             count(required_len),\n-                             required_param_str,\n-                             count(types.len()),\n-                             actual_param_str)\n-                .span_label(span, &format!(\"expected {} type {}\", required_len, required_param_str))\n+                              expected {}, found {}\",\n+                             expected_text, actual_text)\n+                .span_label(span, &format!(\"expected {}\", expected_text))\n                 .emit();\n         }\n "}, {"sha": "ea0d76978339df730973b7ca36387c5ab54ade96", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=0af0b580c29cea76028e2c83d124d4144528b37b", "patch": "@@ -27,6 +27,8 @@ fn main() {\n         println!(\"cargo:rustc-link-lib=gcc_s\");\n     } else if target.contains(\"openbsd\") {\n         println!(\"cargo:rustc-link-lib=gcc\");\n+    } else if target.contains(\"solaris\") {\n+        println!(\"cargo:rustc-link-lib=gcc_s\");\n     } else if target.contains(\"bitrig\") {\n         println!(\"cargo:rustc-link-lib=c++abi\");\n     } else if target.contains(\"dragonfly\") {"}, {"sha": "0b8150affc0c022fc5f27b1c2ac242b29695bc63", "filename": "src/test/compile-fail/E0087.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Ftest%2Fcompile-fail%2FE0087.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Ftest%2Fcompile-fail%2FE0087.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0087.rs?ref=0af0b580c29cea76028e2c83d124d4144528b37b", "patch": "@@ -8,9 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo<T>() {}\n+fn foo() {}\n+fn bar<T>() {}\n \n fn main() {\n-    foo::<f64, bool>(); //~ ERROR E0087\n-    //~^ NOTE too many type parameters\n+    foo::<f64>(); //~ ERROR expected at most 0 type parameters, found 1 type parameter [E0087]\n+                  //~^ NOTE expected 0 type parameters\n+\n+    bar::<f64, u64>(); //~ ERROR expected at most 1 type parameter, found 2 type parameters [E0087]\n+                       //~^ NOTE expected 1 type parameter\n }"}, {"sha": "de188677a1121ba4513916fa06d8313b6dd92902", "filename": "src/test/compile-fail/E0088.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Ftest%2Fcompile-fail%2FE0088.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Ftest%2Fcompile-fail%2FE0088.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0088.rs?ref=0af0b580c29cea76028e2c83d124d4144528b37b", "patch": "@@ -12,9 +12,11 @@ fn f() {}\n fn g<'a>() {}\n \n fn main() {\n-    f::<'static>(); //~ ERROR E0088\n-    //~^ unexpected lifetime parameter\n+    f::<'static>();\n+    //~^ ERROR expected at most 0 lifetime parameters, found 1 lifetime parameter [E0088]\n+    //~| NOTE expected 0 lifetime parameters\n \n-    g::<'static, 'static>(); //~ ERROR E0088\n-    //~^ unexpected lifetime parameters\n+    g::<'static, 'static>();\n+    //~^ ERROR expected at most 0 lifetime parameters, found 2 lifetime parameters [E0088]\n+    //~| NOTE expected 0 lifetime parameters\n }"}, {"sha": "986630d818fff94fe03b30e77ae2600e8e521dea", "filename": "src/test/compile-fail/E0089.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Ftest%2Fcompile-fail%2FE0089.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Ftest%2Fcompile-fail%2FE0089.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0089.rs?ref=0af0b580c29cea76028e2c83d124d4144528b37b", "patch": "@@ -11,7 +11,6 @@\n fn foo<T, U>() {}\n \n fn main() {\n-    foo::<f64>();\n-//~^ ERROR E0089\n-//~| NOTE expected 2 type parameters\n+    foo::<f64>(); //~ ERROR expected 2 type parameters, found 1 type parameter [E0089]\n+                  //~| NOTE expected 2 type parameters\n }"}, {"sha": "c37f37031add6827bbb03ed41a15103ee9de15e8", "filename": "src/test/compile-fail/E0090.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Ftest%2Fcompile-fail%2FE0090.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Ftest%2Fcompile-fail%2FE0090.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0090.rs?ref=0af0b580c29cea76028e2c83d124d4144528b37b", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n fn foo<'a: 'b, 'b: 'a>() {}\n+\n fn main() {\n-    foo::<'static>();//~ ERROR E0090\n-                     //~^ too few lifetime parameters\n+    foo::<'static>(); //~ ERROR expected 2 lifetime parameters, found 1 lifetime parameter [E0090]\n+                      //~^ NOTE expected 2 lifetime parameters\n }"}, {"sha": "5c108e052160cf50f724f4549fbf8e6c885eb0f4", "filename": "src/test/compile-fail/ufcs-qpath-missing-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-missing-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af0b580c29cea76028e2c83d124d4144528b37b/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-missing-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-missing-params.rs?ref=0af0b580c29cea76028e2c83d124d4144528b37b", "patch": "@@ -22,5 +22,5 @@ impl<'a> IntoCow<'a, str> for String {\n \n fn main() {\n     <String as IntoCow>::into_cow(\"foo\".to_string());\n-    //~^ ERROR too few type parameters provided: expected 1 parameter\n+    //~^ ERROR too few type parameters provided: expected 1 type parameter\n }"}]}