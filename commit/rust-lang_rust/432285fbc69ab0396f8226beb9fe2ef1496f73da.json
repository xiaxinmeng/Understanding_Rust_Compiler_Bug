{"sha": "432285fbc69ab0396f8226beb9fe2ef1496f73da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMjI4NWZiYzY5YWIwMzk2ZjgyMjZiZWI5ZmUyZWYxNDk2ZjczZGE=", "commit": {"author": {"name": "Alexander", "email": "alex.m.vlasov@gmail.com", "date": "2021-06-15T11:41:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-15T11:41:46Z"}, "message": "Implement llvm.x86.addcarry.64 and llvm.x86.subborrow.64 (#1178)", "tree": {"sha": "9d620c38c98a89bc3e462e865ceadcc3b3dba34f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d620c38c98a89bc3e462e865ceadcc3b3dba34f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/432285fbc69ab0396f8226beb9fe2ef1496f73da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgyJH6CRBK7hj4Ov3rIwAABjQIAEmUqePQtEEsC3wFXGsLw82r\nyntTOzQaszh8IQ57nLLPYx8aCddXdwbPrvD15dr68faSJnDqu8SSi2lvMkyh1I63\namxkBK4l3le8WZ9+Inb5ICJoPa2hMH6452qoPyKAH1rcqZqhzXrogPqyMR5oniig\nCLWAEcaR7+cwZtojGa2711HWEN1KQILfil799LtvNky5LKQh/U8EX5PGwhES+Okh\nsXP6ugYX2ppwO4uOqMCFBRoaIme4lwiK34Fa6ItBGHhjpCA/j8NXeQPnu8bCzncm\ngntLyNNCmWope4vYYqdGOnAIZZhDwhs8bBVww3Dx+Ujlzu37GzYhdVZ7YT1GIf8=\n=ehrl\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d620c38c98a89bc3e462e865ceadcc3b3dba34f\nparent 75eff64977ff149ead73bc0077bac5872d599aa2\nauthor Alexander <alex.m.vlasov@gmail.com> 1623757306 +0200\ncommitter GitHub <noreply@github.com> 1623757306 +0200\n\nImplement llvm.x86.addcarry.64 and llvm.x86.subborrow.64 (#1178)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/432285fbc69ab0396f8226beb9fe2ef1496f73da", "html_url": "https://github.com/rust-lang/rust/commit/432285fbc69ab0396f8226beb9fe2ef1496f73da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/432285fbc69ab0396f8226beb9fe2ef1496f73da/comments", "author": {"login": "shamatar", "id": 6467575, "node_id": "MDQ6VXNlcjY0Njc1NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shamatar", "html_url": "https://github.com/shamatar", "followers_url": "https://api.github.com/users/shamatar/followers", "following_url": "https://api.github.com/users/shamatar/following{/other_user}", "gists_url": "https://api.github.com/users/shamatar/gists{/gist_id}", "starred_url": "https://api.github.com/users/shamatar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions", "organizations_url": "https://api.github.com/users/shamatar/orgs", "repos_url": "https://api.github.com/users/shamatar/repos", "events_url": "https://api.github.com/users/shamatar/events{/privacy}", "received_events_url": "https://api.github.com/users/shamatar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75eff64977ff149ead73bc0077bac5872d599aa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/75eff64977ff149ead73bc0077bac5872d599aa2", "html_url": "https://github.com/rust-lang/rust/commit/75eff64977ff149ead73bc0077bac5872d599aa2"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "0b5435285b4800bc42419a11f7d070c835b45e7b", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/432285fbc69ab0396f8226beb9fe2ef1496f73da/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432285fbc69ab0396f8226beb9fe2ef1496f73da/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=432285fbc69ab0396f8226beb9fe2ef1496f73da", "patch": "@@ -106,6 +106,26 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n             let dest = CPlace::for_ptr(Pointer::new(mem_addr), a.layout());\n             dest.write_cvalue(fx, a);\n         };\n+        \"llvm.x86.addcarry.64\", (v c_in, c a, c b) {\n+            llvm_add_sub(\n+                fx,\n+                BinOp::Add,\n+                ret,\n+                c_in,\n+                a,\n+                b\n+            );\n+        };\n+        \"llvm.x86.subborrow.64\", (v b_in, c a, c b) {\n+            llvm_add_sub(\n+                fx,\n+                BinOp::Sub,\n+                ret,\n+                b_in,\n+                a,\n+                b\n+            );\n+        };\n     }\n \n     if let Some((_, dest)) = destination {\n@@ -121,3 +141,43 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n // llvm.x86.avx2.pshuf.b\n // llvm.x86.avx2.psrli.w\n // llvm.x86.sse2.psrli.w\n+\n+fn llvm_add_sub<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    bin_op: BinOp,\n+    ret: CPlace<'tcx>,\n+    cb_in: Value,\n+    a: CValue<'tcx>,\n+    b: CValue<'tcx>\n+) {\n+    assert_eq!(a.layout().ty, fx.tcx.types.u64, \"llvm.x86.addcarry.64/llvm.x86.subborrow.64 second operand must be u64\");\n+    assert_eq!(b.layout().ty, fx.tcx.types.u64, \"llvm.x86.addcarry.64/llvm.x86.subborrow.64 third operand must be u64\");\n+\n+    // c + carry -> c + first intermediate carry or borrow respectively\n+    let int0 = crate::num::codegen_checked_int_binop(\n+        fx,\n+        bin_op,\n+        a,\n+        b,\n+    );\n+    let c = int0.value_field(fx, mir::Field::new(0));\n+    let cb0 = int0.value_field(fx, mir::Field::new(1)).load_scalar(fx);\n+\n+    // c + carry -> c + second intermediate carry or borrow respectively\n+    let cb_in_as_u64 = fx.bcx.ins().uextend(types::I64, cb_in);\n+    let cb_in_as_u64 = CValue::by_val(cb_in_as_u64, fx.layout_of(fx.tcx.types.u64));\n+    let int1 = crate::num::codegen_checked_int_binop(\n+        fx,\n+        bin_op,\n+        c,\n+        cb_in_as_u64,\n+    );\n+    let (c, cb1) = int1.load_scalar_pair(fx);\n+\n+    // carry0 | carry1 -> carry or borrow respectively\n+    let cb_out = fx.bcx.ins().bor(cb0, cb1);\n+\n+    let layout = fx.layout_of(fx.tcx.mk_tup([fx.tcx.types.u8, fx.tcx.types.u64].iter()));\n+    let val = CValue::by_val_pair(cb_out, c, layout);\n+    ret.write_cvalue(fx, val);\n+}"}]}