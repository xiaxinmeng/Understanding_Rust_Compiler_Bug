{"sha": "dc028f65688da4d56315bab9f6ed6cfa29e4af84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMDI4ZjY1Njg4ZGE0ZDU2MzE1YmFiOWY2ZWQ2Y2ZhMjllNGFmODQ=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-27T17:53:50Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-31T01:18:42Z"}, "message": "Calculate LetSource later", "tree": {"sha": "fc51f266706da43f6a7dd073a10f1064f0b81724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc51f266706da43f6a7dd073a10f1064f0b81724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc028f65688da4d56315bab9f6ed6cfa29e4af84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc028f65688da4d56315bab9f6ed6cfa29e4af84", "html_url": "https://github.com/rust-lang/rust/commit/dc028f65688da4d56315bab9f6ed6cfa29e4af84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc028f65688da4d56315bab9f6ed6cfa29e4af84/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29bc94ff0de00d79aa10c47603701592e1d3e340", "url": "https://api.github.com/repos/rust-lang/rust/commits/29bc94ff0de00d79aa10c47603701592e1d3e340", "html_url": "https://github.com/rust-lang/rust/commit/29bc94ff0de00d79aa10c47603701592e1d3e340"}], "stats": {"total": 82, "additions": 42, "deletions": 40}, "files": [{"sha": "90c451517c03f0597718600082fae3b7451b6bdd", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 42, "deletions": 40, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/dc028f65688da4d56315bab9f6ed6cfa29e4af84/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc028f65688da4d56315bab9f6ed6cfa29e4af84/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=dc028f65688da4d56315bab9f6ed6cfa29e4af84", "patch": "@@ -118,31 +118,6 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n         check_for_bindings_named_same_as_variants(self, pat);\n     }\n \n-    fn let_source(&mut self, pat: &'tcx hir::Pat<'tcx>, _expr: &hir::Expr<'_>) -> LetSource {\n-        let hir = self.tcx.hir();\n-        let parent = hir.get_parent_node(pat.hir_id);\n-        let parent_parent = hir.get_parent_node(parent);\n-        let parent_parent_node = hir.get(parent_parent);\n-\n-        let parent_parent_parent = hir.get_parent_node(parent_parent);\n-        let parent_parent_parent_parent = hir.get_parent_node(parent_parent_parent);\n-        let parent_parent_parent_parent_node = hir.get(parent_parent_parent_parent);\n-\n-        if let hir::Node::Expr(hir::Expr {\n-            kind: hir::ExprKind::Loop(_, _, hir::LoopSource::While, _),\n-            ..\n-        }) = parent_parent_parent_parent_node\n-        {\n-            LetSource::WhileLet\n-        } else if let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::If { .. }, .. }) =\n-            parent_parent_node\n-        {\n-            LetSource::IfLet\n-        } else {\n-            LetSource::GenericLet\n-        }\n-    }\n-\n     fn lower_pattern<'p>(\n         &self,\n         cx: &mut MatchCheckCtxt<'p, 'tcx>,\n@@ -172,10 +147,9 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n \n     fn check_let(&mut self, pat: &'tcx hir::Pat<'tcx>, expr: &hir::Expr<'_>, span: Span) {\n         self.check_patterns(pat);\n-        let ls = self.let_source(pat, expr);\n         let mut cx = self.new_cx(expr.hir_id);\n         let tpat = self.lower_pattern(&mut cx, pat, &mut false).0;\n-        check_let_reachability(&mut cx, ls, pat.hir_id, &tpat, span);\n+        check_let_reachability(&mut cx, pat.hir_id, &tpat, span);\n     }\n \n     fn check_match(\n@@ -192,13 +166,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n             if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n                 self.check_patterns(pat);\n                 let tpat = self.lower_pattern(&mut cx, pat, &mut false).0;\n-                check_let_reachability(\n-                    &mut cx,\n-                    LetSource::IfLetGuard,\n-                    pat.hir_id,\n-                    &tpat,\n-                    tpat.span,\n-                );\n+                check_let_reachability(&mut cx, pat.hir_id, &tpat, tpat.span);\n             }\n         }\n \n@@ -397,7 +365,7 @@ fn unreachable_pattern(tcx: TyCtxt<'_>, span: Span, id: HirId, catchall: Option<\n     });\n }\n \n-fn irrefutable_let_pattern(id: HirId, ls: LetSource, span: Span, tcx: TyCtxt<'_>) {\n+fn irrefutable_let_pattern(tcx: TyCtxt<'_>, id: HirId, span: Span) {\n     macro_rules! emit_diag {\n         (\n             $lint:expr,\n@@ -412,7 +380,8 @@ fn irrefutable_let_pattern(id: HirId, ls: LetSource, span: Span, tcx: TyCtxt<'_>\n         }};\n     }\n \n-    tcx.struct_span_lint_hir(IRREFUTABLE_LET_PATTERNS, id, span, |lint| match ls {\n+    let source = let_source(tcx, id);\n+    tcx.struct_span_lint_hir(IRREFUTABLE_LET_PATTERNS, id, span, |lint| match source {\n         LetSource::GenericLet => {\n             emit_diag!(lint, \"`let`\", \"`let` is useless\", \"removing `let`\");\n         }\n@@ -445,7 +414,6 @@ fn irrefutable_let_pattern(id: HirId, ls: LetSource, span: Span, tcx: TyCtxt<'_>\n \n fn check_let_reachability<'p, 'tcx>(\n     cx: &mut MatchCheckCtxt<'p, 'tcx>,\n-    ls: LetSource,\n     pat_id: HirId,\n     pat: &'p super::Pat<'tcx>,\n     span: Span,\n@@ -454,13 +422,13 @@ fn check_let_reachability<'p, 'tcx>(\n     let report = compute_match_usefulness(&cx, &arms, pat_id, pat.ty);\n \n     report_arm_reachability(&cx, &report, |arm_index, arm_span, arm_hir_id, _| {\n-        match ls {\n+        match let_source(cx.tcx, pat_id) {\n             LetSource::IfLet | LetSource::WhileLet => {\n                 match arm_index {\n                     // The arm with the user-specified pattern.\n                     0 => unreachable_pattern(cx.tcx, arm_span, arm_hir_id, None),\n                     // The arm with the wildcard pattern.\n-                    1 => irrefutable_let_pattern(pat_id, ls, arm_span, cx.tcx),\n+                    1 => irrefutable_let_pattern(cx.tcx, pat_id, arm_span),\n                     _ => bug!(),\n                 }\n             }\n@@ -473,7 +441,7 @@ fn check_let_reachability<'p, 'tcx>(\n \n     if report.non_exhaustiveness_witnesses.is_empty() {\n         // The match is exhaustive, i.e. the `if let` pattern is irrefutable.\n-        irrefutable_let_pattern(pat_id, ls, span, cx.tcx);\n+        irrefutable_let_pattern(cx.tcx, pat_id, span);\n     }\n }\n \n@@ -789,3 +757,37 @@ pub enum LetSource {\n     IfLetGuard,\n     WhileLet,\n }\n+\n+fn let_source(tcx: TyCtxt<'_>, pat_id: HirId) -> LetSource {\n+    let hir = tcx.hir();\n+    let parent = hir.get_parent_node(pat_id);\n+    match hir.get(parent) {\n+        hir::Node::Arm(hir::Arm {\n+            guard: Some(hir::Guard::IfLet(&hir::Pat { hir_id, .. }, _)),\n+            ..\n+        }) if hir_id == pat_id => {\n+            return LetSource::IfLetGuard;\n+        }\n+        _ => {}\n+    }\n+    let parent_parent = hir.get_parent_node(parent);\n+    let parent_parent_node = hir.get(parent_parent);\n+\n+    let parent_parent_parent = hir.get_parent_node(parent_parent);\n+    let parent_parent_parent_parent = hir.get_parent_node(parent_parent_parent);\n+    let parent_parent_parent_parent_node = hir.get(parent_parent_parent_parent);\n+\n+    if let hir::Node::Expr(hir::Expr {\n+        kind: hir::ExprKind::Loop(_, _, hir::LoopSource::While, _),\n+        ..\n+    }) = parent_parent_parent_parent_node\n+    {\n+        LetSource::WhileLet\n+    } else if let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::If { .. }, .. }) =\n+        parent_parent_node\n+    {\n+        LetSource::IfLet\n+    } else {\n+        LetSource::GenericLet\n+    }\n+}"}]}