{"sha": "eca7796fb1cd8866189e273f7e5d1df5585b269e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYTc3OTZmYjFjZDg4NjYxODllMjczZjdlNWQxZGY1NTg1YjI2OWU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-11T08:43:08Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-11T08:43:08Z"}, "message": "Replace `--dump-minimal-config` and `--dump-default-config` with `--print-config`\n\ncc #1976", "tree": {"sha": "477d111b23e2d551672779c68ce6862b337c1bff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/477d111b23e2d551672779c68ce6862b337c1bff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eca7796fb1cd8866189e273f7e5d1df5585b269e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eca7796fb1cd8866189e273f7e5d1df5585b269e", "html_url": "https://github.com/rust-lang/rust/commit/eca7796fb1cd8866189e273f7e5d1df5585b269e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eca7796fb1cd8866189e273f7e5d1df5585b269e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d9de48e06e5448136d216a5bb60f53568e1a9d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d9de48e06e5448136d216a5bb60f53568e1a9d0", "html_url": "https://github.com/rust-lang/rust/commit/4d9de48e06e5448136d216a5bb60f53568e1a9d0"}], "stats": {"total": 48, "additions": 18, "deletions": 30}, "files": [{"sha": "ee17c024e69e5e9d93e35ab1fe786683db6d0d24", "filename": "src/bin/main.rs", "status": "modified", "additions": 18, "deletions": 30, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/eca7796fb1cd8866189e273f7e5d1df5585b269e/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eca7796fb1cd8866189e273f7e5d1df5585b269e/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=eca7796fb1cd8866189e273f7e5d1df5585b269e", "patch": "@@ -110,20 +110,6 @@ fn make_opts() -> Options {\n          found reverts to the input file path\",\n         \"[Path for the configuration file]\",\n     );\n-    opts.opt(\n-        \"\",\n-        \"dump-default-config\",\n-        \"Dumps default configuration to PATH. PATH defaults to stdout, if omitted.\",\n-        \"PATH\",\n-        getopts::HasArg::Maybe,\n-        getopts::Occur::Optional,\n-    );\n-    opts.optopt(\n-        \"\",\n-        \"dump-minimal-config\",\n-        \"Dumps configuration options that were checked during formatting to a file.\",\n-        \"PATH\",\n-    );\n     opts.optflag(\n         \"\",\n         \"error-on-unformatted\",\n@@ -142,6 +128,13 @@ fn make_opts() -> Options {\n         \"Show this message or help about a specific topic: config or file-lines\",\n         \"=TOPIC\",\n     );\n+    opts.optopt(\n+        \"\",\n+        \"print-config\",\n+        \"Dumps a default or minimal config to PATH. A minimal config is the \\\n+         subset of the current config file used for formatting the current program.\",\n+        \"[minimal|default] PATH\",\n+    );\n     opts.optflag(\"\", \"skip-children\", \"Don't reformat child modules\");\n     opts.optflag(\n         \"\",\n@@ -361,29 +354,24 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n         }\n     }\n \n-    if matches.opt_present(\"dump-default-config\") {\n-        // NOTE for some reason when configured with HasArg::Maybe + Occur::Optional opt_default\n-        // doesn't recognize `--foo bar` as a long flag with an argument but as a long flag with no\n-        // argument *plus* a free argument. Thus we check for that case in this branch -- this is\n-        // required for backward compatibility.\n-        if let Some(path) = matches.free.get(0) {\n-            return Ok(Operation::ConfigOutputDefault {\n-                path: Some(path.clone()),\n-            });\n-        } else {\n-            return Ok(Operation::ConfigOutputDefault {\n-                path: matches.opt_str(\"dump-default-config\"),\n-            });\n+    let mut minimal_config_path = None;\n+    if matches.opt_present(\"print-config\") {\n+        let kind = matches.opt_str(\"print-config\");\n+        let path = matches.free.get(0);\n+        if kind == \"default\" {\n+            return Ok(Operation::ConfigOutputDefault { path: path.clone() });\n+        } else if kind = \"minimal\" {\n+            minimal_config_path = path;\n+            if minimal_config_path.is_none() {\n+                println!(\"WARNING: PATH required for `--print-config minimal`\");\n+            }\n         }\n     }\n \n     if matches.opt_present(\"version\") {\n         return Ok(Operation::Version);\n     }\n \n-    // If no path is given, we won't output a minimal config.\n-    let minimal_config_path = matches.opt_str(\"dump-minimal-config\");\n-\n     // if no file argument is supplied, read from stdin\n     if matches.free.is_empty() {\n         let mut buffer = String::new();"}]}