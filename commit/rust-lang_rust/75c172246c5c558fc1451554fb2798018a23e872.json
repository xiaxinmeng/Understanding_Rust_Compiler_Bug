{"sha": "75c172246c5c558fc1451554fb2798018a23e872", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YzE3MjI0NmM1YzU1OGZjMTQ1MTU1NGZiMjc5ODAxOGEyM2U4NzI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-07-04T15:41:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-07-04T15:41:40Z"}, "message": "be conservative in has_significant_drop", "tree": {"sha": "5fabf09aaded89c2613dea25c0a9f5238d65b6c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fabf09aaded89c2613dea25c0a9f5238d65b6c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75c172246c5c558fc1451554fb2798018a23e872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75c172246c5c558fc1451554fb2798018a23e872", "html_url": "https://github.com/rust-lang/rust/commit/75c172246c5c558fc1451554fb2798018a23e872", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75c172246c5c558fc1451554fb2798018a23e872/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40ee019c17dc35a1681d48246b8cdd3d6563702f", "url": "https://api.github.com/repos/rust-lang/rust/commits/40ee019c17dc35a1681d48246b8cdd3d6563702f", "html_url": "https://github.com/rust-lang/rust/commit/40ee019c17dc35a1681d48246b8cdd3d6563702f"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "f0cff0e9247b9ed27fab659f1a3da0d935186c47", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/75c172246c5c558fc1451554fb2798018a23e872/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c172246c5c558fc1451554fb2798018a23e872/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=75c172246c5c558fc1451554fb2798018a23e872", "patch": "@@ -816,6 +816,15 @@ impl<'tcx> ty::TyS<'tcx> {\n                     [component_ty] => component_ty,\n                     _ => self,\n                 };\n+\n+                // FIXME: We should be canonicalizing, or else moving this to a method of inference\n+                // context, or *something* like that, but for now just avoid passing inference\n+                // variables to queries that can't cope with them. Instead, conservatively\n+                // return \"true\" (may change drop order).\n+                if query_ty.needs_infer() {\n+                    return true;\n+                }\n+\n                 // This doesn't depend on regions, so try to minimize distinct\n                 // query keys used.\n                 let erased = tcx.normalize_erasing_regions(param_env, query_ty);"}, {"sha": "fce9cac627b5e970a46d0cf515898a011014071d", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/issue-86753.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/75c172246c5c558fc1451554fb2798018a23e872/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-86753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c172246c5c558fc1451554fb2798018a23e872/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-86753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-86753.rs?ref=75c172246c5c558fc1451554fb2798018a23e872", "patch": "@@ -0,0 +1,34 @@\n+// edition:2018\n+// check-pass\n+\n+#![warn(rust_2021_compatibility)]\n+\n+use std::future::Future;\n+\n+struct Runtime;\n+\n+impl Runtime {\n+    pub fn block_on<F: Future>(&self, _future: F) -> F::Output {\n+        unimplemented!()\n+    }\n+}\n+\n+pub fn http<F, Fut>(_func: F)\n+where\n+    F: Fn() -> Fut,\n+    Fut: Future<Output = ()>,\n+{\n+    let rt = Runtime {};\n+    let srv = rt.block_on(async move { serve(move || async move { unimplemented!() }) });\n+    let _ = || rt.block_on(async { srv });\n+}\n+\n+pub struct Server<S> {\n+    _marker: std::marker::PhantomData<S>,\n+}\n+\n+pub fn serve<S>(_new_service: S) -> Server<S> {\n+    unimplemented!()\n+}\n+\n+fn main() { }"}]}