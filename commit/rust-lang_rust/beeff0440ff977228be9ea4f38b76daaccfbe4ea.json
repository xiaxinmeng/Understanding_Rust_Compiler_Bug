{"sha": "beeff0440ff977228be9ea4f38b76daaccfbe4ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZWZmMDQ0MGZmOTc3MjI4YmU5ZWE0ZjM4Yjc2ZGFhY2NmYmU0ZWE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-16T21:37:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-16T21:37:28Z"}, "message": "Rollup merge of #87967 - m-ou-se:non-fmt-panic-detect-fake-spans, r=cjgillot\n\nDetect fake spans in non_fmt_panic lint.\n\nThis addresses https://github.com/rust-lang/rust/issues/87621\n\nSome proc_macros claim that the user wrote all of the tokens it outputs, by applying a span from the input to all of the produced tokens. That can result in confusing suggestions, as in #87621. This is a simple patch that avoids suggesting anything for `panic!(\"{}\")` if the span of `\"{}\"` and `panic!(..)` are identical, which is normally not possible.", "tree": {"sha": "e3fc8ad0880f9bc929e3d3ab13f3cc905a552e79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3fc8ad0880f9bc929e3d3ab13f3cc905a552e79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beeff0440ff977228be9ea4f38b76daaccfbe4ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhGtqYCRBK7hj4Ov3rIwAAWXIIAH2+z2QJXHnfF5ZY3e3AJHX2\ncYhZuogTOEgJDbvuuvOPwTzgnN0b2d9eRNvM3KkdOQRdtWUagbimf7oolH2BFsRE\nXlluevHTz7Cnva0R6slJqgIAaoOY3/KGUCTCXQ65GiJuoeSlM9jdSVE2gyw5zhBV\nNnGWvqdgCCf7gi+OZDkOh3qKX5YjIknX9wMHKiiCt7Cql6tu5D86eDAfSyMzlTib\n++eDq84wz4mi0100IJQyG52Nt/xZN//brUwDNHDcRMoyl4LYz8To8GoarE+5cDm9\n+i1dlhjhwGDvy9+1pM0oy4CDi961YUOgCOkUZGj/vOF8K1AHX5CJxHCbOGeLtB8=\n=kB+C\n-----END PGP SIGNATURE-----\n", "payload": "tree e3fc8ad0880f9bc929e3d3ab13f3cc905a552e79\nparent d7df1b13da463011a843383a20c0fd4f111d3564\nparent 079bf755a3449a61e61714a17d00f21337f2471e\nauthor Mara Bos <m-ou.se@m-ou.se> 1629149848 +0200\ncommitter GitHub <noreply@github.com> 1629149848 +0200\n\nRollup merge of #87967 - m-ou-se:non-fmt-panic-detect-fake-spans, r=cjgillot\n\nDetect fake spans in non_fmt_panic lint.\n\nThis addresses https://github.com/rust-lang/rust/issues/87621\n\nSome proc_macros claim that the user wrote all of the tokens it outputs, by applying a span from the input to all of the produced tokens. That can result in confusing suggestions, as in #87621. This is a simple patch that avoids suggesting anything for `panic!(\"{}\")` if the span of `\"{}\"` and `panic!(..)` are identical, which is normally not possible.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beeff0440ff977228be9ea4f38b76daaccfbe4ea", "html_url": "https://github.com/rust-lang/rust/commit/beeff0440ff977228be9ea4f38b76daaccfbe4ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beeff0440ff977228be9ea4f38b76daaccfbe4ea/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7df1b13da463011a843383a20c0fd4f111d3564", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7df1b13da463011a843383a20c0fd4f111d3564", "html_url": "https://github.com/rust-lang/rust/commit/d7df1b13da463011a843383a20c0fd4f111d3564"}, {"sha": "079bf755a3449a61e61714a17d00f21337f2471e", "url": "https://api.github.com/repos/rust-lang/rust/commits/079bf755a3449a61e61714a17d00f21337f2471e", "html_url": "https://github.com/rust-lang/rust/commit/079bf755a3449a61e61714a17d00f21337f2471e"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "ee66a948dd93c0b06e779119ce320cdeaad015a1", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/beeff0440ff977228be9ea4f38b76daaccfbe4ea/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beeff0440ff977228be9ea4f38b76daaccfbe4ea/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=beeff0440ff977228be9ea4f38b76daaccfbe4ea", "patch": "@@ -101,7 +101,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n         let mut l = lint.build(\"panic message is not a string literal\");\n         l.note(\"this usage of panic!() is deprecated; it will be a hard error in Rust 2021\");\n         l.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\");\n-        if !span.contains(arg_span) {\n+        if !is_arg_inside_call(arg_span, span) {\n             // No clue where this argument is coming from.\n             l.emit();\n             return;\n@@ -204,7 +204,7 @@ fn check_panic_str<'tcx>(\n                 _ => \"panic message contains unused formatting placeholders\",\n             });\n             l.note(\"this message is not used as a format string when given without arguments, but will be in Rust 2021\");\n-            if span.contains(arg.span) {\n+            if is_arg_inside_call(arg.span, span) {\n                 l.span_suggestion(\n                     arg.span.shrink_to_hi(),\n                     &format!(\"add the missing argument{}\", pluralize!(n_arguments)),\n@@ -235,7 +235,7 @@ fn check_panic_str<'tcx>(\n         cx.struct_span_lint(NON_FMT_PANICS, brace_spans.unwrap_or_else(|| vec![span]), |lint| {\n             let mut l = lint.build(msg);\n             l.note(\"this message is not used as a format string, but will be in Rust 2021\");\n-            if span.contains(arg.span) {\n+            if is_arg_inside_call(arg.span, span) {\n                 l.span_suggestion(\n                     arg.span.shrink_to_lo(),\n                     \"add a \\\"{}\\\" format string to use the message literally\",\n@@ -283,3 +283,11 @@ fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span,\n         if let hygiene::ExpnKind::Macro(_, symbol) = expn.kind { symbol } else { sym::panic };\n     (expn.call_site, panic_macro, macro_symbol.as_str())\n }\n+\n+fn is_arg_inside_call(arg: Span, call: Span) -> bool {\n+    // We only add suggestions if the argument we're looking at appears inside the\n+    // panic call in the source file, to avoid invalid suggestions when macros are involved.\n+    // We specifically check for the spans to not be identical, as that happens sometimes when\n+    // proc_macros lie about spans and apply the same span to all the tokens they produce.\n+    call.contains(arg) && !call.source_equal(&arg)\n+}"}]}