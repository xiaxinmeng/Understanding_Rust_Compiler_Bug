{"sha": "e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYThlYTRlMThhNTBkYTYwMDM2ZDI3MzE3NjhhOWNiNzhjOTBmNWE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-08T00:14:42Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-12-06T12:23:23Z"}, "message": "Use `to_option` in various places", "tree": {"sha": "05443dd965f6dc9c520cf22a1f63c60689953146", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05443dd965f6dc9c520cf22a1f63c60689953146"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "html_url": "https://github.com/rust-lang/rust/commit/e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51901eea8c918fd55506b3e6311857d4f5bd1ba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/51901eea8c918fd55506b3e6311857d4f5bd1ba5", "html_url": "https://github.com/rust-lang/rust/commit/51901eea8c918fd55506b3e6311857d4f5bd1ba5"}], "stats": {"total": 317, "additions": 81, "deletions": 236}, "files": [{"sha": "2e8837bb63f54aeb59a9e55cf49324f1a960b34e", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -11,6 +11,7 @@\n #![feature(nll)]\n #![feature(rustc_private)]\n #![feature(unicode_internals)]\n+#![feature(bool_to_option)]\n \n pub use Piece::*;\n pub use Position::*;\n@@ -644,11 +645,7 @@ impl<'a> Parser<'a> {\n                 break;\n             }\n         }\n-        if found {\n-            Some(cur)\n-        } else {\n-            None\n-        }\n+        found.to_option(cur)\n     }\n }\n "}, {"sha": "5c5ce8c668d242e18d8aa3d7972c4627a8878a5f", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -147,13 +147,7 @@ impl<'a> FnLikeNode<'a> {\n             map::Node::Expr(e) => e.is_fn_like(),\n             _ => false\n         };\n-        if fn_like {\n-            Some(FnLikeNode {\n-                node,\n-            })\n-        } else {\n-            None\n-        }\n+        fn_like.to_option(FnLikeNode { node })\n     }\n \n     pub fn body(self) -> ast::BodyId {"}, {"sha": "aebf93d85c5f1a81faf06803dfaa37ae965afc18", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -211,11 +211,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n                 (r, p)\n             );\n             let p_ty = p.to_ty(tcx);\n-            if compare_ty(p_ty) {\n-                Some(ty::OutlivesPredicate(p_ty, r))\n-            } else {\n-                None\n-            }\n+            compare_ty(p_ty).to_option(ty::OutlivesPredicate(p_ty, r))\n         });\n \n         param_bounds"}, {"sha": "24b87ffc80c2a5b60a425a1a17dfa6683080560b", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -29,6 +29,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(arbitrary_self_types)]\n+#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(const_fn)]"}, {"sha": "f7bd1ac5501a03777ac19e3ea7a1c98691d47a0e", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -242,11 +242,7 @@ impl<'tcx> Body<'tcx> {\n     pub fn vars_iter<'a>(&'a self) -> impl Iterator<Item = Local> + 'a {\n         (self.arg_count + 1..self.local_decls.len()).filter_map(move |index| {\n             let local = Local::new(index);\n-            if self.local_decls[local].is_user_variable() {\n-                Some(local)\n-            } else {\n-                None\n-            }\n+            self.local_decls[local].is_user_variable().to_option(local)\n         })\n     }\n "}, {"sha": "6f27adf194a73e399b99f37ad2f7077c4c6395a0", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -363,11 +363,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             return None\n         };\n \n-        if tcx.has_attr(impl_def_id, sym::rustc_on_unimplemented) {\n-            Some(impl_def_id)\n-        } else {\n-            None\n-        }\n+        tcx.has_attr(impl_def_id, sym::rustc_on_unimplemented).to_option(impl_def_id)\n     }\n \n     fn describe_generator(&self, body_id: hir::BodyId) -> Option<&'static str> {"}, {"sha": "ca1758ee78a79306f2aae3d72fa71f125b197ea2", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -2784,11 +2784,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n         };\n \n-        if is_associated_item {\n-            Some(self.associated_item(def_id))\n-        } else {\n-            None\n-        }\n+        is_associated_item.to_option_with(|| self.associated_item(def_id))\n     }\n \n     fn associated_item_from_trait_item_ref(self,\n@@ -3253,7 +3249,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ParamEnv<'_> {\n     let unnormalized_env = ty::ParamEnv::new(\n         tcx.intern_predicates(&predicates),\n         traits::Reveal::UserFacing,\n-        if tcx.sess.opts.debugging_opts.chalk { Some(def_id) } else { None }\n+        tcx.sess.opts.debugging_opts.chalk.to_option(def_id),\n     );\n \n     let body_id = tcx.hir().as_local_hir_id(def_id).map_or(hir::DUMMY_HIR_ID, |id| {"}, {"sha": "843222cfcac8313840cc5912c7e7b6d24019d76d", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -303,13 +303,8 @@ fn connected_to_root<'tcx>(\n         return true;\n     }\n \n-    visit_waiters(query, |_, successor| {\n-        if connected_to_root(successor, visited) {\n-            Some(None)\n-        } else {\n-            None\n-        }\n-    }).is_some()\n+    visit_waiters(query, |_, successor| connected_to_root(successor, visited).to_option(None))\n+        .is_some()\n }\n \n // Deterministically pick an query from a list"}, {"sha": "1ea9362dc4260ea16c52a90cac5518903533a1ba", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -375,11 +375,7 @@ pub fn provide_extern(providers: &mut Providers<'_>) {\n         let native_libs = tcx.native_libraries(cnum);\n \n         let def_id_to_native_lib = native_libs.iter().filter_map(|lib|\n-            if let Some(id) = lib.foreign_module {\n-                Some((id, lib))\n-            } else {\n-                None\n-            }\n+            lib.foreign_module.map(|id| (id, lib))\n         ).collect::<FxHashMap<_, _>>();\n \n         let mut ret = FxHashMap::default();"}, {"sha": "369a098a5c6f987151f2e3df1f8c656d2a06dc34", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -245,11 +245,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             let (mut lo, mut hi) = (0u64, 0u64);\n             let success = llvm::LLVMRustConstInt128Get(v, sign_ext,\n                                                         &mut hi, &mut lo);\n-            if success {\n-                Some(hi_lo_to_u128(lo, hi))\n-            } else {\n-                None\n-            }\n+            success.to_option(hi_lo_to_u128(lo, hi))\n         })\n     }\n "}, {"sha": "00a84f8d80f36467f52fbfd4b1abeb815750e8c0", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -6,6 +6,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n+#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(const_cstr_unchecked)]"}, {"sha": "b932a2020932a8325d284ae04da71bc19eee53f2", "filename": "src/librustc_codegen_ssa/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_codegen_ssa%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_codegen_ssa%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Frpath.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -119,11 +119,7 @@ fn path_relative_from(path: &Path, base: &Path) -> Option<PathBuf> {\n     use std::path::Component;\n \n     if path.is_absolute() != base.is_absolute() {\n-        if path.is_absolute() {\n-            Some(PathBuf::from(path))\n-        } else {\n-            None\n-        }\n+        path.is_absolute().to_option(PathBuf::from(path))\n     } else {\n         let mut ita = path.components();\n         let mut itb = base.components();"}, {"sha": "0051981407107d36e0f6e1c29c30b1b6297a6abe", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -85,11 +85,7 @@ fn reachable_non_generics_provider(\n             match tcx.hir().get(hir_id) {\n                 Node::ForeignItem(..) => {\n                     let def_id = tcx.hir().local_def_id(hir_id);\n-                    if tcx.is_statically_included_foreign_item(def_id) {\n-                        Some(def_id)\n-                    } else {\n-                        None\n-                    }\n+                    tcx.is_statically_included_foreign_item(def_id).to_option(def_id)\n                 }\n \n                 // Only consider nodes that actually have exported symbols."}, {"sha": "ebddff2af6ef26fbfdbd7570055f33983ecc5461", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -1,5 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n+#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n@@ -68,22 +69,11 @@ impl<M> ModuleCodegen<M> {\n                             emit_bc: bool,\n                             emit_bc_compressed: bool,\n                             outputs: &OutputFilenames) -> CompiledModule {\n-        let object = if emit_obj {\n-            Some(outputs.temp_path(OutputType::Object, Some(&self.name)))\n-        } else {\n-            None\n-        };\n-        let bytecode = if emit_bc {\n-            Some(outputs.temp_path(OutputType::Bitcode, Some(&self.name)))\n-        } else {\n-            None\n-        };\n-        let bytecode_compressed = if emit_bc_compressed {\n-            Some(outputs.temp_path(OutputType::Bitcode, Some(&self.name))\n-                    .with_extension(RLIB_BYTECODE_EXTENSION))\n-        } else {\n-            None\n-        };\n+        let object = emit_obj.to_option(outputs.temp_path(OutputType::Object, Some(&self.name)));\n+        let bytecode = emit_bc.to_option(outputs.temp_path(OutputType::Bitcode, Some(&self.name)));\n+        let bytecode_compressed = emit_bc_compressed.to_option(\n+            outputs.temp_path(OutputType::Bitcode, Some(&self.name))\n+                    .with_extension(RLIB_BYTECODE_EXTENSION));\n \n         CompiledModule {\n             name: self.name.clone(),"}, {"sha": "9bb18788171b4a51851e054984664a6446dc05f9", "filename": "src/librustc_interface/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_interface%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_interface%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Flib.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -1,3 +1,4 @@\n+#![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(set_stdio)]\n #![feature(nll)]"}, {"sha": "6be41a23735ab5207c93f1ca7cd68d2ea9e1532f", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -547,13 +547,7 @@ fn output_contains_path(output_paths: &[PathBuf], input_path: &PathBuf) -> bool\n }\n \n fn output_conflicts_with_dir(output_paths: &[PathBuf]) -> Option<PathBuf> {\n-    let check = |output_path: &PathBuf| {\n-        if output_path.is_dir() {\n-            Some(output_path.clone())\n-        } else {\n-            None\n-        }\n-    };\n+    let check = |output_path: &PathBuf| output_path.is_dir().to_option(output_path.clone());\n     check_output(output_paths, check)\n }\n "}, {"sha": "7413899fac6bbac903b5359561fc28d140b1d215", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -117,11 +117,9 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn dep_graph_future(&self) -> Result<&Query<Option<DepGraphFuture>>> {\n         self.dep_graph_future.compute(|| {\n-            Ok(if self.session().opts.build_dep_graph() {\n-                Some(rustc_incremental::load_dep_graph(self.session()))\n-            } else {\n-                None\n-            })\n+            Ok(self.session().opts.build_dep_graph().to_option_with(|| {\n+                rustc_incremental::load_dep_graph(self.session())\n+            }))\n         })\n     }\n "}, {"sha": "3d227f91ed608c44fe4a72f03d57e91781633931", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -107,11 +107,7 @@ const STACK_SIZE: usize = 16 * 1024 * 1024;\n fn get_stack_size() -> Option<usize> {\n     // FIXME: Hacks on hacks. If the env is trying to override the stack size\n     // then *don't* set it explicitly.\n-    if env::var_os(\"RUST_MIN_STACK\").is_none() {\n-        Some(STACK_SIZE)\n-    } else {\n-        None\n-    }\n+    env::var_os(\"RUST_MIN_STACK\").is_none().to_option(STACK_SIZE)\n }\n \n struct Sink(Arc<Mutex<Vec<u8>>>);\n@@ -285,11 +281,7 @@ fn get_rustc_path_inner(bin_path: &str) -> Option<PathBuf> {\n             } else {\n                 \"rustc\"\n             });\n-            if candidate.exists() {\n-                Some(candidate)\n-            } else {\n-                None\n-            }\n+            candidate.exists().to_option(candidate)\n         })\n         .next()\n }"}, {"sha": "080448911af55044adb3c79e00af1798ad79d93d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -1491,11 +1491,7 @@ impl ExplicitOutlivesRequirements {\n             match pred {\n                 ty::Predicate::TypeOutlives(outlives) => {\n                     let outlives = outlives.skip_binder();\n-                    if outlives.0.is_param(index) {\n-                        Some(outlives.1)\n-                    } else {\n-                        None\n-                    }\n+                    outlives.0.is_param(index).to_option(outlives.1)\n                 }\n                 _ => None\n             }\n@@ -1554,11 +1550,7 @@ impl ExplicitOutlivesRequirements {\n                             }),\n                         _ => false,\n                     };\n-                    if is_inferred {\n-                        Some((i, bound.span()))\n-                    } else {\n-                        None\n-                    }\n+                    is_inferred.to_option((i, bound.span()))\n                 } else {\n                     None\n                 }"}, {"sha": "12aab4b4f84e4549a329d46124e88bdb5e3f5f51", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -12,6 +12,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![cfg_attr(test, feature(test))]\n+#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(nll)]"}, {"sha": "20fd9445f0ed2aa5cd8f21a78e64a1c322ecf05b", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -802,11 +802,8 @@ impl<'a> CrateLoader<'a> {\n         // First up we check for global allocators. Look at the crate graph here\n         // and see what's a global allocator, including if we ourselves are a\n         // global allocator.\n-        let mut global_allocator = if self.cstore.has_global_allocator {\n-            Some(Symbol::intern(\"this crate\"))\n-        } else {\n-            None\n-        };\n+        let mut global_allocator = self.cstore.has_global_allocator\n+            .to_option_with(|| Symbol::intern(\"this crate\"));\n         self.cstore.iter_crate_data(|_, data| {\n             if !data.has_global_allocator() {\n                 return"}, {"sha": "aaaff7e3b0a4a9eef42da430219e455ecdbebeeb", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -1,5 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n+#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(core_intrinsics)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "66ec84e83160fbf7bfa6814987c7cd0620a2a4fb", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -173,11 +173,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex, Local, MovePathIndex>>>,\n     Option<ClosureRegionRequirements<'tcx>>,\n ) {\n-    let mut all_facts = if AllFacts::enabled(infcx.tcx) {\n-        Some(AllFacts::default())\n-    } else {\n-        None\n-    };\n+    let mut all_facts = AllFacts::enabled(infcx.tcx).to_option(AllFacts::default());\n \n     let universal_regions = Rc::new(universal_regions);\n "}, {"sha": "2f99494308a144622c366a4ee6dc2d37c08d83e1", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -493,7 +493,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // functions below, which will trigger them to report errors\n         // eagerly.\n         let mut outlives_requirements =\n-            if infcx.tcx.is_closure(mir_def_id) { Some(vec![]) } else { None };\n+            infcx.tcx.is_closure(mir_def_id).to_option_with(|| vec![]);\n \n         self.check_type_tests(\n             infcx,\n@@ -709,14 +709,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let min = |r1: ty::RegionVid, r2: ty::RegionVid| -> Option<ty::RegionVid> {\n             let r1_outlives_r2 = self.universal_region_relations.outlives(r1, r2);\n             let r2_outlives_r1 = self.universal_region_relations.outlives(r2, r1);\n-            if r1_outlives_r2 && r2_outlives_r1 {\n-                Some(r1.min(r2))\n-            } else if r1_outlives_r2 {\n-                Some(r2)\n-            } else if r2_outlives_r1 {\n-                Some(r1)\n-            } else {\n-                None\n+            match (r1_outlives_r2, r2_outlives_r1) {\n+                (true, true) => Some(r1.min(r2)),\n+                (true, false) => Some(r2),\n+                (false, true) => Some(r1),\n+                (false, false) => None,\n             }\n         };\n         let mut min_choice = choice_regions[0];"}, {"sha": "e320811ca0556e10ef1519c9997c23b32c238f5d", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -680,7 +680,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     }\n                 })();\n \n-                if no_overlap == Some(true) {\n+                if let Some(true) = no_overlap {\n                     // Testing range does not overlap with pattern range,\n                     // so the pattern can be matched only if this test fails.\n                     Some(1)\n@@ -690,7 +690,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n \n             (&TestKind::Range(range), &PatKind::Constant { value }) => {\n-                if self.const_range_contains(range, value) == Some(false) {\n+                if let Some(false) = self.const_range_contains(range, value) {\n                     // `value` is not contained in the testing range,\n                     // so `value` can be matched only if this test fails.\n                     Some(1)"}, {"sha": "68cd16490d65a602399e5dfdb2c2686338cecc8f", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -1154,13 +1154,7 @@ pub fn compare_const_vals<'tcx>(\n ) -> Option<Ordering> {\n     trace!(\"compare_const_vals: {:?}, {:?}\", a, b);\n \n-    let from_bool = |v: bool| {\n-        if v {\n-            Some(Ordering::Equal)\n-        } else {\n-            None\n-        }\n-    };\n+    let from_bool = |v: bool| v.to_option(Ordering::Equal);\n \n     let fallback = || from_bool(a == b);\n "}, {"sha": "9cb5a8295e0a3889c2d9789524632ef9de6fb1a0", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -324,7 +324,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         size: Size,\n         align: Align,\n     ) -> InterpResult<'tcx, Option<Pointer<M::PointerTag>>> {\n-        let align = if M::CHECK_ALIGN { Some(align) } else { None };\n+        let align = M::CHECK_ALIGN.to_option(align);\n         self.check_ptr_access_align(sptr, size, align, CheckInAllocMsg::MemoryAccessTest)\n     }\n "}, {"sha": "d285808a97570c61bcc71e8e6d2e23ea339aacd3", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -157,9 +157,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             BinaryOp(bin_op, ref left, ref right) => {\n-                let layout = if binop_left_homogeneous(bin_op) { Some(dest.layout) } else { None };\n+                let layout = binop_left_homogeneous(bin_op).to_option(dest.layout);\n                 let left = self.read_immediate(self.eval_operand(left, layout)?)?;\n-                let layout = if binop_right_homogeneous(bin_op) { Some(left.layout) } else { None };\n+                let layout = binop_right_homogeneous(bin_op).to_option(left.layout);\n                 let right = self.read_immediate(self.eval_operand(right, layout)?)?;\n                 self.binop_ignore_overflow(\n                     bin_op,\n@@ -172,7 +172,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             CheckedBinaryOp(bin_op, ref left, ref right) => {\n                 // Due to the extra boolean in the result, we can never reuse the `dest.layout`.\n                 let left = self.read_immediate(self.eval_operand(left, None)?)?;\n-                let layout = if binop_right_homogeneous(bin_op) { Some(left.layout) } else { None };\n+                let layout = binop_right_homogeneous(bin_op).to_option(left.layout);\n                 let right = self.read_immediate(self.eval_operand(right, layout)?)?;\n                 self.binop_with_overflow(\n                     bin_op,"}, {"sha": "df0f4e9a9c52da1e1001892b360f0d778c41f24c", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -8,6 +8,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(in_band_lifetimes)]\n #![feature(inner_deref)]\n #![feature(slice_patterns)]\n+#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "6f2e501fc0eade69e60883a30e1e669323a2235e", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -761,11 +761,7 @@ fn compute_codegen_unit_name(\n             .iter()\n             .map(|part| part.data.as_symbol());\n \n-        let volatile_suffix = if volatile {\n-            Some(\"volatile\")\n-        } else {\n-            None\n-        };\n+        let volatile_suffix = volatile.to_option(\"volatile\");\n \n         name_builder.build_cgu_name(def_path.krate, components, volatile_suffix)\n     }).clone()"}, {"sha": "c4d6ada05dccf6ea28f7410725aa23fef70f3f6c", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -658,7 +658,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n     let mut unsafe_blocks: Vec<_> = unsafe_blocks.into_iter().collect();\n     unsafe_blocks.sort_by_cached_key(|(hir_id, _)| tcx.hir().hir_to_node_id(*hir_id));\n     let used_unsafe: FxHashSet<_> = unsafe_blocks.iter()\n-        .flat_map(|&&(id, used)| if used { Some(id) } else { None })\n+        .flat_map(|&&(id, used)| used.to_option(id))\n         .collect();\n     for &(block_id, is_used) in unsafe_blocks {\n         if !is_used {"}, {"sha": "bba901a18efe37f46fc05b213cf9d168802a3f0f", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -75,7 +75,7 @@ macro_rules! configure {\n impl<'a> StripUnconfigured<'a> {\n     pub fn configure<T: HasAttrs>(&mut self, mut node: T) -> Option<T> {\n         self.process_cfg_attrs(&mut node);\n-        if self.in_cfg(node.attrs()) { Some(node) } else { None }\n+        self.in_cfg(node.attrs()).to_option(node)\n     }\n \n     /// Parse and expand all `cfg_attr` attributes into a list of attributes"}, {"sha": "afc43bbb0dabaeda69b8b525999f795fab99a4e3", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -422,11 +422,7 @@ impl<'a> Resolver<'a> {\n                 Scope::MacroUsePrelude => {\n                     suggestions.extend(this.macro_use_prelude.iter().filter_map(|(name, binding)| {\n                         let res = binding.res();\n-                        if filter_fn(res) {\n-                            Some(TypoSuggestion::from_res(*name, res))\n-                        } else {\n-                            None\n-                        }\n+                        filter_fn(res).to_option(TypoSuggestion::from_res(*name, res))\n                     }));\n                 }\n                 Scope::BuiltinAttrs => {\n@@ -440,11 +436,7 @@ impl<'a> Resolver<'a> {\n                 Scope::ExternPrelude => {\n                     suggestions.extend(this.extern_prelude.iter().filter_map(|(ident, _)| {\n                         let res = Res::Def(DefKind::Mod, DefId::local(CRATE_DEF_INDEX));\n-                        if filter_fn(res) {\n-                            Some(TypoSuggestion::from_res(ident.name, res))\n-                        } else {\n-                            None\n-                        }\n+                        filter_fn(res).to_option(TypoSuggestion::from_res(ident.name, res))\n                     }));\n                 }\n                 Scope::ToolPrelude => {\n@@ -467,11 +459,7 @@ impl<'a> Resolver<'a> {\n                     suggestions.extend(\n                         primitive_types.iter().flat_map(|(name, prim_ty)| {\n                             let res = Res::PrimTy(*prim_ty);\n-                            if filter_fn(res) {\n-                                Some(TypoSuggestion::from_res(*name, res))\n-                            } else {\n-                                None\n-                            }\n+                            filter_fn(res).to_option(TypoSuggestion::from_res(*name, res))\n                         })\n                     )\n                 }"}, {"sha": "bd68e3b881644bab3540ae82aab3e4d138233007", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -496,11 +496,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n                 GenericParamKind::Lifetime { .. } => None,\n                 GenericParamKind::Type { ref default, .. } => {\n                     found_default |= default.is_some();\n-                    if found_default {\n-                        Some((Ident::with_dummy_span(param.ident.name), Res::Err))\n-                    } else {\n-                        None\n-                    }\n+                    found_default.to_option((Ident::with_dummy_span(param.ident.name), Res::Err))\n                 }\n             }));\n "}, {"sha": "31f59e47d0aceebbf67e954aa54e6f6c44c57436", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -9,6 +9,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n+#![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n #![feature(nll)]"}, {"sha": "5f992710bec57ff2452e07a77f1445206cac0abc", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -752,11 +752,7 @@ impl Session {\n     }\n \n     pub fn incr_comp_session_dir_opt(&self) -> Option<cell::Ref<'_, PathBuf>> {\n-        if self.opts.incremental.is_some() {\n-            Some(self.incr_comp_session_dir())\n-        } else {\n-            None\n-        }\n+        self.opts.incremental.is_some().to_option(self.incr_comp_session_dir())\n     }\n \n     pub fn print_perf_stats(&self) {\n@@ -1079,8 +1075,9 @@ fn build_session_(\n                     None\n                 }\n             }\n-        }\n-        else { None };\n+        } else {\n+            None\n+        };\n \n     let host_triple = TargetTriple::from_triple(config::host_triple());\n     let host = Target::search(&host_triple).unwrap_or_else(|e|"}, {"sha": "524aea0577304b16e66c3036abefaa8ceea38d1e", "filename": "src/librustc_target/abi/call/aarch64.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_target%2Fabi%2Fcall%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_target%2Fabi%2Fcall%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Faarch64.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -20,14 +20,7 @@ fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n             RegKind::Vector => size.bits() == 64 || size.bits() == 128\n         };\n \n-        if valid_unit {\n-            Some(Uniform {\n-                unit,\n-                total: size\n-            })\n-        } else {\n-            None\n-        }\n+        valid_unit.to_option(Uniform { unit, total: size })\n     })\n }\n "}, {"sha": "e18fe2973c8e64e689ca17d0f114321a30102c0f", "filename": "src/librustc_target/abi/call/arm.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -21,14 +21,7 @@ fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n             RegKind::Vector => size.bits() == 64 || size.bits() == 128\n         };\n \n-        if valid_unit {\n-            Some(Uniform {\n-                unit,\n-                total: size\n-            })\n-        } else {\n-            None\n-        }\n+        valid_unit.to_option(Uniform { unit, total: size })\n     })\n }\n "}, {"sha": "16c53fb55034286ef1533ec5ee587c4abba892a4", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -416,11 +416,7 @@ impl<'a, Ty> ArgAbi<'a, Ty> {\n         // i686-pc-windows-msvc, it results in wrong stack offsets.\n         // attrs.pointee_align = Some(self.layout.align.abi);\n \n-        let extra_attrs = if self.layout.is_unsized() {\n-            Some(ArgAttributes::new())\n-        } else {\n-            None\n-        };\n+        let extra_attrs = self.layout.is_unsized().to_option(ArgAttributes::new());\n \n         self.mode = PassMode::Indirect(attrs, extra_attrs);\n     }"}, {"sha": "82c9dc323ceafbef50df090da975a786ffcaef4d", "filename": "src/librustc_target/abi/call/powerpc64.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -32,14 +32,7 @@ fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>, abi: AB\n             RegKind::Vector => arg.layout.size.bits() == 128\n         };\n \n-        if valid_unit {\n-            Some(Uniform {\n-                unit,\n-                total: arg.layout.size\n-            })\n-        } else {\n-            None\n-        }\n+        valid_unit.to_option(Uniform { unit, total: arg.layout.size })\n     })\n }\n "}, {"sha": "97f035be8e5ec1cc5da4054fb54f573367b83136", "filename": "src/librustc_target/abi/call/sparc64.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -20,14 +20,7 @@ fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n             RegKind::Vector => arg.layout.size.bits() == 128\n         };\n \n-        if valid_unit {\n-            Some(Uniform {\n-                unit,\n-                total: arg.layout.size\n-            })\n-        } else {\n-            None\n-        }\n+        valid_unit.to_option(Uniform { unit, total: arg.layout.size })\n     })\n }\n "}, {"sha": "6a1498e98e816017eed9f21bb5ceea802c48556d", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -10,6 +10,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(box_syntax)]\n+#![feature(bool_to_option)]\n #![feature(nll)]\n #![feature(slice_patterns)]\n "}, {"sha": "cb23a3f1499e4e6c387519ad880830d01c1fe559", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -1105,11 +1105,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             r.map(|mut pick| {\n                 pick.autoderefs = step.autoderefs;\n                 pick.autoref = Some(mutbl);\n-                pick.unsize = if step.unsize {\n-                    Some(self_ty)\n-                } else {\n-                    None\n-                };\n+                pick.unsize = step.unsize.to_option(self_ty);\n                 pick\n             })\n         })"}, {"sha": "fa5546d29c4885d569526cb6c834b86c268cca29", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -114,11 +114,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         let infer_kind = if let UpvarSubsts::Closure(closure_substs) = substs {\n-            if self.closure_kind(closure_def_id, closure_substs).is_none() {\n-                Some(closure_substs)\n-            } else {\n-                None\n-            }\n+            self.closure_kind(closure_def_id, closure_substs).is_none().to_option(closure_substs)\n         } else {\n             None\n         };"}, {"sha": "6a6294b6f87982635f2da36ffc706cab3443e0d8", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -59,6 +59,7 @@ This API is completely unstable and subject to change.\n \n #![allow(non_camel_case_types)]\n \n+#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "36173801eae3d31dc760fcc5f869185ef0c2b938", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -7,6 +7,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        test(attr(deny(warnings))))]\n \n+#![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(const_fn)]\n #![feature(const_transmute)]"}, {"sha": "b0e13a508eec41a37a0f8c0dbf6e9e5e612fcb0f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -317,7 +317,7 @@ pub fn token_to_string(token: &Token) -> String {\n }\n \n fn token_to_string_ext(token: &Token, convert_dollar_crate: bool) -> String {\n-    let convert_dollar_crate = if convert_dollar_crate { Some(token.span) } else { None };\n+    let convert_dollar_crate = convert_dollar_crate.to_option(token.span);\n     token_kind_to_string_ext(&token.kind, convert_dollar_crate)\n }\n "}, {"sha": "efb3c2396c32d54b5deead0a04bc0a3b851c7edb", "filename": "src/libsyntax/util/lev_distance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibsyntax%2Futil%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibsyntax%2Futil%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Flev_distance.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -77,6 +77,6 @@ pub fn find_best_match_for_name<'a, T>(iter_names: T,\n     if let Some(candidate) = case_insensitive_match {\n         Some(candidate) // exact case insensitive match has a higher priority\n     } else {\n-        if let Some((candidate, _)) = levenstein_match { Some(candidate) } else { None }\n+        levenstein_match.map(|(candidate, _)| candidate)\n     }\n }"}, {"sha": "f6e8b0865326711edadc22736c522002e08af929", "filename": "src/libsyntax_ext/format_foreign.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibsyntax_ext%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibsyntax_ext%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -95,12 +95,12 @@ pub mod printf {\n             };\n \n             // Has a special form in Rust for numbers.\n-            let fill = if c_zero { Some(\"0\") } else { None };\n+            let fill = c_zero.to_option(\"0\");\n \n-            let align = if c_left { Some(\"<\") } else { None };\n+            let align = c_left.to_option(\"<\");\n \n             // Rust doesn't have an equivalent to the `' '` flag.\n-            let sign = if c_plus { Some(\"+\") } else { None };\n+            let sign = c_plus.to_option(\"+\");\n \n             // Not *quite* the same, depending on the type...\n             let alt = c_alt;"}, {"sha": "55c7f3fa5749ae10988e3d9acced10f2856f427f", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -3,6 +3,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n+#![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(nll)]"}, {"sha": "9ff9e382c880c5862c2839e48edd535721cfc7db", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8ea4e18a50da60036d2731768a9cb78c90f5a/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=e3a8ea4e18a50da60036d2731768a9cb78c90f5a", "patch": "@@ -24,6 +24,7 @@\n #![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc))]\n #![feature(rustc_private)]\n #![feature(nll)]\n+#![feature(bool_to_option)]\n #![feature(set_stdio)]\n #![feature(panic_unwind)]\n #![feature(staged_api)]\n@@ -562,11 +563,7 @@ fn run_test_in_process(\n         None\n     };\n \n-    let start = if report_time {\n-        Some(Instant::now())\n-    } else {\n-        None\n-    };\n+    let start = report_time.to_option(Instant::now());\n     let result = catch_unwind(AssertUnwindSafe(testfn));\n     let exec_time = start.map(|start| {\n         let duration = start.elapsed();\n@@ -597,11 +594,7 @@ fn spawn_test_subprocess(\n         let args = env::args().collect::<Vec<_>>();\n         let current_exe = &args[0];\n \n-        let start = if report_time {\n-            Some(Instant::now())\n-        } else {\n-            None\n-        };\n+        let start = report_time.to_option(Instant::now());\n         let output = match Command::new(current_exe)\n             .env(SECONDARY_TEST_INVOKER_VAR, desc.name.as_slice())\n             .output() {"}]}