{"sha": "28ca37175572403edeb92324d251fbceb4c2487f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4Y2EzNzE3NTU3MjQwM2VkZWI5MjMyNGQyNTFmYmNlYjRjMjQ4N2Y=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-25T14:08:18Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-25T14:16:29Z"}, "message": "Consider trait to be in scope for trait-impl", "tree": {"sha": "047556acaa4ff4044d2900902810a3555c6eb2c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/047556acaa4ff4044d2900902810a3555c6eb2c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ca37175572403edeb92324d251fbceb4c2487f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ca37175572403edeb92324d251fbceb4c2487f", "html_url": "https://github.com/rust-lang/rust/commit/28ca37175572403edeb92324d251fbceb4c2487f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ca37175572403edeb92324d251fbceb4c2487f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35db5e99f6f982f4257e88d13cbecca250b05efe", "url": "https://api.github.com/repos/rust-lang/rust/commits/35db5e99f6f982f4257e88d13cbecca250b05efe", "html_url": "https://github.com/rust-lang/rust/commit/35db5e99f6f982f4257e88d13cbecca250b05efe"}], "stats": {"total": 70, "additions": 57, "deletions": 13}, "files": [{"sha": "fb8a6f260631e0f56748ab3e10a171912a507d9c", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/28ca37175572403edeb92324d251fbceb4c2487f/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ca37175572403edeb92324d251fbceb4c2487f/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=28ca37175572403edeb92324d251fbceb4c2487f", "patch": "@@ -337,22 +337,34 @@ impl Resolver {\n     pub fn traits_in_scope(&self, db: &dyn DefDatabase) -> FxHashSet<TraitId> {\n         let mut traits = FxHashSet::default();\n         for scope in &self.scopes {\n-            if let Scope::ModuleScope(m) = scope {\n-                if let Some(prelude) = m.def_map.prelude() {\n-                    let prelude_def_map = prelude.def_map(db);\n-                    traits.extend(prelude_def_map[prelude.local_id].scope.traits());\n-                }\n-                traits.extend(m.def_map[m.module_id].scope.traits());\n-\n-                // Add all traits that are in scope because of the containing DefMaps\n-                m.def_map.with_ancestor_maps(db, m.module_id, &mut |def_map, module| {\n-                    if let Some(prelude) = def_map.prelude() {\n+            match scope {\n+                Scope::ModuleScope(m) => {\n+                    if let Some(prelude) = m.def_map.prelude() {\n                         let prelude_def_map = prelude.def_map(db);\n                         traits.extend(prelude_def_map[prelude.local_id].scope.traits());\n                     }\n-                    traits.extend(def_map[module].scope.traits());\n-                    None::<()>\n-                });\n+                    traits.extend(m.def_map[m.module_id].scope.traits());\n+\n+                    // Add all traits that are in scope because of the containing DefMaps\n+                    m.def_map.with_ancestor_maps(db, m.module_id, &mut |def_map, module| {\n+                        if let Some(prelude) = def_map.prelude() {\n+                            let prelude_def_map = prelude.def_map(db);\n+                            traits.extend(prelude_def_map[prelude.local_id].scope.traits());\n+                        }\n+                        traits.extend(def_map[module].scope.traits());\n+                        None::<()>\n+                    });\n+                }\n+                &Scope::ImplDefScope(impl_) => {\n+                    if let Some(target_trait) = &db.impl_data(impl_).target_trait {\n+                        if let Some(TypeNs::TraitId(trait_)) =\n+                            self.resolve_path_in_type_ns_fully(db, target_trait.path.mod_path())\n+                        {\n+                            traits.insert(trait_);\n+                        }\n+                    }\n+                }\n+                _ => (),\n             }\n         }\n         traits"}, {"sha": "164e850504481186ed18567b126ad3fee3abae6f", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ca37175572403edeb92324d251fbceb4c2487f/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ca37175572403edeb92324d251fbceb4c2487f/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=28ca37175572403edeb92324d251fbceb4c2487f", "patch": "@@ -578,10 +578,12 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn resolve_ops_try_ok(&self) -> Option<TypeAliasId> {\n+        // FIXME resolve via lang_item once try v2 is stable\n         let path = path![core::ops::Try];\n         let trait_ = self.resolver.resolve_known_trait(self.db.upcast(), &path)?;\n         let trait_data = self.db.trait_data(trait_);\n         trait_data\n+            // FIXME remove once try v2 is stable\n             .associated_type_by_name(&name![Ok])\n             .or_else(|| trait_data.associated_type_by_name(&name![Output]))\n     }"}, {"sha": "6ad96bfe383ae60b119157c342433d00714f4ded", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/28ca37175572403edeb92324d251fbceb4c2487f/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ca37175572403edeb92324d251fbceb4c2487f/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=28ca37175572403edeb92324d251fbceb4c2487f", "patch": "@@ -3630,3 +3630,33 @@ fn test<F: FnOnce()>(f: F) {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn trait_in_scope_of_trait_impl() {\n+    check_infer(\n+        r#\"\n+mod foo {\n+    pub trait Foo {\n+        fn foo(self);\n+        fn bar(self) -> usize { 0 }\n+    }\n+}\n+impl foo::Foo for u32 {\n+    fn foo(self) {\n+        let _x = self.bar();\n+    }\n+}\n+    \"#,\n+        expect![[r#\"\n+            45..49 'self': Self\n+            67..71 'self': Self\n+            82..87 '{ 0 }': usize\n+            84..85 '0': usize\n+            131..135 'self': u32\n+            137..173 '{     ...     }': ()\n+            151..153 '_x': usize\n+            156..160 'self': u32\n+            156..166 'self.bar()': usize\n+        \"#]],\n+    );\n+}"}]}