{"sha": "998e1a91db6a326c87c271e0fb9352d32e23ed0e", "node_id": "C_kwDOAAsO6NoAKDk5OGUxYTkxZGI2YTMyNmM4N2MyNzFlMGZiOTM1MmQzMmUyM2VkMGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-17T00:41:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-17T00:41:15Z"}, "message": "Auto merge of #105804 - matthiaskrgr:rollup-iaqlbl3, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #105493 (Help rust-analyzer normalize query return types)\n - #105710 (Don't bug if we're trying to cast `dyn*` to another type)\n - #105711 (bail in `collect_trait_impl_trait_tys` if signatures reference errors)\n - #105768 (Detect inherent associated types not having CamelCase)\n - #105780 (rustdoc: Don't add \"Read more\" link if there is no extra content)\n - #105802 (Make enum-match.rs test robust against variable name changes)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6a5cfb0897b0c35659cda1cf42015f0a3ab3efb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a5cfb0897b0c35659cda1cf42015f0a3ab3efb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/998e1a91db6a326c87c271e0fb9352d32e23ed0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/998e1a91db6a326c87c271e0fb9352d32e23ed0e", "html_url": "https://github.com/rust-lang/rust/commit/998e1a91db6a326c87c271e0fb9352d32e23ed0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/998e1a91db6a326c87c271e0fb9352d32e23ed0e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0", "html_url": "https://github.com/rust-lang/rust/commit/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0"}, {"sha": "803ce455a393baa32ece66738b74457e506f074e", "url": "https://api.github.com/repos/rust-lang/rust/commits/803ce455a393baa32ece66738b74457e506f074e", "html_url": "https://github.com/rust-lang/rust/commit/803ce455a393baa32ece66738b74457e506f074e"}], "stats": {"total": 284, "additions": 269, "deletions": 15}, "files": [{"sha": "b69728c24aa514ffd4b3604a2380ac3b318ca480", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998e1a91db6a326c87c271e0fb9352d32e23ed0e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998e1a91db6a326c87c271e0fb9352d32e23ed0e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=998e1a91db6a326c87c271e0fb9352d32e23ed0e", "patch": "@@ -405,6 +405,7 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n             tcx.fn_sig(impl_m.def_id),\n         ),\n     );\n+    impl_sig.error_reported()?;\n     let impl_return_ty = impl_sig.output();\n \n     // Normalize the trait signature with liberated bound vars, passing it through\n@@ -419,6 +420,7 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n         )\n         .fold_with(&mut collector);\n     let trait_sig = ocx.normalize(&norm_cause, param_env, unnormalized_trait_sig);\n+    trait_sig.error_reported()?;\n     let trait_return_ty = trait_sig.output();\n \n     let wf_tys = FxIndexSet::from_iter("}, {"sha": "042a50f2fd42eb89906167fde85ed9b0e4eb1622", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/998e1a91db6a326c87c271e0fb9352d32e23ed0e/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998e1a91db6a326c87c271e0fb9352d32e23ed0e/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=998e1a91db6a326c87c271e0fb9352d32e23ed0e", "patch": "@@ -847,13 +847,15 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n \n             (Int(_) | Float, Int(_) | Float) => Ok(CastKind::NumericCast),\n \n-            (_, DynStar) | (DynStar, _) => {\n+            (_, DynStar) => {\n                 if fcx.tcx.features().dyn_star {\n                     bug!(\"should be handled by `try_coerce`\")\n                 } else {\n                     Err(CastError::IllegalCast)\n                 }\n             }\n+\n+            (DynStar, _) => Err(CastError::IllegalCast),\n         }\n     }\n "}, {"sha": "91fcd6d690ee7a52c819546eccc065dca1baf64c", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/998e1a91db6a326c87c271e0fb9352d32e23ed0e/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998e1a91db6a326c87c271e0fb9352d32e23ed0e/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=998e1a91db6a326c87c271e0fb9352d32e23ed0e", "patch": "@@ -175,13 +175,23 @@ impl EarlyLintPass for NonCamelCaseTypes {\n             return;\n         }\n \n-        match it.kind {\n+        match &it.kind {\n             ast::ItemKind::TyAlias(..)\n             | ast::ItemKind::Enum(..)\n             | ast::ItemKind::Struct(..)\n             | ast::ItemKind::Union(..) => self.check_case(cx, \"type\", &it.ident),\n             ast::ItemKind::Trait(..) => self.check_case(cx, \"trait\", &it.ident),\n             ast::ItemKind::TraitAlias(..) => self.check_case(cx, \"trait alias\", &it.ident),\n+\n+            // N.B. This check is only for inherent associated types, so that we don't lint against\n+            // trait impls where we should have warned for the trait definition already.\n+            ast::ItemKind::Impl(box ast::Impl { of_trait: None, items, .. }) => {\n+                for it in items {\n+                    if let ast::AssocItemKind::Type(..) = it.kind {\n+                        self.check_case(cx, \"associated type\", &it.ident);\n+                    }\n+                }\n+            }\n             _ => (),\n         }\n     }"}, {"sha": "e4bb3ce3d5a99b32793e8f0a9f1467d5b47f76f7", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 105, "deletions": 1, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/998e1a91db6a326c87c271e0fb9352d32e23ed0e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998e1a91db6a326c87c271e0fb9352d32e23ed0e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=998e1a91db6a326c87c271e0fb9352d32e23ed0e", "patch": "@@ -15,7 +15,15 @@ use rustc_span::{Span, DUMMY_SP};\n /// The `Key` trait controls what types can legally be used as the key\n /// for a query.\n pub trait Key: Sized {\n-    type CacheSelector = DefaultCacheSelector<Self>;\n+    // N.B. Most of the keys down below have `type CacheSelector = DefaultCacheSelector<Self>;`,\n+    //      it would be reasonable to use associated type defaults, to remove the duplication...\n+    //\n+    //      ...But r-a doesn't support them yet and using a default here causes r-a to not infer\n+    //      return types of queries which is very annoying. Thus, until r-a support associated\n+    //      type defaults, plese restrain from using them here <3\n+    //\n+    //      r-a issue: <https://github.com/rust-lang/rust-analyzer/issues/13693>\n+    type CacheSelector;\n \n     /// Given an instance of this key, what crate is it referring to?\n     /// This is used to find the provider.\n@@ -37,6 +45,8 @@ pub trait Key: Sized {\n }\n \n impl Key for () {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -48,6 +58,8 @@ impl Key for () {\n }\n \n impl<'tcx> Key for ty::InstanceDef<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -59,6 +71,8 @@ impl<'tcx> Key for ty::InstanceDef<'tcx> {\n }\n \n impl<'tcx> Key for ty::Instance<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -70,6 +84,8 @@ impl<'tcx> Key for ty::Instance<'tcx> {\n }\n \n impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -81,6 +97,8 @@ impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n }\n \n impl<'tcx> Key for (Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -92,6 +110,8 @@ impl<'tcx> Key for (Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>) {\n }\n \n impl<'tcx> Key for mir::interpret::LitToConstInput<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -145,6 +165,8 @@ impl Key for LocalDefId {\n }\n \n impl Key for DefId {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.krate == LOCAL_CRATE\n@@ -159,6 +181,8 @@ impl Key for DefId {\n }\n \n impl Key for ty::WithOptConstParam<LocalDefId> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -169,6 +193,8 @@ impl Key for ty::WithOptConstParam<LocalDefId> {\n }\n \n impl Key for SimplifiedType {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -179,6 +205,8 @@ impl Key for SimplifiedType {\n }\n \n impl Key for (DefId, DefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -189,6 +217,8 @@ impl Key for (DefId, DefId) {\n }\n \n impl<'tcx> Key for (ty::Instance<'tcx>, LocalDefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -199,6 +229,8 @@ impl<'tcx> Key for (ty::Instance<'tcx>, LocalDefId) {\n }\n \n impl Key for (DefId, LocalDefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -209,6 +241,8 @@ impl Key for (DefId, LocalDefId) {\n }\n \n impl Key for (LocalDefId, DefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -219,6 +253,8 @@ impl Key for (LocalDefId, DefId) {\n }\n \n impl Key for (LocalDefId, LocalDefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -229,6 +265,8 @@ impl Key for (LocalDefId, LocalDefId) {\n }\n \n impl Key for (DefId, Option<Ident>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -243,6 +281,8 @@ impl Key for (DefId, Option<Ident>) {\n }\n \n impl Key for (DefId, LocalDefId, Ident) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -253,6 +293,8 @@ impl Key for (DefId, LocalDefId, Ident) {\n }\n \n impl Key for (CrateNum, DefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0 == LOCAL_CRATE\n@@ -263,6 +305,8 @@ impl Key for (CrateNum, DefId) {\n }\n \n impl Key for (CrateNum, SimplifiedType) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0 == LOCAL_CRATE\n@@ -273,6 +317,8 @@ impl Key for (CrateNum, SimplifiedType) {\n }\n \n impl Key for (DefId, SimplifiedType) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -283,6 +329,8 @@ impl Key for (DefId, SimplifiedType) {\n }\n \n impl<'tcx> Key for SubstsRef<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -293,6 +341,8 @@ impl<'tcx> Key for SubstsRef<'tcx> {\n }\n \n impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -303,6 +353,8 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n }\n \n impl<'tcx> Key for (ty::UnevaluatedConst<'tcx>, ty::UnevaluatedConst<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         (self.0).def.did.krate == LOCAL_CRATE\n@@ -313,6 +365,8 @@ impl<'tcx> Key for (ty::UnevaluatedConst<'tcx>, ty::UnevaluatedConst<'tcx>) {\n }\n \n impl<'tcx> Key for (LocalDefId, DefId, SubstsRef<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -323,6 +377,8 @@ impl<'tcx> Key for (LocalDefId, DefId, SubstsRef<'tcx>) {\n }\n \n impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.1.def_id().krate == LOCAL_CRATE\n@@ -333,6 +389,8 @@ impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n }\n \n impl<'tcx> Key for (ty::Const<'tcx>, mir::Field) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -343,6 +401,8 @@ impl<'tcx> Key for (ty::Const<'tcx>, mir::Field) {\n }\n \n impl<'tcx> Key for mir::interpret::ConstAlloc<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -353,6 +413,8 @@ impl<'tcx> Key for mir::interpret::ConstAlloc<'tcx> {\n }\n \n impl<'tcx> Key for ty::PolyTraitRef<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.def_id().krate == LOCAL_CRATE\n@@ -363,6 +425,8 @@ impl<'tcx> Key for ty::PolyTraitRef<'tcx> {\n }\n \n impl<'tcx> Key for ty::PolyExistentialTraitRef<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.def_id().krate == LOCAL_CRATE\n@@ -373,6 +437,8 @@ impl<'tcx> Key for ty::PolyExistentialTraitRef<'tcx> {\n }\n \n impl<'tcx> Key for (ty::PolyTraitRef<'tcx>, ty::PolyTraitRef<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.def_id().krate == LOCAL_CRATE\n@@ -383,6 +449,8 @@ impl<'tcx> Key for (ty::PolyTraitRef<'tcx>, ty::PolyTraitRef<'tcx>) {\n }\n \n impl<'tcx> Key for GenericArg<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -393,6 +461,8 @@ impl<'tcx> Key for GenericArg<'tcx> {\n }\n \n impl<'tcx> Key for mir::ConstantKind<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -403,6 +473,8 @@ impl<'tcx> Key for mir::ConstantKind<'tcx> {\n }\n \n impl<'tcx> Key for ty::Const<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -413,6 +485,8 @@ impl<'tcx> Key for ty::Const<'tcx> {\n }\n \n impl<'tcx> Key for Ty<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -429,6 +503,8 @@ impl<'tcx> Key for Ty<'tcx> {\n }\n \n impl<'tcx> Key for TyAndLayout<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -439,6 +515,8 @@ impl<'tcx> Key for TyAndLayout<'tcx> {\n }\n \n impl<'tcx> Key for (Ty<'tcx>, Ty<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -449,6 +527,8 @@ impl<'tcx> Key for (Ty<'tcx>, Ty<'tcx>) {\n }\n \n impl<'tcx> Key for &'tcx ty::List<ty::Predicate<'tcx>> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -459,6 +539,8 @@ impl<'tcx> Key for &'tcx ty::List<ty::Predicate<'tcx>> {\n }\n \n impl<'tcx> Key for ty::ParamEnv<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -469,6 +551,8 @@ impl<'tcx> Key for ty::ParamEnv<'tcx> {\n }\n \n impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.value.query_crate_is_local()\n@@ -479,6 +563,8 @@ impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n }\n \n impl Key for Symbol {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -489,6 +575,8 @@ impl Key for Symbol {\n }\n \n impl Key for Option<Symbol> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -501,6 +589,8 @@ impl Key for Option<Symbol> {\n /// Canonical query goals correspond to abstract trait operations that\n /// are not tied to any crate in particular.\n impl<'tcx, T> Key for Canonical<'tcx, T> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -512,6 +602,8 @@ impl<'tcx, T> Key for Canonical<'tcx, T> {\n }\n \n impl Key for (Symbol, u32, u32) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -523,6 +615,8 @@ impl Key for (Symbol, u32, u32) {\n }\n \n impl<'tcx> Key for (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -534,6 +628,8 @@ impl<'tcx> Key for (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>) {\n }\n \n impl<'tcx> Key for (ty::Predicate<'tcx>, traits::WellFormedLoc) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -545,6 +641,8 @@ impl<'tcx> Key for (ty::Predicate<'tcx>, traits::WellFormedLoc) {\n }\n \n impl<'tcx> Key for (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -556,6 +654,8 @@ impl<'tcx> Key for (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n }\n \n impl<'tcx> Key for (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -567,6 +667,8 @@ impl<'tcx> Key for (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n }\n \n impl<'tcx> Key for (Ty<'tcx>, ty::ValTree<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -578,6 +680,8 @@ impl<'tcx> Key for (Ty<'tcx>, ty::ValTree<'tcx>) {\n }\n \n impl Key for HirId {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true"}, {"sha": "aeaee524fd4532b820f130d04ccb7912ceb68411", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=998e1a91db6a326c87c271e0fb9352d32e23ed0e", "patch": "@@ -567,11 +567,12 @@ struct SummaryLine<'a, I: Iterator<Item = Event<'a>>> {\n     inner: I,\n     started: bool,\n     depth: u32,\n+    skipped_tags: u32,\n }\n \n impl<'a, I: Iterator<Item = Event<'a>>> SummaryLine<'a, I> {\n     fn new(iter: I) -> Self {\n-        SummaryLine { inner: iter, started: false, depth: 0 }\n+        SummaryLine { inner: iter, started: false, depth: 0, skipped_tags: 0 }\n     }\n }\n \n@@ -601,13 +602,15 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for SummaryLine<'a, I> {\n             let is_allowed_tag = match event {\n                 Event::Start(ref c) => {\n                     if is_forbidden_tag(c) {\n+                        self.skipped_tags += 1;\n                         return None;\n                     }\n                     self.depth += 1;\n                     check_if_allowed_tag(c)\n                 }\n                 Event::End(ref c) => {\n                     if is_forbidden_tag(c) {\n+                        self.skipped_tags += 1;\n                         return None;\n                     }\n                     self.depth -= 1;\n@@ -616,6 +619,9 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for SummaryLine<'a, I> {\n                 }\n                 _ => true,\n             };\n+            if !is_allowed_tag {\n+                self.skipped_tags += 1;\n+            }\n             return if !is_allowed_tag {\n                 if is_start {\n                     Some(Event::Start(Tag::Paragraph))\n@@ -1096,11 +1102,11 @@ impl MarkdownItemInfo<'_> {\n }\n \n impl MarkdownSummaryLine<'_> {\n-    pub(crate) fn into_string(self) -> String {\n+    pub(crate) fn into_string_with_has_more_content(self) -> (String, bool) {\n         let MarkdownSummaryLine(md, links) = self;\n         // This is actually common enough to special-case\n         if md.is_empty() {\n-            return String::new();\n+            return (String::new(), false);\n         }\n \n         let mut replacer = |broken_link: BrokenLink<'_>| {\n@@ -1110,17 +1116,26 @@ impl MarkdownSummaryLine<'_> {\n                 .map(|link| (link.href.as_str().into(), link.new_text.as_str().into()))\n         };\n \n-        let p = Parser::new_with_broken_link_callback(md, summary_opts(), Some(&mut replacer));\n+        let p = Parser::new_with_broken_link_callback(md, summary_opts(), Some(&mut replacer))\n+            .peekable();\n+        let mut summary = SummaryLine::new(p);\n \n         let mut s = String::new();\n \n-        let without_paragraphs = LinkReplacer::new(SummaryLine::new(p), links).filter(|event| {\n+        let without_paragraphs = LinkReplacer::new(&mut summary, links).filter(|event| {\n             !matches!(event, Event::Start(Tag::Paragraph) | Event::End(Tag::Paragraph))\n         });\n \n         html::push_html(&mut s, without_paragraphs);\n \n-        s\n+        let has_more_content =\n+            matches!(summary.inner.peek(), Some(Event::Start(_))) || summary.skipped_tags > 0;\n+\n+        (s, has_more_content)\n+    }\n+\n+    pub(crate) fn into_string(self) -> String {\n+        self.into_string_with_has_more_content().0\n     }\n }\n "}, {"sha": "146e5010e4e42827d7743a3ef2e73ae04d15f354", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=998e1a91db6a326c87c271e0fb9352d32e23ed0e", "patch": "@@ -467,9 +467,10 @@ fn document_short(\n         return;\n     }\n     if let Some(s) = item.doc_value() {\n-        let mut summary_html = MarkdownSummaryLine(&s, &item.links(cx)).into_string();\n+        let (mut summary_html, has_more_content) =\n+            MarkdownSummaryLine(&s, &item.links(cx)).into_string_with_has_more_content();\n \n-        if s.contains('\\n') {\n+        if has_more_content {\n             let link = format!(r#\" <a{}>Read more</a>\"#, assoc_href_attr(item, link, cx));\n \n             if let Some(idx) = summary_html.rfind(\"</p>\") {"}, {"sha": "827eb20154afd0195cc1da957b67aa483444f56b", "filename": "src/test/codegen/enum-match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Fcodegen%2Fenum-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Fcodegen%2Fenum-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-match.rs?ref=998e1a91db6a326c87c271e0fb9352d32e23ed0e", "patch": "@@ -34,8 +34,8 @@ pub enum Enum1 {\n \n // CHECK: define i8 @match1{{.*}}\n // CHECK-NEXT: start:\n-// CHECK-NEXT: %1 = {{.*}}call i8 @llvm.usub.sat.i8(i8 %0, i8 1)\n-// CHECK-NEXT: switch i8 %1, label {{.*}} [\n+// CHECK-NEXT: [[DISCR:%.*]] = {{.*}}call i8 @llvm.usub.sat.i8(i8 %0, i8 1)\n+// CHECK-NEXT: switch i8 [[DISCR]], label {{.*}} [\n #[no_mangle]\n pub fn match1(e: Enum1) -> u8 {\n     use Enum1::*;"}, {"sha": "0303e44426141d4dd392299f190619f39469b7fb", "filename": "src/test/rustdoc/read-more-unneeded.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Frustdoc%2Fread-more-unneeded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Frustdoc%2Fread-more-unneeded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fread-more-unneeded.rs?ref=998e1a91db6a326c87c271e0fb9352d32e23ed0e", "patch": "@@ -0,0 +1,34 @@\n+// Regression test for https://github.com/rust-lang/rust/issues/105677.\n+// This test ensures that the \"Read more\" link is only generated when\n+// there is actually more documentation to read after the short summary.\n+\n+#![crate_name = \"foo\"]\n+\n+pub trait MyFrom {\n+    /// # Hello\n+    /// ## Yolo\n+    /// more!\n+    fn try_from1();\n+    /// a\n+    /// b\n+    /// c\n+    fn try_from2();\n+    /// a\n+    ///\n+    /// b\n+    ///\n+    /// c\n+    fn try_from3();\n+}\n+\n+pub struct NonZero;\n+\n+// @has 'foo/struct.NonZero.html'\n+impl MyFrom for NonZero {\n+    // @matches - '//*[@class=\"docblock\"]' '^Hello Read more$'\n+    fn try_from1() {}\n+    // @matches - '//*[@class=\"docblock\"]' '^a\\sb\\sc$'\n+    fn try_from2() {}\n+    // @matches - '//*[@class=\"docblock\"]' '^a Read more$'\n+    fn try_from3() {}\n+}"}, {"sha": "9cf3226f738c804da6357ecf5e058eee0e568280", "filename": "src/test/rustdoc/trait-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl.rs?ref=998e1a91db6a326c87c271e0fb9352d32e23ed0e", "patch": "@@ -30,8 +30,6 @@ impl Trait for Struct {\n     // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]' 'These docs contain'\n     // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/a' 'reference link'\n     // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/a/@href' 'https://example.com'\n-    // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/a' 'Read more'\n-    // @has - '//*[@id=\"method.b\"]/../../div[@class=\"docblock\"]/a/@href' 'trait.Trait.html#tymethod.b'\n     fn b() {}\n \n     // @!has - '//*[@id=\"method.c\"]/../../div[@class=\"docblock\"]' 'code block'"}, {"sha": "8775bd19e1f98c3dbefdd338c05ab69570c2d6ac", "filename": "src/test/ui/associated-inherent-types/style.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fstyle.rs?ref=998e1a91db6a326c87c271e0fb9352d32e23ed0e", "patch": "@@ -0,0 +1,12 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features, dead_code)]\n+#![deny(non_camel_case_types)]\n+\n+struct S;\n+\n+impl S {\n+    type typ = ();\n+    //~^ ERROR associated type `typ` should have an upper camel case name\n+}\n+\n+fn main() {}"}, {"sha": "f83061f8c42163ec23d8bfc4e11fed3a1ba47fc4", "filename": "src/test/ui/associated-inherent-types/style.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fstyle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fstyle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fstyle.stderr?ref=998e1a91db6a326c87c271e0fb9352d32e23ed0e", "patch": "@@ -0,0 +1,14 @@\n+error: associated type `typ` should have an upper camel case name\n+  --> $DIR/style.rs:8:10\n+   |\n+LL |     type typ = ();\n+   |          ^^^ help: convert the identifier to upper camel case: `Typ`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/style.rs:3:9\n+   |\n+LL | #![deny(non_camel_case_types)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b86f1d1c13585cd9407bbf5efafadfb0d04f7a35", "filename": "src/test/ui/async-await/in-trait/bad-signatures.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs?ref=998e1a91db6a326c87c271e0fb9352d32e23ed0e", "patch": "@@ -0,0 +1,16 @@\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+//~^ WARN the feature `async_fn_in_trait` is incomplete\n+\n+trait MyTrait {\n+    async fn bar(&abc self);\n+    //~^ ERROR expected identifier, found keyword `self`\n+    //~| ERROR expected one of `:`, `@`, or `|`, found keyword `self`\n+}\n+\n+impl MyTrait for () {\n+    async fn bar(&self) {}\n+}\n+\n+fn main() {}"}, {"sha": "e0ba7b53ec415dbacbcef94fa4baa9556be90462", "filename": "src/test/ui/async-await/in-trait/bad-signatures.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.stderr?ref=998e1a91db6a326c87c271e0fb9352d32e23ed0e", "patch": "@@ -0,0 +1,26 @@\n+error: expected identifier, found keyword `self`\n+  --> $DIR/bad-signatures.rs:7:23\n+   |\n+LL |     async fn bar(&abc self);\n+   |                       ^^^^ expected identifier, found keyword\n+\n+error: expected one of `:`, `@`, or `|`, found keyword `self`\n+  --> $DIR/bad-signatures.rs:7:23\n+   |\n+LL |     async fn bar(&abc self);\n+   |                  -----^^^^\n+   |                  |    |\n+   |                  |    expected one of `:`, `@`, or `|`\n+   |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bad-signatures.rs:3:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+"}, {"sha": "e80ee15902eefc235be734bdcd21edfde534aab2", "filename": "src/test/ui/dyn-star/dyn-to-rigid.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Fui%2Fdyn-star%2Fdyn-to-rigid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Fui%2Fdyn-star%2Fdyn-to-rigid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdyn-to-rigid.rs?ref=998e1a91db6a326c87c271e0fb9352d32e23ed0e", "patch": "@@ -0,0 +1,11 @@\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+trait Tr {}\n+\n+fn f(x: dyn* Tr) -> usize {\n+    x as usize\n+    //~^ ERROR casting `(dyn* Tr + 'static)` as `usize` is invalid\n+}\n+\n+fn main() {}"}, {"sha": "588e6d97e5ca39c30494b36da8090b855ca69e7b", "filename": "src/test/ui/dyn-star/dyn-to-rigid.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Fui%2Fdyn-star%2Fdyn-to-rigid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998e1a91db6a326c87c271e0fb9352d32e23ed0e/src%2Ftest%2Fui%2Fdyn-star%2Fdyn-to-rigid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdyn-to-rigid.stderr?ref=998e1a91db6a326c87c271e0fb9352d32e23ed0e", "patch": "@@ -0,0 +1,9 @@\n+error[E0606]: casting `(dyn* Tr + 'static)` as `usize` is invalid\n+  --> $DIR/dyn-to-rigid.rs:7:5\n+   |\n+LL |     x as usize\n+   |     ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0606`."}]}