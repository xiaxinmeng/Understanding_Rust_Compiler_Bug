{"sha": "b27c7095606ad9386a7038d7af03abd7f948f02f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyN2M3MDk1NjA2YWQ5Mzg2YTcwMzhkN2FmMDNhYmQ3Zjk0OGYwMmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-11T20:12:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-11T20:12:26Z"}, "message": "Auto merge of #38313 - jseyfried:self_imports, r=nrc\n\nresolve: clean up the semantics of `self` in an import list\n\nChange `self` in an import list `use foo::bar::{self, ...};` to import `bar` only in the type namespace. Today, `bar` is imported in every namespace in which `foo::bar` is defined.\n\nThis is a [breaking-change], see https://github.com/rust-lang/rust/issues/38293#issue-194817974 for examples of code that would break.\n\nFixes #38293.\nr? @nrc", "tree": {"sha": "1eecb27b7a34eb81167a955d5d2a777e007d5188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eecb27b7a34eb81167a955d5d2a777e007d5188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b27c7095606ad9386a7038d7af03abd7f948f02f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b27c7095606ad9386a7038d7af03abd7f948f02f", "html_url": "https://github.com/rust-lang/rust/commit/b27c7095606ad9386a7038d7af03abd7f948f02f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b27c7095606ad9386a7038d7af03abd7f948f02f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "513d942a7ef853edf46fc3a5965e3baed42675ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/513d942a7ef853edf46fc3a5965e3baed42675ca", "html_url": "https://github.com/rust-lang/rust/commit/513d942a7ef853edf46fc3a5965e3baed42675ca"}, {"sha": "d86e487b0b1025c5e8b9b69b318af9ac76dcf693", "url": "https://api.github.com/repos/rust-lang/rust/commits/d86e487b0b1025c5e8b9b69b318af9ac76dcf693", "html_url": "https://github.com/rust-lang/rust/commit/d86e487b0b1025c5e8b9b69b318af9ac76dcf693"}], "stats": {"total": 91, "additions": 78, "deletions": 13}, "files": [{"sha": "5be21bc62c56cefbacdecbf2320947f0b3559695", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b27c7095606ad9386a7038d7af03abd7f948f02f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27c7095606ad9386a7038d7af03abd7f948f02f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=b27c7095606ad9386a7038d7af03abd7f948f02f", "patch": "@@ -168,6 +168,7 @@ impl<'a> Resolver<'a> {\n                             target: binding,\n                             source: source,\n                             result: self.per_ns(|_, _| Cell::new(Err(Undetermined))),\n+                            type_ns_only: false,\n                         };\n                         self.add_import_directive(\n                             module_path, subclass, view_path.span, item.id, vis, expansion,\n@@ -195,10 +196,10 @@ impl<'a> Resolver<'a> {\n \n                         for source_item in source_items {\n                             let node = source_item.node;\n-                            let (module_path, ident, rename) = {\n+                            let (module_path, ident, rename, type_ns_only) = {\n                                 if node.name.name != keywords::SelfValue.name() {\n                                     let rename = node.rename.unwrap_or(node.name);\n-                                    (module_path.clone(), node.name, rename)\n+                                    (module_path.clone(), node.name, rename, false)\n                                 } else {\n                                     let ident = *module_path.last().unwrap();\n                                     if ident.name == keywords::CrateRoot.name() {\n@@ -212,13 +213,14 @@ impl<'a> Resolver<'a> {\n                                     }\n                                     let module_path = module_path.split_last().unwrap().1;\n                                     let rename = node.rename.unwrap_or(ident);\n-                                    (module_path.to_vec(), ident, rename)\n+                                    (module_path.to_vec(), ident, rename, true)\n                                 }\n                             };\n                             let subclass = SingleImport {\n                                 target: rename,\n                                 source: ident,\n                                 result: self.per_ns(|_, _| Cell::new(Err(Undetermined))),\n+                                type_ns_only: type_ns_only,\n                             };\n                             let id = source_item.node.id;\n                             self.add_import_directive("}, {"sha": "bd01b7642f4cdc5537354abf381de87ea4f93722", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b27c7095606ad9386a7038d7af03abd7f948f02f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27c7095606ad9386a7038d7af03abd7f948f02f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b27c7095606ad9386a7038d7af03abd7f948f02f", "patch": "@@ -894,6 +894,7 @@ enum NameBindingKind<'a> {\n         binding: &'a NameBinding<'a>,\n         directive: &'a ImportDirective<'a>,\n         used: Cell<bool>,\n+        legacy_self_import: bool,\n     },\n     Ambiguity {\n         b1: &'a NameBinding<'a>,\n@@ -1346,8 +1347,13 @@ impl<'a> Resolver<'a> {\n         }\n \n         match binding.kind {\n-            NameBindingKind::Import { directive, binding, ref used } if !used.get() => {\n+            NameBindingKind::Import { directive, binding, ref used, legacy_self_import }\n+                    if !used.get() => {\n                 used.set(true);\n+                if legacy_self_import {\n+                    self.warn_legacy_self_import(directive);\n+                    return false;\n+                }\n                 self.used_imports.insert((directive.id, ns));\n                 self.add_to_glob_map(directive.id, ident);\n                 self.record_use(ident, ns, binding, span)\n@@ -3112,6 +3118,12 @@ impl<'a> Resolver<'a> {\n         err.emit();\n         self.name_already_seen.insert(name, span);\n     }\n+\n+    fn warn_legacy_self_import(&self, directive: &'a ImportDirective<'a>) {\n+        let (id, span) = (directive.id, directive.span);\n+        let msg = \"`self` no longer imports values\".to_string();\n+        self.session.add_lint(lint::builtin::LEGACY_IMPORTS, id, span, msg);\n+    }\n }\n \n fn is_struct_like(def: Def) -> bool {"}, {"sha": "65e599ac6c7e8c89275942d2bbc706fbb45f64c8", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b27c7095606ad9386a7038d7af03abd7f948f02f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27c7095606ad9386a7038d7af03abd7f948f02f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=b27c7095606ad9386a7038d7af03abd7f948f02f", "patch": "@@ -41,6 +41,7 @@ pub enum ImportDirectiveSubclass<'a> {\n         target: Ident,\n         source: Ident,\n         result: PerNS<Cell<Result<&'a NameBinding<'a>, Determinacy>>>,\n+        type_ns_only: bool,\n     },\n     GlobImport {\n         is_prelude: bool,\n@@ -296,6 +297,7 @@ impl<'a> Resolver<'a> {\n                 binding: binding,\n                 directive: directive,\n                 used: Cell::new(false),\n+                legacy_self_import: false,\n             },\n             span: directive.span,\n             vis: vis,\n@@ -503,8 +505,9 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         };\n \n         directive.imported_module.set(Some(module));\n-        let (source, target, result) = match directive.subclass {\n-            SingleImport { source, target, ref result } => (source, target, result),\n+        let (source, target, result, type_ns_only) = match directive.subclass {\n+            SingleImport { source, target, ref result, type_ns_only } =>\n+                (source, target, result, type_ns_only),\n             GlobImport { .. } => {\n                 self.resolve_glob_import(directive);\n                 return true;\n@@ -513,7 +516,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         };\n \n         let mut indeterminate = false;\n-        self.per_ns(|this, ns| {\n+        self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n             if let Err(Undetermined) = result[ns].get() {\n                 result[ns].set(this.resolve_ident_in_module(module, source, ns, false, None));\n             } else {\n@@ -573,8 +576,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             _ => return None,\n         };\n \n-        let (ident, result) = match directive.subclass {\n-            SingleImport { source, ref result, .. } => (source, result),\n+        let (ident, result, type_ns_only) = match directive.subclass {\n+            SingleImport { source, ref result, type_ns_only, .. } => (source, result, type_ns_only),\n             GlobImport { .. } if module.def_id() == directive.parent.def_id() => {\n                 // Importing a module into itself is not allowed.\n                 return Some(\"Cannot glob-import a module into itself.\".to_string());\n@@ -592,19 +595,36 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         };\n \n         let mut all_ns_err = true;\n-        self.per_ns(|this, ns| {\n+        let mut legacy_self_import = None;\n+        self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n             if let Ok(binding) = result[ns].get() {\n                 all_ns_err = false;\n                 if this.record_use(ident, ns, binding, directive.span) {\n                     this.resolution(module, ident, ns).borrow_mut().binding =\n                         Some(this.dummy_binding);\n                 }\n             }\n+        } else if let Ok(binding) = this.resolve_ident_in_module(module, ident, ns, false, None) {\n+            legacy_self_import = Some(directive);\n+            let binding = this.arenas.alloc_name_binding(NameBinding {\n+                kind: NameBindingKind::Import {\n+                    binding: binding,\n+                    directive: directive,\n+                    used: Cell::new(false),\n+                    legacy_self_import: true,\n+                },\n+                ..*binding\n+            });\n+            let _ = this.try_define(directive.parent, ident, ns, binding);\n         });\n \n         if all_ns_err {\n+            if let Some(directive) = legacy_self_import {\n+                self.warn_legacy_self_import(directive);\n+                return None;\n+            }\n             let mut all_ns_failed = true;\n-            self.per_ns(|this, ns| {\n+            self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n                 match this.resolve_ident_in_module(module, ident, ns, false, Some(span)) {\n                     Ok(_) => all_ns_failed = false,\n                     _ => {}"}, {"sha": "cd73a45641111c9e20260536ee83af89d873e459", "filename": "src/test/compile-fail/issue-28075.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b27c7095606ad9386a7038d7af03abd7f948f02f/src%2Ftest%2Fcompile-fail%2Fissue-28075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27c7095606ad9386a7038d7af03abd7f948f02f/src%2Ftest%2Fcompile-fail%2Fissue-28075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28075.rs?ref=b27c7095606ad9386a7038d7af03abd7f948f02f", "patch": "@@ -18,7 +18,5 @@ extern crate lint_stability;\n \n use lint_stability::{unstable, deprecated}; //~ ERROR use of unstable library feature 'test_feature'\n \n-use lint_stability::unstable::{self as u}; //~ ERROR use of unstable library feature 'test_feature'\n-\n fn main() {\n }"}, {"sha": "bf24621a869fb21acd4d9cd1875a2e27bf6e9a91", "filename": "src/test/compile-fail/issue-38293.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b27c7095606ad9386a7038d7af03abd7f948f02f/src%2Ftest%2Fcompile-fail%2Fissue-38293.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27c7095606ad9386a7038d7af03abd7f948f02f/src%2Ftest%2Fcompile-fail%2Fissue-38293.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-38293.rs?ref=b27c7095606ad9386a7038d7af03abd7f948f02f", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `fn foo::bar::{self}` only imports `bar` in the type namespace.\n+\n+#![allow(unused)]\n+#![deny(legacy_imports)]\n+\n+mod foo {\n+    pub fn f() { }\n+}\n+use foo::f::{self};\n+//~^ ERROR `self` no longer imports values\n+//~| WARN hard error\n+\n+mod bar {\n+    pub fn baz() {}\n+    pub mod baz {}\n+}\n+use bar::baz::{self};\n+//~^ ERROR `self` no longer imports values\n+//~| WARN hard error\n+\n+fn main() {\n+    baz();\n+}"}]}