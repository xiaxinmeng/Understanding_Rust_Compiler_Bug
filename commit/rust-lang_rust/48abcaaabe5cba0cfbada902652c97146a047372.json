{"sha": "48abcaaabe5cba0cfbada902652c97146a047372", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YWJjYWFhYmU1Y2JhMGNmYmFkYTkwMjY1MmM5NzE0NmEwNDczNzI=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-08T23:56:17Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-09T15:22:59Z"}, "message": "Do not import anything if first segment of FQN resolves", "tree": {"sha": "721ad9dae8f24730605a8faf1c881dca19d998e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/721ad9dae8f24730605a8faf1c881dca19d998e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48abcaaabe5cba0cfbada902652c97146a047372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48abcaaabe5cba0cfbada902652c97146a047372", "html_url": "https://github.com/rust-lang/rust/commit/48abcaaabe5cba0cfbada902652c97146a047372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48abcaaabe5cba0cfbada902652c97146a047372/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0db5525c445fb86a7fb7441267ffab2604d78a41", "url": "https://api.github.com/repos/rust-lang/rust/commits/0db5525c445fb86a7fb7441267ffab2604d78a41", "html_url": "https://github.com/rust-lang/rust/commit/0db5525c445fb86a7fb7441267ffab2604d78a41"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "1081c9a5b3cbbf94d199425d55d263c7e4c4ecea", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/48abcaaabe5cba0cfbada902652c97146a047372/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48abcaaabe5cba0cfbada902652c97146a047372/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=48abcaaabe5cba0cfbada902652c97146a047372", "patch": "@@ -27,31 +27,34 @@ use std::collections::BTreeSet;\n // # pub mod std { pub mod collections { pub struct HashMap { } } }\n // ```\n pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n-    let path_to_import: ast::Path = ctx.find_node_at_offset()?;\n-    let path_to_import_syntax = path_to_import.syntax();\n-    if path_to_import_syntax.ancestors().find_map(ast::UseItem::cast).is_some() {\n+    let path_under_caret: ast::Path = ctx.find_node_at_offset()?;\n+    if path_under_caret.syntax().ancestors().find_map(ast::UseItem::cast).is_some() {\n         return None;\n     }\n-    let name_to_import =\n-        path_to_import_syntax.descendants().find_map(ast::NameRef::cast)?.syntax().to_string();\n \n-    let module = path_to_import_syntax.ancestors().find_map(ast::Module::cast);\n+    let module = path_under_caret.syntax().ancestors().find_map(ast::Module::cast);\n     let position = match module.and_then(|it| it.item_list()) {\n         Some(item_list) => item_list.syntax().clone(),\n         None => {\n-            let current_file = path_to_import_syntax.ancestors().find_map(ast::SourceFile::cast)?;\n+            let current_file =\n+                path_under_caret.syntax().ancestors().find_map(ast::SourceFile::cast)?;\n             current_file.syntax().clone()\n         }\n     };\n     let source_analyzer = ctx.source_analyzer(&position, None);\n     let module_with_name_to_import = source_analyzer.module()?;\n-    if source_analyzer.resolve_path(ctx.db, &path_to_import).is_some() {\n+\n+    let name_ref_to_import =\n+        path_under_caret.syntax().descendants().find_map(ast::NameRef::cast)?;\n+    if source_analyzer\n+        .resolve_path(ctx.db, &name_ref_to_import.syntax().ancestors().find_map(ast::Path::cast)?)\n+        .is_some()\n+    {\n         return None;\n     }\n \n-    let mut imports_locator = ImportsLocator::new(ctx.db);\n-\n-    let proposed_imports = imports_locator\n+    let name_to_import = name_ref_to_import.syntax().to_string();\n+    let proposed_imports = ImportsLocator::new(ctx.db)\n         .find_imports(&name_to_import)\n         .into_iter()\n         .filter_map(|module_def| module_with_name_to_import.find_use_path(ctx.db, module_def))\n@@ -69,7 +72,7 @@ pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n             edit.target(path_to_import_syntax.text_range());\n             insert_use_statement(\n                 &position,\n-                path_to_import_syntax,\n+                &path_under_caret.syntax(),\n                 &import,\n                 edit.text_edit_builder(),\n             );\n@@ -266,4 +269,25 @@ mod tests {\n             \"GroupLabel\",\n         )\n     }\n+\n+    #[test]\n+    fn not_applicable_when_path_start_is_imported() {\n+        check_assist_not_applicable(\n+            auto_import,\n+            r\"\n+            pub mod mod1 {\n+                pub mod mod2 {\n+                    pub mod mod3 {\n+                        pub struct TestStruct;\n+                    }\n+                }\n+            }\n+\n+            use mod1::mod2;\n+            fn main() {\n+                mod2::mod3::TestStruct<|>\n+            }\n+            \",\n+        );\n+    }\n }"}]}