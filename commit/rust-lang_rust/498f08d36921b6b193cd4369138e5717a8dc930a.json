{"sha": "498f08d36921b6b193cd4369138e5717a8dc930a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5OGYwOGQzNjkyMWI2YjE5M2NkNDM2OTEzOGU1NzE3YThkYzkzMGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-25T22:31:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-25T22:31:10Z"}, "message": "Auto merge of #30060 - jonas-schievink:asparagus, r=nikomatsakis\n\nFixes #27092\nFixes #30005", "tree": {"sha": "3880417ac23de0d16f02c56f244210be8eacd1ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3880417ac23de0d16f02c56f244210be8eacd1ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/498f08d36921b6b193cd4369138e5717a8dc930a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/498f08d36921b6b193cd4369138e5717a8dc930a", "html_url": "https://github.com/rust-lang/rust/commit/498f08d36921b6b193cd4369138e5717a8dc930a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/498f08d36921b6b193cd4369138e5717a8dc930a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bef2af620187350a49c840099760f24acd21c861", "url": "https://api.github.com/repos/rust-lang/rust/commits/bef2af620187350a49c840099760f24acd21c861", "html_url": "https://github.com/rust-lang/rust/commit/bef2af620187350a49c840099760f24acd21c861"}, {"sha": "47cb5d8dbde89702daed40e5a100a31b07ac1b6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/47cb5d8dbde89702daed40e5a100a31b07ac1b6e", "html_url": "https://github.com/rust-lang/rust/commit/47cb5d8dbde89702daed40e5a100a31b07ac1b6e"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "5b8307eb6c6f2a1f4e4a93dbdea595b8971ec3c6", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/498f08d36921b6b193cd4369138e5717a8dc930a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498f08d36921b6b193cd4369138e5717a8dc930a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=498f08d36921b6b193cd4369138e5717a8dc930a", "patch": "@@ -200,18 +200,19 @@ pub enum NamedMatch {\n }\n \n pub fn nameize(p_s: &ParseSess, ms: &[TokenTree], res: &[Rc<NamedMatch>])\n-            -> HashMap<Name, Rc<NamedMatch>> {\n+            -> ParseResult<HashMap<Name, Rc<NamedMatch>>> {\n     fn n_rec(p_s: &ParseSess, m: &TokenTree, res: &[Rc<NamedMatch>],\n-             ret_val: &mut HashMap<Name, Rc<NamedMatch>>, idx: &mut usize) {\n+             ret_val: &mut HashMap<Name, Rc<NamedMatch>>, idx: &mut usize)\n+             -> Result<(), (codemap::Span, String)> {\n         match *m {\n             TokenTree::Sequence(_, ref seq) => {\n                 for next_m in &seq.tts {\n-                    n_rec(p_s, next_m, res, ret_val, idx)\n+                    try!(n_rec(p_s, next_m, res, ret_val, idx))\n                 }\n             }\n             TokenTree::Delimited(_, ref delim) => {\n                 for next_m in &delim.tts {\n-                    n_rec(p_s, next_m, res, ret_val, idx)\n+                    try!(n_rec(p_s, next_m, res, ret_val, idx));\n                 }\n             }\n             TokenTree::Token(sp, MatchNt(bind_name, _, _, _)) => {\n@@ -221,26 +222,36 @@ pub fn nameize(p_s: &ParseSess, ms: &[TokenTree], res: &[Rc<NamedMatch>])\n                         *idx += 1;\n                     }\n                     Occupied(..) => {\n-                        panic!(p_s.span_diagnostic\n-                           .span_fatal(sp,\n-                                       &format!(\"duplicated bind name: {}\",\n-                                               bind_name)))\n+                        return Err((sp, format!(\"duplicated bind name: {}\", bind_name)))\n                     }\n                 }\n             }\n-            TokenTree::Token(_, SubstNt(..)) => panic!(\"Cannot fill in a NT\"),\n+            TokenTree::Token(sp, SubstNt(..)) => {\n+                return Err((sp, \"missing fragment specifier\".to_string()))\n+            }\n             TokenTree::Token(_, _) => (),\n         }\n+\n+        Ok(())\n     }\n+\n     let mut ret_val = HashMap::new();\n     let mut idx = 0;\n-    for m in ms { n_rec(p_s, m, res, &mut ret_val, &mut idx) }\n-    ret_val\n+    for m in ms {\n+        match n_rec(p_s, m, res, &mut ret_val, &mut idx) {\n+            Ok(_) => {},\n+            Err((sp, msg)) => return Error(sp, msg),\n+        }\n+    }\n+\n+    Success(ret_val)\n }\n \n pub enum ParseResult<T> {\n     Success(T),\n+    /// Arm failed to match\n     Failure(codemap::Span, String),\n+    /// Fatal error (malformed macro?). Abort compilation.\n     Error(codemap::Span, String)\n }\n \n@@ -429,7 +440,7 @@ pub fn parse(sess: &ParseSess,\n                 for dv in &mut (&mut eof_eis[0]).matches {\n                     v.push(dv.pop().unwrap());\n                 }\n-                return Success(nameize(sess, ms, &v[..]));\n+                return nameize(sess, ms, &v[..]);\n             } else if eof_eis.len() > 1 {\n                 return Error(sp, \"ambiguity: multiple successful parses\".to_string());\n             } else {"}, {"sha": "66f4ce55be8e30a85dfd4349fac8224d568575af", "filename": "src/test/compile-fail/macro-missing-fragment.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/498f08d36921b6b193cd4369138e5717a8dc930a/src%2Ftest%2Fcompile-fail%2Fmacro-missing-fragment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498f08d36921b6b193cd4369138e5717a8dc930a/src%2Ftest%2Fcompile-fail%2Fmacro-missing-fragment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-missing-fragment.rs?ref=498f08d36921b6b193cd4369138e5717a8dc930a", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! m {\n+    ( $( any_token $field_rust_type )* ) => {}; //~ ERROR missing fragment\n+}\n+\n+fn main() {\n+    m!();\n+}"}]}