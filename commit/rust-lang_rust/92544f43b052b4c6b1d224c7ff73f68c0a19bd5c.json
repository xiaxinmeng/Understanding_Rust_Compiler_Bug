{"sha": "92544f43b052b4c6b1d224c7ff73f68c0a19bd5c", "node_id": "C_kwDOAAsO6NoAKDkyNTQ0ZjQzYjA1MmI0YzZiMWQyMjRjN2ZmNzNmNjhjMGExOWJkNWM", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-03-03T14:56:19Z"}, "committer": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-03-05T11:11:05Z"}, "message": "Improve unexpected_cfgs lint when their is no value expected", "tree": {"sha": "b89ad1cb40935aefc84e61a58468b267d445f6e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b89ad1cb40935aefc84e61a58468b267d445f6e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c", "html_url": "https://github.com/rust-lang/rust/commit/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86067bb461d044ee30e7880ab6f3b34d5070f1db", "url": "https://api.github.com/repos/rust-lang/rust/commits/86067bb461d044ee30e7880ab6f3b34d5070f1db", "html_url": "https://github.com/rust-lang/rust/commit/86067bb461d044ee30e7880ab6f3b34d5070f1db"}], "stats": {"total": 81, "additions": 52, "deletions": 29}, "files": [{"sha": "061fee7f569af40f85962dd0823394ea3058c703", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=92544f43b052b4c6b1d224c7ff73f68c0a19bd5c", "patch": "@@ -476,7 +476,7 @@ pub fn cfg_matches(\n                             cfg.span,\n                             lint_node_id,\n                             \"unexpected `cfg` condition name\",\n-                            BuiltinLintDiagnostics::UnexpectedCfg(ident.span, name, None),\n+                            BuiltinLintDiagnostics::UnexpectedCfg((name, ident.span), None),\n                         );\n                     }\n                 }\n@@ -489,9 +489,8 @@ pub fn cfg_matches(\n                                 lint_node_id,\n                                 \"unexpected `cfg` condition value\",\n                                 BuiltinLintDiagnostics::UnexpectedCfg(\n-                                    cfg.name_value_literal_span().unwrap(),\n-                                    name,\n-                                    Some(value),\n+                                    (name, ident.span),\n+                                    Some((value, cfg.name_value_literal_span().unwrap())),\n                                 ),\n                             );\n                         }"}, {"sha": "c6bbf769b2349fe9696474df8a7b1f80f7e12117", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=92544f43b052b4c6b1d224c7ff73f68c0a19bd5c", "patch": "@@ -779,37 +779,43 @@ pub trait LintContext: Sized {\n                     db.help(&help);\n                     db.note(\"see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\");\n                 },\n-                BuiltinLintDiagnostics::UnexpectedCfg(span, name, value) => {\n-                    let possibilities: Vec<Symbol> = if value.is_some() {\n-                        let Some(values) = &sess.parse_sess.check_config.values_valid.get(&name) else {\n-                            bug!(\"it shouldn't be possible to have a diagnostic on a value whose name is not in values\");\n-                        };\n-                        values.iter().map(|&s| s).collect()\n-                    } else {\n-                        let Some(names_valid) = &sess.parse_sess.check_config.names_valid else {\n-                            bug!(\"it shouldn't be possible to have a diagnostic on a name if name checking is not enabled\");\n-                        };\n-                        names_valid.iter().map(|s| *s).collect()\n+                BuiltinLintDiagnostics::UnexpectedCfg((name, name_span), None) => {\n+                    let Some(names_valid) = &sess.parse_sess.check_config.names_valid else {\n+                        bug!(\"it shouldn't be possible to have a diagnostic on a name if name checking is not enabled\");\n+                    };\n+                    let possibilities: Vec<Symbol> = names_valid.iter().map(|s| *s).collect();\n+\n+                    // Suggest the most probable if we found one\n+                    if let Some(best_match) = find_best_match_for_name(&possibilities, name, None) {\n+                        db.span_suggestion(name_span, \"did you mean\", format!(\"{best_match}\"), Applicability::MaybeIncorrect);\n+                    }\n+                },\n+                BuiltinLintDiagnostics::UnexpectedCfg((name, name_span), Some((value, value_span))) => {\n+                    let Some(values) = &sess.parse_sess.check_config.values_valid.get(&name) else {\n+                        bug!(\"it shouldn't be possible to have a diagnostic on a value whose name is not in values\");\n                     };\n+                    let possibilities: Vec<Symbol> = values.iter().map(|&s| s).collect();\n \n                     // Show the full list if all possible values for a given name, but don't do it\n                     // for names as the possibilities could be very long\n-                    if value.is_some() {\n-                        if !possibilities.is_empty() {\n+                    if !possibilities.is_empty() {\n+                        {\n                             let mut possibilities = possibilities.iter().map(Symbol::as_str).collect::<Vec<_>>();\n                             possibilities.sort();\n \n                             let possibilities = possibilities.join(\", \");\n                             db.note(&format!(\"expected values for `{name}` are: {possibilities}\"));\n-                        } else {\n-                            db.note(&format!(\"no expected value for `{name}`\"));\n                         }\n-                    }\n \n-                    // Suggest the most probable if we found one\n-                    if let Some(best_match) = find_best_match_for_name(&possibilities, value.unwrap_or(name), None) {\n-                        let punctuation = if value.is_some() { \"\\\"\" } else { \"\" };\n-                        db.span_suggestion(span, \"did you mean\", format!(\"{punctuation}{best_match}{punctuation}\"), Applicability::MaybeIncorrect);\n+                        // Suggest the most probable if we found one\n+                        if let Some(best_match) = find_best_match_for_name(&possibilities, value, None) {\n+                            db.span_suggestion(value_span, \"did you mean\", format!(\"\\\"{best_match}\\\"\"), Applicability::MaybeIncorrect);\n+                        }\n+                    } else {\n+                        db.note(&format!(\"no expected value for `{name}`\"));\n+                        if name != sym::feature {\n+                            db.span_suggestion(name_span.shrink_to_hi().to(value_span), \"remove the value\", String::new(), Applicability::MaybeIncorrect);\n+                        }\n                     }\n                 },\n             }"}, {"sha": "e7f6dfa67b9a6b4581f040f57add9484fc4ad07d", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=92544f43b052b4c6b1d224c7ff73f68c0a19bd5c", "patch": "@@ -426,7 +426,7 @@ pub enum BuiltinLintDiagnostics {\n     BreakWithLabelAndLoop(Span),\n     NamedAsmLabel(String),\n     UnicodeTextFlow(Span, String),\n-    UnexpectedCfg(Span, Symbol, Option<Symbol>),\n+    UnexpectedCfg((Symbol, Span), Option<(Symbol, Span)>),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "10dab50348954e8c94e7b7572587641e33a027ec", "filename": "src/test/ui/check-cfg/empty-values.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr?ref=92544f43b052b4c6b1d224c7ff73f68c0a19bd5c", "patch": "@@ -2,7 +2,9 @@ warning: unexpected `cfg` condition value\n   --> $DIR/empty-values.rs:6:7\n    |\n LL | #[cfg(test = \"value\")]\n-   |       ^^^^^^^^^^^^^^\n+   |       ^^^^----------\n+   |           |\n+   |           help: remove the value\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: no expected value for `test`"}, {"sha": "8c80f56cb5a30e8a1f12e4dbc2106090c55e4795", "filename": "src/test/ui/check-cfg/no-values.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.rs?ref=92544f43b052b4c6b1d224c7ff73f68c0a19bd5c", "patch": "@@ -1,10 +1,14 @@\n // Check that we detect unexpected value when none are allowed\n //\n // check-pass\n-// compile-flags: --check-cfg=values(feature) -Z unstable-options\n+// compile-flags: --check-cfg=values(test) --check-cfg=values(feature) -Z unstable-options\n \n #[cfg(feature = \"foo\")]\n //~^ WARNING unexpected `cfg` condition value\n fn do_foo() {}\n \n+#[cfg(test = \"foo\")]\n+//~^ WARNING unexpected `cfg` condition value\n+fn do_foo() {}\n+\n fn main() {}"}, {"sha": "7025b4cd7bae6921941d77052f423e0fde465a1b", "filename": "src/test/ui/check-cfg/no-values.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.stderr?ref=92544f43b052b4c6b1d224c7ff73f68c0a19bd5c", "patch": "@@ -7,5 +7,15 @@ LL | #[cfg(feature = \"foo\")]\n    = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: no expected value for `feature`\n \n-warning: 1 warning emitted\n+warning: unexpected `cfg` condition value\n+  --> $DIR/no-values.rs:10:7\n+   |\n+LL | #[cfg(test = \"foo\")]\n+   |       ^^^^--------\n+   |           |\n+   |           help: remove the value\n+   |\n+   = note: no expected value for `test`\n+\n+warning: 2 warnings emitted\n "}, {"sha": "8eefd6aaf35ec468548874d942b83be12d019632", "filename": "src/test/ui/check-cfg/well-known-values.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92544f43b052b4c6b1d224c7ff73f68c0a19bd5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr?ref=92544f43b052b4c6b1d224c7ff73f68c0a19bd5c", "patch": "@@ -23,7 +23,9 @@ warning: unexpected `cfg` condition value\n   --> $DIR/well-known-values.rs:21:7\n    |\n LL | #[cfg(unix = \"aa\")]\n-   |       ^^^^^^^^^^^\n+   |       ^^^^-------\n+   |           |\n+   |           help: remove the value\n    |\n    = note: no expected value for `unix`\n "}]}