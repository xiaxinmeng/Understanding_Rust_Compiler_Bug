{"sha": "dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZTEyYmIyYjdkNzVjY2U4ZmM4ZjIxYjVkN2VhMGRhOTIwZGY1ZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-24T08:32:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-24T08:32:10Z"}, "message": "Auto merge of #68506 - tmandry:rollup-kz9d33v, r=tmandry\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #68424 (Suggest borrowing `Vec<NonCopy>` in for loop)\n - #68438 (Account for non-types in substs for opaque type error messages)\n - #68469 (Avoid overflow in `std::iter::Skip::count`)\n - #68473 (Enable ASan on Fuchsia)\n - #68479 (Implement `unused_parens` for block return values)\n - #68483 (Add my (@flip1995) name to .mailmap)\n - #68500 (Clear out std, not std tools)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3f0255955f4d43f524452b720ab33e6e64825836", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f0255955f4d43f524452b720ab33e6e64825836"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "html_url": "https://github.com/rust-lang/rust/commit/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62f227b3f822a27bd603acede9137bfb49ca8b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f227b3f822a27bd603acede9137bfb49ca8b68", "html_url": "https://github.com/rust-lang/rust/commit/62f227b3f822a27bd603acede9137bfb49ca8b68"}, {"sha": "7f8a61d96c5a628ffb88304eb84a85140479ecad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f8a61d96c5a628ffb88304eb84a85140479ecad", "html_url": "https://github.com/rust-lang/rust/commit/7f8a61d96c5a628ffb88304eb84a85140479ecad"}], "stats": {"total": 237, "additions": 198, "deletions": 39}, "files": [{"sha": "6ab6be26cf101388162fbec2a942d5352ecea49a", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -211,6 +211,7 @@ Peter Liniker <peter.liniker+github@gmail.com>\n Phil Dawes <phil@phildawes.net> Phil Dawes <pdawes@drw.com>\n Philipp Br\u00fcschweiler <blei42@gmail.com> <blei42@gmail.com>\n Philipp Br\u00fcschweiler <blei42@gmail.com> <bruphili@student.ethz.ch>\n+Philipp Krones <hello@philkrones.com> flip1995 <hello@philkrones.com>\n Philipp Matthias Sch\u00e4fer <philipp.matthias.schaefer@posteo.de>\n Przemys\u0142aw Weso\u0142ek <jest@go.art.pl> Przemek Weso\u0142ek <jest@go.art.pl>\n Rafael \u00c1vila de Esp\u00edndola <respindola@mozilla.com> Rafael Avila de Espindola <espindola@dream.(none)>"}, {"sha": "d9c894aa9c6b1d6a32023c99201e01528246b3cd", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -874,7 +874,7 @@ impl<'a> Builder<'a> {\n         //\n         // Only clear out the directory if we're compiling std; otherwise, we\n         // should let Cargo take care of things for us (via depdep info)\n-        if !self.config.dry_run && mode == Mode::ToolStd && cmd == \"build\" {\n+        if !self.config.dry_run && mode == Mode::Std && cmd == \"build\" {\n             self.clear_if_dirty(&out_dir, &self.rustc(compiler));\n         }\n "}, {"sha": "5bbd9f47fc907f51a3b4f45fb3ee2c447f97d268", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -659,6 +659,24 @@ fn supported_sanitizers(out_dir: &Path, target: Interned<String>) -> Vec<Sanitiz\n                 });\n             }\n         }\n+        \"x86_64-fuchsia\" => {\n+            for s in &[\"asan\"] {\n+                result.push(SanitizerRuntime {\n+                    cmake_target: format!(\"clang_rt.{}-x86_64\", s),\n+                    path: out_dir.join(&format!(\"build/lib/fuchsia/libclang_rt.{}-x86_64.a\", s)),\n+                    name: format!(\"librustc_rt.{}.a\", s),\n+                });\n+            }\n+        }\n+        \"aarch64-fuchsia\" => {\n+            for s in &[\"asan\"] {\n+                result.push(SanitizerRuntime {\n+                    cmake_target: format!(\"clang_rt.{}-aarch64\", s),\n+                    path: out_dir.join(&format!(\"build/lib/fuchsia/libclang_rt.{}-aarch64.a\", s)),\n+                    name: format!(\"librustc_rt.{}.a\", s),\n+                });\n+            }\n+        }\n         _ => {}\n     }\n     result"}, {"sha": "5787b9174edaba8928e329d19f5554d43c28c81c", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -1815,8 +1815,14 @@ where\n     }\n \n     #[inline]\n-    fn count(self) -> usize {\n-        self.iter.count().saturating_sub(self.n)\n+    fn count(mut self) -> usize {\n+        if self.n > 0 {\n+            // nth(n) skips n+1\n+            if self.iter.nth(self.n - 1).is_none() {\n+                return 0;\n+            }\n+        }\n+        self.iter.count()\n     }\n \n     #[inline]"}, {"sha": "cb4247d98745eb8e52af0fd9e2de8de382cd54b0", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -151,6 +151,7 @@ use crate::{\n \n /// The `Option` type. See [the module level documentation](index.html) for more.\n #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n+#[rustc_diagnostic_item = \"option_type\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Option<T> {\n     /// No value"}, {"sha": "bc70dbd62eb52720bfd95e94849ec1af71749bd9", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -242,6 +242,7 @@ use crate::ops::{self, Deref, DerefMut};\n /// [`Err`]: enum.Result.html#variant.Err\n #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[must_use = \"this `Result` may be an `Err` variant, which should be handled\"]\n+#[rustc_diagnostic_item = \"result_type\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Result<T, E> {\n     /// Contains the success value"}, {"sha": "e67131b916413e2eff75dfc4c8d35a0c0944a0cf", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -2410,7 +2410,7 @@ impl<'tcx> AdtDef {\n \n     #[inline]\n     pub fn variant_range(&self) -> Range<VariantIdx> {\n-        (VariantIdx::new(0)..VariantIdx::new(self.variants.len()))\n+        VariantIdx::new(0)..VariantIdx::new(self.variants.len())\n     }\n \n     /// Computes the discriminant value used by a specific variant."}, {"sha": "837b2fcc50068bf9d8f4e1ea683b9f01eace9e0a", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -529,7 +529,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     pub fn variant_range(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> Range<VariantIdx> {\n         // FIXME requires optimized MIR\n         let num_variants = tcx.generator_layout(def_id).variant_fields.len();\n-        (VariantIdx::new(0)..VariantIdx::new(num_variants))\n+        VariantIdx::new(0)..VariantIdx::new(num_variants)\n     }\n \n     /// The discriminant for the given variant. Panics if the `variant_index` is"}, {"sha": "f56a4170c0a4b3b0897aa58aeffe386241be8128", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -777,7 +777,7 @@ fn link_sanitizer_runtime(sess: &Session, crate_type: config::CrateType, linker:\n             linker.args(&[\"-Wl,-rpath\".into(), \"-Xlinker\".into(), rpath.into()]);\n             linker.link_dylib(Symbol::intern(&libname));\n         }\n-        \"x86_64-unknown-linux-gnu\" => {\n+        \"x86_64-unknown-linux-gnu\" | \"x86_64-fuchsia\" | \"aarch64-fuchsia\" => {\n             let filename = format!(\"librustc_rt.{}.a\", name);\n             let path = default_tlib.join(&filename);\n             linker.link_whole_rlib(&path);"}, {"sha": "08706aac11e41e88748a8b4a69bf955a90144a9a", "filename": "src/librustc_data_structures/sorted_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_data_structures%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_data_structures%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsorted_map.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -132,7 +132,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n         R: RangeBounds<K>,\n     {\n         let (start, end) = self.range_slice_indices(range);\n-        (&self.data[start..end])\n+        &self.data[start..end]\n     }\n \n     #[inline]"}, {"sha": "bb2c4fa1aaff64f2d6a5fad451f13feaa285498d", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -544,12 +544,20 @@ impl EarlyLintPass for UnusedParens {\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n-        if let ast::StmtKind::Local(ref local) = s.kind {\n-            self.check_unused_parens_pat(cx, &local.pat, false, false);\n+        use ast::StmtKind::*;\n \n-            if let Some(ref value) = local.init {\n-                self.check_unused_parens_expr(cx, &value, \"assigned value\", false, None, None);\n+        match s.kind {\n+            Local(ref local) => {\n+                self.check_unused_parens_pat(cx, &local.pat, false, false);\n+\n+                if let Some(ref value) = local.init {\n+                    self.check_unused_parens_expr(cx, &value, \"assigned value\", false, None, None);\n+                }\n             }\n+            Expr(ref expr) => {\n+                self.check_unused_parens_expr(cx, &expr, \"block return value\", false, None, None);\n+            }\n+            _ => {}\n         }\n     }\n "}, {"sha": "43121b38da01a1160e3794ef18321dfec4bccd63", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -1,7 +1,8 @@\n use rustc::mir::*;\n use rustc::ty;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n-use rustc_span::Span;\n+use rustc_span::source_map::DesugaringKind;\n+use rustc_span::{Span, Symbol};\n \n use crate::borrow_check::diagnostics::UseSpans;\n use crate::borrow_check::prefixes::PrefixSet;\n@@ -383,10 +384,20 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n         };\n-        let move_ty = format!(\"{:?}\", move_place.ty(*self.body, self.infcx.tcx).ty,);\n         if let Ok(snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n-            let is_option = move_ty.starts_with(\"std::option::Option\");\n-            let is_result = move_ty.starts_with(\"std::result::Result\");\n+            let def_id = match move_place.ty(*self.body, self.infcx.tcx).ty.kind {\n+                ty::Adt(self_def, _) => self_def.did,\n+                ty::Foreign(def_id)\n+                | ty::FnDef(def_id, _)\n+                | ty::Closure(def_id, _)\n+                | ty::Generator(def_id, ..)\n+                | ty::Opaque(def_id, _) => def_id,\n+                _ => return err,\n+            };\n+            let is_option =\n+                self.infcx.tcx.is_diagnostic_item(Symbol::intern(\"option_type\"), def_id);\n+            let is_result =\n+                self.infcx.tcx.is_diagnostic_item(Symbol::intern(\"result_type\"), def_id);\n             if (is_option || is_result) && use_spans.map_or(true, |v| !v.for_closure()) {\n                 err.span_suggestion(\n                     span,\n@@ -397,6 +408,16 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     format!(\"{}.as_ref()\", snippet),\n                     Applicability::MaybeIncorrect,\n                 );\n+            } else if span.is_desugaring(DesugaringKind::ForLoop)\n+                && self.infcx.tcx.is_diagnostic_item(Symbol::intern(\"vec_type\"), def_id)\n+            {\n+                // FIXME: suggest for anything that implements `IntoIterator`.\n+                err.span_suggestion(\n+                    span,\n+                    \"consider iterating over a slice of the `Vec<_>`'s content\",\n+                    format!(\"&{}\", snippet),\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n         }\n         err"}, {"sha": "a2ce224904b29f5c5563b0ca8774356f01b25c3c", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -1530,7 +1530,7 @@ impl<'tcx> IntRange<'tcx> {\n         // 2       --------   // 2 -------\n         let (lo, hi) = self.boundaries();\n         let (other_lo, other_hi) = other.boundaries();\n-        (lo == other_hi || hi == other_lo)\n+        lo == other_hi || hi == other_lo\n     }\n \n     fn to_pat(&self, tcx: TyCtxt<'tcx>) -> Pat<'tcx> {"}, {"sha": "a40d6451b958c6cc865efc907825bdcaf0d143f5", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -1127,8 +1127,12 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n \n     // Sanitizers can only be used on some tested platforms.\n     if let Some(ref sanitizer) = sess.opts.debugging_opts.sanitizer {\n-        const ASAN_SUPPORTED_TARGETS: &[&str] =\n-            &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n+        const ASAN_SUPPORTED_TARGETS: &[&str] = &[\n+            \"x86_64-unknown-linux-gnu\",\n+            \"x86_64-apple-darwin\",\n+            \"x86_64-fuchsia\",\n+            \"aarch64-fuchsia\",\n+        ];\n         const TSAN_SUPPORTED_TARGETS: &[&str] =\n             &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n         const LSAN_SUPPORTED_TARGETS: &[&str] ="}, {"sha": "e0b93b9ce2555cb7a8b75896794298c497bac7cd", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -774,10 +774,10 @@ impl SourceMap {\n         // searching forwards for boundaries we've got somewhere to search.\n         let snippet = if let Some(ref src) = local_begin.sf.src {\n             let len = src.len();\n-            (&src[start_index..len])\n+            &src[start_index..len]\n         } else if let Some(src) = src.get_source() {\n             let len = src.len();\n-            (&src[start_index..len])\n+            &src[start_index..len]\n         } else {\n             return 1;\n         };"}, {"sha": "843872d0ff99a1888c680766a8db9e628706a39f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -1673,8 +1673,15 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     ty::Param(_) => true,\n                     _ => false,\n                 };\n-                let bad_substs: Vec<_> =\n-                    substs.types().enumerate().filter(|(_, ty)| !is_param(ty)).collect();\n+                let bad_substs: Vec<_> = substs\n+                    .iter()\n+                    .enumerate()\n+                    .filter_map(|(i, k)| {\n+                        if let GenericArgKind::Type(ty) = k.unpack() { Some((i, ty)) } else { None }\n+                    })\n+                    .filter(|(_, ty)| !is_param(ty))\n+                    .collect();\n+\n                 if !bad_substs.is_empty() {\n                     let identity_substs = InternalSubsts::identity_for_item(self.tcx, self.def_id);\n                     for (i, bad_subst) in bad_substs {"}, {"sha": "d6f18fda8b25c3f5496c200e1ed1b239975fbf3b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -548,11 +548,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         let st = match style {\n             ast::StrStyle::Cooked => (format!(\"\\\"{}\\\"\", st.escape_debug())),\n             ast::StrStyle::Raw(n) => {\n-                (format!(\n-                    \"r{delim}\\\"{string}\\\"{delim}\",\n-                    delim = \"#\".repeat(n as usize),\n-                    string = st\n-                ))\n+                format!(\"r{delim}\\\"{string}\\\"{delim}\", delim = \"#\".repeat(n as usize), string = st)\n             }\n         };\n         self.word(st)"}, {"sha": "d8efc948664ff00491a46d2ad1988d71f722f183", "filename": "src/test/ui/iterators/skip-count-overflow.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Fiterators%2Fskip-count-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Fiterators%2Fskip-count-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fskip-count-overflow.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -0,0 +1,8 @@\n+// run-pass\n+// only-32bit too impatient for 2\u2076\u2074 items\n+// compile-flags: -C overflow-checks -C opt-level=3\n+\n+fn main() {\n+    let i = (0..usize::max_value()).chain(0..10).skip(usize::max_value());\n+    assert_eq!(i.count(), 10);\n+}"}, {"sha": "4e8339a8e6bf1b41f6163961ce93fe24798406a9", "filename": "src/test/ui/lint/lint-unnecessary-parens.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -17,6 +17,13 @@ fn unused_parens_around_return_type() -> (u32) { //~ ERROR unnecessary parenthes\n     panic!()\n }\n \n+fn unused_parens_around_block_return() -> u32 {\n+    let foo = {\n+        (5) //~ ERROR unnecessary parentheses around block return value\n+    };\n+    (5) //~ ERROR unnecessary parentheses around block return value\n+}\n+\n trait Trait {\n     fn test(&self);\n }"}, {"sha": "ea58220d20c9fe8ac050dc14dbb1e1748fc3b904", "filename": "src/test/ui/lint/lint-unnecessary-parens.stderr", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -22,73 +22,85 @@ error: unnecessary parentheses around type\n LL | fn unused_parens_around_return_type() -> (u32) {\n    |                                          ^^^^^ help: remove these parentheses\n \n+error: unnecessary parentheses around block return value\n+  --> $DIR/lint-unnecessary-parens.rs:22:9\n+   |\n+LL |         (5)\n+   |         ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around block return value\n+  --> $DIR/lint-unnecessary-parens.rs:24:5\n+   |\n+LL |     (5)\n+   |     ^^^ help: remove these parentheses\n+\n error: unnecessary parentheses around function argument\n-  --> $DIR/lint-unnecessary-parens.rs:36:9\n+  --> $DIR/lint-unnecessary-parens.rs:43:9\n    |\n LL |     bar((true));\n    |         ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `if` condition\n-  --> $DIR/lint-unnecessary-parens.rs:38:8\n+  --> $DIR/lint-unnecessary-parens.rs:45:8\n    |\n LL |     if (true) {}\n    |        ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `while` condition\n-  --> $DIR/lint-unnecessary-parens.rs:39:11\n+  --> $DIR/lint-unnecessary-parens.rs:46:11\n    |\n LL |     while (true) {}\n    |           ^^^^^^ help: remove these parentheses\n \n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/lint-unnecessary-parens.rs:39:5\n+  --> $DIR/lint-unnecessary-parens.rs:46:5\n    |\n LL |     while (true) {}\n    |     ^^^^^^^^^^^^ help: use `loop`\n    |\n    = note: `#[warn(while_true)]` on by default\n \n error: unnecessary parentheses around `match` head expression\n-  --> $DIR/lint-unnecessary-parens.rs:41:11\n+  --> $DIR/lint-unnecessary-parens.rs:48:11\n    |\n LL |     match (true) {\n    |           ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `let` head expression\n-  --> $DIR/lint-unnecessary-parens.rs:44:16\n+  --> $DIR/lint-unnecessary-parens.rs:51:16\n    |\n LL |     if let 1 = (1) {}\n    |                ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `let` head expression\n-  --> $DIR/lint-unnecessary-parens.rs:45:19\n+  --> $DIR/lint-unnecessary-parens.rs:52:19\n    |\n LL |     while let 1 = (2) {}\n    |                   ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around method argument\n-  --> $DIR/lint-unnecessary-parens.rs:59:24\n+  --> $DIR/lint-unnecessary-parens.rs:66:24\n    |\n LL |     X { y: false }.foo((true));\n    |                        ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:61:18\n+  --> $DIR/lint-unnecessary-parens.rs:68:18\n    |\n LL |     let mut _a = (0);\n    |                  ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:62:10\n+  --> $DIR/lint-unnecessary-parens.rs:69:10\n    |\n LL |     _a = (0);\n    |          ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:63:11\n+  --> $DIR/lint-unnecessary-parens.rs:70:11\n    |\n LL |     _a += (1);\n    |           ^^^ help: remove these parentheses\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 15 previous errors\n "}, {"sha": "ec7358bd08ad23b20de8c59055324fa67a3c70c9", "filename": "src/test/ui/suggestions/for-i-in-vec.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.fixed?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+struct Foo {\n+    v: Vec<u32>,\n+}\n+\n+impl Foo {\n+    fn bar(&self) {\n+        for _ in &self.v { //~ ERROR cannot move out of `self.v` which is behind a shared reference\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "304fe8cc81f1a9fb526a9c22a04b9d9ecdf748cd", "filename": "src/test/ui/suggestions/for-i-in-vec.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+struct Foo {\n+    v: Vec<u32>,\n+}\n+\n+impl Foo {\n+    fn bar(&self) {\n+        for _ in self.v { //~ ERROR cannot move out of `self.v` which is behind a shared reference\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "576a7cc2f6043b8e31250830cf7fbffb53c14f8a", "filename": "src/test/ui/suggestions/for-i-in-vec.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -0,0 +1,12 @@\n+error[E0507]: cannot move out of `self.v` which is behind a shared reference\n+  --> $DIR/for-i-in-vec.rs:10:18\n+   |\n+LL |         for _ in self.v {\n+   |                  ^^^^^^\n+   |                  |\n+   |                  move occurs because `self.v` has type `std::vec::Vec<u32>`, which does not implement the `Copy` trait\n+   |                  help: consider iterating over a slice of the `Vec<_>`'s content: `&self.v`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "d00f8d7a90119a6029f25798f3aabb6e54661759", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -0,0 +1,13 @@\n+// Regression test for issue #68368\n+// Ensures that we don't ICE when emitting an error\n+// for a non-defining use when lifetimes are involved\n+\n+#![feature(type_alias_impl_trait)]\n+trait Trait<T> {}\n+type Alias<'a, U> = impl Trait<U>; //~ ERROR could not find defining uses\n+fn f<'a>() -> Alias<'a, ()> {}\n+//~^ ERROR defining opaque type use does not fully define opaque type: generic parameter `U`\n+\n+fn main() {}\n+\n+impl Trait<()> for () {}"}, {"sha": "b585942406fd4e8a0e58412a3978506be37e7912", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr?ref=dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "patch": "@@ -0,0 +1,14 @@\n+error: defining opaque type use does not fully define opaque type: generic parameter `U` is specified as concrete type `()`\n+  --> $DIR/issue-68368-non-defining-use.rs:8:1\n+   |\n+LL | fn f<'a>() -> Alias<'a, ()> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: could not find defining uses\n+  --> $DIR/issue-68368-non-defining-use.rs:7:1\n+   |\n+LL | type Alias<'a, U> = impl Trait<U>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}