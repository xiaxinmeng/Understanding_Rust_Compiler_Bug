{"sha": "1abbd74a7f2d9837867aee72a8c54741a1eaa30b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYmJkNzRhN2YyZDk4Mzc4NjdhZWU3MmE4YzU0NzQxYTFlYWEzMGI=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-01-11T23:26:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-11T23:26:14Z"}, "message": "Merge pull request #2358 from PSeitz/master\n\ncase insensitive FIXME and TODO", "tree": {"sha": "3be6bf14d921c64c4978520a612ef09649f737e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3be6bf14d921c64c4978520a612ef09649f737e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1abbd74a7f2d9837867aee72a8c54741a1eaa30b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaV/KWCRBK7hj4Ov3rIwAAdHIIAIQVKslSp/YHDgzVLzLfbdXC\nCG4G03hc2AQ6CL9YSDqasgqTabidde0XGSiAbk9iIa5e6nJioy8PcQYGv3AZLK35\nBYXXuLeHEowpvKeJcqvpVV3wHBjtHDaiOUPgL5iRlgbwngqx96u4c1midnpHrByi\nKrEXI3Sk5cZerKa7UiRqXX7mfTBlZyIHf9Rvl963n5JxUv9AH5YU35BGoMKMp/LP\nPRZJ+EQeKkzIbDopRw2Tb5FkmH/18LMn9J3vtzLuUPklBrrUftIBgXlce08RvPbJ\nPVJv70uOJvZtfePi5v0nZyPmujbd6njMhVw/lixdQZpBEnajO2NNxuYHNVFLxXw=\n=Kyou\n-----END PGP SIGNATURE-----\n", "payload": "tree 3be6bf14d921c64c4978520a612ef09649f737e9\nparent 3e29fe33304f3108abb36f873aeb631fad506ed8\nparent 2e82ad8c365caf103df95e321446ec6779b370cb\nauthor Seiichi Uchida <seuchida@gmail.com> 1515713174 +0900\ncommitter GitHub <noreply@github.com> 1515713174 +0900\n\nMerge pull request #2358 from PSeitz/master\n\ncase insensitive FIXME and TODO"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1abbd74a7f2d9837867aee72a8c54741a1eaa30b", "html_url": "https://github.com/rust-lang/rust/commit/1abbd74a7f2d9837867aee72a8c54741a1eaa30b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1abbd74a7f2d9837867aee72a8c54741a1eaa30b/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e29fe33304f3108abb36f873aeb631fad506ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e29fe33304f3108abb36f873aeb631fad506ed8", "html_url": "https://github.com/rust-lang/rust/commit/3e29fe33304f3108abb36f873aeb631fad506ed8"}, {"sha": "2e82ad8c365caf103df95e321446ec6779b370cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e82ad8c365caf103df95e321446ec6779b370cb", "html_url": "https://github.com/rust-lang/rust/commit/2e82ad8c365caf103df95e321446ec6779b370cb"}], "stats": {"total": 87, "additions": 50, "deletions": 37}, "files": [{"sha": "6cd0586f3e458d1fc6d0cb3c258ca33b3ac2eab2", "filename": "src/issues.rs", "status": "modified", "additions": 50, "deletions": 37, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/1abbd74a7f2d9837867aee72a8c54741a1eaa30b/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1abbd74a7f2d9837867aee72a8c54741a1eaa30b/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=1abbd74a7f2d9837867aee72a8c54741a1eaa30b", "patch": "@@ -16,8 +16,8 @@ use std::fmt;\n \n pub use config::ReportTactic;\n \n-const TO_DO_CHARS: &[char] = &['T', 'O', 'D', 'O'];\n-const FIX_ME_CHARS: &[char] = &['F', 'I', 'X', 'M', 'E'];\n+const TO_DO_CHARS: &[char] = &['t', 'o', 'd', 'o'];\n+const FIX_ME_CHARS: &[char] = &['f', 'i', 'x', 'm', 'e'];\n \n // Enabled implementation detail is here because it is\n // irrelevant outside the issues module\n@@ -127,44 +127,45 @@ impl BadIssueSeeker {\n     }\n \n     fn inspect_issue(&mut self, c: char, mut todo_idx: usize, mut fixme_idx: usize) -> Seeking {\n-        // FIXME: Should we also check for lower case characters?\n-        if self.report_todo.is_enabled() && c == TO_DO_CHARS[todo_idx] {\n-            todo_idx += 1;\n-            if todo_idx == TO_DO_CHARS.len() {\n-                return Seeking::Number {\n-                    issue: Issue {\n-                        issue_type: IssueType::Todo,\n-                        missing_number: if let ReportTactic::Unnumbered = self.report_todo {\n-                            true\n-                        } else {\n-                            false\n+        if let Some(lower_case_c) = c.to_lowercase().next() {\n+            if self.report_todo.is_enabled() && lower_case_c == TO_DO_CHARS[todo_idx] {\n+                todo_idx += 1;\n+                if todo_idx == TO_DO_CHARS.len() {\n+                    return Seeking::Number {\n+                        issue: Issue {\n+                            issue_type: IssueType::Todo,\n+                            missing_number: if let ReportTactic::Unnumbered = self.report_todo {\n+                                true\n+                            } else {\n+                                false\n+                            },\n                         },\n-                    },\n-                    part: NumberPart::OpenParen,\n-                };\n-            }\n-            fixme_idx = 0;\n-        } else if self.report_fixme.is_enabled() && c == FIX_ME_CHARS[fixme_idx] {\n-            // Exploit the fact that the character sets of todo and fixme\n-            // are disjoint by adding else.\n-            fixme_idx += 1;\n-            if fixme_idx == FIX_ME_CHARS.len() {\n-                return Seeking::Number {\n-                    issue: Issue {\n-                        issue_type: IssueType::Fixme,\n-                        missing_number: if let ReportTactic::Unnumbered = self.report_fixme {\n-                            true\n-                        } else {\n-                            false\n+                        part: NumberPart::OpenParen,\n+                    };\n+                }\n+                fixme_idx = 0;\n+            } else if self.report_fixme.is_enabled() && lower_case_c == FIX_ME_CHARS[fixme_idx] {\n+                // Exploit the fact that the character sets of todo and fixme\n+                // are disjoint by adding else.\n+                fixme_idx += 1;\n+                if fixme_idx == FIX_ME_CHARS.len() {\n+                    return Seeking::Number {\n+                        issue: Issue {\n+                            issue_type: IssueType::Fixme,\n+                            missing_number: if let ReportTactic::Unnumbered = self.report_fixme {\n+                                true\n+                            } else {\n+                                false\n+                            },\n                         },\n-                    },\n-                    part: NumberPart::OpenParen,\n-                };\n+                        part: NumberPart::OpenParen,\n+                    };\n+                }\n+                todo_idx = 0;\n+            } else {\n+                todo_idx = 0;\n+                fixme_idx = 0;\n             }\n-            todo_idx = 0;\n-        } else {\n-            todo_idx = 0;\n-            fixme_idx = 0;\n         }\n \n         Seeking::Issue {\n@@ -268,12 +269,24 @@ fn find_issue() {\n         ReportTactic::Always,\n     ));\n \n+    assert!(!is_bad_issue(\n+        \"Todo: mixed case\\n\",\n+        ReportTactic::Never,\n+        ReportTactic::Always,\n+    ));\n+\n     assert!(is_bad_issue(\n         \"This is a FIXME(#1)\\n\",\n         ReportTactic::Never,\n         ReportTactic::Always,\n     ));\n \n+    assert!(is_bad_issue(\n+        \"This is a FixMe(#1) mixed case\\n\",\n+        ReportTactic::Never,\n+        ReportTactic::Always,\n+    ));\n+\n     assert!(!is_bad_issue(\n         \"bad FIXME\\n\",\n         ReportTactic::Always,"}]}