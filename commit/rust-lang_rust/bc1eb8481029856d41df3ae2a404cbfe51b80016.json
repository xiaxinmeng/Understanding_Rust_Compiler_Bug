{"sha": "bc1eb8481029856d41df3ae2a404cbfe51b80016", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMWViODQ4MTAyOTg1NmQ0MWRmM2FlMmE0MDRjYmZlNTFiODAwMTY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-02T05:56:13Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-02T05:56:13Z"}, "message": "match region patterns", "tree": {"sha": "3395aa1703cd1b444328bf5ee527096e7def85ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3395aa1703cd1b444328bf5ee527096e7def85ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc1eb8481029856d41df3ae2a404cbfe51b80016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1eb8481029856d41df3ae2a404cbfe51b80016", "html_url": "https://github.com/rust-lang/rust/commit/bc1eb8481029856d41df3ae2a404cbfe51b80016", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc1eb8481029856d41df3ae2a404cbfe51b80016/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "683bffba08ef368471c986cf694bf5abc4a34498", "url": "https://api.github.com/repos/rust-lang/rust/commits/683bffba08ef368471c986cf694bf5abc4a34498", "html_url": "https://github.com/rust-lang/rust/commit/683bffba08ef368471c986cf694bf5abc4a34498"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "d64f6840db8961c895c57550aa1a1572eb10d43d", "filename": "src/shadow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc1eb8481029856d41df3ae2a404cbfe51b80016/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1eb8481029856d41df3ae2a404cbfe51b80016/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=bc1eb8481029856d41df3ae2a404cbfe51b80016", "patch": "@@ -130,17 +130,17 @@ fn check_pat(cx: &Context, pat: &Pat, init: &Option<&Expr>, span: Span,\n             },\n         PatBox(ref inner) => {\n             if let Some(ref initp) = *init {\n-                match initp.node {\n-                    ExprBox(_, ref inner_init) =>\n-                        check_pat(cx, inner, &Some(&**inner_init), span, bindings),\n-                    //TODO: ExprCall on Box::new\n-                    _ => check_pat(cx, inner, init, span, bindings),\n+                if let ExprBox(_, ref inner_init) = initp.node {\n+                    check_pat(cx, inner, &Some(&**inner_init), span, bindings),\n+                } else {\n+                    check_pat(cx, inner, init, span, bindings),\n                 }\n             } else {\n                 check_pat(cx, inner, init, span, bindings);\n             }\n         },\n-        //PatRegion(P<Pat>, Mutability),\n+        PatRegion(ref inner, _) =>\n+            check_pat(cx, inner, init, span, bindings),\n         //PatRange(P<Expr>, P<Expr>),\n         //PatVec(Vec<P<Pat>>, Option<P<Pat>>, Vec<P<Pat>>),\n         _ => (),"}]}