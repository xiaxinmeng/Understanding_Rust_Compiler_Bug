{"sha": "8a15333c06b8ba491e1654c3fca3fa21d21def9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMTUzMzNjMDZiOGJhNDkxZTE2NTRjM2ZjYTNmYTIxZDIxZGVmOWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-15T19:22:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-15T19:22:58Z"}, "message": "auto merge of #6498 : thestinger/rust/deep_clone, r=thestinger\n\nThis is mostly for `std::rc` and `std::arc` (but I haven't implemented it for ARC yet).\r\n\r\nImplementing it correctly for managed boxes is *very* non-trivial. It would probably require an unholy mix of reflection and TLS.", "tree": {"sha": "faba4e5896e4f9c2f200716afa1f4d009a3daae3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faba4e5896e4f9c2f200716afa1f4d009a3daae3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a15333c06b8ba491e1654c3fca3fa21d21def9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a15333c06b8ba491e1654c3fca3fa21d21def9b", "html_url": "https://github.com/rust-lang/rust/commit/8a15333c06b8ba491e1654c3fca3fa21d21def9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a15333c06b8ba491e1654c3fca3fa21d21def9b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4c88c7da0503d4eb1109599a51537f750667320", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c88c7da0503d4eb1109599a51537f750667320", "html_url": "https://github.com/rust-lang/rust/commit/f4c88c7da0503d4eb1109599a51537f750667320"}, {"sha": "cda3ac905a56dc6580429eea259143d30a7f3c02", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda3ac905a56dc6580429eea259143d30a7f3c02", "html_url": "https://github.com/rust-lang/rust/commit/cda3ac905a56dc6580429eea259143d30a7f3c02"}], "stats": {"total": 154, "additions": 139, "deletions": 15}, "files": [{"sha": "87e8d0525e5b0db842aeab58873187d57ac925be", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a15333c06b8ba491e1654c3fca3fa21d21def9b/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a15333c06b8ba491e1654c3fca3fa21d21def9b/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=8a15333c06b8ba491e1654c3fca3fa21d21def9b", "patch": "@@ -21,10 +21,17 @@ Similar to a mutable option type, but friendlier.\n */\n \n #[mutable]\n+#[deriving(Clone)]\n pub struct Cell<T> {\n     priv value: Option<T>\n }\n \n+impl<T: DeepClone> DeepClone for Cell<T> {\n+    fn deep_clone(&self) -> Cell<T> {\n+        Cell{value: self.value.deep_clone()}\n+    }\n+}\n+\n impl<T:cmp::Eq> cmp::Eq for Cell<T> {\n     fn eq(&self, other: &Cell<T>) -> bool {\n         (self.value) == (other.value)"}, {"sha": "2ff860916c5b256318f70f02e33d15eea71d7e9a", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8a15333c06b8ba491e1654c3fca3fa21d21def9b/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a15333c06b8ba491e1654c3fca3fa21d21def9b/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=8a15333c06b8ba491e1654c3fca3fa21d21def9b", "patch": "@@ -23,17 +23,12 @@ by convention implementing the `Clone` trait and calling the\n */\n \n pub trait Clone {\n-    /// Return a deep copy of the owned object tree. Managed boxes are cloned with a shallow copy.\n+    /// Return a deep copy of the owned object tree. Types with shared ownership like managed boxes\n+    /// are cloned with a shallow copy.\n     fn clone(&self) -> Self;\n }\n \n-impl Clone for () {\n-    /// Return a copy of the value.\n-    #[inline(always)]\n-    fn clone(&self) -> () { () }\n-}\n-\n-impl<T:Clone> Clone for ~T {\n+impl<T: Clone> Clone for ~T {\n     /// Return a deep copy of the owned box.\n     #[inline(always)]\n     fn clone(&self) -> ~T { ~(**self).clone() }\n@@ -54,7 +49,7 @@ impl<T> Clone for @mut T {\n macro_rules! clone_impl(\n     ($t:ty) => {\n         impl Clone for $t {\n-            /// Return a copy of the value.\n+            /// Return a deep copy of the value.\n             #[inline(always)]\n             fn clone(&self) -> $t { *self }\n         }\n@@ -77,9 +72,53 @@ clone_impl!(float)\n clone_impl!(f32)\n clone_impl!(f64)\n \n+clone_impl!(())\n clone_impl!(bool)\n clone_impl!(char)\n \n+pub trait DeepClone {\n+    /// Return a deep copy of the object tree. Types with shared ownership are also copied via a\n+    /// deep copy, unlike `Clone`. Note that this is currently unimplemented for managed boxes, as\n+    /// it would need to handle cycles.\n+    fn deep_clone(&self) -> Self;\n+}\n+\n+macro_rules! deep_clone_impl(\n+    ($t:ty) => {\n+        impl DeepClone for $t {\n+            /// Return a deep copy of the value.\n+            #[inline(always)]\n+            fn deep_clone(&self) -> $t { *self }\n+        }\n+    }\n+)\n+\n+impl<T: DeepClone> DeepClone for ~T {\n+    /// Return a deep copy of the owned box.\n+    #[inline(always)]\n+    fn deep_clone(&self) -> ~T { ~(**self).deep_clone() }\n+}\n+\n+deep_clone_impl!(int)\n+deep_clone_impl!(i8)\n+deep_clone_impl!(i16)\n+deep_clone_impl!(i32)\n+deep_clone_impl!(i64)\n+\n+deep_clone_impl!(uint)\n+deep_clone_impl!(u8)\n+deep_clone_impl!(u16)\n+deep_clone_impl!(u32)\n+deep_clone_impl!(u64)\n+\n+deep_clone_impl!(float)\n+deep_clone_impl!(f32)\n+deep_clone_impl!(f64)\n+\n+deep_clone_impl!(())\n+deep_clone_impl!(bool)\n+deep_clone_impl!(char)\n+\n #[test]\n fn test_owned_clone() {\n     let a: ~int = ~5i;"}, {"sha": "5aee3077e486636cf86dc6da8eacb20a5ca9f7b4", "filename": "src/libcore/option.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a15333c06b8ba491e1654c3fca3fa21d21def9b/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a15333c06b8ba491e1654c3fca3fa21d21def9b/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=8a15333c06b8ba491e1654c3fca3fa21d21def9b", "patch": "@@ -49,6 +49,7 @@ use num::Zero;\n use old_iter::{BaseIter, MutableIter, ExtendedIter};\n use old_iter;\n use str::StrSlice;\n+use clone::DeepClone;\n \n #[cfg(test)] use str;\n \n@@ -59,6 +60,15 @@ pub enum Option<T> {\n     Some(T),\n }\n \n+impl<T: DeepClone> DeepClone for Option<T> {\n+    fn deep_clone(&self) -> Option<T> {\n+        match *self {\n+            Some(ref x) => Some(x.deep_clone()),\n+            None => None\n+        }\n+    }\n+}\n+\n impl<T:Ord> Ord for Option<T> {\n     fn lt(&self, other: &Option<T>) -> bool {\n         match (self, other) {"}, {"sha": "4ed648161fc22e7762cc4c2a47755865d48b9d31", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a15333c06b8ba491e1654c3fca3fa21d21def9b/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a15333c06b8ba491e1654c3fca3fa21d21def9b/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=8a15333c06b8ba491e1654c3fca3fa21d21def9b", "patch": "@@ -27,7 +27,7 @@ pub use io::{print, println};\n \n /* Reexported types and traits */\n \n-pub use clone::Clone;\n+pub use clone::{Clone, DeepClone};\n pub use cmp::{Eq, ApproxEq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater, Equiv};\n pub use container::{Container, Mutable, Map, Set};\n pub use hash::Hash;"}, {"sha": "cb0798f2a398f8717bc5614594b137129c7a936e", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 73, "deletions": 5, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8a15333c06b8ba491e1654c3fca3fa21d21def9b/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a15333c06b8ba491e1654c3fca3fa21d21def9b/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=8a15333c06b8ba491e1654c3fca3fa21d21def9b", "patch": "@@ -76,6 +76,7 @@ impl<T: Owned> Drop for Rc<T> {\n \n \n impl<T: Owned> Clone for Rc<T> {\n+    /// Return a shallow copy of the reference counted pointer.\n     #[inline]\n     fn clone(&self) -> Rc<T> {\n         unsafe {\n@@ -85,9 +86,38 @@ impl<T: Owned> Clone for Rc<T> {\n     }\n }\n \n+impl<T: Owned + DeepClone> DeepClone for Rc<T> {\n+    /// Return a deep copy of the reference counted pointer.\n+    #[inline]\n+    fn deep_clone(&self) -> Rc<T> {\n+        Rc::new(self.borrow().deep_clone())\n+    }\n+}\n+\n #[cfg(test)]\n mod test_rc {\n     use super::*;\n+    use core::cell::Cell;\n+\n+    #[test]\n+    fn test_clone() {\n+        let x = Rc::new(Cell(5));\n+        let y = x.clone();\n+        do x.borrow().with_mut_ref |inner| {\n+            *inner = 20;\n+        }\n+        assert_eq!(y.borrow().take(), 20);\n+    }\n+\n+    #[test]\n+    fn test_deep_clone() {\n+        let x = Rc::new(Cell(5));\n+        let y = x.deep_clone();\n+        do x.borrow().with_mut_ref |inner| {\n+            *inner = 20;\n+        }\n+        assert_eq!(y.borrow().take(), 5);\n+    }\n \n     #[test]\n     fn test_simple() {\n@@ -96,7 +126,7 @@ mod test_rc {\n     }\n \n     #[test]\n-    fn test_clone() {\n+    fn test_simple_clone() {\n         let x = Rc::new(5);\n         let y = x.clone();\n         assert_eq!(*x.borrow(), 5);\n@@ -149,24 +179,26 @@ pub impl<T: Owned> RcMut<T> {\n \n     /// Fails if there is already a mutable borrow of the box\n     #[inline]\n-    fn with_borrow(&self, f: &fn(&T)) {\n+    fn with_borrow<U>(&self, f: &fn(&T) -> U) -> U {\n         unsafe {\n             assert!((*self.ptr).borrow != Mutable);\n             let previous = (*self.ptr).borrow;\n             (*self.ptr).borrow = Immutable;\n-            f(&(*self.ptr).value);\n+            let res = f(&(*self.ptr).value);\n             (*self.ptr).borrow = previous;\n+            res\n         }\n     }\n \n     /// Fails if there is already a mutable or immutable borrow of the box\n     #[inline]\n-    fn with_mut_borrow(&self, f: &fn(&mut T)) {\n+    fn with_mut_borrow<U>(&self, f: &fn(&mut T) -> U) -> U {\n         unsafe {\n             assert!((*self.ptr).borrow == Nothing);\n             (*self.ptr).borrow = Mutable;\n-            f(&mut (*self.ptr).value);\n+            let res = f(&mut (*self.ptr).value);\n             (*self.ptr).borrow = Nothing;\n+            res\n         }\n     }\n }\n@@ -200,6 +232,7 @@ impl<T: Owned> Drop for RcMut<T> {\n }\n \n impl<T: Owned> Clone for RcMut<T> {\n+    /// Return a shallow copy of the reference counted pointer.\n     #[inline]\n     fn clone(&self) -> RcMut<T> {\n         unsafe {\n@@ -209,10 +242,45 @@ impl<T: Owned> Clone for RcMut<T> {\n     }\n }\n \n+impl<T: Owned + DeepClone> DeepClone for RcMut<T> {\n+    /// Return a deep copy of the reference counted pointer.\n+    #[inline]\n+    fn deep_clone(&self) -> RcMut<T> {\n+        do self.with_borrow |x| {\n+            // FIXME: #6497: should avoid freeze (slow)\n+            RcMut::new(x.deep_clone())\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod test_rc_mut {\n     use super::*;\n \n+    #[test]\n+    fn test_clone() {\n+        let x = RcMut::new(5);\n+        let y = x.clone();\n+        do x.with_mut_borrow |value| {\n+            *value = 20;\n+        }\n+        do y.with_borrow |value| {\n+            assert_eq!(*value, 20);\n+        }\n+    }\n+\n+    #[test]\n+    fn test_deep_clone() {\n+        let x = RcMut::new(5);\n+        let y = x.deep_clone();\n+        do x.with_mut_borrow |value| {\n+            *value = 20;\n+        }\n+        do y.with_borrow |value| {\n+            assert_eq!(*value, 5);\n+        }\n+    }\n+\n     #[test]\n     fn borrow_many() {\n         let x = RcMut::new(5);"}]}