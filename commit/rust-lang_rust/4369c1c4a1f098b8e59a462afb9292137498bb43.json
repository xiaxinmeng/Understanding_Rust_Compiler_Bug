{"sha": "4369c1c4a1f098b8e59a462afb9292137498bb43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNjljMWM0YTFmMDk4YjhlNTlhNDYyYWZiOTI5MjEzNzQ5OGJiNDM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-20T22:16:21Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-20T22:16:21Z"}, "message": "Merge #1291\n\n1291: add is_union to structs AST r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ca8a3a7d60bca8e807a6597e4ec734953b4851d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca8a3a7d60bca8e807a6597e4ec734953b4851d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4369c1c4a1f098b8e59a462afb9292137498bb43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4369c1c4a1f098b8e59a462afb9292137498bb43", "html_url": "https://github.com/rust-lang/rust/commit/4369c1c4a1f098b8e59a462afb9292137498bb43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4369c1c4a1f098b8e59a462afb9292137498bb43/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "9383ae720bd294b3a89ae54cb1ecad749f30b0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9383ae720bd294b3a89ae54cb1ecad749f30b0fa", "html_url": "https://github.com/rust-lang/rust/commit/9383ae720bd294b3a89ae54cb1ecad749f30b0fa"}, {"sha": "765f93b8d851e5e853c844c8a279e73b4b7d965c", "url": "https://api.github.com/repos/rust-lang/rust/commits/765f93b8d851e5e853c844c8a279e73b4b7d965c", "html_url": "https://github.com/rust-lang/rust/commit/765f93b8d851e5e853c844c8a279e73b4b7d965c"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "79a7fa23a99fc3d97ad7981255c224fd32361f1e", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4369c1c4a1f098b8e59a462afb9292137498bb43/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4369c1c4a1f098b8e59a462afb9292137498bb43/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=4369c1c4a1f098b8e59a462afb9292137498bb43", "patch": "@@ -197,13 +197,13 @@ impl From<crate::adt::AdtDef> for GenericDef {\n     }\n }\n \n-pub trait HasGenericParams {\n+pub trait HasGenericParams: Copy {\n     fn generic_params(self, db: &impl DefDatabase) -> Arc<GenericParams>;\n }\n \n impl<T> HasGenericParams for T\n where\n-    T: Into<GenericDef>,\n+    T: Into<GenericDef> + Copy,\n {\n     fn generic_params(self, db: &impl DefDatabase) -> Arc<GenericParams> {\n         db.generic_params(self.into())"}, {"sha": "a1a2d0f6b183f540fbc370a452f3cda645fb4b7d", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4369c1c4a1f098b8e59a462afb9292137498bb43/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4369c1c4a1f098b8e59a462afb9292137498bb43/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=4369c1c4a1f098b8e59a462afb9292137498bb43", "patch": "@@ -9,17 +9,18 @@ use std::sync::Arc;\n use std::iter;\n \n use crate::{\n-    Function, Struct, StructField, Enum, EnumVariant, Path,\n-    ModuleDef, TypeAlias,\n-    Const, Static,\n+    Function, Struct, StructField, Enum, EnumVariant, Path, ModuleDef, TypeAlias, Const, Static,\n     HirDatabase,\n     type_ref::TypeRef,\n     name::KnownName,\n     nameres::Namespace,\n     resolve::{Resolver, Resolution},\n     path::{PathSegment, GenericArg},\n     generics::{HasGenericParams},\n-    adt::VariantDef, Trait, generics::{ WherePredicate, GenericDef}\n+    adt::VariantDef,\n+    Trait,\n+    generics::{WherePredicate, GenericDef},\n+    ty::AdtDef,\n };\n use super::{Ty, primitive, FnSig, Substs, TypeCtor, TraitRef, GenericPredicate};\n \n@@ -288,9 +289,9 @@ impl TraitRef {\n pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace) -> Ty {\n     match (def, ns) {\n         (TypableDef::Function(f), Namespace::Values) => type_for_fn(db, f),\n-        (TypableDef::Struct(s), Namespace::Types) => type_for_struct(db, s),\n+        (TypableDef::Struct(s), Namespace::Types) => type_for_adt(db, s),\n         (TypableDef::Struct(s), Namespace::Values) => type_for_struct_constructor(db, s),\n-        (TypableDef::Enum(e), Namespace::Types) => type_for_enum(db, e),\n+        (TypableDef::Enum(e), Namespace::Types) => type_for_adt(db, e),\n         (TypableDef::EnumVariant(v), Namespace::Values) => type_for_enum_variant_constructor(db, v),\n         (TypableDef::TypeAlias(t), Namespace::Types) => type_for_type_alias(db, t),\n         (TypableDef::Const(c), Namespace::Values) => type_for_const(db, c),\n@@ -405,15 +406,15 @@ fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> FnSig {\n         .iter()\n         .map(|(_, field)| Ty::from_hir(db, &resolver, &field.type_ref))\n         .collect::<Vec<_>>();\n-    let ret = type_for_struct(db, def);\n+    let ret = type_for_adt(db, def);\n     FnSig::from_params_and_return(params, ret)\n }\n \n /// Build the type of a tuple struct constructor.\n fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n     let var_data = def.variant_data(db);\n     if var_data.fields().is_none() {\n-        return type_for_struct(db, def); // Unit struct\n+        return type_for_adt(db, def); // Unit struct\n     }\n     let generics = def.generic_params(db);\n     let substs = Substs::identity(&generics);\n@@ -433,29 +434,24 @@ fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant)\n         .collect::<Vec<_>>();\n     let generics = def.parent_enum(db).generic_params(db);\n     let substs = Substs::identity(&generics);\n-    let ret = type_for_enum(db, def.parent_enum(db)).subst(&substs);\n+    let ret = type_for_adt(db, def.parent_enum(db)).subst(&substs);\n     FnSig::from_params_and_return(params, ret)\n }\n \n /// Build the type of a tuple enum variant constructor.\n fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) -> Ty {\n     let var_data = def.variant_data(db);\n     if var_data.fields().is_none() {\n-        return type_for_enum(db, def.parent_enum(db)); // Unit variant\n+        return type_for_adt(db, def.parent_enum(db)); // Unit variant\n     }\n     let generics = def.parent_enum(db).generic_params(db);\n     let substs = Substs::identity(&generics);\n     Ty::apply(TypeCtor::FnDef(def.into()), substs)\n }\n \n-fn type_for_struct(db: &impl HirDatabase, s: Struct) -> Ty {\n-    let generics = s.generic_params(db);\n-    Ty::apply(TypeCtor::Adt(s.into()), Substs::identity(&generics))\n-}\n-\n-fn type_for_enum(db: &impl HirDatabase, s: Enum) -> Ty {\n-    let generics = s.generic_params(db);\n-    Ty::apply(TypeCtor::Adt(s.into()), Substs::identity(&generics))\n+fn type_for_adt(db: &impl HirDatabase, adt: impl Into<AdtDef> + HasGenericParams) -> Ty {\n+    let generics = adt.generic_params(db);\n+    Ty::apply(TypeCtor::Adt(adt.into()), Substs::identity(&generics))\n }\n \n fn type_for_type_alias(db: &impl HirDatabase, t: TypeAlias) -> Ty {"}, {"sha": "e4c99784c3da7b64b693ebe31db08203fbd5dfec", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4369c1c4a1f098b8e59a462afb9292137498bb43/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4369c1c4a1f098b8e59a462afb9292137498bb43/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=4369c1c4a1f098b8e59a462afb9292137498bb43", "patch": "@@ -3,7 +3,12 @@\n \n use itertools::Itertools;\n \n-use crate::{SmolStr, SyntaxToken, ast::{self, AstNode, children, child_opt}, SyntaxKind::*, SyntaxElement, T};\n+use crate::{\n+    SmolStr, SyntaxToken,\n+    ast::{self, AstNode, children, child_opt},\n+    SyntaxKind::*,\n+    SyntaxElement, T,\n+};\n use ra_parser::SyntaxKind;\n \n impl ast::Name {\n@@ -196,6 +201,17 @@ impl StructKind<'_> {\n }\n \n impl ast::StructDef {\n+    pub fn is_union(&self) -> bool {\n+        for child in self.syntax().children_with_tokens() {\n+            match child.kind() {\n+                T![struct] => return false,\n+                T![union] => return true,\n+                _ => (),\n+            }\n+        }\n+        false\n+    }\n+\n     pub fn kind(&self) -> StructKind {\n         StructKind::from_node(self)\n     }"}]}