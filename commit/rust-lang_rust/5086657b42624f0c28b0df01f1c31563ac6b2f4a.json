{"sha": "5086657b42624f0c28b0df01f1c31563ac6b2f4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwODY2NTdiNDI2MjRmMGMyOGIwZGYwMWYxYzMxNTYzYWM2YjJmNGE=", "commit": {"author": {"name": "Josh Leeb-du Toit", "email": "josh.leebdutoit@gmail.com", "date": "2017-10-28T23:37:59Z"}, "committer": {"name": "Josh Leeb-du Toit", "email": "josh.leebdutoit@gmail.com", "date": "2017-10-29T01:14:13Z"}, "message": "Fix duplicate display of error E0502", "tree": {"sha": "6fe4de623580bcbceed4dcccef528dee3603c7fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fe4de623580bcbceed4dcccef528dee3603c7fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5086657b42624f0c28b0df01f1c31563ac6b2f4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5086657b42624f0c28b0df01f1c31563ac6b2f4a", "html_url": "https://github.com/rust-lang/rust/commit/5086657b42624f0c28b0df01f1c31563ac6b2f4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5086657b42624f0c28b0df01f1c31563ac6b2f4a/comments", "author": null, "committer": null, "parents": [{"sha": "269cf5026cdac6ff47f886a948e99101316d7091", "url": "https://api.github.com/repos/rust-lang/rust/commits/269cf5026cdac6ff47f886a948e99101316d7091", "html_url": "https://github.com/rust-lang/rust/commit/269cf5026cdac6ff47f886a948e99101316d7091"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "a2d6fd536bc89c7a2d1578ae2ad617f0c8c0e445", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5086657b42624f0c28b0df01f1c31563ac6b2f4a/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5086657b42624f0c28b0df01f1c31563ac6b2f4a/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=5086657b42624f0c28b0df01f1c31563ac6b2f4a", "patch": "@@ -395,18 +395,40 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         assert!(self.bccx.region_scope_tree.scopes_intersect(old_loan.kill_scope,\n                                                        new_loan.kill_scope));\n \n-        self.report_error_if_loan_conflicts_with_restriction(\n-            old_loan, new_loan, old_loan, new_loan) &&\n-        self.report_error_if_loan_conflicts_with_restriction(\n-            new_loan, old_loan, old_loan, new_loan)\n+        let err_old_new = match self.report_error_if_loan_conflicts_with_restriction(\n+            old_loan, new_loan, old_loan, new_loan\n+        ) {\n+            Err(err) => Some(err),\n+            Ok(_) => None\n+        };\n+\n+        let err_new_old = match self.report_error_if_loan_conflicts_with_restriction(\n+            new_loan, old_loan, old_loan, new_loan\n+        ) {\n+            Err(err) => Some(err),\n+            Ok(_) => None\n+        };\n+\n+        if let Some(mut err_old) = err_old_new {\n+            err_old.emit();\n+            if let Some(mut err_new) = err_new_old {\n+                err_new.cancel();\n+            }\n+        } else if let Some(mut err_new) = err_new_old {\n+            err_new.emit();\n+        } else {\n+            return true;\n+        }\n+\n+        false\n     }\n \n     pub fn report_error_if_loan_conflicts_with_restriction(&self,\n                                                            loan1: &Loan<'tcx>,\n                                                            loan2: &Loan<'tcx>,\n                                                            old_loan: &Loan<'tcx>,\n                                                            new_loan: &Loan<'tcx>)\n-                                                           -> bool {\n+                                                           -> Result<(), DiagnosticBuilder<'a>> {\n         //! Checks whether the restrictions introduced by `loan1` would\n         //! prohibit `loan2`. Returns false if an error is reported.\n \n@@ -416,7 +438,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                loan2);\n \n         if compatible_borrow_kinds(loan1.kind, loan2.kind) {\n-            return true;\n+            return Ok(());\n         }\n \n         let loan2_base_path = owned_ptr_base_path_rc(&loan2.loan_path);\n@@ -520,11 +542,10 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 _ => { }\n             }\n \n-            err.emit();\n-            return false;\n+            return Err(err);\n         }\n \n-        true\n+        Ok(())\n     }\n \n     fn consume_common(&self,"}]}