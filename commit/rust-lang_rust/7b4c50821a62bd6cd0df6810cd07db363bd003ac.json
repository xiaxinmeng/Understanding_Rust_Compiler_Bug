{"sha": "7b4c50821a62bd6cd0df6810cd07db363bd003ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNGM1MDgyMWE2MmJkNmNkMGRmNjgxMGNkMDdkYjM2M2JkMDAzYWM=", "commit": {"author": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2015-01-14T13:51:56Z"}, "committer": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2015-01-18T06:54:23Z"}, "message": "rustdoc: Add Show impls to more clean types", "tree": {"sha": "3fe8401c64e79b184adcded0649211dbe5d2be9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fe8401c64e79b184adcded0649211dbe5d2be9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b4c50821a62bd6cd0df6810cd07db363bd003ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b4c50821a62bd6cd0df6810cd07db363bd003ac", "html_url": "https://github.com/rust-lang/rust/commit/7b4c50821a62bd6cd0df6810cd07db363bd003ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b4c50821a62bd6cd0df6810cd07db363bd003ac/comments", "author": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6da8827482418b6ee89eaf3c66b8693c4cc649e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6da8827482418b6ee89eaf3c66b8693c4cc649e8", "html_url": "https://github.com/rust-lang/rust/commit/6da8827482418b6ee89eaf3c66b8693c4cc649e8"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "c3cd81d3a95fc5d22f88f8c6897cce9734ea7d06", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7b4c50821a62bd6cd0df6810cd07db363bd003ac/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4c50821a62bd6cd0df6810cd07db363bd003ac/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7b4c50821a62bd6cd0df6810cd07db363bd003ac", "patch": "@@ -116,7 +116,7 @@ impl<T: Clean<U>, U> Clean<Vec<U>> for syntax::owned_slice::OwnedSlice<T> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Crate {\n     pub name: String,\n     pub src: FsPath,\n@@ -198,7 +198,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct ExternalCrate {\n     pub name: String,\n     pub attrs: Vec<Attribute>,\n@@ -231,7 +231,7 @@ impl Clean<ExternalCrate> for cstore::crate_metadata {\n /// Anything with a source location and set of attributes and, optionally, a\n /// name. That is, anything that can be documented. This doesn't correspond\n /// directly to the AST's concept of an item; it's a strict superset.\n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Item {\n     /// Stringified span\n     pub source: Span,\n@@ -307,7 +307,7 @@ impl Item {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub enum ItemEnum {\n     StructItem(Struct),\n     EnumItem(Enum),\n@@ -336,7 +336,7 @@ pub enum ItemEnum {\n     AssociatedTypeItem(TyParam),\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Module {\n     pub items: Vec<Item>,\n     pub is_crate: bool,\n@@ -938,7 +938,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>, subst::ParamSpace) {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Method {\n     pub generics: Generics,\n     pub self_: SelfTy,\n@@ -977,7 +977,7 @@ impl Clean<Item> for ast::Method {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct TyMethod {\n     pub unsafety: ast::Unsafety,\n     pub decl: FnDecl,\n@@ -1015,7 +1015,7 @@ impl Clean<Item> for ast::TypeMethod {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n pub enum SelfTy {\n     SelfStatic,\n     SelfValue,\n@@ -1036,7 +1036,7 @@ impl Clean<SelfTy> for ast::ExplicitSelf_ {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n@@ -1153,7 +1153,7 @@ impl Clean<FunctionRetTy> for ast::FunctionRetTy {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Trait {\n     pub unsafety: ast::Unsafety,\n     pub items: Vec<TraitMethod>,\n@@ -1197,11 +1197,11 @@ impl Clean<PolyTrait> for ast::PolyTraitRef {\n \n /// An item belonging to a trait, whether a method or associated. Could be named\n /// TraitItem except that's already taken by an exported enum variant.\n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub enum TraitMethod {\n     RequiredMethod(Item),\n     ProvidedMethod(Item),\n-    TypeTraitItem(Item),\n+    TypeTraitItem(Item), // an associated type\n }\n \n impl TraitMethod {\n@@ -1242,7 +1242,7 @@ impl Clean<TraitMethod> for ast::TraitItem {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub enum ImplMethod {\n     MethodImplItem(Item),\n     TypeImplItem(Item),\n@@ -1378,7 +1378,7 @@ pub enum PrimitiveType {\n     PrimitiveTuple,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Copy, Show)]\n pub enum TypeKind {\n     TypeEnum,\n     TypeFunction,\n@@ -1621,7 +1621,7 @@ impl Clean<Type> for ast::QPath {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub enum StructField {\n     HiddenStructField, // inserted later by strip passes\n     TypedStructField(Type),\n@@ -1680,7 +1680,7 @@ impl Clean<Option<Visibility>> for ast::Visibility {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Struct {\n     pub struct_type: doctree::StructType,\n     pub generics: Generics,\n@@ -1710,7 +1710,7 @@ impl Clean<Item> for doctree::Struct {\n /// This is a more limited form of the standard Struct, different in that\n /// it lacks the things most items have (name, id, parameterization). Found\n /// only as a variant in an enum.\n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct VariantStruct {\n     pub struct_type: doctree::StructType,\n     pub fields: Vec<Item>,\n@@ -1727,7 +1727,7 @@ impl Clean<VariantStruct> for syntax::ast::StructDef {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Enum {\n     pub variants: Vec<Item>,\n     pub generics: Generics,\n@@ -1752,7 +1752,7 @@ impl Clean<Item> for doctree::Enum {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Variant {\n     pub kind: VariantKind,\n }\n@@ -1820,7 +1820,7 @@ impl<'tcx> Clean<Item> for ty::VariantInfo<'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub enum VariantKind {\n     CLikeVariant,\n     TupleVariant(Vec<Type>),\n@@ -1967,7 +1967,7 @@ impl Clean<String> for ast::Name {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Typedef {\n     pub type_: Type,\n     pub generics: Generics,\n@@ -2080,7 +2080,7 @@ impl Clean<Mutability> for ast::Mutability {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Impl {\n     pub generics: Generics,\n     pub trait_: Option<Type>,\n@@ -2118,7 +2118,7 @@ impl Clean<Item> for doctree::Impl {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct ViewItem {\n     pub inner: ViewItemInner,\n }\n@@ -2184,7 +2184,7 @@ impl Clean<Vec<Item>> for ast::ViewItem {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub enum ViewItemInner {\n     ExternCrate(String, Option<String>, ast::NodeId),\n     Import(ViewPath)\n@@ -2207,7 +2207,7 @@ impl Clean<ViewItemInner> for ast::ViewItem_ {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub enum ViewPath {\n     // use source as str;\n     SimpleImport(String, ImportSource),\n@@ -2217,7 +2217,7 @@ pub enum ViewPath {\n     ImportList(ImportSource, Vec<ViewListIdent>),\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct ImportSource {\n     pub path: Path,\n     pub did: Option<ast::DefId>,\n@@ -2238,7 +2238,7 @@ impl Clean<ViewPath> for ast::ViewPath {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct ViewListIdent {\n     pub name: String,\n     pub source: Option<ast::DefId>,\n@@ -2457,7 +2457,7 @@ fn resolve_def(cx: &DocContext, id: ast::NodeId) -> Option<ast::DefId> {\n     })\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Macro {\n     pub source: String,\n }\n@@ -2478,7 +2478,7 @@ impl Clean<Item> for doctree::Macro {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Stability {\n     pub level: attr::StabilityLevel,\n     pub text: String"}]}