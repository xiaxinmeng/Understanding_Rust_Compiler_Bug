{"sha": "f78293c274be2a23889f20942d75e9e45352a336", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ODI5M2MyNzRiZTJhMjM4ODlmMjA5NDJkNzVlOWU0NTM1MmEzMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-10T04:21:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-10T04:21:17Z"}, "message": "auto merge of #11360 : huonw/rust/stack_bounds, r=alexcrichton\n\nWe just approximate with a 2MB stack for native::start.", "tree": {"sha": "3d2f7a36b53f2f5db5719901fb0e6b382814a613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d2f7a36b53f2f5db5719901fb0e6b382814a613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f78293c274be2a23889f20942d75e9e45352a336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f78293c274be2a23889f20942d75e9e45352a336", "html_url": "https://github.com/rust-lang/rust/commit/f78293c274be2a23889f20942d75e9e45352a336", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f78293c274be2a23889f20942d75e9e45352a336/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28ddc6537fcec5eb6033c78709b288abf72e8ae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/28ddc6537fcec5eb6033c78709b288abf72e8ae7", "html_url": "https://github.com/rust-lang/rust/commit/28ddc6537fcec5eb6033c78709b288abf72e8ae7"}, {"sha": "65ce505819b0f2e06ed39802d293bff182aedc16", "url": "https://api.github.com/repos/rust-lang/rust/commits/65ce505819b0f2e06ed39802d293bff182aedc16", "html_url": "https://github.com/rust-lang/rust/commit/65ce505819b0f2e06ed39802d293bff182aedc16"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "4a0523fe47a7a72233f3f14d685bd5b1c43c61b4", "filename": "src/libgreen/simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f78293c274be2a23889f20942d75e9e45352a336/src%2Flibgreen%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78293c274be2a23889f20942d75e9e45352a336/src%2Flibgreen%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsimple.rs?ref=f78293c274be2a23889f20942d75e9e45352a336", "patch": "@@ -75,7 +75,7 @@ impl Runtime for SimpleTask {\n         fail!()\n     }\n     fn local_io<'a>(&'a mut self) -> Option<rtio::LocalIo<'a>> { None }\n-    fn stack_bounds(&self) -> Option<(uint, uint)> { None }\n+    fn stack_bounds(&self) -> (uint, uint) { fail!() }\n     fn wrap(~self) -> ~Any { fail!() }\n }\n "}, {"sha": "31752941231cb9328e57a77becc1a6fe3b0e655e", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f78293c274be2a23889f20942d75e9e45352a336/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78293c274be2a23889f20942d75e9e45352a336/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=f78293c274be2a23889f20942d75e9e45352a336", "patch": "@@ -454,11 +454,12 @@ impl Runtime for GreenTask {\n         }\n     }\n \n-    fn stack_bounds(&self) -> Option<(uint, uint)> {\n-        self.coroutine.as_ref().map(|c| {\n-            (c.current_stack_segment.start() as uint,\n-             c.current_stack_segment.end() as uint)\n-        })\n+    fn stack_bounds(&self) -> (uint, uint) {\n+        let c = self.coroutine.as_ref()\n+            .expect(\"GreenTask.stack_bounds called without a coroutine\");\n+\n+        (c.current_stack_segment.start() as uint,\n+         c.current_stack_segment.end() as uint)\n     }\n \n     fn wrap(~self) -> ~Any { self as ~Any }"}, {"sha": "5acd34955caee30d13af64721481b9abc0084a76", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f78293c274be2a23889f20942d75e9e45352a336/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78293c274be2a23889f20942d75e9e45352a336/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=f78293c274be2a23889f20942d75e9e45352a336", "patch": "@@ -33,6 +33,13 @@ mod bookeeping;\n pub mod io;\n pub mod task;\n \n+#[cfg(windows)]\n+#[cfg(android)]\n+static OS_DEFAULT_STACK_ESTIMATE: uint = 1 << 20;\n+#[cfg(unix, not(android))]\n+static OS_DEFAULT_STACK_ESTIMATE: uint = 2 * (1 << 20);\n+\n+\n // XXX: this should not exist here\n #[cfg(stage0, nativestart)]\n #[lang = \"start\"]\n@@ -66,10 +73,19 @@ pub fn lang_start(main: *u8, argc: int, argv: **u8) -> int {\n /// This function will only return once *all* native threads in the system have\n /// exited.\n pub fn start(argc: int, argv: **u8, main: proc()) -> int {\n+    let something_around_the_top_of_the_stack = 1;\n+    let addr = &something_around_the_top_of_the_stack as *int;\n+    let my_stack_top = addr as uint;\n+\n+    // FIXME #11359 we just assume that this thread has a stack of a\n+    // certain size, and estimate that there's at most 20KB of stack\n+    // frames above our current position.\n+    let my_stack_bottom = my_stack_top + 20000 - OS_DEFAULT_STACK_ESTIMATE;\n+\n     rt::init(argc, argv);\n     let mut exit_code = None;\n     let mut main = Some(main);\n-    task::new().run(|| {\n+    task::new((my_stack_bottom, my_stack_top)).run(|| {\n         exit_code = Some(run(main.take_unwrap()));\n     });\n     unsafe { rt::cleanup(); }"}, {"sha": "e827b495852a45d0db153b92160cb275f5656289", "filename": "src/libnative/task.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f78293c274be2a23889f20942d75e9e45352a336/src%2Flibnative%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78293c274be2a23889f20942d75e9e45352a336/src%2Flibnative%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Ftask.rs?ref=f78293c274be2a23889f20942d75e9e45352a336", "patch": "@@ -30,9 +30,11 @@ use task;\n use bookeeping;\n \n /// Creates a new Task which is ready to execute as a 1:1 task.\n-pub fn new() -> ~Task {\n+pub fn new(stack_bounds: (uint, uint)) -> ~Task {\n     let mut task = ~Task::new();\n-    task.put_runtime(ops() as ~rt::Runtime);\n+    let mut ops = ops();\n+    ops.stack_bounds = stack_bounds;\n+    task.put_runtime(ops as ~rt::Runtime);\n     return task;\n }\n \n@@ -41,7 +43,8 @@ fn ops() -> ~Ops {\n         lock: unsafe { Mutex::new() },\n         awoken: false,\n         io: io::IoFactory::new(),\n-        stack_bounds: None,\n+        // these *should* get overwritten\n+        stack_bounds: (0, 0),\n     }\n }\n \n@@ -95,7 +98,7 @@ pub fn spawn_opts(opts: TaskOpts, f: proc()) {\n             stack::record_stack_bounds(my_stack - stack + 1024, my_stack);\n         }\n         let mut ops = ops;\n-        ops.stack_bounds = Some((my_stack - stack + 1024, my_stack));\n+        ops.stack_bounds = (my_stack - stack + 1024, my_stack);\n \n         let mut f = Some(f);\n         let mut task = task;\n@@ -115,7 +118,7 @@ struct Ops {\n     // This field holds the known bounds of the stack in (lo, hi) form. Not all\n     // native tasks necessarily know their precise bounds, hence this is\n     // optional.\n-    stack_bounds: Option<(uint, uint)>,\n+    stack_bounds: (uint, uint),\n }\n \n impl rt::Runtime for Ops {\n@@ -137,7 +140,7 @@ impl rt::Runtime for Ops {\n         self as ~Any\n     }\n \n-    fn stack_bounds(&self) -> Option<(uint, uint)> { self.stack_bounds }\n+    fn stack_bounds(&self) -> (uint, uint) { self.stack_bounds }\n \n     // This function gets a little interesting. There are a few safety and\n     // ownership violations going on here, but this is all done in the name of"}, {"sha": "e7adb5ad7ddafff8c0b3f7ca878f81c3aeda5447", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f78293c274be2a23889f20942d75e9e45352a336/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78293c274be2a23889f20942d75e9e45352a336/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=f78293c274be2a23889f20942d75e9e45352a336", "patch": "@@ -154,7 +154,8 @@ pub trait Runtime {\n     // you're in.\n     fn spawn_sibling(~self, cur_task: ~Task, opts: TaskOpts, f: proc());\n     fn local_io<'a>(&'a mut self) -> Option<rtio::LocalIo<'a>>;\n-    fn stack_bounds(&self) -> Option<(uint, uint)>; // (lo, hi)\n+    /// The (low, high) edges of the current stack.\n+    fn stack_bounds(&self) -> (uint, uint); // (lo, hi)\n \n     // XXX: This is a serious code smell and this should not exist at all.\n     fn wrap(~self) -> ~Any;"}, {"sha": "b4ead4252ca4158a461da8d94dea3b36a10f82bc", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f78293c274be2a23889f20942d75e9e45352a336/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78293c274be2a23889f20942d75e9e45352a336/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=f78293c274be2a23889f20942d75e9e45352a336", "patch": "@@ -289,7 +289,7 @@ impl Task {\n     /// Returns the stack bounds for this task in (lo, hi) format. The stack\n     /// bounds may not be known for all tasks, so the return value may be\n     /// `None`.\n-    pub fn stack_bounds(&self) -> Option<(uint, uint)> {\n+    pub fn stack_bounds(&self) -> (uint, uint) {\n         self.imp.get_ref().stack_bounds()\n     }\n }"}]}