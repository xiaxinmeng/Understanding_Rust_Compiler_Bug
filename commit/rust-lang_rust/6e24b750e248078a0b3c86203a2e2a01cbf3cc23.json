{"sha": "6e24b750e248078a0b3c86203a2e2a01cbf3cc23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMjRiNzUwZTI0ODA3OGEwYjNjODYyMDNhMmUyYTAxY2JmM2NjMjM=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-22T23:31:30Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-22T23:31:30Z"}, "message": "dlist: Rename rotate methods to .rotate_forward() and .rotate_backward()", "tree": {"sha": "56d9c11b616209c962d07be94d62dd87ebb326fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56d9c11b616209c962d07be94d62dd87ebb326fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e24b750e248078a0b3c86203a2e2a01cbf3cc23", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e24b750e248078a0b3c86203a2e2a01cbf3cc23", "html_url": "https://github.com/rust-lang/rust/commit/6e24b750e248078a0b3c86203a2e2a01cbf3cc23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e24b750e248078a0b3c86203a2e2a01cbf3cc23/comments", "author": null, "committer": null, "parents": [{"sha": "52b4a2eb6f094db7eabcf605598b9266869fa9d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/52b4a2eb6f094db7eabcf605598b9266869fa9d6", "html_url": "https://github.com/rust-lang/rust/commit/52b4a2eb6f094db7eabcf605598b9266869fa9d6"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "77060c4b11e34717b49bcf6cc4103ed6f3398b2e", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6e24b750e248078a0b3c86203a2e2a01cbf3cc23/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e24b750e248078a0b3c86203a2e2a01cbf3cc23/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=6e24b750e248078a0b3c86203a2e2a01cbf3cc23", "patch": "@@ -261,7 +261,7 @@ impl<T> DList<T> {\n     ///\n     /// If the list is empty, do nothing.\n     #[inline]\n-    pub fn rotate_to_front(&mut self) {\n+    pub fn rotate_forward(&mut self) {\n         do self.pop_back_node().map_consume |tail| {\n             self.push_front_node(tail)\n         };\n@@ -271,7 +271,7 @@ impl<T> DList<T> {\n     ///\n     /// If the list is empty, do nothing.\n     #[inline]\n-    pub fn rotate_to_back(&mut self) {\n+    pub fn rotate_backward(&mut self) {\n         do self.pop_front_node().map_consume |head| {\n             self.push_back_node(head)\n         };\n@@ -715,23 +715,23 @@ mod tests {\n     #[test]\n     fn test_rotate() {\n         let mut n = DList::new::<int>();\n-        n.rotate_to_back(); check_links(&n);\n+        n.rotate_backward(); check_links(&n);\n         assert_eq!(n.len(), 0);\n-        n.rotate_to_front(); check_links(&n);\n+        n.rotate_forward(); check_links(&n);\n         assert_eq!(n.len(), 0);\n \n         let v = ~[1,2,3,4,5];\n         let mut m = list_from(v);\n-        m.rotate_to_back(); check_links(&m);\n-        m.rotate_to_front(); check_links(&m);\n+        m.rotate_backward(); check_links(&m);\n+        m.rotate_forward(); check_links(&m);\n         assert_eq!(v.iter().collect::<~[&int]>(), m.iter().collect());\n-        m.rotate_to_front(); check_links(&m);\n-        m.rotate_to_front(); check_links(&m);\n+        m.rotate_forward(); check_links(&m);\n+        m.rotate_forward(); check_links(&m);\n         m.pop_front(); check_links(&m);\n-        m.rotate_to_front(); check_links(&m);\n-        m.rotate_to_back(); check_links(&m);\n+        m.rotate_forward(); check_links(&m);\n+        m.rotate_backward(); check_links(&m);\n         m.push_front(9); check_links(&m);\n-        m.rotate_to_front(); check_links(&m);\n+        m.rotate_forward(); check_links(&m);\n         assert_eq!(~[3,9,5,1,2], m.consume_iter().collect());\n     }\n \n@@ -1015,22 +1015,22 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_rotate_to_front(b: &mut test::BenchHarness) {\n+    fn bench_rotate_forward(b: &mut test::BenchHarness) {\n         let mut m = DList::new::<int>();\n         m.push_front(0);\n         m.push_front(1);\n         do b.iter {\n-            m.rotate_to_front();\n+            m.rotate_forward();\n         }\n     }\n \n     #[bench]\n-    fn bench_rotate_to_back(b: &mut test::BenchHarness) {\n+    fn bench_rotate_backward(b: &mut test::BenchHarness) {\n         let mut m = DList::new::<int>();\n         m.push_front(0);\n         m.push_front(1);\n         do b.iter {\n-            m.rotate_to_back();\n+            m.rotate_backward();\n         }\n     }\n "}]}