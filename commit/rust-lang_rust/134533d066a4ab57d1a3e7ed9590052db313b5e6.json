{"sha": "134533d066a4ab57d1a3e7ed9590052db313b5e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNDUzM2QwNjZhNGFiNTdkMWEzZTdlZDk1OTAwNTJkYjMxM2I1ZTY=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-17T22:38:23Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Add a comment explaining global destructors on MacOS.", "tree": {"sha": "2cabd0b8f4152fc81fe46f78719537986cea5f89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cabd0b8f4152fc81fe46f78719537986cea5f89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/134533d066a4ab57d1a3e7ed9590052db313b5e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/134533d066a4ab57d1a3e7ed9590052db313b5e6", "html_url": "https://github.com/rust-lang/rust/commit/134533d066a4ab57d1a3e7ed9590052db313b5e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/134533d066a4ab57d1a3e7ed9590052db313b5e6/comments", "author": null, "committer": null, "parents": [{"sha": "d062f63519bfe7e366f0cadfdb15073434558351", "url": "https://api.github.com/repos/rust-lang/rust/commits/d062f63519bfe7e366f0cadfdb15073434558351", "html_url": "https://github.com/rust-lang/rust/commit/d062f63519bfe7e366f0cadfdb15073434558351"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "722b24d747525e12f724ca0c9ccca411ca6051a7", "filename": "src/shims/tls.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/134533d066a4ab57d1a3e7ed9590052db313b5e6/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134533d066a4ab57d1a3e7ed9590052db313b5e6/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=134533d066a4ab57d1a3e7ed9590052db313b5e6", "patch": "@@ -114,8 +114,21 @@ impl<'tcx> TlsData<'tcx> {\n         }\n     }\n \n-    /// Set global dtor for the given thread.\n-    pub fn set_global_dtor(&mut self, thread: ThreadId, dtor: ty::Instance<'tcx>, data: Scalar<Tag>) -> InterpResult<'tcx> {\n+    /// Set global dtor for the given thread. This function is used to implement\n+    /// `_tlv_atexit` shim on MacOS.\n+    ///\n+    /// Global destructors are available only on MacOS and (potentially\n+    /// confusingly) they seem to be still per thread as can be guessed from the\n+    /// following comment in the [`_tlv_atexit`\n+    /// implementation](https://github.com/opensource-apple/dyld/blob/195030646877261f0c8c7ad8b001f52d6a26f514/src/threadLocalVariables.c#L389):\n+    ///\n+    ///     // NOTE: this does not need locks because it only operates on current thread data\n+    pub fn set_global_dtor(\n+        &mut self,\n+        thread: ThreadId,\n+        dtor: ty::Instance<'tcx>,\n+        data: Scalar<Tag>\n+    ) -> InterpResult<'tcx> {\n         if self.dtors_running.contains(&thread) {\n             // UB, according to libstd docs.\n             throw_ub_format!(\"setting global destructor while destructors are already running\");"}]}