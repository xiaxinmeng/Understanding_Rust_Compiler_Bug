{"sha": "b439be03c9c30d173c45785a03a03cba98af5ab6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MzliZTAzYzljMzBkMTczYzQ1Nzg1YTAzYTAzY2JhOThhZjVhYjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-15T10:00:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-15T10:00:39Z"}, "message": "Auto merge of #84152 - sexxi-goose:insignificant_dtor, r=nikomatsakis\n\nInsignificant destructors rfc 2229\n\n- Adds new attribute `rustc_insignificant_dtor` to annotate the drop method.\n- Adds a query to check if a type has a significant drop.\n- Updates closure analysis to check for significant drops rather than just drop.\n\nA type marked with the attribute `rustc_insignificant_dtor` is considered to not be significant. A drop is significant if it is implemented by the user or does anything that will have any observable behavior (other than freeing up memory).\n\nhttps://github.com/rust-lang/project-rfc-2229/issues/35", "tree": {"sha": "a52a506e28a243dea285e76fd1d595d7b4d14bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a52a506e28a243dea285e76fd1d595d7b4d14bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b439be03c9c30d173c45785a03a03cba98af5ab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b439be03c9c30d173c45785a03a03cba98af5ab6", "html_url": "https://github.com/rust-lang/rust/commit/b439be03c9c30d173c45785a03a03cba98af5ab6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b439be03c9c30d173c45785a03a03cba98af5ab6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6dd87a6b4a62cf5d2cb6207b1dcea652ea1aa60", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6dd87a6b4a62cf5d2cb6207b1dcea652ea1aa60", "html_url": "https://github.com/rust-lang/rust/commit/c6dd87a6b4a62cf5d2cb6207b1dcea652ea1aa60"}, {"sha": "a7e1cec621d751b1c10b00b45c5b228df1b7d46d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7e1cec621d751b1c10b00b45c5b228df1b7d46d", "html_url": "https://github.com/rust-lang/rust/commit/a7e1cec621d751b1c10b00b45c5b228df1b7d46d"}], "stats": {"total": 344, "additions": 332, "deletions": 12}, "files": [{"sha": "9d96a9baa50c8da93def940f152ed8bc329dc94f", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b439be03c9c30d173c45785a03a03cba98af5ab6/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b439be03c9c30d173c45785a03a03cba98af5ab6/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=b439be03c9c30d173c45785a03a03cba98af5ab6", "patch": "@@ -700,6 +700,7 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::native_link_modifiers_verbatim,\n     sym::native_link_modifiers_whole_archive,\n     sym::native_link_modifiers_as_needed,\n+    sym::rustc_insignificant_dtor,\n ];\n \n /// Some features are not allowed to be used together at the same time, if"}, {"sha": "e7e128f8a9b21e23bdbc4f74874e6462c9bcf6e2", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b439be03c9c30d173c45785a03a03cba98af5ab6/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b439be03c9c30d173c45785a03a03cba98af5ab6/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=b439be03c9c30d173c45785a03a03cba98af5ab6", "patch": "@@ -556,6 +556,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     rustc_attr!(TEST, rustc_outlives, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_capture_analysis, Normal, template!(Word)),\n+    rustc_attr!(TEST, rustc_insignificant_dtor, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_variance, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_layout, Normal, template!(List: \"field1, field2, ...\")),\n     rustc_attr!(TEST, rustc_regions, Normal, template!(Word)),"}, {"sha": "dfb67d92521ca2f90f0979d3383435b2133e9e4c", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b439be03c9c30d173c45785a03a03cba98af5ab6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b439be03c9c30d173c45785a03a03cba98af5ab6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=b439be03c9c30d173c45785a03a03cba98af5ab6", "patch": "@@ -1035,6 +1035,10 @@ rustc_queries! {\n     query needs_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` needs drop\", env.value }\n     }\n+    /// Query backing `TyS::has_significant_drop_raw`.\n+    query has_significant_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n+        desc { \"computing whether `{}` has a significant drop\", env.value }\n+    }\n \n     /// Query backing `TyS::is_structural_eq_shallow`.\n     ///\n@@ -1055,6 +1059,17 @@ rustc_queries! {\n         cache_on_disk_if { true }\n     }\n \n+    /// A list of types where the ADT requires drop if and only if any of those types\n+    /// has significant drop. A type marked with the attribute `rustc_insignificant_dtor`\n+    /// is considered to not be significant. A drop is significant if it is implemented\n+    /// by the user or does anything that will have any observable behavior (other than\n+    /// freeing up memory). If the ADT is known to have a significant destructor then\n+    /// `Err(AlwaysRequiresDrop)` is returned.\n+    query adt_significant_drop_tys(def_id: DefId) -> Result<&'tcx ty::List<Ty<'tcx>>, AlwaysRequiresDrop> {\n+        desc { |tcx| \"computing when `{}` has a significant destructor\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { false }\n+    }\n+\n     query layout_raw(\n         env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>\n     ) -> Result<&'tcx rustc_target::abi::Layout, ty::layout::LayoutError<'tcx>> {"}, {"sha": "7bf69b9e637e9a41334728e7c2373e1d7aacca45", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b439be03c9c30d173c45785a03a03cba98af5ab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b439be03c9c30d173c45785a03a03cba98af5ab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=b439be03c9c30d173c45785a03a03cba98af5ab6", "patch": "@@ -791,6 +791,39 @@ impl<'tcx> ty::TyS<'tcx> {\n         }\n     }\n \n+    /// Checks if `ty` has has a significant drop.\n+    ///\n+    /// Note that this method can return false even if `ty` has a destructor\n+    /// attached; even if that is the case then the adt has been marked with\n+    /// the attribute `rustc_insignificant_dtor`.\n+    ///\n+    /// Note that this method is used to check for change in drop order for\n+    /// 2229 drop reorder migration analysis.\n+    #[inline]\n+    pub fn has_significant_drop(\n+        &'tcx self,\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> bool {\n+        // Avoid querying in simple cases.\n+        match needs_drop_components(self, &tcx.data_layout) {\n+            Err(AlwaysRequiresDrop) => true,\n+            Ok(components) => {\n+                let query_ty = match *components {\n+                    [] => return false,\n+                    // If we've got a single component, call the query with that\n+                    // to increase the chance that we hit the query cache.\n+                    [component_ty] => component_ty,\n+                    _ => self,\n+                };\n+                // This doesn't depend on regions, so try to minimize distinct\n+                // query keys used.\n+                let erased = tcx.normalize_erasing_regions(param_env, query_ty);\n+                tcx.has_significant_drop_raw(param_env.and(erased))\n+            }\n+        }\n+    }\n+\n     /// Returns `true` if equality for this type is both reflexive and structural.\n     ///\n     /// Reflexive equality for a type is indicated by an `Eq` impl for that type."}, {"sha": "c9816c2d5991346b7a452ae9b0ca9f33ec316543", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b439be03c9c30d173c45785a03a03cba98af5ab6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b439be03c9c30d173c45785a03a03cba98af5ab6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=b439be03c9c30d173c45785a03a03cba98af5ab6", "patch": "@@ -1015,6 +1015,7 @@ symbols! {\n         rustc_expected_cgu_reuse,\n         rustc_if_this_changed,\n         rustc_inherit_overflow_checks,\n+        rustc_insignificant_dtor,\n         rustc_layout,\n         rustc_layout_scalar_valid_range_end,\n         rustc_layout_scalar_valid_range_start,"}, {"sha": "bc8f10e15db8cb180ccaaf1e7898021490549763", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b439be03c9c30d173c45785a03a03cba98af5ab6/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b439be03c9c30d173c45785a03a03cba98af5ab6/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=b439be03c9c30d173c45785a03a03cba98af5ab6", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::util::{needs_drop_components, AlwaysRequiresDrop};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::Limit;\n-use rustc_span::DUMMY_SP;\n+use rustc_span::{sym, DUMMY_SP};\n \n type NeedsDropResult<T> = Result<T, AlwaysRequiresDrop>;\n \n@@ -21,6 +21,19 @@ fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>\n     res\n }\n \n+fn has_significant_drop_raw<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n+) -> bool {\n+    let significant_drop_fields =\n+        move |adt_def: &ty::AdtDef| tcx.adt_significant_drop_tys(adt_def.did).map(|tys| tys.iter());\n+    let res = NeedsDropTypes::new(tcx, query.param_env, query.value, significant_drop_fields)\n+        .next()\n+        .is_some();\n+    debug!(\"has_significant_drop_raw({:?}) = {:?}\", query, res);\n+    res\n+}\n+\n struct NeedsDropTypes<'tcx, F> {\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -155,12 +168,20 @@ where\n     }\n }\n \n-fn adt_drop_tys(tcx: TyCtxt<'_>, def_id: DefId) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n+// This is a helper function for `adt_drop_tys` and `adt_significant_drop_tys`.\n+// Depending on the implentation of `adt_has_dtor`, it is used to check if the\n+// ADT has a destructor or if the ADT only has a significant destructor. For\n+// understanding significant destructor look at `adt_significant_drop_tys`.\n+fn adt_drop_tys_helper(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+    adt_has_dtor: impl Fn(&ty::AdtDef) -> bool,\n+) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n     let adt_components = move |adt_def: &ty::AdtDef| {\n         if adt_def.is_manually_drop() {\n             debug!(\"adt_drop_tys: `{:?}` is manually drop\", adt_def);\n             return Ok(Vec::new().into_iter());\n-        } else if adt_def.destructor(tcx).is_some() {\n+        } else if adt_has_dtor(adt_def) {\n             debug!(\"adt_drop_tys: `{:?}` implements `Drop`\", adt_def);\n             return Err(AlwaysRequiresDrop);\n         } else if adt_def.is_union() {\n@@ -179,6 +200,30 @@ fn adt_drop_tys(tcx: TyCtxt<'_>, def_id: DefId) -> Result<&ty::List<Ty<'_>>, Alw\n     res.map(|components| tcx.intern_type_list(&components))\n }\n \n+fn adt_drop_tys(tcx: TyCtxt<'_>, def_id: DefId) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n+    let adt_has_dtor = |adt_def: &ty::AdtDef| adt_def.destructor(tcx).is_some();\n+    adt_drop_tys_helper(tcx, def_id, adt_has_dtor)\n+}\n+\n+fn adt_significant_drop_tys(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n+    let adt_has_dtor = |adt_def: &ty::AdtDef| {\n+        adt_def\n+            .destructor(tcx)\n+            .map(|dtor| !tcx.has_attr(dtor.did, sym::rustc_insignificant_dtor))\n+            .unwrap_or(false)\n+    };\n+    adt_drop_tys_helper(tcx, def_id, adt_has_dtor)\n+}\n+\n pub(crate) fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { needs_drop_raw, adt_drop_tys, ..*providers };\n+    *providers = ty::query::Providers {\n+        needs_drop_raw,\n+        has_significant_drop_raw,\n+        adt_drop_tys,\n+        adt_significant_drop_tys,\n+        ..*providers\n+    };\n }"}, {"sha": "ff506ef8727b9e3bd5e58e9a4b2e4073da9c466c", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b439be03c9c30d173c45785a03a03cba98af5ab6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b439be03c9c30d173c45785a03a03cba98af5ab6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=b439be03c9c30d173c45785a03a03cba98af5ab6", "patch": "@@ -706,6 +706,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///   enabled, **and**\n     /// - It wasn't completely captured by the closure, **and**\n     /// - One of the paths starting at this root variable, that is not captured needs Drop.\n+    ///\n+    /// This function only returns true for significant drops. A type is considerent to have a\n+    /// significant drop if it's Drop implementation is not annotated by `rustc_insignificant_dtor`.\n     fn compute_2229_migrations_for_drop(\n         &self,\n         closure_def_id: DefId,\n@@ -716,7 +719,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> bool {\n         let ty = self.infcx.resolve_vars_if_possible(self.node_ty(var_hir_id));\n \n-        if !ty.needs_drop(self.tcx, self.tcx.param_env(closure_def_id.expect_local())) {\n+        if !ty.has_significant_drop(self.tcx, self.tcx.param_env(closure_def_id.expect_local())) {\n             return false;\n         }\n \n@@ -835,11 +838,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// using list of `Projection` slices), it returns true if there is a path that is not\n     /// captured starting at this root variable that implements Drop.\n     ///\n-    /// FIXME(project-rfc-2229#35): This should return true only for significant drops.\n-    ///                             A drop is significant if it's implemented by the user or does\n-    ///                             anything that will have any observable behavior (other than\n-    ///                             freeing up memory).\n-    ///\n     /// The way this function works is at a given call it looks at type `base_path_ty` of some base\n     /// path say P and then list of projection slices which represent the different captures moved\n     /// into the closure starting off of P.\n@@ -895,7 +893,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///     (Ty((w.p).x), [ &[] ])     (Ty((w.p).y), []) // IMP 2\n     ///          |                             |\n     ///          v                             v\n-    ///        false                     NeedsDrop(Ty(w.p.y))\n+    ///        false              NeedsSignificantDrop(Ty(w.p.y))\n     ///                                        |\n     ///                                        v\n     ///                                      true\n@@ -939,7 +937,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         captured_by_move_projs: Vec<&[Projection<'tcx>]>,\n     ) -> bool {\n         let needs_drop = |ty: Ty<'tcx>| {\n-            ty.needs_drop(self.tcx, self.tcx.param_env(closure_def_id.expect_local()))\n+            ty.has_significant_drop(self.tcx, self.tcx.param_env(closure_def_id.expect_local()))\n         };\n \n         let is_drop_defined_for_ty = |ty: Ty<'tcx>| {"}, {"sha": "e89cc2c8fb3618bc0e5c8e29b0aabcf3beee9e06", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.fixed", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b439be03c9c30d173c45785a03a03cba98af5ab6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b439be03c9c30d173c45785a03a03cba98af5ab6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed?ref=b439be03c9c30d173c45785a03a03cba98af5ab6", "patch": "@@ -0,0 +1,67 @@\n+// run-rustfix\n+\n+#![deny(disjoint_capture_migration)]\n+//~^ NOTE: the lint level is defined here\n+\n+#![feature(rustc_attrs)]\n+#![allow(unused)]\n+\n+struct InsignificantDropPoint {\n+    x: i32,\n+    y: i32,\n+}\n+\n+impl Drop for InsignificantDropPoint {\n+    #[rustc_insignificant_dtor]\n+    fn drop(&mut self) {}\n+}\n+\n+struct SigDrop;\n+\n+impl Drop for SigDrop {\n+    fn drop(&mut self) {}\n+}\n+\n+struct GenericStruct<T>(T, T);\n+\n+struct Wrapper<T>(GenericStruct<T>, i32);\n+\n+impl<T> Drop for GenericStruct<T> {\n+    #[rustc_insignificant_dtor]\n+    fn drop(&mut self) {}\n+}\n+\n+// `SigDrop` implements drop and therefore needs to be migrated.\n+fn significant_drop_needs_migration() {\n+    let t = (SigDrop {}, SigDrop {});\n+\n+    let c = || { let _ = &t; \n+    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        let _t = t.0;\n+    };\n+\n+    c();\n+}\n+\n+// Even if a type implements an insignificant drop, if it's\n+// elements have a significant drop then the overall type is\n+// consdered to have an significant drop. Since the elements\n+// of `GenericStruct` implement drop, migration is required.\n+fn generic_struct_with_significant_drop_needs_migration() {\n+    let t = Wrapper(GenericStruct(SigDrop {}, SigDrop {}), 5);\n+\n+    // move is used to force i32 to be copied instead of being a ref\n+    let c = move || { let _ = &t; \n+    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        let _t = t.1;\n+    };\n+\n+    c();\n+}\n+\n+fn main() {\n+    significant_drop_needs_migration();\n+    generic_struct_with_significant_drop_needs_migration();\n+}"}, {"sha": "e16cd9d52b78c010a44544b565677893440938d1", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b439be03c9c30d173c45785a03a03cba98af5ab6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b439be03c9c30d173c45785a03a03cba98af5ab6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs?ref=b439be03c9c30d173c45785a03a03cba98af5ab6", "patch": "@@ -0,0 +1,67 @@\n+// run-rustfix\n+\n+#![deny(disjoint_capture_migration)]\n+//~^ NOTE: the lint level is defined here\n+\n+#![feature(rustc_attrs)]\n+#![allow(unused)]\n+\n+struct InsignificantDropPoint {\n+    x: i32,\n+    y: i32,\n+}\n+\n+impl Drop for InsignificantDropPoint {\n+    #[rustc_insignificant_dtor]\n+    fn drop(&mut self) {}\n+}\n+\n+struct SigDrop;\n+\n+impl Drop for SigDrop {\n+    fn drop(&mut self) {}\n+}\n+\n+struct GenericStruct<T>(T, T);\n+\n+struct Wrapper<T>(GenericStruct<T>, i32);\n+\n+impl<T> Drop for GenericStruct<T> {\n+    #[rustc_insignificant_dtor]\n+    fn drop(&mut self) {}\n+}\n+\n+// `SigDrop` implements drop and therefore needs to be migrated.\n+fn significant_drop_needs_migration() {\n+    let t = (SigDrop {}, SigDrop {});\n+\n+    let c = || {\n+    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        let _t = t.0;\n+    };\n+\n+    c();\n+}\n+\n+// Even if a type implements an insignificant drop, if it's\n+// elements have a significant drop then the overall type is\n+// consdered to have an significant drop. Since the elements\n+// of `GenericStruct` implement drop, migration is required.\n+fn generic_struct_with_significant_drop_needs_migration() {\n+    let t = Wrapper(GenericStruct(SigDrop {}, SigDrop {}), 5);\n+\n+    // move is used to force i32 to be copied instead of being a ref\n+    let c = move || {\n+    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        let _t = t.1;\n+    };\n+\n+    c();\n+}\n+\n+fn main() {\n+    significant_drop_needs_migration();\n+    generic_struct_with_significant_drop_needs_migration();\n+}"}, {"sha": "2b141656be2a8d0002349a4afa930af8bdb9136d", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b439be03c9c30d173c45785a03a03cba98af5ab6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b439be03c9c30d173c45785a03a03cba98af5ab6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=b439be03c9c30d173c45785a03a03cba98af5ab6", "patch": "@@ -0,0 +1,47 @@\n+error: drop order affected for closure because of `capture_disjoint_fields`\n+  --> $DIR/insignificant_drop_attr_migrations.rs:38:13\n+   |\n+LL |       let c = || {\n+   |  _____________^\n+LL | |\n+LL | |\n+LL | |         let _t = t.0;\n+LL | |     };\n+   | |_____^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/insignificant_drop_attr_migrations.rs:3:9\n+   |\n+LL | #![deny(disjoint_capture_migration)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: add a dummy let to cause `t` to be fully captured\n+   |\n+LL |     let c = || { let _ = &t; \n+LL |\n+LL |\n+LL |         let _t = t.0;\n+LL |     };\n+   |\n+\n+error: drop order affected for closure because of `capture_disjoint_fields`\n+  --> $DIR/insignificant_drop_attr_migrations.rs:55:13\n+   |\n+LL |       let c = move || {\n+   |  _____________^\n+LL | |\n+LL | |\n+LL | |         let _t = t.1;\n+LL | |     };\n+   | |_____^\n+   |\n+help: add a dummy let to cause `t` to be fully captured\n+   |\n+LL |     let c = move || { let _ = &t; \n+LL |\n+LL |\n+LL |         let _t = t.1;\n+LL |     };\n+   |\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a00377456ac8db33d95ffff43c9ee38111b5a54b", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_no_migrations.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b439be03c9c30d173c45785a03a03cba98af5ab6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_no_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b439be03c9c30d173c45785a03a03cba98af5ab6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_no_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_no_migrations.rs?ref=b439be03c9c30d173c45785a03a03cba98af5ab6", "patch": "@@ -0,0 +1,45 @@\n+// run-pass\n+\n+#![deny(disjoint_capture_migration)]\n+#![feature(rustc_attrs)]\n+#![allow(unused)]\n+\n+struct InsignificantDropPoint {\n+    x: i32,\n+    y: i32,\n+}\n+\n+impl Drop for InsignificantDropPoint {\n+    #[rustc_insignificant_dtor]\n+    fn drop(&mut self) {}\n+}\n+\n+struct GenericStruct<T>(T, T);\n+\n+// No drop reordering is required as the elements of `t` implement insignificant drop\n+fn insignificant_drop_does_not_need_migration() {\n+    let t = (InsignificantDropPoint { x: 4, y: 9 }, InsignificantDropPoint { x: 4, y: 9 });\n+\n+    let c = || {\n+        let _t = t.0;\n+    };\n+\n+    c();\n+}\n+\n+// Generic struct whose elements don't have significant drops don't need drop reordering\n+fn generic_struct_with_insignificant_drop_does_not_need_migration() {\n+    let t =\n+        GenericStruct(InsignificantDropPoint { x: 4, y: 9 }, InsignificantDropPoint { x: 4, y: 9 });\n+\n+    let c = || {\n+        let _t = t.0;\n+    };\n+\n+    c();\n+}\n+\n+fn main() {\n+    insignificant_drop_does_not_need_migration();\n+    generic_struct_with_insignificant_drop_does_not_need_migration();\n+}"}]}