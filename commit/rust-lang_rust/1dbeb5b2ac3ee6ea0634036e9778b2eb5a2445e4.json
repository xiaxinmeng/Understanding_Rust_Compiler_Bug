{"sha": "1dbeb5b2ac3ee6ea0634036e9778b2eb5a2445e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYmViNWIyYWMzZWU2ZWEwNjM0MDM2ZTk3NzhiMmViNWEyNDQ1ZTQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-28T00:42:11Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:59Z"}, "message": "libsyntax: De-`@mut` `SCTable`", "tree": {"sha": "5a89601891b2c54fe9e27ce16fb0486e9b9fe3ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a89601891b2c54fe9e27ce16fb0486e9b9fe3ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dbeb5b2ac3ee6ea0634036e9778b2eb5a2445e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dbeb5b2ac3ee6ea0634036e9778b2eb5a2445e4", "html_url": "https://github.com/rust-lang/rust/commit/1dbeb5b2ac3ee6ea0634036e9778b2eb5a2445e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dbeb5b2ac3ee6ea0634036e9778b2eb5a2445e4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b476d979d2102078f6106247488d28a4e2fd8881", "url": "https://api.github.com/repos/rust-lang/rust/commits/b476d979d2102078f6106247488d28a4e2fd8881", "html_url": "https://github.com/rust-lang/rust/commit/b476d979d2102078f6106247488d28a4e2fd8881"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "9d62eaee5c3bfcf636c28e66bf7af61084587fc2", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dbeb5b2ac3ee6ea0634036e9778b2eb5a2445e4/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbeb5b2ac3ee6ea0634036e9778b2eb5a2445e4/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=1dbeb5b2ac3ee6ea0634036e9778b2eb5a2445e4", "patch": "@@ -710,8 +710,8 @@ pub fn new_mark(m:Mrk, tail:SyntaxContext) -> SyntaxContext {\n \n // Extend a syntax context with a given mark and table\n // FIXME #8215 : currently pub to allow testing\n-pub fn new_mark_internal(m:Mrk, tail:SyntaxContext,table:&mut SCTable)\n-    -> SyntaxContext {\n+pub fn new_mark_internal(m: Mrk, tail: SyntaxContext, table: &SCTable)\n+                         -> SyntaxContext {\n     let key = (tail,m);\n     // FIXME #5074 : can't use more natural style because we're missing\n     // flow-sensitivity. Results in two lookups on a hash table hit.\n@@ -743,8 +743,11 @@ pub fn new_rename(id:Ident, to:Name, tail:SyntaxContext) -> SyntaxContext {\n \n // Extend a syntax context with a given rename and sctable\n // FIXME #8215 : currently pub to allow testing\n-pub fn new_rename_internal(id:Ident, to:Name, tail:SyntaxContext, table: &mut SCTable)\n-    -> SyntaxContext {\n+pub fn new_rename_internal(id: Ident,\n+                           to: Name,\n+                           tail: SyntaxContext,\n+                           table: &SCTable)\n+                           -> SyntaxContext {\n     let key = (tail,id,to);\n     // FIXME #5074\n     //let try_lookup = table.rename_memo.find(&key);\n@@ -779,11 +782,11 @@ pub fn new_sctable_internal() -> SCTable {\n }\n \n // fetch the SCTable from TLS, create one if it doesn't yet exist.\n-pub fn get_sctable() -> @mut SCTable {\n-    local_data_key!(sctable_key: @@mut SCTable)\n+pub fn get_sctable() -> @SCTable {\n+    local_data_key!(sctable_key: @@SCTable)\n     match local_data::get(sctable_key, |k| k.map(|k| *k)) {\n         None => {\n-            let new_table = @@mut new_sctable_internal();\n+            let new_table = @@new_sctable_internal();\n             local_data::set(sctable_key,new_table);\n             *new_table\n         },\n@@ -835,7 +838,7 @@ pub fn get_resolve_table() -> @RefCell<ResolveTable> {\n // adding memoization to possibly resolve 500+ seconds in resolve for librustc (!)\n // FIXME #8215 : currently pub to allow testing\n pub fn resolve_internal(id : Ident,\n-                        table : &mut SCTable,\n+                        table : &SCTable,\n                         resolve_table : &mut ResolveTable) -> Name {\n     let key = (id.name,id.ctxt);\n     match resolve_table.contains_key(&key) {\n@@ -1024,7 +1027,7 @@ mod test {\n \n     // unfold a vector of TestSC values into a SCTable,\n     // returning the resulting index\n-    fn unfold_test_sc(tscs : ~[TestSC], tail: SyntaxContext, table : &mut SCTable)\n+    fn unfold_test_sc(tscs : ~[TestSC], tail: SyntaxContext, table: &SCTable)\n         -> SyntaxContext {\n         tscs.rev_iter().fold(tail, |tail : SyntaxContext, tsc : &TestSC|\n                   {match *tsc {\n@@ -1070,7 +1073,8 @@ mod test {\n \n     // extend a syntax context with a sequence of marks given\n     // in a vector. v[0] will be the outermost mark.\n-    fn unfold_marks(mrks:~[Mrk],tail:SyntaxContext,table: &mut SCTable) -> SyntaxContext {\n+    fn unfold_marks(mrks: ~[Mrk], tail: SyntaxContext, table: &SCTable)\n+                    -> SyntaxContext {\n         mrks.rev_iter().fold(tail, |tail:SyntaxContext, mrk:&Mrk|\n                    {new_mark_internal(*mrk,tail,table)})\n     }"}]}