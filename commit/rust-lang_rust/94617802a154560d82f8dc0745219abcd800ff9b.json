{"sha": "94617802a154560d82f8dc0745219abcd800ff9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NjE3ODAyYTE1NDU2MGQ4MmY4ZGMwNzQ1MjE5YWJjZDgwMGZmOWI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-12T15:19:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-12T15:19:25Z"}, "message": "Rollup merge of #84793 - estebank:parse-struct-field-default, r=davidtwco\n\nRecover from invalid `struct` item syntax\n\nParse unsupported \"default field const values\":\n\n```rust\nstruct S {\n    field: Type = const_val,\n}\n```\n\nRecover from small `:` typo and provide suggestion:\n\n```rust\nstruct S {\n    field; Type,\n    field2= Type,\n}\n```", "tree": {"sha": "fd45435a8fa23223fabda5fe6714f6cda0c3ef2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd45435a8fa23223fabda5fe6714f6cda0c3ef2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94617802a154560d82f8dc0745219abcd800ff9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgm/H9CRBK7hj4Ov3rIwAAbLoIAIr4rqWk6E12m2VmKBuNV2C2\n7kkMOx+DaVv3iwriX9HK6rlA4G68j8d9G/SYOGrdQvNwcBrm6r8WymnXEJT8IQa1\nZc4SM6V8GrK6FWP+iHdbcn4yZitg7fCMskWGI3OS2LxkHY5vLa4WzWXj8rKmsui+\nLAwPOGP8wj/Aaz3TtC75geFyRl6MacT8z5ytP6TvAKg1gFFNy2d+Rv57aYt9/8ra\nX52K0AbouJkK4L2jCvD9xfFiLfTfouUeSlEDYfPllXSVsWyHL0/v+2/N70vZoAjV\nGHXMEkwfbrgm76Q9uDQIP0lT5DFKX15M9xlH1KLaVu+ntouZsOZ30R0vM8aPZ8U=\n=qExQ\n-----END PGP SIGNATURE-----\n", "payload": "tree fd45435a8fa23223fabda5fe6714f6cda0c3ef2b\nparent e1ff91f439bc09f566da211c6449821b4e949279\nparent 7697ce4560b7799f5fb7e48524b5a347ba893b4e\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1620832765 +0200\ncommitter GitHub <noreply@github.com> 1620832765 +0200\n\nRollup merge of #84793 - estebank:parse-struct-field-default, r=davidtwco\n\nRecover from invalid `struct` item syntax\n\nParse unsupported \"default field const values\":\n\n```rust\nstruct S {\n    field: Type = const_val,\n}\n```\n\nRecover from small `:` typo and provide suggestion:\n\n```rust\nstruct S {\n    field; Type,\n    field2= Type,\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94617802a154560d82f8dc0745219abcd800ff9b", "html_url": "https://github.com/rust-lang/rust/commit/94617802a154560d82f8dc0745219abcd800ff9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94617802a154560d82f8dc0745219abcd800ff9b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1ff91f439bc09f566da211c6449821b4e949279", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1ff91f439bc09f566da211c6449821b4e949279", "html_url": "https://github.com/rust-lang/rust/commit/e1ff91f439bc09f566da211c6449821b4e949279"}, {"sha": "7697ce4560b7799f5fb7e48524b5a347ba893b4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7697ce4560b7799f5fb7e48524b5a347ba893b4e", "html_url": "https://github.com/rust-lang/rust/commit/7697ce4560b7799f5fb7e48524b5a347ba893b4e"}], "stats": {"total": 208, "additions": 207, "deletions": 1}, "files": [{"sha": "b2b578f1ed44a41a1c84df1e42d8da5fb15a425b", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/94617802a154560d82f8dc0745219abcd800ff9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94617802a154560d82f8dc0745219abcd800ff9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=94617802a154560d82f8dc0745219abcd800ff9b", "patch": "@@ -1399,6 +1399,37 @@ impl<'a> Parser<'a> {\n         Ok(a_var)\n     }\n \n+    fn expect_field_ty_separator(&mut self) -> PResult<'a, ()> {\n+        if let Err(mut err) = self.expect(&token::Colon) {\n+            let sm = self.sess.source_map();\n+            let eq_typo = self.token.kind == token::Eq && self.look_ahead(1, |t| t.is_path_start());\n+            let semi_typo = self.token.kind == token::Semi\n+                && self.look_ahead(1, |t| {\n+                    t.is_path_start()\n+                    // We check that we are in a situation like `foo; bar` to avoid bad suggestions\n+                    // when there's no type and `;` was used instead of a comma.\n+                    && match (sm.lookup_line(self.token.span.hi()), sm.lookup_line(t.span.lo())) {\n+                        (Ok(l), Ok(r)) => l.line == r.line,\n+                        _ => true,\n+                    }\n+                });\n+            if eq_typo || semi_typo {\n+                self.bump();\n+                // Gracefully handle small typos.\n+                err.span_suggestion_short(\n+                    self.prev_token.span,\n+                    \"field names and their types are separated with `:`\",\n+                    \":\".to_string(),\n+                    Applicability::MachineApplicable,\n+                );\n+                err.emit();\n+            } else {\n+                return Err(err);\n+            }\n+        }\n+        Ok(())\n+    }\n+\n     /// Parses a structure field.\n     fn parse_name_and_ty(\n         &mut self,\n@@ -1408,8 +1439,21 @@ impl<'a> Parser<'a> {\n         attrs: Vec<Attribute>,\n     ) -> PResult<'a, FieldDef> {\n         let name = self.parse_field_ident(adt_ty, lo)?;\n-        self.expect(&token::Colon)?;\n+        self.expect_field_ty_separator()?;\n         let ty = self.parse_ty()?;\n+        if self.token.kind == token::Eq {\n+            self.bump();\n+            let const_expr = self.parse_anon_const_expr()?;\n+            let sp = ty.span.shrink_to_hi().to(const_expr.value.span);\n+            self.struct_span_err(sp, \"default values on `struct` fields aren't supported\")\n+                .span_suggestion(\n+                    sp,\n+                    \"remove this unsupported default value\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+        }\n         Ok(FieldDef {\n             span: lo.to(self.prev_token.span),\n             ident: Some(name),"}, {"sha": "28191b82621fdc518dbaebb7fedffa30e480c28b", "filename": "src/test/ui/parser/struct-default-values-and-missing-field-separator.fixed", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/94617802a154560d82f8dc0745219abcd800ff9b/src%2Ftest%2Fui%2Fparser%2Fstruct-default-values-and-missing-field-separator.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/94617802a154560d82f8dc0745219abcd800ff9b/src%2Ftest%2Fui%2Fparser%2Fstruct-default-values-and-missing-field-separator.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-default-values-and-missing-field-separator.fixed?ref=94617802a154560d82f8dc0745219abcd800ff9b", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+enum E {\n+    A,\n+}\n+\n+struct S {\n+    field1: i32, //~ ERROR default values on `struct` fields aren't supported\n+    field2: E, //~ ERROR default values on `struct` fields aren't supported\n+    field3: i32, //~ ERROR default values on `struct` fields aren't supported\n+    field4: i32, //~ ERROR default values on `struct` fields aren't supported\n+    field5: E, //~ ERROR default values on `struct` fields aren't supported\n+    field6: E, //~ ERROR default values on `struct` fields aren't supported\n+}\n+\n+struct S1 {\n+    field1: i32, //~ ERROR expected `,`, or `}`, found `field2`\n+    field2: E, //~ ERROR expected `,`, or `}`, found `field3`\n+    field3: i32, //~ ERROR default values on `struct` fields aren't supported\n+    field4: i32, //~ ERROR default values on `struct` fields aren't supported\n+    field5: E, //~ ERROR default values on `struct` fields aren't supported\n+    field6: E, //~ ERROR default values on `struct` fields aren't supported\n+}\n+\n+struct S2 {\n+    field1 : i32, //~ ERROR expected `:`, found `=`\n+    field2: E, //~ ERROR expected `:`, found `;`\n+}\n+\n+const fn foo(_: i32) -> E {\n+    E::A\n+}\n+\n+fn main() {}"}, {"sha": "924cb08a990a56ea73d3a659b63a4736aca31861", "filename": "src/test/ui/parser/struct-default-values-and-missing-field-separator.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/94617802a154560d82f8dc0745219abcd800ff9b/src%2Ftest%2Fui%2Fparser%2Fstruct-default-values-and-missing-field-separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94617802a154560d82f8dc0745219abcd800ff9b/src%2Ftest%2Fui%2Fparser%2Fstruct-default-values-and-missing-field-separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-default-values-and-missing-field-separator.rs?ref=94617802a154560d82f8dc0745219abcd800ff9b", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+enum E {\n+    A,\n+}\n+\n+struct S {\n+    field1: i32 = 42, //~ ERROR default values on `struct` fields aren't supported\n+    field2: E = E::A, //~ ERROR default values on `struct` fields aren't supported\n+    field3: i32 = 1 + 2, //~ ERROR default values on `struct` fields aren't supported\n+    field4: i32 = { 1 + 2 }, //~ ERROR default values on `struct` fields aren't supported\n+    field5: E = foo(42), //~ ERROR default values on `struct` fields aren't supported\n+    field6: E = { foo(42) }, //~ ERROR default values on `struct` fields aren't supported\n+}\n+\n+struct S1 {\n+    field1: i32 //~ ERROR expected `,`, or `}`, found `field2`\n+    field2: E //~ ERROR expected `,`, or `}`, found `field3`\n+    field3: i32 = 1 + 2, //~ ERROR default values on `struct` fields aren't supported\n+    field4: i32 = { 1 + 2 }, //~ ERROR default values on `struct` fields aren't supported\n+    field5: E = foo(42), //~ ERROR default values on `struct` fields aren't supported\n+    field6: E = { foo(42) }, //~ ERROR default values on `struct` fields aren't supported\n+}\n+\n+struct S2 {\n+    field1 = i32, //~ ERROR expected `:`, found `=`\n+    field2; E, //~ ERROR expected `:`, found `;`\n+}\n+\n+const fn foo(_: i32) -> E {\n+    E::A\n+}\n+\n+fn main() {}"}, {"sha": "7f16ebcfc3ace26b8c82a3dd1eadb84c1635254d", "filename": "src/test/ui/parser/struct-default-values-and-missing-field-separator.stderr", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/94617802a154560d82f8dc0745219abcd800ff9b/src%2Ftest%2Fui%2Fparser%2Fstruct-default-values-and-missing-field-separator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94617802a154560d82f8dc0745219abcd800ff9b/src%2Ftest%2Fui%2Fparser%2Fstruct-default-values-and-missing-field-separator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-default-values-and-missing-field-separator.stderr?ref=94617802a154560d82f8dc0745219abcd800ff9b", "patch": "@@ -0,0 +1,92 @@\n+error: default values on `struct` fields aren't supported\n+  --> $DIR/struct-default-values-and-missing-field-separator.rs:9:16\n+   |\n+LL |     field1: i32 = 42,\n+   |                ^^^^^ help: remove this unsupported default value\n+\n+error: default values on `struct` fields aren't supported\n+  --> $DIR/struct-default-values-and-missing-field-separator.rs:10:14\n+   |\n+LL |     field2: E = E::A,\n+   |              ^^^^^^^ help: remove this unsupported default value\n+\n+error: default values on `struct` fields aren't supported\n+  --> $DIR/struct-default-values-and-missing-field-separator.rs:11:16\n+   |\n+LL |     field3: i32 = 1 + 2,\n+   |                ^^^^^^^^ help: remove this unsupported default value\n+\n+error: default values on `struct` fields aren't supported\n+  --> $DIR/struct-default-values-and-missing-field-separator.rs:12:16\n+   |\n+LL |     field4: i32 = { 1 + 2 },\n+   |                ^^^^^^^^^^^^ help: remove this unsupported default value\n+\n+error: default values on `struct` fields aren't supported\n+  --> $DIR/struct-default-values-and-missing-field-separator.rs:13:14\n+   |\n+LL |     field5: E = foo(42),\n+   |              ^^^^^^^^^^ help: remove this unsupported default value\n+\n+error: default values on `struct` fields aren't supported\n+  --> $DIR/struct-default-values-and-missing-field-separator.rs:14:14\n+   |\n+LL |     field6: E = { foo(42) },\n+   |              ^^^^^^^^^^^^^^ help: remove this unsupported default value\n+\n+error: expected `,`, or `}`, found `field2`\n+  --> $DIR/struct-default-values-and-missing-field-separator.rs:18:16\n+   |\n+LL |     field1: i32\n+   |                ^ help: try adding a comma: `,`\n+\n+error: expected `,`, or `}`, found `field3`\n+  --> $DIR/struct-default-values-and-missing-field-separator.rs:19:14\n+   |\n+LL |     field2: E\n+   |              ^ help: try adding a comma: `,`\n+\n+error: default values on `struct` fields aren't supported\n+  --> $DIR/struct-default-values-and-missing-field-separator.rs:20:16\n+   |\n+LL |     field3: i32 = 1 + 2,\n+   |                ^^^^^^^^ help: remove this unsupported default value\n+\n+error: default values on `struct` fields aren't supported\n+  --> $DIR/struct-default-values-and-missing-field-separator.rs:21:16\n+   |\n+LL |     field4: i32 = { 1 + 2 },\n+   |                ^^^^^^^^^^^^ help: remove this unsupported default value\n+\n+error: default values on `struct` fields aren't supported\n+  --> $DIR/struct-default-values-and-missing-field-separator.rs:22:14\n+   |\n+LL |     field5: E = foo(42),\n+   |              ^^^^^^^^^^ help: remove this unsupported default value\n+\n+error: default values on `struct` fields aren't supported\n+  --> $DIR/struct-default-values-and-missing-field-separator.rs:23:14\n+   |\n+LL |     field6: E = { foo(42) },\n+   |              ^^^^^^^^^^^^^^ help: remove this unsupported default value\n+\n+error: expected `:`, found `=`\n+  --> $DIR/struct-default-values-and-missing-field-separator.rs:27:12\n+   |\n+LL |     field1 = i32,\n+   |            ^\n+   |            |\n+   |            expected `:`\n+   |            help: field names and their types are separated with `:`\n+\n+error: expected `:`, found `;`\n+  --> $DIR/struct-default-values-and-missing-field-separator.rs:28:11\n+   |\n+LL |     field2; E,\n+   |           ^\n+   |           |\n+   |           expected `:`\n+   |           help: field names and their types are separated with `:`\n+\n+error: aborting due to 14 previous errors\n+"}]}