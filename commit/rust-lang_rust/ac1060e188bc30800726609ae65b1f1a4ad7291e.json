{"sha": "ac1060e188bc30800726609ae65b1f1a4ad7291e", "node_id": "C_kwDOAAsO6NoAKGFjMTA2MGUxODhiYzMwODAwNzI2NjA5YWU2NWIxZjFhNGFkNzI5MWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-31T22:14:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-31T22:14:44Z"}, "message": "Rollup merge of #90383 - tmiasko:union-validity, r=RalfJung\n\nExtend check for UnsafeCell in consts to cover unions\n\nA validity companion to changes from #90373.\n\n`@rust-lang/wg-const-eval`", "tree": {"sha": "495dd59140bd988edf1378d806dd98f316101106", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/495dd59140bd988edf1378d806dd98f316101106"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac1060e188bc30800726609ae65b1f1a4ad7291e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhz4DUCRBK7hj4Ov3rIwAA/iAIAK25RIm4J65VDDjtptxtUdqF\nfkzlvANnYqmBC7RajRN5luHe997dyKdKX8s7rHuFvt74vysm8GJVqsJfJqngQqXd\nCwSQ0WRqlfwlNTm3CXvwb+/KZiT7wxTWtGHuYwx6oSpGicVb/MUKSEZstZmsO0jP\npHOSsU9PfckJf59APTRR0J/E+IR7z1MhmMamprTohWGqe4pJ33kGx8A71GAlG/MG\naKTAQjlcLYioD+ua/p34lZm/Tl3KxGS2NKgUhkKFEP82F/eLjEmQzxR6y2smb0RZ\nLVctpjVB0h4yQrXLEvM7rYvuNZa0zZFXu1eFT1W94l+3NMpJ6Kv6+NeIs7aD7BQ=\n=78E9\n-----END PGP SIGNATURE-----\n", "payload": "tree 495dd59140bd988edf1378d806dd98f316101106\nparent 984a6bf9c11b7356f696c685a145d7136fff051c\nparent 2eb637a9f20f7cb48b279a2799ed6f22b14395dc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1640988884 +0100\ncommitter GitHub <noreply@github.com> 1640988884 +0100\n\nRollup merge of #90383 - tmiasko:union-validity, r=RalfJung\n\nExtend check for UnsafeCell in consts to cover unions\n\nA validity companion to changes from #90373.\n\n`@rust-lang/wg-const-eval`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac1060e188bc30800726609ae65b1f1a4ad7291e", "html_url": "https://github.com/rust-lang/rust/commit/ac1060e188bc30800726609ae65b1f1a4ad7291e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac1060e188bc30800726609ae65b1f1a4ad7291e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "984a6bf9c11b7356f696c685a145d7136fff051c", "url": "https://api.github.com/repos/rust-lang/rust/commits/984a6bf9c11b7356f696c685a145d7136fff051c", "html_url": "https://github.com/rust-lang/rust/commit/984a6bf9c11b7356f696c685a145d7136fff051c"}, {"sha": "2eb637a9f20f7cb48b279a2799ed6f22b14395dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb637a9f20f7cb48b279a2799ed6f22b14395dc", "html_url": "https://github.com/rust-lang/rust/commit/2eb637a9f20f7cb48b279a2799ed6f22b14395dc"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "5a398c2f45af52e593b34831684dbed94871c609", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac1060e188bc30800726609ae65b1f1a4ad7291e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1060e188bc30800726609ae65b1f1a4ad7291e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=ac1060e188bc30800726609ae65b1f1a4ad7291e", "patch": "@@ -14,6 +14,7 @@ use rustc_middle::mir::interpret::InterpError;\n use rustc_middle::ty;\n use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::DUMMY_SP;\n use rustc_target::abi::{Abi, Scalar as ScalarAbi, Size, VariantIdx, Variants, WrappingRange};\n \n use std::hash::Hash;\n@@ -736,9 +737,15 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n     #[inline(always)]\n     fn visit_union(\n         &mut self,\n-        _op: &OpTy<'tcx, M::PointerTag>,\n+        op: &OpTy<'tcx, M::PointerTag>,\n         _fields: NonZeroUsize,\n     ) -> InterpResult<'tcx> {\n+        // Special check preventing `UnsafeCell` inside unions in the inner part of constants.\n+        if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { inner: true, .. })) {\n+            if !op.layout.ty.is_freeze(self.ecx.tcx.at(DUMMY_SP), self.ecx.param_env) {\n+                throw_validation_failure!(self.path, { \"`UnsafeCell` in a `const`\" });\n+            }\n+        }\n         Ok(())\n     }\n "}, {"sha": "c8f9e5704671e23b8fe04beca2e74f208f3de4dd", "filename": "src/test/ui/consts/invalid-union.32bit.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ac1060e188bc30800726609ae65b1f1a4ad7291e/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac1060e188bc30800726609ae65b1f1a4ad7291e/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr?ref=ac1060e188bc30800726609ae65b1f1a4ad7291e", "patch": "@@ -0,0 +1,24 @@\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/invalid-union.rs:41:1\n+   |\n+LL | fn main() {\n+   | ^^^^^^^^^ type validation failed at .<deref>.y.<enum-variant(B)>.0: encountered `UnsafeCell` in a `const`\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 4, align: 4) {\n+               \u257e\u2500alloc7\u2500\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+           }\n+\n+error: erroneous constant used\n+  --> $DIR/invalid-union.rs:42:25\n+   |\n+LL |     let _: &'static _ = &C;\n+   |                         ^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "2ca54ccf9a09ebf6a824e7f7866039810dd9b0b4", "filename": "src/test/ui/consts/invalid-union.64bit.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ac1060e188bc30800726609ae65b1f1a4ad7291e/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac1060e188bc30800726609ae65b1f1a4ad7291e/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr?ref=ac1060e188bc30800726609ae65b1f1a4ad7291e", "patch": "@@ -0,0 +1,24 @@\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/invalid-union.rs:41:1\n+   |\n+LL | fn main() {\n+   | ^^^^^^^^^ type validation failed at .<deref>.y.<enum-variant(B)>.0: encountered `UnsafeCell` in a `const`\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+           }\n+\n+error: erroneous constant used\n+  --> $DIR/invalid-union.rs:42:25\n+   |\n+LL |     let _: &'static _ = &C;\n+   |                         ^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "1d5cc978a9e6bbb0f4ddb130496989abfad65f2b", "filename": "src/test/ui/consts/invalid-union.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ac1060e188bc30800726609ae65b1f1a4ad7291e/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1060e188bc30800726609ae65b1f1a4ad7291e/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs?ref=ac1060e188bc30800726609ae65b1f1a4ad7291e", "patch": "@@ -0,0 +1,44 @@\n+// Check that constants with interior mutability inside unions are rejected\n+// during validation.\n+//\n+// Note that this test case relies on undefined behaviour to construct a\n+// constant with interior mutability that is \"invisible\" to the static checks.\n+// If for some reason this approach no longer works, it is should be fine to\n+// remove the test case.\n+//\n+// build-fail\n+// stderr-per-bitwidth\n+#![feature(const_mut_refs)]\n+#![feature(const_ptr_offset)]\n+#![feature(untagged_unions)]\n+use std::cell::Cell;\n+\n+#[repr(C)]\n+struct S {\n+    x: u32,\n+    y: E,\n+}\n+\n+#[repr(u32)]\n+enum E {\n+    A,\n+    B(U)\n+}\n+\n+union U {\n+    cell: Cell<u32>,\n+}\n+\n+const C: S = {\n+    let s = S { x: 0, y: E::A };\n+    // Go through an &u32 reference which is definitely not allowed to mutate anything.\n+    let p = &s.x as *const u32 as *mut u32;\n+    // Change enum tag to E::B.\n+    unsafe { *p.add(1) = 1 };\n+    s\n+};\n+\n+fn main() { //~ ERROR it is undefined behavior to use this value\n+    let _: &'static _ = &C; //~ ERROR erroneous constant used\n+    //~^ WARN this was previously accepted\n+}"}]}