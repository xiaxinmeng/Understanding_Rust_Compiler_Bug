{"sha": "40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "node_id": "C_kwDOAAsO6NoAKDQwYWU3YjViOGUwOWRhNjU3YjYyYmM4NDliOGJjZGY5OWExY2IyMTA", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-02T16:15:05Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-12T12:25:16Z"}, "message": "Parse closure binders\n\nThis is first step in implementing RFC 3216.\n- Parse `for<'a>` before closures in ast\n  - Error in lowering\n- Add `closure_lifetime_binder` feature", "tree": {"sha": "f2a08c2651b0cb786a37697ee7806b272c01bb1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2a08c2651b0cb786a37697ee7806b272c01bb1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "html_url": "https://github.com/rust-lang/rust/commit/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbdb07f4e7f4666085aec4b1ed2fd05817dc42cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbdb07f4e7f4666085aec4b1ed2fd05817dc42cf", "html_url": "https://github.com/rust-lang/rust/commit/fbdb07f4e7f4666085aec4b1ed2fd05817dc42cf"}], "stats": {"total": 325, "additions": 287, "deletions": 38}, "files": [{"sha": "ac2328a582418587a9cfdee68f23ad1d2ac91c0d", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -1390,7 +1390,7 @@ pub enum ExprKind {\n     /// A closure (e.g., `move |a, b, c| a + b + c`).\n     ///\n     /// The final span is the span of the argument block `|...|`.\n-    Closure(CaptureBy, Async, Movability, P<FnDecl>, P<Expr>, Span),\n+    Closure(ClosureBinder, CaptureBy, Async, Movability, P<FnDecl>, P<Expr>, Span),\n     /// A block (`'label: { ... }`).\n     Block(P<Block>, Option<Label>),\n     /// An async block (`async move { ... }`).\n@@ -1518,6 +1518,31 @@ pub enum Movability {\n     Movable,\n }\n \n+/// Closure lifetime binder, `for<'a, 'b>` in `for<'a, 'b> |_: &'a (), _: &'b ()|`.\n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub enum ClosureBinder {\n+    /// The binder is not present, all closure lifetimes are inferred.\n+    NotPresent,\n+    /// The binder is present.\n+    For {\n+        /// Span of the whole `for<>` clause\n+        ///\n+        /// ```text\n+        /// for<'a, 'b> |_: &'a (), _: &'b ()| { ... }\n+        /// ^^^^^^^^^^^ -- this\n+        /// ```\n+        span: Span,\n+\n+        /// Lifetimes in the `for<>` closure\n+        ///\n+        /// ```text\n+        /// for<'a, 'b> |_: &'a (), _: &'b ()| { ... }\n+        ///     ^^^^^^ -- this\n+        /// ```\n+        generic_params: P<[GenericParam]>,\n+    },\n+}\n+\n /// Represents a macro invocation. The `path` indicates which macro\n /// is being invoked, and the `args` are arguments passed to it.\n #[derive(Clone, Encodable, Decodable, Debug)]"}, {"sha": "d933ea2da9ed744801922681ae6f1bde316fbb70", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -125,6 +125,10 @@ pub trait MutVisitor: Sized {\n         noop_visit_asyncness(a, self);\n     }\n \n+    fn visit_closure_binder(&mut self, b: &mut ClosureBinder) {\n+        noop_visit_closure_binder(b, self);\n+    }\n+\n     fn visit_block(&mut self, b: &mut P<Block>) {\n         noop_visit_block(b, self);\n     }\n@@ -825,6 +829,17 @@ pub fn visit_constness<T: MutVisitor>(constness: &mut Const, vis: &mut T) {\n     }\n }\n \n+pub fn noop_visit_closure_binder<T: MutVisitor>(binder: &mut ClosureBinder, vis: &mut T) {\n+    match binder {\n+        ClosureBinder::NotPresent => {}\n+        ClosureBinder::For { span: _, generic_params } => {\n+            let mut vec = std::mem::take(generic_params).into_vec();\n+            vec.flat_map_in_place(|param| vis.flat_map_generic_param(param));\n+            *generic_params = P::from_vec(vec);\n+        }\n+    }\n+}\n+\n pub fn noop_visit_asyncness<T: MutVisitor>(asyncness: &mut Async, vis: &mut T) {\n     match asyncness {\n         Async::Yes { span: _, closure_id, return_impl_trait_id } => {\n@@ -1336,7 +1351,8 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             vis.visit_expr(expr);\n             arms.flat_map_in_place(|arm| vis.flat_map_arm(arm));\n         }\n-        ExprKind::Closure(_capture_by, asyncness, _movability, decl, body, span) => {\n+        ExprKind::Closure(binder, _capture_by, asyncness, _movability, decl, body, span) => {\n+            vis.visit_closure_binder(binder);\n             vis.visit_asyncness(asyncness);\n             vis.visit_fn_decl(decl);\n             vis.visit_expr(body);"}, {"sha": "327fc505e99a44d0c39a5b52b5a05a683b7d1aa6", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -56,14 +56,14 @@ pub enum FnKind<'a> {\n     Fn(FnCtxt, Ident, &'a FnSig, &'a Visibility, &'a Generics, Option<&'a Block>),\n \n     /// E.g., `|x, y| body`.\n-    Closure(&'a FnDecl, &'a Expr),\n+    Closure(&'a ClosureBinder, &'a FnDecl, &'a Expr),\n }\n \n impl<'a> FnKind<'a> {\n     pub fn header(&self) -> Option<&'a FnHeader> {\n         match *self {\n             FnKind::Fn(_, _, sig, _, _, _) => Some(&sig.header),\n-            FnKind::Closure(_, _) => None,\n+            FnKind::Closure(_, _, _) => None,\n         }\n     }\n \n@@ -77,7 +77,7 @@ impl<'a> FnKind<'a> {\n     pub fn decl(&self) -> &'a FnDecl {\n         match self {\n             FnKind::Fn(_, _, sig, _, _, _) => &sig.decl,\n-            FnKind::Closure(decl, _) => decl,\n+            FnKind::Closure(_, decl, _) => decl,\n         }\n     }\n \n@@ -155,6 +155,9 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_generics(&mut self, g: &'ast Generics) {\n         walk_generics(self, g)\n     }\n+    fn visit_closure_binder(&mut self, b: &'ast ClosureBinder) {\n+        walk_closure_binder(self, b)\n+    }\n     fn visit_where_predicate(&mut self, p: &'ast WherePredicate) {\n         walk_where_predicate(self, p)\n     }\n@@ -636,6 +639,15 @@ pub fn walk_generics<'a, V: Visitor<'a>>(visitor: &mut V, generics: &'a Generics\n     walk_list!(visitor, visit_where_predicate, &generics.where_clause.predicates);\n }\n \n+pub fn walk_closure_binder<'a, V: Visitor<'a>>(visitor: &mut V, binder: &'a ClosureBinder) {\n+    match binder {\n+        ClosureBinder::NotPresent => {}\n+        ClosureBinder::For { span: _, generic_params } => {\n+            walk_list!(visitor, visit_generic_param, generic_params)\n+        }\n+    }\n+}\n+\n pub fn walk_where_predicate<'a, V: Visitor<'a>>(visitor: &mut V, predicate: &'a WherePredicate) {\n     match *predicate {\n         WherePredicate::BoundPredicate(WhereBoundPredicate {\n@@ -682,7 +694,8 @@ pub fn walk_fn<'a, V: Visitor<'a>>(visitor: &mut V, kind: FnKind<'a>, _span: Spa\n             walk_fn_decl(visitor, &sig.decl);\n             walk_list!(visitor, visit_block, body);\n         }\n-        FnKind::Closure(decl, body) => {\n+        FnKind::Closure(binder, decl, body) => {\n+            visitor.visit_closure_binder(binder);\n             walk_fn_decl(visitor, decl);\n             visitor.visit_expr(body);\n         }\n@@ -856,8 +869,8 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_expr(subexpression);\n             walk_list!(visitor, visit_arm, arms);\n         }\n-        ExprKind::Closure(_, _, _, ref decl, ref body, _decl_span) => {\n-            visitor.visit_fn(FnKind::Closure(decl, body), expression.span, expression.id)\n+        ExprKind::Closure(ref binder, _, _, _, ref decl, ref body, _decl_span) => {\n+            visitor.visit_fn(FnKind::Closure(binder, decl, body), expression.span, expression.id)\n         }\n         ExprKind::Block(ref block, ref opt_label) => {\n             walk_list!(visitor, visit_label, opt_label);"}, {"sha": "7a35660b0af2de5988bbfb710316fbbf4590f29c", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -155,6 +155,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     self.lower_expr_await(span, expr)\n                 }\n                 ExprKind::Closure(\n+                    ref binder,\n                     capture_clause,\n                     asyncness,\n                     movability,\n@@ -164,6 +165,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ) => {\n                     if let Async::Yes { closure_id, .. } = asyncness {\n                         self.lower_expr_async_closure(\n+                            binder,\n                             capture_clause,\n                             e.id,\n                             closure_id,\n@@ -173,6 +175,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         )\n                     } else {\n                         self.lower_expr_closure(\n+                            binder,\n                             capture_clause,\n                             e.id,\n                             movability,\n@@ -831,13 +834,22 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_expr_closure(\n         &mut self,\n+        binder: &ClosureBinder,\n         capture_clause: CaptureBy,\n         closure_id: NodeId,\n         movability: Movability,\n         decl: &FnDecl,\n         body: &Expr,\n         fn_decl_span: Span,\n     ) -> hir::ExprKind<'hir> {\n+        // FIXME(waffle): lower binder\n+        if let &ClosureBinder::For { span, .. } = binder {\n+            self.sess\n+                .struct_span_err(span, \"`for<...>` binders for closures are not yet supported\")\n+                .help(\"consider removing `for<...>`\")\n+                .emit();\n+        }\n+\n         let (body, generator_option) = self.with_new_scopes(move |this| {\n             let prev = this.current_item;\n             this.current_item = Some(fn_decl_span);\n@@ -908,13 +920,25 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_expr_async_closure(\n         &mut self,\n+        binder: &ClosureBinder,\n         capture_clause: CaptureBy,\n         closure_id: NodeId,\n         inner_closure_id: NodeId,\n         decl: &FnDecl,\n         body: &Expr,\n         fn_decl_span: Span,\n     ) -> hir::ExprKind<'hir> {\n+        // FIXME(waffle): lower binder\n+        if let &ClosureBinder::For { span, .. } = binder {\n+            self.sess\n+                .struct_span_err(\n+                    span,\n+                    \"`for<...>` binders for async closures are not yet supported\",\n+                )\n+                .help(\"consider removing `for<...>`\")\n+                .emit();\n+        }\n+\n         let outer_decl =\n             FnDecl { inputs: decl.inputs.clone(), output: FnRetTy::Default(fn_decl_span) };\n "}, {"sha": "f284bf4650acc86db048fdcfeffc9b8a139a7622", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -1597,6 +1597,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 .emit();\n         }\n \n+        if let FnKind::Closure(ClosureBinder::For { generic_params, .. }, ..) = fk {\n+            self.check_late_bound_lifetime_defs(generic_params);\n+        }\n+\n         if let FnKind::Fn(\n             _,\n             _,"}, {"sha": "e69f85eacf7cd44cda4a74691a7bf8f0ac1c3815", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -744,6 +744,11 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n         \"async closures are unstable\",\n         \"to use an async block, remove the `||`: `async {`\"\n     );\n+    gate_all!(\n+        closure_lifetime_binder,\n+        \"`for<...>` binders for closures are experimental\",\n+        \"consider removing `for<...>`\"\n+    );\n     gate_all!(more_qualified_paths, \"usage of qualified paths in this context is experimental\");\n     gate_all!(generators, \"yield syntax is experimental\");\n     gate_all!(raw_ref_op, \"raw address of syntax is experimental\");"}, {"sha": "ead38caee287fb0e5fdab685628bd06e0b4338d3", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -389,13 +389,15 @@ impl<'a> State<'a> {\n                 self.bclose(expr.span, empty);\n             }\n             ast::ExprKind::Closure(\n+                ref binder,\n                 capture_clause,\n                 asyncness,\n                 movability,\n                 ref decl,\n                 ref body,\n                 _,\n             ) => {\n+                self.print_closure_binder(binder);\n                 self.print_movability(movability);\n                 self.print_asyncness(asyncness);\n                 self.print_capture_clause(capture_clause);\n@@ -594,6 +596,15 @@ impl<'a> State<'a> {\n         self.end(); // Close enclosing cbox.\n     }\n \n+    fn print_closure_binder(&mut self, binder: &ast::ClosureBinder) {\n+        match binder {\n+            ast::ClosureBinder::NotPresent => {}\n+            ast::ClosureBinder::For { generic_params, .. } => {\n+                self.print_formal_generic_params(&generic_params)\n+            }\n+        }\n+    }\n+\n     fn print_movability(&mut self, movability: ast::Movability) {\n         match movability {\n             ast::Movability::Static => self.word_space(\"static\"),"}, {"sha": "01152ff7df58a63fb6234a2c80e22f9e9e049e14", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -294,7 +294,7 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             | ExprKind::Block(_, _)\n             | ExprKind::Box(_)\n             | ExprKind::Break(_, _)\n-            | ExprKind::Closure(_, _, _, _, _, _)\n+            | ExprKind::Closure(_, _, _, _, _, _, _)\n             | ExprKind::ConstBlock(_)\n             | ExprKind::Continue(_)\n             | ExprKind::Err"}, {"sha": "fa3e2a4a5b81ca83614b6d2a708b080abe6166b6", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -520,6 +520,7 @@ impl<'a> ExtCtxt<'a> {\n         self.expr(\n             span,\n             ast::ExprKind::Closure(\n+                ast::ClosureBinder::NotPresent,\n                 ast::CaptureBy::Ref,\n                 ast::Async::No,\n                 ast::Movability::Movable,"}, {"sha": "8d19ae2e3f4c30043b9b71aac9adc3d5c33123e2", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -331,6 +331,8 @@ declare_features! (\n     (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n     /// Allow conditional compilation depending on rust version\n     (active, cfg_version, \"1.45.0\", Some(64796), None),\n+    /// Allows `for<...>` on closures and generators.\n+    (active, closure_lifetime_binder, \"1.64.0\", Some(97362), None),\n     /// Allows `#[track_caller]` on closures and generators.\n     (active, closure_track_caller, \"1.57.0\", Some(87417), None),\n     /// Allows to use the `#[cmse_nonsecure_entry]` attribute."}, {"sha": "6c9638400b299a125e1f58caf9ac7b36791e38bc", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -218,7 +218,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         // Explicitly check for lints associated with 'closure_id', since\n         // it does not have a corresponding AST node\n         match e.kind {\n-            ast::ExprKind::Closure(_, ast::Async::Yes { closure_id, .. }, ..)\n+            ast::ExprKind::Closure(_, _, ast::Async::Yes { closure_id, .. }, ..)\n             | ast::ExprKind::Async(_, closure_id, ..) => self.check_id(closure_id),\n             _ => {}\n         }"}, {"sha": "c793e7342242dc3daa78bdf20e996857371f3ffd", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -15,10 +15,10 @@ use rustc_ast::util::classify;\n use rustc_ast::util::literal::LitError;\n use rustc_ast::util::parser::{prec_let_scrutinee_needs_par, AssocOp, Fixity};\n use rustc_ast::visit::Visitor;\n-use rustc_ast::StmtKind;\n use rustc_ast::{self as ast, AttrStyle, AttrVec, CaptureBy, ExprField, Lit, UnOp, DUMMY_NODE_ID};\n use rustc_ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty, TyKind};\n use rustc_ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n+use rustc_ast::{ClosureBinder, StmtKind};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, PResult};\n@@ -1343,11 +1343,7 @@ impl<'a> Parser<'a> {\n             self.parse_if_expr(attrs)\n         } else if self.check_keyword(kw::For) {\n             if self.choose_generics_over_qpath(1) {\n-                // NOTE(Centril, eddyb): DO NOT REMOVE! Beyond providing parser recovery,\n-                // this is an insurance policy in case we allow qpaths in (tuple-)struct patterns.\n-                // When `for <Foo as Bar>::Proj in $expr $block` is wanted,\n-                // you can disambiguate in favor of a pattern with `(...)`.\n-                self.recover_quantified_closure_expr(attrs)\n+                self.parse_closure_expr(attrs)\n             } else {\n                 assert!(self.eat_keyword(kw::For));\n                 self.parse_for_expr(None, self.prev_token.span, attrs)\n@@ -2094,29 +2090,21 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()))\n     }\n \n-    /// Recover on an explicitly quantified closure expression, e.g., `for<'a> |x: &'a u8| *x + 1`.\n-    fn recover_quantified_closure_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n+    /// Parses a closure expression (e.g., `move |args| expr`).\n+    fn parse_closure_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let lo = self.token.span;\n-        let _ = self.parse_late_bound_lifetime_defs()?;\n-        let span_for = lo.to(self.prev_token.span);\n-        let closure = self.parse_closure_expr(attrs)?;\n \n-        self.struct_span_err(span_for, \"cannot introduce explicit parameters for a closure\")\n-            .span_label(closure.span, \"the parameters are attached to this closure\")\n-            .span_suggestion(\n-                span_for,\n-                \"remove the parameters\",\n-                \"\",\n-                Applicability::MachineApplicable,\n-            )\n-            .emit();\n+        let binder = if self.check_keyword(kw::For) {\n+            let lo = self.token.span;\n+            let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n+            let span = lo.to(self.prev_token.span);\n \n-        Ok(self.mk_expr_err(lo.to(closure.span)))\n-    }\n+            self.sess.gated_spans.gate(sym::closure_lifetime_binder, span);\n \n-    /// Parses a closure expression (e.g., `move |args| expr`).\n-    fn parse_closure_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n-        let lo = self.token.span;\n+            ClosureBinder::For { span, generic_params: P::from_vec(lifetime_defs) }\n+        } else {\n+            ClosureBinder::NotPresent\n+        };\n \n         let movability =\n             if self.eat_keyword(kw::Static) { Movability::Static } else { Movability::Movable };\n@@ -2160,7 +2148,15 @@ impl<'a> Parser<'a> {\n \n         let closure = self.mk_expr(\n             lo.to(body.span),\n-            ExprKind::Closure(capture_clause, asyncness, movability, decl, body, lo.to(decl_hi)),\n+            ExprKind::Closure(\n+                binder,\n+                capture_clause,\n+                asyncness,\n+                movability,\n+                decl,\n+                body,\n+                lo.to(decl_hi),\n+            ),\n             attrs,\n         );\n "}, {"sha": "66641fb2cb248dc15446f722b0bb88f6f530a536", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -259,7 +259,7 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n     fn visit_expr(&mut self, expr: &'a Expr) {\n         let parent_def = match expr.kind {\n             ExprKind::MacCall(..) => return self.visit_macro_invoc(expr.id),\n-            ExprKind::Closure(_, asyncness, ..) => {\n+            ExprKind::Closure(_, _, asyncness, ..) => {\n                 // Async closures desugar to closures inside of closures, so\n                 // we must create two defs.\n                 let closure_def = self.create_def(expr.id, DefPathData::ClosureExpr, expr.span);"}, {"sha": "caf6f8c8392320bfb19ce5cde38f22a646a9d2d6", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -3495,7 +3495,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             // `async |x| ...` gets desugared to `|x| future_from_generator(|| ...)`, so we need to\n             // resolve the arguments within the proper scopes so that usages of them inside the\n             // closure are detected as upvars rather than normal closure arg usages.\n-            ExprKind::Closure(_, Async::Yes { .. }, _, ref fn_decl, ref body, _span) => {\n+            ExprKind::Closure(_, _, Async::Yes { .. }, _, ref fn_decl, ref body, _span) => {\n                 self.with_rib(ValueNS, NormalRibKind, |this| {\n                     this.with_label_rib(ClosureOrAsyncRibKind, |this| {\n                         // Resolve arguments:"}, {"sha": "4505dd64a10d1ddc4d6f6bf9fc3f758f31c52ab7", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -459,6 +459,7 @@ symbols! {\n         clone_closures,\n         clone_from,\n         closure,\n+        closure_lifetime_binder,\n         closure_to_fn_coercion,\n         closure_track_caller,\n         cmp,"}, {"sha": "a679b7b4e191329ada37b4588c47d33ca257931b", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -114,6 +114,7 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                 let decl = P(FnDecl { inputs: vec![], output: FnRetTy::Default(DUMMY_SP) });\n                 iter_exprs(depth - 1, &mut |e| {\n                     g(ExprKind::Closure(\n+                        ClosureBinder::NotPresent,\n                         CaptureBy::Value,\n                         Async::No,\n                         Movability::Movable,"}, {"sha": "b9ecbd9e5d6769357a1852b87918121bfb116b10", "filename": "src/test/ui/closures/binder/async-closure-with-binder.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -0,0 +1,7 @@\n+// edition:2021\n+#![feature(closure_lifetime_binder)]\n+#![feature(async_closure)]\n+fn main() {\n+    for<'a> async || ();\n+    //~^ ERROR `for<...>` binders on `async` closures are not currently supported\n+}"}, {"sha": "46420a177522737e1fd18957da09607799859e4f", "filename": "src/test/ui/closures/binder/async-closure-with-binder.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.stderr?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -0,0 +1,8 @@\n+error: `for<...>` binders on `async` closures are not currently supported\n+  --> $DIR/async-closure-with-binder.rs:5:5\n+   |\n+LL |     for<'a> async || ();\n+   |     ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3aefbdcb299b4495232700557fcb90b16684c5d5", "filename": "src/test/ui/closures/binder/implicit-return.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -0,0 +1,6 @@\n+#![feature(closure_lifetime_binder)]\n+\n+fn main() {\n+    let _f = for<'a> |_: &'a ()| {};\n+    //~^ implicit return type is forbidden when `for<...>` is present\n+}"}, {"sha": "022a4e027b650d42fa300c323ded87935753fd8f", "filename": "src/test/ui/closures/binder/implicit-return.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.stderr?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -0,0 +1,10 @@\n+error: implicit return type is forbidden when `for<...>` is present\n+  --> $DIR/implicit-return.rs:4:34\n+   |\n+LL |     let _f = for<'a> |_: &'a ()| {};\n+   |              -------             ^\n+   |              |\n+   |              `for<...>` is here\n+\n+error: aborting due to previous error\n+"}, {"sha": "b476dd50cc986486e62d601ac7f3ea207a06ae73", "filename": "src/test/ui/closures/binder/suggestion-for-introducing-lifetime-into-binder.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fsuggestion-for-introducing-lifetime-into-binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fsuggestion-for-introducing-lifetime-into-binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fsuggestion-for-introducing-lifetime-into-binder.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -0,0 +1,7 @@\n+#![feature(closure_lifetime_binder)]\n+fn main() {\n+    for<> |_: &'a ()| -> () {};\n+    //~^ ERROR use of undeclared lifetime name `'a`\n+    for<'a> |_: &'b ()| -> () {};\n+    //~^ ERROR use of undeclared lifetime name `'b`\n+}"}, {"sha": "1381acc15ca462952bc5541b8fa5517c7a1d112e", "filename": "src/test/ui/closures/binder/suggestion-for-introducing-lifetime-into-binder.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fsuggestion-for-introducing-lifetime-into-binder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fsuggestion-for-introducing-lifetime-into-binder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fsuggestion-for-introducing-lifetime-into-binder.stderr?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -0,0 +1,33 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/suggestion-for-introducing-lifetime-into-binder.rs:3:16\n+   |\n+LL |     for<> |_: &'a ()| -> () {};\n+   |                ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'a` here\n+   |\n+LL |     for<'a, > |_: &'a ()| -> () {};\n+   |         +++\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | fn main<'a>() {\n+   |        ++++\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/suggestion-for-introducing-lifetime-into-binder.rs:5:18\n+   |\n+LL |     for<'a> |_: &'b ()| -> () {};\n+   |                  ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     for<'b, 'a> |_: &'b ()| -> () {};\n+   |         +++\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | fn main<'b>() {\n+   |        ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0261`."}, {"sha": "1e2090186a698802f7cdcfe8b1423824ecce9111", "filename": "src/test/ui/feature-gates/feature-gate-closure_lifetime_binder.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.rs?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -0,0 +1,12 @@\n+fn main() {\n+    for<> || {};\n+    //~^ ERROR `for<...>` binders for closures are experimental\n+    //~^^ ERROR `for<...>` binders for closures are not yet supported\n+    for<'a> || {};\n+    //~^ ERROR `for<...>` binders for closures are experimental\n+    //~^^ ERROR `for<...>` binders for closures are not yet supported\n+    for<'a, 'b> |_: &'a ()| {};\n+    //~^ ERROR `for<...>` binders for closures are experimental\n+    //~^^ ERROR `for<...>` binders for closures are not yet supported\n+    //~^^^ ERROR use of undeclared lifetime name `'a`\n+}"}, {"sha": "77ce6f9f2d635460096fe75838b3002b6869f855", "filename": "src/test/ui/feature-gates/feature-gate-closure_lifetime_binder.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40ae7b5b8e09da657b62bc849b8bcdf99a1cb210/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.stderr?ref=40ae7b5b8e09da657b62bc849b8bcdf99a1cb210", "patch": "@@ -0,0 +1,67 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/feature-gate-closure_lifetime_binder.rs:8:22\n+   |\n+LL | fn main() {\n+   |        - help: consider introducing lifetime `'a` here: `<'a>`\n+...\n+LL |     for<'a, 'b> |_: &'a ()| {};\n+   |                      ^^ undeclared lifetime\n+\n+error[E0658]: `for<...>` binders for closures are experimental\n+  --> $DIR/feature-gate-closure_lifetime_binder.rs:2:5\n+   |\n+LL |     for<> || {};\n+   |     ^^^^^\n+   |\n+   = note: see issue #97362 <https://github.com/rust-lang/rust/issues/97362> for more information\n+   = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable\n+   = help: consider removing `for<...>`\n+\n+error[E0658]: `for<...>` binders for closures are experimental\n+  --> $DIR/feature-gate-closure_lifetime_binder.rs:5:5\n+   |\n+LL |     for<'a> || {};\n+   |     ^^^^^^^\n+   |\n+   = note: see issue #97362 <https://github.com/rust-lang/rust/issues/97362> for more information\n+   = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable\n+   = help: consider removing `for<...>`\n+\n+error[E0658]: `for<...>` binders for closures are experimental\n+  --> $DIR/feature-gate-closure_lifetime_binder.rs:8:5\n+   |\n+LL |     for<'a, 'b> |_: &'a ()| {};\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: see issue #97362 <https://github.com/rust-lang/rust/issues/97362> for more information\n+   = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable\n+   = help: consider removing `for<...>`\n+\n+error: `for<...>` binders for closures are not yet supported\n+  --> $DIR/feature-gate-closure_lifetime_binder.rs:2:5\n+   |\n+LL |     for<> || {};\n+   |     ^^^^^\n+   |\n+   = help: consider removing `for<...>`\n+\n+error: `for<...>` binders for closures are not yet supported\n+  --> $DIR/feature-gate-closure_lifetime_binder.rs:5:5\n+   |\n+LL |     for<'a> || {};\n+   |     ^^^^^^^\n+   |\n+   = help: consider removing `for<...>`\n+\n+error: `for<...>` binders for closures are not yet supported\n+  --> $DIR/feature-gate-closure_lifetime_binder.rs:8:5\n+   |\n+LL |     for<'a, 'b> |_: &'a ()| {};\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: consider removing `for<...>`\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0261, E0658.\n+For more information about an error, try `rustc --explain E0261`."}]}