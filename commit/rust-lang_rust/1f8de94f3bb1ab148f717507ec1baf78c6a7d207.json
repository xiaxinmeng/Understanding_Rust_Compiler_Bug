{"sha": "1f8de94f3bb1ab148f717507ec1baf78c6a7d207", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOGRlOTRmM2JiMWFiMTQ4ZjcxNzUwN2VjMWJhZjc4YzZhN2QyMDc=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-10-23T17:47:53Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-03T10:41:55Z"}, "message": "Adjust bound tys indices in canonicalization", "tree": {"sha": "262da7f402fa84fe316730b9824257c95399a35d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/262da7f402fa84fe316730b9824257c95399a35d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f8de94f3bb1ab148f717507ec1baf78c6a7d207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f8de94f3bb1ab148f717507ec1baf78c6a7d207", "html_url": "https://github.com/rust-lang/rust/commit/1f8de94f3bb1ab148f717507ec1baf78c6a7d207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f8de94f3bb1ab148f717507ec1baf78c6a7d207/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee569c796d093adfdf632e99978b6e8877716e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee569c796d093adfdf632e99978b6e8877716e68", "html_url": "https://github.com/rust-lang/rust/commit/ee569c796d093adfdf632e99978b6e8877716e68"}], "stats": {"total": 67, "additions": 56, "deletions": 11}, "files": [{"sha": "a54d977a5172cf638f7a079314e2f1f117d3b9b4", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1f8de94f3bb1ab148f717507ec1baf78c6a7d207/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8de94f3bb1ab148f717507ec1baf78c6a7d207/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=1f8de94f3bb1ab148f717507ec1baf78c6a7d207", "patch": "@@ -280,18 +280,32 @@ struct Canonicalizer<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     indices: FxHashMap<Kind<'tcx>, BoundVar>,\n     canonicalize_region_mode: &'cx dyn CanonicalizeRegionMode,\n     needs_canonical_flags: TypeFlags,\n+\n+    binder_index: ty::DebruijnIndex,\n }\n \n impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> {\n         self.tcx\n     }\n \n+    fn fold_binder<T>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T>\n+        where T: TypeFoldable<'tcx>\n+    {\n+        self.binder_index.shift_in(1);\n+        let t = t.super_fold_with(self);\n+        self.binder_index.shift_out(1);\n+        t\n+    }\n+\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n-            ty::ReLateBound(..) => {\n-                // leave bound regions alone\n-                r\n+            ty::ReLateBound(index, ..) => {\n+                if index >= self.binder_index {\n+                    bug!(\"escaping late bound region during canonicalization\")\n+                } else {\n+                    r\n+                }\n             }\n \n             ty::ReVar(vid) => {\n@@ -337,8 +351,12 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n                 bug!(\"encountered a fresh type during canonicalization\")\n             }\n \n-            ty::Bound(_) => {\n-                bug!(\"encountered a bound type during canonicalization\")\n+            ty::Bound(bound_ty) => {\n+                if bound_ty.index >= self.binder_index {\n+                    bug!(\"escaping bound type during canonicalization\")\n+                } else {\n+                    t\n+                }\n             }\n \n             ty::Closure(..)\n@@ -422,6 +440,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n             variables: SmallVec::new(),\n             query_state,\n             indices: FxHashMap::default(),\n+            binder_index: ty::INNERMOST,\n         };\n         let out_value = value.fold_with(&mut canonicalizer);\n \n@@ -567,7 +586,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n                 kind: CanonicalVarKind::Ty(ty_kind),\n             };\n             let var = self.canonical_var(info, ty_var.into());\n-            self.tcx().mk_ty(ty::Bound(BoundTy::new(ty::INNERMOST, var)))\n+            self.tcx().mk_ty(ty::Bound(BoundTy::new(self.binder_index, var)))\n         }\n     }\n }"}, {"sha": "06e97a71ce5ce43342c9b71c540c3ac3bef65102", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f8de94f3bb1ab148f717507ec1baf78c6a7d207/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8de94f3bb1ab148f717507ec1baf78c6a7d207/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=1f8de94f3bb1ab148f717507ec1baf78c6a7d207", "patch": "@@ -433,6 +433,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 UnpackedKind::Type(result_value) => {\n                     // e.g., here `result_value` might be `?0` in the example above...\n                     if let ty::Bound(b) = result_value.sty {\n+                        assert_eq!(b.index, ty::INNERMOST);\n                         // in which case we would set `canonical_vars[0]` to `Some(?U)`.\n                         opt_values[b.var] = Some(*original_value);\n                     }"}, {"sha": "5b2e758d81673512b2919552db725169754b2d2d", "filename": "src/librustc/infer/canonical/substitute.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1f8de94f3bb1ab148f717507ec1baf78c6a7d207/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8de94f3bb1ab148f717507ec1baf78c6a7d207/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=1f8de94f3bb1ab148f717507ec1baf78c6a7d207", "patch": "@@ -69,26 +69,48 @@ where\n     } else if !value.has_type_flags(TypeFlags::HAS_CANONICAL_VARS) {\n         value.clone()\n     } else {\n-        value.fold_with(&mut CanonicalVarValuesSubst { tcx, var_values })\n+        value.fold_with(&mut CanonicalVarValuesSubst {\n+            tcx,\n+            var_values,\n+            binder_index: ty::INNERMOST,\n+        })\n     }\n }\n \n struct CanonicalVarValuesSubst<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n     var_values: &'cx CanonicalVarValues<'tcx>,\n+    binder_index: ty::DebruijnIndex,\n }\n \n impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for CanonicalVarValuesSubst<'cx, 'gcx, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'_, 'gcx, 'tcx> {\n         self.tcx\n     }\n \n+    fn fold_binder<T>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T>\n+        where T: TypeFoldable<'tcx>\n+    {\n+        self.binder_index.shift_in(1);\n+        let t = t.super_fold_with(self);\n+        self.binder_index.shift_out(1);\n+        t\n+    }\n+\n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match t.sty {\n             ty::Bound(b) => {\n-                match self.var_values.var_values[b.var].unpack() {\n-                    UnpackedKind::Type(ty) => ty,\n-                    r => bug!(\"{:?} is a type but value is {:?}\", b, r),\n+                if b.index == self.binder_index {\n+                    match self.var_values.var_values[b.var].unpack() {\n+                        UnpackedKind::Type(ty) => ty::fold::shift_vars(\n+                            self.tcx,\n+                            self.binder_index.index() as u32,\n+                            &ty\n+                        ),\n+                        r => bug!(\"{:?} is a type but value is {:?}\", b, r),\n+                    }\n+                } else {\n+                    t\n                 }\n             }\n             _ => {"}, {"sha": "6bdbeb8f604fc453b51862344f40bc43e2706c7e", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f8de94f3bb1ab148f717507ec1baf78c6a7d207/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8de94f3bb1ab148f717507ec1baf78c6a7d207/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=1f8de94f3bb1ab148f717507ec1baf78c6a7d207", "patch": "@@ -556,7 +556,10 @@ impl CanonicalUserSubsts<'tcx> {\n         self.value.substs.iter().zip(BoundVar::new(0)..).all(|(kind, cvar)| {\n             match kind.unpack() {\n                 UnpackedKind::Type(ty) => match ty.sty {\n-                    ty::Bound(ref b) => cvar == b.var,\n+                    ty::Bound(ref b) => {\n+                        assert_eq!(b.index, ty::INNERMOST);\n+                        cvar == b.var\n+                    }\n                     _ => false,\n                 },\n "}]}