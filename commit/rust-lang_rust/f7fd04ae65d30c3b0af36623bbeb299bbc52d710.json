{"sha": "f7fd04ae65d30c3b0af36623bbeb299bbc52d710", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZmQwNGFlNjVkMzBjM2IwYWYzNjYyM2JiZWIyOTliYmM1MmQ3MTA=", "commit": {"author": {"name": "Lucas Morales", "email": "lucas@lucasem.com", "date": "2017-09-25T23:39:52Z"}, "committer": {"name": "Lucas Morales", "email": "lucas@lucasem.com", "date": "2017-09-25T23:39:52Z"}, "message": "docs improvement sync::atomic::Atomic*", "tree": {"sha": "9736e0d8d06c9e86e33bff5dd77092c8b45f2602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9736e0d8d06c9e86e33bff5dd77092c8b45f2602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7fd04ae65d30c3b0af36623bbeb299bbc52d710", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExgMSdpt0+BFsq5IwqzHpWfdVnhkFAlnJk8gACgkQqzHpWfdV\nnhmmxxAAhBY8C1bUtmEvZ9TniQIIHjmLOXqh3M74aQzEuWlAmYAOONdtSXQpgkJz\n6PefObs3YDrwmzI3bY5ccahASTgjgeEm1asmpYhhP3+vceVD+QR2voqa9XP9+674\nojuMRaPYWcaonRkBVZlTqKGj0AIKkF3dHPsSM0NpWO0PKpuFVxFmqyQ7ucqJzxo8\nUnGRip5qmYEUb6KTqBZR20ewcfI4xlw46p+sPm1/FmJKwzmDPGrLlEFedrYSamV6\nluqNPZMDnOgA8A8IKI6zeztzHHYWvPr3kRp9ySWjsJkWj0Rrhmnz1ZDo4+WQdzAY\nVHlVdz3ipZeMWgg+QUHLULx8fmeslH3Wk0mCNFH8fS5Z96T42AsE961FhThCrtch\ntq3IxYRgmf4Di8AArU51NCg40ZfFbf2dMBQWAWWUrDucky99OGNdAV5jDWdRFL4z\nY7737GgA+hi+g97J5DGh5zBhVz20LCXeYBW1eJeAMrrFNUKX65+bMMzc2A/DJ8DX\nIg2GTQuA226gujQM13PKp/XAoCCuFyS0OheoHQrBLEKZJ1TOBDurB8SgLEplnTDK\nHjzbCnpLNubGAI3HgZHnFlOiOj8DxPR56mi7xHmpfP9sZufvYJmAuDQiiYq7ePCO\nJorRf6e4H6HvBUt9FH0oFz3sCvAdpglRnXrGPUeat6801hd1BuM=\n=iBSK\n-----END PGP SIGNATURE-----", "payload": "tree 9736e0d8d06c9e86e33bff5dd77092c8b45f2602\nparent 6c476ce462333fccd89ce3ed8c290998db874653\nauthor Lucas Morales <lucas@lucasem.com> 1506382792 -0400\ncommitter Lucas Morales <lucas@lucasem.com> 1506382792 -0400\n\ndocs improvement sync::atomic::Atomic*\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7fd04ae65d30c3b0af36623bbeb299bbc52d710", "html_url": "https://github.com/rust-lang/rust/commit/f7fd04ae65d30c3b0af36623bbeb299bbc52d710", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7fd04ae65d30c3b0af36623bbeb299bbc52d710/comments", "author": {"login": "lorepozo", "id": 859306, "node_id": "MDQ6VXNlcjg1OTMwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/859306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorepozo", "html_url": "https://github.com/lorepozo", "followers_url": "https://api.github.com/users/lorepozo/followers", "following_url": "https://api.github.com/users/lorepozo/following{/other_user}", "gists_url": "https://api.github.com/users/lorepozo/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorepozo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorepozo/subscriptions", "organizations_url": "https://api.github.com/users/lorepozo/orgs", "repos_url": "https://api.github.com/users/lorepozo/repos", "events_url": "https://api.github.com/users/lorepozo/events{/privacy}", "received_events_url": "https://api.github.com/users/lorepozo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lorepozo", "id": 859306, "node_id": "MDQ6VXNlcjg1OTMwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/859306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorepozo", "html_url": "https://github.com/lorepozo", "followers_url": "https://api.github.com/users/lorepozo/followers", "following_url": "https://api.github.com/users/lorepozo/following{/other_user}", "gists_url": "https://api.github.com/users/lorepozo/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorepozo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorepozo/subscriptions", "organizations_url": "https://api.github.com/users/lorepozo/orgs", "repos_url": "https://api.github.com/users/lorepozo/repos", "events_url": "https://api.github.com/users/lorepozo/events{/privacy}", "received_events_url": "https://api.github.com/users/lorepozo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c476ce462333fccd89ce3ed8c290998db874653", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c476ce462333fccd89ce3ed8c290998db874653", "html_url": "https://github.com/rust-lang/rust/commit/6c476ce462333fccd89ce3ed8c290998db874653"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "bf11e18e4f33704ddb1d07f7b481291c399bfb01", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f7fd04ae65d30c3b0af36623bbeb299bbc52d710/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fd04ae65d30c3b0af36623bbeb299bbc52d710/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=f7fd04ae65d30c3b0af36623bbeb299bbc52d710", "patch": "@@ -926,10 +926,24 @@ macro_rules! atomic_int {\n      $stable_cxchg:meta,\n      $stable_debug:meta,\n      $stable_access:meta,\n+     $s_int_type:expr, $int_ref:expr,\n      $int_type:ident $atomic_type:ident $atomic_init:ident) => {\n         /// An integer type which can be safely shared between threads.\n         ///\n-        /// This type has the same in-memory representation as the underlying integer type.\n+        /// This type has the same in-memory representation as the underlying\n+        /// integer type, [`\n+        #[doc = $s_int_type]\n+        /// `](\n+        #[doc = $int_ref]\n+        /// ). For more about the differences between atomic types and\n+        /// non-atomic types, please see the [module-level documentation].\n+        ///\n+        /// Please note that examples are shared between atomic variants of\n+        /// primitive integer types, so it's normal that they are all\n+        /// demonstrating [`AtomicIsize`].\n+        ///\n+        /// [module-level documentation]: index.html\n+        /// [`AtomicIsize`]: struct.AtomicIsize.html\n         #[$stable]\n         pub struct $atomic_type {\n             v: UnsafeCell<$int_type>,\n@@ -1339,6 +1353,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"i8\", \"../../../std/primitive.i8.html\",\n     i8 AtomicI8 ATOMIC_I8_INIT\n }\n #[cfg(target_has_atomic = \"8\")]\n@@ -1348,6 +1363,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"u8\", \"../../../std/primitive.u8.html\",\n     u8 AtomicU8 ATOMIC_U8_INIT\n }\n #[cfg(target_has_atomic = \"16\")]\n@@ -1357,6 +1373,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"i16\", \"../../../std/primitive.i16.html\",\n     i16 AtomicI16 ATOMIC_I16_INIT\n }\n #[cfg(target_has_atomic = \"16\")]\n@@ -1366,6 +1383,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"u16\", \"../../../std/primitive.u16.html\",\n     u16 AtomicU16 ATOMIC_U16_INIT\n }\n #[cfg(target_has_atomic = \"32\")]\n@@ -1375,6 +1393,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"i32\", \"../../../std/primitive.i32.html\",\n     i32 AtomicI32 ATOMIC_I32_INIT\n }\n #[cfg(target_has_atomic = \"32\")]\n@@ -1384,6 +1403,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"u32\", \"../../../std/primitive.u32.html\",\n     u32 AtomicU32 ATOMIC_U32_INIT\n }\n #[cfg(target_has_atomic = \"64\")]\n@@ -1393,6 +1413,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"i64\", \"../../../std/primitive.i64.html\",\n     i64 AtomicI64 ATOMIC_I64_INIT\n }\n #[cfg(target_has_atomic = \"64\")]\n@@ -1402,6 +1423,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"u64\", \"../../../std/primitive.u64.html\",\n     u64 AtomicU64 ATOMIC_U64_INIT\n }\n #[cfg(target_has_atomic = \"ptr\")]\n@@ -1411,6 +1433,7 @@ atomic_int!{\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),\n+    \"isize\", \"../../../std/primitive.isize.html\",\n     isize AtomicIsize ATOMIC_ISIZE_INIT\n }\n #[cfg(target_has_atomic = \"ptr\")]\n@@ -1420,6 +1443,7 @@ atomic_int!{\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),\n+    \"usize\", \"../../../std/primitive.usize.html\",\n     usize AtomicUsize ATOMIC_USIZE_INIT\n }\n "}]}