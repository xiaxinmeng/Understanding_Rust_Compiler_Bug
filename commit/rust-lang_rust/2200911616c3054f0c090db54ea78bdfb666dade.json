{"sha": "2200911616c3054f0c090db54ea78bdfb666dade", "node_id": "C_kwDOAAsO6NoAKDIyMDA5MTE2MTZjMzA1NGYwYzA5MGRiNTRlYTc4YmRmYjY2NmRhZGU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-17T03:33:08Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-23T20:32:24Z"}, "message": "Rename many interner functions.\n\n(This is a large commit. The changes to\n`compiler/rustc_middle/src/ty/context.rs` are the most important ones.)\n\nThe current naming scheme is a mess, with a mix of `_intern_`, `intern_`\nand `mk_` prefixes, with little consistency. In particular, in many\ncases it's easy to use an iterator interner when a (preferable) slice\ninterner is available.\n\nThe guiding principles of the new naming system:\n- No `_intern_` prefixes.\n- The `intern_` prefix is for internal operations.\n- The `mk_` prefix is for external operations.\n- For cases where there is a slice interner and an iterator interner,\n  the former is `mk_foo` and the latter is `mk_foo_from_iter`.\n\nAlso, `slice_interners!` and `direct_interners!` can now be `pub` or\nnon-`pub`, which helps enforce the internal/external operations\ndivision.\n\nIt's not perfect, but I think it's a clear improvement.\n\nThe following lists show everything that was renamed.\n\nslice_interners\n- const_list\n  - mk_const_list -> mk_const_list_from_iter\n  - intern_const_list -> mk_const_list\n- substs\n  - mk_substs -> mk_substs_from_iter\n  - intern_substs -> mk_substs\n  - check_substs -> check_and_mk_substs (this is a weird one)\n- canonical_var_infos\n  - intern_canonical_var_infos -> mk_canonical_var_infos\n- poly_existential_predicates\n  - mk_poly_existential_predicates -> mk_poly_existential_predicates_from_iter\n  - intern_poly_existential_predicates -> mk_poly_existential_predicates\n  - _intern_poly_existential_predicates -> intern_poly_existential_predicates\n- predicates\n  - mk_predicates -> mk_predicates_from_iter\n  - intern_predicates -> mk_predicates\n  - _intern_predicates -> intern_predicates\n- projs\n  - intern_projs -> mk_projs\n- place_elems\n  - mk_place_elems -> mk_place_elems_from_iter\n  - intern_place_elems -> mk_place_elems\n- bound_variable_kinds\n  - mk_bound_variable_kinds -> mk_bound_variable_kinds_from_iter\n  - intern_bound_variable_kinds -> mk_bound_variable_kinds\n\ndirect_interners\n- region\n  - intern_region (unchanged)\n- const\n  - mk_const_internal -> intern_const\n- const_allocation\n  - intern_const_alloc -> mk_const_alloc\n- layout\n  - intern_layout -> mk_layout\n- adt_def\n  - intern_adt_def -> mk_adt_def_from_data (unusual case, hard to avoid)\n  - alloc_adt_def(!) -> mk_adt_def\n- external_constraints\n  - intern_external_constraints -> mk_external_constraints\n\nOther\n- type_list\n  - mk_type_list -> mk_type_list_from_iter\n  - intern_type_list -> mk_type_list\n- tup\n  - mk_tup -> mk_tup_from_iter\n  - intern_tup -> mk_tup", "tree": {"sha": "6663e357acbeaa63d14831b760f861b576080878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6663e357acbeaa63d14831b760f861b576080878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2200911616c3054f0c090db54ea78bdfb666dade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2200911616c3054f0c090db54ea78bdfb666dade", "html_url": "https://github.com/rust-lang/rust/commit/2200911616c3054f0c090db54ea78bdfb666dade", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2200911616c3054f0c090db54ea78bdfb666dade/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b51cdff36fc52a30d52f86e29e4c7c95eaf92d", "url": "https://api.github.com/repos/rust-lang/rust/commits/29b51cdff36fc52a30d52f86e29e4c7c95eaf92d", "html_url": "https://github.com/rust-lang/rust/commit/29b51cdff36fc52a30d52f86e29e4c7c95eaf92d"}], "stats": {"total": 727, "additions": 364, "deletions": 363}, "files": [{"sha": "7a1066f6b5878b9781cc24cd76d77fd7c593c159", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -1494,7 +1494,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         assert!(root_place.projection.is_empty());\n         let proper_span = self.body.local_decls[root_place.local].source_info.span;\n \n-        let root_place_projection = self.infcx.tcx.intern_place_elems(root_place.projection);\n+        let root_place_projection = self.infcx.tcx.mk_place_elems(root_place.projection);\n \n         if self.access_place_error_reported.contains(&(\n             Place { local: root_place.local, projection: root_place_projection },"}, {"sha": "a49da3da6c01344993d9ccf5c9a3d8aa7367b7de", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -2633,7 +2633,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             DefKind::InlineConst => substs.as_inline_const().parent_substs(),\n             other => bug!(\"unexpected item {:?}\", other),\n         };\n-        let parent_substs = tcx.intern_substs(parent_substs);\n+        let parent_substs = tcx.mk_substs(parent_substs);\n \n         assert_eq!(typeck_root_substs.len(), parent_substs.len());\n         if let Err(_) = self.eq_substs("}, {"sha": "e058fe0db222c920cadd0c874631416dd53b7f9e", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -516,7 +516,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 let va_list_ty =\n                     self.infcx.tcx.type_of(va_list_did).subst(self.infcx.tcx, &[region.into()]);\n \n-                unnormalized_input_tys = self.infcx.tcx.mk_type_list(\n+                unnormalized_input_tys = self.infcx.tcx.mk_type_list_from_iter(\n                     unnormalized_input_tys.iter().copied().chain(iter::once(va_list_ty)),\n                 );\n             }\n@@ -656,7 +656,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 assert_eq!(self.mir_def.did.to_def_id(), def_id);\n                 let closure_sig = substs.as_closure().sig();\n                 let inputs_and_output = closure_sig.inputs_and_output();\n-                let bound_vars = tcx.mk_bound_variable_kinds(\n+                let bound_vars = tcx.mk_bound_variable_kinds_from_iter(\n                     inputs_and_output\n                         .bound_vars()\n                         .iter()\n@@ -680,7 +680,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 };\n \n                 ty::Binder::bind_with_vars(\n-                    tcx.mk_type_list(\n+                    tcx.mk_type_list_from_iter(\n                         iter::once(closure_ty).chain(inputs).chain(iter::once(output)),\n                     ),\n                     bound_vars,\n@@ -693,7 +693,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 let output = substs.as_generator().return_ty();\n                 let generator_ty = tcx.mk_generator(def_id, substs, movability);\n                 let inputs_and_output =\n-                    self.infcx.tcx.intern_type_list(&[generator_ty, resume_ty, output]);\n+                    self.infcx.tcx.mk_type_list(&[generator_ty, resume_ty, output]);\n                 ty::Binder::dummy(inputs_and_output)\n             }\n \n@@ -709,13 +709,13 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 assert_eq!(self.mir_def.did.to_def_id(), def_id);\n                 let ty = tcx.type_of(self.mir_def.def_id_for_type_of()).subst_identity();\n                 let ty = indices.fold_to_region_vids(tcx, ty);\n-                ty::Binder::dummy(tcx.intern_type_list(&[ty]))\n+                ty::Binder::dummy(tcx.mk_type_list(&[ty]))\n             }\n \n             DefiningTy::InlineConst(def_id, substs) => {\n                 assert_eq!(self.mir_def.did.to_def_id(), def_id);\n                 let ty = substs.as_inline_const().ty();\n-                ty::Binder::dummy(tcx.intern_type_list(&[ty]))\n+                ty::Binder::dummy(tcx.mk_type_list(&[ty]))\n             }\n         }\n     }"}, {"sha": "74396a66f54e09fde1659036f52e8fa17b9c4953", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -405,9 +405,9 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     };\n \n     let extra_args = &args[fn_sig.inputs().skip_binder().len()..];\n-    let extra_args = fx\n-        .tcx\n-        .mk_type_list(extra_args.iter().map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx))));\n+    let extra_args = fx.tcx.mk_type_list_from_iter(\n+        extra_args.iter().map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx))),\n+    );\n     let fn_abi = if let Some(instance) = instance {\n         RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(instance, extra_args)\n     } else {"}, {"sha": "40bfe70771c1907aa58b3cc8e4cce2d566915ac8", "filename": "compiler/rustc_codegen_cranelift/src/codegen_i128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -56,7 +56,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n                     Some(fx.easy_call(\"__multi3\", &[lhs, rhs], val_ty))\n                 }\n             } else {\n-                let out_ty = fx.tcx.intern_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n+                let out_ty = fx.tcx.mk_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n                 let oflow = CPlace::new_stack_slot(fx, fx.layout_of(fx.tcx.types.i32));\n                 let lhs = lhs.load_scalar(fx);\n                 let rhs = rhs.load_scalar(fx);\n@@ -78,7 +78,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n         }\n         BinOp::Add | BinOp::Sub | BinOp::Mul => {\n             assert!(checked);\n-            let out_ty = fx.tcx.intern_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n+            let out_ty = fx.tcx.mk_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n             let out_place = CPlace::new_stack_slot(fx, fx.layout_of(out_ty));\n             let (param_types, args) = if fx.tcx.sess.target.is_like_windows {\n                 let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);"}, {"sha": "e5c4b244a1afd8f6f4dc4096b10fe3221013c54a", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm_x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -191,7 +191,7 @@ fn llvm_add_sub<'tcx>(\n     // carry0 | carry1 -> carry or borrow respectively\n     let cb_out = fx.bcx.ins().bor(cb0, cb1);\n \n-    let layout = fx.layout_of(fx.tcx.intern_tup(&[fx.tcx.types.u8, fx.tcx.types.u64]));\n+    let layout = fx.layout_of(fx.tcx.mk_tup(&[fx.tcx.types.u8, fx.tcx.types.u64]));\n     let val = CValue::by_val_pair(cb_out, c, layout);\n     ret.write_cvalue(fx, val);\n }"}, {"sha": "be908df83e8f59a1d85e57fd7ef4f273d2d90a9d", "filename": "compiler/rustc_codegen_cranelift/src/main_shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -119,7 +119,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n                     tcx,\n                     ParamEnv::reveal_all(),\n                     report.def_id,\n-                    tcx.intern_substs(&[GenericArg::from(main_ret_ty)]),\n+                    tcx.mk_substs(&[GenericArg::from(main_ret_ty)]),\n                 )\n                 .unwrap()\n                 .unwrap()\n@@ -146,7 +146,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n                     tcx,\n                     ParamEnv::reveal_all(),\n                     start_def_id,\n-                    tcx.intern_substs(&[main_ret_ty.into()]),\n+                    tcx.mk_substs(&[main_ret_ty.into()]),\n                 )\n                 .unwrap()\n                 .unwrap()"}, {"sha": "c058ece96d8e3465fdb16e70060b4b7f9563f77f", "filename": "compiler/rustc_codegen_cranelift/src/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -289,7 +289,7 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n         _ => bug!(\"binop {:?} on checked int/uint lhs: {:?} rhs: {:?}\", bin_op, in_lhs, in_rhs),\n     };\n \n-    let out_layout = fx.layout_of(fx.tcx.intern_tup(&[in_lhs.layout().ty, fx.tcx.types.bool]));\n+    let out_layout = fx.layout_of(fx.tcx.mk_tup(&[in_lhs.layout().ty, fx.tcx.types.bool]));\n     CValue::by_val_pair(res, has_overflow, out_layout)\n }\n "}, {"sha": "fc746fbd599f25cd46449cb84abe33c81e32a1ef", "filename": "compiler/rustc_codegen_gcc/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -383,7 +383,7 @@ impl<'gcc, 'tcx> MiscMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                     tcx,\n                     ty::ParamEnv::reveal_all(),\n                     def_id,\n-                    tcx.intern_substs(&[]),\n+                    tcx.mk_substs(&[]),\n                 )\n                 .unwrap().unwrap(),\n             ),"}, {"sha": "47dcbba59ac3c6201545ccc8f426365e90c7a5d3", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -520,14 +520,9 @@ impl<'ll, 'tcx> MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let tcx = self.tcx;\n         let llfn = match tcx.lang_items().eh_personality() {\n             Some(def_id) if !wants_msvc_seh(self.sess()) => self.get_fn_addr(\n-                ty::Instance::resolve(\n-                    tcx,\n-                    ty::ParamEnv::reveal_all(),\n-                    def_id,\n-                    tcx.intern_substs(&[]),\n-                )\n-                .unwrap()\n-                .unwrap(),\n+                ty::Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, tcx.mk_substs(&[]))\n+                    .unwrap()\n+                    .unwrap(),\n             ),\n             _ => {\n                 let name = if wants_msvc_seh(self.sess()) {"}, {"sha": "067a3e167feea0bc44a45b2a443bbf7277ccc69b", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -373,7 +373,7 @@ fn upstream_monomorphizations_provider(\n                 ExportedSymbol::Generic(def_id, substs) => (def_id, substs),\n                 ExportedSymbol::DropGlue(ty) => {\n                     if let Some(drop_in_place_fn_def_id) = drop_in_place_fn_def_id {\n-                        (drop_in_place_fn_def_id, tcx.intern_substs(&[ty.into()]))\n+                        (drop_in_place_fn_def_id, tcx.mk_substs(&[ty.into()]))\n                     } else {\n                         // `drop_in_place` in place does not exist, don't try\n                         // to use it."}, {"sha": "73179249bc4d8637ab5034293b9a18780635f0bd", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -476,7 +476,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                     cx.tcx(),\n                     ty::ParamEnv::reveal_all(),\n                     start_def_id,\n-                    cx.tcx().intern_substs(&[main_ret_ty.into()]),\n+                    cx.tcx().mk_substs(&[main_ret_ty.into()]),\n                 )\n                 .unwrap()\n                 .unwrap(),"}, {"sha": "f6c1b7a98aae7ebc8d5105e77f42f8511aa0381c", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -783,7 +783,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         };\n \n         let extra_args = &args[sig.inputs().skip_binder().len()..];\n-        let extra_args = bx.tcx().mk_type_list(extra_args.iter().map(|op_arg| {\n+        let extra_args = bx.tcx().mk_type_list_from_iter(extra_args.iter().map(|op_arg| {\n             let op_ty = op_arg.ty(self.mir, bx.tcx());\n             self.monomorphize(op_ty)\n         }));\n@@ -1547,7 +1547,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             slot\n         } else {\n             let layout = cx.layout_of(\n-                cx.tcx().intern_tup(&[cx.tcx().mk_mut_ptr(cx.tcx().types.u8), cx.tcx().types.i32]),\n+                cx.tcx().mk_tup(&[cx.tcx().mk_mut_ptr(cx.tcx().types.u8), cx.tcx().types.i32]),\n             );\n             let slot = PlaceRef::alloca(bx, layout);\n             self.personality_slot = Some(slot);"}, {"sha": "3d856986fb4f7e7b7b8275850c01db2b03fa5393", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -413,7 +413,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     lhs.layout.ty,\n                 );\n                 let val_ty = op.ty(bx.tcx(), lhs.layout.ty, rhs.layout.ty);\n-                let operand_ty = bx.tcx().intern_tup(&[val_ty, bx.tcx().types.bool]);\n+                let operand_ty = bx.tcx().mk_tup(&[val_ty, bx.tcx().types.bool]);\n                 OperandRef { val: result, layout: bx.cx().layout_of(operand_ty) }\n             }\n "}, {"sha": "7564ba17b404a02e213e3815e1b90f570a286eb8", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -180,7 +180,7 @@ pub(super) fn op_to_const<'tcx>(\n                         (ecx.tcx.global_alloc(alloc_id).unwrap_memory(), offset.bytes())\n                     }\n                     (None, _offset) => (\n-                        ecx.tcx.intern_const_alloc(Allocation::from_bytes_byte_aligned_immutable(\n+                        ecx.tcx.mk_const_alloc(Allocation::from_bytes_byte_aligned_immutable(\n                             b\"\" as &[u8],\n                         )),\n                         0,"}, {"sha": "b220d21f68b72b0f2a371afd2f570fe3df8af166", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -135,7 +135,7 @@ fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_eval:\n     };\n     // link the alloc id to the actual allocation\n     leftover_allocations.extend(alloc.provenance().ptrs().iter().map(|&(_, alloc_id)| alloc_id));\n-    let alloc = tcx.intern_const_alloc(alloc);\n+    let alloc = tcx.mk_const_alloc(alloc);\n     tcx.set_alloc_id_memory(alloc_id, alloc);\n     None\n }\n@@ -437,7 +437,7 @@ pub fn intern_const_alloc_recursive<\n                     alloc.mutability = Mutability::Not;\n                 }\n             }\n-            let alloc = tcx.intern_const_alloc(alloc);\n+            let alloc = tcx.mk_const_alloc(alloc);\n             tcx.set_alloc_id_memory(alloc_id, alloc);\n             for &(_, alloc_id) in alloc.inner().provenance().ptrs().iter() {\n                 if leftover_allocations.insert(alloc_id) {\n@@ -479,6 +479,6 @@ impl<'mir, 'tcx: 'mir, M: super::intern::CompileTimeMachine<'mir, 'tcx, !>>\n         f(self, &dest.into())?;\n         let mut alloc = self.memory.alloc_map.remove(&dest.ptr.provenance.unwrap()).unwrap().1;\n         alloc.mutability = Mutability::Not;\n-        Ok(self.tcx.intern_const_alloc(alloc))\n+        Ok(self.tcx.mk_const_alloc(alloc))\n     }\n }"}, {"sha": "6e47646caeda881a7da15d2f1d5198e2b3534f3f", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -45,7 +45,7 @@ fn numeric_intrinsic<Prov>(name: Symbol, bits: u128, kind: Primitive) -> Scalar<\n pub(crate) fn alloc_type_name<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ConstAllocation<'tcx> {\n     let path = crate::util::type_name(tcx, ty);\n     let alloc = Allocation::from_bytes_byte_aligned_immutable(path.into_bytes());\n-    tcx.intern_const_alloc(alloc)\n+    tcx.mk_const_alloc(alloc)\n }\n \n /// The logic for all nullary intrinsics is implemented here. These intrinsics don't get evaluated"}, {"sha": "cf52299b7ba825eb924c41daf6c7621391bcb1d3", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -96,7 +96,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let loc_ty = self\n             .tcx\n             .type_of(self.tcx.require_lang_item(LangItem::PanicLocation, None))\n-            .subst(*self.tcx, self.tcx.intern_substs(&[self.tcx.lifetimes.re_erased.into()]));\n+            .subst(*self.tcx, self.tcx.mk_substs(&[self.tcx.lifetimes.re_erased.into()]));\n         let loc_layout = self.layout_of(loc_ty).unwrap();\n         let location = self.allocate(loc_layout, MemoryKind::CallerLocation).unwrap();\n "}, {"sha": "4decfe863e6349cadc71a1e99aecb9da8f4eadf1", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -19,7 +19,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx> {\n         let (val, overflowed, ty) = self.overflowing_binary_op(op, &left, &right)?;\n         debug_assert_eq!(\n-            self.tcx.intern_tup(&[ty, self.tcx.types.bool]),\n+            self.tcx.mk_tup(&[ty, self.tcx.types.bool]),\n             dest.layout.ty,\n             \"type mismatch for result of {:?}\",\n             op,"}, {"sha": "2aea7c79b6d3ed3331dca3007f1dfb5d3afa79dd", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -73,7 +73,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let fn_sig =\n                     self.tcx.normalize_erasing_late_bound_regions(self.param_env, fn_sig_binder);\n                 let extra_args = &args[fn_sig.inputs().len()..];\n-                let extra_args = self.tcx.mk_type_list(extra_args.iter().map(|arg| arg.layout.ty));\n+                let extra_args =\n+                    self.tcx.mk_type_list_from_iter(extra_args.iter().map(|arg| arg.layout.ty));\n \n                 let (fn_val, fn_abi, with_caller_location) = match *func.layout.ty.kind() {\n                     ty::FnPtr(_sig) => {"}, {"sha": "3f3b66b0645a83525d6000b7e7b27f4241fffa1c", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -866,7 +866,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n \n             let mut projection = vec![PlaceElem::Deref];\n             projection.extend(place.projection);\n-            place.projection = tcx.intern_place_elems(&projection);\n+            place.projection = tcx.mk_place_elems(&projection);\n \n             // Create a temp to hold the promoted reference.\n             // This is because `*r` requires `r` to be a local,"}, {"sha": "068491646f47bfa73e63cf7c22357af2c2a317b5", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 }\n             }\n             ProjectionElem::Field(f, ty) => {\n-                let parent = Place { local, projection: self.tcx.intern_place_elems(proj_base) };\n+                let parent = Place { local, projection: self.tcx.mk_place_elems(proj_base) };\n                 let parent_ty = parent.ty(&self.body.local_decls, self.tcx);\n                 let fail_out_of_bounds = |this: &Self, location| {\n                     this.fail(location, format!(\"Out of bounds field {:?} for {:?}\", f, parent_ty));"}, {"sha": "c49e4d9d5818e35d1eac2e6eb9d6a8fcba366ab7", "filename": "compiler/rustc_hir_analysis/src/astconv/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -377,7 +377,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     // `<Foo as Iterator>::Item = String`.\n                     let projection_ty = pred.skip_binder().projection_ty;\n \n-                    let substs_with_infer_self = tcx.mk_substs(\n+                    let substs_with_infer_self = tcx.mk_substs_from_iter(\n                         std::iter::once(tcx.mk_ty_var(ty::TyVid::from_u32(0)).into())\n                             .chain(projection_ty.substs.iter().skip(1)),\n                     );"}, {"sha": "7f6518ffd7148bee6eba65e5c6018496e9046afb", "filename": "compiler/rustc_hir_analysis/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -370,7 +370,7 @@ pub fn create_substs_for_generic_args<'tcx, 'a>(\n         }\n     }\n \n-    tcx.intern_substs(&substs)\n+    tcx.mk_substs(&substs)\n }\n \n /// Checks that the correct number of generic arguments have been provided."}, {"sha": "49d4860314f3029c9b387841d00f30a3ca6f7055", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -381,7 +381,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // here and so associated type bindings will be handled regardless of whether there are any\n         // non-`Self` generic parameters.\n         if generics.params.is_empty() {\n-            return (tcx.intern_substs(parent_substs), arg_count);\n+            return (tcx.mk_substs(parent_substs), arg_count);\n         }\n \n         struct SubstsForAstPathCtxt<'a, 'tcx> {\n@@ -1529,7 +1529,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         arg\n                     })\n                     .collect();\n-                let substs = tcx.intern_substs(&substs[..]);\n+                let substs = tcx.mk_substs(&substs);\n \n                 let span = i.bottom().1;\n                 let empty_generic_args = hir_trait_bounds.iter().any(|hir_bound| {\n@@ -1591,7 +1591,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             arg\n                         })\n                         .collect();\n-                    b.projection_ty.substs = tcx.intern_substs(&substs[..]);\n+                    b.projection_ty.substs = tcx.mk_substs(&substs);\n                 }\n \n                 ty::ExistentialProjection::erase_self_ty(tcx, b)\n@@ -1613,7 +1613,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .collect::<SmallVec<[_; 8]>>();\n         v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));\n         v.dedup();\n-        let existential_predicates = tcx.intern_poly_existential_predicates(&v);\n+        let existential_predicates = tcx.mk_poly_existential_predicates(&v);\n \n         // Use explicitly-specified region bound.\n         let region_bound = if !lifetime.is_elided() {\n@@ -3020,7 +3020,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 tcx.mk_ref(r, ty::TypeAndMut { ty: t, mutbl: mt.mutbl })\n             }\n             hir::TyKind::Never => tcx.types.never,\n-            hir::TyKind::Tup(fields) => tcx.mk_tup(fields.iter().map(|t| self.ast_ty_to_ty(t))),\n+            hir::TyKind::Tup(fields) => {\n+                tcx.mk_tup_from_iter(fields.iter().map(|t| self.ast_ty_to_ty(t)))\n+            }\n             hir::TyKind::BareFn(bf) => {\n                 require_c_abi_if_c_variadic(tcx, bf.decl, bf.abi, ast_ty.span);\n "}, {"sha": "89b4e6227bd616b1ca6693ba62a34229961b6dfa", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -196,7 +196,7 @@ fn compare_method_predicate_entailment<'tcx>(\n     // the new hybrid bounds we computed.\n     let normalize_cause = traits::ObligationCause::misc(impl_m_span, impl_m_def_id);\n     let param_env = ty::ParamEnv::new(\n-        tcx.intern_predicates(&hybrid_preds.predicates),\n+        tcx.mk_predicates(&hybrid_preds.predicates),\n         Reveal::UserFacing,\n         hir::Constness::NotConst,\n     );\n@@ -1795,7 +1795,7 @@ fn compare_type_predicate_entailment<'tcx>(\n     let impl_ty_span = tcx.def_span(impl_ty_def_id);\n     let normalize_cause = traits::ObligationCause::misc(impl_ty_span, impl_ty_def_id);\n     let param_env = ty::ParamEnv::new(\n-        tcx.intern_predicates(&hybrid_preds.predicates),\n+        tcx.mk_predicates(&hybrid_preds.predicates),\n         Reveal::UserFacing,\n         hir::Constness::NotConst,\n     );\n@@ -1937,8 +1937,8 @@ pub(super) fn check_type_bounds<'tcx>(\n             .into()\n         }\n     });\n-    let bound_vars = tcx.intern_bound_variable_kinds(&bound_vars);\n-    let impl_ty_substs = tcx.intern_substs(&substs);\n+    let bound_vars = tcx.mk_bound_variable_kinds(&bound_vars);\n+    let impl_ty_substs = tcx.mk_substs(&substs);\n     let container_id = impl_ty.container_id(tcx);\n \n     let rebased_substs = impl_ty_substs.rebase_onto(tcx, container_id, impl_trait_ref.substs);\n@@ -1978,11 +1978,7 @@ pub(super) fn check_type_bounds<'tcx>(\n                 .to_predicate(tcx),\n             ),\n         };\n-        ty::ParamEnv::new(\n-            tcx.intern_predicates(&predicates),\n-            Reveal::UserFacing,\n-            param_env.constness(),\n-        )\n+        ty::ParamEnv::new(tcx.mk_predicates(&predicates), Reveal::UserFacing, param_env.constness())\n     };\n     debug!(?normalize_param_env);\n "}, {"sha": "054284cced5adb85a36d507fa9edccc475b250ec", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -137,7 +137,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     let intrinsic_name = tcx.item_name(intrinsic_id);\n     let name_str = intrinsic_name.as_str();\n \n-    let bound_vars = tcx.intern_bound_variable_kinds(&[\n+    let bound_vars = tcx.mk_bound_variable_kinds(&[\n         ty::BoundVariableKind::Region(ty::BrAnon(0, None)),\n         ty::BoundVariableKind::Region(ty::BrEnv),\n     ]);\n@@ -165,7 +165,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             \"cxchg\" | \"cxchgweak\" => (\n                 1,\n                 vec![tcx.mk_mut_ptr(param(0)), param(0), param(0)],\n-                tcx.intern_tup(&[param(0), tcx.types.bool]),\n+                tcx.mk_tup(&[param(0), tcx.types.bool]),\n             ),\n             \"load\" => (1, vec![tcx.mk_imm_ptr(param(0))], param(0)),\n             \"store\" => (1, vec![tcx.mk_mut_ptr(param(0)), param(0)], tcx.mk_unit()),\n@@ -317,7 +317,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             | sym::bitreverse => (1, vec![param(0)], param(0)),\n \n             sym::add_with_overflow | sym::sub_with_overflow | sym::mul_with_overflow => {\n-                (1, vec![param(0), param(0)], tcx.intern_tup(&[param(0), tcx.types.bool]))\n+                (1, vec![param(0), param(0)], tcx.mk_tup(&[param(0), tcx.types.bool]))\n             }\n \n             sym::ptr_guaranteed_cmp => {\n@@ -372,7 +372,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 (\n                     1,\n                     vec![tcx.mk_imm_ref(tcx.mk_re_late_bound(ty::INNERMOST, br), param(0))],\n-                    tcx.mk_projection(discriminant_def_id, tcx.intern_substs(&[param(0).into()])),\n+                    tcx.mk_projection(discriminant_def_id, tcx.mk_substs(&[param(0).into()])),\n                 )\n             }\n "}, {"sha": "4cccdf30c5fa6c16967a904257e8fae4ed4e8639", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -493,8 +493,9 @@ fn augment_param_env<'tcx>(\n         return param_env;\n     }\n \n-    let bounds =\n-        tcx.mk_predicates(param_env.caller_bounds().iter().chain(new_predicates.iter().cloned()));\n+    let bounds = tcx.mk_predicates_from_iter(\n+        param_env.caller_bounds().iter().chain(new_predicates.iter().cloned()),\n+    );\n     // FIXME(compiler-errors): Perhaps there is a case where we need to normalize this\n     // i.e. traits::normalize_param_env_or_error\n     ty::ParamEnv::new(bounds, param_env.reveal(), param_env.constness())\n@@ -1476,7 +1477,7 @@ fn check_fn_or_method<'tcx>(\n         |idx| hir_decl.inputs.get(idx).map_or(hir_decl.output.span(), |arg: &hir::Ty<'_>| arg.span);\n \n     sig.inputs_and_output =\n-        tcx.mk_type_list(sig.inputs_and_output.iter().enumerate().map(|(idx, ty)| {\n+        tcx.mk_type_list_from_iter(sig.inputs_and_output.iter().enumerate().map(|(idx, ty)| {\n             wfcx.normalize(\n                 arg_span(idx),\n                 Some(WellFormedLoc::Param {"}, {"sha": "604d54cafb5323e13d882e33ae689e0fdccd98e0", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -905,7 +905,7 @@ fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AdtDef<'_> {\n         }\n         _ => bug!(),\n     };\n-    tcx.alloc_adt_def(def_id.to_def_id(), kind, variants, repr)\n+    tcx.mk_adt_def(def_id.to_def_id(), kind, variants, repr)\n }\n \n fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {"}, {"sha": "9cf3ff65a91cab6fe4d57a5519739a21afd2f23a", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -103,7 +103,7 @@ pub(super) fn item_bounds(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n ) -> ty::EarlyBinder<&'_ ty::List<ty::Predicate<'_>>> {\n-    let bounds = tcx.mk_predicates(\n+    let bounds = tcx.mk_predicates_from_iter(\n         util::elaborate_predicates(\n             tcx,\n             tcx.explicit_item_bounds(def_id).iter().map(|&(bound, _span)| bound),"}, {"sha": "6a0d5c01109df5cd5547124cd16ba5b5798fa9a6", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -232,7 +232,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let Some(trait_def_id) = opt_trait_def_id else { continue };\n \n             let opt_input_type = opt_arg_exprs.map(|arg_exprs| {\n-                self.tcx.mk_tup(arg_exprs.iter().map(|e| {\n+                self.tcx.mk_tup_from_iter(arg_exprs.iter().map(|e| {\n                     self.next_ty_var(TypeVariableOrigin {\n                         kind: TypeVariableOriginKind::TypeInference,\n                         span: e.span,"}, {"sha": "d84fabb783490d90ee857db0b31a39fd00d231ef", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -127,7 +127,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // the `closures` table.\n         let sig = bound_sig.map_bound(|sig| {\n             self.tcx.mk_fn_sig(\n-                [self.tcx.intern_tup(sig.inputs())],\n+                [self.tcx.mk_tup(sig.inputs())],\n                 sig.output(),\n                 sig.c_variadic,\n                 sig.unsafety,"}, {"sha": "d192d16e8df8b0e137cf781108bbad5b09f89a73", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -1492,7 +1492,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             _ => self.check_expr_with_expectation(&e, NoExpectation),\n         });\n-        let tuple = self.tcx.mk_tup(elt_ts_iter);\n+        let tuple = self.tcx.mk_tup_from_iter(elt_ts_iter);\n         if let Err(guar) = tuple.error_reported() {\n             self.tcx.ty_error(guar)\n         } else {"}, {"sha": "2e62e13648c95140a7ba0a3c0c2bc55166819b9c", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -102,7 +102,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             let err_inputs = match tuple_arguments {\n                 DontTupleArguments => err_inputs,\n-                TupleArguments => vec![self.tcx.intern_tup(&err_inputs)],\n+                TupleArguments => vec![self.tcx.mk_tup(&err_inputs)],\n             };\n \n             self.check_argument_types(\n@@ -642,7 +642,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 && provided_arg_tys.len() == formal_and_expected_inputs.len() - 1 + tys.len()\n             {\n                 // Wrap up the N provided arguments starting at this position in a tuple.\n-                let provided_as_tuple = tcx.mk_tup(\n+                let provided_as_tuple = tcx.mk_tup_from_iter(\n                     provided_arg_tys.iter().map(|(ty, _)| *ty).skip(mismatch_idx).take(tys.len()),\n                 );\n "}, {"sha": "2e41c2041f88868f441cb2b5ca8505d2f76e0353", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -311,8 +311,8 @@ pub fn resolve_interior<'a, 'tcx>(\n     };\n \n     // Extract type components to build the witness type.\n-    let type_list = fcx.tcx.mk_type_list(type_causes.iter().map(|cause| cause.ty));\n-    let bound_vars = fcx.tcx.intern_bound_variable_kinds(&bound_vars);\n+    let type_list = fcx.tcx.mk_type_list_from_iter(type_causes.iter().map(|cause| cause.ty));\n+    let bound_vars = fcx.tcx.mk_bound_variable_kinds(&bound_vars);\n     let witness =\n         fcx.tcx.mk_generator_witness(ty::Binder::bind_with_vars(type_list, bound_vars.clone()));\n "}, {"sha": "47a4d4e72dffd9a8951e084268c6708a948d1b3d", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -574,7 +574,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // `<Foo as Iterator>::Item = String`.\n                         let projection_ty = pred.skip_binder().projection_ty;\n \n-                        let substs_with_infer_self = tcx.mk_substs(\n+                        let substs_with_infer_self = tcx.mk_substs_from_iter(\n                             iter::once(tcx.mk_ty_var(ty::TyVid::from_u32(0)).into())\n                                 .chain(projection_ty.substs.iter().skip(1)),\n                         );\n@@ -1252,7 +1252,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let ty::Adt(def, substs) = target_ty.kind() {\n                 // If there are any inferred arguments, (`{integer}`), we should replace\n                 // them with underscores to allow the compiler to infer them\n-                let infer_substs = self.tcx.mk_substs(substs.into_iter().map(|arg| {\n+                let infer_substs = self.tcx.mk_substs_from_iter(substs.into_iter().map(|arg| {\n                     if !arg.is_suggestable(self.tcx, true) {\n                         has_unsuggestable_args = true;\n                         match arg.unpack() {"}, {"sha": "c36c75e444368fb3c0bee4863145746bbadd5f1d", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -1302,8 +1302,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 TypeVariableOrigin { kind: TypeVariableOriginKind::TypeInference, span },\n             )\n         });\n-        let element_tys = tcx.mk_type_list(element_tys_iter);\n-        let pat_ty = tcx.intern_tup(element_tys);\n+        let element_tys = tcx.mk_type_list_from_iter(element_tys_iter);\n+        let pat_ty = tcx.mk_tup(element_tys);\n         if let Some(mut err) = self.demand_eqtype_pat_diag(span, expected, pat_ty, ti) {\n             let reported = err.emit();\n             // Walk subpatterns with an expected type of `err` in this case to silence\n@@ -1312,7 +1312,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             for (_, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n                 self.check_pat(elem, tcx.ty_error(reported), def_bm, ti);\n             }\n-            tcx.mk_tup(element_tys_iter)\n+            tcx.mk_tup_from_iter(element_tys_iter)\n         } else {\n             for (i, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n                 self.check_pat(elem, element_tys[i], def_bm, ti);"}, {"sha": "e94915c754e8f95727f30543e5fd060b56641dd7", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -301,7 +301,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Build a tuple (U0..Un) of the final upvar types U0..Un\n         // and unify the upvar tuple type in the closure with it:\n-        let final_tupled_upvars_type = self.tcx.intern_tup(&final_upvar_tys);\n+        let final_tupled_upvars_type = self.tcx.mk_tup(&final_upvar_tys);\n         self.demand_suptype(span, substs.tupled_upvars_ty(), final_tupled_upvars_type);\n \n         let fake_reads = delegate\n@@ -315,8 +315,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.typeck_results.borrow_mut().closure_size_eval.insert(\n                 closure_def_id,\n                 ClosureSizeProfileData {\n-                    before_feature_tys: self.tcx.intern_tup(&before_feature_tys),\n-                    after_feature_tys: self.tcx.intern_tup(&after_feature_tys),\n+                    before_feature_tys: self.tcx.mk_tup(&before_feature_tys),\n+                    after_feature_tys: self.tcx.mk_tup(&after_feature_tys),\n                 },\n             );\n         }"}, {"sha": "7ffd39de781b46295461ef1f5688518c7cc10aa2", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -572,7 +572,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         debug_assert!(!out_value.needs_infer() && !out_value.has_placeholders());\n \n         let canonical_variables =\n-            tcx.intern_canonical_var_infos(&canonicalizer.universe_canonicalized_variables());\n+            tcx.mk_canonical_var_infos(&canonicalizer.universe_canonicalized_variables());\n \n         let max_universe = canonical_variables\n             .iter()"}, {"sha": "8c782a933a5bac8b9ba37e282c03ec0c8c89efba", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -88,7 +88,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         universe_map: impl Fn(ty::UniverseIndex) -> ty::UniverseIndex,\n     ) -> CanonicalVarValues<'tcx> {\n         CanonicalVarValues {\n-            var_values: self.tcx.mk_substs(\n+            var_values: self.tcx.mk_substs_from_iter(\n                 variables\n                     .iter()\n                     .map(|info| self.instantiate_canonical_var(span, info, &universe_map)),"}, {"sha": "832af91a4313c5a7228700967dad1d0a4ccb4a1c", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -474,8 +474,8 @@ impl<'tcx> InferCtxt<'tcx> {\n         // given variable in the loop above, use that. Otherwise, use\n         // a fresh inference variable.\n         let result_subst = CanonicalVarValues {\n-            var_values: self.tcx.mk_substs(query_response.variables.iter().enumerate().map(\n-                |(index, info)| {\n+            var_values: self.tcx.mk_substs_from_iter(\n+                query_response.variables.iter().enumerate().map(|(index, info)| {\n                     if info.is_existential() {\n                         match opt_values[BoundVar::new(index)] {\n                             Some(k) => k,\n@@ -488,8 +488,8 @@ impl<'tcx> InferCtxt<'tcx> {\n                             universe_map[u.as_usize()]\n                         })\n                     }\n-                },\n-            )),\n+                }),\n+            ),\n         };\n \n         let mut obligations = vec![];"}, {"sha": "79efc1ce7bfc0fb8c42963bf8eaba2051b7ae324", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -925,7 +925,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     ) -> Option<()> {\n         // FIXME/HACK: Go back to `SubstsRef` to use its inherent methods,\n         // ideally that shouldn't be necessary.\n-        let sub = self.tcx.intern_substs(sub);\n+        let sub = self.tcx.mk_substs(sub);\n         for (i, ta) in sub.types().enumerate() {\n             if ta == other_ty {\n                 self.highlight_outer(&mut t1_out, &mut t2_out, path, sub, i, other_ty);"}, {"sha": "45c12d2938fa44cceafd19613ad5204da73f69c7", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -677,21 +677,21 @@ impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {\n                     return;\n                 }\n                 let def = cx.tcx.adt_def(item.owner_id);\n-                (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))\n+                (def, cx.tcx.mk_adt(def, cx.tcx.mk_substs(&[])))\n             }\n             hir::ItemKind::Union(_, ref ast_generics) => {\n                 if !ast_generics.params.is_empty() {\n                     return;\n                 }\n                 let def = cx.tcx.adt_def(item.owner_id);\n-                (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))\n+                (def, cx.tcx.mk_adt(def, cx.tcx.mk_substs(&[])))\n             }\n             hir::ItemKind::Enum(_, ref ast_generics) => {\n                 if !ast_generics.params.is_empty() {\n                     return;\n                 }\n                 let def = cx.tcx.adt_def(item.owner_id);\n-                (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))\n+                (def, cx.tcx.mk_adt(def, cx.tcx.mk_substs(&[])))\n             }\n             _ => return,\n         };"}, {"sha": "5a4d358e5dd622f3b21e238ba9d2ff2d88dd64f2", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -502,7 +502,7 @@ impl<'tcx> Collector<'tcx> {\n                 .subst_identity()\n                 .fn_sig(self.tcx)\n                 .inputs()\n-                .map_bound(|slice| self.tcx.intern_type_list(slice)),\n+                .map_bound(|slice| self.tcx.mk_type_list(slice)),\n         );\n \n         argument_types"}, {"sha": "b1e59b0a470b5735415aec4ca1f83af29355944d", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -910,7 +910,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             std::iter::once(self.get_variant(&kind, item_id, did)).collect()\n         };\n \n-        tcx.alloc_adt_def(did, adt_kind, variants, repr)\n+        tcx.mk_adt_def(did, adt_kind, variants, repr)\n     }\n \n     fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {"}, {"sha": "8712514a384c108e21fe5726500117fb20f31db0", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -47,7 +47,7 @@ impl<'tcx> ty::TypeFoldable<TyCtxt<'tcx>> for CanonicalVarInfos<'tcx> {\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n-        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_canonical_var_infos(v))\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.mk_canonical_var_infos(v))\n     }\n }\n \n@@ -342,7 +342,7 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n         infos: CanonicalVarInfos<'tcx>,\n     ) -> CanonicalVarValues<'tcx> {\n         CanonicalVarValues {\n-            var_values: tcx.mk_substs(infos.iter().enumerate().map(\n+            var_values: tcx.mk_substs_from_iter(infos.iter().enumerate().map(\n                 |(i, info)| -> ty::GenericArg<'tcx> {\n                     match info.kind {\n                         CanonicalVarKind::Ty(_) | CanonicalVarKind::PlaceholderTy(_) => {"}, {"sha": "7de9800d4c49601e5e8e368903377482a0030b70", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -1620,7 +1620,7 @@ impl<'tcx> Place<'tcx> {\n             &v\n         };\n \n-        Place { local: self.local, projection: tcx.intern_place_elems(new_projections) }\n+        Place { local: self.local, projection: tcx.mk_place_elems(new_projections) }\n     }\n }\n \n@@ -2530,13 +2530,14 @@ impl<'tcx> ConstantKind<'tcx> {\n         {\n             InternalSubsts::identity_for_item(tcx, parent_did.to_def_id())\n         } else {\n-            tcx.intern_substs(&[])\n+            tcx.mk_substs(&[])\n         };\n         debug!(?parent_substs);\n \n         let did = def.did.to_def_id();\n         let child_substs = InternalSubsts::identity_for_item(tcx, did);\n-        let substs = tcx.mk_substs(parent_substs.into_iter().chain(child_substs.into_iter()));\n+        let substs =\n+            tcx.mk_substs_from_iter(parent_substs.into_iter().chain(child_substs.into_iter()));\n         debug!(?substs);\n \n         let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);"}, {"sha": "0aa2c500f51fbf018731effd16b5b497b1e90b41", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -194,14 +194,16 @@ impl<'tcx> Rvalue<'tcx> {\n                 let lhs_ty = lhs.ty(local_decls, tcx);\n                 let rhs_ty = rhs.ty(local_decls, tcx);\n                 let ty = op.ty(tcx, lhs_ty, rhs_ty);\n-                tcx.intern_tup(&[ty, tcx.types.bool])\n+                tcx.mk_tup(&[ty, tcx.types.bool])\n             }\n             Rvalue::UnaryOp(UnOp::Not | UnOp::Neg, ref operand) => operand.ty(local_decls, tcx),\n             Rvalue::Discriminant(ref place) => place.ty(local_decls, tcx).ty.discriminant_ty(tcx),\n             Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => tcx.types.usize,\n             Rvalue::Aggregate(ref ak, ref ops) => match **ak {\n                 AggregateKind::Array(ty) => tcx.mk_array(ty, ops.len() as u64),\n-                AggregateKind::Tuple => tcx.mk_tup(ops.iter().map(|op| op.ty(local_decls, tcx))),\n+                AggregateKind::Tuple => {\n+                    tcx.mk_tup_from_iter(ops.iter().map(|op| op.ty(local_decls, tcx)))\n+                }\n                 AggregateKind::Adt(did, _, substs, _, _) => tcx.type_of(did).subst(tcx, substs),\n                 AggregateKind::Closure(did, substs) => tcx.mk_closure(did, substs),\n                 AggregateKind::Generator(did, substs, movability) => {"}, {"sha": "9881583214eb4f68370ce7f537012ec12584aeba", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -53,6 +53,6 @@ impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<PlaceElem<'tcx>> {\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n-        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_place_elems(v))\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.mk_place_elems(v))\n     }\n }"}, {"sha": "5c056b29975c4d4c7b13a90df3c893bfab8aea50", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -1045,7 +1045,7 @@ macro_rules! visit_place_fns {\n             self.visit_local(&mut place.local, context, location);\n \n             if let Some(new_projection) = self.process_projection(&place.projection, location) {\n-                place.projection = self.tcx().intern_place_elems(&new_projection);\n+                place.projection = self.tcx().mk_place_elems(&new_projection);\n             }\n         }\n "}, {"sha": "c5bf9717f036a7abf15412ad10c48390bb2f0e91", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -30,20 +30,18 @@ impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ExternalConstraints<'tcx> {\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n-        Ok(FallibleTypeFolder::interner(folder).intern_external_constraints(\n-            ExternalConstraintsData {\n-                regions: (),\n-                opaque_types: self\n-                    .opaque_types\n-                    .iter()\n-                    .map(|opaque| opaque.try_fold_with(folder))\n-                    .collect::<Result<_, F::Error>>()?,\n-            },\n-        ))\n+        Ok(FallibleTypeFolder::interner(folder).mk_external_constraints(ExternalConstraintsData {\n+            regions: (),\n+            opaque_types: self\n+                .opaque_types\n+                .iter()\n+                .map(|opaque| opaque.try_fold_with(folder))\n+                .collect::<Result<_, F::Error>>()?,\n+        }))\n     }\n \n     fn fold_with<F: TypeFolder<TyCtxt<'tcx>>>(self, folder: &mut F) -> Self {\n-        TypeFolder::interner(folder).intern_external_constraints(ExternalConstraintsData {\n+        TypeFolder::interner(folder).mk_external_constraints(ExternalConstraintsData {\n             regions: (),\n             opaque_types: self.opaque_types.iter().map(|opaque| opaque.fold_with(folder)).collect(),\n         })"}, {"sha": "ec21030b3024ddcd5c08873115c42baffd3b746c", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -54,7 +54,7 @@ bitflags! {\n \n /// The definition of a user-defined type, e.g., a `struct`, `enum`, or `union`.\n ///\n-/// These are all interned (by `alloc_adt_def`) into the global arena.\n+/// These are all interned (by `mk_adt_def`) into the global arena.\n ///\n /// The initialism *ADT* stands for an [*algebraic data type (ADT)*][adt].\n /// This is slightly wrong because `union`s are not ADTs."}, {"sha": "7ded1b6b42c7963db2b322d1b6f49ff002a2ec3a", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -244,7 +244,7 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for SubstsRef<'tcx> {\n     fn decode(decoder: &mut D) -> Self {\n         let len = decoder.read_usize();\n         let tcx = decoder.interner();\n-        tcx.mk_substs(\n+        tcx.mk_substs_from_iter(\n             (0..len).map::<ty::subst::GenericArg<'tcx>, _>(|_| Decodable::decode(decoder)),\n         )\n     }\n@@ -254,7 +254,7 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for mir::Place<'tcx> {\n     fn decode(decoder: &mut D) -> Self {\n         let local: mir::Local = Decodable::decode(decoder);\n         let len = decoder.read_usize();\n-        let projection = decoder.interner().mk_place_elems(\n+        let projection = decoder.interner().mk_place_elems_from_iter(\n             (0..len).map::<mir::PlaceElem<'tcx>, _>(|_| Decodable::decode(decoder)),\n         );\n         mir::Place { local, projection }\n@@ -272,7 +272,7 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for CanonicalVarInfos<'t\n         let len = decoder.read_usize();\n         let interned: Vec<CanonicalVarInfo<'tcx>> =\n             (0..len).map(|_| Decodable::decode(decoder)).collect();\n-        decoder.interner().intern_canonical_var_infos(interned.as_slice())\n+        decoder.interner().mk_canonical_var_infos(&interned)\n     }\n }\n \n@@ -310,7 +310,9 @@ macro_rules! impl_decodable_via_ref {\n impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D> for ty::List<Ty<'tcx>> {\n     fn decode(decoder: &mut D) -> &'tcx Self {\n         let len = decoder.read_usize();\n-        decoder.interner().mk_type_list((0..len).map::<Ty<'tcx>, _>(|_| Decodable::decode(decoder)))\n+        decoder\n+            .interner()\n+            .mk_type_list_from_iter((0..len).map::<Ty<'tcx>, _>(|_| Decodable::decode(decoder)))\n     }\n }\n \n@@ -319,7 +321,7 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D>\n {\n     fn decode(decoder: &mut D) -> &'tcx Self {\n         let len = decoder.read_usize();\n-        decoder.interner().mk_poly_existential_predicates(\n+        decoder.interner().mk_poly_existential_predicates_from_iter(\n             (0..len).map::<ty::Binder<'tcx, _>, _>(|_| Decodable::decode(decoder)),\n         )\n     }\n@@ -342,13 +344,13 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D> for [ty::ValTre\n \n impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for ConstAllocation<'tcx> {\n     fn decode(decoder: &mut D) -> Self {\n-        decoder.interner().intern_const_alloc(Decodable::decode(decoder))\n+        decoder.interner().mk_const_alloc(Decodable::decode(decoder))\n     }\n }\n \n impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for AdtDef<'tcx> {\n     fn decode(decoder: &mut D) -> Self {\n-        decoder.interner().intern_adt_def(Decodable::decode(decoder))\n+        decoder.interner().mk_adt_def_from_data(Decodable::decode(decoder))\n     }\n }\n \n@@ -375,7 +377,7 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D>\n {\n     fn decode(decoder: &mut D) -> &'tcx Self {\n         let len = decoder.read_usize();\n-        decoder.interner().mk_bound_variable_kinds(\n+        decoder.interner().mk_bound_variable_kinds_from_iter(\n             (0..len).map::<ty::BoundVariableKind, _>(|_| Decodable::decode(decoder)),\n         )\n     }\n@@ -384,18 +386,18 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D>\n impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D> for ty::List<ty::Const<'tcx>> {\n     fn decode(decoder: &mut D) -> &'tcx Self {\n         let len = decoder.read_usize();\n-        decoder\n-            .interner()\n-            .mk_const_list((0..len).map::<ty::Const<'tcx>, _>(|_| Decodable::decode(decoder)))\n+        decoder.interner().mk_const_list_from_iter(\n+            (0..len).map::<ty::Const<'tcx>, _>(|_| Decodable::decode(decoder)),\n+        )\n     }\n }\n \n impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D> for ty::List<ty::Predicate<'tcx>> {\n     fn decode(decoder: &mut D) -> &'tcx Self {\n         let len = decoder.read_usize();\n-        let predicates: Vec<_> =\n-            (0..len).map::<ty::Predicate<'tcx>, _>(|_| Decodable::decode(decoder)).collect();\n-        decoder.interner().intern_predicates(&predicates)\n+        decoder.interner().mk_predicates_from_iter(\n+            (0..len).map::<ty::Predicate<'tcx>, _>(|_| Decodable::decode(decoder)),\n+        )\n     }\n }\n "}, {"sha": "6a76a55e4ad72394c3df4668a1b99ec2c88b5463", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 70, "deletions": 64, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -177,7 +177,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n         }\n     }\n \n-    /// Interns a type.\n+    /// Interns a type. (Use `mk_*` functions instead, where possible.)\n     #[allow(rustc::usage_of_ty_tykind)]\n     #[inline(never)]\n     fn intern_ty(&self, kind: TyKind<'tcx>, sess: &Session, untracked: &Untracked) -> Ty<'tcx> {\n@@ -217,6 +217,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n         }\n     }\n \n+    /// Interns a predicate. (Use `mk_predicate` instead, where possible.)\n     #[inline(never)]\n     fn intern_predicate(\n         &self,\n@@ -615,21 +616,21 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.arena.alloc(Steal::new(promoted))\n     }\n \n-    pub fn alloc_adt_def(\n+    pub fn mk_adt_def(\n         self,\n         did: DefId,\n         kind: AdtKind,\n         variants: IndexVec<VariantIdx, ty::VariantDef>,\n         repr: ReprOptions,\n     ) -> ty::AdtDef<'tcx> {\n-        self.intern_adt_def(ty::AdtDefData::new(self, did, kind, variants, repr))\n+        self.mk_adt_def_from_data(ty::AdtDefData::new(self, did, kind, variants, repr))\n     }\n \n     /// Allocates a read-only byte or string literal for `mir::interpret`.\n     pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {\n         // Create an allocation that just contains these bytes.\n         let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);\n-        let alloc = self.intern_const_alloc(alloc);\n+        let alloc = self.mk_const_alloc(alloc);\n         self.create_memory_alloc(alloc)\n     }\n \n@@ -1194,7 +1195,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_imm_ref(\n             self.lifetimes.re_static,\n             self.type_of(self.require_lang_item(LangItem::PanicLocation, None))\n-                .subst(self, self.intern_substs(&[self.lifetimes.re_static.into()])),\n+                .subst(self, self.mk_substs(&[self.lifetimes.re_static.into()])),\n         )\n     }\n \n@@ -1276,7 +1277,7 @@ macro_rules! nop_lift {\n \n // Can't use the macros as we have reuse the `substs` here.\n //\n-// See `intern_type_list` for more info.\n+// See `mk_type_list` for more info.\n impl<'a, 'tcx> Lift<'tcx> for &'a List<Ty<'a>> {\n     type Lifted = &'tcx List<Ty<'tcx>>;\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n@@ -1517,7 +1518,7 @@ impl<'tcx, T: Hash> Hash for InternedInSet<'tcx, List<T>> {\n }\n \n macro_rules! direct_interners {\n-    ($($name:ident: $method:ident($ty:ty): $ret_ctor:ident -> $ret_ty:ty,)+) => {\n+    ($($name:ident: $vis:vis $method:ident($ty:ty): $ret_ctor:ident -> $ret_ty:ty,)+) => {\n         $(impl<'tcx> Borrow<$ty> for InternedInSet<'tcx, $ty> {\n             fn borrow<'a>(&'a self) -> &'a $ty {\n                 &self.0\n@@ -1543,7 +1544,7 @@ macro_rules! direct_interners {\n         }\n \n         impl<'tcx> TyCtxt<'tcx> {\n-            pub fn $method(self, v: $ty) -> $ret_ty {\n+            $vis fn $method(self, v: $ty) -> $ret_ty {\n                 $ret_ctor(Interned::new_unchecked(self.interners.$name.intern(v, |v| {\n                     InternedInSet(self.interners.arena.alloc(v))\n                 }).0))\n@@ -1552,19 +1553,23 @@ macro_rules! direct_interners {\n     }\n }\n \n+// Functions with a `mk_` prefix are intended for use outside this file and\n+// crate. Functions with an `intern_` prefix are intended for use within this\n+// file only, and have a corresponding `mk_` function.\n direct_interners! {\n     region: intern_region(RegionKind<'tcx>): Region -> Region<'tcx>,\n-    const_: mk_const_internal(ConstData<'tcx>): Const -> Const<'tcx>,\n-    const_allocation: intern_const_alloc(Allocation): ConstAllocation -> ConstAllocation<'tcx>,\n-    layout: intern_layout(LayoutS): Layout -> Layout<'tcx>,\n-    adt_def: intern_adt_def(AdtDefData): AdtDef -> AdtDef<'tcx>,\n-    external_constraints: intern_external_constraints(ExternalConstraintsData<'tcx>): ExternalConstraints -> ExternalConstraints<'tcx>,\n+    const_: intern_const(ConstData<'tcx>): Const -> Const<'tcx>,\n+    const_allocation: pub mk_const_alloc(Allocation): ConstAllocation -> ConstAllocation<'tcx>,\n+    layout: pub mk_layout(LayoutS): Layout -> Layout<'tcx>,\n+    adt_def: pub mk_adt_def_from_data(AdtDefData): AdtDef -> AdtDef<'tcx>,\n+    external_constraints: pub mk_external_constraints(ExternalConstraintsData<'tcx>):\n+        ExternalConstraints -> ExternalConstraints<'tcx>,\n }\n \n macro_rules! slice_interners {\n-    ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (\n+    ($($field:ident: $vis:vis $method:ident($ty:ty)),+ $(,)?) => (\n         impl<'tcx> TyCtxt<'tcx> {\n-            $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {\n+            $($vis fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {\n                 if v.is_empty() {\n                     List::empty()\n                 } else {\n@@ -1577,16 +1582,18 @@ macro_rules! slice_interners {\n     );\n }\n \n+// These functions intern slices. They all have a corresponding\n+// `mk_foo_from_iter` function that interns an iterator. The slice version\n+// should be used when possible, because it's faster.\n slice_interners!(\n-    const_lists: intern_const_list(Const<'tcx>),\n-    substs: intern_substs(GenericArg<'tcx>),\n-    canonical_var_infos: intern_canonical_var_infos(CanonicalVarInfo<'tcx>),\n-    poly_existential_predicates:\n-        _intern_poly_existential_predicates(PolyExistentialPredicate<'tcx>),\n-    predicates: _intern_predicates(Predicate<'tcx>),\n-    projs: intern_projs(ProjectionKind),\n-    place_elems: intern_place_elems(PlaceElem<'tcx>),\n-    bound_variable_kinds: intern_bound_variable_kinds(ty::BoundVariableKind),\n+    const_lists: pub mk_const_list(Const<'tcx>),\n+    substs: pub mk_substs(GenericArg<'tcx>),\n+    canonical_var_infos: pub mk_canonical_var_infos(CanonicalVarInfo<'tcx>),\n+    poly_existential_predicates: intern_poly_existential_predicates(PolyExistentialPredicate<'tcx>),\n+    predicates: intern_predicates(Predicate<'tcx>),\n+    projs: pub mk_projs(ProjectionKind),\n+    place_elems: pub mk_place_elems(PlaceElem<'tcx>),\n+    bound_variable_kinds: pub mk_bound_variable_kinds(ty::BoundVariableKind),\n );\n \n impl<'tcx> TyCtxt<'tcx> {\n@@ -1834,16 +1841,16 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {\n-        if ts.is_empty() { self.types.unit } else { self.mk_ty(Tuple(self.intern_type_list(&ts))) }\n+    pub fn mk_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {\n+        if ts.is_empty() { self.types.unit } else { self.mk_ty(Tuple(self.mk_type_list(&ts))) }\n     }\n \n-    pub fn mk_tup<I, T>(self, iter: I) -> T::Output\n+    pub fn mk_tup_from_iter<I, T>(self, iter: I) -> T::Output\n     where\n         I: Iterator<Item = T>,\n         T: CollectAndApply<Ty<'tcx>, Ty<'tcx>>,\n     {\n-        T::collect_and_apply(iter, |ts| self.intern_tup(ts))\n+        T::collect_and_apply(iter, |ts| self.mk_tup(ts))\n     }\n \n     #[inline]\n@@ -1862,12 +1869,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         def_id: DefId,\n         substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n     ) -> Ty<'tcx> {\n-        let substs = self.check_substs(def_id, substs);\n+        let substs = self.check_and_mk_substs(def_id, substs);\n         self.mk_ty(FnDef(def_id, substs))\n     }\n \n     #[inline(always)]\n-    fn check_substs(\n+    fn check_and_mk_substs(\n         self,\n         _def_id: DefId,\n         substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n@@ -1883,7 +1890,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 substs.collect::<Vec<_>>(),\n             );\n         }\n-        self.mk_substs(substs)\n+        self.mk_substs_from_iter(substs)\n     }\n \n     #[inline]\n@@ -1934,7 +1941,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn mk_task_context(self) -> Ty<'tcx> {\n         let context_did = self.require_lang_item(LangItem::Context, None);\n         let context_adt_ref = self.adt_def(context_did);\n-        let context_substs = self.intern_substs(&[self.lifetimes.re_erased.into()]);\n+        let context_substs = self.mk_substs(&[self.lifetimes.re_erased.into()]);\n         let context_ty = self.mk_adt(context_adt_ref, context_substs);\n         self.mk_mut_ref(self.lifetimes.re_erased, context_ty)\n     }\n@@ -1946,7 +1953,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_const(self, kind: impl Into<ty::ConstKind<'tcx>>, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const_internal(ty::ConstData { kind: kind.into(), ty })\n+        self.intern_const(ty::ConstData { kind: kind.into(), ty })\n     }\n \n     #[inline]\n@@ -2136,10 +2143,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut projection = place.projection.to_vec();\n         projection.push(elem);\n \n-        Place { local: place.local, projection: self.intern_place_elems(&projection) }\n+        Place { local: place.local, projection: self.mk_place_elems(&projection) }\n     }\n \n-    pub fn intern_poly_existential_predicates(\n+    pub fn mk_poly_existential_predicates(\n         self,\n         eps: &[PolyExistentialPredicate<'tcx>],\n     ) -> &'tcx List<PolyExistentialPredicate<'tcx>> {\n@@ -2149,41 +2156,40 @@ impl<'tcx> TyCtxt<'tcx> {\n                 .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())\n                     != Ordering::Greater)\n         );\n-        self._intern_poly_existential_predicates(eps)\n+        self.intern_poly_existential_predicates(eps)\n     }\n \n-    pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {\n+    pub fn mk_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {\n         // FIXME consider asking the input slice to be sorted to avoid\n         // re-interning permutations, in which case that would be asserted\n         // here.\n-        self._intern_predicates(preds)\n+        self.intern_predicates(preds)\n     }\n \n-    pub fn mk_const_list<I, T>(self, iter: I) -> T::Output\n+    pub fn mk_const_list_from_iter<I, T>(self, iter: I) -> T::Output\n     where\n         I: Iterator<Item = T>,\n         T: CollectAndApply<ty::Const<'tcx>, &'tcx List<ty::Const<'tcx>>>,\n     {\n-        T::collect_and_apply(iter, |xs| self.intern_const_list(xs))\n+        T::collect_and_apply(iter, |xs| self.mk_const_list(xs))\n     }\n \n-    pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {\n+    pub fn mk_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {\n         // Actually intern type lists as lists of `GenericArg`s.\n         //\n         // Transmuting from `Ty<'tcx>` to `GenericArg<'tcx>` is sound\n         // as explained in ty_slice_as_generic_arg`. With this,\n         // we guarantee that even when transmuting between `List<Ty<'tcx>>`\n         // and `List<GenericArg<'tcx>>`, the uniqueness requirement for\n         // lists is upheld.\n-        let substs = self.intern_substs(ty::subst::ty_slice_as_generic_args(ts));\n+        let substs = self.mk_substs(ty::subst::ty_slice_as_generic_args(ts));\n         substs.try_as_type_list().unwrap()\n     }\n \n-    // Unlike various other `mk_*` functions, this one uses `I: IntoIterator`\n-    // instead of `I: Iterator`. Unlike those other functions, this one doesn't\n-    // have a `intern_fn_sig` variant that can be used for cases where `I` is\n-    // something like a `Vec`. That's because of the need to combine `inputs`\n-    // and `output`.\n+    // Unlike various other `mk_*_from_iter` functions, this one uses `I:\n+    // IntoIterator` instead of `I: Iterator`, and it doesn't have a slice\n+    // variant, because of the need to combine `inputs` and `output`. This\n+    // explains the lack of `_from_iter` suffix.\n     pub fn mk_fn_sig<I, T>(\n         self,\n         inputs: I,\n@@ -2197,70 +2203,70 @@ impl<'tcx> TyCtxt<'tcx> {\n         T: CollectAndApply<Ty<'tcx>, ty::FnSig<'tcx>>,\n     {\n         T::collect_and_apply(inputs.into_iter().chain(iter::once(output)), |xs| ty::FnSig {\n-            inputs_and_output: self.intern_type_list(xs),\n+            inputs_and_output: self.mk_type_list(xs),\n             c_variadic,\n             unsafety,\n             abi,\n         })\n     }\n \n-    pub fn mk_poly_existential_predicates<I, T>(self, iter: I) -> T::Output\n+    pub fn mk_poly_existential_predicates_from_iter<I, T>(self, iter: I) -> T::Output\n     where\n         I: Iterator<Item = T>,\n         T: CollectAndApply<\n                 PolyExistentialPredicate<'tcx>,\n                 &'tcx List<PolyExistentialPredicate<'tcx>>,\n             >,\n     {\n-        T::collect_and_apply(iter, |xs| self.intern_poly_existential_predicates(xs))\n+        T::collect_and_apply(iter, |xs| self.mk_poly_existential_predicates(xs))\n     }\n \n-    pub fn mk_predicates<I, T>(self, iter: I) -> T::Output\n+    pub fn mk_predicates_from_iter<I, T>(self, iter: I) -> T::Output\n     where\n         I: Iterator<Item = T>,\n         T: CollectAndApply<Predicate<'tcx>, &'tcx List<Predicate<'tcx>>>,\n     {\n-        T::collect_and_apply(iter, |xs| self.intern_predicates(xs))\n+        T::collect_and_apply(iter, |xs| self.mk_predicates(xs))\n     }\n \n-    pub fn mk_type_list<I, T>(self, iter: I) -> T::Output\n+    pub fn mk_type_list_from_iter<I, T>(self, iter: I) -> T::Output\n     where\n         I: Iterator<Item = T>,\n         T: CollectAndApply<Ty<'tcx>, &'tcx List<Ty<'tcx>>>,\n     {\n-        T::collect_and_apply(iter, |xs| self.intern_type_list(xs))\n+        T::collect_and_apply(iter, |xs| self.mk_type_list(xs))\n     }\n \n-    pub fn mk_substs<I, T>(self, iter: I) -> T::Output\n+    pub fn mk_substs_from_iter<I, T>(self, iter: I) -> T::Output\n     where\n         I: Iterator<Item = T>,\n         T: CollectAndApply<GenericArg<'tcx>, &'tcx List<GenericArg<'tcx>>>,\n     {\n-        T::collect_and_apply(iter, |xs| self.intern_substs(xs))\n+        T::collect_and_apply(iter, |xs| self.mk_substs(xs))\n     }\n \n-    pub fn mk_place_elems<I, T>(self, iter: I) -> T::Output\n+    pub fn mk_place_elems_from_iter<I, T>(self, iter: I) -> T::Output\n     where\n         I: Iterator<Item = T>,\n         T: CollectAndApply<PlaceElem<'tcx>, &'tcx List<PlaceElem<'tcx>>>,\n     {\n-        T::collect_and_apply(iter, |xs| self.intern_place_elems(xs))\n+        T::collect_and_apply(iter, |xs| self.mk_place_elems(xs))\n     }\n \n     pub fn mk_substs_trait(\n         self,\n         self_ty: Ty<'tcx>,\n         rest: impl IntoIterator<Item = GenericArg<'tcx>>,\n     ) -> SubstsRef<'tcx> {\n-        self.mk_substs(iter::once(self_ty.into()).chain(rest))\n+        self.mk_substs_from_iter(iter::once(self_ty.into()).chain(rest))\n     }\n \n     pub fn mk_trait_ref(\n         self,\n         trait_def_id: DefId,\n         substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n     ) -> ty::TraitRef<'tcx> {\n-        let substs = self.check_substs(trait_def_id, substs);\n+        let substs = self.check_and_mk_substs(trait_def_id, substs);\n         ty::TraitRef { def_id: trait_def_id, substs, _use_mk_trait_ref_instead: () }\n     }\n \n@@ -2269,16 +2275,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         def_id: DefId,\n         substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n     ) -> ty::AliasTy<'tcx> {\n-        let substs = self.check_substs(def_id, substs);\n+        let substs = self.check_and_mk_substs(def_id, substs);\n         ty::AliasTy { def_id, substs, _use_mk_alias_ty_instead: () }\n     }\n \n-    pub fn mk_bound_variable_kinds<I, T>(self, iter: I) -> T::Output\n+    pub fn mk_bound_variable_kinds_from_iter<I, T>(self, iter: I) -> T::Output\n     where\n         I: Iterator<Item = T>,\n         T: CollectAndApply<ty::BoundVariableKind, &'tcx List<ty::BoundVariableKind>>,\n     {\n-        T::collect_and_apply(iter, |xs| self.intern_bound_variable_kinds(xs))\n+        T::collect_and_apply(iter, |xs| self.mk_bound_variable_kinds(xs))\n     }\n \n     /// Emit a lint at `span` from a lint struct (some type that implements `DecorateLint`,\n@@ -2363,7 +2369,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {\n-        self.intern_bound_variable_kinds(\n+        self.mk_bound_variable_kinds(\n             &self\n                 .late_bound_vars_map(id.owner)\n                 .and_then(|map| map.get(&id.local_id).cloned())"}, {"sha": "d66f436f947a3bacf50f597920fe33ecdd1f9b10", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -422,7 +422,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut map = Default::default();\n         let delegate = Anonymize { tcx: self, map: &mut map };\n         let inner = self.replace_escaping_bound_vars_uncached(value.skip_binder(), delegate);\n-        let bound_vars = self.mk_bound_variable_kinds(map.into_values());\n+        let bound_vars = self.mk_bound_variable_kinds_from_iter(map.into_values());\n         Binder::bind_with_vars(inner, bound_vars)\n     }\n }"}, {"sha": "4c7822acdf785daec696d0d535c890e8d74d3555", "filename": "compiler/rustc_middle/src/ty/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -79,7 +79,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::subst::GenericArgKin\n             // WARNING: We dedup cache the `HashStable` results for `List`\n             // while ignoring types and freely transmute\n             // between `List<Ty<'tcx>>` and `List<GenericArg<'tcx>>`.\n-            // See `fn intern_type_list` for more details.\n+            // See `fn mk_type_list` for more details.\n             //\n             // We therefore hash types without adding a hash for their discriminant.\n             //"}, {"sha": "f4028a5a9f63a4b7aad7464487a23ddb004fe6d9", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -540,7 +540,7 @@ impl<'tcx> Instance<'tcx> {\n \n     pub fn resolve_drop_in_place(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ty::Instance<'tcx> {\n         let def_id = tcx.require_lang_item(LangItem::DropInPlace, None);\n-        let substs = tcx.intern_substs(&[ty.into()]);\n+        let substs = tcx.mk_substs(&[ty.into()]);\n         Instance::expect_resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n     }\n "}, {"sha": "6c59cde86e39be242edc40b52ef7c4612c06b6c7", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -596,7 +596,7 @@ where\n                     ty::Adt(def, _) => def.variant(variant_index).fields.len(),\n                     _ => bug!(),\n                 };\n-                tcx.intern_layout(LayoutS {\n+                tcx.mk_layout(LayoutS {\n                     variants: Variants::Single { index: variant_index },\n                     fields: match NonZeroUsize::new(fields) {\n                         Some(fields) => FieldsShape::Union(fields),\n@@ -609,7 +609,7 @@ where\n                 })\n             }\n \n-            Variants::Multiple { ref variants, .. } => cx.tcx().intern_layout(variants[variant_index].clone()),\n+            Variants::Multiple { ref variants, .. } => cx.tcx().mk_layout(variants[variant_index].clone()),\n         };\n \n         assert_eq!(*layout.variants(), Variants::Single { index: variant_index });\n@@ -631,7 +631,7 @@ where\n             let tcx = cx.tcx();\n             let tag_layout = |tag: Scalar| -> TyAndLayout<'tcx> {\n                 TyAndLayout {\n-                    layout: tcx.intern_layout(LayoutS::scalar(cx, tag)),\n+                    layout: tcx.mk_layout(LayoutS::scalar(cx, tag)),\n                     ty: tag.primitive().to_ty(tcx),\n                 }\n             };\n@@ -687,7 +687,7 @@ where\n                         Increase this counter if you tried to implement this but\n                         failed to do it without duplicating a lot of code from\n                         other places in the compiler: 2\n-                        tcx.intern_tup(&[\n+                        tcx.mk_tup(&[\n                             tcx.mk_array(tcx.types.usize, 3),\n                             tcx.mk_array(Option<fn()>),\n                         ])"}, {"sha": "17262a0be243c18b4aa633a14ac46161098da05a", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -757,7 +757,7 @@ impl<'tcx> Predicate<'tcx> {\n         let new = EarlyBinder(shifted_pred).subst(tcx, trait_ref.skip_binder().substs);\n         // 3) ['x] + ['b] -> ['x, 'b]\n         let bound_vars =\n-            tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));\n+            tcx.mk_bound_variable_kinds_from_iter(trait_bound_vars.iter().chain(pred_bound_vars));\n         tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))\n     }\n }"}, {"sha": "751f3066c9cc6f0ce7c7a678bea85a09cb0524b8", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -79,7 +79,7 @@ impl<'tcx> ReverseMapper<'tcx> {\n         // during codegen.\n \n         let generics = self.tcx.generics_of(def_id);\n-        self.tcx.mk_substs(substs.iter().enumerate().map(|(index, kind)| {\n+        self.tcx.mk_substs_from_iter(substs.iter().enumerate().map(|(index, kind)| {\n             if index < generics.parent_count {\n                 // Accommodate missing regions in the parent kinds...\n                 self.fold_kind_no_missing_regions_error(kind)"}, {"sha": "3fc5f5bed8fcdb75b32b36cecee02dc0bc3c089e", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -144,7 +144,7 @@ pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(\n     a_subst: SubstsRef<'tcx>,\n     b_subst: SubstsRef<'tcx>,\n ) -> RelateResult<'tcx, SubstsRef<'tcx>> {\n-    relation.tcx().mk_substs(iter::zip(a_subst, b_subst).map(|(a, b)| {\n+    relation.tcx().mk_substs_from_iter(iter::zip(a_subst, b_subst).map(|(a, b)| {\n         relation.relate_with_variance(ty::Invariant, ty::VarianceDiagInfo::default(), a, b)\n     }))\n }\n@@ -171,7 +171,7 @@ pub fn relate_substs_with_variances<'tcx, R: TypeRelation<'tcx>>(\n         relation.relate_with_variance(variance, variance_info, a, b)\n     });\n \n-    tcx.mk_substs(params)\n+    tcx.mk_substs_from_iter(params)\n }\n \n impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n@@ -222,7 +222,7 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n                 r => r,\n             });\n         Ok(ty::FnSig {\n-            inputs_and_output: tcx.mk_type_list(inputs_and_output)?,\n+            inputs_and_output: tcx.mk_type_list_from_iter(inputs_and_output)?,\n             c_variadic: a.c_variadic,\n             unsafety,\n             abi,\n@@ -352,7 +352,8 @@ impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {\n     ) -> RelateResult<'tcx, GeneratorWitness<'tcx>> {\n         assert_eq!(a.0.len(), b.0.len());\n         let tcx = relation.tcx();\n-        let types = tcx.mk_type_list(iter::zip(a.0, b.0).map(|(a, b)| relation.relate(a, b)))?;\n+        let types =\n+            tcx.mk_type_list_from_iter(iter::zip(a.0, b.0).map(|(a, b)| relation.relate(a, b)))?;\n         Ok(GeneratorWitness(types))\n     }\n }\n@@ -528,7 +529,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n \n         (&ty::Tuple(as_), &ty::Tuple(bs)) => {\n             if as_.len() == bs.len() {\n-                Ok(tcx.mk_tup(iter::zip(as_, bs).map(|(a, b)| relation.relate(a, b)))?)\n+                Ok(tcx.mk_tup_from_iter(iter::zip(as_, bs).map(|(a, b)| relation.relate(a, b)))?)\n             } else if !(as_.is_empty() || bs.is_empty()) {\n                 Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))\n             } else {\n@@ -673,7 +674,7 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n                     for (a_arg, b_arg) in aa.iter().zip(ba.iter()) {\n                         related_args.push(r.consts(a_arg, b_arg)?);\n                     }\n-                    let related_args = tcx.intern_const_list(&related_args);\n+                    let related_args = tcx.mk_const_list(&related_args);\n                     Expr::FunctionCall(func, related_args)\n                 }\n                 _ => return Err(TypeError::ConstMismatch(expected_found(r, a, b))),\n@@ -720,7 +721,7 @@ impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>> {\n                 _ => Err(TypeError::ExistentialMismatch(expected_found(relation, a, b))),\n             }\n         });\n-        tcx.mk_poly_existential_predicates(v)\n+        tcx.mk_poly_existential_predicates_from_iter(v)\n     }\n }\n "}, {"sha": "43fbccea5cae000f04aef4a51c8a30f5b23a9617", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -430,7 +430,7 @@ impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::PolyExistentialPred\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n-        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_poly_existential_predicates(v))\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.mk_poly_existential_predicates(v))\n     }\n }\n \n@@ -439,7 +439,7 @@ impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Const<'tcx>> {\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n-        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_const_list(v))\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.mk_const_list(v))\n     }\n }\n \n@@ -448,7 +448,7 @@ impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ProjectionKind> {\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n-        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_projs(v))\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.mk_projs(v))\n     }\n }\n \n@@ -636,7 +636,7 @@ impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Predicate<'tcx>> {\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n-        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.mk_predicates(v))\n     }\n }\n "}, {"sha": "ba714541c9e8f17beb8b5575175fad3cf24c5248", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -250,7 +250,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n         parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,\n     ) -> ClosureSubsts<'tcx> {\n         ClosureSubsts {\n-            substs: tcx.mk_substs(\n+            substs: tcx.mk_substs_from_iter(\n                 parts.parent_substs.iter().copied().chain(\n                     [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]\n                         .iter()\n@@ -377,7 +377,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         parts: GeneratorSubstsParts<'tcx, Ty<'tcx>>,\n     ) -> GeneratorSubsts<'tcx> {\n         GeneratorSubsts {\n-            substs: tcx.mk_substs(\n+            substs: tcx.mk_substs_from_iter(\n                 parts.parent_substs.iter().copied().chain(\n                     [\n                         parts.resume_ty,\n@@ -655,7 +655,7 @@ impl<'tcx> InlineConstSubsts<'tcx> {\n         parts: InlineConstSubstsParts<'tcx, Ty<'tcx>>,\n     ) -> InlineConstSubsts<'tcx> {\n         InlineConstSubsts {\n-            substs: tcx.mk_substs(\n+            substs: tcx.mk_substs_from_iter(\n                 parts.parent_substs.iter().copied().chain(std::iter::once(parts.ty.into())),\n             ),\n         }\n@@ -853,7 +853,7 @@ impl<'tcx> TraitRef<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> ty::TraitRef<'tcx> {\n         let defs = tcx.generics_of(trait_id);\n-        tcx.mk_trait_ref(trait_id, tcx.intern_substs(&substs[..defs.params.len()]))\n+        tcx.mk_trait_ref(trait_id, tcx.mk_substs(&substs[..defs.params.len()]))\n     }\n }\n \n@@ -899,7 +899,7 @@ impl<'tcx> ExistentialTraitRef<'tcx> {\n \n         ty::ExistentialTraitRef {\n             def_id: trait_ref.def_id,\n-            substs: tcx.intern_substs(&trait_ref.substs[1..]),\n+            substs: tcx.mk_substs(&trait_ref.substs[1..]),\n         }\n     }\n \n@@ -1551,7 +1551,7 @@ impl<'tcx> ExistentialProjection<'tcx> {\n     pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {\n         let def_id = tcx.parent(self.def_id);\n         let subst_count = tcx.generics_of(def_id).count() - 1;\n-        let substs = tcx.intern_substs(&self.substs[..subst_count]);\n+        let substs = tcx.mk_substs(&self.substs[..subst_count]);\n         ty::ExistentialTraitRef { def_id, substs }\n     }\n \n@@ -1579,7 +1579,7 @@ impl<'tcx> ExistentialProjection<'tcx> {\n \n         Self {\n             def_id: projection_predicate.projection_ty.def_id,\n-            substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),\n+            substs: tcx.mk_substs(&projection_predicate.projection_ty.substs[1..]),\n             term: projection_predicate.term,\n         }\n     }\n@@ -2209,7 +2209,7 @@ impl<'tcx> Ty<'tcx> {\n                 let assoc_items = tcx.associated_item_def_ids(\n                     tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),\n                 );\n-                tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))\n+                tcx.mk_projection(assoc_items[0], tcx.mk_substs(&[self.into()]))\n             }\n \n             ty::Bool"}, {"sha": "b090bd9d807c50ced05d67c1018fa051afa878e7", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -71,7 +71,7 @@ impl<'tcx> List<Ty<'tcx>> {\n     /// Allows to freely switch between `List<Ty<'tcx>>` and `List<GenericArg<'tcx>>`.\n     ///\n     /// As lists are interned, `List<Ty<'tcx>>` and `List<GenericArg<'tcx>>` have\n-    /// be interned together, see `intern_type_list` for more details.\n+    /// be interned together, see `mk_type_list` for more details.\n     #[inline]\n     pub fn as_substs(&'tcx self) -> SubstsRef<'tcx> {\n         assert_eq!(TYPE_TAG, 0);\n@@ -319,7 +319,7 @@ impl<'tcx> InternalSubsts<'tcx> {\n         let count = defs.count();\n         let mut substs = SmallVec::with_capacity(count);\n         Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);\n-        tcx.intern_substs(&substs)\n+        tcx.mk_substs(&substs)\n     }\n \n     pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>\n@@ -468,11 +468,11 @@ impl<'tcx> InternalSubsts<'tcx> {\n         target_substs: SubstsRef<'tcx>,\n     ) -> SubstsRef<'tcx> {\n         let defs = tcx.generics_of(source_ancestor);\n-        tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))\n+        tcx.mk_substs_from_iter(target_substs.iter().chain(self.iter().skip(defs.params.len())))\n     }\n \n     pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {\n-        tcx.mk_substs(self.iter().take(generics.count()))\n+        tcx.mk_substs_from_iter(self.iter().take(generics.count()))\n     }\n }\n \n@@ -486,14 +486,14 @@ impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for SubstsRef<'tcx> {\n         // The match arms are in order of frequency. The 1, 2, and 0 cases are\n         // typically hit in 90--99.99% of cases. When folding doesn't change\n         // the substs, it's faster to reuse the existing substs rather than\n-        // calling `intern_substs`.\n+        // calling `mk_substs`.\n         match self.len() {\n             1 => {\n                 let param0 = self[0].try_fold_with(folder)?;\n                 if param0 == self[0] {\n                     Ok(self)\n                 } else {\n-                    Ok(folder.interner().intern_substs(&[param0]))\n+                    Ok(folder.interner().mk_substs(&[param0]))\n                 }\n             }\n             2 => {\n@@ -502,11 +502,11 @@ impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for SubstsRef<'tcx> {\n                 if param0 == self[0] && param1 == self[1] {\n                     Ok(self)\n                 } else {\n-                    Ok(folder.interner().intern_substs(&[param0, param1]))\n+                    Ok(folder.interner().mk_substs(&[param0, param1]))\n                 }\n             }\n             0 => Ok(self),\n-            _ => ty::util::fold_list(self, folder, |tcx, v| tcx.intern_substs(v)),\n+            _ => ty::util::fold_list(self, folder, |tcx, v| tcx.mk_substs(v)),\n         }\n     }\n }\n@@ -538,10 +538,10 @@ impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<Ty<'tcx>> {\n                 if param0 == self[0] && param1 == self[1] {\n                     Ok(self)\n                 } else {\n-                    Ok(folder.interner().intern_type_list(&[param0, param1]))\n+                    Ok(folder.interner().mk_type_list(&[param0, param1]))\n                 }\n             }\n-            _ => ty::util::fold_list(self, folder, |tcx, v| tcx.intern_type_list(v)),\n+            _ => ty::util::fold_list(self, folder, |tcx, v| tcx.mk_type_list(v)),\n         }\n     }\n }"}, {"sha": "b9b1cd73a8b9a0391473fd89eab74c8938d052b0", "filename": "compiler/rustc_middle/src/ty/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -112,5 +112,5 @@ pub(super) fn vtable_allocation_provider<'tcx>(\n     }\n \n     vtable.mutability = Mutability::Not;\n-    tcx.create_memory_alloc(tcx.intern_const_alloc(vtable))\n+    tcx.create_memory_alloc(tcx.mk_const_alloc(vtable))\n }"}, {"sha": "2f63333d46b1d89e673f80810ebc038141650c8c", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -132,14 +132,14 @@ pub(crate) fn lit_to_mir_constant<'tcx>(\n         (ast::LitKind::Str(s, _), ty::Ref(_, inner_ty, _)) if inner_ty.is_str() => {\n             let s = s.as_str();\n             let allocation = Allocation::from_bytes_byte_aligned_immutable(s.as_bytes());\n-            let allocation = tcx.intern_const_alloc(allocation);\n+            let allocation = tcx.mk_const_alloc(allocation);\n             ConstValue::Slice { data: allocation, start: 0, end: s.len() }\n         }\n         (ast::LitKind::ByteStr(data, _), ty::Ref(_, inner_ty, _))\n             if matches!(inner_ty.kind(), ty::Slice(_)) =>\n         {\n             let allocation = Allocation::from_bytes_byte_aligned_immutable(data as &[u8]);\n-            let allocation = tcx.intern_const_alloc(allocation);\n+            let allocation = tcx.mk_const_alloc(allocation);\n             ConstValue::Slice { data: allocation, start: 0, end: data.len() }\n         }\n         (ast::LitKind::ByteStr(data, _), ty::Ref(_, inner_ty, _)) if inner_ty.is_array() => {"}, {"sha": "ff3198847df6c17fc3aa808b56c11969e6009be4", "filename": "compiler/rustc_mir_build/src/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -170,7 +170,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     // Return the operand *tmp0 to be used as the call argument\n                     let place = Place {\n                         local: operand,\n-                        projection: tcx.intern_place_elems(&[PlaceElem::Deref]),\n+                        projection: tcx.mk_place_elems(&[PlaceElem::Deref]),\n                     };\n \n                     return block.and(Operand::Move(place));"}, {"sha": "eb20b2308c0bd8ff1189c0cef5ebeaa0544e1d3e", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -263,7 +263,7 @@ impl<'tcx> PlaceBuilder<'tcx> {\n         let resolved = self.resolve_upvar(cx);\n         let builder = resolved.as_ref().unwrap_or(self);\n         let PlaceBase::Local(local) = builder.base else { return None };\n-        let projection = cx.tcx.intern_place_elems(&builder.projection);\n+        let projection = cx.tcx.mk_place_elems(&builder.projection);\n         Some(Place { local, projection })\n     }\n \n@@ -692,7 +692,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             tcx.mk_imm_ref(tcx.lifetimes.re_erased, fake_borrow_deref_ty);\n                         let fake_borrow_temp =\n                             self.local_decls.push(LocalDecl::new(fake_borrow_ty, expr_span));\n-                        let projection = tcx.intern_place_elems(&base_place.projection[..idx]);\n+                        let projection = tcx.mk_place_elems(&base_place.projection[..idx]);\n                         self.cfg.push_assign(\n                             block,\n                             source_info,"}, {"sha": "a4e48c1545d6c4ef25967c8ff8fe79d6cd3a0a19", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -520,7 +520,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let source_info = self.source_info(span);\n         let bool_ty = self.tcx.types.bool;\n         if self.check_overflow && op.is_checkable() && ty.is_integral() {\n-            let result_tup = self.tcx.intern_tup(&[ty, bool_ty]);\n+            let result_tup = self.tcx.mk_tup(&[ty, bool_ty]);\n             let result_value = self.temp(result_tup, span);\n \n             self.cfg.push_assign("}, {"sha": "de2851a1af9fdd13790e6ab93beb6c2047e6d730", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -1206,7 +1206,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     fake_borrows.insert(Place {\n                         local: source.local,\n-                        projection: self.tcx.intern_place_elems(proj_base),\n+                        projection: self.tcx.mk_place_elems(proj_base),\n                     });\n                 }\n             }\n@@ -1743,7 +1743,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             .map(|matched_place_ref| {\n                 let matched_place = Place {\n                     local: matched_place_ref.local,\n-                    projection: tcx.intern_place_elems(matched_place_ref.projection),\n+                    projection: tcx.mk_place_elems(matched_place_ref.projection),\n                 };\n                 let fake_borrow_deref_ty = matched_place.ty(&self.local_decls, tcx).ty;\n                 let fake_borrow_ty = tcx.mk_imm_ref(tcx.lifetimes.re_erased, fake_borrow_deref_ty);"}, {"sha": "a6de8684c0f8e5b9d3a049d2597053a5d4ba53f1", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -859,7 +859,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     let use_place = Place {\n                         local: ty::CAPTURE_STRUCT_LOCAL,\n-                        projection: tcx.intern_place_elems(&projs),\n+                        projection: tcx.mk_place_elems(&projs),\n                     };\n                     self.var_debug_info.push(VarDebugInfo {\n                         name: *sym,"}, {"sha": "3b11fc77d8982fb742c5c08221a30c6377924b3b", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -307,7 +307,7 @@ impl<'tcx> Cx<'tcx> {\n \n                     let arg_tys = args.iter().map(|e| self.typeck_results().expr_ty_adjusted(e));\n                     let tupled_args = Expr {\n-                        ty: tcx.mk_tup(arg_tys),\n+                        ty: tcx.mk_tup_from_iter(arg_tys),\n                         temp_lifetime,\n                         span: expr.span,\n                         kind: ExprKind::Tuple { fields: self.mirror_exprs(args) },"}, {"sha": "20af60a511ea8dde5860295de3fb4fa6a9d92190", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -133,9 +133,8 @@ impl<'tcx> Cx<'tcx> {\n                     bug!(\"closure expr does not have closure type: {:?}\", closure_ty);\n                 };\n \n-                let bound_vars = self\n-                    .tcx\n-                    .intern_bound_variable_kinds(&[ty::BoundVariableKind::Region(ty::BrEnv)]);\n+                let bound_vars =\n+                    self.tcx.mk_bound_variable_kinds(&[ty::BoundVariableKind::Region(ty::BrEnv)]);\n                 let br = ty::BoundRegion {\n                     var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n                     kind: ty::BrEnv,"}, {"sha": "4a163028fcf4ab7e70243009e2f40152c1f27dd9", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -126,7 +126,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                         BorrowedContent {\n                             target_place: Place {\n                                 local: place.local,\n-                                projection: tcx.intern_place_elems(proj),\n+                                projection: tcx.mk_place_elems(proj),\n                             },\n                         },\n                     ));\n@@ -165,7 +165,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             if union_path.is_none() {\n                 base = self.add_move_path(base, elem, |tcx| Place {\n                     local: place.local,\n-                    projection: tcx.intern_place_elems(&place.projection[..i + 1]),\n+                    projection: tcx.mk_place_elems(&place.projection[..i + 1]),\n                 });\n             }\n         }\n@@ -476,7 +476,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             // `ConstIndex` patterns. This is done to ensure that all move paths\n             // are disjoint, which is expected by drop elaboration.\n             let base_place =\n-                Place { local: place.local, projection: self.builder.tcx.intern_place_elems(base) };\n+                Place { local: place.local, projection: self.builder.tcx.mk_place_elems(base) };\n             let base_path = match self.move_path_for(base_place) {\n                 Ok(path) => path,\n                 Err(MoveError::UnionMove { path }) => {"}, {"sha": "f27beb64a14d96dd266cdc52ff76781ac456e454", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> MutVisitor<'tcx> for Replacer<'_, 'tcx> {\n \n     fn visit_place(&mut self, place: &mut Place<'tcx>, ctxt: PlaceContext, loc: Location) {\n         if let Some(new_projection) = self.process_projection(&place.projection, loc) {\n-            place.projection = self.tcx().intern_place_elems(&new_projection);\n+            place.projection = self.tcx().mk_place_elems(&new_projection);\n         }\n \n         let observes_address = match ctxt {"}, {"sha": "954bb5aff8de671cd70bf0bdbc82d7f6533f8204", "filename": "compiler/rustc_mir_transform/src/elaborate_box_derefs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -17,7 +17,7 @@ pub fn build_ptr_tys<'tcx>(\n     unique_did: DefId,\n     nonnull_did: DefId,\n ) -> (Ty<'tcx>, Ty<'tcx>, Ty<'tcx>) {\n-    let substs = tcx.intern_substs(&[pointee.into()]);\n+    let substs = tcx.mk_substs(&[pointee.into()]);\n     let unique_ty = tcx.type_of(unique_did).subst(tcx, substs);\n     let nonnull_ty = tcx.type_of(nonnull_did).subst(tcx, substs);\n     let ptr_ty = tcx.mk_imm_ptr(pointee);\n@@ -138,7 +138,7 @@ impl<'tcx> MirPass<'tcx> for ElaborateBoxDerefs {\n \n                     if let Some(mut new_projections) = new_projections {\n                         new_projections.extend_from_slice(&place.projection[last_deref..]);\n-                        place.projection = tcx.intern_place_elems(&new_projections);\n+                        place.projection = tcx.mk_place_elems(&new_projections);\n                     }\n                 }\n             }"}, {"sha": "2e97312ee5048161ec0fcc8e07b34f8cedd20ba7", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -126,7 +126,7 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor<'tcx> {\n                 place,\n                 Place {\n                     local: SELF_ARG,\n-                    projection: self.tcx().intern_place_elems(&[ProjectionElem::Deref]),\n+                    projection: self.tcx().mk_place_elems(&[ProjectionElem::Deref]),\n                 },\n                 self.tcx,\n             );\n@@ -162,10 +162,9 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n                 place,\n                 Place {\n                     local: SELF_ARG,\n-                    projection: self.tcx().intern_place_elems(&[ProjectionElem::Field(\n-                        Field::new(0),\n-                        self.ref_gen_ty,\n-                    )]),\n+                    projection: self\n+                        .tcx()\n+                        .mk_place_elems(&[ProjectionElem::Field(Field::new(0), self.ref_gen_ty)]),\n                 },\n                 self.tcx,\n             );\n@@ -187,7 +186,7 @@ fn replace_base<'tcx>(place: &mut Place<'tcx>, new_base: Place<'tcx>, tcx: TyCtx\n     let mut new_projection = new_base.projection.to_vec();\n     new_projection.append(&mut place.projection.to_vec());\n \n-    place.projection = tcx.intern_place_elems(&new_projection);\n+    place.projection = tcx.mk_place_elems(&new_projection);\n }\n \n const SELF_ARG: Local = Local::from_u32(1);\n@@ -300,7 +299,7 @@ impl<'tcx> TransformVisitor<'tcx> {\n         let mut projection = base.projection.to_vec();\n         projection.push(ProjectionElem::Field(Field::new(idx), ty));\n \n-        Place { local: base.local, projection: self.tcx.intern_place_elems(&projection) }\n+        Place { local: base.local, projection: self.tcx.mk_place_elems(&projection) }\n     }\n \n     // Create a statement which changes the discriminant\n@@ -427,7 +426,7 @@ fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body\n \n     let pin_did = tcx.require_lang_item(LangItem::Pin, Some(body.span));\n     let pin_adt_ref = tcx.adt_def(pin_did);\n-    let substs = tcx.intern_substs(&[ref_gen_ty.into()]);\n+    let substs = tcx.mk_substs(&[ref_gen_ty.into()]);\n     let pin_ref_gen_ty = tcx.mk_adt(pin_adt_ref, substs);\n \n     // Replace the by ref generator argument\n@@ -1450,13 +1449,13 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n             // Compute Poll<return_ty>\n             let poll_did = tcx.require_lang_item(LangItem::Poll, None);\n             let poll_adt_ref = tcx.adt_def(poll_did);\n-            let poll_substs = tcx.intern_substs(&[body.return_ty().into()]);\n+            let poll_substs = tcx.mk_substs(&[body.return_ty().into()]);\n             (poll_adt_ref, poll_substs)\n         } else {\n             // Compute GeneratorState<yield_ty, return_ty>\n             let state_did = tcx.require_lang_item(LangItem::GeneratorState, None);\n             let state_adt_ref = tcx.adt_def(state_did);\n-            let state_substs = tcx.intern_substs(&[yield_ty.into(), body.return_ty().into()]);\n+            let state_substs = tcx.mk_substs(&[yield_ty.into(), body.return_ty().into()]);\n             (state_adt_ref, state_substs)\n         };\n         let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);"}, {"sha": "6e6d6566f4bc0c967b775b69c5474490c29617a9", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -888,7 +888,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n         location: Location,\n     ) {\n         if let ProjectionElem::Field(f, ty) = elem {\n-            let parent = Place { local, projection: self.tcx.intern_place_elems(proj_base) };\n+            let parent = Place { local, projection: self.tcx.mk_place_elems(proj_base) };\n             let parent_ty = parent.ty(&self.callee_body.local_decls, self.tcx);\n             let check_equal = |this: &mut Self, f_ty| {\n                 if !util::is_equal_up_to_subtyping(this.tcx, this.param_env, ty, f_ty) {"}, {"sha": "14e644bc344ca70bf1c33d40aeeffc74412c808d", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -121,7 +121,7 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n \n                 *rvalue = Rvalue::Use(Operand::Copy(Place {\n                     local: base.local,\n-                    projection: self.tcx.intern_place_elems(base.projection),\n+                    projection: self.tcx.mk_place_elems(base.projection),\n                 }));\n             }\n         }"}, {"sha": "89e0a007dac0d478b72ae4da2f22d72d694a0e8c", "filename": "compiler/rustc_mir_transform/src/large_enums.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -114,7 +114,7 @@ impl EnumSizeOpt {\n             tcx.data_layout.ptr_sized_integer().align(&tcx.data_layout).abi,\n             Mutability::Not,\n         );\n-        let alloc = tcx.create_memory_alloc(tcx.intern_const_alloc(alloc));\n+        let alloc = tcx.create_memory_alloc(tcx.mk_const_alloc(alloc));\n         Some((*adt_def, num_discrs, *alloc_cache.entry(ty).or_insert(alloc)))\n     }\n     fn optim<'tcx>(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n@@ -197,9 +197,8 @@ impl EnumSizeOpt {\n                             size_place,\n                             Rvalue::Use(Operand::Copy(Place {\n                                 local: size_array_local,\n-                                projection: tcx.intern_place_elems(&[PlaceElem::Index(\n-                                    discr_cast_place.local,\n-                                )]),\n+                                projection: tcx\n+                                    .mk_place_elems(&[PlaceElem::Index(discr_cast_place.local)]),\n                             })),\n                         )),\n                     };"}, {"sha": "4193eb7d6e878e933f88eba896ea1eace3d3afc4", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -192,7 +192,7 @@ fn remap_mir_for_const_eval_select<'tcx>(\n                 let arguments = (0..num_args).map(|x| {\n                     let mut place_elems = place_elems.to_vec();\n                     place_elems.push(ProjectionElem::Field(x.into(), fields[x]));\n-                    let projection = tcx.intern_place_elems(&place_elems);\n+                    let projection = tcx.mk_place_elems(&place_elems);\n                     let place = Place {\n                         local: place.local,\n                         projection,"}, {"sha": "ebe63d6cb7e33715b446e0e7f26292d82e34fc9d", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -147,7 +147,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n     assert!(!matches!(ty, Some(ty) if ty.is_generator()));\n \n     let substs = if let Some(ty) = ty {\n-        tcx.intern_substs(&[ty.into()])\n+        tcx.mk_substs(&[ty.into()])\n     } else {\n         InternalSubsts::identity_for_item(tcx, def_id)\n     };\n@@ -597,7 +597,7 @@ fn build_call_shim<'tcx>(\n         let untuple_args = sig.inputs();\n \n         // Create substitutions for the `Self` and `Args` generic parameters of the shim body.\n-        let arg_tup = tcx.intern_tup(untuple_args);\n+        let arg_tup = tcx.mk_tup(untuple_args);\n \n         (Some([ty.into(), arg_tup.into()]), Some(untuple_args))\n     } else {\n@@ -632,7 +632,7 @@ fn build_call_shim<'tcx>(\n             Adjustment::Deref => tcx.mk_imm_ptr(fnty),\n             Adjustment::RefMut => tcx.mk_mut_ptr(fnty),\n         };\n-        sig.inputs_and_output = tcx.intern_type_list(&inputs_and_output);\n+        sig.inputs_and_output = tcx.mk_type_list(&inputs_and_output);\n     }\n \n     // FIXME(eddyb) avoid having this snippet both here and in\n@@ -643,7 +643,7 @@ fn build_call_shim<'tcx>(\n         let self_arg = &mut inputs_and_output[0];\n         debug_assert!(tcx.generics_of(def_id).has_self && *self_arg == tcx.types.self_param);\n         *self_arg = tcx.mk_mut_ptr(*self_arg);\n-        sig.inputs_and_output = tcx.intern_type_list(&inputs_and_output);\n+        sig.inputs_and_output = tcx.mk_type_list(&inputs_and_output);\n     }\n \n     let span = tcx.def_span(def_id);"}, {"sha": "13168e9a268edab89c00b0ccd13da7411a88af40", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -122,7 +122,7 @@ impl<'tcx> ReplacementMap<'tcx> {\n         let &[PlaceElem::Field(f, _), ref rest @ ..] = place.projection else { return None; };\n         let fields = self.fragments[place.local].as_ref()?;\n         let (_, new_local) = fields[f]?;\n-        Some(Place { local: new_local, projection: tcx.intern_place_elems(&rest) })\n+        Some(Place { local: new_local, projection: tcx.mk_place_elems(&rest) })\n     }\n \n     fn place_fragments("}, {"sha": "45e659eab6c857cb4c9215792265b4bc6673df4b", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -1298,7 +1298,7 @@ impl<'v> RootCollector<'_, 'v> {\n             self.tcx,\n             ty::ParamEnv::reveal_all(),\n             start_def_id,\n-            self.tcx.intern_substs(&[main_ret_ty.into()]),\n+            self.tcx.mk_substs(&[main_ret_ty.into()]),\n         )\n         .unwrap()\n         .unwrap();"}, {"sha": "1a679f32ca59bea6c23bbd95c441bde886018501", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -675,7 +675,7 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n         _ if ty.is_unit() => {}\n \n         ty::Tuple(tys) => {\n-            ty = tcx.mk_tup(tys.iter().map(|ty| transform_ty(tcx, ty, options)));\n+            ty = tcx.mk_tup_from_iter(tys.iter().map(|ty| transform_ty(tcx, ty, options)));\n         }\n \n         ty::Array(ty0, len) => {\n@@ -825,7 +825,7 @@ fn transform_substs<'tcx>(\n             subst\n         }\n     });\n-    tcx.mk_substs(substs)\n+    tcx.mk_substs_from_iter(substs)\n }\n \n /// Returns a type metadata identifier for the specified FnAbi using the Itanium C++ ABI with vendor"}, {"sha": "71f536dd3cb31c255ef0baedc78f14f184b903b6", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -567,7 +567,7 @@ fn compute_external_query_constraints<'tcx>(\n ) -> Result<ExternalConstraints<'tcx>, NoSolution> {\n     let region_obligations = infcx.take_registered_region_obligations();\n     let opaque_types = infcx.take_opaque_types_for_query_response();\n-    Ok(infcx.tcx.intern_external_constraints(ExternalConstraintsData {\n+    Ok(infcx.tcx.mk_external_constraints(ExternalConstraintsData {\n         // FIXME: Now that's definitely wrong :)\n         //\n         // Should also do the leak check here I think\n@@ -616,8 +616,7 @@ pub(super) fn response_no_constraints<'tcx>(\n             var_values: CanonicalVarValues::make_identity(tcx, goal.variables),\n             // FIXME: maybe we should store the \"no response\" version in tcx, like\n             // we do for tcx.types and stuff.\n-            external_constraints: tcx\n-                .intern_external_constraints(ExternalConstraintsData::default()),\n+            external_constraints: tcx.mk_external_constraints(ExternalConstraintsData::default()),\n             certainty,\n         },\n     })"}, {"sha": "68bb7c877e3d906954e6943346c0c7a7b5d3d75e", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -343,9 +343,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     // Substitute just the unsizing params from B into A. The type after\n                     // this substitution must be equal to B. This is so we don't unsize\n                     // unrelated type parameters.\n-                    let new_a_substs = tcx.mk_substs(a_substs.iter().enumerate().map(|(i, a)| {\n-                        if unsizing_params.contains(i as u32) { b_substs[i] } else { a }\n-                    }));\n+                    let new_a_substs =\n+                        tcx.mk_substs_from_iter(a_substs.iter().enumerate().map(|(i, a)| {\n+                            if unsizing_params.contains(i as u32) { b_substs[i] } else { a }\n+                        }));\n                     let unsized_a_ty = tcx.mk_adt(a_def, new_a_substs);\n \n                     // Finally, we require that `TailA: Unsize<TailB>` for the tail field\n@@ -368,7 +369,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     let b_last_ty = b_tys.last().unwrap();\n \n                     // Substitute just the tail field of B., and require that they're equal.\n-                    let unsized_a_ty = tcx.mk_tup(a_rest_tys.iter().chain([b_last_ty]).copied());\n+                    let unsized_a_ty =\n+                        tcx.mk_tup_from_iter(a_rest_tys.iter().chain([b_last_ty]).copied());\n                     let mut nested_goals = ecx.eq(goal.param_env, unsized_a_ty, b_ty)?;\n \n                     // Similar to ADTs, require that the rest of the fields are equal.\n@@ -425,7 +427,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                             .map(ty::ExistentialPredicate::AutoTrait)\n                             .map(ty::Binder::dummy),\n                     );\n-                let new_a_data = tcx.mk_poly_existential_predicates(new_a_data);\n+                let new_a_data = tcx.mk_poly_existential_predicates_from_iter(new_a_data);\n                 let new_a_ty = tcx.mk_dynamic(new_a_data, b_region, ty::Dyn);\n \n                 // We also require that A's lifetime outlives B's lifetime."}, {"sha": "3a887f54587f4cc60d54bfccad46e25e6b26835a", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -189,11 +189,9 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n         ty::FnDef(def_id, substs) => Ok(Some(\n             tcx.fn_sig(def_id)\n                 .subst(tcx, substs)\n-                .map_bound(|sig| (tcx.intern_tup(sig.inputs()), sig.output())),\n+                .map_bound(|sig| (tcx.mk_tup(sig.inputs()), sig.output())),\n         )),\n-        ty::FnPtr(sig) => {\n-            Ok(Some(sig.map_bound(|sig| (tcx.intern_tup(sig.inputs()), sig.output()))))\n-        }\n+        ty::FnPtr(sig) => Ok(Some(sig.map_bound(|sig| (tcx.mk_tup(sig.inputs()), sig.output())))),\n         ty::Closure(_, substs) => {\n             let closure_substs = substs.as_closure();\n             match closure_substs.kind_ty().to_opt_closure_kind() {"}, {"sha": "1fb8659bb27d3bf40fbd495cbb87f20cdf680940", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -350,14 +350,14 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             )\n             .map(|o| o.predicate);\n             new_env = ty::ParamEnv::new(\n-                tcx.mk_predicates(normalized_preds),\n+                tcx.mk_predicates_from_iter(normalized_preds),\n                 param_env.reveal(),\n                 param_env.constness(),\n             );\n         }\n \n         let final_user_env = ty::ParamEnv::new(\n-            tcx.mk_predicates(user_computed_preds.into_iter()),\n+            tcx.mk_predicates_from_iter(user_computed_preds.into_iter()),\n             user_env.reveal(),\n             user_env.constness(),\n         );"}, {"sha": "b2317f55d259568f8e307681f2cd17ed6b742d7c", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -281,7 +281,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     debug!(\"normalize_param_env_or_error: elaborated-predicates={:?}\", predicates);\n \n     let elaborated_env = ty::ParamEnv::new(\n-        tcx.intern_predicates(&predicates),\n+        tcx.mk_predicates(&predicates),\n         unnormalized_env.reveal(),\n         unnormalized_env.constness(),\n     );\n@@ -333,10 +333,9 @@ pub fn normalize_param_env_or_error<'tcx>(\n     // Not sure whether it is better to include the unnormalized TypeOutlives predicates\n     // here. I believe they should not matter, because we are ignoring TypeOutlives param-env\n     // predicates here anyway. Keeping them here anyway because it seems safer.\n-    let outlives_env: Vec<_> =\n-        non_outlives_predicates.iter().chain(&outlives_predicates).cloned().collect();\n+    let outlives_env = non_outlives_predicates.iter().chain(&outlives_predicates).cloned();\n     let outlives_env = ty::ParamEnv::new(\n-        tcx.intern_predicates(&outlives_env),\n+        tcx.mk_predicates_from_iter(outlives_env),\n         unnormalized_env.reveal(),\n         unnormalized_env.constness(),\n     );\n@@ -356,7 +355,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     predicates.extend(outlives_predicates);\n     debug!(\"normalize_param_env_or_error: final predicates={:?}\", predicates);\n     ty::ParamEnv::new(\n-        tcx.intern_predicates(&predicates),\n+        tcx.mk_predicates(&predicates),\n         unnormalized_env.reveal(),\n         unnormalized_env.constness(),\n     )"}, {"sha": "4eacb5211f760ff30e397159677e4c3d3375aeba", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -18,10 +18,10 @@ use rustc_errors::{DelayDm, FatalError, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n+use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::{\n     self, EarlyBinder, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n-use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -666,8 +666,9 @@ fn object_ty_for_trait<'tcx>(\n     elaborated_predicates.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));\n     elaborated_predicates.dedup();\n \n-    let existential_predicates = tcx\n-        .mk_poly_existential_predicates(iter::once(trait_predicate).chain(elaborated_predicates));\n+    let existential_predicates = tcx.mk_poly_existential_predicates_from_iter(\n+        iter::once(trait_predicate).chain(elaborated_predicates),\n+    );\n     debug!(?existential_predicates);\n \n     tcx.mk_dynamic(existential_predicates, lifetime, ty::Dyn)\n@@ -766,11 +767,11 @@ fn receiver_is_dispatchable<'tcx>(\n             ty::Binder::dummy(tcx.mk_trait_ref(trait_def_id, substs)).to_predicate(tcx)\n         };\n \n-        let caller_bounds: Vec<Predicate<'tcx>> =\n-            param_env.caller_bounds().iter().chain([unsize_predicate, trait_predicate]).collect();\n+        let caller_bounds =\n+            param_env.caller_bounds().iter().chain([unsize_predicate, trait_predicate]);\n \n         ty::ParamEnv::new(\n-            tcx.intern_predicates(&caller_bounds),\n+            tcx.mk_predicates_from_iter(caller_bounds),\n             param_env.reveal(),\n             param_env.constness(),\n         )"}, {"sha": "e5b0f9d3300a6b54e64ba41a9b1d49035a4a75b7", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -1906,7 +1906,7 @@ fn confirm_builtin_candidate<'cx, 'tcx>(\n ) -> Progress<'tcx> {\n     let tcx = selcx.tcx();\n     let self_ty = obligation.predicate.self_ty();\n-    let substs = tcx.intern_substs(&[self_ty.into()]);\n+    let substs = tcx.mk_substs(&[self_ty.into()]);\n     let lang_items = tcx.lang_items();\n     let item_def_id = obligation.predicate.def_id;\n     let trait_def_id = tcx.trait_of_item(item_def_id).unwrap();"}, {"sha": "21c158fd0fddd35702f90db568b437390719ef95", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -564,8 +564,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                 .into()\n                             }\n                         });\n-                        let bound_vars = tcx.intern_bound_variable_kinds(&bound_vars);\n-                        let assoc_ty_substs = tcx.intern_substs(&substs);\n+                        let bound_vars = tcx.mk_bound_variable_kinds(&bound_vars);\n+                        let assoc_ty_substs = tcx.mk_substs(&substs);\n                         let bound =\n                             bound.map_bound(|b| b.kind().skip_binder()).subst(tcx, assoc_ty_substs);\n                         tcx.mk_predicate(ty::Binder::bind_with_vars(bound, bound_vars))\n@@ -880,7 +880,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             .map(ty::ExistentialPredicate::AutoTrait)\n                             .map(ty::Binder::dummy),\n                     );\n-                let existential_predicates = tcx.mk_poly_existential_predicates(iter);\n+                let existential_predicates = tcx.mk_poly_existential_predicates_from_iter(iter);\n                 let source_trait = tcx.mk_dynamic(existential_predicates, r_b, repr_a);\n \n                 // Require that the traits involved in this upcast are **equal**;\n@@ -979,7 +979,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             .map(ty::ExistentialPredicate::AutoTrait)\n                             .map(ty::Binder::dummy),\n                     );\n-                let existential_predicates = tcx.mk_poly_existential_predicates(iter);\n+                let existential_predicates = tcx.mk_poly_existential_predicates_from_iter(iter);\n                 let source_trait = tcx.mk_dynamic(existential_predicates, r_b, dyn_a);\n \n                 // Require that the traits involved in this upcast are **equal**;\n@@ -1099,7 +1099,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 // Check that the source struct with the target's\n                 // unsizing parameters is equal to the target.\n-                let substs = tcx.mk_substs(substs_a.iter().enumerate().map(|(i, k)| {\n+                let substs = tcx.mk_substs_from_iter(substs_a.iter().enumerate().map(|(i, k)| {\n                     if unsizing_params.contains(i as u32) { substs_b[i] } else { k }\n                 }));\n                 let new_struct = tcx.mk_adt(def, substs);\n@@ -1131,7 +1131,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 // Check that the source tuple with the target's\n                 // last element is equal to the target.\n-                let new_tuple = tcx.mk_tup(a_mid.iter().copied().chain(iter::once(b_last)));\n+                let new_tuple =\n+                    tcx.mk_tup_from_iter(a_mid.iter().copied().chain(iter::once(b_last)));\n                 let InferOk { obligations, .. } = self\n                     .infcx\n                     .at(&obligation.cause, obligation.param_env)"}, {"sha": "a2c16e6d0b46248943506cf64568b612436996e6", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -2230,7 +2230,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }\n                 }\n                 // (*) binder moved here\n-                let all_vars = self.tcx().mk_bound_variable_kinds(\n+                let all_vars = self.tcx().mk_bound_variable_kinds_from_iter(\n                     obligation.predicate.bound_vars().iter().chain(binder.bound_vars().iter()),\n                 );\n                 Where(ty::Binder::bind_with_vars(witness_tys.to_vec(), all_vars))\n@@ -3034,7 +3034,7 @@ fn bind_generator_hidden_types_above<'tcx>(\n     if considering_regions {\n         debug_assert!(!hidden_types.has_erased_regions());\n     }\n-    let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.iter().chain(\n+    let bound_vars = tcx.mk_bound_variable_kinds_from_iter(bound_vars.iter().chain(\n         (num_bound_variables..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i, None))),\n     ));\n     ty::Binder::bind_with_vars(hidden_types, bound_vars)"}, {"sha": "bcf63d5a6f628b3694e77a80275b83495a4c4938", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -292,7 +292,7 @@ pub fn closure_trait_ref_and_return_type<'tcx>(\n     assert!(!self_ty.has_escaping_bound_vars());\n     let arguments_tuple = match tuple_arguments {\n         TupleArgumentsFlag::No => sig.skip_binder().inputs()[0],\n-        TupleArgumentsFlag::Yes => tcx.intern_tup(sig.skip_binder().inputs()),\n+        TupleArgumentsFlag::Yes => tcx.mk_tup(sig.skip_binder().inputs()),\n     };\n     let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, arguments_tuple]);\n     sig.map_bound(|sig| (trait_ref, sig.output()))"}, {"sha": "179ed1220f913795bb149c91b9d8e311f0fc8b75", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -62,7 +62,9 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Substitution<RustInterner<'tcx>>> for Subst\n \n impl<'tcx> LowerInto<'tcx, SubstsRef<'tcx>> for &chalk_ir::Substitution<RustInterner<'tcx>> {\n     fn lower_into(self, interner: RustInterner<'tcx>) -> SubstsRef<'tcx> {\n-        interner.tcx.mk_substs(self.iter(interner).map(|subst| subst.lower_into(interner)))\n+        interner\n+            .tcx\n+            .mk_substs_from_iter(self.iter(interner).map(|subst| subst.lower_into(interner)))\n     }\n }\n "}, {"sha": "1fbc3214967f66f2ab43de7d9ffc578822421bcb", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -96,7 +96,7 @@ pub(crate) fn evaluate_goal<'tcx>(\n         use rustc_middle::infer::canonical::CanonicalVarInfo;\n \n         let mut reverse_param_substitutor = ReverseParamsSubstitutor::new(tcx, params);\n-        let var_values = tcx.mk_substs(\n+        let var_values = tcx.mk_substs_from_iter(\n             subst\n                 .as_slice(interner)\n                 .iter()\n@@ -126,7 +126,7 @@ pub(crate) fn evaluate_goal<'tcx>(\n         let max_universe = binders.iter(interner).map(|v| v.skip_kind().counter).max().unwrap_or(0);\n         let sol = Canonical {\n             max_universe: ty::UniverseIndex::from_usize(max_universe),\n-            variables: tcx.intern_canonical_var_infos(&variables),\n+            variables: tcx.mk_canonical_var_infos(&variables),\n             value: QueryResponse {\n                 var_values: CanonicalVarValues { var_values },\n                 region_constraints: QueryRegionConstraints::default(),"}, {"sha": "35c9f95eb03b1b71fd3d103372b0497494394924", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -54,7 +54,7 @@ fn fn_sig_for_fn_abi<'tcx>(\n                 sig = sig.map_bound(|mut sig| {\n                     let mut inputs_and_output = sig.inputs_and_output.to_vec();\n                     inputs_and_output[0] = tcx.mk_mut_ptr(inputs_and_output[0]);\n-                    sig.inputs_and_output = tcx.intern_type_list(&inputs_and_output);\n+                    sig.inputs_and_output = tcx.mk_type_list(&inputs_and_output);\n                     sig\n                 });\n             }\n@@ -63,7 +63,7 @@ fn fn_sig_for_fn_abi<'tcx>(\n         ty::Closure(def_id, substs) => {\n             let sig = substs.as_closure().sig();\n \n-            let bound_vars = tcx.mk_bound_variable_kinds(\n+            let bound_vars = tcx.mk_bound_variable_kinds_from_iter(\n                 sig.bound_vars().iter().chain(iter::once(ty::BoundVariableKind::Region(ty::BrEnv))),\n             );\n             let br = ty::BoundRegion {\n@@ -88,7 +88,7 @@ fn fn_sig_for_fn_abi<'tcx>(\n         ty::Generator(did, substs, _) => {\n             let sig = substs.as_generator().poly_sig();\n \n-            let bound_vars = tcx.mk_bound_variable_kinds(\n+            let bound_vars = tcx.mk_bound_variable_kinds_from_iter(\n                 sig.bound_vars().iter().chain(iter::once(ty::BoundVariableKind::Region(ty::BrEnv))),\n             );\n             let br = ty::BoundRegion {\n@@ -99,7 +99,7 @@ fn fn_sig_for_fn_abi<'tcx>(\n \n             let pin_did = tcx.require_lang_item(LangItem::Pin, None);\n             let pin_adt_ref = tcx.adt_def(pin_did);\n-            let pin_substs = tcx.intern_substs(&[env_ty.into()]);\n+            let pin_substs = tcx.mk_substs(&[env_ty.into()]);\n             let env_ty = tcx.mk_adt(pin_adt_ref, pin_substs);\n \n             let sig = sig.skip_binder();\n@@ -111,7 +111,7 @@ fn fn_sig_for_fn_abi<'tcx>(\n                 // The signature should be `Future::poll(_, &mut Context<'_>) -> Poll<Output>`\n                 let poll_did = tcx.require_lang_item(LangItem::Poll, None);\n                 let poll_adt_ref = tcx.adt_def(poll_did);\n-                let poll_substs = tcx.intern_substs(&[sig.return_ty.into()]);\n+                let poll_substs = tcx.mk_substs(&[sig.return_ty.into()]);\n                 let ret_ty = tcx.mk_adt(poll_adt_ref, poll_substs);\n \n                 // We have to replace the `ResumeTy` that is used for type and borrow checking\n@@ -133,7 +133,7 @@ fn fn_sig_for_fn_abi<'tcx>(\n                 // The signature should be `Generator::resume(_, Resume) -> GeneratorState<Yield, Return>`\n                 let state_did = tcx.require_lang_item(LangItem::GeneratorState, None);\n                 let state_adt_ref = tcx.adt_def(state_did);\n-                let state_substs = tcx.intern_substs(&[sig.yield_ty.into(), sig.return_ty.into()]);\n+                let state_substs = tcx.mk_substs(&[sig.yield_ty.into(), sig.return_ty.into()]);\n                 let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n \n                 (sig.resume_ty, ret_ty)"}, {"sha": "f2635271609b836af3bc814084c878cead54858a", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -144,7 +144,7 @@ fn recurse_build<'tcx>(\n             for &id in args.iter() {\n                 new_args.push(recurse_build(tcx, body, id, root_span)?);\n             }\n-            let new_args = tcx.intern_const_list(&new_args);\n+            let new_args = tcx.mk_const_list(&new_args);\n             tcx.mk_const(Expr::FunctionCall(fun, new_args), node.ty)\n         }\n         &ExprKind::Binary { op, lhs, rhs } if check_binop(op) => {"}, {"sha": "7fecee2a38bd0ffd812a60778f7ee0797b96691d", "filename": "compiler/rustc_ty_utils/src/implied_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -19,16 +19,16 @@ fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Ty<'_>> {\n             let mut assumed_wf_types: Vec<_> =\n                 tcx.assumed_wf_types(tcx.parent(def_id)).as_slice().into();\n             assumed_wf_types.extend(liberated_sig.inputs_and_output);\n-            tcx.intern_type_list(&assumed_wf_types)\n+            tcx.mk_type_list(&assumed_wf_types)\n         }\n         DefKind::Impl { .. } => {\n             match tcx.impl_trait_ref(def_id) {\n                 Some(trait_ref) => {\n                     let types: Vec<_> = trait_ref.skip_binder().substs.types().collect();\n-                    tcx.intern_type_list(&types)\n+                    tcx.mk_type_list(&types)\n                 }\n                 // Only the impl self type\n-                None => tcx.intern_type_list(&[tcx.type_of(def_id).subst_identity()]),\n+                None => tcx.mk_type_list(&[tcx.type_of(def_id).subst_identity()]),\n             }\n         }\n         DefKind::AssocConst | DefKind::AssocTy => tcx.assumed_wf_types(tcx.parent(def_id)),"}, {"sha": "e3132fcc4c4126102f4c95d3f12ac8e4018bd3b8", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -104,23 +104,23 @@ fn layout_of_uncached<'tcx>(\n         assert!(size.bits() <= 128);\n         Scalar::Initialized { value, valid_range: WrappingRange::full(size) }\n     };\n-    let scalar = |value: Primitive| tcx.intern_layout(LayoutS::scalar(cx, scalar_unit(value)));\n+    let scalar = |value: Primitive| tcx.mk_layout(LayoutS::scalar(cx, scalar_unit(value)));\n \n     let univariant = |fields: &[Layout<'_>], repr: &ReprOptions, kind| {\n-        Ok(tcx.intern_layout(univariant_uninterned(cx, ty, fields, repr, kind)?))\n+        Ok(tcx.mk_layout(univariant_uninterned(cx, ty, fields, repr, kind)?))\n     };\n     debug_assert!(!ty.has_non_region_infer());\n \n     Ok(match *ty.kind() {\n         // Basic scalars.\n-        ty::Bool => tcx.intern_layout(LayoutS::scalar(\n+        ty::Bool => tcx.mk_layout(LayoutS::scalar(\n             cx,\n             Scalar::Initialized {\n                 value: Int(I8, false),\n                 valid_range: WrappingRange { start: 0, end: 1 },\n             },\n         )),\n-        ty::Char => tcx.intern_layout(LayoutS::scalar(\n+        ty::Char => tcx.mk_layout(LayoutS::scalar(\n             cx,\n             Scalar::Initialized {\n                 value: Int(I32, false),\n@@ -136,11 +136,11 @@ fn layout_of_uncached<'tcx>(\n         ty::FnPtr(_) => {\n             let mut ptr = scalar_unit(Pointer(dl.instruction_address_space));\n             ptr.valid_range_mut().start = 1;\n-            tcx.intern_layout(LayoutS::scalar(cx, ptr))\n+            tcx.mk_layout(LayoutS::scalar(cx, ptr))\n         }\n \n         // The never type.\n-        ty::Never => tcx.intern_layout(cx.layout_of_never_type()),\n+        ty::Never => tcx.mk_layout(cx.layout_of_never_type()),\n \n         // Potentially-wide pointers.\n         ty::Ref(_, pointee, _) | ty::RawPtr(ty::TypeAndMut { ty: pointee, .. }) => {\n@@ -151,7 +151,7 @@ fn layout_of_uncached<'tcx>(\n \n             let pointee = tcx.normalize_erasing_regions(param_env, pointee);\n             if pointee.is_sized(tcx, param_env) {\n-                return Ok(tcx.intern_layout(LayoutS::scalar(cx, data_ptr)));\n+                return Ok(tcx.mk_layout(LayoutS::scalar(cx, data_ptr)));\n             }\n \n             let unsized_part = tcx.struct_tail_erasing_lifetimes(pointee, param_env);\n@@ -164,7 +164,7 @@ fn layout_of_uncached<'tcx>(\n                 let metadata_layout = cx.layout_of(metadata_ty)?;\n                 // If the metadata is a 1-zst, then the pointer is thin.\n                 if metadata_layout.is_zst() && metadata_layout.align.abi.bytes() == 1 {\n-                    return Ok(tcx.intern_layout(LayoutS::scalar(cx, data_ptr)));\n+                    return Ok(tcx.mk_layout(LayoutS::scalar(cx, data_ptr)));\n                 }\n \n                 let Abi::Scalar(metadata) = metadata_layout.abi else {\n@@ -174,7 +174,7 @@ fn layout_of_uncached<'tcx>(\n             } else {\n                 match unsized_part.kind() {\n                     ty::Foreign(..) => {\n-                        return Ok(tcx.intern_layout(LayoutS::scalar(cx, data_ptr)));\n+                        return Ok(tcx.mk_layout(LayoutS::scalar(cx, data_ptr)));\n                     }\n                     ty::Slice(_) | ty::Str => scalar_unit(Int(dl.ptr_sized_integer(), false)),\n                     ty::Dynamic(..) => {\n@@ -189,15 +189,15 @@ fn layout_of_uncached<'tcx>(\n             };\n \n             // Effectively a (ptr, meta) tuple.\n-            tcx.intern_layout(cx.scalar_pair(data_ptr, metadata))\n+            tcx.mk_layout(cx.scalar_pair(data_ptr, metadata))\n         }\n \n         ty::Dynamic(_, _, ty::DynStar) => {\n             let mut data = scalar_unit(Pointer(AddressSpace::DATA));\n             data.valid_range_mut().start = 0;\n             let mut vtable = scalar_unit(Pointer(AddressSpace::DATA));\n             vtable.valid_range_mut().start = 1;\n-            tcx.intern_layout(cx.scalar_pair(data, vtable))\n+            tcx.mk_layout(cx.scalar_pair(data, vtable))\n         }\n \n         // Arrays and slices.\n@@ -222,7 +222,7 @@ fn layout_of_uncached<'tcx>(\n \n             let largest_niche = if count != 0 { element.largest_niche } else { None };\n \n-            tcx.intern_layout(LayoutS {\n+            tcx.mk_layout(LayoutS {\n                 variants: Variants::Single { index: VariantIdx::new(0) },\n                 fields: FieldsShape::Array { stride: element.size, count },\n                 abi,\n@@ -233,7 +233,7 @@ fn layout_of_uncached<'tcx>(\n         }\n         ty::Slice(element) => {\n             let element = cx.layout_of(element)?;\n-            tcx.intern_layout(LayoutS {\n+            tcx.mk_layout(LayoutS {\n                 variants: Variants::Single { index: VariantIdx::new(0) },\n                 fields: FieldsShape::Array { stride: element.size, count: 0 },\n                 abi: Abi::Aggregate { sized: false },\n@@ -242,7 +242,7 @@ fn layout_of_uncached<'tcx>(\n                 size: Size::ZERO,\n             })\n         }\n-        ty::Str => tcx.intern_layout(LayoutS {\n+        ty::Str => tcx.mk_layout(LayoutS {\n             variants: Variants::Single { index: VariantIdx::new(0) },\n             fields: FieldsShape::Array { stride: Size::from_bytes(1), count: 0 },\n             abi: Abi::Aggregate { sized: false },\n@@ -265,7 +265,7 @@ fn layout_of_uncached<'tcx>(\n                 Abi::Aggregate { ref mut sized } => *sized = false,\n                 _ => bug!(),\n             }\n-            tcx.intern_layout(unit)\n+            tcx.mk_layout(unit)\n         }\n \n         ty::Generator(def_id, substs, _) => generator_layout(cx, ty, def_id, substs)?,\n@@ -394,7 +394,7 @@ fn layout_of_uncached<'tcx>(\n                 FieldsShape::Array { stride: e_ly.size, count: e_len }\n             };\n \n-            tcx.intern_layout(LayoutS {\n+            tcx.mk_layout(LayoutS {\n                 variants: Variants::Single { index: VariantIdx::new(0) },\n                 fields,\n                 abi: Abi::Vector { element: e_abi, count: e_len },\n@@ -427,12 +427,12 @@ fn layout_of_uncached<'tcx>(\n                     return Err(LayoutError::Unknown(ty));\n                 }\n \n-                return Ok(tcx.intern_layout(\n+                return Ok(tcx.mk_layout(\n                     cx.layout_of_union(&def.repr(), &variants).ok_or(LayoutError::Unknown(ty))?,\n                 ));\n             }\n \n-            tcx.intern_layout(\n+            tcx.mk_layout(\n                 cx.layout_of_struct_or_enum(\n                     &def.repr(),\n                     &variants,\n@@ -636,7 +636,7 @@ fn generator_layout<'tcx>(\n         value: Primitive::Int(discr_int, false),\n         valid_range: WrappingRange { start: 0, end: max_discr },\n     };\n-    let tag_layout = cx.tcx.intern_layout(LayoutS::scalar(cx, tag));\n+    let tag_layout = cx.tcx.mk_layout(LayoutS::scalar(cx, tag));\n \n     let promoted_layouts = ineligible_locals\n         .iter()\n@@ -784,7 +784,7 @@ fn generator_layout<'tcx>(\n         Abi::Aggregate { sized: true }\n     };\n \n-    let layout = tcx.intern_layout(LayoutS {\n+    let layout = tcx.mk_layout(LayoutS {\n         variants: Variants::Multiple {\n             tag,\n             tag_encoding: TagEncoding::Direct,"}, {"sha": "de7fd003176bb2dcab1a471ce1cfd6bf9b0908ea", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -303,7 +303,7 @@ fn adt_drop_tys<'tcx>(\n         false,\n     )\n     .collect::<Result<Vec<_>, _>>()\n-    .map(|components| tcx.intern_type_list(&components))\n+    .map(|components| tcx.mk_type_list(&components))\n }\n // If `def_id` refers to a generic ADT, the queries above and below act as if they had been handed\n // a `tcx.make_ty(def, identity_substs)` and as such it is legal to substitute the generic parameters\n@@ -320,7 +320,7 @@ fn adt_significant_drop_tys(\n         true,\n     )\n     .collect::<Result<Vec<_>, _>>()\n-    .map(|components| tcx.intern_type_list(&components))\n+    .map(|components| tcx.mk_type_list(&components))\n }\n \n pub(crate) fn provide(providers: &mut ty::query::Providers) {"}, {"sha": "18159778a8e39e3328ff162f92945dedca5159a3", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -98,12 +98,12 @@ fn impl_defaultness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Defaultness {\n fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> &[Ty<'_>] {\n     if let Some(def_id) = def_id.as_local() {\n         if matches!(tcx.representability(def_id), ty::Representability::Infinite) {\n-            return tcx.intern_type_list(&[tcx.ty_error_misc()]);\n+            return tcx.mk_type_list(&[tcx.ty_error_misc()]);\n         }\n     }\n     let def = tcx.adt_def(def_id);\n \n-    let result = tcx.mk_type_list(\n+    let result = tcx.mk_type_list_from_iter(\n         def.variants()\n             .iter()\n             .flat_map(|v| v.fields.last())\n@@ -226,11 +226,8 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n         None => hir::Constness::NotConst,\n     };\n \n-    let unnormalized_env = ty::ParamEnv::new(\n-        tcx.intern_predicates(&predicates),\n-        traits::Reveal::UserFacing,\n-        constness,\n-    );\n+    let unnormalized_env =\n+        ty::ParamEnv::new(tcx.mk_predicates(&predicates), traits::Reveal::UserFacing, constness);\n \n     let body_id = local_did.unwrap_or(CRATE_DEF_ID);\n     let cause = traits::ObligationCause::misc(tcx.def_span(def_id), body_id);\n@@ -386,7 +383,7 @@ fn well_formed_types_in_env(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Predica\n         }\n     });\n \n-    tcx.mk_predicates(clauses.chain(input_clauses))\n+    tcx.mk_predicates_from_iter(clauses.chain(input_clauses))\n }\n \n fn param_env_reveal_all_normalized(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {"}, {"sha": "b8428d66a5dc8b207b9de4e72737a72082b2dadc", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -514,7 +514,7 @@ fn param_env_for_derived_eq(tcx: TyCtxt<'_>, did: DefId, eq_trait_id: DefId) ->\n     }\n \n     ParamEnv::new(\n-        tcx.mk_predicates(ty_predicates.iter().map(|&(p, _)| p).chain(\n+        tcx.mk_predicates_from_iter(ty_predicates.iter().map(|&(p, _)| p).chain(\n             params.iter().filter(|&&(_, needs_eq)| needs_eq).map(|&(param, _)| {\n                 tcx.mk_predicate(Binder::dummy(PredicateKind::Clause(Clause::Trait(TraitPredicate {\n                     trait_ref: tcx.mk_trait_ref(eq_trait_id, [tcx.mk_param_from_def(param)]),"}, {"sha": "0b0c6adc5045afef5935b3a20412616ff6a16ae6", "filename": "src/tools/clippy/clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -173,7 +173,7 @@ fn is_contains_sig(cx: &LateContext<'_>, call_id: HirId, iter_expr: &Expr<'_>) -\n         && let Some(iter_item) = cx.tcx\n             .associated_items(iter_trait)\n             .find_by_name_and_kind(cx.tcx, Ident::with_dummy_span(Symbol::intern(\"Item\")), AssocKind::Type, iter_trait)\n-        && let substs = cx.tcx.intern_substs(&[GenericArg::from(typeck.expr_ty_adjusted(iter_expr))])\n+        && let substs = cx.tcx.mk_substs(&[GenericArg::from(typeck.expr_ty_adjusted(iter_expr))])\n         && let proj_ty = cx.tcx.mk_projection(iter_item.def_id, substs)\n         && let Ok(item_ty) = cx.tcx.try_normalize_erasing_regions(cx.param_env, proj_ty)\n     {"}, {"sha": "df26b36b7b32a2ca3461c69f0f507bd2bc444ac4", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -414,7 +414,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                             }\n                         });\n \n-                        let new_subst = cx.tcx.mk_substs(\n+                        let new_subst = cx.tcx.mk_substs_from_iter(\n                             call_substs.iter()\n                                 .enumerate()\n                                 .map(|(i, t)|"}, {"sha": "2fdd775ad4893bfa472e8ed181665f7156bb1b7d", "filename": "src/tools/clippy/clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -134,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n                 } else if let Some(target_id) = cx.tcx.lang_items().deref_target() {\n                     if let Ok(deref_ty) = cx.tcx.try_normalize_erasing_regions(\n                         cx.param_env,\n-                        cx.tcx.mk_projection(target_id, cx.tcx.intern_substs(&[GenericArg::from(indexed_ty)])),\n+                        cx.tcx.mk_projection(target_id, cx.tcx.mk_substs(&[GenericArg::from(indexed_ty)])),\n                     ) {\n                         if deref_ty == expr_ty {\n                             let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;"}, {"sha": "e3bfffacb525004b0a5c02f02cfa03c1cbeb9ef1", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -237,7 +237,7 @@ pub fn constant<'tcx>(\n         typeck_results,\n         param_env: lcx.param_env,\n         needed_resolution: false,\n-        substs: lcx.tcx.intern_substs(&[]),\n+        substs: lcx.tcx.mk_substs(&[]),\n     };\n     cx.expr(e).map(|cst| (cst, cx.needed_resolution))\n }\n@@ -306,7 +306,7 @@ pub fn constant_context<'a, 'tcx>(\n         typeck_results,\n         param_env: lcx.param_env,\n         needed_resolution: false,\n-        substs: lcx.tcx.intern_substs(&[]),\n+        substs: lcx.tcx.mk_substs(&[]),\n     }\n }\n "}, {"sha": "f8ec4bb54930adeaef870dbe5a1f9199a09b9a30", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -237,7 +237,7 @@ pub fn implements_trait_with_env<'tcx>(\n         kind: TypeVariableOriginKind::MiscVariable,\n         span: DUMMY_SP,\n     };\n-    let ty_params = tcx.mk_substs(\n+    let ty_params = tcx.mk_substs_from_iter(\n         ty_params\n             .into_iter()\n             .map(|arg| arg.unwrap_or_else(|| infcx.next_ty_var(orig).into())),\n@@ -1065,7 +1065,7 @@ pub fn make_projection<'tcx>(\n         tcx,\n         container_id,\n         assoc_ty,\n-        tcx.mk_substs(substs.into_iter().map(Into::into)),\n+        tcx.mk_substs_from_iter(substs.into_iter().map(Into::into)),\n     )\n }\n "}, {"sha": "8443e90793867f80afaada76595d7863edd34b83", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -363,7 +363,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n                 tcx,\n                 ty::ParamEnv::reveal_all(),\n                 start_id,\n-                tcx.intern_substs(&[ty::subst::GenericArg::from(main_ret_ty)]),\n+                tcx.mk_substs(&[ty::subst::GenericArg::from(main_ret_ty)]),\n             )\n             .unwrap()\n             .unwrap();"}, {"sha": "f21b4f84c4cd5cb90fa2068ab21ca2140c552041", "filename": "src/tools/rust-analyzer/crates/hir-ty/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-ty%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2200911616c3054f0c090db54ea78bdfb666dade/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-ty%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-ty%2Fsrc%2Flayout.rs?ref=2200911616c3054f0c090db54ea78bdfb666dade", "patch": "@@ -173,7 +173,7 @@ pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty, krate: CrateId) -> Result<Lay\n \n             // let pointee = tcx.normalize_erasing_regions(param_env, pointee);\n             // if pointee.is_sized(tcx.at(DUMMY_SP), param_env) {\n-            //     return Ok(tcx.intern_layout(LayoutS::scalar(cx, data_ptr)));\n+            //     return Ok(tcx.mk_layout(LayoutS::scalar(cx, data_ptr)));\n             // }\n \n             let unsized_part = struct_tail_erasing_lifetimes(db, pointee.clone());"}]}