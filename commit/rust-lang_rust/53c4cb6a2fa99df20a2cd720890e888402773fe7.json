{"sha": "53c4cb6a2fa99df20a2cd720890e888402773fe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYzRjYjZhMmZhOTlkZjIwYTJjZDcyMDg5MGU4ODg0MDI3NzNmZTc=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-06-23T22:06:04Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-14T23:45:02Z"}, "message": "Factor out build_environment's code to find a variable in a function context.", "tree": {"sha": "5e191d1ce1fd657bb8e6ce425d39f9b5977bd16c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e191d1ce1fd657bb8e6ce425d39f9b5977bd16c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53c4cb6a2fa99df20a2cd720890e888402773fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53c4cb6a2fa99df20a2cd720890e888402773fe7", "html_url": "https://github.com/rust-lang/rust/commit/53c4cb6a2fa99df20a2cd720890e888402773fe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53c4cb6a2fa99df20a2cd720890e888402773fe7/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "759317ca8bf3d2997b5a0973679d9c7bae063e15", "url": "https://api.github.com/repos/rust-lang/rust/commits/759317ca8bf3d2997b5a0973679d9c7bae063e15", "html_url": "https://github.com/rust-lang/rust/commit/759317ca8bf3d2997b5a0973679d9c7bae063e15"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "5bedca727fd6e84211f8d6b9c86e81d1e79d6353", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/53c4cb6a2fa99df20a2cd720890e888402773fe7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53c4cb6a2fa99df20a2cd720890e888402773fe7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=53c4cb6a2fa99df20a2cd720890e888402773fe7", "patch": "@@ -4556,6 +4556,29 @@ fn collect_upvars(&@block_ctxt cx, &ast::block bloc,\n     ret result;\n }\n \n+// Finds the ValueRef associated with a variable in a function\n+// context. It checks locals, upvars, and args.\n+fn find_variable(&@fn_ctxt fcx, ast::node_id nid) -> ValueRef {\n+    ret\n+        alt (fcx.lllocals.find(nid)) {\n+            case (none) {\n+                alt (fcx.llupvars.find(nid)) {\n+                    case (none) {\n+                        alt (fcx.llargs.find(nid)) {\n+                            case (some(?llval)) { llval }\n+                            case (_) {\n+                                fcx.lcx.ccx.sess.bug(\"unbound var \\\n+                                      in build_environment \" + int::str(nid))\n+                            }\n+                        }\n+                    }\n+                    case (some(?llval)) { llval }\n+                }\n+            }\n+            case (some(?llval)) { llval }\n+        }\n+}\n+\n // Given a block context and a list of upvars, construct a closure that\n // contains pointers to all of the upvars and all of the tydescs in\n // scope. Return the ValueRef and TypeRef corresponding to the closure.\n@@ -4575,24 +4598,7 @@ fn build_environment(&@block_ctxt cx, &ast::node_id[] upvars) ->\n             llbindingtys += ~[val_ty(llbindings.(0))];\n         }\n         for (ast::node_id nid in upvars) {\n-            auto llbinding;\n-            alt (cx.fcx.lllocals.find(nid)) {\n-                case (none) {\n-                    alt (cx.fcx.llupvars.find(nid)) {\n-                        case (none) {\n-                            alt (cx.fcx.llargs.find(nid)) {\n-                                case (some(?x)) { llbinding = x; }\n-                                case (_) {\n-                                    cx.fcx.lcx.ccx.sess.bug(\"unbound var \\\n-                                      in build_environment \" + int::str(nid));\n-                                }\n-                            }\n-                        }\n-                        case (some(?llval)) { llbinding = llval; }\n-                    }\n-                }\n-                case (some(?llval)) { llbinding = llval; }\n-            }\n+            auto llbinding = find_variable(cx.fcx, nid);\n             llbindings += ~[llbinding];\n             llbindingtys += ~[val_ty(llbinding)];\n         }"}]}