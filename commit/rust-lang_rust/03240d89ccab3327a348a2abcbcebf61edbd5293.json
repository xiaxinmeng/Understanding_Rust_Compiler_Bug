{"sha": "03240d89ccab3327a348a2abcbcebf61edbd5293", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMjQwZDg5Y2NhYjMzMjdhMzQ4YTJhYmNiY2ViZjYxZWRiZDUyOTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-12T10:44:27Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-12T10:44:27Z"}, "message": "Move jit code to driver/jit.rs", "tree": {"sha": "fe35bd1ac4fbd5c1122098a59c811408d9b54a36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe35bd1ac4fbd5c1122098a59c811408d9b54a36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03240d89ccab3327a348a2abcbcebf61edbd5293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03240d89ccab3327a348a2abcbcebf61edbd5293", "html_url": "https://github.com/rust-lang/rust/commit/03240d89ccab3327a348a2abcbcebf61edbd5293", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03240d89ccab3327a348a2abcbcebf61edbd5293/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a0d1ed9df4ae0f8f54d7bd222ced683a84bdd34", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a0d1ed9df4ae0f8f54d7bd222ced683a84bdd34", "html_url": "https://github.com/rust-lang/rust/commit/1a0d1ed9df4ae0f8f54d7bd222ced683a84bdd34"}], "stats": {"total": 284, "additions": 145, "deletions": 139}, "files": [{"sha": "00bc00428412a5e823358de7fa9f56c25874f889", "filename": "src/driver/jit.rs", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/03240d89ccab3327a348a2abcbcebf61edbd5293/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03240d89ccab3327a348a2abcbcebf61edbd5293/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=03240d89ccab3327a348a2abcbcebf61edbd5293", "patch": "@@ -0,0 +1,141 @@\n+use std::ffi::CString;\n+use std::os::raw::{c_char, c_int};\n+\n+use rustc_codegen_ssa::CrateInfo;\n+\n+use crate::prelude::*;\n+\n+pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n+    use cranelift_simplejit::{SimpleJITBackend, SimpleJITBuilder};\n+\n+    // Rustc opens us without the RTLD_GLOBAL flag, so __cg_clif_global_atomic_mutex will not be\n+    // exported. We fix this by opening ourself again as global.\n+    // FIXME remove once atomic_shim is gone\n+    let cg_dylib = std::ffi::OsString::from(&tcx.sess.opts.debugging_opts.codegen_backend.as_ref().unwrap());\n+    std::mem::forget(libloading::os::unix::Library::open(Some(cg_dylib), libc::RTLD_NOW | libc::RTLD_GLOBAL).unwrap());\n+\n+\n+    let imported_symbols = load_imported_symbols_for_jit(tcx);\n+\n+    let mut jit_builder = SimpleJITBuilder::with_isa(\n+        crate::build_isa(tcx.sess, false),\n+        cranelift_module::default_libcall_names(),\n+    );\n+    jit_builder.symbols(imported_symbols);\n+    let mut jit_module: Module<SimpleJITBackend> = Module::new(jit_builder);\n+    assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n+\n+    let sig = Signature {\n+        params: vec![\n+            AbiParam::new(jit_module.target_config().pointer_type()),\n+            AbiParam::new(jit_module.target_config().pointer_type()),\n+        ],\n+        returns: vec![AbiParam::new(\n+            jit_module.target_config().pointer_type(), /*isize*/\n+        )],\n+        call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n+    };\n+    let main_func_id = jit_module\n+        .declare_function(\"main\", Linkage::Import, &sig)\n+        .unwrap();\n+\n+    let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+    let mono_items = cgus\n+        .iter()\n+        .map(|cgu| cgu.items_in_deterministic_order(tcx).into_iter())\n+        .flatten()\n+        .collect::<FxHashMap<_, (_, _)>>()\n+        .into_iter()\n+        .collect::<Vec<(_, (_, _))>>();\n+\n+    super::time(tcx, \"codegen mono items\", || {\n+        super::codegen_mono_items(tcx, &mut jit_module, None, mono_items);\n+    });\n+    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module);\n+    crate::allocator::codegen(tcx, &mut jit_module);\n+\n+    jit_module.finalize_definitions();\n+\n+    tcx.sess.abort_if_errors();\n+\n+    let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n+\n+    println!(\"Rustc codegen cranelift will JIT run the executable, because the CG_CLIF_JIT env var is set\");\n+\n+    let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n+        unsafe { ::std::mem::transmute(finalized_main) };\n+\n+    let args = ::std::env::var(\"CG_CLIF_JIT_ARGS\").unwrap_or_else(|_| String::new());\n+    let args = args\n+        .split(\" \")\n+        .chain(Some(&*tcx.crate_name(LOCAL_CRATE).as_str().to_string()))\n+        .map(|arg| CString::new(arg).unwrap())\n+        .collect::<Vec<_>>();\n+    let argv = args.iter().map(|arg| arg.as_ptr()).collect::<Vec<_>>();\n+    // TODO: Rust doesn't care, but POSIX argv has a NULL sentinel at the end\n+\n+    let ret = f(args.len() as c_int, argv.as_ptr());\n+\n+    jit_module.finish();\n+    std::process::exit(ret);\n+}\n+\n+fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n+    use rustc::middle::dependency_format::Linkage;\n+\n+    let mut dylib_paths = Vec::new();\n+\n+    let crate_info = CrateInfo::new(tcx);\n+    let formats = tcx.dependency_formats(LOCAL_CRATE);\n+    let data = &formats\n+        .iter()\n+        .find(|(crate_type, _data)| *crate_type == CrateType::Executable)\n+        .unwrap()\n+        .1;\n+    for &(cnum, _) in &crate_info.used_crates_dynamic {\n+        let src = &crate_info.used_crate_source[&cnum];\n+        match data[cnum.as_usize() - 1] {\n+            Linkage::NotLinked | Linkage::IncludedFromDylib => {}\n+            Linkage::Static => {\n+                let name = tcx.crate_name(cnum);\n+                let mut err = tcx\n+                    .sess\n+                    .struct_err(&format!(\"Can't load static lib {}\", name.as_str()));\n+                err.note(\"rustc_codegen_cranelift can only load dylibs in JIT mode.\");\n+                err.emit();\n+            }\n+            Linkage::Dynamic => {\n+                dylib_paths.push(src.dylib.as_ref().unwrap().0.clone());\n+            }\n+        }\n+    }\n+\n+    let mut imported_symbols = Vec::new();\n+    for path in dylib_paths {\n+        use object::Object;\n+        let lib = libloading::Library::new(&path).unwrap();\n+        let obj = std::fs::read(path).unwrap();\n+        let obj = object::File::parse(&obj).unwrap();\n+        imported_symbols.extend(obj.dynamic_symbols().filter_map(|(_idx, symbol)| {\n+            let name = symbol.name().unwrap().to_string();\n+            if name.is_empty() || !symbol.is_global() || symbol.is_undefined() {\n+                return None;\n+            }\n+            let dlsym_name = if cfg!(target_os = \"macos\") {\n+                // On macOS `dlsym` expects the name without leading `_`.\n+                assert!(name.starts_with(\"_\"), \"{:?}\", name);\n+                &name[1..]\n+            } else {\n+                &name\n+            };\n+            let symbol: libloading::Symbol<*const u8> =\n+                unsafe { lib.get(dlsym_name.as_bytes()) }.unwrap();\n+            Some((name, *symbol))\n+        }));\n+        std::mem::forget(lib)\n+    }\n+\n+    tcx.sess.abort_if_errors();\n+\n+    imported_symbols\n+}"}, {"sha": "8e7d0742dc5a1f2fcd02d9c754356d20b333ab91", "filename": "src/driver/mod.rs", "status": "modified", "additions": 4, "deletions": 139, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/03240d89ccab3327a348a2abcbcebf61edbd5293/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03240d89ccab3327a348a2abcbcebf61edbd5293/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=03240d89ccab3327a348a2abcbcebf61edbd5293", "patch": "@@ -1,6 +1,4 @@\n use std::any::Any;\n-use std::ffi::CString;\n-use std::os::raw::{c_char, c_int};\n \n use rustc::dep_graph::{WorkProduct, WorkProductFileKind, WorkProductId};\n use rustc::middle::cstore::EncodedMetadata;\n@@ -14,6 +12,9 @@ use crate::prelude::*;\n \n use crate::backend::{Emit, WriteDebugInfo};\n \n+#[cfg(not(target_arch = \"wasm32\"))]\n+mod jit;\n+\n pub fn codegen_crate(\n     tcx: TyCtxt<'_>,\n     metadata: EncodedMetadata,\n@@ -25,7 +26,7 @@ pub fn codegen_crate(\n         && tcx.sess.crate_types.get().contains(&CrateType::Executable)\n     {\n         #[cfg(not(target_arch = \"wasm32\"))]\n-        let _: ! = run_jit(tcx);\n+        let _: ! = jit::run_jit(tcx);\n \n         #[cfg(target_arch = \"wasm32\")]\n         panic!(\"jit not supported on wasm\");\n@@ -34,142 +35,6 @@ pub fn codegen_crate(\n     run_aot(tcx, metadata, need_metadata_module)\n }\n \n-#[cfg(not(target_arch = \"wasm32\"))]\n-fn run_jit(tcx: TyCtxt<'_>) -> ! {\n-    use cranelift_simplejit::{SimpleJITBackend, SimpleJITBuilder};\n-\n-    // Rustc opens us without the RTLD_GLOBAL flag, so __cg_clif_global_atomic_mutex will not be\n-    // exported. We fix this by opening ourself again as global.\n-    // FIXME remove once atomic_shim is gone\n-    let cg_dylib = std::ffi::OsString::from(&tcx.sess.opts.debugging_opts.codegen_backend.as_ref().unwrap());\n-    std::mem::forget(libloading::os::unix::Library::open(Some(cg_dylib), libc::RTLD_NOW | libc::RTLD_GLOBAL).unwrap());\n-\n-\n-    let imported_symbols = load_imported_symbols_for_jit(tcx);\n-\n-    let mut jit_builder = SimpleJITBuilder::with_isa(\n-        crate::build_isa(tcx.sess, false),\n-        cranelift_module::default_libcall_names(),\n-    );\n-    jit_builder.symbols(imported_symbols);\n-    let mut jit_module: Module<SimpleJITBackend> = Module::new(jit_builder);\n-    assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n-\n-    let sig = Signature {\n-        params: vec![\n-            AbiParam::new(jit_module.target_config().pointer_type()),\n-            AbiParam::new(jit_module.target_config().pointer_type()),\n-        ],\n-        returns: vec![AbiParam::new(\n-            jit_module.target_config().pointer_type(), /*isize*/\n-        )],\n-        call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n-    };\n-    let main_func_id = jit_module\n-        .declare_function(\"main\", Linkage::Import, &sig)\n-        .unwrap();\n-\n-    let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n-    let mono_items = cgus\n-        .iter()\n-        .map(|cgu| cgu.items_in_deterministic_order(tcx).into_iter())\n-        .flatten()\n-        .collect::<FxHashMap<_, (_, _)>>()\n-        .into_iter()\n-        .collect::<Vec<(_, (_, _))>>();\n-\n-    time(tcx, \"codegen mono items\", || {\n-        codegen_mono_items(tcx, &mut jit_module, None, mono_items);\n-    });\n-    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module);\n-    crate::allocator::codegen(tcx, &mut jit_module);\n-\n-    jit_module.finalize_definitions();\n-\n-    tcx.sess.abort_if_errors();\n-\n-    let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n-\n-    println!(\"Rustc codegen cranelift will JIT run the executable, because the CG_CLIF_JIT env var is set\");\n-\n-    let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n-        unsafe { ::std::mem::transmute(finalized_main) };\n-\n-    let args = ::std::env::var(\"CG_CLIF_JIT_ARGS\").unwrap_or_else(|_| String::new());\n-    let args = args\n-        .split(\" \")\n-        .chain(Some(&*tcx.crate_name(LOCAL_CRATE).as_str().to_string()))\n-        .map(|arg| CString::new(arg).unwrap())\n-        .collect::<Vec<_>>();\n-    let argv = args.iter().map(|arg| arg.as_ptr()).collect::<Vec<_>>();\n-    // TODO: Rust doesn't care, but POSIX argv has a NULL sentinel at the end\n-\n-    let ret = f(args.len() as c_int, argv.as_ptr());\n-\n-    jit_module.finish();\n-    std::process::exit(ret);\n-}\n-\n-fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n-    use rustc::middle::dependency_format::Linkage;\n-\n-    let mut dylib_paths = Vec::new();\n-\n-    let crate_info = CrateInfo::new(tcx);\n-    let formats = tcx.dependency_formats(LOCAL_CRATE);\n-    let data = &formats\n-        .iter()\n-        .find(|(crate_type, _data)| *crate_type == CrateType::Executable)\n-        .unwrap()\n-        .1;\n-    for &(cnum, _) in &crate_info.used_crates_dynamic {\n-        let src = &crate_info.used_crate_source[&cnum];\n-        match data[cnum.as_usize() - 1] {\n-            Linkage::NotLinked | Linkage::IncludedFromDylib => {}\n-            Linkage::Static => {\n-                let name = tcx.crate_name(cnum);\n-                let mut err = tcx\n-                    .sess\n-                    .struct_err(&format!(\"Can't load static lib {}\", name.as_str()));\n-                err.note(\"rustc_codegen_cranelift can only load dylibs in JIT mode.\");\n-                err.emit();\n-            }\n-            Linkage::Dynamic => {\n-                dylib_paths.push(src.dylib.as_ref().unwrap().0.clone());\n-            }\n-        }\n-    }\n-\n-    let mut imported_symbols = Vec::new();\n-    for path in dylib_paths {\n-        use object::Object;\n-        let lib = libloading::Library::new(&path).unwrap();\n-        let obj = std::fs::read(path).unwrap();\n-        let obj = object::File::parse(&obj).unwrap();\n-        imported_symbols.extend(obj.dynamic_symbols().filter_map(|(_idx, symbol)| {\n-            let name = symbol.name().unwrap().to_string();\n-            if name.is_empty() || !symbol.is_global() || symbol.is_undefined() {\n-                return None;\n-            }\n-            let dlsym_name = if cfg!(target_os = \"macos\") {\n-                // On macOS `dlsym` expects the name without leading `_`.\n-                assert!(name.starts_with(\"_\"), \"{:?}\", name);\n-                &name[1..]\n-            } else {\n-                &name\n-            };\n-            let symbol: libloading::Symbol<*const u8> =\n-                unsafe { lib.get(dlsym_name.as_bytes()) }.unwrap();\n-            Some((name, *symbol))\n-        }));\n-        std::mem::forget(lib)\n-    }\n-\n-    tcx.sess.abort_if_errors();\n-\n-    imported_symbols\n-}\n-\n fn run_aot(\n     tcx: TyCtxt<'_>,\n     metadata: EncodedMetadata,"}]}