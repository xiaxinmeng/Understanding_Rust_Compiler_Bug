{"sha": "aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf", "node_id": "C_kwDOAAsO6NoAKGFhNmMyN2E3NGUwMGU4ZTk4Y2QzY2UzZTBkYjYxNDliYjViYzdiY2Y", "commit": {"author": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-25T16:14:52Z"}, "committer": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-25T16:14:52Z"}, "message": "change names to not be implicitly negative", "tree": {"sha": "3a95bc2a365975fa2a61d99b20429f7f5fdf9f1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a95bc2a365975fa2a61d99b20429f7f5fdf9f1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf", "html_url": "https://github.com/rust-lang/rust/commit/aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf/comments", "author": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41f6d88be588b191d7c49547819671c11c9a84e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/41f6d88be588b191d7c49547819671c11c9a84e9", "html_url": "https://github.com/rust-lang/rust/commit/41f6d88be588b191d7c49547819671c11c9a84e9"}], "stats": {"total": 152, "additions": 73, "deletions": 79}, "files": [{"sha": "d8bfb84537d708f2c8930a48383f2fe00f215d13", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf", "patch": "@@ -932,12 +932,12 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(from_raw_with_void_ptr::FromRawWithVoidPtr));\n     store.register_late_pass(|_| Box::new(suspicious_xor_used_as_pow::ConfusingXorAndPow));\n     store.register_late_pass(move |_| Box::new(manual_is_ascii_check::ManualIsAsciiCheck::new(msrv())));\n-    let semicolon_inside_block_if_multiline = conf.semicolon_inside_block_if_multiline;\n-    let semicolon_outside_block_if_singleline = conf.semicolon_outside_block_if_singleline;\n+    let semicolon_inside_block_ignore_singleline = conf.semicolon_inside_block_ignore_singleline;\n+    let semicolon_outside_block_ignore_multiline = conf.semicolon_outside_block_ignore_multiline;\n     store.register_late_pass(move |_| {\n         Box::new(semicolon_block::SemicolonBlock::new(\n-            semicolon_inside_block_if_multiline,\n-            semicolon_outside_block_if_singleline,\n+            semicolon_inside_block_ignore_singleline,\n+            semicolon_outside_block_ignore_multiline,\n         ))\n     });\n     store.register_late_pass(|_| Box::new(fn_null_check::FnNullCheck));"}, {"sha": "419d7991f0ec0bfb1edbf45d36c1d728d0bbb905", "filename": "clippy_lints/src/semicolon_block.rs", "status": "modified", "additions": 63, "deletions": 69, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_block.rs?ref=aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf", "patch": "@@ -68,17 +68,73 @@ impl_lint_pass!(SemicolonBlock => [SEMICOLON_INSIDE_BLOCK, SEMICOLON_OUTSIDE_BLO\n \n #[derive(Copy, Clone)]\n pub struct SemicolonBlock {\n-    semicolon_inside_block_if_multiline: bool,\n-    semicolon_outside_block_if_singleline: bool,\n+    semicolon_inside_block_ignore_singleline: bool,\n+    semicolon_outside_block_ignore_multiline: bool,\n }\n \n impl SemicolonBlock {\n-    pub fn new(semicolon_inside_block_if_multiline: bool, semicolon_outside_block_if_singleline: bool) -> Self {\n+    pub fn new(semicolon_inside_block_ignore_singleline: bool, semicolon_outside_block_ignore_multiline: bool) -> Self {\n         Self {\n-            semicolon_inside_block_if_multiline,\n-            semicolon_outside_block_if_singleline,\n+            semicolon_inside_block_ignore_singleline,\n+            semicolon_outside_block_ignore_multiline,\n         }\n     }\n+\n+    fn semicolon_inside_block(self, cx: &LateContext<'_>, block: &Block<'_>, tail: &Expr<'_>, semi_span: Span) {\n+        let insert_span = tail.span.source_callsite().shrink_to_hi();\n+        let remove_span = semi_span.with_lo(block.span.hi());\n+\n+        if self.semicolon_inside_block_ignore_singleline && get_line(cx, remove_span) == get_line(cx, insert_span) {\n+            return;\n+        }\n+\n+        span_lint_and_then(\n+            cx,\n+            SEMICOLON_INSIDE_BLOCK,\n+            semi_span,\n+            \"consider moving the `;` inside the block for consistent formatting\",\n+            |diag| {\n+                multispan_sugg_with_applicability(\n+                    diag,\n+                    \"put the `;` here\",\n+                    Applicability::MachineApplicable,\n+                    [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n+                );\n+            },\n+        );\n+    }\n+\n+    fn semicolon_outside_block(\n+        self,\n+        cx: &LateContext<'_>,\n+        block: &Block<'_>,\n+        tail_stmt_expr: &Expr<'_>,\n+        semi_span: Span,\n+    ) {\n+        let insert_span = block.span.with_lo(block.span.hi());\n+        // account for macro calls\n+        let semi_span = cx.sess().source_map().stmt_span(semi_span, block.span);\n+        let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n+\n+        if self.semicolon_outside_block_ignore_multiline && get_line(cx, remove_span) != get_line(cx, insert_span) {\n+            return;\n+        }\n+\n+        span_lint_and_then(\n+            cx,\n+            SEMICOLON_OUTSIDE_BLOCK,\n+            block.span,\n+            \"consider moving the `;` outside the block for consistent formatting\",\n+            |diag| {\n+                multispan_sugg_with_applicability(\n+                    diag,\n+                    \"put the `;` here\",\n+                    Applicability::MachineApplicable,\n+                    [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n+                );\n+            },\n+        );\n+    }\n }\n \n impl LateLintPass<'_> for SemicolonBlock {\n@@ -98,81 +154,19 @@ impl LateLintPass<'_> for SemicolonBlock {\n                     span,\n                     ..\n                 } = stmt else { return };\n-                semicolon_outside_block(self, cx, block, expr, span);\n+                self.semicolon_outside_block(cx, block, expr, span);\n             },\n             StmtKind::Semi(Expr {\n                 kind: ExprKind::Block(block @ Block { expr: Some(tail), .. }, _),\n                 ..\n             }) if !block.span.from_expansion() => {\n-                semicolon_inside_block(self, cx, block, tail, stmt.span);\n+                self.semicolon_inside_block(cx, block, tail, stmt.span);\n             },\n             _ => (),\n         }\n     }\n }\n \n-fn semicolon_inside_block(\n-    conf: &mut SemicolonBlock,\n-    cx: &LateContext<'_>,\n-    block: &Block<'_>,\n-    tail: &Expr<'_>,\n-    semi_span: Span,\n-) {\n-    let insert_span = tail.span.source_callsite().shrink_to_hi();\n-    let remove_span = semi_span.with_lo(block.span.hi());\n-\n-    if conf.semicolon_inside_block_if_multiline && get_line(cx, remove_span) == get_line(cx, insert_span) {\n-        return;\n-    }\n-\n-    span_lint_and_then(\n-        cx,\n-        SEMICOLON_INSIDE_BLOCK,\n-        semi_span,\n-        \"consider moving the `;` inside the block for consistent formatting\",\n-        |diag| {\n-            multispan_sugg_with_applicability(\n-                diag,\n-                \"put the `;` here\",\n-                Applicability::MachineApplicable,\n-                [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n-            );\n-        },\n-    );\n-}\n-\n-fn semicolon_outside_block(\n-    conf: &mut SemicolonBlock,\n-    cx: &LateContext<'_>,\n-    block: &Block<'_>,\n-    tail_stmt_expr: &Expr<'_>,\n-    semi_span: Span,\n-) {\n-    let insert_span = block.span.with_lo(block.span.hi());\n-    // account for macro calls\n-    let semi_span = cx.sess().source_map().stmt_span(semi_span, block.span);\n-    let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n-\n-    if conf.semicolon_outside_block_if_singleline && get_line(cx, remove_span) != get_line(cx, insert_span) {\n-        return;\n-    }\n-\n-    span_lint_and_then(\n-        cx,\n-        SEMICOLON_OUTSIDE_BLOCK,\n-        block.span,\n-        \"consider moving the `;` outside the block for consistent formatting\",\n-        |diag| {\n-            multispan_sugg_with_applicability(\n-                diag,\n-                \"put the `;` here\",\n-                Applicability::MachineApplicable,\n-                [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n-            );\n-        },\n-    );\n-}\n-\n fn get_line(cx: &LateContext<'_>, span: Span) -> Option<usize> {\n     if let Ok(line) = cx.sess().source_map().lookup_line(span.lo()) {\n         return Some(line.line);"}, {"sha": "18a6e2a4a3a6179c70d931da154f90c1c6d89b5b", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf", "patch": "@@ -280,11 +280,11 @@ define_Conf! {\n     /// Lint: SEMICOLON_INSIDE_BLOCK.\n     ///\n     /// Whether to lint only if it's multiline.\n-    (semicolon_inside_block_if_multiline: bool = false),\n+    (semicolon_inside_block_ignore_singleline: bool = false),\n     /// Lint: SEMICOLON_OUTSIDE_BLOCK.\n     ///\n     /// Whether to lint only if it's singleline.\n-    (semicolon_outside_block_if_singleline: bool = false),\n+    (semicolon_outside_block_ignore_multiline: bool = false),\n     /// Lint: DOC_MARKDOWN.\n     ///\n     /// The list of words this lint should not consider as identifiers needing ticks. The value"}, {"sha": "4d03e88deba8a95f19109e8bdce65096a35fed74", "filename": "tests/ui-toml/semicolon_block/clippy.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf/tests%2Fui-toml%2Fsemicolon_block%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf/tests%2Fui-toml%2Fsemicolon_block%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fclippy.toml?ref=aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf", "patch": "@@ -1,2 +1,2 @@\n-semicolon-inside-block-if-multiline = true\n-semicolon-outside-block-if-singleline = true\n+semicolon-inside-block-ignore-singleline = true\n+semicolon-outside-block-ignore-multiline = true"}, {"sha": "1e0d7499c7e7fe149f65db86c51ac8dd1417e851", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=aa6c27a74e00e8e98cd3ce3e0db6149bb5bc7bcf", "patch": "@@ -37,8 +37,8 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            missing-docs-in-crate-items\n            msrv\n            pass-by-value-size-limit\n-           semicolon-inside-block-if-multiline\n-           semicolon-outside-block-if-singleline\n+           semicolon-inside-block-ignore-singleline\n+           semicolon-outside-block-ignore-multiline\n            single-char-binding-names-threshold\n            standard-macro-braces\n            suppress-restriction-lint-in-const"}]}