{"sha": "bbcd998433075aba66ef0677bcdd821ca5fc926e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiY2Q5OTg0MzMwNzVhYmE2NmVmMDY3N2JjZGQ4MjFjYTVmYzkyNmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-15T19:29:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-15T19:29:24Z"}, "message": "make analysis sync", "tree": {"sha": "58130242a9a726bb552d01f5c72d1c4d13ead701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58130242a9a726bb552d01f5c72d1c4d13ead701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbcd998433075aba66ef0677bcdd821ca5fc926e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcd998433075aba66ef0677bcdd821ca5fc926e", "html_url": "https://github.com/rust-lang/rust/commit/bbcd998433075aba66ef0677bcdd821ca5fc926e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbcd998433075aba66ef0677bcdd821ca5fc926e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76c51fae77d5dc2d7791132ecc78e444118e48de", "url": "https://api.github.com/repos/rust-lang/rust/commits/76c51fae77d5dc2d7791132ecc78e444118e48de", "html_url": "https://github.com/rust-lang/rust/commit/76c51fae77d5dc2d7791132ecc78e444118e48de"}], "stats": {"total": 56, "additions": 37, "deletions": 19}, "files": [{"sha": "c69577233995f473fd8989b64a9baaaa4e0ca5b4", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bbcd998433075aba66ef0677bcdd821ca5fc926e/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcd998433075aba66ef0677bcdd821ca5fc926e/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=bbcd998433075aba66ef0677bcdd821ca5fc926e", "patch": "@@ -30,6 +30,20 @@ impl salsa::Database for RootDatabase {\n     }\n }\n \n+impl salsa::ParallelDatabase for RootDatabase {\n+    fn fork(&self) -> Self {\n+        RootDatabase {\n+            runtime: self.runtime.fork(),\n+        }\n+    }\n+}\n+\n+impl Clone for RootDatabase {\n+    fn clone(&self) -> RootDatabase {\n+        salsa::ParallelDatabase::fork(self)\n+    }\n+}\n+\n salsa::database_storage! {\n     pub(crate) struct RootDatabaseStorage for RootDatabase {\n         impl FilesDatabase {"}, {"sha": "d07d797d57dccd9660d14c6f972367510c5e2678", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbcd998433075aba66ef0677bcdd821ca5fc926e/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcd998433075aba66ef0677bcdd821ca5fc926e/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=bbcd998433075aba66ef0677bcdd821ca5fc926e", "patch": "@@ -78,13 +78,13 @@ impl Default for FileResolverImp {\n \n #[derive(Debug)]\n pub(crate) struct AnalysisHostImpl {\n-    data: Arc<WorldData>\n+    data: WorldData\n }\n \n impl AnalysisHostImpl {\n     pub fn new() -> AnalysisHostImpl {\n         AnalysisHostImpl {\n-            data: Arc::new(WorldData::default()),\n+            data: WorldData::default(),\n         }\n     }\n     pub fn analysis(&self) -> AnalysisImpl {\n@@ -114,26 +114,26 @@ impl AnalysisHostImpl {\n         self.data_mut().libs.push(Arc::new(root));\n     }\n     fn data_mut(&mut self) -> &mut WorldData {\n-        Arc::make_mut(&mut self.data)\n+        &mut self.data\n     }\n }\n \n pub(crate) struct AnalysisImpl {\n     needs_reindex: AtomicBool,\n-    data: Arc<WorldData>,\n+    data: WorldData,\n }\n \n impl fmt::Debug for AnalysisImpl {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        (&*self.data).fmt(f)\n+        self.data.fmt(f)\n     }\n }\n \n impl Clone for AnalysisImpl {\n     fn clone(&self) -> AnalysisImpl {\n         AnalysisImpl {\n             needs_reindex: AtomicBool::new(self.needs_reindex.load(SeqCst)),\n-            data: Arc::clone(&self.data),\n+            data: self.data.clone(),\n         }\n     }\n }"}, {"sha": "c76e4f4fec5eb5adc208772ebd3411d1f081bc5e", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcd998433075aba66ef0677bcdd821ca5fc926e/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcd998433075aba66ef0677bcdd821ca5fc926e/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=bbcd998433075aba66ef0677bcdd821ca5fc926e", "patch": "@@ -258,3 +258,9 @@ impl LibraryData {\n         LibraryData { root }\n     }\n }\n+\n+#[test]\n+fn analysis_is_send() {\n+    fn is_send<T: Send>() {}\n+    is_send::<Analysis>();\n+}"}, {"sha": "76bcecd38edec24cccb5a67f16e3ad132e1960e3", "filename": "crates/ra_analysis/src/roots.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bbcd998433075aba66ef0677bcdd821ca5fc926e/crates%2Fra_analysis%2Fsrc%2Froots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcd998433075aba66ef0677bcdd821ca5fc926e/crates%2Fra_analysis%2Fsrc%2Froots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Froots.rs?ref=bbcd998433075aba66ef0677bcdd821ca5fc926e", "patch": "@@ -2,7 +2,6 @@ use std::{\n     sync::Arc,\n     panic,\n };\n-use parking_lot::RwLock;\n \n use once_cell::sync::OnceCell;\n use rayon::prelude::*;\n@@ -30,7 +29,7 @@ pub(crate) trait SourceRoot {\n \n #[derive(Default, Debug, Clone)]\n pub(crate) struct WritableSourceRoot {\n-    db: Arc<RwLock<db::RootDatabase>>,\n+    db: db::RootDatabase,\n }\n \n impl WritableSourceRoot {\n@@ -39,7 +38,6 @@ impl WritableSourceRoot {\n         changes: &mut dyn Iterator<Item=(FileId, Option<String>)>,\n         file_resolver: Option<FileResolverImp>,\n     ) {\n-        let db = self.db.write();\n         let mut changed = FxHashSet::default();\n         let mut removed = FxHashSet::default();\n         for (file_id, text) in changes {\n@@ -48,13 +46,13 @@ impl WritableSourceRoot {\n                     removed.insert(file_id);\n                 }\n                 Some(text) => {\n-                    db.query(db::FileTextQuery)\n+                    self.db.query(db::FileTextQuery)\n                         .set(file_id, Arc::new(text));\n                     changed.insert(file_id);\n                 }\n             }\n         }\n-        let file_set = db.file_set(());\n+        let file_set = self.db.file_set(());\n         let mut files: FxHashSet<FileId> = file_set\n             .files\n             .clone();\n@@ -63,28 +61,28 @@ impl WritableSourceRoot {\n         }\n         files.extend(changed);\n         let resolver = file_resolver.unwrap_or_else(|| file_set.resolver.clone());\n-        db.query(db::FileSetQuery)\n+        self.db.query(db::FileSetQuery)\n             .set((), Arc::new(db::FileSet { files, resolver }));\n     }\n }\n \n impl SourceRoot for WritableSourceRoot {\n     fn module_tree(&self) -> Arc<ModuleTreeDescriptor> {\n-        self.db.read().module_tree(())\n+        self.db.module_tree(())\n     }\n     fn contains(&self, file_id: FileId) -> bool {\n-        let db = self.db.read();\n-        let files = &db.file_set(()).files;\n-        files.contains(&file_id)\n+        self.db.file_set(())\n+            .files\n+            .contains(&file_id)\n     }\n     fn lines(&self, file_id: FileId) -> Arc<LineIndex> {\n-        self.db.read().file_lines(file_id)\n+        self.db.file_lines(file_id)\n     }\n     fn syntax(&self, file_id: FileId) -> File {\n-        self.db.read().file_syntax(file_id)\n+        self.db.file_syntax(file_id)\n     }\n     fn symbols<'a>(&'a self, acc: &mut Vec<Arc<SymbolIndex>>) {\n-        let db = self.db.read();\n+        let db = &self.db;\n         let symbols =  db.file_set(());\n         let symbols = symbols\n             .files"}]}