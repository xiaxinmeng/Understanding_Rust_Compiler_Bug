{"sha": "1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "node_id": "C_kwDOAAsO6NoAKDFjMWQzNTcwZWU5ZjE2MDgyN2ZkYjk5MjA4YzVhZmI0Y2EwY2QwZjk", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-07T14:31:50Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-09T14:53:24Z"}, "message": "Move the untracked cstore and source_span into a struct", "tree": {"sha": "62304282adc4a8d012dd584d45904b68e65fdc15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62304282adc4a8d012dd584d45904b68e65fdc15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "html_url": "https://github.com/rust-lang/rust/commit/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cd36f2c8902544371cfb6547be46842a8e7e314", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cd36f2c8902544371cfb6547be46842a8e7e314", "html_url": "https://github.com/rust-lang/rust/commit/2cd36f2c8902544371cfb6547be46842a8e7e314"}], "stats": {"total": 169, "additions": 78, "deletions": 91}, "files": [{"sha": "aed08776f451553204bc2f9eedbc757353110f98", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -4342,6 +4342,7 @@ dependencies = [\n  \"rustc_feature\",\n  \"rustc_fs_util\",\n  \"rustc_hir\",\n+ \"rustc_index\",\n  \"rustc_lint_defs\",\n  \"rustc_macros\",\n  \"rustc_serialize\","}, {"sha": "4748aea54e34d4c6deca2142ca141b5c0bd5a01e", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -808,6 +808,7 @@ pub fn create_global_ctxt<'tcx>(\n         definitions,\n         global_ctxt: untracked_resolutions,\n         ast_lowering: untracked_resolver_for_lowering,\n+        untracked,\n     } = resolver_outputs;\n \n     let gcx = sess.time(\"setup_global_ctxt\", || {\n@@ -819,6 +820,7 @@ pub fn create_global_ctxt<'tcx>(\n                 hir_arena,\n                 definitions,\n                 untracked_resolutions,\n+                untracked,\n                 krate,\n                 dep_graph,\n                 queries.on_disk_cache.as_ref().map(OnDiskCache::as_dyn),"}, {"sha": "9d0ccfeb16898309ae374f4b6b392e032eb4d550", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -629,6 +629,9 @@ impl CrateStore for CStore {\n     fn as_any(&self) -> &dyn Any {\n         self\n     }\n+    fn untracked_as_any(&mut self) -> &mut dyn Any {\n+        self\n+    }\n \n     fn crate_name(&self, cnum: CrateNum) -> Symbol {\n         self.get_crate_data(cnum).root.name"}, {"sha": "0450abed51b0652338a9bd7799d0dd2e566c62db", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -14,7 +14,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::hir::nested_filter;\n use rustc_span::def_id::StableCrateId;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n #[inline]\n@@ -1162,7 +1162,7 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n                 .filter_map(|(def_id, info)| {\n                     let _ = info.as_owner()?;\n                     let def_path_hash = definitions.def_path_hash(def_id);\n-                    let span = resolutions.source_span.get(def_id).unwrap_or(&DUMMY_SP);\n+                    let span = tcx.source_span(def_id);\n                     debug_assert_eq!(span.parent(), None);\n                     Some((def_path_hash, span))\n                 })"}, {"sha": "3f6e29ad611c911daf807d72be51dc5eb6e00780", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -141,8 +141,6 @@ pub fn provide(providers: &mut Providers) {\n     providers.hir_attrs = |tcx, id| {\n         tcx.hir_crate(()).owners[id.def_id].as_owner().map_or(AttributeMap::EMPTY, |o| &o.attrs)\n     };\n-    providers.source_span =\n-        |tcx, def_id| tcx.resolutions(()).source_span.get(def_id).copied().unwrap_or(DUMMY_SP);\n     providers.def_span = |tcx, def_id| {\n         let def_id = def_id.expect_local();\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);"}, {"sha": "ab512804330b9f647ca9bc14edf2e0d698b53b4a", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -43,6 +43,8 @@ rustc_queries! {\n     /// This span is meant for dep-tracking rather than diagnostics. It should not be used outside\n     /// of rustc_middle::hir::source_map.\n     query source_span(key: LocalDefId) -> Span {\n+        // Accesses untracked data\n+        eval_always\n         desc { \"getting the source span\" }\n     }\n "}, {"sha": "47e6f9eaf546c07eb5cd888504614dee8bfc30ca", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 27, "deletions": 42, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -59,7 +59,7 @@ use rustc_query_system::dep_graph::DepNodeIndex;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{CrateType, OutputFilenames};\n-use rustc_session::cstore::CrateStoreDyn;\n+use rustc_session::cstore::{CrateStoreDyn, Untracked};\n use rustc_session::lint::Lint;\n use rustc_session::Limit;\n use rustc_session::Session;\n@@ -187,15 +187,13 @@ impl<'tcx> CtxtInterners<'tcx> {\n         kind: TyKind<'tcx>,\n         sess: &Session,\n         definitions: &rustc_hir::definitions::Definitions,\n-        cstore: &CrateStoreDyn,\n-        source_span: &IndexVec<LocalDefId, Span>,\n+        untracked: &Untracked,\n     ) -> Ty<'tcx> {\n         Ty(Interned::new_unchecked(\n             self.type_\n                 .intern(kind, |kind| {\n                     let flags = super::flags::FlagComputation::for_kind(&kind);\n-                    let stable_hash =\n-                        self.stable_hash(&flags, sess, definitions, cstore, source_span, &kind);\n+                    let stable_hash = self.stable_hash(&flags, sess, definitions, untracked, &kind);\n \n                     InternedInSet(self.arena.alloc(WithCachedTypeInfo {\n                         internee: kind,\n@@ -213,8 +211,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n         flags: &ty::flags::FlagComputation,\n         sess: &'a Session,\n         definitions: &'a rustc_hir::definitions::Definitions,\n-        cstore: &'a CrateStoreDyn,\n-        source_span: &'a IndexVec<LocalDefId, Span>,\n+        untracked: &'a Untracked,\n         val: &T,\n     ) -> Fingerprint {\n         // It's impossible to hash inference variables (and will ICE), so we don't need to try to cache them.\n@@ -223,7 +220,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n             Fingerprint::ZERO\n         } else {\n             let mut hasher = StableHasher::new();\n-            let mut hcx = StableHashingContext::new(sess, definitions, cstore, source_span);\n+            let mut hcx = StableHashingContext::new(sess, definitions, untracked);\n             val.hash_stable(&mut hcx, &mut hasher);\n             hasher.finish()\n         }\n@@ -235,16 +232,14 @@ impl<'tcx> CtxtInterners<'tcx> {\n         kind: Binder<'tcx, PredicateKind<'tcx>>,\n         sess: &Session,\n         definitions: &rustc_hir::definitions::Definitions,\n-        cstore: &CrateStoreDyn,\n-        source_span: &IndexVec<LocalDefId, Span>,\n+        untracked: &Untracked,\n     ) -> Predicate<'tcx> {\n         Predicate(Interned::new_unchecked(\n             self.predicate\n                 .intern(kind, |kind| {\n                     let flags = super::flags::FlagComputation::for_predicate(kind);\n \n-                    let stable_hash =\n-                        self.stable_hash(&flags, sess, definitions, cstore, source_span, &kind);\n+                    let stable_hash = self.stable_hash(&flags, sess, definitions, untracked, &kind);\n \n                     InternedInSet(self.arena.alloc(WithCachedTypeInfo {\n                         internee: kind,\n@@ -963,10 +958,9 @@ impl<'tcx> CommonTypes<'tcx> {\n         interners: &CtxtInterners<'tcx>,\n         sess: &Session,\n         definitions: &rustc_hir::definitions::Definitions,\n-        cstore: &CrateStoreDyn,\n-        source_span: &IndexVec<LocalDefId, Span>,\n+        untracked: &Untracked,\n     ) -> CommonTypes<'tcx> {\n-        let mk = |ty| interners.intern_ty(ty, sess, definitions, cstore, source_span);\n+        let mk = |ty| interners.intern_ty(ty, sess, definitions, untracked);\n \n         CommonTypes {\n             unit: mk(Tuple(List::empty())),\n@@ -1114,6 +1108,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     definitions: RwLock<Definitions>,\n \n+    untracked: Untracked,\n     /// Output of the resolver.\n     pub(crate) untracked_resolutions: ty::ResolverGlobalCtxt,\n     /// The entire crate as AST. This field serves as the input for the hir_crate query,\n@@ -1280,6 +1275,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         hir_arena: &'tcx WorkerLocal<hir::Arena<'tcx>>,\n         definitions: Definitions,\n         untracked_resolutions: ty::ResolverGlobalCtxt,\n+        untracked: Untracked,\n         krate: Lrc<ast::Crate>,\n         dep_graph: DepGraph,\n         on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,\n@@ -1292,14 +1288,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             s.emit_fatal(err);\n         });\n         let interners = CtxtInterners::new(arena);\n-        let common_types = CommonTypes::new(\n-            &interners,\n-            s,\n-            &definitions,\n-            &*untracked_resolutions.cstore,\n-            // This is only used to create a stable hashing context.\n-            &untracked_resolutions.source_span,\n-        );\n+        let common_types = CommonTypes::new(&interners, s, &definitions, &untracked);\n         let common_lifetimes = CommonLifetimes::new(&interners);\n         let common_consts = CommonConsts::new(&interners, &common_types);\n \n@@ -1315,6 +1304,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             types: common_types,\n             lifetimes: common_lifetimes,\n             consts: common_consts,\n+            untracked,\n             untracked_resolutions,\n             untracked_crate: Steal::new(krate),\n             on_disk_cache,\n@@ -1428,7 +1418,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(id) = id.as_local() {\n             self.definitions_untracked().def_key(id)\n         } else {\n-            self.untracked_resolutions.cstore.def_key(id)\n+            self.untracked.cstore.def_key(id)\n         }\n     }\n \n@@ -1442,7 +1432,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(id) = id.as_local() {\n             self.definitions_untracked().def_path(id)\n         } else {\n-            self.untracked_resolutions.cstore.def_path(id)\n+            self.untracked.cstore.def_path(id)\n         }\n     }\n \n@@ -1452,7 +1442,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(def_id) = def_id.as_local() {\n             self.definitions_untracked().def_path_hash(def_id)\n         } else {\n-            self.untracked_resolutions.cstore.def_path_hash(def_id)\n+            self.untracked.cstore.def_path_hash(def_id)\n         }\n     }\n \n@@ -1461,7 +1451,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if crate_num == LOCAL_CRATE {\n             self.sess.local_stable_crate_id()\n         } else {\n-            self.untracked_resolutions.cstore.stable_crate_id(crate_num)\n+            self.untracked.cstore.stable_crate_id(crate_num)\n         }\n     }\n \n@@ -1472,7 +1462,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if stable_crate_id == self.sess.local_stable_crate_id() {\n             LOCAL_CRATE\n         } else {\n-            self.untracked_resolutions.cstore.stable_crate_id_to_crate_num(stable_crate_id)\n+            self.untracked.cstore.stable_crate_id_to_crate_num(stable_crate_id)\n         }\n     }\n \n@@ -1491,7 +1481,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         } else {\n             // If this is a DefPathHash from an upstream crate, let the CrateStore map\n             // it to a DefId.\n-            let cstore = &*self.untracked_resolutions.cstore;\n+            let cstore = &*self.untracked.cstore;\n             let cnum = cstore.stable_crate_id_to_crate_num(stable_crate_id);\n             cstore.def_path_hash_to_def_id(cnum, hash)\n         }\n@@ -1505,7 +1495,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let (crate_name, stable_crate_id) = if def_id.is_local() {\n             (self.crate_name, self.sess.local_stable_crate_id())\n         } else {\n-            let cstore = &*self.untracked_resolutions.cstore;\n+            let cstore = &*self.untracked.cstore;\n             (cstore.crate_name(def_id.krate), cstore.stable_crate_id(def_id.krate))\n         };\n \n@@ -1604,7 +1594,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Note that this is *untracked* and should only be used within the query\n     /// system if the result is otherwise tracked through queries\n     pub fn cstore_untracked(self) -> &'tcx CrateStoreDyn {\n-        &*self.untracked_resolutions.cstore\n+        &*self.untracked.cstore\n     }\n \n     /// Note that this is *untracked* and should only be used within the query\n@@ -1618,7 +1608,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// system if the result is otherwise tracked through queries\n     #[inline]\n     pub fn source_span_untracked(self, def_id: LocalDefId) -> Span {\n-        self.untracked_resolutions.source_span.get(def_id).copied().unwrap_or(DUMMY_SP)\n+        self.untracked.source_span.get(def_id).copied().unwrap_or(DUMMY_SP)\n     }\n \n     #[inline(always)]\n@@ -1627,12 +1617,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         f: impl FnOnce(StableHashingContext<'_>) -> R,\n     ) -> R {\n         let definitions = self.definitions_untracked();\n-        let hcx = StableHashingContext::new(\n-            self.sess,\n-            &*definitions,\n-            &*self.untracked_resolutions.cstore,\n-            &self.untracked_resolutions.source_span,\n-        );\n+        let hcx = StableHashingContext::new(self.sess, &*definitions, &self.untracked);\n         f(hcx)\n     }\n \n@@ -2428,9 +2413,8 @@ impl<'tcx> TyCtxt<'tcx> {\n             st,\n             self.sess,\n             &self.definitions.read(),\n-            &*self.untracked_resolutions.cstore,\n             // This is only used to create a stable hashing context.\n-            &self.untracked_resolutions.source_span,\n+            &self.untracked,\n         )\n     }\n \n@@ -2440,9 +2424,8 @@ impl<'tcx> TyCtxt<'tcx> {\n             binder,\n             self.sess,\n             &self.definitions.read(),\n-            &*self.untracked_resolutions.cstore,\n             // This is only used to create a stable hashing context.\n-            &self.untracked_resolutions.source_span,\n+            &self.untracked,\n         )\n     }\n \n@@ -3124,4 +3107,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         // We want to check if the panic handler was defined in this crate\n         tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())\n     };\n+    providers.source_span =\n+        |tcx, def_id| tcx.untracked.source_span.get(def_id).copied().unwrap_or(DUMMY_SP);\n }"}, {"sha": "44740b56a8635c69b6a13071c65ee2980edf2f08", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -46,7 +46,7 @@ use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::{Decodable, Encodable};\n-use rustc_session::cstore::CrateStoreDyn;\n+use rustc_session::cstore::Untracked;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{ExpnId, Span};\n@@ -153,18 +153,16 @@ pub struct ResolverOutputs {\n     pub definitions: Definitions,\n     pub global_ctxt: ResolverGlobalCtxt,\n     pub ast_lowering: ResolverAstLowering,\n+    pub untracked: Untracked,\n }\n \n #[derive(Debug)]\n pub struct ResolverGlobalCtxt {\n-    pub cstore: Box<CrateStoreDyn>,\n     pub visibilities: FxHashMap<LocalDefId, Visibility>,\n     /// This field is used to decide whether we should make `PRIVATE_IN_PUBLIC` a hard error.\n     pub has_pub_restricted: bool,\n     /// Item with a given `LocalDefId` was defined during macro expansion with ID `ExpnId`.\n     pub expn_that_defined: FxHashMap<LocalDefId, ExpnId>,\n-    /// Reference span for definitions.\n-    pub source_span: IndexVec<LocalDefId, Span>,\n     pub effective_visibilities: EffectiveVisibilities,\n     pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     pub maybe_unused_trait_imports: FxIndexSet<LocalDefId>,"}, {"sha": "1f55c254acc936587b2ac25823385e6dfba70899", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -7,8 +7,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::definitions::{DefPathHash, Definitions};\n-use rustc_index::vec::IndexVec;\n-use rustc_session::cstore::CrateStore;\n+use rustc_session::cstore::Untracked;\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::Symbol;\n@@ -21,8 +20,7 @@ use rustc_span::{BytePos, CachingSourceMapView, SourceFile, Span, SpanData, DUMM\n #[derive(Clone)]\n pub struct StableHashingContext<'a> {\n     definitions: &'a Definitions,\n-    cstore: &'a dyn CrateStore,\n-    source_span: &'a IndexVec<LocalDefId, Span>,\n+    untracked: &'a Untracked,\n     // The value of `-Z incremental-ignore-spans`.\n     // This field should only be used by `unstable_opts_incremental_ignore_span`\n     incremental_ignore_spans: bool,\n@@ -49,19 +47,13 @@ pub(super) enum BodyResolver<'tcx> {\n \n impl<'a> StableHashingContext<'a> {\n     #[inline]\n-    pub fn new(\n-        sess: &'a Session,\n-        definitions: &'a Definitions,\n-        cstore: &'a dyn CrateStore,\n-        source_span: &'a IndexVec<LocalDefId, Span>,\n-    ) -> Self {\n+    pub fn new(sess: &'a Session, definitions: &'a Definitions, untracked: &'a Untracked) -> Self {\n         let hash_spans_initial = !sess.opts.unstable_opts.incremental_ignore_spans;\n \n         StableHashingContext {\n             body_resolver: BodyResolver::Forbidden,\n             definitions,\n-            cstore,\n-            source_span,\n+            untracked,\n             incremental_ignore_spans: sess.opts.unstable_opts.incremental_ignore_spans,\n             caching_source_map: None,\n             raw_source_map: sess.source_map(),\n@@ -100,7 +92,7 @@ impl<'a> StableHashingContext<'a> {\n         if let Some(def_id) = def_id.as_local() {\n             self.local_def_path_hash(def_id)\n         } else {\n-            self.cstore.def_path_hash(def_id)\n+            self.untracked.cstore.def_path_hash(def_id)\n         }\n     }\n \n@@ -156,7 +148,7 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n \n     #[inline]\n     fn def_span(&self, def_id: LocalDefId) -> Span {\n-        *self.source_span.get(def_id).unwrap_or(&DUMMY_SP)\n+        *self.untracked.source_span.get(def_id).unwrap_or(&DUMMY_SP)\n     }\n \n     #[inline]"}, {"sha": "f0c82ca7497aaeaefecdceafc05d5718ec7e23ac", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -153,7 +153,7 @@ impl<'a> Resolver<'a> {\n             if !candidates.is_empty() {\n                 show_candidates(\n                     &self.session,\n-                    &self.source_span,\n+                    &self.untracked.source_span,\n                     &mut err,\n                     span,\n                     &candidates,\n@@ -682,7 +682,7 @@ impl<'a> Resolver<'a> {\n                     }\n                     show_candidates(\n                         &self.session,\n-                        &self.source_span,\n+                        &self.untracked.source_span,\n                         &mut err,\n                         Some(span),\n                         &import_suggestions,\n@@ -1335,7 +1335,7 @@ impl<'a> Resolver<'a> {\n             self.lookup_import_candidates(ident, Namespace::MacroNS, parent_scope, is_expected);\n         show_candidates(\n             &self.session,\n-            &self.source_span,\n+            &self.untracked.source_span,\n             err,\n             None,\n             &import_suggestions,"}, {"sha": "f9b7f2c1cbcba2fb647d509fce456b2cf1428606", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -107,7 +107,10 @@ impl<'r, 'a> EffectiveVisibilitiesVisitor<'r, 'a> {\n                 r.effective_visibilities.update_eff_vis(\n                     r.local_def_id(node_id),\n                     eff_vis,\n-                    ResolverTree(&r.definitions, &r.cstore),\n+                    ResolverTree(\n+                        &r.definitions,\n+                        &r.untracked.cstore.as_any().downcast_ref().unwrap(),\n+                    ),\n                 )\n             }\n         }"}, {"sha": "4d896b055268e975ab284861e93a8c85a4e70cda", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -541,7 +541,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             if let Some(candidate) = &err.candidate {\n                 import_candidates(\n                     self.r.session,\n-                    &self.r.source_span,\n+                    &self.r.untracked.source_span,\n                     &mut diag,\n                     Some(err.span),\n                     &candidate,"}, {"sha": "6da3473e42502660c1ddab0b53e06fbcec2ba2be", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -46,7 +46,7 @@ use rustc_middle::span_bug;\n use rustc_middle::ty::{self, DefIdTree, MainDefinition, RegisteredTools};\n use rustc_middle::ty::{ResolverGlobalCtxt, ResolverOutputs};\n use rustc_query_system::ich::StableHashingContext;\n-use rustc_session::cstore::{CrateStore, MetadataLoaderDyn};\n+use rustc_session::cstore::{CrateStore, MetadataLoaderDyn, Untracked};\n use rustc_session::lint::LintBuffer;\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnId, LocalExpnId, MacroKind, SyntaxContext, Transparency};\n@@ -869,8 +869,6 @@ pub struct Resolver<'a> {\n     definitions: Definitions,\n     /// Item with a given `LocalDefId` was defined during macro expansion with ID `ExpnId`.\n     expn_that_defined: FxHashMap<LocalDefId, ExpnId>,\n-    /// Reference span for definitions.\n-    source_span: IndexVec<LocalDefId, Span>,\n \n     graph_root: Module<'a>,\n \n@@ -956,7 +954,7 @@ pub struct Resolver<'a> {\n \n     local_crate_name: Symbol,\n     metadata_loader: Box<MetadataLoaderDyn>,\n-    cstore: CStore,\n+    untracked: Untracked,\n     used_extern_options: FxHashSet<Symbol>,\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Symbol, BuiltinMacroState>,\n@@ -1132,7 +1130,7 @@ impl DefIdTree for ResolverTree<'_> {\n impl<'a, 'b> DefIdTree for &'a Resolver<'b> {\n     #[inline]\n     fn opt_parent(self, id: DefId) -> Option<DefId> {\n-        ResolverTree(&self.definitions, &self.cstore).opt_parent(id)\n+        ResolverTree(&self.definitions, self.cstore()).opt_parent(id)\n     }\n }\n \n@@ -1171,7 +1169,7 @@ impl Resolver<'_> {\n \n         // A relative span's parent must be an absolute span.\n         debug_assert_eq!(span.data_untracked().parent, None);\n-        let _id = self.source_span.push(span);\n+        let _id = self.untracked.source_span.push(span);\n         debug_assert_eq!(_id, def_id);\n \n         // Some things for which we allocate `LocalDefId`s don't correspond to\n@@ -1263,7 +1261,6 @@ impl<'a> Resolver<'a> {\n \n             definitions,\n             expn_that_defined: Default::default(),\n-            source_span,\n \n             // The outermost module has def ID 0; this is not reflected in the\n             // AST.\n@@ -1317,7 +1314,7 @@ impl<'a> Resolver<'a> {\n             metadata_loader,\n             local_crate_name: crate_name,\n             used_extern_options: Default::default(),\n-            cstore: CStore::new(session),\n+            untracked: Untracked { cstore: Box::new(CStore::new(session)), source_span },\n             macro_names: FxHashSet::default(),\n             builtin_macros: Default::default(),\n             builtin_macro_kinds: Default::default(),\n@@ -1409,8 +1406,6 @@ impl<'a> Resolver<'a> {\n     pub fn into_outputs(self) -> ResolverOutputs {\n         let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();\n         let definitions = self.definitions;\n-        let cstore = Box::new(self.cstore);\n-        let source_span = self.source_span;\n         let expn_that_defined = self.expn_that_defined;\n         let visibilities = self.visibilities;\n         let has_pub_restricted = self.has_pub_restricted;\n@@ -1422,9 +1417,8 @@ impl<'a> Resolver<'a> {\n         let main_def = self.main_def;\n         let confused_type_with_std_module = self.confused_type_with_std_module;\n         let effective_visibilities = self.effective_visibilities;\n+        let untracked = self.untracked;\n         let global_ctxt = ResolverGlobalCtxt {\n-            cstore,\n-            source_span,\n             expn_that_defined,\n             visibilities,\n             has_pub_restricted,\n@@ -1459,16 +1453,15 @@ impl<'a> Resolver<'a> {\n             builtin_macro_kinds: self.builtin_macro_kinds,\n             lifetime_elision_allowed: self.lifetime_elision_allowed,\n         };\n-        ResolverOutputs { definitions, global_ctxt, ast_lowering }\n+        ResolverOutputs { definitions, global_ctxt, ast_lowering, untracked }\n     }\n \n     pub fn clone_outputs(&self) -> ResolverOutputs {\n         let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();\n         let definitions = self.definitions.clone();\n         let cstore = Box::new(self.cstore().clone());\n+        let untracked = Untracked { cstore, source_span: self.untracked.source_span.clone() };\n         let global_ctxt = ResolverGlobalCtxt {\n-            cstore,\n-            source_span: self.source_span.clone(),\n             expn_that_defined: self.expn_that_defined.clone(),\n             visibilities: self.visibilities.clone(),\n             has_pub_restricted: self.has_pub_restricted,\n@@ -1503,26 +1496,26 @@ impl<'a> Resolver<'a> {\n             builtin_macro_kinds: self.builtin_macro_kinds.clone(),\n             lifetime_elision_allowed: self.lifetime_elision_allowed.clone(),\n         };\n-        ResolverOutputs { definitions, global_ctxt, ast_lowering }\n+        ResolverOutputs { definitions, global_ctxt, ast_lowering, untracked }\n     }\n \n     fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {\n-        StableHashingContext::new(self.session, &self.definitions, &self.cstore, &self.source_span)\n+        StableHashingContext::new(self.session, &self.definitions, &self.untracked)\n     }\n \n     pub fn crate_loader(&mut self) -> CrateLoader<'_> {\n         CrateLoader::new(\n             &self.session,\n             &*self.metadata_loader,\n             self.local_crate_name,\n-            &mut self.cstore,\n+            &mut *self.untracked.cstore.untracked_as_any().downcast_mut().unwrap(),\n             &self.definitions,\n             &mut self.used_extern_options,\n         )\n     }\n \n     pub fn cstore(&self) -> &CStore {\n-        &self.cstore\n+        self.untracked.cstore.as_any().downcast_ref().unwrap()\n     }\n \n     fn dummy_ext(&self, macro_kind: MacroKind) -> Lrc<SyntaxExtension> {\n@@ -1958,7 +1951,7 @@ impl<'a> Resolver<'a> {\n     /// Retrieves the span of the given `DefId` if `DefId` is in the local crate.\n     #[inline]\n     pub fn opt_span(&self, def_id: DefId) -> Option<Span> {\n-        def_id.as_local().map(|def_id| self.source_span[def_id])\n+        def_id.as_local().map(|def_id| self.untracked.source_span[def_id])\n     }\n \n     /// Retrieves the name of the given `DefId`."}, {"sha": "b5b1602c5e0d38ad3971cb62c3c19524412063a9", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -455,7 +455,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n     }\n \n     fn get_proc_macro_quoted_span(&self, krate: CrateNum, id: usize) -> Span {\n-        self.cstore.get_proc_macro_quoted_span_untracked(krate, id, self.session)\n+        self.cstore().get_proc_macro_quoted_span_untracked(krate, id, self.session)\n     }\n \n     fn declare_proc_macro(&mut self, id: NodeId) {"}, {"sha": "d8db86c5f6216e1643d7b1e33d881135cf096fb1", "filename": "compiler/rustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2FCargo.toml?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -13,6 +13,7 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_index = { path = \"../rustc_index\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_fs_util = { path = \"../rustc_fs_util\" }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "c54565b0f29876c612ab30cd476f5965fd1fee80", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=1c1d3570ee9f160827fdb99208c5afb4ca0cd0f9", "patch": "@@ -7,8 +7,9 @@ use crate::utils::NativeLibKind;\n use crate::Session;\n use rustc_ast as ast;\n use rustc_data_structures::sync::{self, MetadataRef};\n-use rustc_hir::def_id::{CrateNum, DefId, StableCrateId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n+use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::{ExpnHash, ExpnId};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -217,6 +218,7 @@ pub type MetadataLoaderDyn = dyn MetadataLoader + Sync;\n /// during resolve)\n pub trait CrateStore: std::fmt::Debug {\n     fn as_any(&self) -> &dyn Any;\n+    fn untracked_as_any(&mut self) -> &mut dyn Any;\n \n     // Foreign definitions.\n     // This information is safe to access, since it's hashed as part of the DefPathHash, which incr.\n@@ -249,3 +251,10 @@ pub trait CrateStore: std::fmt::Debug {\n }\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync;\n+\n+#[derive(Debug)]\n+pub struct Untracked {\n+    pub cstore: Box<CrateStoreDyn>,\n+    /// Reference span for definitions.\n+    pub source_span: IndexVec<LocalDefId, Span>,\n+}"}]}