{"sha": "c43bc135628bc0d472e1a1259d56b72b7de0a274", "node_id": "C_kwDOAAsO6NoAKGM0M2JjMTM1NjI4YmMwZDQ3MmUxYTEyNTlkNTZiNzJiN2RlMGEyNzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T01:06:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T01:06:52Z"}, "message": "Auto merge of #105918 - matthiaskrgr:rollup-mmazd62, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #105801 (Realistic `Path::as_mut_os_str` doctest)\n - #105860 (Add long error docs for `E0460` and `E0457`)\n - #105895 (Test that we don't add a new kind of breaking change with TAITs)\n - #105902 (docs: improve pin docs)\n - #105910 (Update books)\n - #105913 (rustdoc: remove width-limiter from source pages, stop overriding CSS)\n - #105915 (Revert \"Replace usage of `ResumeTy` in async lowering with `Context`\")\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fd27e65524934df52357b03a38efd3ea05f89c46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd27e65524934df52357b03a38efd3ea05f89c46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c43bc135628bc0d472e1a1259d56b72b7de0a274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c43bc135628bc0d472e1a1259d56b72b7de0a274", "html_url": "https://github.com/rust-lang/rust/commit/c43bc135628bc0d472e1a1259d56b72b7de0a274", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c43bc135628bc0d472e1a1259d56b72b7de0a274/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "696563efc5c3c0d87a601dff22966d2c5eb20a5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/696563efc5c3c0d87a601dff22966d2c5eb20a5e", "html_url": "https://github.com/rust-lang/rust/commit/696563efc5c3c0d87a601dff22966d2c5eb20a5e"}, {"sha": "575b2a22327e5e10fb33d58c4e5407a4e45fe1ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/575b2a22327e5e10fb33d58c4e5407a4e45fe1ef", "html_url": "https://github.com/rust-lang/rust/commit/575b2a22327e5e10fb33d58c4e5407a4e45fe1ef"}], "stats": {"total": 335, "additions": 250, "deletions": 85}, "files": [{"sha": "a3f5c18f2e75cfe836ecd66639d9114fd3ccbd1a", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 21, "deletions": 36, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -16,7 +16,7 @@ use rustc_hir::def::Res;\n use rustc_hir::definitions::DefPathData;\n use rustc_session::errors::report_lit_error;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n-use rustc_span::symbol::{kw, sym, Ident};\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::DUMMY_SP;\n use thin_vec::thin_vec;\n \n@@ -596,38 +596,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ) -> hir::ExprKind<'hir> {\n         let output = ret_ty.unwrap_or_else(|| hir::FnRetTy::DefaultReturn(self.lower_span(span)));\n \n-        // Resume argument type, which should be `&mut Context<'_>`.\n-        // NOTE: Using the `'static` lifetime here is technically cheating.\n-        // The `Future::poll` argument really is `&'a mut Context<'b>`, but we cannot\n-        // express the fact that we are not storing it across yield-points yet,\n-        // and we would thus run into lifetime errors.\n-        // See <https://github.com/rust-lang/rust/issues/68923>.\n-        // Our lowering makes sure we are not mis-using the `_task_context` input type\n-        // in the sense that we are indeed not using it across yield points. We\n-        // get a fresh `&mut Context` for each resume / call of `Future::poll`.\n-        // This \"cheating\" was previously done with a `ResumeTy` that contained a raw\n-        // pointer, and a `get_context` accessor that pulled the `Context` lifetimes\n-        // out of thin air.\n-        let context_lifetime_ident = Ident::with_dummy_span(kw::StaticLifetime);\n-        let context_lifetime = self.arena.alloc(hir::Lifetime {\n-            hir_id: self.next_id(),\n-            ident: context_lifetime_ident,\n-            res: hir::LifetimeName::Static,\n-        });\n-        let context_path =\n-            hir::QPath::LangItem(hir::LangItem::Context, self.lower_span(span), None);\n-        let context_ty = hir::MutTy {\n-            ty: self.arena.alloc(hir::Ty {\n-                hir_id: self.next_id(),\n-                kind: hir::TyKind::Path(context_path),\n-                span: self.lower_span(span),\n-            }),\n-            mutbl: hir::Mutability::Mut,\n-        };\n+        // Resume argument type: `ResumeTy`\n+        let unstable_span =\n+            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n+        let resume_ty = hir::QPath::LangItem(hir::LangItem::ResumeTy, unstable_span, None);\n         let input_ty = hir::Ty {\n             hir_id: self.next_id(),\n-            kind: hir::TyKind::Rptr(context_lifetime, context_ty),\n-            span: self.lower_span(span),\n+            kind: hir::TyKind::Path(resume_ty),\n+            span: unstable_span,\n         };\n \n         // The closure/generator `FnDecl` takes a single (resume) argument of type `input_ty`.\n@@ -686,9 +662,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             .map_or(false, |attrs| attrs.into_iter().any(|attr| attr.has_name(sym::track_caller)));\n \n         let hir_id = self.lower_node_id(closure_node_id);\n-        let unstable_span =\n-            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n         if track_caller {\n+            let unstable_span = self.mark_span_with_reason(\n+                DesugaringKind::Async,\n+                span,\n+                self.allow_gen_future.clone(),\n+            );\n             self.lower_attrs(\n                 hir_id,\n                 &[Attribute {\n@@ -731,7 +710,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ///     mut __awaitee => loop {\n     ///         match unsafe { ::std::future::Future::poll(\n     ///             <::std::pin::Pin>::new_unchecked(&mut __awaitee),\n-    ///             task_context,\n+    ///             ::std::future::get_context(task_context),\n     ///         ) } {\n     ///             ::std::task::Poll::Ready(result) => break result,\n     ///             ::std::task::Poll::Pending => {}\n@@ -772,7 +751,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // unsafe {\n         //     ::std::future::Future::poll(\n         //         ::std::pin::Pin::new_unchecked(&mut __awaitee),\n-        //         task_context,\n+        //         ::std::future::get_context(task_context),\n         //     )\n         // }\n         let poll_expr = {\n@@ -790,10 +769,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 arena_vec![self; ref_mut_awaitee],\n                 Some(expr_hir_id),\n             );\n+            let get_context = self.expr_call_lang_item_fn_mut(\n+                gen_future_span,\n+                hir::LangItem::GetContext,\n+                arena_vec![self; task_context],\n+                Some(expr_hir_id),\n+            );\n             let call = self.expr_call_lang_item_fn(\n                 span,\n                 hir::LangItem::FuturePoll,\n-                arena_vec![self; new_unchecked, task_context],\n+                arena_vec![self; new_unchecked, get_context],\n                 Some(expr_hir_id),\n             );\n             self.arena.alloc(self.expr_unsafe(call))"}, {"sha": "883a4bbe8e8237cad9d960fddc7f4ba57001c577", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -239,8 +239,10 @@ E0452: include_str!(\"./error_codes/E0452.md\"),\n E0453: include_str!(\"./error_codes/E0453.md\"),\n E0454: include_str!(\"./error_codes/E0454.md\"),\n E0455: include_str!(\"./error_codes/E0455.md\"),\n+E0457: include_str!(\"./error_codes/E0457.md\"),\n E0458: include_str!(\"./error_codes/E0458.md\"),\n E0459: include_str!(\"./error_codes/E0459.md\"),\n+E0460: include_str!(\"./error_codes/E0460.md\"),\n E0463: include_str!(\"./error_codes/E0463.md\"),\n E0464: include_str!(\"./error_codes/E0464.md\"),\n E0466: include_str!(\"./error_codes/E0466.md\"),\n@@ -592,8 +594,6 @@ E0791: include_str!(\"./error_codes/E0791.md\"),\n //  E0421, // merged into 531\n //  E0427, // merged into 530\n //  E0456, // plugin `..` is not available for triple `..`\n-    E0457, // plugin `..` only found in rlib format, but must be available...\n-    E0460, // found possibly newer version of crate `..`\n     E0461, // couldn't find crate `..` with expected target triple ..\n     E0462, // found staticlib `..` instead of rlib or dylib\n     E0465, // multiple .. candidates for `..` found"}, {"sha": "53d384d36c4267c7b42db39ee6a268e292deefc4", "filename": "compiler/rustc_error_codes/src/error_codes/E0457.md", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0457.md", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0457.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0457.md?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -0,0 +1,36 @@\n+Plugin `..` only found in rlib format, but must be available in dylib format.\n+\n+Erroronous code example:\n+\n+`rlib-plugin.rs`\n+```ignore (needs-linkage-with-other-tests)\n+#![crate_type = \"rlib\"]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_middle;\n+extern crate rustc_driver;\n+\n+use rustc_driver::plugin::Registry;\n+\n+#[no_mangle]\n+fn __rustc_plugin_registrar(_: &mut Registry) {}\n+```\n+\n+`main.rs`\n+```ignore (needs-linkage-with-other-tests)\n+#![feature(plugin)]\n+#![plugin(rlib_plugin)] // error: plugin `rlib_plugin` only found in rlib\n+                        //        format, but must be available in dylib\n+\n+fn main() {}\n+```\n+\n+The compiler exposes a plugin interface to allow altering the compile process\n+(adding lints, etc). Plugins must be defined in their own crates (similar to\n+[proc-macro](../reference/procedural-macros.html) isolation) and then compiled\n+and linked to another crate. Plugin crates *must* be compiled to the\n+dynamically-linked dylib format, and not the statically-linked rlib format.\n+Learn more about different output types in\n+[this section](../reference/linkage.html) of the Rust reference.\n+\n+This error is easily fixed by recompiling the plugin crate in the dylib format."}, {"sha": "001678a9bce0625f359d3553c316bcf4fbdd67ce", "filename": "compiler/rustc_error_codes/src/error_codes/E0460.md", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0460.md", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0460.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0460.md?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -0,0 +1,71 @@\n+Found possibly newer version of crate `..` which `..` depends on.\n+\n+Consider these erroneous files:\n+\n+`a1.rs`\n+```ignore (needs-linkage-with-other-tests)\n+#![crate_name = \"a\"]\n+\n+pub fn foo<T>() {}\n+```\n+\n+`a2.rs`\n+```ignore (needs-linkage-with-other-tests)\n+#![crate_name = \"a\"]\n+\n+pub fn foo<T>() {\n+    println!(\"foo<T>()\");\n+}\n+```\n+\n+`b.rs`\n+```ignore (needs-linkage-with-other-tests)\n+#![crate_name = \"b\"]\n+\n+extern crate a; // linked with `a1.rs`\n+\n+pub fn foo() {\n+    a::foo::<isize>();\n+}\n+```\n+\n+`main.rs`\n+```ignore (needs-linkage-with-other-tests)\n+extern crate a; // linked with `a2.rs`\n+extern crate b; // error: found possibly newer version of crate `a` which `b`\n+                //        depends on\n+\n+fn main() {}\n+```\n+\n+The dependency graph of this program can be represented as follows:\n+```text\n+    crate `main`\n+         |\n+         +-------------+\n+         |             |\n+         |             v\n+depends: |         crate `b`\n+ `a` v1  |             |\n+         |             | depends:\n+         |             |  `a` v2\n+         v             |\n+      crate `a` <------+\n+```\n+\n+Crate `main` depends on crate `a` (version 1) and crate `b` which in turn\n+depends on crate `a` (version 2); this discrepancy in versions cannot be\n+reconciled. This difference in versions typically occurs when one crate is\n+compiled and linked, then updated and linked to another crate. The crate\n+\"version\" is a SVH (Strict Version Hash) of the crate in an\n+implementation-specific way. Note that this error can *only* occur when\n+directly compiling and linking with `rustc`; [Cargo] automatically resolves\n+dependencies, without using the compiler's own dependency management that\n+causes this issue.\n+\n+This error can be fixed by:\n+ * Using [Cargo], the Rust package manager, automatically fixing this issue.\n+ * Recompiling crate `a` so that both crate `b` and `main` have a uniform\n+   version to depend on.\n+\n+[Cargo]: ../cargo/index.html"}, {"sha": "038509031b180a3cd42417a23846ff36c00ea7c0", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -286,9 +286,10 @@ language_item_table! {\n \n     // FIXME(swatinem): the following lang items are used for async lowering and\n     // should become obsolete eventually.\n+    ResumeTy,                sym::ResumeTy,            resume_ty,                  Target::Struct,         GenericRequirement::None;\n     IdentityFuture,          sym::identity_future,     identity_future_fn,         Target::Fn,             GenericRequirement::None;\n+    GetContext,              sym::get_context,         get_context_fn,             Target::Fn,             GenericRequirement::None;\n \n-    Context,                 sym::Context,             context,                    Target::Struct,         GenericRequirement::None;\n     FuturePoll,              sym::poll,                future_poll_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n \n     FromFrom,                sym::from,                from_fn,                    Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;"}, {"sha": "9de6d9dc483c5720778dc5a1fbefb333d21a0632", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -164,7 +164,6 @@ symbols! {\n         Capture,\n         Center,\n         Clone,\n-        Context,\n         Continue,\n         Copy,\n         Count,\n@@ -264,6 +263,7 @@ symbols! {\n         Relaxed,\n         Release,\n         Result,\n+        ResumeTy,\n         Return,\n         Right,\n         Rust,\n@@ -753,6 +753,7 @@ symbols! {\n         generic_associated_types_extended,\n         generic_const_exprs,\n         generic_param_attrs,\n+        get_context,\n         global_allocator,\n         global_asm,\n         globs,"}, {"sha": "f2b961d62e00c8149750785c3792cdf94924ce1d", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -44,7 +44,7 @@ pub use poll_fn::{poll_fn, PollFn};\n ///    non-Send/Sync as well, and we don't want that.\n ///\n /// It also simplifies the HIR lowering of `.await`.\n-// FIXME(swatinem): This type can be removed when bumping the bootstrap compiler\n+#[cfg_attr(not(bootstrap), lang = \"ResumeTy\")]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[derive(Debug, Copy, Clone)]\n@@ -61,7 +61,6 @@ unsafe impl Sync for ResumeTy {}\n /// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n /// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n // This is `const` to avoid extra errors after we recover from `const async fn`\n-// FIXME(swatinem): This fn can be removed when bumping the bootstrap compiler\n #[cfg_attr(bootstrap, lang = \"from_generator\")]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n@@ -103,8 +102,7 @@ where\n     GenFuture(gen)\n }\n \n-// FIXME(swatinem): This fn can be removed when bumping the bootstrap compiler\n-#[cfg_attr(bootstrap, lang = \"get_context\")]\n+#[lang = \"get_context\"]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[must_use]\n@@ -115,10 +113,6 @@ pub unsafe fn get_context<'a, 'b>(cx: ResumeTy) -> &'a mut Context<'b> {\n     unsafe { &mut *cx.0.as_ptr().cast() }\n }\n \n-// FIXME(swatinem): This fn is currently needed to work around shortcomings\n-// in type and lifetime inference.\n-// See the comment at the bottom of `LoweringContext::make_async_expr` and\n-// <https://github.com/rust-lang/rust/issues/104826>.\n #[cfg_attr(not(bootstrap), lang = \"identity_future\")]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]"}, {"sha": "3f8acc8505ff10fa608f432fd466fd35d7d65f36", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -485,6 +485,16 @@ impl<P: Deref<Target: Unpin>> Pin<P> {\n     ///\n     /// Unlike `Pin::new_unchecked`, this method is safe because the pointer\n     /// `P` dereferences to an [`Unpin`] type, which cancels the pinning guarantees.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::pin::Pin;\n+    ///\n+    /// let mut val: u8 = 5;\n+    /// // We can pin the value, since it doesn't care about being moved\n+    /// let mut pinned: Pin<&mut u8> = Pin::new(&mut val);\n+    /// ```\n     #[inline(always)]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n@@ -496,8 +506,20 @@ impl<P: Deref<Target: Unpin>> Pin<P> {\n \n     /// Unwraps this `Pin<P>` returning the underlying pointer.\n     ///\n-    /// This requires that the data inside this `Pin` is [`Unpin`] so that we\n+    /// This requires that the data inside this `Pin` implements [`Unpin`] so that we\n     /// can ignore the pinning invariants when unwrapping it.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::pin::Pin;\n+    ///\n+    /// let mut val: u8 = 5;\n+    /// let pinned: Pin<&mut u8> = Pin::new(&mut val);\n+    /// // Unwrap the pin to get a reference to the value\n+    /// let r = Pin::into_inner(pinned);\n+    /// assert_eq!(*r, 5);\n+    /// ```\n     #[inline(always)]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n@@ -707,6 +729,18 @@ impl<P: DerefMut> Pin<P> {\n     ///\n     /// This overwrites pinned data, but that is okay: its destructor gets\n     /// run before being overwritten, so no pinning guarantee is violated.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::pin::Pin;\n+    ///\n+    /// let mut val: u8 = 5;\n+    /// let mut pinned: Pin<&mut u8> = Pin::new(&mut val);\n+    /// println!(\"{}\", pinned); // 5\n+    /// pinned.as_mut().set(10);\n+    /// println!(\"{}\", pinned); // 10\n+    /// ```\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn set(&mut self, value: P::Target)"}, {"sha": "0cff972df3a5a8d4e961fe5fca309ab69a62b827", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -174,7 +174,6 @@ impl RawWakerVTable {\n /// Currently, `Context` only serves to provide access to a [`&Waker`](Waker)\n /// which can be used to wake the current task.\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-#[cfg_attr(not(bootstrap), lang = \"Context\")]\n pub struct Context<'a> {\n     waker: &'a Waker,\n     // Ensure we future-proof against variance changes by forcing"}, {"sha": "73b5056e932672bc85e38a96de4920c10e3cb31e", "filename": "library/std/src/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -2039,12 +2039,12 @@ impl Path {\n     /// #![feature(path_as_mut_os_str)]\n     /// use std::path::{Path, PathBuf};\n     ///\n-    /// let mut path = PathBuf::from(\"/Foo.TXT\").into_boxed_path();\n+    /// let mut path = PathBuf::from(\"Foo.TXT\");\n     ///\n-    /// assert_ne!(&*path, Path::new(\"/foo.txt\"));\n+    /// assert_ne!(path, Path::new(\"foo.txt\"));\n     ///\n     /// path.as_mut_os_str().make_ascii_lowercase();\n-    /// assert_eq!(&*path, Path::new(\"/foo.txt\"));\n+    /// assert_eq!(path, Path::new(\"foo.txt\"));\n     /// ```\n     #[unstable(feature = \"path_as_mut_os_str\", issue = \"105021\")]\n     #[must_use]"}, {"sha": "dd37e21ccee43918ed18a71581bb2af537ffe4fc", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -1 +1 @@\n-Subproject commit ae406aa5287a9e025abb72343aaceec98458c117\n+Subproject commit dd37e21ccee43918ed18a71581bb2af537ffe4fc"}, {"sha": "995df09b65c582eb6290ab7ea5d9485983eb4c37", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -1 +1 @@\n-Subproject commit a9869b4a3c4cac3bc6099b41f088679e268400b8\n+Subproject commit 995df09b65c582eb6290ab7ea5d9485983eb4c37"}, {"sha": "8b42eb5f57d3d8ed2257a22d0e850d9db52afed3", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -1 +1 @@\n-Subproject commit e269950a57fa6fcda356426545fb5aa3691a7ced\n+Subproject commit 8b42eb5f57d3d8ed2257a22d0e850d9db52afed3"}, {"sha": "efb19467c87095af6ff4e5e8ef6362dfdf1e082e", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -322,10 +322,6 @@ main {\n \tmargin-right: auto;\n }\n \n-.source .width-limiter {\n-\tmax-width: unset;\n-}\n-\n details:not(.rustdoc-toggle) summary {\n \tmargin-bottom: .6em;\n }"}, {"sha": "bcaff957af2f60aa2ed651a9b464bb8374eca9d1", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -99,7 +99,7 @@ <h2></h2> {#- -#}\n         {{- sidebar|safe -}}\n     </nav> {#- -#}\n     <main> {#- -#}\n-        <div class=\"width-limiter\"> {#- -#}\n+        {%- if page.css_class != \"source\" -%}<div class=\"width-limiter\">{%- endif -%}\n             <nav class=\"sub\"> {#- -#}\n                 {%- if page.css_class == \"source\" -%}\n                 <a class=\"sub-logo-container\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {#- -#}\n@@ -132,7 +132,7 @@ <h2></h2> {#- -#}\n                 </form> {#- -#}\n             </nav> {#- -#}\n             <section id=\"main-content\" class=\"content\">{{- content|safe -}}</section> {#- -#}\n-        </div> {#- -#}\n+        {%- if page.css_class != \"source\" -%}</div>{%- endif -%}\n     </main> {#- -#}\n     {{- layout.external_html.after_content|safe -}}\n     <div id=\"rustdoc-vars\" {# -#}"}, {"sha": "9c2b992b7655849d0096cc789b83ef1d2d3c2296", "filename": "src/test/ui-fulldeps/macro-crate-rlib.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-rlib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-rlib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-rlib.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -6,3 +6,4 @@ LL | #![plugin(rlib_crate_test)]\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0457`."}, {"sha": "fb83ca90a37873dcbcb572a25e6ff5c676dc5f55", "filename": "src/test/ui/async-await/async-await-let-else.drop-tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -40,7 +40,7 @@ LL |   async fn bar2<T>(_: T) -> ! {\n LL | |     panic!()\n LL | | }\n    | |_^\n-   = note: required because it captures the following types: `&mut Context<'_>`, `Option<bool>`, `impl Future<Output = !>`, `()`\n+   = note: required because it captures the following types: `ResumeTy`, `Option<bool>`, `impl Future<Output = !>`, `()`\n note: required because it's used within this `async fn` body\n   --> $DIR/async-await-let-else.rs:21:32\n    |"}, {"sha": "f2802698fd5b646fdd3e993df175ae58705b5abe", "filename": "src/test/ui/async-await/issue-68112.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -57,7 +57,7 @@ note: required because it appears within the type `impl Future<Output = Arc<RefC\n    |\n LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `&mut Context<'_>`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `Ready<i32>`\n+   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `Ready<i32>`\n note: required because it's used within this `async` block\n   --> $DIR/issue-68112.rs:60:20\n    |"}, {"sha": "38eb85b302fd588abbeb8e8f4b82f84338fa21bb", "filename": "src/test/ui/async-await/issue-68112.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -57,7 +57,7 @@ note: required because it appears within the type `impl Future<Output = Arc<RefC\n    |\n LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `&mut Context<'_>`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `i32`, `Ready<i32>`\n+   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `i32`, `Ready<i32>`\n note: required because it's used within this `async` block\n   --> $DIR/issue-68112.rs:60:20\n    |"}, {"sha": "3d2b0402bc52c614564988f0e53b8705b0691acf", "filename": "src/test/ui/async-await/issue-69446-fnmut-capture.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fasync-await%2Fissue-69446-fnmut-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fasync-await%2Fissue-69446-fnmut-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-69446-fnmut-capture.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -14,9 +14,6 @@ LL | |     });\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n-   = note: requirement occurs because of a mutable reference to `Context<'_>`\n-   = note: mutable references are invariant over their type parameter\n-   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "721234aa4a782875a2e90e32d4c2f5bea168c7f0", "filename": "src/test/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -18,7 +18,7 @@ LL |   async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n    |  ___________________________________________________________________^\n LL | | }\n    | |_^\n-   = note: required because it captures the following types: `&mut Context<'_>`, `impl Future<Output = ()>`, `()`\n+   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = ()>`, `()`\n note: required because it's used within this `async` block\n   --> $DIR/issue-70935-complex-spans.rs:16:5\n    |"}, {"sha": "17b4ef7bdc671705abd27ca37e8423cb94878cc2", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.drop_tracking.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -11,7 +11,7 @@ LL | async fn foo() {\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `NotSend`\n    = note: required because it appears within the type `(NotSend,)`\n-   = note: required because it captures the following types: `&mut Context<'_>`, `(NotSend,)`, `()`, `impl Future<Output = ()>`\n+   = note: required because it captures the following types: `ResumeTy`, `(NotSend,)`, `()`, `impl Future<Output = ()>`\n note: required because it's used within this `async fn` body\n   --> $DIR/partial-drop-partial-reinit.rs:31:16\n    |"}, {"sha": "34d8a159f1064bf05c1e448b9be5303830be108f", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.no_drop_tracking.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -11,7 +11,7 @@ LL | async fn foo() {\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `NotSend`\n    = note: required because it appears within the type `(NotSend,)`\n-   = note: required because it captures the following types: `&mut Context<'_>`, `(NotSend,)`, `impl Future<Output = ()>`, `()`\n+   = note: required because it captures the following types: `ResumeTy`, `(NotSend,)`, `impl Future<Output = ()>`, `()`\n note: required because it's used within this `async fn` body\n   --> $DIR/partial-drop-partial-reinit.rs:31:16\n    |"}, {"sha": "e567d5c2723f2c2b631730abe978dbaa380b09ac", "filename": "src/test/ui/regions/closure-in-projection-issue-97405.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.rs?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -22,11 +22,11 @@ fn good_generic_fn<T>() {\n // This should fail because `T` ends up in the upvars of the closure.\n fn bad_generic_fn<T: Copy>(t: T) {\n     assert_static(opaque(async move { t; }).next());\n-    //~^ ERROR the parameter type `T` may not live long enough\n+    //~^ ERROR the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n     assert_static(opaque(move || { t; }).next());\n     //~^ ERROR the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n     assert_static(opaque(opaque(async move { t; }).next()).next());\n-    //~^ ERROR the parameter type `T` may not live long enough\n+    //~^ ERROR the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n }\n \n fn main() {}"}, {"sha": "c08f1059ebf58278b7ce88edc8127f5e867f33da", "filename": "src/test/ui/regions/closure-in-projection-issue-97405.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -1,13 +1,11 @@\n-error[E0310]: the parameter type `T` may not live long enough\n+error[E0310]: the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n   --> $DIR/closure-in-projection-issue-97405.rs:24:5\n    |\n LL |     assert_static(opaque(async move { t; }).next());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-   |\n-help: consider adding an explicit lifetime bound...\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-LL | fn bad_generic_fn<T: Copy + 'static>(t: T) {\n-   |                           +++++++++\n+   = help: consider adding an explicit lifetime bound `<impl Iterator as Iterator>::Item: 'static`...\n+   = note: ...so that the type `<impl Iterator as Iterator>::Item` will meet its required lifetime bounds\n \n error[E0310]: the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n   --> $DIR/closure-in-projection-issue-97405.rs:26:5\n@@ -18,16 +16,14 @@ LL |     assert_static(opaque(move || { t; }).next());\n    = help: consider adding an explicit lifetime bound `<impl Iterator as Iterator>::Item: 'static`...\n    = note: ...so that the type `<impl Iterator as Iterator>::Item` will meet its required lifetime bounds\n \n-error[E0310]: the parameter type `T` may not live long enough\n+error[E0310]: the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n   --> $DIR/closure-in-projection-issue-97405.rs:28:5\n    |\n LL |     assert_static(opaque(opaque(async move { t; }).next()).next());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-   |\n-help: consider adding an explicit lifetime bound...\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-LL | fn bad_generic_fn<T: Copy + 'static>(t: T) {\n-   |                           +++++++++\n+   = help: consider adding an explicit lifetime bound `<impl Iterator as Iterator>::Item: 'static`...\n+   = note: ...so that the type `<impl Iterator as Iterator>::Item` will meet its required lifetime bounds\n \n error: aborting due to 3 previous errors\n "}, {"sha": "caefdfc96f0388cb238bb525e0ea70c4f17eb17a", "filename": "src/test/ui/svh/changing-crates.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fchanging-crates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fchanging-crates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fchanging-crates.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -11,3 +11,4 @@ LL | extern crate b;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0460`."}, {"sha": "5e890c6aa5795d7d7bfb214768ae195699db31bc", "filename": "src/test/ui/svh/svh-change-lit.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-lit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-lit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-lit.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -11,3 +11,4 @@ LL | extern crate b;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0460`."}, {"sha": "dcc250d5216b0c5fff45a769b228c3c75ec4dd22", "filename": "src/test/ui/svh/svh-change-significant-cfg.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-significant-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-significant-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-significant-cfg.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -11,3 +11,4 @@ LL | extern crate b;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0460`."}, {"sha": "2035993d218ec5a4c377c1fc75b3c98dafb610cd", "filename": "src/test/ui/svh/svh-change-trait-bound.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-trait-bound.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -11,3 +11,4 @@ LL | extern crate b;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0460`."}, {"sha": "eef85aa954611f6e72b7573949cadf794a8ee14e", "filename": "src/test/ui/svh/svh-change-type-arg.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-arg.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -11,3 +11,4 @@ LL | extern crate b;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0460`."}, {"sha": "247f74e50df600f10a4ec0888bd0350f43eb362c", "filename": "src/test/ui/svh/svh-change-type-ret.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-ret.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -11,3 +11,4 @@ LL | extern crate b;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0460`."}, {"sha": "78b54f227f0f015301720a9695b7015a8f876cd2", "filename": "src/test/ui/svh/svh-change-type-static.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-static.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -11,3 +11,4 @@ LL | extern crate b;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0460`."}, {"sha": "d8a81864dcaa81eee8fb98348b521255e63377bc", "filename": "src/test/ui/svh/svh-use-trait.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fsvh-use-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Fsvh%2Fsvh-use-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-use-trait.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -11,3 +11,4 @@ LL | extern crate utb;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0460`."}, {"sha": "712ed55438e68c397fbb1f7db323465558169206", "filename": "src/test/ui/type-alias-impl-trait/auxiliary/coherence_cross_crate_trait_decl.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcoherence_cross_crate_trait_decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcoherence_cross_crate_trait_decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcoherence_cross_crate_trait_decl.rs?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -0,0 +1,9 @@\n+pub trait SomeTrait {}\n+\n+impl SomeTrait for () {}\n+\n+// Adding this `impl` would cause errors in this crate's dependent,\n+// so it would be a breaking change. We explicitly don't add this impl,\n+// as the dependent crate already assumes this impl exists and thus already\n+// does not compile.\n+//impl SomeTrait for i32 {}"}, {"sha": "a63e0a1ee6f70ec6d0e0f9087449ff5208321040", "filename": "src/test/ui/type-alias-impl-trait/coherence_cross_crate.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence_cross_crate.rs?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -0,0 +1,24 @@\n+// aux-build: coherence_cross_crate_trait_decl.rs\n+// This test ensures that adding an `impl SomeTrait for i32` within\n+// `coherence_cross_crate_trait_decl` is not a breaking change, by\n+// making sure that even without such an impl this test fails to compile.\n+\n+#![feature(type_alias_impl_trait)]\n+\n+extern crate coherence_cross_crate_trait_decl;\n+\n+use coherence_cross_crate_trait_decl::SomeTrait;\n+\n+trait OtherTrait {}\n+\n+type Alias = impl SomeTrait;\n+\n+fn constrain() -> Alias {\n+    ()\n+}\n+\n+impl OtherTrait for Alias {}\n+impl OtherTrait for i32 {}\n+//~^ ERROR: conflicting implementations of trait `OtherTrait` for type `Alias`\n+\n+fn main() {}"}, {"sha": "63a3ce29cc77bd64da5c749fc445771f652f935f", "filename": "src/test/ui/type-alias-impl-trait/coherence_cross_crate.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43bc135628bc0d472e1a1259d56b72b7de0a274/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence_cross_crate.stderr?ref=c43bc135628bc0d472e1a1259d56b72b7de0a274", "patch": "@@ -0,0 +1,13 @@\n+error[E0119]: conflicting implementations of trait `OtherTrait` for type `Alias`\n+  --> $DIR/coherence_cross_crate.rs:21:1\n+   |\n+LL | impl OtherTrait for Alias {}\n+   | ------------------------- first implementation here\n+LL | impl OtherTrait for i32 {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Alias`\n+   |\n+   = note: upstream crates may add a new impl of trait `coherence_cross_crate_trait_decl::SomeTrait` for type `i32` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}]}