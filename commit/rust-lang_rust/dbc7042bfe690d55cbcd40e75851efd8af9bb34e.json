{"sha": "dbc7042bfe690d55cbcd40e75851efd8af9bb34e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYzcwNDJiZmU2OTBkNTVjYmNkNDBlNzU4NTFlZmQ4YWY5YmIzNGU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-04-14T09:37:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-04-14T09:37:22Z"}, "message": "Address review comments", "tree": {"sha": "379e31a9ba7eb4dcd7b53d7779d1e5c6f13ddf13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/379e31a9ba7eb4dcd7b53d7779d1e5c6f13ddf13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbc7042bfe690d55cbcd40e75851efd8af9bb34e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc7042bfe690d55cbcd40e75851efd8af9bb34e", "html_url": "https://github.com/rust-lang/rust/commit/dbc7042bfe690d55cbcd40e75851efd8af9bb34e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbc7042bfe690d55cbcd40e75851efd8af9bb34e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c3a1402949b42c4470af6e0aee2b8f15bf24129", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c3a1402949b42c4470af6e0aee2b8f15bf24129", "html_url": "https://github.com/rust-lang/rust/commit/3c3a1402949b42c4470af6e0aee2b8f15bf24129"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "076e6590226e5330165d77776b39a77cd09bce06", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dbc7042bfe690d55cbcd40e75851efd8af9bb34e/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc7042bfe690d55cbcd40e75851efd8af9bb34e/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=dbc7042bfe690d55cbcd40e75851efd8af9bb34e", "patch": "@@ -832,14 +832,16 @@ impl<'a, 'tcx> CrateMetadata {\n                             let ctor_kind = self.get_ctor_kind(child_index);\n                             let ctor_def = Def::Ctor(ctor_def_id, CtorOf::Variant, ctor_kind);\n                             let mut vis = self.get_visibility(ctor_def_id.index);\n-                            // If the variant is marked as non_exhaustive then lower the visibility\n-                            // to within the crate.\n-                            let has_non_exhaustive = || { attr::contains_name(\n-                                &self.get_item_attrs(def_id.index, sess), \"non_exhaustive\"\n-                            )};\n-                            if vis == ty::Visibility::Public && has_non_exhaustive() {\n-                                let crate_def_id = DefId { index: CRATE_DEF_INDEX, ..def_id };\n-                                vis = ty::Visibility::Restricted(crate_def_id);\n+                            if ctor_def_id == def_id && vis == ty::Visibility::Public {\n+                                // For non-exhaustive variants lower the constructor visibility to\n+                                // within the crate. We only need this for fictive constructors,\n+                                // for other constructors correct visibilities\n+                                // were already encoded in metadata.\n+                                let attrs = self.get_item_attrs(def_id.index, sess);\n+                                if attr::contains_name(&attrs, \"non_exhaustive\") {\n+                                    let crate_def_id = DefId { index: CRATE_DEF_INDEX, ..def_id };\n+                                    vis = ty::Visibility::Restricted(crate_def_id);\n+                                }\n                             }\n                             callback(def::Export { def: ctor_def, ident, vis, span });\n                         }"}, {"sha": "62f6e4463f936f214ea2f32c9f3edb4898d9b51a", "filename": "src/test/ui/rfc-2008-non-exhaustive/variants_fictive_visibility.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbc7042bfe690d55cbcd40e75851efd8af9bb34e/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_fictive_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc7042bfe690d55cbcd40e75851efd8af9bb34e/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_fictive_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_fictive_visibility.rs?ref=dbc7042bfe690d55cbcd40e75851efd8af9bb34e", "patch": "@@ -4,6 +4,9 @@\n extern crate variants;\n \n const S: u8 = 0;\n+\n+// OK, `Struct` in value namespace is crate-private, so it's filtered away\n+// and there's no conflict with the previously defined `const S`.\n use variants::NonExhaustiveVariants::Struct as S;\n \n fn main() {}"}]}