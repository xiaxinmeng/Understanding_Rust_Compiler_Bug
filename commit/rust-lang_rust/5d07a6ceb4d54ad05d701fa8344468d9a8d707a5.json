{"sha": "5d07a6ceb4d54ad05d701fa8344468d9a8d707a5", "node_id": "C_kwDOAAsO6NoAKDVkMDdhNmNlYjRkNTRhZDA1ZDcwMWZhODM0NDQ2OGQ5YThkNzA3YTU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-11-16T13:46:03Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-12-16T20:31:49Z"}, "message": "Actually instantiate the opaque type when checking bounds\n\nBefore this change, `instantiate_opaque_types` was a no-op", "tree": {"sha": "0f56ecc000cbf972c91bd85a871b988eaa470e41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f56ecc000cbf972c91bd85a871b988eaa470e41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d07a6ceb4d54ad05d701fa8344468d9a8d707a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d07a6ceb4d54ad05d701fa8344468d9a8d707a5", "html_url": "https://github.com/rust-lang/rust/commit/5d07a6ceb4d54ad05d701fa8344468d9a8d707a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d07a6ceb4d54ad05d701fa8344468d9a8d707a5/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d01550f7ea9fce1cf625128fefc73b9da3c1508", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d01550f7ea9fce1cf625128fefc73b9da3c1508", "html_url": "https://github.com/rust-lang/rust/commit/1d01550f7ea9fce1cf625128fefc73b9da3c1508"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "619d5073c69045f806ddb3318c6341cc839ec250", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d07a6ceb4d54ad05d701fa8344468d9a8d707a5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d07a6ceb4d54ad05d701fa8344468d9a8d707a5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=5d07a6ceb4d54ad05d701fa8344468d9a8d707a5", "patch": "@@ -626,6 +626,7 @@ pub(super) fn check_opaque_for_cycles<'tcx>(\n ///\n /// Without this check the above code is incorrectly accepted: we would ICE if\n /// some tried, for example, to clone an `Option<X<&mut ()>>`.\n+#[instrument(skip(tcx))]\n fn check_opaque_meets_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n@@ -643,7 +644,7 @@ fn check_opaque_meets_bounds<'tcx>(\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let param_env = tcx.param_env(def_id);\n \n-    tcx.infer_ctxt().enter(move |infcx| {\n+    tcx.infer_ctxt().with_opaque_type_inference(def_id).enter(move |infcx| {\n         let inh = Inherited::new(infcx, def_id);\n         let infcx = &inh.infcx;\n         let opaque_ty = tcx.mk_opaque(def_id.to_def_id(), substs);\n@@ -656,16 +657,15 @@ fn check_opaque_meets_bounds<'tcx>(\n \n         let opaque_type_map = infcx.inner.borrow().opaque_types.clone();\n         for (OpaqueTypeKey { def_id, substs }, opaque_defn) in opaque_type_map {\n-            match infcx\n-                .at(&misc_cause, param_env)\n-                .eq(opaque_defn.concrete_ty, tcx.type_of(def_id).subst(tcx, substs))\n-            {\n+            let hidden_type = tcx.type_of(def_id).subst(tcx, substs);\n+            trace!(?hidden_type);\n+            match infcx.at(&misc_cause, param_env).eq(opaque_defn.concrete_ty, hidden_type) {\n                 Ok(infer_ok) => inh.register_infer_ok_obligations(infer_ok),\n                 Err(ty_err) => tcx.sess.delay_span_bug(\n-                    opaque_defn.definition_span,\n+                    span,\n                     &format!(\n-                        \"could not unify `{}` with revealed type:\\n{}\",\n-                        opaque_defn.concrete_ty, ty_err,\n+                        \"could not check bounds on revealed type `{}`:\\n{}\",\n+                        hidden_type, ty_err,\n                     ),\n                 ),\n             }"}, {"sha": "a4ccae4eb7ed99e7b5b49de3479f78aa5db2f44b", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5d07a6ceb4d54ad05d701fa8344468d9a8d707a5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d07a6ceb4d54ad05d701fa8344468d9a8d707a5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=5d07a6ceb4d54ad05d701fa8344468d9a8d707a5", "patch": "@@ -10,5 +10,29 @@ error: higher-ranked subtype error\n LL |         |x| x\n    |         ^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r> Fn<(&'r X,)>`\n+              found type `Fn<(&'static X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:21:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n+\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'static X) -> &'static X` must implement `FnOnce<(&'0 X,)>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `FnOnce<(&'static X,)>`\n+\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}]}