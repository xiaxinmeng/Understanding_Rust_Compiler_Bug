{"sha": "211f1caa290d83a3e24ad99d53395975a3981014", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMWYxY2FhMjkwZDgzYTNlMjRhZDk5ZDUzMzk1OTc1YTM5ODEwMTQ=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-06-30T14:41:30Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-15T17:55:17Z"}, "message": "Deprecate `str::from_utf8_owned`\n\nUse `String::from_utf8` instead\n\n[breaking-change]", "tree": {"sha": "717e8a9d5debccefacc275fdd28f6a292a5737be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/717e8a9d5debccefacc275fdd28f6a292a5737be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/211f1caa290d83a3e24ad99d53395975a3981014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/211f1caa290d83a3e24ad99d53395975a3981014", "html_url": "https://github.com/rust-lang/rust/commit/211f1caa290d83a3e24ad99d53395975a3981014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/211f1caa290d83a3e24ad99d53395975a3981014/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1704ebb798bd55a782b80ae6741c5d11403aaf13", "url": "https://api.github.com/repos/rust-lang/rust/commits/1704ebb798bd55a782b80ae6741c5d11403aaf13", "html_url": "https://github.com/rust-lang/rust/commit/1704ebb798bd55a782b80ae6741c5d11403aaf13"}], "stats": {"total": 166, "additions": 80, "deletions": 86}, "files": [{"sha": "28ff2c18ad3baf5fb9af65d0c272e768aa5ca252", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::str;\n use std::io::process::{ProcessExit, Command, Process, ProcessOutput};\n use std::dynamic_lib::DynamicLibrary;\n \n@@ -25,7 +24,7 @@ fn add_target_env(cmd: &mut Command, lib_path: &str, aux_path: Option<&str>) {\n     // Add the new dylib search path var\n     let var = DynamicLibrary::envvar();\n     let newpath = DynamicLibrary::create_path(path.as_slice());\n-    let newpath = str::from_utf8(newpath.as_slice()).unwrap().to_string();\n+    let newpath = String::from_utf8(newpath).unwrap();\n     cmd.env(var.to_string(), newpath);\n }\n \n@@ -55,8 +54,8 @@ pub fn run(lib_path: &str,\n \n             Some(Result {\n                 status: status,\n-                out: str::from_utf8(output.as_slice()).unwrap().to_string(),\n-                err: str::from_utf8(error.as_slice()).unwrap().to_string()\n+                out: String::from_utf8(output).unwrap(),\n+                err: String::from_utf8(error).unwrap()\n             })\n         },\n         Err(..) => None"}, {"sha": "079a230d6d5baee527517b07d6fc9ac8ebfe8e0d", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -158,7 +158,7 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n         match props.pp_exact { Some(_) => 1, None => 2 };\n \n     let src = File::open(testfile).read_to_end().unwrap();\n-    let src = str::from_utf8(src.as_slice()).unwrap().to_string();\n+    let src = String::from_utf8(src.clone()).unwrap();\n     let mut srcs = vec!(src);\n \n     let mut round = 0;\n@@ -185,10 +185,10 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n         Some(ref file) => {\n             let filepath = testfile.dir_path().join(file);\n             let s = File::open(&filepath).read_to_end().unwrap();\n-            str::from_utf8(s.as_slice()).unwrap().to_string()\n-          }\n-          None => { (*srcs.get(srcs.len() - 2u)).clone() }\n-        };\n+            String::from_utf8(s).unwrap()\n+        }\n+        None => { (*srcs.get(srcs.len() - 2u)).clone() }\n+    };\n     let mut actual = (*srcs.get(srcs.len() - 1u)).clone();\n \n     if props.pp_exact.is_some() {\n@@ -582,8 +582,8 @@ fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path)\n                     process.wait_with_output().unwrap();\n \n                 (status,\n-                 str::from_utf8(output.as_slice()).unwrap().to_string(),\n-                 str::from_utf8(error.as_slice()).unwrap().to_string())\n+                 String::from_utf8(output).unwrap(),\n+                 String::from_utf8(error).unwrap())\n             },\n             Err(e) => {\n                 fatal(format!(\"Failed to setup Python process for \\"}, {"sha": "5296f2d7096de5b662f86ef89d0d556457729b68", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -107,6 +107,7 @@ Section: Creating a string\n /// let string = str::from_utf8_owned(hello_vec);\n /// assert_eq!(string, Ok(\"hello\".to_string()));\n /// ```\n+#[deprecated = \"Replaced by `String::from_utf8`\"]\n pub fn from_utf8_owned(vv: Vec<u8>) -> Result<String, Vec<u8>> {\n     String::from_utf8(vv)\n }\n@@ -139,9 +140,7 @@ pub fn from_byte(b: u8) -> String {\n /// assert_eq!(string.as_slice(), \"b\");\n /// ```\n pub fn from_char(ch: char) -> String {\n-    let mut buf = String::new();\n-    buf.push_char(ch);\n-    buf\n+    String::from_char(ch)\n }\n \n /// Convert a vector of chars to a string\n@@ -2175,19 +2174,6 @@ String::from_str(\"\\u1111\\u1171\\u11b6\"));\n         assert_eq!(from_utf8(xs), None);\n     }\n \n-    #[test]\n-    fn test_str_from_utf8_owned() {\n-        let xs = Vec::from_slice(b\"hello\");\n-        assert_eq!(from_utf8_owned(xs), Ok(String::from_str(\"hello\")));\n-\n-        let xs = Vec::from_slice(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".as_bytes());\n-        assert_eq!(from_utf8_owned(xs), Ok(String::from_str(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\")));\n-\n-        let xs = Vec::from_slice(b\"hello\\xFF\");\n-        assert_eq!(from_utf8_owned(xs),\n-                   Err(Vec::from_slice(b\"hello\\xFF\")));\n-    }\n-\n     #[test]\n     fn test_str_from_utf8_lossy() {\n         let xs = b\"hello\";"}, {"sha": "905e4864d00cb146c2ee56b472b28d287805b13e", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -75,6 +75,14 @@ impl String {\n     ///\n     /// Returns `Err` with the original vector if the vector contains invalid\n     /// UTF-8.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let hello_vec = vec![104, 101, 108, 108, 111];\n+    /// let string = String::from_utf8(hello_vec);\n+    /// assert_eq!(string, Ok(\"hello\".to_string()));\n+    /// ```\n     #[inline]\n     pub fn from_utf8(vec: Vec<u8>) -> Result<String, Vec<u8>> {\n         if str::is_utf8(vec.as_slice()) {\n@@ -391,6 +399,19 @@ mod tests {\n         });\n     }\n \n+    #[test]\n+    fn test_str_from_utf8() {\n+        let xs = Vec::from_slice(b\"hello\");\n+        assert_eq!(String::from_utf8(xs), Ok(\"hello\".to_string()));\n+\n+        let xs = Vec::from_slice(\"\u00e0\u00b8\u00a8\u00e0\u00b9\u201e\u00e0\u00b8\u2014\u00e0\u00b8\u00a2\u00e4\u00b8\u00ad\u00e5\u008d\u017dVi\u00e1\u00bb\u2021t Nam\".as_bytes());\n+        assert_eq!(String::from_utf8(xs), Ok(\"\u00e0\u00b8\u00a8\u00e0\u00b9\u201e\u00e0\u00b8\u2014\u00e0\u00b8\u00a2\u00e4\u00b8\u00ad\u00e5\u008d\u017dVi\u00e1\u00bb\u2021t Nam\".to_string()));\n+\n+        let xs = Vec::from_slice(b\"hello\\xFF\");\n+        assert_eq!(String::from_utf8(xs),\n+                   Err(Vec::from_slice(b\"hello\\xFF\")));\n+    }\n+\n     #[test]\n     fn test_push_bytes() {\n         let mut s = String::from_str(\"ABC\");"}, {"sha": "9755d54a1320591f506118285c8d8b288a1489ef", "filename": "src/libdebug/repr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -575,7 +575,6 @@ struct P {a: int, b: f64}\n \n #[test]\n fn test_repr() {\n-    use std::str;\n     use std::io::stdio::println;\n     use std::char::is_alphabetic;\n     use std::mem::swap;\n@@ -584,7 +583,7 @@ fn test_repr() {\n     fn exact_test<T>(t: &T, e:&str) {\n         let mut m = io::MemWriter::new();\n         write_repr(&mut m as &mut io::Writer, t).unwrap();\n-        let s = str::from_utf8(m.unwrap().as_slice()).unwrap().to_string();\n+        let s = String::from_utf8(m.unwrap()).unwrap();\n         assert_eq!(s.as_slice(), e);\n     }\n "}, {"sha": "98887e5357dfa9b529976cbf0b151530a809d3b6", "filename": "src/libregex/test/bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibregex%2Ftest%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibregex%2Ftest%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Ftest%2Fbench.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -163,7 +163,7 @@ fn gen_text(n: uint) -> String {\n             *b = '\\n' as u8\n         }\n     }\n-    str::from_utf8(bytes.as_slice()).unwrap().to_string()\n+    String::from_utf8(bytes).unwrap()\n }\n \n throughput!(easy0_32, easy0(), 32)"}, {"sha": "ff75240438e8d77ddc91d3f9f5a619fd8324f88c", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -380,8 +380,7 @@ pub mod write {\n                     sess.note(format!(\"{}\", &cmd).as_slice());\n                     let mut note = prog.error.clone();\n                     note.push_all(prog.output.as_slice());\n-                    sess.note(str::from_utf8(note.as_slice()).unwrap()\n-                                                             .as_slice());\n+                    sess.note(str::from_utf8(note.as_slice()).unwrap());\n                     sess.abort_if_errors();\n                 }\n             },\n@@ -1177,8 +1176,7 @@ fn link_natively(sess: &Session, trans: &CrateTranslation, dylib: bool,\n                 sess.note(format!(\"{}\", &cmd).as_slice());\n                 let mut output = prog.error.clone();\n                 output.push_all(prog.output.as_slice());\n-                sess.note(str::from_utf8(output.as_slice()).unwrap()\n-                                                           .as_slice());\n+                sess.note(str::from_utf8(output.as_slice()).unwrap());\n                 sess.abort_if_errors();\n             }\n         },"}, {"sha": "70dc6fac19bc7ad992a5a3c05e49e2f3f2faeaf3", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -82,8 +82,7 @@ fn run_compiler(args: &[String]) {\n             let ifile = matches.free.get(0).as_slice();\n             if ifile == \"-\" {\n                 let contents = io::stdin().read_to_end().unwrap();\n-                let src = str::from_utf8(contents.as_slice()).unwrap()\n-                                                             .to_string();\n+                let src = String::from_utf8(contents).unwrap();\n                 (StrInput(src), None)\n             } else {\n                 (FileInput(Path::new(ifile)), Some(Path::new(ifile)))"}, {"sha": "3cf250a9517d10402fa9fcbc8d4ea8494d1ee912", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -1922,5 +1922,5 @@ pub fn encoded_ty(tcx: &ty::ctxt, t: ty::t) -> String {\n         tcx: tcx,\n         abbrevs: &RefCell::new(HashMap::new())\n     }, t);\n-    str::from_utf8_owned(Vec::from_slice(wr.get_ref())).unwrap().to_string()\n+    str::from_utf8(wr.get_ref()).unwrap().to_string()\n }"}, {"sha": "2998e23bf5bb9c6b6bdff22dd7622787f942e1ca", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -460,7 +460,7 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> io::IoResult<String>\n \n     try!(write!(&mut w, \"]}};\"));\n \n-    Ok(str::from_utf8(w.unwrap().as_slice()).unwrap().to_string())\n+    Ok(String::from_utf8(w.unwrap()).unwrap())\n }\n \n fn write_shared(cx: &Context,"}, {"sha": "04f0d4622d525f9e957d5a98532370280ff89479", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -429,7 +429,7 @@ fn json_output(krate: clean::Crate, res: Vec<plugins::PluginJson> ,\n             let mut encoder = json::Encoder::new(&mut w as &mut io::Writer);\n             krate.encode(&mut encoder).unwrap();\n         }\n-        str::from_utf8_owned(w.unwrap()).unwrap()\n+        String::from_utf8(w.unwrap()).unwrap()\n     };\n     let crate_json = match json::from_str(crate_json_str.as_slice()) {\n         Ok(j) => j,"}, {"sha": "80a8a06edda6b36cfc0fa9a3c83b3e5b59e1429c", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -146,7 +146,7 @@ impl<'a> ToBase64 for &'a [u8] {\n         }\n \n         unsafe {\n-            str::raw::from_utf8(v.as_slice()).to_string()\n+            str::raw::from_utf8_owned(v)\n         }\n     }\n }"}, {"sha": "3083c06c8773f5d1bd9a075eb51325bee168a490", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -45,7 +45,7 @@ impl<'a> ToHex for &'a [u8] {\n         }\n \n         unsafe {\n-            str::raw::from_utf8(v.as_slice()).to_string()\n+            str::raw::from_utf8_owned(v)\n         }\n     }\n }"}, {"sha": "f7301abef51f23b485b8c79f279df477edf8bc8b", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -240,7 +240,7 @@ pub fn decode<T: ::Decodable<Decoder, DecoderError>>(s: &str) -> DecodeResult<T>\n /// Shortcut function to encode a `T` into a JSON `String`\n pub fn encode<'a, T: Encodable<Encoder<'a>, io::IoError>>(object: &T) -> String {\n     let buff = Encoder::buffer_encode(object);\n-    str::from_utf8_owned(buff).unwrap()\n+    String::from_utf8(buff).unwrap()\n }\n \n impl fmt::Show for ErrorCode {\n@@ -517,8 +517,7 @@ impl<'a> ::Encoder<io::IoError> for Encoder<'a> {\n             let mut check_encoder = Encoder::new(&mut buf);\n             try!(f(transmute(&mut check_encoder)));\n         }\n-        let out = str::from_utf8_owned(buf.unwrap()).unwrap();\n-        let out = out.as_slice();\n+        let out = str::from_utf8(buf.get_ref()).unwrap();\n         let needs_wrapping = out.char_at(0) != '\"' && out.char_at_reverse(out.len()) != '\"';\n         if needs_wrapping { try!(write!(self.writer, \"\\\"\")); }\n         try!(f(self));\n@@ -762,8 +761,7 @@ impl<'a> ::Encoder<io::IoError> for PrettyEncoder<'a> {\n             let mut check_encoder = PrettyEncoder::new(&mut buf);\n             try!(f(transmute(&mut check_encoder)));\n         }\n-        let out = str::from_utf8_owned(buf.unwrap()).unwrap();\n-        let out = out.as_slice();\n+        let out = str::from_utf8(buf.get_ref()).unwrap();\n         let needs_wrapping = out.char_at(0) != '\"' && out.char_at_reverse(out.len()) != '\"';\n         if needs_wrapping { try!(write!(self.writer, \"\\\"\")); }\n         try!(f(self));\n@@ -810,7 +808,7 @@ impl Json {\n     pub fn to_pretty_str(&self) -> String {\n         let mut s = MemWriter::new();\n         self.to_pretty_writer(&mut s as &mut io::Writer).unwrap();\n-        str::from_utf8_owned(s.unwrap()).unwrap()\n+        String::from_utf8(s.unwrap()).unwrap()\n     }\n \n      /// If the Json value is an Object, returns the value associated with the provided key.\n@@ -1728,14 +1726,14 @@ impl<T: Iterator<char>> Builder<T> {\n /// Decodes a json value from an `&mut io::Reader`\n pub fn from_reader(rdr: &mut io::Reader) -> Result<Json, BuilderError> {\n     let contents = match rdr.read_to_end() {\n-        Ok(c) => c,\n+        Ok(c)  => c,\n         Err(e) => return Err(io_error_to_error(e))\n     };\n-    let s = match str::from_utf8_owned(contents) {\n-        Ok(s) => s,\n-        _ => return Err(SyntaxError(NotUtf8, 0, 0))\n+    let s = match str::from_utf8(contents.as_slice()) {\n+        Some(s) => s,\n+        _       => return Err(SyntaxError(NotUtf8, 0, 0))\n     };\n-    let mut builder = Builder::new(s.as_slice().chars());\n+    let mut builder = Builder::new(s.chars());\n     builder.build()\n }\n "}, {"sha": "93f026c76f9d3b52674f437b15cba90e976f887e", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -438,7 +438,7 @@ unsafe fn str_map_bytes(string: String, map: &'static [u8]) -> String {\n         *b = map[*b as uint];\n     }\n \n-    String::from_str(str::from_utf8(bytes.as_slice()).unwrap())\n+    String::from_utf8(bytes).unwrap()\n }\n \n #[inline]"}, {"sha": "aacf1232df52150c46b615bef99e9efbe82f84ad", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -464,7 +464,7 @@ pub use core::fmt::{secret_pointer};\n pub fn format(args: &Arguments) -> string::String{\n     let mut output = io::MemWriter::new();\n     let _ = write!(&mut output, \"{}\", args);\n-    str::from_utf8(output.unwrap().as_slice()).unwrap().into_string()\n+    String::from_utf8(output.unwrap()).unwrap()\n }\n \n impl<'a> Writer for Formatter<'a> {"}, {"sha": "d49c56b4704402dfa77ea958a77a3e6aabe993ed", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -999,9 +999,9 @@ mod test {\n             let mut read_buf = [0, .. 1028];\n             let read_str = match check!(read_stream.read(read_buf)) {\n                 -1|0 => fail!(\"shouldn't happen\"),\n-                n => str::from_utf8(read_buf.slice_to(n)).unwrap().to_owned()\n+                n => str::from_utf8(read_buf.slice_to(n)).unwrap().to_string()\n             };\n-            assert_eq!(read_str, message.to_owned());\n+            assert_eq!(read_str.as_slice(), message);\n         }\n         check!(unlink(filename));\n     })"}, {"sha": "0df2bb0f57c5a253f830859183357292b2a1c1ca", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -705,9 +705,9 @@ pub trait Reader {\n     /// UTF-8 bytes.\n     fn read_to_string(&mut self) -> IoResult<String> {\n         self.read_to_end().and_then(|s| {\n-            match str::from_utf8(s.as_slice()) {\n-                Some(s) => Ok(String::from_str(s)),\n-                None => Err(standard_error(InvalidInput)),\n+            match String::from_utf8(s) {\n+                Ok(s)  => Ok(s),\n+                Err(_) => Err(standard_error(InvalidInput)),\n             }\n         })\n     }\n@@ -1440,9 +1440,9 @@ pub trait Buffer: Reader {\n     /// valid UTF-8 sequence of bytes.\n     fn read_line(&mut self) -> IoResult<String> {\n         self.read_until('\\n' as u8).and_then(|line|\n-            match str::from_utf8(line.as_slice()) {\n-                Some(s) => Ok(String::from_str(s)),\n-                None => Err(standard_error(InvalidInput)),\n+            match String::from_utf8(line) {\n+                Ok(s)  => Ok(s),\n+                Err(_) => Err(standard_error(InvalidInput)),\n             }\n         )\n     }"}, {"sha": "bc0140a358c80a4bad4ad60c5b0cc070b1fd8af9", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -813,8 +813,7 @@ mod tests {\n         use os;\n         let prog = pwd_cmd().spawn().unwrap();\n \n-        let output = str::from_utf8(prog.wait_with_output().unwrap()\n-                                        .output.as_slice()).unwrap().to_string();\n+        let output = String::from_utf8(prog.wait_with_output().unwrap().output).unwrap();\n         let parent_dir = os::getcwd();\n         let child_dir = Path::new(output.as_slice().trim());\n \n@@ -832,8 +831,7 @@ mod tests {\n         let parent_dir = os::getcwd().dir_path();\n         let prog = pwd_cmd().cwd(&parent_dir).spawn().unwrap();\n \n-        let output = str::from_utf8(prog.wait_with_output().unwrap()\n-                                        .output.as_slice()).unwrap().to_string();\n+        let output = String::from_utf8(prog.wait_with_output().unwrap().output).unwrap();\n         let child_dir = Path::new(output.as_slice().trim().into_string());\n \n         let parent_stat = parent_dir.stat().unwrap();\n@@ -867,8 +865,7 @@ mod tests {\n         if running_on_valgrind() { return; }\n \n         let prog = env_cmd().spawn().unwrap();\n-        let output = str::from_utf8(prog.wait_with_output().unwrap()\n-                                        .output.as_slice()).unwrap().to_string();\n+        let output = String::from_utf8(prog.wait_with_output().unwrap().output).unwrap();\n \n         let r = os::env();\n         for &(ref k, ref v) in r.iter() {\n@@ -884,9 +881,7 @@ mod tests {\n         if running_on_valgrind() { return; }\n \n         let mut prog = env_cmd().spawn().unwrap();\n-        let output = str::from_utf8(prog.wait_with_output()\n-                                        .unwrap().output.as_slice())\n-                                   .unwrap().to_string();\n+        let output = String::from_utf8(prog.wait_with_output().unwrap().output).unwrap();\n \n         let r = os::env();\n         for &(ref k, ref v) in r.iter() {"}, {"sha": "fa9bf5d9bb693f2c291a09c3f44ee3251366ce2c", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -997,7 +997,7 @@ mod test {\n     macro_rules! t( ($a:expr, $b:expr) => ({\n         let mut m = MemWriter::new();\n         super::demangle(&mut m, $a).unwrap();\n-        assert_eq!(str::from_utf8(m.unwrap().as_slice()).unwrap().to_owned(), $b.to_owned());\n+        assert_eq!(String::from_utf8(m.unwrap()).unwrap(), $b.to_string());\n     }) )\n \n     #[test]"}, {"sha": "244be0854bf704f832edaba35e89c3f470905495", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -122,17 +122,17 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         }\n         Ok(bytes) => bytes,\n     };\n-    match str::from_utf8(bytes.as_slice()) {\n-        Some(src) => {\n+    match String::from_utf8(bytes) {\n+        Ok(src) => {\n             // Add this input file to the code map to make it available as\n             // dependency information\n             let filename = file.display().to_string();\n-            let interned = token::intern_and_get_ident(src);\n-            cx.codemap().new_filemap(filename, src.to_string());\n+            let interned = token::intern_and_get_ident(src.as_slice());\n+            cx.codemap().new_filemap(filename, src);\n \n             base::MacExpr::new(cx.expr_str(sp, interned))\n         }\n-        None => {\n+        Err(_) => {\n             cx.span_err(sp,\n                         format!(\"{} wasn't a utf-8 file\",\n                                 file.display()).as_slice());"}, {"sha": "c53638ed07d13fc5a9124cc173beb70a957aa4bb", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -339,7 +339,7 @@ pub fn gather_comments_and_literals(span_diagnostic: &diagnostic::SpanHandler,\n                                     srdr: &mut io::Reader)\n                                  -> (Vec<Comment>, Vec<Literal>) {\n     let src = srdr.read_to_end().unwrap();\n-    let src = str::from_utf8(src.as_slice()).unwrap().to_string();\n+    let src = String::from_utf8(src).unwrap();\n     let cm = CodeMap::new();\n     let filemap = cm.new_filemap(path, src);\n     let mut rdr = lexer::StringReader::new_raw(span_diagnostic, filemap);"}, {"sha": "c8e7806670e45c28f25978cd7e8718c249676f30", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -138,7 +138,7 @@ pub fn to_string(f: |&mut State| -> IoResult<()>) -> String {\n         // downcasts.\n         let (_, wr): (uint, Box<MemWriter>) = mem::transmute_copy(&s.s.out);\n         let result =\n-            str::from_utf8_owned(Vec::from_slice(wr.get_ref())).unwrap();\n+            String::from_utf8(Vec::from_slice(wr.get_ref())).unwrap();\n         mem::forget(wr);\n         result.to_string()\n     }"}, {"sha": "09fe2ef29ef2c1d5a96fcef3ef4df3fb0e5c6331", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -214,9 +214,9 @@ pub fn parse(file: &mut io::Reader, longnames: bool)\n \n     // don't read NUL\n     let bytes = try!(file.read_exact(names_bytes as uint - 1));\n-    let names_str = match str::from_utf8(bytes.as_slice()) {\n-        Some(s) => s.to_string(),\n-        None => return Err(\"input not utf-8\".to_string()),\n+    let names_str = match String::from_utf8(bytes) {\n+        Ok(s)  => s,\n+        Err(_) => return Err(\"input not utf-8\".to_string()),\n     };\n \n     let term_names: Vec<String> = names_str.as_slice()"}, {"sha": "ce2ba41d4761065dae00b6c9e8275deea5946304", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -1030,7 +1030,7 @@ mod tests {\n             use std::io::MemWriter;\n             let mut m = MemWriter::new();\n             write_boxplot(&mut m as &mut io::Writer, s, 30).unwrap();\n-            let out = str::from_utf8(m.unwrap().as_slice()).unwrap().to_string();\n+            let out = String::from_utf8(m.unwrap()).unwrap();\n             assert_eq!(out, expected);\n         }\n "}, {"sha": "4e20c073ac5924aac26d012ed0856c13001932c5", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -1086,7 +1086,7 @@ pub fn strftime(format: &str, tm: &Tm) -> String {\n         }\n     }\n \n-    str::from_utf8(buf.as_slice()).unwrap().to_string()\n+    String::from_utf8(buf).unwrap()\n }\n \n #[cfg(test)]"}, {"sha": "70c0078a99dc59149c40da62a3a3f10fdb40aee5", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -327,7 +327,7 @@ impl Uuid {\n             *s.get_mut(i*2+0) = digit.as_bytes()[0];\n             *s.get_mut(i*2+1) = digit.as_bytes()[1];\n         }\n-        str::from_utf8(s.as_slice()).unwrap().to_string()\n+        String::from_utf8(s).unwrap()\n     }\n \n     /// Returns a string of hexadecimal digits, separated into groups with a hyphen."}, {"sha": "e0cd91adb1c595724bdd945be55d390032824141", "filename": "src/test/run-pass/issue-11881.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/211f1caa290d83a3e24ad99d53395975a3981014/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211f1caa290d83a3e24ad99d53395975a3981014/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11881.rs?ref=211f1caa290d83a3e24ad99d53395975a3981014", "patch": "@@ -14,7 +14,6 @@ use serialize::{Encodable, Encoder};\n use serialize::json;\n use serialize::ebml::writer;\n use std::io::MemWriter;\n-use std::str::from_utf8_owned;\n \n #[deriving(Encodable)]\n struct Foo {"}]}