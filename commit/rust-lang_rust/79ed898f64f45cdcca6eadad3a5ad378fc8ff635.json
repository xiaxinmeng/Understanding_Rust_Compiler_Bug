{"sha": "79ed898f64f45cdcca6eadad3a5ad378fc8ff635", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZWQ4OThmNjRmNDVjZGNjYTZlYWRhZDNhNWFkMzc4ZmM4ZmY2MzU=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2013-11-27T17:23:12Z"}, "committer": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2013-11-27T17:27:04Z"}, "message": "rustdoc: Use new ||/proc syntax", "tree": {"sha": "2a0437db6004804c315f6b266be8b05b4c908c22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a0437db6004804c315f6b266be8b05b4c908c22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79ed898f64f45cdcca6eadad3a5ad378fc8ff635", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79ed898f64f45cdcca6eadad3a5ad378fc8ff635", "html_url": "https://github.com/rust-lang/rust/commit/79ed898f64f45cdcca6eadad3a5ad378fc8ff635", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79ed898f64f45cdcca6eadad3a5ad378fc8ff635/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17af6f7d0c92ee66df6b96d088e999db378ce125", "url": "https://api.github.com/repos/rust-lang/rust/commits/17af6f7d0c92ee66df6b96d088e999db378ce125", "html_url": "https://github.com/rust-lang/rust/commit/17af6f7d0c92ee66df6b96d088e999db378ce125"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "90c317668fc2f8847a957936fb20a347c47a24d1", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/79ed898f64f45cdcca6eadad3a5ad378fc8ff635/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ed898f64f45cdcca6eadad3a5ad378fc8ff635/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=79ed898f64f45cdcca6eadad3a5ad378fc8ff635", "patch": "@@ -299,22 +299,20 @@ impl fmt::Default for clean::Type {\n                 f.buf.write(s.as_bytes());\n             }\n             clean::Closure(ref decl) => {\n-                f.buf.write(match decl.sigil {\n-                    ast::BorrowedSigil => \"&amp;\",\n-                    ast::ManagedSigil => \"@\",\n-                    ast::OwnedSigil => \"~\",\n-                }.as_bytes());\n-                match decl.region {\n-                    Some(ref region) => write!(f.buf, \"{} \", *region),\n-                    None => {}\n-                }\n-                write!(f.buf, \"{}{}fn{}\",\n+                let region = match decl.region {\n+                    Some(ref region) => format!(\"{} \", *region),\n+                    None => ~\"\",\n+                };\n+\n+                write!(f.buf, \"{}{}{arrow, select, yes{ -&gt; {ret}} other{}}\",\n                        PuritySpace(decl.purity),\n-                       match decl.onceness {\n-                           ast::Once => \"once \",\n-                           ast::Many => \"\",\n+                       match decl.sigil {\n+                           ast::OwnedSigil => format!(\"proc({})\", decl.decl.inputs),\n+                           ast::BorrowedSigil => format!(\"{}|{}|\", region, decl.decl.inputs),\n+                           ast::ManagedSigil => format!(\"@{}fn({})\", region, decl.decl.inputs),\n                        },\n-                       decl.decl);\n+                       arrow = match decl.decl.output { clean::Unit => \"no\", _ => \"yes\" },\n+                       ret = decl.decl.output);\n                 // XXX: where are bounds and lifetimes printed?!\n             }\n             clean::BareFunction(ref decl) => {\n@@ -374,18 +372,24 @@ impl fmt::Default for clean::Type {\n \n impl fmt::Default for clean::FnDecl {\n     fn fmt(d: &clean::FnDecl, f: &mut fmt::Formatter) {\n+        write!(f.buf, \"({args}){arrow, select, yes{ -&gt; {ret}} other{}}\",\n+               args = d.inputs,\n+               arrow = match d.output { clean::Unit => \"no\", _ => \"yes\" },\n+               ret = d.output);\n+    }\n+}\n+\n+impl fmt::Default for ~[clean::Argument] {\n+    fn fmt(inputs: &~[clean::Argument], f: &mut fmt::Formatter) {\n         let mut args = ~\"\";\n-        for (i, input) in d.inputs.iter().enumerate() {\n+        for (i, input) in inputs.iter().enumerate() {\n             if i > 0 { args.push_str(\", \"); }\n             if input.name.len() > 0 {\n                 args.push_str(format!(\"{}: \", input.name));\n             }\n             args.push_str(format!(\"{}\", input.type_));\n         }\n-        write!(f.buf, \"({args}){arrow, select, yes{ -&gt; {ret}} other{}}\",\n-               args = args,\n-               arrow = match d.output { clean::Unit => \"no\", _ => \"yes\" },\n-               ret = d.output);\n+        f.buf.write(args.as_bytes());\n     }\n }\n "}]}