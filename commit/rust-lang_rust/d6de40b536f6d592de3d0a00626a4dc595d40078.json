{"sha": "d6de40b536f6d592de3d0a00626a4dc595d40078", "node_id": "C_kwDOAAsO6NoAKGQ2ZGU0MGI1MzZmNmQ1OTJkZTNkMGEwMDYyNmE0ZGM1OTVkNDAwNzg", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-29T09:53:25Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-01-28T14:49:22Z"}, "message": "Make `is_object_safe` a query and move lint_object_unsafe_trait call there", "tree": {"sha": "08468642db4ad5245d0d0c094b7021096d60e823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08468642db4ad5245d0d0c094b7021096d60e823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6de40b536f6d592de3d0a00626a4dc595d40078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6de40b536f6d592de3d0a00626a4dc595d40078", "html_url": "https://github.com/rust-lang/rust/commit/d6de40b536f6d592de3d0a00626a4dc595d40078", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6de40b536f6d592de3d0a00626a4dc595d40078/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e144a13254a56fbfd9fc979e0886a2a70260073e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e144a13254a56fbfd9fc979e0886a2a70260073e", "html_url": "https://github.com/rust-lang/rust/commit/e144a13254a56fbfd9fc979e0886a2a70260073e"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "1b9298e82d6b8f41fb7e62d97fea75af57dead90", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6de40b536f6d592de3d0a00626a4dc595d40078/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6de40b536f6d592de3d0a00626a4dc595d40078/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=d6de40b536f6d592de3d0a00626a4dc595d40078", "patch": "@@ -1274,6 +1274,9 @@ rustc_queries! {\n     query object_safety_violations(trait_id: DefId) -> &'tcx [traits::ObjectSafetyViolation] {\n         desc { |tcx| \"determining object safety of trait `{}`\", tcx.def_path_str(trait_id) }\n     }\n+    query is_object_safe(trait_id: DefId) -> bool {\n+        desc { |tcx| \"determining object safety of trait `{}`\", tcx.def_path_str(trait_id) }\n+    }\n \n     /// Gets the ParameterEnvironment for a given item; this environment\n     /// will be in \"user-facing\" mode, meaning that it is suitable for"}, {"sha": "8e936174c8be3464f4f12cd95d112583cebb4b5b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6de40b536f6d592de3d0a00626a4dc595d40078/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6de40b536f6d592de3d0a00626a4dc595d40078/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=d6de40b536f6d592de3d0a00626a4dc595d40078", "patch": "@@ -2471,10 +2471,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n     }\n \n-    pub fn is_object_safe(self, key: DefId) -> bool {\n-        self.object_safety_violations(key).is_empty()\n-    }\n-\n     #[inline]\n     pub fn is_const_fn_raw(self, def_id: DefId) -> bool {\n         matches!("}, {"sha": "a5447c012f066cc00657f2db8a02f4ecabd648d1", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d6de40b536f6d592de3d0a00626a4dc595d40078/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6de40b536f6d592de3d0a00626a4dc595d40078/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=d6de40b536f6d592de3d0a00626a4dc595d40078", "patch": "@@ -62,6 +62,37 @@ fn object_safety_violations(tcx: TyCtxt<'_>, trait_def_id: DefId) -> &'_ [Object\n     )\n }\n \n+fn is_object_safe(tcx: TyCtxt<'_>, trait_def_id: DefId) -> bool {\n+    let violations = tcx.object_safety_violations(trait_def_id);\n+\n+    if violations.is_empty() {\n+        return true;\n+    }\n+\n+    // If the trait contains any other violations, then let the error reporting path\n+    // report it instead of emitting a warning here.\n+    if violations.iter().all(|violation| {\n+        matches!(\n+            violation,\n+            ObjectSafetyViolation::Method(_, MethodViolationCode::WhereClauseReferencesSelf, _)\n+        )\n+    }) {\n+        for violation in violations {\n+            if let ObjectSafetyViolation::Method(\n+                _,\n+                MethodViolationCode::WhereClauseReferencesSelf,\n+                span,\n+            ) = violation\n+            {\n+                lint_object_unsafe_trait(tcx, *span, trait_def_id, &violation);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    false\n+}\n+\n /// We say a method is *vtable safe* if it can be invoked on a trait\n /// object. Note that object-safe traits can have some\n /// non-vtable-safe methods, so long as they require `Self: Sized` or\n@@ -93,19 +124,6 @@ fn object_safety_violations_for_trait(\n             object_safety_violation_for_method(tcx, trait_def_id, &item)\n                 .map(|(code, span)| ObjectSafetyViolation::Method(item.name, code, span))\n         })\n-        .filter(|violation| {\n-            if let ObjectSafetyViolation::Method(\n-                _,\n-                MethodViolationCode::WhereClauseReferencesSelf,\n-                span,\n-            ) = violation\n-            {\n-                lint_object_unsafe_trait(tcx, *span, trait_def_id, &violation);\n-                false\n-            } else {\n-                true\n-            }\n-        })\n         .collect();\n \n     // Check the trait itself.\n@@ -866,5 +884,5 @@ pub fn contains_illegal_impl_trait_in_trait<'tcx>(\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { object_safety_violations, ..*providers };\n+    *providers = ty::query::Providers { object_safety_violations, is_object_safe, ..*providers };\n }"}]}