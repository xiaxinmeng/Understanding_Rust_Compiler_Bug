{"sha": "95d13fa37db8ddc6a7a45d5748a4484904830e25", "node_id": "C_kwDOAAsO6NoAKDk1ZDEzZmEzN2RiOGRkYzZhN2E0NWQ1NzQ4YTQ0ODQ5MDQ4MzBlMjU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-09T03:51:31Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-11T03:10:21Z"}, "message": "Move a `parse_tt` error case into a separate function.", "tree": {"sha": "066f9f23299bb3d6cbdc0fe687496db63319da08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/066f9f23299bb3d6cbdc0fe687496db63319da08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95d13fa37db8ddc6a7a45d5748a4484904830e25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95d13fa37db8ddc6a7a45d5748a4484904830e25", "html_url": "https://github.com/rust-lang/rust/commit/95d13fa37db8ddc6a7a45d5748a4484904830e25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95d13fa37db8ddc6a7a45d5748a4484904830e25/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "235a87fbd3ab5a7e9d0225fef55dafeb60e76dd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/235a87fbd3ab5a7e9d0225fef55dafeb60e76dd6", "html_url": "https://github.com/rust-lang/rust/commit/235a87fbd3ab5a7e9d0225fef55dafeb60e76dd6"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "dedfd779bb416d7af3459540a860919a7b7244e9", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/95d13fa37db8ddc6a7a45d5748a4484904830e25/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d13fa37db8ddc6a7a45d5748a4484904830e25/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=95d13fa37db8ddc6a7a45d5748a4484904830e25", "patch": "@@ -762,10 +762,7 @@ pub(super) fn parse_tt(\n                         Err(mut err) => {\n                             err.span_label(\n                                 span,\n-                                format!(\n-                                    \"while parsing argument for this `{}` macro fragment\",\n-                                    kind\n-                                ),\n+                                format!(\"while parsing argument for this `{kind}` macro fragment\"),\n                             )\n                             .emit();\n                             return ErrorReported;\n@@ -784,31 +781,45 @@ pub(super) fn parse_tt(\n             (_, _) => {\n                 // We need to call the black-box parser to get some nonterminal, but something is\n                 // wrong.\n-                let nts = bb_items\n-                    .iter()\n-                    .map(|item| match item.top_elts.get_tt(item.idx) {\n-                        TokenTree::MetaVarDecl(_, bind, Some(kind)) => {\n-                            format!(\"{} ('{}')\", kind, bind)\n-                        }\n-                        _ => panic!(),\n-                    })\n-                    .collect::<Vec<String>>()\n-                    .join(\" or \");\n-\n-                return Error(\n+                return bb_items_ambiguity_error(\n+                    macro_name,\n+                    next_items,\n+                    bb_items,\n                     parser.token.span,\n-                    format!(\n-                        \"local ambiguity when calling macro `{macro_name}`: multiple parsing options: {}\",\n-                        match next_items.len() {\n-                            0 => format!(\"built-in NTs {}.\", nts),\n-                            1 => format!(\"built-in NTs {} or 1 other option.\", nts),\n-                            n => format!(\"built-in NTs {} or {} other options.\", nts, n),\n-                        }\n-                    ),\n                 );\n             }\n         }\n \n         assert!(!cur_items.is_empty());\n     }\n }\n+\n+fn bb_items_ambiguity_error<'root, 'tt>(\n+    macro_name: Ident,\n+    next_items: SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,\n+    bb_items: SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,\n+    token_span: rustc_span::Span,\n+) -> NamedParseResult {\n+    let nts = bb_items\n+        .iter()\n+        .map(|item| match item.top_elts.get_tt(item.idx) {\n+            TokenTree::MetaVarDecl(_, bind, Some(kind)) => {\n+                format!(\"{} ('{}')\", kind, bind)\n+            }\n+            _ => panic!(),\n+        })\n+        .collect::<Vec<String>>()\n+        .join(\" or \");\n+\n+    Error(\n+        token_span,\n+        format!(\n+            \"local ambiguity when calling macro `{macro_name}`: multiple parsing options: {}\",\n+            match next_items.len() {\n+                0 => format!(\"built-in NTs {}.\", nts),\n+                1 => format!(\"built-in NTs {} or 1 other option.\", nts),\n+                n => format!(\"built-in NTs {} or {} other options.\", nts, n),\n+            }\n+        ),\n+    )\n+}"}]}