{"sha": "2f7acf00e5d02ae795332c1fa83e41939d6361d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmN2FjZjAwZTVkMDJhZTc5NTMzMmMxZmE4M2U0MTkzOWQ2MzYxZDc=", "commit": {"author": {"name": "sezna", "email": "ahansen2@trinity.edu", "date": "2015-09-29T14:38:52Z"}, "committer": {"name": "Alex", "email": "ahansen2@trinity.edu", "date": "2015-10-02T13:37:21Z"}, "message": "Added punctuation preference\n\nCreate test.rs\n\nDelete test.rs\n\nFixed compile error.\n\nTrying a possible fix on an arithmetic overflow\n\nanother try at the test failure...\n\npassed all tests.\n\nAdded tests and cleaned up logic as per nrc's critiques\n\nDelete string.rs.old\n\nDelete string.rs.bk\n\nMade changes as per nrc's requests.\n\nUpdate string_punctuation.rs\n\nUpdate string_punctuation.rs\n\nfixed logical redundancy", "tree": {"sha": "50182c7081a9ddf814df15c56e046fb28b84df81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50182c7081a9ddf814df15c56e046fb28b84df81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f7acf00e5d02ae795332c1fa83e41939d6361d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7acf00e5d02ae795332c1fa83e41939d6361d7", "html_url": "https://github.com/rust-lang/rust/commit/2f7acf00e5d02ae795332c1fa83e41939d6361d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f7acf00e5d02ae795332c1fa83e41939d6361d7/comments", "author": null, "committer": null, "parents": [{"sha": "9ab2d95119681dc4823a4b1c67bf616178eafa2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab2d95119681dc4823a4b1c67bf616178eafa2a", "html_url": "https://github.com/rust-lang/rust/commit/9ab2d95119681dc4823a4b1c67bf616178eafa2a"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "59ba49928639a60f9eb1b770fdb0be4f1237f333", "filename": "src/string.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2f7acf00e5d02ae795332c1fa83e41939d6361d7/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7acf00e5d02ae795332c1fa83e41939d6361d7/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=2f7acf00e5d02ae795332c1fa83e41939d6361d7", "patch": "@@ -39,6 +39,7 @@ pub fn rewrite_string<'a>(s: &str, fmt: &StringFormat<'a>) -> Option<String> {\n \n     let graphemes = UnicodeSegmentation::graphemes(&*stripped_str, false).collect::<Vec<&str>>();\n     let indent = fmt.offset.to_string(fmt.config);\n+    let punctuation = \":,;.\";\n \n     let mut cur_start = 0;\n     let mut result = String::with_capacity(round_up_to_power_of_two(s.len()));\n@@ -62,11 +63,22 @@ pub fn rewrite_string<'a>(s: &str, fmt: &StringFormat<'a>) -> Option<String> {\n         while !graphemes[cur_end - 1].trim().is_empty() {\n             cur_end -= 1;\n             if cur_end - cur_start < MIN_STRING {\n-                // We can't break at whitespace, fall back to splitting\n-                // anywhere that doesn't break an escape sequence.\n                 cur_end = cur_start + max_chars;\n-                while graphemes[cur_end - 1] == \"\\\\\" {\n-                    cur_end -= 1;\n+                // Look for punctuation to break on.\n+                while (!punctuation.contains(graphemes[cur_end - 1])) && cur_end > 1 {\n+                    if cur_end > 1 {\n+                        cur_end -= 1;\n+                    }\n+                }\n+                // We can't break at whitespace or punctuation, fall back to splitting\n+                // anywhere that doesn't break an escape sequence.\n+                if cur_end < cur_start + MIN_STRING {\n+                    cur_end = cur_start + max_chars;\n+                    while graphemes[cur_end - 1] == \"\\\\\" {\n+                        if cur_end > 1 {\n+                            cur_end -= 1;\n+                        }\n+                    }\n                 }\n                 break;\n             }"}, {"sha": "0a02077f7eb9a8d099daa54c43d8c0c4c7cf2118", "filename": "tests/source/string_punctuation.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f7acf00e5d02ae795332c1fa83e41939d6361d7/tests%2Fsource%2Fstring_punctuation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7acf00e5d02ae795332c1fa83e41939d6361d7/tests%2Fsource%2Fstring_punctuation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstring_punctuation.rs?ref=2f7acf00e5d02ae795332c1fa83e41939d6361d7", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    println!(\"ThisIsAReallyLongStringWithNoSpaces.It_should_prefer_to_break_onpunctuation:Likethisssssssssssss\");\n+    format!(\"{}__{}__{}ItShouldOnlyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyNoticeSemicolonsPeriodsColonsAndCommasAndResortToMid-CharBreaksAfterPunctuation{}{}\",x,y,z,a,b);\n+    println!(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaalhijalfhiigjapdighjapdigjapdighdapighapdighpaidhg;adopgihadoguaadbadgad,qeoihapethae8t0aet8haetadbjtaeg;ooeouthaoeutgadlgajduabgoiuadogabudogubaodugbadgadgadga;adoughaoeugbaouea\");\n+}"}, {"sha": "626bace0f5f7f3e40164d4305d354cf7650cdc39", "filename": "tests/target/string_punctuation.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f7acf00e5d02ae795332c1fa83e41939d6361d7/tests%2Ftarget%2Fstring_punctuation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7acf00e5d02ae795332c1fa83e41939d6361d7/tests%2Ftarget%2Fstring_punctuation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstring_punctuation.rs?ref=2f7acf00e5d02ae795332c1fa83e41939d6361d7", "patch": "@@ -0,0 +1,14 @@\n+fn main() {\n+    println!(\"ThisIsAReallyLongStringWithNoSpaces.It_should_prefer_to_break_onpunctuation:\\\n+              Likethisssssssssssss\");\n+    format!(\"{}__{}__{}ItShouldOnlyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyNoticeSemicolonsPeriodsColo\\\n+             nsAndCommasAndResortToMid-CharBreaksAfterPunctuation{}{}\",\n+            x,\n+            y,\n+            z,\n+            a,\n+            b);\n+    println!(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaalhijalfhiigjapdighjapdigjapdighdapighapdighpaidhg;\\\n+              adopgihadoguaadbadgad,qeoihapethae8t0aet8haetadbjtaeg;\\\n+              ooeouthaoeutgadlgajduabgoiuadogabudogubaodugbadgadgadga;adoughaoeugbaouea\");\n+}"}]}