{"sha": "55df622b35743f521a8a85661b049fe2ea506bdb", "node_id": "C_kwDOAAsO6NoAKDU1ZGY2MjJiMzU3NDNmNTIxYThhODU2NjFiMDQ5ZmUyZWE1MDZiZGI", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-05-30T00:27:03Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-05-30T00:27:03Z"}, "message": "Merge from rustc", "tree": {"sha": "d47cf8aa9d42b4e4287d98ae5101cd14d97228c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d47cf8aa9d42b4e4287d98ae5101cd14d97228c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55df622b35743f521a8a85661b049fe2ea506bdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55df622b35743f521a8a85661b049fe2ea506bdb", "html_url": "https://github.com/rust-lang/rust/commit/55df622b35743f521a8a85661b049fe2ea506bdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55df622b35743f521a8a85661b049fe2ea506bdb/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cff01e1c6976ca348a79b8f80aec3a91276ff9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cff01e1c6976ca348a79b8f80aec3a91276ff9f", "html_url": "https://github.com/rust-lang/rust/commit/4cff01e1c6976ca348a79b8f80aec3a91276ff9f"}, {"sha": "2f7328d970b1ee63d8b62646561923f7f137842e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7328d970b1ee63d8b62646561923f7f137842e", "html_url": "https://github.com/rust-lang/rust/commit/2f7328d970b1ee63d8b62646561923f7f137842e"}], "stats": {"total": 1119, "additions": 692, "deletions": 427}, "files": [{"sha": "d350498bc965a7063406067837d9d44988566a0d", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -44,6 +44,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     | asm::InlineAsmArch::AArch64\n                     | asm::InlineAsmArch::RiscV32\n                     | asm::InlineAsmArch::RiscV64\n+                    | asm::InlineAsmArch::LoongArch64\n             );\n             if !is_stable && !self.tcx.features().asm_experimental_arch {\n                 feature_err("}, {"sha": "5efc5a4e3eea334ed31e12916fae1473de5993c9", "filename": "compiler/rustc_builtin_macros/src/compile_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fcompile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fcompile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcompile_error.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -18,7 +18,7 @@ pub fn expand_compile_error<'cx>(\n         reason = \"diagnostic message is specified by user\"\n     )]\n     #[expect(rustc::untranslatable_diagnostic, reason = \"diagnostic message is specified by user\")]\n-    cx.span_err(sp, var.as_str());\n+    cx.span_err(sp, var.to_string());\n \n     DummyResult::any(sp)\n }"}, {"sha": "9ba98d0a5d187a9d4a35b0ea49b6d35c28cfa1c9", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -68,7 +68,6 @@ pub fn expand_deriving_clone(\n         _ => cx.span_bug(span, \"`#[derive(Clone)]` on trait item or impl item\"),\n     }\n \n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(clone::Clone),\n@@ -82,7 +81,7 @@ pub fn expand_deriving_clone(\n             explicit_self: true,\n             nonself_args: Vec::new(),\n             ret_ty: Self_,\n-            attributes: attrs,\n+            attributes: thin_vec![cx.attr_word(sym::inline, span)],\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Default,\n             combine_substructure: substructure,\n         }],"}, {"sha": "c78a0eb04a074c2d73b66d351ed0640c1406dba4", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -18,11 +18,6 @@ pub fn expand_deriving_eq(\n     is_const: bool,\n ) {\n     let span = cx.with_def_site_ctxt(span);\n-    let attrs = thin_vec![\n-        cx.attr_word(sym::inline, span),\n-        cx.attr_nested_word(sym::doc, sym::hidden, span),\n-        cx.attr_word(sym::no_coverage, span)\n-    ];\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::Eq),\n@@ -36,7 +31,11 @@ pub fn expand_deriving_eq(\n             explicit_self: true,\n             nonself_args: vec![],\n             ret_ty: Unit,\n-            attributes: attrs,\n+            attributes: thin_vec![\n+                cx.attr_word(sym::inline, span),\n+                cx.attr_nested_word(sym::doc, sym::hidden, span),\n+                cx.attr_word(sym::no_coverage, span)\n+            ],\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                 cs_total_eq_assert(a, b, c)"}, {"sha": "4401cf8a9c5650f0768792a3a4167224cbd9701b", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -15,7 +15,6 @@ pub fn expand_deriving_ord(\n     push: &mut dyn FnMut(Annotatable),\n     is_const: bool,\n ) {\n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::Ord),\n@@ -29,7 +28,7 @@ pub fn expand_deriving_ord(\n             explicit_self: true,\n             nonself_args: vec![(self_ref(), sym::other)],\n             ret_ty: Path(path_std!(cmp::Ordering)),\n-            attributes: attrs,\n+            attributes: thin_vec![cx.attr_word(sym::inline, span)],\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| cs_cmp(a, b, c))),\n         }],"}, {"sha": "a71ecc5db7d97def9041cb8d59622d4b6c5589ff", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -82,14 +82,13 @@ pub fn expand_deriving_partial_eq(\n \n     // No need to generate `ne`, the default suffices, and not generating it is\n     // faster.\n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n     let methods = vec![MethodDef {\n         name: sym::eq,\n         generics: Bounds::empty(),\n         explicit_self: true,\n         nonself_args: vec![(self_ref(), sym::other)],\n         ret_ty: Path(path_local!(bool)),\n-        attributes: attrs,\n+        attributes: thin_vec![cx.attr_word(sym::inline, span)],\n         fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n         combine_substructure: combine_substructure(Box::new(|a, b, c| cs_eq(a, b, c))),\n     }];"}, {"sha": "54b6cb7d71301f97c16370fcf880d2176bf1e5c5", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -19,8 +19,6 @@ pub fn expand_deriving_partial_ord(\n     let ret_ty =\n         Path(Path::new_(pathvec_std!(option::Option), vec![Box::new(ordering_ty)], PathKind::Std));\n \n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n-\n     // Order in which to perform matching\n     let tag_then_data = if let Annotatable::Item(item) = item\n         && let ItemKind::Enum(def, _) = &item.kind {\n@@ -48,7 +46,7 @@ pub fn expand_deriving_partial_ord(\n         explicit_self: true,\n         nonself_args: vec![(self_ref(), sym::other)],\n         ret_ty,\n-        attributes: attrs,\n+        attributes: thin_vec![cx.attr_word(sym::inline, span)],\n         fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n         combine_substructure: combine_substructure(Box::new(|cx, span, substr| {\n             cs_partial_cmp(cx, span, substr, tag_then_data)"}, {"sha": "07b172bc757b2ae7f26e6c026431caaa9c97da89", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -20,7 +20,6 @@ pub fn expand_deriving_default(\n ) {\n     item.visit_with(&mut DetectNonVariantDefaultAttr { cx });\n \n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n     let trait_def = TraitDef {\n         span,\n         path: Path::new(vec![kw::Default, sym::Default]),\n@@ -34,7 +33,7 @@ pub fn expand_deriving_default(\n             explicit_self: false,\n             nonself_args: Vec::new(),\n             ret_ty: Self_,\n-            attributes: attrs,\n+            attributes: thin_vec![cx.attr_word(sym::inline, span)],\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Default,\n             combine_substructure: combine_substructure(Box::new(|cx, trait_span, substr| {\n                 match substr.fields {"}, {"sha": "101401f9c85b7929c9582086fc8e5b62e515f74b", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -1,7 +1,7 @@\n use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::{path_std, pathvec_std};\n-use rustc_ast::{AttrVec, MetaItem, Mutability};\n+use rustc_ast::{MetaItem, Mutability};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -33,7 +33,7 @@ pub fn expand_deriving_hash(\n             explicit_self: true,\n             nonself_args: vec![(Ref(Box::new(Path(arg)), Mutability::Mut), sym::state)],\n             ret_ty: Unit,\n-            attributes: AttrVec::new(),\n+            attributes: thin_vec![cx.attr_word(sym::inline, span)],\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                 hash_substructure(a, b, c)"}, {"sha": "f1ab279dababf5daf87d3eaac0fc8359cb86a0af", "filename": "compiler/rustc_builtin_macros/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_builtin_macros%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ferrors.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -377,7 +377,7 @@ impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for EnvNotDefined {\n                 rustc::untranslatable_diagnostic,\n                 reason = \"cannot translate user-provided messages\"\n             )]\n-            handler.struct_diagnostic(msg.as_str())\n+            handler.struct_diagnostic(msg.to_string())\n         } else {\n             handler.struct_diagnostic(crate::fluent_generated::builtin_macros_env_not_defined)\n         };"}, {"sha": "f8bb9bf2bb50bcc61fc4e0c66f395b96584bfd9a", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -23,7 +23,7 @@ use rustc_session::utils::NativeLibKind;\n use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::crt_objects::{CrtObjects, LinkSelfContainedDefault};\n-use rustc_target::spec::{Cc, LinkOutputKind, LinkerFlavor, LinkerFlavorCli, Lld, PanicStrategy};\n+use rustc_target::spec::{Cc, LinkOutputKind, LinkerFlavor, Lld, PanicStrategy};\n use rustc_target::spec::{RelocModel, RelroLevel, SanitizerSet, SplitDebuginfo};\n \n use super::archive::{ArchiveBuilder, ArchiveBuilderBuilder};\n@@ -893,7 +893,7 @@ fn link_natively<'a>(\n                     linker_path: &linker_path,\n                     exit_status: prog.status,\n                     command: &cmd,\n-                    escaped_output: &escaped_output,\n+                    escaped_output,\n                 };\n                 sess.diagnostic().emit_err(err);\n                 // If MSVC's `link.exe` was expected but the return code\n@@ -1302,44 +1302,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                 let stem = linker.file_stem().and_then(|stem| stem.to_str()).unwrap_or_else(|| {\n                     sess.emit_fatal(errors::LinkerFileStem);\n                 });\n-\n-                // Remove any version postfix.\n-                let stem = stem\n-                    .rsplit_once('-')\n-                    .and_then(|(lhs, rhs)| rhs.chars().all(char::is_numeric).then_some(lhs))\n-                    .unwrap_or(stem);\n-\n-                // GCC/Clang can have an optional target prefix.\n-                let flavor = if stem == \"emcc\" {\n-                    LinkerFlavor::EmCc\n-                } else if stem == \"gcc\"\n-                    || stem.ends_with(\"-gcc\")\n-                    || stem == \"g++\"\n-                    || stem.ends_with(\"-g++\")\n-                    || stem == \"clang\"\n-                    || stem.ends_with(\"-clang\")\n-                    || stem == \"clang++\"\n-                    || stem.ends_with(\"-clang++\")\n-                {\n-                    LinkerFlavor::from_cli(LinkerFlavorCli::Gcc, &sess.target)\n-                } else if stem == \"wasm-ld\" || stem.ends_with(\"-wasm-ld\") {\n-                    LinkerFlavor::WasmLld(Cc::No)\n-                } else if stem == \"ld\" || stem.ends_with(\"-ld\") {\n-                    LinkerFlavor::from_cli(LinkerFlavorCli::Ld, &sess.target)\n-                } else if stem == \"ld.lld\" {\n-                    LinkerFlavor::Gnu(Cc::No, Lld::Yes)\n-                } else if stem == \"link\" {\n-                    LinkerFlavor::Msvc(Lld::No)\n-                } else if stem == \"lld-link\" {\n-                    LinkerFlavor::Msvc(Lld::Yes)\n-                } else if stem == \"lld\" || stem == \"rust-lld\" {\n-                    let lld_flavor = sess.target.linker_flavor.lld_flavor();\n-                    LinkerFlavor::from_cli(LinkerFlavorCli::Lld(lld_flavor), &sess.target)\n-                } else {\n-                    // fall back to the value in the target spec\n-                    sess.target.linker_flavor\n-                };\n-\n+                let flavor = sess.target.linker_flavor.with_linker_hints(stem);\n                 Some((linker, flavor))\n             }\n             (None, None) => None,\n@@ -1349,7 +1312,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n     // linker and linker flavor specified via command line have precedence over what the target\n     // specification specifies\n     let linker_flavor =\n-        sess.opts.cg.linker_flavor.map(|flavor| LinkerFlavor::from_cli(flavor, &sess.target));\n+        sess.opts.cg.linker_flavor.map(|flavor| sess.target.linker_flavor.with_cli_hints(flavor));\n     if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), linker_flavor) {\n         return ret;\n     }"}, {"sha": "10e9e5588f6cc6569096a69002c71f4d82d8c205", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -1800,7 +1800,7 @@ impl SharedEmitterMain {\n                     handler.emit_diagnostic(&mut d);\n                 }\n                 Ok(SharedEmitterMessage::InlineAsmError(cookie, msg, level, source)) => {\n-                    let msg = msg.strip_prefix(\"error: \").unwrap_or(&msg);\n+                    let msg = msg.strip_prefix(\"error: \").unwrap_or(&msg).to_string();\n \n                     let mut err = match level {\n                         Level::Error { lint: false } => sess.struct_err(msg).forget_guarantee(),"}, {"sha": "bf37ac69f2d1e9430af11b61b799d60584f95545", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -336,7 +336,7 @@ pub struct LinkingFailed<'a> {\n     pub linker_path: &'a PathBuf,\n     pub exit_status: ExitStatus,\n     pub command: &'a Command,\n-    pub escaped_output: &'a str,\n+    pub escaped_output: String,\n }\n \n impl IntoDiagnostic<'_> for LinkingFailed<'_> {\n@@ -345,11 +345,13 @@ impl IntoDiagnostic<'_> for LinkingFailed<'_> {\n         diag.set_arg(\"linker_path\", format!(\"{}\", self.linker_path.display()));\n         diag.set_arg(\"exit_status\", format!(\"{}\", self.exit_status));\n \n-        diag.note(format!(\"{:?}\", self.command)).note(self.escaped_output);\n+        let contains_undefined_ref = self.escaped_output.contains(\"undefined reference to\");\n+\n+        diag.note(format!(\"{:?}\", self.command)).note(self.escaped_output.to_string());\n \n         // Trying to match an error from OS linkers\n         // which by now we have no way to translate.\n-        if self.escaped_output.contains(\"undefined reference to\") {\n+        if contains_undefined_ref {\n             diag.note(fluent::codegen_ssa_extern_funcs_not_found)\n                 .note(fluent::codegen_ssa_specify_libraries_to_link)\n                 .note(fluent::codegen_ssa_use_cargo_directive);"}, {"sha": "14888cf4d75c05386352232109cd3c209aa0ff62", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -1258,7 +1258,7 @@ pub fn install_ice_hook(bug_report_url: &'static str, extra_info: fn(&Handler))\n         if let Some(msg) = info.payload().downcast_ref::<String>() {\n             if msg.starts_with(\"failed printing to stdout: \") && msg.ends_with(\"(os error 232)\") {\n                 // the error code is already going to be reported when the panic unwinds up the stack\n-                let _ = early_error_no_abort(ErrorOutputType::default(), msg.as_str());\n+                let _ = early_error_no_abort(ErrorOutputType::default(), msg.clone());\n                 return;\n             }\n         };"}, {"sha": "8ca3f03ce156fec63cf82b37bd82fcd506be6721", "filename": "compiler/rustc_error_codes/src/error_codes/E0133.md", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0133.md", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0133.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0133.md?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -1,4 +1,4 @@\n-Unsafe code was used outside of an unsafe function or block.\n+Unsafe code was used outside of an unsafe block.\n \n Erroneous code example:\n \n@@ -30,4 +30,21 @@ fn main() {\n \n See the [unsafe section][unsafe-section] of the Book for more details.\n \n+#### Unsafe code in functions\n+\n+Unsafe code is currently accepted in unsafe functions, but that is being phased\n+out in favor of requiring unsafe blocks here too.\n+\n+```\n+unsafe fn f() { return; }\n+\n+unsafe fn g() {\n+    f(); // Is accepted, but no longer recommended\n+    unsafe { f(); } // Recommended way to write this\n+}\n+```\n+\n+Linting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\n+is `allow` by default but will be upgraded to `warn` in a future edition.\n+\n [unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html"}, {"sha": "2a97c4ff7aee459fad27b1110e8cc3078eb97c80", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -263,8 +263,7 @@ type FluentId = Cow<'static, str>;\n #[rustc_diagnostic_item = \"SubdiagnosticMessage\"]\n pub enum SubdiagnosticMessage {\n     /// Non-translatable diagnostic message.\n-    // FIXME(davidtwco): can a `Cow<'static, str>` be used here?\n-    Str(String),\n+    Str(Cow<'static, str>),\n     /// Translatable message which has already been translated eagerly.\n     ///\n     /// Some diagnostics have repeated subdiagnostics where the same interpolated variables would\n@@ -275,8 +274,7 @@ pub enum SubdiagnosticMessage {\n     /// incorrect diagnostics. Eager translation results in translation for a subdiagnostic\n     /// happening immediately after the subdiagnostic derive's logic has been run. This variant\n     /// stores messages which have been translated eagerly.\n-    // FIXME(#100717): can a `Cow<'static, str>` be used here?\n-    Eager(String),\n+    Eager(Cow<'static, str>),\n     /// Identifier of a Fluent message. Instances of this variant are generated by the\n     /// `Subdiagnostic` derive.\n     FluentIdentifier(FluentId),\n@@ -290,17 +288,17 @@ pub enum SubdiagnosticMessage {\n \n impl From<String> for SubdiagnosticMessage {\n     fn from(s: String) -> Self {\n-        SubdiagnosticMessage::Str(s)\n+        SubdiagnosticMessage::Str(Cow::Owned(s))\n     }\n }\n-impl<'a> From<&'a str> for SubdiagnosticMessage {\n-    fn from(s: &'a str) -> Self {\n-        SubdiagnosticMessage::Str(s.to_string())\n+impl From<&'static str> for SubdiagnosticMessage {\n+    fn from(s: &'static str) -> Self {\n+        SubdiagnosticMessage::Str(Cow::Borrowed(s))\n     }\n }\n impl From<Cow<'static, str>> for SubdiagnosticMessage {\n     fn from(s: Cow<'static, str>) -> Self {\n-        SubdiagnosticMessage::Str(s.to_string())\n+        SubdiagnosticMessage::Str(s)\n     }\n }\n \n@@ -312,8 +310,7 @@ impl From<Cow<'static, str>> for SubdiagnosticMessage {\n #[rustc_diagnostic_item = \"DiagnosticMessage\"]\n pub enum DiagnosticMessage {\n     /// Non-translatable diagnostic message.\n-    // FIXME(#100717): can a `Cow<'static, str>` be used here?\n-    Str(String),\n+    Str(Cow<'static, str>),\n     /// Translatable message which has already been translated eagerly.\n     ///\n     /// Some diagnostics have repeated subdiagnostics where the same interpolated variables would\n@@ -324,8 +321,7 @@ pub enum DiagnosticMessage {\n     /// incorrect diagnostics. Eager translation results in translation for a subdiagnostic\n     /// happening immediately after the subdiagnostic derive's logic has been run. This variant\n     /// stores messages which have been translated eagerly.\n-    // FIXME(#100717): can a `Cow<'static, str>` be used here?\n-    Eager(String),\n+    Eager(Cow<'static, str>),\n     /// Identifier for a Fluent message (with optional attribute) corresponding to the diagnostic\n     /// message.\n     ///\n@@ -363,17 +359,17 @@ impl DiagnosticMessage {\n \n impl From<String> for DiagnosticMessage {\n     fn from(s: String) -> Self {\n-        DiagnosticMessage::Str(s)\n+        DiagnosticMessage::Str(Cow::Owned(s))\n     }\n }\n-impl<'a> From<&'a str> for DiagnosticMessage {\n-    fn from(s: &'a str) -> Self {\n-        DiagnosticMessage::Str(s.to_string())\n+impl From<&'static str> for DiagnosticMessage {\n+    fn from(s: &'static str) -> Self {\n+        DiagnosticMessage::Str(Cow::Borrowed(s))\n     }\n }\n impl From<Cow<'static, str>> for DiagnosticMessage {\n     fn from(s: Cow<'static, str>) -> Self {\n-        DiagnosticMessage::Str(s.to_string())\n+        DiagnosticMessage::Str(s)\n     }\n }\n "}, {"sha": "488f2d67ee59f53801178e89777a7197333f5cc3", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -352,14 +352,9 @@ impl Diagnostic {\n \n     /// Labels all the given spans with the provided label.\n     /// See [`Self::span_label()`] for more information.\n-    pub fn span_labels(\n-        &mut self,\n-        spans: impl IntoIterator<Item = Span>,\n-        label: impl AsRef<str>,\n-    ) -> &mut Self {\n-        let label = label.as_ref();\n+    pub fn span_labels(&mut self, spans: impl IntoIterator<Item = Span>, label: &str) -> &mut Self {\n         for span in spans {\n-            self.span_label(span, label);\n+            self.span_label(span, label.to_string());\n         }\n         self\n     }\n@@ -394,17 +389,18 @@ impl Diagnostic {\n         expected: DiagnosticStyledString,\n         found: DiagnosticStyledString,\n     ) -> &mut Self {\n-        let mut msg: Vec<_> = vec![(\"required when trying to coerce from type `\", Style::NoStyle)];\n+        let mut msg: Vec<_> =\n+            vec![(Cow::from(\"required when trying to coerce from type `\"), Style::NoStyle)];\n         msg.extend(expected.0.iter().map(|x| match *x {\n-            StringPart::Normal(ref s) => (s.as_str(), Style::NoStyle),\n-            StringPart::Highlighted(ref s) => (s.as_str(), Style::Highlight),\n+            StringPart::Normal(ref s) => (Cow::from(s.clone()), Style::NoStyle),\n+            StringPart::Highlighted(ref s) => (Cow::from(s.clone()), Style::Highlight),\n         }));\n-        msg.push((\"` to type '\", Style::NoStyle));\n+        msg.push((Cow::from(\"` to type '\"), Style::NoStyle));\n         msg.extend(found.0.iter().map(|x| match *x {\n-            StringPart::Normal(ref s) => (s.as_str(), Style::NoStyle),\n-            StringPart::Highlighted(ref s) => (s.as_str(), Style::Highlight),\n+            StringPart::Normal(ref s) => (Cow::from(s.clone()), Style::NoStyle),\n+            StringPart::Highlighted(ref s) => (Cow::from(s.clone()), Style::Highlight),\n         }));\n-        msg.push((\"`\", Style::NoStyle));\n+        msg.push((Cow::from(\"`\"), Style::NoStyle));\n \n         // For now, just attach these as notes\n         self.highlighted_note(msg);"}, {"sha": "7d9d0c76450d8fbb0f707889aa7f35bc683478d7", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -558,7 +558,7 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n         }\n \n         // Take the `Diagnostic` by replacing it with a dummy.\n-        let dummy = Diagnostic::new(Level::Allow, DiagnosticMessage::Str(\"\".to_string()));\n+        let dummy = Diagnostic::new(Level::Allow, DiagnosticMessage::from(\"\"));\n         let diagnostic = std::mem::replace(&mut *self.inner.diagnostic, dummy);\n \n         // Disable the ICE on `Drop`.\n@@ -627,7 +627,7 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n     pub fn span_labels(\n         &mut self,\n         spans: impl IntoIterator<Item = Span>,\n-        label: impl AsRef<str>,\n+        label: &str,\n     ) -> &mut Self);\n \n     forward!(pub fn note_expected_found(\n@@ -781,8 +781,8 @@ impl Drop for DiagnosticBuilderInner<'_> {\n                 if !panicking() {\n                     handler.emit_diagnostic(&mut Diagnostic::new(\n                         Level::Bug,\n-                        DiagnosticMessage::Str(\n-                            \"the following error was constructed but not emitted\".to_string(),\n+                        DiagnosticMessage::from(\n+                            \"the following error was constructed but not emitted\",\n                         ),\n                     ));\n                     handler.emit_diagnostic(&mut self.diagnostic);"}, {"sha": "d8c997b49a16b53d15356ef6b8601c779a75ab1e", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -367,7 +367,7 @@ pub trait Emitter: Translate {\n \n                 children.push(SubDiagnostic {\n                     level: Level::Note,\n-                    message: vec![(DiagnosticMessage::Str(msg), Style::NoStyle)],\n+                    message: vec![(DiagnosticMessage::from(msg), Style::NoStyle)],\n                     span: MultiSpan::new(),\n                     render_span: None,\n                 });"}, {"sha": "6c5f3e62454ab7ba9accab1bcbca35b48b8f30a3", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -628,7 +628,7 @@ impl Handler {\n         message: DiagnosticMessage,\n         args: impl Iterator<Item = DiagnosticArg<'a, 'static>>,\n     ) -> SubdiagnosticMessage {\n-        SubdiagnosticMessage::Eager(self.eagerly_translate_to_string(message, args))\n+        SubdiagnosticMessage::Eager(Cow::from(self.eagerly_translate_to_string(message, args)))\n     }\n \n     /// Translate `message` eagerly with `args` to `String`.\n@@ -1450,14 +1450,14 @@ impl HandlerInner {\n         self.emit_stashed_diagnostics();\n \n         let warnings = match self.deduplicated_warn_count {\n-            0 => String::new(),\n-            1 => \"1 warning emitted\".to_string(),\n-            count => format!(\"{count} warnings emitted\"),\n+            0 => Cow::from(\"\"),\n+            1 => Cow::from(\"1 warning emitted\"),\n+            count => Cow::from(format!(\"{count} warnings emitted\")),\n         };\n         let errors = match self.deduplicated_err_count {\n-            0 => String::new(),\n-            1 => \"aborting due to previous error\".to_string(),\n-            count => format!(\"aborting due to {count} previous errors\"),\n+            0 => Cow::from(\"\"),\n+            1 => Cow::from(\"aborting due to previous error\"),\n+            count => Cow::from(format!(\"aborting due to {count} previous errors\")),\n         };\n         if self.treat_err_as_bug() {\n             return;"}, {"sha": "0d43b30474b0651c500e3b726f7159acfdd8cbd9", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -1154,7 +1154,7 @@ impl<'a> ExtCtxt<'a> {\n         // Fixme: does this result in errors?\n         self.expansions.clear();\n     }\n-    pub fn bug(&self, msg: &str) -> ! {\n+    pub fn bug(&self, msg: &'static str) -> ! {\n         self.sess.parse_sess.span_diagnostic.bug(msg);\n     }\n     pub fn trace_macros(&self) -> bool {\n@@ -1224,7 +1224,7 @@ pub fn resolve_path(\n pub fn expr_to_spanned_string<'a>(\n     cx: &'a mut ExtCtxt<'_>,\n     expr: P<ast::Expr>,\n-    err_msg: &str,\n+    err_msg: &'static str,\n ) -> Result<(Symbol, ast::StrStyle, Span), Option<(DiagnosticBuilder<'a, ErrorGuaranteed>, bool)>> {\n     // Perform eager expansion on the expression.\n     // We want to be able to handle e.g., `concat!(\"foo\", \"bar\")`.\n@@ -1262,7 +1262,7 @@ pub fn expr_to_spanned_string<'a>(\n pub fn expr_to_string(\n     cx: &mut ExtCtxt<'_>,\n     expr: P<ast::Expr>,\n-    err_msg: &str,\n+    err_msg: &'static str,\n ) -> Option<(Symbol, ast::StrStyle)> {\n     expr_to_spanned_string(cx, expr, err_msg)\n         .map_err(|err| {"}, {"sha": "3593bed2d022ccdb9345abefd885df32a2bf0779", "filename": "compiler/rustc_expand/src/mbe/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -170,7 +170,7 @@ impl<'a, 'cx, 'matcher> Tracker<'matcher> for CollectTrackerAndEmitter<'a, 'cx,\n             }\n             Error(err_sp, msg) => {\n                 let span = err_sp.substitute_dummy(self.root_span);\n-                self.cx.struct_span_err(span, msg.as_str()).emit();\n+                self.cx.struct_span_err(span, msg.clone()).emit();\n                 self.result = Some(DummyResult::any(span));\n             }\n             ErrorReported(_) => self.result = Some(DummyResult::any(self.root_span)),\n@@ -222,7 +222,7 @@ pub(super) fn emit_frag_parse_err(\n     {\n         let msg = &e.message[0];\n         e.message[0] = (\n-            DiagnosticMessage::Str(format!(\n+            DiagnosticMessage::from(format!(\n                 \"macro expansion ends with an incomplete expression: {}\",\n                 message.replace(\", found `<eof>`\", \"\"),\n             )),\n@@ -313,9 +313,9 @@ pub(super) fn annotate_doc_comment(err: &mut Diagnostic, sm: &SourceMap, span: S\n \n /// Generates an appropriate parsing failure message. For EOF, this is \"unexpected end...\". For\n /// other tokens, this is \"unexpected token...\".\n-pub(super) fn parse_failure_msg(tok: &Token) -> String {\n+pub(super) fn parse_failure_msg(tok: &Token) -> Cow<'static, str> {\n     match tok.kind {\n-        token::Eof => \"unexpected end of macro invocation\".to_string(),\n-        _ => format!(\"no rules expected the token `{}`\", pprust::token_to_string(tok),),\n+        token::Eof => Cow::from(\"unexpected end of macro invocation\"),\n+        _ => Cow::from(format!(\"no rules expected the token `{}`\", pprust::token_to_string(tok))),\n     }\n }"}, {"sha": "18b6537a8e9045fd0b9b111c8bb6e104c6b4b66d", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -25,6 +25,7 @@ use rustc_trait_selection::traits::outlives_bounds::InferCtxtExt as _;\n use rustc_trait_selection::traits::{\n     self, ObligationCause, ObligationCauseCode, ObligationCtxt, Reveal,\n };\n+use std::borrow::Cow;\n use std::iter;\n \n /// Checks that a method from an impl conforms to the signature of\n@@ -684,7 +685,7 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n                 &cause,\n                 hir.get_if_local(impl_m.def_id)\n                     .and_then(|node| node.fn_decl())\n-                    .map(|decl| (decl.output.span(), \"return type in trait\".to_owned())),\n+                    .map(|decl| (decl.output.span(), Cow::from(\"return type in trait\"))),\n                 Some(infer::ValuePairs::Terms(ExpectedFound {\n                     expected: trait_return_ty.into(),\n                     found: impl_return_ty.into(),\n@@ -963,7 +964,7 @@ fn report_trait_method_mismatch<'tcx>(\n     infcx.err_ctxt().note_type_err(\n         &mut diag,\n         &cause,\n-        trait_err_span.map(|sp| (sp, \"type in trait\".to_owned())),\n+        trait_err_span.map(|sp| (sp, Cow::from(\"type in trait\"))),\n         Some(infer::ValuePairs::Sigs(ExpectedFound { expected: trait_sig, found: impl_sig })),\n         terr,\n         false,\n@@ -1731,7 +1732,7 @@ pub(super) fn compare_impl_const_raw(\n         infcx.err_ctxt().note_type_err(\n             &mut diag,\n             &cause,\n-            trait_c_span.map(|span| (span, \"type in trait\".to_owned())),\n+            trait_c_span.map(|span| (span, Cow::from(\"type in trait\"))),\n             Some(infer::ValuePairs::Terms(ExpectedFound {\n                 expected: trait_ty.into(),\n                 found: impl_ty.into(),"}, {"sha": "fbd4a577d68ff68a3a5d8140a6d511b6f50af0f1", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -121,10 +121,11 @@ pub fn intrinsic_operation_unsafety(tcx: TyCtxt<'_>, intrinsic_id: DefId) -> hir\n     if has_safe_attr != is_in_list {\n         tcx.sess.struct_span_err(\n             tcx.def_span(intrinsic_id),\n-            DiagnosticMessage::Str(format!(\n-                    \"intrinsic safety mismatch between list of intrinsics within the compiler and core library intrinsics for intrinsic `{}`\",\n-                    tcx.item_name(intrinsic_id)\n-        ))).emit();\n+            DiagnosticMessage::from(format!(\n+                \"intrinsic safety mismatch between list of intrinsics within the compiler and core library intrinsics for intrinsic `{}`\",\n+                tcx.item_name(intrinsic_id)\n+            )\n+        )).emit();\n     }\n \n     is_in_list"}, {"sha": "427d6f8803c13c8773f57d8ad6e3cf238f1984a3", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -122,7 +122,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n \n                     self.fcx\n                         .need_type_info_err_in_generator(self.kind, span, unresolved_term)\n-                        .span_note(yield_data.span, &*note)\n+                        .span_note(yield_data.span, note)\n                         .emit();\n                 }\n             } else {\n@@ -686,7 +686,7 @@ fn check_must_not_suspend_def(\n                 // Add optional reason note\n                 if let Some(note) = attr.value_str() {\n                     // FIXME(guswynn): consider formatting this better\n-                    lint.span_note(data.source_span, note.as_str());\n+                    lint.span_note(data.source_span, note.to_string());\n                 }\n \n                 // Add some quick suggestions on what to do"}, {"sha": "f8a253c894991b95e3a703248db7a4da96717638", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -76,6 +76,7 @@ use rustc_middle::ty::{\n };\n use rustc_span::{sym, symbol::kw, BytePos, DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n+use std::borrow::Cow;\n use std::ops::{ControlFlow, Deref};\n use std::path::PathBuf;\n use std::{cmp, fmt, iter};\n@@ -1470,7 +1471,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         &self,\n         diag: &mut Diagnostic,\n         cause: &ObligationCause<'tcx>,\n-        secondary_span: Option<(Span, String)>,\n+        secondary_span: Option<(Span, Cow<'static, str>)>,\n         mut values: Option<ValuePairs<'tcx>>,\n         terr: TypeError<'tcx>,\n         swap_secondary_and_primary: bool,\n@@ -1629,7 +1630,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n         };\n \n-        let mut label_or_note = |span: Span, msg: &str| {\n+        let mut label_or_note = |span: Span, msg: Cow<'static, str>| {\n             if (prefer_label && is_simple_error) || &[span] == diag.span.primary_spans() {\n                 diag.span_label(span, msg);\n             } else {\n@@ -1643,15 +1644,15 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     ..\n                 })) = values\n                 {\n-                    format!(\"expected this to be `{}`\", expected)\n+                    Cow::from(format!(\"expected this to be `{}`\", expected))\n                 } else {\n-                    terr.to_string(self.tcx).to_string()\n+                    terr.to_string(self.tcx)\n                 };\n-                label_or_note(sp, &terr);\n-                label_or_note(span, &msg);\n+                label_or_note(sp, terr);\n+                label_or_note(span, msg);\n             } else {\n-                label_or_note(span, &terr.to_string(self.tcx));\n-                label_or_note(sp, &msg);\n+                label_or_note(span, terr.to_string(self.tcx));\n+                label_or_note(sp, msg);\n             }\n         } else {\n             if let Some(values) = values\n@@ -1663,12 +1664,12 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 let expected = with_forced_trimmed_paths!(e.sort_string(self.tcx));\n                 let found = with_forced_trimmed_paths!(f.sort_string(self.tcx));\n                 if expected == found {\n-                    label_or_note(span, &terr.to_string(self.tcx));\n+                    label_or_note(span, terr.to_string(self.tcx));\n                 } else {\n-                    label_or_note(span, &format!(\"expected {expected}, found {found}\"));\n+                    label_or_note(span, Cow::from(format!(\"expected {expected}, found {found}\")));\n                 }\n             } else {\n-                label_or_note(span, &terr.to_string(self.tcx));\n+                label_or_note(span, terr.to_string(self.tcx));\n             }\n         }\n "}, {"sha": "d1f110472c9278c29da58ffd35de0939208819bb", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -234,13 +234,13 @@ impl<T> Trait<T> for X {\n                         );\n                     }\n                     (_, ty::Alias(ty::Projection | ty::Inherent, proj_ty)) if !tcx.is_impl_trait_in_trait(proj_ty.def_id) => {\n-                        let msg = format!(\n+                        let msg = || format!(\n                             \"consider constraining the associated type `{}` to `{}`\",\n                             values.found, values.expected,\n                         );\n                         if !(self.suggest_constraining_opaque_associated_type(\n                             diag,\n-                            &msg,\n+                            msg,\n                             proj_ty,\n                             values.expected,\n                         ) || self.suggest_constraint(\n@@ -250,7 +250,7 @@ impl<T> Trait<T> for X {\n                             proj_ty,\n                             values.expected,\n                         )) {\n-                            diag.help(msg);\n+                            diag.help(msg());\n                             diag.note(\n                                 \"for more information, visit \\\n                                 https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\",\n@@ -308,7 +308,7 @@ impl<T> Trait<T> for X {\n     fn suggest_constraint(\n         &self,\n         diag: &mut Diagnostic,\n-        msg: &str,\n+        msg: impl Fn() -> String,\n         body_owner_def_id: DefId,\n         proj_ty: &ty::AliasTy<'tcx>,\n         ty: Ty<'tcx>,\n@@ -340,7 +340,7 @@ impl<T> Trait<T> for X {\n                         assoc,\n                         assoc_substs,\n                         ty,\n-                        msg,\n+                        &msg,\n                         false,\n                     ) {\n                         return true;\n@@ -374,10 +374,12 @@ impl<T> Trait<T> for X {\n     ) {\n         let tcx = self.tcx;\n \n-        let msg = format!(\n-            \"consider constraining the associated type `{}` to `{}`\",\n-            values.expected, values.found\n-        );\n+        let msg = || {\n+            format!(\n+                \"consider constraining the associated type `{}` to `{}`\",\n+                values.expected, values.found\n+            )\n+        };\n         let body_owner = tcx.hir().get_if_local(body_owner_def_id);\n         let current_method_ident = body_owner.and_then(|n| n.ident()).map(|i| i.name);\n \n@@ -428,10 +430,11 @@ impl<T> Trait<T> for X {\n             if callable_scope {\n                 diag.help(format!(\n                     \"{} or calling a method that returns `{}`\",\n-                    msg, values.expected\n+                    msg(),\n+                    values.expected\n                 ));\n             } else {\n-                diag.help(msg);\n+                diag.help(msg());\n             }\n             diag.note(\n                 \"for more information, visit \\\n@@ -463,7 +466,7 @@ fn foo(&self) -> Self::T { String::new() }\n     fn suggest_constraining_opaque_associated_type(\n         &self,\n         diag: &mut Diagnostic,\n-        msg: &str,\n+        msg: impl Fn() -> String,\n         proj_ty: &ty::AliasTy<'tcx>,\n         ty: Ty<'tcx>,\n     ) -> bool {\n@@ -635,7 +638,7 @@ fn foo(&self) -> Self::T { String::new() }\n         assoc: ty::AssocItem,\n         assoc_substs: &[ty::GenericArg<'tcx>],\n         ty: Ty<'tcx>,\n-        msg: &str,\n+        msg: impl Fn() -> String,\n         is_bound_surely_present: bool,\n     ) -> bool {\n         // FIXME: we would want to call `resolve_vars_if_possible` on `ty` before suggesting.\n@@ -678,7 +681,7 @@ fn foo(&self) -> Self::T { String::new() }\n         assoc: ty::AssocItem,\n         assoc_substs: &[ty::GenericArg<'tcx>],\n         ty: Ty<'tcx>,\n-        msg: &str,\n+        msg: impl Fn() -> String,\n     ) -> bool {\n         let tcx = self.tcx;\n \n@@ -693,7 +696,7 @@ fn foo(&self) -> Self::T { String::new() }\n                 let item_args = self.format_generic_args(assoc_substs);\n                 (span.shrink_to_hi(), format!(\"<{}{} = {}>\", assoc.ident(tcx), item_args, ty))\n             };\n-            diag.span_suggestion_verbose(span, msg, sugg, MaybeIncorrect);\n+            diag.span_suggestion_verbose(span, msg(), sugg, MaybeIncorrect);\n             return true;\n         }\n         false"}, {"sha": "68167487a1bd48e55a17535d50e2221f723c5b86", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -39,7 +39,7 @@ impl AddToDiagnostic for OverruledAttributeSub {\n                 diag.span_label(span, fluent::lint_node_source);\n                 if let Some(rationale) = reason {\n                     #[allow(rustc::untranslatable_diagnostic)]\n-                    diag.note(rationale.as_str());\n+                    diag.note(rationale.to_string());\n                 }\n             }\n             OverruledAttributeSub::CommandLineSource => {"}, {"sha": "6b4d01551ae9b171dab608d594267a507a263684", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -1527,7 +1527,7 @@ impl<'a> DecorateLint<'a, ()> for UnusedDef<'_, '_> {\n         diag.set_arg(\"def\", self.cx.tcx.def_path_str(self.def_id));\n         // check for #[must_use = \"...\"]\n         if let Some(note) = self.note {\n-            diag.note(note.as_str());\n+            diag.note(note.to_string());\n         }\n         if let Some(sugg) = self.suggestion {\n             diag.subdiagnostic(sugg);"}, {"sha": "a89d7b464e2e92033b0c2441cd0e20d41579e346", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -666,31 +666,30 @@ impl<'a> CrateLocator<'a> {\n             return None;\n         }\n \n-        let root = metadata.get_root();\n-        if root.is_proc_macro_crate() != self.is_proc_macro {\n+        let header = metadata.get_header();\n+        if header.is_proc_macro_crate != self.is_proc_macro {\n             info!(\n                 \"Rejecting via proc macro: expected {} got {}\",\n-                self.is_proc_macro,\n-                root.is_proc_macro_crate(),\n+                self.is_proc_macro, header.is_proc_macro_crate,\n             );\n             return None;\n         }\n \n-        if self.exact_paths.is_empty() && self.crate_name != root.name() {\n+        if self.exact_paths.is_empty() && self.crate_name != header.name {\n             info!(\"Rejecting via crate name\");\n             return None;\n         }\n \n-        if root.triple() != &self.triple {\n-            info!(\"Rejecting via crate triple: expected {} got {}\", self.triple, root.triple());\n+        if header.triple != self.triple {\n+            info!(\"Rejecting via crate triple: expected {} got {}\", self.triple, header.triple);\n             self.crate_rejections.via_triple.push(CrateMismatch {\n                 path: libpath.to_path_buf(),\n-                got: root.triple().to_string(),\n+                got: header.triple.to_string(),\n             });\n             return None;\n         }\n \n-        let hash = root.hash();\n+        let hash = header.hash;\n         if let Some(expected_hash) = self.hash {\n             if hash != expected_hash {\n                 info!(\"Rejecting via hash: expected {} got {}\", expected_hash, hash);"}, {"sha": "06fdc6fe0308439a48f514ee9e21eb26820d81e9", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -74,6 +74,7 @@ pub(crate) struct CrateMetadata {\n     blob: MetadataBlob,\n \n     // --- Some data pre-decoded from the metadata blob, usually for performance ---\n+    /// Data about the top-level items in a crate, as well as various crate-level metadata.\n     root: CrateRoot,\n     /// Trait impl data.\n     /// FIXME: Used only from queries and can use query cache,\n@@ -449,7 +450,7 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {\n                 You need to explicitly pass `(crate_metadata_ref, tcx)` to `decode` instead of just `crate_metadata_ref`.\");\n         };\n \n-        let cname = cdata.root.name;\n+        let cname = cdata.root.name();\n         rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {\n             debug!(\"SpecializedDecoder<SyntaxContext>: decoding {}\", id);\n             cdata\n@@ -564,7 +565,7 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {\n                 let cnum = u32::decode(decoder);\n                 panic!(\n                     \"Decoding of crate {:?} tried to access proc-macro dep {:?}\",\n-                    decoder.cdata().root.name,\n+                    decoder.cdata().root.header.name,\n                     cnum\n                 );\n             }\n@@ -671,6 +672,16 @@ impl MetadataBlob {\n             .decode(self)\n     }\n \n+    pub(crate) fn get_header(&self) -> CrateHeader {\n+        let slice = &self.blob()[..];\n+        let offset = METADATA_HEADER.len();\n+\n+        let pos_bytes = slice[offset..][..4].try_into().unwrap();\n+        let pos = u32::from_be_bytes(pos_bytes) as usize;\n+\n+        LazyValue::<CrateHeader>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)\n+    }\n+\n     pub(crate) fn get_root(&self) -> CrateRoot {\n         let slice = &self.blob()[..];\n         let offset = METADATA_HEADER.len();\n@@ -684,8 +695,8 @@ impl MetadataBlob {\n     pub(crate) fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {\n         let root = self.get_root();\n         writeln!(out, \"Crate info:\")?;\n-        writeln!(out, \"name {}{}\", root.name, root.extra_filename)?;\n-        writeln!(out, \"hash {} stable_crate_id {:?}\", root.hash, root.stable_crate_id)?;\n+        writeln!(out, \"name {}{}\", root.name(), root.extra_filename)?;\n+        writeln!(out, \"hash {} stable_crate_id {:?}\", root.hash(), root.stable_crate_id)?;\n         writeln!(out, \"proc_macro {:?}\", root.proc_macro_data.is_some())?;\n         writeln!(out, \"=External Dependencies=\")?;\n \n@@ -709,21 +720,17 @@ impl CrateRoot {\n     }\n \n     pub(crate) fn name(&self) -> Symbol {\n-        self.name\n+        self.header.name\n     }\n \n     pub(crate) fn hash(&self) -> Svh {\n-        self.hash\n+        self.header.hash\n     }\n \n     pub(crate) fn stable_crate_id(&self) -> StableCrateId {\n         self.stable_crate_id\n     }\n \n-    pub(crate) fn triple(&self) -> &TargetTriple {\n-        &self.triple\n-    }\n-\n     pub(crate) fn decode_crate_deps<'a>(\n         &self,\n         metadata: &'a MetadataBlob,\n@@ -794,7 +801,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             bug!(\n                 \"CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}\",\n                 item_id,\n-                self.root.name,\n+                self.root.name(),\n                 self.cnum,\n             )\n         })\n@@ -1702,11 +1709,11 @@ impl CrateMetadata {\n     }\n \n     pub(crate) fn name(&self) -> Symbol {\n-        self.root.name\n+        self.root.header.name\n     }\n \n     pub(crate) fn hash(&self) -> Svh {\n-        self.root.hash\n+        self.root.header.hash\n     }\n \n     fn num_def_ids(&self) -> usize {"}, {"sha": "3d8991d99b5290d493c42bbcf142c1c679a98042", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -317,9 +317,9 @@ provide! { tcx, def_id, other, cdata,\n     }\n     native_libraries => { cdata.get_native_libraries(tcx.sess).collect() }\n     foreign_modules => { cdata.get_foreign_modules(tcx.sess).map(|m| (m.def_id, m)).collect() }\n-    crate_hash => { cdata.root.hash }\n+    crate_hash => { cdata.root.header.hash }\n     crate_host_hash => { cdata.host_hash }\n-    crate_name => { cdata.root.name }\n+    crate_name => { cdata.root.header.name }\n \n     extra_filename => { cdata.root.extra_filename.clone() }\n \n@@ -581,7 +581,7 @@ impl CrateStore for CStore {\n     }\n \n     fn crate_name(&self, cnum: CrateNum) -> Symbol {\n-        self.get_crate_data(cnum).root.name\n+        self.get_crate_data(cnum).root.header.name\n     }\n \n     fn stable_crate_id(&self, cnum: CrateNum) -> StableCrateId {"}, {"sha": "f2a7762f00386abd1e23053efc31786412ac32ca", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -662,10 +662,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let root = stat!(\"final\", || {\n             let attrs = tcx.hir().krate_attrs();\n             self.lazy(CrateRoot {\n-                name: tcx.crate_name(LOCAL_CRATE),\n+                header: CrateHeader {\n+                    name: tcx.crate_name(LOCAL_CRATE),\n+                    triple: tcx.sess.opts.target_triple.clone(),\n+                    hash: tcx.crate_hash(LOCAL_CRATE),\n+                    is_proc_macro_crate: proc_macro_data.is_some(),\n+                },\n                 extra_filename: tcx.sess.opts.cg.extra_filename.clone(),\n-                triple: tcx.sess.opts.target_triple.clone(),\n-                hash: tcx.crate_hash(LOCAL_CRATE),\n                 stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),\n                 required_panic_strategy: tcx.required_panic_strategy(LOCAL_CRATE),\n                 panic_in_drop_strategy: tcx.sess.opts.unstable_opts.panic_in_drop,"}, {"sha": "ce2fe70a8b272cf5af14c1c0878faa631f883d95", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -56,7 +56,7 @@ pub(crate) fn rustc_version(cfg_version: &'static str) -> String {\n /// Metadata encoding version.\n /// N.B., increment this if you change the format of metadata such that\n /// the rustc version can't be found to compare with `rustc_version()`.\n-const METADATA_VERSION: u8 = 7;\n+const METADATA_VERSION: u8 = 8;\n \n /// Metadata header which includes `METADATA_VERSION`.\n ///\n@@ -199,7 +199,27 @@ pub(crate) struct ProcMacroData {\n     macros: LazyArray<DefIndex>,\n }\n \n-/// Serialized metadata for a crate.\n+/// Serialized crate metadata.\n+///\n+/// This contains just enough information to determine if we should load the `CrateRoot` or not.\n+/// Prefer [`CrateRoot`] whenever possible to avoid ICEs when using `omit-git-hash` locally.\n+/// See #76720 for more details.\n+///\n+/// If you do modify this struct, also bump the [`METADATA_VERSION`] constant.\n+#[derive(MetadataEncodable, MetadataDecodable)]\n+pub(crate) struct CrateHeader {\n+    pub(crate) triple: TargetTriple,\n+    pub(crate) hash: Svh,\n+    pub(crate) name: Symbol,\n+    /// Whether this is the header for a proc-macro crate.\n+    ///\n+    /// This is separate from [`ProcMacroData`] to avoid having to update [`METADATA_VERSION`] every\n+    /// time ProcMacroData changes.\n+    pub(crate) is_proc_macro_crate: bool,\n+}\n+\n+/// Serialized `.rmeta` data for a crate.\n+///\n /// When compiling a proc-macro crate, we encode many of\n /// the `LazyArray<T>` fields as `Lazy::empty()`. This serves two purposes:\n ///\n@@ -217,10 +237,10 @@ pub(crate) struct ProcMacroData {\n /// to being unused.\n #[derive(MetadataEncodable, MetadataDecodable)]\n pub(crate) struct CrateRoot {\n-    name: Symbol,\n-    triple: TargetTriple,\n+    /// A header used to detect if this is the right crate to load.\n+    header: CrateHeader,\n+\n     extra_filename: String,\n-    hash: Svh,\n     stable_crate_id: StableCrateId,\n     required_panic_strategy: Option<PanicStrategy>,\n     panic_in_drop_strategy: PanicStrategy,\n@@ -465,6 +485,7 @@ trivially_parameterized_over_tcx! {\n     RawDefId,\n     TraitImpls,\n     IncoherentImpls,\n+    CrateHeader,\n     CrateRoot,\n     CrateDep,\n     AttrFlags,"}, {"sha": "caf3fc26039a0186fbccc57d1b0bb77132d4b292", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -251,7 +251,7 @@ pub fn explain_lint_level_source(\n         }\n         LintLevelSource::Node { name: lint_attr_name, span, reason, .. } => {\n             if let Some(rationale) = reason {\n-                err.note(rationale.as_str());\n+                err.note(rationale.to_string());\n             }\n             err.span_note_once(span, \"the lint level is defined here\");\n             if lint_attr_name.as_str() != name {"}, {"sha": "60844c17e4718214b1905520f595b4c73972b9f5", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -104,15 +104,15 @@ pub fn report_unstable(\n     suggestion: Option<(Span, String, String, Applicability)>,\n     is_soft: bool,\n     span: Span,\n-    soft_handler: impl FnOnce(&'static Lint, Span, &str),\n+    soft_handler: impl FnOnce(&'static Lint, Span, String),\n ) {\n     let msg = match reason {\n         Some(r) => format!(\"use of unstable library feature '{}': {}\", feature, r),\n         None => format!(\"use of unstable library feature '{}'\", &feature),\n     };\n \n     if is_soft {\n-        soft_handler(SOFT_UNSTABLE, span, &msg)\n+        soft_handler(SOFT_UNSTABLE, span, msg)\n     } else {\n         let mut err =\n             feature_err_issue(&sess.parse_sess, feature, span, GateIssue::Library(issue), msg);\n@@ -225,7 +225,7 @@ pub fn deprecation_message_and_lint(\n \n pub fn early_report_deprecation(\n     lint_buffer: &mut LintBuffer,\n-    message: &str,\n+    message: String,\n     suggestion: Option<Symbol>,\n     lint: &'static Lint,\n     span: Span,\n@@ -241,7 +241,7 @@ pub fn early_report_deprecation(\n \n fn late_report_deprecation(\n     tcx: TyCtxt<'_>,\n-    message: &str,\n+    message: String,\n     suggestion: Option<Symbol>,\n     lint: &'static Lint,\n     span: Span,\n@@ -396,7 +396,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n                         late_report_deprecation(\n                             self,\n-                            &deprecation_message(\n+                            deprecation_message(\n                                 is_in_effect,\n                                 depr_attr.since,\n                                 depr_attr.note,\n@@ -619,7 +619,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         allow_unstable: AllowUnstable,\n         unmarked: impl FnOnce(Span, DefId),\n     ) -> bool {\n-        let soft_handler = |lint, span, msg: &_| {\n+        let soft_handler = |lint, span, msg: String| {\n             self.struct_span_lint_hir(lint, id.unwrap_or(hir::CRATE_HIR_ID), span, msg, |lint| lint)\n         };\n         let eval_result ="}, {"sha": "0464336627f87b9e1af1a662e7602a756f96612c", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -732,7 +732,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Constructs a `RegionKind::ReError` lifetime and registers a `delay_span_bug` with the given\n     /// `msg` to ensure it gets used.\n     #[track_caller]\n-    pub fn mk_re_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Region<'tcx> {\n+    pub fn mk_re_error_with_message<S: Into<MultiSpan>>(\n+        self,\n+        span: S,\n+        msg: &'static str,\n+    ) -> Region<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n         self.mk_re_error(reported)\n     }\n@@ -759,7 +763,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         ty: Ty<'tcx>,\n         span: S,\n-        msg: &str,\n+        msg: &'static str,\n     ) -> Const<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n         self.mk_const(ty::ConstKind::Error(reported), ty)"}, {"sha": "9c91b7784032d1ba5403a72af0d5e846b6d34a34", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -1,5 +1,6 @@\n //! Diagnostics related methods for `Ty`.\n \n+use std::borrow::Cow;\n use std::ops::ControlFlow;\n \n use crate::ty::{\n@@ -384,22 +385,18 @@ pub fn suggest_constraining_type_params<'a>(\n \n     if suggestions.len() == 1 {\n         let (span, suggestion, msg) = suggestions.pop().unwrap();\n-\n-        let s;\n         let msg = match msg {\n             SuggestChangingConstraintsMessage::RestrictBoundFurther => {\n-                \"consider further restricting this bound\"\n+                Cow::from(\"consider further restricting this bound\")\n             }\n             SuggestChangingConstraintsMessage::RestrictType { ty } => {\n-                s = format!(\"consider restricting type parameter `{}`\", ty);\n-                &s\n+                Cow::from(format!(\"consider restricting type parameter `{}`\", ty))\n             }\n             SuggestChangingConstraintsMessage::RestrictTypeFurther { ty } => {\n-                s = format!(\"consider further restricting type parameter `{}`\", ty);\n-                &s\n+                Cow::from(format!(\"consider further restricting type parameter `{}`\", ty))\n             }\n             SuggestChangingConstraintsMessage::RemovingQSized => {\n-                \"consider removing the `?Sized` bound to make the type parameter `Sized`\"\n+                Cow::from(\"consider removing the `?Sized` bound to make the type parameter `Sized`\")\n             }\n         };\n "}, {"sha": "8ab38c4fb8bea8f3512a92053b234d01197bd6e8", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -43,6 +43,15 @@ impl<'a> Parser<'a> {\n     fn parse_ty_param(&mut self, preceding_attrs: AttrVec) -> PResult<'a, GenericParam> {\n         let ident = self.parse_ident()?;\n \n+        // We might have a typo'd `Const` that was parsed as a type parameter.\n+        if self.may_recover()\n+            && ident.name.as_str().to_ascii_lowercase() == kw::Const.as_str()\n+            && self.check_ident()\n+        // `Const` followed by IDENT\n+        {\n+            return Ok(self.recover_const_param_with_mistyped_const(preceding_attrs, ident)?);\n+        }\n+\n         // Parse optional colon and param bounds.\n         let mut colon_span = None;\n         let bounds = if self.eat(&token::Colon) {\n@@ -120,6 +129,41 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    pub(crate) fn recover_const_param_with_mistyped_const(\n+        &mut self,\n+        preceding_attrs: AttrVec,\n+        mistyped_const_ident: Ident,\n+    ) -> PResult<'a, GenericParam> {\n+        let ident = self.parse_ident()?;\n+        self.expect(&token::Colon)?;\n+        let ty = self.parse_ty()?;\n+\n+        // Parse optional const generics default value.\n+        let default = if self.eat(&token::Eq) { Some(self.parse_const_arg()?) } else { None };\n+\n+        let mut err = self.struct_span_err(\n+            mistyped_const_ident.span,\n+            format!(\"`const` keyword was mistyped as `{}`\", mistyped_const_ident.as_str()),\n+        );\n+        err.span_suggestion_verbose(\n+            mistyped_const_ident.span,\n+            \"use the `const` keyword\",\n+            kw::Const.as_str(),\n+            Applicability::MachineApplicable,\n+        );\n+        err.emit();\n+\n+        Ok(GenericParam {\n+            ident,\n+            id: ast::DUMMY_NODE_ID,\n+            attrs: preceding_attrs,\n+            bounds: Vec::new(),\n+            kind: GenericParamKind::Const { ty, kw_span: mistyped_const_ident.span, default },\n+            is_placeholder: false,\n+            colon_span: None,\n+        })\n+    }\n+\n     /// Parses a (possibly empty) list of lifetime and type parameters, possibly including\n     /// a trailing comma and erroneous trailing attributes.\n     pub(super) fn parse_generic_params(&mut self) -> PResult<'a, ThinVec<ast::GenericParam>> {"}, {"sha": "9fcf51a04ec05c2651d4e0ffdcd70fac739f7383", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -23,6 +23,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym, Ident};\n \n+use std::borrow::Cow;\n use std::mem;\n use thin_vec::{thin_vec, ThinVec};\n \n@@ -364,7 +365,7 @@ impl<'a> Parser<'a> {\n                         // `let...else if`. Emit the same error that `parse_block()` would,\n                         // but explicitly point out that this pattern is not allowed.\n                         let msg = \"conditional `else if` is not supported for `let...else`\";\n-                        return Err(self.error_block_no_opening_brace_msg(msg));\n+                        return Err(self.error_block_no_opening_brace_msg(Cow::from(msg)));\n                     }\n                     let els = self.parse_block()?;\n                     self.check_let_else_init_bool_expr(&init);\n@@ -438,7 +439,7 @@ impl<'a> Parser<'a> {\n \n     fn error_block_no_opening_brace_msg(\n         &mut self,\n-        msg: &str,\n+        msg: Cow<'static, str>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let sp = self.token.span;\n         let mut e = self.struct_span_err(sp, msg);\n@@ -502,7 +503,7 @@ impl<'a> Parser<'a> {\n     fn error_block_no_opening_brace<T>(&mut self) -> PResult<'a, T> {\n         let tok = super::token_descr(&self.token);\n         let msg = format!(\"expected `{{`, found {}\", tok);\n-        Err(self.error_block_no_opening_brace_msg(&msg))\n+        Err(self.error_block_no_opening_brace_msg(Cow::from(msg)))\n     }\n \n     /// Parses a block. Inner attributes are allowed."}, {"sha": "377652ce71bb29560af3c65b1078b24fd33da61a", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -2540,7 +2540,7 @@ fn show_candidates(\n                 err.note(msg);\n             }\n             if let Some(note) = (*note).as_deref() {\n-                err.note(note);\n+                err.note(note.to_string());\n             }\n         } else {\n             let (_, descr_first, _, _) = &inaccessible_path_strings[0];"}, {"sha": "f79f8d0c6ca4ee66c2030a3cd093dc532a7b27a2", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -29,6 +29,7 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n \n+use std::borrow::Cow;\n use std::iter;\n use std::ops::Deref;\n \n@@ -1248,7 +1249,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                     }),\n                 ) if followed_by_brace => {\n                     if let Some(sp) = closing_brace {\n-                        err.span_label(span, fallback_label);\n+                        err.span_label(span, fallback_label.to_string());\n                         err.multipart_suggestion(\n                             \"surround the struct literal with parentheses\",\n                             vec![\n@@ -1320,7 +1321,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                     );\n                 }\n                 _ => {\n-                    err.span_label(span, fallback_label);\n+                    err.span_label(span, fallback_label.to_string());\n                 }\n             }\n         };\n@@ -1333,7 +1334,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 }))\n                 | PathSource::Struct,\n             ) => {\n-                err.span_label(span, fallback_label);\n+                err.span_label(span, fallback_label.to_string());\n                 err.span_suggestion_verbose(\n                     span.shrink_to_hi(),\n                     \"use `!` to invoke the macro\",\n@@ -1345,7 +1346,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 }\n             }\n             (Res::Def(DefKind::Macro(MacroKind::Bang), _), _) => {\n-                err.span_label(span, fallback_label);\n+                err.span_label(span, fallback_label.to_string());\n             }\n             (Res::Def(DefKind::TyAlias, def_id), PathSource::Trait(_)) => {\n                 err.span_label(span, \"type aliases cannot be used as traits\");\n@@ -1513,7 +1514,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 );\n             }\n             (Res::SelfTyParam { .. } | Res::SelfTyAlias { .. }, _) if ns == ValueNS => {\n-                err.span_label(span, fallback_label);\n+                err.span_label(span, fallback_label.to_string());\n                 err.note(\"can't use `Self` as a constructor, you must use the implemented struct\");\n             }\n             (Res::Def(DefKind::TyAlias | DefKind::AssocTy, _), _) if ns == ValueNS => {\n@@ -2243,7 +2244,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n         &self,\n         err: &mut Diagnostic,\n         name: Option<&str>,\n-        suggest: impl Fn(&mut Diagnostic, bool, Span, &str, String) -> bool,\n+        suggest: impl Fn(&mut Diagnostic, bool, Span, Cow<'static, str>, String) -> bool,\n     ) {\n         let mut suggest_note = true;\n         for rib in self.lifetime_ribs.iter().rev() {\n@@ -2288,22 +2289,23 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                         (span, sugg)\n                     };\n                     if higher_ranked {\n-                        let message = format!(\n+                        let message = Cow::from(format!(\n                             \"consider making the {} lifetime-generic with a new `{}` lifetime\",\n                             kind.descr(),\n                             name.unwrap_or(\"'a\"),\n-                        );\n-                        should_continue = suggest(err, true, span, &message, sugg);\n+                        ));\n+                        should_continue = suggest(err, true, span, message, sugg);\n                         err.note_once(\n                             \"for more information on higher-ranked polymorphism, visit \\\n                              https://doc.rust-lang.org/nomicon/hrtb.html\",\n                         );\n                     } else if let Some(name) = name {\n-                        let message = format!(\"consider introducing lifetime `{}` here\", name);\n-                        should_continue = suggest(err, false, span, &message, sugg);\n+                        let message =\n+                            Cow::from(format!(\"consider introducing lifetime `{}` here\", name));\n+                        should_continue = suggest(err, false, span, message, sugg);\n                     } else {\n-                        let message = \"consider introducing a named lifetime parameter\";\n-                        should_continue = suggest(err, false, span, &message, sugg);\n+                        let message = Cow::from(\"consider introducing a named lifetime parameter\");\n+                        should_continue = suggest(err, false, span, message, sugg);\n                     }\n                 }\n                 LifetimeRibKind::Item => break,"}, {"sha": "d8a7bcbfff955425b78d7356c7934453a966223d", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -827,7 +827,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 if !is_allowed(feature) && !allowed_by_implication {\n                     let lint_buffer = &mut self.lint_buffer;\n                     let soft_handler =\n-                        |lint, span, msg: &_| lint_buffer.buffer_lint(lint, node_id, span, msg);\n+                        |lint, span, msg: String| lint_buffer.buffer_lint(lint, node_id, span, msg);\n                     stability::report_unstable(\n                         self.tcx.sess,\n                         feature,\n@@ -846,7 +846,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             let (message, lint) = stability::deprecation_message_and_lint(depr, \"macro\", &path);\n             stability::early_report_deprecation(\n                 &mut self.lint_buffer,\n-                &message,\n+                message,\n                 depr.suggestion,\n                 lint,\n                 span,"}, {"sha": "4897bd8d5daec84045d0a3084deaa920291b29ad", "filename": "compiler/rustc_session/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_session%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_session%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fmessages.ftl?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -27,6 +27,10 @@ session_feature_gate_error = {$explain}\n session_file_is_not_writeable = output file {$file} is not writeable -- check its permissions\n \n session_hexadecimal_float_literal_not_supported = hexadecimal float literal is not supported\n+\n+session_incompatible_linker_flavor = linker flavor `{$flavor}` is incompatible with the current target\n+    .note = compatible flavors are: {$compatible_list}\n+\n session_incorrect_cgu_reuse_type =\n     CGU-reuse for `{$cgu_user_name}` is `{$actual_reuse}` but should be {$at_least ->\n     [one] {\"at least \"}"}, {"sha": "0ce83e7909771ebcac9b8e19e782777cf2a94d75", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use rustc_data_structures::stable_hasher::{StableOrd, ToStableHashKey};\n use rustc_target::abi::Align;\n-use rustc_target::spec::{PanicStrategy, SanitizerSet, SplitDebuginfo};\n+use rustc_target::spec::{LinkerFlavorCli, PanicStrategy, SanitizerSet, SplitDebuginfo};\n use rustc_target::spec::{Target, TargetTriple, TargetWarnings, TARGETS};\n \n use crate::parse::{CrateCheckConfig, CrateConfig};\n@@ -2525,6 +2525,19 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n     }\n \n+    if let Some(flavor) = cg.linker_flavor {\n+        if matches!(flavor, LinkerFlavorCli::BpfLinker | LinkerFlavorCli::PtxLinker)\n+            && !nightly_options::is_unstable_enabled(matches)\n+        {\n+            let msg = format!(\n+                \"linker flavor `{}` is unstable, `-Z unstable-options` \\\n+                 flag must also be passed to explicitly use it\",\n+                flavor.desc()\n+            );\n+            early_error(error_format, msg);\n+        }\n+    }\n+\n     let prints = collect_print_requests(&mut cg, &mut unstable_opts, matches, error_format);\n \n     let cg = cg;"}, {"sha": "4a3e668da111a91089c9b797beaa6ed5f10b9242", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -422,3 +422,11 @@ pub fn report_lit_error(sess: &ParseSess, err: LitError, lit: token::Lit, span:\n pub struct OptimisationFuelExhausted {\n     pub msg: String,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(session_incompatible_linker_flavor)]\n+#[note]\n+pub struct IncompatibleLinkerFlavor {\n+    pub flavor: &'static str,\n+    pub compatible_list: String,\n+}"}, {"sha": "d1e4042e8d85ba0e97fe9832b33c36c130d13516", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -123,7 +123,7 @@ pub fn feature_err_issue(\n /// Construct a future incompatibility diagnostic for a feature gate.\n ///\n /// This diagnostic is only a warning and *does not cause compilation to fail*.\n-pub fn feature_warn(sess: &ParseSess, feature: Symbol, span: Span, explain: &str) {\n+pub fn feature_warn(sess: &ParseSess, feature: Symbol, span: Span, explain: &'static str) {\n     feature_warn_issue(sess, feature, span, GateIssue::Language, explain);\n }\n \n@@ -140,7 +140,7 @@ pub fn feature_warn_issue(\n     feature: Symbol,\n     span: Span,\n     issue: GateIssue,\n-    explain: &str,\n+    explain: &'static str,\n ) {\n     let mut err = sess.span_diagnostic.struct_span_warn(span, explain);\n     add_feature_diagnostics_for_issue(&mut err, sess, feature, issue);"}, {"sha": "1eb54cee5a14c35907c5c6b295e07cb5fbeb308b", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -1675,6 +1675,13 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     if sess.opts.unstable_opts.instrument_xray.is_some() && !sess.target.options.supports_xray {\n         sess.emit_err(errors::InstrumentationNotSupported { us: \"XRay\".to_string() });\n     }\n+\n+    if let Some(flavor) = sess.opts.cg.linker_flavor {\n+        if let Some(compatible_list) = sess.target.linker_flavor.check_compatibility(flavor) {\n+            let flavor = flavor.desc();\n+            sess.emit_err(errors::IncompatibleLinkerFlavor { flavor, compatible_list });\n+        }\n+    }\n }\n \n /// Holds data on the current incremental compilation session, if there is one."}, {"sha": "b245742e5337277f05e8f31ec39965c9ab3ed1e6", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -10,7 +10,6 @@\n use core::fmt::Display;\n use rustc_data_structures::base_n;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::DiagnosticMessage;\n use rustc_hir as hir;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{\n@@ -534,10 +533,7 @@ fn encode_ty<'tcx>(\n                         tcx.sess\n                             .struct_span_err(\n                                 cfi_encoding.span,\n-                                DiagnosticMessage::Str(format!(\n-                                    \"invalid `cfi_encoding` for `{:?}`\",\n-                                    ty.kind()\n-                                )),\n+                                format!(\"invalid `cfi_encoding` for `{:?}`\", ty.kind()),\n                             )\n                             .emit();\n                     }\n@@ -589,10 +585,7 @@ fn encode_ty<'tcx>(\n                         tcx.sess\n                             .struct_span_err(\n                                 cfi_encoding.span,\n-                                DiagnosticMessage::Str(format!(\n-                                    \"invalid `cfi_encoding` for `{:?}`\",\n-                                    ty.kind()\n-                                )),\n+                                format!(\"invalid `cfi_encoding` for `{:?}`\", ty.kind()),\n                             )\n                             .emit();\n                     }"}, {"sha": "a7b54766bc6234a4d625279222193c817e9301cf", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -11,6 +11,7 @@\n #![feature(assert_matches)]\n #![feature(associated_type_bounds)]\n #![feature(exhaustive_patterns)]\n+#![feature(iter_intersperse)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]"}, {"sha": "05cb7e87a9365458e808a55e63dd31d29a552e76", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 92, "deletions": 18, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -205,15 +205,11 @@ impl ToJson for LldFlavor {\n }\n \n impl LinkerFlavor {\n-    pub fn from_cli(cli: LinkerFlavorCli, target: &TargetOptions) -> LinkerFlavor {\n-        Self::from_cli_impl(cli, target.linker_flavor.lld_flavor(), target.linker_flavor.is_gnu())\n-    }\n-\n-    /// The passed CLI flavor is preferred over other args coming from the default target spec,\n-    /// so this function can produce a flavor that is incompatible with the current target.\n-    /// FIXME: Produce errors when `-Clinker-flavor` is set to something incompatible\n-    /// with the current target.\n-    fn from_cli_impl(cli: LinkerFlavorCli, lld_flavor: LldFlavor, is_gnu: bool) -> LinkerFlavor {\n+    /// At this point the target's reference linker flavor doesn't yet exist and we need to infer\n+    /// it. The inference always succeds and gives some result, and we don't report any flavor\n+    /// incompatibility errors for json target specs. The CLI flavor is used as the main source\n+    /// of truth, other flags are used in case of ambiguities.\n+    fn from_cli_json(cli: LinkerFlavorCli, lld_flavor: LldFlavor, is_gnu: bool) -> LinkerFlavor {\n         match cli {\n             LinkerFlavorCli::Gcc => match lld_flavor {\n                 LldFlavor::Ld if is_gnu => LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n@@ -257,6 +253,85 @@ impl LinkerFlavor {\n         }\n     }\n \n+    fn infer_cli_hints(cli: LinkerFlavorCli) -> (Option<Cc>, Option<Lld>) {\n+        match cli {\n+            LinkerFlavorCli::Gcc | LinkerFlavorCli::Em => (Some(Cc::Yes), None),\n+            LinkerFlavorCli::Lld(_) => (Some(Cc::No), Some(Lld::Yes)),\n+            LinkerFlavorCli::Ld | LinkerFlavorCli::Msvc => (Some(Cc::No), Some(Lld::No)),\n+            LinkerFlavorCli::BpfLinker | LinkerFlavorCli::PtxLinker => (None, None),\n+        }\n+    }\n+\n+    fn infer_linker_hints(linker_stem: &str) -> (Option<Cc>, Option<Lld>) {\n+        // Remove any version postfix.\n+        let stem = linker_stem\n+            .rsplit_once('-')\n+            .and_then(|(lhs, rhs)| rhs.chars().all(char::is_numeric).then_some(lhs))\n+            .unwrap_or(linker_stem);\n+\n+        // GCC/Clang can have an optional target prefix.\n+        if stem == \"emcc\"\n+            || stem == \"gcc\"\n+            || stem.ends_with(\"-gcc\")\n+            || stem == \"g++\"\n+            || stem.ends_with(\"-g++\")\n+            || stem == \"clang\"\n+            || stem.ends_with(\"-clang\")\n+            || stem == \"clang++\"\n+            || stem.ends_with(\"-clang++\")\n+        {\n+            (Some(Cc::Yes), None)\n+        } else if stem == \"wasm-ld\"\n+            || stem.ends_with(\"-wasm-ld\")\n+            || stem == \"ld.lld\"\n+            || stem == \"lld\"\n+            || stem == \"rust-lld\"\n+            || stem == \"lld-link\"\n+        {\n+            (Some(Cc::No), Some(Lld::Yes))\n+        } else if stem == \"ld\" || stem.ends_with(\"-ld\") || stem == \"link\" {\n+            (Some(Cc::No), Some(Lld::No))\n+        } else {\n+            (None, None)\n+        }\n+    }\n+\n+    fn with_hints(self, (cc_hint, lld_hint): (Option<Cc>, Option<Lld>)) -> LinkerFlavor {\n+        match self {\n+            LinkerFlavor::Gnu(cc, lld) => {\n+                LinkerFlavor::Gnu(cc_hint.unwrap_or(cc), lld_hint.unwrap_or(lld))\n+            }\n+            LinkerFlavor::Darwin(cc, lld) => {\n+                LinkerFlavor::Darwin(cc_hint.unwrap_or(cc), lld_hint.unwrap_or(lld))\n+            }\n+            LinkerFlavor::WasmLld(cc) => LinkerFlavor::WasmLld(cc_hint.unwrap_or(cc)),\n+            LinkerFlavor::Unix(cc) => LinkerFlavor::Unix(cc_hint.unwrap_or(cc)),\n+            LinkerFlavor::Msvc(lld) => LinkerFlavor::Msvc(lld_hint.unwrap_or(lld)),\n+            LinkerFlavor::EmCc | LinkerFlavor::Bpf | LinkerFlavor::Ptx => self,\n+        }\n+    }\n+\n+    pub fn with_cli_hints(self, cli: LinkerFlavorCli) -> LinkerFlavor {\n+        self.with_hints(LinkerFlavor::infer_cli_hints(cli))\n+    }\n+\n+    pub fn with_linker_hints(self, linker_stem: &str) -> LinkerFlavor {\n+        self.with_hints(LinkerFlavor::infer_linker_hints(linker_stem))\n+    }\n+\n+    pub fn check_compatibility(self, cli: LinkerFlavorCli) -> Option<String> {\n+        // The CLI flavor should be compatible with the target if it survives this roundtrip.\n+        let compatible = |cli| cli == self.with_cli_hints(cli).to_cli();\n+        (!compatible(cli)).then(|| {\n+            LinkerFlavorCli::all()\n+                .iter()\n+                .filter(|cli| compatible(**cli))\n+                .map(|cli| cli.desc())\n+                .intersperse(\", \")\n+                .collect()\n+        })\n+    }\n+\n     pub fn lld_flavor(self) -> LldFlavor {\n         match self {\n             LinkerFlavor::Gnu(..)\n@@ -278,6 +353,10 @@ impl LinkerFlavor {\n macro_rules! linker_flavor_cli_impls {\n     ($(($($flavor:tt)*) $string:literal)*) => (\n         impl LinkerFlavorCli {\n+            const fn all() -> &'static [LinkerFlavorCli] {\n+                &[$($($flavor)*,)*]\n+            }\n+\n             pub const fn one_of() -> &'static str {\n                 concat!(\"one of: \", $($string, \" \",)*)\n             }\n@@ -289,8 +368,8 @@ macro_rules! linker_flavor_cli_impls {\n                 })\n             }\n \n-            pub fn desc(&self) -> &str {\n-                match *self {\n+            pub fn desc(self) -> &'static str {\n+                match self {\n                     $($($flavor)* => $string,)*\n                 }\n             }\n@@ -1801,7 +1880,7 @@ impl TargetOptions {\n     }\n \n     fn update_from_cli(&mut self) {\n-        self.linker_flavor = LinkerFlavor::from_cli_impl(\n+        self.linker_flavor = LinkerFlavor::from_cli_json(\n             self.linker_flavor_json,\n             self.lld_flavor_json,\n             self.linker_is_gnu_json,\n@@ -1815,12 +1894,7 @@ impl TargetOptions {\n         ] {\n             args.clear();\n             for (flavor, args_json) in args_json {\n-                // Cannot use `from_cli` due to borrow checker.\n-                let linker_flavor = LinkerFlavor::from_cli_impl(\n-                    *flavor,\n-                    self.lld_flavor_json,\n-                    self.linker_is_gnu_json,\n-                );\n+                let linker_flavor = self.linker_flavor.with_cli_hints(*flavor);\n                 // Normalize to no lld to avoid asserts.\n                 let linker_flavor = match linker_flavor {\n                     LinkerFlavor::Gnu(cc, _) => LinkerFlavor::Gnu(cc, Lld::No),"}, {"sha": "d2906d6c4ae99e4edd551975b8c87236cfb181f8", "filename": "compiler/rustc_target/src/spec/x86_64_pc_solaris.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -7,7 +7,7 @@ pub fn target() -> Target {\n     base.vendor = \"pc\".into();\n     base.max_atomic_width = Some(64);\n     base.stack_probes = StackProbeType::X86;\n-    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI;\n+    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n     Target {\n         llvm_target: \"x86_64-pc-solaris\".into(),"}, {"sha": "ca5b62e279c1c51904e28c1b857786d2f94891f3", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_illumos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -5,7 +5,7 @@ pub fn target() -> Target {\n     base.add_pre_link_args(LinkerFlavor::Unix(Cc::Yes), &[\"-m64\", \"-std=c99\"]);\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI;\n+    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n     Target {\n         // LLVM does not currently have a separate illumos target,"}, {"sha": "9012bda4043769141cac8fac89f012cb787f03f1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -42,6 +42,7 @@ use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::sym;\n use rustc_span::{ExpnKind, Span, DUMMY_SP};\n+use std::borrow::Cow;\n use std::fmt;\n use std::iter;\n use std::ops::ControlFlow;\n@@ -1602,7 +1603,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         }),\n                     ) => Some((\n                         ty.span,\n-                        with_forced_trimmed_paths!(format!(\n+                        with_forced_trimmed_paths!(Cow::from(format!(\n                             \"type mismatch resolving `{}`\",\n                             self.resolve_vars_if_possible(predicate)\n                                 .print(FmtPrinter::new_with_limit(\n@@ -1612,7 +1613,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 ))\n                                 .unwrap()\n                                 .into_buffer()\n-                        )),\n+                        ))),\n                     )),\n                     _ => None,\n                 }"}, {"sha": "b5b8c7fe3ac5698814cdc917050b7c8021cc9215", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -38,6 +38,7 @@ use rustc_span::def_id::LocalDefId;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{BytePos, DesugaringKind, ExpnKind, MacroKind, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n+use std::borrow::Cow;\n use std::iter;\n use std::ops::Deref;\n \n@@ -186,7 +187,12 @@ pub trait TypeErrCtxtExt<'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool;\n \n-    fn get_closure_name(&self, def_id: DefId, err: &mut Diagnostic, msg: &str) -> Option<Symbol>;\n+    fn get_closure_name(\n+        &self,\n+        def_id: DefId,\n+        err: &mut Diagnostic,\n+        msg: Cow<'static, str>,\n+    ) -> Option<Symbol>;\n \n     fn suggest_fn_call(\n         &self,\n@@ -857,7 +863,12 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     /// Given a closure's `DefId`, return the given name of the closure.\n     ///\n     /// This doesn't account for reassignments, but it's only used for suggestions.\n-    fn get_closure_name(&self, def_id: DefId, err: &mut Diagnostic, msg: &str) -> Option<Symbol> {\n+    fn get_closure_name(\n+        &self,\n+        def_id: DefId,\n+        err: &mut Diagnostic,\n+        msg: Cow<'static, str>,\n+    ) -> Option<Symbol> {\n         let get_name = |err: &mut Diagnostic, kind: &hir::PatKind<'_>| -> Option<Symbol> {\n             // Get the local name of this closure. This can be inaccurate because\n             // of the possibility of reassignment, but this should be good enough.\n@@ -934,17 +945,17 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let msg = match def_id_or_name {\n             DefIdOrName::DefId(def_id) => match self.tcx.def_kind(def_id) {\n                 DefKind::Ctor(CtorOf::Struct, _) => {\n-                    \"use parentheses to construct this tuple struct\".to_string()\n+                    Cow::from(\"use parentheses to construct this tuple struct\")\n                 }\n                 DefKind::Ctor(CtorOf::Variant, _) => {\n-                    \"use parentheses to construct this tuple variant\".to_string()\n+                    Cow::from(\"use parentheses to construct this tuple variant\")\n                 }\n-                kind => format!(\n+                kind => Cow::from(format!(\n                     \"use parentheses to call this {}\",\n                     self.tcx.def_kind_descr(kind, def_id)\n-                ),\n+                )),\n             },\n-            DefIdOrName::Name(name) => format!(\"use parentheses to call this {name}\"),\n+            DefIdOrName::Name(name) => Cow::from(format!(\"use parentheses to call this {name}\")),\n         };\n \n         let args = inputs\n@@ -979,7 +990,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     ..\n                 })) => {\n                     err.span_label(*fn_decl_span, \"consider calling this closure\");\n-                    let Some(name) = self.get_closure_name(def_id, err, &msg) else {\n+                    let Some(name) = self.get_closure_name(def_id, err, msg.clone()) else {\n                         return false;\n                     };\n                     name.to_string()\n@@ -1341,7 +1352,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         err.note(msg);\n                     } else {\n                         err.message =\n-                            vec![(rustc_errors::DiagnosticMessage::Str(msg), Style::NoStyle)];\n+                            vec![(rustc_errors::DiagnosticMessage::from(msg), Style::NoStyle)];\n                     }\n                     err.span_label(\n                         span,\n@@ -2958,7 +2969,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 for ty in bound_tys.skip_binder() {\n                                     with_forced_trimmed_paths!(write!(msg, \"`{}`, \", ty).unwrap());\n                                 }\n-                                err.note(msg.trim_end_matches(\", \"))\n+                                err.note(msg.trim_end_matches(\", \").to_string())\n                             }\n                             ty::GeneratorWitnessMIR(def_id, substs) => {\n                                 use std::fmt::Write;\n@@ -2972,7 +2983,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                     let ty = bty.subst(tcx, substs);\n                                     write!(msg, \"`{}`, \", ty).unwrap();\n                                 }\n-                                err.note(msg.trim_end_matches(\", \"))\n+                                err.note(msg.trim_end_matches(\", \").to_string())\n                             }\n                             ty::Generator(def_id, _, _) => {\n                                 let sp = self.tcx.def_span(def_id);"}, {"sha": "e2c9c62512e7e5fc9d8a492076f774ef2f409982", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -41,7 +41,12 @@ impl<'tcx> TraitAliasExpansionInfo<'tcx> {\n \n     /// Adds diagnostic labels to `diag` for the expansion path of a trait through all intermediate\n     /// trait aliases.\n-    pub fn label_with_exp_info(&self, diag: &mut Diagnostic, top_label: &str, use_desc: &str) {\n+    pub fn label_with_exp_info(\n+        &self,\n+        diag: &mut Diagnostic,\n+        top_label: &'static str,\n+        use_desc: &str,\n+    ) {\n         diag.span_label(self.top().1, top_label);\n         if self.path.len() > 1 {\n             for (_, sp) in self.path.iter().rev().skip(1).take(self.path.len() - 2) {"}, {"sha": "62003ddf5153bc6e432018aa9e4a0800438eb081", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -3113,8 +3113,9 @@ impl<T> [T] {\n     ///\n     /// # Current implementation\n     ///\n-    /// The current algorithm is based on the quickselect portion of the same quicksort algorithm\n-    /// used for [`sort_unstable`].\n+    /// The current algorithm is an introselect implementation based on Pattern Defeating Quicksort, which is also\n+    /// the basis for [`sort_unstable`]. The fallback algorithm is Median of Medians using Tukey's Ninther for\n+    /// pivot selection, which guarantees linear runtime for all inputs.\n     ///\n     /// [`sort_unstable`]: slice::sort_unstable\n     ///"}, {"sha": "c634dc50d6d7d6e857c3395fb68c827de3574ae6", "filename": "src/doc/unstable-book/src/language-features/asm-experimental-arch.md", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -17,7 +17,6 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n - AVR\n - MSP430\n - M68k\n-- LoongArch\n - s390x\n \n ## Register classes\n@@ -47,8 +46,6 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | M68k         | `reg`          | `d[0-7]`, `a[0-7]`                 | `r`                  |\n | M68k         | `reg_data`     | `d[0-7]`                           | `d`                  |\n | M68k         | `reg_addr`     | `a[0-3]`                           | `a`                  |\n-| LoongArch    | `reg`          | `$r1`, `$r[4-20]`, `$r[23,30]`     | `r`                  |\n-| LoongArch    | `freg`         | `$f[0-31]`                         | `f`                  |\n | s390x        | `reg`          | `r[0-10]`, `r[12-14]`              | `r`                  |\n | s390x        | `freg`         | `f[0-15]`                          | `f`                  |\n \n@@ -82,8 +79,6 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | MSP430       | `reg`                           | None           | `i8`, `i16`                             |\n | M68k         | `reg`, `reg_addr`               | None           | `i16`, `i32`                            |\n | M68k         | `reg_data`                      | None           | `i8`, `i16`, `i32`                      |\n-| LoongArch64  | `reg`                           | None           | `i8`, `i16`, `i32`, `i64`, `f32`, `f64` |\n-| LoongArch64  | `freg`                          | None           | `f32`, `f64`                            |\n | s390x        | `reg`                           | None           | `i8`, `i16`, `i32`, `i64`               |\n | s390x        | `freg`                          | None           | `f32`, `f64`                            |\n \n@@ -107,10 +102,6 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | M68k         | `a5`          | `bp`      |\n | M68k         | `a6`          | `fp`      |\n | M68k         | `a7`          | `sp`, `usp`, `ssp`, `isp` |\n-| LoongArch    | `$r0`         | `zero`    |\n-| LoongArch    | `$r2`         | `tp`      |\n-| LoongArch    | `$r3`         | `sp`      |\n-| LoongArch    | `$r22`        | `fp`      |\n \n > **Notes**:\n > - TI does not mandate a frame pointer for MSP430, but toolchains are allowed\n@@ -121,7 +112,7 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | Architecture | Unsupported register                    | Reason                                                                                                                                                                              |\n | ------------ | --------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n | All          | `sp`, `r15` (s390x)                     | The stack pointer must be restored to its original value at the end of an asm code block.                                                                                           |\n-| All          | `fr` (Hexagon), `$fp` (MIPS), `Y` (AVR), `r4` (MSP430), `a6` (M68k), `$fp` (LoongArch), `r11` (s390x) | The frame pointer cannot be used as an input or output.                                                                                                                             |\n+| All          | `fr` (Hexagon), `$fp` (MIPS), `Y` (AVR), `r4` (MSP430), `a6` (M68k), `r11` (s390x) | The frame pointer cannot be used as an input or output.                                                                                                                             |\n | All          | `r19` (Hexagon)                         | This is used internally by LLVM as a \"base pointer\" for functions with complex stack frames.                                                                                        |\n | MIPS         | `$0` or `$zero`                         | This is a constant zero register which can't be modified.                                                                                                                           |\n | MIPS         | `$1` or `$at`                           | Reserved for assembler.                                                                                                                                                             |\n@@ -132,10 +123,6 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | AVR          | `r0`, `r1`, `r1r0`                      | Due to an issue in LLVM, the `r0` and `r1` registers cannot be used as inputs or outputs.  If modified, they must be restored to their original values before the end of the block. |\n |MSP430        | `r0`, `r2`, `r3`                        | These are the program counter, status register, and constant generator respectively. Neither the status register nor constant generator can be written to.                          |\n | M68k         | `a4`, `a5`                              | Used internally by LLVM for the base pointer and global base pointer. |\n-| LoongArch    | `$r0` or `$zero`                        | This is a constant zero register which can't be modified.                                                                                                                           |\n-| LoongArch    | `$r2` or `$tp`                          | This is reserved for TLS.                                                                                                                                                           |\n-| LoongArch    | `$r21`                                  | This is reserved by the ABI.                                                                                                                                                        |\n-| LoongArch    | `$r31` or `$s8`                         | This is used internally by LLVM.                                                                                                                                                    |\n \n ## Template modifiers\n \n@@ -150,8 +137,6 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | PowerPC      | `reg`          | None     | `0`            | None          |\n | PowerPC      | `reg_nonzero`  | None     | `3`            | `b`           |\n | PowerPC      | `freg`         | None     | `0`            | None          |\n-| LoongArch    | `reg`          | None     | `$r2`          | None          |\n-| LoongArch    | `freg`         | None     | `$f0`          | None          |\n | s390x        | `reg`          | None     | `%r0`          | None          |\n | s390x        | `freg`         | None     | `%f0`          | None          |\n "}, {"sha": "b26a5c32ec63208dba60d44d5f8855918e1551c7", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -781,7 +781,7 @@ impl<'tcx> ExtraInfo<'tcx> {\n         ExtraInfo { def_id, sp, tcx }\n     }\n \n-    fn error_invalid_codeblock_attr(&self, msg: String, help: &str) {\n+    fn error_invalid_codeblock_attr(&self, msg: String, help: &'static str) {\n         if let Some(def_id) = self.def_id.as_local() {\n             self.tcx.struct_span_lint_hir(\n                 crate::lint::INVALID_CODEBLOCK_ATTRIBUTES,"}, {"sha": "2b0fef267e9a21fa0a2ca97b5619ecacf2c33915", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -842,7 +842,7 @@ impl PreprocessingError {\n         match self {\n             PreprocessingError::MultipleAnchors => report_multiple_anchors(cx, diag_info),\n             PreprocessingError::Disambiguator(range, msg) => {\n-                disambiguator_error(cx, diag_info, range.clone(), msg.as_str())\n+                disambiguator_error(cx, diag_info, range.clone(), msg.clone())\n             }\n             PreprocessingError::MalformedGenerics(err, path_str) => {\n                 report_malformed_generics(cx, diag_info, *err, path_str)"}, {"sha": "e9cee92d22bff18d1d849769da4affce5bdb0480", "filename": "src/librustdoc/passes/lint/bare_urls.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Flibrustdoc%2Fpasses%2Flint%2Fbare_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Flibrustdoc%2Fpasses%2Flint%2Fbare_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Fbare_urls.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -20,19 +20,20 @@ pub(super) fn visit_item(cx: &DocContext<'_>, item: &Item) {\n         };\n     let dox = item.doc_value();\n     if !dox.is_empty() {\n-        let report_diag = |cx: &DocContext<'_>, msg: &str, url: &str, range: Range<usize>| {\n-            let sp = source_span_for_markdown_range(cx.tcx, &dox, &range, &item.attrs)\n-                .unwrap_or_else(|| item.attr_span(cx.tcx));\n-            cx.tcx.struct_span_lint_hir(crate::lint::BARE_URLS, hir_id, sp, msg, |lint| {\n-                lint.note(\"bare URLs are not automatically turned into clickable links\")\n-                    .span_suggestion(\n-                        sp,\n-                        \"use an automatic link instead\",\n-                        format!(\"<{}>\", url),\n-                        Applicability::MachineApplicable,\n-                    )\n-            });\n-        };\n+        let report_diag =\n+            |cx: &DocContext<'_>, msg: &'static str, url: &str, range: Range<usize>| {\n+                let sp = source_span_for_markdown_range(cx.tcx, &dox, &range, &item.attrs)\n+                    .unwrap_or_else(|| item.attr_span(cx.tcx));\n+                cx.tcx.struct_span_lint_hir(crate::lint::BARE_URLS, hir_id, sp, msg, |lint| {\n+                    lint.note(\"bare URLs are not automatically turned into clickable links\")\n+                        .span_suggestion(\n+                            sp,\n+                            \"use an automatic link instead\",\n+                            format!(\"<{}>\", url),\n+                            Applicability::MachineApplicable,\n+                        )\n+                });\n+            };\n \n         let mut p = Parser::new_ext(&dox, main_body_opts()).into_offset_iter();\n \n@@ -72,7 +73,7 @@ fn find_raw_urls(\n     cx: &DocContext<'_>,\n     text: &str,\n     range: Range<usize>,\n-    f: &impl Fn(&DocContext<'_>, &str, &str, Range<usize>),\n+    f: &impl Fn(&DocContext<'_>, &'static str, &str, Range<usize>),\n ) {\n     trace!(\"looking for raw urls in {}\", text);\n     // For now, we only check \"full\" URLs (meaning, starting with \"http://\" or \"https://\")."}, {"sha": "5273f52bc6f2b65e9cca30bb0314e7f3e1cfcdbb", "filename": "src/librustdoc/passes/lint/html_tags.rs", "status": "modified", "additions": 88, "deletions": 82, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Flibrustdoc%2Fpasses%2Flint%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Flibrustdoc%2Fpasses%2Flint%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Fhtml_tags.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -17,90 +17,96 @@ pub(crate) fn visit_item(cx: &DocContext<'_>, item: &Item) {\n     else { return };\n     let dox = item.doc_value();\n     if !dox.is_empty() {\n-        let report_diag = |msg: &str, range: &Range<usize>, is_open_tag: bool| {\n+        let report_diag = |msg: String, range: &Range<usize>, is_open_tag: bool| {\n             let sp = match source_span_for_markdown_range(tcx, &dox, range, &item.attrs) {\n                 Some(sp) => sp,\n                 None => item.attr_span(tcx),\n             };\n-            tcx.struct_span_lint_hir(crate::lint::INVALID_HTML_TAGS, hir_id, sp, msg, |lint| {\n-                use rustc_lint_defs::Applicability;\n-                // If a tag looks like `<this>`, it might actually be a generic.\n-                // We don't try to detect stuff `<like, this>` because that's not valid HTML,\n-                // and we don't try to detect stuff `<like this>` because that's not valid Rust.\n-                let mut generics_end = range.end;\n-                if let Some(Some(mut generics_start)) = (is_open_tag\n-                    && dox[..generics_end].ends_with('>'))\n-                .then(|| extract_path_backwards(&dox, range.start))\n-                {\n-                    while generics_start != 0\n-                        && generics_end < dox.len()\n-                        && dox.as_bytes()[generics_start - 1] == b'<'\n-                        && dox.as_bytes()[generics_end] == b'>'\n+            tcx.struct_span_lint_hir(\n+                crate::lint::INVALID_HTML_TAGS,\n+                hir_id,\n+                sp,\n+                msg.to_string(),\n+                |lint| {\n+                    use rustc_lint_defs::Applicability;\n+                    // If a tag looks like `<this>`, it might actually be a generic.\n+                    // We don't try to detect stuff `<like, this>` because that's not valid HTML,\n+                    // and we don't try to detect stuff `<like this>` because that's not valid Rust.\n+                    let mut generics_end = range.end;\n+                    if let Some(Some(mut generics_start)) = (is_open_tag\n+                        && dox[..generics_end].ends_with('>'))\n+                    .then(|| extract_path_backwards(&dox, range.start))\n                     {\n-                        generics_end += 1;\n-                        generics_start -= 1;\n-                        if let Some(new_start) = extract_path_backwards(&dox, generics_start) {\n-                            generics_start = new_start;\n+                        while generics_start != 0\n+                            && generics_end < dox.len()\n+                            && dox.as_bytes()[generics_start - 1] == b'<'\n+                            && dox.as_bytes()[generics_end] == b'>'\n+                        {\n+                            generics_end += 1;\n+                            generics_start -= 1;\n+                            if let Some(new_start) = extract_path_backwards(&dox, generics_start) {\n+                                generics_start = new_start;\n+                            }\n+                            if let Some(new_end) = extract_path_forward(&dox, generics_end) {\n+                                generics_end = new_end;\n+                            }\n                         }\n                         if let Some(new_end) = extract_path_forward(&dox, generics_end) {\n                             generics_end = new_end;\n                         }\n+                        let generics_sp = match source_span_for_markdown_range(\n+                            tcx,\n+                            &dox,\n+                            &(generics_start..generics_end),\n+                            &item.attrs,\n+                        ) {\n+                            Some(sp) => sp,\n+                            None => item.attr_span(tcx),\n+                        };\n+                        // Sometimes, we only extract part of a path. For example, consider this:\n+                        //\n+                        //     <[u32] as IntoIter<u32>>::Item\n+                        //                       ^^^^^ unclosed HTML tag `u32`\n+                        //\n+                        // We don't have any code for parsing fully-qualified trait paths.\n+                        // In theory, we could add it, but doing it correctly would require\n+                        // parsing the entire path grammar, which is problematic because of\n+                        // overlap between the path grammar and Markdown.\n+                        //\n+                        // The example above shows that ambiguity. Is `[u32]` intended to be an\n+                        // intra-doc link to the u32 primitive, or is it intended to be a slice?\n+                        //\n+                        // If the below conditional were removed, we would suggest this, which is\n+                        // not what the user probably wants.\n+                        //\n+                        //     <[u32] as `IntoIter<u32>`>::Item\n+                        //\n+                        // We know that the user actually wants to wrap the whole thing in a code\n+                        // block, but the only reason we know that is because `u32` does not, in\n+                        // fact, implement IntoIter. If the example looks like this:\n+                        //\n+                        //     <[Vec<i32>] as IntoIter<i32>::Item\n+                        //\n+                        // The ideal fix would be significantly different.\n+                        if (generics_start > 0 && dox.as_bytes()[generics_start - 1] == b'<')\n+                            || (generics_end < dox.len() && dox.as_bytes()[generics_end] == b'>')\n+                        {\n+                            return lint;\n+                        }\n+                        // multipart form is chosen here because ``Vec<i32>`` would be confusing.\n+                        lint.multipart_suggestion(\n+                            \"try marking as source code\",\n+                            vec![\n+                                (generics_sp.shrink_to_lo(), String::from(\"`\")),\n+                                (generics_sp.shrink_to_hi(), String::from(\"`\")),\n+                            ],\n+                            Applicability::MaybeIncorrect,\n+                        );\n                     }\n-                    if let Some(new_end) = extract_path_forward(&dox, generics_end) {\n-                        generics_end = new_end;\n-                    }\n-                    let generics_sp = match source_span_for_markdown_range(\n-                        tcx,\n-                        &dox,\n-                        &(generics_start..generics_end),\n-                        &item.attrs,\n-                    ) {\n-                        Some(sp) => sp,\n-                        None => item.attr_span(tcx),\n-                    };\n-                    // Sometimes, we only extract part of a path. For example, consider this:\n-                    //\n-                    //     <[u32] as IntoIter<u32>>::Item\n-                    //                       ^^^^^ unclosed HTML tag `u32`\n-                    //\n-                    // We don't have any code for parsing fully-qualified trait paths.\n-                    // In theory, we could add it, but doing it correctly would require\n-                    // parsing the entire path grammar, which is problematic because of\n-                    // overlap between the path grammar and Markdown.\n-                    //\n-                    // The example above shows that ambiguity. Is `[u32]` intended to be an\n-                    // intra-doc link to the u32 primitive, or is it intended to be a slice?\n-                    //\n-                    // If the below conditional were removed, we would suggest this, which is\n-                    // not what the user probably wants.\n-                    //\n-                    //     <[u32] as `IntoIter<u32>`>::Item\n-                    //\n-                    // We know that the user actually wants to wrap the whole thing in a code\n-                    // block, but the only reason we know that is because `u32` does not, in\n-                    // fact, implement IntoIter. If the example looks like this:\n-                    //\n-                    //     <[Vec<i32>] as IntoIter<i32>::Item\n-                    //\n-                    // The ideal fix would be significantly different.\n-                    if (generics_start > 0 && dox.as_bytes()[generics_start - 1] == b'<')\n-                        || (generics_end < dox.len() && dox.as_bytes()[generics_end] == b'>')\n-                    {\n-                        return lint;\n-                    }\n-                    // multipart form is chosen here because ``Vec<i32>`` would be confusing.\n-                    lint.multipart_suggestion(\n-                        \"try marking as source code\",\n-                        vec![\n-                            (generics_sp.shrink_to_lo(), String::from(\"`\")),\n-                            (generics_sp.shrink_to_hi(), String::from(\"`\")),\n-                        ],\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n \n-                lint\n-            });\n+                    lint\n+                },\n+            );\n         };\n \n         let mut tags = Vec::new();\n@@ -147,11 +153,11 @@ pub(crate) fn visit_item(cx: &DocContext<'_>, item: &Item) {\n             let t = t.to_lowercase();\n             !ALLOWED_UNCLOSED.contains(&t.as_str())\n         }) {\n-            report_diag(&format!(\"unclosed HTML tag `{}`\", tag), range, true);\n+            report_diag(format!(\"unclosed HTML tag `{}`\", tag), range, true);\n         }\n \n         if let Some(range) = is_in_comment {\n-            report_diag(\"Unclosed HTML comment\", &range, false);\n+            report_diag(\"Unclosed HTML comment\".to_string(), &range, false);\n         }\n     }\n }\n@@ -165,7 +171,7 @@ fn drop_tag(\n     tags: &mut Vec<(String, Range<usize>)>,\n     tag_name: String,\n     range: Range<usize>,\n-    f: &impl Fn(&str, &Range<usize>, bool),\n+    f: &impl Fn(String, &Range<usize>, bool),\n ) {\n     let tag_name_low = tag_name.to_lowercase();\n     if let Some(pos) = tags.iter().rposition(|(t, _)| t.to_lowercase() == tag_name_low) {\n@@ -186,14 +192,14 @@ fn drop_tag(\n             // `tags` is used as a queue, meaning that everything after `pos` is included inside it.\n             // So `<h2><h3></h2>` will look like `[\"h2\", \"h3\"]`. So when closing `h2`, we will still\n             // have `h3`, meaning the tag wasn't closed as it should have.\n-            f(&format!(\"unclosed HTML tag `{}`\", last_tag_name), &last_tag_span, true);\n+            f(format!(\"unclosed HTML tag `{}`\", last_tag_name), &last_tag_span, true);\n         }\n         // Remove the `tag_name` that was originally closed\n         tags.pop();\n     } else {\n         // It can happen for example in this case: `<h2></script></h2>` (the `h2` tag isn't required\n         // but it helps for the visualization).\n-        f(&format!(\"unopened HTML tag `{}`\", tag_name), &range, false);\n+        f(format!(\"unopened HTML tag `{}`\", tag_name), &range, false);\n     }\n }\n \n@@ -261,7 +267,7 @@ fn extract_html_tag(\n     range: &Range<usize>,\n     start_pos: usize,\n     iter: &mut Peekable<CharIndices<'_>>,\n-    f: &impl Fn(&str, &Range<usize>, bool),\n+    f: &impl Fn(String, &Range<usize>, bool),\n ) {\n     let mut tag_name = String::new();\n     let mut is_closing = false;\n@@ -347,7 +353,7 @@ fn extract_html_tag(\n                     if let Some(quote_pos) = quote_pos {\n                         let qr = Range { start: quote_pos, end: quote_pos };\n                         f(\n-                            &format!(\"unclosed quoted HTML attribute on tag `{}`\", tag_name),\n+                            format!(\"unclosed quoted HTML attribute on tag `{}`\", tag_name),\n                             &qr,\n                             false,\n                         );\n@@ -360,7 +366,7 @@ fn extract_html_tag(\n                                 at == \"svg\" || at == \"math\"\n                             });\n                         if !valid {\n-                            f(&format!(\"invalid self-closing HTML tag `{}`\", tag_name), &r, false);\n+                            f(format!(\"invalid self-closing HTML tag `{}`\", tag_name), &r, false);\n                         }\n                     } else {\n                         tags.push((tag_name, r));\n@@ -378,7 +384,7 @@ fn extract_tags(\n     text: &str,\n     range: Range<usize>,\n     is_in_comment: &mut Option<Range<usize>>,\n-    f: &impl Fn(&str, &Range<usize>, bool),\n+    f: &impl Fn(String, &Range<usize>, bool),\n ) {\n     let mut iter = text.char_indices().peekable();\n "}, {"sha": "256958d716015a25565d99e14f9d39ae098fa621", "filename": "src/librustdoc/passes/lint/unescaped_backticks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Flibrustdoc%2Fpasses%2Flint%2Funescaped_backticks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Flibrustdoc%2Fpasses%2Flint%2Funescaped_backticks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Funescaped_backticks.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -373,7 +373,7 @@ fn suggest_insertion(\n     lint: &mut DiagnosticBuilder<'_, ()>,\n     insert_index: usize,\n     suggestion: char,\n-    message: &str,\n+    message: &'static str,\n ) {\n     /// Maximum bytes of context to show around the insertion.\n     const CONTEXT_MAX_LEN: usize = 80;"}, {"sha": "3b7eccad79df8c710ad0f1f5b89ab18c0a117adb", "filename": "src/tools/clippy/clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -154,7 +154,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n \n         if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, &self.msrv) {\n             if cx.tcx.is_const_fn_raw(def_id.to_def_id()) {\n-                cx.tcx.sess.span_err(span, err.as_ref());\n+                cx.tcx.sess.span_err(span, err);\n             }\n         } else {\n             span_lint(cx, MISSING_CONST_FOR_FN, span, \"this could be a `const fn`\");"}, {"sha": "7d53fe65658a258ba9cbc7b34863c9eed5b27a72", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -26,7 +26,6 @@ use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::misc::type_allowed_to_implement_copy;\n-use std::borrow::Cow;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -240,9 +239,8 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                         snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n-                                                |x| Cow::from(format!(\"change `{x}` to\")),\n-                                            )\n-                                            .as_ref(),\n+                                                |x| format!(\"change `{x}` to\"),\n+                                            ),\n                                         suggestion,\n                                         Applicability::Unspecified,\n                                     );\n@@ -270,9 +268,8 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                         snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n-                                                |x| Cow::from(format!(\"change `{x}` to\"))\n-                                            )\n-                                            .as_ref(),\n+                                                |x| format!(\"change `{x}` to\")\n+                                            ),\n                                         suggestion,\n                                         Applicability::Unspecified,\n                                     );"}, {"sha": "5073eb02bd84a049ef2a851af54f1f7e22056e8a", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -163,7 +163,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n             span_lint_and_then(cx, UNNECESSARY_WRAPS, span, lint_msg.as_str(), |diag| {\n                 diag.span_suggestion(\n                     fn_decl.output.span(),\n-                    return_type_sugg_msg.as_str(),\n+                    return_type_sugg_msg,\n                     return_type_sugg,\n                     Applicability::MaybeIncorrect,\n                 );"}, {"sha": "edd87546a5f880349f1251fc7c36be01bd3ae683", "filename": "src/tools/clippy/clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fdiagnostics.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -46,7 +46,7 @@ fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n ///    |     ^^^^^^^^^^^^^^^^^^^^^^^\n /// ```\n pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<MultiSpan>, msg: &str) {\n-    cx.struct_span_lint(lint, sp, msg, |diag| {\n+    cx.struct_span_lint(lint, sp, msg.to_string(), |diag| {\n         docs_link(diag, lint);\n         diag\n     });\n@@ -80,11 +80,12 @@ pub fn span_lint_and_help<T: LintContext>(\n     help_span: Option<Span>,\n     help: &str,\n ) {\n-    cx.struct_span_lint(lint, span, msg, |diag| {\n+    cx.struct_span_lint(lint, span, msg.to_string(), |diag| {\n+        let help = help.to_string();\n         if let Some(help_span) = help_span {\n-            diag.span_help(help_span, help);\n+            diag.span_help(help_span, help.to_string());\n         } else {\n-            diag.help(help);\n+            diag.help(help.to_string());\n         }\n         docs_link(diag, lint);\n         diag\n@@ -122,7 +123,8 @@ pub fn span_lint_and_note<T: LintContext>(\n     note_span: Option<Span>,\n     note: &str,\n ) {\n-    cx.struct_span_lint(lint, span, msg, |diag| {\n+    cx.struct_span_lint(lint, span, msg.to_string(), |diag| {\n+        let note = note.to_string();\n         if let Some(note_span) = note_span {\n             diag.span_note(note_span, note);\n         } else {\n@@ -143,15 +145,15 @@ where\n     S: Into<MultiSpan>,\n     F: FnOnce(&mut Diagnostic),\n {\n-    cx.struct_span_lint(lint, sp, msg, |diag| {\n+    cx.struct_span_lint(lint, sp, msg.to_string(), |diag| {\n         f(diag);\n         docs_link(diag, lint);\n         diag\n     });\n }\n \n pub fn span_lint_hir(cx: &LateContext<'_>, lint: &'static Lint, hir_id: HirId, sp: Span, msg: &str) {\n-    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg, |diag| {\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg.to_string(), |diag| {\n         docs_link(diag, lint);\n         diag\n     });\n@@ -165,7 +167,7 @@ pub fn span_lint_hir_and_then(\n     msg: &str,\n     f: impl FnOnce(&mut Diagnostic),\n ) {\n-    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg, |diag| {\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg.to_string(), |diag| {\n         f(diag);\n         docs_link(diag, lint);\n         diag\n@@ -202,7 +204,7 @@ pub fn span_lint_and_sugg<T: LintContext>(\n     applicability: Applicability,\n ) {\n     span_lint_and_then(cx, lint, sp, msg, |diag| {\n-        diag.span_suggestion(sp, help, sugg, applicability);\n+        diag.span_suggestion(sp, help.to_string(), sugg, applicability);\n     });\n }\n \n@@ -232,5 +234,5 @@ pub fn multispan_sugg_with_applicability<I>(\n ) where\n     I: IntoIterator<Item = (Span, String)>,\n {\n-    diag.multipart_suggestion(help_msg, sugg.into_iter().collect(), applicability);\n+    diag.multipart_suggestion(help_msg.to_string(), sugg.into_iter().collect(), applicability);\n }"}, {"sha": "f477524eec5cc26890c33ef14554c564cf2900de", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -741,7 +741,7 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n         if let Some(indent) = indentation(cx, item) {\n             let span = item.with_hi(item.lo());\n \n-            self.span_suggestion(span, msg, format!(\"{attr}\\n{indent}\"), applicability);\n+            self.span_suggestion(span, msg.to_string(), format!(\"{attr}\\n{indent}\"), applicability);\n         }\n     }\n \n@@ -762,7 +762,7 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n                 })\n                 .collect::<String>();\n \n-            self.span_suggestion(span, msg, format!(\"{new_item}\\n{indent}\"), applicability);\n+            self.span_suggestion(span, msg.to_string(), format!(\"{new_item}\\n{indent}\"), applicability);\n         }\n     }\n \n@@ -779,7 +779,7 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n             }\n         }\n \n-        self.span_suggestion(remove_span, msg, \"\", applicability);\n+        self.span_suggestion(remove_span, msg.to_string(), \"\", applicability);\n     }\n }\n "}, {"sha": "14931baaadf3774376c691b580af08b33b5d03ed", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -306,7 +306,7 @@ pub fn report_error<'tcx, 'mir>(\n     msg.insert(0, e.to_string());\n     report_msg(\n         DiagLevel::Error,\n-        &if let Some(title) = title { format!(\"{title}: {}\", msg[0]) } else { msg[0].clone() },\n+        if let Some(title) = title { format!(\"{title}: {}\", msg[0]) } else { msg[0].clone() },\n         msg,\n         vec![],\n         helps,\n@@ -359,7 +359,7 @@ pub fn report_leaks<'mir, 'tcx>(\n         any_pruned |= pruned;\n         report_msg(\n             DiagLevel::Error,\n-            &format!(\n+            format!(\n                 \"memory leaked: {id:?} ({}, size: {:?}, align: {:?}), allocated here:\",\n                 kind,\n                 alloc.size().bytes(),\n@@ -386,7 +386,7 @@ pub fn report_leaks<'mir, 'tcx>(\n /// additional `span_label` or `note` call.\n pub fn report_msg<'tcx>(\n     diag_level: DiagLevel,\n-    title: &str,\n+    title: String,\n     span_msg: Vec<String>,\n     notes: Vec<(Option<SpanData>, String)>,\n     helps: Vec<(Option<SpanData>, String)>,\n@@ -463,15 +463,16 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n         let (stacktrace, _was_pruned) = prune_stacktrace(stacktrace, self);\n \n         let (title, diag_level) = match &e {\n-            RejectedIsolatedOp(_) => (\"operation rejected by isolation\", DiagLevel::Warning),\n-            Int2Ptr { .. } => (\"integer-to-pointer cast\", DiagLevel::Warning),\n+            RejectedIsolatedOp(_) =>\n+                (\"operation rejected by isolation\".to_string(), DiagLevel::Warning),\n+            Int2Ptr { .. } => (\"integer-to-pointer cast\".to_string(), DiagLevel::Warning),\n             CreatedPointerTag(..)\n             | PoppedPointerTag(..)\n             | CreatedCallId(..)\n             | CreatedAlloc(..)\n             | FreedAlloc(..)\n             | ProgressReport { .. }\n-            | WeakMemoryOutdatedLoad => (\"tracking was triggered\", DiagLevel::Note),\n+            | WeakMemoryOutdatedLoad => (\"tracking was triggered\".to_string(), DiagLevel::Note),\n         };\n \n         let msg = match &e {\n@@ -571,7 +572,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let stacktrace = this.generate_stacktrace();\n         report_msg(\n             DiagLevel::Note,\n-            \"the place in the program where the ICE was triggered\",\n+            \"the place in the program where the ICE was triggered\".to_string(),\n             vec![],\n             vec![],\n             vec![],"}, {"sha": "13f67a0128a7e8f2ecb0870915be012d15666eb2", "filename": "src/tools/rust-analyzer/crates/proc-macro-api/src/version.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Ftools%2Frust-analyzer%2Fcrates%2Fproc-macro-api%2Fsrc%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/src%2Ftools%2Frust-analyzer%2Fcrates%2Fproc-macro-api%2Fsrc%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fproc-macro-api%2Fsrc%2Fversion.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -122,7 +122,7 @@ pub fn read_version(dylib_path: &AbsPath) -> io::Result<String> {\n     // https://github.com/rust-lang/rust/commit/0696e79f2740ad89309269b460579e548a5cd632\n     let snappy_portion = match version {\n         5 | 6 => &dot_rustc[8..],\n-        7 => {\n+        7 | 8 => {\n             let len_bytes = &dot_rustc[8..12];\n             let data_len = u32::from_be_bytes(len_bytes.try_into().unwrap()) as usize;\n             &dot_rustc[12..data_len + 12]"}, {"sha": "bf096f62c4838b3cb112eea9b504aef98ee8f0b3", "filename": "tests/rustdoc-gui/search-result-display.goml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Frustdoc-gui%2Fsearch-result-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Frustdoc-gui%2Fsearch-result-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsearch-result-display.goml?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -57,22 +57,22 @@ define-function: (\n \n call-function: (\"check-filter\", {\n     \"theme\": \"ayu\",\n-    \"border\": \"rgb(92, 103, 115)\",\n+    \"border\": \"#5c6773\",\n     \"filter\": \"invert(0.41) sepia(0.12) saturate(4.87) hue-rotate(171deg) brightness(0.94) contrast(0.94)\",\n-    \"hover_border\": \"rgb(224, 224, 224)\",\n+    \"hover_border\": \"#e0e0e0\",\n     \"hover_filter\": \"invert(0.98) sepia(0.12) saturate(0.81) hue-rotate(343deg) brightness(1.13) contrast(0.76)\",\n })\n call-function: (\"check-filter\", {\n     \"theme\": \"dark\",\n-    \"border\": \"rgb(224, 224, 224)\",\n+    \"border\": \"#e0e0e0\",\n     \"filter\": \"invert(0.94) sepia(0) saturate(7.21) hue-rotate(255deg) brightness(0.9) contrast(0.9)\",\n-    \"hover_border\": \"rgb(33, 150, 243)\",\n+    \"hover_border\": \"#2196f3\",\n     \"hover_filter\": \"invert(0.69) sepia(0.6) saturate(66.13) hue-rotate(184deg) brightness(1) contrast(0.91)\",\n })\n call-function: (\"check-filter\", {\n     \"theme\": \"light\",\n-    \"border\": \"rgb(224, 224, 224)\",\n+    \"border\": \"#e0e0e0\",\n     \"filter\": \"invert(1) sepia(0) saturate(42.23) hue-rotate(289deg) brightness(1.14) contrast(0.76)\",\n-    \"hover_border\": \"rgb(113, 113, 113)\",\n+    \"hover_border\": \"#717171\",\n     \"hover_filter\": \"invert(0.44) sepia(0.18) saturate(0.23) hue-rotate(317deg) brightness(0.96) contrast(0.93)\",\n })"}, {"sha": "8c876213ae0eb6f212cac1bcbfb1c0e3e32cb498", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive-doc-comment-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.stderr?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -23,7 +23,7 @@ LL |     arg: NotIntoDiagnosticArg,\n    |\n    = help: normalized in stderr\n note: required by a bound in `Diagnostic::set_arg`\n-  --> $COMPILER_DIR/rustc_errors/src/diagnostic.rs:964:5\n+  --> $COMPILER_DIR/rustc_errors/src/diagnostic.rs:960:5\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d6a2c80cc06b6f4b93bc3aa05be88f8147177ed5", "filename": "tests/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -44,6 +44,7 @@ impl ::core::default::Default for Empty {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Empty {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {}\n }\n #[automatically_derived]\n@@ -113,6 +114,7 @@ impl ::core::default::Default for Point {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Point {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&self.x, state);\n         ::core::hash::Hash::hash(&self.y, state)\n@@ -198,6 +200,7 @@ impl ::core::default::Default for PackedPoint {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for PackedPoint {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&{ self.x }, state);\n         ::core::hash::Hash::hash(&{ self.y }, state)\n@@ -301,6 +304,7 @@ impl ::core::default::Default for Big {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Big {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&self.b1, state);\n         ::core::hash::Hash::hash(&self.b2, state);\n@@ -478,6 +482,7 @@ impl ::core::fmt::Debug for Unsized {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Unsized {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&self.0, state)\n     }\n@@ -529,6 +534,7 @@ impl ::core::fmt::Debug for PackedUnsizedU8 {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for PackedUnsizedU8 {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&self.0, state)\n     }\n@@ -584,6 +590,7 @@ impl<T: ::core::default::Default + Trait, U: ::core::default::Default>\n #[automatically_derived]\n impl<T: ::core::hash::Hash + Trait, U: ::core::hash::Hash> ::core::hash::Hash\n     for Generic<T, U> where T::A: ::core::hash::Hash {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&self.t, state);\n         ::core::hash::Hash::hash(&self.ta, state);\n@@ -701,6 +708,7 @@ impl<T: ::core::hash::Hash + ::core::marker::Copy + Trait,\n     U: ::core::hash::Hash + ::core::marker::Copy> ::core::hash::Hash for\n     PackedGeneric<T, U> where T::A: ::core::hash::Hash + ::core::marker::Copy\n     {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&{ self.0 }, state);\n         ::core::hash::Hash::hash(&{ self.1 }, state);\n@@ -795,6 +803,7 @@ impl ::core::fmt::Debug for Enum0 {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Enum0 {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         unsafe { ::core::intrinsics::unreachable() }\n     }\n@@ -861,6 +870,7 @@ impl ::core::fmt::Debug for Enum1 {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Enum1 {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         match self {\n             Enum1::Single { x: __self_0 } =>\n@@ -937,6 +947,7 @@ impl ::core::default::Default for Fieldless1 {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Fieldless1 {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {}\n }\n #[automatically_derived]\n@@ -1004,6 +1015,7 @@ impl ::core::default::Default for Fieldless {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Fieldless {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         let __self_tag = ::core::intrinsics::discriminant_value(self);\n         ::core::hash::Hash::hash(&__self_tag, state)\n@@ -1095,6 +1107,7 @@ impl ::core::default::Default for Mixed {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Mixed {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         let __self_tag = ::core::intrinsics::discriminant_value(self);\n         ::core::hash::Hash::hash(&__self_tag, state);\n@@ -1224,6 +1237,7 @@ impl ::core::fmt::Debug for Fielded {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Fielded {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         let __self_tag = ::core::intrinsics::discriminant_value(self);\n         ::core::hash::Hash::hash(&__self_tag, state);\n@@ -1345,6 +1359,7 @@ impl<T: ::core::fmt::Debug, U: ::core::fmt::Debug> ::core::fmt::Debug for\n #[automatically_derived]\n impl<T: ::core::hash::Hash, U: ::core::hash::Hash> ::core::hash::Hash for\n     EnumGeneric<T, U> {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         let __self_tag = ::core::intrinsics::discriminant_value(self);\n         ::core::hash::Hash::hash(&__self_tag, state);"}, {"sha": "90c2b612f22da1d9def44190086316a4737f5fc0", "filename": "tests/ui/linkage-attr/incompatible-flavor.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Flinkage-attr%2Fincompatible-flavor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Flinkage-attr%2Fincompatible-flavor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkage-attr%2Fincompatible-flavor.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: --target=x86_64-unknown-linux-gnu -C linker-flavor=msvc --crate-type=rlib\n+// error-pattern: linker flavor `msvc` is incompatible with the current target\n+// needs-llvm-components:\n+\n+#![feature(no_core)]\n+#![no_core]"}, {"sha": "e07e778521c0b65349e3a466daa41a1fb6e2ad3d", "filename": "tests/ui/linkage-attr/incompatible-flavor.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Flinkage-attr%2Fincompatible-flavor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Flinkage-attr%2Fincompatible-flavor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkage-attr%2Fincompatible-flavor.stderr?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -0,0 +1,6 @@\n+error: linker flavor `msvc` is incompatible with the current target\n+   |\n+   = note: compatible flavors are: gcc, ld, ld.lld\n+\n+error: aborting due to previous error\n+"}, {"sha": "0df5d842cb2a01f5fb7ace7b14a83fc375565ac3", "filename": "tests/ui/linkage-attr/issue-10755.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Flinkage-attr%2Fissue-10755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Flinkage-attr%2Fissue-10755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkage-attr%2Fissue-10755.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -1,6 +1,6 @@\n // build-fail\n // dont-check-compiler-stderr\n-// compile-flags: -C linker=llllll -C linker-flavor=ld\n+// compile-flags: -C linker=llllll\n // error-pattern: `llllll`\n \n // Before, the error-pattern checked for \"not found\". On WSL with appendWindowsPath=true, running"}, {"sha": "3346d12c20e8067fb50ca327881b121e59265ca5", "filename": "tests/ui/linkage-attr/unstable-flavor.bpf.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Flinkage-attr%2Funstable-flavor.bpf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Flinkage-attr%2Funstable-flavor.bpf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkage-attr%2Funstable-flavor.bpf.stderr?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -0,0 +1,2 @@\n+error: linker flavor `bpf-linker` is unstable, `-Z unstable-options` flag must also be passed to explicitly use it\n+"}, {"sha": "03ca2a012460cb2b74b62b69216932101441aaf6", "filename": "tests/ui/linkage-attr/unstable-flavor.ptx.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Flinkage-attr%2Funstable-flavor.ptx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Flinkage-attr%2Funstable-flavor.ptx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkage-attr%2Funstable-flavor.ptx.stderr?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -0,0 +1,2 @@\n+error: linker flavor `ptx-linker` is unstable, `-Z unstable-options` flag must also be passed to explicitly use it\n+"}, {"sha": "5487882dc24dcb8fc476f324198b57508a10a940", "filename": "tests/ui/linkage-attr/unstable-flavor.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Flinkage-attr%2Funstable-flavor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Flinkage-attr%2Funstable-flavor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkage-attr%2Funstable-flavor.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -0,0 +1,10 @@\n+// revisions: bpf ptx\n+// [bpf] compile-flags: --target=bpfel-unknown-none -C linker-flavor=bpf-linker --crate-type=rlib\n+// [bpf] error-pattern: linker flavor `bpf-linker` is unstable, `-Z unstable-options` flag\n+// [bpf] needs-llvm-components:\n+// [ptx] compile-flags: --target=nvptx64-nvidia-cuda -C linker-flavor=ptx-linker --crate-type=rlib\n+// [ptx] error-pattern: linker flavor `ptx-linker` is unstable, `-Z unstable-options` flag\n+// [ptx] needs-llvm-components:\n+\n+#![feature(no_core)]\n+#![no_core]"}, {"sha": "85d3ebba57a3b7af027dcd2ceef517dc7cebd167", "filename": "tests/ui/parser/typod-const-in-const-param-def.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.rs?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -0,0 +1,16 @@\n+pub fn foo<Const N: u8>() {}\n+//~^ ERROR `const` keyword was mistyped as `Const`\n+\n+pub fn bar<Const>() {}\n+// OK\n+\n+pub fn baz<Const N: u8, T>() {}\n+//~^ ERROR `const` keyword was mistyped as `Const`\n+\n+pub fn qux<T, Const N: u8>() {}\n+//~^ ERROR `const` keyword was mistyped as `Const`\n+\n+pub fn quux<T, Const N: u8, U>() {}\n+//~^ ERROR `const` keyword was mistyped as `Const`\n+\n+fn main() {}"}, {"sha": "75d73c6ea878a59b90066e7e6335656ef4f0d30e", "filename": "tests/ui/parser/typod-const-in-const-param-def.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55df622b35743f521a8a85661b049fe2ea506bdb/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftypod-const-in-const-param-def.stderr?ref=55df622b35743f521a8a85661b049fe2ea506bdb", "patch": "@@ -0,0 +1,46 @@\n+error: `const` keyword was mistyped as `Const`\n+  --> $DIR/typod-const-in-const-param-def.rs:1:12\n+   |\n+LL | pub fn foo<Const N: u8>() {}\n+   |            ^^^^^\n+   |\n+help: use the `const` keyword\n+   |\n+LL | pub fn foo<const N: u8>() {}\n+   |            ~~~~~\n+\n+error: `const` keyword was mistyped as `Const`\n+  --> $DIR/typod-const-in-const-param-def.rs:7:12\n+   |\n+LL | pub fn baz<Const N: u8, T>() {}\n+   |            ^^^^^\n+   |\n+help: use the `const` keyword\n+   |\n+LL | pub fn baz<const N: u8, T>() {}\n+   |            ~~~~~\n+\n+error: `const` keyword was mistyped as `Const`\n+  --> $DIR/typod-const-in-const-param-def.rs:10:15\n+   |\n+LL | pub fn qux<T, Const N: u8>() {}\n+   |               ^^^^^\n+   |\n+help: use the `const` keyword\n+   |\n+LL | pub fn qux<T, const N: u8>() {}\n+   |               ~~~~~\n+\n+error: `const` keyword was mistyped as `Const`\n+  --> $DIR/typod-const-in-const-param-def.rs:13:16\n+   |\n+LL | pub fn quux<T, Const N: u8, U>() {}\n+   |                ^^^^^\n+   |\n+help: use the `const` keyword\n+   |\n+LL | pub fn quux<T, const N: u8, U>() {}\n+   |                ~~~~~\n+\n+error: aborting due to 4 previous errors\n+"}]}