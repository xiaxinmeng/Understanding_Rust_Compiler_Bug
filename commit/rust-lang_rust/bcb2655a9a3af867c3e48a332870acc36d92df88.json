{"sha": "bcb2655a9a3af867c3e48a332870acc36d92df88", "node_id": "C_kwDOAAsO6NoAKGJjYjI2NTVhOWEzYWY4NjdjM2U0OGEzMzI4NzBhY2MzNmQ5MmRmODg", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-17T17:24:46Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-18T16:46:48Z"}, "message": "review comment", "tree": {"sha": "44c6b3104f1451ef3444ec94df11e5a2a36ee192", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44c6b3104f1451ef3444ec94df11e5a2a36ee192"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcb2655a9a3af867c3e48a332870acc36d92df88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb2655a9a3af867c3e48a332870acc36d92df88", "html_url": "https://github.com/rust-lang/rust/commit/bcb2655a9a3af867c3e48a332870acc36d92df88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcb2655a9a3af867c3e48a332870acc36d92df88/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3debf5006aa9d6810e4691fa03c6660ab998bae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3debf5006aa9d6810e4691fa03c6660ab998bae7", "html_url": "https://github.com/rust-lang/rust/commit/3debf5006aa9d6810e4691fa03c6660ab998bae7"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "d6044ceb0cafc4088a4913c2e5515754c911f8de", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bcb2655a9a3af867c3e48a332870acc36d92df88/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb2655a9a3af867c3e48a332870acc36d92df88/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=bcb2655a9a3af867c3e48a332870acc36d92df88", "patch": "@@ -990,15 +990,15 @@ fn foo(&self) -> Self::T { String::new() }\n         false\n     }\n \n-    pub fn short_ty_string(self, ty: Ty<'tcx>) -> Result<String, (String, PathBuf)> {\n+    pub fn short_ty_string(self, ty: Ty<'tcx>) -> (String, Option<PathBuf>) {\n         let length_limit = 50;\n         let type_limit = 4;\n         let regular = FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n             .pretty_print_type(ty)\n             .expect(\"could not write to `String`\")\n             .into_buffer();\n         if regular.len() <= length_limit {\n-            return Ok(regular);\n+            return (regular, None);\n         }\n         let short = FmtPrinter::new_with_limit(\n             self,\n@@ -1009,16 +1009,16 @@ fn foo(&self) -> Self::T { String::new() }\n         .expect(\"could not write to `String`\")\n         .into_buffer();\n         if regular == short {\n-            return Ok(regular);\n+            return (regular, None);\n         }\n         // Multiple types might be shortened in a single error, ensure we create a file for each.\n         let mut s = DefaultHasher::new();\n         ty.hash(&mut s);\n         let hash = s.finish();\n         let path = self.output_filenames(()).temp_path_ext(&format!(\"long-type-{hash}.txt\"), None);\n         match std::fs::write(&path, &regular) {\n-            Ok(_) => Err((short, path)),\n-            Err(_) => Ok(regular),\n+            Ok(_) => (short, Some(path)),\n+            Err(_) => (regular, None),\n         }\n     }\n "}, {"sha": "757977ac5d508774849861a8050d0b084f3da192", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bcb2655a9a3af867c3e48a332870acc36d92df88/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb2655a9a3af867c3e48a332870acc36d92df88/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=bcb2655a9a3af867c3e48a332870acc36d92df88", "patch": "@@ -2734,10 +2734,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 parent_trait_pred.remap_constness_diag(param_env);\n                 let parent_def_id = parent_trait_pred.def_id();\n                 let (self_ty, file) =\n-                    match self.tcx.short_ty_string(parent_trait_pred.skip_binder().self_ty()) {\n-                        Ok(self_ty) => (self_ty, None),\n-                        Err((self_ty, file)) => (self_ty, Some(file)),\n-                    };\n+                    self.tcx.short_ty_string(parent_trait_pred.skip_binder().self_ty());\n                 let msg = format!(\n                     \"required for `{self_ty}` to implement `{}`\",\n                     parent_trait_pred.print_modifiers_and_trait_path()\n@@ -2815,10 +2812,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         pluralize!(count)\n                     ));\n                     let (self_ty, file) =\n-                        match self.tcx.short_ty_string(parent_trait_pred.skip_binder().self_ty()) {\n-                            Ok(self_ty) => (self_ty, None),\n-                            Err((self_ty, file)) => (self_ty, Some(file)),\n-                        };\n+                        self.tcx.short_ty_string(parent_trait_pred.skip_binder().self_ty());\n                     err.note(&format!(\n                         \"required for `{self_ty}` to implement `{}`\",\n                         parent_trait_pred.print_modifiers_and_trait_path()"}]}