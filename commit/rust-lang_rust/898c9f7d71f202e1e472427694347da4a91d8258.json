{"sha": "898c9f7d71f202e1e472427694347da4a91d8258", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5OGM5ZjdkNzFmMjAyZTFlNDcyNDI3Njk0MzQ3ZGE0YTkxZDgyNTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-24T08:32:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-24T08:32:52Z"}, "message": "Auto merge of #49837 - nikomatsakis:chalkify-engine, r=scalexm\n\nwork towards chalkify-ing the engine\n\nThis work towards creating a \"all program clauses needed for this goal\" query\n\nr? @scalexm", "tree": {"sha": "bb76a9c9f28b965abfdf2588ef919270de043e15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb76a9c9f28b965abfdf2588ef919270de043e15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/898c9f7d71f202e1e472427694347da4a91d8258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/898c9f7d71f202e1e472427694347da4a91d8258", "html_url": "https://github.com/rust-lang/rust/commit/898c9f7d71f202e1e472427694347da4a91d8258", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/898c9f7d71f202e1e472427694347da4a91d8258/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "html_url": "https://github.com/rust-lang/rust/commit/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6"}, {"sha": "2c5fbe20585e69801d4db95ac587e7c452058c79", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c5fbe20585e69801d4db95ac587e7c452058c79", "html_url": "https://github.com/rust-lang/rust/commit/2c5fbe20585e69801d4db95ac587e7c452058c79"}], "stats": {"total": 649, "additions": 380, "deletions": 269}, "files": [{"sha": "18bf54297afc6b3d100e6835c5baf647a0aa0819", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -655,6 +655,7 @@ define_dep_nodes!( <'tcx>\n     [input] Features,\n \n     [] ProgramClausesFor(DefId),\n+    [] ProgramClausesForEnv(ParamEnv<'tcx>),\n     [] WasmImportModuleMap(CrateNum),\n     [] ForeignModules(CrateNum),\n "}, {"sha": "bfe21549e453d3358ca606b702b13ba80dfb6287", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -107,8 +107,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         // information we encapsulate into\n         let def_data = match i.node {\n             ItemKind::Impl(..) => DefPathData::Impl,\n+            ItemKind::Trait(..) => DefPathData::Trait(i.ident.name.as_str()),\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n-            ItemKind::Trait(..) | ItemKind::TraitAlias(..) |\n+            ItemKind::TraitAlias(..) |\n             ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) | ItemKind::Ty(..) =>\n                 DefPathData::TypeNs(i.ident.name.as_str()),\n             ItemKind::Mod(..) if i.ident == keywords::Invalid.ident() => {\n@@ -222,7 +223,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         let def_data = match ti.node {\n             TraitItemKind::Method(..) | TraitItemKind::Const(..) =>\n                 DefPathData::ValueNs(ti.ident.name.as_str()),\n-            TraitItemKind::Type(..) => DefPathData::TypeNs(ti.ident.name.as_str()),\n+            TraitItemKind::Type(..) => DefPathData::AssocTypeInTrait(ti.ident.name.as_str()),\n             TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id, false),\n         };\n \n@@ -240,7 +241,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         let def_data = match ii.node {\n             ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n                 DefPathData::ValueNs(ii.ident.name.as_str()),\n-            ImplItemKind::Type(..) => DefPathData::TypeNs(ii.ident.name.as_str()),\n+            ImplItemKind::Type(..) => DefPathData::AssocTypeInImpl(ii.ident.name.as_str()),\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id, false),\n         };\n "}, {"sha": "12f146ef49115f0ce99f1110034745790f468d45", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -212,6 +212,9 @@ impl DefKey {\n         ::std::mem::discriminant(data).hash(&mut hasher);\n         match *data {\n             DefPathData::TypeNs(name) |\n+            DefPathData::Trait(name) |\n+            DefPathData::AssocTypeInTrait(name) |\n+            DefPathData::AssocTypeInImpl(name) |\n             DefPathData::ValueNs(name) |\n             DefPathData::Module(name) |\n             DefPathData::MacroDef(name) |\n@@ -358,6 +361,12 @@ pub enum DefPathData {\n     // Different kinds of items and item-like things:\n     /// An impl\n     Impl,\n+    /// A trait\n+    Trait(InternedString),\n+    /// An associated type **declaration** (i.e., in a trait)\n+    AssocTypeInTrait(InternedString),\n+    /// An associated type **value** (i.e., in an impl)\n+    AssocTypeInImpl(InternedString),\n     /// Something in the type NS\n     TypeNs(InternedString),\n     /// Something in the value NS\n@@ -639,6 +648,9 @@ impl DefPathData {\n         use self::DefPathData::*;\n         match *self {\n             TypeNs(name) |\n+            Trait(name) |\n+            AssocTypeInTrait(name) |\n+            AssocTypeInImpl(name) |\n             ValueNs(name) |\n             Module(name) |\n             MacroDef(name) |\n@@ -663,6 +675,9 @@ impl DefPathData {\n         use self::DefPathData::*;\n         let s = match *self {\n             TypeNs(name) |\n+            Trait(name) |\n+            AssocTypeInTrait(name) |\n+            AssocTypeInImpl(name) |\n             ValueNs(name) |\n             Module(name) |\n             MacroDef(name) |"}, {"sha": "322cfd55510bb84d9687d3365d0d47ca885869f3", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -1352,10 +1352,6 @@ impl_stable_hash_for!(\n     }\n );\n \n-impl_stable_hash_for!(struct infer::canonical::QueryRegionConstraints<'tcx> {\n-    region_outlives, ty_outlives\n-});\n-\n impl_stable_hash_for!(enum infer::canonical::Certainty {\n     Proven, Ambiguous\n });\n@@ -1417,6 +1413,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::Goal<'tcx> {\n                 quantifier.hash_stable(hcx, hasher);\n                 goal.hash_stable(hcx, hasher);\n             },\n+            CannotProve => { },\n         }\n     }\n }"}, {"sha": "25f8b5d8c9cc0422f1c7fd288e3fd359bcf116c0", "filename": "src/librustc/infer/canonical.rs", "status": "modified", "additions": 23, "deletions": 48, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -42,7 +42,6 @@ use traits::{Obligation, ObligationCause, PredicateObligation};\n use ty::{self, CanonicalVar, Lift, Region, Slice, Ty, TyCtxt, TypeFlags};\n use ty::subst::{Kind, UnpackedKind};\n use ty::fold::{TypeFoldable, TypeFolder};\n-use util::captures::Captures;\n \n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::FxHashMap;\n@@ -121,7 +120,7 @@ pub enum CanonicalTyVarKind {\n #[derive(Clone, Debug)]\n pub struct QueryResult<'tcx, R> {\n     pub var_values: CanonicalVarValues<'tcx>,\n-    pub region_constraints: QueryRegionConstraints<'tcx>,\n+    pub region_constraints: Vec<QueryRegionConstraint<'tcx>>,\n     pub certainty: Certainty,\n     pub value: R,\n }\n@@ -181,12 +180,7 @@ impl<'tcx, R> Canonical<'tcx, QueryResult<'tcx, R>> {\n     }\n }\n \n-/// Subset of `RegionConstraintData` produced by trait query.\n-#[derive(Clone, Debug, Default)]\n-pub struct QueryRegionConstraints<'tcx> {\n-    pub region_outlives: Vec<(Region<'tcx>, Region<'tcx>)>,\n-    pub ty_outlives: Vec<(Ty<'tcx>, Region<'tcx>)>,\n-}\n+pub type QueryRegionConstraint<'tcx> = ty::Binder<ty::OutlivesPredicate<Kind<'tcx>, Region<'tcx>>>;\n \n /// Trait implemented by values that can be canonicalized. It mainly\n /// serves to identify the interning table we will use.\n@@ -382,35 +376,29 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         &'a self,\n         cause: &'a ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        unsubstituted_region_constraints: &'a QueryRegionConstraints<'tcx>,\n+        unsubstituted_region_constraints: &'a [QueryRegionConstraint<'tcx>],\n         result_subst: &'a CanonicalVarValues<'tcx>,\n-    ) -> impl Iterator<Item = PredicateObligation<'tcx>> + Captures<'gcx> + 'a {\n-        let QueryRegionConstraints {\n-            region_outlives,\n-            ty_outlives,\n-        } = unsubstituted_region_constraints;\n-\n-        let region_obligations = region_outlives.iter().map(move |(r1, r2)| {\n-            let r1 = substitute_value(self.tcx, result_subst, r1);\n-            let r2 = substitute_value(self.tcx, result_subst, r2);\n-            Obligation::new(\n-                cause.clone(),\n-                param_env,\n-                ty::Predicate::RegionOutlives(ty::Binder(ty::OutlivesPredicate(r1, r2))),\n-            )\n-        });\n-\n-        let ty_obligations = ty_outlives.iter().map(move |(t1, r2)| {\n-            let t1 = substitute_value(self.tcx, result_subst, t1);\n+    ) -> impl Iterator<Item = PredicateObligation<'tcx>> + 'a {\n+        Box::new(unsubstituted_region_constraints.iter().map(move |constraint| {\n+            let ty::OutlivesPredicate(k1, r2) = constraint.skip_binder(); // restored below\n+            let k1 = substitute_value(self.tcx, result_subst, k1);\n             let r2 = substitute_value(self.tcx, result_subst, r2);\n-            Obligation::new(\n-                cause.clone(),\n-                param_env,\n-                ty::Predicate::TypeOutlives(ty::Binder(ty::OutlivesPredicate(t1, r2))),\n-            )\n-        });\n-\n-        region_obligations.chain(ty_obligations)\n+            match k1.unpack() {\n+                UnpackedKind::Lifetime(r1) =>\n+                    Obligation::new(\n+                        cause.clone(),\n+                        param_env,\n+                        ty::Predicate::RegionOutlives(ty::Binder(ty::OutlivesPredicate(r1, r2))),\n+                    ),\n+\n+                UnpackedKind::Type(t1) =>\n+                    Obligation::new(\n+                        cause.clone(),\n+                        param_env,\n+                        ty::Predicate::TypeOutlives(ty::Binder(ty::OutlivesPredicate(t1, r2))),\n+                    ),\n+            }\n+        })) as Box<dyn Iterator<Item = _>>\n     }\n \n     /// Given two sets of values for the same set of canonical variables, unify them.\n@@ -913,19 +901,6 @@ BraceStructTypeFoldableImpl! {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for QueryRegionConstraints<'tcx> {\n-        region_outlives, ty_outlives\n-    }\n-}\n-\n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for QueryRegionConstraints<'a> {\n-        type Lifted = QueryRegionConstraints<'tcx>;\n-        region_outlives, ty_outlives\n-    }\n-}\n-\n BraceStructTypeFoldableImpl! {\n     impl<'tcx, R> TypeFoldable<'tcx> for QueryResult<'tcx, R> {\n         var_values, region_constraints, certainty, value"}, {"sha": "456e83f4700e400b4c7a2e47e1c27a2a0cbc02bb", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -1289,6 +1289,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"tell the linker to strip debuginfo when building without debuginfo enabled.\"),\n     share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n           \"make the current crate share its generic instantiations\"),\n+    chalk: bool = (false, parse_bool, [TRACKED],\n+          \"enable the experimental Chalk-based trait solving engine\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "5bfea1631894b172f6516bfe88ed51b6365b0d63", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -282,13 +282,16 @@ pub enum QuantifierKind {\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Goal<'tcx> {\n-    Implies(&'tcx Slice<Clause<'tcx>>, &'tcx Goal<'tcx>),\n+    Implies(Clauses<'tcx>, &'tcx Goal<'tcx>),\n     And(&'tcx Goal<'tcx>, &'tcx Goal<'tcx>),\n     Not(&'tcx Goal<'tcx>),\n     DomainGoal(DomainGoal<'tcx>),\n-    Quantified(QuantifierKind, ty::Binder<&'tcx Goal<'tcx>>)\n+    Quantified(QuantifierKind, ty::Binder<&'tcx Goal<'tcx>>),\n+    CannotProve,\n }\n \n+pub type Goals<'tcx> = &'tcx Slice<Goal<'tcx>>;\n+\n impl<'tcx> Goal<'tcx> {\n     pub fn from_poly_domain_goal<'a>(\n         domain_goal: PolyDomainGoal<'tcx>,\n@@ -318,6 +321,9 @@ pub enum Clause<'tcx> {\n     ForAll(ty::Binder<ProgramClause<'tcx>>),\n }\n \n+/// Multiple clauses.\n+pub type Clauses<'tcx> = &'tcx Slice<Clause<'tcx>>;\n+\n /// A \"program clause\" has the form `D :- G1, ..., Gn`. It is saying\n /// that the domain goal `D` is true if `G1...Gn` are provable. This\n /// is equivalent to the implication `G1..Gn => D`; we usually write\n@@ -330,7 +336,7 @@ pub struct ProgramClause<'tcx> {\n     pub goal: DomainGoal<'tcx>,\n \n     /// ...if we can prove these hypotheses (there may be no hypotheses at all):\n-    pub hypotheses: &'tcx Slice<Goal<'tcx>>,\n+    pub hypotheses: Goals<'tcx>,\n }\n \n pub type Selection<'tcx> = Vtable<'tcx, PredicateObligation<'tcx>>;"}, {"sha": "1e3e4160de1963b611897a9df1a4dcebe780e33d", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -491,6 +491,7 @@ impl<'tcx> fmt::Display for traits::Goal<'tcx> {\n                 // FIXME: appropriate binder names\n                 write!(fmt, \"{}<> {{ {} }}\", qkind, goal.skip_binder())\n             }\n+            CannotProve => write!(fmt, \"CannotProve\"),\n         }\n     }\n }\n@@ -557,6 +558,7 @@ EnumTypeFoldableImpl! {\n         (traits::Goal::Not)(goal),\n         (traits::Goal::DomainGoal)(domain_goal),\n         (traits::Goal::Quantified)(qkind, goal),\n+        (traits::Goal::CannotProve),\n     }\n }\n "}, {"sha": "56669243f273a071cffefb80062dde2157a2f459", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -38,7 +38,7 @@ use ty::subst::{Kind, Substs};\n use ty::ReprOptions;\n use ty::Instance;\n use traits;\n-use traits::{Clause, Goal};\n+use traits::{Clause, Clauses, Goal, Goals};\n use ty::{self, Ty, TypeAndMut};\n use ty::{TyS, TypeVariants, Slice};\n use ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorInterior, Region, Const};\n@@ -2517,15 +2517,15 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn intern_clauses(self, ts: &[Clause<'tcx>]) -> &'tcx Slice<Clause<'tcx>> {\n+    pub fn intern_clauses(self, ts: &[Clause<'tcx>]) -> Clauses<'tcx> {\n         if ts.len() == 0 {\n             Slice::empty()\n         } else {\n             self._intern_clauses(ts)\n         }\n     }\n \n-    pub fn intern_goals(self, ts: &[Goal<'tcx>]) -> &'tcx Slice<Goal<'tcx>> {\n+    pub fn intern_goals(self, ts: &[Goal<'tcx>]) -> Goals<'tcx> {\n         if ts.len() == 0 {\n             Slice::empty()\n         } else {\n@@ -2579,13 +2579,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_substs(iter::once(s).chain(t.into_iter().cloned()).map(Kind::from))\n     }\n \n-    pub fn mk_clauses<I: InternAs<[Clause<'tcx>],\n-        &'tcx Slice<Clause<'tcx>>>>(self, iter: I) -> I::Output {\n+    pub fn mk_clauses<I: InternAs<[Clause<'tcx>], Clauses<'tcx>>>(self, iter: I) -> I::Output {\n         iter.intern_with(|xs| self.intern_clauses(xs))\n     }\n \n-    pub fn mk_goals<I: InternAs<[Goal<'tcx>],\n-        &'tcx Slice<Goal<'tcx>>>>(self, iter: I) -> I::Output {\n+    pub fn mk_goals<I: InternAs<[Goal<'tcx>], Goals<'tcx>>>(self, iter: I) -> I::Output {\n         iter.intern_with(|xs| self.intern_goals(xs))\n     }\n "}, {"sha": "2819141c81be25888c1f13de987625ecc121c65b", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -204,6 +204,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             // finer-grained distinctions, e.g. between enum/struct).\n             data @ DefPathData::Misc |\n             data @ DefPathData::TypeNs(..) |\n+            data @ DefPathData::Trait(..) |\n+            data @ DefPathData::AssocTypeInTrait(..) |\n+            data @ DefPathData::AssocTypeInImpl(..) |\n             data @ DefPathData::ValueNs(..) |\n             data @ DefPathData::Module(..) |\n             data @ DefPathData::TypeParam(..) |"}, {"sha": "735fe06560f5f3a765fbc561bc7085c0859a489f", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -717,6 +717,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for_env<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: ty::ParamEnv<'tcx>) -> String {\n+        format!(\"generating chalk-style clauses for param env\")\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::wasm_import_module_map<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"wasm import module map\")"}, {"sha": "72f2cb49abc0e73f837476907d7331f1a55ba656", "filename": "src/librustc/ty/maps/keys.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -154,6 +154,15 @@ impl<'tcx> Key for Ty<'tcx> {\n     }\n }\n \n+impl<'tcx> Key for ty::ParamEnv<'tcx> {\n+    fn map_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _: TyCtxt) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n     fn map_crate(&self) -> CrateNum {\n         self.value.map_crate()"}, {"sha": "92d23d4338f9d904a31332bd782dd01a2b773330", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -37,8 +37,8 @@ use traits::query::{CanonicalProjectionGoal, CanonicalTyGoal, NoSolution};\n use traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n use traits::query::normalize::NormalizationResult;\n use traits::specialization_graph;\n-use traits::Clause;\n-use ty::{self, CrateInherentImpls, ParamEnvAnd, Slice, Ty, TyCtxt};\n+use traits::Clauses;\n+use ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n use ty::steal::Steal;\n use ty::subst::Substs;\n use util::nodemap::{DefIdSet, DefIdMap, ItemLocalSet};\n@@ -445,7 +445,11 @@ define_maps! { <'tcx>\n \n     [] fn features_query: features_node(CrateNum) -> Lrc<feature_gate::Features>,\n \n-    [] fn program_clauses_for: ProgramClausesFor(DefId) -> Lrc<&'tcx Slice<Clause<'tcx>>>,\n+    [] fn program_clauses_for: ProgramClausesFor(DefId) -> Clauses<'tcx>,\n+\n+    [] fn program_clauses_for_env: ProgramClausesForEnv(\n+        ty::ParamEnv<'tcx>\n+    ) -> Clauses<'tcx>,\n \n     [] fn wasm_custom_sections: WasmCustomSections(CrateNum) -> Lrc<Vec<DefId>>,\n     [] fn wasm_import_module_map: WasmImportModuleMap(CrateNum)"}, {"sha": "70fbd17e6cbb0fbce9b04dc3ed5d02c62543a301", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -978,6 +978,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::DropckOutlives |\n         DepKind::SubstituteNormalizeAndTestPredicates |\n         DepKind::InstanceDefSizeEstimate |\n+        DepKind::ProgramClausesForEnv |\n \n         // This one should never occur in this context\n         DepKind::Null => {"}, {"sha": "1524d4b9e7f62bd44411b8f9280c09cef9147145", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -1138,6 +1138,11 @@ pub struct ProjectionPredicate<'tcx> {\n pub type PolyProjectionPredicate<'tcx> = Binder<ProjectionPredicate<'tcx>>;\n \n impl<'tcx> PolyProjectionPredicate<'tcx> {\n+    /// Returns the def-id of the associated item being projected.\n+    pub fn item_def_id(&self) -> DefId {\n+        self.skip_binder().projection_ty.item_def_id\n+    }\n+\n     pub fn to_poly_trait_ref(&self, tcx: TyCtxt) -> PolyTraitRef<'tcx> {\n         // Note: unlike with TraitRef::to_poly_trait_ref(),\n         // self.0.trait_ref is permitted to have escaping regions."}, {"sha": "84e3358ff13897f5ec0b3449c41ea29ea9602aac", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -268,14 +268,31 @@ impl PrintContext {\n             loop {\n                 let key = tcx.def_key(item_def_id);\n                 match key.disambiguated_data.data {\n+                    DefPathData::AssocTypeInTrait(_) |\n+                    DefPathData::AssocTypeInImpl(_) |\n+                    DefPathData::Trait(_) |\n                     DefPathData::TypeNs(_) => {\n                         break;\n                     }\n-                    DefPathData::ValueNs(_) | DefPathData::EnumVariant(_) => {\n+                    DefPathData::ValueNs(_) |\n+                    DefPathData::EnumVariant(_) => {\n                         is_value_path = true;\n                         break;\n                     }\n-                    _ => {\n+                    DefPathData::CrateRoot |\n+                    DefPathData::Misc |\n+                    DefPathData::Impl |\n+                    DefPathData::Module(_) |\n+                    DefPathData::MacroDef(_) |\n+                    DefPathData::ClosureExpr |\n+                    DefPathData::TypeParam(_) |\n+                    DefPathData::LifetimeDef(_) |\n+                    DefPathData::Field(_) |\n+                    DefPathData::StructCtor |\n+                    DefPathData::Initializer |\n+                    DefPathData::ImplTrait |\n+                    DefPathData::Typeof |\n+                    DefPathData::GlobalMetaData(_) => {\n                         // if we're making a symbol for something, there ought\n                         // to be a value or type-def or something in there\n                         // *somewhere*"}, {"sha": "2fb811eba1e9a197eb6ec0cae4edb099b0a74723", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -1155,6 +1155,10 @@ where\n                 }\n             });\n \n+            time(sess, \"dumping chalk-like clauses\", || {\n+                rustc_traits::lowering::dump_program_clauses(tcx);\n+            });\n+\n             time(sess, \"MIR effect checking\", || {\n                 for def_id in tcx.body_owners() {\n                     mir::transform::check_unsafety::check_unsafety(tcx, def_id)\n@@ -1178,10 +1182,6 @@ where\n \n             time(sess, \"lint checking\", || lint::check_crate(tcx));\n \n-            time(sess, \"dumping chalk-like clauses\", || {\n-                rustc_traits::lowering::dump_program_clauses(tcx)\n-            });\n-\n             return Ok(f(tcx, analysis, rx, tcx.sess.compile_status()));\n         },\n     )"}, {"sha": "90c870096e179f711af17cac046249fbc2a7d2e5", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -37,6 +37,7 @@ pub fn provide(p: &mut Providers) {\n         normalize_ty_after_erasing_regions:\n             normalize_erasing_regions::normalize_ty_after_erasing_regions,\n         program_clauses_for: lowering::program_clauses_for,\n+        program_clauses_for_env: lowering::program_clauses_for_env,\n         ..*p\n     };\n }"}, {"sha": "b6a086f609d0494245fe883c6cdcf64323b8a889", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 155, "deletions": 77, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -8,14 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::hir::{self, ImplPolarity};\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc::ty::{self, Slice, TyCtxt};\n+use rustc::hir::map::definitions::DefPathData;\n+use rustc::hir::{self, ImplPolarity};\n+use rustc::traits::{Clause, Clauses, DomainGoal, Goal, PolyDomainGoal, ProgramClause,\n+                    WhereClauseAtom};\n use rustc::ty::subst::Substs;\n-use rustc::traits::{WhereClauseAtom, PolyDomainGoal, DomainGoal, ProgramClause, Clause, Goal};\n+use rustc::ty::{self, Slice, TyCtxt};\n+use rustc_data_structures::fx::FxHashSet;\n+use std::mem;\n use syntax::ast;\n-use rustc_data_structures::sync::Lrc;\n \n use std::iter;\n \n@@ -24,7 +27,10 @@ trait Lower<T> {\n     fn lower(&self) -> T;\n }\n \n-impl<T, U> Lower<Vec<U>> for Vec<T> where T: Lower<U> {\n+impl<T, U> Lower<Vec<U>> for Vec<T>\n+where\n+    T: Lower<U>,\n+{\n     fn lower(&self) -> Vec<U> {\n         self.iter().map(|item| item.lower()).collect()\n     }\n@@ -42,7 +48,10 @@ impl<'tcx> Lower<WhereClauseAtom<'tcx>> for ty::ProjectionPredicate<'tcx> {\n     }\n }\n \n-impl<'tcx, T> Lower<DomainGoal<'tcx>> for T where T: Lower<WhereClauseAtom<'tcx>> {\n+impl<'tcx, T> Lower<DomainGoal<'tcx>> for T\n+where\n+    T: Lower<WhereClauseAtom<'tcx>>,\n+{\n     fn lower(&self) -> DomainGoal<'tcx> {\n         DomainGoal::Holds(self.lower())\n     }\n@@ -67,7 +76,8 @@ impl<'tcx> Lower<DomainGoal<'tcx>> for ty::TypeOutlivesPredicate<'tcx> {\n /// `forall<'a> { T: Fn(&'a i32) }` which corresponds to something like\n /// `Binder<Holds(Implemented(TraitPredicate))>`.\n impl<'tcx, T> Lower<PolyDomainGoal<'tcx>> for ty::Binder<T>\n-    where T: Lower<DomainGoal<'tcx>> + ty::fold::TypeFoldable<'tcx>\n+where\n+    T: Lower<DomainGoal<'tcx>> + ty::fold::TypeFoldable<'tcx>,\n {\n     fn lower(&self) -> PolyDomainGoal<'tcx> {\n         self.map_bound_ref(|p| p.lower())\n@@ -84,10 +94,9 @@ impl<'tcx> Lower<PolyDomainGoal<'tcx>> for ty::Predicate<'tcx> {\n             TypeOutlives(predicate) => predicate.lower(),\n             Projection(predicate) => predicate.lower(),\n             WellFormed(ty) => ty::Binder::dummy(DomainGoal::WellFormedTy(*ty)),\n-            ObjectSafe(..) |\n-            ClosureKind(..) |\n-            Subtype(..) |\n-            ConstEvaluatable(..) => unimplemented!(),\n+            ObjectSafe(..) | ClosureKind(..) | Subtype(..) | ConstEvaluatable(..) => {\n+                unimplemented!()\n+            }\n         }\n     }\n }\n@@ -104,44 +113,88 @@ impl<'tcx> IntoFromEnvGoal for DomainGoal<'tcx> {\n         use self::DomainGoal::*;\n         match self {\n             Holds(wc_atom) => FromEnv(wc_atom),\n-            WellFormed(..) |\n-            FromEnv(..) |\n-            WellFormedTy(..) |\n-            FromEnvTy(..) |\n-            Normalize(..) |\n-            RegionOutlives(..) |\n-            TypeOutlives(..) => self,\n+            WellFormed(..) | FromEnv(..) | WellFormedTy(..) | FromEnvTy(..) | Normalize(..)\n+            | RegionOutlives(..) | TypeOutlives(..) => self,\n         }\n     }\n }\n \n-crate fn program_clauses_for<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n-                                       -> Lrc<&'tcx Slice<Clause<'tcx>>>\n-{\n-    let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n-    let node = tcx.hir.find(node_id).unwrap();\n-    match node {\n-        hir::map::Node::NodeItem(item) => match item.node {\n-            hir::ItemTrait(..) => program_clauses_for_trait(tcx, def_id),\n-            hir::ItemImpl(..) => program_clauses_for_impl(tcx, def_id),\n-            _ => Lrc::new(tcx.mk_clauses(iter::empty::<Clause>())),\n-        }\n-        hir::map::Node::NodeImplItem(item) => {\n-            if let hir::ImplItemKind::Type(..) = item.node {\n-                program_clauses_for_associated_type_value(tcx, def_id)\n-            } else {\n-                Lrc::new(tcx.mk_clauses(iter::empty::<Clause>()))\n-            }\n-        },\n+crate fn program_clauses_for<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    def_id: DefId,\n+) -> Clauses<'tcx> {\n+    match tcx.def_key(def_id).disambiguated_data.data {\n+        DefPathData::Trait(_) => program_clauses_for_trait(tcx, def_id),\n+        DefPathData::Impl => program_clauses_for_impl(tcx, def_id),\n+        DefPathData::AssocTypeInImpl(..) => program_clauses_for_associated_type_value(tcx, def_id),\n+        _ => Slice::empty(),\n+    }\n+}\n \n-        // FIXME: other constructions e.g. traits, associated types...\n-        _ => Lrc::new(tcx.mk_clauses(iter::empty::<Clause>())),\n+crate fn program_clauses_for_env<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+) -> Clauses<'tcx> {\n+    debug!(\"program_clauses_for_env(param_env={:?})\", param_env);\n+\n+    let mut last_round = FxHashSet();\n+    last_round.extend(\n+        param_env\n+            .caller_bounds\n+            .iter()\n+            .flat_map(|&p| predicate_def_id(p)),\n+    );\n+\n+    let mut closure = last_round.clone();\n+    let mut next_round = FxHashSet();\n+    while !last_round.is_empty() {\n+        next_round.extend(\n+            last_round\n+                .drain()\n+                .flat_map(|def_id| {\n+                    tcx.predicates_of(def_id)\n+                        .instantiate_identity(tcx)\n+                        .predicates\n+                })\n+                .flat_map(|p| predicate_def_id(p))\n+                .filter(|&def_id| closure.insert(def_id)),\n+        );\n+        mem::swap(&mut next_round, &mut last_round);\n+    }\n+\n+    debug!(\"program_clauses_for_env: closure = {:#?}\", closure);\n+\n+    return tcx.mk_clauses(\n+        closure\n+            .into_iter()\n+            .flat_map(|def_id| tcx.program_clauses_for(def_id).iter().cloned()),\n+    );\n+\n+    /// Given that `predicate` is in the environment, returns the\n+    /// def-id of something (e.g., a trait, associated item, etc)\n+    /// whose predicates can also be assumed to be true. We will\n+    /// compute the transitive closure of such things.\n+    fn predicate_def_id<'tcx>(predicate: ty::Predicate<'tcx>) -> Option<DefId> {\n+        match predicate {\n+            ty::Predicate::Trait(predicate) => Some(predicate.def_id()),\n+\n+            ty::Predicate::Projection(projection) => Some(projection.item_def_id()),\n+\n+            ty::Predicate::WellFormed(..)\n+            | ty::Predicate::RegionOutlives(..)\n+            | ty::Predicate::TypeOutlives(..)\n+            | ty::Predicate::ObjectSafe(..)\n+            | ty::Predicate::ClosureKind(..)\n+            | ty::Predicate::Subtype(..)\n+            | ty::Predicate::ConstEvaluatable(..) => None,\n+        }\n     }\n }\n \n-fn program_clauses_for_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n-                                       -> Lrc<&'tcx Slice<Clause<'tcx>>>\n-{\n+fn program_clauses_for_trait<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    def_id: DefId,\n+) -> Clauses<'tcx> {\n     // `trait Trait<P1..Pn> where WC { .. } // P0 == Self`\n \n     // Rule Implemented-From-Env (see rustc guide)\n@@ -156,8 +209,8 @@ fn program_clauses_for_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefI\n     let trait_pred = ty::TraitPredicate {\n         trait_ref: ty::TraitRef {\n             def_id,\n-            substs: Substs::identity_for_item(tcx, def_id)\n-        }\n+            substs: Substs::identity_for_item(tcx, def_id),\n+        },\n     };\n     // `FromEnv(Self: Trait<P1..Pn>)`\n     let from_env = Goal::from(DomainGoal::FromEnv(trait_pred.lower()));\n@@ -169,9 +222,7 @@ fn program_clauses_for_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefI\n         goal: impl_trait,\n         hypotheses: tcx.mk_goals(iter::once(from_env)),\n     };\n-    let clauses = iter::once(\n-        Clause::ForAll(ty::Binder::dummy(implemented_from_env))\n-    );\n+    let clauses = iter::once(Clause::ForAll(ty::Binder::dummy(implemented_from_env)));\n \n     // Rule Implied-Bound-From-Trait\n     //\n@@ -186,11 +237,11 @@ fn program_clauses_for_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefI\n     // FIXME: Remove the [1..] slice; this is a hack because the query\n     // predicates_of currently includes the trait itself (`Self: Trait<P1..Pn>`).\n     let where_clauses = &tcx.predicates_of(def_id).predicates;\n-    let implied_bound_clauses =\n-        where_clauses[1..].into_iter()\n+    let implied_bound_clauses = where_clauses[1..]\n+        .into_iter()\n         .map(|wc| implied_bound_from_trait(tcx, trait_pred, wc));\n \n-    Lrc::new(tcx.mk_clauses(clauses.chain(implied_bound_clauses)))\n+    tcx.mk_clauses(clauses.chain(implied_bound_clauses))\n }\n \n /// For a given `where_clause`, returns a clause `FromEnv(WC) :- FromEnv(Self: Trait<P1..Pn>)`.\n@@ -203,19 +254,15 @@ fn implied_bound_from_trait<'a, 'tcx>(\n     let impl_trait = DomainGoal::FromEnv(WhereClauseAtom::Implemented(trait_pred));\n \n     // `FromEnv(WC) :- FromEnv(Self: Trait<P1..Pn>)`\n-    Clause::ForAll(\n-        where_clause.lower().map_bound(|goal| ProgramClause {\n-            goal: goal.into_from_env_goal(),\n-            hypotheses: tcx.mk_goals(iter::once(Goal::from(impl_trait))),\n-        })\n-    )\n+    Clause::ForAll(where_clause.lower().map_bound(|goal| ProgramClause {\n+        goal: goal.into_from_env_goal(),\n+        hypotheses: tcx.mk_goals(iter::once(Goal::from(impl_trait))),\n+    }))\n }\n \n-fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n-                                      -> Lrc<&'tcx Slice<Clause<'tcx>>>\n-{\n+fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Clauses<'tcx> {\n     if let ImplPolarity::Negative = tcx.impl_polarity(def_id) {\n-        return Lrc::new(tcx.mk_clauses(iter::empty::<Clause>()));\n+        return Slice::empty();\n     }\n \n     // Rule Implemented-From-Impl (see rustc guide)\n@@ -231,23 +278,25 @@ fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId\n     let trait_ref = tcx.impl_trait_ref(def_id).unwrap();\n     // `Implemented(A0: Trait<A1..An>)`\n     let trait_pred = ty::TraitPredicate { trait_ref }.lower();\n-     // `WC`\n+    // `WC`\n     let where_clauses = tcx.predicates_of(def_id).predicates.lower();\n \n-     // `Implemented(A0: Trait<A1..An>) :- WC`\n+    // `Implemented(A0: Trait<A1..An>) :- WC`\n     let clause = ProgramClause {\n         goal: trait_pred,\n         hypotheses: tcx.mk_goals(\n-            where_clauses.into_iter().map(|wc| Goal::from_poly_domain_goal(wc, tcx))\n-        )\n+            where_clauses\n+                .into_iter()\n+                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n+        ),\n     };\n-    Lrc::new(tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause)))))\n+    tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n }\n \n pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     item_id: DefId,\n-) -> Lrc<&'tcx Slice<Clause<'tcx>>> {\n+) -> Clauses<'tcx> {\n     // Rule Normalize-From-Impl (see rustc guide)\n     //\n     // ```impl<P0..Pn> Trait<A1..An> for A0\n@@ -290,10 +339,12 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n     let clause = ProgramClause {\n         goal: normalize_goal,\n         hypotheses: tcx.mk_goals(\n-            where_clauses.into_iter().map(|wc| Goal::from_poly_domain_goal(wc, tcx))\n+            where_clauses\n+                .into_iter()\n+                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n         ),\n     };\n-    Lrc::new(tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause)))))\n+    tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n }\n \n pub fn dump_program_clauses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n@@ -302,27 +353,54 @@ pub fn dump_program_clauses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     }\n \n     let mut visitor = ClauseDumper { tcx };\n-    tcx.hir.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n+    tcx.hir\n+        .krate()\n+        .visit_all_item_likes(&mut visitor.as_deep_visitor());\n }\n \n struct ClauseDumper<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n-impl<'a, 'tcx> ClauseDumper<'a, 'tcx > {\n+impl<'a, 'tcx> ClauseDumper<'a, 'tcx> {\n     fn process_attrs(&mut self, node_id: ast::NodeId, attrs: &[ast::Attribute]) {\n         let def_id = self.tcx.hir.local_def_id(node_id);\n         for attr in attrs {\n+            let mut clauses = None;\n+\n             if attr.check_name(\"rustc_dump_program_clauses\") {\n-                let clauses = self.tcx.program_clauses_for(def_id);\n-                for clause in *clauses {\n-                    // Skip the top-level binder for a less verbose output\n-                    let program_clause = match clause {\n-                        Clause::Implies(program_clause) => program_clause,\n-                        Clause::ForAll(program_clause) => program_clause.skip_binder(),\n-                    };\n-                    self.tcx.sess.struct_span_err(attr.span, &format!(\"{}\", program_clause)).emit();\n+                clauses = Some(self.tcx.program_clauses_for(def_id));\n+            }\n+\n+            if attr.check_name(\"rustc_dump_env_program_clauses\") {\n+                let param_env = self.tcx.param_env(def_id);\n+                clauses = Some(self.tcx.program_clauses_for_env(param_env));\n+            }\n+\n+            if let Some(clauses) = clauses {\n+                let mut err = self.tcx\n+                    .sess\n+                    .struct_span_err(attr.span, \"program clause dump\");\n+\n+                let mut strings: Vec<_> = clauses\n+                    .iter()\n+                    .map(|clause| {\n+                        // Skip the top-level binder for a less verbose output\n+                        let program_clause = match clause {\n+                            Clause::Implies(program_clause) => program_clause,\n+                            Clause::ForAll(program_clause) => program_clause.skip_binder(),\n+                        };\n+                        format!(\"{}\", program_clause)\n+                    })\n+                    .collect();\n+\n+                strings.sort();\n+\n+                for string in strings {\n+                    err.note(&string);\n                 }\n+\n+                err.emit();\n             }\n         }\n     }"}, {"sha": "f25906a7bcad1593e3fff4e003bf671e4c7241d7", "filename": "src/librustc_traits/util.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc_traits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Flibrustc_traits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Futil.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n use rustc::infer::InferCtxt;\n-use rustc::infer::canonical::{CanonicalVarValues, Canonicalize, Certainty, QueryRegionConstraints,\n-                              QueryResult};\n+use rustc::infer::canonical::{CanonicalVarValues, Canonicalize, Certainty, QueryResult};\n use rustc::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc::traits::{FulfillmentContext, TraitEngine};\n use rustc::traits::query::NoSolution;\n@@ -62,7 +61,7 @@ where\n \n     let region_obligations = infcx.take_registered_region_obligations();\n \n-    let (region_outlives, ty_outlives) = infcx.with_region_constraints(|region_constraints| {\n+    let region_constraints = infcx.with_region_constraints(|region_constraints| {\n         let RegionConstraintData {\n             constraints,\n             verifys,\n@@ -72,24 +71,32 @@ where\n         assert!(verifys.is_empty());\n         assert!(givens.is_empty());\n \n-        let region_outlives: Vec<_> = constraints\n+        let mut outlives: Vec<_> = constraints\n             .into_iter()\n             .map(|(k, _)| match *k {\n-                Constraint::VarSubVar(v1, v2) => {\n-                    (tcx.mk_region(ty::ReVar(v1)), tcx.mk_region(ty::ReVar(v2)))\n+                Constraint::VarSubVar(v1, v2) => ty::OutlivesPredicate(\n+                    tcx.mk_region(ty::ReVar(v1)).into(),\n+                    tcx.mk_region(ty::ReVar(v2)),\n+                ),\n+                Constraint::VarSubReg(v1, r2) => {\n+                    ty::OutlivesPredicate(tcx.mk_region(ty::ReVar(v1)).into(), r2)\n                 }\n-                Constraint::VarSubReg(v1, r2) => (tcx.mk_region(ty::ReVar(v1)), r2),\n-                Constraint::RegSubVar(r1, v2) => (r1, tcx.mk_region(ty::ReVar(v2))),\n-                Constraint::RegSubReg(r1, r2) => (r1, r2),\n+                Constraint::RegSubVar(r1, v2) => {\n+                    ty::OutlivesPredicate(r1.into(), tcx.mk_region(ty::ReVar(v2)))\n+                }\n+                Constraint::RegSubReg(r1, r2) => ty::OutlivesPredicate(r1.into(), r2),\n             })\n+            .map(ty::Binder) // no bound regions in the code above\n             .collect();\n \n-        let ty_outlives: Vec<_> = region_obligations\n-            .into_iter()\n-            .map(|(_, r_o)| (r_o.sup_type, r_o.sub_region))\n-            .collect();\n+        outlives.extend(\n+            region_obligations\n+                .into_iter()\n+                .map(|(_, r_o)| ty::OutlivesPredicate(r_o.sup_type.into(), r_o.sub_region))\n+                .map(ty::Binder) // no bound regions in the code above\n+        );\n \n-        (region_outlives, ty_outlives)\n+        outlives\n     });\n \n     let certainty = if ambig_errors.is_empty() {\n@@ -100,10 +107,7 @@ where\n \n     let (canonical_result, _) = infcx.canonicalize_response(&QueryResult {\n         var_values: inference_vars,\n-        region_constraints: QueryRegionConstraints {\n-            region_outlives,\n-            ty_outlives,\n-        },\n+        region_constraints,\n         certainty,\n         value: answer,\n     });"}, {"sha": "fc20ad0e08b2a40afd3419c964831d965ba29fea", "filename": "src/test/ui/chalkify/lower_env1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+trait Foo { }\n+\n+#[rustc_dump_program_clauses] //~ ERROR program clause dump\n+trait Bar where Self: Foo { }\n+\n+#[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n+fn bar<T: Bar>() {\n+}\n+\n+fn main() {\n+}"}, {"sha": "3a280f85e76949e0e862df6135838f7a74e1ecf4", "filename": "src/test/ui/chalkify/lower_env1.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -0,0 +1,24 @@\n+error: program clause dump\n+  --> $DIR/lower_env1.rs:16:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: FromEnv(Self: Bar) :- FromEnv(Self: Bar).\n+   = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n+   = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n+\n+error: program clause dump\n+  --> $DIR/lower_env1.rs:19:1\n+   |\n+LL | #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: FromEnv(Self: Bar) :- FromEnv(Self: Bar).\n+   = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n+   = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n+   = note: Implemented(Self: Foo) :- FromEnv(Self: Foo).\n+   = note: Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized).\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b38b87cdb1236133197e8b42f825d80e258ff70d", "filename": "src/test/ui/chalkify/lower_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -12,15 +12,15 @@\n \n trait Foo { }\n \n-#[rustc_dump_program_clauses] //~ ERROR Implemented(T: Foo) :-\n+#[rustc_dump_program_clauses] //~ ERROR program clause dump\n impl<T: 'static> Foo for T where T: Iterator<Item = i32> { }\n \n trait Bar {\n     type Assoc;\n }\n \n impl<T> Bar for T where T: Iterator<Item = i32> {\n-    #[rustc_dump_program_clauses] //~ ERROR Normalize(<T as Bar>::Assoc == std::vec::Vec<T>) :-\n+    #[rustc_dump_program_clauses] //~ ERROR program clause dump\n     type Assoc = Vec<T>;\n }\n "}, {"sha": "c497d76f8d4f964e9bcaed31ca1808e1bc4cd194", "filename": "src/test/ui/chalkify/lower_impl.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.stderr?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -1,14 +1,18 @@\n-error: Implemented(T: Foo) :- ProjectionEq(<T as std::iter::Iterator>::Item == i32), TypeOutlives(T : 'static), Implemented(T: std::iter::Iterator), Implemented(T: std::marker::Sized).\n+error: program clause dump\n   --> $DIR/lower_impl.rs:15:1\n    |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(T: Foo) :-\n+LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: Implemented(T: Foo) :- ProjectionEq(<T as std::iter::Iterator>::Item == i32), TypeOutlives(T : 'static), Implemented(T: std::iter::Iterator), Implemented(T: std::marker::Sized).\n \n-error: Normalize(<T as Bar>::Assoc == std::vec::Vec<T>) :- Implemented(T: Bar).\n+error: program clause dump\n   --> $DIR/lower_impl.rs:23:5\n    |\n-LL |     #[rustc_dump_program_clauses] //~ ERROR Normalize(<T as Bar>::Assoc == std::vec::Vec<T>) :-\n+LL |     #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: Normalize(<T as Bar>::Assoc == std::vec::Vec<T>) :- Implemented(T: Bar).\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7c0f233a645cb00efece3fbe5a2bca54be6e0559", "filename": "src/test/ui/chalkify/lower_trait.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -10,10 +10,7 @@\n \n #![feature(rustc_attrs)]\n \n-#[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<S, T, U>) :-\n-                              //~| ERROR FromEnv\n-                              //~| ERROR FromEnv\n-                              //~| ERROR FromEnv\n+#[rustc_dump_program_clauses] //~ ERROR program clause dump\n trait Foo<S, T, U> {\n     fn s(S) -> S;\n     fn t(T) -> T;"}, {"sha": "55cd9699b06164de3fc62518a0c2c3666748d854", "filename": "src/test/ui/chalkify/lower_trait.stderr", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -1,26 +1,13 @@\n-error: Implemented(Self: Foo<S, T, U>) :- FromEnv(Self: Foo<S, T, U>).\n+error: program clause dump\n   --> $DIR/lower_trait.rs:13:1\n    |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<S, T, U>) :-\n+LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: FromEnv(S: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n-  --> $DIR/lower_trait.rs:13:1\n-   |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<S, T, U>) :-\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: FromEnv(T: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n-  --> $DIR/lower_trait.rs:13:1\n    |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<S, T, U>) :-\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: FromEnv(U: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n-  --> $DIR/lower_trait.rs:13:1\n-   |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<S, T, U>) :-\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: FromEnv(S: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n+   = note: FromEnv(T: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n+   = note: FromEnv(U: std::marker::Sized) :- FromEnv(Self: Foo<S, T, U>).\n+   = note: Implemented(Self: Foo<S, T, U>) :- FromEnv(Self: Foo<S, T, U>).\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n "}, {"sha": "47e9398d3647eefc2646210fdd7f4f7ff8df0195", "filename": "src/test/ui/chalkify/lower_trait_higher_rank.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -10,10 +10,7 @@\n \n #![feature(rustc_attrs)]\n \n-#[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<F>) :-\n-                              //~| ERROR FromEnv\n-                              //~| ERROR FromEnv\n-                              //~| ERROR FromEnv\n+#[rustc_dump_program_clauses] //~ ERROR program clause dump\n trait Foo<F> where for<'a> F: Fn(&'a (u8, u16)) -> &'a u8\n {\n     fn s(F) -> F;"}, {"sha": "7f6f503c6ff7235fbae3a441abbae71d45f8c6fb", "filename": "src/test/ui/chalkify/lower_trait_higher_rank.stderr", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -1,26 +1,13 @@\n-error: Implemented(Self: Foo<F>) :- FromEnv(Self: Foo<F>).\n+error: program clause dump\n   --> $DIR/lower_trait_higher_rank.rs:13:1\n    |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<F>) :-\n+LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: FromEnv(F: std::marker::Sized) :- FromEnv(Self: Foo<F>).\n-  --> $DIR/lower_trait_higher_rank.rs:13:1\n-   |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<F>) :-\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: FromEnv(F: std::ops::Fn<(&'a (u8, u16),)>) :- FromEnv(Self: Foo<F>).\n-  --> $DIR/lower_trait_higher_rank.rs:13:1\n    |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<F>) :-\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: FromEnv(<F as std::ops::FnOnce<(&'a (u8, u16),)>>::Output == &'a u8) :- FromEnv(Self: Foo<F>).\n-  --> $DIR/lower_trait_higher_rank.rs:13:1\n-   |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<F>) :-\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: FromEnv(<F as std::ops::FnOnce<(&'a (u8, u16),)>>::Output == &'a u8) :- FromEnv(Self: Foo<F>).\n+   = note: FromEnv(F: std::marker::Sized) :- FromEnv(Self: Foo<F>).\n+   = note: FromEnv(F: std::ops::Fn<(&'a (u8, u16),)>) :- FromEnv(Self: Foo<F>).\n+   = note: Implemented(Self: Foo<F>) :- FromEnv(Self: Foo<F>).\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n "}, {"sha": "67ee7c28b6a4e55941e28ccdd24eb521bd7cb986", "filename": "src/test/ui/chalkify/lower_trait_where_clause.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -13,13 +13,7 @@\n use std::fmt::{Debug, Display};\n use std::borrow::Borrow;\n \n-#[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n-                              //~| ERROR FromEnv\n-                              //~| ERROR FromEnv\n-                              //~| ERROR FromEnv\n-                              //~| ERROR FromEnv\n-                              //~| ERROR RegionOutlives\n-                              //~| ERROR TypeOutlives\n+#[rustc_dump_program_clauses] //~ ERROR program clause dump\n trait Foo<'a, 'b, S, T, U> where S: Debug, T: Borrow<U>, U: ?Sized, 'a: 'b, U: 'b {\n     fn s(S) -> S;\n     fn t(T) -> T;"}, {"sha": "68bc2ddf2930ebf3276b15d7393eba89f6f1fb3f", "filename": "src/test/ui/chalkify/lower_trait_where_clause.stderr", "status": "modified", "additions": 11, "deletions": 39, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/898c9f7d71f202e1e472427694347da4a91d8258/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr?ref=898c9f7d71f202e1e472427694347da4a91d8258", "patch": "@@ -1,44 +1,16 @@\n-error: Implemented(Self: Foo<'a, 'b, S, T, U>) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+error: program clause dump\n   --> $DIR/lower_trait_where_clause.rs:16:1\n    |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n+LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: FromEnv(S: std::marker::Sized) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n-  --> $DIR/lower_trait_where_clause.rs:16:1\n-   |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: FromEnv(T: std::marker::Sized) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n-  --> $DIR/lower_trait_where_clause.rs:16:1\n-   |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: FromEnv(S: std::fmt::Debug) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n-  --> $DIR/lower_trait_where_clause.rs:16:1\n-   |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: FromEnv(T: std::borrow::Borrow<U>) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n-  --> $DIR/lower_trait_where_clause.rs:16:1\n-   |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: RegionOutlives('a : 'b) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n-  --> $DIR/lower_trait_where_clause.rs:16:1\n    |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: TypeOutlives(U : 'b) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n-  --> $DIR/lower_trait_where_clause.rs:16:1\n-   |\n-LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(Self: Foo<'a, 'b, S, T, U>) :-\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 7 previous errors\n+   = note: FromEnv(S: std::fmt::Debug) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+   = note: FromEnv(S: std::marker::Sized) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+   = note: FromEnv(T: std::borrow::Borrow<U>) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+   = note: FromEnv(T: std::marker::Sized) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+   = note: Implemented(Self: Foo<'a, 'b, S, T, U>) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+   = note: RegionOutlives('a : 'b) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+   = note: TypeOutlives(U : 'b) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n+\n+error: aborting due to previous error\n "}]}