{"sha": "dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYmIwYmViM2VjOWYxMWE2MzVmNDNlNjBmM2IzYTQyYmE2MTMzOGE=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-07-25T17:22:41Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-07-25T17:22:41Z"}, "message": "Make Analysis api cancellable", "tree": {"sha": "47edb8102902df9e291d5d0c8274ef1388546d03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47edb8102902df9e291d5d0c8274ef1388546d03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a", "html_url": "https://github.com/rust-lang/rust/commit/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8e37ddbc8fa666105a5eca8e2dc9f261d8934e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e37ddbc8fa666105a5eca8e2dc9f261d8934e8", "html_url": "https://github.com/rust-lang/rust/commit/a8e37ddbc8fa666105a5eca8e2dc9f261d8934e8"}], "stats": {"total": 194, "additions": 107, "deletions": 87}, "files": [{"sha": "5e9d0c16d64401b31bfefe292456ee2c8b541fee", "filename": "crates/ra_cli/src/analysis_bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs?ref=dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a", "patch": "@@ -55,7 +55,7 @@ pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n         Op::Complete { line, column, .. } => {\n             let offset = host\n                 .analysis()\n-                .file_line_index(file_id)\n+                .file_line_index(file_id)?\n                 .offset(LineCol { line, col_utf16: column });\n             let file_postion = FilePosition { file_id, offset };\n "}, {"sha": "edb646c11304197daf669a629d3771c568525329", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 47, "deletions": 39, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a", "patch": "@@ -317,24 +317,24 @@ impl Analysis {\n     }\n \n     /// Debug info about the current state of the analysis\n-    pub fn status(&self) -> String {\n-        status::status(&*self.db)\n+    pub fn status(&self) -> Cancelable<String> {\n+        self.with_db(|db| status::status(&*db))\n     }\n \n     /// Gets the text of the source file.\n-    pub fn file_text(&self, file_id: FileId) -> Arc<String> {\n-        self.db.file_text(file_id)\n+    pub fn file_text(&self, file_id: FileId) -> Cancelable<Arc<String>> {\n+        self.with_db(|db| db.file_text(file_id))\n     }\n \n     /// Gets the syntax tree of the file.\n-    pub fn parse(&self, file_id: FileId) -> SourceFile {\n-        self.db.parse(file_id).tree()\n+    pub fn parse(&self, file_id: FileId) -> Cancelable<SourceFile> {\n+        self.with_db(|db| db.parse(file_id).tree())\n     }\n \n     /// Gets the file's `LineIndex`: data structure to convert between absolute\n     /// offsets and line/column representation.\n-    pub fn file_line_index(&self, file_id: FileId) -> Arc<LineIndex> {\n-        self.db.line_index(file_id)\n+    pub fn file_line_index(&self, file_id: FileId) -> Cancelable<Arc<LineIndex>> {\n+        self.with_db(|db| db.line_index(file_id))\n     }\n \n     /// Selects the next syntactic nodes encompassing the range.\n@@ -344,58 +344,67 @@ impl Analysis {\n \n     /// Returns position of the matching brace (all types of braces are\n     /// supported).\n-    pub fn matching_brace(&self, position: FilePosition) -> Option<TextUnit> {\n-        let parse = self.db.parse(position.file_id);\n-        let file = parse.tree();\n-        matching_brace::matching_brace(&file, position.offset)\n+    pub fn matching_brace(&self, position: FilePosition) -> Cancelable<Option<TextUnit>> {\n+        self.with_db(|db| {\n+            let parse = db.parse(position.file_id);\n+            let file = parse.tree();\n+            matching_brace::matching_brace(&file, position.offset)\n+        })\n     }\n \n     /// Returns a syntax tree represented as `String`, for debug purposes.\n     // FIXME: use a better name here.\n-    pub fn syntax_tree(&self, file_id: FileId, text_range: Option<TextRange>) -> String {\n-        syntax_tree::syntax_tree(&self.db, file_id, text_range)\n+    pub fn syntax_tree(\n+        &self,\n+        file_id: FileId,\n+        text_range: Option<TextRange>,\n+    ) -> Cancelable<String> {\n+        self.with_db(|db| syntax_tree::syntax_tree(&db, file_id, text_range))\n     }\n \n     /// Returns an edit to remove all newlines in the range, cleaning up minor\n     /// stuff like trailing commas.\n-    pub fn join_lines(&self, frange: FileRange) -> SourceChange {\n-        let parse = self.db.parse(frange.file_id);\n-        let file_edit = SourceFileEdit {\n-            file_id: frange.file_id,\n-            edit: join_lines::join_lines(&parse.tree(), frange.range),\n-        };\n-        SourceChange::source_file_edit(\"join lines\", file_edit)\n+    pub fn join_lines(&self, frange: FileRange) -> Cancelable<SourceChange> {\n+        self.with_db(|db| {\n+            let parse = db.parse(frange.file_id);\n+            let file_edit = SourceFileEdit {\n+                file_id: frange.file_id,\n+                edit: join_lines::join_lines(&parse.tree(), frange.range),\n+            };\n+            SourceChange::source_file_edit(\"join lines\", file_edit)\n+        })\n     }\n \n     /// Returns an edit which should be applied when opening a new line, fixing\n     /// up minor stuff like continuing the comment.\n-    pub fn on_enter(&self, position: FilePosition) -> Option<SourceChange> {\n-        typing::on_enter(&self.db, position)\n+    pub fn on_enter(&self, position: FilePosition) -> Cancelable<Option<SourceChange>> {\n+        self.with_db(|db| typing::on_enter(&db, position))\n     }\n \n     /// Returns an edit which should be applied after `=` was typed. Primarily,\n     /// this works when adding `let =`.\n     // FIXME: use a snippet completion instead of this hack here.\n-    pub fn on_eq_typed(&self, position: FilePosition) -> Option<SourceChange> {\n-        let parse = self.db.parse(position.file_id);\n-        let file = parse.tree();\n-        let edit = typing::on_eq_typed(&file, position.offset)?;\n-        Some(SourceChange::source_file_edit(\n-            \"add semicolon\",\n-            SourceFileEdit { edit, file_id: position.file_id },\n-        ))\n+    pub fn on_eq_typed(&self, position: FilePosition) -> Cancelable<Option<SourceChange>> {\n+        self.with_db(|db| {\n+            let parse = db.parse(position.file_id);\n+            let file = parse.tree();\n+            let edit = typing::on_eq_typed(&file, position.offset)?;\n+            Some(SourceChange::source_file_edit(\n+                \"add semicolon\",\n+                SourceFileEdit { edit, file_id: position.file_id },\n+            ))\n+        })\n     }\n \n     /// Returns an edit which should be applied when a dot ('.') is typed on a blank line, indenting the line appropriately.\n-    pub fn on_dot_typed(&self, position: FilePosition) -> Option<SourceChange> {\n-        typing::on_dot_typed(&self.db, position)\n+    pub fn on_dot_typed(&self, position: FilePosition) -> Cancelable<Option<SourceChange>> {\n+        self.with_db(|db| typing::on_dot_typed(&db, position))\n     }\n \n     /// Returns a tree representation of symbols in the file. Useful to draw a\n     /// file outline.\n-    pub fn file_structure(&self, file_id: FileId) -> Vec<StructureNode> {\n-        let parse = self.db.parse(file_id);\n-        file_structure(&parse.tree())\n+    pub fn file_structure(&self, file_id: FileId) -> Cancelable<Vec<StructureNode>> {\n+        self.with_db(|db| file_structure(&db.parse(file_id).tree()))\n     }\n \n     /// Returns a list of the places in the file where type hints can be displayed.\n@@ -404,9 +413,8 @@ impl Analysis {\n     }\n \n     /// Returns the set of folding ranges.\n-    pub fn folding_ranges(&self, file_id: FileId) -> Vec<Fold> {\n-        let parse = self.db.parse(file_id);\n-        folding_ranges::folding_ranges(&parse.tree())\n+    pub fn folding_ranges(&self, file_id: FileId) -> Cancelable<Vec<Fold>> {\n+        self.with_db(|db| folding_ranges::folding_ranges(&db.parse(file_id).tree()))\n     }\n \n     /// Fuzzy searches for a symbol."}, {"sha": "89984e6426f41200d1043fb664f66f5ef275ecf7", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a", "patch": "@@ -372,7 +372,8 @@ mod tests {\n                 }\n             }\n         }\n-        let result = text_edit_builder.finish().apply(&*analysis.file_text(file_id.unwrap()));\n+        let result =\n+            text_edit_builder.finish().apply(&*analysis.file_text(file_id.unwrap()).unwrap());\n         assert_eq_text!(expected, &*result);\n     }\n }"}, {"sha": "dd31b909329fd7a69d2c4aa360e244bafb8fb9f2", "filename": "crates/ra_ide_api/src/syntax_tree.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs?ref=dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a", "patch": "@@ -101,7 +101,7 @@ mod tests {\n     fn test_syntax_tree_without_range() {\r\n         // Basic syntax\r\n         let (analysis, file_id) = single_file(r#\"fn foo() {}\"#);\r\n-        let syn = analysis.syntax_tree(file_id, None);\r\n+        let syn = analysis.syntax_tree(file_id, None).unwrap();\r\n \r\n         assert_eq_text!(\r\n             syn.trim(),\r\n@@ -133,7 +133,7 @@ fn test() {\n }\"#\r\n             .trim(),\r\n         );\r\n-        let syn = analysis.syntax_tree(file_id, None);\r\n+        let syn = analysis.syntax_tree(file_id, None).unwrap();\r\n \r\n         assert_eq_text!(\r\n             syn.trim(),\r\n@@ -176,7 +176,7 @@ SOURCE_FILE@[0; 60)\n     #[test]\r\n     fn test_syntax_tree_with_range() {\r\n         let (analysis, range) = single_file_with_range(r#\"<|>fn foo() {}<|>\"#.trim());\r\n-        let syn = analysis.syntax_tree(range.file_id, Some(range.range));\r\n+        let syn = analysis.syntax_tree(range.file_id, Some(range.range)).unwrap();\r\n \r\n         assert_eq_text!(\r\n             syn.trim(),\r\n@@ -206,7 +206,7 @@ FN_DEF@[0; 11)\n }\"#\r\n             .trim(),\r\n         );\r\n-        let syn = analysis.syntax_tree(range.file_id, Some(range.range));\r\n+        let syn = analysis.syntax_tree(range.file_id, Some(range.range)).unwrap();\r\n \r\n         assert_eq_text!(\r\n             syn.trim(),\r\n@@ -244,7 +244,7 @@ fn bar() {\n }\"#\r\n             .trim(),\r\n         );\r\n-        let syn = analysis.syntax_tree(range.file_id, Some(range.range));\r\n+        let syn = analysis.syntax_tree(range.file_id, Some(range.range)).unwrap();\r\n         assert_eq_text!(\r\n             syn.trim(),\r\n             r#\"\r\n@@ -278,7 +278,7 @@ fn bar() {\n }\"###\r\n                 .trim(),\r\n         );\r\n-        let syn = analysis.syntax_tree(range.file_id, Some(range.range));\r\n+        let syn = analysis.syntax_tree(range.file_id, Some(range.range)).unwrap();\r\n         assert_eq_text!(\r\n             syn.trim(),\r\n             r#\"\r\n@@ -311,7 +311,7 @@ fn bar() {\n }\"###\r\n                 .trim(),\r\n         );\r\n-        let syn = analysis.syntax_tree(range.file_id, Some(range.range));\r\n+        let syn = analysis.syntax_tree(range.file_id, Some(range.range)).unwrap();\r\n         assert_eq_text!(\r\n             syn.trim(),\r\n             r#\"\r"}, {"sha": "2d4491442c1b6a27672db1bb01efdc9422d09d82", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a", "patch": "@@ -195,7 +195,7 @@ fn foo() {\n         edit.insert(offset, \".\".to_string());\n         let before = edit.finish().apply(&before);\n         let (analysis, file_id) = single_file(&before);\n-        if let Some(result) = analysis.on_dot_typed(FilePosition { offset, file_id }) {\n+        if let Some(result) = analysis.on_dot_typed(FilePosition { offset, file_id }).unwrap() {\n             assert_eq!(result.source_file_edits.len(), 1);\n             let actual = result.source_file_edits[0].edit.apply(&before);\n             assert_eq_text!(after, &actual);\n@@ -377,7 +377,7 @@ fn foo() {\n         fn apply_on_enter(before: &str) -> Option<String> {\n             let (offset, before) = extract_offset(before);\n             let (analysis, file_id) = single_file(&before);\n-            let result = analysis.on_enter(FilePosition { offset, file_id })?;\n+            let result = analysis.on_enter(FilePosition { offset, file_id }).unwrap()?;\n \n             assert_eq!(result.source_file_edits.len(), 1);\n             let actual = result.source_file_edits[0].edit.apply(&before);"}, {"sha": "6b3be444fdf829297a627d1827c50e36a1ed1e8b", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a", "patch": "@@ -272,7 +272,7 @@ impl<'a> TryConvWith for &'a TextDocumentPositionParams {\n     type Output = FilePosition;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<FilePosition> {\n         let file_id = self.text_document.try_conv_with(world)?;\n-        let line_index = world.analysis().file_line_index(file_id);\n+        let line_index = world.analysis().file_line_index(file_id)?;\n         let offset = self.position.conv_with(&line_index);\n         Ok(FilePosition { file_id, offset })\n     }\n@@ -283,7 +283,7 @@ impl<'a> TryConvWith for (&'a TextDocumentIdentifier, Range) {\n     type Output = FileRange;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileRange> {\n         let file_id = self.0.try_conv_with(world)?;\n-        let line_index = world.analysis().file_line_index(file_id);\n+        let line_index = world.analysis().file_line_index(file_id)?;\n         let range = self.1.conv_with(&line_index);\n         Ok(FileRange { file_id, range })\n     }\n@@ -308,7 +308,7 @@ impl TryConvWith for SourceChange {\n         let cursor_position = match self.cursor_position {\n             None => None,\n             Some(pos) => {\n-                let line_index = world.analysis().file_line_index(pos.file_id);\n+                let line_index = world.analysis().file_line_index(pos.file_id)?;\n                 let edit = self\n                     .source_file_edits\n                     .iter()\n@@ -349,7 +349,7 @@ impl TryConvWith for SourceFileEdit {\n             uri: self.file_id.try_conv_with(world)?,\n             version: None,\n         };\n-        let line_index = world.analysis().file_line_index(self.file_id);\n+        let line_index = world.analysis().file_line_index(self.file_id)?;\n         let edits = self.edit.as_atoms().iter().map_conv_with(&line_index).collect();\n         Ok(TextDocumentEdit { text_document, edits })\n     }\n@@ -378,7 +378,7 @@ impl TryConvWith for &NavigationTarget {\n     type Ctx = WorldSnapshot;\n     type Output = Location;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<Location> {\n-        let line_index = world.analysis().file_line_index(self.file_id());\n+        let line_index = world.analysis().file_line_index(self.file_id())?;\n         let range = self.range();\n         to_location(self.file_id(), range, &world, &line_index)\n     }\n@@ -391,8 +391,8 @@ impl TryConvWith for (FileId, RangeInfo<NavigationTarget>) {\n         let (src_file_id, target) = self;\n \n         let target_uri = target.info.file_id().try_conv_with(world)?;\n-        let src_line_index = world.analysis().file_line_index(src_file_id);\n-        let tgt_line_index = world.analysis().file_line_index(target.info.file_id());\n+        let src_line_index = world.analysis().file_line_index(src_file_id)?;\n+        let tgt_line_index = world.analysis().file_line_index(target.info.file_id())?;\n \n         let target_range = target.info.full_range().conv_with(&tgt_line_index);\n "}, {"sha": "14619ede2231df65227d8dc316df32f34e44a1c7", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 35, "deletions": 29, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a", "patch": "@@ -39,9 +39,9 @@ pub fn handle_analyzer_status(world: WorldSnapshot, _: ()) -> Result<String> {\n \n pub fn handle_syntax_tree(world: WorldSnapshot, params: req::SyntaxTreeParams) -> Result<String> {\n     let id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(id);\n+    let line_index = world.analysis().file_line_index(id)?;\n     let text_range = params.range.map(|p| p.conv_with(&line_index));\n-    let res = world.analysis().syntax_tree(id, text_range);\n+    let res = world.analysis().syntax_tree(id, text_range)?;\n     Ok(res)\n }\n \n@@ -55,7 +55,7 @@ pub fn handle_extend_selection(\n          use the new selection range API in LSP\",\n     );\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n+    let line_index = world.analysis().file_line_index(file_id)?;\n     let selections = params\n         .selections\n         .into_iter()\n@@ -72,7 +72,7 @@ pub fn handle_selection_range(\n ) -> Result<Vec<req::SelectionRange>> {\n     let _p = profile(\"handle_selection_range\");\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n+    let line_index = world.analysis().file_line_index(file_id)?;\n     params\n         .positions\n         .into_iter()\n@@ -113,13 +113,19 @@ pub fn handle_find_matching_brace(\n ) -> Result<Vec<Position>> {\n     let _p = profile(\"handle_find_matching_brace\");\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n+    let line_index = world.analysis().file_line_index(file_id)?;\n     let res = params\n         .offsets\n         .into_iter()\n         .map_conv_with(&line_index)\n         .map(|offset| {\n-            world.analysis().matching_brace(FilePosition { file_id, offset }).unwrap_or(offset)\n+            if let Ok(Some(matching_brace_offset)) =\n+                world.analysis().matching_brace(FilePosition { file_id, offset })\n+            {\n+                matching_brace_offset\n+            } else {\n+                offset\n+            }\n         })\n         .map_conv_with(&line_index)\n         .collect();\n@@ -132,7 +138,7 @@ pub fn handle_join_lines(\n ) -> Result<req::SourceChange> {\n     let _p = profile(\"handle_join_lines\");\n     let frange = (&params.text_document, params.range).try_conv_with(&world)?;\n-    world.analysis().join_lines(frange).try_conv_with(&world)\n+    world.analysis().join_lines(frange)?.try_conv_with(&world)\n }\n \n pub fn handle_on_enter(\n@@ -141,7 +147,7 @@ pub fn handle_on_enter(\n ) -> Result<Option<req::SourceChange>> {\n     let _p = profile(\"handle_on_enter\");\n     let position = params.try_conv_with(&world)?;\n-    match world.analysis().on_enter(position) {\n+    match world.analysis().on_enter(position)? {\n         None => Ok(None),\n         Some(edit) => Ok(Some(edit.try_conv_with(&world)?)),\n     }\n@@ -153,7 +159,7 @@ pub fn handle_on_type_formatting(\n ) -> Result<Option<Vec<TextEdit>>> {\n     let _p = profile(\"handle_on_type_formatting\");\n     let mut position = params.text_document_position.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(position.file_id);\n+    let line_index = world.analysis().file_line_index(position.file_id)?;\n \n     // in `ra_ide_api`, the `on_type` invariant is that\n     // `text.char_at(position) == typed_char`.\n@@ -163,7 +169,7 @@ pub fn handle_on_type_formatting(\n         \"=\" => world.analysis().on_eq_typed(position),\n         \".\" => world.analysis().on_dot_typed(position),\n         _ => return Ok(None),\n-    };\n+    }?;\n     let mut edit = match edit {\n         Some(it) => it,\n         None => return Ok(None),\n@@ -181,11 +187,11 @@ pub fn handle_document_symbol(\n     params: req::DocumentSymbolParams,\n ) -> Result<Option<req::DocumentSymbolResponse>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n+    let line_index = world.analysis().file_line_index(file_id)?;\n \n     let mut parents: Vec<(DocumentSymbol, Option<usize>)> = Vec::new();\n \n-    for symbol in world.analysis().file_structure(file_id) {\n+    for symbol in world.analysis().file_structure(file_id)? {\n         let doc_symbol = DocumentSymbol {\n             name: symbol.label,\n             detail: symbol.detail,\n@@ -309,7 +315,7 @@ pub fn handle_runnables(\n     params: req::RunnablesParams,\n ) -> Result<Vec<req::Runnable>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n+    let line_index = world.analysis().file_line_index(file_id)?;\n     let offset = params.position.map(|it| it.conv_with(&line_index));\n     let mut res = Vec::new();\n     let workspace_root = world.workspace_root_for(file_id);\n@@ -383,7 +389,7 @@ pub fn handle_completion(\n         let mut res = false;\n         if let Some(ctx) = params.context {\n             if ctx.trigger_character.unwrap_or_default() == \":\" {\n-                let source_file = world.analysis().parse(position.file_id);\n+                let source_file = world.analysis().parse(position.file_id)?;\n                 let syntax = source_file.syntax();\n                 let text = syntax.text();\n                 if let Some(next_char) = text.char_at(position.offset) {\n@@ -405,7 +411,7 @@ pub fn handle_completion(\n         None => return Ok(None),\n         Some(items) => items,\n     };\n-    let line_index = world.analysis().file_line_index(position.file_id);\n+    let line_index = world.analysis().file_line_index(position.file_id)?;\n     let items: Vec<CompletionItem> =\n         items.into_iter().map(|item| item.conv_with(&line_index)).collect();\n \n@@ -417,12 +423,12 @@ pub fn handle_folding_range(\n     params: FoldingRangeParams,\n ) -> Result<Option<Vec<FoldingRange>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n+    let line_index = world.analysis().file_line_index(file_id)?;\n \n     let res = Some(\n         world\n             .analysis()\n-            .folding_ranges(file_id)\n+            .folding_ranges(file_id)?\n             .into_iter()\n             .map(|fold| {\n                 let kind = match fold.kind {\n@@ -474,7 +480,7 @@ pub fn handle_hover(\n         None => return Ok(None),\n         Some(info) => info,\n     };\n-    let line_index = world.analysis.file_line_index(position.file_id);\n+    let line_index = world.analysis.file_line_index(position.file_id)?;\n     let range = info.range.conv_with(&line_index);\n     let res = Hover {\n         contents: HoverContents::Markup(MarkupContent {\n@@ -503,7 +509,7 @@ pub fn handle_prepare_rename(\n     // Refs should always have a declaration\n     let r = refs.declaration();\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n+    let line_index = world.analysis().file_line_index(file_id)?;\n     let loc = to_location(r.file_id(), r.range(), &world, &line_index)?;\n \n     Ok(Some(PrepareRenameResponse::Range(loc.range)))\n@@ -536,7 +542,7 @@ pub fn handle_references(\n     params: req::ReferenceParams,\n ) -> Result<Option<Vec<Location>>> {\n     let position = params.text_document_position.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(position.file_id);\n+    let line_index = world.analysis().file_line_index(position.file_id)?;\n \n     let refs = match world.analysis().find_all_refs(position)? {\n         None => return Ok(None),\n@@ -563,9 +569,9 @@ pub fn handle_formatting(\n     params: DocumentFormattingParams,\n ) -> Result<Option<Vec<TextEdit>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let file = world.analysis().file_text(file_id);\n+    let file = world.analysis().file_text(file_id)?;\n \n-    let file_line_index = world.analysis().file_line_index(file_id);\n+    let file_line_index = world.analysis().file_line_index(file_id)?;\n     let end_position = TextUnit::of_str(&file).conv_with(&file_line_index);\n \n     use std::process;\n@@ -623,7 +629,7 @@ pub fn handle_code_action(\n ) -> Result<Option<CodeActionResponse>> {\n     let _p = profile(\"handle_code_action\");\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n+    let line_index = world.analysis().file_line_index(file_id)?;\n     let range = params.range.conv_with(&line_index);\n \n     let assists = world.analysis().assists(FileRange { file_id, range })?.into_iter();\n@@ -685,7 +691,7 @@ pub fn handle_code_lens(\n     params: req::CodeLensParams,\n ) -> Result<Option<Vec<CodeLens>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n+    let line_index = world.analysis().file_line_index(file_id)?;\n \n     let mut lenses: Vec<CodeLens> = Default::default();\n     let workspace_root = world.workspace_root_for(file_id);\n@@ -730,7 +736,7 @@ pub fn handle_code_lens(\n     lenses.extend(\n         world\n             .analysis()\n-            .file_structure(file_id)\n+            .file_structure(file_id)?\n             .into_iter()\n             .filter(|it| match it.kind {\n                 SyntaxKind::TRAIT_DEF | SyntaxKind::STRUCT_DEF | SyntaxKind::ENUM_DEF => true,\n@@ -807,7 +813,7 @@ pub fn handle_document_highlight(\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<Vec<DocumentHighlight>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n+    let line_index = world.analysis().file_line_index(file_id)?;\n \n     let refs = match world.analysis().find_all_refs(params.try_conv_with(&world)?)? {\n         None => return Ok(None),\n@@ -826,7 +832,7 @@ pub fn publish_diagnostics(\n     file_id: FileId,\n ) -> Result<req::PublishDiagnosticsParams> {\n     let uri = world.file_id_to_uri(file_id)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n+    let line_index = world.analysis().file_line_index(file_id)?;\n     let diagnostics = world\n         .analysis()\n         .diagnostics(file_id)?\n@@ -852,7 +858,7 @@ pub fn publish_decorations(\n }\n \n fn highlight(world: &WorldSnapshot, file_id: FileId) -> Result<Vec<Decoration>> {\n-    let line_index = world.analysis().file_line_index(file_id);\n+    let line_index = world.analysis().file_line_index(file_id)?;\n     let res = world\n         .analysis()\n         .highlight(file_id)?\n@@ -881,7 +887,7 @@ pub fn handle_inlay_hints(\n ) -> Result<Vec<InlayHint>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let analysis = world.analysis();\n-    let line_index = analysis.file_line_index(file_id);\n+    let line_index = analysis.file_line_index(file_id)?;\n     Ok(analysis\n         .inlay_hints(file_id)?\n         .into_iter()"}, {"sha": "1d775591046e846b7cd67a05de87b24803f0d460", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=dbbb0beb3ec9f11a635f43e60f3b3a42ba61338a", "patch": "@@ -215,7 +215,12 @@ impl WorldSnapshot {\n             }\n         }\n         res.push_str(\"\\nanalysis:\\n\");\n-        res.push_str(&self.analysis.status());\n+        res.push_str(\n+            &self\n+                .analysis\n+                .status()\n+                .unwrap_or_else(|_| \"Analysis retrieval was cancelled\".to_owned()),\n+        );\n         res\n     }\n "}]}