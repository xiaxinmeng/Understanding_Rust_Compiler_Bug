{"sha": "8f6603f58ec7247c585f795413ff5b4ddf409c49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNjYwM2Y1OGVjNzI0N2M1ODVmNzk1NDEzZmY1YjRkZGY0MDljNDk=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-17T20:48:03Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-17T20:51:17Z"}, "message": "Support #fmt precision for signed types", "tree": {"sha": "401f1de8cd40ce027f37130b7560adbcd38fd58a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/401f1de8cd40ce027f37130b7560adbcd38fd58a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f6603f58ec7247c585f795413ff5b4ddf409c49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f6603f58ec7247c585f795413ff5b4ddf409c49", "html_url": "https://github.com/rust-lang/rust/commit/8f6603f58ec7247c585f795413ff5b4ddf409c49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f6603f58ec7247c585f795413ff5b4ddf409c49/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c0aea69dab28a3e94d2c623ec741284f48e1205", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0aea69dab28a3e94d2c623ec741284f48e1205", "html_url": "https://github.com/rust-lang/rust/commit/4c0aea69dab28a3e94d2c623ec741284f48e1205"}], "stats": {"total": 115, "additions": 66, "deletions": 49}, "files": [{"sha": "232903849eafe27c4572fa12a866f99f998bc0ec", "filename": "src/lib/ExtFmt.rs", "status": "modified", "additions": 46, "deletions": 37, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8f6603f58ec7247c585f795413ff5b4ddf409c49/src%2Flib%2FExtFmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6603f58ec7247c585f795413ff5b4ddf409c49/src%2Flib%2FExtFmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FExtFmt.rs?ref=8f6603f58ec7247c585f795413ff5b4ddf409c49", "patch": "@@ -332,46 +332,13 @@ mod RT {\n                     ty ty);\n \n     fn conv_int(&conv cv, int i) -> str {\n-        ret pad(cv, _int.to_str(i, 10u));\n+        auto radix = 10u;\n+        auto prec = get_int_precision(cv);\n+        ret pad(cv, int_to_str_prec(i, radix, prec));\n     }\n \n     fn conv_uint(&conv cv, uint u) -> str {\n-\n-        // Convert a uint to string with a minimum number of digits.  If\n-        // precision is 0 and num is 0 then the result is the empty\n-        // string. Could move this to _str, but it doesn't seem all that\n-        // useful.\n-        fn uint_to_str_prec(uint num, uint radix, uint prec) -> str {\n-            auto s;\n-\n-            if (prec == 0u && num == 0u) {\n-                s = \"\";\n-            } else {\n-                s = _uint.to_str(num, radix);\n-                auto len = _str.char_len(s);\n-                if (len < prec) {\n-                    auto diff = prec - len;\n-                    auto pad = str_init_elt('0', diff);\n-                    s = pad + s;\n-                }\n-            }\n-\n-            ret s;\n-        }\n-\n-        fn get_precision(&conv cv) -> uint {\n-            alt (cv.precision) {\n-                case (count_is(?c)) {\n-                    ret c as uint;\n-                }\n-                case (count_implied) {\n-                    ret 1u;\n-                }\n-            }\n-        }\n-\n-        auto prec = get_precision(cv);\n-\n+        auto prec = get_int_precision(cv);\n         auto res;\n         alt (cv.ty) {\n             case (ty_default) {\n@@ -418,6 +385,48 @@ mod RT {\n         ret pad(cv, unpadded);\n     }\n \n+    // Convert an int to string with minimum number of digits. If precision is\n+    // 0 and num is 0 then the result is the empty string.\n+    fn int_to_str_prec(int num, uint radix, uint prec) -> str {\n+        if (num < 0) {\n+            ret \"-\" + uint_to_str_prec((-num) as uint, radix, prec);\n+        } else {\n+            ret uint_to_str_prec(num as uint, radix, prec);\n+        }\n+    }\n+\n+    // Convert a uint to string with a minimum number of digits.  If precision\n+    // is 0 and num is 0 then the result is the empty string. Could move this\n+    // to _uint, but it doesn't seem all that useful.\n+    fn uint_to_str_prec(uint num, uint radix, uint prec) -> str {\n+        auto s;\n+\n+        if (prec == 0u && num == 0u) {\n+            s = \"\";\n+        } else {\n+            s = _uint.to_str(num, radix);\n+            auto len = _str.char_len(s);\n+            if (len < prec) {\n+                auto diff = prec - len;\n+                auto pad = str_init_elt('0', diff);\n+                s = pad + s;\n+            }\n+        }\n+\n+        ret s;\n+    }\n+\n+    fn get_int_precision(&conv cv) -> uint {\n+        alt (cv.precision) {\n+            case (count_is(?c)) {\n+                ret c as uint;\n+            }\n+            case (count_implied) {\n+                ret 1u;\n+            }\n+        }\n+    }\n+\n     // FIXME: This might be useful in _str, but needs to be utf8 safe first\n     fn str_init_elt(char c, uint n_elts) -> str {\n         auto svec = _vec.init_elt[u8](c as u8, n_elts);"}, {"sha": "b75529fadbeb4d6c60891e41b5c3531ba549e27b", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8f6603f58ec7247c585f795413ff5b4ddf409c49/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6603f58ec7247c585f795413ff5b4ddf409c49/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=8f6603f58ec7247c585f795413ff5b4ddf409c49", "patch": "@@ -55,39 +55,47 @@ fn main() {\n   test(#fmt(\"%-10t\", 0xff_u), \"11111111  \");\n \n   // Precision\n-//   test(#fmt(\"%.d\", 0), \"\");\n+   test(#fmt(\"%.d\", 0), \"\");\n    test(#fmt(\"%.u\", 0u), \"\");\n    test(#fmt(\"%.x\", 0u), \"\");\n-//   test(#fmt(\"%.d\", 10), \"10\");\n-//   test(#fmt(\"%.d\", -10), \"-10\");\n+   test(#fmt(\"%.t\", 0u), \"\");\n+   test(#fmt(\"%.d\", 10), \"10\");\n+   test(#fmt(\"%.d\", -10), \"-10\");\n    test(#fmt(\"%.u\", 10u), \"10\");\n    test(#fmt(\"%.s\", \"test\"), \"\");\n    test(#fmt(\"%.x\", 127u), \"7f\");\n+   test(#fmt(\"%.t\", 3u), \"11\");\n \n-//   test(#fmt(\"%.0d\", 0), \"\");\n+   test(#fmt(\"%.0d\", 0), \"\");\n    test(#fmt(\"%.0u\", 0u), \"\");\n    test(#fmt(\"%.0x\", 0u), \"\");\n-//   test(#fmt(\"%.0d\", 10), \"10\");\n-//   test(#fmt(\"%.0d\", -10), \"-10\");\n+   test(#fmt(\"%.0t\", 0u), \"\");\n+   test(#fmt(\"%.0d\", 10), \"10\");\n+   test(#fmt(\"%.0d\", -10), \"-10\");\n    test(#fmt(\"%.0u\", 10u), \"10\");\n    test(#fmt(\"%.0s\", \"test\"), \"\");\n    test(#fmt(\"%.0x\", 127u), \"7f\");\n+   test(#fmt(\"%.0t\", 3u), \"11\");\n \n-//   test(#fmt(\"%.1d\", 0), \"0\");\n+   test(#fmt(\"%.1d\", 0), \"0\");\n    test(#fmt(\"%.1u\", 0u), \"0\");\n    test(#fmt(\"%.1x\", 0u), \"0\");\n-//   test(#fmt(\"%.1d\", 10), \"10\");\n-//   test(#fmt(\"%.1d\", -10), \"-10\");\n+   test(#fmt(\"%.1t\", 0u), \"0\");\n+   test(#fmt(\"%.1d\", 10), \"10\");\n+   test(#fmt(\"%.1d\", -10), \"-10\");\n    test(#fmt(\"%.1u\", 10u), \"10\");\n    test(#fmt(\"%.1s\", \"test\"), \"t\");\n    test(#fmt(\"%.1x\", 127u), \"7f\");\n+   test(#fmt(\"%.1t\", 3u), \"11\");\n \n-//   test(#fmt(\"%.5d\", 0), \"00000\");\n+   test(#fmt(\"%.5d\", 0), \"00000\");\n    test(#fmt(\"%.5u\", 0u), \"00000\");\n    test(#fmt(\"%.5x\", 0u), \"00000\");\n-//   test(#fmt(\"%.5d\", 10), \"00010\");\n-//   test(#fmt(\"%.5d\", -10), \"-00010\");\n+   test(#fmt(\"%.5t\", 0u), \"00000\");\n+   test(#fmt(\"%.5d\", 10), \"00010\");\n+   test(#fmt(\"%.5d\", -10), \"-00010\");\n    test(#fmt(\"%.5u\", 10u), \"00010\");\n    test(#fmt(\"%.5s\", \"test\"), \"test\");\n    test(#fmt(\"%.5x\", 127u), \"0007f\");\n+   test(#fmt(\"%.5t\", 3u), \"00011\");\n }"}]}