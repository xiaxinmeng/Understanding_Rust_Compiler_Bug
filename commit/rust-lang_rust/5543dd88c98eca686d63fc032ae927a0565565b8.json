{"sha": "5543dd88c98eca686d63fc032ae927a0565565b8", "node_id": "C_kwDOAAsO6NoAKDU1NDNkZDg4Yzk4ZWNhNjg2ZDYzZmMwMzJhZTkyN2EwNTY1NTY1Yjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T08:02:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T08:02:37Z"}, "message": "Auto merge of #13036 - sancho20021:10881-inline_type_alias_uses, r=Veykril\n\nfeat: Add an assist for inlining all type alias uses\n\n## Description\n`inline_type_alias_uses` assist tries to inline all selected type alias occurrences.\n\n### Currently\nType alias used in `PathType` position are inlined.\n\n### Not supported\n- Removing type alias declaration if all uses are inlined.\n- Removing redundant imports after inlining all uses in the file.\n- Type alias not in `PathType` position, such as:\n  - `A::new()`\n  - `let x = A {}`\n  - `let bits = A::BITS`\n  - etc.\n\n## Demonstration\n\n![example](https://user-images.githubusercontent.com/45790125/184905226-9cb8ac81-1439-4387-a13b-e18ad4ecf208.gif)\n\n## Related Issues\nPartially fixes #10881", "tree": {"sha": "e491d3881f490fcec0cc705b29c03856614ea958", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e491d3881f490fcec0cc705b29c03856614ea958"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5543dd88c98eca686d63fc032ae927a0565565b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5543dd88c98eca686d63fc032ae927a0565565b8", "html_url": "https://github.com/rust-lang/rust/commit/5543dd88c98eca686d63fc032ae927a0565565b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5543dd88c98eca686d63fc032ae927a0565565b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d36aba57a279ef3a018626a41976ac831944c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d36aba57a279ef3a018626a41976ac831944c5e", "html_url": "https://github.com/rust-lang/rust/commit/1d36aba57a279ef3a018626a41976ac831944c5e"}, {"sha": "313b004ef76d3352f36e5128b16ca5212de97d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/313b004ef76d3352f36e5128b16ca5212de97d49", "html_url": "https://github.com/rust-lang/rust/commit/313b004ef76d3352f36e5128b16ca5212de97d49"}], "stats": {"total": 255, "additions": 222, "deletions": 33}, "files": [{"sha": "9adf6381c1cbcf752b41b1852706043d71150050", "filename": "crates/ide-assists/src/handlers/inline_type_alias.rs", "status": "modified", "additions": 196, "deletions": 33, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/5543dd88c98eca686d63fc032ae927a0565565b8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5543dd88c98eca686d63fc032ae927a0565565b8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs?ref=5543dd88c98eca686d63fc032ae927a0565565b8", "patch": "@@ -1,9 +1,9 @@\n // Some ideas for future improvements:\n // - Support replacing aliases which are used in expressions, e.g. `A::new()`.\n-// - \"inline_alias_to_users\" assist #10881.\n // - Remove unused aliases if there are no longer any users, see inline_call.rs.\n \n use hir::{HasSource, PathResolution};\n+use ide_db::{defs::Definition, search::FileReference};\n use itertools::Itertools;\n use std::collections::HashMap;\n use syntax::{\n@@ -16,6 +16,78 @@ use crate::{\n     AssistId, AssistKind,\n };\n \n+// Assist: inline_type_alias_uses\n+//\n+// Inline a type alias into all of its uses where possible.\n+//\n+// ```\n+// type $0A = i32;\n+// fn id(x: A) -> A {\n+//     x\n+// };\n+// fn foo() {\n+//     let _: A = 3;\n+// }\n+// ```\n+// ->\n+// ```\n+// type A = i32;\n+// fn id(x: i32) -> i32 {\n+//     x\n+// };\n+// fn foo() {\n+//     let _: i32 = 3;\n+// }\n+pub(crate) fn inline_type_alias_uses(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    let name = ctx.find_node_at_offset::<ast::Name>()?;\n+    let ast_alias = name.syntax().parent().and_then(ast::TypeAlias::cast)?;\n+\n+    let hir_alias = ctx.sema.to_def(&ast_alias)?;\n+    let concrete_type = ast_alias.ty()?;\n+\n+    let usages = Definition::TypeAlias(hir_alias).usages(&ctx.sema);\n+    if !usages.at_least_one() {\n+        return None;\n+    }\n+\n+    // until this is ok\n+\n+    acc.add(\n+        AssistId(\"inline_type_alias_uses\", AssistKind::RefactorInline),\n+        \"Inline type alias into all uses\",\n+        name.syntax().text_range(),\n+        |builder| {\n+            let usages = usages.all();\n+\n+            let mut inline_refs_for_file = |file_id, refs: Vec<FileReference>| {\n+                builder.edit_file(file_id);\n+\n+                let path_types: Vec<ast::PathType> = refs\n+                    .into_iter()\n+                    .filter_map(|file_ref| match file_ref.name {\n+                        ast::NameLike::NameRef(path_type) => {\n+                            path_type.syntax().ancestors().nth(3).and_then(ast::PathType::cast)\n+                        }\n+                        _ => None,\n+                    })\n+                    .collect();\n+\n+                for (target, replacement) in path_types.into_iter().filter_map(|path_type| {\n+                    let replacement = inline(&ast_alias, &path_type)?.to_text(&concrete_type);\n+                    let target = path_type.syntax().text_range();\n+                    Some((target, replacement))\n+                }) {\n+                    builder.replace(target, replacement);\n+                }\n+            };\n+\n+            for (file_id, refs) in usages.into_iter() {\n+                inline_refs_for_file(file_id, refs);\n+            }\n+        },\n+    )\n+}\n+\n // Assist: inline_type_alias\n //\n // Replace a type alias with its concrete type.\n@@ -36,11 +108,6 @@ use crate::{\n // }\n // ```\n pub(crate) fn inline_type_alias(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n-    enum Replacement {\n-        Generic { lifetime_map: LifetimeMap, const_and_type_map: ConstAndTypeMap },\n-        Plain,\n-    }\n-\n     let alias_instance = ctx.find_node_at_offset::<ast::PathType>()?;\n     let concrete_type;\n     let replacement;\n@@ -59,23 +126,7 @@ pub(crate) fn inline_type_alias(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n         _ => {\n             let alias = get_type_alias(&ctx, &alias_instance)?;\n             concrete_type = alias.ty()?;\n-\n-            replacement = if let Some(alias_generics) = alias.generic_param_list() {\n-                if alias_generics.generic_params().next().is_none() {\n-                    cov_mark::hit!(no_generics_params);\n-                    return None;\n-                }\n-\n-                let instance_args =\n-                    alias_instance.syntax().descendants().find_map(ast::GenericArgList::cast);\n-\n-                Replacement::Generic {\n-                    lifetime_map: LifetimeMap::new(&instance_args, &alias_generics)?,\n-                    const_and_type_map: ConstAndTypeMap::new(&instance_args, &alias_generics)?,\n-                }\n-            } else {\n-                Replacement::Plain\n-            };\n+            replacement = inline(&alias, &alias_instance)?;\n         }\n     }\n \n@@ -85,19 +136,45 @@ pub(crate) fn inline_type_alias(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n         AssistId(\"inline_type_alias\", AssistKind::RefactorInline),\n         \"Inline type alias\",\n         target,\n-        |builder| {\n-            let replacement_text = match replacement {\n-                Replacement::Generic { lifetime_map, const_and_type_map } => {\n-                    create_replacement(&lifetime_map, &const_and_type_map, &concrete_type)\n-                }\n-                Replacement::Plain => concrete_type.to_string(),\n-            };\n-\n-            builder.replace(target, replacement_text);\n-        },\n+        |builder| builder.replace(target, replacement.to_text(&concrete_type)),\n     )\n }\n \n+impl Replacement {\n+    fn to_text(&self, concrete_type: &ast::Type) -> String {\n+        match self {\n+            Replacement::Generic { lifetime_map, const_and_type_map } => {\n+                create_replacement(&lifetime_map, &const_and_type_map, &concrete_type)\n+            }\n+            Replacement::Plain => concrete_type.to_string(),\n+        }\n+    }\n+}\n+\n+enum Replacement {\n+    Generic { lifetime_map: LifetimeMap, const_and_type_map: ConstAndTypeMap },\n+    Plain,\n+}\n+\n+fn inline(alias_def: &ast::TypeAlias, alias_instance: &ast::PathType) -> Option<Replacement> {\n+    let repl = if let Some(alias_generics) = alias_def.generic_param_list() {\n+        if alias_generics.generic_params().next().is_none() {\n+            cov_mark::hit!(no_generics_params);\n+            return None;\n+        }\n+        let instance_args =\n+            alias_instance.syntax().descendants().find_map(ast::GenericArgList::cast);\n+\n+        Replacement::Generic {\n+            lifetime_map: LifetimeMap::new(&instance_args, &alias_generics)?,\n+            const_and_type_map: ConstAndTypeMap::new(&instance_args, &alias_generics)?,\n+        }\n+    } else {\n+        Replacement::Plain\n+    };\n+    Some(repl)\n+}\n+\n struct LifetimeMap(HashMap<String, ast::Lifetime>);\n \n impl LifetimeMap {\n@@ -835,4 +912,90 @@ trait Tr {\n \"#,\n         );\n     }\n+\n+    mod inline_type_alias_uses {\n+        use crate::{handlers::inline_type_alias::inline_type_alias_uses, tests::check_assist};\n+\n+        #[test]\n+        fn inline_uses() {\n+            check_assist(\n+                inline_type_alias_uses,\n+                r#\"\n+type $0A = u32;\n+\n+fn foo() {\n+    let _: A = 3;\n+    let _: A = 4;\n+}\n+\"#,\n+                r#\"\n+type A = u32;\n+\n+fn foo() {\n+    let _: u32 = 3;\n+    let _: u32 = 4;\n+}\n+\"#,\n+            );\n+        }\n+\n+        #[test]\n+        fn inline_uses_across_files() {\n+            check_assist(\n+                inline_type_alias_uses,\n+                r#\"\n+//- /lib.rs\n+mod foo;\n+type $0T<E> = Vec<E>;\n+fn f() -> T<&str> {\n+    vec![\"hello\"]\n+}\n+\n+//- /foo.rs\n+use super::T;\n+fn foo() {\n+    let _: T<i8> = Vec::new();\n+}\n+\"#,\n+                r#\"\n+//- /lib.rs\n+mod foo;\n+type T<E> = Vec<E>;\n+fn f() -> Vec<&str> {\n+    vec![\"hello\"]\n+}\n+\n+//- /foo.rs\n+use super::T;\n+fn foo() {\n+    let _: Vec<i8> = Vec::new();\n+}\n+\"#,\n+            );\n+        }\n+\n+        #[test]\n+        fn inline_uses_across_files_2() {\n+            check_assist(\n+                inline_type_alias_uses,\n+                r#\"\n+//- /lib.rs\n+mod foo;\n+type $0I = i32;\n+\n+//- /foo.rs\n+use super::I;\n+fn foo() {\n+    let _: I = 0;\n+}\n+\"#,\n+                r#\"\n+use super::I;\n+fn foo() {\n+    let _: i32 = 0;\n+}\n+\"#,\n+            );\n+        }\n+    }\n }"}, {"sha": "7fb35143fa2ff1303459cedde3579f16221d7fa7", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5543dd88c98eca686d63fc032ae927a0565565b8/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5543dd88c98eca686d63fc032ae927a0565565b8/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=5543dd88c98eca686d63fc032ae927a0565565b8", "patch": "@@ -243,6 +243,7 @@ mod handlers {\n             inline_call::inline_into_callers,\n             inline_local_variable::inline_local_variable,\n             inline_type_alias::inline_type_alias,\n+            inline_type_alias::inline_type_alias_uses,\n             introduce_named_generic::introduce_named_generic,\n             introduce_named_lifetime::introduce_named_lifetime,\n             invert_if::invert_if,"}, {"sha": "22319f36134fb6b6d0ee259ae1f2245754d36917", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5543dd88c98eca686d63fc032ae927a0565565b8/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5543dd88c98eca686d63fc032ae927a0565565b8/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=5543dd88c98eca686d63fc032ae927a0565565b8", "patch": "@@ -1356,6 +1356,31 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_inline_type_alias_uses() {\n+    check_doc_test(\n+        \"inline_type_alias_uses\",\n+        r#####\"\n+type $0A = i32;\n+fn id(x: A) -> A {\n+    x\n+};\n+fn foo() {\n+    let _: A = 3;\n+}\n+\"#####,\n+        r#####\"\n+type A = i32;\n+fn id(x: i32) -> i32 {\n+    x\n+};\n+fn foo() {\n+    let _: i32 = 3;\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_introduce_named_generic() {\n     check_doc_test("}]}