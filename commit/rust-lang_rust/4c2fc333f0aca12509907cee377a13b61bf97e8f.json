{"sha": "4c2fc333f0aca12509907cee377a13b61bf97e8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMmZjMzMzZjBhY2ExMjUwOTkwN2NlZTM3N2ExM2I2MWJmOTdlOGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-07T20:58:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-04T15:02:40Z"}, "message": "create just one subuniverse per binder -- no need for more, really", "tree": {"sha": "3000065402b940cf73d22aa3ca4a620406e17b0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3000065402b940cf73d22aa3ca4a620406e17b0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c2fc333f0aca12509907cee377a13b61bf97e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2fc333f0aca12509907cee377a13b61bf97e8f", "html_url": "https://github.com/rust-lang/rust/commit/4c2fc333f0aca12509907cee377a13b61bf97e8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c2fc333f0aca12509907cee377a13b61bf97e8f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8dd084ef16e81e79a001f0eaa57b2cfcf835c70", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8dd084ef16e81e79a001f0eaa57b2cfcf835c70", "html_url": "https://github.com/rust-lang/rust/commit/f8dd084ef16e81e79a001f0eaa57b2cfcf835c70"}], "stats": {"total": 106, "additions": 37, "deletions": 69}, "files": [{"sha": "75f2e224dc1f444748bd3a0c7f93c6ee8b65a298", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2fc333f0aca12509907cee377a13b61bf97e8f/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2fc333f0aca12509907cee377a13b61bf97e8f/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=4c2fc333f0aca12509907cee377a13b61bf97e8f", "patch": "@@ -591,9 +591,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                            -> (T, PlaceholderMap<'tcx>)\n         where T : TypeFoldable<'tcx>\n     {\n+        let new_universe = self.create_subuniverse();\n+\n         let (result, map) = self.tcx.replace_late_bound_regions(binder, |br| {\n-            self.universe.set(self.universe().subuniverse());\n-            self.tcx.mk_region(ty::RePlaceholder(self.universe(), br))\n+            self.tcx.mk_region(ty::RePlaceholder(new_universe, br))\n         });\n \n         debug!(\"skolemize_bound_regions(binder={:?}, result={:?}, map={:?})\",\n@@ -795,7 +796,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let skol_regions: FxHashSet<_> = placeholder_map.values().cloned().collect();\n         self.borrow_region_constraints()\n             .pop_placeholders(\n-                self.universe(),\n                 &skol_regions,\n                 &snapshot.region_constraints_snapshot,\n             );"}, {"sha": "929c8c541adceaf09f0bf0b2d68032437d00bae6", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 34, "deletions": 66, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/4c2fc333f0aca12509907cee377a13b61bf97e8f/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2fc333f0aca12509907cee377a13b61bf97e8f/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=4c2fc333f0aca12509907cee377a13b61bf97e8f", "patch": "@@ -10,19 +10,19 @@\n \n //! See README.md\n \n-use self::UndoLogEntry::*;\n use self::CombineMapType::*;\n+use self::UndoLogEntry::*;\n \n-use super::{MiscVariable, RegionVariableOrigin, SubregionOrigin};\n use super::unify_key;\n+use super::{MiscVariable, RegionVariableOrigin, SubregionOrigin};\n \n-use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::unify as ut;\n-use ty::{self, Ty, TyCtxt};\n-use ty::{Region, RegionVid};\n use ty::ReStatic;\n+use ty::{self, Ty, TyCtxt};\n use ty::{BrFresh, ReLateBound, ReVar};\n+use ty::{Region, RegionVid};\n \n use std::collections::BTreeMap;\n use std::{cmp, fmt, mem, u32};\n@@ -495,13 +495,12 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         }\n     }\n \n-    pub fn new_region_var(&mut self,\n-                          universe: ty::UniverseIndex,\n-                          origin: RegionVariableOrigin) -> RegionVid {\n-        let vid = self.var_infos.push(RegionVariableInfo {\n-            origin,\n-            universe,\n-        });\n+    pub fn new_region_var(\n+        &mut self,\n+        universe: ty::UniverseIndex,\n+        origin: RegionVariableOrigin,\n+    ) -> RegionVid {\n+        let vid = self.var_infos.push(RegionVariableInfo { origin, universe });\n \n         let u_vid = self.unification_table\n             .new_key(unify_key::RegionVidKey { min_vid: vid });\n@@ -511,8 +510,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         }\n         debug!(\n             \"created new region variable {:?} with origin {:?}\",\n-            vid,\n-            origin\n+            vid, origin\n         );\n         return vid;\n     }\n@@ -533,45 +531,19 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n     /// created in that time.\n     pub fn pop_placeholders(\n         &mut self,\n-        skolemization_count: ty::UniverseIndex,\n-        skols: &FxHashSet<ty::Region<'tcx>>,\n+        placeholders: &FxHashSet<ty::Region<'tcx>>,\n         snapshot: &RegionSnapshot,\n     ) {\n-        debug!(\"pop_placeholders(skols={:?})\", skols);\n+        debug!(\"pop_placeholders(placeholders={:?})\", placeholders);\n \n         assert!(self.in_snapshot());\n         assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n-        assert!(\n-            skolemization_count.as_usize() >= skols.len(),\n-            \"popping more placeholder variables than actually exist, \\\n-             sc now = {:?}, skols.len = {:?}\",\n-            skolemization_count,\n-            skols.len()\n-        );\n-\n-        let last_to_pop = skolemization_count.subuniverse();\n-        let first_to_pop = ty::UniverseIndex::from(last_to_pop.as_u32() - skols.len() as u32);\n-\n-        debug_assert! {\n-            skols.iter()\n-                 .all(|&k| match *k {\n-                     ty::RePlaceholder(universe, _) =>\n-                         universe >= first_to_pop &&\n-                         universe < last_to_pop,\n-                     _ =>\n-                         false\n-                 }),\n-            \"invalid skolemization keys or keys out of range ({:?}..{:?}): {:?}\",\n-            first_to_pop,\n-            last_to_pop,\n-            skols\n-        }\n \n         let constraints_to_kill: Vec<usize> = self.undo_log\n             .iter()\n             .enumerate()\n             .rev()\n-            .filter(|&(_, undo_entry)| kill_constraint(skols, undo_entry))\n+            .filter(|&(_, undo_entry)| kill_constraint(placeholders, undo_entry))\n             .map(|(index, _)| index)\n             .collect();\n \n@@ -583,20 +555,20 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         return;\n \n         fn kill_constraint<'tcx>(\n-            skols: &FxHashSet<ty::Region<'tcx>>,\n+            placeholders: &FxHashSet<ty::Region<'tcx>>,\n             undo_entry: &UndoLogEntry<'tcx>,\n         ) -> bool {\n             match undo_entry {\n                 &AddConstraint(Constraint::VarSubVar(..)) => false,\n-                &AddConstraint(Constraint::RegSubVar(a, _)) => skols.contains(&a),\n-                &AddConstraint(Constraint::VarSubReg(_, b)) => skols.contains(&b),\n+                &AddConstraint(Constraint::RegSubVar(a, _)) => placeholders.contains(&a),\n+                &AddConstraint(Constraint::VarSubReg(_, b)) => placeholders.contains(&b),\n                 &AddConstraint(Constraint::RegSubReg(a, b)) => {\n-                    skols.contains(&a) || skols.contains(&b)\n+                    placeholders.contains(&a) || placeholders.contains(&b)\n                 }\n                 &AddGiven(..) => false,\n                 &AddVerify(_) => false,\n                 &AddCombination(_, ref two_regions) => {\n-                    skols.contains(&two_regions.a) || skols.contains(&two_regions.b)\n+                    placeholders.contains(&two_regions.a) || placeholders.contains(&two_regions.b)\n                 }\n                 &AddVar(..) | &OpenSnapshot | &Purged | &CommitedSnapshot => false,\n             }\n@@ -713,9 +685,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         // cannot add constraints once regions are resolved\n         debug!(\n             \"RegionConstraintCollector: make_subregion({:?}, {:?}) due to {:?}\",\n-            sub,\n-            sup,\n-            origin\n+            sub, sup, origin\n         );\n \n         match (sub, sup) {\n@@ -854,19 +824,19 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n \n     fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {\n         match *region {\n-            ty::ReScope(..) |\n-            ty::ReStatic |\n-            ty::ReEmpty |\n-            ty::ReErased |\n-            ty::ReFree(..) |\n-            ty::ReEarlyBound(..) => ty::UniverseIndex::ROOT,\n+            ty::ReScope(..)\n+            | ty::ReStatic\n+            | ty::ReEmpty\n+            | ty::ReErased\n+            | ty::ReFree(..)\n+            | ty::ReEarlyBound(..) => ty::UniverseIndex::ROOT,\n             ty::RePlaceholder(universe, _) => universe,\n-            ty::ReClosureBound(vid) |\n-            ty::ReVar(vid) => self.var_universe(vid),\n-            ty::ReLateBound(..) =>\n-                bug!(\"universe(): encountered bound region {:?}\", region),\n-            ty::ReCanonical(..) =>\n-                bug!(\"region_universe(): encountered canonical region {:?}\", region),\n+            ty::ReClosureBound(vid) | ty::ReVar(vid) => self.var_universe(vid),\n+            ty::ReLateBound(..) => bug!(\"universe(): encountered bound region {:?}\", region),\n+            ty::ReCanonical(..) => bug!(\n+                \"region_universe(): encountered canonical region {:?}\",\n+                region\n+            ),\n         }\n     }\n \n@@ -897,9 +867,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n     ) -> FxHashSet<ty::Region<'tcx>> {\n         debug!(\n             \"tainted(mark={:?}, r0={:?}, directions={:?})\",\n-            mark,\n-            r0,\n-            directions\n+            mark, r0, directions\n         );\n \n         // `result_set` acts as a worklist: we explore all outgoing"}]}