{"sha": "5de684adf6f6b21a6ff56953a63012e15ea4f6d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZTY4NGFkZjZmNmIyMWE2ZmY1Njk1M2E2MzAxMmUxNWVhNGY2ZDQ=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-06-28T16:07:39Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-06-28T16:07:39Z"}, "message": "adressed @eddyb's comments", "tree": {"sha": "0f1067bbb421728bf9aebef23d03c68f6bd96241", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f1067bbb421728bf9aebef23d03c68f6bd96241"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5de684adf6f6b21a6ff56953a63012e15ea4f6d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5de684adf6f6b21a6ff56953a63012e15ea4f6d4", "html_url": "https://github.com/rust-lang/rust/commit/5de684adf6f6b21a6ff56953a63012e15ea4f6d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5de684adf6f6b21a6ff56953a63012e15ea4f6d4/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad7d7eaba3f6be5b2e4fa388d99ab4aa780773b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7d7eaba3f6be5b2e4fa388d99ab4aa780773b3", "html_url": "https://github.com/rust-lang/rust/commit/ad7d7eaba3f6be5b2e4fa388d99ab4aa780773b3"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "e1e681b7aff3541e3a8fe2c2589d85aca9128ada", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5de684adf6f6b21a6ff56953a63012e15ea4f6d4/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de684adf6f6b21a6ff56953a63012e15ea4f6d4/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5de684adf6f6b21a6ff56953a63012e15ea4f6d4", "patch": "@@ -919,7 +919,7 @@ pub enum Expr_ {\n     /// Inline assembly (from `asm!`), with its outputs and inputs.\n     ExprInlineAsm(InlineAsm, Vec<P<Expr>>, Vec<P<Expr>>),\n \n-    /// A struct or enum variant literal expression.\n+    /// A struct or struct-like variant literal expression.\n     ///\n     /// For example, `Foo {x: 1, y: 2}`, or\n     /// `Foo {x: 1, .. base}`, where `base` is the `Option<Expr>`.\n@@ -955,12 +955,12 @@ pub struct QSelf {\n pub enum MatchSource {\n     /// A `match _ { .. }`\n     Normal,\n-    /// An `if let _ = _ { .. }` (optionally with `else { .. }`\n+    /// An `if let _ = _ { .. }` (optionally with `else { .. }`)\n     IfLetDesugar {\n         contains_else_clause: bool,\n     },\n     /// A `while let _ = _ { .. }` (which was desugared to a\n-    /// `loop { match _ { .. } }`\n+    /// `loop { match _ { .. } }`)\n     WhileLetDesugar,\n     /// A desugared `for _ in _ { .. }` loop\n     ForLoopDesugar,"}]}