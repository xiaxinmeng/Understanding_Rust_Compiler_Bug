{"sha": "34895ded2c76cc87dc6ff33adaa541c239d416bf", "node_id": "C_kwDOAAsO6NoAKDM0ODk1ZGVkMmM3NmNjODdkYzZmZjMzYWRhYTU0MWMyMzlkNDE2YmY", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-06-09T18:51:39Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-06-09T18:51:39Z"}, "message": "Avoid `thread::panicking()` in non-poisoning methods of `Mutex` and `RwLock`\n\n`Mutex::lock()` and `RwLock::write()` are poison-guarded against panics,\nin that they set the poison flag if a panic occurs while they're locked.\nBut if we're already in a panic (`thread::panicking()`), they leave the\npoison flag alone.\n\nThat check is a bit of a waste for methods that never set the poison\nflag though, namely `get_mut()`, `into_inner()`, and `RwLock::read()`.\nThese use-cases are now split to avoid that unnecessary call.", "tree": {"sha": "2dce32a0db8647be4ac6fd4af490cdc6792e639c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dce32a0db8647be4ac6fd4af490cdc6792e639c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34895ded2c76cc87dc6ff33adaa541c239d416bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34895ded2c76cc87dc6ff33adaa541c239d416bf", "html_url": "https://github.com/rust-lang/rust/commit/34895ded2c76cc87dc6ff33adaa541c239d416bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34895ded2c76cc87dc6ff33adaa541c239d416bf/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0411e2bfe1fb939757aa96603f0a10d1d9eb029", "html_url": "https://github.com/rust-lang/rust/commit/a0411e2bfe1fb939757aa96603f0a10d1d9eb029"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "31342a8905452e394a5097fd0ed4897b5970a046", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34895ded2c76cc87dc6ff33adaa541c239d416bf/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34895ded2c76cc87dc6ff33adaa541c239d416bf/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=34895ded2c76cc87dc6ff33adaa541c239d416bf", "patch": "@@ -423,7 +423,7 @@ impl<T: ?Sized> Mutex<T> {\n         T: Sized,\n     {\n         let data = self.data.into_inner();\n-        poison::map_result(self.poison.borrow(), |_| data)\n+        poison::map_result(self.poison.borrow(), |()| data)\n     }\n \n     /// Returns a mutable reference to the underlying data.\n@@ -448,7 +448,7 @@ impl<T: ?Sized> Mutex<T> {\n     #[stable(feature = \"mutex_get_mut\", since = \"1.6.0\")]\n     pub fn get_mut(&mut self) -> LockResult<&mut T> {\n         let data = self.data.get_mut();\n-        poison::map_result(self.poison.borrow(), |_| data)\n+        poison::map_result(self.poison.borrow(), |()| data)\n     }\n }\n \n@@ -497,7 +497,7 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Mutex<T> {\n \n impl<'mutex, T: ?Sized> MutexGuard<'mutex, T> {\n     unsafe fn new(lock: &'mutex Mutex<T>) -> LockResult<MutexGuard<'mutex, T>> {\n-        poison::map_result(lock.poison.borrow(), |guard| MutexGuard { lock, poison: guard })\n+        poison::map_result(lock.poison.guard(), |guard| MutexGuard { lock, poison: guard })\n     }\n }\n "}, {"sha": "9c918be338794d0a0f7ef529c9ea0df4a1607f7e", "filename": "library/std/src/sync/poison.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/34895ded2c76cc87dc6ff33adaa541c239d416bf/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34895ded2c76cc87dc6ff33adaa541c239d416bf/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs?ref=34895ded2c76cc87dc6ff33adaa541c239d416bf", "patch": "@@ -23,8 +23,15 @@ impl Flag {\n         Flag { failed: AtomicBool::new(false) }\n     }\n \n+    /// Check the flag for an unguarded borrow, where we only care about existing poison.\n     #[inline]\n-    pub fn borrow(&self) -> LockResult<Guard> {\n+    pub fn borrow(&self) -> LockResult<()> {\n+        if self.get() { Err(PoisonError::new(())) } else { Ok(()) }\n+    }\n+\n+    /// Check the flag for a guarded borrow, where we may also set poison when `done`.\n+    #[inline]\n+    pub fn guard(&self) -> LockResult<Guard> {\n         let ret = Guard { panicking: thread::panicking() };\n         if self.get() { Err(PoisonError::new(ret)) } else { Ok(ret) }\n     }"}, {"sha": "9517e7e1f0325dc6ed83faffe0f52c1ce9a8925f", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34895ded2c76cc87dc6ff33adaa541c239d416bf/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34895ded2c76cc87dc6ff33adaa541c239d416bf/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=34895ded2c76cc87dc6ff33adaa541c239d416bf", "patch": "@@ -434,7 +434,7 @@ impl<T: ?Sized> RwLock<T> {\n         T: Sized,\n     {\n         let data = self.data.into_inner();\n-        poison::map_result(self.poison.borrow(), |_| data)\n+        poison::map_result(self.poison.borrow(), |()| data)\n     }\n \n     /// Returns a mutable reference to the underlying data.\n@@ -461,7 +461,7 @@ impl<T: ?Sized> RwLock<T> {\n     #[stable(feature = \"rwlock_get_mut\", since = \"1.6.0\")]\n     pub fn get_mut(&mut self) -> LockResult<&mut T> {\n         let data = self.data.get_mut();\n-        poison::map_result(self.poison.borrow(), |_| data)\n+        poison::map_result(self.poison.borrow(), |()| data)\n     }\n }\n \n@@ -510,13 +510,13 @@ impl<T> From<T> for RwLock<T> {\n \n impl<'rwlock, T: ?Sized> RwLockReadGuard<'rwlock, T> {\n     unsafe fn new(lock: &'rwlock RwLock<T>) -> LockResult<RwLockReadGuard<'rwlock, T>> {\n-        poison::map_result(lock.poison.borrow(), |_| RwLockReadGuard { lock })\n+        poison::map_result(lock.poison.borrow(), |()| RwLockReadGuard { lock })\n     }\n }\n \n impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {\n     unsafe fn new(lock: &'rwlock RwLock<T>) -> LockResult<RwLockWriteGuard<'rwlock, T>> {\n-        poison::map_result(lock.poison.borrow(), |guard| RwLockWriteGuard { lock, poison: guard })\n+        poison::map_result(lock.poison.guard(), |guard| RwLockWriteGuard { lock, poison: guard })\n     }\n }\n "}]}