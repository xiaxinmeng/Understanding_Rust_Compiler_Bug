{"sha": "123cc413bd253492f112b0d21722c8387e0d6b53", "node_id": "C_kwDOAAsO6NoAKDEyM2NjNDEzYmQyNTM0OTJmMTEyYjBkMjE3MjJjODM4N2UwZDZiNTM", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-06T09:31:16Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-03T07:23:57Z"}, "message": "include eventual comment in the compiletest ignore reason", "tree": {"sha": "cd9ebfa92f25b08471b8e63856daa9dfbcb1f5f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd9ebfa92f25b08471b8e63856daa9dfbcb1f5f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/123cc413bd253492f112b0d21722c8387e0d6b53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQqfw0ACgkQzXazX3c0\ndp5MUg/+JZLXtHgt0yWNn/4VAgGhyYKqWjbaWav8mV0OwUA3WN5I948fGlfNisRs\nPS9Xie2JzHwcDhkfo6m6zNRxEPDlmDpmp0fM2w4htnzmFZv+j8Cl5aPk7jR++AZH\nWfNK0NS/duln8e5Mb/hzLri6i+oCsO8Bh3g9y3qlFQSy/xsCXrVriKZ/NLZc9gsK\noAYhSJtNZWv01GBpKl+nwBwYeIzp8ED1OkQhzdcZZfxQIkw1vmpQfQtRgZ6NxFun\nSYGXTV+W/4VOflmJ4aTBn51Sd1r4zlN3RLMcB2ChThOmfQTQfr7CsCSfqnD76M9q\nGjqJXWm/AB2SjI58MqkFZ8qlJs5nWP3ITMmoZc2/WxV9cWO09Zm/ao8bXBhtwknl\nlLUW3Vr5CpqB2kCW6GGlvML8KfMLFt2X1lqfGRBjMQoveXe95G8FxKTXw4eIjkJu\nmmuVr65bJm/CbEmtLU7Xw55bMjKQIPCWxr65Ggo+nif0RxoApXuX4Ij/tSyAF0IU\n2hclTfx4wzzaRgleI8MQvD3dzI+XaQl3jOojWVi9z1yPDKiX8SB70zaoWA2YDSJN\npeCiofXeJnPNJ+4fl9TfBs3s6n8wgktE/oI8ePCf1EnfAK8UL02rsicteJSHRkbE\nqGZfJQeTXjt0NNhsZ2rlKqKmJ8bbfJCqD+/IXW7DPXHYjmP0LAk=\n=uMqh\n-----END PGP SIGNATURE-----", "payload": "tree cd9ebfa92f25b08471b8e63856daa9dfbcb1f5f5\nparent 33289132ecc1805250f63801fded10fceb2300d8\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1678095076 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1680506637 +0200\n\ninclude eventual comment in the compiletest ignore reason\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/123cc413bd253492f112b0d21722c8387e0d6b53", "html_url": "https://github.com/rust-lang/rust/commit/123cc413bd253492f112b0d21722c8387e0d6b53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/123cc413bd253492f112b0d21722c8387e0d6b53/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33289132ecc1805250f63801fded10fceb2300d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/33289132ecc1805250f63801fded10fceb2300d8", "html_url": "https://github.com/rust-lang/rust/commit/33289132ecc1805250f63801fded10fceb2300d8"}], "stats": {"total": 72, "additions": 55, "deletions": 17}, "files": [{"sha": "15020a373f0691fc3242378a56c69d64e441172e", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 55, "deletions": 17, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/123cc413bd253492f112b0d21722c8387e0d6b53/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/123cc413bd253492f112b0d21722c8387e0d6b53/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=123cc413bd253492f112b0d21722c8387e0d6b53", "patch": "@@ -16,8 +16,20 @@ use crate::{extract_cdb_version, extract_gdb_version};\n mod tests;\n \n /// The result of parse_cfg_name_directive.\n+#[derive(Clone, PartialEq, Debug)]\n+struct ParsedNameDirective {\n+    comment: Option<String>,\n+    outcome: MatchOutcome,\n+}\n+\n+impl ParsedNameDirective {\n+    fn invalid() -> Self {\n+        Self { comment: None, outcome: MatchOutcome::NoMatch }\n+    }\n+}\n+\n #[derive(Clone, Copy, PartialEq, Debug)]\n-enum ParsedNameDirective {\n+enum MatchOutcome {\n     /// No match.\n     NoMatch,\n     /// Match.\n@@ -647,7 +659,7 @@ impl Config {\n     }\n \n     fn parse_custom_normalization(&self, mut line: &str, prefix: &str) -> Option<(String, String)> {\n-        if self.parse_cfg_name_directive(line, prefix) == ParsedNameDirective::Match {\n+        if self.parse_cfg_name_directive(line, prefix).outcome == MatchOutcome::Match {\n             let from = parse_normalization_string(&mut line)?;\n             let to = parse_normalization_string(&mut line)?;\n             Some((from, to))\n@@ -668,13 +680,15 @@ impl Config {\n     /// or `normalize-stderr-32bit`.\n     fn parse_cfg_name_directive(&self, line: &str, prefix: &str) -> ParsedNameDirective {\n         if !line.as_bytes().starts_with(prefix.as_bytes()) {\n-            return ParsedNameDirective::NoMatch;\n+            return ParsedNameDirective::invalid();\n         }\n         if line.as_bytes().get(prefix.len()) != Some(&b'-') {\n-            return ParsedNameDirective::NoMatch;\n+            return ParsedNameDirective::invalid();\n         }\n+        let line = &line[prefix.len() + 1..];\n \n-        let name = line[prefix.len() + 1..].split(&[':', ' '][..]).next().unwrap();\n+        let (name, comment) =\n+            line.split_once(&[':', ' ']).map(|(l, c)| (l, Some(c))).unwrap_or((line, None));\n \n         let matches_pointer_width = || {\n             name.strip_suffix(\"bit\")\n@@ -723,7 +737,10 @@ impl Config {\n                 None => false,\n             };\n \n-        if is_match { ParsedNameDirective::Match } else { ParsedNameDirective::NoMatch }\n+        ParsedNameDirective {\n+            comment: comment.map(|c| c.trim().trim_start_matches('-').trim().to_string()),\n+            outcome: if is_match { MatchOutcome::Match } else { MatchOutcome::NoMatch },\n+        }\n     }\n \n     fn has_cfg_prefix(&self, line: &str, prefix: &str) -> bool {\n@@ -992,19 +1009,40 @@ pub fn make_test_description<R: Read>(\n                 }\n             };\n         }\n-        ignore = match config.parse_cfg_name_directive(ln, \"ignore\") {\n-            ParsedNameDirective::Match => {\n-                ignore_message = Some(\"cfg -> ignore => Match\");\n-                true\n-            }\n-            ParsedNameDirective::NoMatch => ignore,\n-        };\n+\n+        {\n+            let parsed = config.parse_cfg_name_directive(ln, \"ignore\");\n+            ignore = match parsed.outcome {\n+                MatchOutcome::Match => {\n+                    ignore_message = Some(match parsed.comment {\n+                        // The ignore reason must be a &'static str, so we have to leak memory to\n+                        // create it. This is fine, as the header is parsed only at the start of\n+                        // compiletest so it won't grow indefinitely.\n+                        Some(comment) => Box::leak(Box::<str>::from(format!(\n+                            \"cfg -> ignore => Match ({comment})\"\n+                        ))),\n+                        None => \"cfg -> ignore => Match\",\n+                    });\n+                    true\n+                }\n+                MatchOutcome::NoMatch => ignore,\n+            };\n+        }\n \n         if config.has_cfg_prefix(ln, \"only\") {\n-            ignore = match config.parse_cfg_name_directive(ln, \"only\") {\n-                ParsedNameDirective::Match => ignore,\n-                ParsedNameDirective::NoMatch => {\n-                    ignore_message = Some(\"cfg -> only => NoMatch\");\n+            let parsed = config.parse_cfg_name_directive(ln, \"only\");\n+            ignore = match parsed.outcome {\n+                MatchOutcome::Match => ignore,\n+                MatchOutcome::NoMatch => {\n+                    ignore_message = Some(match parsed.comment {\n+                        // The ignore reason must be a &'static str, so we have to leak memory to\n+                        // create it. This is fine, as the header is parsed only at the start of\n+                        // compiletest so it won't grow indefinitely.\n+                        Some(comment) => Box::leak(Box::<str>::from(format!(\n+                            \"cfg -> only => NoMatch ({comment})\"\n+                        ))),\n+                        None => \"cfg -> only => NoMatch\",\n+                    });\n                     true\n                 }\n             };"}]}