{"sha": "60a052f4d308b4b7e3b6132fd4bb2a48082b066c", "node_id": "C_kwDOAAsO6NoAKDYwYTA1MmY0ZDMwOGI0YjdlM2I2MTMyZmQ0YmIyYTQ4MDgyYjA2NmM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-03T17:59:37Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-30T17:07:22Z"}, "message": "Handle MIR in a single place.", "tree": {"sha": "419d88f1d0d02c549181ee95d5a90133cc21e1ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/419d88f1d0d02c549181ee95d5a90133cc21e1ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60a052f4d308b4b7e3b6132fd4bb2a48082b066c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60a052f4d308b4b7e3b6132fd4bb2a48082b066c", "html_url": "https://github.com/rust-lang/rust/commit/60a052f4d308b4b7e3b6132fd4bb2a48082b066c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60a052f4d308b4b7e3b6132fd4bb2a48082b066c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b94d421d08da7cf27757abd9a7a6fdf8674a844f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b94d421d08da7cf27757abd9a7a6fdf8674a844f", "html_url": "https://github.com/rust-lang/rust/commit/b94d421d08da7cf27757abd9a7a6fdf8674a844f"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "ce5d51ebb58b713cee3b49be1b0855caa23efed0", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/60a052f4d308b4b7e3b6132fd4bb2a48082b066c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a052f4d308b4b7e3b6132fd4bb2a48082b066c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=60a052f4d308b4b7e3b6132fd4bb2a48082b066c", "patch": "@@ -1162,15 +1162,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             if should_encode_type(tcx, local_id, def_kind) {\n                 record!(self.tables.type_of[def_id] <- self.tcx.type_of(def_id));\n             }\n-            if should_encode_const(def_kind) && tcx.is_mir_available(def_id) {\n-                let qualifs = tcx.at(def_span).mir_const_qualif(def_id);\n-                record!(self.tables.mir_const_qualif[def_id] <- qualifs);\n-                let body_id = tcx.hir().maybe_body_owned_by(local_id);\n-                if let Some(body_id) = body_id {\n-                    let const_data = self.encode_rendered_const_for_body(body_id);\n-                    record!(self.tables.rendered_const[def_id] <- const_data);\n-                }\n-            }\n             if let DefKind::TyParam | DefKind::ConstParam = def_kind {\n                 if let Some(default) = self.tcx.object_lifetime_default(def_id) {\n                     record!(self.tables.object_lifetime_default[def_id] <- default);\n@@ -1385,12 +1376,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             return;\n         }\n \n-        let keys_and_jobs = self\n-            .tcx\n+        let tcx = self.tcx;\n+\n+        let keys_and_jobs = tcx\n             .mir_keys(())\n             .iter()\n             .filter_map(|&def_id| {\n-                let (encode_const, encode_opt) = should_encode_mir(self.tcx, def_id);\n+                let (encode_const, encode_opt) = should_encode_mir(tcx, def_id);\n                 if encode_const || encode_opt {\n                     Some((def_id, encode_const, encode_opt))\n                 } else {\n@@ -1403,22 +1395,32 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n             debug!(\"EntryBuilder::encode_mir({:?})\", def_id);\n             if encode_opt {\n-                record!(self.tables.optimized_mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));\n+                record!(self.tables.optimized_mir[def_id.to_def_id()] <- tcx.optimized_mir(def_id));\n             }\n             if encode_const {\n-                record!(self.tables.mir_for_ctfe[def_id.to_def_id()] <- self.tcx.mir_for_ctfe(def_id));\n+                record!(self.tables.mir_for_ctfe[def_id.to_def_id()] <- tcx.mir_for_ctfe(def_id));\n \n                 // FIXME(generic_const_exprs): this feels wrong to have in `encode_mir`\n-                let abstract_const = self.tcx.thir_abstract_const(def_id);\n+                let abstract_const = tcx.thir_abstract_const(def_id);\n                 if let Ok(Some(abstract_const)) = abstract_const {\n                     record!(self.tables.thir_abstract_const[def_id.to_def_id()] <- abstract_const);\n                 }\n+\n+                if should_encode_const(tcx.def_kind(def_id)) {\n+                    let qualifs = tcx.mir_const_qualif(def_id);\n+                    record!(self.tables.mir_const_qualif[def_id.to_def_id()] <- qualifs);\n+                    let body_id = tcx.hir().maybe_body_owned_by(def_id);\n+                    if let Some(body_id) = body_id {\n+                        let const_data = self.encode_rendered_const_for_body(body_id);\n+                        record!(self.tables.rendered_const[def_id.to_def_id()] <- const_data);\n+                    }\n+                }\n             }\n-            record!(self.tables.promoted_mir[def_id.to_def_id()] <- self.tcx.promoted_mir(def_id));\n+            record!(self.tables.promoted_mir[def_id.to_def_id()] <- tcx.promoted_mir(def_id));\n \n             let instance =\n                 ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id()));\n-            let unused = self.tcx.unused_generic_params(instance);\n+            let unused = tcx.unused_generic_params(instance);\n             if !unused.is_empty() {\n                 record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);\n             }"}]}