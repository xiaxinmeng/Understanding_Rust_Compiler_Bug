{"sha": "30862a64c29985b044d9bf6f74fcf1394bc145c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwODYyYTY0YzI5OTg1YjA0NGQ5YmY2Zjc0ZmNmMTM5NGJjMTQ1Yzc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-25T07:43:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-25T07:43:37Z"}, "message": "Fix run-pass tests to have 'pub fn main'\n\nThis is required by the check-fast target because each test is slurped up into a\nsubmodule.", "tree": {"sha": "712da0df6bd5e3661431ec069fa814d048dc703a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/712da0df6bd5e3661431ec069fa814d048dc703a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30862a64c29985b044d9bf6f74fcf1394bc145c7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30862a64c29985b044d9bf6f74fcf1394bc145c7", "html_url": "https://github.com/rust-lang/rust/commit/30862a64c29985b044d9bf6f74fcf1394bc145c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30862a64c29985b044d9bf6f74fcf1394bc145c7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10a583ce1ac28a8cbf34b0f4274285f33bdfce29", "url": "https://api.github.com/repos/rust-lang/rust/commits/10a583ce1ac28a8cbf34b0f4274285f33bdfce29", "html_url": "https://github.com/rust-lang/rust/commit/10a583ce1ac28a8cbf34b0f4274285f33bdfce29"}], "stats": {"total": 288, "additions": 145, "deletions": 143}, "files": [{"sha": "692aa6871e604df285767b058514cedefb2ce16f", "filename": "src/etc/combine-tests.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Fetc%2Fcombine-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Fetc%2Fcombine-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcombine-tests.py?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -29,6 +29,8 @@ def scrub(b):\n         if not (\"xfail-test\" in s or\n                 \"xfail-fast\" in s or\n                 \"xfail-win32\" in s):\n+            if not \"pub fn main\" in s and \"fn main\" in s:\n+                print(\"Warning: no public entry point in \" + t)\n             stage2_tests.append(t)\n         f.close()\n "}, {"sha": "bbc6501bc774cbdfe49ea933f2c4158909f0f300", "filename": "src/test/run-pass/attr-no-drop-flag-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -20,6 +20,6 @@ impl<T> Drop for Test<T> {\n     fn drop(&mut self) { }\n }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(size_of::<int>(), size_of::<Test<int>>());\n }"}, {"sha": "4e79013de833edead735e950c638e4c3576e8b9b", "filename": "src/test/run-pass/borrowck-macro-interaction-issue-6304.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -26,4 +26,4 @@ impl Foo {\n   fn check_id(&mut self, s: int) { fail!() }\n }\n  \n-fn main() { }\n+pub fn main() { }"}, {"sha": "79cad643dfd867baaef79030cc1072a7e2ab5aca", "filename": "src/test/run-pass/borrowck-pat-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fborrowck-pat-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fborrowck-pat-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-pat-enum.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -43,5 +43,5 @@ fn match_mut_reg(v: &mut Option<int>) {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n }"}, {"sha": "366752f46b003e7ad22e45ee7b634b49b0c7f977", "filename": "src/test/run-pass/borrowck-static-item-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fborrowck-static-item-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fborrowck-static-item-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-static-item-in-fn.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -10,6 +10,6 @@\n \n // Regression test for issue #7740\n \n-fn main() {\n+pub fn main() {\n     static A: &'static char = &'A';\n }"}, {"sha": "87d42943fac97862f2c30c51cbabe9e8a1cc5d0a", "filename": "src/test/run-pass/borrowck-unary-move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fborrowck-unary-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fborrowck-unary-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-unary-move-2.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -26,7 +26,7 @@ fn noncopyable() -> noncopyable {\n \n struct wrapper(noncopyable);\n \n-fn main() {\n+pub fn main() {\n     let x1 = wrapper(noncopyable());\n     let _x2 = *x1;\n }"}, {"sha": "d50b4f15f4efe5afb53dcf1915f295b7a198fea9", "filename": "src/test/run-pass/borrowck-uniq-via-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fborrowck-uniq-via-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fborrowck-uniq-via-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-uniq-via-ref.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -50,5 +50,5 @@ fn box_imm_recs(v: &Outer) {\n     borrow(v.f.g.h); // OK\n }\n \n-fn main() {\n+pub fn main() {\n }"}, {"sha": "4ee0d42ae1315c5d0763ec69fc43806d4a565180", "filename": "src/test/run-pass/borrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -27,7 +27,7 @@\n // run-fail/borrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs\n \n \n-fn main() {\n+pub fn main() {\n     let a = @mut 3i;\n     let b = @mut [a];\n     let c = @mut [3];"}, {"sha": "45f4302a5afe35924cf2c8e1efbe2f552ddb4dfc", "filename": "src/test/run-pass/bug-7183-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -33,7 +33,7 @@ impl<T: Speak> Speak for Option<T> {\n }\n \n \n-fn main() {\n+pub fn main() {\n     assert_eq!(3.hi(), ~\"hello: 3\");\n     assert_eq!(Some(Some(3)).hi(), ~\"something!something!hello: 3\");\n     assert_eq!(None::<int>.hi(), ~\"hello - none\");"}, {"sha": "ec5af6929763f607754462af0dd139c4cbb2cf44", "filename": "src/test/run-pass/builtin-superkinds-capabilities-transitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -26,7 +26,7 @@ fn foo<T: Foo>(val: T, chan: comm::Chan<T>) {\n     chan.send(val);\n }\n \n-fn main() {\n+pub fn main() {\n     let (p,c) = comm::stream();\n     foo(31337, c);\n     assert!(p.recv() == 31337);"}, {"sha": "148fb5a340f15850211e2d4bb04d9196d7bd95e2", "filename": "src/test/run-pass/builtin-superkinds-capabilities.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -22,7 +22,7 @@ fn foo<T: Foo>(val: T, chan: comm::Chan<T>) {\n     chan.send(val);\n }\n \n-fn main() {\n+pub fn main() {\n     let (p,c) = comm::stream();\n     foo(31337, c);\n     assert!(p.recv() == 31337);"}, {"sha": "740b8c2016a88f5c5a0ba378a48450945005ea73", "filename": "src/test/run-pass/builtin-superkinds-phantom-typaram.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -18,4 +18,4 @@ struct X<T>(());\n \n impl <T> Foo for X<T> { }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "a8f5f27b4d9a332cfbd14f8a1bf994e35194a6c5", "filename": "src/test/run-pass/builtin-superkinds-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -21,7 +21,7 @@ trait Foo : Send {\n \n impl <T: Send> Foo for T { }\n \n-fn main() {\n+pub fn main() {\n     let (p,c) = comm::stream();\n     1193182.foo(c);\n     assert!(p.recv() == 1193182);"}, {"sha": "9643e2986d2e59e26028c8603e1d6acab29496e8", "filename": "src/test/run-pass/builtin-superkinds-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-simple.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -14,4 +14,4 @@ trait Foo : Send { }\n \n impl Foo for int { }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "d96679c69fd1b14fb87e4bdd8f6e54379608bd52", "filename": "src/test/run-pass/builtin-superkinds-typaram.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-typaram.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -15,4 +15,4 @@ trait Foo : Send { }\n \n impl <T: Send> Foo for T { }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "ce026d3e2e02664a8e0edbecb832f5af4a59c414", "filename": "src/test/run-pass/cast-mutable-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fcast-mutable-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fcast-mutable-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-mutable-trait.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -25,10 +25,10 @@ fn bar(t: @mut T) {\n     t.foo();\n }\n \n-fn main() {\n+pub fn main() {\n     let s = @mut S { unused: 0 };\n     let s2 = s as @mut T;\n     s2.foo();\n     bar(s2);\n     bar(s as @mut T);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "d35d6d9f07e4e627aeeb14d2ff729c9ea597ac2c", "filename": "src/test/run-pass/closure-bounds-can-capture-chan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -14,7 +14,7 @@ fn foo(blk: ~fn:Send()) {\n     blk();\n }\n \n-fn main() {\n+pub fn main() {\n     let (p,c) = comm::stream();\n     do foo {\n         c.send(());"}, {"sha": "b3cb8580f7d64df7b4cf45d0a90c228963f53413", "filename": "src/test/run-pass/const-binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-binops.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -56,7 +56,7 @@ static am: bool = 2 > 1;\n static an: bool = 2 > -2;\n static ao: bool = 1.0 > -2.0;\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(a, -1);\n     assert_eq!(a2, 6);\n     assert_approx_eq!(b, 5.7);"}, {"sha": "2bb0516cad449ce63aedaadc606bd33e813eadfc", "filename": "src/test/run-pass/const-struct-offsets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fconst-struct-offsets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fconst-struct-offsets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct-offsets.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -10,4 +10,4 @@ struct Bar {\n \n static bar: Bar = Bar { i: 0, v: IntVal(0) };\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "639ea59585efaf1e17161b5d4661a5c2c62a5d44", "filename": "src/test/run-pass/default-method-parsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fdefault-method-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fdefault-method-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-method-parsing.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -12,4 +12,4 @@ trait Foo {\n     fn m(&self, _:int) { }\n }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "0c6430fb36d09f8c91d79fa811b4bba63cb73942", "filename": "src/test/run-pass/default-method-supertrait-vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -31,6 +31,6 @@ impl Y for int {\n \n impl Z for int;\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(12.x(), 12);\n }"}, {"sha": "61696c2eeac755f21ea8287c26f5027c176ffa8f", "filename": "src/test/run-pass/deriving-clone-generic-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -15,7 +15,7 @@ enum E<T,U> {\n     C\n }\n \n-fn main() {\n+pub fn main() {\n     let _ = A::<int, int>(1i).clone();\n     let _ = B(1i, 1.234).deep_clone();\n }"}, {"sha": "02043b524a9ce9258ca293b20b5a8b374cda4ece", "filename": "src/test/run-pass/deriving-clone-generic-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -11,6 +11,6 @@\n #[deriving(Clone, DeepClone)]\n struct S<T>(T, ());\n \n-fn main() {\n+pub fn main() {\n     let _ = S(1i, ()).clone().deep_clone();\n }"}, {"sha": "412cc3b3a858cfc5c728ce0a85c77d10688f91c5", "filename": "src/test/run-pass/deriving-clone-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -31,4 +31,4 @@ struct S {\n     _nil: ()\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "431c856ee88a59927f455e9d2f62e79c43050c47", "filename": "src/test/run-pass/deriving-cmp-shortcircuit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -35,7 +35,7 @@ struct ShortCircuit {\n     y: FailCmp\n }\n \n-fn main() {\n+pub fn main() {\n     let a = ShortCircuit { x: 1, y: FailCmp };\n     let b = ShortCircuit { x: 2, y: FailCmp };\n "}, {"sha": "2b0245fa5d286aa5b06f31321ab48b577c8bff2b", "filename": "src/test/run-pass/deriving-self-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -13,7 +13,7 @@ struct A<'self> {\n     x: &'self int\n }\n \n-fn main() {\n+pub fn main() {\n     let a = A { x: &1 };\n     let b = A { x: &2 };\n "}, {"sha": "a6068b52740d0a645845a66f2f16c029ac3e5680", "filename": "src/test/run-pass/deriving-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fderiving-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fderiving-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-to-str.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -34,7 +34,7 @@ impl ToStr for Custom {\n     fn to_str(&self) -> ~str { ~\"yay\" }\n }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(B1.to_str(), ~\"B1\");\n     assert_eq!(B2.to_str(), ~\"B2\");\n     assert_eq!(C1(3).to_str(), ~\"C1(3)\");"}, {"sha": "59acc353fed60218be8bee3bf0151d6ef0e6e3d0", "filename": "src/test/run-pass/deriving-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-zero.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -33,7 +33,7 @@ struct Lots {\n     j: (),\n }\n \n-fn main() {\n+pub fn main() {\n     let lots: Lots = Zero::zero();\n     assert!(lots.is_zero());\n }"}, {"sha": "28f38829167bbf6d21ead5dbe06420d994c197a2", "filename": "src/test/run-pass/enum-discr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fenum-discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fenum-discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discr.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -12,7 +12,7 @@ enum Hero {\n     Spiderman = -4\n }\n \n-fn main() {\n+pub fn main() {\n     let pet: Animal = Snake;\n     let hero: Hero = Superman;\n     assert!(pet as uint == 3);"}, {"sha": "a55b5eebefbaee8a8d066d203b600cc2c3562c4b", "filename": "src/test/run-pass/enum-vec-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -15,7 +15,7 @@ enum Flopsy {\n static BAR:uint = Bunny as uint;\n static BAR2:uint = BAR;\n \n-fn main() {\n+pub fn main() {\n     let _v = [0, .. Bunny as uint];\n     let _v = [0, .. BAR];\n     let _v = [0, .. BAR2];"}, {"sha": "48bce39970f98613dcad9e431d187d613d8495d4", "filename": "src/test/run-pass/expr-repeat-vstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -1,6 +1,6 @@\n use std::io::println;\n \n-fn main() {\n+pub fn main() {\n     let v: ~[int] = ~[ 1, ..5 ];\n     println(v[0].to_str());\n     println(v[1].to_str());"}, {"sha": "925ec8e7ff72040253e863e6e3bb57947af3e7cb", "filename": "src/test/run-pass/extern-call-direct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fextern-call-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fextern-call-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-direct.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -12,7 +12,7 @@\n \n extern fn f(x: uint) -> uint { x * 2 }\n \n-fn main() {\n+pub fn main() {\n     #[fixed_stack_segment];\n \n     let x = f(22);"}, {"sha": "53a5d3e962118762d959841ae02c3354f2ff4f1a", "filename": "src/test/run-pass/extern-compare-with-return-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -19,7 +19,7 @@ extern fn uintvoidret(_x: uint) {}\n \n extern fn uintuintuintuintret(x: uint, y: uint, z: uint) -> uint { x+y+z }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(voidret1, voidret1);\n     assert!(voidret1 != voidret2);\n "}, {"sha": "891133c78d477fab0bf06b1cedb82a40b2a8a447", "filename": "src/test/run-pass/extoption_env-not-defined.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fextoption_env-not-defined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fextoption_env-not-defined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextoption_env-not-defined.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     assert!(option_env!(\"__HOPEFULLY_DOESNT_EXIST__\").is_none());\n }"}, {"sha": "34272b145a29ddcecdb55e1219802ef23aa50dfa", "filename": "src/test/run-pass/filter-block-view-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ffilter-block-view-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ffilter-block-view-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffilter-block-view-items.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     // Make sure that this view item is filtered out because otherwise it would\n     // trigger a compilation error\n     #[cfg(not_present)] use foo = bar;"}, {"sha": "87ed7826fed57fbe55fdccaffd2f74c4ca082bee", "filename": "src/test/run-pass/foreach-external-iterators-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x = [1,..100];\n     let mut y = 0;\n     for i in x.iter() {"}, {"sha": "34ce8c471132933406e6221e0140de529603376e", "filename": "src/test/run-pass/foreach-external-iterators-hashmap-break-restart.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -14,7 +14,7 @@ use std::hashmap::HashMap;\n // outside the loop, breaks, then _picks back up_ and continues\n // iterating with it.\n \n-fn main() {\n+pub fn main() {\n     let mut h = HashMap::new();\n     let kvs = [(1, 10), (2, 20), (3, 30)];\n     for &(k,v) in kvs.iter() {\n@@ -38,4 +38,4 @@ fn main() {\n \n     assert_eq!(x, 6);\n     assert_eq!(y, 60);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "365cde34dce827926400988d7c9d5387950e1d84", "filename": "src/test/run-pass/foreach-external-iterators-hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -10,7 +10,7 @@\n \n use std::hashmap::HashMap;\n \n-fn main() {\n+pub fn main() {\n     let mut h = HashMap::new();\n     let kvs = [(1, 10), (2, 20), (3, 30)];\n     for &(k,v) in kvs.iter() {\n@@ -24,4 +24,4 @@ fn main() {\n     }\n     assert_eq!(x, 6);\n     assert_eq!(y, 60);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ced538e163e801af214d7b8c3813d6c7ce798c00", "filename": "src/test/run-pass/foreach-external-iterators-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x = [1,..100];\n     let mut y = 0;\n     for (n,i) in x.iter().enumerate() {"}, {"sha": "78aba778421b190295818c9c83dc6f746f7a376a", "filename": "src/test/run-pass/foreach-external-iterators-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x = [1,..100];\n     let y = [2,..100];\n     let mut p = 0;"}, {"sha": "593a996d8dfe9d465d4a1d97d497fdd35782e7ff", "filename": "src/test/run-pass/foreach-external-iterators.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x = [1,..100];\n     let mut y = 0;\n     for i in x.iter() {\n         y += *i\n     }\n     assert!(y == 100);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "93c9d6b50ec0e46c75c2981deeff784b3937cc7b", "filename": "src/test/run-pass/func-arg-incomplete-pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -11,10 +11,10 @@ fn foo(Foo {x, _}: Foo) -> *uint {\n     addr\n }\n \n-fn main() {\n+pub fn main() {\n     let obj = ~1;\n     let objptr: *uint = &*obj;\n     let f = Foo {x: obj, y: ~2};\n     let xptr = foo(f);\n     assert_eq!(objptr, xptr);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "1b7d641fa8259ffcbfe26ecf6c987523e199931d", "filename": "src/test/run-pass/func-arg-ref-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -13,7 +13,7 @@ fn checkval(~ref x: ~uint) -> uint {\n     *x\n }\n \n-fn main() {\n+pub fn main() {\n     let obj = ~1;\n     let objptr: *uint = &*obj;\n     let xptr = getaddr(obj);"}, {"sha": "ec58198d4a34823e0c245805a1b29b01876b59d6", "filename": "src/test/run-pass/func-arg-wild-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ffunc-arg-wild-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ffunc-arg-wild-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-wild-pattern.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -5,6 +5,6 @@ fn foo((x, _): (int, int)) -> int {\n     x\n }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(foo((22, 23)), 22);\n }"}, {"sha": "2e281812d138f317f4cab0b4c1ab228626b7800c", "filename": "src/test/run-pass/generic-static-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -22,6 +22,6 @@ impl<T> vec_utils<T> for ~[T] {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(vec_utils::map_(&~[1,2,3], |&x| x+1), ~[2,3,4]);\n }"}, {"sha": "3969394a26b93a9daaa6a7c75722b1b268aa7db3", "filename": "src/test/run-pass/hygiene-dodging-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fhygiene-dodging-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fhygiene-dodging-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene-dodging-1.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -12,7 +12,7 @@ mod x {\n     pub fn g() -> uint {14}\n }\n \n-fn main(){\n+pub fn main(){\n     // should *not* shadow the module x:\n     let x = 9;\n     // use it to avoid warnings:"}, {"sha": "3cc7296fa4a8ed0bc5f2982feed9af856e2472cd", "filename": "src/test/run-pass/issue-2611-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -23,4 +23,4 @@ impl A for E {\n   fn b<F,G>(_x: F) -> F { fail!() } //~ ERROR in method `b`, type parameter 0 has 1 bound, but\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "d5dd090009a1c70e84b748fdaec0d33e6a7dce16", "filename": "src/test/run-pass/issue-3991.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-3991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-3991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3991.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -18,4 +18,4 @@ impl HasNested {\n     }\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "ebf29be6d5e454e25f41289758879b0e89612117", "filename": "src/test/run-pass/issue-4333.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-4333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-4333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4333.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -10,7 +10,7 @@\n \n use std::io;\n \n-fn main() {\n+pub fn main() {\n     let stdout = &io::stdout() as &io::WriterUtil;\n     stdout.write_line(\"Hello!\");\n }"}, {"sha": "ddcb544c64fca8cc87caf359b6771d45c9c7c2cf", "filename": "src/test/run-pass/issue-4446.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4446.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let (port, chan) = stream();\n \n     do spawn {"}, {"sha": "b28ba6811b7bc4f3fc40e8334e538c433ab016f4", "filename": "src/test/run-pass/issue-4735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4735.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -21,7 +21,7 @@ impl Drop for NonCopyable {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let t = ~0;\n     let p = unsafe { transmute::<~int, *c_void>(t) };\n     let _z = NonCopyable(p);"}, {"sha": "dd3f54d97ececec4e50ce664727e82eec320c370", "filename": "src/test/run-pass/issue-5008-borrowed-traitobject-method-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5008-borrowed-traitobject-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5008-borrowed-traitobject-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5008-borrowed-traitobject-method-call.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -37,7 +37,7 @@ fn print_name(x: &Debuggable)\n     println(fmt!(\"debug_name = %s\", x.debug_name()));\n }\n \n-fn main() {\n+pub fn main() {\n     let thing = Thing::new();\n     print_name(&thing as &Debuggable);\n }"}, {"sha": "c988110607106ee1b7e8580a5fddb5202e5e4ebd", "filename": "src/test/run-pass/issue-5060.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5060.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -22,7 +22,7 @@ macro_rules! print_hd_tl (\n     })\n )\n \n-fn main() {\n+pub fn main() {\n     print_hd_tl!(x, y, z, w)\n }\n "}, {"sha": "202a3cbcafa2bef0a4285f684b022377feadc64c", "filename": "src/test/run-pass/issue-5192.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5192.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -39,6 +39,6 @@ impl Scheduler {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let _sched = Scheduler::new(~UvEventLoop::new() as ~EventLoop);\n }"}, {"sha": "ba70fac0e4e8f67635aa30e61ea6b1365fc460d4", "filename": "src/test/run-pass/issue-5239-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -10,7 +10,7 @@\n \n // Regression test for issue #5239\n \n-fn main() { \n+pub fn main() { \n     let _f: &fn(int) -> int = |ref x: int| { *x };\n     let foo = 10;\n     assert!(_f(foo) == 10);"}, {"sha": "16fd45a5615f224987bb8d3d316959f4688bd3a1", "filename": "src/test/run-pass/issue-5280.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5280.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -20,6 +20,6 @@ impl FontTableTagConversions for FontTableTag {\n   }\n }\n \n-fn main() {\n+pub fn main() {\n     5.tag_to_str();\n }"}, {"sha": "1d2e7b79931f98dce8b83dca090af4fb973c3928", "filename": "src/test/run-pass/issue-5315.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5315.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5315.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5315.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -10,7 +10,7 @@\n \n struct A(bool);\n \n-fn main() {\n+pub fn main() {\n     let f = A;\n     f(true);\n }"}, {"sha": "3f1dc2f6986f60c5c2af348072d35e8be9b3b6a7", "filename": "src/test/run-pass/issue-5321-immediates-with-bare-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -20,6 +20,6 @@ impl Fooable for uint {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     2.yes();\n }"}, {"sha": "cf11b9aa7b6ccc6e1b667a56ceafad798acb73f4", "filename": "src/test/run-pass/issue-5353.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5353.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5353.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5353.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -21,4 +21,4 @@ fn gl_err_str(err: u32) -> ~str\n   }\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "d63d8b13b4366fa1da727137bb438bb0fa0a4229", "filename": "src/test/run-pass/issue-5517.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5517.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let box1 = @mut 42;\n     let _x = *(&mut *box1) == 42 || *(&mut *box1) == 31337;\n }"}, {"sha": "d68766d5886e93c1cbd27dca06b6de8b7be0b3f9", "filename": "src/test/run-pass/issue-5550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5550.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -10,7 +10,7 @@\n \n #[allow(dead_assignment)];\n \n-fn main() {\n+pub fn main() {\n     let s: ~str = ~\"foobar\";\n     let mut t: &str = s;\n     t = t.slice(0, 3); // for master: str::view(t, 0, 3) maybe"}, {"sha": "d1a1fbf09400579dd2f09b4b95cbf56eafbf45fc", "filename": "src/test/run-pass/issue-5572.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5572.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5572.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5572.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -1,3 +1,3 @@\n fn foo<T: ::std::cmp::Eq>(_t: T) { }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "4ac4b3b33b7ec77fc5402a21d1a986de20909964", "filename": "src/test/run-pass/issue-5688.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5688.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -19,7 +19,7 @@ failed to typecheck correctly.\n \n struct X { vec: &'static [int] }\n static V: &'static [X] = &[X { vec: &[1, 2, 3] }];\n-fn main() {\n+pub fn main() {\n     for &v in V.iter() {\n         println(fmt!(\"%?\", v.vec));\n     }"}, {"sha": "aee1f8415eff92ba1f7bb17197785676c9665bdf", "filename": "src/test/run-pass/issue-5708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5708.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -39,7 +39,7 @@ impl<'self> Outer<'self> {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let inner = 5;\n     let outer = Outer::new(&inner as &Inner);\n     outer.inner.print();"}, {"sha": "46ec68675e7f3e9293fced720fb8aebaecd8b4fc", "filename": "src/test/run-pass/issue-5741.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5741.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5741.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5741.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -12,7 +12,7 @@\n \n use std::io;\n \n-fn main() {\n+pub fn main() {\n     return;\n     while io::stdin().read_line() != ~\"quit\" { };\n }"}, {"sha": "6fb5c25f7310e397d03d049107394d2142ab851b", "filename": "src/test/run-pass/issue-5917.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5917.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-5917.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5917.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -10,6 +10,6 @@\n \n struct T (&'static [int]);\n static t : T = T (&'static [5, 4, 3]);\n-fn main () {\n+pub fn main () {\n     assert_eq!(t[0], 5);\n }"}, {"sha": "a01a04ebf82721aa03e5b3c4a08be52e063d08c5", "filename": "src/test/run-pass/issue-6128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6128.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -21,7 +21,7 @@ impl<E> Graph<int, E> for HashMap<int, int> {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let g : ~HashMap<int, int> = ~HashMap::new();\n     let _g2 : ~Graph<int,int> = g as ~Graph<int,int>;\n }"}, {"sha": "d88397499feaec8a140cfad4b5d7a0a7409abb53", "filename": "src/test/run-pass/issue-6130.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-6130.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-6130.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6130.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -10,7 +10,7 @@\n \n #[deny(type_limits)];\n \n-fn main() {\n+pub fn main() {\n     let i: uint = 0;\n     assert!(i <= 0xFFFF_FFFF_u);\n "}, {"sha": "98d2ca5d9424e20874a4b0802af7065a8532fb58", "filename": "src/test/run-pass/issue-6141-leaking-owned-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-6141-leaking-owned-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-6141-leaking-owned-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6141-leaking-owned-fn.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -2,7 +2,7 @@ fn run(f: &fn()) {\n     f()\n }\n \n-fn main() {\n+pub fn main() {\n     let f: ~fn() = || ();\n     run(f);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "668d6f3ae45e3aecafa93b4030cd0527f3ed2281", "filename": "src/test/run-pass/issue-6153.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6153.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -13,7 +13,7 @@ fn swap(f: &fn(~[int]) -> ~[int]) -> ~[int] {\n     f(x)\n }\n \n-fn main() {\n+pub fn main() {\n     let v = swap(|mut x| { x.push(4); x });\n     let w = do swap |mut x| { x.push(4); x };\n     assert_eq!(v, w);"}, {"sha": "3859d15585158f39352cae9f69a28eeac20c774e", "filename": "src/test/run-pass/issue-6341.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-6341.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-6341.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6341.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -15,4 +15,4 @@ impl Drop for A {\n     fn drop(&mut self) {}\n }\n \n-fn main() {}\n\\ No newline at end of file\n+pub fn main() {}"}, {"sha": "9343f2b61c90093d2a88051484690680e404a086", "filename": "src/test/run-pass/issue-6344-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -13,7 +13,7 @@ impl Drop for A {\n     fn drop(&mut self) {}\n }\n \n-fn main() {\n+pub fn main() {\n     let a = A { x: 0 };\n \n     let A { x: ref x } = a;"}, {"sha": "18d327aa360c410af999ea58fd1c585fcac936b8", "filename": "src/test/run-pass/issue-6344-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -13,7 +13,7 @@ impl Drop for A {\n     fn drop(&mut self) {}\n }\n \n-fn main() {\n+pub fn main() {\n     let a = A { x: 0 };\n \n     match a {"}, {"sha": "2a56f2ad8bc479b2ec8e82aea66ff87bd24200e7", "filename": "src/test/run-pass/issue-7012.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-7012.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-7012.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7012.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -21,7 +21,7 @@ static test1: signature<'static> =  signature {\n   pattern: &[0x243f6a88u32,0x85a308d3u32,0x13198a2eu32,0x03707344u32,0xa4093822u32,0x299f31d0u32]\n };\n \n-fn main() {\n+pub fn main() {\n   let test = &[0x243f6a88u32,0x85a308d3u32,0x13198a2eu32,0x03707344u32,0xa4093822u32,0x299f31d0u32];\n   println(fmt!(\"%b\",test==test1.pattern));\n }"}, {"sha": "9b1643bb2249061de412fb157177b40ce3e24250", "filename": "src/test/run-pass/issue-7344.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-7344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-7344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7344.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -22,7 +22,7 @@ fn baz() {\n     if \"\" == \"\" {}\n }\n \n-fn main() {\n+pub fn main() {\n     bar();\n     baz();\n }"}, {"sha": "75123243f47d6209119b0e68b2de07ae4587a6fb", "filename": "src/test/run-pass/issue-7519-match-unit-in-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-7519-match-unit-in-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-7519-match-unit-in-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7519-match-unit-in-arg.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -14,6 +14,6 @@\n \n fn foo(():()) { }\n \n-fn main() {\n+pub fn main() {\n     foo(());\n }"}, {"sha": "af8b453856b05df1ddbaf8e49239a0dd7f030a8b", "filename": "src/test/run-pass/issue-7673-cast-generically-implemented-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -14,7 +14,7 @@\n \n */\n \n-fn main() {}\n+pub fn main() {}\n \n trait A {}\n impl<T: 'static> A for T {}"}, {"sha": "fa7d68cf921fd3135eb63bdfda8e772c18c6d6de", "filename": "src/test/run-pass/issue-7712.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-7712.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-7712.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7712.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -20,6 +20,6 @@ struct MyStruct;\n \n impl TraitWithDefaultMethod for MyStruct { }\n \n-fn main() {\n+pub fn main() {\n     MyStruct.method();\n }"}, {"sha": "aaf2ecb71292eb768b170910600935ce00130bf1", "filename": "src/test/run-pass/issue-8171-default-method-self-inherit-builtin-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-8171-default-method-self-inherit-builtin-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-8171-default-method-self-inherit-builtin-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8171-default-method-self-inherit-builtin-trait.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -22,4 +22,4 @@ trait TragicallySelfIsNotSend: Send {\n     }\n }\n \n-fn main(){}\n+pub fn main(){}"}, {"sha": "377b9ce262c73ab194cc140535df1fac77218e97", "filename": "src/test/run-pass/issue-8248.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-8248.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-8248.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8248.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -14,7 +14,7 @@ impl A for B {}\n \n fn foo(_: &mut A) {}\n \n-fn main() {\n+pub fn main() {\n     let mut b = B;\n     foo(&mut b as &mut A);\n }"}, {"sha": "bfc1d9436903145c8160057723ea5bbe93ab099c", "filename": "src/test/run-pass/issue-8249.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-8249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-8249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8249.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -20,6 +20,6 @@ fn foo(a: &mut A) {\n     C{ foo: a };\n }\n \n-fn main() {\n+pub fn main() {\n }\n "}, {"sha": "31ac2c46293188bb0adc271231286417ff9bbd0c", "filename": "src/test/run-pass/issue-8398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-8398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-8398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8398.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -14,5 +14,5 @@ fn foo(a: &mut io::Writer) {\n     a.write([])\n }\n \n-fn main(){}\n+pub fn main(){}\n "}, {"sha": "053d6aa3c906173ac0b61728008c0aa7536b6610", "filename": "src/test/run-pass/issue-9047.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-9047.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-9047.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9047.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -16,4 +16,4 @@ fn decode() -> ~str {\n     ~\"\"\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "27c2ed9e5adf970fbaab8367cbb33b6d683fbb60", "filename": "src/test/run-pass/issue-9110.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-9110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fissue-9110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9110.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -19,4 +19,4 @@ macro_rules! silly_macro(\n \n silly_macro!()\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "fdb2805ae1841ad3501d39f6059609f8300efd46", "filename": "src/test/run-pass/let-destruct-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Flet-destruct-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Flet-destruct-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-destruct-ref.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -1,4 +1,4 @@\n-fn main() {\n+pub fn main() {\n     let x = ~\"hello\";\n     let ref y = x;\n     assert_eq!(x.slice(0, x.len()), y.slice(0, y.len()));"}, {"sha": "93bb2ca98e8b5c5bbf77a2bcf837e176c1c053d6", "filename": "src/test/run-pass/let-var-hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Flet-var-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Flet-var-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-var-hygiene.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -10,7 +10,7 @@\n \n // shouldn't affect evaluation of $ex:\n macro_rules! bad_macro (($ex:expr) => ({let _x = 9; $ex}))\n-fn main() {\n+pub fn main() {\n     let _x = 8;\n     assert_eq!(bad_macro!(_x),8)\n }"}, {"sha": "a5ea32e515743028e733b986ed8f87817b458e26", "filename": "src/test/run-pass/link-section.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Flink-section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Flink-section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flink-section.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -26,7 +26,7 @@ static magic: uint = 42;\n #[link_section=\"__DATA,__mut\"]\n static mut frobulator: uint = 0xdeadbeef;\n \n-fn main() {\n+pub fn main() {\n     unsafe {\n         frobulator = 0xcafebabe;\n         printfln!(\"%? %? %?\", i_live_in_more_text(), magic, frobulator);"}, {"sha": "80901475c04b542ef7b2a3bd0a1468fb560ca8b9", "filename": "src/test/run-pass/lint-cstack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Flint-cstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Flint-cstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-cstack.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -23,5 +23,5 @@ trait A {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n }"}, {"sha": "e3a0c8417d063bd2f301d61f5db62b04073ef912", "filename": "src/test/run-pass/lint-non-camel-case-types-non-uppercase-statics-unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -18,4 +18,4 @@ struct \u30d2;\n \n static \u30e9: uint = 0;\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "cf6640275ed4fce5e1226ea0224df47a1735ac51", "filename": "src/test/run-pass/lint-non-uppercase-statics-lowercase-mut-statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Flint-non-uppercase-statics-lowercase-mut-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Flint-non-uppercase-statics-lowercase-mut-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-non-uppercase-statics-lowercase-mut-statics.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -14,4 +14,4 @@\n \n static mut bar: int = 2;\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "23f418cfc691ebefb97c8867f0586ce93b24d0eb", "filename": "src/test/run-pass/macro-local-data-key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmacro-local-data-key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmacro-local-data-key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-local-data-key.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -16,7 +16,7 @@ mod bar {\n     local_data_key!(pub baz: float)\n }\n \n-fn main() {\n+pub fn main() {\n     local_data::get(foo, |x| assert!(x.is_none()));\n     local_data::get(bar::baz, |y| assert!(y.is_none()));\n "}, {"sha": "e90d6b2862671552da86416b054c55ff26c5a709", "filename": "src/test/run-pass/match-drop-strs-issue-4541.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -22,6 +22,6 @@ fn parse_args() -> ~str {\n     return ~\"\"\n }\n \n-fn main() {\n+pub fn main() {\n     io::println(parse_args());\n }"}, {"sha": "671ec5a3965c3d369a06d34b0f6fba4e1a6f05e4", "filename": "src/test/run-pass/match-in-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -20,6 +20,6 @@ macro_rules! match_inside_expansion(\n     )\n )\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(match_inside_expansion!(),129);\n }"}, {"sha": "6df4c8123610f938ea15b310d58870a2899a6456", "filename": "src/test/run-pass/match-pipe-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -59,7 +59,7 @@ fn test5() {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     test1();\n     test2();\n     test3();"}, {"sha": "0bf0d6e41fa40345391c8e6c56e5007f901b0d0c", "filename": "src/test/run-pass/match-range-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmatch-range-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmatch-range-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range-static.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -1,7 +1,7 @@\n static s: int = 1;\n static e: int = 42;\n \n-fn main() {\n+pub fn main() {\n     match 7 {\n         s..e => (),\n         _ => (),"}, {"sha": "a6e61fbacd4be67e7e0f7f7a71b1dacb079ead43", "filename": "src/test/run-pass/match-vec-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmatch-vec-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmatch-vec-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-vec-rvalue.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -1,6 +1,6 @@\n // Tests that matching rvalues with drops does not crash.\n \n-fn main() {\n+pub fn main() {\n     match ~[1, 2, 3] {\n         x => {\n             assert_eq!(x.len(), 3);"}, {"sha": "09435962ef7485a997ff8440bc436c126f78e8ec", "filename": "src/test/run-pass/mid-path-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmid-path-type-params.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -26,7 +26,7 @@ impl Trait<int> for S2 {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let _ = S::<int>::new::<float>(1, 1.0);\n     let _: S2 = Trait::<int>::new::<float>(1, 1.0);\n }"}, {"sha": "6cf207e5cbc2ce21ae068eca47c05120818c3da7", "filename": "src/test/run-pass/move-out-of-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmove-out-of-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmove-out-of-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-out-of-field.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -12,7 +12,7 @@ fn to_str(sb: StringBuffer) -> ~str {\n     sb.s\n }\n \n-fn main() {\n+pub fn main() {\n     let mut sb = StringBuffer {s: ~\"\"};\n     sb.append(\"Hello, \");\n     sb.append(\"World!\");"}, {"sha": "a28008f3e0bab628374f08fb198b393f5721f3dd", "filename": "src/test/run-pass/multibyte.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmultibyte.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fmultibyte.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultibyte.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // Test that multibyte characters don't crash the compiler\n-fn main() {\n+pub fn main() {\n     println(\"\ub9c8\uc774\ub108\uc2a4 \uc0ac\uc778\uc774 \uc5c6\uc73c\uba74\");\n }"}, {"sha": "33c4ed6234eaa772fbef539564cf5101edeb373c", "filename": "src/test/run-pass/nested-enum-same-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fnested-enum-same-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fnested-enum-same-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-enum-same-names.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -30,4 +30,4 @@ impl Foo {\n     }\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "f697f0b59d65f7c837d5ebe4b32a672931eb2ca7", "filename": "src/test/run-pass/nested-function-names-issue-8587.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fnested-function-names-issue-8587.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fnested-function-names-issue-8587.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-function-names-issue-8587.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -41,7 +41,7 @@ impl X {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let n = X;\n     assert_eq!(n.f(), 0);\n     assert_eq!(n.g(), 1);"}, {"sha": "54c4c06c5482f1ee8af1d94c494bee90590b2c7e", "filename": "src/test/run-pass/newtype-struct-drop-run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -19,7 +19,7 @@ impl Drop for Foo {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let y = @mut 32;\n     {\n         let _x = Foo(y);"}, {"sha": "03e5d9267619069fe975c4dca5ba304d33364bff", "filename": "src/test/run-pass/newtype-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fnewtype-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fnewtype-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-temporary.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -14,6 +14,6 @@ fn foo() -> Foo {\n     Foo(42)\n }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(*foo(), 42);\n }"}, {"sha": "0bdc36750ae6d875f2882515fd05841c8dbdafa7", "filename": "src/test/run-pass/objects-coerce-freeze-borrored.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -39,7 +39,7 @@ fn do_it_imm(obj: &Foo, v: uint) {\n     assert_eq!(v, y);\n }\n \n-fn main() {\n+pub fn main() {\n     let mut x = 22_u;\n     let obj = &mut x as &mut Foo;\n     do_it_mut(obj);"}, {"sha": "40c854879bf47913fc1755caa0b6bd7c8ba51b65", "filename": "src/test/run-pass/objects-coerce-from-managed-to-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fobjects-coerce-from-managed-to-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fobjects-coerce-from-managed-to-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-coerce-from-managed-to-borrowed.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -37,7 +37,7 @@ fn do_it_imm(obj: &Foo, v: uint) {\n     assert_eq!(v, y);\n }\n \n-fn main() {\n+pub fn main() {\n     let x = @mut 22u as @mut Foo;\n     do_it_mut(x);\n     do_it_imm(x, 23u);"}, {"sha": "f327f6bc0dc7555d7dc876748411d64ad2506577", "filename": "src/test/run-pass/owned-implies-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fowned-implies-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fowned-implies-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fowned-implies-static.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -10,6 +10,6 @@\n \n fn f<T: 'static>(_x: T) {}\n \n-fn main() {\n+pub fn main() {\n     f(~5);\n }"}, {"sha": "1434e1da4c7585af94671574874ed34e0f922f40", "filename": "src/test/run-pass/packed-struct-borrow-element.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-struct-borrow-element.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-struct-borrow-element.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-borrow-element.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n     baz: uint\n }\n \n-fn main() {\n+pub fn main() {\n     let foo = Foo { bar: 1, baz: 2 };\n     let brw = &foo.baz;\n "}, {"sha": "91b49944be2efa01982af7c0d421a1cfd4ad3618", "filename": "src/test/run-pass/packed-struct-generic-layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-layout.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -17,7 +17,7 @@ struct S<T, S> {\n     c: S\n }\n \n-fn main() {\n+pub fn main() {\n     unsafe {\n         let s = S { a: 0xff_ff_ff_ffu32, b: 1, c: 0xaa_aa_aa_aa as i32 };\n         let transd : [u8, .. 9] = cast::transmute(s);"}, {"sha": "798acc646be738de4666ed188bddf982a9b3c1fd", "filename": "src/test/run-pass/packed-struct-generic-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-size.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -17,7 +17,7 @@ struct S<T, S> {\n     c: S\n }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(sys::size_of::<S<u8, u8>>(), 3);\n \n     assert_eq!(sys::size_of::<S<u64, u16>>(), 11);"}, {"sha": "f361db4a4b5688aa2d4d9f94875f99bc654fa84d", "filename": "src/test/run-pass/packed-struct-layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-struct-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-struct-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-layout.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -22,7 +22,7 @@ struct S5 {\n     b: u32\n }\n \n-fn main() {\n+pub fn main() {\n     unsafe {\n         let s4 = S4 { a: 1, b: [2,3,4] };\n         let transd : [u8, .. 4] = cast::transmute(s4);"}, {"sha": "27ab2c83e5566c158cfe4130cc23dd5be582ba95", "filename": "src/test/run-pass/packed-struct-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-struct-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-struct-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-match.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n     baz: uint\n }\n \n-fn main() {\n+pub fn main() {\n     let foo = Foo { bar: 1, baz: 2 };\n     match foo {\n         Foo {bar, baz} => {"}, {"sha": "f0175da9cbad1acbe695c22214de4bb49ec60909", "filename": "src/test/run-pass/packed-struct-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -51,7 +51,7 @@ struct S7_Option {\n }\n \n \n-fn main() {\n+pub fn main() {\n     assert_eq!(sys::size_of::<S4>(), 4);\n     assert_eq!(sys::size_of::<S5>(), 5);\n     assert_eq!(sys::size_of::<S13_str>(), 13 + sys::size_of::<~str>());"}, {"sha": "6cf519a387f1ee0d51c21b50b9e79ade11f22103", "filename": "src/test/run-pass/packed-struct-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -19,7 +19,7 @@ struct Foo {\n     baz: u64\n }\n \n-fn main() {\n+pub fn main() {\n     let foos = [Foo { bar: 1, baz: 2 }, .. 10];\n \n     assert_eq!(sys::size_of::<[Foo, .. 10]>(), 90);"}, {"sha": "b3261faddfa2a9c93bf8b732cc709cf38f00508c", "filename": "src/test/run-pass/packed-tuple-struct-layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-layout.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -16,7 +16,7 @@ struct S4(u8,[u8, .. 3]);\n #[packed]\n struct S5(u8,u32);\n \n-fn main() {\n+pub fn main() {\n     unsafe {\n         let s4 = S4(1, [2,3,4]);\n         let transd : [u8, .. 4] = cast::transmute(s4);"}, {"sha": "dd38a6b7d122a498624cd857d12c991b51d7bc9e", "filename": "src/test/run-pass/packed-tuple-struct-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -30,7 +30,7 @@ struct S3_Foo(u8, u16, Foo);\n #[packed]\n struct S7_Option(f32, u8, u16, Option<@mut f64>);\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(sys::size_of::<S4>(), 4);\n \n     assert_eq!(sys::size_of::<S5>(), 5);"}, {"sha": "e4e260ab36ec093669f248b5b4720c0f4fd74608", "filename": "src/test/run-pass/pub-extern-privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpub-extern-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fpub-extern-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpub-extern-privacy.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -7,7 +7,7 @@ mod a {\n }\n \n #[fixed_stack_segment] #[inline(never)]\n-fn main() {\n+pub fn main() {\n     unsafe {\n         a::free(transmute(0));\n     }"}, {"sha": "bce2159cc7b9ffa314b78f28d72b517112926428", "filename": "src/test/run-pass/region-dependent-autofn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fregion-dependent-autofn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fregion-dependent-autofn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-dependent-autofn.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -17,6 +17,6 @@ fn both<'r>(v: &'r fn()) -> &'r fn() {\n     subslice(subslice(v))\n }\n \n-fn main() {\n+pub fn main() {\n     both(main);\n }"}, {"sha": "dab881549c44cfda196696df0ad3b16697c81696", "filename": "src/test/run-pass/region-dependent-autoslice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fregion-dependent-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fregion-dependent-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-dependent-autoslice.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -17,7 +17,7 @@ fn both<'r>(v: &'r [uint]) -> &'r [uint] {\n     subslice1(subslice1(v))\n }\n \n-fn main() {\n+pub fn main() {\n     let v = ~[1,2,3];\n     both(v);\n }"}, {"sha": "1e3bd5897a9d50776be3dbb2ce7e459198a2a84a", "filename": "src/test/run-pass/send_str_hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -19,7 +19,7 @@ use std::to_str::ToStr;\n use std::hashmap::HashMap;\n use std::option::Some;\n \n-fn main() {\n+pub fn main() {\n     let mut map: HashMap<SendStr, uint> = HashMap::new();\n     assert!(map.insert(SendStrStatic(\"foo\"), 42));\n     assert!(!map.insert(SendStrOwned(~\"foo\"), 42));"}, {"sha": "23ad0ac309102ba45f4e0ec8ae1f2fd5fad9b2a7", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -21,7 +21,7 @@ use std::to_str::ToStr;\n use self::extra::treemap::TreeMap;\n use std::option::Some;\n \n-fn main() {\n+pub fn main() {\n     let mut map: TreeMap<SendStr, uint> = TreeMap::new();\n     assert!(map.insert(SendStrStatic(\"foo\"), 42));\n     assert!(!map.insert(SendStrOwned(~\"foo\"), 42));"}, {"sha": "74502b54d8e395c73ed2547ee604bdb497cd9072", "filename": "src/test/run-pass/simd-binop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-binop.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -22,7 +22,7 @@ fn test_float(e: f32) -> f32 {\n     e2\n }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(test_int(3i32), 9i32);\n     assert_eq!(test_float(3f32), 9f32);\n }"}, {"sha": "643daad397ca528c131279d5be08c1ed44de67fd", "filename": "src/test/run-pass/simd-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fsimd-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fsimd-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-type.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -6,4 +6,4 @@ struct RGBA {\n     a: f32\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "348b7562f8460ae139a67cbda83fc1bf0cc6daaf", "filename": "src/test/run-pass/sized-borrowed-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fsized-borrowed-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fsized-borrowed-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsized-borrowed-pointer.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -12,4 +12,4 @@\n \n fn bar<T: Sized>() { }\n fn foo<T>() { bar::<&T>() }\n-fn main() { }\n+pub fn main() { }"}, {"sha": "0c05fdd616ba64a0e98401962a3f5d49d29da924", "filename": "src/test/run-pass/sized-owned-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fsized-owned-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fsized-owned-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsized-owned-pointer.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -12,4 +12,4 @@\n \n fn bar<T: Sized>() { }\n fn foo<T>() { bar::<~T>() }\n-fn main() { }\n+pub fn main() { }"}, {"sha": "93c8d67c9c0a5a5d32df79018b681bea1a4ff0b9", "filename": "src/test/run-pass/static-assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fstatic-assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fstatic-assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-assert.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -10,5 +10,5 @@ static d: bool = 1 != 2;\n #[static_assert]\n static f: bool = (4/2) == 2;\n \n-fn main() {\n+pub fn main() {\n }"}, {"sha": "a0fb31e64bf673e904bd19ec614cbacbfa14363f", "filename": "src/test/run-pass/struct-update-moves-and-copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fstruct-update-moves-and-copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fstruct-update-moves-and-copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-update-moves-and-copies.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -94,7 +94,7 @@ fn test2() {\n     assert_eq!(c.noncopy.v, 22);\n }\n \n-fn main() {\n+pub fn main() {\n     test0();\n     test1();\n     test2();"}, {"sha": "5b66d5f28a9260f4d6a3cfe3899004dd0740dcdc", "filename": "src/test/run-pass/syntax-extension-bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fsyntax-extension-bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Fsyntax-extension-bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-bytes.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -10,7 +10,7 @@\n \n static static_vec: &'static [u8] = bytes!(\"abc\", 0xFF, '!');\n \n-fn main() {\n+pub fn main() {\n     let vec = bytes!(\"abc\");\n     assert_eq!(vec, &[97_u8, 98_u8, 99_u8]);\n "}, {"sha": "3d63acd5b83835450d95fe85b27b005974a28726", "filename": "src/test/run-pass/tag-variant-disr-type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftag-variant-disr-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftag-variant-disr-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-variant-disr-type-mismatch.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -13,4 +13,4 @@ enum color {\n     blue = 2,\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "9fef70a4dda88ff01c2a55f6ee99cbc06b024a74", "filename": "src/test/run-pass/trait-bounds-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -29,4 +29,4 @@ fn e(x: ~Foo) { // sugar for ~Foo:Owned\n     b(x);\n }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "49f8999cd45e4229cd76436bfe99cb2c2beea8dd", "filename": "src/test/run-pass/trait-bounds-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftrait-bounds-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftrait-bounds-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-recursion.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -24,4 +24,4 @@ trait C {\n     fn id<T:J<T>>(x:T) -> T { x.j() }\n }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "3629316e14d3daed717b055d98a427efb58ef21e", "filename": "src/test/run-pass/trait-object-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -40,7 +40,7 @@ impl<V> Trait<u8,V> for () {\n     fn method(&self, _x: Type<(u8,V)>) -> int { 0 }\n }\n \n-fn main () {\n+pub fn main () {\n     let a = @() as @Trait<u8, u8>;\n     assert_eq!(a.method(Constant), 0);\n }"}, {"sha": "ba2f32a04990b74aacd049691c2ea77ecaebb384", "filename": "src/test/run-pass/trait-with-bounds-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -34,7 +34,7 @@ impl<T: Clone> Getter<T> for Option<T> {\n }\n \n \n-fn main() {\n+pub fn main() {\n     assert_eq!(3.do_get2(), (3, 3));\n     assert_eq!(Some(~\"hi\").do_get2(), (~\"hi\", ~\"hi\"));\n }"}, {"sha": "4b217ba0ebbdeec1062d4798d7857a7542112a93", "filename": "src/test/run-pass/traits-default-method-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftraits-default-method-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftraits-default-method-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-mut.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -15,4 +15,4 @@ trait Foo {\n     fn foo(&self, mut v: int) { v = 1; }\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "9cdcd8759527a3e543b414091094d3d6f0a67cf2", "filename": "src/test/run-pass/transmute-non-immediate-to-immediate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftransmute-non-immediate-to-immediate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftransmute-non-immediate-to-immediate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftransmute-non-immediate-to-immediate.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -11,7 +11,7 @@\n // Issue #7988\n // Transmuting non-immediate type to immediate type\n \n-fn main() {\n+pub fn main() {\n     unsafe {\n         ::std::cast::transmute::<[int,..1],int>([1])\n     };"}, {"sha": "e51e6ffd52abc0f009b53e081ac2426f2415d32f", "filename": "src/test/run-pass/tuple-struct-constructor-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftuple-struct-constructor-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftuple-struct-constructor-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-constructor-pointer.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -13,7 +13,7 @@ struct Foo(int);\n #[deriving(Eq)]\n struct Bar(int, int);\n \n-fn main() {\n+pub fn main() {\n     let f: extern fn(int) -> Foo = Foo;\n     let g: extern fn(int, int) -> Bar = Bar;\n     assert_eq!(f(42), Foo(42));"}, {"sha": "19a3c52dea8c3d14c0fa5ee0f223fc6d698523ff", "filename": "src/test/run-pass/typeck-macro-interaction-issue-8852.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftypeck-macro-interaction-issue-8852.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Ftypeck-macro-interaction-issue-8852.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeck-macro-interaction-issue-8852.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -17,6 +17,6 @@ macro_rules! test(\n \n test!(x + y)\n \n-fn main() {\n+pub fn main() {\n     foo(A(1), A(2));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "0b8447aa0cdff53c022a91df963a3daee04eea8a", "filename": "src/test/run-pass/unfold-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30862a64c29985b044d9bf6f74fcf1394bc145c7/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs?ref=30862a64c29985b044d9bf6f74fcf1394bc145c7", "patch": "@@ -13,7 +13,7 @@ use std::iter::*;\n // Unfold had a bug with 'self that mean it didn't work\n // cross-crate\n \n-fn main() {\n+pub fn main() {\n     fn count(st: &mut uint) -> Option<uint> {\n         if *st < 10 {\n             let ret = Some(*st);"}]}