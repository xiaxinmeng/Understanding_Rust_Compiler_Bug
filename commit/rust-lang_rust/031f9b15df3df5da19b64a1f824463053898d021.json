{"sha": "031f9b15df3df5da19b64a1f824463053898d021", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMWY5YjE1ZGYzZGY1ZGExOWI2NGExZjgyNDQ2MzA1Mzg5OGQwMjE=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-03-01T21:41:44Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-03-01T22:25:27Z"}, "message": "Only keep one copy of the UTF8_CHAR_WIDTH table.\n\n\u2026 instead of one of each of libcore and libstd_unicode.\n\nMove the `utf8_char_width` function to `core::str`\nunder the `str_internals` unstable feature.", "tree": {"sha": "62bcfd9ce12acb49bfc4a0c24e7ee7ef2282932e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62bcfd9ce12acb49bfc4a0c24e7ee7ef2282932e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/031f9b15df3df5da19b64a1f824463053898d021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/031f9b15df3df5da19b64a1f824463053898d021", "html_url": "https://github.com/rust-lang/rust/commit/031f9b15df3df5da19b64a1f824463053898d021", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/031f9b15df3df5da19b64a1f824463053898d021/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "691eba1358fc3c9c7a8033314a4112d43680c128", "url": "https://api.github.com/repos/rust-lang/rust/commits/691eba1358fc3c9c7a8033314a4112d43680c128", "html_url": "https://github.com/rust-lang/rust/commit/691eba1358fc3c9c7a8033314a4112d43680c128"}], "stats": {"total": 42, "additions": 12, "deletions": 30}, "files": [{"sha": "f88bdd0ecf38262dd2855d5535de7329416b15d3", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/031f9b15df3df5da19b64a1f824463053898d021/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031f9b15df3df5da19b64a1f824463053898d021/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=031f9b15df3df5da19b64a1f824463053898d021", "patch": "@@ -54,6 +54,7 @@\n #![feature(slice_patterns)]\n #![feature(specialization)]\n #![feature(staged_api)]\n+#![feature(str_internals)]\n #![feature(trusted_len)]\n #![feature(unicode)]\n #![feature(unique)]"}, {"sha": "c3edba669f02550e144f18500d7d29701a13300c", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/031f9b15df3df5da19b64a1f824463053898d021/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031f9b15df3df5da19b64a1f824463053898d021/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=031f9b15df3df5da19b64a1f824463053898d021", "patch": "@@ -62,9 +62,9 @@ use core::iter::{FromIterator, FusedIterator};\n use core::mem;\n use core::ops::{self, Add, AddAssign, Index, IndexMut};\n use core::ptr;\n+use core::str as core_str;\n use core::str::pattern::Pattern;\n use std_unicode::char::{decode_utf16, REPLACEMENT_CHARACTER};\n-use std_unicode::str as unicode_str;\n \n use borrow::{Cow, ToOwned};\n use range::RangeArgument;\n@@ -575,7 +575,7 @@ impl String {\n             if byte < 128 {\n                 // subseqidx handles this\n             } else {\n-                let w = unicode_str::utf8_char_width(byte);\n+                let w = core_str::utf8_char_width(byte);\n \n                 match w {\n                     2 => {"}, {"sha": "52e330163105222ca1a8caec998eaec384789ccb", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/031f9b15df3df5da19b64a1f824463053898d021/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031f9b15df3df5da19b64a1f824463053898d021/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=031f9b15df3df5da19b64a1f824463053898d021", "patch": "@@ -1352,6 +1352,13 @@ static UTF8_CHAR_WIDTH: [u8; 256] = [\n 4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0, // 0xFF\n ];\n \n+/// Given a first byte, determine how many bytes are in this UTF-8 character\n+#[unstable(feature = \"str_internals\", issue = \"0\")]\n+#[inline]\n+pub fn utf8_char_width(b: u8) -> usize {\n+    return UTF8_CHAR_WIDTH[b as usize] as usize;\n+}\n+\n /// Mask of the value bits of a continuation byte\n const CONT_MASK: u8 = 0b0011_1111;\n /// Value of the tag bits (tag mask is !CONT_MASK) of a continuation byte"}, {"sha": "58788cdcd4c7c4eb9d521789e7b2beacb506fdc9", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/031f9b15df3df5da19b64a1f824463053898d021/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031f9b15df3df5da19b64a1f824463053898d021/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=031f9b15df3df5da19b64a1f824463053898d021", "patch": "@@ -256,7 +256,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use cmp;\n-use std_unicode::str as core_str;\n+use core::str as core_str;\n use error as std_error;\n use fmt;\n use result;"}, {"sha": "1adf00e40f1909d8d183f5f2b625a05165b2dd32", "filename": "src/libstd_unicode/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/031f9b15df3df5da19b64a1f824463053898d021/src%2Flibstd_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031f9b15df3df5da19b64a1f824463053898d021/src%2Flibstd_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Flib.rs?ref=031f9b15df3df5da19b64a1f824463053898d021", "patch": "@@ -47,7 +47,7 @@ pub mod char;\n #[allow(deprecated)]\n pub mod str {\n     pub use u_str::{SplitWhitespace, UnicodeStr};\n-    pub use u_str::{is_utf16, utf8_char_width};\n+    pub use u_str::is_utf16;\n     pub use u_str::Utf16Encoder;\n }\n "}, {"sha": "0ca6db9b0de82fe6683fae521bcfb5eb0c33b8d3", "filename": "src/libstd_unicode/u_str.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/031f9b15df3df5da19b64a1f824463053898d021/src%2Flibstd_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031f9b15df3df5da19b64a1f824463053898d021/src%2Flibstd_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fu_str.rs?ref=031f9b15df3df5da19b64a1f824463053898d021", "patch": "@@ -77,32 +77,6 @@ impl UnicodeStr for str {\n     }\n }\n \n-// https://tools.ietf.org/html/rfc3629\n-static UTF8_CHAR_WIDTH: [u8; 256] = [\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, // 0x1F\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, // 0x3F\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, // 0x5F\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, // 0x7F\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 0x9F\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 0xBF\n-0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,\n-2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, // 0xDF\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3, // 0xEF\n-4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0, // 0xFF\n-];\n-\n-/// Given a first byte, determine how many bytes are in this UTF-8 character\n-#[inline]\n-pub fn utf8_char_width(b: u8) -> usize {\n-    return UTF8_CHAR_WIDTH[b as usize] as usize;\n-}\n-\n /// Determines if a vector of `u16` contains valid UTF-16\n pub fn is_utf16(v: &[u16]) -> bool {\n     let mut it = v.iter();"}]}