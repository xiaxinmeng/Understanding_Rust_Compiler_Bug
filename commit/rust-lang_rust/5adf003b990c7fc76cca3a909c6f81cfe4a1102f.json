{"sha": "5adf003b990c7fc76cca3a909c6f81cfe4a1102f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZGYwMDNiOTkwYzdmYzc2Y2NhM2E5MDljNmY4MWNmZTRhMTEwMmY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2016-08-24T08:55:03Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2016-08-27T13:20:45Z"}, "message": "Use deterministic `FnvHash{Map,Set}` in rustdoc", "tree": {"sha": "88262d61fdb08497fc40692363e682949c8ebb60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88262d61fdb08497fc40692363e682949c8ebb60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5adf003b990c7fc76cca3a909c6f81cfe4a1102f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5adf003b990c7fc76cca3a909c6f81cfe4a1102f", "html_url": "https://github.com/rust-lang/rust/commit/5adf003b990c7fc76cca3a909c6f81cfe4a1102f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5adf003b990c7fc76cca3a909c6f81cfe4a1102f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "144e576c87627a01dc6ab387f57a21a03659021d", "url": "https://api.github.com/repos/rust-lang/rust/commits/144e576c87627a01dc6ab387f57a21a03659021d", "html_url": "https://github.com/rust-lang/rust/commit/144e576c87627a01dc6ab387f57a21a03659021d"}], "stats": {"total": 105, "additions": 53, "deletions": 52}, "files": [{"sha": "20d4c417655401024c9c9cb110837c53d08bc5eb", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5adf003b990c7fc76cca3a909c6f81cfe4a1102f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5adf003b990c7fc76cca3a909c6f81cfe4a1102f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=5adf003b990c7fc76cca3a909c6f81cfe4a1102f", "patch": "@@ -10,7 +10,6 @@\n \n //! Support for inlining external documentation into the current AST.\n \n-use std::collections::HashSet;\n use std::iter::once;\n \n use syntax::ast;\n@@ -21,6 +20,7 @@ use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::hir::print as pprust;\n use rustc::ty::{self, TyCtxt};\n+use rustc::util::nodemap::FnvHashSet;\n \n use rustc_const_eval::lookup_const_by_id;\n \n@@ -425,7 +425,7 @@ pub fn build_impl<'a, 'tcx>(cx: &DocContext,\n                 .into_iter()\n                 .map(|meth| meth.name.to_string())\n                 .collect()\n-    }).unwrap_or(HashSet::new());\n+    }).unwrap_or(FnvHashSet());\n \n     ret.push(clean::Item {\n         inner: clean::ImplItem(clean::Impl {\n@@ -461,7 +461,7 @@ fn build_module<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // If we're reexporting a reexport it may actually reexport something in\n         // two namespaces, so the target may be listed twice. Make sure we only\n         // visit each node at most once.\n-        let mut visited = HashSet::new();\n+        let mut visited = FnvHashSet();\n         for item in tcx.sess.cstore.item_children(did) {\n             match item.def {\n                 cstore::DlDef(Def::ForeignMod(did)) => {"}, {"sha": "cd425b7c9ebbd0451af93b8f6da3555773c3dc49", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5adf003b990c7fc76cca3a909c6f81cfe4a1102f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5adf003b990c7fc76cca3a909c6f81cfe4a1102f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5adf003b990c7fc76cca3a909c6f81cfe4a1102f", "patch": "@@ -43,10 +43,10 @@ use rustc::hir::print as pprust;\n use rustc::ty::subst::Substs;\n use rustc::ty;\n use rustc::middle::stability;\n+use rustc::util::nodemap::{FnvHashMap, FnvHashSet};\n \n use rustc::hir;\n \n-use std::collections::{HashMap, HashSet};\n use std::path::PathBuf;\n use std::rc::Rc;\n use std::sync::Arc;\n@@ -121,7 +121,7 @@ pub struct Crate {\n     pub access_levels: Arc<AccessLevels<DefId>>,\n     // These are later on moved into `CACHEKEY`, leaving the map empty.\n     // Only here so that they can be filtered through the rustdoc passes.\n-    pub external_traits: HashMap<DefId, Trait>,\n+    pub external_traits: FnvHashMap<DefId, Trait>,\n }\n \n struct CrateNum(ast::CrateNum);\n@@ -1010,7 +1010,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>,\n         // Note that associated types also have a sized bound by default, but we\n         // don't actually know the set of associated types right here so that's\n         // handled in cleaning associated types\n-        let mut sized_params = HashSet::new();\n+        let mut sized_params = FnvHashSet();\n         where_predicates.retain(|pred| {\n             match *pred {\n                 WP::BoundPredicate { ty: Generic(ref g), ref bounds } => {\n@@ -1656,9 +1656,9 @@ impl From<ast::FloatTy> for PrimitiveType {\n struct SubstAlias<'a, 'tcx: 'a> {\n     tcx: &'a ty::TyCtxt<'a, 'tcx, 'tcx>,\n     // Table type parameter definition -> substituted type\n-    ty_substs: HashMap<Def, hir::Ty>,\n+    ty_substs: FnvHashMap<Def, hir::Ty>,\n     // Table node id of lifetime parameter definition -> substituted lifetime\n-    lt_substs: HashMap<ast::NodeId, hir::Lifetime>,\n+    lt_substs: FnvHashMap<ast::NodeId, hir::Lifetime>,\n }\n \n impl<'a, 'tcx: 'a, 'b: 'tcx> Folder for SubstAlias<'a, 'tcx> {\n@@ -1727,8 +1727,8 @@ impl Clean<Type> for hir::Ty {\n                                 let item = tcx.map.expect_item(node_id);\n                                 if let hir::ItemTy(ref ty, ref generics) = item.node {\n                                     let provided_params = &path.segments.last().unwrap().parameters;\n-                                    let mut ty_substs = HashMap::new();\n-                                    let mut lt_substs = HashMap::new();\n+                                    let mut ty_substs = FnvHashMap();\n+                                    let mut lt_substs = FnvHashMap();\n                                     for (i, ty_param) in generics.ty_params.iter().enumerate() {\n                                         let ty_param_def = tcx.expect_def(ty_param.id);\n                                         if let Some(ty) = provided_params.types().get(i).cloned()\n@@ -2384,7 +2384,7 @@ impl Clean<ImplPolarity> for hir::ImplPolarity {\n pub struct Impl {\n     pub unsafety: hir::Unsafety,\n     pub generics: Generics,\n-    pub provided_trait_methods: HashSet<String>,\n+    pub provided_trait_methods: FnvHashSet<String>,\n     pub trait_: Option<Type>,\n     pub for_: Type,\n     pub items: Vec<Item>,\n@@ -2410,7 +2410,7 @@ impl Clean<Vec<Item>> for doctree::Impl {\n                    .map(|meth| meth.name.to_string())\n                    .collect()\n             })\n-        }).unwrap_or(HashSet::new());\n+        }).unwrap_or(FnvHashSet());\n \n         ret.push(Item {\n             name: None,"}, {"sha": "26f792a1fdf99c14e249952d67f522929ae208b4", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5adf003b990c7fc76cca3a909c6f81cfe4a1102f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5adf003b990c7fc76cca3a909c6f81cfe4a1102f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=5adf003b990c7fc76cca3a909c6f81cfe4a1102f", "patch": "@@ -18,6 +18,7 @@ use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, TyCtxt};\n use rustc::hir::map as hir_map;\n use rustc::lint;\n+use rustc::util::nodemap::{FnvHashMap, FnvHashSet};\n use rustc_trans::back::link;\n use rustc_resolve as resolve;\n use rustc_metadata::cstore::CStore;\n@@ -28,7 +29,6 @@ use errors;\n use errors::emitter::ColorConfig;\n \n use std::cell::{RefCell, Cell};\n-use std::collections::{HashMap, HashSet};\n use std::rc::Rc;\n \n use visit_ast::RustdocVisitor;\n@@ -45,13 +45,13 @@ pub enum MaybeTyped<'a, 'tcx: 'a> {\n     NotTyped(&'a session::Session)\n }\n \n-pub type ExternalPaths = HashMap<DefId, (Vec<String>, clean::TypeKind)>;\n+pub type ExternalPaths = FnvHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n \n pub struct DocContext<'a, 'tcx: 'a> {\n     pub map: &'a hir_map::Map<'tcx>,\n     pub maybe_typed: MaybeTyped<'a, 'tcx>,\n     pub input: Input,\n-    pub populated_crate_impls: RefCell<HashSet<ast::CrateNum>>,\n+    pub populated_crate_impls: RefCell<FnvHashSet<ast::CrateNum>>,\n     pub deref_trait_did: Cell<Option<DefId>>,\n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing\n@@ -61,7 +61,7 @@ pub struct DocContext<'a, 'tcx: 'a> {\n     /// Later on moved into `html::render::CACHE_KEY`\n     pub renderinfo: RefCell<RenderInfo>,\n     /// Later on moved through `clean::Crate` into `html::render::CACHE_KEY`\n-    pub external_traits: RefCell<HashMap<DefId, clean::Trait>>,\n+    pub external_traits: RefCell<FnvHashMap<DefId, clean::Trait>>,\n }\n \n impl<'b, 'tcx> DocContext<'b, 'tcx> {\n@@ -178,10 +178,10 @@ pub fn run_core(search_paths: SearchPaths,\n             map: &tcx.map,\n             maybe_typed: Typed(tcx),\n             input: input,\n-            populated_crate_impls: RefCell::new(HashSet::new()),\n+            populated_crate_impls: RefCell::new(FnvHashSet()),\n             deref_trait_did: Cell::new(None),\n             access_levels: RefCell::new(access_levels),\n-            external_traits: RefCell::new(HashMap::new()),\n+            external_traits: RefCell::new(FnvHashMap()),\n             renderinfo: RefCell::new(Default::default()),\n         };\n         debug!(\"crate: {:?}\", ctxt.map.krate());"}, {"sha": "5cb5cc051870b41c64dd23ddbca21a258668f257", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5adf003b990c7fc76cca3a909c6f81cfe4a1102f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5adf003b990c7fc76cca3a909c6f81cfe4a1102f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5adf003b990c7fc76cca3a909c6f81cfe4a1102f", "patch": "@@ -37,7 +37,7 @@ pub use self::ExternalLocation::*;\n use std::ascii::AsciiExt;\n use std::cell::RefCell;\n use std::cmp::Ordering;\n-use std::collections::{BTreeMap, HashMap, HashSet};\n+use std::collections::BTreeMap;\n use std::default::Default;\n use std::error;\n use std::fmt::{self, Display, Formatter};\n@@ -61,6 +61,7 @@ use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n use rustc::session::config::get_unstable_features_setting;\n use rustc::hir;\n+use rustc::util::nodemap::{FnvHashMap, FnvHashSet};\n \n use clean::{self, Attributes, GetDefId};\n use doctree;\n@@ -114,9 +115,9 @@ pub struct SharedContext {\n     /// `true`.\n     pub include_sources: bool,\n     /// The local file sources we've emitted and their respective url-paths.\n-    pub local_sources: HashMap<PathBuf, String>,\n+    pub local_sources: FnvHashMap<PathBuf, String>,\n     /// All the passes that were run on this crate.\n-    pub passes: HashSet<String>,\n+    pub passes: FnvHashSet<String>,\n     /// The base-URL of the issue tracker for when an item has been tagged with\n     /// an issue number.\n     pub issue_tracker_base_url: Option<String>,\n@@ -211,43 +212,43 @@ pub struct Cache {\n     /// Mapping of typaram ids to the name of the type parameter. This is used\n     /// when pretty-printing a type (so pretty printing doesn't have to\n     /// painfully maintain a context like this)\n-    pub typarams: HashMap<DefId, String>,\n+    pub typarams: FnvHashMap<DefId, String>,\n \n     /// Maps a type id to all known implementations for that type. This is only\n     /// recognized for intra-crate `ResolvedPath` types, and is used to print\n     /// out extra documentation on the page of an enum/struct.\n     ///\n     /// The values of the map are a list of implementations and documentation\n     /// found on that implementation.\n-    pub impls: HashMap<DefId, Vec<Impl>>,\n+    pub impls: FnvHashMap<DefId, Vec<Impl>>,\n \n     /// Maintains a mapping of local crate node ids to the fully qualified name\n     /// and \"short type description\" of that node. This is used when generating\n     /// URLs when a type is being linked to. External paths are not located in\n     /// this map because the `External` type itself has all the information\n     /// necessary.\n-    pub paths: HashMap<DefId, (Vec<String>, ItemType)>,\n+    pub paths: FnvHashMap<DefId, (Vec<String>, ItemType)>,\n \n     /// Similar to `paths`, but only holds external paths. This is only used for\n     /// generating explicit hyperlinks to other crates.\n-    pub external_paths: HashMap<DefId, (Vec<String>, ItemType)>,\n+    pub external_paths: FnvHashMap<DefId, (Vec<String>, ItemType)>,\n \n     /// This map contains information about all known traits of this crate.\n     /// Implementations of a crate should inherit the documentation of the\n     /// parent trait if no extra documentation is specified, and default methods\n     /// should show up in documentation about trait implementations.\n-    pub traits: HashMap<DefId, clean::Trait>,\n+    pub traits: FnvHashMap<DefId, clean::Trait>,\n \n     /// When rendering traits, it's often useful to be able to list all\n     /// implementors of the trait, and this mapping is exactly, that: a mapping\n     /// of trait ids to the list of known implementors of the trait\n-    pub implementors: HashMap<DefId, Vec<Implementor>>,\n+    pub implementors: FnvHashMap<DefId, Vec<Implementor>>,\n \n     /// Cache of where external crate documentation can be found.\n-    pub extern_locations: HashMap<ast::CrateNum, (String, ExternalLocation)>,\n+    pub extern_locations: FnvHashMap<ast::CrateNum, (String, ExternalLocation)>,\n \n     /// Cache of where documentation for primitives can be found.\n-    pub primitive_locations: HashMap<clean::PrimitiveType, ast::CrateNum>,\n+    pub primitive_locations: FnvHashMap<clean::PrimitiveType, ast::CrateNum>,\n \n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing\n@@ -260,7 +261,7 @@ pub struct Cache {\n     parent_stack: Vec<DefId>,\n     parent_is_trait_impl: bool,\n     search_index: Vec<IndexItem>,\n-    seen_modules: HashSet<DefId>,\n+    seen_modules: FnvHashSet<DefId>,\n     seen_mod: bool,\n     stripped_mod: bool,\n     deref_trait_did: Option<DefId>,\n@@ -277,9 +278,9 @@ pub struct Cache {\n /// Later on moved into `CACHE_KEY`.\n #[derive(Default)]\n pub struct RenderInfo {\n-    pub inlined: HashSet<DefId>,\n+    pub inlined: FnvHashSet<DefId>,\n     pub external_paths: ::core::ExternalPaths,\n-    pub external_typarams: HashMap<DefId, String>,\n+    pub external_typarams: FnvHashMap<DefId, String>,\n     pub deref_trait_did: Option<DefId>,\n }\n \n@@ -377,10 +378,10 @@ impl ToJson for IndexItemFunctionType {\n thread_local!(static CACHE_KEY: RefCell<Arc<Cache>> = Default::default());\n thread_local!(pub static CURRENT_LOCATION_KEY: RefCell<Vec<String>> =\n                     RefCell::new(Vec::new()));\n-thread_local!(static USED_ID_MAP: RefCell<HashMap<String, usize>> =\n+thread_local!(static USED_ID_MAP: RefCell<FnvHashMap<String, usize>> =\n                     RefCell::new(init_ids()));\n \n-fn init_ids() -> HashMap<String, usize> {\n+fn init_ids() -> FnvHashMap<String, usize> {\n     [\n      \"main\",\n      \"search\",\n@@ -407,7 +408,7 @@ pub fn reset_ids(embedded: bool) {\n         *s.borrow_mut() = if embedded {\n             init_ids()\n         } else {\n-            HashMap::new()\n+            FnvHashMap()\n         };\n     });\n }\n@@ -432,7 +433,7 @@ pub fn derive_id(candidate: String) -> String {\n pub fn run(mut krate: clean::Crate,\n            external_html: &ExternalHtml,\n            dst: PathBuf,\n-           passes: HashSet<String>,\n+           passes: FnvHashSet<String>,\n            css_file_extension: Option<PathBuf>,\n            renderinfo: RenderInfo) -> Result<(), Error> {\n     let src_root = match krate.src.parent() {\n@@ -443,7 +444,7 @@ pub fn run(mut krate: clean::Crate,\n         src_root: src_root,\n         passes: passes,\n         include_sources: true,\n-        local_sources: HashMap::new(),\n+        local_sources: FnvHashMap(),\n         issue_tracker_base_url: None,\n         layout: layout::Layout {\n             logo: \"\".to_string(),\n@@ -513,22 +514,22 @@ pub fn run(mut krate: clean::Crate,\n         .collect();\n \n     let mut cache = Cache {\n-        impls: HashMap::new(),\n+        impls: FnvHashMap(),\n         external_paths: external_paths,\n-        paths: HashMap::new(),\n-        implementors: HashMap::new(),\n+        paths: FnvHashMap(),\n+        implementors: FnvHashMap(),\n         stack: Vec::new(),\n         parent_stack: Vec::new(),\n         search_index: Vec::new(),\n         parent_is_trait_impl: false,\n-        extern_locations: HashMap::new(),\n-        primitive_locations: HashMap::new(),\n-        seen_modules: HashSet::new(),\n+        extern_locations: FnvHashMap(),\n+        primitive_locations: FnvHashMap(),\n+        seen_modules: FnvHashSet(),\n         seen_mod: false,\n         stripped_mod: false,\n         access_levels: krate.access_levels.clone(),\n         orphan_methods: Vec::new(),\n-        traits: mem::replace(&mut krate.external_traits, HashMap::new()),\n+        traits: mem::replace(&mut krate.external_traits, FnvHashMap()),\n         deref_trait_did: deref_trait_did,\n         typarams: external_typarams,\n     };\n@@ -574,7 +575,7 @@ pub fn run(mut krate: clean::Crate,\n \n /// Build the search index from the collected metadata\n fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n-    let mut nodeid_to_pathid = HashMap::new();\n+    let mut nodeid_to_pathid = FnvHashMap();\n     let mut crate_items = Vec::with_capacity(cache.search_index.len());\n     let mut crate_paths = Vec::<Json>::new();\n \n@@ -2515,7 +2516,7 @@ fn render_struct(w: &mut fmt::Formatter, it: &clean::Item,\n #[derive(Copy, Clone)]\n enum AssocItemLink<'a> {\n     Anchor(Option<&'a str>),\n-    GotoSource(DefId, &'a HashSet<String>),\n+    GotoSource(DefId, &'a FnvHashSet<String>),\n }\n \n impl<'a> AssocItemLink<'a> {"}, {"sha": "e7edf8d1cabe28ff8c4b3fbdb1620de8fbccadf4", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5adf003b990c7fc76cca3a909c6f81cfe4a1102f/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5adf003b990c7fc76cca3a909c6f81cfe4a1102f/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=5adf003b990c7fc76cca3a909c6f81cfe4a1102f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::cell::{RefCell, Cell};\n-use std::collections::{HashMap, HashSet};\n use std::env;\n use std::ffi::OsString;\n use std::io::prelude::*;\n@@ -29,6 +28,7 @@ use rustc::session::{self, config};\n use rustc::session::config::{get_unstable_features_setting, OutputType,\n                              OutputTypes, Externs};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n+use rustc::util::nodemap::{FnvHashMap, FnvHashSet};\n use rustc_back::dynamic_lib::DynamicLibrary;\n use rustc_back::tempdir::TempDir;\n use rustc_driver::{driver, Compilation};\n@@ -107,8 +107,8 @@ pub fn run(input: &str,\n         map: &map,\n         maybe_typed: core::NotTyped(&sess),\n         input: input,\n-        external_traits: RefCell::new(HashMap::new()),\n-        populated_crate_impls: RefCell::new(HashSet::new()),\n+        external_traits: RefCell::new(FnvHashMap()),\n+        populated_crate_impls: RefCell::new(FnvHashSet()),\n         deref_trait_did: Cell::new(None),\n         access_levels: Default::default(),\n         renderinfo: Default::default(),"}, {"sha": "f6084180f0bd1814c5bb88cc071bbb0f437826d0", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5adf003b990c7fc76cca3a909c6f81cfe4a1102f/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5adf003b990c7fc76cca3a909c6f81cfe4a1102f/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=5adf003b990c7fc76cca3a909c6f81cfe4a1102f", "patch": "@@ -11,7 +11,6 @@\n //! Rust AST Visitor. Extracts useful information and massages it into a form\n //! usable for clean\n \n-use std::collections::HashSet;\n use std::mem;\n \n use syntax::abi;\n@@ -23,6 +22,7 @@ use syntax_pos::Span;\n use rustc::hir::map as hir_map;\n use rustc::hir::def::Def;\n use rustc::middle::privacy::AccessLevel;\n+use rustc::util::nodemap::FnvHashSet;\n \n use rustc::hir;\n \n@@ -42,14 +42,14 @@ pub struct RustdocVisitor<'a, 'tcx: 'a> {\n     pub module: Module,\n     pub attrs: hir::HirVec<ast::Attribute>,\n     pub cx: &'a core::DocContext<'a, 'tcx>,\n-    view_item_stack: HashSet<ast::NodeId>,\n+    view_item_stack: FnvHashSet<ast::NodeId>,\n     inlining_from_glob: bool,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     pub fn new(cx: &'a core::DocContext<'a, 'tcx>) -> RustdocVisitor<'a, 'tcx> {\n         // If the root is reexported, terminate all recursion.\n-        let mut stack = HashSet::new();\n+        let mut stack = FnvHashSet();\n         stack.insert(ast::CRATE_NODE_ID);\n         RustdocVisitor {\n             module: Module::new(None),"}]}