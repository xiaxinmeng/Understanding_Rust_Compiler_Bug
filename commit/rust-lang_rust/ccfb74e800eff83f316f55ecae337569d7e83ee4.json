{"sha": "ccfb74e800eff83f316f55ecae337569d7e83ee4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZmI3NGU4MDBlZmY4M2YzMTZmNTVlY2FlMzM3NTY5ZDdlODNlZTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-22T10:37:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-18T00:25:18Z"}, "message": "warn for where/return-types that reference regions\n\nThis is a step towards fixing #32330. The full fix would be a breaking\nchange, so we begin by issuing warnings for scenarios that will break.", "tree": {"sha": "36722ea65bec3d6f97ba4e23effdd7515d91bcff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36722ea65bec3d6f97ba4e23effdd7515d91bcff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccfb74e800eff83f316f55ecae337569d7e83ee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccfb74e800eff83f316f55ecae337569d7e83ee4", "html_url": "https://github.com/rust-lang/rust/commit/ccfb74e800eff83f316f55ecae337569d7e83ee4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccfb74e800eff83f316f55ecae337569d7e83ee4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97ca8d799c2b6e6a4ce1b55b7d6e28526d3f23d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/97ca8d799c2b6e6a4ce1b55b7d6e28526d3f23d5", "html_url": "https://github.com/rust-lang/rust/commit/97ca8d799c2b6e6a4ce1b55b7d6e28526d3f23d5"}], "stats": {"total": 464, "additions": 449, "deletions": 15}, "files": [{"sha": "d7971cd2cf040743dfec64b62ca6e6bf09a7974a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=ccfb74e800eff83f316f55ecae337569d7e83ee4", "patch": "@@ -167,6 +167,13 @@ declare_lint! {\n     \"transmute from function item type to pointer-sized type erroneously allowed\"\n }\n \n+declare_lint! {\n+    pub HR_LIFETIME_IN_ASSOC_TYPE,\n+    Warn,\n+    \"binding for associated type references higher-ranked lifetime \\\n+     that does not appear in the trait input types\"\n+}\n+\n declare_lint! {\n     pub OVERLAPPING_INHERENT_IMPLS,\n     Warn,\n@@ -234,7 +241,8 @@ impl LintPass for HardwiredLints {\n             RENAMED_AND_REMOVED_LINTS,\n             SUPER_OR_SELF_IN_GLOBAL_PATH,\n             UNSIZED_IN_TUPLE,\n-            OBJECT_UNSAFE_FRAGMENT\n+            OBJECT_UNSAFE_FRAGMENT,\n+            HR_LIFETIME_IN_ASSOC_TYPE\n         )\n     }\n }"}, {"sha": "4a14185b6e3add0f47048a4a4dbfcf9100b3ef1f", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=ccfb74e800eff83f316f55ecae337569d7e83ee4", "patch": "@@ -382,6 +382,35 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// Returns a set of all late-bound regions that are constrained\n+    /// by `value`, meaning that if we instantiate those LBR with\n+    /// variables and equate `value` with something else, those\n+    /// variables will also be equated.\n+    pub fn collect_constrained_late_bound_regions<T>(&self, value: &Binder<T>)\n+                                                     -> FnvHashSet<ty::BoundRegion>\n+        where T : TypeFoldable<'tcx>\n+    {\n+        self.collect_late_bound_regions(value, true)\n+    }\n+\n+    /// Returns a set of all late-bound regions that appear in `value` anywhere.\n+    pub fn collect_referenced_late_bound_regions<T>(&self, value: &Binder<T>)\n+                                                    -> FnvHashSet<ty::BoundRegion>\n+        where T : TypeFoldable<'tcx>\n+    {\n+        self.collect_late_bound_regions(value, false)\n+    }\n+\n+    fn collect_late_bound_regions<T>(&self, value: &Binder<T>, just_constraint: bool)\n+                                     -> FnvHashSet<ty::BoundRegion>\n+        where T : TypeFoldable<'tcx>\n+    {\n+        let mut collector = LateBoundRegionsCollector::new(just_constraint);\n+        let result = value.skip_binder().visit_with(&mut collector);\n+        assert!(!result); // should never have stopped early\n+        collector.regions\n+    }\n+\n     /// Replace any late-bound regions bound in `value` with `'static`. Useful in trans but also\n     /// method lookup and a few other places where precise region relationships are not required.\n     pub fn erase_late_bound_regions<T>(self, value: &Binder<T>) -> T\n@@ -625,3 +654,54 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         false\n     }\n }\n+\n+/// Collects all the late-bound regions it finds into a hash set.\n+struct LateBoundRegionsCollector {\n+    current_depth: u32,\n+    regions: FnvHashSet<ty::BoundRegion>,\n+    just_constrained: bool,\n+}\n+\n+impl LateBoundRegionsCollector {\n+    fn new(just_constrained: bool) -> Self {\n+        LateBoundRegionsCollector {\n+            current_depth: 1,\n+            regions: FnvHashSet(),\n+            just_constrained: just_constrained,\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n+        self.current_depth += 1;\n+        let result = t.super_visit_with(self);\n+        self.current_depth -= 1;\n+        result\n+    }\n+\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n+        // if we are only looking for \"constrained\" region, we have to\n+        // ignore the inputs to a projection, as they may not appear\n+        // in the normalized form\n+        if self.just_constrained {\n+            match t.sty {\n+                ty::TyProjection(..) => { return false; }\n+                _ => { }\n+            }\n+        }\n+\n+        t.super_visit_with(self)\n+    }\n+\n+    fn visit_region(&mut self, r: ty::Region) -> bool {\n+        match r {\n+            ty::ReLateBound(debruijn, br) if debruijn.depth == self.current_depth => {\n+                self.regions.insert(br);\n+            }\n+            _ => { }\n+        }\n+        false\n+    }\n+}\n+"}, {"sha": "9fca6d3d201390b93f51e7a233061eb4525a3d8a", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=ccfb74e800eff83f316f55ecae337569d7e83ee4", "patch": "@@ -197,7 +197,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         FutureIncompatibleInfo {\n             id: LintId::of(OBJECT_UNSAFE_FRAGMENT),\n             reference: \"issue #33243 <https://github.com/rust-lang/rust/issues/33243>\",\n-        }\n+        },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(HR_LIFETIME_IN_ASSOC_TYPE),\n+            reference: \"issue #33685 <https://github.com/rust-lang/rust/issues/33685>\",\n+        },\n         ]);\n \n     // We have one lint pass defined specially"}, {"sha": "ac86b7c8740603c27ac7c7aa9626646a0aed7cb8", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 88, "deletions": 7, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ccfb74e800eff83f316f55ecae337569d7e83ee4", "patch": "@@ -52,13 +52,17 @@ use middle::const_val::ConstVal;\n use rustc_const_eval::{eval_const_expr_partial, ConstEvalErr};\n use rustc_const_eval::EvalHint::UncheckedExprHint;\n use rustc_const_eval::ErrKind::ErroneousReferencedConstant;\n+use hir::{self, SelfKind};\n use hir::def::{self, Def};\n use hir::def_id::DefId;\n+use hir::print as pprust;\n use middle::resolve_lifetime as rl;\n+use rustc::lint;\n use rustc::ty::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs, ParamSpace};\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::wf::object_region_bounds;\n+use rustc_back::slice;\n use require_c_abi_if_variadic;\n use rscope::{self, UnelidableRscope, RegionScope, ElidableRscope,\n              ObjectLifetimeDefaultRscope, ShiftedRscope, BindingRscope,\n@@ -74,10 +78,6 @@ use syntax::errors::DiagnosticBuilder;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::parse::token::{self, keywords};\n \n-use rustc::hir::print as pprust;\n-use rustc::hir::{self, SelfKind};\n-use rustc_back::slice;\n-\n pub trait AstConv<'gcx, 'tcx> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'a, 'gcx, 'tcx>;\n \n@@ -679,6 +679,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                         PathParamMode::Explicit,\n                                         trait_def_id,\n                                         self_ty,\n+                                        trait_ref.ref_id,\n                                         trait_ref.path.segments.last().unwrap(),\n                                         poly_projections)\n     }\n@@ -723,6 +724,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         span: Span,\n         param_mode: PathParamMode,\n         trait_def_id: DefId,\n+        trait_path_ref_id: ast::NodeId,\n         trait_segment: &hir::PathSegment,\n         mut projections: &mut Vec<ty::PolyProjectionPredicate<'tcx>>)\n         -> ty::PolyTraitRef<'tcx>\n@@ -732,6 +734,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                         param_mode,\n                                         trait_def_id,\n                                         None,\n+                                        trait_path_ref_id,\n                                         trait_segment,\n                                         projections)\n     }\n@@ -742,6 +745,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         param_mode: PathParamMode,\n         trait_def_id: DefId,\n         self_ty: Option<Ty<'tcx>>,\n+        path_id: ast::NodeId,\n         trait_segment: &hir::PathSegment,\n         poly_projections: &mut Vec<ty::PolyProjectionPredicate<'tcx>>)\n         -> ty::PolyTraitRef<'tcx>\n@@ -770,7 +774,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 .filter_map(|binding| {\n                     // specify type to assert that error was already reported in Err case:\n                     let predicate: Result<_, ErrorReported> =\n-                        self.ast_type_binding_to_poly_projection_predicate(poly_trait_ref.clone(),\n+                        self.ast_type_binding_to_poly_projection_predicate(path_id,\n+                                                                           poly_trait_ref.clone(),\n                                                                            self_ty,\n                                                                            binding);\n                     predicate.ok() // ok to ignore Err() because ErrorReported (see above)\n@@ -863,7 +868,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         (self.tcx().mk_substs(substs), assoc_bindings)\n     }\n \n-    fn ast_type_binding_to_poly_projection_predicate(&self,\n+    fn ast_type_binding_to_poly_projection_predicate(\n+        &self,\n+        path_id: ast::NodeId,\n         mut trait_ref: ty::PolyTraitRef<'tcx>,\n         self_ty: Option<Ty<'tcx>>,\n         binding: &ConvertedBinding<'tcx>)\n@@ -887,6 +894,36 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         //\n         // We want to produce `<B as SuperTrait<int>>::T == foo`.\n \n+        // Find any late-bound regions declared in `ty` that are not\n+        // declared in the trait-ref. These are not wellformed.\n+        //\n+        // Example:\n+        //\n+        //     for<'a> <T as Iterator>::Item = &'a str // <-- 'a is bad\n+        //     for<'a> <T as FnMut<(&'a u32,)>>::Output = &'a str // <-- 'a is ok\n+        let late_bound_in_trait_ref = tcx.collect_constrained_late_bound_regions(&trait_ref);\n+        let late_bound_in_ty = tcx.collect_referenced_late_bound_regions(&ty::Binder(binding.ty));\n+        debug!(\"late_bound_in_trait_ref = {:?}\", late_bound_in_trait_ref);\n+        debug!(\"late_bound_in_ty = {:?}\", late_bound_in_ty);\n+        for br in late_bound_in_ty.difference(&late_bound_in_trait_ref) {\n+            let br_name = match *br {\n+                ty::BrNamed(_, name) => name,\n+                _ => {\n+                    span_bug!(\n+                        binding.span,\n+                        \"anonymous bound region {:?} in binding but not trait ref\",\n+                        br);\n+                }\n+            };\n+            tcx.sess.add_lint(\n+                lint::builtin::HR_LIFETIME_IN_ASSOC_TYPE,\n+                path_id,\n+                binding.span,\n+                format!(\"binding for associated type `{}` references lifetime `{}`, \\\n+                         which does not appear in the trait input types\",\n+                        binding.item_name, br_name));\n+        }\n+\n         // Simple case: X is defined in the current trait.\n         if self.trait_defines_associated_type_named(trait_ref.def_id(), binding.item_name) {\n             return Ok(ty::Binder(ty::ProjectionPredicate {      // <-------------------+\n@@ -1012,6 +1049,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                                                path.span,\n                                                                PathParamMode::Explicit,\n                                                                trait_def_id,\n+                                                               ty.id,\n                                                                path.segments.last().unwrap(),\n                                                                &mut projection_bounds);\n                         Ok((trait_ref, projection_bounds))\n@@ -1416,6 +1454,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                       param_mode: PathParamMode,\n                       def: Def,\n                       opt_self_ty: Option<Ty<'tcx>>,\n+                      base_path_ref_id: ast::NodeId,\n                       base_segments: &[hir::PathSegment])\n                       -> Ty<'tcx> {\n         let tcx = self.tcx();\n@@ -1434,6 +1473,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                                        span,\n                                                        param_mode,\n                                                        trait_def_id,\n+                                                       base_path_ref_id,\n                                                        base_segments.last().unwrap(),\n                                                        &mut projection_bounds);\n \n@@ -1518,6 +1558,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                       param_mode: PathParamMode,\n                                       mut def: Def,\n                                       opt_self_ty: Option<Ty<'tcx>>,\n+                                      base_path_ref_id: ast::NodeId,\n                                       base_segments: &[hir::PathSegment],\n                                       assoc_segments: &[hir::PathSegment])\n                                       -> (Ty<'tcx>, Def) {\n@@ -1532,6 +1573,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                          param_mode,\n                                          def,\n                                          opt_self_ty,\n+                                         base_path_ref_id,\n                                          base_segments);\n         debug!(\"finish_resolving_def_to_ty: base_def_to_ty returned {:?}\", ty);\n         // If any associated type segments remain, attempt to resolve them.\n@@ -1607,7 +1649,45 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             }\n             hir::TyBareFn(ref bf) => {\n                 require_c_abi_if_variadic(tcx, &bf.decl, bf.abi, ast_ty.span);\n-                tcx.mk_fn_ptr(self.ty_of_bare_fn(bf.unsafety, bf.abi, &bf.decl))\n+                let bare_fn_ty = self.ty_of_bare_fn(bf.unsafety, bf.abi, &bf.decl);\n+\n+                // Find any late-bound regions declared in return type that do\n+                // not appear in the arguments. These are not wellformed.\n+                //\n+                // Example:\n+                //\n+                //     for<'a> fn() -> &'a str <-- 'a is bad\n+                //     for<'a> fn(&'a String) -> &'a str <-- 'a is ok\n+                //\n+                // Note that we do this check **here** and not in\n+                // `ty_of_bare_fn` because the latter is also used to make\n+                // the types for fn items, and we do not want to issue a\n+                // warning then. (Once we fix #32330, the regions we are\n+                // checking for here would be considered early bound\n+                // anyway.)\n+                let inputs = bare_fn_ty.sig.inputs();\n+                let late_bound_in_args = tcx.collect_constrained_late_bound_regions(&inputs);\n+                let output = bare_fn_ty.sig.output();\n+                let late_bound_in_ret = tcx.collect_referenced_late_bound_regions(&output);\n+                for br in late_bound_in_ret.difference(&late_bound_in_args) {\n+                    let br_name = match *br {\n+                        ty::BrNamed(_, name) => name,\n+                        _ => {\n+                            span_bug!(\n+                                bf.decl.output.span(),\n+                                \"anonymous bound region {:?} in return but not args\",\n+                                br);\n+                        }\n+                    };\n+                    tcx.sess.add_lint(\n+                        lint::builtin::HR_LIFETIME_IN_ASSOC_TYPE,\n+                        ast_ty.id,\n+                        ast_ty.span,\n+                        format!(\"return type references lifetime `{}`, \\\n+                                 which does not appear in the trait input types\",\n+                                br_name));\n+                }\n+                tcx.mk_fn_ptr(bare_fn_ty)\n             }\n             hir::TyPolyTraitRef(ref bounds) => {\n                 self.conv_ty_poly_trait_ref(rscope, ast_ty.span, bounds)\n@@ -1635,6 +1715,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                                                  PathParamMode::Explicit,\n                                                                  def,\n                                                                  opt_self_ty,\n+                                                                 ast_ty.id,\n                                                                  &path.segments[..base_ty_end],\n                                                                  &path.segments[base_ty_end..]);\n "}, {"sha": "1ee9d1032a6ee47ad65748422ed13692a753d6a8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ccfb74e800eff83f316f55ecae337569d7e83ee4", "patch": "@@ -3866,6 +3866,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                                  PathParamMode::Optional,\n                                                                  def,\n                                                                  opt_self_ty,\n+                                                                 node_id,\n                                                                  &ty_segments[..base_ty_end],\n                                                                  &ty_segments[base_ty_end..]);\n             let item_segment = path.segments.last().unwrap();"}, {"sha": "5896a34b0d1603b953b0281c414d7d80bdff1e96", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ccfb74e800eff83f316f55ecae337569d7e83ee4", "patch": "@@ -568,7 +568,8 @@ fn convert_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n     let (fty, explicit_self_category) =\n         AstConv::ty_of_method(&ccx.icx(&(rcvr_ty_predicates, &sig.generics)),\n-                              sig, untransformed_rcvr_ty);\n+                              sig,\n+                              untransformed_rcvr_ty);\n \n     let def_id = ccx.tcx.map.local_def_id(id);\n     let substs = mk_item_substs(ccx, &ty_generics);"}, {"sha": "52a2ca9082d230c297028aabfc9baa63d560d191", "filename": "src/test/compile-fail/associated-types-eq-hr.rs", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs?ref=ccfb74e800eff83f316f55ecae337569d7e83ee4", "patch": "@@ -40,6 +40,17 @@ impl<'a> TheTrait<&'a isize> for UintStruct {\n     }\n }\n \n+struct Tuple {\n+}\n+\n+impl<'a> TheTrait<(&'a isize, &'a isize)> for Tuple {\n+    type A = &'a isize;\n+\n+    fn get(&self, t: (&'a isize, &'a isize)) -> &'a isize {\n+        t.0\n+    }\n+}\n+\n fn foo<T>()\n     where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n {\n@@ -52,10 +63,28 @@ fn bar<T>()\n     // ok for UintStruct, but not IntStruct\n }\n \n-fn baz<T>()\n-    where T : for<'x,'y> TheTrait<&'x isize, A = &'y isize>\n+fn tuple_one<T>()\n+    where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n+{\n+    // not ok for tuple, two lifetimes and we pick first\n+}\n+\n+fn tuple_two<T>()\n+    where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n {\n-    // not ok for either struct, due to the use of two lifetimes\n+    // not ok for tuple, two lifetimes and we pick second\n+}\n+\n+fn tuple_three<T>()\n+    where T : for<'x> TheTrait<(&'x isize, &'x isize), A = &'x isize>\n+{\n+    // ok for tuple\n+}\n+\n+fn tuple_four<T>()\n+    where T : for<'x,'y> TheTrait<(&'x isize, &'y isize)>\n+{\n+    // not ok for tuple, two lifetimes, and lifetime matching is invariant\n }\n \n pub fn main() {\n@@ -65,6 +94,16 @@ pub fn main() {\n     bar::<IntStruct>(); //~ ERROR type mismatch\n     bar::<UintStruct>();\n \n-    baz::<IntStruct>(); //~ ERROR type mismatch\n-    baz::<UintStruct>(); //~ ERROR type mismatch\n+    tuple_one::<Tuple>();\n+    //~^ ERROR E0277\n+    //~| ERROR type mismatch\n+\n+    tuple_two::<Tuple>();\n+    //~^ ERROR E0277\n+    //~| ERROR type mismatch\n+\n+    tuple_three::<Tuple>();\n+\n+    tuple_four::<Tuple>();\n+    //~^ ERROR E0277\n }"}, {"sha": "f60f06b4ec8330ae36a1c90c7d66a4fbbe648a74", "filename": "src/test/compile-fail/associated-types/bound-lifetime-constrained.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs?ref=ccfb74e800eff83f316f55ecae337569d7e83ee4", "patch": "@@ -0,0 +1,66 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: func object clause\n+\n+#![allow(dead_code)]\n+#![feature(rustc_attrs)]\n+#![feature(unboxed_closures)]\n+#![deny(hr_lifetime_in_assoc_type)]\n+\n+trait Foo<'a> {\n+    type Item;\n+}\n+\n+impl<'a> Foo<'a> for() {\n+    type Item = ();\n+}\n+\n+// Check that appearing in a projection input in the argument is not enough:\n+#[cfg(func)]\n+fn func1(_: for<'a> fn(<() as Foo<'a>>::Item) -> &'a i32) {\n+    //[func]~^ ERROR return type references lifetime `'a`\n+    //[func]~| WARNING previously accepted\n+}\n+\n+// Check that appearing in a projection input in the return still\n+// causes an error:\n+#[cfg(func)]\n+fn func2(_: for<'a> fn() -> <() as Foo<'a>>::Item) {\n+    //[func]~^ ERROR return type references lifetime `'a`\n+    //[func]~| WARNING previously accepted\n+}\n+\n+#[cfg(object)]\n+fn object1(_: Box<for<'a> Fn(<() as Foo<'a>>::Item) -> &'a i32>) {\n+    //[object]~^ ERROR `Output` references lifetime `'a`\n+    //[object]~| WARNING previously accepted\n+}\n+\n+#[cfg(object)]\n+fn object2(_: Box<for<'a> Fn() -> <() as Foo<'a>>::Item>) {\n+    //[object]~^ ERROR `Output` references lifetime `'a`\n+    //[object]~| WARNING previously accepted\n+}\n+\n+#[cfg(clause)]\n+fn clause1<T>() where T: for<'a> Fn(<() as Foo<'a>>::Item) -> &'a i32 {\n+    //[clause]~^ ERROR `Output` references lifetime `'a`\n+    //[clause]~| WARNING previously accepted\n+}\n+\n+#[cfg(clause)]\n+fn clause2<T>() where T: for<'a> Fn() -> <() as Foo<'a>>::Item {\n+    //[clause]~^ ERROR `Output` references lifetime `'a`\n+    //[clause]~| WARNING previously accepted\n+}\n+\n+#[rustc_error]\n+fn main() { } //[ok]~ ERROR compilation successful"}, {"sha": "020c9e5e1db5999280df72fbdb813ba9f62e57b2", "filename": "src/test/compile-fail/associated-types/bound-lifetime-in-binding-only.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs?ref=ccfb74e800eff83f316f55ecae337569d7e83ee4", "patch": "@@ -0,0 +1,90 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: angle paren ok elision\n+\n+#![allow(dead_code)]\n+#![feature(rustc_attrs)]\n+#![feature(unboxed_closures)]\n+#![deny(hr_lifetime_in_assoc_type)]\n+\n+trait Foo {\n+    type Item;\n+}\n+\n+#[cfg(angle)]\n+fn angle<T: for<'a> Foo<Item=&'a i32>>() {\n+    //[angle]~^ ERROR binding for associated type `Item` references lifetime `'a`\n+    //[angle]~| WARNING previously accepted\n+}\n+\n+#[cfg(angle)]\n+fn angle1<T>() where T: for<'a> Foo<Item=&'a i32> {\n+    //[angle]~^ ERROR binding for associated type `Item` references lifetime `'a`\n+    //[angle]~| WARNING previously accepted\n+}\n+\n+#[cfg(angle)]\n+fn angle2<T>() where for<'a> T: Foo<Item=&'a i32> {\n+    //[angle]~^ ERROR binding for associated type `Item` references lifetime `'a`\n+    //[angle]~| WARNING previously accepted\n+}\n+\n+#[cfg(angle)]\n+fn angle3(_: &for<'a> Foo<Item=&'a i32>) {\n+    //[angle]~^ ERROR binding for associated type `Item` references lifetime `'a`\n+    //[angle]~| WARNING previously accepted\n+}\n+\n+#[cfg(paren)]\n+fn paren<T: for<'a> Fn() -> &'a i32>() {\n+    //[paren]~^ ERROR binding for associated type `Output` references lifetime `'a`\n+    //[paren]~| WARNING previously accepted\n+}\n+\n+#[cfg(paren)]\n+fn paren1<T>() where T: for<'a> Fn() -> &'a i32 {\n+    //[paren]~^ ERROR binding for associated type `Output` references lifetime `'a`\n+    //[paren]~| WARNING previously accepted\n+}\n+\n+#[cfg(paren)]\n+fn paren2<T>() where for<'a> T: Fn() -> &'a i32 {\n+    //[paren]~^ ERROR binding for associated type `Output` references lifetime `'a`\n+    //[paren]~| WARNING previously accepted\n+}\n+\n+#[cfg(paren)]\n+fn paren3(_: &for<'a> Fn() -> &'a i32) {\n+    //[paren]~^ ERROR binding for associated type `Output` references lifetime `'a`\n+    //[paren]~| WARNING previously accepted\n+}\n+\n+#[cfg(elision)]\n+fn elision<T: Fn() -> &i32>() {\n+    //[elision]~^ ERROR E0106\n+}\n+\n+struct Parameterized<'a> { x: &'a str }\n+\n+#[cfg(ok)]\n+fn ok1<T: for<'a> Fn(&Parameterized<'a>) -> &'a i32>() {\n+}\n+\n+#[cfg(ok)]\n+fn ok2<T: for<'a,'b> Fn<(&'b Parameterized<'a>,), Output=&'a i32>>() {\n+}\n+\n+#[cfg(ok)]\n+fn ok3<T>() where for<'a> Parameterized<'a>: Foo<Item=&'a i32> {\n+}\n+\n+#[rustc_error]\n+fn main() { } //[ok]~ ERROR compilation successful"}, {"sha": "0b4a9bf58a66c6af56abd9043d0c084eba46aadf", "filename": "src/test/compile-fail/associated-types/bound-lifetime-in-return-only.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfb74e800eff83f316f55ecae337569d7e83ee4/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-return-only.rs?ref=ccfb74e800eff83f316f55ecae337569d7e83ee4", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: sig local structure ok elision\n+\n+#![allow(dead_code)]\n+#![feature(rustc_attrs)]\n+#![feature(unboxed_closures)]\n+#![deny(hr_lifetime_in_assoc_type)]\n+\n+trait Foo {\n+    type Item;\n+}\n+\n+#[cfg(sig)]\n+fn sig1(_: for<'a> fn() -> &'a i32) {\n+    //[sig]~^ ERROR return type references lifetime `'a`\n+    //[sig]~| WARNING previously accepted\n+}\n+\n+#[cfg(sig)]\n+fn sig2(_: for<'a, 'b> fn(&'b i32) -> &'a i32) {\n+    //[sig]~^ ERROR return type references lifetime `'a`\n+    //[sig]~| WARNING previously accepted\n+}\n+\n+#[cfg(local)]\n+fn local1() {\n+    let _: for<'a> fn() -> &'a i32 = loop { };\n+    //[local]~^ ERROR return type references lifetime `'a`\n+    //[local]~| WARNING previously accepted\n+}\n+\n+#[cfg(structure)]\n+struct Struct1 {\n+    x: for<'a> fn() -> &'a i32\n+    //[structure]~^ ERROR return type references lifetime `'a`\n+    //[structure]~| WARNING previously accepted\n+}\n+\n+#[cfg(elision)]\n+fn elision(_: fn() -> &i32) {\n+    //[elision]~^ ERROR E0106\n+}\n+\n+struct Parameterized<'a> { x: &'a str }\n+\n+#[cfg(ok)]\n+fn ok1(_: &for<'a> Fn(&Parameterized<'a>) -> &'a i32) {\n+}\n+\n+#[cfg(ok)]\n+fn ok2(_: &for<'a,'b> Fn<(&'b Parameterized<'a>,), Output=&'a i32>) {\n+}\n+\n+#[rustc_error]\n+fn main() { } //[ok]~ ERROR compilation successful"}]}