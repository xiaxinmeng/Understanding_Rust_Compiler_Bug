{"sha": "665ea963d3c29ef7670662707f2f2307f000efa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NWVhOTYzZDNjMjllZjc2NzA2NjI3MDdmMmYyMzA3ZjAwMGVmYTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T03:00:20Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T03:42:28Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "9281d6d03436f1c92585c191a7a130d38e1ff9f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9281d6d03436f1c92585c191a7a130d38e1ff9f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/665ea963d3c29ef7670662707f2f2307f000efa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/665ea963d3c29ef7670662707f2f2307f000efa3", "html_url": "https://github.com/rust-lang/rust/commit/665ea963d3c29ef7670662707f2f2307f000efa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/665ea963d3c29ef7670662707f2f2307f000efa3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "html_url": "https://github.com/rust-lang/rust/commit/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89"}], "stats": {"total": 129, "additions": 65, "deletions": 64}, "files": [{"sha": "abd9af1af33a097e805f0b64cba83d0ccbbc6cdf", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -343,7 +343,7 @@ trait ConvertTo<Output> {\n }\n \n impl ConvertTo<i64> for i32 {\n-    fn convert(&self) -> i64 { *self as i32 }\n+    fn convert(&self) -> i64 { *self as i64 }\n }\n \n // can be called with T == i32"}, {"sha": "93218aed36673e961bf497241f466649b15a3272", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! RingBuf is a double-ended queue, which is implemented with the help of a growing circular buffer.\n+//! RingBuf is a double-ended queue, which is implemented with the help of a\n+//! growing circular buffer.\n //!\n-//! This queue has `O(1)` amortized inserts and removals from both ends of the container. It also\n-//! has `O(1)` indexing like a vector. The contained elements are not required to be copyable, and\n-//! the queue will be sendable if the contained type is sendable.\n+//! This queue has `O(1)` amortized inserts and removals from both ends of the\n+//! container. It also has `O(1)` indexing like a vector. The contained elements\n+//! are not required to be copyable, and the queue will be sendable if the\n+//! contained type is sendable.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -115,7 +117,8 @@ impl<T> RingBuf<T> {\n     #[inline]\n     fn is_full(&self) -> bool { self.cap - self.len() == 1 }\n \n-    /// Returns the index in the underlying buffer for a given logical element index.\n+    /// Returns the index in the underlying buffer for a given logical element\n+    /// index.\n     #[inline]\n     fn wrap_index(&self, idx: usize) -> usize { wrap_index(idx, self.cap) }\n "}, {"sha": "ac91a0098ea75bf20b7ed1f0ef633b200a2e9c14", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -764,7 +764,7 @@ fn parse_crate_attrs(sess: &Session, input: &Input) ->\n ///\n /// The diagnostic emitter yielded to the procedure should be used for reporting\n /// errors of the compiler.\n-pub fn monitor<F:FnOnce()+Send>(f: F) {\n+pub fn monitor<F:FnOnce()+Send+'static>(f: F) {\n     static STACK_SIZE: uint = 8 * 1024 * 1024; // 8MB\n \n     let (tx, rx) = channel();"}, {"sha": "207d3d39167660b929225e667725357d166a1b63", "filename": "src/libstd/old_io/comm_adapters.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -234,10 +234,7 @@ mod test {\n         writer.write_be_u32(42).unwrap();\n \n         let wanted = vec![0u8, 0u8, 0u8, 42u8];\n-        let got = match thread::spawn(move|| { rx.recv().unwrap() }).join() {\n-            Ok(got) => got,\n-            Err(_) => panic!(),\n-        };\n+        let got = thread::scoped(move|| { rx.recv().unwrap() }).join();\n         assert_eq!(wanted, got);\n \n         match writer.write_u8(1) {"}, {"sha": "440d17cfd50f7df4daac853d8980dd64724861be", "filename": "src/libstd/old_path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibstd%2Fold_path%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibstd%2Fold_path%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fposix.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -520,7 +520,7 @@ mod tests {\n     fn test_null_byte() {\n         use thread;\n         let result = thread::spawn(move|| {\n-            Path::new(b\"foo/bar\\0\")\n+            Path::new(b\"foo/bar\\0\");\n         }).join();\n         assert!(result.is_err());\n "}, {"sha": "07c5e10992b636c2efd20c85e19cefd5d46c2f78", "filename": "src/libstd/old_path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibstd%2Fold_path%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibstd%2Fold_path%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fwindows.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -1307,7 +1307,7 @@ mod tests {\n     fn test_null_byte() {\n         use thread;\n         let result = thread::spawn(move|| {\n-            Path::new(b\"foo/bar\\0\")\n+            Path::new(b\"foo/bar\\0\");\n         }).join();\n         assert!(result.is_err());\n "}, {"sha": "b8d157d341e031e7b353d6a34207543baa018315", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -425,8 +425,8 @@ mod tests {\n     #[test]\n     fn frob() {\n         static R: StaticRwLock = RW_LOCK_INIT;\n-        static N: uint = 10;\n-        static M: uint = 1000;\n+        static N: usize = 10;\n+        static M: usize = 1000;\n \n         let (tx, rx) = channel::<()>();\n         for _ in 0..N {\n@@ -452,7 +452,7 @@ mod tests {\n     fn test_rw_arc_poison_wr() {\n         let arc = Arc::new(RwLock::new(1));\n         let arc2 = arc.clone();\n-        let _: Result<uint, _> = thread::spawn(move|| {\n+        let _: Result<(), _> = thread::spawn(move|| {\n             let _lock = arc2.write().unwrap();\n             panic!();\n         }).join();\n@@ -464,7 +464,7 @@ mod tests {\n         let arc = Arc::new(RwLock::new(1));\n         assert!(!arc.is_poisoned());\n         let arc2 = arc.clone();\n-        let _: Result<uint, _> = thread::spawn(move|| {\n+        let _: Result<(), _> = thread::spawn(move|| {\n             let _lock = arc2.write().unwrap();\n             panic!();\n         }).join();\n@@ -476,7 +476,7 @@ mod tests {\n     fn test_rw_arc_no_poison_rr() {\n         let arc = Arc::new(RwLock::new(1));\n         let arc2 = arc.clone();\n-        let _: Result<uint, _> = thread::spawn(move|| {\n+        let _: Result<(), _> = thread::spawn(move|| {\n             let _lock = arc2.read().unwrap();\n             panic!();\n         }).join();\n@@ -487,7 +487,7 @@ mod tests {\n     fn test_rw_arc_no_poison_rw() {\n         let arc = Arc::new(RwLock::new(1));\n         let arc2 = arc.clone();\n-        let _: Result<uint, _> = thread::spawn(move|| {\n+        let _: Result<(), _> = thread::spawn(move|| {\n             let _lock = arc2.read().unwrap();\n             panic!()\n         }).join();"}, {"sha": "3137d779c4071c24cee2bfe723f79de99713b3f4", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -260,7 +260,7 @@ impl Builder {\n         T: Send + 'a, F: FnOnce() -> T, F: Send + 'a\n     {\n         self.spawn_inner(Thunk::new(f)).map(|inner| {\n-            JoinGuard { inner: inner, _marker: marker::PhantomData }\n+            JoinGuard { inner: inner, _marker: marker::CovariantType }\n         })\n     }\n \n@@ -642,7 +642,7 @@ impl Drop for JoinHandle {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct JoinGuard<'a, T: 'a> {\n     inner: JoinInner<T>,\n-    _marker: marker::PhantomData<&'a T>,\n+    _marker: marker::CovariantType<&'a T>,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -686,7 +686,9 @@ impl<T: Send> JoinGuard<'static, T> {\n impl<'a, T: Send + 'a> Drop for JoinGuard<'a, T> {\n     fn drop(&mut self) {\n         if !self.inner.joined {\n-            unsafe { imp::join(self.inner.native) };\n+            if self.inner.join().is_err() {\n+                panic!(\"child thread {:?} panicked\", self.thread());\n+            }\n         }\n     }\n }\n@@ -700,7 +702,8 @@ mod test {\n     use boxed::BoxAny;\n     use result;\n     use std::old_io::{ChanReader, ChanWriter};\n-    use super::{self, Thread, Builder};\n+    use super::{Thread, Builder};\n+    use thread;\n     use thunk::Thunk;\n     use time::Duration;\n \n@@ -718,7 +721,7 @@ mod test {\n     fn test_named_thread() {\n         Builder::new().name(\"ada lovelace\".to_string()).scoped(move|| {\n             assert!(thread::current().name().unwrap() == \"ada lovelace\".to_string());\n-        }).join().ok().unwrap();\n+        }).unwrap().join();\n     }\n \n     #[test]\n@@ -732,12 +735,9 @@ mod test {\n \n     #[test]\n     fn test_join_success() {\n-        match thread::spawn(move|| -> String {\n+        assert!(thread::scoped(move|| -> String {\n             \"Success!\".to_string()\n-        }).join().as_ref().map(|s| &**s) {\n-            result::Result::Ok(\"Success!\") => (),\n-            _ => panic!()\n-        }\n+        }).join() == \"Success!\");\n     }\n \n     #[test]\n@@ -928,10 +928,9 @@ mod test {\n         let mut reader = ChanReader::new(rx);\n         let stdout = ChanWriter::new(tx);\n \n-        let r = Builder::new().stdout(box stdout as Box<Writer + Send>).scoped(move|| {\n+        Builder::new().stdout(box stdout as Box<Writer + Send>).scoped(move|| {\n             print!(\"Hello, world!\");\n-        }).join();\n-        assert!(r.is_ok());\n+        }).unwrap().join();\n \n         let output = reader.read_to_string().unwrap();\n         assert_eq!(output, \"Hello, world!\".to_string());"}, {"sha": "01220e7bc1fe1d0baf0460af5dab84a342b94e4a", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -84,7 +84,7 @@ macro_rules! __scoped_thread_local_inner {\n                            target_os = \"openbsd\",\n                            target_arch = \"aarch64\")),\n                    thread_local)]\n-        static $name: ::std::thread_local::spawn::Key<$t> =\n+        static $name: ::std::thread_local::scoped::Key<$t> =\n             __scoped_thread_local_inner!($t);\n     );\n     (pub static $name:ident: $t:ty) => (\n@@ -94,19 +94,19 @@ macro_rules! __scoped_thread_local_inner {\n                            target_os = \"openbsd\",\n                            target_arch = \"aarch64\")),\n                    thread_local)]\n-        pub static $name: ::std::thread_local::spawn::Key<$t> =\n+        pub static $name: ::std::thread_local::scoped::Key<$t> =\n             __scoped_thread_local_inner!($t);\n     );\n     ($t:ty) => ({\n-        use std::thread_local::spawn::Key as __Key;\n+        use std::thread_local::scoped::Key as __Key;\n \n         #[cfg(not(any(windows,\n                       target_os = \"android\",\n                       target_os = \"ios\",\n                       target_os = \"openbsd\",\n                       target_arch = \"aarch64\")))]\n         const _INIT: __Key<$t> = __Key {\n-            inner: ::std::thread_local::spawn::__impl::KeyInner {\n+            inner: ::std::thread_local::scoped::__impl::KeyInner {\n                 inner: ::std::cell::UnsafeCell { value: 0 as *mut _ },\n             }\n         };\n@@ -117,8 +117,8 @@ macro_rules! __scoped_thread_local_inner {\n                   target_os = \"openbsd\",\n                   target_arch = \"aarch64\"))]\n         const _INIT: __Key<$t> = __Key {\n-            inner: ::std::thread_local::spawn::__impl::KeyInner {\n-                inner: ::std::thread_local::spawn::__impl::OS_INIT,\n+            inner: ::std::thread_local::scoped::__impl::KeyInner {\n+                inner: ::std::thread_local::scoped::__impl::OS_INIT,\n                 marker: ::std::marker::InvariantType,\n             }\n         };"}, {"sha": "1e23da3020f277b7262145bab28a0c3216e010a5", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -41,7 +41,7 @@\n extern crate arena;\n \n use std::iter::range_step;\n-use std::thread::{Thread, JoinGuard};\n+use std::thread;\n use arena::TypedArena;\n \n struct Tree<'a> {\n@@ -110,11 +110,11 @@ fn main() {\n     let messages = range_step(min_depth, max_depth + 1, 2).map(|depth| {\n         use std::num::Int;\n         let iterations = 2.pow((max_depth - depth + min_depth) as usize);\n-        thread::spawn(move || inner(depth, iterations))\n+        thread::scoped(move || inner(depth, iterations))\n     }).collect::<Vec<_>>();\n \n     for message in messages {\n-        println!(\"{}\", message.join().ok().unwrap());\n+        println!(\"{}\", message.join());\n     }\n \n     println!(\"long lived tree of depth {}\\t check: {}\","}, {"sha": "f7de935d08fdd3b67fcfc13d264a66154d48a8bf", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -164,15 +164,15 @@ fn fannkuch(n: i32) -> (i32, i32) {\n     for (_, j) in (0..N).zip(iter::count(0, k)) {\n         let max = cmp::min(j+k, perm.max());\n \n-        futures.push(thread::spawn(move|| {\n+        futures.push(thread::scoped(move|| {\n             work(perm, j as uint, max as uint)\n         }))\n     }\n \n     let mut checksum = 0;\n     let mut maxflips = 0;\n     for fut in futures {\n-        let (cs, mf) = fut.join().ok().unwrap();\n+        let (cs, mf) = fut.join();\n         checksum += cs;\n         maxflips = cmp::max(maxflips, mf);\n     }"}, {"sha": "b5c460737b86cbdf71149c152d310d35636c34e3", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -303,17 +303,17 @@ fn main() {\n \n     let nb_freqs: Vec<_> = (1u..3).map(|i| {\n         let input = input.clone();\n-        (i, thread::spawn(move|| generate_frequencies(&input, i)))\n+        (i, thread::scoped(move|| generate_frequencies(&input, i)))\n     }).collect();\n     let occ_freqs: Vec<_> = OCCURRENCES.iter().map(|&occ| {\n         let input = input.clone();\n-        thread::spawn(move|| generate_frequencies(&input, occ.len()))\n+        thread::scoped(move|| generate_frequencies(&input, occ.len()))\n     }).collect();\n \n     for (i, freq) in nb_freqs {\n-        print_frequencies(&freq.join().ok().unwrap(), i);\n+        print_frequencies(&freq.join(), i);\n     }\n     for (&occ, freq) in OCCURRENCES.iter().zip(occ_freqs.into_iter()) {\n-        print_occurrences(&mut freq.join().ok().unwrap(), occ);\n+        print_occurrences(&mut freq.join(), occ);\n     }\n }"}, {"sha": "bddf615322816d40e1212465d46b01e9d2503be0", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -81,7 +81,7 @@ fn mandelbrot<W: old_io::Writer>(w: usize, mut out: W) -> old_io::IoResult<()> {\n     let mut precalc_i = Vec::with_capacity(h);\n \n     let precalc_futures = (0..WORKERS).map(|i| {\n-        thread::spawn(move|| {\n+        thread::scoped(move|| {\n             let mut rs = Vec::with_capacity(w / WORKERS);\n             let mut is = Vec::with_capacity(w / WORKERS);\n \n@@ -107,7 +107,7 @@ fn mandelbrot<W: old_io::Writer>(w: usize, mut out: W) -> old_io::IoResult<()> {\n     }).collect::<Vec<_>>();\n \n     for res in precalc_futures {\n-        let (rs, is) = res.join().ok().unwrap();\n+        let (rs, is) = res.join();\n         precalc_r.extend(rs.into_iter());\n         precalc_i.extend(is.into_iter());\n     }\n@@ -122,7 +122,7 @@ fn mandelbrot<W: old_io::Writer>(w: usize, mut out: W) -> old_io::IoResult<()> {\n         let vec_init_r = arc_init_r.clone();\n         let vec_init_i = arc_init_i.clone();\n \n-        thread::spawn(move|| {\n+        thread::scoped(move|| {\n             let mut res: Vec<u8> = Vec::with_capacity((chunk_size * w) / 8);\n             let init_r_slice = vec_init_r;\n \n@@ -143,7 +143,7 @@ fn mandelbrot<W: old_io::Writer>(w: usize, mut out: W) -> old_io::IoResult<()> {\n \n     try!(writeln!(&mut out as &mut Writer, \"P4\\n{} {}\", w, h));\n     for res in data {\n-        try!(out.write(&res.join().ok().unwrap()));\n+        try!(out.write(&res.join()));\n     }\n     out.flush()\n }"}, {"sha": "abbcd7e45904f1b1170d897654462056bd8d6fc7", "filename": "src/test/compile-fail/send-is-not-static-ensures-scoping.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Fcompile-fail%2Fsend-is-not-static-ensures-scoping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Fcompile-fail%2Fsend-is-not-static-ensures-scoping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsend-is-not-static-ensures-scoping.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -8,18 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core, std_misc)]\n-use std::thread::Thread;\n+use std::thread;\n \n fn main() {\n     let bad = {\n         let x = 1;\n         let y = &x;\n \n-        Thread::scoped(|| { //~ ERROR cannot infer an appropriate lifetime\n+        thread::scoped(|| { //~ ERROR cannot infer an appropriate lifetime\n             let _z = y;\n         })\n     };\n \n-    bad.join().ok().unwrap();\n+    bad.join();\n }"}, {"sha": "79964d2a7bacab9ad9fa7b4cc63ebd28cdc08115", "filename": "src/test/pretty/attr-fn-inner.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Fpretty%2Fattr-fn-inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Fpretty%2Fattr-fn-inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-fn-inner.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -13,6 +13,8 @@\n // preserved, and that the first outer item parsed in main is not\n // accidentally carried over to each inner function\n \n+#![feature(custom_attribute)]\n+\n fn main() {\n     #![inner_attr]\n     #[outer_attr]"}, {"sha": "12c72d54c094b54b04e372a2604e28b88fbb0fb3", "filename": "src/test/run-make/static-unwinding/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Flib.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -10,7 +10,7 @@\n \n #![crate_type = \"rlib\"]\n \n-pub static mut statik: int = 0;\n+pub static mut statik: isize = 0;\n \n struct A;\n impl Drop for A {"}, {"sha": "d325f54d36515bc5622fb4aa6e6b33a75a876d9f", "filename": "src/test/run-make/static-unwinding/main.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -10,9 +10,9 @@\n \n extern crate lib;\n \n-use std::thread::Thread;\n+use std::thread;\n \n-static mut statik: int = 0;\n+static mut statik: isize = 0;\n \n struct A;\n impl Drop for A {\n@@ -22,10 +22,9 @@ impl Drop for A {\n }\n \n fn main() {\n-    Thread::scoped(move|| {\n+    thread::spawn(move|| {\n         let _a = A;\n         lib::callback(|| panic!());\n-        1\n     }).join().err().unwrap();\n \n     unsafe {"}, {"sha": "d52c645730f4532f873dc9bd70324700baf4a7df", "filename": "src/test/run-pass/drop-trait-enum.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ea963d3c29ef7670662707f2f2307f000efa3/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs?ref=665ea963d3c29ef7670662707f2f2307f000efa3", "patch": "@@ -11,7 +11,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-use std::thread::Thread;\n+use std::thread;\n use std::sync::mpsc::{channel, Sender};\n \n #[derive(PartialEq, Debug)]\n@@ -69,15 +69,16 @@ pub fn main() {\n     assert_eq!(receiver.recv().ok(), None);\n \n     let (sender, receiver) = channel();\n-    let _t = Thread::scoped(move|| {\n+    let t = thread::spawn(move|| {\n         let v = Foo::FailingVariant { on_drop: SendOnDrop { sender: sender } };\n     });\n     assert_eq!(receiver.recv().unwrap(), Message::Dropped);\n     assert_eq!(receiver.recv().ok(), None);\n+    drop(t.join());\n \n     let (sender, receiver) = channel();\n-    let _t = {\n-        Thread::scoped(move|| {\n+    let t = {\n+        thread::spawn(move|| {\n             let mut v = Foo::NestedVariant(box 42u, SendOnDrop {\n                 sender: sender.clone()\n             }, sender.clone());\n@@ -93,4 +94,5 @@ pub fn main() {\n     assert_eq!(receiver.recv().unwrap(), Message::DestructorRan);\n     assert_eq!(receiver.recv().unwrap(), Message::Dropped);\n     assert_eq!(receiver.recv().ok(), None);\n+    drop(t.join());\n }"}]}