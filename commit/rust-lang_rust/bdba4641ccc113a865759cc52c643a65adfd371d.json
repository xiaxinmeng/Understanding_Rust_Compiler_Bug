{"sha": "bdba4641ccc113a865759cc52c643a65adfd371d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYmE0NjQxY2NjMTEzYTg2NTc1OWNjNTJjNjQzYTY1YWRmZDM3MWQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-05T02:33:41Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-05T02:33:41Z"}, "message": "Rearrange code in memory.rs.", "tree": {"sha": "f1d1412e41972a9760d84124809dd7001e94633b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1d1412e41972a9760d84124809dd7001e94633b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdba4641ccc113a865759cc52c643a65adfd371d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdba4641ccc113a865759cc52c643a65adfd371d", "html_url": "https://github.com/rust-lang/rust/commit/bdba4641ccc113a865759cc52c643a65adfd371d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdba4641ccc113a865759cc52c643a65adfd371d/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "682742c223f442b883520962765fd06e33be482b", "url": "https://api.github.com/repos/rust-lang/rust/commits/682742c223f442b883520962765fd06e33be482b", "html_url": "https://github.com/rust-lang/rust/commit/682742c223f442b883520962765fd06e33be482b"}], "stats": {"total": 80, "additions": 39, "deletions": 41}, "files": [{"sha": "ccb9396e95e69eba609b087829e0cc816036d162", "filename": "src/memory.rs", "status": "modified", "additions": 39, "deletions": 41, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/bdba4641ccc113a865759cc52c643a65adfd371d/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdba4641ccc113a865759cc52c643a65adfd371d/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=bdba4641ccc113a865759cc52c643a65adfd371d", "patch": "@@ -7,47 +7,9 @@ use std::ptr;\n use error::{EvalError, EvalResult};\n use primval::PrimVal;\n \n-#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-pub struct AllocId(u64);\n-\n-#[derive(Debug)]\n-pub struct Allocation {\n-    pub bytes: Box<[u8]>,\n-    pub relocations: BTreeMap<usize, AllocId>,\n-\n-    /// Stores a list of indices `[a_0, a_1, ..., a_n]`. Bytes in the range `0..a_0` are considered\n-    /// defined, `a_0..a_1` are undefined, `a_1..a_2` are defined and so on until\n-    /// `a_n..bytes.len()`. These ranges are all end-exclusive.\n-    ///\n-    /// In general a byte's definedness can be found by binary searching this list of indices,\n-    /// finding where the byte would fall, and taking the position of nearest index mod 2. This\n-    /// yields 0 for defined and 1 for undefined.\n-    ///\n-    /// Some noteworthy cases:\n-    ///   * `[]` represents a fully-defined allocation.\n-    ///   * `[0]` represents a fully-undefined allocation. (The empty `0..0` is defined and\n-    ///     `0..bytes.len()` is undefined.)\n-    ///   * However, to avoid allocation, fully-undefined allocations can be represented as `None`.\n-    pub undef_mask: Option<Vec<usize>>,\n-}\n-\n-#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-pub struct Pointer {\n-    pub alloc_id: AllocId,\n-    pub offset: usize,\n-}\n-\n-impl Pointer {\n-    pub fn offset(self, i: isize) -> Self {\n-        Pointer { offset: (self.offset as isize + i) as usize, ..self }\n-    }\n-}\n-\n-#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-pub struct FieldRepr {\n-    pub offset: usize,\n-    pub size: usize,\n-}\n+////////////////////////////////////////////////////////////////////////////////\n+// Value representations\n+////////////////////////////////////////////////////////////////////////////////\n \n #[derive(Clone, Debug, Eq, PartialEq)]\n pub enum Repr {\n@@ -77,6 +39,12 @@ pub enum Repr {\n     },\n }\n \n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+pub struct FieldRepr {\n+    pub offset: usize,\n+    pub size: usize,\n+}\n+\n impl Repr {\n     pub fn size(&self) -> usize {\n         match *self {\n@@ -87,6 +55,36 @@ impl Repr {\n     }\n }\n \n+////////////////////////////////////////////////////////////////////////////////\n+// Allocations and pointers\n+////////////////////////////////////////////////////////////////////////////////\n+\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+pub struct AllocId(u64);\n+\n+#[derive(Debug)]\n+pub struct Allocation {\n+    pub bytes: Box<[u8]>,\n+    pub relocations: BTreeMap<usize, AllocId>,\n+    pub undef_mask: Option<Vec<usize>>,\n+}\n+\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+pub struct Pointer {\n+    pub alloc_id: AllocId,\n+    pub offset: usize,\n+}\n+\n+impl Pointer {\n+    pub fn offset(self, i: isize) -> Self {\n+        Pointer { offset: (self.offset as isize + i) as usize, ..self }\n+    }\n+}\n+\n+////////////////////////////////////////////////////////////////////////////////\n+// Top-level interpreter memory\n+////////////////////////////////////////////////////////////////////////////////\n+\n pub struct Memory {\n     alloc_map: HashMap<u64, Allocation>,\n     next_id: u64,"}]}