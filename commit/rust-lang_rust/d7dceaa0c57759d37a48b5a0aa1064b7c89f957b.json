{"sha": "d7dceaa0c57759d37a48b5a0aa1064b7c89f957b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZGNlYWEwYzU3NzU5ZDM3YTQ4YjVhMGFhMTA2NGI3Yzg5Zjk1N2I=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-30T19:36:44Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-03T18:55:18Z"}, "message": "Account for missing turbofish in paths too", "tree": {"sha": "c791f12a94ff10558875a77b484d20320108290c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c791f12a94ff10558875a77b484d20320108290c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7dceaa0c57759d37a48b5a0aa1064b7c89f957b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7dceaa0c57759d37a48b5a0aa1064b7c89f957b", "html_url": "https://github.com/rust-lang/rust/commit/d7dceaa0c57759d37a48b5a0aa1064b7c89f957b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7dceaa0c57759d37a48b5a0aa1064b7c89f957b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c9f298a8bee9b1716b2e6fcdb8305c3f4874fc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9f298a8bee9b1716b2e6fcdb8305c3f4874fc6", "html_url": "https://github.com/rust-lang/rust/commit/6c9f298a8bee9b1716b2e6fcdb8305c3f4874fc6"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "4fbd36cfefc8229a3b1961a2acb2774e6bbfaa57", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d7dceaa0c57759d37a48b5a0aa1064b7c89f957b/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7dceaa0c57759d37a48b5a0aa1064b7c89f957b/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=d7dceaa0c57759d37a48b5a0aa1064b7c89f957b", "patch": "@@ -585,12 +585,51 @@ impl<'a> Parser<'a> {\n                         let early_return = vec![token::Eof];\n                         self.consume_tts(1, &modifiers[..], &early_return[..]);\n \n-                        if self.token.kind != token::OpenDelim(token::Paren) {\n-                            // We don't have `foo< bar >(`, so we rewind the parser and bail out.\n+                        if !&[\n+                            token::OpenDelim(token::Paren),\n+                            token::ModSep,\n+                        ].contains(&self.token.kind) {\n+                            // We don't have `foo< bar >(` or `foo< bar >::`, so we rewind the\n+                            // parser and bail out.\n                             mem::replace(self, snapshot.clone());\n                         }\n                     }\n-                    if self.token.kind == token::OpenDelim(token::Paren) {\n+                    if token::ModSep == self.token.kind {\n+                        // We have some certainty that this was a bad turbofish at this point.\n+                        // `foo< bar >::`\n+                        err.span_suggestion(\n+                            op_span.shrink_to_lo(),\n+                            msg,\n+                            \"::\".to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+\n+                        let snapshot = self.clone();\n+\n+                        self.bump(); // `::`\n+                        // Consume the rest of the likely `foo<bar>::new()` or return at `foo<bar>`.\n+                        match self.parse_expr() {\n+                            Ok(_) => {\n+                                // 99% certain that the suggestion is correct, continue parsing.\n+                                err.emit();\n+                                // FIXME: actually check that the two expressions in the binop are\n+                                // paths and resynthesize new fn call expression instead of using\n+                                // `ExprKind::Err` placeholder.\n+                                return Ok(Some(self.mk_expr(\n+                                    lhs.span.to(self.prev_span),\n+                                    ExprKind::Err,\n+                                    ThinVec::new(),\n+                                )));\n+                            }\n+                            Err(mut err) => {\n+                                err.cancel();\n+                                // Not entirely sure now, but we bubble the error up with the\n+                                // suggestion.\n+                                mem::replace(self, snapshot);\n+                                return Err(err);\n+                            }\n+                        }\n+                    } else if token::OpenDelim(token::Paren) == self.token.kind {\n                         // We have high certainty that this was a bad turbofish at this point.\n                         // `foo< bar >(`\n                         err.span_suggestion(\n@@ -601,14 +640,14 @@ impl<'a> Parser<'a> {\n                         );\n \n                         let snapshot = self.clone();\n+                        self.bump(); // `(`\n \n                         // Consume the fn call arguments.\n                         let modifiers = vec![\n                             (token::OpenDelim(token::Paren), 1),\n                             (token::CloseDelim(token::Paren), -1),\n                         ];\n                         let early_return = vec![token::Eof];\n-                        self.bump(); // `(`\n                         self.consume_tts(1, &modifiers[..], &early_return[..]);\n \n                         if self.token.kind == token::Eof {"}, {"sha": "5e3771002b685e1f4af23a33b308d6317609b3e6", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7dceaa0c57759d37a48b5a0aa1064b7c89f957b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7dceaa0c57759d37a48b5a0aa1064b7c89f957b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=d7dceaa0c57759d37a48b5a0aa1064b7c89f957b", "patch": "@@ -13,9 +13,10 @@ error: chained comparison operators require parentheses\n    |\n LL |     Vec<i32>::new();\n    |        ^^^^^\n+help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n    |\n-   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n-   = help: or use `(...)` if you meant to specify fn arguments\n+LL |     Vec::<i32>::new();\n+   |        ^^\n \n error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:12:20"}]}