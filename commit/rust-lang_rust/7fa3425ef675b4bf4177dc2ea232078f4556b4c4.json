{"sha": "7fa3425ef675b4bf4177dc2ea232078f4556b4c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYTM0MjVlZjY3NWI0YmY0MTc3ZGMyZWEyMzIwNzhmNDU1NmI0YzQ=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-08T15:16:26Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-18T02:06:56Z"}, "message": "Setup a different visit place set of methods for mutable and immutable visitors\n\nIn particular, use a blank visit_place for mutable visitor to be sure,\nnon modified visitors are not trying to mutating place.", "tree": {"sha": "8c052e37f1cc634fd1449d7fc3e3a2915ffe247e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c052e37f1cc634fd1449d7fc3e3a2915ffe247e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fa3425ef675b4bf4177dc2ea232078f4556b4c4", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl2pHkAACgkQiMlBzaHU\nZDKVnhAAkfiEujVrg1pR5GL6vcMrli/UPK4VHksBa4Ob7XStE08UoVnwG1Rg/B7Q\nzCm2xRFT8SouyfvDs+x5hnhrzecCGqX4OdqtQtNDOy6QxvysfxY4Z3K9trfA04LQ\neUtt3VZYpHMpA7POLMMJhUEcPDyVoWymPhOnkKLF+Uxz8az4/KbLT6lL+JsBQRap\nJAcdBMCEMiVI6E7LjQx6SqY9ArG4KFmrQ52E0lmTdl0iiWe+BAbd1YI3VRu31qvl\nNoDAbW9B3oI2ghA94evFdssDGaUJURWHrXXSW18DHLl9EegHQHG60VggZ1OZn0mK\nKxeJ4nEiQQrQV3t9i9V/HWVrhRZosLWHWTjv4e7NcT5glOffruFTTzd5EaCA2J8B\nZ9Ucdx+jokvX/+fLY+EWk34udXe3P994zJ733Am76m3LdzMiQ41tNzIGEZgzxNwu\n7VSfwwFTFXYF+MgwLLCM/NhADJ68uEvj+A4RXDo+FtzxTuEboF34sZCw2xWAsmNZ\nZthRD34cHhmkQ47lJDNIQRRrLCPSC4KOlbXw4Q5SVRuiQjEtCACFVYPFPVFsd4Oz\nLxNDKJUwf1ONmbFdxFcyRGlF1i9KjtmjnNplaXS/1T3bOSEsF0AAZ7eJ/zZZHUgN\n1/esHANqsDtd5e65ii+fUigCzE90hI0J6mtw+hZkHOpp2hlK0bc=\n=Qeqb\n-----END PGP SIGNATURE-----", "payload": "tree 8c052e37f1cc634fd1449d7fc3e3a2915ffe247e\nparent 4f2a11036d085227e261824a1aa76dd752c84267\nauthor Santiago Pastorino <spastorino@gmail.com> 1570547786 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1571364416 -0400\n\nSetup a different visit place set of methods for mutable and immutable visitors\n\nIn particular, use a blank visit_place for mutable visitor to be sure,\nnon modified visitors are not trying to mutating place.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fa3425ef675b4bf4177dc2ea232078f4556b4c4", "html_url": "https://github.com/rust-lang/rust/commit/7fa3425ef675b4bf4177dc2ea232078f4556b4c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fa3425ef675b4bf4177dc2ea232078f4556b4c4/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f2a11036d085227e261824a1aa76dd752c84267", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2a11036d085227e261824a1aa76dd752c84267", "html_url": "https://github.com/rust-lang/rust/commit/4f2a11036d085227e261824a1aa76dd752c84267"}], "stats": {"total": 180, "additions": 103, "deletions": 77}, "files": [{"sha": "0fb43c7f98d162d891579719203a60bf813d33ff", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 103, "deletions": 77, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/7fa3425ef675b4bf4177dc2ea232078f4556b4c4/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa3425ef675b4bf4177dc2ea232078f4556b4c4/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=7fa3425ef675b4bf4177dc2ea232078f4556b4c4", "patch": "@@ -158,22 +158,7 @@ macro_rules! make_mir_visitor {\n                 self.super_place_base(base, context, location);\n             }\n \n-            fn visit_projection(&mut self,\n-                                base: & $($mutability)? PlaceBase<'tcx>,\n-                                projection: & $($mutability)? [PlaceElem<'tcx>],\n-                                context: PlaceContext,\n-                                location: Location) {\n-                self.super_projection(base, projection, context, location);\n-            }\n-\n-            fn visit_projection_elem(&mut self,\n-                                     base: & $($mutability)? PlaceBase<'tcx>,\n-                                     proj_base: & $($mutability)? [PlaceElem<'tcx>],\n-                                     elem: & $($mutability)? PlaceElem<'tcx>,\n-                                     context: PlaceContext,\n-                                     location: Location) {\n-                self.super_projection_elem(base, proj_base, elem, context, location);\n-            }\n+            visit_place_fns!($($mutability)?);\n \n             fn visit_constant(&mut self,\n                               constant: & $($mutability)? Constant<'tcx>,\n@@ -681,28 +666,6 @@ macro_rules! make_mir_visitor {\n                 );\n             }\n \n-            fn super_place(&mut self,\n-                            place: & $($mutability)? Place<'tcx>,\n-                            context: PlaceContext,\n-                            location: Location) {\n-                let mut context = context;\n-\n-                if !place.projection.is_empty() {\n-                    context = if context.is_mutating_use() {\n-                        PlaceContext::MutatingUse(MutatingUseContext::Projection)\n-                    } else {\n-                        PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n-                    };\n-                }\n-\n-                self.visit_place_base(& $($mutability)? place.base, context, location);\n-\n-                self.visit_projection(& $($mutability)? place.base,\n-                                      & $($mutability)? place.projection,\n-                                      context,\n-                                      location);\n-            }\n-\n             fn super_place_base(&mut self,\n                                 place_base: & $($mutability)? PlaceBase<'tcx>,\n                                 context: PlaceContext,\n@@ -717,45 +680,6 @@ macro_rules! make_mir_visitor {\n                 }\n             }\n \n-            fn super_projection(&mut self,\n-                                base: & $($mutability)? PlaceBase<'tcx>,\n-                                projection: & $($mutability)? [PlaceElem<'tcx>],\n-                                context: PlaceContext,\n-                                location: Location) {\n-                let mut cursor = projection;\n-                while let [proj_base @ .., elem] = cursor {\n-                    cursor = proj_base;\n-                    self.visit_projection_elem(base, cursor, elem, context, location);\n-                }\n-            }\n-\n-            fn super_projection_elem(&mut self,\n-                                     _base: & $($mutability)? PlaceBase<'tcx>,\n-                                     _proj_base: & $($mutability)? [PlaceElem<'tcx>],\n-                                     elem: & $($mutability)? PlaceElem<'tcx>,\n-                                     _context: PlaceContext,\n-                                     location: Location) {\n-                match elem {\n-                    ProjectionElem::Field(_field, ty) => {\n-                        self.visit_ty(ty, TyContext::Location(location));\n-                    }\n-                    ProjectionElem::Index(local) => {\n-                        self.visit_local(\n-                            local,\n-                            PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n-                            location\n-                        );\n-                    }\n-                    ProjectionElem::Deref |\n-                    ProjectionElem::Subslice { from: _, to: _ } |\n-                    ProjectionElem::ConstantIndex { offset: _,\n-                                                    min_length: _,\n-                                                    from_end: _ } |\n-                    ProjectionElem::Downcast(_, _) => {\n-                    }\n-                }\n-            }\n-\n             fn super_local_decl(&mut self,\n                                 local: Local,\n                                 local_decl: & $($mutability)? LocalDecl<'tcx>) {\n@@ -858,6 +782,108 @@ macro_rules! make_mir_visitor {\n     }\n }\n \n+macro_rules! visit_place_fns {\n+    (mut) => (\n+        fn super_place(\n+            &mut self,\n+            _place: &mut Place<'tcx>,\n+            _context: PlaceContext,\n+            _location: Location,\n+        ) {\n+        }\n+    );\n+\n+    () => (\n+        fn visit_projection(\n+            &mut self,\n+            base: &PlaceBase<'tcx>,\n+            projection: &[PlaceElem<'tcx>],\n+            context: PlaceContext,\n+            location: Location,\n+        ) {\n+            self.super_projection(base, projection, context, location);\n+        }\n+\n+        fn visit_projection_elem(\n+            &mut self,\n+            base: &PlaceBase<'tcx>,\n+            proj_base: &[PlaceElem<'tcx>],\n+            elem: &PlaceElem<'tcx>,\n+            context: PlaceContext,\n+            location: Location,\n+        ) {\n+            self.super_projection_elem(base, proj_base, elem, context, location);\n+        }\n+\n+        fn super_place(\n+            &mut self,\n+            place: &Place<'tcx>,\n+            context: PlaceContext,\n+            location: Location,\n+        ) {\n+            let mut context = context;\n+\n+            if !place.projection.is_empty() {\n+                context = if context.is_mutating_use() {\n+                    PlaceContext::MutatingUse(MutatingUseContext::Projection)\n+                } else {\n+                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n+                };\n+            }\n+\n+            self.visit_place_base(&place.base, context, location);\n+\n+            self.visit_projection(&place.base,\n+                                  &place.projection,\n+                                  context,\n+                                  location);\n+        }\n+\n+        fn super_projection(\n+            &mut self,\n+            base: &PlaceBase<'tcx>,\n+            projection: &[PlaceElem<'tcx>],\n+            context: PlaceContext,\n+            location: Location,\n+        ) {\n+            let mut cursor = projection;\n+            while let [proj_base @ .., elem] = cursor {\n+                cursor = proj_base;\n+                self.visit_projection_elem(base, cursor, elem, context, location);\n+            }\n+        }\n+\n+        fn super_projection_elem(\n+            &mut self,\n+            _base: &PlaceBase<'tcx>,\n+            _proj_base: &[PlaceElem<'tcx>],\n+            elem: &PlaceElem<'tcx>,\n+            _context: PlaceContext,\n+            location: Location,\n+        ) {\n+            match elem {\n+                ProjectionElem::Field(_field, ty) => {\n+                    self.visit_ty(ty, TyContext::Location(location));\n+                }\n+                ProjectionElem::Index(local) => {\n+                    self.visit_local(\n+                        local,\n+                        PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n+                        location\n+                    );\n+                }\n+                ProjectionElem::Deref |\n+                ProjectionElem::Subslice { from: _, to: _ } |\n+                ProjectionElem::ConstantIndex { offset: _,\n+                                                min_length: _,\n+                                                from_end: _ } |\n+                ProjectionElem::Downcast(_, _) => {\n+                }\n+            }\n+        }\n+    );\n+}\n+\n make_mir_visitor!(Visitor,);\n make_mir_visitor!(MutVisitor,mut);\n "}]}