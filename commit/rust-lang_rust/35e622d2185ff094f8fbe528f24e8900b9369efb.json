{"sha": "35e622d2185ff094f8fbe528f24e8900b9369efb", "node_id": "C_kwDOAAsO6NoAKDM1ZTYyMmQyMTg1ZmYwOTRmOGZiZTUyOGYyNGU4OTAwYjkzNjllZmI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-30T18:01:42Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-05T19:30:44Z"}, "message": "Do not keep extra references to scopes and decls.", "tree": {"sha": "955b1a882f01b1650dfd229f70b7c89ab93863b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/955b1a882f01b1650dfd229f70b7c89ab93863b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35e622d2185ff094f8fbe528f24e8900b9369efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35e622d2185ff094f8fbe528f24e8900b9369efb", "html_url": "https://github.com/rust-lang/rust/commit/35e622d2185ff094f8fbe528f24e8900b9369efb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35e622d2185ff094f8fbe528f24e8900b9369efb/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2b676d886ded452125712a304c524c08360f916", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b676d886ded452125712a304c524c08360f916", "html_url": "https://github.com/rust-lang/rust/commit/b2b676d886ded452125712a304c524c08360f916"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "63cd51af0ce0d4b15fda8219cbe045df337c823b", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/35e622d2185ff094f8fbe528f24e8900b9369efb/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e622d2185ff094f8fbe528f24e8900b9369efb/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=35e622d2185ff094f8fbe528f24e8900b9369efb", "patch": "@@ -9,7 +9,6 @@ use rustc_const_eval::interpret::{\n };\n use rustc_hir::def::DefKind;\n use rustc_hir::HirId;\n-use rustc_index::vec::IndexSlice;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::*;\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n@@ -130,8 +129,6 @@ struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>,\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n-    source_scopes: &'mir IndexSlice<SourceScope, SourceScopeData<'tcx>>,\n-    local_decls: &'mir IndexSlice<Local, LocalDecl<'tcx>>,\n     // Because we have `MutVisitor` we can't obtain the `SourceInfo` from a `Location`. So we store\n     // the last known `SourceInfo` here and just keep revisiting it.\n     source_info: Option<SourceInfo>,\n@@ -209,14 +206,15 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         )\n         .expect(\"failed to push initial stack frame\");\n \n-        ConstPropagator {\n-            ecx,\n-            tcx,\n-            param_env,\n-            source_scopes: &dummy_body.source_scopes,\n-            local_decls: &dummy_body.local_decls,\n-            source_info: None,\n-        }\n+        ConstPropagator { ecx, tcx, param_env, source_info: None }\n+    }\n+\n+    fn body(&self) -> &'mir Body<'tcx> {\n+        self.ecx.frame().body\n+    }\n+\n+    fn local_decls(&self) -> &'mir LocalDecls<'tcx> {\n+        &self.body().local_decls\n     }\n \n     fn get_const(&self, place: Place<'tcx>) -> Option<OpTy<'tcx>> {\n@@ -251,7 +249,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     fn lint_root(&self, source_info: SourceInfo) -> Option<HirId> {\n-        source_info.scope.lint_root(self.source_scopes)\n+        source_info.scope.lint_root(&self.body().source_scopes)\n     }\n \n     fn use_ecx<F, T>(&mut self, source_info: SourceInfo, f: F) -> Option<T>\n@@ -368,7 +366,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             let r = r.clone()?;\n             // We need the type of the LHS. We cannot use `place_layout` as that is the type\n             // of the result, which for checked binops is not the same!\n-            let left_ty = left.ty(self.local_decls, self.tcx);\n+            let left_ty = left.ty(self.local_decls(), self.tcx);\n             let left_size = self.ecx.layout_of(left_ty).ok()?.size;\n             let right_size = r.layout.size;\n             let r_bits = r.to_scalar().to_bits(right_size).ok();\n@@ -481,10 +479,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         if rvalue.needs_subst() {\n             return None;\n         }\n-        if !rvalue\n-            .ty(&self.ecx.frame().body.local_decls, *self.ecx.tcx)\n-            .is_sized(*self.ecx.tcx, self.param_env)\n-        {\n+        if !rvalue.ty(self.local_decls(), self.tcx).is_sized(self.tcx, self.param_env) {\n             // the interpreter doesn't support unsized locals (only unsized arguments),\n             // but rustc does (in a kinda broken way), so we have to skip them here\n             return None;\n@@ -498,7 +493,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             assert!(\n                 self.get_const(local.into()).is_none()\n                     || self\n-                        .layout_of(self.local_decls[local].ty)\n+                        .layout_of(self.local_decls()[local].ty)\n                         .map_or(true, |layout| layout.is_zst()),\n                 \"failed to remove values for `{local:?}`, value={:?}\",\n                 self.get_const(local.into()),"}]}