{"sha": "e15424c1b7d5a82545fbb3744af3123a124053d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNTQyNGMxYjdkNWE4MjU0NWZiYjM3NDRhZjMxMjNhMTI0MDUzZDU=", "commit": {"author": {"name": "nmio", "email": "kristo.koert@gmail.com", "date": "2020-02-29T13:05:10Z"}, "committer": {"name": "nmio", "email": "kristo.koert@gmail.com", "date": "2020-02-29T13:05:10Z"}, "message": "keep one CargoTomlNotFoundError", "tree": {"sha": "77e6c328767cc7f62657f2c1872d9403cced09bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77e6c328767cc7f62657f2c1872d9403cced09bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e15424c1b7d5a82545fbb3744af3123a124053d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e15424c1b7d5a82545fbb3744af3123a124053d5", "html_url": "https://github.com/rust-lang/rust/commit/e15424c1b7d5a82545fbb3744af3123a124053d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e15424c1b7d5a82545fbb3744af3123a124053d5/comments", "author": {"login": "not-much-io", "id": 5730578, "node_id": "MDQ6VXNlcjU3MzA1Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5730578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/not-much-io", "html_url": "https://github.com/not-much-io", "followers_url": "https://api.github.com/users/not-much-io/followers", "following_url": "https://api.github.com/users/not-much-io/following{/other_user}", "gists_url": "https://api.github.com/users/not-much-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/not-much-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/not-much-io/subscriptions", "organizations_url": "https://api.github.com/users/not-much-io/orgs", "repos_url": "https://api.github.com/users/not-much-io/repos", "events_url": "https://api.github.com/users/not-much-io/events{/privacy}", "received_events_url": "https://api.github.com/users/not-much-io/received_events", "type": "User", "site_admin": false}, "committer": {"login": "not-much-io", "id": 5730578, "node_id": "MDQ6VXNlcjU3MzA1Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5730578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/not-much-io", "html_url": "https://github.com/not-much-io", "followers_url": "https://api.github.com/users/not-much-io/followers", "following_url": "https://api.github.com/users/not-much-io/following{/other_user}", "gists_url": "https://api.github.com/users/not-much-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/not-much-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/not-much-io/subscriptions", "organizations_url": "https://api.github.com/users/not-much-io/orgs", "repos_url": "https://api.github.com/users/not-much-io/repos", "events_url": "https://api.github.com/users/not-much-io/events{/privacy}", "received_events_url": "https://api.github.com/users/not-much-io/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12b595e817b9cb47b3abb5ca4455e2ae9e95f58b", "url": "https://api.github.com/repos/rust-lang/rust/commits/12b595e817b9cb47b3abb5ca4455e2ae9e95f58b", "html_url": "https://github.com/rust-lang/rust/commit/12b595e817b9cb47b3abb5ca4455e2ae9e95f58b"}], "stats": {"total": 66, "additions": 37, "deletions": 29}, "files": [{"sha": "bcf12460d824a30f8663a0bd88b86e970744ab93", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e15424c1b7d5a82545fbb3744af3123a124053d5/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15424c1b7d5a82545fbb3744af3123a124053d5/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=e15424c1b7d5a82545fbb3744af3123a124053d5", "patch": "@@ -25,35 +25,23 @@ pub use crate::{\n };\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n-pub struct CargoTomlNoneFoundError(pub PathBuf);\n-\n-#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n-pub struct CargoTomlMultipleValidFoundError(pub Vec<PathBuf>);\n-\n-#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n-pub struct CargoTomlSearchFileSystemError(pub PathBuf, pub String);\n-\n-impl std::fmt::Display for CargoTomlNoneFoundError {\n-    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        write!(fmt, \"can't find Cargo.toml at {}\", self.0.display())\n-    }\n-}\n-\n-impl std::fmt::Display for CargoTomlMultipleValidFoundError {\n-    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        write!(fmt, \"found multiple valid Cargo.toml files {:?}\", self.0)\n-    }\n+pub struct CargoTomlNotFoundError {\n+    pub searched_at: PathBuf,\n+    pub reason: String,\n }\n \n-impl std::fmt::Display for CargoTomlSearchFileSystemError {\n+impl std::fmt::Display for CargoTomlNotFoundError {\n     fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        write!(fmt, \"a filesystem error occurred while searching for Cargo.toml: {}\", self.1)\n+        write!(\n+            fmt,\n+            \"can't find Cargo.toml at {}, due to {}\",\n+            self.searched_at.display(),\n+            self.reason\n+        )\n     }\n }\n \n-impl Error for CargoTomlNoneFoundError {}\n-impl Error for CargoTomlMultipleValidFoundError {}\n-impl Error for CargoTomlSearchFileSystemError {}\n+impl Error for CargoTomlNotFoundError {}\n \n #[derive(Debug, Clone)]\n pub enum ProjectWorkspace {\n@@ -452,8 +440,6 @@ fn find_cargo_toml_in_child_dir(entities: ReadDir) -> Vec<PathBuf> {\n }\n \n fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n-    let path_as_buf = path.to_path_buf();\n-\n     if path.ends_with(\"Cargo.toml\") {\n         return Ok(path.to_path_buf());\n     }\n@@ -464,14 +450,31 @@ fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n \n     let entities = match read_dir(path) {\n         Ok(entities) => entities,\n-        Err(e) => return Err(CargoTomlSearchFileSystemError(path_as_buf, e.to_string()).into()),\n+        Err(e) => {\n+            return Err(CargoTomlNotFoundError {\n+                searched_at: path.to_path_buf(),\n+                reason: format!(\"file system error: {}\", e),\n+            }\n+            .into());\n+        }\n     };\n \n     let mut valid_canditates = find_cargo_toml_in_child_dir(entities);\n     match valid_canditates.len() {\n         1 => Ok(valid_canditates.remove(0)),\n-        0 => Err(CargoTomlNoneFoundError(path_as_buf).into()),\n-        _ => Err(CargoTomlMultipleValidFoundError(valid_canditates).into()),\n+        0 => Err(CargoTomlNotFoundError {\n+            searched_at: path.to_path_buf(),\n+            reason: \"no Cargo.toml file found\".to_string(),\n+        }\n+        .into()),\n+        _ => Err(CargoTomlNotFoundError {\n+            searched_at: path.to_path_buf(),\n+            reason: format!(\n+                \"multiple equally valid Cargo.toml files found: {:?}\",\n+                valid_canditates\n+            ),\n+        }\n+        .into()),\n     }\n }\n "}, {"sha": "bcfeb6442afff5818cd5789a6b0be19fcd8a1cff", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e15424c1b7d5a82545fbb3744af3123a124053d5/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15424c1b7d5a82545fbb3744af3123a124053d5/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=e15424c1b7d5a82545fbb3744af3123a124053d5", "patch": "@@ -115,12 +115,17 @@ pub fn main_loop(\n                     Ok(workspace) => loaded_workspaces.push(workspace),\n                     Err(e) => {\n                         log::error!(\"loading workspace failed: {:?}\", e);\n-                        if let Some(ra_project_model::CargoTomlNoneFoundError(_)) = e.downcast_ref()\n+\n+                        if let Some(ra_project_model::CargoTomlNotFoundError {\n+                            searched_at: _,\n+                            reason: _,\n+                        }) = e.downcast_ref()\n                         {\n                             if !feature_flags.get(\"notifications.cargo-toml-not-found\") {\n                                 continue;\n                             }\n                         }\n+\n                         show_message(\n                             req::MessageType::Error,\n                             format!(\"rust-analyzer failed to load workspace: {:?}\", e),"}]}