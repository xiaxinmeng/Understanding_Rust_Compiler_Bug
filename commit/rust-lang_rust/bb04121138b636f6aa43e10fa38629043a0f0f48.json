{"sha": "bb04121138b636f6aa43e10fa38629043a0f0f48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMDQxMjExMzhiNjM2ZjZhYTQzZTEwZmEzODYyOTA0M2EwZjBmNDg=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-11T10:09:53Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-16T07:18:56Z"}, "message": "Don't use NoSend/NoSync in liballoc", "tree": {"sha": "a2ed347e2dfb1ebf6d31b7b8c39f53a1bb3e65f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2ed347e2dfb1ebf6d31b7b8c39f53a1bb3e65f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb04121138b636f6aa43e10fa38629043a0f0f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb04121138b636f6aa43e10fa38629043a0f0f48", "html_url": "https://github.com/rust-lang/rust/commit/bb04121138b636f6aa43e10fa38629043a0f0f48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb04121138b636f6aa43e10fa38629043a0f0f48/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "388e30f78e545deb798f8cd6192cf939e5d8342a", "url": "https://api.github.com/repos/rust-lang/rust/commits/388e30f78e545deb798f8cd6192cf939e5d8342a", "html_url": "https://github.com/rust-lang/rust/commit/388e30f78e545deb798f8cd6192cf939e5d8342a"}], "stats": {"total": 160, "additions": 160, "deletions": 0}, "files": [{"sha": "6c85330603514a0ea109774787be9f18397019b0", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb04121138b636f6aa43e10fa38629043a0f0f48/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb04121138b636f6aa43e10fa38629043a0f0f48/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=bb04121138b636f6aa43e10fa38629043a0f0f48", "patch": "@@ -68,6 +68,7 @@\n #![allow(unknown_features)]\n #![feature(lang_items, unsafe_destructor)]\n #![feature(box_syntax)]\n+#![feature(optin_builtin_traits)]\n #![allow(unknown_features)] #![feature(int_uint)]\n \n #[macro_use]"}, {"sha": "0e18cdda8dd894cb747c835240e9ef8c66f250a9", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/bb04121138b636f6aa43e10fa38629043a0f0f48/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb04121138b636f6aa43e10fa38629043a0f0f48/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=bb04121138b636f6aa43e10fa38629043a0f0f48", "patch": "@@ -174,6 +174,7 @@ struct RcBox<T> {\n /// See the [module level documentation](../index.html) for more details.\n #[unsafe_no_drop_flag]\n #[stable]\n+#[cfg(stage0)] // NOTE remove impl after next snapshot\n pub struct Rc<T> {\n     // FIXME #12808: strange names to try to avoid interfering with field accesses of the contained\n     // type via Deref\n@@ -182,6 +183,24 @@ pub struct Rc<T> {\n     _noshare: marker::NoSync\n }\n \n+/// An immutable reference-counted pointer type.\n+///\n+/// See the [module level documentation](../index.html) for more details.\n+#[unsafe_no_drop_flag]\n+#[stable]\n+#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n+pub struct Rc<T> {\n+    // FIXME #12808: strange names to try to avoid interfering with field accesses of the contained\n+    // type via Deref\n+    _ptr: NonZero<*mut RcBox<T>>,\n+}\n+\n+#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n+impl<T> !marker::Send for Rc<T> {}\n+\n+#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n+impl<T> !marker::Sync for Rc<T> {}\n+\n impl<T> Rc<T> {\n     /// Constructs a new `Rc<T>`.\n     ///\n@@ -193,6 +212,7 @@ impl<T> Rc<T> {\n     /// let five = Rc::new(5i);\n     /// ```\n     #[stable]\n+    #[cfg(stage0)] // NOTE remove after next snapshot\n     pub fn new(value: T) -> Rc<T> {\n         unsafe {\n             Rc {\n@@ -210,6 +230,32 @@ impl<T> Rc<T> {\n         }\n     }\n \n+    /// Constructs a new `Rc<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::rc::Rc;\n+    ///\n+    /// let five = Rc::new(5i);\n+    /// ```\n+    #[stable]\n+    #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n+    pub fn new(value: T) -> Rc<T> {\n+        unsafe {\n+            Rc {\n+                // there is an implicit weak pointer owned by all the strong pointers, which\n+                // ensures that the weak destructor never frees the allocation while the strong\n+                // destructor is running, even if the weak pointer is stored inside the strong one.\n+                _ptr: NonZero::new(transmute(box RcBox {\n+                    value: value,\n+                    strong: Cell::new(1),\n+                    weak: Cell::new(1)\n+                })),\n+            }\n+        }\n+    }\n+\n     /// Downgrades the `Rc<T>` to a `Weak<T>` reference.\n     ///\n     /// # Examples\n@@ -221,6 +267,7 @@ impl<T> Rc<T> {\n     ///\n     /// let weak_five = five.downgrade();\n     /// ```\n+    #[cfg(stage0)] // NOTE remove after next snapshot\n     #[unstable = \"Weak pointers may not belong in this module\"]\n     pub fn downgrade(&self) -> Weak<T> {\n         self.inc_weak();\n@@ -230,6 +277,24 @@ impl<T> Rc<T> {\n             _noshare: marker::NoSync\n         }\n     }\n+\n+    /// Downgrades the `Rc<T>` to a `Weak<T>` reference.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::rc::Rc;\n+    ///\n+    /// let five = Rc::new(5i);\n+    ///\n+    /// let weak_five = five.downgrade();\n+    /// ```\n+    #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n+    #[unstable = \"Weak pointers may not belong in this module\"]\n+    pub fn downgrade(&self) -> Weak<T> {\n+        self.inc_weak();\n+        Weak { _ptr: self._ptr }\n+    }\n }\n \n /// Get the number of weak references to this value.\n@@ -432,10 +497,31 @@ impl<T> Clone for Rc<T> {\n     /// five.clone();\n     /// ```\n     #[inline]\n+    #[cfg(stage0)] // NOTE remove after next snapshot\n     fn clone(&self) -> Rc<T> {\n         self.inc_strong();\n         Rc { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoSync }\n     }\n+\n+    /// Makes a clone of the `Rc<T>`.\n+    ///\n+    /// This increases the strong reference count.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::rc::Rc;\n+    ///\n+    /// let five = Rc::new(5i);\n+    ///\n+    /// five.clone();\n+    /// ```\n+    #[inline]\n+    #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n+    fn clone(&self) -> Rc<T> {\n+        self.inc_strong();\n+        Rc { _ptr: self._ptr }\n+    }\n }\n \n #[stable]\n@@ -636,6 +722,7 @@ impl<T: fmt::String> fmt::String for Rc<T> {\n /// See the [module level documentation](../index.html) for more.\n #[unsafe_no_drop_flag]\n #[unstable = \"Weak pointers may not belong in this module.\"]\n+#[cfg(stage0)] // NOTE remove impl after next snapshot\n pub struct Weak<T> {\n     // FIXME #12808: strange names to try to avoid interfering with\n     // field accesses of the contained type via Deref\n@@ -644,6 +731,29 @@ pub struct Weak<T> {\n     _noshare: marker::NoSync\n }\n \n+/// A weak version of `Rc<T>`.\n+///\n+/// Weak references do not count when determining if the inner value should be dropped.\n+///\n+/// See the [module level documentation](../index.html) for more.\n+#[unsafe_no_drop_flag]\n+#[unstable = \"Weak pointers may not belong in this module.\"]\n+#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n+pub struct Weak<T> {\n+    // FIXME #12808: strange names to try to avoid interfering with\n+    // field accesses of the contained type via Deref\n+    _ptr: NonZero<*mut RcBox<T>>,\n+}\n+\n+#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n+#[allow(unstable)]\n+impl<T> !marker::Send for Weak<T> {}\n+\n+#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n+#[allow(unstable)]\n+impl<T> !marker::Sync for Weak<T> {}\n+\n+\n #[unstable = \"Weak pointers may not belong in this module.\"]\n impl<T> Weak<T> {\n     /// Upgrades a weak reference to a strong reference.\n@@ -663,6 +773,7 @@ impl<T> Weak<T> {\n     ///\n     /// let strong_five: Option<Rc<_>> = weak_five.upgrade();\n     /// ```\n+    #[cfg(stage0)] // NOTE remove after next snapshot\n     pub fn upgrade(&self) -> Option<Rc<T>> {\n         if self.strong() == 0 {\n             None\n@@ -671,6 +782,33 @@ impl<T> Weak<T> {\n             Some(Rc { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoSync })\n         }\n     }\n+\n+    /// Upgrades a weak reference to a strong reference.\n+    ///\n+    /// Upgrades the `Weak<T>` reference to an `Rc<T>`, if possible.\n+    ///\n+    /// Returns `None` if there were no strong references and the data was destroyed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::rc::Rc;\n+    ///\n+    /// let five = Rc::new(5i);\n+    ///\n+    /// let weak_five = five.downgrade();\n+    ///\n+    /// let strong_five: Option<Rc<_>> = weak_five.upgrade();\n+    /// ```\n+    #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n+    pub fn upgrade(&self) -> Option<Rc<T>> {\n+        if self.strong() == 0 {\n+            None\n+        } else {\n+            self.inc_strong();\n+            Some(Rc { _ptr: self._ptr })\n+        }\n+    }\n }\n \n #[unsafe_destructor]\n@@ -733,10 +871,31 @@ impl<T> Clone for Weak<T> {\n     /// weak_five.clone();\n     /// ```\n     #[inline]\n+    #[cfg(stage0)] // NOTE remove after next snapshot\n     fn clone(&self) -> Weak<T> {\n         self.inc_weak();\n         Weak { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoSync }\n     }\n+\n+    /// Makes a clone of the `Weak<T>`.\n+    ///\n+    /// This increases the weak reference count.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::rc::Rc;\n+    ///\n+    /// let weak_five = Rc::new(5i).downgrade();\n+    ///\n+    /// weak_five.clone();\n+    /// ```\n+    #[inline]\n+    #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n+    fn clone(&self) -> Weak<T> {\n+        self.inc_weak();\n+        Weak { _ptr: self._ptr }\n+    }\n }\n \n #[unstable = \"Show is experimental.\"]"}]}