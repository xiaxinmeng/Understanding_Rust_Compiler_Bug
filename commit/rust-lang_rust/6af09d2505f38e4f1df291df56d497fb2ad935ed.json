{"sha": "6af09d2505f38e4f1df291df56d497fb2ad935ed", "node_id": "C_kwDOAAsO6NoAKDZhZjA5ZDI1MDVmMzhlNGYxZGYyOTFkZjU2ZDQ5N2ZiMmFkOTM1ZWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-03T21:22:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-03T21:22:50Z"}, "message": "Auto merge of #95624 - Dylan-DPC:rollup-r8w7ui3, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #95202 (Reduce the cost of loading all built-ins targets)\n - #95553 (Don't emit non-asm contents error for naked function composed of errors)\n - #95613 (Fix rustdoc attribute display)\n - #95617 (Fix &mut invalidation in ptr::swap doctest)\n - #95618 (core: document that the align_of* functions return the alignment in bytes)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b0006d75855880faca5257f11ff60d90505b9e93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0006d75855880faca5257f11ff60d90505b9e93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6af09d2505f38e4f1df291df56d497fb2ad935ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6af09d2505f38e4f1df291df56d497fb2ad935ed", "html_url": "https://github.com/rust-lang/rust/commit/6af09d2505f38e4f1df291df56d497fb2ad935ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6af09d2505f38e4f1df291df56d497fb2ad935ed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ad4eb207b369017f5140918b5e4b0d3650b46b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ad4eb207b369017f5140918b5e4b0d3650b46b0", "html_url": "https://github.com/rust-lang/rust/commit/2ad4eb207b369017f5140918b5e4b0d3650b46b0"}, {"sha": "1ea6e936106cbf93d8b32844f2d2598a599a89b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea6e936106cbf93d8b32844f2d2598a599a89b4", "html_url": "https://github.com/rust-lang/rust/commit/1ea6e936106cbf93d8b32844f2d2598a599a89b4"}], "stats": {"total": 2729, "additions": 1421, "deletions": 1308}, "files": [{"sha": "5e1e1c81d26ea368e61f234f4ea7dc03be3010af", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -304,8 +304,12 @@ pub(crate) fn run_aot(\n     };\n \n     // FIXME handle `-Ctarget-cpu=native`\n-    let target_cpu =\n-        tcx.sess.opts.cg.target_cpu.as_ref().unwrap_or(&tcx.sess.target.cpu).to_owned();\n+    let target_cpu = match tcx.sess.opts.cg.target_cpu {\n+        Some(ref name) => name,\n+        None => tcx.sess.target.cpu.as_ref(),\n+    }\n+    .to_owned();\n+\n     Box::new((\n         CodegenResults {\n             modules,"}, {"sha": "497a28354d813b837c378a3ae87b857c02768908", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -287,8 +287,10 @@ fn handle_native(name: &str) -> &str {\n }\n \n pub fn target_cpu(sess: &Session) -> &str {\n-    let name = sess.opts.cg.target_cpu.as_ref().unwrap_or(&sess.target.cpu);\n-    handle_native(name)\n+    match sess.opts.cg.target_cpu {\n+        Some(ref name) => handle_native(name),\n+        None => handle_native(sess.target.cpu.as_ref()),\n+    }\n }\n \n pub fn target_features(sess: &Session) -> Vec<Symbol> {"}, {"sha": "c098ce36f022fae5d0d5d4fe4e4dea196b4a38af", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -116,7 +116,7 @@ fn instrument_function_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribu\n \n         // The function name varies on platforms.\n         // See test/CodeGen/mcount.c in clang.\n-        let mcount_name = cx.sess().target.mcount.as_str();\n+        let mcount_name = cx.sess().target.mcount.as_ref();\n \n         Some(llvm::CreateAttrStringValue(\n             cx.llcx,"}, {"sha": "1bbfc13e05e7547d878d3463303ee2009d26ffa7", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1452,7 +1452,7 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n     }\n \n     fn fptoint_sat_broken_in_llvm(&self) -> bool {\n-        match self.tcx.sess.target.arch.as_str() {\n+        match self.tcx.sess.target.arch.as_ref() {\n             // FIXME - https://bugs.llvm.org/show_bug.cgi?id=50083\n             \"riscv64\" => llvm_util::get_version() < (13, 0, 0),\n             _ => false,"}, {"sha": "98cf873ebbdc3e7d8efd43aee7aa46b38c5929fc", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -134,7 +134,7 @@ pub unsafe fn create_module<'ll>(\n     let mod_name = SmallCStr::new(mod_name);\n     let llmod = llvm::LLVMModuleCreateWithNameInContext(mod_name.as_ptr(), llcx);\n \n-    let mut target_data_layout = sess.target.data_layout.clone();\n+    let mut target_data_layout = sess.target.data_layout.to_string();\n     let llvm_version = llvm_util::get_version();\n     if llvm_version < (13, 0, 0) {\n         if sess.target.arch == \"powerpc64\" {\n@@ -859,7 +859,7 @@ impl<'ll> CodegenCx<'ll, '_> {\n \n         // This isn't an \"LLVM intrinsic\", but LLVM's optimization passes\n         // recognize it like one and we assume it exists in `core::slice::cmp`\n-        match self.sess().target.arch.as_str() {\n+        match self.sess().target.arch.as_ref() {\n             \"avr\" | \"msp430\" => ifn!(\"memcmp\", fn(i8p, i8p, t_isize) -> t_i16),\n             _ => ifn!(\"memcmp\", fn(i8p, i8p, t_isize) -> t_i32),\n         }"}, {"sha": "f4dc33452d153ff72861655e2988954c32ce0b32", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -329,7 +329,7 @@ impl<'ll, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                     let b_ptr = self.bitcast(b, i8p_ty);\n                     let n = self.const_usize(layout.size().bytes());\n                     let cmp = self.call_intrinsic(\"memcmp\", &[a_ptr, b_ptr, n]);\n-                    match self.cx.sess().target.arch.as_str() {\n+                    match self.cx.sess().target.arch.as_ref() {\n                         \"avr\" | \"msp430\" => self.icmp(IntPredicate::IntEQ, cmp, self.const_i16(0)),\n                         _ => self.icmp(IntPredicate::IntEQ, cmp, self.const_i32(0)),\n                     }"}, {"sha": "c24e369ae7284ab26b44eaca7aaad446a25db824", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -61,8 +61,8 @@ unsafe fn configure_llvm(sess: &Session) {\n         full_arg.trim().split(|c: char| c == '=' || c.is_whitespace()).next().unwrap_or(\"\")\n     }\n \n-    let cg_opts = sess.opts.cg.llvm_args.iter();\n-    let tg_opts = sess.target.llvm_args.iter();\n+    let cg_opts = sess.opts.cg.llvm_args.iter().map(AsRef::as_ref);\n+    let tg_opts = sess.target.llvm_args.iter().map(AsRef::as_ref);\n     let sess_args = cg_opts.chain(tg_opts);\n \n     let user_specified_args: FxHashSet<_> =\n@@ -375,8 +375,10 @@ fn handle_native(name: &str) -> &str {\n }\n \n pub fn target_cpu(sess: &Session) -> &str {\n-    let name = sess.opts.cg.target_cpu.as_ref().unwrap_or(&sess.target.cpu);\n-    handle_native(name)\n+    match sess.opts.cg.target_cpu {\n+        Some(ref name) => handle_native(name),\n+        None => handle_native(sess.target.cpu.as_ref()),\n+    }\n }\n \n /// The list of LLVM features computed from CLI flags (`-Ctarget-cpu`, `-Ctarget-feature`,"}, {"sha": "84a1043a6a0f5d331b1da837837edae0395a814f", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -40,6 +40,7 @@ use std::ffi::OsString;\n use std::fs::{File, OpenOptions};\n use std::io::{BufWriter, Write};\n use std::lazy::OnceCell;\n+use std::ops::Deref;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n use std::{ascii, char, env, fmt, fs, io, mem, str};\n@@ -674,11 +675,11 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n \n     linker::disable_localization(&mut cmd);\n \n-    for &(ref k, ref v) in &sess.target.link_env {\n-        cmd.env(k, v);\n+    for &(ref k, ref v) in sess.target.link_env.as_ref() {\n+        cmd.env(k.as_ref(), v.as_ref());\n     }\n-    for k in &sess.target.link_env_remove {\n-        cmd.env_remove(k);\n+    for k in sess.target.link_env_remove.as_ref() {\n+        cmd.env_remove(k.as_ref());\n     }\n \n     if sess.opts.prints.contains(&PrintRequest::LinkArgs) {\n@@ -1216,7 +1217,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n \n     if let Some(ret) = infer_from(\n         sess,\n-        sess.target.linker.clone().map(PathBuf::from),\n+        sess.target.linker.as_deref().map(PathBuf::from),\n         Some(sess.target.linker_flavor),\n     ) {\n         return ret;\n@@ -1586,7 +1587,7 @@ fn add_post_link_objects(\n /// FIXME: Determine where exactly these args need to be inserted.\n fn add_pre_link_args(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     if let Some(args) = sess.target.pre_link_args.get(&flavor) {\n-        cmd.args(args);\n+        cmd.args(args.iter().map(Deref::deref));\n     }\n     cmd.args(&sess.opts.debugging_opts.pre_link_args);\n }\n@@ -1602,7 +1603,7 @@ fn add_link_script(cmd: &mut dyn Linker, sess: &Session, tmpdir: &Path, crate_ty\n             let file_name = [\"rustc\", &sess.target.llvm_target, \"linkfile.ld\"].join(\"-\");\n \n             let path = tmpdir.join(file_name);\n-            if let Err(e) = fs::write(&path, script) {\n+            if let Err(e) = fs::write(&path, script.as_ref()) {\n                 sess.fatal(&format!(\"failed to write link script to {}: {}\", path.display(), e));\n             }\n \n@@ -1634,23 +1635,23 @@ fn add_late_link_args(\n         });\n     if any_dynamic_crate {\n         if let Some(args) = sess.target.late_link_args_dynamic.get(&flavor) {\n-            cmd.args(args);\n+            cmd.args(args.iter().map(Deref::deref));\n         }\n     } else {\n         if let Some(args) = sess.target.late_link_args_static.get(&flavor) {\n-            cmd.args(args);\n+            cmd.args(args.iter().map(Deref::deref));\n         }\n     }\n     if let Some(args) = sess.target.late_link_args.get(&flavor) {\n-        cmd.args(args);\n+        cmd.args(args.iter().map(Deref::deref));\n     }\n }\n \n /// Add arbitrary \"post-link\" args defined by the target spec.\n /// FIXME: Determine where exactly these args need to be inserted.\n fn add_post_link_args(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     if let Some(args) = sess.target.post_link_args.get(&flavor) {\n-        cmd.args(args);\n+        cmd.args(args.iter().map(Deref::deref));\n     }\n }\n \n@@ -1960,8 +1961,8 @@ fn add_order_independent_options(\n         cmd.arg(&codegen_results.crate_info.target_cpu);\n         cmd.arg(\"--cpu-features\");\n         cmd.arg(match &sess.opts.cg.target_feature {\n-            feat if !feat.is_empty() => feat,\n-            _ => &sess.target.options.features,\n+            feat if !feat.is_empty() => feat.as_ref(),\n+            _ => sess.target.options.features.as_ref(),\n         });\n     }\n \n@@ -2478,12 +2479,12 @@ fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     let os = &sess.target.os;\n     let llvm_target = &sess.target.llvm_target;\n     if sess.target.vendor != \"apple\"\n-        || !matches!(os.as_str(), \"ios\" | \"tvos\")\n+        || !matches!(os.as_ref(), \"ios\" | \"tvos\")\n         || flavor != LinkerFlavor::Gcc\n     {\n         return;\n     }\n-    let sdk_name = match (arch.as_str(), os.as_str()) {\n+    let sdk_name = match (arch.as_ref(), os.as_ref()) {\n         (\"aarch64\", \"tvos\") => \"appletvos\",\n         (\"x86_64\", \"tvos\") => \"appletvsimulator\",\n         (\"arm\", \"ios\") => \"iphoneos\","}, {"sha": "2c15ed831670ceefe65dd6eb93bd93c12f5373ca", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -75,7 +75,7 @@ pub fn get_linker<'a>(\n         if let Some(ref tool) = msvc_tool {\n             let original_path = tool.path();\n             if let Some(ref root_lib_path) = original_path.ancestors().nth(4) {\n-                let arch = match t.arch.as_str() {\n+                let arch = match t.arch.as_ref() {\n                     \"x86_64\" => Some(\"x64\"),\n                     \"x86\" => Some(\"x86\"),\n                     \"aarch64\" => Some(\"arm64\"),\n@@ -1520,7 +1520,7 @@ impl<'a> L4Bender<'a> {\n \n pub(crate) fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n     if let Some(ref exports) = tcx.sess.target.override_export_symbols {\n-        return exports.clone();\n+        return exports.iter().map(ToString::to_string).collect();\n     }\n \n     let mut symbols = Vec::new();"}, {"sha": "9417874ffb40bb5fcd3f6f4277d8173961f1ddf5", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -218,7 +218,7 @@ impl ModuleConfig {\n                 false\n             ),\n             emit_obj,\n-            bc_cmdline: sess.target.bitcode_llvm_cmdline.clone(),\n+            bc_cmdline: sess.target.bitcode_llvm_cmdline.to_string(),\n \n             verify_llvm_ir: sess.verify_llvm_ir(),\n             no_prepopulate_passes: sess.opts.cg.no_prepopulate_passes,\n@@ -1061,7 +1061,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         is_pe_coff: tcx.sess.target.is_like_windows,\n         target_can_use_split_dwarf: tcx.sess.target_can_use_split_dwarf(),\n         target_pointer_width: tcx.sess.target.pointer_width,\n-        target_arch: tcx.sess.target.arch.clone(),\n+        target_arch: tcx.sess.target.arch.to_string(),\n         debuginfo: tcx.sess.opts.debuginfo,\n         split_debuginfo: tcx.sess.split_debuginfo(),\n         split_dwarf_kind: tcx.sess.opts.debugging_opts.split_dwarf_kind,"}, {"sha": "43bda7c0734eb8d129bda11032d96998220afbbe", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -416,10 +416,10 @@ impl<'a> CrateLocator<'a> {\n                     (&f[rlib_prefix.len()..(f.len() - rlib_suffix.len())], CrateFlavor::Rlib)\n                 } else if f.starts_with(rmeta_prefix) && f.ends_with(rmeta_suffix) {\n                     (&f[rmeta_prefix.len()..(f.len() - rmeta_suffix.len())], CrateFlavor::Rmeta)\n-                } else if f.starts_with(dylib_prefix) && f.ends_with(dylib_suffix) {\n+                } else if f.starts_with(dylib_prefix) && f.ends_with(dylib_suffix.as_ref()) {\n                     (&f[dylib_prefix.len()..(f.len() - dylib_suffix.len())], CrateFlavor::Dylib)\n                 } else {\n-                    if f.starts_with(staticlib_prefix) && f.ends_with(staticlib_suffix) {\n+                    if f.starts_with(staticlib_prefix) && f.ends_with(staticlib_suffix.as_ref()) {\n                         self.crate_rejections.via_kind.push(CrateMismatch {\n                             path: spf.path.clone(),\n                             got: \"static\".to_string(),\n@@ -698,8 +698,8 @@ impl<'a> CrateLocator<'a> {\n             };\n \n             if file.starts_with(\"lib\") && (file.ends_with(\".rlib\") || file.ends_with(\".rmeta\"))\n-                || file.starts_with(&self.target.dll_prefix)\n-                    && file.ends_with(&self.target.dll_suffix)\n+                || file.starts_with(self.target.dll_prefix.as_ref())\n+                    && file.ends_with(self.target.dll_suffix.as_ref())\n             {\n                 // Make sure there's at most one rlib and at most one dylib.\n                 // Note to take care and match against the non-canonicalized name:\n@@ -733,8 +733,8 @@ impl<'a> CrateLocator<'a> {\n             crate_name: self.crate_name,\n             root,\n             triple: self.triple,\n-            dll_prefix: self.target.dll_prefix.clone(),\n-            dll_suffix: self.target.dll_suffix.clone(),\n+            dll_prefix: self.target.dll_prefix.to_string(),\n+            dll_suffix: self.target.dll_suffix.to_string(),\n             crate_rejections: self.crate_rejections,\n         })\n     }"}, {"sha": "af78fd5a6f2120b435f428dc755d8698eedbfabb", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> Visitor<'tcx> for CheckParameters<'tcx> {\n fn check_asm<'tcx>(tcx: TyCtxt<'tcx>, body: &'tcx hir::Body<'tcx>, fn_span: Span) {\n     let mut this = CheckInlineAssembly { tcx, items: Vec::new() };\n     this.visit_body(body);\n-    if let [(ItemKind::Asm, _)] = this.items[..] {\n+    if let [(ItemKind::Asm | ItemKind::Err, _)] = this.items[..] {\n         // Ok.\n     } else {\n         let mut diag = struct_span_err!(\n@@ -156,19 +156,33 @@ fn check_asm<'tcx>(tcx: TyCtxt<'tcx>, body: &'tcx hir::Body<'tcx>, fn_span: Span\n             E0787,\n             \"naked functions must contain a single asm block\"\n         );\n+\n+        let mut must_show_error = false;\n         let mut has_asm = false;\n+        let mut has_err = false;\n         for &(kind, span) in &this.items {\n             match kind {\n                 ItemKind::Asm if has_asm => {\n+                    must_show_error = true;\n                     diag.span_label(span, \"multiple asm blocks are unsupported in naked functions\");\n                 }\n                 ItemKind::Asm => has_asm = true,\n                 ItemKind::NonAsm => {\n+                    must_show_error = true;\n                     diag.span_label(span, \"non-asm is unsupported in naked functions\");\n                 }\n+                ItemKind::Err => has_err = true,\n             }\n         }\n-        diag.emit();\n+\n+        // If the naked function only contains a single asm block and a non-zero number of\n+        // errors, then don't show an additional error. This allows for appending/prepending\n+        // `compile_error!(\"...\")` statements and reduces error noise.\n+        if must_show_error || !has_err {\n+            diag.emit();\n+        } else {\n+            diag.cancel();\n+        }\n     }\n }\n \n@@ -181,6 +195,7 @@ struct CheckInlineAssembly<'tcx> {\n enum ItemKind {\n     Asm,\n     NonAsm,\n+    Err,\n }\n \n impl<'tcx> CheckInlineAssembly<'tcx> {\n@@ -222,9 +237,13 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n                 self.check_inline_asm(asm, span);\n             }\n \n-            ExprKind::DropTemps(..) | ExprKind::Block(..) | ExprKind::Err => {\n+            ExprKind::DropTemps(..) | ExprKind::Block(..) => {\n                 hir::intravisit::walk_expr(self, expr);\n             }\n+\n+            ExprKind::Err => {\n+                self.items.push((ItemKind::Err, span));\n+            }\n         }\n     }\n "}, {"sha": "c915dd5bbf65c261dc7878409f94252e7e9b6482", "filename": "compiler/rustc_serialize/src/json.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -170,6 +170,7 @@ use self::JsonEvent::*;\n use self::ParserError::*;\n use self::ParserState::*;\n \n+use std::borrow::Cow;\n use std::collections::{BTreeMap, HashMap};\n use std::mem::swap;\n use std::num::FpCategory as Fp;\n@@ -2196,6 +2197,12 @@ impl ToJson for string::String {\n     }\n }\n \n+impl<'a> ToJson for Cow<'a, str> {\n+    fn to_json(&self) -> Json {\n+        Json::String(self.to_string())\n+    }\n+}\n+\n macro_rules! tuple_impl {\n     // use variables to indicate the arity of the tuple\n     ($($tyvar:ident),* ) => {\n@@ -2240,6 +2247,15 @@ impl<A: ToJson> ToJson for Vec<A> {\n     }\n }\n \n+impl<'a, A: ToJson> ToJson for Cow<'a, [A]>\n+where\n+    [A]: ToOwned,\n+{\n+    fn to_json(&self) -> Json {\n+        Json::Array(self.iter().map(|elt| elt.to_json()).collect())\n+    }\n+}\n+\n impl<T: ToString, A: ToJson> ToJson for BTreeMap<T, A> {\n     fn to_json(&self) -> Json {\n         let mut d = BTreeMap::new();"}, {"sha": "4182a5d07118e0652ff63c4bec28bde0775d0c59", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -956,7 +956,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     ret.reserve(7); // the minimum number of insertions\n     // Target bindings.\n     ret.insert((sym::target_os, Some(Symbol::intern(os))));\n-    for fam in &sess.target.families {\n+    for fam in sess.target.families.as_ref() {\n         ret.insert((sym::target_family, Some(Symbol::intern(fam))));\n         if fam == \"windows\" {\n             ret.insert((sym::windows, None));"}, {"sha": "86f76fdb6a7f699819bb35cec08dd9bc02d64e13", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,27 +2,27 @@ use crate::spec::{FramePointer, LinkerFlavor, SanitizerSet, Target, TargetOption\n \n pub fn target() -> Target {\n     let mut base = super::apple_base::opts(\"macos\");\n-    base.cpu = \"apple-a14\".to_string();\n+    base.cpu = \"apple-a14\".into();\n     base.max_atomic_width = Some(128);\n \n     // FIXME: The leak sanitizer currently fails the tests, see #88132.\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-arch\".to_string(), \"arm64\".to_string()]);\n-    base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-arch\".into(), \"arm64\".into()]);\n+    base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n \n     // Clang automatically chooses a more specific target based on\n     // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n     // correctly, we do too.\n     let llvm_target = super::apple_base::macos_llvm_target(\"arm64\");\n \n     Target {\n-        llvm_target,\n+        llvm_target: llvm_target.into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions {\n-            mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".into(),\n             frame_pointer: FramePointer::NonLeaf,\n             ..base\n         },"}, {"sha": "beb9042390b7fba1068e53d73ea29cf6120adbf2", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -10,12 +10,12 @@ pub fn target() -> Target {\n     let llvm_target = super::apple_base::ios_llvm_target(arch);\n \n     Target {\n-        llvm_target,\n+        llvm_target: llvm_target.into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions {\n-            features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n+            features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n             forces_embed_bitcode: true,\n             frame_pointer: FramePointer::NonLeaf,\n@@ -29,7 +29,7 @@ pub fn target() -> Target {\n                 -target-abi\\0\\\n                 darwinpcs\\0\\\n                 -Os\\0\"\n-                .to_string(),\n+                .into(),\n             ..opts(\"ios\", Arch::Arm64)\n         },\n     }"}, {"sha": "57634cbbfb1e36270ba72ceb2b3ea5265a3c1d55", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_macabi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,12 +3,12 @@ use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"arm64-apple-ios14.0-macabi\".to_string(),\n+        llvm_target: \"arm64-apple-ios14.0-macabi\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions {\n-            features: \"+neon,+fp-armv8,+apple-a12\".to_string(),\n+            features: \"+neon,+fp-armv8,+apple-a12\".into(),\n             max_atomic_width: Some(128),\n             forces_embed_bitcode: true,\n             frame_pointer: FramePointer::NonLeaf,\n@@ -20,7 +20,7 @@ pub fn target() -> Target {\n                 -emit-obj\\0\\\n                 -disable-llvm-passes\\0\\\n                 -Os\\0\"\n-                .to_string(),\n+                .into(),\n             ..opts(\"ios\", Arch::Arm64_macabi)\n         },\n     }"}, {"sha": "b4e135f66e9411e9c0fb348c91124e402ff481b7", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_sim.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -12,12 +12,12 @@ pub fn target() -> Target {\n     let llvm_target = super::apple_base::ios_sim_llvm_target(arch);\n \n     Target {\n-        llvm_target: llvm_target,\n+        llvm_target: llvm_target.into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions {\n-            features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n+            features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n             forces_embed_bitcode: true,\n             frame_pointer: FramePointer::NonLeaf,\n@@ -31,7 +31,7 @@ pub fn target() -> Target {\n                 -target-abi\\0\\\n                 darwinpcs\\0\\\n                 -Os\\0\"\n-                .to_string(),\n+                .into(),\n             ..base\n         },\n     }"}, {"sha": "2e31d16dc76ca0cdc55c4be7cebd330f30325851", "filename": "compiler/rustc_target/src/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,12 +3,12 @@ use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"arm64-apple-tvos\".to_string(),\n+        llvm_target: \"arm64-apple-tvos\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions {\n-            features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n+            features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n             forces_embed_bitcode: true,\n             frame_pointer: FramePointer::NonLeaf,"}, {"sha": "9bce82a191e8ab3cc2d56893720ffe8c895c77e6", "filename": "compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,14 +3,14 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"aarch64_be-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"aarch64_be-unknown-linux-gnu\".into(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions {\n-            features: \"+outline-atomics\".to_string(),\n+            features: \"+outline-atomics\".into(),\n             max_atomic_width: Some(128),\n-            mcount: \"\\u{1}_mcount\".to_string(),\n+            mcount: \"\\u{1}_mcount\".into(),\n             endian: Endian::Big,\n             ..super::linux_gnu_base::opts()\n         },"}, {"sha": "c9ceb55ddad592e31432f7e5af6c0dcab68c6986", "filename": "compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu_ilp32.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -6,14 +6,14 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(128);\n \n     Target {\n-        llvm_target: \"aarch64_be-unknown-linux-gnu_ilp32\".to_string(),\n+        llvm_target: \"aarch64_be-unknown-linux-gnu_ilp32\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:e-p:32:32-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"E-m:e-p:32:32-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions {\n-            abi: \"ilp32\".to_string(),\n-            features: \"+outline-atomics\".to_string(),\n-            mcount: \"\\u{1}_mcount\".to_string(),\n+            abi: \"ilp32\".into(),\n+            features: \"+outline-atomics\".into(),\n+            mcount: \"\\u{1}_mcount\".into(),\n             endian: Endian::Big,\n             ..base\n         },"}, {"sha": "4634433c4a9a76f13582148bea05447cc8390ddd", "filename": "compiler/rustc_target/src/spec/aarch64_fuchsia.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,10 +2,10 @@ use crate::spec::{SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"aarch64-fuchsia\".to_string(),\n+        llvm_target: \"aarch64-fuchsia\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions {\n             max_atomic_width: Some(128),\n             supported_sanitizers: SanitizerSet::ADDRESS | SanitizerSet::CFI,"}, {"sha": "6ea9ae2667efa36dfd70fc8f06d7d1fe47c3a7ea", "filename": "compiler/rustc_target/src/spec/aarch64_kmc_solid_asp3.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_kmc_solid_asp3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_kmc_solid_asp3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_kmc_solid_asp3.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,13 +3,13 @@ use super::{RelocModel, Target, TargetOptions};\n pub fn target() -> Target {\n     let base = super::solid_base::opts(\"asp3\");\n     Target {\n-        llvm_target: \"aarch64-unknown-none\".to_string(),\n+        llvm_target: \"aarch64-unknown-none\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions {\n-            linker: Some(\"aarch64-kmc-elf-gcc\".to_owned()),\n-            features: \"+neon,+fp-armv8\".to_string(),\n+            linker: Some(\"aarch64-kmc-elf-gcc\".into()),\n+            features: \"+neon,+fp-armv8\".into(),\n             relocation_model: RelocModel::Static,\n             disable_redzone: true,\n             max_atomic_width: Some(128),"}, {"sha": "5e31859aaef304742a9160edd3fe34107d332a7e", "filename": "compiler/rustc_target/src/spec/aarch64_linux_android.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,15 +5,15 @@ use crate::spec::{SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"aarch64-linux-android\".to_string(),\n+        llvm_target: \"aarch64-linux-android\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions {\n             max_atomic_width: Some(128),\n             // As documented in https://developer.android.com/ndk/guides/cpu-features.html\n             // the neon (ASIMD) and FP must exist on all android aarch64 targets.\n-            features: \"+neon,+fp-armv8\".to_string(),\n+            features: \"+neon,+fp-armv8\".into(),\n             supported_sanitizers: SanitizerSet::CFI\n                 | SanitizerSet::HWADDRESS\n                 | SanitizerSet::MEMTAG"}, {"sha": "856ec4fb0b48dfcc3dd714a8906a5e801553d2bf", "filename": "compiler/rustc_target/src/spec/aarch64_pc_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,13 +3,13 @@ use crate::spec::Target;\n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n     base.max_atomic_width = Some(64);\n-    base.features = \"+neon,+fp-armv8\".to_string();\n+    base.features = \"+neon,+fp-armv8\".into();\n \n     Target {\n-        llvm_target: \"aarch64-pc-windows-msvc\".to_string(),\n+        llvm_target: \"aarch64-pc-windows-msvc\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:w-p:64:64-i32:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:w-p:64:64-i32:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: base,\n     }\n }"}, {"sha": "2f39c4862cfac8615747501c8081a1fd7eb07e24", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_freebsd.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,10 +2,10 @@ use crate::spec::{SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"aarch64-unknown-freebsd\".to_string(),\n+        llvm_target: \"aarch64-unknown-freebsd\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions {\n             max_atomic_width: Some(128),\n             supported_sanitizers: SanitizerSet::ADDRESS"}, {"sha": "1d7269c8d737c7129db6ac8d76afba145250b8ba", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_hermit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,13 +3,13 @@ use crate::spec::Target;\n pub fn target() -> Target {\n     let mut base = super::hermit_base::opts();\n     base.max_atomic_width = Some(128);\n-    base.features = \"+strict-align,+neon,+fp-armv8\".to_string();\n+    base.features = \"+strict-align,+neon,+fp-armv8\".into();\n \n     Target {\n-        llvm_target: \"aarch64-unknown-hermit\".to_string(),\n+        llvm_target: \"aarch64-unknown-hermit\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: base,\n     }\n }"}, {"sha": "3006044d54a6e4a9a76bbacede04b02144e7918b", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,13 +2,13 @@ use crate::spec::{SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"aarch64-unknown-linux-gnu\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions {\n-            features: \"+outline-atomics\".to_string(),\n-            mcount: \"\\u{1}_mcount\".to_string(),\n+            features: \"+outline-atomics\".into(),\n+            mcount: \"\\u{1}_mcount\".into(),\n             max_atomic_width: Some(128),\n             supported_sanitizers: SanitizerSet::ADDRESS\n                 | SanitizerSet::CFI"}, {"sha": "63023df1d6c6319ee2d4c27b1f00d994988b9790", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu_ilp32.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,15 +2,15 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"aarch64-unknown-linux-gnu_ilp32\".to_string(),\n+        llvm_target: \"aarch64-unknown-linux-gnu_ilp32\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions {\n-            abi: \"ilp32\".to_string(),\n-            features: \"+outline-atomics\".to_string(),\n+            abi: \"ilp32\".into(),\n+            features: \"+outline-atomics\".into(),\n             max_atomic_width: Some(128),\n-            mcount: \"\\u{1}_mcount\".to_string(),\n+            mcount: \"\\u{1}_mcount\".into(),\n             ..super::linux_gnu_base::opts()\n         },\n     }"}, {"sha": "002d0dac2a668166fa72ae1f1585a923d057a478", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,10 +5,10 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(128);\n \n     Target {\n-        llvm_target: \"aarch64-unknown-linux-musl\".to_string(),\n+        llvm_target: \"aarch64-unknown-linux-musl\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n-        options: TargetOptions { mcount: \"\\u{1}_mcount\".to_string(), ..base },\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n+        options: TargetOptions { mcount: \"\\u{1}_mcount\".into(), ..base },\n     }\n }"}, {"sha": "703f7502295ee3a8bccd86950aac360676850148", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_netbsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,12 +2,12 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"aarch64-unknown-netbsd\".to_string(),\n+        llvm_target: \"aarch64-unknown-netbsd\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions {\n-            mcount: \"__mcount\".to_string(),\n+            mcount: \"__mcount\".into(),\n             max_atomic_width: Some(128),\n             ..super::netbsd_base::opts()\n         },"}, {"sha": "2c7834c225b64e870bdb7c0ba5e04f2c230c2e66", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -11,8 +11,8 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n pub fn target() -> Target {\n     let opts = TargetOptions {\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-        linker: Some(\"rust-lld\".to_owned()),\n-        features: \"+strict-align,+neon,+fp-armv8\".to_string(),\n+        linker: Some(\"rust-lld\".into()),\n+        features: \"+strict-align,+neon,+fp-armv8\".into(),\n         executables: true,\n         relocation_model: RelocModel::Static,\n         disable_redzone: true,\n@@ -21,10 +21,10 @@ pub fn target() -> Target {\n         ..Default::default()\n     };\n     Target {\n-        llvm_target: \"aarch64-unknown-none\".to_string(),\n+        llvm_target: \"aarch64-unknown-none\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: opts,\n     }\n }"}, {"sha": "1b6525a7c69af757b901a9c373a84fca6ad45645", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none_softfloat.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -10,10 +10,10 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        abi: \"softfloat\".to_string(),\n+        abi: \"softfloat\".into(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-        linker: Some(\"rust-lld\".to_owned()),\n-        features: \"+strict-align,-neon,-fp-armv8\".to_string(),\n+        linker: Some(\"rust-lld\".into()),\n+        features: \"+strict-align,-neon,-fp-armv8\".into(),\n         executables: true,\n         relocation_model: RelocModel::Static,\n         disable_redzone: true,\n@@ -22,10 +22,10 @@ pub fn target() -> Target {\n         ..Default::default()\n     };\n     Target {\n-        llvm_target: \"aarch64-unknown-none\".to_string(),\n+        llvm_target: \"aarch64-unknown-none\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: opts,\n     }\n }"}, {"sha": "3d99040f0d326a55c9a0a4e18a81637ed29417f7", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_openbsd.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_openbsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,10 +2,10 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"aarch64-unknown-openbsd\".to_string(),\n+        llvm_target: \"aarch64-unknown-openbsd\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions { max_atomic_width: Some(128), ..super::openbsd_base::opts() },\n     }\n }"}, {"sha": "6c9be4c8e93719a1d19d6da9a03fbd52a63d241e", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_redox.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_redox.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,10 +5,10 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(128);\n \n     Target {\n-        llvm_target: \"aarch64-unknown-redox\".to_string(),\n+        llvm_target: \"aarch64-unknown-redox\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: base,\n     }\n }"}, {"sha": "965b254c2898f480d4023cdbf22988137c929749", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_uefi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_uefi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> Target {\n \n     base.max_atomic_width = Some(64);\n \n-    let pre_link_args_msvc = vec![\"/machine:arm64\".to_string()];\n+    let pre_link_args_msvc = vec![\"/machine:arm64\".into()];\n \n     base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n     base.pre_link_args\n@@ -18,10 +18,10 @@ pub fn target() -> Target {\n         .extend(pre_link_args_msvc);\n \n     Target {\n-        llvm_target: \"aarch64-unknown-windows\".to_string(),\n+        llvm_target: \"aarch64-unknown-windows\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:w-p:64:64-i32:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:w-p:64:64-i32:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: base,\n     }\n }"}, {"sha": "54247fd93f2f1342ff1a62264179d6f2da8d9669", "filename": "compiler/rustc_target/src/spec/aarch64_uwp_windows_msvc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,10 +5,10 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(64);\n \n     Target {\n-        llvm_target: \"aarch64-pc-windows-msvc\".to_string(),\n+        llvm_target: \"aarch64-pc-windows-msvc\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:w-p:64:64-i32:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:w-p:64:64-i32:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: base,\n     }\n }"}, {"sha": "e118553dfd2bb650525dc12b58046329f885264e", "filename": "compiler/rustc_target/src/spec/aarch64_wrs_vxworks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_wrs_vxworks.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,10 +2,10 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"aarch64-unknown-linux-gnu\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n         options: TargetOptions { max_atomic_width: Some(128), ..super::vxworks_base::opts() },\n     }\n }"}, {"sha": "c2b9d696776f5b59e7deef2ef6fb96fca7381b25", "filename": "compiler/rustc_target/src/spec/android_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,7 +2,7 @@ use crate::spec::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();\n-    base.os = \"android\".to_string();\n+    base.os = \"android\".into();\n     base.dwarf_version = Some(2);\n     base.position_independent_executables = true;\n     base.has_thread_local = false;"}, {"sha": "238d3f8bda5ffbff32515b910e7fa1804dc42f0c", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,8 +1,8 @@\n-use std::env;\n+use std::{borrow::Cow, env};\n \n-use crate::spec::{FramePointer, LldFlavor, SplitDebuginfo, TargetOptions};\n+use crate::spec::{cvs, FramePointer, LldFlavor, SplitDebuginfo, TargetOptions};\n \n-pub fn opts(os: &str) -> TargetOptions {\n+pub fn opts(os: &'static str) -> TargetOptions {\n     // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6\n     // either the linker will complain if it is used or the binary will end up\n     // segfaulting at runtime when run on 10.6. Rust by default supports macOS\n@@ -19,20 +19,20 @@ pub fn opts(os: &str) -> TargetOptions {\n     let has_thread_local = macos_deployment_target(\"x86_64\") >= (10, 7);\n \n     TargetOptions {\n-        os: os.to_string(),\n-        vendor: \"apple\".to_string(),\n+        os: os.into(),\n+        vendor: \"apple\".into(),\n         // macOS has -dead_strip, which doesn't rely on function_sections\n         function_sections: false,\n         dynamic_linking: true,\n         linker_is_gnu: false,\n         executables: true,\n-        families: vec![\"unix\".to_string()],\n+        families: cvs![\"unix\"],\n         is_like_osx: true,\n         dwarf_version: Some(2),\n         frame_pointer: FramePointer::Always,\n         has_rpath: true,\n-        dll_suffix: \".dylib\".to_string(),\n-        archive_format: \"darwin\".to_string(),\n+        dll_suffix: \".dylib\".into(),\n+        archive_format: \"darwin\".into(),\n         has_thread_local,\n         abi_return_struct_as_int: true,\n         emit_debug_gdb_scripts: false,\n@@ -51,7 +51,7 @@ pub fn opts(os: &str) -> TargetOptions {\n         // this environment variable too in recent versions.\n         //\n         // For some more info see the commentary on #47086\n-        link_env: vec![(\"ZERO_AR_DATE\".to_string(), \"1\".to_string())],\n+        link_env: Cow::Borrowed(&[(Cow::Borrowed(\"ZERO_AR_DATE\"), Cow::Borrowed(\"1\"))]),\n \n         ..Default::default()\n     }\n@@ -79,19 +79,19 @@ pub fn macos_llvm_target(arch: &str) -> String {\n     format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n }\n \n-pub fn macos_link_env_remove() -> Vec<String> {\n+pub fn macos_link_env_remove() -> Vec<Cow<'static, str>> {\n     let mut env_remove = Vec::with_capacity(2);\n     // Remove the `SDKROOT` environment variable if it's clearly set for the wrong platform, which\n     // may occur when we're linking a custom build script while targeting iOS for example.\n     if let Ok(sdkroot) = env::var(\"SDKROOT\") {\n         if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"iPhoneSimulator.platform\") {\n-            env_remove.push(\"SDKROOT\".to_string())\n+            env_remove.push(\"SDKROOT\".into())\n         }\n     }\n     // Additionally, `IPHONEOS_DEPLOYMENT_TARGET` must not be set when using the Xcode linker at\n     // \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\",\n     // although this is apparently ignored when using the linker at \"/usr/bin/ld\".\n-    env_remove.push(\"IPHONEOS_DEPLOYMENT_TARGET\".to_string());\n+    env_remove.push(\"IPHONEOS_DEPLOYMENT_TARGET\".into());\n     env_remove\n }\n "}, {"sha": "e2d08955c089c1815a4df02169e1629d818eb206", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::TargetOptions;\n+use crate::{spec::cvs, spec::TargetOptions};\n+use std::borrow::Cow;\n \n use Arch::*;\n #[allow(non_camel_case_types)]\n@@ -14,16 +15,15 @@ pub enum Arch {\n     Arm64_sim,\n }\n \n-fn target_abi(arch: Arch) -> String {\n+fn target_abi(arch: Arch) -> &'static str {\n     match arch {\n         Armv7 | Armv7s | Arm64 | I386 | X86_64 => \"\",\n         X86_64_macabi | Arm64_macabi => \"macabi\",\n         Arm64_sim => \"sim\",\n     }\n-    .to_string()\n }\n \n-fn target_cpu(arch: Arch) -> String {\n+fn target_cpu(arch: Arch) -> &'static str {\n     match arch {\n         Armv7 => \"cortex-a8\", // iOS7 is supported on iPhone 4 and higher\n         Armv7s => \"cortex-a9\",\n@@ -34,22 +34,21 @@ fn target_cpu(arch: Arch) -> String {\n         Arm64_macabi => \"apple-a12\",\n         Arm64_sim => \"apple-a12\",\n     }\n-    .to_string()\n }\n \n-fn link_env_remove(arch: Arch) -> Vec<String> {\n+fn link_env_remove(arch: Arch) -> Cow<'static, [Cow<'static, str>]> {\n     match arch {\n         Armv7 | Armv7s | Arm64 | I386 | X86_64 | Arm64_sim => {\n-            vec![\"MACOSX_DEPLOYMENT_TARGET\".to_string()]\n+            cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n         }\n-        X86_64_macabi | Arm64_macabi => vec![\"IPHONEOS_DEPLOYMENT_TARGET\".to_string()],\n+        X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],\n     }\n }\n \n-pub fn opts(os: &str, arch: Arch) -> TargetOptions {\n+pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n     TargetOptions {\n-        abi: target_abi(arch),\n-        cpu: target_cpu(arch),\n+        abi: target_abi(arch).into(),\n+        cpu: target_cpu(arch).into(),\n         dynamic_linking: false,\n         executables: true,\n         link_env_remove: link_env_remove(arch),"}, {"sha": "bbf1fa315ab4cf42ba7744413f6bb543783590de", "filename": "compiler/rustc_target/src/spec/arm_linux_androideabi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_linux_androideabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,14 +2,14 @@ use crate::spec::{SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"arm-linux-androideabi\".to_string(),\n+        llvm_target: \"arm-linux-androideabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n+            abi: \"eabi\".into(),\n             // https://developer.android.com/ndk/guides/abis.html#armeabi\n-            features: \"+strict-align,+v5te\".to_string(),\n+            features: \"+strict-align,+v5te\".into(),\n             supported_sanitizers: SanitizerSet::ADDRESS,\n             max_atomic_width: Some(32),\n             ..super::android_base::opts()"}, {"sha": "c0f1827ad3f88a34abb7a04ea4fc6eff22165c5e", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,15 +2,15 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"arm-unknown-linux-gnueabi\".to_string(),\n+        llvm_target: \"arm-unknown-linux-gnueabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n-            features: \"+strict-align,+v6\".to_string(),\n+            abi: \"eabi\".into(),\n+            features: \"+strict-align,+v6\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".into(),\n             ..super::linux_gnu_base::opts()\n         },\n     }"}, {"sha": "79b8958c22ad2c7d4e6237b69a1104b1fbee33c3", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,15 +2,15 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"arm-unknown-linux-gnueabihf\".to_string(),\n+        llvm_target: \"arm-unknown-linux-gnueabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabihf\".to_string(),\n-            features: \"+strict-align,+v6,+vfp2,-d32\".to_string(),\n+            abi: \"eabihf\".into(),\n+            features: \"+strict-align,+v6,+vfp2,-d32\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".into(),\n             ..super::linux_gnu_base::opts()\n         },\n     }"}, {"sha": "3ef441d6a6075b558c2cd1a970eff29cf14ce072", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,17 +5,17 @@ pub fn target() -> Target {\n         // It's important we use \"gnueabi\" and not \"musleabi\" here. LLVM uses it\n         // to determine the calling convention and float ABI, and it doesn't\n         // support the \"musleabi\" value.\n-        llvm_target: \"arm-unknown-linux-gnueabi\".to_string(),\n+        llvm_target: \"arm-unknown-linux-gnueabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n+            abi: \"eabi\".into(),\n             // Most of these settings are copied from the arm_unknown_linux_gnueabi\n             // target.\n-            features: \"+strict-align,+v6\".to_string(),\n+            features: \"+strict-align,+v6\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".into(),\n             ..super::linux_musl_base::opts()\n         },\n     }"}, {"sha": "eb6660d4c289b098a5d73bbdb5128410781f8921", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,17 +5,17 @@ pub fn target() -> Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and it\n         // doesn't support the \"musleabihf\" value.\n-        llvm_target: \"arm-unknown-linux-gnueabihf\".to_string(),\n+        llvm_target: \"arm-unknown-linux-gnueabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabihf\".to_string(),\n+            abi: \"eabihf\".into(),\n             // Most of these settings are copied from the arm_unknown_linux_gnueabihf\n             // target.\n-            features: \"+strict-align,+v6,+vfp2,-d32\".to_string(),\n+            features: \"+strict-align,+v6,+vfp2,-d32\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".into(),\n             ..super::linux_musl_base::opts()\n         },\n     }"}, {"sha": "0cb18f17310b87d546565e41e6fc3df9ecf6f1dd", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -6,16 +6,16 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armebv7r-unknown-none-eabi\".to_string(),\n+        llvm_target: \"armebv7r-unknown-none-eabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n+            abi: \"eabi\".into(),\n             endian: Endian::Big,\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n-            linker: Some(\"rust-lld\".to_owned()),\n+            linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),"}, {"sha": "a5b7c12cc7b9f2bbcb89e5cb3c059e4fe4543119", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -6,19 +6,19 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armebv7r-unknown-none-eabihf\".to_string(),\n+        llvm_target: \"armebv7r-unknown-none-eabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabihf\".to_string(),\n+            abi: \"eabihf\".into(),\n             endian: Endian::Big,\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n-            linker: Some(\"rust-lld\".to_owned()),\n+            linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n-            features: \"+vfp3,-d32,-fp16\".to_string(),\n+            features: \"+vfp3,-d32,-fp16\".into(),\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n             // GCC and Clang default to 8 for arm-none here"}, {"sha": "1de63a920c80fb9d9daa7b4f3ea11b7e0da3c250", "filename": "compiler/rustc_target/src/spec/armv4t_unknown_linux_gnueabi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,16 +2,16 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armv4t-unknown-linux-gnueabi\".to_string(),\n+        llvm_target: \"armv4t-unknown-linux-gnueabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n-            features: \"+soft-float,+strict-align\".to_string(),\n+            abi: \"eabi\".into(),\n+            features: \"+soft-float,+strict-align\".into(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n-            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".into(),\n             has_thumb_interworking: true,\n             ..super::linux_gnu_base::opts()\n         },"}, {"sha": "b940563102b07aee3e84e32513f74132e9a5de82", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,16 +2,16 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armv5te-unknown-linux-gnueabi\".to_string(),\n+        llvm_target: \"armv5te-unknown-linux-gnueabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n-            features: \"+soft-float,+strict-align\".to_string(),\n+            abi: \"eabi\".into(),\n+            features: \"+soft-float,+strict-align\".into(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n-            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".into(),\n             has_thumb_interworking: true,\n             ..super::linux_gnu_base::opts()\n         },"}, {"sha": "2530971b502170e1c8b6a52d60384c3773c48d3d", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_musleabi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -6,16 +6,16 @@ pub fn target() -> Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and LLVM\n         // doesn't support the \"musleabihf\" value.\n-        llvm_target: \"armv5te-unknown-linux-gnueabi\".to_string(),\n+        llvm_target: \"armv5te-unknown-linux-gnueabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n-            features: \"+soft-float,+strict-align\".to_string(),\n+            abi: \"eabi\".into(),\n+            features: \"+soft-float,+strict-align\".into(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n-            mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".into(),\n             has_thumb_interworking: true,\n             ..super::linux_musl_base::opts()\n         },"}, {"sha": "a51be10a3d82a26c98fac82d59006f31e17d709d", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_uclibceabi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_uclibceabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_uclibceabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_uclibceabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,16 +2,16 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armv5te-unknown-linux-uclibcgnueabi\".to_string(),\n+        llvm_target: \"armv5te-unknown-linux-uclibcgnueabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n-            features: \"+soft-float,+strict-align\".to_string(),\n+            abi: \"eabi\".into(),\n+            features: \"+soft-float,+strict-align\".into(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n-            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".into(),\n             has_thumb_interworking: true,\n             ..super::linux_uclibc_base::opts()\n         },"}, {"sha": "b7cfccc8b3da479f7f5658d2269e041bf3d88802", "filename": "compiler/rustc_target/src/spec/armv6_unknown_freebsd.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,17 +2,17 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armv6-unknown-freebsd-gnueabihf\".to_string(),\n+        llvm_target: \"armv6-unknown-freebsd-gnueabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabihf\".to_string(),\n+            abi: \"eabihf\".into(),\n             // FIXME: change env to \"gnu\" when cfg_target_abi becomes stable\n-            env: \"gnueabihf\".to_string(),\n-            features: \"+v6,+vfp2,-d32\".to_string(),\n+            env: \"gnueabihf\".into(),\n+            features: \"+v6,+vfp2,-d32\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".into(),\n             ..super::freebsd_base::opts()\n         },\n     }"}, {"sha": "6e26f686fcb58c71d73f9affb921a78d91f74f39", "filename": "compiler/rustc_target/src/spec/armv6_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,17 +2,17 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armv6-unknown-netbsdelf-eabihf\".to_string(),\n+        llvm_target: \"armv6-unknown-netbsdelf-eabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabihf\".to_string(),\n+            abi: \"eabihf\".into(),\n             // FIXME: remove env when cfg_target_abi becomes stable\n-            env: \"eabihf\".to_string(),\n-            features: \"+v6,+vfp2,-d32\".to_string(),\n+            env: \"eabihf\".into(),\n+            features: \"+v6,+vfp2,-d32\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"__mcount\".to_string(),\n+            mcount: \"__mcount\".into(),\n             ..super::netbsd_base::opts()\n         },\n     }"}, {"sha": "ffcd1a3f4df757e8262f01270021eafe13aa854f", "filename": "compiler/rustc_target/src/spec/armv6k_nintendo_3ds.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, RelocModel, Target, TargetOptions};\n+use crate::spec::{cvs, LinkArgs, LinkerFlavor, RelocModel, Target, TargetOptions};\n \n /// A base target for Nintendo 3DS devices using the devkitARM toolchain.\n ///\n@@ -9,33 +9,33 @@ pub fn target() -> Target {\n     pre_link_args.insert(\n         LinkerFlavor::Gcc,\n         vec![\n-            \"-specs=3dsx.specs\".to_string(),\n-            \"-mtune=mpcore\".to_string(),\n-            \"-mfloat-abi=hard\".to_string(),\n-            \"-mtp=soft\".to_string(),\n+            \"-specs=3dsx.specs\".into(),\n+            \"-mtune=mpcore\".into(),\n+            \"-mfloat-abi=hard\".into(),\n+            \"-mtp=soft\".into(),\n         ],\n     );\n \n     Target {\n-        llvm_target: \"armv6k-none-eabihf\".to_string(),\n+        llvm_target: \"armv6k-none-eabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n \n         options: TargetOptions {\n-            os: \"horizon\".to_string(),\n-            env: \"newlib\".to_string(),\n-            vendor: \"nintendo\".to_string(),\n-            abi: \"eabihf\".to_string(),\n+            os: \"horizon\".into(),\n+            env: \"newlib\".into(),\n+            vendor: \"nintendo\".into(),\n+            abi: \"eabihf\".into(),\n             linker_flavor: LinkerFlavor::Gcc,\n-            cpu: \"mpcore\".to_string(),\n+            cpu: \"mpcore\".into(),\n             executables: true,\n-            families: vec![\"unix\".to_string()],\n-            linker: Some(\"arm-none-eabi-gcc\".to_string()),\n+            families: cvs![\"unix\"],\n+            linker: Some(\"arm-none-eabi-gcc\".into()),\n             relocation_model: RelocModel::Static,\n-            features: \"+vfp2\".to_string(),\n+            features: \"+vfp2\".into(),\n             pre_link_args,\n-            exe_suffix: \".elf\".to_string(),\n+            exe_suffix: \".elf\".into(),\n             no_default_libraries: false,\n             has_thread_local: true,\n             ..Default::default()"}, {"sha": "57fd74a36b654501e6d9c78164f07e0ba417c2e9", "filename": "compiler/rustc_target/src/spec/armv7_apple_ios.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,13 +2,15 @@ use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n+    let llvm_target = super::apple_base::ios_llvm_target(\"armv7\");\n+\n     Target {\n-        llvm_target: super::apple_base::ios_llvm_target(\"armv7\"),\n+        llvm_target: llvm_target.into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            features: \"+v7,+vfp3,+neon\".to_string(),\n+            features: \"+v7,+vfp3,+neon\".into(),\n             max_atomic_width: Some(64),\n             ..opts(\"ios\", Arch::Armv7)\n         },"}, {"sha": "2afd93fcad8079a86077dc01501438c6512046ab", "filename": "compiler/rustc_target/src/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -10,15 +10,15 @@ use crate::spec::{LinkerFlavor, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-march=armv7-a\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-march=armv7-a\".into());\n     Target {\n-        llvm_target: \"armv7-none-linux-android\".to_string(),\n+        llvm_target: \"armv7-none-linux-android\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n-            features: \"+v7,+thumb-mode,+thumb2,+vfp3,-d32,-neon\".to_string(),\n+            abi: \"eabi\".into(),\n+            features: \"+v7,+thumb-mode,+thumb2,+vfp3,-d32,-neon\".into(),\n             supported_sanitizers: SanitizerSet::ADDRESS,\n             max_atomic_width: Some(64),\n             ..base"}, {"sha": "bc37b62de8e2249d48ecb22d9a6248e66a6710ba", "filename": "compiler/rustc_target/src/spec/armv7_unknown_freebsd.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,17 +2,17 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armv7-unknown-freebsd-gnueabihf\".to_string(),\n+        llvm_target: \"armv7-unknown-freebsd-gnueabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabihf\".to_string(),\n+            abi: \"eabihf\".into(),\n             // FIXME: change env to \"gnu\" when cfg_target_abi becomes stable\n-            env: \"gnueabihf\".to_string(),\n-            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n+            env: \"gnueabihf\".into(),\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".into(),\n             ..super::freebsd_base::opts()\n         },\n     }"}, {"sha": "903042d7e7a0262450c52b352c0c09576505c778", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,15 +5,15 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armv7-unknown-linux-gnueabi\".to_string(),\n+        llvm_target: \"armv7-unknown-linux-gnueabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n-            features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),\n+            abi: \"eabi\".into(),\n+            features: \"+v7,+thumb2,+soft-float,-neon\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".into(),\n             ..super::linux_gnu_base::opts()\n         },\n     }"}, {"sha": "e39ea49a0032bb24ec64dfd66680fddeffe19816", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,16 +5,16 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n+        llvm_target: \"armv7-unknown-linux-gnueabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabihf\".to_string(),\n+            abi: \"eabihf\".into(),\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n-            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".into(),\n             ..super::linux_gnu_base::opts()\n         },\n     }"}, {"sha": "7dae8577396e5af42ace9dba8b2e4d65e3958e5b", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -10,16 +10,16 @@ pub fn target() -> Target {\n         // It's important we use \"gnueabi\" and not \"musleabi\" here. LLVM uses it\n         // to determine the calling convention and float ABI, and it doesn't\n         // support the \"musleabi\" value.\n-        llvm_target: \"armv7-unknown-linux-gnueabi\".to_string(),\n+        llvm_target: \"armv7-unknown-linux-gnueabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n \n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n-            features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),\n+            abi: \"eabi\".into(),\n+            features: \"+v7,+thumb2,+soft-float,-neon\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".into(),\n             ..super::linux_musl_base::opts()\n         },\n     }"}, {"sha": "ba83964bf58519ade90d9988c5a1deaf32771640", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -7,18 +7,18 @@ pub fn target() -> Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and LLVM\n         // doesn't support the \"musleabihf\" value.\n-        llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n+        llvm_target: \"armv7-unknown-linux-gnueabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n \n         // Most of these settings are copied from the armv7_unknown_linux_gnueabihf\n         // target.\n         options: TargetOptions {\n-            abi: \"eabihf\".to_string(),\n-            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n+            abi: \"eabihf\".into(),\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".into(),\n             ..super::linux_musl_base::opts()\n         },\n     }"}, {"sha": "171f67070d549e9da92f0ff84afd8ee44560134f", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_uclibceabi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -6,17 +6,17 @@ use crate::spec::{Target, TargetOptions};\n pub fn target() -> Target {\n     let base = super::linux_uclibc_base::opts();\n     Target {\n-        llvm_target: \"armv7-unknown-linux-gnueabi\".to_string(),\n+        llvm_target: \"armv7-unknown-linux-gnueabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n \n         options: TargetOptions {\n-            features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),\n-            cpu: \"generic\".to_string(),\n+            features: \"+v7,+thumb2,+soft-float,-neon\".into(),\n+            cpu: \"generic\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"_mcount\".to_string(),\n-            abi: \"eabi\".to_string(),\n+            mcount: \"_mcount\".into(),\n+            abi: \"eabi\".into(),\n             ..base\n         },\n     }"}, {"sha": "d3e95a6573d8232703f59f3d08a847d0840a6ea3", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_uclibceabihf.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -6,18 +6,18 @@ use crate::spec::{Target, TargetOptions};\n pub fn target() -> Target {\n     let base = super::linux_uclibc_base::opts();\n     Target {\n-        llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n+        llvm_target: \"armv7-unknown-linux-gnueabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n \n         options: TargetOptions {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n-            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n-            cpu: \"generic\".to_string(),\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".into(),\n+            cpu: \"generic\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"_mcount\".to_string(),\n-            abi: \"eabihf\".to_string(),\n+            mcount: \"_mcount\".into(),\n+            abi: \"eabihf\".into(),\n             ..base\n         },\n     }"}, {"sha": "c89ae2483988466ee433274e1050f21cd774b0ad", "filename": "compiler/rustc_target/src/spec/armv7_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,17 +2,17 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armv7-unknown-netbsdelf-eabihf\".to_string(),\n+        llvm_target: \"armv7-unknown-netbsdelf-eabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabihf\".to_string(),\n+            abi: \"eabihf\".into(),\n             // FIXME: remove env when cfg_target_abi becomes stable\n-            env: \"eabihf\".to_string(),\n-            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n+            env: \"eabihf\".into(),\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"__mcount\".to_string(),\n+            mcount: \"__mcount\".into(),\n             ..super::netbsd_base::opts()\n         },\n     }"}, {"sha": "c1ab90172e276a810b9f27a5f16b34c94e226a3d", "filename": "compiler/rustc_target/src/spec/armv7_wrs_vxworks_eabihf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,14 +2,14 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n+        llvm_target: \"armv7-unknown-linux-gnueabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabihf\".to_string(),\n+            abi: \"eabihf\".into(),\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n-            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".into(),\n             max_atomic_width: Some(64),\n             ..super::vxworks_base::opts()\n         },"}, {"sha": "b49dc650bd00f7ee8b1f79199ad5fb55af5f5793", "filename": "compiler/rustc_target/src/spec/armv7a_kmc_solid_asp3_eabi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_kmc_solid_asp3_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_kmc_solid_asp3_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_kmc_solid_asp3_eabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,13 +3,13 @@ use super::{RelocModel, Target, TargetOptions};\n pub fn target() -> Target {\n     let base = super::solid_base::opts(\"asp3\");\n     Target {\n-        llvm_target: \"armv7a-none-eabi\".to_string(),\n+        llvm_target: \"armv7a-none-eabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            linker: Some(\"arm-kmc-eabi-gcc\".to_owned()),\n-            features: \"+v7,+soft-float,+thumb2,-neon\".to_string(),\n+            linker: Some(\"arm-kmc-eabi-gcc\".into()),\n+            features: \"+v7,+soft-float,+thumb2,-neon\".into(),\n             relocation_model: RelocModel::Static,\n             disable_redzone: true,\n             max_atomic_width: Some(64),"}, {"sha": "7d30238e8ab29de9718db4917c7f16c45366909a", "filename": "compiler/rustc_target/src/spec/armv7a_kmc_solid_asp3_eabihf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_kmc_solid_asp3_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_kmc_solid_asp3_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_kmc_solid_asp3_eabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,13 +3,13 @@ use super::{RelocModel, Target, TargetOptions};\n pub fn target() -> Target {\n     let base = super::solid_base::opts(\"asp3\");\n     Target {\n-        llvm_target: \"armv7a-none-eabihf\".to_string(),\n+        llvm_target: \"armv7a-none-eabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            linker: Some(\"arm-kmc-eabi-gcc\".to_owned()),\n-            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n+            linker: Some(\"arm-kmc-eabi-gcc\".into()),\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".into(),\n             relocation_model: RelocModel::Static,\n             disable_redzone: true,\n             max_atomic_width: Some(64),"}, {"sha": "ff649434312d70bcec83b7cd963e8f51081968cf", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -18,10 +18,10 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        abi: \"eabi\".to_string(),\n+        abi: \"eabi\".into(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-        linker: Some(\"rust-lld\".to_owned()),\n-        features: \"+v7,+thumb2,+soft-float,-neon,+strict-align\".to_string(),\n+        linker: Some(\"rust-lld\".into()),\n+        features: \"+v7,+thumb2,+soft-float,-neon,+strict-align\".into(),\n         executables: true,\n         relocation_model: RelocModel::Static,\n         disable_redzone: true,\n@@ -32,10 +32,10 @@ pub fn target() -> Target {\n         ..Default::default()\n     };\n     Target {\n-        llvm_target: \"armv7a-none-eabi\".to_string(),\n+        llvm_target: \"armv7a-none-eabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: opts,\n     }\n }"}, {"sha": "c0321d0bef4cb23a51471188721f0a0dc0752959", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -9,10 +9,10 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        abi: \"eabihf\".to_string(),\n+        abi: \"eabihf\".into(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-        linker: Some(\"rust-lld\".to_owned()),\n-        features: \"+v7,+vfp3,-d32,+thumb2,-neon,+strict-align\".to_string(),\n+        linker: Some(\"rust-lld\".into()),\n+        features: \"+v7,+vfp3,-d32,+thumb2,-neon,+strict-align\".into(),\n         executables: true,\n         relocation_model: RelocModel::Static,\n         disable_redzone: true,\n@@ -24,10 +24,10 @@ pub fn target() -> Target {\n         ..Default::default()\n     };\n     Target {\n-        llvm_target: \"armv7a-none-eabihf\".to_string(),\n+        llvm_target: \"armv7a-none-eabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: opts,\n     }\n }"}, {"sha": "2c3f79cc58be70699a2e480e7e392abe8242404a", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,16 +5,16 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armv7r-unknown-none-eabi\".to_string(),\n+        llvm_target: \"armv7r-unknown-none-eabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n \n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n+            abi: \"eabi\".into(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n-            linker: Some(\"rust-lld\".to_owned()),\n+            linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),"}, {"sha": "5c82e7684834fd32f22650665448f8e9ef7878cc", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,19 +5,19 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armv7r-unknown-none-eabihf\".to_string(),\n+        llvm_target: \"armv7r-unknown-none-eabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n \n         options: TargetOptions {\n-            abi: \"eabihf\".to_string(),\n+            abi: \"eabihf\".into(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n-            linker: Some(\"rust-lld\".to_owned()),\n+            linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n-            features: \"+vfp3,-d32,-fp16\".to_string(),\n+            features: \"+vfp3,-d32,-fp16\".into(),\n             max_atomic_width: Some(32),\n             emit_debug_gdb_scripts: false,\n             // GCC and Clang default to 8 for arm-none here"}, {"sha": "cc17265b2b8db6ce483e08fbed456cd575f3e502", "filename": "compiler/rustc_target/src/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,12 +3,12 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armv7s-apple-ios\".to_string(),\n+        llvm_target: \"armv7s-apple-ios\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            features: \"+v7,+vfp4,+neon\".to_string(),\n+            features: \"+v7,+vfp4,+neon\".into(),\n             max_atomic_width: Some(64),\n             ..opts(\"ios\", Arch::Armv7s)\n         },"}, {"sha": "a90c7b7bc6f070fd23e948c0e9b7e0f6187fcfca", "filename": "compiler/rustc_target/src/spec/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -6,6 +6,6 @@ pub fn target() -> Target {\n         .post_link_args\n         .entry(LinkerFlavor::Em)\n         .or_default()\n-        .extend(vec![\"-s\".to_string(), \"WASM=0\".to_string()]);\n+        .extend(vec![\"-s\".into(), \"WASM=0\".into()]);\n     target\n }"}, {"sha": "c288e8b0e9ea3ae6fcdc38b4d4e92488ce354857", "filename": "compiler/rustc_target/src/spec/avr_gnu_base.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,24 +3,24 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n /// A base target for AVR devices using the GNU toolchain.\n ///\n /// Requires GNU avr-gcc and avr-binutils on the host system.\n-pub fn target(target_cpu: String) -> Target {\n+pub fn target(target_cpu: &'static str) -> Target {\n     Target {\n-        arch: \"avr\".to_string(),\n-        data_layout: \"e-P1-p:16:8-i8:8-i16:8-i32:8-i64:8-f32:8-f64:8-n8-a:8\".to_string(),\n-        llvm_target: \"avr-unknown-unknown\".to_string(),\n+        arch: \"avr\".into(),\n+        data_layout: \"e-P1-p:16:8-i8:8-i16:8-i32:8-i64:8-f32:8-f64:8-n8-a:8\".into(),\n+        llvm_target: \"avr-unknown-unknown\".into(),\n         pointer_width: 16,\n         options: TargetOptions {\n-            c_int_width: \"16\".to_string(),\n-            cpu: target_cpu.clone(),\n-            exe_suffix: \".elf\".to_string(),\n+            c_int_width: \"16\".into(),\n+            cpu: target_cpu.into(),\n+            exe_suffix: \".elf\".into(),\n \n-            linker: Some(\"avr-gcc\".to_owned()),\n+            linker: Some(\"avr-gcc\".into()),\n             executables: true,\n             eh_frame_header: false,\n-            pre_link_args: [(LinkerFlavor::Gcc, vec![format!(\"-mmcu={}\", target_cpu)])]\n+            pre_link_args: [(LinkerFlavor::Gcc, vec![format!(\"-mmcu={}\", target_cpu).into()])]\n                 .into_iter()\n                 .collect(),\n-            late_link_args: [(LinkerFlavor::Gcc, vec![\"-lgcc\".to_owned()])].into_iter().collect(),\n+            late_link_args: [(LinkerFlavor::Gcc, vec![\"-lgcc\".into()])].into_iter().collect(),\n             max_atomic_width: Some(0),\n             atomic_cas: false,\n             ..TargetOptions::default()"}, {"sha": "6871ca0f78936ab4538d7879f7e36429a56db0ae", "filename": "compiler/rustc_target/src/spec/avr_unknown_gnu_atmega328.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_unknown_gnu_atmega328.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_unknown_gnu_atmega328.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_unknown_gnu_atmega328.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,5 +1,5 @@\n use crate::spec::Target;\n \n pub fn target() -> Target {\n-    super::avr_gnu_base::target(\"atmega328\".to_owned())\n+    super::avr_gnu_base::target(\"atmega328\")\n }"}, {"sha": "174ddfa50bfc98a02d3bd3fc76b7fb56b6e0cb47", "filename": "compiler/rustc_target/src/spec/bpfeb_unknown_none.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfeb_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfeb_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfeb_unknown_none.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,10 +3,10 @@ use crate::{abi::Endian, spec::bpf_base};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"bpfeb\".to_string(),\n-        data_layout: \"E-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".to_string(),\n+        llvm_target: \"bpfeb\".into(),\n+        data_layout: \"E-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".into(),\n         pointer_width: 64,\n-        arch: \"bpf\".to_string(),\n+        arch: \"bpf\".into(),\n         options: bpf_base::opts(Endian::Big),\n     }\n }"}, {"sha": "7625e7b0e48ea08869a4acfa018d37c0619659c4", "filename": "compiler/rustc_target/src/spec/bpfel_unknown_none.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfel_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfel_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfel_unknown_none.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,10 +3,10 @@ use crate::{abi::Endian, spec::bpf_base};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"bpfel\".to_string(),\n-        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".to_string(),\n+        llvm_target: \"bpfel\".into(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".into(),\n         pointer_width: 64,\n-        arch: \"bpf\".to_string(),\n+        arch: \"bpf\".into(),\n         options: bpf_base::opts(Endian::Little),\n     }\n }"}, {"sha": "51f392a64b11b0d79167160a63faa2bcbd6c4684", "filename": "compiler/rustc_target/src/spec/crt_objects.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -42,16 +42,17 @@\n \n use crate::spec::LinkOutputKind;\n use rustc_serialize::json::{Json, ToJson};\n+use std::borrow::Cow;\n use std::collections::BTreeMap;\n use std::str::FromStr;\n \n-pub type CrtObjects = BTreeMap<LinkOutputKind, Vec<String>>;\n+pub type CrtObjects = BTreeMap<LinkOutputKind, Vec<Cow<'static, str>>>;\n \n-pub(super) fn new(obj_table: &[(LinkOutputKind, &[&str])]) -> CrtObjects {\n-    obj_table.iter().map(|(z, k)| (*z, k.iter().map(|b| b.to_string()).collect())).collect()\n+pub(super) fn new(obj_table: &[(LinkOutputKind, &[&'static str])]) -> CrtObjects {\n+    obj_table.iter().map(|(z, k)| (*z, k.iter().map(|b| (*b).into()).collect())).collect()\n }\n \n-pub(super) fn all(obj: &str) -> CrtObjects {\n+pub(super) fn all(obj: &'static str) -> CrtObjects {\n     new(&[\n         (LinkOutputKind::DynamicNoPicExe, &[obj]),\n         (LinkOutputKind::DynamicPicExe, &[obj]),"}, {"sha": "b59322d07f57aeff0b1f920a771e1a911d1d2fd9", "filename": "compiler/rustc_target/src/spec/dragonfly_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{RelroLevel, TargetOptions};\n+use crate::spec::{cvs, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        os: \"dragonfly\".to_string(),\n+        os: \"dragonfly\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".to_string()],\n+        families: cvs![\"unix\"],\n         has_rpath: true,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,"}, {"sha": "a7e0f9f7041273069d4c3d5a72460c8df0fb81f8", "filename": "compiler/rustc_target/src/spec/freebsd_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{RelroLevel, TargetOptions};\n+use crate::spec::{cvs, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        os: \"freebsd\".to_string(),\n+        os: \"freebsd\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".to_string()],\n+        families: cvs![\"unix\"],\n         has_rpath: true,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,"}, {"sha": "04e30ff0c3e6e90b03d63625fe5396341d0dd610", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,31 +1,33 @@\n-use crate::spec::{crt_objects, LinkArgs, LinkOutputKind, LinkerFlavor, LldFlavor, TargetOptions};\n+use crate::spec::{\n+    crt_objects, cvs, LinkArgs, LinkOutputKind, LinkerFlavor, LldFlavor, TargetOptions,\n+};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n     pre_link_args.insert(\n         LinkerFlavor::Lld(LldFlavor::Ld),\n         vec![\n-            \"--build-id\".to_string(),\n-            \"--hash-style=gnu\".to_string(),\n-            \"-z\".to_string(),\n-            \"max-page-size=4096\".to_string(),\n-            \"-z\".to_string(),\n-            \"now\".to_string(),\n-            \"-z\".to_string(),\n-            \"rodynamic\".to_string(),\n-            \"-z\".to_string(),\n-            \"separate-loadable-segments\".to_string(),\n-            \"--pack-dyn-relocs=relr\".to_string(),\n+            \"--build-id\".into(),\n+            \"--hash-style=gnu\".into(),\n+            \"-z\".into(),\n+            \"max-page-size=4096\".into(),\n+            \"-z\".into(),\n+            \"now\".into(),\n+            \"-z\".into(),\n+            \"rodynamic\".into(),\n+            \"-z\".into(),\n+            \"separate-loadable-segments\".into(),\n+            \"--pack-dyn-relocs=relr\".into(),\n         ],\n     );\n \n     TargetOptions {\n-        os: \"fuchsia\".to_string(),\n+        os: \"fuchsia\".into(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-        linker: Some(\"rust-lld\".to_owned()),\n+        linker: Some(\"rust-lld\".into()),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".to_string()],\n+        families: cvs![\"unix\"],\n         is_like_fuchsia: true,\n         pre_link_args,\n         pre_link_objects: crt_objects::new(&["}, {"sha": "61c05a2bdb621257402bd2074b04c08de4bd8db0", "filename": "compiler/rustc_target/src/spec/haiku_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{RelroLevel, TargetOptions};\n+use crate::spec::{cvs, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        os: \"haiku\".to_string(),\n+        os: \"haiku\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".to_string()],\n+        families: cvs![\"unix\"],\n         relro_level: RelroLevel::Full,\n         ..Default::default()\n     }"}, {"sha": "7cbd42417e6a057157724c5e0e970cc2caf4bc57", "filename": "compiler/rustc_target/src/spec/hermit_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -4,13 +4,13 @@ pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n     pre_link_args.insert(\n         LinkerFlavor::Lld(LldFlavor::Ld),\n-        vec![\"--build-id\".to_string(), \"--hash-style=gnu\".to_string(), \"--Bstatic\".to_string()],\n+        vec![\"--build-id\".into(), \"--hash-style=gnu\".into(), \"--Bstatic\".into()],\n     );\n \n     TargetOptions {\n-        os: \"hermit\".to_string(),\n+        os: \"hermit\".into(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-        linker: Some(\"rust-lld\".to_owned()),\n+        linker: Some(\"rust-lld\".into()),\n         executables: true,\n         has_thread_local: true,\n         pre_link_args,"}, {"sha": "80cf09517cc2c8a7dc783f4dccdaff6cc1afde15", "filename": "compiler/rustc_target/src/spec/hexagon_unknown_linux_musl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,10 +2,10 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n-    base.cpu = \"hexagonv60\".to_string();\n+    base.cpu = \"hexagonv60\".into();\n     base.max_atomic_width = Some(32);\n     // FIXME: HVX length defaults are per-CPU\n-    base.features = \"-small-data,+hvx-length128b\".to_string();\n+    base.features = \"-small-data,+hvx-length128b\".into();\n \n     base.crt_static_default = false;\n     base.has_rpath = true;\n@@ -16,16 +16,16 @@ pub fn target() -> Target {\n     base.c_enum_min_bits = 8;\n \n     Target {\n-        llvm_target: \"hexagon-unknown-linux-musl\".to_string(),\n+        llvm_target: \"hexagon-unknown-linux-musl\".into(),\n         pointer_width: 32,\n         data_layout: concat!(\n             \"e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32\",\n             \":32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32\",\n             \":32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048\",\n             \":2048:2048\"\n         )\n-        .to_string(),\n-        arch: \"hexagon\".to_string(),\n+        .into(),\n+        arch: \"hexagon\".into(),\n         options: base,\n     }\n }"}, {"sha": "8b6266c58005dba5f9bef461c374b240cddc6c3b", "filename": "compiler/rustc_target/src/spec/i386_apple_ios.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,13 +3,15 @@ use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = opts(\"ios\", Arch::I386);\n+    let llvm_target = super::apple_base::ios_sim_llvm_target(\"i386\");\n+\n     Target {\n-        llvm_target: super::apple_base::ios_sim_llvm_target(\"i386\"),\n+        llvm_target: llvm_target.into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:128-n8:16:32-S128\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n+            .into(),\n+        arch: \"x86\".into(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved"}, {"sha": "801a88933994a830f914276b0503958fe3489a8f", "filename": "compiler/rustc_target/src/spec/i386_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::i686_unknown_linux_gnu::target();\n-    base.cpu = \"i386\".to_string();\n-    base.llvm_target = \"i386-unknown-linux-gnu\".to_string();\n+    base.cpu = \"i386\".into();\n+    base.llvm_target = \"i386-unknown-linux-gnu\".into();\n     base\n }"}, {"sha": "a11fbecc3c3549e157f9e8f4f0ef2162dbb5d640", "filename": "compiler/rustc_target/src/spec/i486_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi486_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi486_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi486_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::i686_unknown_linux_gnu::target();\n-    base.cpu = \"i486\".to_string();\n-    base.llvm_target = \"i486-unknown-linux-gnu\".to_string();\n+    base.cpu = \"i486\".into();\n+    base.llvm_target = \"i486-unknown-linux-gnu\".into();\n     base\n }"}, {"sha": "befb0f89f3b032f436d7f611d285778ac88eb9cf", "filename": "compiler/rustc_target/src/spec/i586_pc_windows_msvc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_pc_windows_msvc.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::i686_pc_windows_msvc::target();\n-    base.cpu = \"pentium\".to_string();\n-    base.llvm_target = \"i586-pc-windows-msvc\".to_string();\n+    base.cpu = \"pentium\".into();\n+    base.llvm_target = \"i586-pc-windows-msvc\".into();\n     base\n }"}, {"sha": "b699a7af17749521e2bf1a503ed5c95239754b1a", "filename": "compiler/rustc_target/src/spec/i586_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::i686_unknown_linux_gnu::target();\n-    base.cpu = \"pentium\".to_string();\n-    base.llvm_target = \"i586-unknown-linux-gnu\".to_string();\n+    base.cpu = \"pentium\".into();\n+    base.llvm_target = \"i586-unknown-linux-gnu\".into();\n     base\n }"}, {"sha": "55a26eb004a7a78537fad7c18d5cacd418ad12d4", "filename": "compiler/rustc_target/src/spec/i586_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_musl.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::i686_unknown_linux_musl::target();\n-    base.cpu = \"pentium\".to_string();\n-    base.llvm_target = \"i586-unknown-linux-musl\".to_string();\n+    base.cpu = \"pentium\".into();\n+    base.llvm_target = \"i586-unknown-linux-musl\".into();\n     base\n }"}, {"sha": "ad716a6cd5aae149275254da6233676f2660b83e", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,10 +2,10 @@ use crate::spec::{FramePointer, LinkerFlavor, StackProbeType, Target, TargetOpti\n \n pub fn target() -> Target {\n     let mut base = super::apple_base::opts(\"macos\");\n-    base.cpu = \"yonah\".to_string();\n+    base.cpu = \"yonah\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n-    base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".into()]);\n+    base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.frame_pointer = FramePointer::Always;\n@@ -17,12 +17,12 @@ pub fn target() -> Target {\n     let llvm_target = super::apple_base::macos_llvm_target(&arch);\n \n     Target {\n-        llvm_target,\n+        llvm_target: llvm_target.into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:128-n8:16:32-S128\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n-        options: TargetOptions { mcount: \"\\u{1}mcount\".to_string(), ..base },\n+            .into(),\n+        arch: \"x86\".into(),\n+        options: TargetOptions { mcount: \"\\u{1}mcount\".into(), ..base },\n     }\n }"}, {"sha": "bdaf5c990699b00989e23134282b75b389005bc3", "filename": "compiler/rustc_target/src/spec/i686_linux_android.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -9,18 +9,18 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(64);\n \n     // https://developer.android.com/ndk/guides/abis.html#x86\n-    base.cpu = \"pentiumpro\".to_string();\n-    base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3\".to_string();\n+    base.cpu = \"pentiumpro\".into();\n+    base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3\".into();\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n \n     Target {\n-        llvm_target: \"i686-linux-android\".to_string(),\n+        llvm_target: \"i686-linux-android\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n+            .into(),\n+        arch: \"x86\".into(),\n         options: TargetOptions { supported_sanitizers: SanitizerSet::ADDRESS, ..base },\n     }\n }"}, {"sha": "554b0f3449945c2ec929a10a909ac09de1d08df9", "filename": "compiler/rustc_target/src/spec/i686_pc_windows_gnu.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,27 +2,26 @@ use crate::spec::{FramePointer, LinkerFlavor, LldFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_gnu_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n-    base.pre_link_args\n-        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".to_string(), \"i386pe\".to_string()]);\n+    base.cpu = \"pentium4\".into();\n+    base.pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".into(), \"i386pe\".into()]);\n     base.max_atomic_width = Some(64);\n     base.frame_pointer = FramePointer::Always; // Required for backtraces\n-    base.linker = Some(\"i686-w64-mingw32-gcc\".to_string());\n+    base.linker = Some(\"i686-w64-mingw32-gcc\".into());\n \n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n     // space available to x86 Windows binaries on x86_64.\n     base.pre_link_args\n         .entry(LinkerFlavor::Gcc)\n         .or_default()\n-        .push(\"-Wl,--large-address-aware\".to_string());\n+        .push(\"-Wl,--large-address-aware\".into());\n \n     Target {\n-        llvm_target: \"i686-pc-windows-gnu\".to_string(),\n+        llvm_target: \"i686-pc-windows-gnu\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             i64:64-f80:32-n8:16:32-a:0:32-S32\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n+            .into(),\n+        arch: \"x86\".into(),\n         options: base,\n     }\n }"}, {"sha": "fb0cb6a69432a57a4f2925bc67584b541202bdbb", "filename": "compiler/rustc_target/src/spec/i686_pc_windows_msvc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,17 +2,17 @@ use crate::spec::{LinkerFlavor, LldFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n+    base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n \n     let pre_link_args_msvc = vec![\n         // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n         // space available to x86 Windows binaries on x86_64.\n-        \"/LARGEADDRESSAWARE\".to_string(),\n+        \"/LARGEADDRESSAWARE\".into(),\n         // Ensure the linker will only produce an image if it can also produce a table of\n         // the image's safe exception handlers.\n         // https://docs.microsoft.com/en-us/cpp/build/reference/safeseh-image-has-safe-exception-handlers\n-        \"/SAFESEH\".to_string(),\n+        \"/SAFESEH\".into(),\n     ];\n     base.pre_link_args.entry(LinkerFlavor::Msvc).or_default().extend(pre_link_args_msvc.clone());\n     base.pre_link_args\n@@ -23,12 +23,12 @@ pub fn target() -> Target {\n     base.has_thread_local = false;\n \n     Target {\n-        llvm_target: \"i686-pc-windows-msvc\".to_string(),\n+        llvm_target: \"i686-pc-windows-msvc\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             i64:64-f80:128-n8:16:32-a:0:32-S32\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n+            .into(),\n+        arch: \"x86\".into(),\n         options: base,\n     }\n }"}, {"sha": "9f0cb04c65db218acce1ba4227f8242d93265c20", "filename": "compiler/rustc_target/src/spec/i686_unknown_freebsd.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,21 +2,21 @@ use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n+    base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n     let pre_link_args = base.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n-    pre_link_args.push(\"-m32\".to_string());\n-    pre_link_args.push(\"-Wl,-znotext\".to_string());\n+    pre_link_args.push(\"-m32\".into());\n+    pre_link_args.push(\"-Wl,-znotext\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n \n     Target {\n-        llvm_target: \"i686-unknown-freebsd\".to_string(),\n+        llvm_target: \"i686-unknown-freebsd\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n+            .into(),\n+        arch: \"x86\".into(),\n         options: base,\n     }\n }"}, {"sha": "d1af163f1cff3142d27d797dd39ec67d1db84396", "filename": "compiler/rustc_target/src/spec/i686_unknown_haiku.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,19 +2,19 @@ use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::haiku_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n+    base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".into()]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n \n     Target {\n-        llvm_target: \"i686-unknown-haiku\".to_string(),\n+        llvm_target: \"i686-unknown-haiku\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n+            .into(),\n+        arch: \"x86\".into(),\n         options: base,\n     }\n }"}, {"sha": "0998c618f31a9359a2951053afa6b838f2026610", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,19 +2,19 @@ use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n+    base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n \n     Target {\n-        llvm_target: \"i686-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"i686-unknown-linux-gnu\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n+            .into(),\n+        arch: \"x86\".into(),\n         options: base,\n     }\n }"}, {"sha": "a697f292da0e2204e859b4c44c5b7d527f052586", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_musl.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,10 +2,10 @@ use crate::spec::{FramePointer, LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n+    base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-Wl,-melf_i386\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-Wl,-melf_i386\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n \n@@ -24,12 +24,12 @@ pub fn target() -> Target {\n     base.frame_pointer = FramePointer::Always;\n \n     Target {\n-        llvm_target: \"i686-unknown-linux-musl\".to_string(),\n+        llvm_target: \"i686-unknown-linux-musl\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n+            .into(),\n+        arch: \"x86\".into(),\n         options: base,\n     }\n }"}, {"sha": "2807d3282054039fb43a73f0683f4c2f11edb40a", "filename": "compiler/rustc_target/src/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,19 +2,19 @@ use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n+    base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n \n     Target {\n-        llvm_target: \"i686-unknown-netbsdelf\".to_string(),\n+        llvm_target: \"i686-unknown-netbsdelf\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n-        options: TargetOptions { mcount: \"__mcount\".to_string(), ..base },\n+            .into(),\n+        arch: \"x86\".into(),\n+        options: TargetOptions { mcount: \"__mcount\".into(), ..base },\n     }\n }"}, {"sha": "78462eb63b807b85a50f12938bb96fddd0daed8c", "filename": "compiler/rustc_target/src/spec/i686_unknown_openbsd.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,20 +2,20 @@ use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n+    base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-fuse-ld=lld\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-fuse-ld=lld\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n \n     Target {\n-        llvm_target: \"i686-unknown-openbsd\".to_string(),\n+        llvm_target: \"i686-unknown-openbsd\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n+            .into(),\n+        arch: \"x86\".into(),\n         options: base,\n     }\n }"}, {"sha": "a2e42c5e61d54afb86bf06dd6282ca35a6636a91", "filename": "compiler/rustc_target/src/spec/i686_unknown_uefi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_uefi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -9,7 +9,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::uefi_msvc_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n+    base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n \n     // We disable MMX and SSE for now, even though UEFI allows using them. Problem is, you have to\n@@ -21,7 +21,7 @@ pub fn target() -> Target {\n     // far.\n     // If you initialize FP units yourself, you can override these flags with custom linker\n     // arguments, thus giving you access to full MMX/SSE acceleration.\n-    base.features = \"-mmx,-sse,+soft-float\".to_string();\n+    base.features = \"-mmx,-sse,+soft-float\".into();\n \n     // Use -GNU here, because of the reason below:\n     // Background and Problem:\n@@ -77,12 +77,12 @@ pub fn target() -> Target {\n     // compiler-builtins. After compiler-builtins implements all required intrinsics, we may\n     // remove -gnu and use the default one.\n     Target {\n-        llvm_target: \"i686-unknown-windows-gnu\".to_string(),\n+        llvm_target: \"i686-unknown-windows-gnu\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             i64:64-f80:32-n8:16:32-a:0:32-S32\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n+            .into(),\n+        arch: \"x86\".into(),\n \n         options: base,\n     }"}, {"sha": "75f7a2209c8bd04d5c51af39c120480cd56dc17d", "filename": "compiler/rustc_target/src/spec/i686_uwp_windows_gnu.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,9 +2,8 @@ use crate::spec::{FramePointer, LinkerFlavor, LldFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_uwp_gnu_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n-    base.pre_link_args\n-        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".to_string(), \"i386pe\".to_string()]);\n+    base.cpu = \"pentium4\".into();\n+    base.pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".into(), \"i386pe\".into()]);\n     base.max_atomic_width = Some(64);\n     base.frame_pointer = FramePointer::Always; // Required for backtraces\n \n@@ -13,15 +12,15 @@ pub fn target() -> Target {\n     base.pre_link_args\n         .entry(LinkerFlavor::Gcc)\n         .or_default()\n-        .push(\"-Wl,--large-address-aware\".to_string());\n+        .push(\"-Wl,--large-address-aware\".into());\n \n     Target {\n-        llvm_target: \"i686-pc-windows-gnu\".to_string(),\n+        llvm_target: \"i686-pc-windows-gnu\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             i64:64-f80:32-n8:16:32-a:0:32-S32\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n+            .into(),\n+        arch: \"x86\".into(),\n         options: base,\n     }\n }"}, {"sha": "4c657fe908ac47bfe4ad9a619d06afe8ea0e7a4d", "filename": "compiler/rustc_target/src/spec/i686_uwp_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_msvc.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,16 +2,16 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n+    base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n \n     Target {\n-        llvm_target: \"i686-pc-windows-msvc\".to_string(),\n+        llvm_target: \"i686-pc-windows-msvc\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             i64:64-f80:128-n8:16:32-a:0:32-S32\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n+            .into(),\n+        arch: \"x86\".into(),\n         options: base,\n     }\n }"}, {"sha": "d51ed7c1f7aa8106bc740136c55bb85ac8e9f8ab", "filename": "compiler/rustc_target/src/spec/i686_wrs_vxworks.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,19 +2,19 @@ use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n+    base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n \n     Target {\n-        llvm_target: \"i686-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"i686-unknown-linux-gnu\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n+            .into(),\n+        arch: \"x86\".into(),\n         options: base,\n     }\n }"}, {"sha": "ef8f90a4da8c46dc04c420d75f763896be8ba8fc", "filename": "compiler/rustc_target/src/spec/illumos_base.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,5 +1,4 @@\n-use crate::spec::{FramePointer, LinkArgs, LinkerFlavor, TargetOptions};\n-use std::default::Default;\n+use crate::spec::{cvs, FramePointer, LinkArgs, LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut late_link_args = LinkArgs::new();\n@@ -16,22 +15,22 @@ pub fn opts() -> TargetOptions {\n             // FIXME: This should be replaced by a more complete and generic\n             // mechanism for controlling the order of library arguments passed\n             // to the linker.\n-            \"-lc\".to_string(),\n+            \"-lc\".into(),\n             // LLVM will insert calls to the stack protector functions\n             // \"__stack_chk_fail\" and \"__stack_chk_guard\" into code in native\n             // object files.  Some platforms include these symbols directly in\n             // libc, but at least historically these have been provided in\n             // libssp.so on illumos and Solaris systems.\n-            \"-lssp\".to_string(),\n+            \"-lssp\".into(),\n         ],\n     );\n \n     TargetOptions {\n-        os: \"illumos\".to_string(),\n+        os: \"illumos\".into(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,\n-        families: vec![\"unix\".to_string()],\n+        families: cvs![\"unix\"],\n         is_like_solaris: true,\n         linker_is_gnu: false,\n         limit_rdylib_exports: false, // Linker doesn't support this\n@@ -54,8 +53,8 @@ pub fn opts() -> TargetOptions {\n         //\n         // We want XPG6 behavior from libc and libm.  See standards(5)\n         //pre_link_objects_exe: vec![\n-        //    \"/usr/lib/amd64/values-Xc.o\".to_string(),\n-        //    \"/usr/lib/amd64/values-xpg6.o\".to_string(),\n+        //    \"/usr/lib/amd64/values-Xc.o\".into(),\n+        //    \"/usr/lib/amd64/values-xpg6.o\".into(),\n         //],\n         ..Default::default()\n     }"}, {"sha": "7a051532f82e39b8f7ac38d9c5eafb21466ef2a7", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,16 +1,15 @@\n-use crate::spec::{LinkerFlavor, PanicStrategy, TargetOptions};\n-use std::default::Default;\n+use crate::spec::{cvs, LinkerFlavor, PanicStrategy, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        os: \"l4re\".to_string(),\n-        env: \"uclibc\".to_string(),\n+        os: \"l4re\".into(),\n+        env: \"uclibc\".into(),\n         linker_flavor: LinkerFlavor::L4Bender,\n         executables: true,\n         panic_strategy: PanicStrategy::Abort,\n-        linker: Some(\"l4-bender\".to_string()),\n+        linker: Some(\"l4-bender\".into()),\n         linker_is_gnu: false,\n-        families: vec![\"unix\".to_string()],\n+        families: cvs![\"unix\"],\n         ..Default::default()\n     }\n }"}, {"sha": "0f79ada0d933219b2b95ba1774cd7a8b3af980bf", "filename": "compiler/rustc_target/src/spec/linux_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{RelroLevel, TargetOptions};\n+use crate::spec::{cvs, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        os: \"linux\".to_string(),\n+        os: \"linux\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".to_string()],\n+        families: cvs![\"unix\"],\n         has_rpath: true,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,"}, {"sha": "8d6b3f185122ca584adb62dc8cecdc0998491abd", "filename": "compiler/rustc_target/src/spec/linux_gnu_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_gnu_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,5 +1,5 @@\n use crate::spec::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n-    TargetOptions { env: \"gnu\".to_string(), ..super::linux_base::opts() }\n+    TargetOptions { env: \"gnu\".into(), ..super::linux_base::opts() }\n }"}, {"sha": "0f5d85205f897a6420997581977d2f29dbd358b6", "filename": "compiler/rustc_target/src/spec/linux_kernel_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{FramePointer, PanicStrategy, RelocModel, RelroLevel, StackProb\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        env: \"gnu\".to_string(),\n+        env: \"gnu\".into(),\n         disable_redzone: true,\n         panic_strategy: PanicStrategy::Abort,\n         // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved"}, {"sha": "207a87ab0390328cc3763860b4105d9f8e22fc16", "filename": "compiler/rustc_target/src/spec/linux_musl_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -4,7 +4,7 @@ use crate::spec::TargetOptions;\n pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();\n \n-    base.env = \"musl\".to_string();\n+    base.env = \"musl\".into();\n     base.pre_link_objects_fallback = crt_objects::pre_musl_fallback();\n     base.post_link_objects_fallback = crt_objects::post_musl_fallback();\n     base.crt_objects_fallback = Some(CrtObjectsFallback::Musl);"}, {"sha": "4ba480ffecffde00d61073591f687b51184a9e4f", "filename": "compiler/rustc_target/src/spec/linux_uclibc_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_uclibc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_uclibc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_uclibc_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,5 +1,5 @@\n use crate::spec::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n-    TargetOptions { env: \"uclibc\".to_string(), ..super::linux_base::opts() }\n+    TargetOptions { env: \"uclibc\".into(), ..super::linux_base::opts() }\n }"}, {"sha": "ebd74012dcd2c761ff4d3a4e0872c4f912c68a73", "filename": "compiler/rustc_target/src/spec/m68k_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fm68k_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fm68k_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fm68k_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -6,10 +6,10 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(32);\n \n     Target {\n-        llvm_target: \"m68k-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"m68k-unknown-linux-gnu\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:e-p:32:16:32-i8:8:8-i16:16:16-i32:16:32-n8:16:32-a:0:16-S16\".to_string(),\n-        arch: \"m68k\".to_string(),\n-        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n+        data_layout: \"E-m:e-p:32:16:32-i8:8:8-i16:16:16-i32:16:32-n8:16:32-a:0:16-S16\".into(),\n+        arch: \"m68k\".into(),\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".into(), ..base },\n     }\n }"}, {"sha": "3c6ef52c6cd7079e352e3b3f90bf40e478efca12", "filename": "compiler/rustc_target/src/spec/mips64_openwrt_linux_musl.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_openwrt_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_openwrt_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_openwrt_linux_musl.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,21 +5,21 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n-    base.cpu = \"mips64r2\".to_string();\n-    base.features = \"+mips64r2,+soft-float\".to_string();\n+    base.cpu = \"mips64r2\".into();\n+    base.features = \"+mips64r2,+soft-float\".into();\n     base.max_atomic_width = Some(64);\n     base.crt_static_default = false;\n \n     Target {\n         // LLVM doesn't recognize \"muslabi64\" yet.\n-        llvm_target: \"mips64-unknown-linux-musl\".to_string(),\n+        llvm_target: \"mips64-unknown-linux-musl\".into(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n-        arch: \"mips64\".to_string(),\n+        data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".into(),\n+        arch: \"mips64\".into(),\n         options: TargetOptions {\n-            abi: \"abi64\".to_string(),\n+            abi: \"abi64\".into(),\n             endian: Endian::Big,\n-            mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".into(),\n             ..base\n         },\n     }"}, {"sha": "fc5dbd114e425abcaf70606d675a5a11c54a5178", "filename": "compiler/rustc_target/src/spec/mips64_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,18 +3,18 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"mips64-unknown-linux-gnuabi64\".to_string(),\n+        llvm_target: \"mips64-unknown-linux-gnuabi64\".into(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n-        arch: \"mips64\".to_string(),\n+        data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".into(),\n+        arch: \"mips64\".into(),\n         options: TargetOptions {\n-            abi: \"abi64\".to_string(),\n+            abi: \"abi64\".into(),\n             endian: Endian::Big,\n             // NOTE(mips64r2) matches C toolchain\n-            cpu: \"mips64r2\".to_string(),\n-            features: \"+mips64r2\".to_string(),\n+            cpu: \"mips64r2\".into(),\n+            features: \"+mips64r2\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".into(),\n \n             ..super::linux_gnu_base::opts()\n         },"}, {"sha": "465e97a026c58fa2af6319aac0597e4e94ad80b6", "filename": "compiler/rustc_target/src/spec/mips64_unknown_linux_muslabi64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,19 +3,19 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n-    base.cpu = \"mips64r2\".to_string();\n-    base.features = \"+mips64r2\".to_string();\n+    base.cpu = \"mips64r2\".into();\n+    base.features = \"+mips64r2\".into();\n     base.max_atomic_width = Some(64);\n     Target {\n         // LLVM doesn't recognize \"muslabi64\" yet.\n-        llvm_target: \"mips64-unknown-linux-musl\".to_string(),\n+        llvm_target: \"mips64-unknown-linux-musl\".into(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n-        arch: \"mips64\".to_string(),\n+        data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".into(),\n+        arch: \"mips64\".into(),\n         options: TargetOptions {\n-            abi: \"abi64\".to_string(),\n+            abi: \"abi64\".into(),\n             endian: Endian::Big,\n-            mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".into(),\n             ..base\n         },\n     }"}, {"sha": "e0d5f6f57f15604b632f063df399e860a630b358", "filename": "compiler/rustc_target/src/spec/mips64el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,17 +2,17 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"mips64el-unknown-linux-gnuabi64\".to_string(),\n+        llvm_target: \"mips64el-unknown-linux-gnuabi64\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n-        arch: \"mips64\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".into(),\n+        arch: \"mips64\".into(),\n         options: TargetOptions {\n-            abi: \"abi64\".to_string(),\n+            abi: \"abi64\".into(),\n             // NOTE(mips64r2) matches C toolchain\n-            cpu: \"mips64r2\".to_string(),\n-            features: \"+mips64r2\".to_string(),\n+            cpu: \"mips64r2\".into(),\n+            features: \"+mips64r2\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".into(),\n \n             ..super::linux_gnu_base::opts()\n         },"}, {"sha": "75575eb7eebde94066224de2db95fb8c41d5d382", "filename": "compiler/rustc_target/src/spec/mips64el_unknown_linux_muslabi64.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,15 +2,15 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n-    base.cpu = \"mips64r2\".to_string();\n-    base.features = \"+mips64r2\".to_string();\n+    base.cpu = \"mips64r2\".into();\n+    base.features = \"+mips64r2\".into();\n     base.max_atomic_width = Some(64);\n     Target {\n         // LLVM doesn't recognize \"muslabi64\" yet.\n-        llvm_target: \"mips64el-unknown-linux-musl\".to_string(),\n+        llvm_target: \"mips64el-unknown-linux-musl\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n-        arch: \"mips64\".to_string(),\n-        options: TargetOptions { abi: \"abi64\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".into(),\n+        arch: \"mips64\".into(),\n+        options: TargetOptions { abi: \"abi64\".into(), mcount: \"_mcount\".into(), ..base },\n     }\n }"}, {"sha": "8df8b0b4c2c7a98b085efa93516b023fc94b168e", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,16 +3,16 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"mips-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"mips-unknown-linux-gnu\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n-        arch: \"mips\".to_string(),\n+        data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".into(),\n+        arch: \"mips\".into(),\n         options: TargetOptions {\n             endian: Endian::Big,\n-            cpu: \"mips32r2\".to_string(),\n-            features: \"+mips32r2,+fpxx,+nooddspreg\".to_string(),\n+            cpu: \"mips32r2\".into(),\n+            features: \"+mips32r2,+fpxx,+nooddspreg\".into(),\n             max_atomic_width: Some(32),\n-            mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".into(),\n \n             ..super::linux_gnu_base::opts()\n         },"}, {"sha": "c2846313a9eb1257f881332d319a2996240ada67", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_musl.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,15 +3,15 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n-    base.cpu = \"mips32r2\".to_string();\n-    base.features = \"+mips32r2,+soft-float\".to_string();\n+    base.cpu = \"mips32r2\".into();\n+    base.features = \"+mips32r2,+soft-float\".into();\n     base.max_atomic_width = Some(32);\n     base.crt_static_default = false;\n     Target {\n-        llvm_target: \"mips-unknown-linux-musl\".to_string(),\n+        llvm_target: \"mips-unknown-linux-musl\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n-        arch: \"mips\".to_string(),\n-        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n+        data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".into(),\n+        arch: \"mips\".into(),\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".into(), ..base },\n     }\n }"}, {"sha": "c59bb5fdd223d387426a1f6bea2332562c62e376", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_uclibc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,16 +3,16 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"mips-unknown-linux-uclibc\".to_string(),\n+        llvm_target: \"mips-unknown-linux-uclibc\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n-        arch: \"mips\".to_string(),\n+        data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".into(),\n+        arch: \"mips\".into(),\n         options: TargetOptions {\n             endian: Endian::Big,\n-            cpu: \"mips32r2\".to_string(),\n-            features: \"+mips32r2,+soft-float\".to_string(),\n+            cpu: \"mips32r2\".into(),\n+            features: \"+mips32r2,+soft-float\".into(),\n             max_atomic_width: Some(32),\n-            mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".into(),\n \n             ..super::linux_uclibc_base::opts()\n         },"}, {"sha": "45966b97d6abcb074a225ead00bf1abd4774576c", "filename": "compiler/rustc_target/src/spec/mipsel_sony_psp.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,35 +1,35 @@\n+use crate::spec::{cvs, Target, TargetOptions};\n use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, RelocModel};\n-use crate::spec::{Target, TargetOptions};\n \n // The PSP has custom linker requirements.\n const LINKER_SCRIPT: &str = include_str!(\"./mipsel_sony_psp_linker_script.ld\");\n \n pub fn target() -> Target {\n     let mut pre_link_args = LinkArgs::new();\n-    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"--emit-relocs\".to_string()]);\n+    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"--emit-relocs\".into()]);\n \n     Target {\n-        llvm_target: \"mipsel-sony-psp\".to_string(),\n+        llvm_target: \"mipsel-sony-psp\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n-        arch: \"mips\".to_string(),\n+        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".into(),\n+        arch: \"mips\".into(),\n \n         options: TargetOptions {\n-            os: \"psp\".to_string(),\n-            vendor: \"sony\".to_string(),\n+            os: \"psp\".into(),\n+            vendor: \"sony\".into(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-            cpu: \"mips2\".to_string(),\n+            cpu: \"mips2\".into(),\n             executables: true,\n-            linker: Some(\"rust-lld\".to_owned()),\n+            linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n \n             // PSP FPU only supports single precision floats.\n-            features: \"+single-float\".to_string(),\n+            features: \"+single-float\".into(),\n \n             // PSP does not support trap-on-condition instructions.\n-            llvm_args: vec![\"-mno-check-zero-division\".to_string()],\n+            llvm_args: cvs![\"-mno-check-zero-division\"],\n             pre_link_args,\n-            link_script: Some(LINKER_SCRIPT.to_string()),\n+            link_script: Some(LINKER_SCRIPT.into()),\n             ..Default::default()\n         },\n     }"}, {"sha": "01346e71a92ffb59e4ee8a4ed3113c7c2de77bb6", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_linux_gnu.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,16 +2,16 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"mipsel-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"mipsel-unknown-linux-gnu\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n-        arch: \"mips\".to_string(),\n+        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".into(),\n+        arch: \"mips\".into(),\n \n         options: TargetOptions {\n-            cpu: \"mips32r2\".to_string(),\n-            features: \"+mips32r2,+fpxx,+nooddspreg\".to_string(),\n+            cpu: \"mips32r2\".into(),\n+            features: \"+mips32r2,+fpxx,+nooddspreg\".into(),\n             max_atomic_width: Some(32),\n-            mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".into(),\n \n             ..super::linux_gnu_base::opts()\n         },"}, {"sha": "0e8f1a2c8e0ea33e15d05dd2c90e104bc36f6730", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_linux_musl.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_musl.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,15 +2,15 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n-    base.cpu = \"mips32r2\".to_string();\n-    base.features = \"+mips32r2,+soft-float\".to_string();\n+    base.cpu = \"mips32r2\".into();\n+    base.features = \"+mips32r2,+soft-float\".into();\n     base.max_atomic_width = Some(32);\n     base.crt_static_default = false;\n     Target {\n-        llvm_target: \"mipsel-unknown-linux-musl\".to_string(),\n+        llvm_target: \"mipsel-unknown-linux-musl\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n-        arch: \"mips\".to_string(),\n-        options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n+        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".into(),\n+        arch: \"mips\".into(),\n+        options: TargetOptions { mcount: \"_mcount\".into(), ..base },\n     }\n }"}, {"sha": "8342074586bc7decab1f6692ff5d5f069605d74f", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_linux_uclibc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_uclibc.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,16 +2,16 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"mipsel-unknown-linux-uclibc\".to_string(),\n+        llvm_target: \"mipsel-unknown-linux-uclibc\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n-        arch: \"mips\".to_string(),\n+        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".into(),\n+        arch: \"mips\".into(),\n \n         options: TargetOptions {\n-            cpu: \"mips32r2\".to_string(),\n-            features: \"+mips32r2,+soft-float\".to_string(),\n+            cpu: \"mips32r2\".into(),\n+            features: \"+mips32r2,+soft-float\".into(),\n             max_atomic_width: Some(32),\n-            mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".into(),\n \n             ..super::linux_uclibc_base::opts()\n         },"}, {"sha": "736af15cf449aa80e7bea41a12b93568e1f9f302", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_none.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -7,18 +7,18 @@ use crate::spec::{PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"mipsel-unknown-none\".to_string(),\n+        llvm_target: \"mipsel-unknown-none\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n-        arch: \"mips\".to_string(),\n+        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".into(),\n+        arch: \"mips\".into(),\n \n         options: TargetOptions {\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-            cpu: \"mips32r2\".to_string(),\n-            features: \"+mips32r2,+soft-float,+noabicalls\".to_string(),\n+            cpu: \"mips32r2\".into(),\n+            features: \"+mips32r2,+soft-float,+noabicalls\".into(),\n             max_atomic_width: Some(32),\n             executables: true,\n-            linker: Some(\"rust-lld\".to_owned()),\n+            linker: Some(\"rust-lld\".into()),\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,"}, {"sha": "1e066b271e28a2cef9fd058df653d5f49f7b6f64", "filename": "compiler/rustc_target/src/spec/mipsisa32r6_unknown_linux_gnu.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,16 +3,16 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"mipsisa32r6-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"mipsisa32r6-unknown-linux-gnu\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n-        arch: \"mips\".to_string(),\n+        data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".into(),\n+        arch: \"mips\".into(),\n         options: TargetOptions {\n             endian: Endian::Big,\n-            cpu: \"mips32r6\".to_string(),\n-            features: \"+mips32r6\".to_string(),\n+            cpu: \"mips32r6\".into(),\n+            features: \"+mips32r6\".into(),\n             max_atomic_width: Some(32),\n-            mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".into(),\n \n             ..super::linux_gnu_base::opts()\n         },"}, {"sha": "4785929c1000bf15e123357f32cd0d9bbcf13475", "filename": "compiler/rustc_target/src/spec/mipsisa32r6el_unknown_linux_gnu.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,16 +2,16 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"mipsisa32r6el-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"mipsisa32r6el-unknown-linux-gnu\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n-        arch: \"mips\".to_string(),\n+        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".into(),\n+        arch: \"mips\".into(),\n \n         options: TargetOptions {\n-            cpu: \"mips32r6\".to_string(),\n-            features: \"+mips32r6\".to_string(),\n+            cpu: \"mips32r6\".into(),\n+            features: \"+mips32r6\".into(),\n             max_atomic_width: Some(32),\n-            mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".into(),\n \n             ..super::linux_gnu_base::opts()\n         },"}, {"sha": "766ac7680644881ffa8adb7931ac12d8a41ded82", "filename": "compiler/rustc_target/src/spec/mipsisa64r6_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,18 +3,18 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"mipsisa64r6-unknown-linux-gnuabi64\".to_string(),\n+        llvm_target: \"mipsisa64r6-unknown-linux-gnuabi64\".into(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n-        arch: \"mips64\".to_string(),\n+        data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".into(),\n+        arch: \"mips64\".into(),\n         options: TargetOptions {\n-            abi: \"abi64\".to_string(),\n+            abi: \"abi64\".into(),\n             endian: Endian::Big,\n             // NOTE(mips64r6) matches C toolchain\n-            cpu: \"mips64r6\".to_string(),\n-            features: \"+mips64r6\".to_string(),\n+            cpu: \"mips64r6\".into(),\n+            features: \"+mips64r6\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".into(),\n \n             ..super::linux_gnu_base::opts()\n         },"}, {"sha": "d2b07c654dcf88176f285a01a9b6fe92669cca6c", "filename": "compiler/rustc_target/src/spec/mipsisa64r6el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,17 +2,17 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"mipsisa64r6el-unknown-linux-gnuabi64\".to_string(),\n+        llvm_target: \"mipsisa64r6el-unknown-linux-gnuabi64\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n-        arch: \"mips64\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".into(),\n+        arch: \"mips64\".into(),\n         options: TargetOptions {\n-            abi: \"abi64\".to_string(),\n+            abi: \"abi64\".into(),\n             // NOTE(mips64r6) matches C toolchain\n-            cpu: \"mips64r6\".to_string(),\n-            features: \"+mips64r6\".to_string(),\n+            cpu: \"mips64r6\".into(),\n+            features: \"+mips64r6\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".into(),\n \n             ..super::linux_gnu_base::opts()\n         },"}, {"sha": "bd5b712c143c5047c133fb62db6771b447c98eec", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 93, "deletions": 74, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -40,6 +40,7 @@ use crate::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_serialize::json::{Json, ToJson};\n use rustc_span::symbol::{sym, Symbol};\n+use std::borrow::Cow;\n use std::collections::BTreeMap;\n use std::convert::TryFrom;\n use std::iter::FromIterator;\n@@ -458,7 +459,7 @@ impl fmt::Display for LinkOutputKind {\n     }\n }\n \n-pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<String>>;\n+pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<StaticCow<str>>>;\n \n #[derive(Clone, Copy, Hash, Debug, PartialEq, Eq)]\n pub enum SplitDebuginfo {\n@@ -1026,6 +1027,22 @@ supported_targets! {\n     (\"mips64-openwrt-linux-musl\", mips64_openwrt_linux_musl),\n }\n \n+/// Cow-Vec-Str: Cow<'static, [Cow<'static, str>]>\n+macro_rules! cvs {\n+    () => {\n+        ::std::borrow::Cow::Borrowed(&[])\n+    };\n+    ($($x:expr),+ $(,)?) => {\n+        ::std::borrow::Cow::Borrowed(&[\n+            $(\n+                ::std::borrow::Cow::Borrowed($x),\n+            )*\n+        ])\n+    };\n+}\n+\n+pub(crate) use cvs;\n+\n /// Warnings encountered when parsing the target `json`.\n ///\n /// Includes fields that weren't recognized and fields that don't have the expected type.\n@@ -1064,14 +1081,14 @@ impl TargetWarnings {\n #[derive(PartialEq, Clone, Debug)]\n pub struct Target {\n     /// Target triple to pass to LLVM.\n-    pub llvm_target: String,\n+    pub llvm_target: StaticCow<str>,\n     /// Number of bits in a pointer. Influences the `target_pointer_width` `cfg` variable.\n     pub pointer_width: u32,\n     /// Architecture to use for ABI considerations. Valid options include: \"x86\",\n     /// \"x86_64\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"powerpc64\", and others.\n-    pub arch: String,\n+    pub arch: StaticCow<str>,\n     /// [Data layout](https://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n-    pub data_layout: String,\n+    pub data_layout: StaticCow<str>,\n     /// Optional settings with defaults.\n     pub options: TargetOptions,\n }\n@@ -1087,6 +1104,8 @@ impl HasTargetSpec for Target {\n     }\n }\n \n+type StaticCow<T> = Cow<'static, T>;\n+\n /// Optional aspects of a target specification.\n ///\n /// This has an implementation of `Default`, see each field for what the default is. In general,\n@@ -1103,25 +1122,25 @@ pub struct TargetOptions {\n     /// Used as the `target_endian` `cfg` variable. Defaults to little endian.\n     pub endian: Endian,\n     /// Width of c_int type. Defaults to \"32\".\n-    pub c_int_width: String,\n+    pub c_int_width: StaticCow<str>,\n     /// OS name to use for conditional compilation (`target_os`). Defaults to \"none\".\n     /// \"none\" implies a bare metal target without `std` library.\n     /// A couple of targets having `std` also use \"unknown\" as an `os` value,\n     /// but they are exceptions.\n-    pub os: String,\n+    pub os: StaticCow<str>,\n     /// Environment name to use for conditional compilation (`target_env`). Defaults to \"\".\n-    pub env: String,\n+    pub env: StaticCow<str>,\n     /// ABI name to distinguish multiple ABIs on the same OS and architecture. For instance, `\"eabi\"`\n     /// or `\"eabihf\"`. Defaults to \"\".\n-    pub abi: String,\n+    pub abi: StaticCow<str>,\n     /// Vendor name to use for conditional compilation (`target_vendor`). Defaults to \"unknown\".\n-    pub vendor: String,\n+    pub vendor: StaticCow<str>,\n     /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n     /// on the command line. Defaults to `LinkerFlavor::Gcc`.\n     pub linker_flavor: LinkerFlavor,\n \n     /// Linker to invoke\n-    pub linker: Option<String>,\n+    pub linker: Option<StaticCow<str>>,\n \n     /// LLD flavor used if `lld` (or `rust-lld`) is specified as a linker\n     /// without clarifying its flavor in any way.\n@@ -1156,23 +1175,23 @@ pub struct TargetOptions {\n     /// Optional link script applied to `dylib` and `executable` crate types.\n     /// This is a string containing the script, not a path. Can only be applied\n     /// to linkers where `linker_is_gnu` is true.\n-    pub link_script: Option<String>,\n+    pub link_script: Option<StaticCow<str>>,\n \n     /// Environment variables to be set for the linker invocation.\n-    pub link_env: Vec<(String, String)>,\n+    pub link_env: StaticCow<[(StaticCow<str>, StaticCow<str>)]>,\n     /// Environment variables to be removed for the linker invocation.\n-    pub link_env_remove: Vec<String>,\n+    pub link_env_remove: StaticCow<[StaticCow<str>]>,\n \n     /// Extra arguments to pass to the external assembler (when used)\n-    pub asm_args: Vec<String>,\n+    pub asm_args: StaticCow<[StaticCow<str>]>,\n \n     /// Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults\n     /// to \"generic\".\n-    pub cpu: String,\n+    pub cpu: StaticCow<str>,\n     /// Default target features to pass to LLVM. These features will *always* be\n     /// passed, and cannot be disabled even via `-C`. Corresponds to `llc\n     /// -mattr=$features`.\n-    pub features: String,\n+    pub features: StaticCow<str>,\n     /// Whether dynamic linking is available on this target. Defaults to false.\n     pub dynamic_linking: bool,\n     /// If dynamic linking is available, whether only cdylibs are supported.\n@@ -1196,21 +1215,21 @@ pub struct TargetOptions {\n     /// Emit each function in its own section. Defaults to true.\n     pub function_sections: bool,\n     /// String to prepend to the name of every dynamic library. Defaults to \"lib\".\n-    pub dll_prefix: String,\n+    pub dll_prefix: StaticCow<str>,\n     /// String to append to the name of every dynamic library. Defaults to \".so\".\n-    pub dll_suffix: String,\n+    pub dll_suffix: StaticCow<str>,\n     /// String to append to the name of every executable.\n-    pub exe_suffix: String,\n+    pub exe_suffix: StaticCow<str>,\n     /// String to prepend to the name of every static library. Defaults to \"lib\".\n-    pub staticlib_prefix: String,\n+    pub staticlib_prefix: StaticCow<str>,\n     /// String to append to the name of every static library. Defaults to \".a\".\n-    pub staticlib_suffix: String,\n+    pub staticlib_suffix: StaticCow<str>,\n     /// Values of the `target_family` cfg set for this target.\n     ///\n     /// Common options are: \"unix\", \"windows\". Defaults to no families.\n     ///\n     /// See <https://doc.rust-lang.org/reference/conditional-compilation.html#target_family>.\n-    pub families: Vec<String>,\n+    pub families: StaticCow<[StaticCow<str>]>,\n     /// Whether the target toolchain's ABI supports returning small structs as an integer.\n     pub abi_return_struct_as_int: bool,\n     /// Whether the target toolchain is like macOS's. Only useful for compiling against iOS/macOS,\n@@ -1282,7 +1301,7 @@ pub struct TargetOptions {\n     /// LLVM to assemble an archive or fall back to the system linker, and\n     /// currently only \"gnu\" is used to fall into LLVM. Unknown strings cause\n     /// the system linker to be used.\n-    pub archive_format: String,\n+    pub archive_format: StaticCow<str>,\n     /// Is asm!() allowed? Defaults to true.\n     pub allow_asm: bool,\n     /// Whether the runtime startup code requires the `main` function be passed\n@@ -1298,7 +1317,7 @@ pub struct TargetOptions {\n     /// Whether the target requires that emitted object code includes bitcode.\n     pub forces_embed_bitcode: bool,\n     /// Content of the LLVM cmdline section associated with embedded bitcode.\n-    pub bitcode_llvm_cmdline: String,\n+    pub bitcode_llvm_cmdline: StaticCow<str>,\n \n     /// Don't use this field; instead use the `.min_atomic_width()` method.\n     pub min_atomic_width: Option<u64>,\n@@ -1370,7 +1389,7 @@ pub struct TargetOptions {\n \n     /// If set, have the linker export exactly these symbols, instead of using\n     /// the usual logic to figure this out from the crate itself.\n-    pub override_export_symbols: Option<Vec<String>>,\n+    pub override_export_symbols: Option<StaticCow<[StaticCow<str>]>>,\n \n     /// Determines how or whether the MergeFunctions LLVM pass should run for\n     /// this target. Either \"disabled\", \"trampolines\", or \"aliases\".\n@@ -1381,16 +1400,16 @@ pub struct TargetOptions {\n     pub merge_functions: MergeFunctions,\n \n     /// Use platform dependent mcount function\n-    pub mcount: String,\n+    pub mcount: StaticCow<str>,\n \n     /// LLVM ABI name, corresponds to the '-mabi' parameter available in multilib C compilers\n-    pub llvm_abiname: String,\n+    pub llvm_abiname: StaticCow<str>,\n \n     /// Whether or not RelaxElfRelocation flag will be passed to the linker\n     pub relax_elf_relocations: bool,\n \n     /// Additional arguments to pass to LLVM, similar to the `-C llvm-args` codegen option.\n-    pub llvm_args: Vec<String>,\n+    pub llvm_args: StaticCow<[StaticCow<str>]>,\n \n     /// Whether to use legacy .ctors initialization hooks rather than .init_array. Defaults\n     /// to false (uses .init_array).\n@@ -1437,20 +1456,20 @@ impl Default for TargetOptions {\n         TargetOptions {\n             is_builtin: false,\n             endian: Endian::Little,\n-            c_int_width: \"32\".to_string(),\n-            os: \"none\".to_string(),\n-            env: String::new(),\n-            abi: String::new(),\n-            vendor: \"unknown\".to_string(),\n+            c_int_width: \"32\".into(),\n+            os: \"none\".into(),\n+            env: \"\".into(),\n+            abi: \"\".into(),\n+            vendor: \"unknown\".into(),\n             linker_flavor: LinkerFlavor::Gcc,\n-            linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.to_string()),\n+            linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.into()),\n             lld_flavor: LldFlavor::Ld,\n             pre_link_args: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n             link_script: None,\n-            asm_args: Vec::new(),\n-            cpu: \"generic\".to_string(),\n-            features: String::new(),\n+            asm_args: cvs![],\n+            cpu: \"generic\".into(),\n+            features: \"\".into(),\n             dynamic_linking: false,\n             only_cdylib: false,\n             executables: false,\n@@ -1460,12 +1479,12 @@ impl Default for TargetOptions {\n             disable_redzone: false,\n             frame_pointer: FramePointer::MayOmit,\n             function_sections: true,\n-            dll_prefix: \"lib\".to_string(),\n-            dll_suffix: \".so\".to_string(),\n-            exe_suffix: String::new(),\n-            staticlib_prefix: \"lib\".to_string(),\n-            staticlib_suffix: \".a\".to_string(),\n-            families: Vec::new(),\n+            dll_prefix: \"lib\".into(),\n+            dll_suffix: \".so\".into(),\n+            exe_suffix: \"\".into(),\n+            staticlib_prefix: \"lib\".into(),\n+            staticlib_suffix: \".a\".into(),\n+            families: cvs![],\n             abi_return_struct_as_int: false,\n             is_like_osx: false,\n             is_like_solaris: false,\n@@ -1491,15 +1510,15 @@ impl Default for TargetOptions {\n             late_link_args: LinkArgs::new(),\n             late_link_args_dynamic: LinkArgs::new(),\n             late_link_args_static: LinkArgs::new(),\n-            link_env: Vec::new(),\n-            link_env_remove: Vec::new(),\n-            archive_format: \"gnu\".to_string(),\n+            link_env: cvs![],\n+            link_env_remove: cvs![],\n+            archive_format: \"gnu\".into(),\n             main_needs_argc_argv: true,\n             allow_asm: true,\n             has_thread_local: false,\n             obj_is_bitcode: false,\n             forces_embed_bitcode: false,\n-            bitcode_llvm_cmdline: String::new(),\n+            bitcode_llvm_cmdline: \"\".into(),\n             min_atomic_width: None,\n             max_atomic_width: None,\n             atomic_cas: true,\n@@ -1522,10 +1541,10 @@ impl Default for TargetOptions {\n             limit_rdylib_exports: true,\n             override_export_symbols: None,\n             merge_functions: MergeFunctions::Aliases,\n-            mcount: \"mcount\".to_string(),\n-            llvm_abiname: \"\".to_string(),\n+            mcount: \"mcount\".into(),\n+            llvm_abiname: \"\".into(),\n             relax_elf_relocations: false,\n-            llvm_args: vec![],\n+            llvm_args: cvs![],\n             use_ctors_section: false,\n             eh_frame_header: true,\n             has_thumb_interworking: false,\n@@ -1671,12 +1690,12 @@ impl Target {\n         };\n \n         let mut base = Target {\n-            llvm_target: get_req_field(\"llvm-target\")?,\n+            llvm_target: get_req_field(\"llvm-target\")?.into(),\n             pointer_width: get_req_field(\"target-pointer-width\")?\n                 .parse::<u32>()\n                 .map_err(|_| \"target-pointer-width must be an integer\".to_string())?,\n-            data_layout: get_req_field(\"data-layout\")?,\n-            arch: get_req_field(\"arch\")?,\n+            data_layout: get_req_field(\"data-layout\")?.into(),\n+            arch: get_req_field(\"arch\")?.into(),\n             options: Default::default(),\n         };\n \n@@ -1685,13 +1704,13 @@ impl Target {\n         macro_rules! key {\n             ($key_name:ident) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(s) = obj.remove_key(&name).and_then(|j| Json::as_string(&j).map(str::to_string)) {\n+                if let Some(s) = obj.remove_key(&name).and_then(|j| Json::as_string(&j).map(str::to_string).map(Cow::from)) {\n                     base.$key_name = s;\n                 }\n             } );\n             ($key_name:ident = $json_name:expr) => ( {\n                 let name = $json_name;\n-                if let Some(s) = obj.remove_key(&name).and_then(|j| Json::as_string(&j).map(str::to_string)) {\n+                if let Some(s) = obj.remove_key(&name).and_then(|j| Json::as_string(&j).map(str::to_string).map(Cow::from)) {\n                     base.$key_name = s;\n                 }\n             } );\n@@ -1711,7 +1730,7 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(s) = obj.remove_key(&name).and_then(|j| Json::as_u64(&j)) {\n                     if s < 1 || s > 5 {\n-                        return Err(\"Not a valid DWARF version number\".to_string());\n+                        return Err(\"Not a valid DWARF version number\".into());\n                     }\n                     base.$key_name = Some(s as u32);\n                 }\n@@ -1813,7 +1832,7 @@ impl Target {\n                 if let Some(j) = obj.remove_key(&name){\n                     if let Some(v) = Json::as_array(&j) {\n                         base.$key_name = v.iter()\n-                            .map(|a| a.as_string().unwrap().to_string())\n+                            .map(|a| a.as_string().unwrap().to_string().into())\n                             .collect();\n                     } else {\n                         incorrect_type.push(name)\n@@ -1825,7 +1844,7 @@ impl Target {\n                 if let Some(j) = obj.remove_key(&name) {\n                     if let Some(v) = Json::as_array(&j) {\n                         base.$key_name = Some(v.iter()\n-                            .map(|a| a.as_string().unwrap().to_string())\n+                            .map(|a| a.as_string().unwrap().to_string().into())\n                             .collect());\n                     } else {\n                         incorrect_type.push(name)\n@@ -1837,7 +1856,7 @@ impl Target {\n                 if let Some(o) = obj.remove_key(&name[..]) {\n                     base.$key_name = o\n                         .as_string()\n-                        .map(|s| s.to_string() );\n+                        .map(|s| s.to_string().into());\n                 }\n             } );\n             ($key_name:ident, LldFlavor) => ( {\n@@ -1931,7 +1950,7 @@ impl Target {\n                             .map(|(i,s)| {\n                                 let s = s.as_string().ok_or_else(||\n                                     format!(\"{}.{}[{}]: expected a JSON string\", name, k, i))?;\n-                                Ok(s.to_owned())\n+                                Ok(s.to_string().into())\n                             })\n                             .collect::<Result<Vec<_>, String>>()?;\n \n@@ -1958,7 +1977,7 @@ impl Target {\n                             .map(|(i,s)| {\n                                 let s = s.as_string().ok_or_else(||\n                                     format!(\"{}.{}[{}]: expected a JSON string\", name, k, i))?;\n-                                Ok(s.to_owned())\n+                                Ok(s.to_string().into())\n                             })\n                             .collect::<Result<Vec<_>, String>>()?;\n \n@@ -1977,7 +1996,7 @@ impl Target {\n                                 if p.len() == 2 {\n                                     let k = p[0].to_string();\n                                     let v = p[1].to_string();\n-                                    base.$key_name.push((k, v));\n+                                    base.$key_name.to_mut().push((k.into(), v.into()));\n                                 }\n                             }\n                         }\n@@ -2000,10 +2019,10 @@ impl Target {\n                 if let Some(value) = obj.remove_key(\"target-family\") {\n                     if let Some(v) = Json::as_array(&value) {\n                         base.$key_name = v.iter()\n-                            .map(|a| a.as_string().unwrap().to_string())\n+                            .map(|a| a.as_string().unwrap().to_string().into())\n                             .collect();\n                     } else if let Some(v) = Json::as_string(&value) {\n-                        base.$key_name = vec![v.to_string()];\n+                        base.$key_name = vec![v.to_string().into()].into();\n                     }\n                 }\n             } );\n@@ -2013,7 +2032,7 @@ impl Target {\n             if let Some(s) = Json::as_string(&j) {\n                 base.endian = s.parse()?;\n             } else {\n-                incorrect_type.push(\"target-endian\".to_string())\n+                incorrect_type.push(\"target-endian\".into())\n             }\n         }\n \n@@ -2023,7 +2042,7 @@ impl Target {\n                     .parse()\n                     .map_err(|()| format!(\"'{}' is not a valid value for frame-pointer\", s))?;\n             } else {\n-                incorrect_type.push(\"frame-pointer\".to_string())\n+                incorrect_type.push(\"frame-pointer\".into())\n             }\n         }\n \n@@ -2128,7 +2147,7 @@ impl Target {\n \n         if base.is_builtin {\n             // This can cause unfortunate ICEs later down the line.\n-            return Err(\"may not set is_builtin for targets not built-in\".to_string());\n+            return Err(\"may not set is_builtin for targets not built-in\".into());\n         }\n         // Each field should have been read using `Json::remove_key` so any keys remaining are unused.\n         let remaining_keys = obj.as_object().ok_or(\"Expected JSON object for target\")?.keys();\n@@ -2232,7 +2251,7 @@ impl ToJson for Target {\n             }};\n             ($attr:ident, $key_name:expr) => {{\n                 let name = $key_name;\n-                d.insert(name.to_string(), self.$attr.to_json());\n+                d.insert(name.into(), self.$attr.to_json());\n             }};\n         }\n \n@@ -2246,7 +2265,7 @@ impl ToJson for Target {\n             ($attr:ident, $key_name:expr) => {{\n                 let name = $key_name;\n                 if default.$attr != self.$attr {\n-                    d.insert(name.to_string(), self.$attr.to_json());\n+                    d.insert(name.into(), self.$attr.to_json());\n                 }\n             }};\n             (link_args - $attr:ident) => {{\n@@ -2255,7 +2274,7 @@ impl ToJson for Target {\n                     let obj = self\n                         .$attr\n                         .iter()\n-                        .map(|(k, v)| (k.desc().to_owned(), v.clone()))\n+                        .map(|(k, v)| (k.desc().to_string(), v.clone()))\n                         .collect::<BTreeMap<_, _>>();\n                     d.insert(name, obj.to_json());\n                 }\n@@ -2266,7 +2285,7 @@ impl ToJson for Target {\n                     let obj = self\n                         .$attr\n                         .iter()\n-                        .map(|&(ref k, ref v)| k.clone() + \"=\" + &v)\n+                        .map(|&(ref k, ref v)| format!(\"{k}={v}\"))\n                         .collect::<Vec<_>>();\n                     d.insert(name, obj.to_json());\n                 }\n@@ -2379,7 +2398,7 @@ impl ToJson for Target {\n         target_option_val!(supports_stack_protector);\n \n         if let Some(abi) = self.default_adjusted_cabi {\n-            d.insert(\"default-adjusted-cabi\".to_string(), Abi::name(abi).to_json());\n+            d.insert(\"default-adjusted-cabi\".into(), Abi::name(abi).to_json());\n         }\n \n         Json::Object(d)\n@@ -2396,7 +2415,7 @@ pub enum TargetTriple {\n impl TargetTriple {\n     /// Creates a target triple from the passed target triple string.\n     pub fn from_triple(triple: &str) -> Self {\n-        TargetTriple::TargetTriple(triple.to_string())\n+        TargetTriple::TargetTriple(triple.into())\n     }\n \n     /// Creates a target triple from the passed target path.\n@@ -2434,7 +2453,7 @@ impl TargetTriple {\n             let hash = hasher.finish();\n             format!(\"{}-{}\", triple, hash)\n         } else {\n-            triple.to_owned()\n+            triple.into()\n         }\n     }\n }"}, {"sha": "cedacb60f3197ee4276df0968c0ab9c16e739c26", "filename": "compiler/rustc_target/src/spec/msp430_none_elf.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,22 +1,22 @@\n-use crate::spec::{PanicStrategy, RelocModel, Target, TargetOptions};\n+use crate::spec::{cvs, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"msp430-none-elf\".to_string(),\n+        llvm_target: \"msp430-none-elf\".into(),\n         pointer_width: 16,\n-        data_layout: \"e-m:e-p:16:16-i32:16-i64:16-f32:16-f64:16-a:8-n8:16-S16\".to_string(),\n-        arch: \"msp430\".to_string(),\n+        data_layout: \"e-m:e-p:16:16-i32:16-i64:16-f32:16-f64:16-a:8-n8:16-S16\".into(),\n+        arch: \"msp430\".into(),\n \n         options: TargetOptions {\n-            c_int_width: \"16\".to_string(),\n+            c_int_width: \"16\".into(),\n             executables: true,\n \n             // The LLVM backend currently can't generate object files. To\n             // workaround this LLVM generates assembly files which then we feed\n             // to gcc to get object files. For this reason we have a hard\n             // dependency on this specific gcc.\n-            asm_args: vec![\"-mcpu=msp430\".to_string()],\n-            linker: Some(\"msp430-elf-gcc\".to_string()),\n+            asm_args: cvs![\"-mcpu=msp430\"],\n+            linker: Some(\"msp430-elf-gcc\".into()),\n             linker_is_gnu: false,\n \n             // There are no atomic CAS instructions available in the MSP430"}, {"sha": "00cc9620243da04cfd4caee62a0fdcb95969dbb8", "filename": "compiler/rustc_target/src/spec/msvc_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -4,7 +4,7 @@ pub fn opts() -> TargetOptions {\n     let pre_link_args_msvc = vec![\n         // Suppress the verbose logo and authorship debugging output, which would needlessly\n         // clog any log files.\n-        \"/NOLOGO\".to_string(),\n+        \"/NOLOGO\".into(),\n     ];\n     let mut pre_link_args = LinkArgs::new();\n     pre_link_args.insert(LinkerFlavor::Msvc, pre_link_args_msvc.clone());"}, {"sha": "69016d77cf97be88af4735e3183c6014adb0ac6a", "filename": "compiler/rustc_target/src/spec/netbsd_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{RelroLevel, TargetOptions};\n+use crate::spec::{cvs, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        os: \"netbsd\".to_string(),\n+        os: \"netbsd\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".to_string()],\n+        families: cvs![\"unix\"],\n         no_default_libraries: false,\n         has_rpath: true,\n         position_independent_executables: true,"}, {"sha": "9d94ed8aa480d5ba196866b6974ffbfadc1e3fbb", "filename": "compiler/rustc_target/src/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,21 +2,21 @@ use crate::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, Target, TargetOpt\n \n pub fn target() -> Target {\n     Target {\n-        arch: \"nvptx64\".to_string(),\n-        data_layout: \"e-i64:64-i128:128-v16:16-v32:32-n16:32:64\".to_string(),\n-        llvm_target: \"nvptx64-nvidia-cuda\".to_string(),\n+        arch: \"nvptx64\".into(),\n+        data_layout: \"e-i64:64-i128:128-v16:16-v32:32-n16:32:64\".into(),\n+        llvm_target: \"nvptx64-nvidia-cuda\".into(),\n         pointer_width: 64,\n \n         options: TargetOptions {\n-            os: \"cuda\".to_string(),\n-            vendor: \"nvidia\".to_string(),\n+            os: \"cuda\".into(),\n+            vendor: \"nvidia\".into(),\n             linker_flavor: LinkerFlavor::PtxLinker,\n             // The linker can be installed from `crates.io`.\n-            linker: Some(\"rust-ptx-linker\".to_string()),\n+            linker: Some(\"rust-ptx-linker\".into()),\n             linker_is_gnu: false,\n \n             // With `ptx-linker` approach, it can be later overridden via link flags.\n-            cpu: \"sm_30\".to_string(),\n+            cpu: \"sm_30\".into(),\n \n             // FIXME: create tests for the atomics.\n             max_atomic_width: Some(64),\n@@ -36,9 +36,9 @@ pub fn target() -> Target {\n             obj_is_bitcode: true,\n \n             // Convenient and predicable naming scheme.\n-            dll_prefix: \"\".to_string(),\n-            dll_suffix: \".ptx\".to_string(),\n-            exe_suffix: \".ptx\".to_string(),\n+            dll_prefix: \"\".into(),\n+            dll_suffix: \".ptx\".into(),\n+            exe_suffix: \".ptx\".into(),\n \n             // Disable MergeFunctions LLVM optimisation pass because it can\n             // produce kernel functions that call other kernel functions."}, {"sha": "bbd322bb6ce2b66ef1d37235425b864c05ade1b8", "filename": "compiler/rustc_target/src/spec/openbsd_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{FramePointer, RelroLevel, TargetOptions};\n+use crate::spec::{cvs, FramePointer, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        os: \"openbsd\".to_string(),\n+        os: \"openbsd\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".to_string()],\n+        families: cvs![\"unix\"],\n         has_rpath: true,\n         abi_return_struct_as_int: true,\n         position_independent_executables: true,"}, {"sha": "595769c4bfa591b808ac69dbecfd793d7afbd59c", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_freebsd.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,15 +3,15 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n-    base.cpu = \"ppc64\".to_string();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.cpu = \"ppc64\".into();\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     base.max_atomic_width = Some(64);\n \n     Target {\n-        llvm_target: \"powerpc64-unknown-freebsd\".to_string(),\n+        llvm_target: \"powerpc64-unknown-freebsd\".into(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n-        arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n+        data_layout: \"E-m:e-i64:64-n32:64\".into(),\n+        arch: \"powerpc64\".into(),\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".into(), ..base },\n     }\n }"}, {"sha": "24d5d187e1a76b4359af72abd825756e8b429a93", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,19 +3,19 @@ use crate::spec::{LinkerFlavor, RelroLevel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.cpu = \"ppc64\".to_string();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.cpu = \"ppc64\".into();\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     base.max_atomic_width = Some(64);\n \n     // ld.so in at least RHEL6 on ppc64 has a bug related to BIND_NOW, so only enable partial RELRO\n     // for now. https://github.com/rust-lang/rust/pull/43170#issuecomment-315411474\n     base.relro_level = RelroLevel::Partial;\n \n     Target {\n-        llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"powerpc64-unknown-linux-gnu\".into(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512\".to_string(),\n-        arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n+        data_layout: \"E-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512\".into(),\n+        arch: \"powerpc64\".into(),\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".into(), ..base },\n     }\n }"}, {"sha": "0f465ccfe776edc9c88446e32c79ea33e639243a", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_musl.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,15 +3,15 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n-    base.cpu = \"ppc64\".to_string();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.cpu = \"ppc64\".into();\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     base.max_atomic_width = Some(64);\n \n     Target {\n-        llvm_target: \"powerpc64-unknown-linux-musl\".to_string(),\n+        llvm_target: \"powerpc64-unknown-linux-musl\".into(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512\".to_string(),\n-        arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n+        data_layout: \"E-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512\".into(),\n+        arch: \"powerpc64\".into(),\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".into(), ..base },\n     }\n }"}, {"sha": "491d344aedbcb2fdb9aba65741cb488bade15528", "filename": "compiler/rustc_target/src/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,15 +3,15 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n-    base.cpu = \"ppc64\".to_string();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.cpu = \"ppc64\".into();\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     base.max_atomic_width = Some(64);\n \n     Target {\n-        llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"powerpc64-unknown-linux-gnu\".into(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512\".to_string(),\n-        arch: \"powerpc64\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512\".into(),\n+        arch: \"powerpc64\".into(),\n         options: TargetOptions { endian: Endian::Big, ..base },\n     }\n }"}, {"sha": "b198e667ccc369ee72825b9251bdebbcdd0ce60c", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_freebsd.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_freebsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,15 +2,15 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n-    base.cpu = \"ppc64le\".to_string();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.cpu = \"ppc64le\".into();\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     base.max_atomic_width = Some(64);\n \n     Target {\n-        llvm_target: \"powerpc64le-unknown-freebsd\".to_string(),\n+        llvm_target: \"powerpc64le-unknown-freebsd\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i64:64-n32:64\".to_string(),\n-        arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n+        data_layout: \"e-m:e-i64:64-n32:64\".into(),\n+        arch: \"powerpc64\".into(),\n+        options: TargetOptions { mcount: \"_mcount\".into(), ..base },\n     }\n }"}, {"sha": "09e3936db268d58ff3eed8b09147ab4342df5d87", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,15 +2,15 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.cpu = \"ppc64le\".to_string();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.cpu = \"ppc64le\".into();\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     base.max_atomic_width = Some(64);\n \n     Target {\n-        llvm_target: \"powerpc64le-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"powerpc64le-unknown-linux-gnu\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512\".to_string(),\n-        arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n+        data_layout: \"e-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512\".into(),\n+        arch: \"powerpc64\".into(),\n+        options: TargetOptions { mcount: \"_mcount\".into(), ..base },\n     }\n }"}, {"sha": "8a947b091cb70ea00329fcd7a70fedf8317008e8", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_musl.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,15 +2,15 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n-    base.cpu = \"ppc64le\".to_string();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.cpu = \"ppc64le\".into();\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     base.max_atomic_width = Some(64);\n \n     Target {\n-        llvm_target: \"powerpc64le-unknown-linux-musl\".to_string(),\n+        llvm_target: \"powerpc64le-unknown-linux-musl\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512\".to_string(),\n-        arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n+        data_layout: \"e-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512\".into(),\n+        arch: \"powerpc64\".into(),\n+        options: TargetOptions { mcount: \"_mcount\".into(), ..base },\n     }\n }"}, {"sha": "c27b84775df4ba1e35b4e9841de5ad91ebaae984", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_freebsd.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_freebsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,24 +3,24 @@ use crate::spec::{LinkerFlavor, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n     // Extra hint to linker that we are generating secure-PLT code.\n     base.pre_link_args\n         .entry(LinkerFlavor::Gcc)\n         .or_default()\n-        .push(\"--target=powerpc-unknown-freebsd13.0\".to_string());\n+        .push(\"--target=powerpc-unknown-freebsd13.0\".into());\n     base.max_atomic_width = Some(32);\n \n     Target {\n-        llvm_target: \"powerpc-unknown-freebsd13.0\".to_string(),\n+        llvm_target: \"powerpc-unknown-freebsd13.0\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n-        arch: \"powerpc\".to_string(),\n+        data_layout: \"E-m:e-p:32:32-i64:64-n32\".into(),\n+        arch: \"powerpc\".into(),\n         options: TargetOptions {\n             endian: Endian::Big,\n-            features: \"+secure-plt\".to_string(),\n+            features: \"+secure-plt\".into(),\n             relocation_model: RelocModel::Pic,\n-            mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".into(),\n             ..base\n         },\n     }"}, {"sha": "88f61500e3ce36c231acc074ac8754be93d981f5", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,14 +3,14 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n     base.max_atomic_width = Some(32);\n \n     Target {\n-        llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"powerpc-unknown-linux-gnu\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n-        arch: \"powerpc\".to_string(),\n-        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n+        data_layout: \"E-m:e-p:32:32-i64:64-n32\".into(),\n+        arch: \"powerpc\".into(),\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".into(), ..base },\n     }\n }"}, {"sha": "3ee548750b9551fb28ef83afaddd12b2c09eac25", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnuspe.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,18 +3,18 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mspe\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mspe\".into());\n     base.max_atomic_width = Some(32);\n \n     Target {\n-        llvm_target: \"powerpc-unknown-linux-gnuspe\".to_string(),\n+        llvm_target: \"powerpc-unknown-linux-gnuspe\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n-        arch: \"powerpc\".to_string(),\n+        data_layout: \"E-m:e-p:32:32-i64:64-n32\".into(),\n+        arch: \"powerpc\".into(),\n         options: TargetOptions {\n-            abi: \"spe\".to_string(),\n+            abi: \"spe\".into(),\n             endian: Endian::Big,\n-            mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".into(),\n             ..base\n         },\n     }"}, {"sha": "ce33c787f33396031f58fa37e63969a3be294f17", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_musl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,14 +3,14 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n     base.max_atomic_width = Some(32);\n \n     Target {\n-        llvm_target: \"powerpc-unknown-linux-musl\".to_string(),\n+        llvm_target: \"powerpc-unknown-linux-musl\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n-        arch: \"powerpc\".to_string(),\n-        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n+        data_layout: \"E-m:e-p:32:32-i64:64-n32\".into(),\n+        arch: \"powerpc\".into(),\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".into(), ..base },\n     }\n }"}, {"sha": "998225f4dae1cca1b4cb8d99e1cd838a6ab78437", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_netbsd.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,14 +3,14 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n     base.max_atomic_width = Some(32);\n \n     Target {\n-        llvm_target: \"powerpc-unknown-netbsd\".to_string(),\n+        llvm_target: \"powerpc-unknown-netbsd\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n-        arch: \"powerpc\".to_string(),\n-        options: TargetOptions { endian: Endian::Big, mcount: \"__mcount\".to_string(), ..base },\n+        data_layout: \"E-m:e-p:32:32-i64:64-n32\".into(),\n+        arch: \"powerpc\".into(),\n+        options: TargetOptions { endian: Endian::Big, mcount: \"__mcount\".into(), ..base },\n     }\n }"}, {"sha": "ad2c3d40f35ed2e04337352355748987af80de8e", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_openbsd.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_openbsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -7,10 +7,10 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(32);\n \n     Target {\n-        llvm_target: \"powerpc-unknown-openbsd\".to_string(),\n+        llvm_target: \"powerpc-unknown-openbsd\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n-        arch: \"powerpc\".to_string(),\n+        data_layout: \"E-m:e-p:32:32-i64:64-n32\".into(),\n+        arch: \"powerpc\".into(),\n         options: base,\n     }\n }"}, {"sha": "76709cec59103324963823fe72c94c3aea3c521b", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,15 +3,15 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"--secure-plt\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"--secure-plt\".into());\n     base.max_atomic_width = Some(32);\n \n     Target {\n-        llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"powerpc-unknown-linux-gnu\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n-        arch: \"powerpc\".to_string(),\n-        options: TargetOptions { endian: Endian::Big, features: \"+secure-plt\".to_string(), ..base },\n+        data_layout: \"E-m:e-p:32:32-i64:64-n32\".into(),\n+        arch: \"powerpc\".into(),\n+        options: TargetOptions { endian: Endian::Big, features: \"+secure-plt\".into(), ..base },\n     }\n }"}, {"sha": "7b5d1242c52e3a40c489ed1c80c69d37a8059a61", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks_spe.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,20 +3,20 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mspe\".to_string());\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"--secure-plt\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mspe\".into());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"--secure-plt\".into());\n     base.max_atomic_width = Some(32);\n \n     Target {\n-        llvm_target: \"powerpc-unknown-linux-gnuspe\".to_string(),\n+        llvm_target: \"powerpc-unknown-linux-gnuspe\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n-        arch: \"powerpc\".to_string(),\n+        data_layout: \"E-m:e-p:32:32-i64:64-n32\".into(),\n+        arch: \"powerpc\".into(),\n         options: TargetOptions {\n-            abi: \"spe\".to_string(),\n+            abi: \"spe\".into(),\n             endian: Endian::Big,\n             // feature msync would disable instruction 'fsync' which is not supported by fsl_p1p2\n-            features: \"+secure-plt,+msync\".to_string(),\n+            features: \"+secure-plt,+msync\".into(),\n             ..base\n         },\n     }"}, {"sha": "1878cc3fc11db2086b696c2bb2de1c2b9caf94f7", "filename": "compiler/rustc_target/src/spec/redox_base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{RelroLevel, TargetOptions};\n+use crate::spec::{cvs, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        os: \"redox\".to_string(),\n-        env: \"relibc\".to_string(),\n+        os: \"redox\".into(),\n+        env: \"relibc\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".to_string()],\n+        families: cvs![\"unix\"],\n         has_rpath: true,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,"}, {"sha": "bffd377bc4a19790093b7a13d2ecdc5eaf1275f9", "filename": "compiler/rustc_target/src/spec/riscv32gc_unknown_linux_gnu.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,15 +2,15 @@ use crate::spec::{CodeModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"riscv32-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"riscv32-unknown-linux-gnu\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n-        arch: \"riscv32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".into(),\n+        arch: \"riscv32\".into(),\n         options: TargetOptions {\n             code_model: Some(CodeModel::Medium),\n-            cpu: \"generic-rv32\".to_string(),\n-            features: \"+m,+a,+f,+d,+c\".to_string(),\n-            llvm_abiname: \"ilp32d\".to_string(),\n+            cpu: \"generic-rv32\".into(),\n+            features: \"+m,+a,+f,+d,+c\".into(),\n+            llvm_abiname: \"ilp32d\".into(),\n             max_atomic_width: Some(32),\n             ..super::linux_gnu_base::opts()\n         },"}, {"sha": "c9f3acffb77b182c55e2769a8b02bdd7f25245ea", "filename": "compiler/rustc_target/src/spec/riscv32gc_unknown_linux_musl.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_musl.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,15 +2,15 @@ use crate::spec::{CodeModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"riscv32-unknown-linux-musl\".to_string(),\n+        llvm_target: \"riscv32-unknown-linux-musl\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n-        arch: \"riscv32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".into(),\n+        arch: \"riscv32\".into(),\n         options: TargetOptions {\n             code_model: Some(CodeModel::Medium),\n-            cpu: \"generic-rv32\".to_string(),\n-            features: \"+m,+a,+f,+d,+c\".to_string(),\n-            llvm_abiname: \"ilp32d\".to_string(),\n+            cpu: \"generic-rv32\".into(),\n+            features: \"+m,+a,+f,+d,+c\".into(),\n+            llvm_abiname: \"ilp32d\".into(),\n             max_atomic_width: Some(32),\n             ..super::linux_musl_base::opts()\n         },"}, {"sha": "7124e2df9b341891cd4342741e3659d7a1930c0e", "filename": "compiler/rustc_target/src/spec/riscv32i_unknown_none_elf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,15 +3,15 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n-        llvm_target: \"riscv32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".into(),\n+        llvm_target: \"riscv32\".into(),\n         pointer_width: 32,\n-        arch: \"riscv32\".to_string(),\n+        arch: \"riscv32\".into(),\n \n         options: TargetOptions {\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-            linker: Some(\"rust-lld\".to_string()),\n-            cpu: \"generic-rv32\".to_string(),\n+            linker: Some(\"rust-lld\".into()),\n+            cpu: \"generic-rv32\".into(),\n             max_atomic_width: Some(0),\n             atomic_cas: false,\n             executables: true,"}, {"sha": "508982eed6871071dd2fe681438a75836407bc78", "filename": "compiler/rustc_target/src/spec/riscv32im_unknown_none_elf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32im_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32im_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32im_unknown_none_elf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,18 +3,18 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n-        llvm_target: \"riscv32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".into(),\n+        llvm_target: \"riscv32\".into(),\n         pointer_width: 32,\n-        arch: \"riscv32\".to_string(),\n+        arch: \"riscv32\".into(),\n \n         options: TargetOptions {\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-            linker: Some(\"rust-lld\".to_string()),\n-            cpu: \"generic-rv32\".to_string(),\n+            linker: Some(\"rust-lld\".into()),\n+            cpu: \"generic-rv32\".into(),\n             max_atomic_width: Some(0),\n             atomic_cas: false,\n-            features: \"+m\".to_string(),\n+            features: \"+m\".into(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,"}, {"sha": "f2bd6249f0a262c3f86cbb60cac3d451d0ec39f3", "filename": "compiler/rustc_target/src/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,17 +3,17 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n-        llvm_target: \"riscv32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".into(),\n+        llvm_target: \"riscv32\".into(),\n         pointer_width: 32,\n-        arch: \"riscv32\".to_string(),\n+        arch: \"riscv32\".into(),\n \n         options: TargetOptions {\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-            linker: Some(\"rust-lld\".to_string()),\n-            cpu: \"generic-rv32\".to_string(),\n+            linker: Some(\"rust-lld\".into()),\n+            cpu: \"generic-rv32\".into(),\n             max_atomic_width: Some(32),\n-            features: \"+m,+a,+c\".to_string(),\n+            features: \"+m,+a,+c\".into(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,"}, {"sha": "0200862c7e013d726a7f5e7d2ddcea0d8e8a4dd1", "filename": "compiler/rustc_target/src/spec/riscv32imc_esp_espidf.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,21 +1,21 @@\n+use crate::spec::{cvs, Target, TargetOptions};\n use crate::spec::{LinkerFlavor, PanicStrategy, RelocModel};\n-use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n-        llvm_target: \"riscv32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".into(),\n+        llvm_target: \"riscv32\".into(),\n         pointer_width: 32,\n-        arch: \"riscv32\".to_string(),\n+        arch: \"riscv32\".into(),\n \n         options: TargetOptions {\n-            families: vec![\"unix\".to_string()],\n-            os: \"espidf\".to_string(),\n-            env: \"newlib\".to_string(),\n-            vendor: \"espressif\".to_string(),\n+            families: cvs![\"unix\"],\n+            os: \"espidf\".into(),\n+            env: \"newlib\".into(),\n+            vendor: \"espressif\".into(),\n             linker_flavor: LinkerFlavor::Gcc,\n-            linker: Some(\"riscv32-esp-elf-gcc\".to_string()),\n-            cpu: \"generic-rv32\".to_string(),\n+            linker: Some(\"riscv32-esp-elf-gcc\".into()),\n+            cpu: \"generic-rv32\".into(),\n \n             // While the RiscV32IMC architecture does not natively support atomics, ESP-IDF does support\n             // the __atomic* and __sync* GCC builtins, so setting `max_atomic_width` to `Some(64)`\n@@ -25,7 +25,7 @@ pub fn target() -> Target {\n             max_atomic_width: Some(64),\n             atomic_cas: true,\n \n-            features: \"+m,+c\".to_string(),\n+            features: \"+m,+c\".into(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,"}, {"sha": "4216968cb776a4cf7c1f2d6d8858e3106bea41f2", "filename": "compiler/rustc_target/src/spec/riscv32imc_unknown_none_elf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,18 +3,18 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n-        llvm_target: \"riscv32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".into(),\n+        llvm_target: \"riscv32\".into(),\n         pointer_width: 32,\n-        arch: \"riscv32\".to_string(),\n+        arch: \"riscv32\".into(),\n \n         options: TargetOptions {\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-            linker: Some(\"rust-lld\".to_string()),\n-            cpu: \"generic-rv32\".to_string(),\n+            linker: Some(\"rust-lld\".into()),\n+            cpu: \"generic-rv32\".into(),\n             max_atomic_width: Some(0),\n             atomic_cas: false,\n-            features: \"+m,+c\".to_string(),\n+            features: \"+m,+c\".into(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,"}, {"sha": "0539eca6c1fce7b64ab279765b954f46892f95e3", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_freebsd.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_freebsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,15 +2,15 @@ use crate::spec::{CodeModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"riscv64-unknown-freebsd\".to_string(),\n+        llvm_target: \"riscv64-unknown-freebsd\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n-        arch: \"riscv64\".to_string(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        arch: \"riscv64\".into(),\n         options: TargetOptions {\n             code_model: Some(CodeModel::Medium),\n-            cpu: \"generic-rv64\".to_string(),\n-            features: \"+m,+a,+f,+d,+c\".to_string(),\n-            llvm_abiname: \"lp64d\".to_string(),\n+            cpu: \"generic-rv64\".into(),\n+            features: \"+m,+a,+f,+d,+c\".into(),\n+            llvm_abiname: \"lp64d\".into(),\n             max_atomic_width: Some(64),\n             ..super::freebsd_base::opts()\n         },"}, {"sha": "7d1bf228c3702b57fb8561420dcbff441bb40641", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_linux_gnu.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,15 +2,15 @@ use crate::spec::{CodeModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"riscv64-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"riscv64-unknown-linux-gnu\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n-        arch: \"riscv64\".to_string(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        arch: \"riscv64\".into(),\n         options: TargetOptions {\n             code_model: Some(CodeModel::Medium),\n-            cpu: \"generic-rv64\".to_string(),\n-            features: \"+m,+a,+f,+d,+c\".to_string(),\n-            llvm_abiname: \"lp64d\".to_string(),\n+            cpu: \"generic-rv64\".into(),\n+            features: \"+m,+a,+f,+d,+c\".into(),\n+            llvm_abiname: \"lp64d\".into(),\n             max_atomic_width: Some(64),\n             ..super::linux_gnu_base::opts()\n         },"}, {"sha": "f04f8a48bc81f2647498d2b24bfe14c17d73b96d", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_linux_musl.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_musl.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,15 +2,15 @@ use crate::spec::{CodeModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"riscv64-unknown-linux-musl\".to_string(),\n+        llvm_target: \"riscv64-unknown-linux-musl\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n-        arch: \"riscv64\".to_string(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        arch: \"riscv64\".into(),\n         options: TargetOptions {\n             code_model: Some(CodeModel::Medium),\n-            cpu: \"generic-rv64\".to_string(),\n-            features: \"+m,+a,+f,+d,+c\".to_string(),\n-            llvm_abiname: \"lp64d\".to_string(),\n+            cpu: \"generic-rv64\".into(),\n+            features: \"+m,+a,+f,+d,+c\".into(),\n+            llvm_abiname: \"lp64d\".into(),\n             max_atomic_width: Some(64),\n             ..super::linux_musl_base::opts()\n         },"}, {"sha": "2a93459ef4f740a99a3cb35fae7ce49444602f8a", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,18 +3,18 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n-        llvm_target: \"riscv64\".to_string(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        llvm_target: \"riscv64\".into(),\n         pointer_width: 64,\n-        arch: \"riscv64\".to_string(),\n+        arch: \"riscv64\".into(),\n \n         options: TargetOptions {\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-            linker: Some(\"rust-lld\".to_string()),\n-            llvm_abiname: \"lp64d\".to_string(),\n-            cpu: \"generic-rv64\".to_string(),\n+            linker: Some(\"rust-lld\".into()),\n+            llvm_abiname: \"lp64d\".into(),\n+            cpu: \"generic-rv64\".into(),\n             max_atomic_width: Some(64),\n-            features: \"+m,+a,+f,+d,+c\".to_string(),\n+            features: \"+m,+a,+f,+d,+c\".into(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,"}, {"sha": "6a8d8a97de6416f1e46a07c1ed079e8405897127", "filename": "compiler/rustc_target/src/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,17 +3,17 @@ use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n-        llvm_target: \"riscv64\".to_string(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        llvm_target: \"riscv64\".into(),\n         pointer_width: 64,\n-        arch: \"riscv64\".to_string(),\n+        arch: \"riscv64\".into(),\n \n         options: TargetOptions {\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-            linker: Some(\"rust-lld\".to_string()),\n-            cpu: \"generic-rv64\".to_string(),\n+            linker: Some(\"rust-lld\".into()),\n+            cpu: \"generic-rv64\".into(),\n             max_atomic_width: Some(64),\n-            features: \"+m,+a,+c\".to_string(),\n+            features: \"+m,+a,+c\".into(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,"}, {"sha": "8757bbed8ad86967f618721f2b2b45dd9dfb35e0", "filename": "compiler/rustc_target/src/spec/s390x_unknown_linux_gnu.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,19 +5,19 @@ pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.endian = Endian::Big;\n     // z10 is the oldest CPU supported by LLVM\n-    base.cpu = \"z10\".to_string();\n+    base.cpu = \"z10\".into();\n     // FIXME: The data_layout string below and the ABI implementation in\n     // cabi_s390x.rs are for now hard-coded to assume the no-vector ABI.\n     // Pass the -vector feature string to LLVM to respect this assumption.\n-    base.features = \"-vector\".to_string();\n+    base.features = \"-vector\".into();\n     base.max_atomic_width = Some(64);\n     base.min_global_align = Some(16);\n \n     Target {\n-        llvm_target: \"s390x-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"s390x-unknown-linux-gnu\".into(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i1:8:16-i8:8:16-i64:64-f128:64-a:8:16-n32:64\".to_string(),\n-        arch: \"s390x\".to_string(),\n+        data_layout: \"E-m:e-i1:8:16-i8:8:16-i64:64-f128:64-a:8:16-n32:64\".into(),\n+        arch: \"s390x\".into(),\n         options: base,\n     }\n }"}, {"sha": "4c855271a2ab503ff005bec5ffdae6a6eb028bce", "filename": "compiler/rustc_target/src/spec/s390x_unknown_linux_musl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_musl.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,20 +5,20 @@ pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.endian = Endian::Big;\n     // z10 is the oldest CPU supported by LLVM\n-    base.cpu = \"z10\".to_string();\n+    base.cpu = \"z10\".into();\n     // FIXME: The data_layout string below and the ABI implementation in\n     // cabi_s390x.rs are for now hard-coded to assume the no-vector ABI.\n     // Pass the -vector feature string to LLVM to respect this assumption.\n-    base.features = \"-vector\".to_string();\n+    base.features = \"-vector\".into();\n     base.max_atomic_width = Some(64);\n     base.min_global_align = Some(16);\n     base.static_position_independent_executables = true;\n \n     Target {\n-        llvm_target: \"s390x-unknown-linux-musl\".to_string(),\n+        llvm_target: \"s390x-unknown-linux-musl\".into(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i1:8:16-i8:8:16-i64:64-f128:64-a:8:16-n32:64\".to_string(),\n-        arch: \"s390x\".to_string(),\n+        data_layout: \"E-m:e-i1:8:16-i8:8:16-i64:64-f128:64-a:8:16-n32:64\".into(),\n+        arch: \"s390x\".into(),\n         options: base,\n     }\n }"}, {"sha": "d61e1b2ec1048d1519c6c76e512733c9b270b855", "filename": "compiler/rustc_target/src/spec/solaris_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::TargetOptions;\n+use crate::spec::{cvs, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        os: \"solaris\".to_string(),\n+        os: \"solaris\".into(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,\n-        families: vec![\"unix\".to_string()],\n+        families: cvs![\"unix\"],\n         is_like_solaris: true,\n         linker_is_gnu: false,\n         limit_rdylib_exports: false, // Linker doesn't support this"}, {"sha": "c5602a4513a9ad347b2f83cdec86a6b5cbacaa8b", "filename": "compiler/rustc_target/src/spec/solid_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolid_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,8 +3,8 @@ use crate::spec::TargetOptions;\n \n pub fn opts(kernel: &str) -> TargetOptions {\n     TargetOptions {\n-        os: format!(\"solid_{}\", kernel),\n-        vendor: \"kmc\".to_string(),\n+        os: format!(\"solid_{}\", kernel).into(),\n+        vendor: \"kmc\".into(),\n         frame_pointer: FramePointer::NonLeaf,\n         has_thread_local: true,\n         ..Default::default()"}, {"sha": "39efd8f305cddebab92ac05496da4b348c26faec", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -4,14 +4,14 @@ use crate::spec::Target;\n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.endian = Endian::Big;\n-    base.cpu = \"v9\".to_string();\n+    base.cpu = \"v9\".into();\n     base.max_atomic_width = Some(64);\n \n     Target {\n-        llvm_target: \"sparc64-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"sparc64-unknown-linux-gnu\".into(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n-        arch: \"sparc64\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-S128\".into(),\n+        arch: \"sparc64\".into(),\n         options: base,\n     }\n }"}, {"sha": "718303a4b4d5eea094aeeb6c2ef60bb07e444289", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_netbsd.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,15 +3,15 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n-    base.cpu = \"v9\".to_string();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.cpu = \"v9\".into();\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     base.max_atomic_width = Some(64);\n \n     Target {\n-        llvm_target: \"sparc64-unknown-netbsd\".to_string(),\n+        llvm_target: \"sparc64-unknown-netbsd\".into(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n-        arch: \"sparc64\".to_string(),\n-        options: TargetOptions { endian: Endian::Big, mcount: \"__mcount\".to_string(), ..base },\n+        data_layout: \"E-m:e-i64:64-n32:64-S128\".into(),\n+        arch: \"sparc64\".into(),\n+        options: TargetOptions { endian: Endian::Big, mcount: \"__mcount\".into(), ..base },\n     }\n }"}, {"sha": "2aaa0ca6df844efe4ff0f20fd9f9865924e461fe", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_openbsd.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -4,15 +4,15 @@ use crate::spec::{LinkerFlavor, Target};\n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.endian = Endian::Big;\n-    base.cpu = \"v9\".to_string();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.cpu = \"v9\".into();\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     base.max_atomic_width = Some(64);\n \n     Target {\n-        llvm_target: \"sparc64-unknown-openbsd\".to_string(),\n+        llvm_target: \"sparc64-unknown-openbsd\".into(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n-        arch: \"sparc64\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-S128\".into(),\n+        arch: \"sparc64\".into(),\n         options: base,\n     }\n }"}, {"sha": "71d3de0bfd1ba782ce92c845ec750f32140ed515", "filename": "compiler/rustc_target/src/spec/sparc_unknown_linux_gnu.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -4,15 +4,15 @@ use crate::spec::{LinkerFlavor, Target};\n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.endian = Endian::Big;\n-    base.cpu = \"v9\".to_string();\n+    base.cpu = \"v9\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mv8plus\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mv8plus\".into());\n \n     Target {\n-        llvm_target: \"sparc-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"sparc-unknown-linux-gnu\".into(),\n         pointer_width: 32,\n-        data_layout: \"E-m:e-p:32:32-i64:64-f128:64-n32-S64\".to_string(),\n-        arch: \"sparc\".to_string(),\n+        data_layout: \"E-m:e-p:32:32-i64:64-f128:64-n32-S64\".into(),\n+        arch: \"sparc\".into(),\n         options: base,\n     }\n }"}, {"sha": "79ae54aa6668f6d3444a3fa544fc1ddde89871ae", "filename": "compiler/rustc_target/src/spec/sparcv9_sun_solaris.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -4,21 +4,21 @@ use crate::spec::{LinkerFlavor, Target};\n pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n     base.endian = Endian::Big;\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".into()]);\n     // llvm calls this \"v9\"\n-    base.cpu = \"v9\".to_string();\n-    base.vendor = \"sun\".to_string();\n+    base.cpu = \"v9\".into();\n+    base.vendor = \"sun\".into();\n     base.max_atomic_width = Some(64);\n \n     Target {\n-        llvm_target: \"sparcv9-sun-solaris\".to_string(),\n+        llvm_target: \"sparcv9-sun-solaris\".into(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-S128\".into(),\n         // Use \"sparc64\" instead of \"sparcv9\" here, since the former is already\n         // used widely in the source base.  If we ever needed ABI\n         // differentiation from the sparc64, we could, but that would probably\n         // just be confusing.\n-        arch: \"sparc64\".to_string(),\n+        arch: \"sparc64\".into(),\n         options: base,\n     }\n }"}, {"sha": "ef6038e6120b034cf4844fe9100b4c98247f4a19", "filename": "compiler/rustc_target/src/spec/thumb_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -36,7 +36,7 @@ pub fn opts() -> TargetOptions {\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         executables: true,\n         // In most cases, LLD is good enough\n-        linker: Some(\"rust-lld\".to_string()),\n+        linker: Some(\"rust-lld\".into()),\n         // Because these devices have very little resources having an unwinder is too onerous so we\n         // default to \"abort\" because the \"unwind\" strategy is very rare.\n         panic_strategy: PanicStrategy::Abort,"}, {"sha": "8d6130a8a7936dbe0e0f74b0500216a85d64cda2", "filename": "compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -8,13 +8,13 @@\n //!\n //! **Important:** This target profile **does not** specify a linker script. You just get the default link script when you build a binary for this target. The default link script is very likely wrong, so you should use `-Clink-arg=-Tmy_script.ld` to override that with a correct linker script.\n \n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{cvs, LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"thumbv4t-none-eabi\".to_string(),\n+        llvm_target: \"thumbv4t-none-eabi\".into(),\n         pointer_width: 32,\n-        arch: \"arm\".to_string(),\n+        arch: \"arm\".into(),\n         /* Data layout args are '-' separated:\n          * little endian\n          * stack is 64-bit aligned (EABI)\n@@ -24,24 +24,20 @@ pub fn target() -> Target {\n          * native integers are 32-bit\n          * All other elements are default\n          */\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n+            abi: \"eabi\".into(),\n             linker_flavor: LinkerFlavor::Ld,\n-            linker: Some(\"arm-none-eabi-ld\".to_string()),\n+            linker: Some(\"arm-none-eabi-ld\".into()),\n \n             // extra args passed to the external assembler (assuming `arm-none-eabi-as`):\n             // * activate t32/a32 interworking\n             // * use arch ARMv4T\n             // * use little-endian\n-            asm_args: vec![\n-                \"-mthumb-interwork\".to_string(),\n-                \"-march=armv4t\".to_string(),\n-                \"-mlittle-endian\".to_string(),\n-            ],\n+            asm_args: cvs![\"-mthumb-interwork\", \"-march=armv4t\", \"-mlittle-endian\",],\n \n             // minimum extra features, these cannot be disabled via -C\n-            features: \"+soft-float,+strict-align\".to_string(),\n+            features: \"+soft-float,+strict-align\".into(),\n \n             main_needs_argc_argv: false,\n "}, {"sha": "2546ab9b7e6809833cb339f941983a22d67bcbff", "filename": "compiler/rustc_target/src/spec/thumbv6m_none_eabi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv6m_none_eabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -4,16 +4,16 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"thumbv6m-none-eabi\".to_string(),\n+        llvm_target: \"thumbv6m-none-eabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n \n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n+            abi: \"eabi\".into(),\n             // The ARMv6-M architecture doesn't support unaligned loads/stores so we disable them\n             // with +strict-align.\n-            features: \"+strict-align\".to_string(),\n+            features: \"+strict-align\".into(),\n             // There are no atomic CAS instructions available in the instruction set of the ARMv6-M\n             // architecture\n             atomic_cas: false,"}, {"sha": "f6cbbd38cf4aa889ac284efe176c477646d2a292", "filename": "compiler/rustc_target/src/spec/thumbv7a_pc_windows_msvc.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -9,20 +9,20 @@ pub fn target() -> Target {\n     // should be smart enough to insert branch islands only\n     // where necessary, but this is not the observed behavior.\n     // Disabling the LBR optimization works around the issue.\n-    let pre_link_args_msvc = \"/OPT:NOLBR\".to_string();\n-    base.pre_link_args.entry(LinkerFlavor::Msvc).or_default().push(pre_link_args_msvc.clone());\n+    let pre_link_args_msvc = \"/OPT:NOLBR\";\n+    base.pre_link_args.entry(LinkerFlavor::Msvc).or_default().push(pre_link_args_msvc.into());\n     base.pre_link_args\n         .entry(LinkerFlavor::Lld(LldFlavor::Link))\n         .or_default()\n-        .push(pre_link_args_msvc);\n+        .push(pre_link_args_msvc.into());\n \n     Target {\n-        llvm_target: \"thumbv7a-pc-windows-msvc\".to_string(),\n+        llvm_target: \"thumbv7a-pc-windows-msvc\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:w-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:w-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            features: \"+vfp3,+neon\".to_string(),\n+            features: \"+vfp3,+neon\".into(),\n             max_atomic_width: Some(64),\n             // FIXME(jordanrh): use PanicStrategy::Unwind when SEH is\n             // implemented for windows/arm in LLVM"}, {"sha": "65c2f5a704b763e9ff34a37343424e5414be746e", "filename": "compiler/rustc_target/src/spec/thumbv7a_uwp_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,12 +2,12 @@ use crate::spec::{PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"thumbv7a-pc-windows-msvc\".to_string(),\n+        llvm_target: \"thumbv7a-pc-windows-msvc\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:w-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:w-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            features: \"+vfp3,+neon\".to_string(),\n+            features: \"+vfp3,+neon\".into(),\n             max_atomic_width: Some(64),\n             // FIXME(jordanrh): use PanicStrategy::Unwind when SEH is\n             // implemented for windows/arm in LLVM"}, {"sha": "000e5f2d3c6ba4edbbb29bd50e4949a4a58af07a", "filename": "compiler/rustc_target/src/spec/thumbv7em_none_eabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -13,13 +13,13 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"thumbv7em-none-eabi\".to_string(),\n+        llvm_target: \"thumbv7em-none-eabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n \n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n+            abi: \"eabi\".into(),\n             max_atomic_width: Some(32),\n             ..super::thumb_base::opts()\n         },"}, {"sha": "39a72564e49a2a504b4d7dc7b4d328f93c8a83d3", "filename": "compiler/rustc_target/src/spec/thumbv7em_none_eabihf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -12,13 +12,13 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"thumbv7em-none-eabihf\".to_string(),\n+        llvm_target: \"thumbv7em-none-eabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n \n         options: TargetOptions {\n-            abi: \"eabihf\".to_string(),\n+            abi: \"eabihf\".into(),\n             // `+vfp4` is the lowest common denominator between the Cortex-M4 (vfp4-16) and the\n             // Cortex-M7 (vfp5)\n             // `-d32` both the Cortex-M4 and the Cortex-M7 only have 16 double-precision registers\n@@ -28,7 +28,7 @@ pub fn target() -> Target {\n             //\n             // Reference:\n             // ARMv7-M Architecture Reference Manual - A2.5 The optional floating-point extension\n-            features: \"+vfp4,-d32,-fp64\".to_string(),\n+            features: \"+vfp4,-d32,-fp64\".into(),\n             max_atomic_width: Some(32),\n             ..super::thumb_base::opts()\n         },"}, {"sha": "ab25cde66c7c4cc7fe05b5019901c38155301c56", "filename": "compiler/rustc_target/src/spec/thumbv7m_none_eabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7m_none_eabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -4,13 +4,13 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"thumbv7m-none-eabi\".to_string(),\n+        llvm_target: \"thumbv7m-none-eabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n \n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n+            abi: \"eabi\".into(),\n             max_atomic_width: Some(32),\n             ..super::thumb_base::opts()\n         },"}, {"sha": "9a3e8b5c5f8f2110acd865614bdcda6eea716ca1", "filename": "compiler/rustc_target/src/spec/thumbv7neon_linux_androideabi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -10,15 +10,15 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-march=armv7-a\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-march=armv7-a\".into());\n     Target {\n-        llvm_target: \"armv7-none-linux-android\".to_string(),\n+        llvm_target: \"armv7-none-linux-android\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n-            features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n+            abi: \"eabi\".into(),\n+            features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".into(),\n             max_atomic_width: Some(64),\n             ..base\n         },"}, {"sha": "28c81340ad899be482e1fb951426146680f87442", "filename": "compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -8,14 +8,14 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n+        llvm_target: \"armv7-unknown-linux-gnueabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n         options: TargetOptions {\n-            abi: \"eabihf\".to_string(),\n+            abi: \"eabihf\".into(),\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n-            features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n+            features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".into(),\n             max_atomic_width: Some(64),\n             ..super::linux_gnu_base::opts()\n         },"}, {"sha": "2c375ab22d795d1e5afe6b33f22798417162fd67", "filename": "compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_musleabihf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -11,18 +11,18 @@ pub fn target() -> Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and LLVM\n         // doesn't support the \"musleabihf\" value.\n-        llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n+        llvm_target: \"armv7-unknown-linux-gnueabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n \n         // Most of these settings are copied from the thumbv7neon_unknown_linux_gnueabihf\n         // target.\n         options: TargetOptions {\n-            abi: \"eabihf\".to_string(),\n-            features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n+            abi: \"eabihf\".into(),\n+            features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".into(),\n             max_atomic_width: Some(64),\n-            mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".into(),\n             ..super::linux_musl_base::opts()\n         },\n     }"}, {"sha": "756b1834c827bcc6bab0eb8ef98bb1eba5a1b8c2", "filename": "compiler/rustc_target/src/spec/thumbv8m_base_none_eabi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_base_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_base_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_base_none_eabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -4,16 +4,16 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"thumbv8m.base-none-eabi\".to_string(),\n+        llvm_target: \"thumbv8m.base-none-eabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n \n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n+            abi: \"eabi\".into(),\n             // ARMv8-M baseline doesn't support unaligned loads/stores so we disable them\n             // with +strict-align.\n-            features: \"+strict-align\".to_string(),\n+            features: \"+strict-align\".into(),\n             max_atomic_width: Some(32),\n             ..super::thumb_base::opts()\n         },"}, {"sha": "4b62685465497f7934229d7cfd9af41edeeca3fe", "filename": "compiler/rustc_target/src/spec/thumbv8m_main_none_eabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,13 +5,13 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"thumbv8m.main-none-eabi\".to_string(),\n+        llvm_target: \"thumbv8m.main-none-eabi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n \n         options: TargetOptions {\n-            abi: \"eabi\".to_string(),\n+            abi: \"eabi\".into(),\n             max_atomic_width: Some(32),\n             ..super::thumb_base::opts()\n         },"}, {"sha": "86c25f9e4b99375f28a5ceb1562b46cec0c0dbca", "filename": "compiler/rustc_target/src/spec/thumbv8m_main_none_eabihf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabihf.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,19 +5,19 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"thumbv8m.main-none-eabihf\".to_string(),\n+        llvm_target: \"thumbv8m.main-none-eabihf\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n \n         options: TargetOptions {\n-            abi: \"eabihf\".to_string(),\n+            abi: \"eabihf\".into(),\n             // If the Floating Point extension is implemented in the Cortex-M33\n             // processor, the Cortex-M33 Technical Reference Manual states that\n             // the FPU uses the FPv5 architecture, single-precision instructions\n             // and 16 D registers.\n             // These parameters map to the following LLVM features.\n-            features: \"+fp-armv8,-fp64,-d32\".to_string(),\n+            features: \"+fp-armv8,-fp64,-d32\".into(),\n             max_atomic_width: Some(32),\n             ..super::thumb_base::opts()\n         },"}, {"sha": "bc7244b3a45515cb8a2aba794e6ff2596541ce7c", "filename": "compiler/rustc_target/src/spec/uefi_msvc_base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -18,7 +18,7 @@ pub fn opts() -> TargetOptions {\n         // Non-standard subsystems have no default entry-point in PE+ files. We have to define\n         // one. \"efi_main\" seems to be a common choice amongst other implementations and the\n         // spec.\n-        \"/entry:efi_main\".to_string(),\n+        \"/entry:efi_main\".into(),\n         // COFF images have a \"Subsystem\" field in their header, which defines what kind of\n         // program it is. UEFI has 3 fields reserved, which are EFI_APPLICATION,\n         // EFI_BOOT_SERVICE_DRIVER, and EFI_RUNTIME_DRIVER. We default to EFI_APPLICATION,\n@@ -28,7 +28,7 @@ pub fn opts() -> TargetOptions {\n         // regions the application is loaded into (runtime-drivers need to be put into\n         // reserved areas), as well as whether a return from the entry-point is treated as\n         // exit (default for applications).\n-        \"/subsystem:efi_application\".to_string(),\n+        \"/subsystem:efi_application\".into(),\n     ];\n     base.pre_link_args.entry(LinkerFlavor::Msvc).or_default().extend(pre_link_args_msvc.clone());\n     base.pre_link_args\n@@ -37,17 +37,17 @@ pub fn opts() -> TargetOptions {\n         .extend(pre_link_args_msvc);\n \n     TargetOptions {\n-        os: \"uefi\".to_string(),\n+        os: \"uefi\".into(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Link),\n         disable_redzone: true,\n-        exe_suffix: \".efi\".to_string(),\n+        exe_suffix: \".efi\".into(),\n         allows_weak_linkage: false,\n         panic_strategy: PanicStrategy::Abort,\n         // LLVM does not emit inline assembly because the LLVM target does not get considered as\u2026\n         // \"Windows\".\n         stack_probes: StackProbeType::Call,\n         singlethread: true,\n-        linker: Some(\"rust-lld\".to_string()),\n+        linker: Some(\"rust-lld\".into()),\n         ..base\n     }\n }"}, {"sha": "2beb279e3986160abc8b50bc2ed98a1018b0d85d", "filename": "compiler/rustc_target/src/spec/vxworks_base.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,22 +1,22 @@\n-use crate::spec::TargetOptions;\n+use crate::spec::{cvs, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        os: \"vxworks\".to_string(),\n-        env: \"gnu\".to_string(),\n-        vendor: \"wrs\".to_string(),\n-        linker: Some(\"wr-c++\".to_string()),\n-        exe_suffix: \".vxe\".to_string(),\n+        os: \"vxworks\".into(),\n+        env: \"gnu\".into(),\n+        vendor: \"wrs\".into(),\n+        linker: Some(\"wr-c++\".into()),\n+        exe_suffix: \".vxe\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".to_string()],\n+        families: cvs![\"unix\"],\n         has_rpath: true,\n         has_thread_local: true,\n         crt_static_default: true,\n         crt_static_respected: true,\n         crt_static_allows_dylibs: true,\n         // VxWorks needs to implement this to support profiling\n-        mcount: \"_mcount\".to_string(),\n+        mcount: \"_mcount\".into(),\n         ..Default::default()\n     }\n }"}, {"sha": "b34cac41d78ca89b847e0b620253731099eb3d30", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,4 +1,4 @@\n-use super::wasm_base;\n+use super::{cvs, wasm_base};\n use super::{LinkArgs, LinkerFlavor, PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -11,41 +11,40 @@ pub fn target() -> Target {\n     // however it does have the side effect of automatically exporting a lot\n     // of symbols, which approximates what people want when compiling for\n     // wasm32-unknown-unknown expect, so use it for now.\n-    clang_args.push(\"--export-dynamic\".to_string());\n+    clang_args.push(\"--export-dynamic\".into());\n \n     let mut post_link_args = LinkArgs::new();\n     post_link_args.insert(\n         LinkerFlavor::Em,\n         vec![\n-            \"-s\".to_string(),\n-            \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string(),\n-            \"-s\".to_string(),\n-            \"ASSERTIONS=1\".to_string(),\n-            \"-s\".to_string(),\n-            \"ABORTING_MALLOC=0\".to_string(),\n-            \"-Wl,--fatal-warnings\".to_string(),\n+            \"-s\".into(),\n+            \"ERROR_ON_UNDEFINED_SYMBOLS=1\".into(),\n+            \"-s\".into(),\n+            \"ASSERTIONS=1\".into(),\n+            \"-s\".into(),\n+            \"ABORTING_MALLOC=0\".into(),\n+            \"-Wl,--fatal-warnings\".into(),\n         ],\n     );\n \n     let opts = TargetOptions {\n-        os: \"emscripten\".to_string(),\n+        os: \"emscripten\".into(),\n         linker_flavor: LinkerFlavor::Em,\n         // emcc emits two files - a .js file to instantiate the wasm and supply platform\n         // functionality, and a .wasm file.\n-        exe_suffix: \".js\".to_string(),\n+        exe_suffix: \".js\".into(),\n         linker: None,\n         is_like_emscripten: true,\n         panic_strategy: PanicStrategy::Unwind,\n         post_link_args,\n-        families: vec![\"unix\".to_string(), \"wasm\".to_string()],\n+        families: cvs![\"unix\", \"wasm\"],\n         ..options\n     };\n     Target {\n-        llvm_target: \"wasm32-unknown-emscripten\".to_string(),\n+        llvm_target: \"wasm32-unknown-emscripten\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-f128:64-n32:64-S128-ni:1:10:20\"\n-            .to_string(),\n-        arch: \"wasm32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-f128:64-n32:64-S128-ni:1:10:20\".into(),\n+        arch: \"wasm32\".into(),\n         options: opts,\n     }\n }"}, {"sha": "214b5fce5a6b0da2031909ac6828fbb9896fe410", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -16,7 +16,7 @@ use crate::spec::abi::Abi;\n \n pub fn target() -> Target {\n     let mut options = wasm_base::options();\n-    options.os = \"unknown\".to_string();\n+    options.os = \"unknown\".into();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n \n     // This is a default for backwards-compatibility with the original\n@@ -33,29 +33,29 @@ pub fn target() -> Target {\n \n     // Make sure clang uses LLD as its linker and is configured appropriately\n     // otherwise\n-    clang_args.push(\"--target=wasm32-unknown-unknown\".to_string());\n+    clang_args.push(\"--target=wasm32-unknown-unknown\".into());\n \n     // For now this target just never has an entry symbol no matter the output\n     // type, so unconditionally pass this.\n-    clang_args.push(\"-Wl,--no-entry\".to_string());\n+    clang_args.push(\"-Wl,--no-entry\".into());\n \n     // Rust really needs a way for users to specify exports and imports in\n     // the source code. --export-dynamic isn't the right tool for this job,\n     // however it does have the side effect of automatically exporting a lot\n     // of symbols, which approximates what people want when compiling for\n     // wasm32-unknown-unknown expect, so use it for now.\n-    clang_args.push(\"-Wl,--export-dynamic\".to_string());\n+    clang_args.push(\"-Wl,--export-dynamic\".into());\n \n     // Add the flags to wasm-ld's args too.\n     let lld_args = options.pre_link_args.entry(LinkerFlavor::Lld(LldFlavor::Wasm)).or_default();\n-    lld_args.push(\"--no-entry\".to_string());\n-    lld_args.push(\"--export-dynamic\".to_string());\n+    lld_args.push(\"--no-entry\".into());\n+    lld_args.push(\"--export-dynamic\".into());\n \n     Target {\n-        llvm_target: \"wasm32-unknown-unknown\".to_string(),\n+        llvm_target: \"wasm32-unknown-unknown\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20\".to_string(),\n-        arch: \"wasm32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20\".into(),\n+        arch: \"wasm32\".into(),\n         options,\n     }\n }"}, {"sha": "10eb78e4e25b70a2669e89e129dc9fd7a3c794f0", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -78,13 +78,13 @@ use super::{crt_objects, LinkerFlavor, LldFlavor, Target};\n pub fn target() -> Target {\n     let mut options = wasm_base::options();\n \n-    options.os = \"wasi\".to_string();\n+    options.os = \"wasi\".into();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n     options\n         .pre_link_args\n         .entry(LinkerFlavor::Gcc)\n         .or_insert(Vec::new())\n-        .push(\"--target=wasm32-wasi\".to_string());\n+        .push(\"--target=wasm32-wasi\".into());\n \n     options.pre_link_objects_fallback = crt_objects::pre_wasi_fallback();\n     options.post_link_objects_fallback = crt_objects::post_wasi_fallback();\n@@ -107,10 +107,10 @@ pub fn target() -> Target {\n     options.main_needs_argc_argv = false;\n \n     Target {\n-        llvm_target: \"wasm32-wasi\".to_string(),\n+        llvm_target: \"wasm32-wasi\".into(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20\".to_string(),\n-        arch: \"wasm32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20\".into(),\n+        arch: \"wasm32\".into(),\n         options,\n     }\n }"}, {"sha": "609b7d42e43a11ae007e1944b92a515bb2378a61", "filename": "compiler/rustc_target/src/spec/wasm64_unknown_unknown.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -12,32 +12,32 @@ use super::{LinkerFlavor, LldFlavor, Target};\n \n pub fn target() -> Target {\n     let mut options = wasm_base::options();\n-    options.os = \"unknown\".to_string();\n+    options.os = \"unknown\".into();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n     let clang_args = options.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n \n     // Make sure clang uses LLD as its linker and is configured appropriately\n     // otherwise\n-    clang_args.push(\"--target=wasm64-unknown-unknown\".to_string());\n+    clang_args.push(\"--target=wasm64-unknown-unknown\".into());\n \n     // For now this target just never has an entry symbol no matter the output\n     // type, so unconditionally pass this.\n-    clang_args.push(\"-Wl,--no-entry\".to_string());\n+    clang_args.push(\"-Wl,--no-entry\".into());\n \n     let lld_args = options.pre_link_args.get_mut(&LinkerFlavor::Lld(LldFlavor::Wasm)).unwrap();\n-    lld_args.push(\"--no-entry\".to_string());\n-    lld_args.push(\"-mwasm64\".to_string());\n+    lld_args.push(\"--no-entry\".into());\n+    lld_args.push(\"-mwasm64\".into());\n \n     // Any engine that implements wasm64 will surely implement the rest of these\n     // features since they were all merged into the official spec by the time\n     // wasm64 was designed.\n-    options.features = \"+bulk-memory,+mutable-globals,+sign-ext,+nontrapping-fptoint\".to_string();\n+    options.features = \"+bulk-memory,+mutable-globals,+sign-ext,+nontrapping-fptoint\".into();\n \n     Target {\n-        llvm_target: \"wasm64-unknown-unknown\".to_string(),\n+        llvm_target: \"wasm64-unknown-unknown\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-p:64:64-i64:64-n32:64-S128-ni:1:10:20\".to_string(),\n-        arch: \"wasm64\".to_string(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-n32:64-S128-ni:1:10:20\".into(),\n+        arch: \"wasm64\".into(),\n         options,\n     }\n }"}, {"sha": "de7b7374af3145f9bb04d5dabb02ff30c599e9fd", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,13 +1,13 @@\n use super::crt_objects::CrtObjectsFallback;\n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions, TlsModel};\n+use super::{cvs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions, TlsModel};\n use std::collections::BTreeMap;\n \n pub fn options() -> TargetOptions {\n     let mut lld_args = Vec::new();\n     let mut clang_args = Vec::new();\n-    let mut arg = |arg: &str| {\n-        lld_args.push(arg.to_string());\n-        clang_args.push(format!(\"-Wl,{}\", arg));\n+    let mut arg = |arg: &'static str| {\n+        lld_args.push(arg.into());\n+        clang_args.push(format!(\"-Wl,{}\", arg).into());\n     };\n \n     // By default LLD only gives us one page of stack (64k) which is a\n@@ -61,7 +61,7 @@ pub fn options() -> TargetOptions {\n \n     TargetOptions {\n         is_like_wasm: true,\n-        families: vec![\"wasm\".to_string()],\n+        families: cvs![\"wasm\"],\n \n         // we allow dynamic linking, but only cdylibs. Basically we allow a\n         // final library artifact that exports some symbols (a wasm module) but\n@@ -73,9 +73,9 @@ pub fn options() -> TargetOptions {\n         executables: true,\n \n         // relatively self-explanatory!\n-        exe_suffix: \".wasm\".to_string(),\n-        dll_prefix: String::new(),\n-        dll_suffix: \".wasm\".to_string(),\n+        exe_suffix: \".wasm\".into(),\n+        dll_prefix: \"\".into(),\n+        dll_suffix: \".wasm\".into(),\n         eh_frame_header: false,\n \n         max_atomic_width: Some(64),\n@@ -100,7 +100,7 @@ pub fn options() -> TargetOptions {\n         limit_rdylib_exports: false,\n \n         // we use the LLD shipped with the Rust toolchain by default\n-        linker: Some(\"rust-lld\".to_owned()),\n+        linker: Some(\"rust-lld\".into()),\n         lld_flavor: LldFlavor::Wasm,\n         linker_is_gnu: false,\n "}, {"sha": "d11f1f7d3f856003d1fd731fa6c253d14b571da3", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,5 +1,5 @@\n use crate::spec::crt_objects::{self, CrtObjectsFallback};\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n+use crate::spec::{cvs, LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -8,11 +8,11 @@ pub fn opts() -> TargetOptions {\n         vec![\n             // Tell GCC to avoid linker plugins, because we are not bundling\n             // them with Windows installer, and Rust does its own LTO anyways.\n-            \"-fno-use-linker-plugin\".to_string(),\n+            \"-fno-use-linker-plugin\".into(),\n             // Enable ASLR\n-            \"-Wl,--dynamicbase\".to_string(),\n+            \"-Wl,--dynamicbase\".into(),\n             // ASLR will rebase it anyway so leaving that option enabled only leads to confusion\n-            \"-Wl,--disable-auto-image-base\".to_string(),\n+            \"-Wl,--disable-auto-image-base\".into(),\n         ],\n     );\n \n@@ -22,28 +22,28 @@ pub fn opts() -> TargetOptions {\n     // Order of `late_link_args*` was found through trial and error to work with various\n     // mingw-w64 versions (not tested on the CI). It's expected to change from time to time.\n     let mingw_libs = vec![\n-        \"-lmsvcrt\".to_string(),\n-        \"-lmingwex\".to_string(),\n-        \"-lmingw32\".to_string(),\n-        \"-lgcc\".to_string(), // alas, mingw* libraries above depend on libgcc\n+        \"-lmsvcrt\".into(),\n+        \"-lmingwex\".into(),\n+        \"-lmingw32\".into(),\n+        \"-lgcc\".into(), // alas, mingw* libraries above depend on libgcc\n         // mingw's msvcrt is a weird hybrid import library and static library.\n         // And it seems that the linker fails to use import symbols from msvcrt\n         // that are required from functions in msvcrt in certain cases. For example\n         // `_fmode` that is used by an implementation of `__p__fmode` in x86_64.\n         // The library is purposely listed twice to fix that.\n         //\n         // See https://github.com/rust-lang/rust/pull/47483 for some more details.\n-        \"-lmsvcrt\".to_string(),\n-        \"-luser32\".to_string(),\n-        \"-lkernel32\".to_string(),\n+        \"-lmsvcrt\".into(),\n+        \"-luser32\".into(),\n+        \"-lkernel32\".into(),\n     ];\n     late_link_args.insert(LinkerFlavor::Gcc, mingw_libs.clone());\n     late_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), mingw_libs);\n     let dynamic_unwind_libs = vec![\n         // If any of our crates are dynamically linked then we need to use\n         // the shared libgcc_s-dw2-1.dll. This is required to support\n         // unwinding across DLL boundaries.\n-        \"-lgcc_s\".to_string(),\n+        \"-lgcc_s\".into(),\n     ];\n     late_link_args_dynamic.insert(LinkerFlavor::Gcc, dynamic_unwind_libs.clone());\n     late_link_args_dynamic.insert(LinkerFlavor::Lld(LldFlavor::Ld), dynamic_unwind_libs);\n@@ -53,25 +53,25 @@ pub fn opts() -> TargetOptions {\n         // binaries to be redistributed without the libgcc_s-dw2-1.dll\n         // dependency, but unfortunately break unwinding across DLL\n         // boundaries when unwinding across FFI boundaries.\n-        \"-lgcc_eh\".to_string(),\n-        \"-l:libpthread.a\".to_string(),\n+        \"-lgcc_eh\".into(),\n+        \"-l:libpthread.a\".into(),\n     ];\n     late_link_args_static.insert(LinkerFlavor::Gcc, static_unwind_libs.clone());\n     late_link_args_static.insert(LinkerFlavor::Lld(LldFlavor::Ld), static_unwind_libs);\n \n     TargetOptions {\n-        os: \"windows\".to_string(),\n-        env: \"gnu\".to_string(),\n-        vendor: \"pc\".to_string(),\n+        os: \"windows\".into(),\n+        env: \"gnu\".into(),\n+        vendor: \"pc\".into(),\n         // FIXME(#13846) this should be enabled for windows\n         function_sections: false,\n-        linker: Some(\"gcc\".to_string()),\n+        linker: Some(\"gcc\".into()),\n         dynamic_linking: true,\n         executables: true,\n-        dll_prefix: String::new(),\n-        dll_suffix: \".dll\".to_string(),\n-        exe_suffix: \".exe\".to_string(),\n-        families: vec![\"windows\".to_string()],\n+        dll_prefix: \"\".into(),\n+        dll_suffix: \".dll\".into(),\n+        exe_suffix: \".exe\".into(),\n+        families: cvs![\"windows\"],\n         is_like_windows: true,\n         allows_weak_linkage: false,\n         pre_link_args,\n@@ -87,7 +87,6 @@ pub fn opts() -> TargetOptions {\n         emit_debug_gdb_scripts: false,\n         requires_uwtable: true,\n         eh_frame_header: false,\n-\n         ..Default::default()\n     }\n }"}, {"sha": "21062c337d82522c7920162cfbbbd48ad8e57124", "filename": "compiler/rustc_target/src/spec/windows_msvc_base.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,19 +1,19 @@\n-use crate::spec::TargetOptions;\n+use crate::spec::{cvs, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let base = super::msvc_base::opts();\n \n     TargetOptions {\n-        os: \"windows\".to_string(),\n-        env: \"msvc\".to_string(),\n-        vendor: \"pc\".to_string(),\n+        os: \"windows\".into(),\n+        env: \"msvc\".into(),\n+        vendor: \"pc\".into(),\n         dynamic_linking: true,\n-        dll_prefix: String::new(),\n-        dll_suffix: \".dll\".to_string(),\n-        exe_suffix: \".exe\".to_string(),\n-        staticlib_prefix: String::new(),\n-        staticlib_suffix: \".lib\".to_string(),\n-        families: vec![\"windows\".to_string()],\n+        dll_prefix: \"\".into(),\n+        dll_suffix: \".dll\".into(),\n+        exe_suffix: \".exe\".into(),\n+        staticlib_prefix: \"\".into(),\n+        staticlib_suffix: \".lib\".into(),\n+        families: cvs![\"windows\"],\n         crt_static_allows_dylibs: true,\n         crt_static_respected: true,\n         requires_uwtable: true,"}, {"sha": "119683917768bac8321aeca0c7741b59cae94728", "filename": "compiler/rustc_target/src/spec/windows_uwp_gnu_base.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -9,24 +9,24 @@ pub fn opts() -> TargetOptions {\n     let late_link_args_dynamic = LinkArgs::new();\n     let late_link_args_static = LinkArgs::new();\n     let mingw_libs = vec![\n-        //\"-lwinstorecompat\".to_string(),\n-        //\"-lmingwex\".to_string(),\n-        //\"-lwinstorecompat\".to_string(),\n-        \"-lwinstorecompat\".to_string(),\n-        \"-lruntimeobject\".to_string(),\n-        \"-lsynchronization\".to_string(),\n-        \"-lvcruntime140_app\".to_string(),\n-        \"-lucrt\".to_string(),\n-        \"-lwindowsapp\".to_string(),\n-        \"-lmingwex\".to_string(),\n-        \"-lmingw32\".to_string(),\n+        //\"-lwinstorecompat\".into(),\n+        //\"-lmingwex\".into(),\n+        //\"-lwinstorecompat\".into(),\n+        \"-lwinstorecompat\".into(),\n+        \"-lruntimeobject\".into(),\n+        \"-lsynchronization\".into(),\n+        \"-lvcruntime140_app\".into(),\n+        \"-lucrt\".into(),\n+        \"-lwindowsapp\".into(),\n+        \"-lmingwex\".into(),\n+        \"-lmingw32\".into(),\n     ];\n     late_link_args.insert(LinkerFlavor::Gcc, mingw_libs.clone());\n     late_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), mingw_libs);\n \n     TargetOptions {\n-        abi: \"uwp\".to_string(),\n-        vendor: \"uwp\".to_string(),\n+        abi: \"uwp\".into(),\n+        vendor: \"uwp\".into(),\n         executables: false,\n         limit_rdylib_exports: false,\n         late_link_args,"}, {"sha": "d6b065b529a56fea6574feb2be5e830a27b76a93", "filename": "compiler/rustc_target/src/spec/windows_uwp_msvc_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,9 +3,9 @@ use crate::spec::{LinkerFlavor, LldFlavor, TargetOptions};\n pub fn opts() -> TargetOptions {\n     let mut opts = super::windows_msvc_base::opts();\n \n-    opts.abi = \"uwp\".to_string();\n-    opts.vendor = \"uwp\".to_string();\n-    let pre_link_args_msvc = vec![\"/APPCONTAINER\".to_string(), \"mincore.lib\".to_string()];\n+    opts.abi = \"uwp\".into();\n+    opts.vendor = \"uwp\".into();\n+    let pre_link_args_msvc = vec![\"/APPCONTAINER\".into(), \"mincore.lib\".into()];\n     opts.pre_link_args.entry(LinkerFlavor::Msvc).or_default().extend(pre_link_args_msvc.clone());\n     opts.pre_link_args\n         .entry(LinkerFlavor::Lld(LldFlavor::Link))"}, {"sha": "51d14f0403a5537a98515386abe7a526b66238d0", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,14 +3,12 @@ use crate::spec::{FramePointer, LinkerFlavor, SanitizerSet, StackProbeType, Targ\n \n pub fn target() -> Target {\n     let mut base = super::apple_base::opts(\"macos\");\n-    base.cpu = \"core2\".to_string();\n+    base.cpu = \"core2\".into();\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n     base.frame_pointer = FramePointer::Always;\n-    base.pre_link_args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\"-m64\".to_string(), \"-arch\".to_string(), \"x86_64\".to_string()],\n-    );\n-    base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n+    base.pre_link_args\n+        .insert(LinkerFlavor::Gcc, vec![\"-m64\".into(), \"-arch\".into(), \"x86_64\".into()]);\n+    base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.supported_sanitizers =\n@@ -23,11 +21,11 @@ pub fn target() -> Target {\n     let llvm_target = super::apple_base::macos_llvm_target(&arch);\n \n     Target {\n-        llvm_target,\n+        llvm_target: llvm_target.into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: arch.to_string(),\n-        options: TargetOptions { mcount: \"\\u{1}mcount\".to_string(), ..base },\n+            .into(),\n+        arch: arch.into(),\n+        options: TargetOptions { mcount: \"\\u{1}mcount\".into(), ..base },\n     }\n }"}, {"sha": "5e64ed0cff64203a82973a02c0a64a47cb52b08d", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -3,12 +3,14 @@ use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = opts(\"ios\", Arch::X86_64);\n+    let llvm_target = super::apple_base::ios_sim_llvm_target(\"x86_64\");\n+\n     Target {\n-        llvm_target: super::apple_base::ios_sim_llvm_target(\"x86_64\"),\n+        llvm_target: llvm_target.into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved"}, {"sha": "c75632571ad38d100450cb96ddd8467c892bfa2f", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -4,11 +4,11 @@ use crate::spec::{StackProbeType, Target, TargetOptions};\n pub fn target() -> Target {\n     let base = opts(\"ios\", Arch::X86_64_macabi);\n     Target {\n-        llvm_target: \"x86_64-apple-ios13.0-macabi\".to_string(),\n+        llvm_target: \"x86_64-apple-ios13.0-macabi\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved"}, {"sha": "a848c5a0affea9ae4af1a60283b1488319d4dd76", "filename": "compiler/rustc_target/src/spec/x86_64_apple_tvos.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -4,10 +4,10 @@ use crate::spec::{StackProbeType, Target, TargetOptions};\n pub fn target() -> Target {\n     let base = opts(\"tvos\", Arch::X86_64);\n     Target {\n-        llvm_target: \"x86_64-apple-tvos\".to_string(),\n+        llvm_target: \"x86_64-apple-tvos\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n-        arch: \"x86_64\".to_string(),\n+        data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".into(),\n+        arch: \"x86_64\".into(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved"}, {"sha": "47c70513faf88f71eddc89a14c0236c0c77fc8de", "filename": "compiler/rustc_target/src/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1,4 +1,6 @@\n-use std::iter;\n+use std::{borrow::Cow, iter};\n+\n+use crate::spec::cvs;\n \n use super::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n \n@@ -58,18 +60,18 @@ pub fn target() -> Target {\n         abi: \"fortanix\".into(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         executables: true,\n-        linker: Some(\"rust-lld\".to_owned()),\n+        linker: Some(\"rust-lld\".into()),\n         max_atomic_width: Some(64),\n         cpu: \"x86-64\".into(),\n         features: \"+rdrnd,+rdseed,+lvi-cfi,+lvi-load-hardening\".into(),\n-        llvm_args: vec![\"--x86-experimental-lvi-inline-asm-hardening\".into()],\n+        llvm_args: cvs![\"--x86-experimental-lvi-inline-asm-hardening\"],\n         position_independent_executables: true,\n         pre_link_args: iter::once((\n             LinkerFlavor::Lld(LldFlavor::Ld),\n-            PRE_LINK_ARGS.iter().cloned().map(String::from).collect(),\n+            PRE_LINK_ARGS.iter().cloned().map(Cow::from).collect(),\n         ))\n         .collect(),\n-        override_export_symbols: Some(EXPORT_SYMBOLS.iter().cloned().map(String::from).collect()),\n+        override_export_symbols: Some(EXPORT_SYMBOLS.iter().cloned().map(Cow::from).collect()),\n         relax_elf_relocations: true,\n         ..Default::default()\n     };"}, {"sha": "4f88fc3500bdfaf389b4b52d54a99bb72975443a", "filename": "compiler/rustc_target/src/spec/x86_64_fuchsia.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,18 +2,18 @@ use crate::spec::{SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::fuchsia_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI;\n \n     Target {\n-        llvm_target: \"x86_64-fuchsia\".to_string(),\n+        llvm_target: \"x86_64-fuchsia\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "049cab0d554ecbf96ce75d06f81995b61b8442cf", "filename": "compiler/rustc_target/src/spec/x86_64_linux_android.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,20 +2,20 @@ use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target, TargetOpti\n \n pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     // https://developer.android.com/ndk/guides/abis.html#86-64\n-    base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt\".to_string();\n+    base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n \n     Target {\n-        llvm_target: \"x86_64-linux-android\".to_string(),\n+        llvm_target: \"x86_64-linux-android\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: TargetOptions { supported_sanitizers: SanitizerSet::ADDRESS, ..base },\n     }\n }"}, {"sha": "2a697daeb28f829e96fc4d954be05963a5c6eea4", "filename": "compiler/rustc_target/src/spec/x86_64_pc_solaris.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,20 +2,20 @@ use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n-    base.cpu = \"x86-64\".to_string();\n-    base.vendor = \"pc\".to_string();\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".into()]);\n+    base.cpu = \"x86-64\".into();\n+    base.vendor = \"pc\".into();\n     base.max_atomic_width = Some(64);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI;\n \n     Target {\n-        llvm_target: \"x86_64-pc-solaris\".to_string(),\n+        llvm_target: \"x86_64-pc-solaris\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "0fa43481c9bbb988811f064f4acd3883b4d5d109", "filename": "compiler/rustc_target/src/spec/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,22 +2,22 @@ use crate::spec::{LinkerFlavor, LldFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_gnu_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     let gcc_pre_link_args = base.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n-    gcc_pre_link_args.push(\"-m64\".to_string());\n+    gcc_pre_link_args.push(\"-m64\".into());\n     // Use high-entropy 64 bit address space for ASLR\n-    gcc_pre_link_args.push(\"-Wl,--high-entropy-va\".to_string());\n+    gcc_pre_link_args.push(\"-Wl,--high-entropy-va\".into());\n     base.pre_link_args\n-        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".to_string(), \"i386pep\".to_string()]);\n+        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".into(), \"i386pep\".into()]);\n     base.max_atomic_width = Some(64);\n-    base.linker = Some(\"x86_64-w64-mingw32-gcc\".to_string());\n+    base.linker = Some(\"x86_64-w64-mingw32-gcc\".into());\n \n     Target {\n-        llvm_target: \"x86_64-pc-windows-gnu\".to_string(),\n+        llvm_target: \"x86_64-pc-windows-gnu\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "081806aa698191c0ab79a29094b1a599489f0949", "filename": "compiler/rustc_target/src/spec/x86_64_pc_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_msvc.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,15 +2,15 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n \n     Target {\n-        llvm_target: \"x86_64-pc-windows-msvc\".to_string(),\n+        llvm_target: \"x86_64-pc-windows-msvc\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "a02018266fbb2a77d381cbb33d78df5e6b13fc08", "filename": "compiler/rustc_target/src/spec/x86_64_sun_solaris.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,19 +2,19 @@ use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n-    base.cpu = \"x86-64\".to_string();\n-    base.vendor = \"sun\".to_string();\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".into()]);\n+    base.cpu = \"x86-64\".into();\n+    base.vendor = \"sun\".into();\n     base.max_atomic_width = Some(64);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n \n     Target {\n-        llvm_target: \"x86_64-pc-solaris\".to_string(),\n+        llvm_target: \"x86_64-pc-solaris\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "1f2b998a7ba5fa45a341a46a6d538e6f77be045e", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,18 +2,18 @@ use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::dragonfly_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n \n     Target {\n-        llvm_target: \"x86_64-unknown-dragonfly\".to_string(),\n+        llvm_target: \"x86_64-unknown-dragonfly\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "c9aedd6ea82f7af3e139f799460ec18d61638d7c", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,20 +2,20 @@ use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.supported_sanitizers =\n         SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::MEMORY | SanitizerSet::THREAD;\n \n     Target {\n-        llvm_target: \"x86_64-unknown-freebsd\".to_string(),\n+        llvm_target: \"x86_64-unknown-freebsd\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "aebbd18c66a4f72b5a14a2efc0d9747e90fc21fe", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_haiku.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,20 +2,20 @@ use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::haiku_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".into()]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     // This option is required to build executables on Haiku x86_64\n     base.position_independent_executables = true;\n \n     Target {\n-        llvm_target: \"x86_64-unknown-haiku\".to_string(),\n+        llvm_target: \"x86_64-unknown-haiku\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "d315301615bcf3cf6258e04b479f4e715fd8641d", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_hermit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,18 +2,18 @@ use crate::spec::{StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::hermit_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.features = \"+rdrnd,+rdseed\".to_string();\n+    base.features = \"+rdrnd,+rdseed\".into();\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n \n     Target {\n-        llvm_target: \"x86_64-unknown-hermit\".to_string(),\n+        llvm_target: \"x86_64-unknown-hermit\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "9529fa9640dfaaf0f355bd0b9dbc7763428fe172", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_illumos.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,19 +2,19 @@ use crate::spec::{LinkerFlavor, SanitizerSet, Target};\n \n pub fn target() -> Target {\n     let mut base = super::illumos_base::opts();\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string(), \"-std=c99\".to_string()]);\n-    base.cpu = \"x86-64\".to_string();\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".into(), \"-std=c99\".into()]);\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI;\n \n     Target {\n         // LLVM does not currently have a separate illumos target,\n         // so we still pass Solaris to it\n-        llvm_target: \"x86_64-pc-solaris\".to_string(),\n+        llvm_target: \"x86_64-pc-solaris\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "78189a0c0969a3dd14dd1fb4b762246b085a4861", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_l4re_uclibc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,18 +2,18 @@ use crate::spec::{PanicStrategy, Target};\n \n pub fn target() -> Target {\n     let mut base = super::l4re_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     base.crt_static_allows_dylibs = false;\n     base.dynamic_linking = false;\n     base.panic_strategy = PanicStrategy::Abort;\n \n     Target {\n-        llvm_target: \"x86_64-unknown-l4re-uclibc\".to_string(),\n+        llvm_target: \"x86_64-unknown-l4re-uclibc\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "e525cfdde14fb3dabdf34e03e3667b946900293e", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,9 +2,9 @@ use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.static_position_independent_executables = true;\n@@ -15,11 +15,11 @@ pub fn target() -> Target {\n         | SanitizerSet::THREAD;\n \n     Target {\n-        llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"x86_64-unknown-linux-gnu\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "863b41633e24715d5987cb99208bef25f74265a0", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,10 +2,10 @@ use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n-    base.abi = \"x32\".to_string();\n+    base.cpu = \"x86-64\".into();\n+    base.abi = \"x32\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mx32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mx32\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.has_thread_local = false;\n@@ -14,12 +14,12 @@ pub fn target() -> Target {\n     base.needs_plt = true;\n \n     Target {\n-        llvm_target: \"x86_64-unknown-linux-gnux32\".to_string(),\n+        llvm_target: \"x86_64-unknown-linux-gnux32\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "8678f06e2cb56faf0ec41c36eec24e8dc6fa3a99", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,9 +2,9 @@ use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.static_position_independent_executables = true;\n@@ -15,11 +15,11 @@ pub fn target() -> Target {\n         | SanitizerSet::THREAD;\n \n     Target {\n-        llvm_target: \"x86_64-unknown-linux-musl\".to_string(),\n+        llvm_target: \"x86_64-unknown-linux-musl\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "a7115dace1c0841a5ed2a3e0448caf6db9cb684a", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,9 +2,9 @@ use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target, TargetOpti\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.supported_sanitizers = SanitizerSet::ADDRESS\n@@ -14,11 +14,11 @@ pub fn target() -> Target {\n         | SanitizerSet::THREAD;\n \n     Target {\n-        llvm_target: \"x86_64-unknown-netbsd\".to_string(),\n+        llvm_target: \"x86_64-unknown-netbsd\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n-        options: TargetOptions { mcount: \"__mcount\".to_string(), ..base },\n+            .into(),\n+        arch: \"x86_64\".into(),\n+        options: TargetOptions { mcount: \"__mcount\".into(), ..base },\n     }\n }"}, {"sha": "0c510dfaa12c49722dbcef06ca195660120ad2de", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_none.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -11,7 +11,7 @@ use super::{\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        cpu: \"x86-64\".to_string(),\n+        cpu: \"x86-64\".into(),\n         max_atomic_width: Some(64),\n         // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n         stack_probes: StackProbeType::Call,\n@@ -20,22 +20,22 @@ pub fn target() -> Target {\n         relro_level: RelroLevel::Full,\n         relocation_model: RelocModel::Pic,\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-        linker: Some(\"rust-lld\".to_owned()),\n+        linker: Some(\"rust-lld\".into()),\n         features:\n             \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\"\n-                .to_string(),\n+                .into(),\n         executables: true,\n         disable_redzone: true,\n         panic_strategy: PanicStrategy::Abort,\n         code_model: Some(CodeModel::Kernel),\n         ..Default::default()\n     };\n     Target {\n-        llvm_target: \"x86_64-unknown-none-elf\".to_string(),\n+        llvm_target: \"x86_64-unknown-none-elf\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: opts,\n     }\n }"}, {"sha": "0db88d64ac0725761170d7d4e3fc1be905201c4b", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_none_linuxkernel.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_linuxkernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_linuxkernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_linuxkernel.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -5,24 +5,23 @@ use crate::spec::{CodeModel, LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_kernel_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     base.features =\n-        \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\"\n-            .to_string();\n+        \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\".into();\n     base.code_model = Some(CodeModel::Kernel);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n \n     Target {\n         // FIXME: Some dispute, the linux-on-clang folks think this should use\n         // \"Linux\". We disagree because running *on* Linux is nothing like\n         // running *as\" linux, and historically the \"os\" component as has always\n         // been used to mean the \"on\" part.\n-        llvm_target: \"x86_64-unknown-none-elf\".to_string(),\n+        llvm_target: \"x86_64-unknown-none-elf\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n \n         options: base,\n     }"}, {"sha": "11e9cc4abc0c06afd06e9a2e7bb97337218a40e8", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,18 +2,18 @@ use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n \n     Target {\n-        llvm_target: \"x86_64-unknown-openbsd\".to_string(),\n+        llvm_target: \"x86_64-unknown-openbsd\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "af8b9673c3063811c931a0d5731aa9156c6ba3a0", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_redox.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,18 +2,18 @@ use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::redox_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n \n     Target {\n-        llvm_target: \"x86_64-unknown-redox\".to_string(),\n+        llvm_target: \"x86_64-unknown-redox\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "a7ae17839da8c3c189faba9084dcd098ae8dbba2", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_uefi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_uefi.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -9,7 +9,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::uefi_msvc_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n \n     // We disable MMX and SSE for now, even though UEFI allows using them. Problem is, you have to\n@@ -22,14 +22,14 @@ pub fn target() -> Target {\n     //\n     // If you initialize FP units yourself, you can override these flags with custom linker\n     // arguments, thus giving you access to full MMX/SSE acceleration.\n-    base.features = \"-mmx,-sse,+soft-float\".to_string();\n+    base.features = \"-mmx,-sse,+soft-float\".into();\n \n     Target {\n-        llvm_target: \"x86_64-unknown-windows\".to_string(),\n+        llvm_target: \"x86_64-unknown-windows\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n \n         options: base,\n     }"}, {"sha": "a94bbbf6edeb92dd857727c95e2f7fe66431a402", "filename": "compiler/rustc_target/src/spec/x86_64_uwp_windows_gnu.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,21 +2,21 @@ use crate::spec::{LinkerFlavor, LldFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_uwp_gnu_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     let gcc_pre_link_args = base.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n-    gcc_pre_link_args.push(\"-m64\".to_string());\n+    gcc_pre_link_args.push(\"-m64\".into());\n     // Use high-entropy 64 bit address space for ASLR\n-    gcc_pre_link_args.push(\"-Wl,--high-entropy-va\".to_string());\n+    gcc_pre_link_args.push(\"-Wl,--high-entropy-va\".into());\n     base.pre_link_args\n-        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".to_string(), \"i386pep\".to_string()]);\n+        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".into(), \"i386pep\".into()]);\n     base.max_atomic_width = Some(64);\n \n     Target {\n-        llvm_target: \"x86_64-pc-windows-gnu\".to_string(),\n+        llvm_target: \"x86_64-pc-windows-gnu\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "b2769350bf66dc34d8084528b0379bbe9dcfc65a", "filename": "compiler/rustc_target/src/spec/x86_64_uwp_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_msvc.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,15 +2,15 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n \n     Target {\n-        llvm_target: \"x86_64-pc-windows-msvc\".to_string(),\n+        llvm_target: \"x86_64-pc-windows-msvc\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "16d29753e7dc48e313436a506a6c8deebb890526", "filename": "compiler/rustc_target/src/spec/x86_64_wrs_vxworks.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -2,19 +2,19 @@ use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n+    base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.disable_redzone = true;\n \n     Target {\n-        llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),\n+        llvm_target: \"x86_64-unknown-linux-gnu\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n+            .into(),\n+        arch: \"x86_64\".into(),\n         options: base,\n     }\n }"}, {"sha": "0d33fea75f40775bff663d42f8cb3a1376e369c1", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -383,7 +383,7 @@ pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n     unsafe { intrinsics::size_of_val(val) }\n }\n \n-/// Returns the [ABI]-required minimum alignment of a type.\n+/// Returns the [ABI]-required minimum alignment of a type in bytes.\n ///\n /// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n@@ -407,7 +407,8 @@ pub fn min_align_of<T>() -> usize {\n     intrinsics::min_align_of::<T>()\n }\n \n-/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.\n+/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to in\n+/// bytes.\n ///\n /// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n@@ -430,7 +431,7 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n     unsafe { intrinsics::min_align_of_val(val) }\n }\n \n-/// Returns the [ABI]-required minimum alignment of a type.\n+/// Returns the [ABI]-required minimum alignment of a type in bytes.\n ///\n /// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n@@ -454,7 +455,8 @@ pub const fn align_of<T>() -> usize {\n     intrinsics::min_align_of::<T>()\n }\n \n-/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.\n+/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to in\n+/// bytes.\n ///\n /// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n@@ -477,7 +479,8 @@ pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {\n     unsafe { intrinsics::min_align_of_val(val) }\n }\n \n-/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.\n+/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to in\n+/// bytes.\n ///\n /// Every reference to a value of the type `T` must be a multiple of this number.\n ///"}, {"sha": "b93c2ea961565dcfbd72597890633c680890ae4a", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -640,8 +640,9 @@ pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n ///\n /// let mut array = [0, 1, 2, 3];\n ///\n-/// let x = array[0..].as_mut_ptr() as *mut [u32; 2]; // this is `array[0..2]`\n-/// let y = array[2..].as_mut_ptr() as *mut [u32; 2]; // this is `array[2..4]`\n+/// let (x, y) = array.split_at_mut(2);\n+/// let x = x.as_mut_ptr().cast::<[u32; 2]>(); // this is `array[0..2]`\n+/// let y = y.as_mut_ptr().cast::<[u32; 2]>(); // this is `array[2..4]`\n ///\n /// unsafe {\n ///     ptr::swap(x, y);"}, {"sha": "ac07547de703b97161135a8d33ea6e3dbccef4b1", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -1002,7 +1002,12 @@ fn attributes(it: &clean::Item) -> Vec<String> {\n         .iter()\n         .filter_map(|attr| {\n             if ALLOWED_ATTRIBUTES.contains(&attr.name_or_empty()) {\n-                Some(pprust::attribute_to_string(attr).replace('\\n', \"\").replace(\"  \", \" \"))\n+                Some(\n+                    pprust::attribute_to_string(attr)\n+                        .replace(\"\\\\\\n\", \"\")\n+                        .replace('\\n', \"\")\n+                        .replace(\"  \", \" \"),\n+                )\n             } else {\n                 None\n             }"}, {"sha": "6777871846e2d35bed0120751fe83e9acacdfc50", "filename": "src/test/rustdoc/attribute-rendering.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/src%2Ftest%2Frustdoc%2Fattribute-rendering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/src%2Ftest%2Frustdoc%2Fattribute-rendering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fattribute-rendering.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -0,0 +1,7 @@\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/fn.f.html'\n+// @has - //*[@'class=\"docblock item-decl\"]' '#[export_name = \"f\"] pub fn f()'\n+#[export_name = \"\\\n+f\"]\n+pub fn f() {}"}, {"sha": "2a57afa1a6a6ed6387d739d725275853c9e3a6c0", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -196,3 +196,22 @@ pub unsafe extern \"C\" fn inline_never() {\n pub unsafe extern \"C\" fn inline_all() {\n     asm!(\"\", options(noreturn));\n }\n+\n+#[naked]\n+pub unsafe extern \"C\" fn allow_compile_error(a: u32) -> u32 {\n+    compile_error!(\"this is a user specified error\")\n+    //~^ ERROR this is a user specified error\n+}\n+\n+#[naked]\n+pub unsafe extern \"C\" fn allow_compile_error_and_asm(a: u32) -> u32 {\n+    compile_error!(\"this is a user specified error\");\n+    //~^ ERROR this is a user specified error\n+    asm!(\"\", options(noreturn))\n+}\n+\n+#[naked]\n+pub unsafe extern \"C\" fn invalid_asm_syntax(a: u32) -> u32 {\n+    asm!(invalid_syntax)\n+    //~^ ERROR asm template must be a string literal\n+}"}, {"sha": "8a610b25f0039963edc8cfacc7215c8c75bf28ae", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6af09d2505f38e4f1df291df56d497fb2ad935ed/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6af09d2505f38e4f1df291df56d497fb2ad935ed/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=6af09d2505f38e4f1df291df56d497fb2ad935ed", "patch": "@@ -4,6 +4,24 @@ error: asm with the `pure` option must have at least one output\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^\n \n+error: this is a user specified error\n+  --> $DIR/naked-functions.rs:202:5\n+   |\n+LL |     compile_error!(\"this is a user specified error\")\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this is a user specified error\n+  --> $DIR/naked-functions.rs:208:5\n+   |\n+LL |     compile_error!(\"this is a user specified error\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: asm template must be a string literal\n+  --> $DIR/naked-functions.rs:215:10\n+   |\n+LL |     asm!(invalid_syntax)\n+   |          ^^^^^^^^^^^^^^\n+\n error: patterns not allowed in naked function parameters\n   --> $DIR/naked-functions.rs:20:5\n    |\n@@ -280,6 +298,6 @@ error: naked functions cannot be inlined\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 30 previous errors; 2 warnings emitted\n+error: aborting due to 33 previous errors; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0787`."}]}