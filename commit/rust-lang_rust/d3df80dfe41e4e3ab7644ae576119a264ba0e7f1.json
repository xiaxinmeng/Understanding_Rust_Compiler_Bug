{"sha": "d3df80dfe41e4e3ab7644ae576119a264ba0e7f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZGY4MGRmZTQxZTRlM2FiNzY0NGFlNTc2MTE5YTI2NGJhMGU3ZjE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-27T16:23:49Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-01T21:54:21Z"}, "message": "Cleanup", "tree": {"sha": "9e19af8285cd2e95aa0ec79e589c3d08fb9047bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e19af8285cd2e95aa0ec79e589c3d08fb9047bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1", "html_url": "https://github.com/rust-lang/rust/commit/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afce8e442639fa9ed954b3659a2d1eccb7d80113", "url": "https://api.github.com/repos/rust-lang/rust/commits/afce8e442639fa9ed954b3659a2d1eccb7d80113", "html_url": "https://github.com/rust-lang/rust/commit/afce8e442639fa9ed954b3659a2d1eccb7d80113"}], "stats": {"total": 44, "additions": 17, "deletions": 27}, "files": [{"sha": "f9f702ae2bd276c493412065d0cb99691d32e08b", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=d3df80dfe41e4e3ab7644ae576119a264ba0e7f1", "patch": "@@ -76,11 +76,7 @@ impl Body {\n }\n \n // needs arbitrary_self_types to be a method... or maybe move to the def?\n-pub fn resolver_for_expr(\n-    body: Arc<Body>,\n-    db: &impl HirDatabase,\n-    expr_id: ExprId,\n-) -> Resolver<'static> {\n+pub fn resolver_for_expr(body: Arc<Body>, db: &impl HirDatabase, expr_id: ExprId) -> Resolver {\n     let scopes = db.expr_scopes(body.owner);\n     resolver_for_scope(body, db, scopes.scope_for(expr_id))\n }\n@@ -89,7 +85,7 @@ pub fn resolver_for_scope(\n     body: Arc<Body>,\n     db: &impl HirDatabase,\n     scope_id: Option<scope::ScopeId>,\n-) -> Resolver<'static> {\n+) -> Resolver {\n     let mut r = body.owner.resolver(db);\n     let scopes = db.expr_scopes(body.owner);\n     let scope_chain = scopes.scope_chain_for(scope_id).collect::<Vec<_>>();"}, {"sha": "7ec6512b64570df2a5058d7f52aaf7bc5a1bfe67", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=d3df80dfe41e4e3ab7644ae576119a264ba0e7f1", "patch": "@@ -25,8 +25,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use crate::{\n     Module, ModuleDef,\n     Path, PathKind, PersistentHirDatabase,\n-    Crate,\n-    Name,\n+    Crate, Name,\n     module_tree::{ModuleId, ModuleTree},\n     nameres::lower::{ImportId, LoweredModule, ImportData},\n };"}, {"sha": "3e0af3a438aced4d6256c6ed441c612cf162ff92", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=d3df80dfe41e4e3ab7644ae576119a264ba0e7f1", "patch": "@@ -109,8 +109,6 @@ impl Resolver {\n         self.scopes.iter().rev().find_map(|scope| match scope {\n             Scope::ModuleScope(m) => Some((&*m.item_map, m.module.clone())),\n \n-            Scope::ModuleScopeRef(m) => Some((m.item_map, m.module.clone())),\n-\n             _ => None,\n         })\n     }\n@@ -197,13 +195,13 @@ impl Scope {\n     fn collect_names(&self, f: &mut FnMut(Name, PerNs<Resolution>)) {\n         match self {\n             Scope::ModuleScope(m) => {\n-                m.item_map[m.module.module_id]\n-                    .entries()\n-                    .for_each(|(name, res)| {\n-                        f(name.clone(), res.def.map(|def| Resolution::Def { def }));\n-                    })\n-            }\n-            Scope::ModuleScopeRef(m) => {\n+                // TODO: should we provide `self` here?\n+                // f(\n+                //     Name::self_param(),\n+                //     PerNs::types(Resolution::Def {\n+                //         def: m.module.into(),\n+                //     }),\n+                // );\n                 m.item_map[m.module.module_id]\n                     .entries()\n                     .for_each(|(name, res)| {"}, {"sha": "ce929cf3ea14550f38e940a71016fa557af37a63", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=d3df80dfe41e4e3ab7644ae576119a264ba0e7f1", "patch": "@@ -203,7 +203,7 @@ pub fn macro_symbols(db: &impl HirDatabase, file_id: FileId) -> Vec<(SmolStr, Te\n     res\n }\n \n-pub fn resolver_for_position(db: &impl HirDatabase, position: FilePosition) -> Resolver<'static> {\n+pub fn resolver_for_position(db: &impl HirDatabase, position: FilePosition) -> Resolver {\n     let file = db.parse(position.file_id);\n     find_leaf_at_offset(file.syntax(), position.offset)\n         .find_map(|node| {\n@@ -230,11 +230,7 @@ pub fn resolver_for_position(db: &impl HirDatabase, position: FilePosition) -> R\n         .unwrap_or_default()\n }\n \n-pub fn resolver_for_node(\n-    db: &impl HirDatabase,\n-    file_id: FileId,\n-    node: &SyntaxNode,\n-) -> Resolver<'static> {\n+pub fn resolver_for_node(db: &impl HirDatabase, file_id: FileId, node: &SyntaxNode) -> Resolver {\n     node.ancestors()\n         .find_map(|node| {\n             if ast::Expr::cast(node).is_some() || ast::Block::cast(node).is_some() {"}, {"sha": "5b89c64adf0c8529f3ba187241e80ba972725aff", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=d3df80dfe41e4e3ab7644ae576119a264ba0e7f1", "patch": "@@ -1,11 +1,11 @@\n use join_to_string::join;\n \n+use hir::{Docs, Resolution};\n+\n use crate::{\n     completion::{CompletionItem, CompletionItemKind, Completions, CompletionKind, CompletionContext},\n };\n \n-use hir::Docs;\n-\n pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let path = match &ctx.path_prefix {\n         Some(path) => path.clone(),\n@@ -15,7 +15,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n         Some(Resolution::Def { def }) => def,\n         _ => return,\n     };\n-    match def_id {\n+    match def {\n         hir::ModuleDef::Module(module) => {\n             let module_scope = module.scope(ctx.db);\n             for (name, res) in module_scope.entries() {"}, {"sha": "5d1851da649752328fc23c5c8bff36d07bcde3dd", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=d3df80dfe41e4e3ab7644ae576119a264ba0e7f1", "patch": "@@ -16,7 +16,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) db: &'a db::RootDatabase,\n     pub(super) offset: TextUnit,\n     pub(super) leaf: &'a SyntaxNode,\n-    pub(super) resolver: Resolver<'static>,\n+    pub(super) resolver: Resolver,\n     pub(super) module: Option<hir::Module>,\n     pub(super) function: Option<hir::Function>,\n     pub(super) function_syntax: Option<&'a ast::FnDef>,"}, {"sha": "48080b6e189af4a20dd4fb09c1e0945d2ec903b8", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=d3df80dfe41e4e3ab7644ae576119a264ba0e7f1", "patch": "@@ -4,6 +4,7 @@ use ra_syntax::{\n     algo::find_node_at_offset,\n };\n use test_utils::tested_by;\n+use hir::Resolution;\n \n use crate::{FilePosition, NavigationTarget, db::RootDatabase, RangeInfo};\n "}]}