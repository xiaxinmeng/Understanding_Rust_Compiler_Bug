{"sha": "0aa23ed18a927aad6578d7a23183275239deb2be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYTIzZWQxOGE5MjdhYWQ2NTc4ZDdhMjMxODMyNzUyMzlkZWIyYmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-03T14:21:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-03T14:21:35Z"}, "message": "auto merge of #15338 : pfalabella/rust/rational-impl-2, r=alexcrichton\n\nTried squashing commits for https://github.com/rust-lang/rust/pull/15329, failed spectacularly.\r\nThis is a fresh PR for the same change.\r\n\r\n@alexcrichton?", "tree": {"sha": "03cd08569f95f575754da751fed972fb5517c47e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03cd08569f95f575754da751fed972fb5517c47e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aa23ed18a927aad6578d7a23183275239deb2be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa23ed18a927aad6578d7a23183275239deb2be", "html_url": "https://github.com/rust-lang/rust/commit/0aa23ed18a927aad6578d7a23183275239deb2be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aa23ed18a927aad6578d7a23183275239deb2be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "524f4699434bca99a577bd15ddea41f96b864726", "url": "https://api.github.com/repos/rust-lang/rust/commits/524f4699434bca99a577bd15ddea41f96b864726", "html_url": "https://github.com/rust-lang/rust/commit/524f4699434bca99a577bd15ddea41f96b864726"}, {"sha": "fb560c673d5ed9edf81a1782c4c9273cf08002f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb560c673d5ed9edf81a1782c4c9273cf08002f6", "html_url": "https://github.com/rust-lang/rust/commit/fb560c673d5ed9edf81a1782c4c9273cf08002f6"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "c35b2976b407f19aef7f9614c48d2f3fc19e4bd7", "filename": "src/libnum/rational.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0aa23ed18a927aad6578d7a23183275239deb2be/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa23ed18a927aad6578d7a23183275239deb2be/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=0aa23ed18a927aad6578d7a23183275239deb2be", "patch": "@@ -274,12 +274,17 @@ impl<T: Clone + Integer + PartialOrd>\n     Num for Ratio<T> {}\n \n /* String conversions */\n-impl<T: fmt::Show> fmt::Show for Ratio<T> {\n-    /// Renders as `numer/denom`.\n+impl<T: fmt::Show + Eq + One> fmt::Show for Ratio<T> {\n+    /// Renders as `numer/denom`. If denom=1, renders as numer.\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}/{}\", self.numer, self.denom)\n+        if self.denom == One::one() {\n+            write!(f, \"{}\", self.numer)\n+        } else {\n+            write!(f, \"{}/{}\", self.numer, self.denom)\n+        }\n     }\n }\n+\n impl<T: ToStrRadix> ToStrRadix for Ratio<T> {\n     /// Renders as `numer/denom` where the numbers are in base `radix`.\n     fn to_str_radix(&self, radix: uint) -> String {\n@@ -291,21 +296,20 @@ impl<T: ToStrRadix> ToStrRadix for Ratio<T> {\n \n impl<T: FromStr + Clone + Integer + PartialOrd>\n     FromStr for Ratio<T> {\n-    /// Parses `numer/denom`.\n+    /// Parses `numer/denom` or just `numer`\n     fn from_str(s: &str) -> Option<Ratio<T>> {\n-        let split: Vec<&str> = s.splitn('/', 1).collect();\n-        if split.len() < 2 {\n-            return None\n+        let mut split = s.splitn('/', 1);\n+\n+        let num = split.next().and_then(|n| FromStr::from_str(n));\n+        let den = split.next().or(Some(\"1\")).and_then(|d| FromStr::from_str(d));\n+\n+        match (num, den) {\n+            (Some(n), Some(d)) => Some(Ratio::new(n, d)),\n+            _ => None\n         }\n-        let a_option: Option<T> = FromStr::from_str(*split.get(0));\n-        a_option.and_then(|a| {\n-            let b_option: Option<T> = FromStr::from_str(*split.get(1));\n-            b_option.and_then(|b| {\n-                Some(Ratio::new(a.clone(), b.clone()))\n-            })\n-        })\n     }\n }\n+\n impl<T: FromStrRadix + Clone + Integer + PartialOrd>\n     FromStrRadix for Ratio<T> {\n     /// Parses `numer/denom` where the numbers are in base `radix`.\n@@ -429,6 +433,13 @@ mod test {\n         assert!(!_neg1_2.is_integer());\n     }\n \n+    #[test]\n+    fn test_show() {\n+        assert_eq!(format!(\"{}\", _2), \"2\".to_string());\n+        assert_eq!(format!(\"{}\", _1_2), \"1/2\".to_string());\n+        assert_eq!(format!(\"{}\", _0), \"0\".to_string());\n+        assert_eq!(format!(\"{}\", Ratio::from_integer(-2i)), \"-2\".to_string());\n+    }\n \n     mod arith {\n         use super::{_0, _1, _2, _1_2, _3_2, _neg1_2, to_big};\n@@ -562,11 +573,11 @@ mod test {\n             assert_eq!(FromStr::from_str(s.as_slice()), Some(r));\n             assert_eq!(r.to_str(), s);\n         }\n-        test(_1, \"1/1\".to_string());\n-        test(_0, \"0/1\".to_string());\n+        test(_1, \"1\".to_string());\n+        test(_0, \"0\".to_string());\n         test(_1_2, \"1/2\".to_string());\n         test(_3_2, \"3/2\".to_string());\n-        test(_2, \"2/1\".to_string());\n+        test(_2, \"2\".to_string());\n         test(_neg1_2, \"-1/2\".to_string());\n     }\n     #[test]"}]}