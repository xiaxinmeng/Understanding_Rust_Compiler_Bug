{"sha": "88a1b713059b50be51fa93f39165ae9d35d27cdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YTFiNzEzMDU5YjUwYmU1MWZhOTNmMzkxNjVhZTlkMzVkMjdjZGQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-16T03:42:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-17T04:37:52Z"}, "message": "Make all lang_items optional\n\nWhenever a lang_item is required, some relevant message is displayed, often with\na span of what triggered the usage of the lang item", "tree": {"sha": "b6d594ddc8a4bd1e79c60db88c5c4e738a5dad08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6d594ddc8a4bd1e79c60db88c5c4e738a5dad08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88a1b713059b50be51fa93f39165ae9d35d27cdd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88a1b713059b50be51fa93f39165ae9d35d27cdd", "html_url": "https://github.com/rust-lang/rust/commit/88a1b713059b50be51fa93f39165ae9d35d27cdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88a1b713059b50be51fa93f39165ae9d35d27cdd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9db190305f7562f15b5282fed508aef81cfc9689", "url": "https://api.github.com/repos/rust-lang/rust/commits/9db190305f7562f15b5282fed508aef81cfc9689", "html_url": "https://github.com/rust-lang/rust/commit/9db190305f7562f15b5282fed508aef81cfc9689"}], "stats": {"total": 473, "additions": 294, "deletions": 179}, "files": [{"sha": "9a75601a08288412f1dd3f5ea4dd1191f108ef10", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -122,7 +122,7 @@ fn check_item(item: @item, (cx, visitor): (Context, visit::vt<Context>)) {\n                     None => cx.tcx.sess.bug(\"trait ref not in def map!\"),\n                     Some(&trait_def) => {\n                         let trait_def_id = ast_util::def_id_of_def(trait_def);\n-                        if cx.tcx.lang_items.drop_trait() == trait_def_id {\n+                        if cx.tcx.lang_items.drop_trait() == Some(trait_def_id) {\n                             // Yes, it's a destructor.\n                             match self_type.node {\n                                 ty_path(_, ref bounds, path_node_id) => {"}, {"sha": "912096e8098f1ee4f1535e9209bf58e1c5fe5942", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 92, "deletions": 98, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -153,135 +153,143 @@ impl LanguageItems {\n \n     // FIXME #4621: Method macros sure would be nice here.\n \n-    pub fn freeze_trait(&self) -> def_id {\n-        self.items[FreezeTraitLangItem as uint].get()\n+    pub fn require(&self, it: LangItem) -> Result<def_id, ~str> {\n+        match self.items[it as uint] {\n+            Some(id) => Ok(id),\n+            None => Err(fmt!(\"requires `%s` lang_item\",\n+                             LanguageItems::item_name(it as uint)))\n+        }\n+    }\n+\n+    pub fn freeze_trait(&self) -> Option<def_id> {\n+        self.items[FreezeTraitLangItem as uint]\n     }\n-    pub fn copy_trait(&self) -> def_id {\n-        self.items[CopyTraitLangItem as uint].get()\n+    pub fn copy_trait(&self) -> Option<def_id> {\n+        self.items[CopyTraitLangItem as uint]\n     }\n-    pub fn send_trait(&self) -> def_id {\n-        self.items[SendTraitLangItem as uint].get()\n+    pub fn send_trait(&self) -> Option<def_id> {\n+        self.items[SendTraitLangItem as uint]\n     }\n-    pub fn sized_trait(&self) -> def_id {\n-        self.items[SizedTraitLangItem as uint].get()\n+    pub fn sized_trait(&self) -> Option<def_id> {\n+        self.items[SizedTraitLangItem as uint]\n     }\n \n-    pub fn drop_trait(&self) -> def_id {\n-        self.items[DropTraitLangItem as uint].get()\n+    pub fn drop_trait(&self) -> Option<def_id> {\n+        self.items[DropTraitLangItem as uint]\n     }\n \n-    pub fn add_trait(&self) -> def_id {\n-        self.items[AddTraitLangItem as uint].get()\n+    pub fn add_trait(&self) -> Option<def_id> {\n+        self.items[AddTraitLangItem as uint]\n     }\n-    pub fn sub_trait(&self) -> def_id {\n-        self.items[SubTraitLangItem as uint].get()\n+    pub fn sub_trait(&self) -> Option<def_id> {\n+        self.items[SubTraitLangItem as uint]\n     }\n-    pub fn mul_trait(&self) -> def_id {\n-        self.items[MulTraitLangItem as uint].get()\n+    pub fn mul_trait(&self) -> Option<def_id> {\n+        self.items[MulTraitLangItem as uint]\n     }\n-    pub fn div_trait(&self) -> def_id {\n-        self.items[DivTraitLangItem as uint].get()\n+    pub fn div_trait(&self) -> Option<def_id> {\n+        self.items[DivTraitLangItem as uint]\n     }\n-    pub fn rem_trait(&self) -> def_id {\n-        self.items[RemTraitLangItem as uint].get()\n+    pub fn rem_trait(&self) -> Option<def_id> {\n+        self.items[RemTraitLangItem as uint]\n     }\n-    pub fn neg_trait(&self) -> def_id {\n-        self.items[NegTraitLangItem as uint].get()\n+    pub fn neg_trait(&self) -> Option<def_id> {\n+        self.items[NegTraitLangItem as uint]\n     }\n-    pub fn not_trait(&self) -> def_id {\n-        self.items[NotTraitLangItem as uint].get()\n+    pub fn not_trait(&self) -> Option<def_id> {\n+        self.items[NotTraitLangItem as uint]\n     }\n-    pub fn bitxor_trait(&self) -> def_id {\n-        self.items[BitXorTraitLangItem as uint].get()\n+    pub fn bitxor_trait(&self) -> Option<def_id> {\n+        self.items[BitXorTraitLangItem as uint]\n     }\n-    pub fn bitand_trait(&self) -> def_id {\n-        self.items[BitAndTraitLangItem as uint].get()\n+    pub fn bitand_trait(&self) -> Option<def_id> {\n+        self.items[BitAndTraitLangItem as uint]\n     }\n-    pub fn bitor_trait(&self) -> def_id {\n-        self.items[BitOrTraitLangItem as uint].get()\n+    pub fn bitor_trait(&self) -> Option<def_id> {\n+        self.items[BitOrTraitLangItem as uint]\n     }\n-    pub fn shl_trait(&self) -> def_id {\n-        self.items[ShlTraitLangItem as uint].get()\n+    pub fn shl_trait(&self) -> Option<def_id> {\n+        self.items[ShlTraitLangItem as uint]\n     }\n-    pub fn shr_trait(&self) -> def_id {\n-        self.items[ShrTraitLangItem as uint].get()\n+    pub fn shr_trait(&self) -> Option<def_id> {\n+        self.items[ShrTraitLangItem as uint]\n     }\n-    pub fn index_trait(&self) -> def_id {\n-        self.items[IndexTraitLangItem as uint].get()\n+    pub fn index_trait(&self) -> Option<def_id> {\n+        self.items[IndexTraitLangItem as uint]\n     }\n \n-    pub fn eq_trait(&self) -> def_id {\n-        self.items[EqTraitLangItem as uint].get()\n+    pub fn eq_trait(&self) -> Option<def_id> {\n+        self.items[EqTraitLangItem as uint]\n     }\n-    pub fn ord_trait(&self) -> def_id {\n-        self.items[OrdTraitLangItem as uint].get()\n+    pub fn ord_trait(&self) -> Option<def_id> {\n+        self.items[OrdTraitLangItem as uint]\n     }\n \n-    pub fn str_eq_fn(&self) -> def_id {\n-        self.items[StrEqFnLangItem as uint].get()\n+    pub fn str_eq_fn(&self) -> Option<def_id> {\n+        self.items[StrEqFnLangItem as uint]\n     }\n-    pub fn uniq_str_eq_fn(&self) -> def_id {\n-        self.items[UniqStrEqFnLangItem as uint].get()\n+    pub fn uniq_str_eq_fn(&self) -> Option<def_id> {\n+        self.items[UniqStrEqFnLangItem as uint]\n     }\n-    pub fn annihilate_fn(&self) -> def_id {\n-        self.items[AnnihilateFnLangItem as uint].get()\n+    pub fn annihilate_fn(&self) -> Option<def_id> {\n+        self.items[AnnihilateFnLangItem as uint]\n     }\n-    pub fn log_type_fn(&self) -> def_id {\n-        self.items[LogTypeFnLangItem as uint].get()\n+    pub fn log_type_fn(&self) -> Option<def_id> {\n+        self.items[LogTypeFnLangItem as uint]\n     }\n-    pub fn fail_fn(&self) -> def_id {\n-        self.items[FailFnLangItem as uint].get()\n+    pub fn fail_fn(&self) -> Option<def_id> {\n+        self.items[FailFnLangItem as uint]\n     }\n-    pub fn fail_bounds_check_fn(&self) -> def_id {\n-        self.items[FailBoundsCheckFnLangItem as uint].get()\n+    pub fn fail_bounds_check_fn(&self) -> Option<def_id> {\n+        self.items[FailBoundsCheckFnLangItem as uint]\n     }\n-    pub fn exchange_malloc_fn(&self) -> def_id {\n-        self.items[ExchangeMallocFnLangItem as uint].get()\n+    pub fn exchange_malloc_fn(&self) -> Option<def_id> {\n+        self.items[ExchangeMallocFnLangItem as uint]\n     }\n-    pub fn closure_exchange_malloc_fn(&self) -> def_id {\n-        self.items[ClosureExchangeMallocFnLangItem as uint].get()\n+    pub fn closure_exchange_malloc_fn(&self) -> Option<def_id> {\n+        self.items[ClosureExchangeMallocFnLangItem as uint]\n     }\n-    pub fn exchange_free_fn(&self) -> def_id {\n-        self.items[ExchangeFreeFnLangItem as uint].get()\n+    pub fn exchange_free_fn(&self) -> Option<def_id> {\n+        self.items[ExchangeFreeFnLangItem as uint]\n     }\n-    pub fn malloc_fn(&self) -> def_id {\n-        self.items[MallocFnLangItem as uint].get()\n+    pub fn malloc_fn(&self) -> Option<def_id> {\n+        self.items[MallocFnLangItem as uint]\n     }\n-    pub fn free_fn(&self) -> def_id {\n-        self.items[FreeFnLangItem as uint].get()\n+    pub fn free_fn(&self) -> Option<def_id> {\n+        self.items[FreeFnLangItem as uint]\n     }\n-    pub fn borrow_as_imm_fn(&self) -> def_id {\n-        self.items[BorrowAsImmFnLangItem as uint].get()\n+    pub fn borrow_as_imm_fn(&self) -> Option<def_id> {\n+        self.items[BorrowAsImmFnLangItem as uint]\n     }\n-    pub fn borrow_as_mut_fn(&self) -> def_id {\n-        self.items[BorrowAsMutFnLangItem as uint].get()\n+    pub fn borrow_as_mut_fn(&self) -> Option<def_id> {\n+        self.items[BorrowAsMutFnLangItem as uint]\n     }\n-    pub fn return_to_mut_fn(&self) -> def_id {\n-        self.items[ReturnToMutFnLangItem as uint].get()\n+    pub fn return_to_mut_fn(&self) -> Option<def_id> {\n+        self.items[ReturnToMutFnLangItem as uint]\n     }\n-    pub fn check_not_borrowed_fn(&self) -> def_id {\n-        self.items[CheckNotBorrowedFnLangItem as uint].get()\n+    pub fn check_not_borrowed_fn(&self) -> Option<def_id> {\n+        self.items[CheckNotBorrowedFnLangItem as uint]\n     }\n-    pub fn strdup_uniq_fn(&self) -> def_id {\n-        self.items[StrDupUniqFnLangItem as uint].get()\n+    pub fn strdup_uniq_fn(&self) -> Option<def_id> {\n+        self.items[StrDupUniqFnLangItem as uint]\n     }\n-    pub fn record_borrow_fn(&self) -> def_id {\n-        self.items[RecordBorrowFnLangItem as uint].get()\n+    pub fn record_borrow_fn(&self) -> Option<def_id> {\n+        self.items[RecordBorrowFnLangItem as uint]\n     }\n-    pub fn unrecord_borrow_fn(&self) -> def_id {\n-        self.items[UnrecordBorrowFnLangItem as uint].get()\n+    pub fn unrecord_borrow_fn(&self) -> Option<def_id> {\n+        self.items[UnrecordBorrowFnLangItem as uint]\n     }\n-    pub fn start_fn(&self) -> def_id {\n-        self.items[StartFnLangItem as uint].get()\n+    pub fn start_fn(&self) -> Option<def_id> {\n+        self.items[StartFnLangItem as uint]\n     }\n-    pub fn ty_desc(&const self) -> def_id {\n-        self.items[TyDescStructLangItem as uint].get()\n+    pub fn ty_desc(&self) -> Option<def_id> {\n+        self.items[TyDescStructLangItem as uint]\n     }\n-    pub fn ty_visitor(&const self) -> def_id {\n-        self.items[TyVisitorTraitLangItem as uint].get()\n+    pub fn ty_visitor(&self) -> Option<def_id> {\n+        self.items[TyVisitorTraitLangItem as uint]\n     }\n-    pub fn opaque(&const self) -> def_id {\n-        self.items[OpaqueStructLangItem as uint].get()\n+    pub fn opaque(&self) -> Option<def_id> {\n+        self.items[OpaqueStructLangItem as uint]\n     }\n }\n \n@@ -439,23 +447,9 @@ impl<'self> LanguageItemCollector<'self> {\n         }\n     }\n \n-    pub fn check_completeness(&self) {\n-        for self.item_refs.iter().advance |(&key, &item_ref)| {\n-            match self.items.items[item_ref] {\n-                None => {\n-                    self.session.err(fmt!(\"no item found for `%s`\", key));\n-                }\n-                Some(_) => {\n-                    // OK.\n-                }\n-            }\n-        }\n-    }\n-\n     pub fn collect(&mut self) {\n         self.collect_local_language_items();\n         self.collect_external_language_items();\n-        self.check_completeness();\n     }\n }\n "}, {"sha": "6a84e5682198ba32c50490eaaaf00d8e062db62f", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -5268,8 +5268,13 @@ impl Resolver {\n \n     pub fn add_fixed_trait_for_expr(@mut self,\n                                     expr_id: node_id,\n-                                    trait_id: def_id) {\n-        self.trait_map.insert(expr_id, @mut ~[trait_id]);\n+                                    trait_id: Option<def_id>) {\n+        match trait_id {\n+            Some(trait_id) => {\n+                self.trait_map.insert(expr_id, @mut ~[trait_id]);\n+            }\n+            None => {}\n+        }\n     }\n \n     pub fn record_def(@mut self, node_id: node_id, def: def) {"}, {"sha": "2f27949e869b4a2904b57978b9d09ac85366fd13", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -152,6 +152,7 @@ use back::abi;\n use lib::llvm::{llvm, ValueRef, BasicBlockRef};\n use middle::const_eval;\n use middle::borrowck::root_map_key;\n+use middle::lang_items::{UniqStrEqFnLangItem, StrEqFnLangItem};\n use middle::pat_util::*;\n use middle::resolve::DefMap;\n use middle::trans::adt;\n@@ -1099,15 +1100,19 @@ pub fn compare_values(cx: block,\n             Store(cx, lhs, scratch_lhs);\n             let scratch_rhs = alloca(cx, val_ty(rhs), \"__rhs\");\n             Store(cx, rhs, scratch_rhs);\n-            let did = cx.tcx().lang_items.uniq_str_eq_fn();\n+            let did = langcall(cx, None,\n+                               fmt!(\"comparison of `%s`\", cx.ty_to_str(rhs_t)),\n+                               UniqStrEqFnLangItem);\n             let result = callee::trans_lang_call(cx, did, [scratch_lhs, scratch_rhs], None);\n             Result {\n                 bcx: result.bcx,\n                 val: bool_to_i1(result.bcx, result.val)\n             }\n         }\n         ty::ty_estr(_) => {\n-            let did = cx.tcx().lang_items.str_eq_fn();\n+            let did = langcall(cx, None,\n+                               fmt!(\"comparison of `%s`\", cx.ty_to_str(rhs_t)),\n+                               StrEqFnLangItem);\n             let result = callee::trans_lang_call(cx, did, [lhs, rhs], None);\n             Result {\n                 bcx: result.bcx,"}, {"sha": "d7c04907513321f9ce9436397f1294eb18f9d5f8", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 44, "deletions": 32, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -34,6 +34,8 @@ use lib;\n use metadata::common::LinkMeta;\n use metadata::{csearch, cstore, encoder};\n use middle::astencode;\n+use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n+use middle::lang_items::{MallocFnLangItem, ClosureExchangeMallocFnLangItem};\n use middle::resolve;\n use middle::trans::_match;\n use middle::trans::adt;\n@@ -284,24 +286,38 @@ pub fn malloc_raw_dyn(bcx: block,\n     let _icx = push_ctxt(\"malloc_raw\");\n     let ccx = bcx.ccx();\n \n+    fn require_alloc_fn(bcx: block, t: ty::t, it: LangItem) -> ast::def_id {\n+        let li = &bcx.tcx().lang_items;\n+        match li.require(it) {\n+            Ok(id) => id,\n+            Err(s) => {\n+                bcx.tcx().sess.fatal(fmt!(\"allocation of `%s` %s\",\n+                                          bcx.ty_to_str(t), s));\n+            }\n+        }\n+    }\n+\n     if heap == heap_exchange {\n         let llty_value = type_of::type_of(ccx, t);\n \n+\n         // Allocate space:\n         let r = callee::trans_lang_call(\n             bcx,\n-            bcx.tcx().lang_items.exchange_malloc_fn(),\n+            require_alloc_fn(bcx, t, ExchangeMallocFnLangItem),\n             [size],\n             None);\n         rslt(r.bcx, PointerCast(r.bcx, r.val, llty_value.ptr_to()))\n     } else {\n         // we treat ~fn, @fn and @[] as @ here, which isn't ideal\n         let (mk_fn, langcall) = match heap {\n             heap_managed | heap_managed_unique => {\n-                (ty::mk_imm_box, bcx.tcx().lang_items.malloc_fn())\n+                (ty::mk_imm_box,\n+                 require_alloc_fn(bcx, t, MallocFnLangItem))\n             }\n             heap_exchange_closure => {\n-                (ty::mk_imm_box, bcx.tcx().lang_items.closure_exchange_malloc_fn())\n+                (ty::mk_imm_box,\n+                 require_alloc_fn(bcx, t, ClosureExchangeMallocFnLangItem))\n             }\n             _ => fail!(\"heap_exchange already handled\")\n         };\n@@ -2324,7 +2340,8 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n     fn create_entry_fn(ccx: @mut CrateContext,\n                        rust_main: ValueRef,\n                        use_start_lang_item: bool) {\n-        let llfty = Type::func([ccx.int_type, Type::i8().ptr_to().ptr_to()], &ccx.int_type);\n+        let llfty = Type::func([ccx.int_type, Type::i8().ptr_to().ptr_to()],\n+                               &ccx.int_type);\n \n         // FIXME #4404 android JNI hacks\n         let llfn = if *ccx.sess.building_library {\n@@ -2345,25 +2362,21 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n         unsafe {\n             llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n \n-            let start_def_id = ccx.tcx.lang_items.start_fn();\n-            if start_def_id.crate != ast::local_crate {\n-                let start_fn_type = csearch::get_type(ccx.tcx,\n-                                                      start_def_id).ty;\n-                trans_external_path(ccx, start_def_id, start_fn_type);\n-            }\n-\n             let crate_map = ccx.crate_map;\n             let opaque_crate_map = do \"crate_map\".as_c_str |buf| {\n                 llvm::LLVMBuildPointerCast(bld, crate_map, Type::i8p().to_ref(), buf)\n             };\n \n             let (start_fn, args) = if use_start_lang_item {\n-                let start_def_id = ccx.tcx.lang_items.start_fn();\n+                let start_def_id = match ccx.tcx.lang_items.require(StartFnLangItem) {\n+                    Ok(id) => id,\n+                    Err(s) => { ccx.tcx.sess.fatal(s); }\n+                };\n                 let start_fn = if start_def_id.crate == ast::local_crate {\n                     get_item_val(ccx, start_def_id.node)\n                 } else {\n                     let start_fn_type = csearch::get_type(ccx.tcx,\n-                            start_def_id).ty;\n+                                                          start_def_id).ty;\n                     trans_external_path(ccx, start_def_id, start_fn_type)\n                 };\n \n@@ -2383,14 +2396,12 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n                 (start_fn, args)\n             } else {\n                 debug!(\"using user-defined start fn\");\n-                let args = {\n-                    ~[\n-                        C_null(Type::opaque_box(ccx).ptr_to()),\n-                        llvm::LLVMGetParam(llfn, 0 as c_uint),\n-                        llvm::LLVMGetParam(llfn, 1 as c_uint),\n-                        opaque_crate_map\n-                    ]\n-                };\n+                let args = ~[\n+                    C_null(Type::opaque_box(ccx).ptr_to()),\n+                    llvm::LLVMGetParam(llfn, 0 as c_uint),\n+                    llvm::LLVMGetParam(llfn, 1 as c_uint),\n+                    opaque_crate_map\n+                ];\n \n                 (rust_main, args)\n             };\n@@ -2832,17 +2843,18 @@ pub fn fill_crate_map(ccx: @mut CrateContext, map: ValueRef) {\n     }\n     subcrates.push(C_int(ccx, 0));\n \n-    let llannihilatefn;\n-    let annihilate_def_id = ccx.tcx.lang_items.annihilate_fn();\n-    if annihilate_def_id.crate == ast::local_crate {\n-        llannihilatefn = get_item_val(ccx, annihilate_def_id.node);\n-    } else {\n-        let annihilate_fn_type = csearch::get_type(ccx.tcx,\n-                                                   annihilate_def_id).ty;\n-        llannihilatefn = trans_external_path(ccx,\n-                                             annihilate_def_id,\n-                                             annihilate_fn_type);\n-    }\n+    let llannihilatefn = match ccx.tcx.lang_items.annihilate_fn() {\n+        Some(annihilate_def_id) => {\n+            if annihilate_def_id.crate == ast::local_crate {\n+                get_item_val(ccx, annihilate_def_id.node)\n+            } else {\n+                let annihilate_fn_type = csearch::get_type(ccx.tcx,\n+                                                           annihilate_def_id).ty;\n+                trans_external_path(ccx, annihilate_def_id, annihilate_fn_type)\n+            }\n+        }\n+        None => { C_null(Type::i8p()) }\n+    };\n \n     unsafe {\n         let mod_map = create_module_map(ccx);"}, {"sha": "4e754bea91621da191570226cae045fb1c77bdb5", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -13,6 +13,7 @@ use back::abi;\n use back::link::{mangle_internal_name_by_path_and_seq};\n use lib::llvm::{llvm, ValueRef};\n use middle::moves;\n+use middle::lang_items::ClosureExchangeMallocFnLangItem;\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee;\n@@ -541,9 +542,13 @@ pub fn make_opaque_cbox_take_glue(\n         // Allocate memory, update original ptr, and copy existing data\n         let opaque_tydesc = PointerCast(bcx, tydesc, Type::i8p());\n         let mut bcx = bcx;\n+        let alloc_fn = langcall(bcx, None,\n+                                fmt!(\"allocation of type with sigil `%s`\",\n+                                    sigil.to_str()),\n+                                ClosureExchangeMallocFnLangItem);\n         let llresult = unpack_result!(bcx, callee::trans_lang_call(\n             bcx,\n-            bcx.tcx().lang_items.closure_exchange_malloc_fn(),\n+            alloc_fn,\n             [opaque_tydesc, sz],\n             None));\n         let cbox_out = PointerCast(bcx, llresult, llopaquecboxty);"}, {"sha": "ea5068c445b5338f8f4dc0356542f4a591c2200b", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -17,6 +17,7 @@ use lib::llvm::{ValueRef, BasicBlockRef, BuilderRef};\n use lib::llvm::{True, False, Bool};\n use lib::llvm::{llvm};\n use lib;\n+use middle::lang_items::LangItem;\n use middle::trans::base;\n use middle::trans::build;\n use middle::trans::datum;\n@@ -1126,3 +1127,17 @@ pub fn filename_and_line_num_from_span(bcx: block,\n pub fn bool_to_i1(bcx: block, llval: ValueRef) -> ValueRef {\n     build::ICmp(bcx, lib::llvm::IntNE, llval, C_bool(false))\n }\n+\n+pub fn langcall(bcx: block, span: Option<span>, msg: &str,\n+                li: LangItem) -> ast::def_id {\n+    match bcx.tcx().lang_items.require(li) {\n+        Ok(id) => id,\n+        Err(s) => {\n+            let msg = fmt!(\"%s %s\", msg, s);\n+            match span {\n+                Some(span) => { bcx.tcx().sess.span_fatal(span, msg); }\n+                None => { bcx.tcx().sess.fatal(msg); }\n+            }\n+        }\n+    }\n+}"}, {"sha": "df1db4a1ab34c5c6b93b36d7bf7c2f185cdf6d89", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -12,6 +12,8 @@\n use back::link;\n use lib;\n use lib::llvm::*;\n+use middle::lang_items::{FailFnLangItem, FailBoundsCheckFnLangItem};\n+use middle::lang_items::LogTypeFnLangItem;\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee;\n@@ -276,7 +278,7 @@ pub fn trans_log(log_ex: &ast::expr,\n \n             // Call the polymorphic log function\n             let val = val_datum.to_ref_llval(bcx);\n-            let did = bcx.tcx().lang_items.log_type_fn();\n+            let did = langcall(bcx, Some(e.span), \"\", LogTypeFnLangItem);\n             let bcx = callee::trans_lang_call_with_type_params(\n                 bcx, did, [level, val], [val_datum.ty], expr::Ignore);\n             bcx\n@@ -435,8 +437,8 @@ fn trans_fail_value(bcx: block,\n     let V_str = PointerCast(bcx, V_fail_str, Type::i8p());\n     let V_filename = PointerCast(bcx, V_filename, Type::i8p());\n     let args = ~[V_str, V_filename, C_int(ccx, V_line)];\n-    let bcx = callee::trans_lang_call(\n-        bcx, bcx.tcx().lang_items.fail_fn(), args, Some(expr::Ignore)).bcx;\n+    let did = langcall(bcx, sp_opt, \"\", FailFnLangItem);\n+    let bcx = callee::trans_lang_call(bcx, did, args, Some(expr::Ignore)).bcx;\n     Unreachable(bcx);\n     return bcx;\n }\n@@ -446,8 +448,8 @@ pub fn trans_fail_bounds_check(bcx: block, sp: span,\n     let _icx = push_ctxt(\"trans_fail_bounds_check\");\n     let (filename, line) = filename_and_line_num_from_span(bcx, sp);\n     let args = ~[filename, line, index, len];\n-    let bcx = callee::trans_lang_call(\n-        bcx, bcx.tcx().lang_items.fail_bounds_check_fn(), args, Some(expr::Ignore)).bcx;\n+    let did = langcall(bcx, Some(sp), \"\", FailBoundsCheckFnLangItem);\n+    let bcx = callee::trans_lang_call(bcx, did, args, Some(expr::Ignore)).bcx;\n     Unreachable(bcx);\n     return bcx;\n }"}, {"sha": "c92bfc23b1d3c77bd62db17db9c206f116dbf010", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -18,6 +18,7 @@ use back::link::*;\n use driver::session;\n use lib;\n use lib::llvm::{llvm, ValueRef, True};\n+use middle::lang_items::{FreeFnLangItem, ExchangeFreeFnLangItem};\n use middle::trans::adt;\n use middle::trans::base::*;\n use middle::trans::callee;\n@@ -44,15 +45,15 @@ use syntax::ast;\n pub fn trans_free(cx: block, v: ValueRef) -> block {\n     let _icx = push_ctxt(\"trans_free\");\n     callee::trans_lang_call(cx,\n-        cx.tcx().lang_items.free_fn(),\n+        langcall(cx, None, \"\", FreeFnLangItem),\n         [PointerCast(cx, v, Type::i8p())],\n         Some(expr::Ignore)).bcx\n }\n \n pub fn trans_exchange_free(cx: block, v: ValueRef) -> block {\n     let _icx = push_ctxt(\"trans_exchange_free\");\n     callee::trans_lang_call(cx,\n-        cx.tcx().lang_items.exchange_free_fn(),\n+        langcall(cx, None, \"\", ExchangeFreeFnLangItem),\n         [PointerCast(cx, v, Type::i8p())],\n         Some(expr::Ignore)).bcx\n }\n@@ -365,7 +366,12 @@ pub fn make_visit_glue(bcx: block, v: ValueRef, t: ty::t) -> block {\n     let _icx = push_ctxt(\"make_visit_glue\");\n     do with_scope(bcx, None, \"visitor cleanup\") |bcx| {\n         let mut bcx = bcx;\n-        let (visitor_trait, object_ty) = ty::visitor_object_ty(bcx.tcx());\n+        let (visitor_trait, object_ty) = match ty::visitor_object_ty(bcx.tcx()){\n+            Ok(pair) => pair,\n+            Err(s) => {\n+                bcx.tcx().sess.fatal(s);\n+            }\n+        };\n         let v = PointerCast(bcx, v, type_of::type_of(bcx.ccx(), object_ty).ptr_to());\n         bcx = reflect::emit_calls_to_trait_visit_ty(bcx, t, v, visitor_trait.def_id);\n         // The visitor is a boxed object and needs to be dropped"}, {"sha": "2dc3a88fe863b33a4c06b3b7dcf83bfdd7ec6295", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -279,7 +279,7 @@ impl Reflector {\n             let repr = adt::represent_type(bcx.ccx(), t);\n             let variants = ty::substd_enum_variants(ccx.tcx, did, substs);\n             let llptrty = type_of(ccx, t).ptr_to();\n-            let opaquety = ty::get_opaque_ty(ccx.tcx);\n+            let opaquety = ty::get_opaque_ty(ccx.tcx).unwrap();\n             let opaqueptrty = ty::mk_ptr(ccx.tcx, ty::mt { ty: opaquety, mutbl: ast::m_imm });\n \n             let make_get_disr = || {\n@@ -380,7 +380,7 @@ pub fn emit_calls_to_trait_visit_ty(bcx: block,\n                                     visitor_trait_id: def_id)\n                                  -> block {\n     let final = sub_block(bcx, \"final\");\n-    let tydesc_ty = ty::get_tydesc_ty(bcx.ccx().tcx);\n+    let tydesc_ty = ty::get_tydesc_ty(bcx.ccx().tcx).unwrap();\n     let tydesc_ty = type_of(bcx.ccx(), tydesc_ty);\n     let mut r = Reflector {\n         visitor_val: visitor_val,"}, {"sha": "2a16b13677428ceafa90cb1be7024f9990c27574", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -12,6 +12,7 @@\n use back::abi;\n use lib;\n use lib::llvm::{llvm, ValueRef};\n+use middle::lang_items::StrDupUniqFnLangItem;\n use middle::trans::base;\n use middle::trans::base::*;\n use middle::trans::build::*;\n@@ -312,16 +313,18 @@ pub fn trans_uniq_or_managed_vstore(bcx: block, heap: heap, vstore_expr: @ast::e\n         heap_exchange => {\n             match content_expr.node {\n                 ast::expr_lit(@codemap::spanned {\n-                    node: ast::lit_str(s), _\n+                    node: ast::lit_str(s), span\n                 }) => {\n                     let llptrval = C_cstr(bcx.ccx(), s);\n                     let llptrval = PointerCast(bcx, llptrval, Type::i8p());\n                     let llsizeval = C_uint(bcx.ccx(), s.len());\n                     let typ = ty::mk_estr(bcx.tcx(), ty::vstore_uniq);\n                     let lldestval = scratch_datum(bcx, typ, \"\", false);\n+                    let alloc_fn = langcall(bcx, Some(span), \"\",\n+                                            StrDupUniqFnLangItem);\n                     let bcx = callee::trans_lang_call(\n                         bcx,\n-                        bcx.tcx().lang_items.strdup_uniq_fn(),\n+                        alloc_fn,\n                         [ llptrval, llsizeval ],\n                         Some(expr::SaveIn(lldestval.to_ref_llval(bcx)))).bcx;\n                     return DatumBlock {"}, {"sha": "b9a9a57d0461d576e8b31972ac23cf4c81839d31", "filename": "src/librustc/middle/trans/write_guard.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -17,6 +17,10 @@\n \n use lib::llvm::ValueRef;\n use middle::borrowck::{RootInfo, root_map_key, DynaImm, DynaMut};\n+use middle::lang_items::CheckNotBorrowedFnLangItem;\n+use middle::lang_items::{BorrowAsImmFnLangItem, BorrowAsMutFnLangItem};\n+use middle::lang_items::{RecordBorrowFnLangItem, UnrecordBorrowFnLangItem};\n+use middle::lang_items::ReturnToMutFnLangItem;\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee;\n@@ -74,7 +78,7 @@ pub fn return_to_mut(mut bcx: block,\n \n     if bcx.tcx().sess.debug_borrows() {\n         bcx = callee::trans_lang_call( bcx,\n-            bcx.tcx().lang_items.unrecord_borrow_fn(),\n+            langcall(bcx, None, \"unborrow\", UnrecordBorrowFnLangItem),\n             [\n                 box_ptr,\n                 bits_val,\n@@ -86,7 +90,7 @@ pub fn return_to_mut(mut bcx: block,\n \n     callee::trans_lang_call(\n         bcx,\n-        bcx.tcx().lang_items.return_to_mut_fn(),\n+        langcall(bcx, None, \"unborrow\", ReturnToMutFnLangItem),\n         [\n             box_ptr,\n             bits_val,\n@@ -138,16 +142,16 @@ fn root(datum: &Datum,\n             let scratch_bits = scratch_datum(bcx, ty::mk_uint(),\n                                              \"__write_guard_bits\", false);\n \n-            let freeze_did = match freeze_kind {\n-                DynaImm => bcx.tcx().lang_items.borrow_as_imm_fn(),\n-                DynaMut => bcx.tcx().lang_items.borrow_as_mut_fn(),\n+            let freeze_item = match freeze_kind {\n+                DynaImm => BorrowAsImmFnLangItem,\n+                DynaMut => BorrowAsMutFnLangItem,\n             };\n \n             let box_ptr = Load(bcx, PointerCast(bcx, scratch.val, Type::i8p().ptr_to()));\n \n             let llresult = unpack_result!(bcx, callee::trans_lang_call(\n                 bcx,\n-                freeze_did,\n+                langcall(bcx, Some(span), \"freeze\", freeze_item),\n                 [\n                     box_ptr,\n                     filename,\n@@ -158,7 +162,7 @@ fn root(datum: &Datum,\n             if bcx.tcx().sess.debug_borrows() {\n                 bcx = callee::trans_lang_call(\n                     bcx,\n-                    bcx.tcx().lang_items.record_borrow_fn(),\n+                    langcall(bcx, Some(span), \"freeze\", RecordBorrowFnLangItem),\n                     [\n                         box_ptr,\n                         llresult,\n@@ -187,7 +191,7 @@ fn perform_write_guard(datum: &Datum,\n \n     callee::trans_lang_call(\n         bcx,\n-        bcx.tcx().lang_items.check_not_borrowed_fn(),\n+        langcall(bcx, Some(span), \"write guard\", CheckNotBorrowedFnLangItem),\n         [PointerCast(bcx, llval, Type::i8p()), filename, line],\n         Some(expr::Ignore)).bcx\n }"}, {"sha": "c9bf94776c0e23e98cda06313bea0ab0339e6cb2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -13,6 +13,8 @@ use driver::session;\n use metadata::csearch;\n use metadata;\n use middle::const_eval;\n+use middle::lang_items::{TyDescStructLangItem, TyVisitorTraitLangItem};\n+use middle::lang_items::OpaqueStructLangItem;\n use middle::freevars;\n use middle::resolve::{Impl, MethodInfo};\n use middle::resolve;\n@@ -4358,29 +4360,34 @@ pub fn get_impl_id(tcx: ctxt, trait_id: def_id, self_ty: t) -> def_id {\n     }\n }\n \n-pub fn get_tydesc_ty(tcx: ctxt) -> t {\n-    let tydesc_lang_item = tcx.lang_items.ty_desc();\n-    tcx.intrinsic_defs.find_copy(&tydesc_lang_item)\n-        .expect(\"Failed to resolve TyDesc\")\n+pub fn get_tydesc_ty(tcx: ctxt) -> Result<t, ~str> {\n+    do tcx.lang_items.require(TyDescStructLangItem).map |tydesc_lang_item| {\n+        tcx.intrinsic_defs.find_copy(tydesc_lang_item)\n+            .expect(\"Failed to resolve TyDesc\")\n+    }\n }\n \n-pub fn get_opaque_ty(tcx: ctxt) -> t {\n-    let opaque_lang_item = tcx.lang_items.opaque();\n-    tcx.intrinsic_defs.find_copy(&opaque_lang_item)\n-        .expect(\"Failed to resolve Opaque\")\n+pub fn get_opaque_ty(tcx: ctxt) -> Result<t, ~str> {\n+    do tcx.lang_items.require(OpaqueStructLangItem).map |opaque_lang_item| {\n+        tcx.intrinsic_defs.find_copy(opaque_lang_item)\n+            .expect(\"Failed to resolve Opaque\")\n+    }\n }\n \n-pub fn visitor_object_ty(tcx: ctxt) -> (@TraitRef, t) {\n+pub fn visitor_object_ty(tcx: ctxt) -> Result<(@TraitRef, t), ~str> {\n+    let trait_lang_item = match tcx.lang_items.require(TyVisitorTraitLangItem) {\n+        Ok(id) => id,\n+        Err(s) => { return Err(s); }\n+    };\n     let substs = substs {\n         self_r: None,\n         self_ty: None,\n         tps: ~[]\n     };\n-    let trait_lang_item = tcx.lang_items.ty_visitor();\n     let trait_ref = @TraitRef { def_id: trait_lang_item, substs: substs };\n     let mut static_trait_bound = EmptyBuiltinBounds();\n     static_trait_bound.add(BoundStatic);\n-    (trait_ref,\n-     mk_trait(tcx, trait_ref.def_id, copy trait_ref.substs,\n-              BoxTraitStore, ast::m_imm, static_trait_bound))\n+    Ok((trait_ref,\n+        mk_trait(tcx, trait_ref.def_id, copy trait_ref.substs,\n+                 BoxTraitStore, ast::m_imm, static_trait_bound)))\n }"}, {"sha": "d0e793160fedc9fa28afa503d0d0b7848c5352e0", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -811,16 +811,16 @@ pub fn try_add_builtin_trait(tcx: ty::ctxt,\n     //! is a builtin trait.\n \n     let li = &tcx.lang_items;\n-    if trait_def_id == li.send_trait() {\n+    if Some(trait_def_id) == li.send_trait() {\n         builtin_bounds.add(ty::BoundSend);\n         true\n-    } else if trait_def_id == li.copy_trait() {\n+    } else if Some(trait_def_id) == li.copy_trait() {\n         builtin_bounds.add(ty::BoundCopy);\n         true\n-    } else if trait_def_id == li.freeze_trait() {\n+    } else if Some(trait_def_id) == li.freeze_trait() {\n         builtin_bounds.add(ty::BoundFreeze);\n         true\n-    } else if trait_def_id == li.sized_trait() {\n+    } else if Some(trait_def_id) == li.sized_trait() {\n         builtin_bounds.add(ty::BoundSized);\n         true\n     } else {"}, {"sha": "8ffff56a9c485c732cc34dcef225c86fbf0a4819", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -3541,16 +3541,26 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n             }\n \n             \"get_tydesc\" => {\n-              let tydesc_ty = ty::get_tydesc_ty(ccx.tcx);\n+              let tydesc_ty = match ty::get_tydesc_ty(ccx.tcx) {\n+                  Ok(t) => t,\n+                  Err(s) => { tcx.sess.span_fatal(it.span, s); }\n+              };\n               let td_ptr = ty::mk_ptr(ccx.tcx, ty::mt {\n                   ty: tydesc_ty,\n                   mutbl: ast::m_imm\n               });\n               (1u, ~[], td_ptr)\n             }\n             \"visit_tydesc\" => {\n-              let tydesc_ty = ty::get_tydesc_ty(ccx.tcx);\n-              let (_, visitor_object_ty) = ty::visitor_object_ty(tcx);\n+              let tydesc_ty = match ty::get_tydesc_ty(ccx.tcx) {\n+                  Ok(t) => t,\n+                  Err(s) => { tcx.sess.span_fatal(it.span, s); }\n+              };\n+              let visitor_object_ty = match ty::visitor_object_ty(tcx) {\n+                  Ok((_, vot)) => vot,\n+                  Err(s) => { tcx.sess.span_fatal(it.span, s); }\n+              };\n+\n               let td_ptr = ty::mk_ptr(ccx.tcx, ty::mt {\n                   ty: tydesc_ty,\n                   mutbl: ast::m_imm"}, {"sha": "768c4cd04e7344c03cf1a5a174de2e8bd22b0be3", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -960,7 +960,9 @@ impl CoherenceChecker {\n     pub fn populate_destructor_table(&self) {\n         let coherence_info = &self.crate_context.coherence_info;\n         let tcx = self.crate_context.tcx;\n-        let drop_trait = tcx.lang_items.drop_trait();\n+        let drop_trait = match tcx.lang_items.drop_trait() {\n+            Some(id) => id, None => { return }\n+        };\n         let impls_opt = coherence_info.extension_methods.find(&drop_trait);\n \n         let impls;"}, {"sha": "16ddef2b8e0f9863afcad34031b1b10f12b7a470", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -69,8 +69,12 @@ pub fn collect_item_types(ccx: @mut CrateCtxt, crate: &ast::crate) {\n         ccx.tcx.intrinsic_defs.insert(lang_item, ty);\n     }\n \n-    collect_intrinsic_type(ccx, ccx.tcx.lang_items.ty_desc());\n-    collect_intrinsic_type(ccx, ccx.tcx.lang_items.opaque());\n+    match ccx.tcx.lang_items.ty_desc() {\n+        Some(id) => { collect_intrinsic_type(ccx, id); } None => {}\n+    }\n+    match ccx.tcx.lang_items.opaque() {\n+        Some(id) => { collect_intrinsic_type(ccx, id); } None => {}\n+    }\n \n     visit::visit_crate(\n         crate, ((),"}, {"sha": "bbd5857335db6eb019211e578d5b7fe3e081ee54", "filename": "src/test/run-pass/smallest-hello-world.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a1b713059b50be51fa93f39165ae9d35d27cdd/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs?ref=88a1b713059b50be51fa93f39165ae9d35d27cdd", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast - windows doesn't like this\n+\n+// Smallest hello world with no runtime\n+\n+#[no_std];\n+\n+// This is an unfortunate thing to have to do on linux :(\n+#[cfg(target_os = \"linux\")]\n+#[doc(hidden)]\n+pub mod linkhack {\n+    #[link_args=\"-lrustrt -lrt\"]\n+    extern {}\n+}\n+\n+extern {\n+    fn puts(s: *u8);\n+}\n+\n+extern \"rust-intrinsic\" {\n+    fn transmute<T, U>(t: T) -> U;\n+}\n+\n+#[start]\n+fn main(_: int, _: **u8, _: *u8) -> int {\n+    unsafe {\n+        let (ptr, _): (*u8, uint) = transmute(\"Hello!\");\n+        puts(ptr);\n+    }\n+    return 0;\n+}\n+"}]}