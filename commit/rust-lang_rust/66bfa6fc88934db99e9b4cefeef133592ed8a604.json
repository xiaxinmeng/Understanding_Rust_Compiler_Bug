{"sha": "66bfa6fc88934db99e9b4cefeef133592ed8a604", "node_id": "C_kwDOAAsO6NoAKDY2YmZhNmZjODg5MzRkYjk5ZTliNGNlZmVlZjEzMzU5MmVkOGE2MDQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-12T09:47:22Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-12T09:48:37Z"}, "message": "Improve user snippet import performance", "tree": {"sha": "3c28a99fd3b409ac5399d597853a940bbf167380", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c28a99fd3b409ac5399d597853a940bbf167380"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66bfa6fc88934db99e9b4cefeef133592ed8a604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66bfa6fc88934db99e9b4cefeef133592ed8a604", "html_url": "https://github.com/rust-lang/rust/commit/66bfa6fc88934db99e9b4cefeef133592ed8a604", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66bfa6fc88934db99e9b4cefeef133592ed8a604/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cca1fa5bff7bdb4060be938a949380df4e210c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cca1fa5bff7bdb4060be938a949380df4e210c7", "html_url": "https://github.com/rust-lang/rust/commit/1cca1fa5bff7bdb4060be938a949380df4e210c7"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "bcaa1ded8f6107b374fe837578297f88f950d2ee", "filename": "crates/ide_completion/src/snippet.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/66bfa6fc88934db99e9b4cefeef133592ed8a604/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66bfa6fc88934db99e9b4cefeef133592ed8a604/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fsnippet.rs?ref=66bfa6fc88934db99e9b4cefeef133592ed8a604", "patch": "@@ -56,7 +56,7 @@ use std::ops::Deref;\n // It does not act as a tabstop.\n use ide_db::helpers::{import_assets::LocatedImport, insert_use::ImportScope};\n use itertools::Itertools;\n-use syntax::ast;\n+use syntax::{ast, AstNode, GreenNode, SyntaxNode};\n \n use crate::{context::CompletionContext, ImportEdit};\n \n@@ -75,9 +75,12 @@ pub struct Snippet {\n     pub postfix_triggers: Box<[Box<str>]>,\n     pub prefix_triggers: Box<[Box<str>]>,\n     pub scope: SnippetScope,\n-    snippet: String,\n     pub description: Option<Box<str>>,\n-    pub requires: Box<[Box<str>]>,\n+    snippet: String,\n+    // These are `ast::Path`'s but due to SyntaxNodes not being Send we store these\n+    // and reconstruct them on demand instead. This is cheaper than reparsing them\n+    // from strings\n+    requires: Box<[GreenNode]>,\n }\n \n impl Snippet {\n@@ -92,15 +95,15 @@ impl Snippet {\n         if prefix_triggers.is_empty() && postfix_triggers.is_empty() {\n             return None;\n         }\n-        let (snippet, description) = validate_snippet(snippet, description, requires)?;\n+        let (requires, snippet, description) = validate_snippet(snippet, description, requires)?;\n         Some(Snippet {\n             // Box::into doesn't work as that has a Copy bound \ud83d\ude12\n             postfix_triggers: postfix_triggers.iter().map(Deref::deref).map(Into::into).collect(),\n             prefix_triggers: prefix_triggers.iter().map(Deref::deref).map(Into::into).collect(),\n             scope,\n             snippet,\n             description,\n-            requires: requires.iter().map(Deref::deref).map(Into::into).collect(),\n+            requires,\n         })\n     }\n \n@@ -125,10 +128,10 @@ impl Snippet {\n fn import_edits(\n     ctx: &CompletionContext,\n     import_scope: &ImportScope,\n-    requires: &[Box<str>],\n+    requires: &[GreenNode],\n ) -> Option<Vec<ImportEdit>> {\n-    let resolve = |import| {\n-        let path = ast::Path::parse(import).ok()?;\n+    let resolve = |import: &GreenNode| {\n+        let path = ast::Path::cast(SyntaxNode::new_root(import.clone()))?;\n         let item = match ctx.scope.speculative_resolve(&path)? {\n             hir::PathResolution::Macro(mac) => mac.into(),\n             hir::PathResolution::Def(def) => def.into(),\n@@ -158,19 +161,21 @@ fn validate_snippet(\n     snippet: &[String],\n     description: &str,\n     requires: &[String],\n-) -> Option<(String, Option<Box<str>>)> {\n-    // validate that these are indeed simple paths\n-    // we can't save the paths unfortunately due to them not being Send+Sync\n-    if requires.iter().any(|path| match ast::Path::parse(path) {\n-        Ok(path) => path.segments().any(|seg| {\n-            !matches!(seg.kind(), Some(ast::PathSegmentKind::Name(_)))\n-                || seg.generic_arg_list().is_some()\n-        }),\n-        Err(_) => true,\n-    }) {\n-        return None;\n+) -> Option<(Box<[GreenNode]>, String, Option<Box<str>>)> {\n+    let mut imports = Vec::with_capacity(requires.len());\n+    for path in requires.iter() {\n+        let path = ast::Path::parse(path).ok()?;\n+        let valid_use_path = path.segments().all(|seg| {\n+            matches!(seg.kind(), Some(ast::PathSegmentKind::Name(_)))\n+                || seg.generic_arg_list().is_none()\n+        });\n+        if !valid_use_path {\n+            return None;\n+        }\n+        let green = path.syntax().green().into_owned();\n+        imports.push(green);\n     }\n     let snippet = snippet.iter().join(\"\\n\");\n     let description = if description.is_empty() { None } else { Some(description.into()) };\n-    Some((snippet, description))\n+    Some((imports.into_boxed_slice(), snippet, description))\n }"}]}