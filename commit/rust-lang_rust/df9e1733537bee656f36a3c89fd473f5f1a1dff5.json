{"sha": "df9e1733537bee656f36a3c89fd473f5f1a1dff5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOWUxNzMzNTM3YmVlNjU2ZjM2YTNjODlmZDQ3M2Y1ZjFhMWRmZjU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-25T17:51:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-04T17:53:50Z"}, "message": "test: Clean up alloc_jemalloc usage in tests\n\nRight now there's just a smattering of `// ignore-foo` platforms which is ever\nexpanding as new ones are added. Instead switch to only running these tests on\nLinux/OSX and then use a guaranteed-to-work but not-as-well-tested alternative\non other platforms.", "tree": {"sha": "c8973aaa382e29bdf44b22855ec46bf174e99120", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8973aaa382e29bdf44b22855ec46bf174e99120"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df9e1733537bee656f36a3c89fd473f5f1a1dff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df9e1733537bee656f36a3c89fd473f5f1a1dff5", "html_url": "https://github.com/rust-lang/rust/commit/df9e1733537bee656f36a3c89fd473f5f1a1dff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df9e1733537bee656f36a3c89fd473f5f1a1dff5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fbc0800337724f71af8f89a09dfc8679ed6e34f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fbc0800337724f71af8f89a09dfc8679ed6e34f", "html_url": "https://github.com/rust-lang/rust/commit/4fbc0800337724f71af8f89a09dfc8679ed6e34f"}], "stats": {"total": 64, "additions": 28, "deletions": 36}, "files": [{"sha": "db7f304227f01acc9df0d1df50744ac82e3e08c4", "filename": "src/test/compile-fail/allocator-dylib-is-system.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/df9e1733537bee656f36a3c89fd473f5f1a1dff5/src%2Ftest%2Fcompile-fail%2Fallocator-dylib-is-system.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9e1733537bee656f36a3c89fd473f5f1a1dff5/src%2Ftest%2Fcompile-fail%2Fallocator-dylib-is-system.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator-dylib-is-system.rs?ref=df9e1733537bee656f36a3c89fd473f5f1a1dff5", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-windows everything is the system allocator on windows\n-// ignore-musl no dylibs on musl yet\n-// ignore-bitrig no jemalloc on bitrig\n-// ignore-openbsd no jemalloc on openbsd\n+// ignore-musl no dylibs\n // aux-build:allocator-dylib.rs\n+// aux-build:allocator1.rs\n // no-prefer-dynamic\n // error-pattern: cannot link together two allocators\n \n@@ -23,7 +21,18 @@\n #![feature(alloc_jemalloc)]\n \n extern crate allocator_dylib;\n+\n+// The main purpose of this test is to ensure that `alloc_jemalloc` **fails**\n+// here (specifically the jemalloc allocator), but currently jemalloc is\n+// disabled on quite a few platforms (bsds, emscripten, msvc, etc). To ensure\n+// that this just passes on those platforms we link in some other allocator to\n+// ensure we get the same error.\n+//\n+// So long as we CI linux/OSX we should be good.\n+#[cfg(any(target_os = \"linux\", target_os = \"macos\"))]\n extern crate alloc_jemalloc;\n+#[cfg(not(any(target_os = \"linux\", target_os = \"macos\")))]\n+extern crate allocator1;\n \n fn main() {\n     allocator_dylib::foo();"}, {"sha": "46ad226d255645a0df21d8ac19f5179aa6905fe0", "filename": "src/test/compile-fail/allocator-rust-dylib-is-jemalloc.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/df9e1733537bee656f36a3c89fd473f5f1a1dff5/src%2Ftest%2Fcompile-fail%2Fallocator-rust-dylib-is-jemalloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9e1733537bee656f36a3c89fd473f5f1a1dff5/src%2Ftest%2Fcompile-fail%2Fallocator-rust-dylib-is-jemalloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator-rust-dylib-is-jemalloc.rs?ref=df9e1733537bee656f36a3c89fd473f5f1a1dff5", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-windows everything is the system allocator on windows\n-// ignore-musl no dylibs on musl right now\n-// ignore-bitrig no jemalloc on bitrig\n-// ignore-openbsd no jemalloc on openbsd\n+// ignore-musl no dylibs\n // aux-build:allocator-dylib2.rs\n+// aux-build:allocator1.rs\n // error-pattern: cannot link together two allocators\n \n // Ensure that rust dynamic libraries use jemalloc as their allocator, verifying\n@@ -21,9 +19,19 @@\n #![feature(alloc_system)]\n \n extern crate allocator_dylib2;\n+\n+// The main purpose of this test is to ensure that `alloc_system` **fails**\n+// here (specifically the system allocator), but currently system is\n+// disabled on quite a few platforms (bsds, emscripten, msvc, etc). To ensure\n+// that this just passes on those platforms we link in some other allocator to\n+// ensure we get the same error.\n+//\n+// So long as we CI linux/OSX we should be good.\n+#[cfg(any(target_os = \"linux\", target_os = \"macos\"))]\n extern crate alloc_system;\n+#[cfg(not(any(target_os = \"linux\", target_os = \"macos\")))]\n+extern crate allocator1;\n \n fn main() {\n     allocator_dylib2::foo();\n }\n-"}, {"sha": "32ed2b330118d5cd85badd30eb5f4df1192f4da7", "filename": "src/test/run-pass/allocator-default.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df9e1733537bee656f36a3c89fd473f5f1a1dff5/src%2Ftest%2Frun-pass%2Fallocator-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9e1733537bee656f36a3c89fd473f5f1a1dff5/src%2Ftest%2Frun-pass%2Fallocator-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator-default.rs?ref=df9e1733537bee656f36a3c89fd473f5f1a1dff5", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(alloc_jemalloc, alloc_system)]\n+#![feature(alloc_jemalloc)]\n \n-#[cfg(not(any(windows, target_os = \"bitrig\", target_os = \"openbsd\", target_os=\"emscripten\")))]\n+#[cfg(any(target_os = \"linux\", target_os = \"macos\"))]\n extern crate alloc_jemalloc;\n-#[cfg(any(windows, target_os = \"bitrig\", target_os = \"openbsd\", target_os=\"emscripten\"))]\n-extern crate alloc_system;\n \n fn main() {\n     println!(\"{:?}\", Box::new(3));"}, {"sha": "ad1438f75fc50507681282b6e090f126635ae530", "filename": "src/test/run-pass/allocator-jemalloc.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4fbc0800337724f71af8f89a09dfc8679ed6e34f/src%2Ftest%2Frun-pass%2Fallocator-jemalloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fbc0800337724f71af8f89a09dfc8679ed6e34f/src%2Ftest%2Frun-pass%2Fallocator-jemalloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator-jemalloc.rs?ref=4fbc0800337724f71af8f89a09dfc8679ed6e34f", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// no-prefer-dynamic\n-// ignore-windows no jemalloc on windows\n-// ignore-bitrig no jemalloc on bitrig\n-// ignore-openbsd no jemalloc on openbsd\n-// ignore-emscripten no jemalloc on emscripten\n-\n-#![feature(alloc_jemalloc)]\n-\n-extern crate alloc_jemalloc;\n-\n-fn main() {\n-    println!(\"{:?}\", Box::new(3));\n-}"}]}