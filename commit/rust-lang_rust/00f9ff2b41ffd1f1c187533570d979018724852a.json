{"sha": "00f9ff2b41ffd1f1c187533570d979018724852a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZjlmZjJiNDFmZmQxZjFjMTg3NTMzNTcwZDk3OTAxODcyNDg1MmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-03T06:11:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-03T06:11:38Z"}, "message": "auto merge of #15324 : sneves/rust/master, r=alexcrichton\n\nThe current implementation of `rotate_left` and `rotate_right` are incorrect when the rotation amount is 0, or a multiple of the input's bitsize. When `n = 0`, the expression\r\n\r\n    (self >> n) | (self << ($BITS - n))\r\n\r\nresults in a shift left by `$BITS` bits, which is undefined behavior (see https://github.com/rust-lang/rust/issues/10183), and currently results in a hardcoded `-1` value, instead of the original input value. Reducing `($BITS - n)` modulo `$BITS`, simplified to `(-n % $BITS)`, fixes this problem.", "tree": {"sha": "3213e9e5f8328493feb5bc417d55f2460f117c8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3213e9e5f8328493feb5bc417d55f2460f117c8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00f9ff2b41ffd1f1c187533570d979018724852a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00f9ff2b41ffd1f1c187533570d979018724852a", "html_url": "https://github.com/rust-lang/rust/commit/00f9ff2b41ffd1f1c187533570d979018724852a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00f9ff2b41ffd1f1c187533570d979018724852a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6c54a12c4d209de9f438b4722657ca381f969a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c54a12c4d209de9f438b4722657ca381f969a2", "html_url": "https://github.com/rust-lang/rust/commit/e6c54a12c4d209de9f438b4722657ca381f969a2"}, {"sha": "c0248c0839cfdf5b7030f4191ea7aed0981b9e4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0248c0839cfdf5b7030f4191ea7aed0981b9e4e", "html_url": "https://github.com/rust-lang/rust/commit/c0248c0839cfdf5b7030f4191ea7aed0981b9e4e"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "1fae362471d9c8f168c77160af8182a871fac88b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00f9ff2b41ffd1f1c187533570d979018724852a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9ff2b41ffd1f1c187533570d979018724852a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=00f9ff2b41ffd1f1c187533570d979018724852a", "patch": "@@ -586,14 +586,14 @@ macro_rules! int_impl {\n             fn rotate_left(self, n: uint) -> $T {\n                 // Protect against undefined behaviour for over-long bit shifts\n                 let n = n % $BITS;\n-                (self << n) | (self >> ($BITS - n))\n+                (self << n) | (self >> (($BITS - n) % $BITS))\n             }\n \n             #[inline]\n             fn rotate_right(self, n: uint) -> $T {\n                 // Protect against undefined behaviour for over-long bit shifts\n                 let n = n % $BITS;\n-                (self >> n) | (self << ($BITS - n))\n+                (self >> n) | (self << (($BITS - n) % $BITS))\n             }\n \n             #[inline]"}, {"sha": "d078b51408512fa5e0d13b572a4da0bee79b4c00", "filename": "src/libcoretest/num/int_macros.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/00f9ff2b41ffd1f1c187533570d979018724852a/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9ff2b41ffd1f1c187533570d979018724852a/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fint_macros.rs?ref=00f9ff2b41ffd1f1c187533570d979018724852a", "patch": "@@ -114,6 +114,15 @@ mod tests {\n         assert_eq!(_1.rotate_left(124), _1);\n         assert_eq!(_0.rotate_right(124), _0);\n         assert_eq!(_1.rotate_right(124), _1);\n+\n+        // Rotating by 0 should have no effect\n+        assert_eq!(A.rotate_left(0), A);\n+        assert_eq!(B.rotate_left(0), B);\n+        assert_eq!(C.rotate_left(0), C);\n+        // Rotating by a multiple of word size should also have no effect\n+        assert_eq!(A.rotate_left(64), A);\n+        assert_eq!(B.rotate_left(64), B);\n+        assert_eq!(C.rotate_left(64), C);\n     }\n \n     #[test]"}, {"sha": "aefaa90520e798a339d35ef7d15adfad12c0f8ff", "filename": "src/libcoretest/num/uint_macros.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/00f9ff2b41ffd1f1c187533570d979018724852a/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9ff2b41ffd1f1c187533570d979018724852a/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fuint_macros.rs?ref=00f9ff2b41ffd1f1c187533570d979018724852a", "patch": "@@ -74,6 +74,15 @@ mod tests {\n         assert_eq!(_1.rotate_left(124), _1);\n         assert_eq!(_0.rotate_right(124), _0);\n         assert_eq!(_1.rotate_right(124), _1);\n+\n+        // Rotating by 0 should have no effect\n+        assert_eq!(A.rotate_left(0), A);\n+        assert_eq!(B.rotate_left(0), B);\n+        assert_eq!(C.rotate_left(0), C);\n+        // Rotating by a multiple of word size should also have no effect\n+        assert_eq!(A.rotate_left(64), A);\n+        assert_eq!(B.rotate_left(64), B);\n+        assert_eq!(C.rotate_left(64), C);\n     }\n \n     #[test]"}]}