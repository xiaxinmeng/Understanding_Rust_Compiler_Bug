{"sha": "1420cebebd48a187d8639243beaf207a0dd90853", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MjBjZWJlYmQ0OGExODdkODYzOTI0M2JlYWYyMDdhMGRkOTA4NTM=", "commit": {"author": {"name": "Alexis", "email": "a.beingessner@gmail.com", "date": "2015-02-05T18:48:20Z"}, "committer": {"name": "Alexis", "email": "a.beingessner@gmail.com", "date": "2015-02-05T23:25:03Z"}, "message": "remove unecessary lifetimes from a bunch of collections code", "tree": {"sha": "48967da134be17131ca7b98a8a3bb3faf75d73be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48967da134be17131ca7b98a8a3bb3faf75d73be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1420cebebd48a187d8639243beaf207a0dd90853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1420cebebd48a187d8639243beaf207a0dd90853", "html_url": "https://github.com/rust-lang/rust/commit/1420cebebd48a187d8639243beaf207a0dd90853", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1420cebebd48a187d8639243beaf207a0dd90853/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e250fe388b3455c067ad87dd3e3b5f6585850fcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e250fe388b3455c067ad87dd3e3b5f6585850fcb", "html_url": "https://github.com/rust-lang/rust/commit/e250fe388b3455c067ad87dd3e3b5f6585850fcb"}], "stats": {"total": 100, "additions": 50, "deletions": 50}, "files": [{"sha": "3bc5b0ca053e4197e2b38f4c995002305cb17011", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1420cebebd48a187d8639243beaf207a0dd90853/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1420cebebd48a187d8639243beaf207a0dd90853/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=1420cebebd48a187d8639243beaf207a0dd90853", "patch": "@@ -708,7 +708,7 @@ mod tests {\n         let iterout = vec![3, 5, 9];\n         let pq = BinaryHeap::from_vec(data);\n \n-        let v: Vec<_> = pq.iter().rev().map(|&x| x).collect();\n+        let v: Vec<_> = pq.iter().rev().cloned().collect();\n         assert_eq!(v, iterout);\n     }\n "}, {"sha": "8c219418309b88c406db58d277d54ee4ea959696", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1420cebebd48a187d8639243beaf207a0dd90853/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1420cebebd48a187d8639243beaf207a0dd90853/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=1420cebebd48a187d8639243beaf207a0dd90853", "patch": "@@ -529,13 +529,13 @@ impl<T> RingBuf<T> {\n     /// assert_eq!(&buf.iter_mut().collect::<Vec<&mut i32>>()[], b);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter_mut<'a>(&'a mut self) -> IterMut<'a, T> {\n+    pub fn iter_mut(&mut self) -> IterMut<T> {\n         IterMut {\n             tail: self.tail,\n             head: self.head,\n             cap: self.cap,\n             ptr: self.ptr,\n-            marker: marker::ContravariantLifetime::<'a>,\n+            marker: marker::ContravariantLifetime,\n         }\n     }\n \n@@ -552,7 +552,7 @@ impl<T> RingBuf<T> {\n     #[inline]\n     #[unstable(feature = \"collections\",\n                reason = \"matches collection reform specification, waiting for dust to settle\")]\n-    pub fn as_slices<'a>(&'a self) -> (&'a [T], &'a [T]) {\n+    pub fn as_slices(&self) -> (&[T], &[T]) {\n         unsafe {\n             let contiguous = self.is_contiguous();\n             let buf = self.buffer_as_slice();\n@@ -572,7 +572,7 @@ impl<T> RingBuf<T> {\n     #[inline]\n     #[unstable(feature = \"collections\",\n                reason = \"matches collection reform specification, waiting for dust to settle\")]\n-    pub fn as_mut_slices<'a>(&'a mut self) -> (&'a mut [T], &'a mut [T]) {\n+    pub fn as_mut_slices(&mut self) -> (&mut [T], &mut [T]) {\n         unsafe {\n             let contiguous = self.is_contiguous();\n             let head = self.head;\n@@ -1584,7 +1584,7 @@ impl<A> Index<usize> for RingBuf<A> {\n     type Output = A;\n \n     #[inline]\n-    fn index<'a>(&'a self, i: &usize) -> &'a A {\n+    fn index(&self, i: &usize) -> &A {\n         self.get(*i).expect(\"Out of bounds access\")\n     }\n }\n@@ -1594,7 +1594,7 @@ impl<A> IndexMut<usize> for RingBuf<A> {\n     type Output = A;\n \n     #[inline]\n-    fn index_mut<'a>(&'a mut self, i: &usize) -> &'a mut A {\n+    fn index_mut(&mut self, i: &usize) -> &mut A {\n         self.get_mut(*i).expect(\"Out of bounds access\")\n     }\n }"}, {"sha": "eb7e1b10c9b2df8238eecd1f0bd1accb8ab12b3a", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1420cebebd48a187d8639243beaf207a0dd90853/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1420cebebd48a187d8639243beaf207a0dd90853/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=1420cebebd48a187d8639243beaf207a0dd90853", "patch": "@@ -812,27 +812,27 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn slice<'a>(&'a self, start: usize, end: usize) -> &'a [T] {\n+    fn slice(&self, start: usize, end: usize) -> &[T] {\n         &self[start .. end]\n     }\n \n     #[inline]\n-    fn slice_from<'a>(&'a self, start: usize) -> &'a [T] {\n+    fn slice_from(&self, start: usize) -> &[T] {\n         &self[start ..]\n     }\n \n     #[inline]\n-    fn slice_to<'a>(&'a self, end: usize) -> &'a [T] {\n+    fn slice_to(&self, end: usize) -> &[T] {\n         &self[.. end]\n     }\n \n     #[inline]\n-    fn split_at<'a>(&'a self, mid: usize) -> (&'a [T], &'a [T]) {\n+    fn split_at(&self, mid: usize) -> (&[T], &[T]) {\n         core_slice::SliceExt::split_at(self, mid)\n     }\n \n     #[inline]\n-    fn iter<'a>(&'a self) -> Iter<'a, T> {\n+    fn iter(&self) -> Iter<T> {\n         core_slice::SliceExt::iter(self)\n     }\n \n@@ -855,42 +855,42 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn windows<'a>(&'a self, size: usize) -> Windows<'a, T> {\n+    fn windows(&self, size: usize) -> Windows<T> {\n         core_slice::SliceExt::windows(self, size)\n     }\n \n     #[inline]\n-    fn chunks<'a>(&'a self, size: usize) -> Chunks<'a, T> {\n+    fn chunks(&self, size: usize) -> Chunks<T> {\n         core_slice::SliceExt::chunks(self, size)\n     }\n \n     #[inline]\n-    fn get<'a>(&'a self, index: usize) -> Option<&'a T> {\n+    fn get(&self, index: usize) -> Option<&T> {\n         core_slice::SliceExt::get(self, index)\n     }\n \n     #[inline]\n-    fn first<'a>(&'a self) -> Option<&'a T> {\n+    fn first(&self) -> Option<&T> {\n         core_slice::SliceExt::first(self)\n     }\n \n     #[inline]\n-    fn tail<'a>(&'a self) -> &'a [T] {\n+    fn tail(&self) -> &[T] {\n         core_slice::SliceExt::tail(self)\n     }\n \n     #[inline]\n-    fn init<'a>(&'a self) -> &'a [T] {\n+    fn init(&self) -> &[T] {\n         core_slice::SliceExt::init(self)\n     }\n \n     #[inline]\n-    fn last<'a>(&'a self) -> Option<&'a T> {\n+    fn last(&self) -> Option<&T> {\n         core_slice::SliceExt::last(self)\n     }\n \n     #[inline]\n-    unsafe fn get_unchecked<'a>(&'a self, index: usize) -> &'a T {\n+    unsafe fn get_unchecked(&self, index: usize) -> &T {\n         core_slice::SliceExt::get_unchecked(self, index)\n     }\n \n@@ -916,52 +916,52 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn get_mut<'a>(&'a mut self, index: usize) -> Option<&'a mut T> {\n+    fn get_mut(&mut self, index: usize) -> Option<&mut T> {\n         core_slice::SliceExt::get_mut(self, index)\n     }\n \n     #[inline]\n-    fn as_mut_slice<'a>(&'a mut self) -> &'a mut [T] {\n+    fn as_mut_slice(&mut self) -> &mut [T] {\n         core_slice::SliceExt::as_mut_slice(self)\n     }\n \n     #[inline]\n-    fn slice_mut<'a>(&'a mut self, start: usize, end: usize) -> &'a mut [T] {\n+    fn slice_mut(&mut self, start: usize, end: usize) -> &mut [T] {\n         &mut self[start .. end]\n     }\n \n     #[inline]\n-    fn slice_from_mut<'a>(&'a mut self, start: usize) -> &'a mut [T] {\n+    fn slice_from_mut(&mut self, start: usize) -> &mut [T] {\n         &mut self[start ..]\n     }\n \n     #[inline]\n-    fn slice_to_mut<'a>(&'a mut self, end: usize) -> &'a mut [T] {\n+    fn slice_to_mut(&mut self, end: usize) -> &mut [T] {\n         &mut self[.. end]\n     }\n \n     #[inline]\n-    fn iter_mut<'a>(&'a mut self) -> IterMut<'a, T> {\n+    fn iter_mut(&mut self) -> IterMut<T> {\n         core_slice::SliceExt::iter_mut(self)\n     }\n \n     #[inline]\n-    fn first_mut<'a>(&'a mut self) -> Option<&'a mut T> {\n+    fn first_mut(&mut self) -> Option<&mut T> {\n         core_slice::SliceExt::first_mut(self)\n     }\n \n     #[inline]\n-    fn tail_mut<'a>(&'a mut self) -> &'a mut [T] {\n+    fn tail_mut(&mut self) -> &mut [T] {\n         core_slice::SliceExt::tail_mut(self)\n     }\n \n     #[inline]\n-    fn init_mut<'a>(&'a mut self) -> &'a mut [T] {\n+    fn init_mut(&mut self) -> &mut [T] {\n         core_slice::SliceExt::init_mut(self)\n     }\n \n     #[inline]\n-    fn last_mut<'a>(&'a mut self) -> Option<&'a mut T> {\n+    fn last_mut(&mut self) -> Option<&mut T> {\n         core_slice::SliceExt::last_mut(self)\n     }\n \n@@ -984,7 +984,7 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn chunks_mut<'a>(&'a mut self, chunk_size: usize) -> ChunksMut<'a, T> {\n+    fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<T> {\n         core_slice::SliceExt::chunks_mut(self, chunk_size)\n     }\n \n@@ -994,7 +994,7 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn split_at_mut<'a>(&'a mut self, mid: usize) -> (&'a mut [T], &'a mut [T]) {\n+    fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {\n         core_slice::SliceExt::split_at_mut(self, mid)\n     }\n \n@@ -1004,7 +1004,7 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    unsafe fn get_unchecked_mut<'a>(&'a mut self, index: usize) -> &'a mut T {\n+    unsafe fn get_unchecked_mut(&mut self, index: usize) -> &mut T {\n         core_slice::SliceExt::get_unchecked_mut(self, index)\n     }\n "}, {"sha": "65c397359f4ea5c5e7384937df2966d568430b36", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1420cebebd48a187d8639243beaf207a0dd90853/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1420cebebd48a187d8639243beaf207a0dd90853/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=1420cebebd48a187d8639243beaf207a0dd90853", "patch": "@@ -464,7 +464,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     #[inline]\n     #[unstable(feature = \"collections\",\n                reason = \"this functionality may be moved to libunicode\")]\n-    fn nfd_chars<'a>(&'a self) -> Decompositions<'a> {\n+    fn nfd_chars(&self) -> Decompositions {\n         Decompositions {\n             iter: self[].chars(),\n             buffer: Vec::new(),\n@@ -478,7 +478,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     #[inline]\n     #[unstable(feature = \"collections\",\n                reason = \"this functionality may be moved to libunicode\")]\n-    fn nfkd_chars<'a>(&'a self) -> Decompositions<'a> {\n+    fn nfkd_chars(&self) -> Decompositions {\n         Decompositions {\n             iter: self[].chars(),\n             buffer: Vec::new(),\n@@ -492,7 +492,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     #[inline]\n     #[unstable(feature = \"collections\",\n                reason = \"this functionality may be moved to libunicode\")]\n-    fn nfc_chars<'a>(&'a self) -> Recompositions<'a> {\n+    fn nfc_chars(&self) -> Recompositions {\n         Recompositions {\n             iter: self.nfd_chars(),\n             state: Composing,\n@@ -507,7 +507,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     #[inline]\n     #[unstable(feature = \"collections\",\n                reason = \"this functionality may be moved to libunicode\")]\n-    fn nfkc_chars<'a>(&'a self) -> Recompositions<'a> {\n+    fn nfkc_chars(&self) -> Recompositions {\n         Recompositions {\n             iter: self.nfkd_chars(),\n             state: Composing,"}, {"sha": "cf2d4415412af3f0bc4a774bd0fab05eecfc3140", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1420cebebd48a187d8639243beaf207a0dd90853/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1420cebebd48a187d8639243beaf207a0dd90853/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=1420cebebd48a187d8639243beaf207a0dd90853", "patch": "@@ -488,7 +488,7 @@ impl String {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn as_bytes<'a>(&'a self) -> &'a [u8] {\n+    pub fn as_bytes(&self) -> &[u8] {\n         &self.vec\n     }\n \n@@ -627,7 +627,7 @@ impl String {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub unsafe fn as_mut_vec<'a>(&'a mut self) -> &'a mut Vec<u8> {\n+    pub unsafe fn as_mut_vec(&mut self) -> &mut Vec<u8> {\n         &mut self.vec\n     }\n \n@@ -803,7 +803,7 @@ impl<'a, 'b> PartialEq<CowString<'a>> for &'b str {\n impl Str for String {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn as_slice<'a>(&'a self) -> &'a str {\n+    fn as_slice(&self) -> &str {\n         unsafe { mem::transmute(&*self.vec) }\n     }\n }\n@@ -891,7 +891,7 @@ impl ops::Deref for String {\n     type Target = str;\n \n     #[inline]\n-    fn deref<'a>(&'a self) -> &'a str {\n+    fn deref(&self) -> &str {\n         unsafe { mem::transmute(&self.vec[]) }\n     }\n }"}, {"sha": "071c08728cb0321166cb8ce2071c6bbe689b5d1e", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1420cebebd48a187d8639243beaf207a0dd90853/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1420cebebd48a187d8639243beaf207a0dd90853/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=1420cebebd48a187d8639243beaf207a0dd90853", "patch": "@@ -425,7 +425,7 @@ impl<T> Vec<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn as_mut_slice<'a>(&'a mut self) -> &'a mut [T] {\n+    pub fn as_mut_slice(&mut self) -> &mut [T] {\n         unsafe {\n             mem::transmute(RawSlice {\n                 data: *self.ptr,\n@@ -737,7 +737,7 @@ impl<T> Vec<T> {\n     #[inline]\n     #[unstable(feature = \"collections\",\n                reason = \"matches collection reform specification, waiting for dust to settle\")]\n-    pub fn drain<'a>(&'a mut self) -> Drain<'a, T> {\n+    pub fn drain(&mut self) -> Drain<T> {\n         unsafe {\n             let begin = *self.ptr as *const T;\n             let end = if mem::size_of::<T>() == 0 {\n@@ -1278,7 +1278,7 @@ impl<T> Index<usize> for Vec<T> {\n     type Output = T;\n \n     #[inline]\n-    fn index<'a>(&'a self, index: &usize) -> &'a T {\n+    fn index(&self, index: &usize) -> &T {\n         // NB built-in indexing via `&[T]`\n         &(**self)[*index]\n     }\n@@ -1289,7 +1289,7 @@ impl<T> IndexMut<usize> for Vec<T> {\n     type Output = T;\n \n     #[inline]\n-    fn index_mut<'a>(&'a mut self, index: &usize) -> &'a mut T {\n+    fn index_mut(&mut self, index: &usize) -> &mut T {\n         // NB built-in indexing via `&mut [T]`\n         &mut (**self)[*index]\n     }\n@@ -1366,12 +1366,12 @@ impl<T> ops::IndexMut<ops::RangeFull> for Vec<T> {\n impl<T> ops::Deref for Vec<T> {\n     type Target = [T];\n \n-    fn deref<'a>(&'a self) -> &'a [T] { self.as_slice() }\n+    fn deref(&self) -> &[T] { self.as_slice() }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::DerefMut for Vec<T> {\n-    fn deref_mut<'a>(&'a mut self) -> &'a mut [T] { self.as_mut_slice() }\n+    fn deref_mut(&mut self) -> &mut [T] { self.as_mut_slice() }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1519,7 +1519,7 @@ impl<T> AsSlice<T> for Vec<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn as_slice<'a>(&'a self) -> &'a [T] {\n+    fn as_slice(&self) -> &[T] {\n         unsafe {\n             mem::transmute(RawSlice {\n                 data: *self.ptr,\n@@ -1636,7 +1636,7 @@ impl<T> Iterator for IntoIter<T> {\n     type Item = T;\n \n     #[inline]\n-    fn next<'a>(&'a mut self) -> Option<T> {\n+    fn next(&mut self) -> Option<T> {\n         unsafe {\n             if self.ptr == self.end {\n                 None\n@@ -1671,7 +1671,7 @@ impl<T> Iterator for IntoIter<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> DoubleEndedIterator for IntoIter<T> {\n     #[inline]\n-    fn next_back<'a>(&'a mut self) -> Option<T> {\n+    fn next_back(&mut self) -> Option<T> {\n         unsafe {\n             if self.end == self.ptr {\n                 None"}]}