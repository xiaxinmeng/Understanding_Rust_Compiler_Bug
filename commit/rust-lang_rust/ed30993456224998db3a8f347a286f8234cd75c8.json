{"sha": "ed30993456224998db3a8f347a286f8234cd75c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMzA5OTM0NTYyMjQ5OThkYjNhOGYzNDdhMjg2ZjgyMzRjZDc1Yzg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-27T12:43:22Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-29T14:00:48Z"}, "message": "Use the correct type for Enum variant tuples", "tree": {"sha": "bd303ca7aff52353e638bb38a11061c38e96be61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd303ca7aff52353e638bb38a11061c38e96be61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed30993456224998db3a8f347a286f8234cd75c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed30993456224998db3a8f347a286f8234cd75c8", "html_url": "https://github.com/rust-lang/rust/commit/ed30993456224998db3a8f347a286f8234cd75c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed30993456224998db3a8f347a286f8234cd75c8/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a6547cca6d2b2f465f01331927855734687b527", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6547cca6d2b2f465f01331927855734687b527", "html_url": "https://github.com/rust-lang/rust/commit/4a6547cca6d2b2f465f01331927855734687b527"}], "stats": {"total": 91, "additions": 62, "deletions": 29}, "files": [{"sha": "5b4a1a3d849b658099d7b9a8bb791e809951b497", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ed30993456224998db3a8f347a286f8234cd75c8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed30993456224998db3a8f347a286f8234cd75c8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ed30993456224998db3a8f347a286f8234cd75c8", "patch": "@@ -1703,12 +1703,28 @@ impl Clean<VariantStruct> for rustc_hir::VariantData<'_> {\n     }\n }\n \n+impl Clean<Vec<Item>> for hir::VariantData<'_> {\n+    fn clean(&self, cx: &mut DocContext<'_>) -> Vec<Item> {\n+        self.fields().iter().map(|x| x.clean(cx)).collect()\n+    }\n+}\n+\n impl Clean<Item> for ty::VariantDef {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n         let kind = match self.ctor_kind {\n             CtorKind::Const => Variant::CLike,\n             CtorKind::Fn => Variant::Tuple(\n-                self.fields.iter().map(|f| cx.tcx.type_of(f.did).clean(cx)).collect(),\n+                self.fields\n+                    .iter()\n+                    .map(|field| {\n+                        let name = Some(field.ident.name);\n+                        let kind = StructFieldItem(cx.tcx.type_of(field.did).clean(cx));\n+                        let what_rustc_thinks =\n+                            Item::from_def_id_and_parts(field.did, name, kind, cx);\n+                        // don't show `pub` for fields, which are always public\n+                        Item { visibility: Visibility::Inherited, ..what_rustc_thinks }\n+                    })\n+                    .collect(),\n             ),\n             CtorKind::Fictive => Variant::Struct(VariantStruct {\n                 struct_type: CtorKind::Fictive,\n@@ -1738,13 +1754,7 @@ impl Clean<Variant> for hir::VariantData<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Variant {\n         match self {\n             hir::VariantData::Struct(..) => Variant::Struct(self.clean(cx)),\n-            // Important note here: `Variant::Tuple` is used on tuple structs which are not in an\n-            // enum (so where converting from `ty::VariantDef`). In case we are in an enum, the kind\n-            // is provided by the `Variant` wrapper directly, and since we need the fields' name\n-            // (even for a tuple struct variant!), it's simpler to just store it as a\n-            // `Variant::Struct` instead of a `Variant::Tuple` (otherwise it would force us to make\n-            // a lot of changes when rendering them to generate the name as well).\n-            hir::VariantData::Tuple(..) => Variant::Struct(self.clean(cx)),\n+            hir::VariantData::Tuple(..) => Variant::Tuple(self.clean(cx)),\n             hir::VariantData::Unit(..) => Variant::CLike,\n         }\n     }"}, {"sha": "4194c99c0ba707ec197e797406816d32e5dc5bf8", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed30993456224998db3a8f347a286f8234cd75c8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed30993456224998db3a8f347a286f8234cd75c8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=ed30993456224998db3a8f347a286f8234cd75c8", "patch": "@@ -715,6 +715,7 @@ impl ItemKind {\n             StructItem(s) => s.fields.iter(),\n             UnionItem(u) => u.fields.iter(),\n             VariantItem(Variant::Struct(v)) => v.fields.iter(),\n+            VariantItem(Variant::Tuple(v)) => v.iter(),\n             EnumItem(e) => e.variants.iter(),\n             TraitItem(t) => t.items.iter(),\n             ImplItem(i) => i.items.iter(),\n@@ -1937,7 +1938,7 @@ crate struct Enum {\n #[derive(Clone, Debug)]\n crate enum Variant {\n     CLike,\n-    Tuple(Vec<Type>),\n+    Tuple(Vec<Item>),\n     Struct(VariantStruct),\n }\n "}, {"sha": "b4859e4c9c7fe2e10340f66df721dc7ef9214e3d", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed30993456224998db3a8f347a286f8234cd75c8/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed30993456224998db3a8f347a286f8234cd75c8/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=ed30993456224998db3a8f347a286f8234cd75c8", "patch": "@@ -56,6 +56,10 @@ crate trait DocFolder: Sized {\n                             || j.fields.iter().any(|f| f.is_stripped());\n                         VariantItem(Variant::Struct(j))\n                     }\n+                    Variant::Tuple(fields) => {\n+                        let fields = fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n+                        VariantItem(Variant::Tuple(fields))\n+                    }\n                     _ => VariantItem(i2),\n                 }\n             }"}, {"sha": "722cfc97a8d898e8047d2c7e906a2875c4076bf3", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ed30993456224998db3a8f347a286f8234cd75c8/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed30993456224998db3a8f347a286f8234cd75c8/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=ed30993456224998db3a8f347a286f8234cd75c8", "patch": "@@ -937,6 +937,19 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n     document_type_layout(w, cx, def_id);\n }\n \n+fn print_tuple_struct_fields(w: &mut Buffer, cx: &Context<'_>, s: &[clean::Item]) {\n+    for (i, ty) in s\n+        .iter()\n+        .map(|f| if let clean::StructFieldItem(ref ty) = *f.kind { ty } else { unreachable!() })\n+        .enumerate()\n+    {\n+        if i > 0 {\n+            w.write_str(\",&nbsp;\");\n+        }\n+        write!(w, \"{}\", ty.print(cx));\n+    }\n+}\n+\n fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum) {\n     wrap_into_docblock(w, |w| {\n         wrap_item(w, \"enum\", |w| {\n@@ -964,14 +977,9 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                     match *v.kind {\n                         clean::VariantItem(ref var) => match var {\n                             clean::Variant::CLike => write!(w, \"{}\", name),\n-                            clean::Variant::Tuple(ref tys) => {\n+                            clean::Variant::Tuple(ref s) => {\n                                 write!(w, \"{}(\", name);\n-                                for (i, ty) in tys.iter().enumerate() {\n-                                    if i > 0 {\n-                                        w.write_str(\",&nbsp;\")\n-                                    }\n-                                    write!(w, \"{}\", ty.print(cx));\n-                                }\n+                                print_tuple_struct_fields(w, cx, s);\n                                 w.write_str(\")\");\n                             }\n                             clean::Variant::Struct(ref s) => {\n@@ -1024,14 +1032,9 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 id = id,\n                 name = variant.name.as_ref().unwrap()\n             );\n-            if let clean::VariantItem(clean::Variant::Tuple(ref tys)) = *variant.kind {\n+            if let clean::VariantItem(clean::Variant::Tuple(ref s)) = *variant.kind {\n                 w.write_str(\"(\");\n-                for (i, ty) in tys.iter().enumerate() {\n-                    if i > 0 {\n-                        w.write_str(\",&nbsp;\");\n-                    }\n-                    write!(w, \"{}\", ty.print(cx));\n-                }\n+                print_tuple_struct_fields(w, cx, s);\n                 w.write_str(\")\");\n             }\n             w.write_str(\"</code>\");\n@@ -1041,7 +1044,11 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n             document_non_exhaustive(w, variant);\n \n             use crate::clean::Variant;\n-            if let clean::VariantItem(Variant::Struct(ref s)) = *variant.kind {\n+            if let Some((extra, fields)) = match *variant.kind {\n+                clean::VariantItem(Variant::Struct(ref s)) => Some((\"\", &s.fields)),\n+                clean::VariantItem(Variant::Tuple(ref fields)) => Some((\"Tuple \", fields)),\n+                _ => None,\n+            } {\n                 let variant_id = cx.derive_id(format!(\n                     \"{}.{}.fields\",\n                     ItemType::Variant,\n@@ -1051,10 +1058,10 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 write!(\n                     w,\n                     \"<h3>{extra}Fields of <b>{name}</b></h3><div>\",\n-                    extra = if s.struct_type == CtorKind::Fn { \"Tuple \" } else { \"\" },\n+                    extra = extra,\n                     name = variant.name.as_ref().unwrap(),\n                 );\n-                for field in &s.fields {\n+                for field in fields {\n                     use crate::clean::StructFieldItem;\n                     if let StructFieldItem(ref ty) = *field.kind {\n                         let id = cx.derive_id(format!("}, {"sha": "9453e6d35ee6796ce28f98d195bfabe7c36dfff5", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ed30993456224998db3a8f347a286f8234cd75c8/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed30993456224998db3a8f347a286f8234cd75c8/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=ed30993456224998db3a8f347a286f8234cd75c8", "patch": "@@ -569,7 +569,18 @@ impl FromWithTcx<clean::Variant> for Variant {\n         use clean::Variant::*;\n         match variant {\n             CLike => Variant::Plain,\n-            Tuple(t) => Variant::Tuple(t.into_iter().map(|x| x.into_tcx(tcx)).collect()),\n+            Tuple(fields) => Variant::Tuple(\n+                fields\n+                    .into_iter()\n+                    .map(|f| {\n+                        if let clean::StructFieldItem(ty) = *f.kind {\n+                            ty.into_tcx(tcx)\n+                        } else {\n+                            unreachable!()\n+                        }\n+                    })\n+                    .collect(),\n+            ),\n             Struct(s) => Variant::Struct(ids(s.fields)),\n         }\n     }"}, {"sha": "a717c53d9d3f71a4252b21457b46a6d509ddafed", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed30993456224998db3a8f347a286f8234cd75c8/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed30993456224998db3a8f347a286f8234cd75c8/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=ed30993456224998db3a8f347a286f8234cd75c8", "patch": "@@ -93,8 +93,8 @@ impl<'a> DocFolder for Stripper<'a> {\n \n             // implementations of traits are always public.\n             clean::ImplItem(ref imp) if imp.trait_.is_some() => true,\n-            // Struct variant fields have inherited visibility\n-            clean::VariantItem(clean::Variant::Struct(..)) => true,\n+            // Variant fields have inherited visibility\n+            clean::VariantItem(clean::Variant::Struct(..) | clean::Variant::Tuple(..)) => true,\n             _ => false,\n         };\n "}]}