{"sha": "9017f79282f1d745453a5117af25a3b477600a90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMTdmNzkyODJmMWQ3NDU0NTNhNTExN2FmMjVhM2I0Nzc2MDBhOTA=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-19T08:23:56Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-19T16:11:28Z"}, "message": "Generate a page for existential types", "tree": {"sha": "1b87872ec4697e655558e8d6be87784904c45a34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b87872ec4697e655558e8d6be87784904c45a34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9017f79282f1d745453a5117af25a3b477600a90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9017f79282f1d745453a5117af25a3b477600a90", "html_url": "https://github.com/rust-lang/rust/commit/9017f79282f1d745453a5117af25a3b477600a90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9017f79282f1d745453a5117af25a3b477600a90/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "442d5d83e29470ef07d29bd02f7974c7d99fae91", "url": "https://api.github.com/repos/rust-lang/rust/commits/442d5d83e29470ef07d29bd02f7974c7d99fae91", "html_url": "https://github.com/rust-lang/rust/commit/442d5d83e29470ef07d29bd02f7974c7d99fae91"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "ceb43a3729bd87a394be3d471f6601e7e3df39a3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9017f79282f1d745453a5117af25a3b477600a90/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9017f79282f1d745453a5117af25a3b477600a90/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=9017f79282f1d745453a5117af25a3b477600a90", "patch": "@@ -2103,6 +2103,7 @@ impl<'a> fmt::Display for Item<'a> {\n             clean::ConstantItem(..) => write!(fmt, \"Constant \")?,\n             clean::ForeignTypeItem => write!(fmt, \"Foreign Type \")?,\n             clean::KeywordItem(..) => write!(fmt, \"Keyword \")?,\n+            clean::ExistentialItem(..) => write!(fmt, \"Existential Type \")?,\n             _ => {\n                 // We don't generate pages for any other type.\n                 unreachable!();\n@@ -2167,6 +2168,7 @@ impl<'a> fmt::Display for Item<'a> {\n             clean::ConstantItem(ref c) => item_constant(fmt, self.cx, self.item, c),\n             clean::ForeignTypeItem => item_foreign_type(fmt, self.cx, self.item),\n             clean::KeywordItem(ref k) => item_keyword(fmt, self.cx, self.item, k),\n+            clean::ExistentialItem(ref e, _) => item_existential(fmt, self.cx, self.item, e),\n             _ => {\n                 // We don't generate pages for any other type.\n                 unreachable!();\n@@ -2685,18 +2687,17 @@ fn render_impls(cx: &Context, w: &mut fmt::Formatter,\n     Ok(())\n }\n \n-fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n-              t: &clean::Trait) -> fmt::Result {\n+fn bounds(t_bounds: &[clean::GenericBound]) -> String {\n     let mut bounds = String::new();\n     let mut bounds_plain = String::new();\n-    if !t.bounds.is_empty() {\n+    if !t_bounds.is_empty() {\n         if !bounds.is_empty() {\n             bounds.push(' ');\n             bounds_plain.push(' ');\n         }\n         bounds.push_str(\": \");\n         bounds_plain.push_str(\": \");\n-        for (i, p) in t.bounds.iter().enumerate() {\n+        for (i, p) in t_bounds.iter().enumerate() {\n             if i > 0 {\n                 bounds.push_str(\" + \");\n                 bounds_plain.push_str(\" + \");\n@@ -2705,7 +2706,16 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n             bounds_plain.push_str(&format!(\"{:#}\", *p));\n         }\n     }\n+    bounds\n+}\n \n+fn item_trait(\n+    w: &mut fmt::Formatter,\n+    cx: &Context,\n+    it: &clean::Item,\n+    t: &clean::Trait,\n+) -> fmt::Result {\n+    let bounds = bounds(&t.bounds);\n     let types = t.items.iter().filter(|m| m.is_associated_type()).collect::<Vec<_>>();\n     let consts = t.items.iter().filter(|m| m.is_associated_const()).collect::<Vec<_>>();\n     let required = t.items.iter().filter(|m| m.is_ty_method()).collect::<Vec<_>>();\n@@ -3905,6 +3915,29 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n     Ok(())\n }\n \n+fn item_existential(\n+    w: &mut fmt::Formatter,\n+    cx: &Context,\n+    it: &clean::Item,\n+    t: &clean::Existential,\n+) -> fmt::Result {\n+    write!(w, \"<pre class='rust existential'>\")?;\n+    render_attributes(w, it)?;\n+    write!(w, \"existential type {}{}{where_clause}: {bounds};</pre>\",\n+           it.name.as_ref().unwrap(),\n+           t.generics,\n+           where_clause = WhereClause { gens: &t.generics, indent: 0, end_newline: true },\n+           bounds = bounds(&t.bounds))?;\n+\n+    document(w, cx, it)?;\n+\n+    // Render any items associated directly to this alias, as otherwise they\n+    // won't be visible anywhere in the docs. It would be nice to also show\n+    // associated items from the aliased type (see discussion in #32077), but\n+    // we need #14072 to make sense of the generics.\n+    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n+}\n+\n fn item_typedef(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                 t: &clean::Typedef) -> fmt::Result {\n     write!(w, \"<pre class='rust typedef'>\")?;"}]}