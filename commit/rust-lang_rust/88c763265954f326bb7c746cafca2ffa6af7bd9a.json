{"sha": "88c763265954f326bb7c746cafca2ffa6af7bd9a", "node_id": "C_kwDOAAsO6NoAKDg4Yzc2MzI2NTk1NGYzMjZiYjdjNzQ2Y2FmY2EyZmZhNmFmN2JkOWE", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2023-05-05T15:23:10Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2023-05-05T15:29:35Z"}, "message": "Merge remote-tracking branch 'upstream/master' into rustup", "tree": {"sha": "90670548ba7821b9fc4fc16a791dec92e53b9d28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90670548ba7821b9fc4fc16a791dec92e53b9d28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88c763265954f326bb7c746cafca2ffa6af7bd9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmRVIN8ACgkQHKDfKvWd\naKVsvxAAzsUdhFqr8BpOw+ZQrqKXvHnDRO1Z0fd7Y1AqjwMnaMUDeDCJ7gwozIns\nuEwR3uRkaZYzPyDfycTwEfa0guEYKh7j18a9vh/QuhxOGzNnMdiN2k+4VsaAsurL\nEMx5mXpHbWE7DBCM+IvtQs1fqsE+5ZQKg2ki1uvt0R7a2EWA7YNC0/U8OsYGyEpD\nAYUnnAgd52xdKfVCYlFlE8wYei/AExSFVoW0O76ElRvxjQCrNN6D8XLs6WOvC+Me\n4sGmVyAQRu3eN+k4ECCQcrgm2Je0nRXKDsoCqkFQQ6C3LrE2062XNGBOn98gCSwe\nTOQ5edRTQ9zUeLPt9ce3wNSC5/8na3QKZZl4noLzJDUuJdDhExXv7Vz4ul+WUPxS\nKRcnJVJQBUSYs22vWPOWujsJtVWlB4b3zaOUkHfVgvCr1+yAY7PW9vdWcJ8YJOVP\nc3pAnF0Kq1UaqD7DAQTIDDJBrfJY9PivLEJDOfkfbjO4ZnmxSp4bXSPTcokq6hmA\neAbf0BUMmggiAagtrlDlM5tyJl1NJo9xfDqSaOfInBpKAQud6ZoZNvsd3OILWGwg\n/EAoqm2CRBMc81tTVhRnqrbuNhGu7FmTfmB+nzIso8yHbbqfcuV7vpVRbu4t38e2\nYat83E7LEAcKjizv20pOylsgcuapWzMG6qMByZQKWYP6czAYqow=\n=1yVr\n-----END PGP SIGNATURE-----", "payload": "tree 90670548ba7821b9fc4fc16a791dec92e53b9d28\nparent 8518391e72e46d0a7886f582145793332055ab90\nparent d7173e2599fd96364832c7599bd3edc31f15a914\nauthor Philipp Krones <hello@philkrones.com> 1683300190 +0200\ncommitter Philipp Krones <hello@philkrones.com> 1683300575 +0200\n\nMerge remote-tracking branch 'upstream/master' into rustup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88c763265954f326bb7c746cafca2ffa6af7bd9a", "html_url": "https://github.com/rust-lang/rust/commit/88c763265954f326bb7c746cafca2ffa6af7bd9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88c763265954f326bb7c746cafca2ffa6af7bd9a/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8518391e72e46d0a7886f582145793332055ab90", "url": "https://api.github.com/repos/rust-lang/rust/commits/8518391e72e46d0a7886f582145793332055ab90", "html_url": "https://github.com/rust-lang/rust/commit/8518391e72e46d0a7886f582145793332055ab90"}, {"sha": "d7173e2599fd96364832c7599bd3edc31f15a914", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7173e2599fd96364832c7599bd3edc31f15a914", "html_url": "https://github.com/rust-lang/rust/commit/d7173e2599fd96364832c7599bd3edc31f15a914"}], "stats": {"total": 2646, "additions": 2212, "deletions": 434}, "files": [{"sha": "0bc2f49f5e9b551edb1640ffbcc86a9f1de3483e", "filename": ".github/workflows/remark.yml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/.github%2Fworkflows%2Fremark.yml", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/.github%2Fworkflows%2Fremark.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fremark.yml?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -36,6 +36,12 @@ jobs:\n     - name: Check *.md files\n       run: git ls-files -z '*.md' | xargs -0 -n 1 -I {} ./node_modules/.bin/remark {} -u lint -f > /dev/null\n \n+    - name: Linkcheck book\n+      run: |\n+        rustup toolchain install nightly --component rust-docs\n+        curl https://raw.githubusercontent.com/rust-lang/rust/master/src/tools/linkchecker/linkcheck.sh -o linkcheck.sh\n+        sh linkcheck.sh clippy --path ./book\n+        \n     - name: Build mdbook\n       run: mdbook build book\n "}, {"sha": "ebf5b58a586992f4852d51892bb4c9cdb104f163", "filename": "CHANGELOG.md", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -44,7 +44,7 @@ Current stable, released 2023-04-20\n \n ### Enhancements\n \n-* [`arithmetic_side_effects`]: No longer lints, if safe constant values are used.\n+* [`arithmetic_side_effects`]: No longer lints if safe constant values are used.\n   [#10310](https://github.com/rust-lang/rust-clippy/pull/10310)\n * [`needless_lifetimes`]: Now works in local macros\n   [#10257](https://github.com/rust-lang/rust-clippy/pull/10257)\n@@ -60,39 +60,39 @@ Current stable, released 2023-04-20\n \n ### False Positive Fixes\n \n-* [`explicit_auto_deref`]: Now considers projections, when determining if auto deref is applicable\n+* [`explicit_auto_deref`]: Now considers projections when determining if auto deref is applicable\n   [#10386](https://github.com/rust-lang/rust-clippy/pull/10386)\n-* [`manual_let_else`]: Now considers side effects of branches, before linting \n+* [`manual_let_else`]: Now considers side effects of branches before linting\n   [#10336](https://github.com/rust-lang/rust-clippy/pull/10336)\n * [`uninlined_format_args`]: No longer lints for arguments with generic parameters\n   [#10343](https://github.com/rust-lang/rust-clippy/pull/10343)\n-* [`needless_lifetimes`]: No longer lints signatures in macros, if the lifetime is a metavariable\n+* [`needless_lifetimes`]: No longer lints signatures in macros if the lifetime is a metavariable\n   [#10380](https://github.com/rust-lang/rust-clippy/pull/10380)\n-* [`len_without_is_empty`]: No longer lints, if `len` as a non-default signature\n+* [`len_without_is_empty`]: No longer lints if `len` as a non-default signature\n   [#10255](https://github.com/rust-lang/rust-clippy/pull/10255)\n-* [`unusual_byte_groupings`]: Relaxed the required restrictions for specific sizes, to reduce false\n+* [`unusual_byte_groupings`]: Relaxed the required restrictions for specific sizes to reduce false\n   positives\n   [#10353](https://github.com/rust-lang/rust-clippy/pull/10353)\n * [`manual_let_else`]: No longer lints `if-else` blocks if they can divergent\n   [#10332](https://github.com/rust-lang/rust-clippy/pull/10332)\n * [`expect_used`], [`unwrap_used`], [`dbg_macro`], [`print_stdout`], [`print_stderr`]: No longer lint\n-  in test functions, if `allow-expect-in-tests` is set\n+  in test functions if `allow-expect-in-tests` is set\n   [#10391](https://github.com/rust-lang/rust-clippy/pull/10391)\n * [`unnecessary_safety_comment`]: No longer lints code inside macros\n   [#10106](https://github.com/rust-lang/rust-clippy/pull/10106)\n-* [`never_loop`]: No longer lints, for statements following break statements for outer blocks.\n+* [`never_loop`]: No longer lints statements following break statements for outer blocks.\n   [#10311](https://github.com/rust-lang/rust-clippy/pull/10311)\n \n ### Suggestion Fixes/Improvements\n \n-* [`box_default`]: The suggestion now includes the type for trait objects, when needed\n+* [`box_default`]: The suggestion now includes the type for trait objects when needed\n   [#10382](https://github.com/rust-lang/rust-clippy/pull/10382)\n * [`cast_possible_truncation`]: Now suggests using `try_from` or allowing the lint\n   [#10038](https://github.com/rust-lang/rust-clippy/pull/10038)\n * [`invalid_regex`]: Regex errors for non-literals or regular strings containing escape sequences will\n   now show the complete error\n   [#10231](https://github.com/rust-lang/rust-clippy/pull/10231)\n-* [`transmutes_expressible_as_ptr_casts`]: The suggestion now works, if the base type is borrowed\n+* [`transmutes_expressible_as_ptr_casts`]: The suggestion now works if the base type is borrowed\n   [#10193](https://github.com/rust-lang/rust-clippy/pull/10193)\n * [`needless_return`]: Now removes all semicolons on the same line\n   [#10187](https://github.com/rust-lang/rust-clippy/pull/10187)\n@@ -113,7 +113,7 @@ Current stable, released 2023-04-20\n \n ### ICE Fixes\n \n-* [`needless_pass_by_value`]: Fixed an ICE, caused by how late bounds were handled\n+* [`needless_pass_by_value`]: Fixed an ICE caused by how late bounds were handled\n   [#10328](https://github.com/rust-lang/rust-clippy/pull/10328)\n * [`needless_borrow`]: No longer panics on ambiguous projections\n   [#10403](https://github.com/rust-lang/rust-clippy/pull/10403)\n@@ -4582,6 +4582,7 @@ Released 2018-09-13\n [`debug_assert_with_mut_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#debug_assert_with_mut_call\n [`decimal_literal_representation`]: https://rust-lang.github.io/rust-clippy/master/index.html#decimal_literal_representation\n [`declare_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#declare_interior_mutable_const\n+[`default_constructed_unit_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_constructed_unit_structs\n [`default_instead_of_iter_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_instead_of_iter_empty\n [`default_numeric_fallback`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback\n [`default_trait_access`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_trait_access\n@@ -4797,6 +4798,7 @@ Released 2018-09-13\n [`manual_strip`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip\n [`manual_swap`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_swap\n [`manual_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or\n+[`manual_while_let_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_while_let_some\n [`many_single_char_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names\n [`map_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n [`map_collect_result_unit`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_collect_result_unit\n@@ -4864,6 +4866,7 @@ Released 2018-09-13\n [`needless_arbitrary_self_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_arbitrary_self_type\n [`needless_bitwise_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_bitwise_bool\n [`needless_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool\n+[`needless_bool_assign`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool_assign\n [`needless_borrow`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n [`needless_borrowed_reference`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\n [`needless_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_collect"}, {"sha": "3c72bb62ed19e75625b871ac88893d66024835a4", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.70\"\n+version = \"0.1.71\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "6745e15c0065703166bfff84b42492bfc3f2d694", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -91,7 +91,8 @@ cargo clippy\n \n #### Automatically applying Clippy suggestions\n \n-Clippy can automatically apply some lint suggestions, just like the compiler.\n+Clippy can automatically apply some lint suggestions, just like the compiler. Note that `--fix` implies\n+`--all-targets`, so it can fix as much code as it can.\n \n ```terminal\n cargo clippy --fix"}, {"sha": "621fc20972ea11b46ffad9ba8378cd24e023acbe", "filename": "book/src/development/lint_passes.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/book%2Fsrc%2Fdevelopment%2Flint_passes.md", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/book%2Fsrc%2Fdevelopment%2Flint_passes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Flint_passes.md?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -50,7 +50,7 @@ questions already, but the parser is okay with it. This is what we\n mean when we say `EarlyLintPass` deals with only syntax on the AST level.\n \n Alternatively, think of the `foo_functions` lint we mentioned in\n-define new lints chapter.\n+define new lints <!-- FIXME: add link --> chapter.\n \n We want the `foo_functions` lint to detect functions with `foo` as their name.\n Writing a lint that only checks for the name of a function means that we only"}, {"sha": "285488cec55c2db4f5a47b0a2218a4b2059d9532", "filename": "book/src/development/proposals/syntax-tree-patterns.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -139,7 +139,7 @@ whether the pattern matched.\n \n ## Pattern syntax\n \n-The following examples demonstate the pattern syntax:\n+The following examples demonstrate the pattern syntax:\n \n \n #### Any (`_`)"}, {"sha": "5646c9b15208f268219e05063a480a3f33be368c", "filename": "book/src/lint_configuration.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/book%2Fsrc%2Flint_configuration.md", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/book%2Fsrc%2Flint_configuration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flint_configuration.md?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -13,6 +13,8 @@ Please use that command to update the file and do not edit it by hand.\n | [msrv](#msrv) | `None` |\n | [cognitive-complexity-threshold](#cognitive-complexity-threshold) | `25` |\n | [disallowed-names](#disallowed-names) | `[\"foo\", \"baz\", \"quux\"]` |\n+| [semicolon-inside-block-ignore-singleline](#semicolon-inside-block-ignore-singleline) | `false` |\n+| [semicolon-outside-block-ignore-multiline](#semicolon-outside-block-ignore-multiline) | `false` |\n | [doc-valid-idents](#doc-valid-idents) | `[\"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"DirectX\", \"ECMAScript\", \"GPLv2\", \"GPLv3\", \"GitHub\", \"GitLab\", \"IPv4\", \"IPv6\", \"ClojureScript\", \"CoffeeScript\", \"JavaScript\", \"PureScript\", \"TypeScript\", \"NaN\", \"NaNs\", \"OAuth\", \"GraphQL\", \"OCaml\", \"OpenGL\", \"OpenMP\", \"OpenSSH\", \"OpenSSL\", \"OpenStreetMap\", \"OpenDNS\", \"WebGL\", \"TensorFlow\", \"TrueType\", \"iOS\", \"macOS\", \"FreeBSD\", \"TeX\", \"LaTeX\", \"BibTeX\", \"BibLaTeX\", \"MinGW\", \"CamelCase\"]` |\n | [too-many-arguments-threshold](#too-many-arguments-threshold) | `7` |\n | [type-complexity-threshold](#type-complexity-threshold) | `250` |\n@@ -203,6 +205,22 @@ default configuration of Clippy. By default, any configuration will replace the\n * [disallowed_names](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names)\n \n \n+### semicolon-inside-block-ignore-singleline\n+Whether to lint only if it's multiline.\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [semicolon_inside_block](https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_inside_block)\n+\n+\n+### semicolon-outside-block-ignore-multiline\n+Whether to lint only if it's singleline.\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [semicolon_outside_block](https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_outside_block)\n+\n+\n ### doc-valid-idents\n The list of words this lint should not consider as identifiers needing ticks. The value\n `\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the"}, {"sha": "36448e4cccfa4650730adbc83136f0a9e1e7c9b4", "filename": "book/src/usage.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/book%2Fsrc%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/book%2Fsrc%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fusage.md?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -111,7 +111,8 @@ fn main() {\n \n ### Automatically applying Clippy suggestions\n \n-Clippy can automatically apply some lint suggestions, just like the compiler.\n+Clippy can automatically apply some lint suggestions, just like the compiler. Note that `--fix` implies\n+`--all-targets`, so it can fix as much code as it can.\n \n ```terminal\n cargo clippy --fix"}, {"sha": "a0d57f5ab483fc37737f0127ebde954e47f2f5d8", "filename": "clippy_dev/src/dogfood.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_dev%2Fsrc%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_dev%2Fsrc%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fdogfood.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,4 +1,4 @@\n-use crate::clippy_project_root;\n+use crate::{clippy_project_root, exit_if_err};\n use std::process::Command;\n \n /// # Panics\n@@ -10,7 +10,7 @@ pub fn dogfood(fix: bool, allow_dirty: bool, allow_staged: bool) {\n     cmd.current_dir(clippy_project_root())\n         .args([\"test\", \"--test\", \"dogfood\"])\n         .args([\"--features\", \"internal\"])\n-        .args([\"--\", \"dogfood_clippy\"]);\n+        .args([\"--\", \"dogfood_clippy\", \"--nocapture\"]);\n \n     let mut dogfood_args = Vec::new();\n     if fix {\n@@ -27,7 +27,5 @@ pub fn dogfood(fix: bool, allow_dirty: bool, allow_staged: bool) {\n \n     cmd.env(\"__CLIPPY_DOGFOOD_ARGS\", dogfood_args.join(\" \"));\n \n-    let output = cmd.output().expect(\"failed to run command\");\n-\n-    println!(\"{}\", String::from_utf8_lossy(&output.stdout));\n+    exit_if_err(cmd.status());\n }"}, {"sha": "56a269288c0536f030ca7f6fd99c386db4a9bcd4", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -10,7 +10,9 @@\n extern crate rustc_driver;\n extern crate rustc_lexer;\n \n+use std::io;\n use std::path::PathBuf;\n+use std::process::{self, ExitStatus};\n \n pub mod bless;\n pub mod dogfood;\n@@ -58,3 +60,14 @@ pub fn clippy_project_root() -> PathBuf {\n     }\n     panic!(\"error: Can't determine root of project. Please run inside a Clippy working dir.\");\n }\n+\n+pub fn exit_if_err(status: io::Result<ExitStatus>) {\n+    match status.expect(\"failed to run command\").code() {\n+        Some(0) => {},\n+        Some(n) => process::exit(n),\n+        None => {\n+            eprintln!(\"Killed by signal\");\n+            process::exit(1);\n+        },\n+    }\n+}"}, {"sha": "a19be1bca6c3d8bf996ae6576b3f29e1a4ac57f9", "filename": "clippy_dev/src/lint.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_dev%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_dev%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flint.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,17 +1,6 @@\n-use crate::cargo_clippy_path;\n-use std::process::{self, Command, ExitStatus};\n-use std::{fs, io};\n-\n-fn exit_if_err(status: io::Result<ExitStatus>) {\n-    match status.expect(\"failed to run command\").code() {\n-        Some(0) => {},\n-        Some(n) => process::exit(n),\n-        None => {\n-            eprintln!(\"Killed by signal\");\n-            process::exit(1);\n-        },\n-    }\n-}\n+use crate::{cargo_clippy_path, exit_if_err};\n+use std::fs;\n+use std::process::{self, Command};\n \n pub fn run<'a>(path: &str, args: impl Iterator<Item = &'a String>) {\n     let is_file = match fs::metadata(path) {"}, {"sha": "7213c9dfede993bae6ee40b48ce845a0db3bb708", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -36,60 +36,6 @@ pub enum UpdateMode {\n pub fn update(update_mode: UpdateMode) {\n     let (lints, deprecated_lints, renamed_lints) = gather_all();\n     generate_lint_files(update_mode, &lints, &deprecated_lints, &renamed_lints);\n-    remove_old_files(update_mode);\n-}\n-\n-/// Remove files no longer needed after <https://github.com/rust-lang/rust-clippy/pull/9541>\n-/// that may be reintroduced unintentionally\n-///\n-/// FIXME: This is a temporary measure that should be removed when there are no more PRs that\n-/// include the stray files\n-fn remove_old_files(update_mode: UpdateMode) {\n-    let mut failed = false;\n-    let mut remove_file = |path: &Path| match update_mode {\n-        UpdateMode::Check => {\n-            if path.exists() {\n-                failed = true;\n-                println!(\"unexpected file: {}\", path.display());\n-            }\n-        },\n-        UpdateMode::Change => {\n-            if fs::remove_file(path).is_ok() {\n-                println!(\"removed file: {}\", path.display());\n-            }\n-        },\n-    };\n-\n-    let files = [\n-        \"clippy_lints/src/lib.register_all.rs\",\n-        \"clippy_lints/src/lib.register_cargo.rs\",\n-        \"clippy_lints/src/lib.register_complexity.rs\",\n-        \"clippy_lints/src/lib.register_correctness.rs\",\n-        \"clippy_lints/src/lib.register_internal.rs\",\n-        \"clippy_lints/src/lib.register_lints.rs\",\n-        \"clippy_lints/src/lib.register_nursery.rs\",\n-        \"clippy_lints/src/lib.register_pedantic.rs\",\n-        \"clippy_lints/src/lib.register_perf.rs\",\n-        \"clippy_lints/src/lib.register_restriction.rs\",\n-        \"clippy_lints/src/lib.register_style.rs\",\n-        \"clippy_lints/src/lib.register_suspicious.rs\",\n-        \"src/docs.rs\",\n-    ];\n-\n-    for file in files {\n-        remove_file(Path::new(file));\n-    }\n-\n-    if let Ok(docs_dir) = fs::read_dir(\"src/docs\") {\n-        for doc_file in docs_dir {\n-            let path = doc_file.unwrap().path();\n-            remove_file(&path);\n-        }\n-    }\n-\n-    if failed {\n-        exit_with_failure();\n-    }\n }\n \n fn generate_lint_files("}, {"sha": "a0db69b652db0adf7da2157a4f8a335c5a65e5f1", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.70\"\n+version = \"0.1.71\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\"\n@@ -20,7 +20,7 @@ quine-mc_cluskey = \"0.2\"\n regex-syntax = \"0.6\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = { version = \"1.0\", optional = true }\n-tempfile = { version = \"3.2\", optional = true }\n+tempfile = { version = \"3.3.0\", optional = true }\n toml = \"0.5\"\n unicode-normalization = \"0.1\"\n unicode-script = { version = \"0.5\", default-features = false }"}, {"sha": "add73d0aeeed38053b76275b1226e1b6791235e2", "filename": "clippy_lints/src/allow_attributes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fallow_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fallow_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fallow_attributes.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -2,7 +2,8 @@ use ast::AttrStyle;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use rustc_ast as ast;\n use rustc_errors::Applicability;\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -51,6 +52,7 @@ impl LateLintPass<'_> for AllowAttribute {\n     // Separate each crate's features.\n     fn check_attribute(&mut self, cx: &LateContext<'_>, attr: &ast::Attribute) {\n         if_chain! {\n+            if !in_external_macro(cx.sess(), attr.span);\n             if cx.tcx.features().lint_reasons;\n             if let AttrStyle::Outer = attr.style;\n             if let Some(ident) = attr.ident();"}, {"sha": "569bf27c3e716e13e3802e7e4cd6fe8bab627135", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -85,8 +85,7 @@ impl<'tcx> LateLintPass<'tcx> for BlocksInIfConditions {\n                             );\n                         }\n                     } else {\n-                        let span =\n-                            block.expr.as_ref().map_or_else(|| block.stmts[0].span, |e| e.span);\n+                        let span = block.expr.as_ref().map_or_else(|| block.stmts[0].span, |e| e.span);\n                         if span.from_expansion() || expr.span.from_expansion() {\n                             return;\n                         }"}, {"sha": "cfeb75eed3bb99c08abef65c8e7e9f2f6faea4d3", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -638,7 +638,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.66.0\"]\n     pub AS_PTR_CAST_MUT,\n     nursery,\n-    \"casting the result of the `&self`-taking `as_ptr` to a mutabe pointer\"\n+    \"casting the result of the `&self`-taking `as_ptr` to a mutable pointer\"\n }\n \n declare_clippy_lint! {"}, {"sha": "804ae841100a5088459a088b97a9aed0d19cc13a", "filename": "clippy_lints/src/casts/unnecessary_cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -141,9 +141,9 @@ fn lint_unnecessary_cast(\n \n fn get_numeric_literal<'e>(expr: &'e Expr<'e>) -> Option<&'e Lit> {\n     match expr.kind {\n-        ExprKind::Lit(ref lit) => Some(lit),\n+        ExprKind::Lit(lit) => Some(lit),\n         ExprKind::Unary(UnOp::Neg, e) => {\n-            if let ExprKind::Lit(ref lit) = e.kind {\n+            if let ExprKind::Lit(lit) = e.kind {\n                 Some(lit)\n             } else {\n                 None"}, {"sha": "1c321f46e2da4fcd8d77bd82f9020b9f17538a14", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -591,7 +591,7 @@ fn lint_same_cond(cx: &LateContext<'_>, conds: &[&Expr<'_>], ignored_ty_ids: &De\n         conds,\n         |e| hash_expr(cx, e),\n         |lhs, rhs| {\n-            // Ignore eq_expr side effects iff one of the expressin kind is a method call\n+            // Ignore eq_expr side effects iff one of the expression kind is a method call\n             // and the caller is not a mutable, including inner mutable type.\n             if let ExprKind::MethodCall(_, caller, _, _) = lhs.kind {\n                 if method_caller_is_mutable(cx, caller, ignored_ty_ids) {"}, {"sha": "79d0f6f3607932225a93a5ca8d7e8fd745b47727", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -105,6 +105,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::dbg_macro::DBG_MACRO_INFO,\n     crate::default::DEFAULT_TRAIT_ACCESS_INFO,\n     crate::default::FIELD_REASSIGN_WITH_DEFAULT_INFO,\n+    crate::default_constructed_unit_structs::DEFAULT_CONSTRUCTED_UNIT_STRUCTS_INFO,\n     crate::default_instead_of_iter_empty::DEFAULT_INSTEAD_OF_ITER_EMPTY_INFO,\n     crate::default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK_INFO,\n     crate::default_union_representation::DEFAULT_UNION_REPRESENTATION_INFO,\n@@ -249,6 +250,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::loops::MANUAL_FIND_INFO,\n     crate::loops::MANUAL_FLATTEN_INFO,\n     crate::loops::MANUAL_MEMCPY_INFO,\n+    crate::loops::MANUAL_WHILE_LET_SOME_INFO,\n     crate::loops::MISSING_SPIN_LOOP_INFO,\n     crate::loops::MUT_RANGE_BOUND_INFO,\n     crate::loops::NEEDLESS_RANGE_LOOP_INFO,\n@@ -445,6 +447,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE_INFO,\n     crate::needless_bool::BOOL_COMPARISON_INFO,\n     crate::needless_bool::NEEDLESS_BOOL_INFO,\n+    crate::needless_bool::NEEDLESS_BOOL_ASSIGN_INFO,\n     crate::needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE_INFO,\n     crate::needless_continue::NEEDLESS_CONTINUE_INFO,\n     crate::needless_for_each::NEEDLESS_FOR_EACH_INFO,"}, {"sha": "e529d81a7e9f38717e225d547b0b556d30c83667", "filename": "clippy_lints/src/default_constructed_unit_structs.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,72 @@\n+use clippy_utils::{diagnostics::span_lint_and_sugg, is_from_proc_macro, match_def_path, paths};\n+use hir::{def::Res, ExprKind};\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Check for construction on unit struct using `default`.\n+    ///\n+    /// ### Why is this bad?\n+    /// This adds code complexity and an unnecessary function call.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # use std::marker::PhantomData;\n+    /// #[derive(Default)]\n+    /// struct S<T> {\n+    ///     _marker: PhantomData<T>\n+    /// }\n+    ///\n+    /// let _: S<i32> = S {\n+    ///     _marker: PhantomData::default()\n+    /// };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::marker::PhantomData;\n+    /// struct S<T> {\n+    ///     _marker: PhantomData<T>\n+    /// }\n+    ///\n+    /// let _: S<i32> = S {\n+    ///     _marker: PhantomData\n+    /// };\n+    /// ```\n+    #[clippy::version = \"1.71.0\"]\n+    pub DEFAULT_CONSTRUCTED_UNIT_STRUCTS,\n+    complexity,\n+    \"unit structs can be contructed without calling `default`\"\n+}\n+declare_lint_pass!(DefaultConstructedUnitStructs => [DEFAULT_CONSTRUCTED_UNIT_STRUCTS]);\n+\n+impl LateLintPass<'_> for DefaultConstructedUnitStructs {\n+    fn check_expr<'tcx>(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n+        if_chain!(\n+            // make sure we have a call to `Default::default`\n+            if let hir::ExprKind::Call(fn_expr, &[]) = expr.kind;\n+            if let ExprKind::Path(ref qpath@ hir::QPath::TypeRelative(_,_)) = fn_expr.kind;\n+            if let Res::Def(_, def_id) = cx.qpath_res(qpath, fn_expr.hir_id);\n+            if match_def_path(cx, def_id, &paths::DEFAULT_TRAIT_METHOD);\n+            // make sure we have a struct with no fields (unit struct)\n+            if let ty::Adt(def, ..) = cx.typeck_results().expr_ty(expr).kind();\n+            if def.is_struct();\n+            if let var @ ty::VariantDef { ctor: Some((hir::def::CtorKind::Const, _)), .. } = def.non_enum_variant();\n+            if !var.is_field_list_non_exhaustive() && !is_from_proc_macro(cx, expr);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    DEFAULT_CONSTRUCTED_UNIT_STRUCTS,\n+                    expr.span.with_lo(qpath.qself_span().hi()),\n+                    \"use of `default` to create a unit struct\",\n+                    \"remove this call to `default`\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                )\n+            }\n+        );\n+    }\n+}"}, {"sha": "a51a8ee09f6e562f4ec255fab0bc877f610bb9bf", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -92,10 +92,8 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n                     if trait_item.id.owner_id.def_id == fn_def_id {\n                         // be sure we have `self` parameter in this function\n                         if trait_item.kind == (AssocItemKind::Fn { has_self: true }) {\n-                            trait_self_ty = Some(\n-                                TraitRef::identity(cx.tcx, trait_item.id.owner_id.to_def_id())\n-                                    .self_ty(),\n-                            );\n+                            trait_self_ty =\n+                                Some(TraitRef::identity(cx.tcx, trait_item.id.owner_id.to_def_id()).self_ty());\n                         }\n                     }\n                 }"}, {"sha": "93bf50fd5e79547469894c380a4e619531934aee", "filename": "clippy_lints/src/float_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatLiteral {\n         let ty = cx.typeck_results().expr_ty(expr);\n         if_chain! {\n             if let ty::Float(fty) = *ty.kind();\n-            if let hir::ExprKind::Lit(ref lit) = expr.kind;\n+            if let hir::ExprKind::Lit(lit) = expr.kind;\n             if let LitKind::Float(sym, lit_float_ty) = lit.node;\n             then {\n                 let sym_str = sym.as_str();"}, {"sha": "a1a2c398a8a0262eecb1f114d019bf0ae760b96c", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -2,9 +2,10 @@ use clippy_utils::consts::{\n     constant, constant_simple, Constant,\n     Constant::{Int, F32, F64},\n };\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::higher;\n-use clippy_utils::{eq_expr_value, get_parent_expr, in_constant, numeric_literal, peel_blocks, sugg};\n+use clippy_utils::{\n+    diagnostics::span_lint_and_sugg, eq_expr_value, get_parent_expr, higher, in_constant, is_no_std_crate,\n+    numeric_literal, peel_blocks, sugg,\n+};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, PathSegment, UnOp};\n@@ -677,7 +678,7 @@ fn check_radians(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             {\n                 let mut proposal = format!(\"{}.to_degrees()\", Sugg::hir(cx, mul_lhs, \"..\").maybe_par());\n                 if_chain! {\n-                    if let ExprKind::Lit(ref literal) = mul_lhs.kind;\n+                    if let ExprKind::Lit(literal) = mul_lhs.kind;\n                     if let ast::LitKind::Float(ref value, float_type) = literal.node;\n                     if float_type == ast::LitFloatType::Unsuffixed;\n                     then {\n@@ -703,7 +704,7 @@ fn check_radians(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             {\n                 let mut proposal = format!(\"{}.to_radians()\", Sugg::hir(cx, mul_lhs, \"..\").maybe_par());\n                 if_chain! {\n-                    if let ExprKind::Lit(ref literal) = mul_lhs.kind;\n+                    if let ExprKind::Lit(literal) = mul_lhs.kind;\n                     if let ast::LitKind::Float(ref value, float_type) = literal.node;\n                     if float_type == ast::LitFloatType::Unsuffixed;\n                     then {\n@@ -730,15 +731,15 @@ fn check_radians(cx: &LateContext<'_>, expr: &Expr<'_>) {\n \n impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        // All of these operations are currently not const.\n+        // All of these operations are currently not const and are in std.\n         if in_constant(cx, expr.hir_id) {\n             return;\n         }\n \n         if let ExprKind::MethodCall(path, receiver, args, _) = &expr.kind {\n             let recv_ty = cx.typeck_results().expr_ty(receiver);\n \n-            if recv_ty.is_floating_point() {\n+            if recv_ty.is_floating_point() && !is_no_std_crate(cx) {\n                 match path.ident.name.as_str() {\n                     \"ln\" => check_ln1p(cx, expr, receiver),\n                     \"log\" => check_log_base(cx, expr, receiver, args),\n@@ -749,10 +750,12 @@ impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n                 }\n             }\n         } else {\n-            check_expm1(cx, expr);\n-            check_mul_add(cx, expr);\n-            check_custom_abs(cx, expr);\n-            check_log_division(cx, expr);\n+            if !is_no_std_crate(cx) {\n+                check_expm1(cx, expr);\n+                check_mul_add(cx, expr);\n+                check_custom_abs(cx, expr);\n+                check_log_division(cx, expr);\n+            }\n             check_radians(cx, expr);\n         }\n     }"}, {"sha": "10ce2a0f0c7ecd3ed24ed5b9b6749186b33726ec", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -94,7 +94,7 @@ impl<'tcx> LateLintPass<'tcx> for FromOverInto {\n                         );\n                     }\n \n-                    let message = format!(\"replace the `Into` implentation with `From<{}>`\", middle_trait_ref.self_ty());\n+                    let message = format!(\"replace the `Into` implementation with `From<{}>`\", middle_trait_ref.self_ty());\n                     if let Some(suggestions) = convert_to_from(cx, into_trait_seg, target_ty, self_ty, impl_item_ref) {\n                         diag.multipart_suggestion(message, suggestions, Applicability::MachineApplicable);\n                     } else {"}, {"sha": "b244b91331436429a365c474653a303a37cd2454", "filename": "clippy_lints/src/functions/misnamed_getters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -40,7 +40,7 @@ pub fn check_fn(cx: &LateContext<'_>, kind: FnKind<'_>, decl: &FnDecl<'_>, body:\n     };\n \n     // Body must be &(mut) <self_data>.name\n-    // self_data is not neccessarilly self, to also lint sub-getters, etc\u2026\n+    // self_data is not necessarily self, to also lint sub-getters, etc\u2026\n \n     let block_expr = if_chain! {\n         if let ExprKind::Block(block,_) = body.value.kind;"}, {"sha": "ee10334c67f139ddfb2053f689531e5f2da6acd2", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -252,6 +252,11 @@ declare_clippy_lint! {\n     /// A `Result` is at least as large as the `Err`-variant. While we\n     /// expect that variant to be seldomly used, the compiler needs to reserve\n     /// and move that much memory every single time.\n+    /// Furthermore, errors are often simply passed up the call-stack, making\n+    /// use of the `?`-operator and its type-conversion mechanics. If the\n+    /// `Err`-variant further up the call-stack stores the `Err`-variant in\n+    /// question (as library code often does), it itself needs to be at least\n+    /// as large, propagating the problem.\n     ///\n     /// ### Known problems\n     /// The size determined by Clippy is platform-dependent.\n@@ -330,7 +335,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Lints when `impl Trait` is being used in a function's paremeters.\n+    /// Lints when `impl Trait` is being used in a function's parameters.\n     /// ### Why is this bad?\n     /// Turbofish syntax (`::<>`) cannot be used when `impl Trait` is being used, making `impl Trait` less powerful. Readability may also be a factor.\n     ///"}, {"sha": "012aa5a1d1daf862b281d86d1c8f581ec0d52422", "filename": "clippy_lints/src/implicit_saturating_add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fimplicit_saturating_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fimplicit_saturating_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_add.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -60,7 +60,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingAdd {\n             if expr1.span.ctxt() == ctxt;\n             if clippy_utils::SpanlessEq::new(cx).eq_expr(l, target);\n             if BinOpKind::Add == op1.node;\n-            if let ExprKind::Lit(ref lit) = value.kind;\n+            if let ExprKind::Lit(lit) = value.kind;\n             if let LitKind::Int(1, LitIntType::Unsuffixed) = lit.node;\n             if block.expr.is_none();\n             then {"}, {"sha": "1e99b6faa6ca5025fde771cf9342d68b05dafe13", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                 // Get the variable name\n                 let var_name = ares_path.segments[0].ident.name.as_str();\n                 match cond_num_val.kind {\n-                    ExprKind::Lit(ref cond_lit) => {\n+                    ExprKind::Lit(cond_lit) => {\n                         // Check if the constant is zero\n                         if let LitKind::Int(0, _) = cond_lit.node {\n                             if cx.typeck_results().expr_ty(cond_left).is_signed() {"}, {"sha": "924a361c0f6a8801bad390ef18906ca6482e582b", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -170,7 +170,7 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n                         return;\n                     }\n                     // Index is a constant uint.\n-                    if let Some(..) = constant(cx, cx.typeck_results(), index) {\n+                    if constant(cx, cx.typeck_results(), index).is_some() {\n                         // Let rustc's `const_err` lint handle constant `usize` indexing on arrays.\n                         return;\n                     }"}, {"sha": "b992d689aa979107b37dfdd4c8a1b276c31f40ca", "filename": "clippy_lints/src/items_after_test_module.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fitems_after_test_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fitems_after_test_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_test_module.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -64,20 +64,21 @@ impl LateLintPass<'_> for ItemsAfterTestModule {\n                 span_lint_and_help(cx, ITEMS_AFTER_TEST_MODULE, test_mod_span.unwrap().with_hi(item.span.hi()), \"items were found after the testing module\", None, \"move the items to before the testing module was defined\");\n             }};\n \n-            if matches!(item.kind, ItemKind::Mod(_)) {\n-                for attr in cx.tcx.get_attrs(item.owner_id.to_def_id(), sym::cfg) {\n-                    if_chain! {\n-                        if attr.has_name(sym::cfg);\n+            if let ItemKind::Mod(module) = item.kind && item.span.hi() == module.spans.inner_span.hi() {\n+\t\t\t// Check that it works the same way, the only I way I've found for #10713\n+\t\t\t\tfor attr in cx.tcx.get_attrs(item.owner_id.to_def_id(), sym::cfg) {\n+\t\t\t\t\tif_chain! {\n+\t\t\t\t\t\tif attr.has_name(sym::cfg);\n                         if let Some(mitems) = attr.meta_item_list();\n                         if let [mitem] = &*mitems;\n                         if mitem.has_name(sym::test);\n                         then {\n-                            was_test_mod_visited = true;\n+\t\t\t\t\t\t\twas_test_mod_visited = true;\n                             test_mod_span = Some(item.span);\n                         }\n                     }\n                 }\n-            }\n+\t\t\t}\n         }\n     }\n }"}, {"sha": "0ca31033b169b712d2ba524813f50196fc021210", "filename": "clippy_lints/src/large_futures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Flarge_futures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Flarge_futures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_futures.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -11,7 +11,7 @@ declare_clippy_lint! {\n     /// It checks for the size of a `Future` created by `async fn` or `async {}`.\n     ///\n     /// ### Why is this bad?\n-    /// Due to the current [unideal implemention](https://github.com/rust-lang/rust/issues/69826) of `Generator`,\n+    /// Due to the current [unideal implementation](https://github.com/rust-lang/rust/issues/69826) of `Generator`,\n     /// large size of a `Future` may cause stack overflows.\n     ///\n     /// ### Example"}, {"sha": "17bd89efaee03e2b58d0e0c3063ed2974ea1177f", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -532,7 +532,7 @@ fn check_empty_expr(cx: &LateContext<'_>, span: Span, lit1: &Expr<'_>, lit2: &Ex\n }\n \n fn is_empty_string(expr: &Expr<'_>) -> bool {\n-    if let ExprKind::Lit(ref lit) = expr.kind {\n+    if let ExprKind::Lit(lit) = expr.kind {\n         if let LitKind::Str(lit, _) = lit.node {\n             let lit = lit.as_str();\n             return lit.is_empty();"}, {"sha": "16772a9d5987b619321f2f13f351308b8dd633a8", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -6,6 +6,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{BytePos, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -205,8 +206,13 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                     LET_UNDERSCORE_UNTYPED,\n                     local.span,\n                     \"non-binding `let` without a type annotation\",\n-                    None,\n-                    \"consider adding a type annotation or removing the `let` keyword\",\n+                    Some(\n+\t\t\t\t\t\tSpan::new(local.pat.span.hi(),\n+\t\t\t\t\t\tlocal.pat.span.hi() + BytePos(1),\n+\t\t\t\t\t\tlocal.pat.span.ctxt(),\n+\t\t\t\t\t\tlocal.pat.span.parent()\n+\t\t\t\t\t)),\n+                    \"consider adding a type annotation\",\n                 );\n             }\n         }"}, {"sha": "3517842a01e7bb8104038977bb288ab8f0ceeb36", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -94,6 +94,7 @@ mod crate_in_macro_def;\n mod create_dir;\n mod dbg_macro;\n mod default;\n+mod default_constructed_unit_structs;\n mod default_instead_of_iter_empty;\n mod default_numeric_fallback;\n mod default_union_representation;\n@@ -933,7 +934,14 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(from_raw_with_void_ptr::FromRawWithVoidPtr));\n     store.register_late_pass(|_| Box::new(suspicious_xor_used_as_pow::ConfusingXorAndPow));\n     store.register_late_pass(move |_| Box::new(manual_is_ascii_check::ManualIsAsciiCheck::new(msrv())));\n-    store.register_late_pass(|_| Box::new(semicolon_block::SemicolonBlock));\n+    let semicolon_inside_block_ignore_singleline = conf.semicolon_inside_block_ignore_singleline;\n+    let semicolon_outside_block_ignore_multiline = conf.semicolon_outside_block_ignore_multiline;\n+    store.register_late_pass(move |_| {\n+        Box::new(semicolon_block::SemicolonBlock::new(\n+            semicolon_inside_block_ignore_singleline,\n+            semicolon_outside_block_ignore_multiline,\n+        ))\n+    });\n     store.register_late_pass(|_| Box::new(fn_null_check::FnNullCheck));\n     store.register_late_pass(|_| Box::new(permissions_set_readonly_false::PermissionsSetReadonlyFalse));\n     store.register_late_pass(|_| Box::new(size_of_ref::SizeOfRef));\n@@ -963,6 +971,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(manual_slice_size_calculation::ManualSliceSizeCalculation));\n     store.register_early_pass(|| Box::new(suspicious_doc_comments::SuspiciousDocComments));\n     store.register_late_pass(|_| Box::new(items_after_test_module::ItemsAfterTestModule));\n+    store.register_late_pass(|_| Box::new(default_constructed_unit_structs::DefaultConstructedUnitStructs));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "d4c3f76b864172d7eb54e5640e3ab5d365d84afe", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -15,7 +15,7 @@ use rustc_span::symbol::sym;\n use std::fmt::Display;\n use std::iter::Iterator;\n \n-/// Checks for for loops that sequentially copy items from one slice-like\n+/// Checks for `for` loops that sequentially copy items from one slice-like\n /// object to another.\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,"}, {"sha": "cb9c84be4c7a695fbd481f088cc218b4db4dece0", "filename": "clippy_lints/src/loops/manual_while_let_some.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Floops%2Fmanual_while_let_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Floops%2Fmanual_while_let_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_while_let_some.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,110 @@\n+use clippy_utils::{\n+    diagnostics::{multispan_sugg_with_applicability, span_lint_and_then},\n+    match_def_path, paths,\n+    source::snippet,\n+    SpanlessEq,\n+};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, Pat, Stmt, StmtKind, UnOp};\n+use rustc_lint::LateContext;\n+use rustc_span::Span;\n+use std::borrow::Cow;\n+\n+use super::MANUAL_WHILE_LET_SOME;\n+\n+/// The kind of statement that the `pop()` call appeared in.\n+///\n+/// Depending on whether the value was assigned to a variable or not changes what pattern\n+/// we use for the suggestion.\n+#[derive(Copy, Clone)]\n+enum PopStmt<'hir> {\n+    /// `x.pop().unwrap()` was and assigned to a variable.\n+    /// The pattern of this local variable will be used and the local statement\n+    /// is deleted in the suggestion.\n+    Local(&'hir Pat<'hir>),\n+    /// `x.pop().unwrap()` appeared in an arbitrary expression and was not assigned to a variable.\n+    /// The suggestion will use some placeholder identifier and the `x.pop().unwrap()` expression\n+    /// is replaced with that identifier.\n+    Anonymous,\n+}\n+\n+fn report_lint(cx: &LateContext<'_>, pop_span: Span, pop_stmt_kind: PopStmt<'_>, loop_span: Span, receiver_span: Span) {\n+    span_lint_and_then(\n+        cx,\n+        MANUAL_WHILE_LET_SOME,\n+        pop_span,\n+        \"you seem to be trying to pop elements from a `Vec` in a loop\",\n+        |diag| {\n+            let (pat, pop_replacement) = match pop_stmt_kind {\n+                PopStmt::Local(pat) => (snippet(cx, pat.span, \"..\"), String::new()),\n+                PopStmt::Anonymous => (Cow::Borrowed(\"element\"), \"element\".into()),\n+            };\n+\n+            let loop_replacement = format!(\"while let Some({}) = {}.pop()\", pat, snippet(cx, receiver_span, \"..\"));\n+            multispan_sugg_with_applicability(\n+                diag,\n+                \"consider using a `while..let` loop\",\n+                Applicability::MachineApplicable,\n+                [(loop_span, loop_replacement), (pop_span, pop_replacement)],\n+            );\n+        },\n+    );\n+}\n+\n+fn match_method_call(cx: &LateContext<'_>, expr: &Expr<'_>, method: &[&str]) -> bool {\n+    if let ExprKind::MethodCall(..) = expr.kind\n+        && let Some(id) = cx.typeck_results().type_dependent_def_id(expr.hir_id)\n+    {\n+        match_def_path(cx, id, method)\n+    } else {\n+        false\n+    }\n+}\n+\n+fn is_vec_pop_unwrap(cx: &LateContext<'_>, expr: &Expr<'_>, is_empty_recv: &Expr<'_>) -> bool {\n+    if (match_method_call(cx, expr, &paths::OPTION_UNWRAP) || match_method_call(cx, expr, &paths::OPTION_EXPECT))\n+        && let ExprKind::MethodCall(_, unwrap_recv, ..) = expr.kind\n+        && match_method_call(cx, unwrap_recv, &paths::VEC_POP)\n+        && let ExprKind::MethodCall(_, pop_recv, ..) = unwrap_recv.kind\n+    {\n+        // make sure they're the same `Vec`\n+        SpanlessEq::new(cx).eq_expr(pop_recv, is_empty_recv)\n+    } else {\n+        false\n+    }\n+}\n+\n+fn check_local(cx: &LateContext<'_>, stmt: &Stmt<'_>, is_empty_recv: &Expr<'_>, loop_span: Span) {\n+    if let StmtKind::Local(local) = stmt.kind\n+        && let Some(init) = local.init\n+        && is_vec_pop_unwrap(cx, init, is_empty_recv)\n+    {\n+        report_lint(cx, stmt.span, PopStmt::Local(local.pat), loop_span, is_empty_recv.span);\n+    }\n+}\n+\n+fn check_call_arguments(cx: &LateContext<'_>, stmt: &Stmt<'_>, is_empty_recv: &Expr<'_>, loop_span: Span) {\n+    if let StmtKind::Semi(expr) | StmtKind::Expr(expr) = stmt.kind {\n+        if let ExprKind::MethodCall(.., args, _) | ExprKind::Call(_, args) = expr.kind {\n+            let offending_arg = args\n+                .iter()\n+                .find_map(|arg| is_vec_pop_unwrap(cx, arg, is_empty_recv).then_some(arg.span));\n+\n+            if let Some(offending_arg) = offending_arg {\n+                report_lint(cx, offending_arg, PopStmt::Anonymous, loop_span, is_empty_recv.span);\n+            }\n+        }\n+    }\n+}\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, full_cond: &'tcx Expr<'_>, body: &'tcx Expr<'_>, loop_span: Span) {\n+    if let ExprKind::Unary(UnOp::Not, cond) = full_cond.kind\n+        && let ExprKind::MethodCall(_, is_empty_recv, _, _) = cond.kind\n+        && match_method_call(cx, cond, &paths::VEC_IS_EMPTY)\n+        && let ExprKind::Block(body, _) = body.kind\n+        && let Some(stmt) = body.stmts.first()\n+    {\n+        check_local(cx, stmt, is_empty_recv, loop_span);\n+        check_call_arguments(cx, stmt, is_empty_recv, loop_span);\n+    }\n+}"}, {"sha": "f83ad388a742fc4d5916f4bc216de4d4b6c1f724", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -7,6 +7,7 @@ mod iter_next_loop;\n mod manual_find;\n mod manual_flatten;\n mod manual_memcpy;\n+mod manual_while_let_some;\n mod missing_spin_loop;\n mod mut_range_bound;\n mod needless_range_loop;\n@@ -575,6 +576,36 @@ declare_clippy_lint! {\n     \"manual implementation of `Iterator::find`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Looks for loops that check for emptiness of a `Vec` in the condition and pop an element\n+    /// in the body as a separate operation.\n+    ///\n+    /// ### Why is this bad?\n+    /// Such loops can be written in a more idiomatic way by using a while-let loop and directly\n+    /// pattern matching on the return value of `Vec::pop()`.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let mut numbers = vec![1, 2, 3, 4, 5];\n+    /// while !numbers.is_empty() {\n+    ///     let number = numbers.pop().unwrap();\n+    ///     // use `number`\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let mut numbers = vec![1, 2, 3, 4, 5];\n+    /// while let Some(number) = numbers.pop() {\n+    ///     // use `number`\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.70.0\"]\n+    pub MANUAL_WHILE_LET_SOME,\n+    style,\n+    \"checking for emptiness of a `Vec` in the loop condition and popping an element in the body\"\n+}\n+\n declare_lint_pass!(Loops => [\n     MANUAL_MEMCPY,\n     MANUAL_FLATTEN,\n@@ -594,6 +625,7 @@ declare_lint_pass!(Loops => [\n     SINGLE_ELEMENT_LOOP,\n     MISSING_SPIN_LOOP,\n     MANUAL_FIND,\n+    MANUAL_WHILE_LET_SOME\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Loops {\n@@ -640,9 +672,10 @@ impl<'tcx> LateLintPass<'tcx> for Loops {\n \n         while_let_on_iterator::check(cx, expr);\n \n-        if let Some(higher::While { condition, body }) = higher::While::hir(expr) {\n+        if let Some(higher::While { condition, body, span }) = higher::While::hir(expr) {\n             while_immutable_condition::check(cx, condition, body);\n             missing_spin_loop::check(cx, condition, body);\n+            manual_while_let_some::check(cx, condition, body, span);\n         }\n     }\n }"}, {"sha": "cb446567506af142031b0085a7ad7e7281818903", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -208,7 +208,7 @@ fn is_end_eq_array_len<'tcx>(\n     indexed_ty: Ty<'tcx>,\n ) -> bool {\n     if_chain! {\n-        if let ExprKind::Lit(ref lit) = end.kind;\n+        if let ExprKind::Lit(lit) = end.kind;\n         if let ast::LitKind::Int(end_int, _) = lit.node;\n         if let ty::Array(_, arr_len_const) = indexed_ty.kind();\n         if let Some(arr_len) = arr_len_const.try_eval_target_usize(cx.tcx, cx.param_env);"}, {"sha": "26ae4b409c79570d116147e24477ee335bda9c3f", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -35,7 +35,8 @@ struct PathAndSpan {\n     span: Span,\n }\n \n-/// `MacroRefData` includes the name of the macro.\n+/// `MacroRefData` includes the name of the macro\n+/// and the path from `SourceMap::span_to_filename`.\n #[derive(Debug, Clone)]\n pub struct MacroRefData {\n     name: String,"}, {"sha": "45ea5aab4c2a26c7369e40ec290ec79b6e852c5f", "filename": "clippy_lints/src/manual_assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_assert.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAssert {\n             };\n             let cond_sugg = sugg::Sugg::hir_with_applicability(cx, cond, \"..\", &mut applicability).maybe_par();\n             let sugg = format!(\"assert!({not}{cond_sugg}, {format_args_snip});\");\n-            // we show to the user the suggestion without the comments, but when applicating the fix, include the comments in the block\n+            // we show to the user the suggestion without the comments, but when applying the fix, include the comments in the block\n             span_lint_and_then(\n                 cx,\n                 MANUAL_ASSERT,"}, {"sha": "1247370b74a2f42b6d2f8e52531be0c2661190e8", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -101,7 +101,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n                 if source != MatchSource::Normal {\n                     return;\n                 }\n-                // Any other number than two arms doesn't (neccessarily)\n+                // Any other number than two arms doesn't (necessarily)\n                 // have a trivial mapping to let else.\n                 if arms.len() != 2 {\n                     return;"}, {"sha": "5259066eb713cc7b7350fef0cd0755c5750e6d8f", "filename": "clippy_lints/src/manual_retain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_retain.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -46,7 +46,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.64.0\"]\n     pub MANUAL_RETAIN,\n     perf,\n-    \"`retain()` is simpler and the same functionalitys\"\n+    \"`retain()` is simpler and the same functionalities\"\n }\n \n pub struct ManualRetain {"}, {"sha": "69105ff0d5c7acaa31c85c0461aae50c3491831e", "filename": "clippy_lints/src/matches/match_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmatches%2Fmatch_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmatches%2Fmatch_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_bool.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn check(cx: &LateContext<'_>, scrutinee: &Expr<'_>, arms: &[Arm<'_>]\n                 if arms.len() == 2 {\n                     // no guards\n                     let exprs = if let PatKind::Lit(arm_bool) = arms[0].pat.kind {\n-                        if let ExprKind::Lit(ref lit) = arm_bool.kind {\n+                        if let ExprKind::Lit(lit) = arm_bool.kind {\n                             match lit.node {\n                                 LitKind::Bool(true) => Some((arms[0].body, arms[1].body)),\n                                 LitKind::Bool(false) => Some((arms[1].body, arms[0].body)),"}, {"sha": "af121f317cd187d966d2973da91284ba23d425bb", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -63,8 +63,11 @@ fn find_sugg_for_if_let<'tcx>(\n     // Determine which function should be used, and the type contained by the corresponding\n     // variant.\n     let (good_method, inner_ty) = match check_pat.kind {\n-        PatKind::TupleStruct(ref qpath, [sub_pat], _) => {\n-            if let PatKind::Wild = sub_pat.kind {\n+        PatKind::TupleStruct(ref qpath, args, rest) => {\n+            let is_wildcard = matches!(args.first().map(|p| &p.kind), Some(PatKind::Wild));\n+            let is_rest = matches!((args, rest.as_opt_usize()), ([], Some(_)));\n+\n+            if is_wildcard || is_rest {\n                 let res = cx.typeck_results().qpath_res(qpath, check_pat.hir_id);\n                 let Some(id) = res.opt_def_id().map(|ctor_id| cx.tcx.parent(ctor_id)) else { return };\n                 let lang_items = cx.tcx.lang_items();\n@@ -334,7 +337,7 @@ fn find_good_method_for_match<'a>(\n     };\n \n     match body_node_pair {\n-        (ExprKind::Lit(ref lit_left), ExprKind::Lit(ref lit_right)) => match (&lit_left.node, &lit_right.node) {\n+        (ExprKind::Lit(lit_left), ExprKind::Lit(lit_right)) => match (&lit_left.node, &lit_right.node) {\n             (LitKind::Bool(true), LitKind::Bool(false)) => Some(should_be_left),\n             (LitKind::Bool(false), LitKind::Bool(true)) => Some(should_be_right),\n             _ => None,"}, {"sha": "8984b2cf8fd5005450c4e5b75d81bd57fa9e2f1a", "filename": "clippy_lints/src/methods/chars_cmp_with_unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -18,7 +18,7 @@ pub(super) fn check(\n ) -> bool {\n     if_chain! {\n         if let Some(args) = method_chain_args(info.chain, chain_methods);\n-        if let hir::ExprKind::Lit(ref lit) = info.other.kind;\n+        if let hir::ExprKind::Lit(lit) = info.other.kind;\n         if let ast::LitKind::Char(c) = lit.node;\n         then {\n             let mut applicability = Applicability::MachineApplicable;"}, {"sha": "122088f4857cd5925b37b8c744fecaf34b3578ed", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -7,7 +7,7 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n-use rustc_span::symbol::{Symbol, sym};\n+use rustc_span::symbol::{sym, Symbol};\n \n use super::INEFFICIENT_TO_STRING;\n "}, {"sha": "e2029da8081f4b1a3798a82cea748934a71174d7", "filename": "clippy_lints/src/methods/iter_next_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -30,7 +30,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, cal\n             if let hir::ExprKind::Index(caller_var, index_expr) = &caller_expr.kind;\n             if let Some(higher::Range { start: Some(start_expr), end: None, limits: ast::RangeLimits::HalfOpen })\n                 = higher::Range::hir(index_expr);\n-            if let hir::ExprKind::Lit(ref start_lit) = &start_expr.kind;\n+            if let hir::ExprKind::Lit(start_lit) = &start_expr.kind;\n             if let ast::LitKind::Int(start_idx, _) = start_lit.node;\n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "bd625a6914c3ca54a3f22bbaf05ffef298e90823", "filename": "clippy_lints/src/methods/open_options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -42,11 +42,11 @@ fn get_open_options(cx: &LateContext<'_>, argument: &Expr<'_>, options: &mut Vec\n         // Only proceed if this is a call on some object of type std::fs::OpenOptions\n         if match_type(cx, obj_ty, &paths::OPEN_OPTIONS) && !arguments.is_empty() {\n             let argument_option = match arguments[0].kind {\n-                ExprKind::Lit(ref span) => {\n+                ExprKind::Lit(span) => {\n                     if let Spanned {\n                         node: LitKind::Bool(lit),\n                         ..\n-                    } = *span\n+                    } = span\n                     {\n                         if *lit { Argument::True } else { Argument::False }\n                     } else {"}, {"sha": "0284d9dea3032438730d3b88fc6f66c45b392642", "filename": "clippy_lints/src/methods/path_buf_push_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -15,7 +15,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'t\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n         if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id).subst_identity(), sym::PathBuf);\n-        if let ExprKind::Lit(ref lit) = arg.kind;\n+        if let ExprKind::Lit(lit) = arg.kind;\n         if let LitKind::Str(ref path_lit, _) = lit.node;\n         if let pushed_path = Path::new(path_lit.as_str());\n         if let Some(pushed_path_lit) = pushed_path.to_str();"}, {"sha": "c028e954381dde85e8a4b147630d309e4c9e7de1", "filename": "clippy_lints/src/methods/seek_from_current.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Fseek_from_current.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Fseek_from_current.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fseek_from_current.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -38,7 +38,7 @@ fn arg_is_seek_from_current<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>)\n         match_def_path(cx, def_id, &paths::STD_IO_SEEK_FROM_CURRENT) {\n         // check if argument of `SeekFrom::Current` is `0`\n         if args.len() == 1 &&\n-            let ExprKind::Lit(ref lit) = args[0].kind &&\n+            let ExprKind::Lit(lit) = args[0].kind &&\n             let LitKind::Int(0, LitIntType::Unsuffixed) = lit.node {\n             return true\n         }"}, {"sha": "787e9e0ebd245647f51bd856d7b6b2e8338ddb7b", "filename": "clippy_lints/src/methods/seek_to_start_instead_of_rewind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Fseek_to_start_instead_of_rewind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Fseek_to_start_instead_of_rewind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fseek_to_start_instead_of_rewind.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -30,7 +30,7 @@ pub(super) fn check<'tcx>(\n         let Some(def_id) = cx.qpath_res(path, func.hir_id).opt_def_id() &&\n         match_def_path(cx, def_id, &paths::STD_IO_SEEKFROM_START) &&\n         args1.len() == 1 &&\n-        let ExprKind::Lit(ref lit) = args1[0].kind &&\n+        let ExprKind::Lit(lit) = args1[0].kind &&\n         let LitKind::Int(0, LitIntType::Unsuffixed) = lit.node\n     {\n         let method_call_span = expr.span.with_lo(name_span.lo());"}, {"sha": "5a3d12fd790ea4f2063dfaf8bc5bcbf5377c4d24", "filename": "clippy_lints/src/methods/unnecessary_fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -78,7 +78,7 @@ pub(super) fn check(\n     }\n \n     // Check if the first argument to .fold is a suitable literal\n-    if let hir::ExprKind::Lit(ref lit) = init.kind {\n+    if let hir::ExprKind::Lit(lit) = init.kind {\n         match lit.node {\n             ast::LitKind::Bool(false) => check_fold_with_op(cx, expr, acc, fold_span, hir::BinOpKind::Or, \"any\", true),\n             ast::LitKind::Bool(true) => check_fold_with_op(cx, expr, acc, fold_span, hir::BinOpKind::And, \"all\", true),"}, {"sha": "1adecd2caacad7f117ed66241b1ee6f784ff6581", "filename": "clippy_lints/src/missing_trait_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -12,7 +12,7 @@ declare_clippy_lint! {\n     /// Checks if a provided method is used implicitly by a trait\n     /// implementation. A usage example would be a wrapper where every method\n     /// should perform some operation before delegating to the inner type's\n-    /// implemenation.\n+    /// implementation.\n     ///\n     /// This lint should typically be enabled on a specific trait `impl` item\n     /// rather than globally."}, {"sha": "3ef0c6634598474189ba0b5415d733304b2d2671", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -92,10 +92,6 @@ impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n                 self.found = true;\n                 return;\n             },\n-            ExprKind::If(..) => {\n-                self.found = true;\n-                return;\n-            },\n             ExprKind::Path(_) => {\n                 if let Some(adj) = self.cx.typeck_results().adjustments().get(expr.hir_id) {\n                     if adj"}, {"sha": "71281a0b40b0acb04f0eb2bffc63855b073cb7c9", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 69, "deletions": 4, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -3,10 +3,12 @@\n //! This lint is **warn** by default\n \n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n-use clippy_utils::higher;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{get_parent_node, is_else_clause, is_expn_of, peel_blocks, peel_blocks_with_stmt};\n+use clippy_utils::{\n+    get_parent_node, is_else_clause, is_expn_of, peel_blocks, peel_blocks_with_stmt, span_extract_comment,\n+};\n+use clippy_utils::{higher, SpanlessEq};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, HirId, Node, UnOp};\n@@ -77,7 +79,39 @@ declare_clippy_lint! {\n     \"comparing a variable to a boolean, e.g., `if x == true` or `if x != true`\"\n }\n \n-declare_lint_pass!(NeedlessBool => [NEEDLESS_BOOL]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for expressions of the form `if c { x = true } else { x = false }`\n+    /// (or vice versa) and suggest assigning the variable directly from the\n+    /// condition.\n+    ///\n+    /// ### Why is this bad?\n+    /// Redundant code.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// # fn must_keep(x: i32, y: i32) -> bool { x == y }\n+    /// # let x = 32; let y = 10;\n+    /// # let mut skip: bool;\n+    /// if must_keep(x, y) {\n+    ///     skip = false;\n+    /// } else {\n+    ///     skip = true;\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// # fn must_keep(x: i32, y: i32) -> bool { x == y }\n+    /// # let x = 32; let y = 10;\n+    /// # let mut skip: bool;\n+    /// skip = !must_keep(x, y);\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub NEEDLESS_BOOL_ASSIGN,\n+    complexity,\n+    \"setting the same boolean variable in both branches of an if-statement\"\n+}\n+declare_lint_pass!(NeedlessBool => [NEEDLESS_BOOL, NEEDLESS_BOOL_ASSIGN]);\n \n fn condition_needs_parentheses(e: &Expr<'_>) -> bool {\n     let mut inner = e;\n@@ -173,6 +207,29 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBool {\n                     _ => (),\n                 }\n             }\n+            if let Some((lhs_a, a)) = fetch_assign(then) &&\n+                let Some((lhs_b, b)) = fetch_assign(r#else) &&\n+                SpanlessEq::new(cx).eq_expr(lhs_a, lhs_b) &&\n+                span_extract_comment(cx.tcx.sess.source_map(), e.span).is_empty()\n+            {\n+                let mut applicability = Applicability::MachineApplicable;\n+                let cond = Sugg::hir_with_applicability(cx, cond, \"..\", &mut applicability);\n+                let lhs = snippet_with_applicability(cx, lhs_a.span, \"..\", &mut applicability);\n+                let sugg = if a == b {\n+                    format!(\"{cond}; {lhs} = {a:?};\")\n+                } else {\n+                    format!(\"{lhs} = {};\", if a { cond } else { !cond })\n+                };\n+                span_lint_and_sugg(\n+                    cx,\n+                    NEEDLESS_BOOL_ASSIGN,\n+                    e.span,\n+                    \"this if-then-else expression assigns a bool literal\",\n+                    \"you can reduce it to\",\n+                    sugg,\n+                    applicability\n+                );\n+            }\n         }\n     }\n }\n@@ -369,10 +426,18 @@ fn fetch_bool_block(expr: &Expr<'_>) -> Option<Expression> {\n }\n \n fn fetch_bool_expr(expr: &Expr<'_>) -> Option<bool> {\n-    if let ExprKind::Lit(ref lit_ptr) = peel_blocks(expr).kind {\n+    if let ExprKind::Lit(lit_ptr) = peel_blocks(expr).kind {\n         if let LitKind::Bool(value) = lit_ptr.node {\n             return Some(value);\n         }\n     }\n     None\n }\n+\n+fn fetch_assign<'tcx>(expr: &'tcx Expr<'tcx>) -> Option<(&'tcx Expr<'tcx>, bool)> {\n+    if let ExprKind::Assign(lhs, rhs, _) = peel_blocks_with_stmt(expr).kind {\n+        fetch_bool_expr(rhs).map(|b| (lhs, b))\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "da1b9d99931a5dc65e615e671f04bc05017d5ea9", "filename": "clippy_lints/src/needless_parens_on_range_literals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fneedless_parens_on_range_literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fneedless_parens_on_range_literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_parens_on_range_literals.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -49,14 +49,14 @@ fn snippet_enclosed_in_parenthesis(snippet: &str) -> bool {\n \n fn check_for_parens(cx: &LateContext<'_>, e: &Expr<'_>, is_start: bool) {\n     if is_start &&\n-    let ExprKind::Lit(ref literal) = e.kind &&\n+    let ExprKind::Lit(literal) = e.kind &&\n     let ast::LitKind::Float(_sym, ast::LitFloatType::Unsuffixed) = literal.node\n     {\n         // don't check floating point literals on the start expression of a range\n         return;\n     }\n     if_chain! {\n-        if let ExprKind::Lit(ref literal) = e.kind;\n+        if let ExprKind::Lit(literal) = e.kind;\n         // the indicator that parenthesis surround the literal is that the span of the expression and the literal differ\n         if (literal.span.data().hi - literal.span.data().lo) != (e.span.data().hi - e.span.data().lo);\n         // inspect the source code of the expression for parenthesis"}, {"sha": "db0e22842d14ade5e5f151ac0fc2ffaa9cb00d80", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for NegMultiply {\n \n fn check_mul(cx: &LateContext<'_>, span: Span, lit: &Expr<'_>, exp: &Expr<'_>) {\n     if_chain! {\n-        if let ExprKind::Lit(ref l) = lit.kind;\n+        if let ExprKind::Lit(l) = lit.kind;\n         if consts::lit_to_mir_constant(&l.node, cx.typeck_results().expr_ty_opt(lit)) == Constant::Int(1);\n         if cx.typeck_results().expr_ty(exp).is_integral();\n "}, {"sha": "f72595987ee2fe1bbec99dc095f71ae8f498411e", "filename": "clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -110,7 +110,7 @@ impl ArithmeticSideEffects {\n     /// like `i32::MAX` or constant references like `N` from `const N: i32 = 1;`,\n     fn literal_integer(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<u128> {\n         let actual = peel_hir_expr_unary(expr).0;\n-        if let hir::ExprKind::Lit(ref lit) = actual.kind && let ast::LitKind::Int(n, _) = lit.node {\n+        if let hir::ExprKind::Lit(lit) = actual.kind && let ast::LitKind::Int(n, _) = lit.node {\n             return Some(n)\n         }\n         if let Some((Constant::Int(n), _)) = constant(cx, cx.typeck_results(), expr) {"}, {"sha": "b8b32df6cc64b624472fb4f7de88cfad701645ee", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -180,7 +180,7 @@ fn check_regex<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n         .allow_invalid_utf8(!utf8)\n         .build();\n \n-    if let ExprKind::Lit(ref lit) = expr.kind {\n+    if let ExprKind::Lit(lit) = expr.kind {\n         if let LitKind::Str(ref r, style) = lit.node {\n             let r = r.as_str();\n             let offset = if let StrStyle::Raw(n) = style { 2 + n } else { 1 };"}, {"sha": "45433b2adf0657177b95ef7b17646e93c661b035", "filename": "clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsame_name_method.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -55,11 +55,11 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n             if matches!(cx.tcx.def_kind(id.owner_id), DefKind::Impl { .. })\n                 && let item = cx.tcx.hir().item(id)\n                 && let ItemKind::Impl(Impl {\n-                  items,\n-                  of_trait,\n-                  self_ty,\n-                  ..\n-                                      }) = &item.kind\n+                    items,\n+                    of_trait,\n+                    self_ty,\n+                    ..\n+                }) = &item.kind\n                 && let TyKind::Path(QPath::Resolved(_, Path { res, .. })) = self_ty.kind\n             {\n                 if !map.contains_key(res) {"}, {"sha": "419d7991f0ec0bfb1edbf45d36c1d728d0bbb905", "filename": "clippy_lints/src/semicolon_block.rs", "status": "modified", "additions": 82, "deletions": 43, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_block.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{multispan_sugg_with_applicability, span_lint_and\n use rustc_errors::Applicability;\n use rustc_hir::{Block, Expr, ExprKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n \n declare_clippy_lint! {\n@@ -64,7 +64,78 @@ declare_clippy_lint! {\n     restriction,\n     \"add a semicolon outside the block\"\n }\n-declare_lint_pass!(SemicolonBlock => [SEMICOLON_INSIDE_BLOCK, SEMICOLON_OUTSIDE_BLOCK]);\n+impl_lint_pass!(SemicolonBlock => [SEMICOLON_INSIDE_BLOCK, SEMICOLON_OUTSIDE_BLOCK]);\n+\n+#[derive(Copy, Clone)]\n+pub struct SemicolonBlock {\n+    semicolon_inside_block_ignore_singleline: bool,\n+    semicolon_outside_block_ignore_multiline: bool,\n+}\n+\n+impl SemicolonBlock {\n+    pub fn new(semicolon_inside_block_ignore_singleline: bool, semicolon_outside_block_ignore_multiline: bool) -> Self {\n+        Self {\n+            semicolon_inside_block_ignore_singleline,\n+            semicolon_outside_block_ignore_multiline,\n+        }\n+    }\n+\n+    fn semicolon_inside_block(self, cx: &LateContext<'_>, block: &Block<'_>, tail: &Expr<'_>, semi_span: Span) {\n+        let insert_span = tail.span.source_callsite().shrink_to_hi();\n+        let remove_span = semi_span.with_lo(block.span.hi());\n+\n+        if self.semicolon_inside_block_ignore_singleline && get_line(cx, remove_span) == get_line(cx, insert_span) {\n+            return;\n+        }\n+\n+        span_lint_and_then(\n+            cx,\n+            SEMICOLON_INSIDE_BLOCK,\n+            semi_span,\n+            \"consider moving the `;` inside the block for consistent formatting\",\n+            |diag| {\n+                multispan_sugg_with_applicability(\n+                    diag,\n+                    \"put the `;` here\",\n+                    Applicability::MachineApplicable,\n+                    [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n+                );\n+            },\n+        );\n+    }\n+\n+    fn semicolon_outside_block(\n+        self,\n+        cx: &LateContext<'_>,\n+        block: &Block<'_>,\n+        tail_stmt_expr: &Expr<'_>,\n+        semi_span: Span,\n+    ) {\n+        let insert_span = block.span.with_lo(block.span.hi());\n+        // account for macro calls\n+        let semi_span = cx.sess().source_map().stmt_span(semi_span, block.span);\n+        let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n+\n+        if self.semicolon_outside_block_ignore_multiline && get_line(cx, remove_span) != get_line(cx, insert_span) {\n+            return;\n+        }\n+\n+        span_lint_and_then(\n+            cx,\n+            SEMICOLON_OUTSIDE_BLOCK,\n+            block.span,\n+            \"consider moving the `;` outside the block for consistent formatting\",\n+            |diag| {\n+                multispan_sugg_with_applicability(\n+                    diag,\n+                    \"put the `;` here\",\n+                    Applicability::MachineApplicable,\n+                    [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n+                );\n+            },\n+        );\n+    }\n+}\n \n impl LateLintPass<'_> for SemicolonBlock {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n@@ -83,55 +154,23 @@ impl LateLintPass<'_> for SemicolonBlock {\n                     span,\n                     ..\n                 } = stmt else { return };\n-                semicolon_outside_block(cx, block, expr, span);\n+                self.semicolon_outside_block(cx, block, expr, span);\n             },\n             StmtKind::Semi(Expr {\n                 kind: ExprKind::Block(block @ Block { expr: Some(tail), .. }, _),\n                 ..\n-            }) if !block.span.from_expansion() => semicolon_inside_block(cx, block, tail, stmt.span),\n+            }) if !block.span.from_expansion() => {\n+                self.semicolon_inside_block(cx, block, tail, stmt.span);\n+            },\n             _ => (),\n         }\n     }\n }\n \n-fn semicolon_inside_block(cx: &LateContext<'_>, block: &Block<'_>, tail: &Expr<'_>, semi_span: Span) {\n-    let insert_span = tail.span.source_callsite().shrink_to_hi();\n-    let remove_span = semi_span.with_lo(block.span.hi());\n-\n-    span_lint_and_then(\n-        cx,\n-        SEMICOLON_INSIDE_BLOCK,\n-        semi_span,\n-        \"consider moving the `;` inside the block for consistent formatting\",\n-        |diag| {\n-            multispan_sugg_with_applicability(\n-                diag,\n-                \"put the `;` here\",\n-                Applicability::MachineApplicable,\n-                [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n-            );\n-        },\n-    );\n-}\n-\n-fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>, tail_stmt_expr: &Expr<'_>, semi_span: Span) {\n-    let insert_span = block.span.with_lo(block.span.hi());\n-    // account for macro calls\n-    let semi_span = cx.sess().source_map().stmt_span(semi_span, block.span);\n-    let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n+fn get_line(cx: &LateContext<'_>, span: Span) -> Option<usize> {\n+    if let Ok(line) = cx.sess().source_map().lookup_line(span.lo()) {\n+        return Some(line.line);\n+    }\n \n-    span_lint_and_then(\n-        cx,\n-        SEMICOLON_OUTSIDE_BLOCK,\n-        block.span,\n-        \"consider moving the `;` outside the block for consistent formatting\",\n-        |diag| {\n-            multispan_sugg_with_applicability(\n-                diag,\n-                \"put the `;` here\",\n-                Applicability::MachineApplicable,\n-                [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n-            );\n-        },\n-    );\n+    None\n }"}, {"sha": "993f9373d85d351ff8f2e4931c764fcc2554d4eb", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -108,7 +108,7 @@ impl<'tcx> LateLintPass<'tcx> for Shadow {\n     fn check_pat(&mut self, cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>) {\n         let PatKind::Binding(_, id, ident, _) = pat.kind else { return };\n \n-        if pat.span.desugaring_kind().is_some() {\n+        if pat.span.desugaring_kind().is_some() || pat.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "858135c8d4647091f1810d7668adcbeec1c0fa27", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -74,7 +74,7 @@ enum InitializationType<'tcx> {\n \n impl<'tcx> LateLintPass<'tcx> for SlowVectorInit {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        // Matches initialization on reassignements. For example: `vec = Vec::with_capacity(100)`\n+        // Matches initialization on reassignments. For example: `vec = Vec::with_capacity(100)`\n         if_chain! {\n             if let ExprKind::Assign(left, right, _) = expr.kind;\n "}, {"sha": "5b588e914fdf887b1d50b15bee5e0887e8794312", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -292,6 +292,7 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n         }\n \n         if_chain! {\n+            if !in_external_macro(cx.sess(), e.span);\n             if let ExprKind::MethodCall(path, receiver, ..) = &e.kind;\n             if path.ident.name == sym!(as_bytes);\n             if let ExprKind::Lit(lit) = &receiver.kind;"}, {"sha": "bb9da3a2047086b46b24c0f55b145431c351381a", "filename": "clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -60,7 +60,7 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'_>, item: &Item<'_\n         if let Some(last_field) = data.fields().last();\n         if let rustc_hir::TyKind::Array(_, rustc_hir::ArrayLen::Body(length)) = last_field.ty.kind;\n \n-        // Then check if that that array zero-sized\n+        // Then check if that array is zero-sized\n         let length = Const::from_anon_const(cx.tcx, length.def_id);\n         let length = length.try_eval_target_usize(cx.tcx, cx.param_env);\n         if let Some(length) = length;"}, {"sha": "3c873a5901d42fed4b5c207b93a6593872be1491", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -90,8 +90,8 @@ declare_clippy_lint! {\n     ///\n     /// ### Why is this bad?\n     /// `Option<_>` represents an optional value. `Option<Option<_>>`\n-    /// represents an optional optional value which is logically the same thing as an optional\n-    /// value but has an unneeded extra level of wrapping.\n+    /// represents an optional value which itself wraps an optional. This is logically the\n+    /// same thing as an optional value but has an unneeded extra level of wrapping.\n     ///\n     /// If you have a case where `Some(Some(_))`, `Some(None)` and `None` are distinct cases,\n     /// consider a custom `enum` instead, with clear names for each case."}, {"sha": "e275bfd37b003d3fdb6fe43bf0b2e946e327463f", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -76,7 +76,7 @@ declare_lint_pass!(Unicode => [INVISIBLE_CHARACTERS, NON_ASCII_LITERAL, UNICODE_\n \n impl LateLintPass<'_> for Unicode {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n-        if let ExprKind::Lit(ref lit) = expr.kind {\n+        if let ExprKind::Lit(lit) = expr.kind {\n             if let LitKind::Str(_, _) | LitKind::Char(_) = lit.node {\n                 check_str(cx, lit.span, expr.hir_id);\n             }"}, {"sha": "e7449639f3af307f88145854ec77a00b50744a4b", "filename": "clippy_lints/src/unnecessary_box_returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -109,7 +109,7 @@ impl LateLintPass<'_> for UnnecessaryBoxReturns {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_>, item: &rustc_hir::ImplItem<'_>) {\n         // Ignore implementations of traits, because the lint should be on the\n-        // trait, not on the implmentation of it.\n+        // trait, not on the implementation of it.\n         let Node::Item(parent) = cx.tcx.hir().get_parent(item.hir_id()) else { return };\n         let ItemKind::Impl(parent) = parent.kind else { return };\n         if parent.of_trait.is_some() {"}, {"sha": "108077b9d1588420d3cbeacc7f2e9d8be075d571", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -333,7 +333,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n \n     #[allow(clippy::too_many_lines)]\n     fn expr(&self, expr: &Binding<&hir::Expr<'_>>) {\n-        if let Some(higher::While { condition, body }) = higher::While::hir(expr.value) {\n+        if let Some(higher::While { condition, body, .. }) = higher::While::hir(expr.value) {\n             bind!(self, condition, body);\n             chain!(\n                 self,\n@@ -561,7 +561,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n             ExprKind::OffsetOf(container, ref fields) => {\n                 bind!(self, container, fields);\n                 kind!(\"OffsetOf({container}, {fields})\");\n-            }\n+            },\n             ExprKind::Struct(qpath, fields, base) => {\n                 bind!(self, qpath, fields);\n                 opt_bind!(self, base);"}, {"sha": "5f05d971fce23a5485c674b0de458d7b45594df8", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -277,6 +277,14 @@ define_Conf! {\n     /// `\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the\n     /// default configuration of Clippy. By default, any configuration will replace the default value.\n     (disallowed_names: Vec<String> = super::DEFAULT_DISALLOWED_NAMES.iter().map(ToString::to_string).collect()),\n+    /// Lint: SEMICOLON_INSIDE_BLOCK.\n+    ///\n+    /// Whether to lint only if it's multiline.\n+    (semicolon_inside_block_ignore_singleline: bool = false),\n+    /// Lint: SEMICOLON_OUTSIDE_BLOCK.\n+    ///\n+    /// Whether to lint only if it's singleline.\n+    (semicolon_outside_block_ignore_multiline: bool = false),\n     /// Lint: DOC_MARKDOWN.\n     ///\n     /// The list of words this lint should not consider as identifiers needing ticks. The value"}, {"sha": "66a5079fa85ef2bda7d11d0ebf42b7128176d5de", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.70\"\n+version = \"0.1.71\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "9edaae853734ce842c596b4c0175b5e763e6c72c", "filename": "clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -117,7 +117,7 @@ fn expr_search_pat(tcx: TyCtxt<'_>, e: &Expr<'_>) -> (Pat, Pat) {\n         ExprKind::Unary(UnOp::Deref, e) => (Pat::Str(\"*\"), expr_search_pat(tcx, e).1),\n         ExprKind::Unary(UnOp::Not, e) => (Pat::Str(\"!\"), expr_search_pat(tcx, e).1),\n         ExprKind::Unary(UnOp::Neg, e) => (Pat::Str(\"-\"), expr_search_pat(tcx, e).1),\n-        ExprKind::Lit(ref lit) => lit_search_pat(&lit.node),\n+        ExprKind::Lit(lit) => lit_search_pat(&lit.node),\n         ExprKind::Array(_) | ExprKind::Repeat(..) => (Pat::Str(\"[\"), Pat::Str(\"]\")),\n         ExprKind::Call(e, []) | ExprKind::MethodCall(_, e, [], _) => (expr_search_pat(tcx, e).0, Pat::Str(\"(\")),\n         ExprKind::Call(first, [.., last])"}, {"sha": "b52caf6e4056b982c6d23ed056fda43a5e2a1523", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -324,7 +324,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n         match e.kind {\n             ExprKind::Path(ref qpath) => self.fetch_path(qpath, e.hir_id, self.typeck_results.expr_ty(e)),\n             ExprKind::Block(block, _) => self.block(block),\n-            ExprKind::Lit(ref lit) => {\n+            ExprKind::Lit(lit) => {\n                 if is_direct_expn_of(e.span, \"cfg\").is_some() {\n                     None\n                 } else {"}, {"sha": "a61e4c380886d3401267bfbc7bf94479a00c5a0c", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -311,6 +311,8 @@ pub struct While<'hir> {\n     pub condition: &'hir Expr<'hir>,\n     /// `while` loop body\n     pub body: &'hir Expr<'hir>,\n+    /// Span of the loop header\n+    pub span: Span,\n }\n \n impl<'hir> While<'hir> {\n@@ -336,10 +338,10 @@ impl<'hir> While<'hir> {\n             },\n             _,\n             LoopSource::While,\n-            _,\n+            span,\n         ) = expr.kind\n         {\n-            return Some(Self { condition, body });\n+            return Some(Self { condition, body, span });\n         }\n         None\n     }"}, {"sha": "9b7408d51339290585d6bee88d53657601c0c16d", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -301,7 +301,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&ExprKind::Unary(l_op, le), &ExprKind::Unary(r_op, re)) => l_op == r_op && self.eq_expr(le, re),\n             (&ExprKind::Array(l), &ExprKind::Array(r)) => self.eq_exprs(l, r),\n             (&ExprKind::DropTemps(le), &ExprKind::DropTemps(re)) => self.eq_expr(le, re),\n-            (&ExprKind::OffsetOf(l_container, ref l_fields), &ExprKind::OffsetOf(r_container, ref r_fields)) => {\n+            (&ExprKind::OffsetOf(l_container, l_fields), &ExprKind::OffsetOf(r_container, r_fields)) => {\n                 self.eq_ty(l_container, r_container) && over(l_fields, r_fields, |l, r| l.name == r.name)\n             },\n             _ => false,\n@@ -718,7 +718,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_pat(pat);\n             },\n             ExprKind::Err(_) => {},\n-            ExprKind::Lit(ref l) => {\n+            ExprKind::Lit(l) => {\n                 l.node.hash(&mut self.s);\n             },\n             ExprKind::Loop(b, ref i, ..) => {"}, {"sha": "964104fc31d0e207bb01b49d1173f119a3636af9", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 14, "deletions": 37, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -86,10 +86,10 @@ use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n-    self as hir, def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Closure, Constness, Destination,\n-    Expr, ExprKind, FnDecl, HirId, Impl, ImplItem, ImplItemKind, ImplItemRef, IsAsync, Item, ItemKind, LangItem, Local,\n+    self as hir, def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Closure, Destination, Expr,\n+    ExprKind, FnDecl, HirId, Impl, ImplItem, ImplItemKind, ImplItemRef, IsAsync, Item, ItemKind, LangItem, Local,\n     MatchSource, Mutability, Node, OwnerId, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind,\n-    TraitItem, TraitItemKind, TraitItemRef, TraitRef, TyKind, UnOp,\n+    TraitItem, TraitItemRef, TraitRef, TyKind, UnOp,\n };\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n@@ -197,31 +197,7 @@ pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<\n /// }\n /// ```\n pub fn in_constant(cx: &LateContext<'_>, id: HirId) -> bool {\n-    let parent_id = cx.tcx.hir().get_parent_item(id).def_id;\n-    match cx.tcx.hir().get_by_def_id(parent_id) {\n-        Node::Item(&Item {\n-            kind: ItemKind::Const(..) | ItemKind::Static(..) | ItemKind::Enum(..),\n-            ..\n-        })\n-        | Node::TraitItem(&TraitItem {\n-            kind: TraitItemKind::Const(..),\n-            ..\n-        })\n-        | Node::ImplItem(&ImplItem {\n-            kind: ImplItemKind::Const(..),\n-            ..\n-        })\n-        | Node::AnonConst(_) => true,\n-        Node::Item(&Item {\n-            kind: ItemKind::Fn(ref sig, ..),\n-            ..\n-        })\n-        | Node::ImplItem(&ImplItem {\n-            kind: ImplItemKind::Fn(ref sig, _),\n-            ..\n-        }) => sig.header.constness == Constness::Const,\n-        _ => false,\n-    }\n+    cx.tcx.hir().is_inside_const_context(id)\n }\n \n /// Checks if a `Res` refers to a constructor of a `LangItem`\n@@ -846,7 +822,7 @@ pub fn is_default_equivalent(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n         },\n         ExprKind::Tup(items) | ExprKind::Array(items) => items.iter().all(|x| is_default_equivalent(cx, x)),\n         ExprKind::Repeat(x, ArrayLen::Body(len)) => if_chain! {\n-            if let ExprKind::Lit(ref const_lit) = cx.tcx.hir().body(len.body).value.kind;\n+            if let ExprKind::Lit(const_lit) = cx.tcx.hir().body(len.body).value.kind;\n             if let LitKind::Int(v, _) = const_lit.node;\n             if v <= 32 && is_default_equivalent(cx, x);\n             then {\n@@ -875,7 +851,7 @@ fn is_default_equivalent_from(cx: &LateContext<'_>, from_func: &Expr<'_>, arg: &\n             }) => return sym.is_empty() && is_path_lang_item(cx, ty, LangItem::String),\n             ExprKind::Array([]) => return is_path_diagnostic_item(cx, ty, sym::Vec),\n             ExprKind::Repeat(_, ArrayLen::Body(len)) => {\n-                if let ExprKind::Lit(ref const_lit) = cx.tcx.hir().body(len.body).value.kind &&\n+                if let ExprKind::Lit(const_lit) = cx.tcx.hir().body(len.body).value.kind &&\n                     let LitKind::Int(v, _) = const_lit.node\n                 {\n                         return v == 0 && is_path_diagnostic_item(cx, ty, sym::Vec);\n@@ -1569,7 +1545,7 @@ pub fn is_integer_const(cx: &LateContext<'_>, e: &Expr<'_>, value: u128) -> bool\n /// Checks whether the given expression is a constant literal of the given value.\n pub fn is_integer_literal(expr: &Expr<'_>, value: u128) -> bool {\n     // FIXME: use constant folding\n-    if let ExprKind::Lit(ref spanned) = expr.kind {\n+    if let ExprKind::Lit(spanned) = expr.kind {\n         if let LitKind::Int(v, _) = spanned.node {\n             return v == value;\n         }\n@@ -2165,10 +2141,7 @@ pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_>, did: DefId) -> bool {\n         .predicates\n         .iter()\n         .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n-    traits::impossible_predicates(\n-        cx.tcx,\n-        traits::elaborate(cx.tcx, predicates).collect::<Vec<_>>(),\n-    )\n+    traits::impossible_predicates(cx.tcx, traits::elaborate(cx.tcx, predicates).collect::<Vec<_>>())\n }\n \n /// Returns the `DefId` of the callee if the given expression is a function or method call.\n@@ -2233,8 +2206,12 @@ pub fn is_slice_of_primitives(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<S\n     None\n }\n \n-/// returns list of all pairs (a, b) from `exprs` such that `eq(a, b)`\n-/// `hash` must be comformed with `eq`\n+/// Returns list of all pairs `(a, b)` where `eq(a, b) == true`\n+/// and `a` is before `b` in `exprs` for all `a` and `b` in\n+/// `exprs`\n+///\n+/// Given functions `eq` and `hash` such that `eq(a, b) == true`\n+/// implies `hash(a) == hash(b)`\n pub fn search_same<T, Hash, Eq>(exprs: &[T], hash: Hash, eq: Eq) -> Vec<(&T, &T)>\n where\n     Hash: Fn(&T) -> u64,"}, {"sha": "e4a4936ff42fce98f57374a6588e2c309bdabcba", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -362,7 +362,7 @@ thread_local! {\n     /// able to access the many features of a [`LateContext`].\n     ///\n     /// A thread local is used because [`FormatArgs`] is `!Send` and `!Sync`, we are making an\n-    /// assumption that the early pass the populates the map and the later late passes will all be\n+    /// assumption that the early pass that populates the map and the later late passes will all be\n     /// running on the same thread.\n     static AST_FORMAT_ARGS: RefCell<FxHashMap<Span, FormatArgs>> = {\n         static CALLED: AtomicBool = AtomicBool::new(false);"}, {"sha": "0f0792fdaa963f366061124a3bf309bee63892ec", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -159,3 +159,7 @@ pub const WEAK_RC: [&str; 3] = [\"alloc\", \"rc\", \"Weak\"];\n pub const PTR_NON_NULL: [&str; 4] = [\"core\", \"ptr\", \"non_null\", \"NonNull\"];\n pub const INSTANT_NOW: [&str; 4] = [\"std\", \"time\", \"Instant\", \"now\"];\n pub const INSTANT: [&str; 3] = [\"std\", \"time\", \"Instant\"];\n+pub const VEC_IS_EMPTY: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"is_empty\"];\n+pub const VEC_POP: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"pop\"];\n+pub const OPTION_UNWRAP: [&str; 4] = [\"core\", \"option\", \"Option\", \"unwrap\"];\n+pub const OPTION_EXPECT: [&str; 4] = [\"core\", \"option\", \"Option\", \"expect\"];"}, {"sha": "c0d2c835d63d48d85f21f6eb583cb0b99df92a02", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -194,7 +194,9 @@ fn check_rvalue<'tcx>(\n                 ))\n             }\n         },\n-        Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf | NullOp::OffsetOf(_), _) | Rvalue::ShallowInitBox(_, _) => Ok(()),\n+        Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf | NullOp::OffsetOf(_), _) | Rvalue::ShallowInitBox(_, _) => {\n+            Ok(())\n+        },\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() {"}, {"sha": "14f7f03016fbe5605110f03918bccade6b086b06", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -162,7 +162,7 @@ impl<'a> Sugg<'a> {\n                 get_snippet(lhs.span),\n                 get_snippet(rhs.span),\n             ),\n-            hir::ExprKind::Cast(lhs, ty) => Sugg::BinOp(AssocOp::As, get_snippet(lhs.span), get_snippet(ty.span)),\n+            hir::ExprKind::Cast(lhs, ty) |\n             //FIXME(chenyukang), remove this after type ascription is removed from AST\n             hir::ExprKind::Type(lhs, ty) => Sugg::BinOp(AssocOp::As, get_snippet(lhs.span), get_snippet(ty.span)),\n         }\n@@ -254,11 +254,7 @@ impl<'a> Sugg<'a> {\n                 snippet_with_context(cx, lhs.span, ctxt, default, app).0,\n                 snippet_with_context(cx, rhs.span, ctxt, default, app).0,\n             ),\n-            ast::ExprKind::Cast(ref lhs, ref ty) => Sugg::BinOp(\n-                AssocOp::As,\n-                snippet_with_context(cx, lhs.span, ctxt, default, app).0,\n-                snippet_with_context(cx, ty.span, ctxt, default, app).0,\n-            ),\n+            ast::ExprKind::Cast(ref lhs, ref ty) |\n             //FIXME(chenyukang), remove this after type ascription is removed from AST\n             ast::ExprKind::Type(ref lhs, ref ty) => Sugg::BinOp(\n                 AssocOp::As,\n@@ -603,8 +599,8 @@ enum Associativity {\n #[must_use]\n fn associativity(op: AssocOp) -> Associativity {\n     use rustc_ast::util::parser::AssocOp::{\n-        Add, As, Assign, AssignOp, BitAnd, BitOr, BitXor, Divide, DotDot, DotDotEq, Equal, Greater,\n-        GreaterEqual, LAnd, LOr, Less, LessEqual, Modulus, Multiply, NotEqual, ShiftLeft, ShiftRight, Subtract,\n+        Add, As, Assign, AssignOp, BitAnd, BitOr, BitXor, Divide, DotDot, DotDotEq, Equal, Greater, GreaterEqual, LAnd,\n+        LOr, Less, LessEqual, Modulus, Multiply, NotEqual, ShiftLeft, ShiftRight, Subtract,\n     };\n \n     match op {"}, {"sha": "7b4ed77e8edb9eac7570078f927f40c03f48f105", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -93,7 +93,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                     for (predicate, _span) in cx.tcx.explicit_item_bounds(def_id).subst_identity_iter_copied() {\n                         match predicate.kind().skip_binder() {\n                             // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n-                            // and check substituions to find `U`.\n+                            // and check substitutions to find `U`.\n                             ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) => {\n                                 if trait_predicate\n                                     .trait_ref\n@@ -837,7 +837,7 @@ pub fn is_c_void(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n     if let ty::Adt(adt, _) = ty.kind()\n         && let &[krate, .., name] = &*cx.get_def_path(adt.did())\n         && let sym::libc | sym::core | sym::std = krate\n-        && name.as_str() == \"c_void\"\n+        && name == rustc_span::sym::c_void\n     {\n         true\n     } else {\n@@ -1101,7 +1101,7 @@ pub fn make_projection<'tcx>(\n ///\n /// This function is for associated types which are \"known\" to be valid with the given\n /// substitutions, and as such, will only return `None` when debug assertions are disabled in order\n-/// to prevent ICE's. With debug assertions enabled this will check that that type normalization\n+/// to prevent ICE's. With debug assertions enabled this will check that type normalization\n /// succeeds as well as everything checked by `make_projection`.\n pub fn make_normalized_projection<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "139102798c42a398fcf338fc2784bbcb20a0c492", "filename": "declare_clippy_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/declare_clippy_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/declare_clippy_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/declare_clippy_lint%2FCargo.toml?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"declare_clippy_lint\"\n-version = \"0.1.70\"\n+version = \"0.1.71\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "37cc045380949e0b3a140a0a03a07aa1de39aa66", "filename": "lintcheck/README.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/lintcheck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/lintcheck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FREADME.md?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -79,9 +79,11 @@ is explicitly specified in the options.\n \n ### Fix mode\n You can run `cargo lintcheck --fix` which will run Clippy with `--fix` and\n-print a warning if Clippy's suggestions fail to apply (if the resulting code does not build).  \n+print a warning if Clippy's suggestions fail to apply (if the resulting code does not build). \n This lets us spot bad suggestions or false positives automatically in some cases.  \n \n+> Note: Fix mode implies `--all-targets`, so it can fix as much code as it can.\n+\n Please note that the target dir should be cleaned afterwards since clippy will modify\n the downloaded sources which can lead to unexpected results when running lintcheck again afterwards.\n "}, {"sha": "03d1877d6c64497aeaac07ce29ba8fe1d31f779f", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -421,7 +421,7 @@ impl Crate {\n             {\n                 let subcrate = &stderr[63..];\n                 println!(\n-                    \"ERROR: failed to apply some suggetion to {} / to (sub)crate {subcrate}\",\n+                    \"ERROR: failed to apply some suggestion to {} / to (sub)crate {subcrate}\",\n                     self.name\n                 );\n             }"}, {"sha": "188ff87abfc53e4cde41c1fa2919d6e7de015e66", "filename": "src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -13,7 +13,7 @@ Usage:\n \n Common options:\n     --no-deps                Run Clippy only on the given crate, without linting the dependencies\n-    --fix                    Automatically apply lint suggestions. This flag implies `--no-deps`\n+    --fix                    Automatically apply lint suggestions. This flag implies `--no-deps` and `--all-targets`\n     -h, --help               Print this message\n     -V, --version            Print version info and exit\n     --explain LINT           Print the documentation for a given lint"}, {"sha": "afde31face11349b87f43582d30d42cbd9e4181a", "filename": "tests/dogfood.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -39,7 +39,7 @@ fn dogfood_clippy() {\n     assert!(\n         failed_packages.is_empty(),\n         \"Dogfood failed for packages `{}`\",\n-        failed_packages.iter().format(\", \"),\n+        failed_packages.iter().join(\", \"),\n     );\n }\n "}, {"sha": "fc8038a090715590aa2e1d032077e4fb40cc215f", "filename": "tests/ui-toml/semicolon_block/both.fixed", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fboth.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fboth.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fboth.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,86 @@\n+//@run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()) };\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "52ce1f0387ee1d5ad4e3b1291bac422de1990909", "filename": "tests/ui-toml/semicolon_block/both.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fboth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fboth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fboth.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,86 @@\n+//@run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "2f58842eab01b1933d10f8a0530058c4e3bfba56", "filename": "tests/ui-toml/semicolon_block/both.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fboth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fboth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fboth.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,55 @@\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/both.rs:43:5\n+   |\n+LL |     { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::semicolon-outside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL -     { unit_fn_block(); }\n+LL +     { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/both.rs:44:5\n+   |\n+LL |     unsafe { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     unsafe { unit_fn_block(); }\n+LL +     unsafe { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/both.rs:49:5\n+   |\n+LL | /     {\n+LL | |         unit_fn_block();\n+LL | |         unit_fn_block()\n+LL | |     };\n+   | |______^\n+   |\n+   = note: `-D clippy::semicolon-inside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL ~         unit_fn_block();\n+LL ~     }\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/both.rs:63:5\n+   |\n+LL |     { m!(()); }\n+   |     ^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     { m!(()); }\n+LL +     { m!(()) };\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "4d03e88deba8a95f19109e8bdce65096a35fed74", "filename": "tests/ui-toml/semicolon_block/clippy.toml", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fclippy.toml?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,2 @@\n+semicolon-inside-block-ignore-singleline = true\n+semicolon-outside-block-ignore-multiline = true"}, {"sha": "23df9830177359ebdb797d0c0e5110b6ea6b11b6", "filename": "tests/ui-toml/semicolon_block/semicolon_inside_block.fixed", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,85 @@\n+//@run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "e8516f79b20cde60d35cc611f152a4817430b2eb", "filename": "tests/ui-toml/semicolon_block/semicolon_inside_block.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,85 @@\n+//@run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "2569dc4b4e4530f1ab37a7fc21284d761f6c1b7d", "filename": "tests/ui-toml/semicolon_block/semicolon_inside_block.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,18 @@\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_inside_block.rs:48:5\n+   |\n+LL | /     {\n+LL | |         unit_fn_block();\n+LL | |         unit_fn_block()\n+LL | |     };\n+   | |______^\n+   |\n+   = note: `-D clippy::semicolon-inside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL ~         unit_fn_block();\n+LL ~     }\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "7e9055e71106aff3f8be5036359aea19210135cc", "filename": "tests/ui-toml/semicolon_block/semicolon_outside_block.fixed", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,85 @@\n+//@run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()) };\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "4dc956d8a4b51773bad95b87afa1774ce1b2229c", "filename": "tests/ui-toml/semicolon_block/semicolon_outside_block.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,85 @@\n+//@run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "6dd3577dd09f06812829e50f1a07cba32b4a356a", "filename": "tests/ui-toml/semicolon_block/semicolon_outside_block.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,39 @@\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:42:5\n+   |\n+LL |     { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::semicolon-outside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL -     { unit_fn_block(); }\n+LL +     { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:43:5\n+   |\n+LL |     unsafe { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     unsafe { unit_fn_block(); }\n+LL +     unsafe { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:62:5\n+   |\n+LL |     { m!(()); }\n+   |     ^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     { m!(()); }\n+LL +     { m!(()) };\n+   |\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "44710b09648eeb91accaa2d4761fc4be1410e08b", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -37,6 +37,8 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            missing-docs-in-crate-items\n            msrv\n            pass-by-value-size-limit\n+           semicolon-inside-block-ignore-singleline\n+           semicolon-outside-block-ignore-multiline\n            single-char-binding-names-threshold\n            standard-macro-braces\n            suppress-restriction-lint-in-const"}, {"sha": "5c3407628be27408ec55fcd717667c2b3d91ceae", "filename": "tests/ui/allow_attributes_false_positive.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fallow_attributes_false_positive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fallow_attributes_false_positive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fallow_attributes_false_positive.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,5 @@\n+#![warn(clippy::allow_attributes)]\n+#![feature(lint_reasons)]\n+#![crate_type = \"proc-macro\"]\n+\n+fn main() {}"}, {"sha": "e5bb906663c564d65674e91fa6239dc49adb2da5", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -21,6 +21,13 @@ macro_rules! string_add {\n     };\n }\n \n+#[macro_export]\n+macro_rules! string_lit_as_bytes {\n+    ($s:literal) => {\n+        const C: &[u8] = $s.as_bytes();\n+    };\n+}\n+\n #[macro_export]\n macro_rules! mut_mut {\n     () => {"}, {"sha": "d164dd0e54505d556dd48c32d280e94178cb735e", "filename": "tests/ui/auxiliary/proc_macro_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -82,7 +82,7 @@ pub fn rename_my_lifetimes(_args: TokenStream, input: TokenStream) -> TokenStrea\n                     elided += 1;\n \n                     // HACK: Syn uses `Span` from the proc_macro2 crate, and does not seem to reexport it.\n-                    // In order to avoid adding the dependency, get a default span from a non-existent token.\n+                    // In order to avoid adding the dependency, get a default span from a nonexistent token.\n                     // A default span is needed to mark the code as coming from expansion.\n                     let span = Star::default().span();\n "}, {"sha": "fbb10a133e2b0a5a83a81fccf0ad618e969cb555", "filename": "tests/ui/bool_to_int_with_if.fixed", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fbool_to_int_with_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fbool_to_int_with_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,6 +1,6 @@\n //@run-rustfix\n \n-#![feature(let_chains)]\n+#![feature(let_chains, inline_const)]\n #![warn(clippy::bool_to_int_with_if)]\n #![allow(unused, dead_code, clippy::unnecessary_operation, clippy::no_effect)]\n \n@@ -79,6 +79,13 @@ fn main() {\n \n     pub const SHOULD_NOT_LINT: usize = if true { 1 } else { 0 };\n \n+    // https://github.com/rust-lang/rust-clippy/issues/10452\n+    let should_not_lint = [(); if true { 1 } else { 0 }];\n+\n+    let should_not_lint = const {\n+        if true { 1 } else { 0 }\n+    };\n+\n     some_fn(a);\n }\n "}, {"sha": "709a18d63e401c00f5f7a2d974dfaef8fd3d80cf", "filename": "tests/ui/bool_to_int_with_if.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fbool_to_int_with_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fbool_to_int_with_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,6 +1,6 @@\n //@run-rustfix\n \n-#![feature(let_chains)]\n+#![feature(let_chains, inline_const)]\n #![warn(clippy::bool_to_int_with_if)]\n #![allow(unused, dead_code, clippy::unnecessary_operation, clippy::no_effect)]\n \n@@ -111,6 +111,13 @@ fn main() {\n \n     pub const SHOULD_NOT_LINT: usize = if true { 1 } else { 0 };\n \n+    // https://github.com/rust-lang/rust-clippy/issues/10452\n+    let should_not_lint = [(); if true { 1 } else { 0 }];\n+\n+    let should_not_lint = const {\n+        if true { 1 } else { 0 }\n+    };\n+\n     some_fn(a);\n }\n "}, {"sha": "3bdae75cad22b037d7d03c1325a3663ea0a0e2a6", "filename": "tests/ui/bool_to_int_with_if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fbool_to_int_with_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fbool_to_int_with_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -98,7 +98,7 @@ LL | |     };\n    = note: `!b as i32` or `(!b).into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:119:5\n+  --> $DIR/bool_to_int_with_if.rs:126:5\n    |\n LL |     if a { 1 } else { 0 }\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: replace with from: `u8::from(a)`"}, {"sha": "e6331290420b47bb5604792fc516a6e755c7112f", "filename": "tests/ui/box_default.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fbox_default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fbox_default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,5 +1,6 @@\n //@run-rustfix\n #![warn(clippy::box_default)]\n+#![allow(clippy::default_constructed_unit_structs)]\n \n #[derive(Default)]\n struct ImplementsDefault;"}, {"sha": "34a05a29c5aa343ff21993aaf256833c2639ef4c", "filename": "tests/ui/box_default.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,5 +1,6 @@\n //@run-rustfix\n #![warn(clippy::box_default)]\n+#![allow(clippy::default_constructed_unit_structs)]\n \n #[derive(Default)]\n struct ImplementsDefault;"}, {"sha": "c9834863601446b21d7325d316111a70ad10e79e", "filename": "tests/ui/box_default.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fbox_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fbox_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,97 +1,97 @@\n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:22:32\n+  --> $DIR/box_default.rs:23:32\n    |\n LL |     let _string: Box<String> = Box::new(Default::default());\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n    |\n    = note: `-D clippy::box-default` implied by `-D warnings`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:23:17\n+  --> $DIR/box_default.rs:24:17\n    |\n LL |     let _byte = Box::new(u8::default());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<u8>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:24:16\n+  --> $DIR/box_default.rs:25:16\n    |\n LL |     let _vec = Box::new(Vec::<u8>::new());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<Vec<u8>>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:25:17\n+  --> $DIR/box_default.rs:26:17\n    |\n LL |     let _impl = Box::new(ImplementsDefault::default());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:26:18\n+  --> $DIR/box_default.rs:27:18\n    |\n LL |     let _impl2 = Box::new(<ImplementsDefault as Default>::default());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:27:42\n+  --> $DIR/box_default.rs:28:42\n    |\n LL |     let _impl3: Box<ImplementsDefault> = Box::new(Default::default());\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:29:28\n+  --> $DIR/box_default.rs:30:28\n    |\n LL |     let _in_macro = outer!(Box::new(String::new()));\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<String>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:30:34\n+  --> $DIR/box_default.rs:31:34\n    |\n LL |     let _string_default = outer!(Box::new(String::from(\"\")));\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<String>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:31:46\n+  --> $DIR/box_default.rs:32:46\n    |\n LL |     let _vec2: Box<Vec<ImplementsDefault>> = Box::new(vec![]);\n    |                                              ^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:32:33\n+  --> $DIR/box_default.rs:33:33\n    |\n LL |     let _vec3: Box<Vec<bool>> = Box::new(Vec::from([]));\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:33:25\n+  --> $DIR/box_default.rs:34:25\n    |\n LL |     let _vec4: Box<_> = Box::new(Vec::from([false; 0]));\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<Vec<bool>>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:35:16\n+  --> $DIR/box_default.rs:36:16\n    |\n LL |     call_ty_fn(Box::new(u8::default()));\n    |                ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:40:5\n+  --> $DIR/box_default.rs:41:5\n    |\n LL |     Box::new(bool::default())\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<bool>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:57:28\n+  --> $DIR/box_default.rs:58:28\n    |\n LL |     let _: Box<dyn Read> = Box::new(ImplementsDefault::default());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:66:17\n+  --> $DIR/box_default.rs:67:17\n    |\n LL |         let _ = Box::new(WeirdPathed::default());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<WeirdPathed>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:78:18\n+  --> $DIR/box_default.rs:79:18\n    |\n LL |             Some(Box::new(Foo::default()))\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<Foo>::default()`"}, {"sha": "b77f01883bf38f9ab16da9a63a5e760930b3a172", "filename": "tests/ui/cast_slice_different_sizes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_slice_different_sizes.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -23,7 +23,7 @@ fn main() {\n         r_x as *const [i32]\n     } as *const [u8];\n \n-    // Check that resores of the same size are detected through blocks\n+    // Check that resources of the same size are detected through blocks\n     let restore_block_1 = { r_x as *const [i32] } as *const [u8] as *const [u32];\n     let restore_block_2 = { ({ r_x as *const [i32] }) as *const [u8] } as *const [u32];\n     let restore_block_3 = {"}, {"sha": "4d8698d383ba51ec8ac67712109b87292daac0e4", "filename": "tests/ui/crashes/ice-10645.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fcrashes%2Fice-10645.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fcrashes%2Fice-10645.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-10645.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: --cap-lints=warn\n+// https://github.com/rust-lang/rust-clippy/issues/10645\n+\n+#![warn(clippy::future_not_send)]\n+pub async fn bar<'a, T: 'a>(_: T) {}\n+\n+fn main() {}"}, {"sha": "fc084e30d7fe8aff89f6f9c48f45ca86189b58f5", "filename": "tests/ui/crashes/ice-10645.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fcrashes%2Fice-10645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fcrashes%2Fice-10645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-10645.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,11 +1,11 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/ice-5207.rs:6:35\n+  --> $DIR/ice-10645.rs:5:35\n    |\n LL | pub async fn bar<'a, T: 'a>(_: T) {}\n    |                                   ^ future returned by `bar` is not `Send`\n    |\n note: captured value is not `Send`\n-  --> $DIR/ice-5207.rs:6:29\n+  --> $DIR/ice-10645.rs:5:29\n    |\n LL | pub async fn bar<'a, T: 'a>(_: T) {}\n    |                             ^ has type `T` which is not `Send`", "previous_filename": "tests/ui/crashes/ice-5207.stderr"}, {"sha": "0df8b88fea2f9a7dce7510de77a31736a4cd1651", "filename": "tests/ui/crashes/ice-5207.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fcrashes%2Fice-5207.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fcrashes%2Fice-5207.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-5207.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,8 +1,4 @@\n-// compile-flags: --cap-lints=warn\n-// ^ for https://github.com/rust-lang/rust-clippy/issues/10645\n-\n // Regression test for https://github.com/rust-lang/rust-clippy/issues/5207\n-#![warn(clippy::future_not_send)]\n pub async fn bar<'a, T: 'a>(_: T) {}\n \n fn main() {}"}, {"sha": "30e4b11ec0bd450bcebc7c57465649e037f45e21", "filename": "tests/ui/crashes/ice_exact_size.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fcrashes%2Fice_exact_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fcrashes%2Fice_exact_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice_exact_size.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "previous_filename": "tests/ui/crashes/ice_exacte_size.rs"}, {"sha": "4c2d1ea48e1192284417b679e145ab4c3ba71423", "filename": "tests/ui/default_constructed_unit_structs.fixed", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fdefault_constructed_unit_structs.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fdefault_constructed_unit_structs.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_constructed_unit_structs.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,119 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::default_constructed_unit_structs)]\n+use std::marker::PhantomData;\n+\n+#[derive(Default)]\n+struct UnitStruct;\n+\n+impl UnitStruct {\n+    fn new() -> Self {\n+        //should lint\n+        Self\n+    }\n+}\n+\n+#[derive(Default)]\n+struct TupleStruct(usize);\n+\n+impl TupleStruct {\n+    fn new() -> Self {\n+        // should not lint\n+        Self(Default::default())\n+    }\n+}\n+\n+// no lint for derived impl\n+#[derive(Default)]\n+struct NormalStruct {\n+    inner: PhantomData<usize>,\n+}\n+\n+struct NonDefaultStruct;\n+\n+impl NonDefaultStruct {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+#[derive(Default)]\n+enum SomeEnum {\n+    #[default]\n+    Unit,\n+    Tuple(UnitStruct),\n+    Struct {\n+        inner: usize,\n+    },\n+}\n+\n+impl NormalStruct {\n+    fn new() -> Self {\n+        // should lint\n+        Self {\n+            inner: PhantomData,\n+        }\n+    }\n+\n+    fn new2() -> Self {\n+        // should not lint\n+        Self {\n+            inner: Default::default(),\n+        }\n+    }\n+}\n+\n+#[derive(Default)]\n+struct GenericStruct<T> {\n+    t: T,\n+}\n+\n+impl<T: Default> GenericStruct<T> {\n+    fn new() -> Self {\n+        // should not lint\n+        Self { t: T::default() }\n+    }\n+\n+    fn new2() -> Self {\n+        // should not lint\n+        Self { t: Default::default() }\n+    }\n+}\n+\n+struct FakeDefault;\n+impl FakeDefault {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+impl Default for FakeDefault {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+#[derive(Default)]\n+struct EmptyStruct {}\n+\n+#[derive(Default)]\n+#[non_exhaustive]\n+struct NonExhaustiveStruct;\n+\n+fn main() {\n+    // should lint\n+    let _ = PhantomData::<usize>;\n+    let _: PhantomData<i32> = PhantomData;\n+    let _ = UnitStruct;\n+\n+    // should not lint\n+    let _ = TupleStruct::default();\n+    let _ = NormalStruct::default();\n+    let _ = NonExhaustiveStruct::default();\n+    let _ = SomeEnum::default();\n+    let _ = NonDefaultStruct::default();\n+    let _ = EmptyStruct::default();\n+    let _ = FakeDefault::default();\n+    let _ = <FakeDefault as Default>::default();\n+}"}, {"sha": "850793dd5de81a32e4494474240adfc02d90ac05", "filename": "tests/ui/default_constructed_unit_structs.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fdefault_constructed_unit_structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fdefault_constructed_unit_structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_constructed_unit_structs.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,119 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::default_constructed_unit_structs)]\n+use std::marker::PhantomData;\n+\n+#[derive(Default)]\n+struct UnitStruct;\n+\n+impl UnitStruct {\n+    fn new() -> Self {\n+        //should lint\n+        Self::default()\n+    }\n+}\n+\n+#[derive(Default)]\n+struct TupleStruct(usize);\n+\n+impl TupleStruct {\n+    fn new() -> Self {\n+        // should not lint\n+        Self(Default::default())\n+    }\n+}\n+\n+// no lint for derived impl\n+#[derive(Default)]\n+struct NormalStruct {\n+    inner: PhantomData<usize>,\n+}\n+\n+struct NonDefaultStruct;\n+\n+impl NonDefaultStruct {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+#[derive(Default)]\n+enum SomeEnum {\n+    #[default]\n+    Unit,\n+    Tuple(UnitStruct),\n+    Struct {\n+        inner: usize,\n+    },\n+}\n+\n+impl NormalStruct {\n+    fn new() -> Self {\n+        // should lint\n+        Self {\n+            inner: PhantomData::default(),\n+        }\n+    }\n+\n+    fn new2() -> Self {\n+        // should not lint\n+        Self {\n+            inner: Default::default(),\n+        }\n+    }\n+}\n+\n+#[derive(Default)]\n+struct GenericStruct<T> {\n+    t: T,\n+}\n+\n+impl<T: Default> GenericStruct<T> {\n+    fn new() -> Self {\n+        // should not lint\n+        Self { t: T::default() }\n+    }\n+\n+    fn new2() -> Self {\n+        // should not lint\n+        Self { t: Default::default() }\n+    }\n+}\n+\n+struct FakeDefault;\n+impl FakeDefault {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+impl Default for FakeDefault {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+#[derive(Default)]\n+struct EmptyStruct {}\n+\n+#[derive(Default)]\n+#[non_exhaustive]\n+struct NonExhaustiveStruct;\n+\n+fn main() {\n+    // should lint\n+    let _ = PhantomData::<usize>::default();\n+    let _: PhantomData<i32> = PhantomData::default();\n+    let _ = UnitStruct::default();\n+\n+    // should not lint\n+    let _ = TupleStruct::default();\n+    let _ = NormalStruct::default();\n+    let _ = NonExhaustiveStruct::default();\n+    let _ = SomeEnum::default();\n+    let _ = NonDefaultStruct::default();\n+    let _ = EmptyStruct::default();\n+    let _ = FakeDefault::default();\n+    let _ = <FakeDefault as Default>::default();\n+}"}, {"sha": "4058943d08727eae7a8aa072c234b39396e1c49a", "filename": "tests/ui/default_constructed_unit_structs.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fdefault_constructed_unit_structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fdefault_constructed_unit_structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_constructed_unit_structs.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,34 @@\n+error: use of `default` to create a unit struct\n+  --> $DIR/default_constructed_unit_structs.rs:13:13\n+   |\n+LL |         Self::default()\n+   |             ^^^^^^^^^^^ help: remove this call to `default`\n+   |\n+   = note: `-D clippy::default-constructed-unit-structs` implied by `-D warnings`\n+\n+error: use of `default` to create a unit struct\n+  --> $DIR/default_constructed_unit_structs.rs:55:31\n+   |\n+LL |             inner: PhantomData::default(),\n+   |                               ^^^^^^^^^^^ help: remove this call to `default`\n+\n+error: use of `default` to create a unit struct\n+  --> $DIR/default_constructed_unit_structs.rs:106:33\n+   |\n+LL |     let _ = PhantomData::<usize>::default();\n+   |                                 ^^^^^^^^^^^ help: remove this call to `default`\n+\n+error: use of `default` to create a unit struct\n+  --> $DIR/default_constructed_unit_structs.rs:107:42\n+   |\n+LL |     let _: PhantomData<i32> = PhantomData::default();\n+   |                                          ^^^^^^^^^^^ help: remove this call to `default`\n+\n+error: use of `default` to create a unit struct\n+  --> $DIR/default_constructed_unit_structs.rs:108:23\n+   |\n+LL |     let _ = UnitStruct::default();\n+   |                       ^^^^^^^^^^^ help: remove this call to `default`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "843e1df8bc6bbf77d73c70f67e0f8ca45948ad6e", "filename": "tests/ui/derive.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,7 +1,6 @@\n #![allow(dead_code)]\n #![warn(clippy::expl_impl_clone_on_copy)]\n \n-\n #[derive(Copy)]\n struct Qux;\n "}, {"sha": "d37f7fa73319679e97a2c61f67cfae6cd3eee762", "filename": "tests/ui/derive.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,5 +1,5 @@\n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:8:1\n+  --> $DIR/derive.rs:7:1\n    |\n LL | / impl Clone for Qux {\n LL | |     fn clone(&self) -> Self {\n@@ -9,7 +9,7 @@ LL | | }\n    | |_^\n    |\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:8:1\n+  --> $DIR/derive.rs:7:1\n    |\n LL | / impl Clone for Qux {\n LL | |     fn clone(&self) -> Self {\n@@ -20,7 +20,7 @@ LL | | }\n    = note: `-D clippy::expl-impl-clone-on-copy` implied by `-D warnings`\n \n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:32:1\n+  --> $DIR/derive.rs:31:1\n    |\n LL | / impl<'a> Clone for Lt<'a> {\n LL | |     fn clone(&self) -> Self {\n@@ -30,7 +30,7 @@ LL | | }\n    | |_^\n    |\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:32:1\n+  --> $DIR/derive.rs:31:1\n    |\n LL | / impl<'a> Clone for Lt<'a> {\n LL | |     fn clone(&self) -> Self {\n@@ -40,7 +40,7 @@ LL | | }\n    | |_^\n \n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:43:1\n+  --> $DIR/derive.rs:42:1\n    |\n LL | / impl Clone for BigArray {\n LL | |     fn clone(&self) -> Self {\n@@ -50,7 +50,7 @@ LL | | }\n    | |_^\n    |\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:43:1\n+  --> $DIR/derive.rs:42:1\n    |\n LL | / impl Clone for BigArray {\n LL | |     fn clone(&self) -> Self {\n@@ -60,7 +60,7 @@ LL | | }\n    | |_^\n \n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:54:1\n+  --> $DIR/derive.rs:53:1\n    |\n LL | / impl Clone for FnPtr {\n LL | |     fn clone(&self) -> Self {\n@@ -70,7 +70,7 @@ LL | | }\n    | |_^\n    |\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:54:1\n+  --> $DIR/derive.rs:53:1\n    |\n LL | / impl Clone for FnPtr {\n LL | |     fn clone(&self) -> Self {\n@@ -80,7 +80,7 @@ LL | | }\n    | |_^\n \n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:74:1\n+  --> $DIR/derive.rs:73:1\n    |\n LL | / impl<T: Clone> Clone for Generic2<T> {\n LL | |     fn clone(&self) -> Self {\n@@ -90,7 +90,7 @@ LL | | }\n    | |_^\n    |\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:74:1\n+  --> $DIR/derive.rs:73:1\n    |\n LL | / impl<T: Clone> Clone for Generic2<T> {\n LL | |     fn clone(&self) -> Self {"}, {"sha": "018f875d60bfa24ec5fd1a625b84d7cb9c457e66", "filename": "tests/ui/expect_tool_lint_rfc_2383.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fexpect_tool_lint_rfc_2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fexpect_tool_lint_rfc_2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_tool_lint_rfc_2383.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -22,9 +22,9 @@ mod rustc_ok {\n \n         #[expect(illegal_floating_point_literal_pattern)]\n         match x {\n-            5.0 => {}\n-            6.0 => {}\n-            _ => {}\n+            5.0 => {},\n+            6.0 => {},\n+            _ => {},\n         }\n     }\n }\n@@ -38,9 +38,9 @@ mod rustc_warn {\n \n         #[expect(illegal_floating_point_literal_pattern)]\n         match x {\n-            5 => {}\n-            6 => {}\n-            _ => {}\n+            5 => {},\n+            6 => {},\n+            _ => {},\n         }\n     }\n }"}, {"sha": "a42c6383ccea2091126a93dfc2cfef371b534640", "filename": "tests/ui/floating_point_arithmetic_nostd.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ffloating_point_arithmetic_nostd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ffloating_point_arithmetic_nostd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_arithmetic_nostd.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,31 @@\n+#![feature(lang_items, start)]\n+#![warn(clippy::imprecise_flops)]\n+#![warn(clippy::suboptimal_flops)]\n+#![no_std]\n+\n+// The following should not lint, as the suggested methods {f32,f64}.mul_add()\n+// and {f32,f64}::abs() are not available in no_std\n+\n+pub fn mul_add() {\n+    let a: f64 = 1234.567;\n+    let b: f64 = 45.67834;\n+    let c: f64 = 0.0004;\n+    let _ = a * b + c;\n+}\n+\n+fn fake_abs1(num: f64) -> f64 {\n+    if num >= 0.0 { num } else { -num }\n+}\n+\n+#[start]\n+fn main(_argc: isize, _argv: *const *const u8) -> isize {\n+    0\n+}\n+\n+#[panic_handler]\n+fn panic(_info: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+extern \"C\" fn eh_personality() {}"}, {"sha": "d18f93875658c90105d6cc7572c7facfdf915a46", "filename": "tests/ui/from_over_into.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ffrom_over_into.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ffrom_over_into.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -32,7 +32,7 @@ struct SelfKeywords;\n \n impl From<X> for SelfKeywords {\n     fn from(val: X) -> Self {\n-        let _ = X::default();\n+        let _ = X;\n         let _ = X::FOO;\n         let _: X = val;\n "}, {"sha": "de8ff0b06bdca3a744dc467aeaeda58f969673ce", "filename": "tests/ui/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -32,7 +32,7 @@ struct SelfKeywords;\n \n impl Into<SelfKeywords> for X {\n     fn into(self) -> SelfKeywords {\n-        let _ = Self::default();\n+        let _ = Self;\n         let _ = Self::FOO;\n         let _: Self = self;\n "}, {"sha": "6039f86fe6703d05d7f58b3f1d44be113287efec", "filename": "tests/ui/from_over_into.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ffrom_over_into.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ffrom_over_into.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -5,7 +5,7 @@ LL | impl Into<StringWrapper> for String {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::from-over-into` implied by `-D warnings`\n-help: replace the `Into` implentation with `From<std::string::String>`\n+help: replace the `Into` implementation with `From<std::string::String>`\n    |\n LL ~ impl From<String> for StringWrapper {\n LL ~     fn from(val: String) -> Self {\n@@ -18,7 +18,7 @@ error: an implementation of `From` is preferred since it gives you `Into<_>` for\n LL | impl Into<SelfType> for String {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: replace the `Into` implentation with `From<std::string::String>`\n+help: replace the `Into` implementation with `From<std::string::String>`\n    |\n LL ~ impl From<String> for SelfType {\n LL ~     fn from(val: String) -> Self {\n@@ -31,11 +31,11 @@ error: an implementation of `From` is preferred since it gives you `Into<_>` for\n LL | impl Into<SelfKeywords> for X {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: replace the `Into` implentation with `From<X>`\n+help: replace the `Into` implementation with `From<X>`\n    |\n LL ~ impl From<X> for SelfKeywords {\n LL ~     fn from(val: X) -> Self {\n-LL ~         let _ = X::default();\n+LL ~         let _ = X;\n LL ~         let _ = X::FOO;\n LL ~         let _: X = val;\n    |\n@@ -48,7 +48,7 @@ LL | impl core::convert::Into<bool> for crate::ExplicitPaths {\n    |\n    = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n            https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n-help: replace the `Into` implentation with `From<ExplicitPaths>`\n+help: replace the `Into` implementation with `From<ExplicitPaths>`\n    |\n LL ~ impl core::convert::From<crate::ExplicitPaths> for bool {\n LL ~     fn from(mut val: crate::ExplicitPaths) -> Self {\n@@ -64,7 +64,7 @@ error: an implementation of `From` is preferred since it gives you `Into<_>` for\n LL |     impl<T> Into<FromOverInto<T>> for Vec<T> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: replace the `Into` implentation with `From<std::vec::Vec<T>>`\n+help: replace the `Into` implementation with `From<std::vec::Vec<T>>`\n    |\n LL ~     impl<T> From<Vec<T>> for FromOverInto<T> {\n LL ~         fn from(val: Vec<T>) -> Self {"}, {"sha": "251f1d84e74e367bb4ba268bda75a176d26af35a", "filename": "tests/ui/from_over_into_unfixable.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ffrom_over_into_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ffrom_over_into_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into_unfixable.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -4,7 +4,7 @@ error: an implementation of `From` is preferred since it gives you `Into<_>` for\n LL | impl Into<InMacro> for String {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: replace the `Into` implentation with `From<std::string::String>`\n+   = help: replace the `Into` implementation with `From<std::string::String>`\n    = note: `-D clippy::from-over-into` implied by `-D warnings`\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n@@ -13,7 +13,7 @@ error: an implementation of `From` is preferred since it gives you `Into<_>` for\n LL | impl Into<WeirdUpperSelf> for &'static [u8] {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: replace the `Into` implentation with `From<&'static [u8]>`\n+   = help: replace the `Into` implementation with `From<&'static [u8]>`\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n   --> $DIR/from_over_into_unfixable.rs:28:1\n@@ -23,7 +23,7 @@ LL | impl Into<u8> for ContainsVal {\n    |\n    = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n            https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n-   = help: replace the `Into` implentation with `From<ContainsVal>`\n+   = help: replace the `Into` implementation with `From<ContainsVal>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "tests/ui/items_after_test_module/auxiliary/tests.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fitems_after_test_module%2Fauxiliary%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fitems_after_test_module%2Fauxiliary%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitems_after_test_module%2Fauxiliary%2Ftests.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}, {"sha": "5136b2557ec1a6d695b66a4b67181d7ea71f29c6", "filename": "tests/ui/items_after_test_module/block_module.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fitems_after_test_module%2Fblock_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fitems_after_test_module%2Fblock_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitems_after_test_module%2Fblock_module.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "previous_filename": "tests/ui/items_after_test_module.rs"}, {"sha": "597f1b9510c5649d464d9335dcd4e9cbf3500971", "filename": "tests/ui/items_after_test_module/block_module.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fitems_after_test_module%2Fblock_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fitems_after_test_module%2Fblock_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitems_after_test_module%2Fblock_module.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,5 +1,5 @@\n error: items were found after the testing module\n-  --> $DIR/items_after_test_module.rs:13:1\n+  --> $DIR/block_module.rs:13:1\n    |\n LL | / mod tests {\n LL | |     #[test]", "previous_filename": "tests/ui/items_after_test_module.stderr"}, {"sha": "6a757aef48e79cdcfbcf451bfe34fb96eda0c9bd", "filename": "tests/ui/items_after_test_module/imported_module.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fitems_after_test_module%2Fimported_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fitems_after_test_module%2Fimported_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitems_after_test_module%2Fimported_module.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,20 @@\n+//@compile-flags: --test\n+#![allow(unused)]\n+#![warn(clippy::items_after_test_module)]\n+\n+// Nothing here should lint, as `tests` is an imported module (that has no body).\n+\n+fn main() {}\n+\n+fn should_not_lint() {}\n+\n+#[path = \"auxiliary/tests.rs\"]\n+#[cfg(test)]\n+mod tests; // Should not lint\n+\n+fn should_not_lint2() {}\n+\n+const SHOULD_ALSO_NOT_LINT: usize = 1;\n+macro_rules! should_not_lint {\n+    () => {};\n+}"}, {"sha": "6844cb998f72a2a73896749c4b434c334f8eb454", "filename": "tests/ui/let_underscore_untyped.stderr", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Flet_underscore_untyped.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Flet_underscore_untyped.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_untyped.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -4,7 +4,11 @@ error: non-binding `let` without a type annotation\n LL |     let _ = a();\n    |     ^^^^^^^^^^^^\n    |\n-   = help: consider adding a type annotation or removing the `let` keyword\n+help: consider adding a type annotation\n+  --> $DIR/let_underscore_untyped.rs:36:10\n+   |\n+LL |     let _ = a();\n+   |          ^\n    = note: `-D clippy::let-underscore-untyped` implied by `-D warnings`\n \n error: non-binding `let` without a type annotation\n@@ -13,31 +17,47 @@ error: non-binding `let` without a type annotation\n LL |     let _ = b(1);\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: consider adding a type annotation or removing the `let` keyword\n+help: consider adding a type annotation\n+  --> $DIR/let_underscore_untyped.rs:37:10\n+   |\n+LL |     let _ = b(1);\n+   |          ^\n \n error: non-binding `let` without a type annotation\n   --> $DIR/let_underscore_untyped.rs:39:5\n    |\n LL |     let _ = d(&1);\n    |     ^^^^^^^^^^^^^^\n    |\n-   = help: consider adding a type annotation or removing the `let` keyword\n+help: consider adding a type annotation\n+  --> $DIR/let_underscore_untyped.rs:39:10\n+   |\n+LL |     let _ = d(&1);\n+   |          ^\n \n error: non-binding `let` without a type annotation\n   --> $DIR/let_underscore_untyped.rs:40:5\n    |\n LL |     let _ = e();\n    |     ^^^^^^^^^^^^\n    |\n-   = help: consider adding a type annotation or removing the `let` keyword\n+help: consider adding a type annotation\n+  --> $DIR/let_underscore_untyped.rs:40:10\n+   |\n+LL |     let _ = e();\n+   |          ^\n \n error: non-binding `let` without a type annotation\n   --> $DIR/let_underscore_untyped.rs:41:5\n    |\n LL |     let _ = f();\n    |     ^^^^^^^^^^^^\n    |\n-   = help: consider adding a type annotation or removing the `let` keyword\n+help: consider adding a type annotation\n+  --> $DIR/let_underscore_untyped.rs:41:10\n+   |\n+LL |     let _ = f();\n+   |          ^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "7c1835e8cd18f994ca672d613b05bf30d9f31297", "filename": "tests/ui/let_with_type_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Flet_with_type_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Flet_with_type_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_with_type_underscore.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let _: _ = 2;\n     let x: _ = func();\n \n-    let x = 1; // Will not lint, Rust inferres this to an integer before Clippy\n+    let x = 1; // Will not lint, Rust infers this to an integer before Clippy\n     let x = func();\n     let x: Vec<_> = Vec::<u32>::new();\n     let x: [_; 1] = [1];"}, {"sha": "09fb0d758524e7ffdcfcd5942528a230b1105f28", "filename": "tests/ui/manual_retain.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fmanual_retain.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fmanual_retain.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_retain.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -23,8 +23,8 @@ fn main() {\n }\n \n fn binary_heap_retain() {\n-    // NOTE: Do not lint now, because binary_heap_retain is nighyly API.\n-    // And we need to add a test case for msrv if we update this implmention.\n+    // NOTE: Do not lint now, because binary_heap_retain is nightly API.\n+    // And we need to add a test case for msrv if we update this implementation.\n     // https://github.com/rust-lang/rust/issues/71503\n     let mut heap = BinaryHeap::from([1, 2, 3]);\n     heap = heap.into_iter().filter(|x| x % 2 == 0).collect();"}, {"sha": "7fee4c95cea5a2fe87bca841bbc98aff702381bb", "filename": "tests/ui/manual_retain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_retain.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -23,8 +23,8 @@ fn main() {\n }\n \n fn binary_heap_retain() {\n-    // NOTE: Do not lint now, because binary_heap_retain is nighyly API.\n-    // And we need to add a test case for msrv if we update this implmention.\n+    // NOTE: Do not lint now, because binary_heap_retain is nightly API.\n+    // And we need to add a test case for msrv if we update this implementation.\n     // https://github.com/rust-lang/rust/issues/71503\n     let mut heap = BinaryHeap::from([1, 2, 3]);\n     heap = heap.into_iter().filter(|x| x % 2 == 0).collect();"}, {"sha": "8b610919536c0fc26a827b8c722d71bb078de434", "filename": "tests/ui/manual_while_let_some.fixed", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fmanual_while_let_some.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fmanual_while_let_some.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_while_let_some.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,93 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::manual_while_let_some)]\n+\n+struct VecInStruct {\n+    numbers: Vec<i32>,\n+    unrelated: String,\n+}\n+\n+struct Foo {\n+    a: i32,\n+    b: i32,\n+}\n+\n+fn accept_i32(_: i32) {}\n+fn accept_optional_i32(_: Option<i32>) {}\n+fn accept_i32_tuple(_: (i32, i32)) {}\n+\n+fn main() {\n+    let mut numbers = vec![1, 2, 3, 4, 5];\n+    while let Some(number) = numbers.pop() {\n+        \n+    }\n+\n+    let mut val = VecInStruct {\n+        numbers: vec![1, 2, 3, 4, 5],\n+        unrelated: String::new(),\n+    };\n+    while let Some(number) = val.numbers.pop() {\n+        \n+    }\n+\n+    while let Some(element) = numbers.pop() {\n+        accept_i32(element);\n+    }\n+\n+    while let Some(element) = numbers.pop() {\n+        accept_i32(element);\n+    }\n+\n+    // This should not warn. It \"conditionally\" pops elements.\n+    while !numbers.is_empty() {\n+        if true {\n+            accept_i32(numbers.pop().unwrap());\n+        }\n+    }\n+\n+    // This should also not warn. It conditionally pops elements.\n+    while !numbers.is_empty() {\n+        if false {\n+            continue;\n+        }\n+        accept_i32(numbers.pop().unwrap());\n+    }\n+\n+    // This should not warn. It pops elements, but does not unwrap it.\n+    // Might handle the Option in some other arbitrary way.\n+    while !numbers.is_empty() {\n+        accept_optional_i32(numbers.pop());\n+    }\n+\n+    let unrelated_vec: Vec<String> = Vec::new();\n+    // This should not warn. It pops elements from a different vector.\n+    while !unrelated_vec.is_empty() {\n+        accept_i32(numbers.pop().unwrap());\n+    }\n+\n+    macro_rules! generate_loop {\n+        () => {\n+            while !numbers.is_empty() {\n+                accept_i32(numbers.pop().unwrap());\n+            }\n+        };\n+    }\n+    // Do not warn if the loop comes from a macro.\n+    generate_loop!();\n+\n+    // Try other kinds of patterns\n+    let mut numbers = vec![(0, 0), (1, 1), (2, 2)];\n+    while let Some((a, b)) = numbers.pop() {\n+        \n+    }\n+\n+    while let Some(element) = numbers.pop() {\n+        accept_i32_tuple(element);\n+    }\n+\n+    let mut results = vec![Foo { a: 1, b: 2 }, Foo { a: 3, b: 4 }];\n+    while let Some(Foo { a, b }) = results.pop() {\n+        \n+    }\n+}"}, {"sha": "85a0a084a424ff8d7624b712dc2c049c70142111", "filename": "tests/ui/manual_while_let_some.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fmanual_while_let_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fmanual_while_let_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_while_let_some.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,93 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::manual_while_let_some)]\n+\n+struct VecInStruct {\n+    numbers: Vec<i32>,\n+    unrelated: String,\n+}\n+\n+struct Foo {\n+    a: i32,\n+    b: i32,\n+}\n+\n+fn accept_i32(_: i32) {}\n+fn accept_optional_i32(_: Option<i32>) {}\n+fn accept_i32_tuple(_: (i32, i32)) {}\n+\n+fn main() {\n+    let mut numbers = vec![1, 2, 3, 4, 5];\n+    while !numbers.is_empty() {\n+        let number = numbers.pop().unwrap();\n+    }\n+\n+    let mut val = VecInStruct {\n+        numbers: vec![1, 2, 3, 4, 5],\n+        unrelated: String::new(),\n+    };\n+    while !val.numbers.is_empty() {\n+        let number = val.numbers.pop().unwrap();\n+    }\n+\n+    while !numbers.is_empty() {\n+        accept_i32(numbers.pop().unwrap());\n+    }\n+\n+    while !numbers.is_empty() {\n+        accept_i32(numbers.pop().expect(\"\"));\n+    }\n+\n+    // This should not warn. It \"conditionally\" pops elements.\n+    while !numbers.is_empty() {\n+        if true {\n+            accept_i32(numbers.pop().unwrap());\n+        }\n+    }\n+\n+    // This should also not warn. It conditionally pops elements.\n+    while !numbers.is_empty() {\n+        if false {\n+            continue;\n+        }\n+        accept_i32(numbers.pop().unwrap());\n+    }\n+\n+    // This should not warn. It pops elements, but does not unwrap it.\n+    // Might handle the Option in some other arbitrary way.\n+    while !numbers.is_empty() {\n+        accept_optional_i32(numbers.pop());\n+    }\n+\n+    let unrelated_vec: Vec<String> = Vec::new();\n+    // This should not warn. It pops elements from a different vector.\n+    while !unrelated_vec.is_empty() {\n+        accept_i32(numbers.pop().unwrap());\n+    }\n+\n+    macro_rules! generate_loop {\n+        () => {\n+            while !numbers.is_empty() {\n+                accept_i32(numbers.pop().unwrap());\n+            }\n+        };\n+    }\n+    // Do not warn if the loop comes from a macro.\n+    generate_loop!();\n+\n+    // Try other kinds of patterns\n+    let mut numbers = vec![(0, 0), (1, 1), (2, 2)];\n+    while !numbers.is_empty() {\n+        let (a, b) = numbers.pop().unwrap();\n+    }\n+\n+    while !numbers.is_empty() {\n+        accept_i32_tuple(numbers.pop().unwrap());\n+    }\n+\n+    let mut results = vec![Foo { a: 1, b: 2 }, Foo { a: 3, b: 4 }];\n+    while !results.is_empty() {\n+        let Foo { a, b } = results.pop().unwrap();\n+    }\n+}"}, {"sha": "633fe05c49b840c62c03045c1003822edcd020fb", "filename": "tests/ui/manual_while_let_some.stderr", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fmanual_while_let_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fmanual_while_let_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_while_let_some.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,87 @@\n+error: you seem to be trying to pop elements from a `Vec` in a loop\n+  --> $DIR/manual_while_let_some.rs:23:9\n+   |\n+LL |         let number = numbers.pop().unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::manual-while-let-some` implied by `-D warnings`\n+help: consider using a `while..let` loop\n+   |\n+LL ~     while let Some(number) = numbers.pop() {\n+LL ~         \n+   |\n+\n+error: you seem to be trying to pop elements from a `Vec` in a loop\n+  --> $DIR/manual_while_let_some.rs:31:9\n+   |\n+LL |         let number = val.numbers.pop().unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using a `while..let` loop\n+   |\n+LL ~     while let Some(number) = val.numbers.pop() {\n+LL ~         \n+   |\n+\n+error: you seem to be trying to pop elements from a `Vec` in a loop\n+  --> $DIR/manual_while_let_some.rs:35:20\n+   |\n+LL |         accept_i32(numbers.pop().unwrap());\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using a `while..let` loop\n+   |\n+LL ~     while let Some(element) = numbers.pop() {\n+LL ~         accept_i32(element);\n+   |\n+\n+error: you seem to be trying to pop elements from a `Vec` in a loop\n+  --> $DIR/manual_while_let_some.rs:39:20\n+   |\n+LL |         accept_i32(numbers.pop().expect(\"\"));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using a `while..let` loop\n+   |\n+LL ~     while let Some(element) = numbers.pop() {\n+LL ~         accept_i32(element);\n+   |\n+\n+error: you seem to be trying to pop elements from a `Vec` in a loop\n+  --> $DIR/manual_while_let_some.rs:82:9\n+   |\n+LL |         let (a, b) = numbers.pop().unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using a `while..let` loop\n+   |\n+LL ~     while let Some((a, b)) = numbers.pop() {\n+LL ~         \n+   |\n+\n+error: you seem to be trying to pop elements from a `Vec` in a loop\n+  --> $DIR/manual_while_let_some.rs:86:26\n+   |\n+LL |         accept_i32_tuple(numbers.pop().unwrap());\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using a `while..let` loop\n+   |\n+LL ~     while let Some(element) = numbers.pop() {\n+LL ~         accept_i32_tuple(element);\n+   |\n+\n+error: you seem to be trying to pop elements from a `Vec` in a loop\n+  --> $DIR/manual_while_let_some.rs:91:9\n+   |\n+LL |         let Foo { a, b } = results.pop().unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using a `while..let` loop\n+   |\n+LL ~     while let Some(Foo { a, b }) = results.pop() {\n+LL ~         \n+   |\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "3ed31d4d711fac4b0ce60d5e583cb3fa7b2553d3", "filename": "tests/ui/needless_bool_assign.fixed", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fneedless_bool_assign.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fneedless_bool_assign.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool_assign.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,33 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::needless_bool_assign)]\n+\n+fn random() -> bool {\n+    true\n+}\n+\n+fn main() {\n+    struct Data {\n+        field: bool,\n+    };\n+    let mut a = Data { field: false };\n+    a.field = random() && random();\n+    a.field = !(random() && random());\n+    // Do not lint\u2026\n+    if random() {\n+        a.field = false;\n+    } else {\n+        // \u2026to avoid losing this comment\n+        a.field = true\n+    }\n+    // This one also triggers lint `clippy::if_same_then_else`\n+    // which does not suggest a rewrite.\n+    random(); a.field = true;\n+    let mut b = false;\n+    if random() {\n+        a.field = false;\n+    } else {\n+        b = true;\n+    }\n+}"}, {"sha": "efaeb67fa45de3ec84ce22d9292f95f565618a25", "filename": "tests/ui/needless_bool_assign.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fneedless_bool_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fneedless_bool_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool_assign.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,45 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::needless_bool_assign)]\n+\n+fn random() -> bool {\n+    true\n+}\n+\n+fn main() {\n+    struct Data {\n+        field: bool,\n+    };\n+    let mut a = Data { field: false };\n+    if random() && random() {\n+        a.field = true;\n+    } else {\n+        a.field = false\n+    }\n+    if random() && random() {\n+        a.field = false;\n+    } else {\n+        a.field = true\n+    }\n+    // Do not lint\u2026\n+    if random() {\n+        a.field = false;\n+    } else {\n+        // \u2026to avoid losing this comment\n+        a.field = true\n+    }\n+    // This one also triggers lint `clippy::if_same_then_else`\n+    // which does not suggest a rewrite.\n+    if random() {\n+        a.field = true;\n+    } else {\n+        a.field = true;\n+    }\n+    let mut b = false;\n+    if random() {\n+        a.field = false;\n+    } else {\n+        b = true;\n+    }\n+}"}, {"sha": "601bbed5493b9d64746df4c47fa9e16417607723", "filename": "tests/ui/needless_bool_assign.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fneedless_bool_assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fneedless_bool_assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool_assign.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -0,0 +1,53 @@\n+error: this if-then-else expression assigns a bool literal\n+  --> $DIR/needless_bool_assign.rs:15:5\n+   |\n+LL | /     if random() && random() {\n+LL | |         a.field = true;\n+LL | |     } else {\n+LL | |         a.field = false\n+LL | |     }\n+   | |_____^ help: you can reduce it to: `a.field = random() && random();`\n+   |\n+   = note: `-D clippy::needless-bool-assign` implied by `-D warnings`\n+\n+error: this if-then-else expression assigns a bool literal\n+  --> $DIR/needless_bool_assign.rs:20:5\n+   |\n+LL | /     if random() && random() {\n+LL | |         a.field = false;\n+LL | |     } else {\n+LL | |         a.field = true\n+LL | |     }\n+   | |_____^ help: you can reduce it to: `a.field = !(random() && random());`\n+\n+error: this if-then-else expression assigns a bool literal\n+  --> $DIR/needless_bool_assign.rs:34:5\n+   |\n+LL | /     if random() {\n+LL | |         a.field = true;\n+LL | |     } else {\n+LL | |         a.field = true;\n+LL | |     }\n+   | |_____^ help: you can reduce it to: `random(); a.field = true;`\n+\n+error: this `if` has identical blocks\n+  --> $DIR/needless_bool_assign.rs:34:17\n+   |\n+LL |       if random() {\n+   |  _________________^\n+LL | |         a.field = true;\n+LL | |     } else {\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/needless_bool_assign.rs:36:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         a.field = true;\n+LL | |     }\n+   | |_____^\n+   = note: `#[deny(clippy::if_same_then_else)]` on by default\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "92572942bc0d456fef2f1676b3c244addd08d0cd", "filename": "tests/ui/needless_for_each_fixable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fneedless_for_each_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fneedless_for_each_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_for_each_fixable.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -110,7 +110,7 @@ fn should_not_lint() {\n         }),\n     }\n \n-    // `for_each` is in a let bingind.\n+    // `for_each` is in a let binding.\n     let _ = v.iter().for_each(|elem| {\n         acc += elem;\n     });"}, {"sha": "95acbdff8cc2342135cd831dcd17dc83149b52af", "filename": "tests/ui/needless_for_each_fixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fneedless_for_each_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fneedless_for_each_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_for_each_fixable.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -110,7 +110,7 @@ fn should_not_lint() {\n         }),\n     }\n \n-    // `for_each` is in a let bingind.\n+    // `for_each` is in a let binding.\n     let _ = v.iter().for_each(|elem| {\n         acc += elem;\n     });"}, {"sha": "818119f7be579bfff0eb229b20db143d33cda04b", "filename": "tests/ui/no_mangle_with_rust_abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fno_mangle_with_rust_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fno_mangle_with_rust_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_mangle_with_rust_abi.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -25,7 +25,7 @@ fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lin\n     0\n }\n \n-// Must not run on functions that explicitly opt in to Rust ABI with `extern \"Rust\"`\n+// Must not run on functions that explicitly opt in to using the Rust ABI with `extern \"Rust\"`\n #[no_mangle]\n #[rustfmt::skip]\n extern \"Rust\" fn rust_abi_fn_explicit_opt_in(arg_one: u32, arg_two: usize) {}"}, {"sha": "57f341e0276c5e03082815422ba91cffbfe8f8eb", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -97,7 +97,7 @@ enum DummyEnum {\n     Two,\n }\n \n-// should not warn since there is a compled complex subpat\n+// should not warn since there is a complex subpat\n // see #7991\n fn complex_subpat() -> DummyEnum {\n     let x = Some(DummyEnum::One(1));"}, {"sha": "19f9f70451796914a3eccc967b4beba39c4fde17", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -120,7 +120,7 @@ enum DummyEnum {\n     Two,\n }\n \n-// should not warn since there is a compled complex subpat\n+// should not warn since there is a complex subpat\n // see #7991\n fn complex_subpat() -> DummyEnum {\n     let x = Some(DummyEnum::One(1));"}, {"sha": "d62f7d26a35ccfeee7e723bf545ed68e2ef604e1", "filename": "tests/ui/redundant_pattern_matching_option.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -54,6 +54,8 @@ fn main() {\n     } else {\n         3\n     };\n+\n+    if gen_opt().is_some() {}\n }\n \n fn gen_opt() -> Option<()> {"}, {"sha": "d64294265731bbc225fac437313bdd30160b5ad4", "filename": "tests/ui/redundant_pattern_matching_option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fredundant_pattern_matching_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fredundant_pattern_matching_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -63,6 +63,8 @@ fn main() {\n     } else {\n         3\n     };\n+\n+    if let Some(..) = gen_opt() {}\n }\n \n fn gen_opt() -> Option<()> {"}, {"sha": "7c5a047e455cf4f7a919bb9b6285d3fdac96e7f6", "filename": "tests/ui/redundant_pattern_matching_option.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -89,31 +89,37 @@ LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:80:12\n+  --> $DIR/redundant_pattern_matching_option.rs:67:12\n+   |\n+LL |     if let Some(..) = gen_opt() {}\n+   |     -------^^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:82:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:82:12\n+  --> $DIR/redundant_pattern_matching_option.rs:84:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:84:15\n+  --> $DIR/redundant_pattern_matching_option.rs:86:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:86:15\n+  --> $DIR/redundant_pattern_matching_option.rs:88:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:88:5\n+  --> $DIR/redundant_pattern_matching_option.rs:90:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -122,7 +128,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:93:5\n+  --> $DIR/redundant_pattern_matching_option.rs:95:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -131,16 +137,16 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:101:12\n+  --> $DIR/redundant_pattern_matching_option.rs:103:12\n    |\n LL |     if let None = *(&None::<()>) {}\n    |     -------^^^^----------------- help: try this: `if (&None::<()>).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:102:12\n+  --> $DIR/redundant_pattern_matching_option.rs:104:12\n    |\n LL |     if let None = *&None::<()> {}\n    |     -------^^^^--------------- help: try this: `if (&None::<()>).is_none()`\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 22 previous errors\n "}, {"sha": "aa3b4f53d72139cf39723aa4aa8f3a96566e957f", "filename": "tests/ui/rename.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -27,6 +27,7 @@\n #![allow(clippy::module_name_repetitions)]\n #![allow(clippy::recursive_format_impl)]\n #![allow(clippy::invisible_characters)]\n+#![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n #![allow(for_loops_over_fallibles)]\n #![allow(array_into_iter)]\n@@ -36,7 +37,6 @@\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n #![allow(named_arguments_used_positionally)]\n-#![allow(suspicious_double_ref_op)]\n #![allow(temporary_cstring_as_ptr)]\n #![allow(unknown_lints)]\n #![allow(unused_labels)]"}, {"sha": "600ec79fcbf77b027ef13b6be33a150c279b9e14", "filename": "tests/ui/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -27,6 +27,7 @@\n #![allow(clippy::module_name_repetitions)]\n #![allow(clippy::recursive_format_impl)]\n #![allow(clippy::invisible_characters)]\n+#![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n #![allow(for_loops_over_fallibles)]\n #![allow(array_into_iter)]\n@@ -36,7 +37,6 @@\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n #![allow(named_arguments_used_positionally)]\n-#![allow(suspicious_double_ref_op)]\n #![allow(temporary_cstring_as_ptr)]\n #![allow(unknown_lints)]\n #![allow(unused_labels)]"}, {"sha": "f31a7e33c4b9ecdf54e6a629fffe56a92c80c20f", "filename": "tests/ui/same_name_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_name_method.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -62,7 +62,7 @@ mod should_lint {\n         impl T1 for S {}\n     }\n \n-    mod multiply_conflicit_trait {\n+    mod multiple_conflicting_traits {\n         use crate::{T1, T2};\n \n         struct S;"}, {"sha": "2c0fc3e3fd83ffb8bdd090599162478abb36c01f", "filename": "tests/ui/shadow.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -8,6 +8,12 @@ extern crate proc_macro_derive;\n #[derive(proc_macro_derive::ShadowDerive)]\n pub struct Nothing;\n \n+macro_rules! reuse {\n+    ($v:ident) => {\n+        let $v = $v + 1;\n+    };\n+}\n+\n fn shadow_same() {\n     let x = 1;\n     let x = x;\n@@ -33,6 +39,12 @@ fn shadow_reuse() -> Option<()> {\n     None\n }\n \n+fn shadow_reuse_macro() {\n+    let x = 1;\n+    // this should not warn\n+    reuse!(x);\n+}\n+\n fn shadow_unrelated() {\n     let x = 1;\n     let x = 2;"}, {"sha": "8321f6df224cf8444d39605c81ee3b8b122225a1", "filename": "tests/ui/shadow.stderr", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,278 +1,278 @@\n error: `x` is shadowed by itself in `x`\n-  --> $DIR/shadow.rs:13:9\n+  --> $DIR/shadow.rs:19:9\n    |\n LL |     let x = x;\n    |         ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:12:9\n+  --> $DIR/shadow.rs:18:9\n    |\n LL |     let x = 1;\n    |         ^\n    = note: `-D clippy::shadow-same` implied by `-D warnings`\n \n error: `mut x` is shadowed by itself in `&x`\n-  --> $DIR/shadow.rs:14:13\n+  --> $DIR/shadow.rs:20:13\n    |\n LL |     let mut x = &x;\n    |             ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:13:9\n+  --> $DIR/shadow.rs:19:9\n    |\n LL |     let x = x;\n    |         ^\n \n error: `x` is shadowed by itself in `&mut x`\n-  --> $DIR/shadow.rs:15:9\n+  --> $DIR/shadow.rs:21:9\n    |\n LL |     let x = &mut x;\n    |         ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:14:9\n+  --> $DIR/shadow.rs:20:9\n    |\n LL |     let mut x = &x;\n    |         ^^^^^\n \n error: `x` is shadowed by itself in `*x`\n-  --> $DIR/shadow.rs:16:9\n+  --> $DIR/shadow.rs:22:9\n    |\n LL |     let x = *x;\n    |         ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:15:9\n+  --> $DIR/shadow.rs:21:9\n    |\n LL |     let x = &mut x;\n    |         ^\n \n error: `x` is shadowed\n-  --> $DIR/shadow.rs:21:9\n+  --> $DIR/shadow.rs:27:9\n    |\n LL |     let x = x.0;\n    |         ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:20:9\n+  --> $DIR/shadow.rs:26:9\n    |\n LL |     let x = ([[0]], ());\n    |         ^\n    = note: `-D clippy::shadow-reuse` implied by `-D warnings`\n \n error: `x` is shadowed\n-  --> $DIR/shadow.rs:22:9\n+  --> $DIR/shadow.rs:28:9\n    |\n LL |     let x = x[0];\n    |         ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:21:9\n+  --> $DIR/shadow.rs:27:9\n    |\n LL |     let x = x.0;\n    |         ^\n \n error: `x` is shadowed\n-  --> $DIR/shadow.rs:23:10\n+  --> $DIR/shadow.rs:29:10\n    |\n LL |     let [x] = x;\n    |          ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:22:9\n+  --> $DIR/shadow.rs:28:9\n    |\n LL |     let x = x[0];\n    |         ^\n \n error: `x` is shadowed\n-  --> $DIR/shadow.rs:24:9\n+  --> $DIR/shadow.rs:30:9\n    |\n LL |     let x = Some(x);\n    |         ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:23:10\n+  --> $DIR/shadow.rs:29:10\n    |\n LL |     let [x] = x;\n    |          ^\n \n error: `x` is shadowed\n-  --> $DIR/shadow.rs:25:9\n+  --> $DIR/shadow.rs:31:9\n    |\n LL |     let x = foo(x);\n    |         ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:24:9\n+  --> $DIR/shadow.rs:30:9\n    |\n LL |     let x = Some(x);\n    |         ^\n \n error: `x` is shadowed\n-  --> $DIR/shadow.rs:26:9\n+  --> $DIR/shadow.rs:32:9\n    |\n LL |     let x = || x;\n    |         ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:25:9\n+  --> $DIR/shadow.rs:31:9\n    |\n LL |     let x = foo(x);\n    |         ^\n \n error: `x` is shadowed\n-  --> $DIR/shadow.rs:27:9\n+  --> $DIR/shadow.rs:33:9\n    |\n LL |     let x = Some(1).map(|_| x)?;\n    |         ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:26:9\n+  --> $DIR/shadow.rs:32:9\n    |\n LL |     let x = || x;\n    |         ^\n \n error: `y` is shadowed\n-  --> $DIR/shadow.rs:29:9\n+  --> $DIR/shadow.rs:35:9\n    |\n LL |     let y = match y {\n    |         ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:28:9\n+  --> $DIR/shadow.rs:34:9\n    |\n LL |     let y = 1;\n    |         ^\n \n error: `x` shadows a previous, unrelated binding\n-  --> $DIR/shadow.rs:38:9\n+  --> $DIR/shadow.rs:50:9\n    |\n LL |     let x = 2;\n    |         ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:37:9\n+  --> $DIR/shadow.rs:49:9\n    |\n LL |     let x = 1;\n    |         ^\n    = note: `-D clippy::shadow-unrelated` implied by `-D warnings`\n \n error: `x` shadows a previous, unrelated binding\n-  --> $DIR/shadow.rs:43:13\n+  --> $DIR/shadow.rs:55:13\n    |\n LL |         let x = 1;\n    |             ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:42:10\n+  --> $DIR/shadow.rs:54:10\n    |\n LL |     fn f(x: u32) {\n    |          ^\n \n error: `x` shadows a previous, unrelated binding\n-  --> $DIR/shadow.rs:48:14\n+  --> $DIR/shadow.rs:60:14\n    |\n LL |         Some(x) => {\n    |              ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:45:9\n+  --> $DIR/shadow.rs:57:9\n    |\n LL |     let x = 1;\n    |         ^\n \n error: `x` shadows a previous, unrelated binding\n-  --> $DIR/shadow.rs:49:17\n+  --> $DIR/shadow.rs:61:17\n    |\n LL |             let x = 1;\n    |                 ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:48:14\n+  --> $DIR/shadow.rs:60:14\n    |\n LL |         Some(x) => {\n    |              ^\n \n error: `x` shadows a previous, unrelated binding\n-  --> $DIR/shadow.rs:53:17\n+  --> $DIR/shadow.rs:65:17\n    |\n LL |     if let Some(x) = Some(1) {}\n    |                 ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:45:9\n+  --> $DIR/shadow.rs:57:9\n    |\n LL |     let x = 1;\n    |         ^\n \n error: `x` shadows a previous, unrelated binding\n-  --> $DIR/shadow.rs:54:20\n+  --> $DIR/shadow.rs:66:20\n    |\n LL |     while let Some(x) = Some(1) {}\n    |                    ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:45:9\n+  --> $DIR/shadow.rs:57:9\n    |\n LL |     let x = 1;\n    |         ^\n \n error: `x` shadows a previous, unrelated binding\n-  --> $DIR/shadow.rs:55:15\n+  --> $DIR/shadow.rs:67:15\n    |\n LL |     let _ = |[x]: [u32; 1]| {\n    |               ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:45:9\n+  --> $DIR/shadow.rs:57:9\n    |\n LL |     let x = 1;\n    |         ^\n \n error: `x` shadows a previous, unrelated binding\n-  --> $DIR/shadow.rs:56:13\n+  --> $DIR/shadow.rs:68:13\n    |\n LL |         let x = 1;\n    |             ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:55:15\n+  --> $DIR/shadow.rs:67:15\n    |\n LL |     let _ = |[x]: [u32; 1]| {\n    |               ^\n \n error: `y` is shadowed\n-  --> $DIR/shadow.rs:59:17\n+  --> $DIR/shadow.rs:71:17\n    |\n LL |     if let Some(y) = y {}\n    |                 ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:58:9\n+  --> $DIR/shadow.rs:70:9\n    |\n LL |     let y = Some(1);\n    |         ^\n \n error: `_b` shadows a previous, unrelated binding\n-  --> $DIR/shadow.rs:95:9\n+  --> $DIR/shadow.rs:107:9\n    |\n LL |     let _b = _a;\n    |         ^^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:94:28\n+  --> $DIR/shadow.rs:106:28\n    |\n LL | pub async fn foo2(_a: i32, _b: i64) {\n    |                            ^^\n \n error: `x` shadows a previous, unrelated binding\n-  --> $DIR/shadow.rs:101:21\n+  --> $DIR/shadow.rs:113:21\n    |\n LL |         if let Some(x) = Some(1) { x } else { 1 }\n    |                     ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:100:13\n+  --> $DIR/shadow.rs:112:13\n    |\n LL |         let x = 1;\n    |             ^"}, {"sha": "3fc11b8b0885e9070944e97d74cc9fa6ddb6a42e", "filename": "tests/ui/string_lit_as_bytes.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fstring_lit_as_bytes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fstring_lit_as_bytes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,8 +1,18 @@\n //@run-rustfix\n+//@aux-build:macro_rules.rs\n \n #![allow(dead_code, unused_variables)]\n #![warn(clippy::string_lit_as_bytes)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n+macro_rules! b {\n+    ($b:literal) => {\n+        const B: &[u8] = b\"warning\";\n+    };\n+}\n+\n fn str_lit_as_bytes() {\n     let bs = b\"hello there\";\n \n@@ -11,6 +21,10 @@ fn str_lit_as_bytes() {\n     let bs = b\"lit to string\".to_vec();\n     let bs = b\"lit to owned\".to_vec();\n \n+    b!(\"warning\");\n+\n+    string_lit_as_bytes!(\"no warning\");\n+\n     // no warning, because these cannot be written as byte string literals:\n     let ubs = \"\u2603\".as_bytes();\n     let ubs = \"hello there! this is a very long string\".as_bytes();"}, {"sha": "7d54acf630e6cf06d0ffad3298b2809245407e6e", "filename": "tests/ui/string_lit_as_bytes.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fstring_lit_as_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fstring_lit_as_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,8 +1,18 @@\n //@run-rustfix\n+//@aux-build:macro_rules.rs\n \n #![allow(dead_code, unused_variables)]\n #![warn(clippy::string_lit_as_bytes)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n+macro_rules! b {\n+    ($b:literal) => {\n+        const B: &[u8] = $b.as_bytes();\n+    };\n+}\n+\n fn str_lit_as_bytes() {\n     let bs = \"hello there\".as_bytes();\n \n@@ -11,6 +21,10 @@ fn str_lit_as_bytes() {\n     let bs = \"lit to string\".to_string().into_bytes();\n     let bs = \"lit to owned\".to_owned().into_bytes();\n \n+    b!(\"warning\");\n+\n+    string_lit_as_bytes!(\"no warning\");\n+\n     // no warning, because these cannot be written as byte string literals:\n     let ubs = \"\u2603\".as_bytes();\n     let ubs = \"hello there! this is a very long string\".as_bytes();"}, {"sha": "61b4e210e0fb94d6c0173faf863016639a8b0733", "filename": "tests/ui/string_lit_as_bytes.stderr", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fstring_lit_as_bytes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fstring_lit_as_bytes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,40 +1,51 @@\n error: calling `as_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:7:14\n+  --> $DIR/string_lit_as_bytes.rs:17:14\n    |\n LL |     let bs = \"hello there\".as_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"hello there\"`\n    |\n    = note: `-D clippy::string-lit-as-bytes` implied by `-D warnings`\n \n error: calling `as_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:9:14\n+  --> $DIR/string_lit_as_bytes.rs:19:14\n    |\n LL |     let bs = r###\"raw string with 3# plus \" \"\"###.as_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `br###\"raw string with 3# plus \" \"\"###`\n \n error: calling `into_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:11:14\n+  --> $DIR/string_lit_as_bytes.rs:21:14\n    |\n LL |     let bs = \"lit to string\".to_string().into_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"lit to string\".to_vec()`\n \n error: calling `into_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:12:14\n+  --> $DIR/string_lit_as_bytes.rs:22:14\n    |\n LL |     let bs = \"lit to owned\".to_owned().into_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"lit to owned\".to_vec()`\n \n+error: calling `as_bytes()` on a string literal\n+  --> $DIR/string_lit_as_bytes.rs:12:26\n+   |\n+LL |         const B: &[u8] = $b.as_bytes();\n+   |                          ^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"warning\"`\n+...\n+LL |     b!(\"warning\");\n+   |     ------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: calling `as_bytes()` on `include_str!(..)`\n-  --> $DIR/string_lit_as_bytes.rs:25:22\n+  --> $DIR/string_lit_as_bytes.rs:39:22\n    |\n LL |     let includestr = include_str!(\"string_lit_as_bytes.rs\").as_bytes();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `include_bytes!(..)` instead: `include_bytes!(\"string_lit_as_bytes.rs\")`\n \n error: calling `as_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:27:13\n+  --> $DIR/string_lit_as_bytes.rs:41:13\n    |\n LL |     let _ = \"string with newline/t/n\".as_bytes();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"string with newline/t/n\"`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "ac4c1bc65979fb5f38661d3f8ac37487ef802e89", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::temporary_assignment)]\n-#![allow(const_item_mutation)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "7d79901a28d1be70a17f22f33806278c09b0e340", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -1,13 +1,13 @@\n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:48:5\n+  --> $DIR/temporary_assignment.rs:47:5\n    |\n LL |     Struct { field: 0 }.field = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::temporary-assignment` implied by `-D warnings`\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:49:5\n+  --> $DIR/temporary_assignment.rs:48:5\n    |\n LL | /     MultiStruct {\n LL | |         structure: Struct { field: 0 },\n@@ -17,13 +17,13 @@ LL | |     .field = 1;\n    | |______________^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:54:5\n+  --> $DIR/temporary_assignment.rs:53:5\n    |\n LL |     ArrayStruct { array: [0] }.array[0] = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:55:5\n+  --> $DIR/temporary_assignment.rs:54:5\n    |\n LL |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^"}, {"sha": "928475b5f35ea584f5c280a94ce685ccefa2f4fc", "filename": "tests/ui/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_empty_array.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -144,7 +144,7 @@ struct ReprCAlign {\n \n // NOTE: because of https://doc.rust-lang.org/stable/reference/type-layout.html#primitive-representation-of-enums-with-fields and I'm not sure when in the compilation pipeline that would happen\n #[repr(C)]\n-enum DontLintAnonymousStructsFromDesuraging {\n+enum DontLintAnonymousStructsFromDesugaring {\n     A(u32),\n     B(f32, [u64; 0]),\n     C { x: u32, y: [u64; 0] },"}, {"sha": "2d567630e15debe7845b45e3e17c8964768e4467", "filename": "tests/ui/uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Funinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Funinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -17,10 +17,10 @@ fn main() {\n     // This is OK, because `MaybeUninit` allows uninitialized data.\n     let _: MaybeUninit<usize> = unsafe { MaybeUninit::uninit().assume_init() };\n \n-    // This is OK, because all constitutent types are uninit-compatible.\n+    // This is OK, because all constituent types are uninit-compatible.\n     let _: (MaybeUninit<usize>, MaybeUninit<bool>) = unsafe { MaybeUninit::uninit().assume_init() };\n \n-    // This is OK, because all constitutent types are uninit-compatible.\n+    // This is OK, because all constituent types are uninit-compatible.\n     let _: (MaybeUninit<usize>, [MaybeUninit<bool>; 2]) = unsafe { MaybeUninit::uninit().assume_init() };\n \n     // This is OK, because our own MaybeUninit is just as fine as the one from core."}, {"sha": "20138a29fd1f148072adf6b51445be76e35079b2", "filename": "tests/ui/use_self_trait.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fuse_self_trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fuse_self_trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.fixed?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -33,7 +33,7 @@ impl SelfTrait for Bad {\n     fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n \n     fn vals(_: Self) -> Self {\n-        Self::default()\n+        Self\n     }\n }\n \n@@ -70,7 +70,7 @@ impl SelfTrait for Good {\n     fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n \n     fn vals(_: Self) -> Self {\n-        Self::default()\n+        Self\n     }\n }\n "}, {"sha": "bf697b01a42f7b6731f68641c756179ed8f29462", "filename": "tests/ui/use_self_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fuse_self_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fuse_self_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.rs?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -33,7 +33,7 @@ impl SelfTrait for Bad {\n     fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n \n     fn vals(_: Bad) -> Bad {\n-        Bad::default()\n+        Bad\n     }\n }\n \n@@ -70,7 +70,7 @@ impl SelfTrait for Good {\n     fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n \n     fn vals(_: Self) -> Self {\n-        Self::default()\n+        Self\n     }\n }\n "}, {"sha": "6257f802dd80a0c4eefb06f3ae4f00bd643dfd2a", "filename": "tests/ui/use_self_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fuse_self_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/tests%2Fui%2Fuse_self_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.stderr?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -63,7 +63,7 @@ LL |     fn vals(_: Bad) -> Bad {\n error: unnecessary structure name repetition\n   --> $DIR/use_self_trait.rs:36:9\n    |\n-LL |         Bad::default()\n+LL |         Bad\n    |         ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition"}, {"sha": "8791debad7231c7d9702a690f0e92a36097b9ec5", "filename": "util/gh-pages/index.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c763265954f326bb7c746cafca2ffa6af7bd9a/util%2Fgh-pages%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/88c763265954f326bb7c746cafca2ffa6af7bd9a/util%2Fgh-pages%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Findex.html?ref=88c763265954f326bb7c746cafca2ffa6af7bd9a", "patch": "@@ -564,7 +564,7 @@ <h2 class=\"panel-title\">\n     </div>\n \n     <a href=\"https://github.com/rust-lang/rust-clippy\">\n-        <img style=\"position: absolute; top: 0; right: 0; border: 0; clip-path: polygon(0% 0%, 100% 0%, 100% 100%);\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\" alt=\"Fork me on Github\"/>\n+        <img style=\"position: absolute; top: 0; right: 0; border: 0; clip-path: polygon(0% 0%, 100% 0%, 100% 100%);\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\" alt=\"Fork me on GitHub\"/>\n     </a>\n \n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/markdown-it/12.3.2/markdown-it.min.js\"></script>"}]}