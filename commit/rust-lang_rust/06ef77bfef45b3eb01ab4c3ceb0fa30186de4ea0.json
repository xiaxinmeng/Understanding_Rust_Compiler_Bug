{"sha": "06ef77bfef45b3eb01ab4c3ceb0fa30186de4ea0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZWY3N2JmZWY0NWIzZWIwMWFiNGMzY2ViMGZhMzAxODZkZTRlYTA=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-28T21:44:18Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-28T21:44:18Z"}, "message": "Check for usize to i64 overflows", "tree": {"sha": "fa7aad5daa0639f58934aa4c7dd9dd1e3edd48ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa7aad5daa0639f58934aa4c7dd9dd1e3edd48ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06ef77bfef45b3eb01ab4c3ceb0fa30186de4ea0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06ef77bfef45b3eb01ab4c3ceb0fa30186de4ea0", "html_url": "https://github.com/rust-lang/rust/commit/06ef77bfef45b3eb01ab4c3ceb0fa30186de4ea0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06ef77bfef45b3eb01ab4c3ceb0fa30186de4ea0/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "122549fd0959634d0255ba40be6c994e9e60d791", "url": "https://api.github.com/repos/rust-lang/rust/commits/122549fd0959634d0255ba40be6c994e9e60d791", "html_url": "https://github.com/rust-lang/rust/commit/122549fd0959634d0255ba40be6c994e9e60d791"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "2710cbacb0213e90cfacfc14c9d06297d13ff52f", "filename": "src/shims/fs.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/06ef77bfef45b3eb01ab4c3ceb0fa30186de4ea0/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ef77bfef45b3eb01ab4c3ceb0fa30186de4ea0/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=06ef77bfef45b3eb01ab4c3ceb0fa30186de4ea0", "patch": "@@ -176,12 +176,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some(handle) = this.machine.file_handler.handles.get_mut(&fd) {\n             // We want to read at most `count` bytes\n             let mut bytes = vec![0; count as usize];\n-            let result = handle.file.read(&mut bytes).map(|c| c as i64);\n-            // If reading to `bytes` did not fail, we write those bytes to the buffer.\n-            if result.is_ok() {\n-                this.memory.write_bytes(buf, bytes)?;\n+            let result = handle.file.read(&mut bytes);\n+\n+            if let Ok(c) = result {\n+                // Check that we read less than `i64::MAX` bytes.\n+                if c > (i64::max_value() as usize) {\n+                    throw_unsup_format!(\"Number of read bytes {} is larger than the maximum value\", c);\n+                }\n+                // If reading to `bytes` did not fail, we write those bytes to the buffer.\n+                this.memory.write_bytes(buf, bytes)?\n             }\n-            this.try_unwrap_io_result(result)\n+\n+            this.try_unwrap_io_result(result.map(|c| c as i64))\n         } else {\n             this.handle_not_found()\n         }\n@@ -207,8 +213,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         if let Some(handle) = this.machine.file_handler.handles.get_mut(&fd) {\n             let bytes = this.memory.read_bytes(buf, Size::from_bytes(count))?;\n-            let result = handle.file.write(&bytes).map(|c| c as i64);\n-            this.try_unwrap_io_result(result)\n+            let result = handle.file.write(&bytes);\n+\n+            if let Ok(c) = result {\n+                // Check that we wrote less than `i64::MAX` bytes.\n+                if c > (i64::max_value() as usize) {\n+                    throw_unsup_format!(\"Number of written bytes {} is larger than the maximum value\", c);\n+                }\n+            }\n+\n+            this.try_unwrap_io_result(result.map(|c| c as i64))\n         } else {\n             this.handle_not_found()\n         }"}]}