{"sha": "3f127e397fdba5b982603aaab034f6e9aa0992bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMTI3ZTM5N2ZkYmE1Yjk4MjYwM2FhYWIwMzRmNmU5YWEwOTkyYmI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-15T11:15:19Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-15T11:20:16Z"}, "message": "Add tuple patterns", "tree": {"sha": "07fc3b6fb6fc599b2ce38fa481c507ea612f9471", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07fc3b6fb6fc599b2ce38fa481c507ea612f9471"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f127e397fdba5b982603aaab034f6e9aa0992bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f127e397fdba5b982603aaab034f6e9aa0992bb", "html_url": "https://github.com/rust-lang/rust/commit/3f127e397fdba5b982603aaab034f6e9aa0992bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f127e397fdba5b982603aaab034f6e9aa0992bb/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ee24d31e139683a93c6afa93689f5a4122341be", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee24d31e139683a93c6afa93689f5a4122341be", "html_url": "https://github.com/rust-lang/rust/commit/1ee24d31e139683a93c6afa93689f5a4122341be"}], "stats": {"total": 165, "additions": 130, "deletions": 35}, "files": [{"sha": "be8a9aba102e19352543f5ea1e6ee4f93ca8ff34", "filename": "src/comp/middle/check_alt.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs?ref=3f127e397fdba5b982603aaab034f6e9aa0992bb", "patch": "@@ -84,6 +84,12 @@ fn pattern_supersedes(tcx: &ty::ctxt, a: &@pat, b: &@pat) -> bool {\n           _ { ret false; }\n         }\n       }\n+      pat_tup(suba) {\n+        alt b.node {\n+          pat_tup(subb) { ret patterns_supersede(tcx, suba, subb); }\n+          _ { ret false; }\n+        }\n+      }\n       pat_box(suba) {\n         alt b.node {\n           pat_box(subb) { ret pattern_supersedes(tcx, suba, subb); }\n@@ -112,6 +118,12 @@ fn is_refutable(tcx: &ty::ctxt, pat: &@pat) -> bool {\n         }\n         ret false;\n       }\n+      pat_tup(elts) {\n+        for elt in elts {\n+            if is_refutable(tcx, elt) { ret true; }\n+        }\n+        ret false;\n+      }\n       pat_tag(_, args) {\n         let vdef = variant_def_ids(tcx.def_map.get(pat.id));\n         if std::ivec::len(ty::tag_variants(tcx, vdef.tg)) != 1u {"}, {"sha": "9a6a6cb088f571987a9f0c47aed9eee98c22212b", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=3f127e397fdba5b982603aaab034f6e9aa0992bb", "patch": "@@ -644,7 +644,7 @@ fn lookup_in_scope(e: &env, sc: scopes, sp: &span, name: &ident,\n           }\n           scope_loop(local) {\n             if ns == ns_value {\n-                alt lookup_in_pat(name, *local.node.pat) {\n+                alt lookup_in_pat(name, local.node.pat) {\n                   some(did) { ret some(ast::def_local(did)); }\n                   _ {}\n                 }\n@@ -654,7 +654,7 @@ fn lookup_in_scope(e: &env, sc: scopes, sp: &span, name: &ident,\n           scope_arm(a) {\n             if ns == ns_value {\n                 ret option::map(ast::def_binding,\n-                                lookup_in_pat(name, *a.pats.(0)));\n+                                lookup_in_pat(name, a.pats.(0)));\n             }\n           }\n         }\n@@ -711,30 +711,15 @@ fn lookup_in_ty_params(name: &ident, ty_params: &[ast::ty_param]) ->\n     ret none[def];\n }\n \n-fn lookup_in_pat(name: &ident, pat: &ast::pat) -> option::t[def_id] {\n-    alt pat.node {\n-      ast::pat_bind(p_name) {\n+fn lookup_in_pat(name: &ident, pat: &@ast::pat) -> option::t[def_id] {\n+    let found = none;\n+    for each bound in ast::pat_bindings(pat) {\n+        let p_name = alt bound.node { ast::pat_bind(n) { n } };\n         if str::eq(p_name, name) {\n-            ret some(local_def(pat.id));\n+            found = some(local_def(bound.id));\n         }\n-      }\n-      ast::pat_wild. { }\n-      ast::pat_lit(_) { }\n-      ast::pat_tag(_, pats) {\n-        for p: @ast::pat  in pats {\n-            let found = lookup_in_pat(name, *p);\n-            if !is_none(found) { ret found; }\n-        }\n-      }\n-      ast::pat_rec(fields, _) {\n-        for f: ast::field_pat  in fields {\n-            let found = lookup_in_pat(name, *f.pat);\n-            if !is_none(found) { ret found; }\n-        }\n-      }\n-      ast::pat_box(inner) { ret lookup_in_pat(name, *inner); }\n     }\n-    ret none;\n+    ret found;\n }\n \n fn lookup_in_fn(name: &ident, decl: &ast::fn_decl,\n@@ -779,7 +764,7 @@ fn lookup_in_block(name: &ident, b: &ast::blk_, ns: namespace) ->\n               ast::decl_local(locs) {\n                 for loc: @ast::local in locs {\n                     if ns == ns_value {\n-                        alt lookup_in_pat(name, *loc.node.pat) {\n+                        alt lookup_in_pat(name, loc.node.pat) {\n                           some(did) { ret some(ast::def_local(did)); }\n                           _ {}\n                         }"}, {"sha": "b694bbbf6142985a9bcbbcaf9ad65d22f78eea42", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=3f127e397fdba5b982603aaab034f6e9aa0992bb", "patch": "@@ -63,6 +63,7 @@ fn matches_always(p: &@ast::pat) -> bool {\n           ast::pat_wild. { true }\n           ast::pat_bind(_) { true }\n           ast::pat_rec(_, _) { true }\n+          ast::pat_tup(_) { true }\n           _ { false }\n         };\n }\n@@ -145,6 +146,18 @@ fn enter_rec(m: &match, col: uint, fields: &[ast::ident], val: ValueRef) ->\n     ret enter_match(m, col, val, bind e(dummy, fields, _));\n }\n \n+fn enter_tup(m: &match, col: uint, val: ValueRef, n_elts: uint) -> match {\n+    let dummy = @{id: 0, node: ast::pat_wild, span: {lo: 0u, hi: 0u}};\n+    fn e(dummy: &@ast::pat, n_elts: uint, p: &@ast::pat)\n+        -> option::t[[@ast::pat]] {\n+        alt p.node {\n+          ast::pat_tup(elts) { ret some(elts); }\n+          _ { ret some(ivec::init_elt(dummy, n_elts)); }\n+        }\n+    }\n+    ret enter_match(m, col, val, bind e(dummy, n_elts, _));\n+}\n+\n fn enter_box(m: &match, col: uint, val: ValueRef) -> match {\n     let dummy = @{id: 0, node: ast::pat_wild, span: {lo: 0u, hi: 0u}};\n     fn e(dummy: &@ast::pat, p: &@ast::pat) -> option::t[[@ast::pat]] {\n@@ -227,6 +240,13 @@ fn any_box_pat(m: &match, col: uint) -> bool {\n     ret false;\n }\n \n+fn any_tup_pat(m: &match, col: uint) -> bool {\n+    for br: match_branch in m {\n+        alt br.pats.(col).node { ast::pat_tup(_) { ret true; } _ { } }\n+    }\n+    ret false;\n+}\n+\n type exit_node = {bound: bind_map, from: BasicBlockRef, to: BasicBlockRef};\n type mk_fail = fn() -> BasicBlockRef;\n \n@@ -300,6 +320,23 @@ fn compile_submatch(bcx: @block_ctxt, m: &match, vals: [ValueRef],\n         ret;\n     }\n \n+    if any_tup_pat(m, col) {\n+        let tup_ty = ty::node_id_to_monotype(ccx.tcx, pat_id);\n+        let n_tup_elts = alt ty::struct(ccx.tcx, tup_ty) {\n+          ty::ty_tup(elts) { ivec::len(elts) }\n+        };\n+        let tup_vals = ~[], i = 0u;\n+        while i < n_tup_elts {\n+            let r = trans::GEP_tup_like(bcx, tup_ty, val, ~[0, i as int]);\n+            tup_vals += ~[r.val];\n+            bcx = r.bcx;\n+            i += 1u;\n+        }\n+        compile_submatch(bcx, enter_tup(m, col, val, n_tup_elts),\n+                         tup_vals + vals_left, f, exits);\n+        ret;\n+    }\n+\n     // Unbox in case of a box field\n     if any_box_pat(m, col) {\n         let box = bcx.build.Load(val);\n@@ -518,6 +555,15 @@ fn bind_irrefutable_pat(bcx: @block_ctxt, pat: &@ast::pat, val: ValueRef,\n             bcx = bind_irrefutable_pat(r.bcx, f.pat, r.val, table, copy);\n         }\n       }\n+      ast::pat_tup(elems) {\n+        let tup_ty = ty::node_id_to_monotype(ccx.tcx, pat.id);\n+        let i = 0u;\n+        for elem in elems {\n+            let r = trans::GEP_tup_like(bcx, tup_ty, val, ~[0, i as int]);\n+            bcx = bind_irrefutable_pat(r.bcx, elem, r.val, table, copy);\n+            i += 1u;\n+        }\n+      }\n       ast::pat_box(inner) {\n         let box = bcx.build.Load(val);\n         let unboxed = bcx.build.InBoundsGEP"}, {"sha": "fbb69c226ed63562d2c0d1fdda7ae8b770f60b2f", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=3f127e397fdba5b982603aaab034f6e9aa0992bb", "patch": "@@ -1454,6 +1454,31 @@ fn check_pat(fcx: &@fn_ctxt, map: &ast::pat_id_map, pat: &@ast::pat,\n         }\n         write::ty_only_fixup(fcx, pat.id, expected);\n       }\n+      ast::pat_tup(elts) {\n+        let ex_elts;\n+        alt structure_of(fcx, pat.span, expected) {\n+          ty::ty_tup(elts) { ex_elts = elts; }\n+          _ {\n+            fcx.ccx.tcx.sess.span_fatal(pat.span,\n+                                        #fmt(\"mismatched types: expected %s, \\\n+                                         found tuple\", ty_to_str(fcx.ccx.tcx,\n+                                                                 expected)));\n+          }\n+        }\n+        let e_count = ivec::len(elts);\n+        if e_count != ivec::len(ex_elts) {\n+            fcx.ccx.tcx.sess.span_fatal\n+                (pat.span, #fmt(\"mismatched types: expected a tuple \\\n+                                 with %u fields, found one with %u \\\n+                                 fields\", ivec::len(ex_elts), e_count));\n+        }\n+        let i = 0u;\n+        for elt in elts {\n+            check_pat(fcx, map, elt, ex_elts.(i));\n+            i += 1u;\n+        }\n+        write::ty_only_fixup(fcx, pat.id, expected);\n+      }\n       ast::pat_box(inner) {\n         alt structure_of(fcx, pat.span, expected) {\n           ty::ty_box(e_inner) {"}, {"sha": "d2ad2cd0f08661a61a0fca66fcad375df261fbf6", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=3f127e397fdba5b982603aaab034f6e9aa0992bb", "patch": "@@ -126,6 +126,7 @@ tag pat_ {\n     pat_lit(@lit);\n     pat_tag(path, [@pat]);\n     pat_rec([field_pat], bool);\n+    pat_tup([@pat]);\n     pat_box(@pat);\n }\n \n@@ -135,18 +136,10 @@ type pat_id_map = std::map::hashmap[str, ast::node_id];\n // use the node_id of their namesake in the first pattern.\n fn pat_id_map(pat: &@pat) -> pat_id_map {\n     let map = std::map::new_str_hash[node_id]();\n-    fn walk(map: &pat_id_map, pat: &@pat) {\n-        alt pat.node {\n-          pat_bind(name) { map.insert(name, pat.id); }\n-          pat_tag(_, sub) { for p: @pat in sub { walk(map, p); } }\n-          pat_rec(fields, _) {\n-            for f: field_pat  in fields { walk(map, f.pat); }\n-          }\n-          pat_box(inner) { walk(map, inner); }\n-          _ { }\n-        }\n+    for each bound in pat_bindings(pat) {\n+        let name = alt bound.node { pat_bind(n) { n } };\n+        map.insert(name, bound.id);\n     }\n-    walk(map, pat);\n     ret map;\n }\n \n@@ -163,6 +156,11 @@ iter pat_bindings(pat: &@pat) -> @pat {\n             for each b in pat_bindings(f.pat) { put b; }\n         }\n       }\n+      pat_tup(elts) {\n+        for elt in elts {\n+            for each b in pat_bindings(elt) { put b; }\n+        }\n+      }\n       pat_box(sub) {\n         for each b in pat_bindings(sub) { put b; }\n       }"}, {"sha": "77ec93c809b36274c40ca381aa4e93c6059acb9a", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=3f127e397fdba5b982603aaab034f6e9aa0992bb", "patch": "@@ -283,6 +283,9 @@ fn noop_fold_pat(p: &pat_, fld: ast_fold) -> pat_ {\n             }\n             pat_rec(fs, etc)\n           }\n+          pat_tup(elts) {\n+            pat_tup(ivec::map(fld.fold_pat, elts))\n+          }\n           pat_box(inner) { pat_box(fld.fold_pat(inner)) }\n         };\n }"}, {"sha": "f28ea683cf94f344ff69c9517a963d43aa35f60f", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=3f127e397fdba5b982603aaab034f6e9aa0992bb", "patch": "@@ -1454,6 +1454,24 @@ fn parse_pat(p: &parser) -> @ast::pat {\n         p.bump();\n         pat = ast::pat_rec(fields, etc);\n       }\n+      token::LPAREN. {\n+        p.bump();\n+        if p.peek() == token::RPAREN {\n+            hi = p.get_hi_pos();\n+            p.bump();\n+            pat = ast::pat_lit(@{node: ast::lit_nil, span: {lo: lo, hi: hi}});\n+        } else {\n+            let fields = ~[parse_pat(p)];\n+            while p.peek() == token::COMMA {\n+                p.bump();\n+                fields += ~[parse_pat(p)];\n+            }\n+            if ivec::len(fields) == 1u { expect(p, token::COMMA); }\n+            hi = p.get_hi_pos();\n+            expect(p, token::RPAREN);\n+            pat = ast::pat_tup(fields);\n+        }\n+      }\n       tok {\n         if !is_ident(tok) || is_word(p, \"true\") || is_word(p, \"false\") {\n             let lit = parse_lit(p);"}, {"sha": "fa2df63e280738fbfa7fe47164285330e5ddb399", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=3f127e397fdba5b982603aaab034f6e9aa0992bb", "patch": "@@ -1146,6 +1146,11 @@ fn print_pat(s: &ps, pat: &@ast::pat) {\n         }\n         word(s.s, \"}\");\n       }\n+      ast::pat_tup(elts) {\n+        popen(s);\n+        commasep(s, inconsistent, elts, print_pat);\n+        pclose(s);\n+      }\n       ast::pat_box(inner) { word(s.s, \"@\"); print_pat(s, inner); }\n     }\n     s.ann.post(ann_node);"}, {"sha": "5f160d88e6fafe0101a771d3ec70cba65190186b", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f127e397fdba5b982603aaab034f6e9aa0992bb/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=3f127e397fdba5b982603aaab034f6e9aa0992bb", "patch": "@@ -175,6 +175,9 @@ fn visit_pat[E](p: &@pat, e: &E, v: &vt[E]) {\n       pat_rec(fields, _) {\n         for f: field_pat  in fields { v.visit_pat(f.pat, e, v); }\n       }\n+      pat_tup(elts) {\n+        for elt in elts { v.visit_pat(elt, e, v); }\n+      }\n       pat_box(inner) { v.visit_pat(inner, e, v); }\n       _ { }\n     }"}]}