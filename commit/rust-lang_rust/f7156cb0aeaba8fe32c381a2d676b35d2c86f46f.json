{"sha": "f7156cb0aeaba8fe32c381a2d676b35d2c86f46f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MTU2Y2IwYWVhYmE4ZmUzMmMzODFhMmQ2NzZiMzVkMmM4NmY0NmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-15T12:38:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-15T12:38:50Z"}, "message": "Simplify source maps for fields", "tree": {"sha": "2ee4aa8e66b3371f8cbf65b2c4951d5e2c227cb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ee4aa8e66b3371f8cbf65b2c4951d5e2c227cb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f", "html_url": "https://github.com/rust-lang/rust/commit/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af2366acdf1321702e54e01c88052ed5a674716c", "url": "https://api.github.com/repos/rust-lang/rust/commits/af2366acdf1321702e54e01c88052ed5a674716c", "html_url": "https://github.com/rust-lang/rust/commit/af2366acdf1321702e54e01c88052ed5a674716c"}], "stats": {"total": 78, "additions": 33, "deletions": 45}, "files": [{"sha": "4d59293e950a123c54a623a5eb640076e3a21b56", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=f7156cb0aeaba8fe32c381a2d676b35d2c86f46f", "patch": "@@ -24,7 +24,7 @@ use hir_ty::{\n };\n use syntax::{\n     ast::{self, AstNode},\n-    AstPtr, SyntaxNode, TextRange, TextSize,\n+    SyntaxNode, TextRange, TextSize,\n };\n \n use crate::{\n@@ -161,26 +161,8 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         field: &ast::RecordExprField,\n     ) -> Option<(Field, Option<Local>)> {\n-        let expr_id = {\n-            let record_lit = field.parent_record_lit();\n-            let record_lit_expr = self.expr_id(db, &ast::Expr::from(record_lit))?;\n-            let body = self.body.as_ref()?;\n-            let body_source_map = self.body_source_map.as_ref()?;\n-            match &body[record_lit_expr] {\n-                hir_def::expr::Expr::RecordLit { fields, .. } => {\n-                    let field_ptr = InFile::new(self.file_id, AstPtr::new(field));\n-                    fields.iter().enumerate().find_map(|(i, f)| {\n-                        let ptr = body_source_map.field_syntax(record_lit_expr, i);\n-                        if ptr == field_ptr {\n-                            Some(f.expr)\n-                        } else {\n-                            None\n-                        }\n-                    })?\n-                }\n-                _ => return None,\n-            }\n-        };\n+        let expr_id =\n+            self.body_source_map.as_ref()?.node_field(InFile::new(self.file_id, field))?;\n \n         let local = if field.name_ref().is_some() {\n             None"}, {"sha": "8bcc350ce5e38c67ec16ce0841112ea8cc031e33", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=f7156cb0aeaba8fe32c381a2d676b35d2c86f46f", "patch": "@@ -253,11 +253,18 @@ pub type LabelSource = InFile<LabelPtr>;\n pub struct BodySourceMap {\n     expr_map: FxHashMap<ExprSource, ExprId>,\n     expr_map_back: ArenaMap<ExprId, Result<ExprSource, SyntheticSyntax>>,\n+\n     pat_map: FxHashMap<PatSource, PatId>,\n     pat_map_back: ArenaMap<PatId, Result<PatSource, SyntheticSyntax>>,\n+\n     label_map: FxHashMap<LabelSource, LabelId>,\n     label_map_back: ArenaMap<LabelId, LabelSource>,\n-    field_map: FxHashMap<(ExprId, usize), InFile<AstPtr<ast::RecordExprField>>>,\n+\n+    /// We don't create explicit nodes for record fields (`S { record_field: 92 }`).\n+    /// Instead, we use id of expression (`92`) to identify the field.\n+    field_map: FxHashMap<InFile<AstPtr<ast::RecordExprField>>, ExprId>,\n+    field_map_back: FxHashMap<ExprId, InFile<AstPtr<ast::RecordExprField>>>,\n+\n     expansions: FxHashMap<InFile<AstPtr<ast::MacroCall>>, HirFileId>,\n \n     /// Diagnostics accumulated during body lowering. These contain `AstPtr`s and so are stored in\n@@ -337,6 +344,8 @@ impl Index<LabelId> for Body {\n     }\n }\n \n+// FIXME: Change `node_` prefix to something more reasonable.\n+// Perhaps `expr_syntax` and `expr_id`?\n impl BodySourceMap {\n     pub fn expr_syntax(&self, expr: ExprId) -> Result<ExprSource, SyntheticSyntax> {\n         self.expr_map_back[expr].clone()\n@@ -375,8 +384,12 @@ impl BodySourceMap {\n         self.label_map.get(&src).cloned()\n     }\n \n-    pub fn field_syntax(&self, expr: ExprId, field: usize) -> InFile<AstPtr<ast::RecordExprField>> {\n-        self.field_map[&(expr, field)].clone()\n+    pub fn field_syntax(&self, expr: ExprId) -> InFile<AstPtr<ast::RecordExprField>> {\n+        self.field_map_back[&expr].clone()\n+    }\n+    pub fn node_field(&self, node: InFile<&ast::RecordExprField>) -> Option<ExprId> {\n+        let src = node.map(|it| AstPtr::new(it));\n+        self.field_map.get(&src).cloned()\n     }\n \n     pub(crate) fn add_diagnostics(&self, _db: &dyn DefDatabase, sink: &mut DiagnosticSink<'_>) {"}, {"sha": "8934ae6c9aca23a6e4c13565da22bf84547d43fb", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=f7156cb0aeaba8fe32c381a2d676b35d2c86f46f", "patch": "@@ -379,23 +379,22 @@ impl ExprCollector<'_> {\n             }\n             ast::Expr::RecordExpr(e) => {\n                 let path = e.path().and_then(|path| self.expander.parse_path(path));\n-                let mut field_ptrs = Vec::new();\n                 let record_lit = if let Some(nfl) = e.record_expr_field_list() {\n                     let fields = nfl\n                         .fields()\n-                        .inspect(|field| field_ptrs.push(AstPtr::new(field)))\n                         .filter_map(|field| {\n                             self.check_cfg(&field)?;\n \n                             let name = field.field_name()?.as_name();\n \n-                            Some(RecordLitField {\n-                                name,\n-                                expr: match field.expr() {\n-                                    Some(e) => self.collect_expr(e),\n-                                    None => self.missing_expr(),\n-                                },\n-                            })\n+                            let expr = match field.expr() {\n+                                Some(e) => self.collect_expr(e),\n+                                None => self.missing_expr(),\n+                            };\n+                            let src = self.expander.to_source(AstPtr::new(&field));\n+                            self.source_map.field_map.insert(src.clone(), expr);\n+                            self.source_map.field_map_back.insert(expr, src);\n+                            Some(RecordLitField { name, expr })\n                         })\n                         .collect();\n                     let spread = nfl.spread().map(|s| self.collect_expr(s));\n@@ -404,12 +403,7 @@ impl ExprCollector<'_> {\n                     Expr::RecordLit { path, fields: Vec::new(), spread: None }\n                 };\n \n-                let res = self.alloc_expr(record_lit, syntax_ptr);\n-                for (i, ptr) in field_ptrs.into_iter().enumerate() {\n-                    let src = self.expander.to_source(ptr);\n-                    self.source_map.field_map.insert((res, i), src);\n-                }\n-                res\n+                self.alloc_expr(record_lit, syntax_ptr)\n             }\n             ast::Expr::FieldExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());"}, {"sha": "9f29098ee6bb522af46554141ce426b55a694387", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=f7156cb0aeaba8fe32c381a2d676b35d2c86f46f", "patch": "@@ -784,7 +784,7 @@ mod diagnostics {\n \n     #[derive(Debug, PartialEq, Eq, Clone)]\n     pub(super) enum InferenceDiagnostic {\n-        NoSuchField { expr: ExprId, field: usize },\n+        NoSuchField { expr: ExprId },\n         BreakOutsideOfLoop { expr: ExprId },\n     }\n \n@@ -796,9 +796,9 @@ mod diagnostics {\n             sink: &mut DiagnosticSink,\n         ) {\n             match self {\n-                InferenceDiagnostic::NoSuchField { expr, field } => {\n+                InferenceDiagnostic::NoSuchField { expr } => {\n                     let (_, source_map) = db.body_with_source_map(owner);\n-                    let field = source_map.field_syntax(*expr, *field);\n+                    let field = source_map.field_syntax(*expr);\n                     sink.push(NoSuchField { file: field.file_id, field: field.value })\n                 }\n                 InferenceDiagnostic::BreakOutsideOfLoop { expr } => {"}, {"sha": "1a11b146aedc318b467b5760eb1b5c6d634a300a", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7156cb0aeaba8fe32c381a2d676b35d2c86f46f/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=f7156cb0aeaba8fe32c381a2d676b35d2c86f46f", "patch": "@@ -405,14 +405,13 @@ impl<'a> InferenceContext<'a> {\n                 let substs = ty.substs().cloned().unwrap_or_else(Substs::empty);\n                 let field_types = def_id.map(|it| self.db.field_types(it)).unwrap_or_default();\n                 let variant_data = def_id.map(|it| variant_data(self.db.upcast(), it));\n-                for (field_idx, field) in fields.iter().enumerate() {\n+                for field in fields.iter() {\n                     let field_def =\n                         variant_data.as_ref().and_then(|it| match it.field(&field.name) {\n                             Some(local_id) => Some(FieldId { parent: def_id.unwrap(), local_id }),\n                             None => {\n                                 self.push_diagnostic(InferenceDiagnostic::NoSuchField {\n-                                    expr: tgt_expr,\n-                                    field: field_idx,\n+                                    expr: field.expr,\n                                 });\n                                 None\n                             }"}]}