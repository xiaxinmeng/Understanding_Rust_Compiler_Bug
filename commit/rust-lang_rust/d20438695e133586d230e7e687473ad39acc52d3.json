{"sha": "d20438695e133586d230e7e687473ad39acc52d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMDQzODY5NWUxMzM1ODZkMjMwZTdlNjg3NDczYWQzOWFjYzUyZDM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-24T17:06:13Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-25T16:12:01Z"}, "message": "libsyntax: make lexer vecs_implicitly_copyable-free", "tree": {"sha": "a7ad2786458c2f9c3bc3e9d09656bbaf917e1052", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7ad2786458c2f9c3bc3e9d09656bbaf917e1052"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d20438695e133586d230e7e687473ad39acc52d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d20438695e133586d230e7e687473ad39acc52d3", "html_url": "https://github.com/rust-lang/rust/commit/d20438695e133586d230e7e687473ad39acc52d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d20438695e133586d230e7e687473ad39acc52d3/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f14409c528125836a5cbe9d4d7a39b8d6695f7b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f14409c528125836a5cbe9d4d7a39b8d6695f7b1", "html_url": "https://github.com/rust-lang/rust/commit/f14409c528125836a5cbe9d4d7a39b8d6695f7b1"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "54fdcc647ea410fee5d919e1b832df8488dbc6b6", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d20438695e133586d230e7e687473ad39acc52d3/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d20438695e133586d230e7e687473ad39acc52d3/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=d20438695e133586d230e7e687473ad39acc52d3", "patch": "@@ -103,26 +103,32 @@ fn dup_string_reader(r: @mut StringReader) -> @mut StringReader {\n         curr: r.curr,\n         filemap: r.filemap,\n         interner: r.interner,\n-        peek_tok: r.peek_tok,\n-        peek_span: r.peek_span\n+        peek_tok: copy r.peek_tok,\n+        peek_span: copy r.peek_span\n     }\n }\n \n impl reader for StringReader {\n     fn is_eof(@mut self) -> bool { is_eof(self) }\n     // return the next token. EFFECT: advances the string_reader.\n     fn next_token(@mut self) -> TokenAndSpan {\n-        let ret_val = TokenAndSpan {tok: self.peek_tok, sp: self.peek_span};\n+        let ret_val = TokenAndSpan {\n+            tok: copy self.peek_tok,\n+            sp: copy self.peek_span,\n+        };\n         string_advance_token(self);\n-        return ret_val;\n+        ret_val\n     }\n     fn fatal(@mut self, m: ~str) -> ! {\n         self.span_diagnostic.span_fatal(copy self.peek_span, m)\n     }\n     fn span_diag(@mut self) -> span_handler { self.span_diagnostic }\n     pure fn interner(@mut self) -> @token::ident_interner { self.interner }\n     fn peek(@mut self) -> TokenAndSpan {\n-        TokenAndSpan {tok: self.peek_tok, sp: self.peek_span}\n+        TokenAndSpan {\n+            tok: copy self.peek_tok,\n+            sp: copy self.peek_span,\n+        }\n     }\n     fn dup(@mut self) -> reader { dup_string_reader(self) as reader }\n }\n@@ -136,7 +142,10 @@ pub impl reader for TtReader {\n     fn span_diag(@mut self) -> span_handler { self.sp_diag }\n     pure fn interner(@mut self) -> @token::ident_interner { self.interner }\n     fn peek(@mut self) -> TokenAndSpan {\n-        TokenAndSpan { tok: self.cur_tok, sp: self.cur_span }\n+        TokenAndSpan {\n+            tok: copy self.cur_tok,\n+            sp: copy self.cur_span,\n+        }\n     }\n     fn dup(@mut self) -> reader { dup_tt_reader(self) as reader }\n }\n@@ -145,8 +154,8 @@ pub impl reader for TtReader {\n fn string_advance_token(r: @mut StringReader) {\n     match (consume_whitespace_and_comments(r)) {\n         Some(comment) => {\n-            r.peek_tok = comment.tok;\n-            r.peek_span = comment.sp;\n+            r.peek_tok = copy comment.tok;\n+            r.peek_span = copy comment.sp;\n         },\n         None => {\n             if is_eof(r) {"}]}