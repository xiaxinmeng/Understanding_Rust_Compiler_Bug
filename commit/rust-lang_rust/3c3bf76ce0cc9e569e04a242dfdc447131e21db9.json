{"sha": "3c3bf76ce0cc9e569e04a242dfdc447131e21db9", "node_id": "C_kwDOAAsO6NoAKDNjM2JmNzZjZTBjYzllNTY5ZTA0YTI0MmRmZGM0NDcxMzFlMjFkYjk", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-09-28T17:42:30Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-09-28T17:42:30Z"}, "message": "Declare `main` as visibility hidden on targets that default to hidden.\n\nOn targets with `default_hidden_visibility` set, which is currrently\njust WebAssembly, declare the generated `main` function with visibility\nhidden. This makes it consistent with clang's WebAssembly target, where\n`main` is just a user function that gets the same visibility as any\nother user function, which is hidden on WebAssembly unless explicitly\noverridden.\n\nThis will help simplify use cases which in the future may want to\nautomatically wasm-export all visibility-\"default\" symbols. `main` isn't\nintended to be wasm-exported, and marking it hidden prevents it from\nbeing wasm-exported in that scenario.", "tree": {"sha": "d5e3c7bf8dd3b8dd9173d0060ee9dfad0ef99d1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5e3c7bf8dd3b8dd9173d0060ee9dfad0ef99d1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c3bf76ce0cc9e569e04a242dfdc447131e21db9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c3bf76ce0cc9e569e04a242dfdc447131e21db9", "html_url": "https://github.com/rust-lang/rust/commit/3c3bf76ce0cc9e569e04a242dfdc447131e21db9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c3bf76ce0cc9e569e04a242dfdc447131e21db9/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09ae7846a272a500ff7145255f0de5556c0b8949", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ae7846a272a500ff7145255f0de5556c0b8949", "html_url": "https://github.com/rust-lang/rust/commit/09ae7846a272a500ff7145255f0de5556c0b8949"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "a6cd1059dc7237e191b6051f0c8767bc157afaa1", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3c3bf76ce0cc9e569e04a242dfdc447131e21db9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3bf76ce0cc9e569e04a242dfdc447131e21db9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=3c3bf76ce0cc9e569e04a242dfdc447131e21db9", "patch": "@@ -1458,7 +1458,12 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n         } else {\n             format!(\"llvm.{}.sat.i{}.f{}\", instr, int_width, float_width)\n         };\n-        let f = self.declare_cfn(&name, llvm::UnnamedAddr::No, self.type_func(&[src_ty], dest_ty));\n+        let f = self.declare_cfn(\n+            &name,\n+            llvm::UnnamedAddr::No,\n+            llvm::Visibility::Default,\n+            self.type_func(&[src_ty], dest_ty),\n+        );\n         self.call(self.type_func(&[src_ty], dest_ty), f, &[val], None)\n     }\n "}, {"sha": "6aeb56eb5ade09701b245aac53b7961a616ba9a7", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3c3bf76ce0cc9e569e04a242dfdc447131e21db9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3bf76ce0cc9e569e04a242dfdc447131e21db9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=3c3bf76ce0cc9e569e04a242dfdc447131e21db9", "patch": "@@ -528,7 +528,12 @@ impl<'ll, 'tcx> MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                     llfn\n                 } else {\n                     let fty = self.type_variadic_func(&[], self.type_i32());\n-                    let llfn = self.declare_cfn(name, llvm::UnnamedAddr::Global, fty);\n+                    let llfn = self.declare_cfn(\n+                        name,\n+                        llvm::UnnamedAddr::Global,\n+                        llvm::Visibility::Default,\n+                        fty,\n+                    );\n                     let target_cpu = attributes::target_cpu_attr(self);\n                     attributes::apply_to_llfn(llfn, llvm::AttributePlace::Function, &[target_cpu]);\n                     llfn\n@@ -585,7 +590,13 @@ impl<'ll, 'tcx> MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n     fn declare_c_main(&self, fn_type: Self::Type) -> Option<Self::Function> {\n         if self.get_declared_value(\"main\").is_none() {\n-            Some(self.declare_cfn(\"main\", llvm::UnnamedAddr::Global, fn_type))\n+            let visibility = if self.sess().target.default_hidden_visibility {\n+                llvm::Visibility::Hidden\n+            } else {\n+                llvm::Visibility::Default\n+            };\n+\n+            Some(self.declare_cfn(\"main\", llvm::UnnamedAddr::Global, visibility, fn_type))\n         } else {\n             // If the symbol already exists, it is an error: for example, the user wrote\n             // #[no_mangle] extern \"C\" fn main(..) {..}\n@@ -615,7 +626,7 @@ impl<'ll> CodegenCx<'ll, '_> {\n         } else {\n             self.type_variadic_func(&[], ret)\n         };\n-        let f = self.declare_cfn(name, llvm::UnnamedAddr::No, fn_ty);\n+        let f = self.declare_cfn(name, llvm::UnnamedAddr::No, llvm::Visibility::Default, fn_ty);\n         self.intrinsics.borrow_mut().insert(name, (fn_ty, f));\n         (fn_ty, f)\n     }"}, {"sha": "21c466ddc244ff5e0ca5ebf7129a2af96a121909", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c3bf76ce0cc9e569e04a242dfdc447131e21db9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3bf76ce0cc9e569e04a242dfdc447131e21db9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=3c3bf76ce0cc9e569e04a242dfdc447131e21db9", "patch": "@@ -32,6 +32,7 @@ fn declare_raw_fn<'ll>(\n     name: &str,\n     callconv: llvm::CallConv,\n     unnamed: llvm::UnnamedAddr,\n+    visibility: llvm::Visibility,\n     ty: &'ll Type,\n ) -> &'ll Value {\n     debug!(\"declare_raw_fn(name={:?}, ty={:?})\", name, ty);\n@@ -41,6 +42,7 @@ fn declare_raw_fn<'ll>(\n \n     llvm::SetFunctionCallConv(llfn, callconv);\n     llvm::SetUnnamedAddress(llfn, unnamed);\n+    llvm::SetVisibility(llfn, visibility);\n \n     let mut attrs = SmallVec::<[_; 4]>::new();\n \n@@ -76,9 +78,10 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n         &self,\n         name: &str,\n         unnamed: llvm::UnnamedAddr,\n+        visibility: llvm::Visibility,\n         fn_type: &'ll Type,\n     ) -> &'ll Value {\n-        declare_raw_fn(self, name, llvm::CCallConv, unnamed, fn_type)\n+        declare_raw_fn(self, name, llvm::CCallConv, unnamed, visibility, fn_type)\n     }\n \n     /// Declare a Rust function.\n@@ -95,6 +98,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n             name,\n             fn_abi.llvm_cconv(),\n             llvm::UnnamedAddr::Global,\n+            llvm::Visibility::Default,\n             fn_abi.llvm_type(self),\n         );\n         fn_abi.apply_attrs_llfn(self, llfn);"}, {"sha": "4e1e6371ad481b069d79482d83e3a430eaf844eb", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3c3bf76ce0cc9e569e04a242dfdc447131e21db9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3bf76ce0cc9e569e04a242dfdc447131e21db9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=3c3bf76ce0cc9e569e04a242dfdc447131e21db9", "patch": "@@ -1216,7 +1216,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n             _ => return_error!(\"unrecognized intrinsic `{}`\", name),\n         };\n         let llvm_name = &format!(\"llvm.{0}.v{1}{2}\", intr_name, in_len, elem_ty_str);\n-        let f = bx.declare_cfn(llvm_name, llvm::UnnamedAddr::No, fn_ty);\n+        let f = bx.declare_cfn(llvm_name, llvm::UnnamedAddr::No, llvm::Visibility::Default, fn_ty);\n         let c =\n             bx.call(fn_ty, f, &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(), None);\n         Ok(c)\n@@ -1416,7 +1416,12 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n             &[llvm_pointer_vec_ty, alignment_ty, mask_ty, llvm_elem_vec_ty],\n             llvm_elem_vec_ty,\n         );\n-        let f = bx.declare_cfn(&llvm_intrinsic, llvm::UnnamedAddr::No, fn_ty);\n+        let f = bx.declare_cfn(\n+            &llvm_intrinsic,\n+            llvm::UnnamedAddr::No,\n+            llvm::Visibility::Default,\n+            fn_ty,\n+        );\n         let v =\n             bx.call(fn_ty, f, &[args[1].immediate(), alignment, mask, args[0].immediate()], None);\n         return Ok(v);\n@@ -1542,7 +1547,12 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n             format!(\"llvm.masked.scatter.{}.{}\", llvm_elem_vec_str, llvm_pointer_vec_str);\n         let fn_ty =\n             bx.type_func(&[llvm_elem_vec_ty, llvm_pointer_vec_ty, alignment_ty, mask_ty], ret_t);\n-        let f = bx.declare_cfn(&llvm_intrinsic, llvm::UnnamedAddr::No, fn_ty);\n+        let f = bx.declare_cfn(\n+            &llvm_intrinsic,\n+            llvm::UnnamedAddr::No,\n+            llvm::Visibility::Default,\n+            fn_ty,\n+        );\n         let v =\n             bx.call(fn_ty, f, &[args[0].immediate(), args[1].immediate(), alignment, mask], None);\n         return Ok(v);\n@@ -1991,7 +2001,8 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n         let vec_ty = bx.cx.type_vector(elem_ty, in_len as u64);\n \n         let fn_ty = bx.type_func(&[vec_ty, vec_ty], vec_ty);\n-        let f = bx.declare_cfn(llvm_intrinsic, llvm::UnnamedAddr::No, fn_ty);\n+        let f =\n+            bx.declare_cfn(llvm_intrinsic, llvm::UnnamedAddr::No, llvm::Visibility::Default, fn_ty);\n         let v = bx.call(fn_ty, f, &[lhs, rhs], None);\n         return Ok(v);\n     }"}, {"sha": "942e7e0427c11d44d053b8a9eaf42aa6fb5bdf5d", "filename": "compiler/rustc_codegen_llvm/src/llvm/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c3bf76ce0cc9e569e04a242dfdc447131e21db9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c3bf76ce0cc9e569e04a242dfdc447131e21db9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs?ref=3c3bf76ce0cc9e569e04a242dfdc447131e21db9", "patch": "@@ -172,6 +172,12 @@ pub fn SetUnnamedAddress(global: &Value, unnamed: UnnamedAddr) {\n     }\n }\n \n+pub fn SetVisibility(global: &Value, visibility: Visibility) {\n+    unsafe {\n+        LLVMRustSetVisibility(global, visibility);\n+    }\n+}\n+\n pub fn set_thread_local_mode(global: &Value, mode: ThreadLocalMode) {\n     unsafe {\n         LLVMSetThreadLocalMode(global, mode);"}]}