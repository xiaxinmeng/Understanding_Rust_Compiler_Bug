{"sha": "71a1ac2c9aabac5435036021374dc231c99e0a90", "node_id": "C_kwDOAAsO6NoAKDcxYTFhYzJjOWFhYmFjNTQzNTAzNjAyMTM3NGRjMjMxYzk5ZTBhOTA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-08T06:09:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-08T06:09:20Z"}, "message": "Rollup merge of #110297 - kylematsuda:earlybinder_tcx_subst, r=BoxyUwU\n\nMake `(try_)subst_and_normalize_erasing_regions` take `EarlyBinder`\n\nChanges `subst_and_normalize_erasing_regions` and `try_subst_and_normalize_erasing_regions` to take  `EarlyBinder<T>` instead of `T`.\n\n(related to #105779)\n\nThis was suggested by `@BoxyUwU` in https://github.com/rust-lang/rust/pull/107753#discussion_r1105828139. After changing `type_of` to return `EarlyBinder`, there were several places where the binder was immediately skipped to call `tcx.subst_and_normalize_erasing_regions`, only for the binder to be reconstructed inside of that method.\n\nr? `@BoxyUwU`", "tree": {"sha": "c28c2362fbc5d0b47bcd7c3e8c03af86c767b6d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c28c2362fbc5d0b47bcd7c3e8c03af86c767b6d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71a1ac2c9aabac5435036021374dc231c99e0a90", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkWJIQCRBK7hj4Ov3rIwAARacIAEDfzA5G5Slg36Ihr1UlV9uD\nli0Kbw0sTp8hN8GxZftHHSYUI9aK1sTJo/I1UpogZ2nkbSOrRM/ihUge9rcnlJq/\n6/MV38mPdSjX64IT37pT2LeFYBvtyjdUBRPMThebb5SIgvj0MOTyj+FmTeQ5fjwt\nksnyit3Jlxz1C0dhYQiJHqAH3m4SSyGSia7Rk9SagiMCOOJRnnTN6PUB0bmNTmkV\nmFxqWIDPUcaIu37juaI7noQyQR+O2l55lyPMnd6JCgw1ZtPHfv67dz7dWPVdb4Ya\nmZ3na7DJ5VghQuvi7JVEIBz9jPo+xi5O+pOVHJTqEu1b9Q+2398W37jLi4uJcGg=\n=APM+\n-----END PGP SIGNATURE-----\n", "payload": "tree c28c2362fbc5d0b47bcd7c3e8c03af86c767b6d9\nparent 04c53444dff325a0a3a4cb88cb952fbf341861ec\nparent d27f40175fb7221bc5fa4c19ff75e211947222e8\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683526160 +0530\ncommitter GitHub <noreply@github.com> 1683526160 +0530\n\nRollup merge of #110297 - kylematsuda:earlybinder_tcx_subst, r=BoxyUwU\n\nMake `(try_)subst_and_normalize_erasing_regions` take `EarlyBinder`\n\nChanges `subst_and_normalize_erasing_regions` and `try_subst_and_normalize_erasing_regions` to take  `EarlyBinder<T>` instead of `T`.\n\n(related to #105779)\n\nThis was suggested by `@BoxyUwU` in https://github.com/rust-lang/rust/pull/107753#discussion_r1105828139. After changing `type_of` to return `EarlyBinder`, there were several places where the binder was immediately skipped to call `tcx.subst_and_normalize_erasing_regions`, only for the binder to be reconstructed inside of that method.\n\nr? `@BoxyUwU`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71a1ac2c9aabac5435036021374dc231c99e0a90", "html_url": "https://github.com/rust-lang/rust/commit/71a1ac2c9aabac5435036021374dc231c99e0a90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71a1ac2c9aabac5435036021374dc231c99e0a90/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04c53444dff325a0a3a4cb88cb952fbf341861ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/04c53444dff325a0a3a4cb88cb952fbf341861ec", "html_url": "https://github.com/rust-lang/rust/commit/04c53444dff325a0a3a4cb88cb952fbf341861ec"}, {"sha": "d27f40175fb7221bc5fa4c19ff75e211947222e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d27f40175fb7221bc5fa4c19ff75e211947222e8", "html_url": "https://github.com/rust-lang/rust/commit/d27f40175fb7221bc5fa4c19ff75e211947222e8"}], "stats": {"total": 73, "additions": 44, "deletions": 29}, "files": [{"sha": "ccb3a0c4f27e4ef183f66396be5ad5c049add808", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=71a1ac2c9aabac5435036021374dc231c99e0a90", "patch": "@@ -361,7 +361,7 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         self.instance.subst_mir_and_normalize_erasing_regions(\n             self.tcx,\n             ty::ParamEnv::reveal_all(),\n-            value,\n+            ty::EarlyBinder(value),\n         )\n     }\n "}, {"sha": "3fff112a02056ac970bd23cbd42e93a7294e4e8d", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs?ref=71a1ac2c9aabac5435036021374dc231c99e0a90", "patch": "@@ -93,7 +93,7 @@ fn make_mir_scope<'ll, 'tcx>(\n             let callee = cx.tcx.subst_and_normalize_erasing_regions(\n                 instance.substs,\n                 ty::ParamEnv::reveal_all(),\n-                callee,\n+                ty::EarlyBinder(callee),\n             );\n             let callee_fn_abi = cx.fn_abi_of_instance(callee, ty::List::empty());\n             cx.dbg_scope_fn(callee, callee_fn_abi, None)"}, {"sha": "c3f0a0033b0eadcfbbd5eca07efeddf0b6a78c49", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=71a1ac2c9aabac5435036021374dc231c99e0a90", "patch": "@@ -529,7 +529,7 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                     let impl_self_ty = cx.tcx.subst_and_normalize_erasing_regions(\n                         instance.substs,\n                         ty::ParamEnv::reveal_all(),\n-                        cx.tcx.type_of(impl_def_id).skip_binder(),\n+                        cx.tcx.type_of(impl_def_id),\n                     );\n \n                     // Only \"class\" methods are generally understood by LLVM,"}, {"sha": "1204c99e533e277880039c5c40fbfb407e68ee69", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=71a1ac2c9aabac5435036021374dc231c99e0a90", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         self.instance.subst_mir_and_normalize_erasing_regions(\n             self.cx.tcx(),\n             ty::ParamEnv::reveal_all(),\n-            value,\n+            ty::EarlyBinder(value),\n         )\n     }\n }"}, {"sha": "b2197a0aabbfe0d8dc4275e6fab1228195d59a65", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=71a1ac2c9aabac5435036021374dc231c99e0a90", "patch": "@@ -495,7 +495,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> Result<T, InterpError<'tcx>> {\n         frame\n             .instance\n-            .try_subst_mir_and_normalize_erasing_regions(*self.tcx, self.param_env, value)\n+            .try_subst_mir_and_normalize_erasing_regions(\n+                *self.tcx,\n+                self.param_env,\n+                ty::EarlyBinder(value),\n+            )\n             .map_err(|_| err_inval!(TooGeneric))\n     }\n "}, {"sha": "8c69894f5ba7ead82ca4dd57231d4e54d7504800", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=71a1ac2c9aabac5435036021374dc231c99e0a90", "patch": "@@ -115,7 +115,7 @@ impl<'tcx> Instance<'tcx> {\n     /// lifetimes erased, allowing a `ParamEnv` to be specified for use during normalization.\n     pub fn ty(&self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Ty<'tcx> {\n         let ty = tcx.type_of(self.def.def_id());\n-        tcx.subst_and_normalize_erasing_regions(self.substs, param_env, ty.skip_binder())\n+        tcx.subst_and_normalize_erasing_regions(self.substs, param_env, ty)\n     }\n \n     /// Finds a crate that contains a monomorphization of this instance that\n@@ -578,14 +578,15 @@ impl<'tcx> Instance<'tcx> {\n         self.def.has_polymorphic_mir_body().then_some(self.substs)\n     }\n \n-    pub fn subst_mir<T>(&self, tcx: TyCtxt<'tcx>, v: &T) -> T\n+    pub fn subst_mir<T>(&self, tcx: TyCtxt<'tcx>, v: EarlyBinder<&T>) -> T\n     where\n         T: TypeFoldable<TyCtxt<'tcx>> + Copy,\n     {\n+        let v = v.map_bound(|v| *v);\n         if let Some(substs) = self.substs_for_mir_body() {\n-            EarlyBinder(*v).subst(tcx, substs)\n+            v.subst(tcx, substs)\n         } else {\n-            *v\n+            v.skip_binder()\n         }\n     }\n \n@@ -594,15 +595,15 @@ impl<'tcx> Instance<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        v: T,\n+        v: EarlyBinder<T>,\n     ) -> T\n     where\n         T: TypeFoldable<TyCtxt<'tcx>> + Clone,\n     {\n         if let Some(substs) = self.substs_for_mir_body() {\n             tcx.subst_and_normalize_erasing_regions(substs, param_env, v)\n         } else {\n-            tcx.normalize_erasing_regions(param_env, v)\n+            tcx.normalize_erasing_regions(param_env, v.skip_binder())\n         }\n     }\n \n@@ -611,15 +612,15 @@ impl<'tcx> Instance<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        v: T,\n+        v: EarlyBinder<T>,\n     ) -> Result<T, NormalizationError<'tcx>>\n     where\n         T: TypeFoldable<TyCtxt<'tcx>> + Clone,\n     {\n         if let Some(substs) = self.substs_for_mir_body() {\n             tcx.try_subst_and_normalize_erasing_regions(substs, param_env, v)\n         } else {\n-            tcx.try_normalize_erasing_regions(param_env, v)\n+            tcx.try_normalize_erasing_regions(param_env, v.skip_binder())\n         }\n     }\n "}, {"sha": "9332b0430ffca294bcbbea218abb6ddef9b34365", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=71a1ac2c9aabac5435036021374dc231c99e0a90", "patch": "@@ -139,7 +139,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         param_substs: SubstsRef<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        value: T,\n+        value: EarlyBinder<T>,\n     ) -> T\n     where\n         T: TypeFoldable<TyCtxt<'tcx>>,\n@@ -151,7 +151,7 @@ impl<'tcx> TyCtxt<'tcx> {\n              param_env={:?})\",\n             param_substs, value, param_env,\n         );\n-        let substituted = EarlyBinder(value).subst(self, param_substs);\n+        let substituted = value.subst(self, param_substs);\n         self.normalize_erasing_regions(param_env, substituted)\n     }\n \n@@ -163,7 +163,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         param_substs: SubstsRef<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        value: T,\n+        value: EarlyBinder<T>,\n     ) -> Result<T, NormalizationError<'tcx>>\n     where\n         T: TypeFoldable<TyCtxt<'tcx>>,\n@@ -175,7 +175,7 @@ impl<'tcx> TyCtxt<'tcx> {\n              param_env={:?})\",\n             param_substs, value, param_env,\n         );\n-        let substituted = EarlyBinder(value).subst(self, param_substs);\n+        let substituted = value.subst(self, param_substs);\n         self.try_normalize_erasing_regions(param_env, substituted)\n     }\n }"}, {"sha": "ece20d8d3e6ed9b6d48d2848caa0909c5c2613db", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=71a1ac2c9aabac5435036021374dc231c99e0a90", "patch": "@@ -180,7 +180,7 @@ impl<'tcx> Inliner<'tcx> {\n         let Ok(callee_body) = callsite.callee.try_subst_mir_and_normalize_erasing_regions(\n             self.tcx,\n             self.param_env,\n-            callee_body.clone(),\n+            ty::EarlyBinder(callee_body.clone()),\n         ) else {\n             return Err(\"failed to normalize callee body\");\n         };\n@@ -444,7 +444,9 @@ impl<'tcx> Inliner<'tcx> {\n                 work_list.push(target);\n \n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n-                let ty = callsite.callee.subst_mir(self.tcx, &place.ty(callee_body, tcx).ty);\n+                let ty = callsite\n+                    .callee\n+                    .subst_mir(self.tcx, ty::EarlyBinder(&place.ty(callee_body, tcx).ty));\n                 if ty.needs_drop(tcx, self.param_env) && let UnwindAction::Cleanup(unwind) = unwind {\n                         work_list.push(unwind);\n                     }\n@@ -788,7 +790,9 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n         match terminator.kind {\n             TerminatorKind::Drop { ref place, unwind, .. } => {\n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n-                let ty = self.instance.subst_mir(tcx, &place.ty(self.callee_body, tcx).ty);\n+                let ty = self\n+                    .instance\n+                    .subst_mir(tcx, ty::EarlyBinder(&place.ty(self.callee_body, tcx).ty));\n                 if ty.needs_drop(tcx, self.param_env) {\n                     self.cost += CALL_PENALTY;\n                     if let UnwindAction::Cleanup(_) = unwind {\n@@ -799,7 +803,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n                 }\n             }\n             TerminatorKind::Call { func: Operand::Constant(ref f), unwind, .. } => {\n-                let fn_ty = self.instance.subst_mir(tcx, &f.literal.ty());\n+                let fn_ty = self.instance.subst_mir(tcx, ty::EarlyBinder(&f.literal.ty()));\n                 self.cost += if let ty::FnDef(def_id, _) = *fn_ty.kind() && tcx.is_intrinsic(def_id) {\n                     // Don't give intrinsics the extra penalty for calls\n                     INSTR_COST"}, {"sha": "1ccf06f6153fc369031864834d55c577dccd2f51", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=71a1ac2c9aabac5435036021374dc231c99e0a90", "patch": "@@ -44,7 +44,11 @@ pub(crate) fn mir_callgraph_reachable<'tcx>(\n     ) -> bool {\n         trace!(%caller);\n         for &(callee, substs) in tcx.mir_inliner_callees(caller.def) {\n-            let Ok(substs) = caller.try_subst_mir_and_normalize_erasing_regions(tcx, param_env, substs) else {\n+            let Ok(substs) = caller.try_subst_mir_and_normalize_erasing_regions(\n+                tcx,\n+                param_env,\n+                ty::EarlyBinder(substs),\n+            ) else {\n                 trace!(?caller, ?param_env, ?substs, \"cannot normalize, skipping\");\n                 continue;\n             };"}, {"sha": "55c937b305a49d11e33b2dbbd044941ff2853623", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=71a1ac2c9aabac5435036021374dc231c99e0a90", "patch": "@@ -677,7 +677,7 @@ impl<'a, 'tcx> MirNeighborCollector<'a, 'tcx> {\n         self.instance.subst_mir_and_normalize_erasing_regions(\n             self.tcx,\n             ty::ParamEnv::reveal_all(),\n-            value,\n+            ty::EarlyBinder(value),\n         )\n     }\n }"}, {"sha": "37b7f6bf8a8fcc61e11c556b577467075e45fb15", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=71a1ac2c9aabac5435036021374dc231c99e0a90", "patch": "@@ -310,7 +310,7 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n                     let impl_self_ty = tcx.subst_and_normalize_erasing_regions(\n                         instance.substs,\n                         ty::ParamEnv::reveal_all(),\n-                        tcx.type_of(impl_def_id).skip_binder(),\n+                        tcx.type_of(impl_def_id),\n                     );\n                     if let Some(def_id) = characteristic_def_id_of_type(impl_self_ty) {\n                         return Some(def_id);"}, {"sha": "d12bfc6f6bb1d6d6588b403ed7c2cff54a5b501e", "filename": "compiler/rustc_monomorphize/src/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs?ref=71a1ac2c9aabac5435036021374dc231c99e0a90", "patch": "@@ -29,12 +29,12 @@ pub(crate) fn dump_closure_profile<'tcx>(tcx: TyCtxt<'tcx>, closure_instance: In\n         let before_feature_tys = tcx.subst_and_normalize_erasing_regions(\n             closure_instance.substs,\n             param_env,\n-            before_feature_tys,\n+            ty::EarlyBinder(before_feature_tys),\n         );\n         let after_feature_tys = tcx.subst_and_normalize_erasing_regions(\n             closure_instance.substs,\n             param_env,\n-            after_feature_tys,\n+            ty::EarlyBinder(after_feature_tys),\n         );\n \n         let new_size = tcx"}, {"sha": "ec577072e196f59f5572cf46a8b25f43d216e6a1", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a1ac2c9aabac5435036021374dc231c99e0a90/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=71a1ac2c9aabac5435036021374dc231c99e0a90", "patch": "@@ -27,8 +27,7 @@ fn resolve_instance<'tcx>(\n         )\n     } else {\n         let ty = tcx.type_of(def);\n-        let item_type =\n-            tcx.subst_and_normalize_erasing_regions(substs, param_env, ty.skip_binder());\n+        let item_type = tcx.subst_and_normalize_erasing_regions(substs, param_env, ty);\n \n         let def = match *item_type.kind() {\n             ty::FnDef(def_id, ..) if tcx.is_intrinsic(def_id) => {"}, {"sha": "67b7d3691dc02df12ce70157704edc49d262cf1b", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71a1ac2c9aabac5435036021374dc231c99e0a90/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a1ac2c9aabac5435036021374dc231c99e0a90/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=71a1ac2c9aabac5435036021374dc231c99e0a90", "patch": "@@ -385,6 +385,9 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n             Node::Expr(parent_expr) => {\n                 if let Some((callee_def_id, call_substs, recv, call_args)) = get_callee_substs_and_args(cx, parent_expr)\n                 {\n+                    // FIXME: the `subst_identity()` below seems incorrect, since we eventually\n+                    // call `tcx.try_subst_and_normalize_erasing_regions` further down\n+                    // (i.e., we are explicitly not in the identity context).\n                     let fn_sig = cx.tcx.fn_sig(callee_def_id).subst_identity().skip_binder();\n                     if let Some(arg_index) = recv.into_iter().chain(call_args).position(|arg| arg.hir_id == expr.hir_id)\n                         && let Some(param_ty) = fn_sig.inputs().get(arg_index)\n@@ -435,7 +438,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                         let output_ty = fn_sig.output();\n                         if output_ty.contains(*param_ty) {\n                             if let Ok(new_ty)  = cx.tcx.try_subst_and_normalize_erasing_regions(\n-                                new_subst, cx.param_env, output_ty) {\n+                                new_subst, cx.param_env, EarlyBinder(output_ty)) {\n                                 expr = parent_expr;\n                                 ty = new_ty;\n                                 continue;"}]}