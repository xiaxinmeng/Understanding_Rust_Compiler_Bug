{"sha": "f38b7ff3b690a0720506250f421c5983d4f4f9ef", "node_id": "C_kwDOAAsO6NoAKGYzOGI3ZmYzYjY5MGEwNzIwNTA2MjUwZjQyMWM1OTgzZDRmNGY5ZWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-05-13T03:33:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-13T03:33:10Z"}, "message": "Rollup merge of #96932 - sunfishcode:sunfishcode/document-borrowed-handle, r=joshtriplett\n\nClarify what values `BorrowedHandle`, `OwnedHandle` etc. can hold.\n\nReword the documentation to clarify that when `BorrowedHandle`, `OwnedHandle`, or `HandleOrNull` hold the value `-1`, it always means the current process handle, and not `INVALID_HANDLE_VALUE`.\n\n`-1` should only mean `INVALID_HANDLE_VALUE` after a call to a function documented to return that to report errors, which should lead I/O functions to produce errors rather than succeeding and producing `OwnedHandle` or `BorrowedHandle` values. So if a consumer of an `OwnedHandle` or `BorrowedHandle` ever sees them holding a `-1`, it should always mean the current process handle.", "tree": {"sha": "4d48950fc102d546ad8ffdd41648c525007bad2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d48950fc102d546ad8ffdd41648c525007bad2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f38b7ff3b690a0720506250f421c5983d4f4f9ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJifdF3CRBK7hj4Ov3rIwAAjFoIABYpMxtiZRYQBogbrOMM8Ytd\n5PntgXFKgGcYFaXwZWW43qBs60QqmD+L/0VYdjv5roQri75eQ0kJcPH+X44epbl4\noC+axDZWdmOw4o+IpwL1Re23qvF78xsAzsak3PnEqbZq+1QtYoNO2K0+mf/f9DxT\nzU1duJsD8n9KskdtDFDblJNBOU8KnWWk5AiSdiaqQDf/dSlvY84ejP0TtZTICFT2\n0uDQh8tNvq9q1p/QKlIuwKHX0wLcK/dmjCNcvEYgjiYE3blN8f4CptUecrXzCxLA\nDMQx+/rw9K1OKAEa+g1+wOeI8IDqZA6DvUAs7OlZGQa+xPmz58uajh3iGZD1434=\n=VzVZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d48950fc102d546ad8ffdd41648c525007bad2e\nparent ebb80ec4e90f8622440f3e33562db0d6e6c66555\nparent 275812ad2cb0a5a9a8de88151438d1319a6f0704\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1652412790 +0200\ncommitter GitHub <noreply@github.com> 1652412790 +0200\n\nRollup merge of #96932 - sunfishcode:sunfishcode/document-borrowed-handle, r=joshtriplett\n\nClarify what values `BorrowedHandle`, `OwnedHandle` etc. can hold.\n\nReword the documentation to clarify that when `BorrowedHandle`, `OwnedHandle`, or `HandleOrNull` hold the value `-1`, it always means the current process handle, and not `INVALID_HANDLE_VALUE`.\n\n`-1` should only mean `INVALID_HANDLE_VALUE` after a call to a function documented to return that to report errors, which should lead I/O functions to produce errors rather than succeeding and producing `OwnedHandle` or `BorrowedHandle` values. So if a consumer of an `OwnedHandle` or `BorrowedHandle` ever sees them holding a `-1`, it should always mean the current process handle.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f38b7ff3b690a0720506250f421c5983d4f4f9ef", "html_url": "https://github.com/rust-lang/rust/commit/f38b7ff3b690a0720506250f421c5983d4f4f9ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f38b7ff3b690a0720506250f421c5983d4f4f9ef/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebb80ec4e90f8622440f3e33562db0d6e6c66555", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb80ec4e90f8622440f3e33562db0d6e6c66555", "html_url": "https://github.com/rust-lang/rust/commit/ebb80ec4e90f8622440f3e33562db0d6e6c66555"}, {"sha": "275812ad2cb0a5a9a8de88151438d1319a6f0704", "url": "https://api.github.com/repos/rust-lang/rust/commits/275812ad2cb0a5a9a8de88151438d1319a6f0704", "html_url": "https://github.com/rust-lang/rust/commit/275812ad2cb0a5a9a8de88151438d1319a6f0704"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "f27970eaaf1228d3c4ce6eb8fc6544d6044468c2", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f38b7ff3b690a0720506250f421c5983d4f4f9ef/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38b7ff3b690a0720506250f421c5983d4f4f9ef/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=f38b7ff3b690a0720506250f421c5983d4f4f9ef", "patch": "@@ -22,8 +22,10 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// so it can be used in FFI in places where a handle is passed as an argument,\n /// it is not captured or consumed.\n ///\n-/// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n-/// sometimes a valid handle value. See [here] for the full story.\n+/// Note that it *may* have the value `-1`, which in `BorrowedHandle` always\n+/// represents a valid handle value, such as [the current process handle], and\n+/// not `INVALID_HANDLE_VALUE`, despite the two having the same value. See\n+/// [here] for the full story.\n ///\n /// And, it *may* have the value `NULL` (0), which can occur when consoles are\n /// detached from processes, or when `windows_subsystem` is used.\n@@ -33,6 +35,7 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// handle, which is then borrowed under the same lifetime.\n ///\n /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n+/// [the current process handle]: https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess#remarks\n #[derive(Copy, Clone)]\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n@@ -45,8 +48,10 @@ pub struct BorrowedHandle<'handle> {\n ///\n /// This closes the handle on drop.\n ///\n-/// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n-/// sometimes a valid handle value. See [here] for the full story.\n+/// Note that it *may* have the value `-1`, which in `OwnedHandle` always\n+/// represents a valid handle value, such as [the current process handle], and\n+/// not `INVALID_HANDLE_VALUE`, despite the two having the same value. See\n+/// [here] for the full story.\n ///\n /// And, it *may* have the value `NULL` (0), which can occur when consoles are\n /// detached from processes, or when `windows_subsystem` is used.\n@@ -59,6 +64,7 @@ pub struct BorrowedHandle<'handle> {\n /// [`RegCloseKey`]: https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regclosekey\n ///\n /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n+/// [the current process handle]: https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess#remarks\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct OwnedHandle {\n@@ -75,11 +81,13 @@ pub struct OwnedHandle {\n /// `NULL`. This ensures that such FFI calls cannot start using the handle without\n /// checking for `NULL` first.\n ///\n-/// This type considers any value other than `NULL` to be valid, including `INVALID_HANDLE_VALUE`.\n-/// This is because APIs that use `NULL` as their sentry value don't treat `INVALID_HANDLE_VALUE`\n-/// as special.\n+/// This type may hold any handle value that [`OwnedHandle`] may hold. As with `OwnedHandle`, when\n+/// it holds `-1`, that value is interpreted as a valid handle value, such as\n+/// [the current process handle], and not `INVALID_HANDLE_VALUE`.\n ///\n-/// If this holds a valid handle, it will close the handle on drop.\n+/// If this holds a non-null handle, it will close the handle on drop.\n+///\n+/// [the current process handle]: https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess#remarks\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n #[derive(Debug)]\n@@ -95,11 +103,10 @@ pub struct HandleOrNull(OwnedHandle);\n /// `INVALID_HANDLE_VALUE`. This ensures that such FFI calls cannot start using the handle without\n /// checking for `INVALID_HANDLE_VALUE` first.\n ///\n-/// This type considers any value other than `INVALID_HANDLE_VALUE` to be valid, including `NULL`.\n-/// This is because APIs that use `INVALID_HANDLE_VALUE` as their sentry value may return `NULL`\n-/// under `windows_subsystem = \"windows\"` or other situations where I/O devices are detached.\n+/// This type may hold any handle value that [`OwnedHandle`] may hold, except that when it holds\n+/// `-1`, that value is interpreted to mean `INVALID_HANDLE_VALUE`.\n ///\n-/// If this holds a valid handle, it will close the handle on drop.\n+/// If holds a handle other than `INVALID_HANDLE_VALUE`, it will close the handle on drop.\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n #[derive(Debug)]"}, {"sha": "49e4f304f5dba6363992bc248d7eb2ca274ca096", "filename": "library/std/src/os/windows/io/raw.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f38b7ff3b690a0720506250f421c5983d4f4f9ef/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38b7ff3b690a0720506250f421c5983d4f4f9ef/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs?ref=f38b7ff3b690a0720506250f421c5983d4f4f9ef", "patch": "@@ -32,8 +32,15 @@ pub trait AsRawHandle {\n     /// raw handle to the caller, and the handle is only guaranteed\n     /// to be valid while the original object has not yet been destroyed.\n     ///\n+    /// This function may return null, such as when called on [`Stdin`],\n+    /// [`Stdout`], or [`Stderr`] when the console is detached.\n+    ///\n     /// However, borrowing is not strictly required. See [`AsHandle::as_handle`]\n     /// for an API which strictly borrows a handle.\n+    ///\n+    /// [`Stdin`]: io::Stdin\n+    /// [`Stdout`]: io::Stdout\n+    /// [`Stderr`]: io::Stderr\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_raw_handle(&self) -> RawHandle;\n }"}]}