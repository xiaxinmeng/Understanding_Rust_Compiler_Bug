{"sha": "7a255a2f9381ba5886cacc48c1dd0420a739a55c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMjU1YTJmOTM4MWJhNTg4NmNhY2M0OGMxZGQwNDIwYTczOWE1NWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T14:13:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T14:19:07Z"}, "message": "Remove old location infra", "tree": {"sha": "801221aea42de3713a539bd0dba6948ef7609b01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/801221aea42de3713a539bd0dba6948ef7609b01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a255a2f9381ba5886cacc48c1dd0420a739a55c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a255a2f9381ba5886cacc48c1dd0420a739a55c", "html_url": "https://github.com/rust-lang/rust/commit/7a255a2f9381ba5886cacc48c1dd0420a739a55c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a255a2f9381ba5886cacc48c1dd0420a739a55c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56710f119b7114efac237ac36ea21730b8bd5311", "url": "https://api.github.com/repos/rust-lang/rust/commits/56710f119b7114efac237ac36ea21730b8bd5311", "html_url": "https://github.com/rust-lang/rust/commit/56710f119b7114efac237ac36ea21730b8bd5311"}], "stats": {"total": 69, "additions": 6, "deletions": 63}, "files": [{"sha": "4611c6e38679921e805201d716365c90fa1d7ecc", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a255a2f9381ba5886cacc48c1dd0420a739a55c/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a255a2f9381ba5886cacc48c1dd0420a739a55c/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=7a255a2f9381ba5886cacc48c1dd0420a739a55c", "patch": "@@ -8,8 +8,8 @@ use rustc_hash::FxHashMap;\n \n use crate::{\n     dyn_map::{DynMap, Policy},\n-    ConstId, EnumVariantId, FunctionId, ImplId, StaticId, StructFieldId, StructId, TraitId,\n-    TypeAliasId, TypeParamId, EnumId, UnionId,\n+    ConstId, EnumId, EnumVariantId, FunctionId, ImplId, StaticId, StructFieldId, StructId, TraitId,\n+    TypeAliasId, TypeParamId, UnionId,\n };\n \n type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;"}, {"sha": "f085bbe872d006ea6fd551a43070820b55eec3c5", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 4, "deletions": 61, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/7a255a2f9381ba5886cacc48c1dd0420a739a55c/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a255a2f9381ba5886cacc48c1dd0420a739a55c/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=7a255a2f9381ba5886cacc48c1dd0420a739a55c", "patch": "@@ -40,14 +40,14 @@ mod test_db;\n #[cfg(test)]\n mod marks;\n \n-use std::hash::{Hash, Hasher};\n+use std::hash::Hash;\n \n-use hir_expand::{ast_id_map::FileAstId, db::AstDatabase, AstId, HirFileId, InFile, MacroDefId};\n+use hir_expand::{ast_id_map::FileAstId, AstId, HirFileId, InFile, MacroDefId};\n use ra_arena::{impl_arena_id, RawId};\n use ra_db::{impl_intern_key, salsa, CrateId};\n-use ra_syntax::{ast, AstNode};\n+use ra_syntax::ast;\n \n-use crate::{builtin_type::BuiltinType, db::InternDatabase};\n+use crate::builtin_type::BuiltinType;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct LocalImportId(RawId);\n@@ -65,63 +65,6 @@ pub struct ModuleId {\n pub struct LocalModuleId(RawId);\n impl_arena_id!(LocalModuleId);\n \n-#[derive(Debug)]\n-pub struct ItemLoc<N: AstNode> {\n-    pub(crate) module: ModuleId,\n-    ast_id: AstId<N>,\n-}\n-\n-impl<N: AstNode> PartialEq for ItemLoc<N> {\n-    fn eq(&self, other: &Self) -> bool {\n-        self.module == other.module && self.ast_id == other.ast_id\n-    }\n-}\n-impl<N: AstNode> Eq for ItemLoc<N> {}\n-impl<N: AstNode> Hash for ItemLoc<N> {\n-    fn hash<H: Hasher>(&self, hasher: &mut H) {\n-        self.module.hash(hasher);\n-        self.ast_id.hash(hasher);\n-    }\n-}\n-\n-impl<N: AstNode> Clone for ItemLoc<N> {\n-    fn clone(&self) -> ItemLoc<N> {\n-        ItemLoc { module: self.module, ast_id: self.ast_id }\n-    }\n-}\n-\n-#[derive(Clone, Copy)]\n-pub struct LocationCtx<DB> {\n-    db: DB,\n-    module: ModuleId,\n-    file_id: HirFileId,\n-}\n-\n-impl<'a, DB> LocationCtx<&'a DB> {\n-    pub fn new(db: &'a DB, module: ModuleId, file_id: HirFileId) -> LocationCtx<&'a DB> {\n-        LocationCtx { db, module, file_id }\n-    }\n-}\n-\n-pub trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<N>) -> Self;\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<N>;\n-\n-    fn from_ast_id(ctx: LocationCtx<&impl InternDatabase>, ast_id: FileAstId<N>) -> Self {\n-        let loc = ItemLoc { module: ctx.module, ast_id: AstId::new(ctx.file_id, ast_id) };\n-        Self::intern(ctx.db, loc)\n-    }\n-    fn source(self, db: &(impl AstDatabase + InternDatabase)) -> InFile<N> {\n-        let loc = self.lookup_intern(db);\n-        let value = loc.ast_id.to_node(db);\n-        InFile { file_id: loc.ast_id.file_id, value }\n-    }\n-    fn module(self, db: &impl InternDatabase) -> ModuleId {\n-        let loc = self.lookup_intern(db);\n-        loc.module\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct FunctionId(salsa::InternId);\n impl_intern_key!(FunctionId);"}]}