{"sha": "aa3fe205223936e37c0accd91473fa3d666451ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhM2ZlMjA1MjIzOTM2ZTM3YzBhY2NkOTE0NzNmYTNkNjY2NDUxY2U=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2015-01-20T19:28:36Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2015-01-31T10:38:49Z"}, "message": "Replace uses of Decorator and Modifier", "tree": {"sha": "481c91362307cde7e4c3d39e1c8b0514e12dad84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/481c91362307cde7e4c3d39e1c8b0514e12dad84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa3fe205223936e37c0accd91473fa3d666451ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3fe205223936e37c0accd91473fa3d666451ce", "html_url": "https://github.com/rust-lang/rust/commit/aa3fe205223936e37c0accd91473fa3d666451ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa3fe205223936e37c0accd91473fa3d666451ce/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01172eedfab32b24e38aa86ba0cba24453e842fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/01172eedfab32b24e38aa86ba0cba24453e842fb", "html_url": "https://github.com/rust-lang/rust/commit/01172eedfab32b24e38aa86ba0cba24453e842fb"}], "stats": {"total": 124, "additions": 92, "deletions": 32}, "files": [{"sha": "98f1f73b563bfec72814086e20fb56b967f39a9e", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3fe205223936e37c0accd91473fa3d666451ce/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3fe205223936e37c0accd91473fa3d666451ce/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=aa3fe205223936e37c0accd91473fa3d666451ce", "patch": "@@ -14,7 +14,7 @@ use lint::{LintPassObject, LintId, Lint};\n use session::Session;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n-use syntax::ext::base::{IdentTT, Decorator, Modifier, MultiModifier, MacroRulesTT};\n+use syntax::ext::base::{IdentTT, Decorator, MultiDecorator, Modifier, MultiModifier, MacroRulesTT};\n use syntax::ext::base::{MacroExpanderFn};\n use syntax::codemap::Span;\n use syntax::parse::token;\n@@ -76,11 +76,13 @@ impl<'a> Registry<'a> {\n     /// Register a syntax extension of any kind.\n     ///\n     /// This is the most general hook into `libsyntax`'s expansion behavior.\n+    #[allow(deprecated)]\n     pub fn register_syntax_extension(&mut self, name: ast::Name, extension: SyntaxExtension) {\n         self.syntax_exts.push((name, match extension {\n             NormalTT(ext, _) => NormalTT(ext, Some(self.krate_span)),\n             IdentTT(ext, _) => IdentTT(ext, Some(self.krate_span)),\n             Decorator(ext) => Decorator(ext),\n+            MultiDecorator(ext) => MultiDecorator(ext),\n             Modifier(ext) => Modifier(ext),\n             MultiModifier(ext) => MultiModifier(ext),\n             MacroRulesTT => {"}, {"sha": "cf0df37ede841310b76b64c0956aed9e88a1a763", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aa3fe205223936e37c0accd91473fa3d666451ce/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3fe205223936e37c0accd91473fa3d666451ce/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=aa3fe205223936e37c0accd91473fa3d666451ce", "patch": "@@ -39,6 +39,8 @@ pub trait ItemDecorator {\n               push: Box<FnMut(P<ast::Item>)>);\n }\n \n+#[allow(deprecated)]\n+#[deprecated=\"Replaced by MultiItemDecorator\"]\n impl<F> ItemDecorator for F\n     where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, &ast::Item, Box<FnMut(P<ast::Item>)>)\n {\n@@ -62,6 +64,7 @@ pub trait ItemModifier {\n               -> P<ast::Item>;\n }\n \n+#[allow(deprecated)]\n #[deprecated=\"Replaced by MultiItemModifier\"]\n impl<F> ItemModifier for F\n     where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, P<ast::Item>) -> P<ast::Item>\n@@ -157,18 +160,18 @@ pub trait MultiItemDecorator {\n               sp: Span,\n               meta_item: &ast::MetaItem,\n               item: &Annotatable,\n-              push: Box<FnMut(P<Annotatable>)>);\n+              push: Box<FnMut(Annotatable)>);\n }\n \n impl<F> MultiItemDecorator for F\n-    where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, &Annotatable, Box<FnMut(P<Annotatable>)>)\n+    where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, &Annotatable, Box<FnMut(Annotatable)>)\n {\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n               sp: Span,\n               meta_item: &ast::MetaItem,\n               item: &Annotatable,\n-              push: Box<FnMut(P<Annotatable>)>) {\n+              push: Box<FnMut(Annotatable)>) {\n         (*self)(ecx, sp, meta_item, item, push)\n     }\n }\n@@ -426,7 +429,7 @@ pub enum SyntaxExtension {\n     /// A syntax extension that is attached to an item and creates new items\n     /// based upon it.\n     ///\n-    /// `#[derive(...)]` is an `ItemDecorator`.\n+    /// `#[derive(...)]` is a `MultiItemDecorator`.\n     MultiDecorator(Box<MultiItemDecorator + 'static>),\n \n     /// A syntax extension that is attached to an item and modifies it\n@@ -499,7 +502,7 @@ fn initial_syntax_expander_table(ecfg: &expand::ExpansionConfig) -> SyntaxEnv {\n                             builtin_normal_expander(\n                                     ext::log_syntax::expand_syntax_ext));\n     syntax_expanders.insert(intern(\"derive\"),\n-                            Decorator(box ext::deriving::expand_meta_derive));\n+                            MultiDecorator(box ext::deriving::expand_meta_derive));\n     syntax_expanders.insert(intern(\"deriving\"),\n                             Decorator(box ext::deriving::expand_deprecated_deriving));\n \n@@ -562,7 +565,7 @@ fn initial_syntax_expander_table(ecfg: &expand::ExpansionConfig) -> SyntaxEnv {\n                             builtin_normal_expander(\n                                     ext::cfg::expand_cfg));\n     syntax_expanders.insert(intern(\"cfg_attr\"),\n-                            Modifier(box ext::cfg_attr::expand));\n+                            MultiModifier(box ext::cfg_attr::expand));\n     syntax_expanders.insert(intern(\"trace_macros\"),\n                             builtin_normal_expander(\n                                     ext::trace_macros::expand_trace_macros));"}, {"sha": "d282c3084deacfa662bf8789c55279d439a5234e", "filename": "src/libsyntax/ext/cfg_attr.rs", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/aa3fe205223936e37c0accd91473fa3d666451ce/src%2Flibsyntax%2Fext%2Fcfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3fe205223936e37c0accd91473fa3d666451ce/src%2Flibsyntax%2Fext%2Fcfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fcfg_attr.rs?ref=aa3fe205223936e37c0accd91473fa3d666451ce", "patch": "@@ -8,27 +8,70 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast;\n+use ast::{self, TraitItem, ImplItem};\n use attr;\n use codemap::Span;\n-use ext::base::ExtCtxt;\n+use ext::base::{Annotatable, ExtCtxt};\n use ext::build::AstBuilder;\n use ptr::P;\n \n-pub fn expand(cx: &mut ExtCtxt, sp: Span, mi: &ast::MetaItem, it: P<ast::Item>) -> P<ast::Item> {\n+macro_rules! fold_annotatable {\n+    ($ann:expr, $item:ident => $oper:expr) => (\n+        match $ann {\n+            Annotatable::Item(it) => {\n+                let mut $item = (*it).clone();\n+                $oper;\n+                Annotatable::Item(P($item))\n+            }\n+            Annotatable::TraitItem(it) => {\n+                match it {\n+                    TraitItem::RequiredMethod(mut $item) => {\n+                        $oper;\n+                        Annotatable::TraitItem(TraitItem::RequiredMethod($item))\n+                    }\n+                    TraitItem::ProvidedMethod(pm) => {\n+                        let mut $item = (*pm).clone();\n+                        $oper;\n+                        Annotatable::TraitItem(TraitItem::ProvidedMethod(P($item)))\n+                    }\n+                    TraitItem::TypeTraitItem(at) => {\n+                        let mut $item = (*at).clone();\n+                        $oper;\n+                        Annotatable::TraitItem(TraitItem::TypeTraitItem(P($item)))\n+                    }\n+                }\n+            }\n+            Annotatable::ImplItem(it) => {\n+                match it {\n+                    ImplItem::MethodImplItem(pm) => {\n+                        let mut $item = (*pm).clone();\n+                        $oper;\n+                        Annotatable::ImplItem(ImplItem::MethodImplItem(P($item)))\n+                    }\n+                    ImplItem::TypeImplItem(at) => {\n+                        let mut $item = (*at).clone();\n+                        $oper;\n+                        Annotatable::ImplItem(ImplItem::TypeImplItem(P($item)))\n+                    }\n+                }\n+            }\n+        }\n+    );\n+}\n+\n+pub fn expand(cx: &mut ExtCtxt, sp: Span, mi: &ast::MetaItem, ann: Annotatable) -> Annotatable {\n     let (cfg, attr) = match mi.node {\n         ast::MetaList(_, ref mis) if mis.len() == 2 => (&mis[0], &mis[1]),\n         _ => {\n             cx.span_err(sp, \"expected `#[cfg_attr(<cfg pattern>, <attr>)]`\");\n-            return it;\n+            return ann;\n         }\n     };\n \n-    let mut out = (*it).clone();\n     if attr::cfg_matches(&cx.parse_sess.span_diagnostic, cx.cfg.as_slice(), &**cfg) {\n-        out.attrs.push(cx.attribute(attr.span, attr.clone()));\n+        let attr = cx.attribute(attr.span, attr.clone());\n+        fold_annotatable!(ann, item => item.attrs.push(attr))\n+    } else {\n+        ann\n     }\n-\n-    P(out)\n }\n-"}, {"sha": "a06ed638fe14d0a9e689048cde14b49cb18f87f3", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aa3fe205223936e37c0accd91473fa3d666451ce/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3fe205223936e37c0accd91473fa3d666451ce/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=aa3fe205223936e37c0accd91473fa3d666451ce", "patch": "@@ -13,10 +13,9 @@\n //! FIXME (#2810): hygiene. Search for \"__\" strings (in other files too). We also assume \"extra\" is\n //! the standard library, and \"std\" is the core library.\n \n-use ast::{Item, MetaItem, MetaList, MetaNameValue, MetaWord};\n-use ext::base::ExtCtxt;\n+use ast::{MetaItem, MetaList, MetaNameValue, MetaWord};\n+use ext::base::{Annotatable, ExtCtxt};\n use codemap::Span;\n-use ptr::P;\n \n pub mod bounds;\n pub mod clone;\n@@ -49,10 +48,20 @@ pub fn expand_deprecated_deriving(cx: &mut ExtCtxt,\n }\n \n pub fn expand_meta_derive(cx: &mut ExtCtxt,\n-                          _span: Span,\n+                          span: Span,\n                           mitem: &MetaItem,\n-                          item: &Item,\n-                          mut push: Box<FnMut(P<Item>)>) {\n+                          annotatable: &Annotatable,\n+                          mut push: Box<FnMut(Annotatable)>)\n+{\n+    // Derive can only be applied to items\n+    let item = match annotatable {\n+        &Annotatable::Item(ref it) => it.clone(),\n+        _ => {\n+            cx.span_err(span, \"`derive` can only be applied to items\");\n+            return;\n+        }\n+    };\n+\n     match mitem.node {\n         MetaNameValue(_, ref l) => {\n             cx.span_err(l.span, \"unexpected value in `derive`\");\n@@ -70,8 +79,8 @@ pub fn expand_meta_derive(cx: &mut ExtCtxt,\n                     MetaList(ref tname, _) |\n                     MetaWord(ref tname) => {\n                         macro_rules! expand {\n-                            ($func:path) => ($func(cx, titem.span, &**titem, item,\n-                                                   |i| push(i)))\n+                            ($func:path) => ($func(cx, titem.span, &**titem,\n+                                                   &*item, |i| push(Annotatable::Item(i))))\n                         }\n \n                         match tname.get() {"}, {"sha": "672acfbff6589b93380219429bfb90c0b76cab13", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/aa3fe205223936e37c0accd91473fa3d666451ce/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3fe205223936e37c0accd91473fa3d666451ce/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=aa3fe205223936e37c0accd91473fa3d666451ce", "patch": "@@ -488,6 +488,7 @@ pub fn expand_item(it: P<ast::Item>, fld: &mut MacroExpander)\n         .into_iter().map(|i| i.expect_item()).collect()\n }\n \n+#[allow(deprecated)] // This is needed because the `ItemModifier` trait is used\n fn expand_item_modifiers(mut it: P<ast::Item>, fld: &mut MacroExpander)\n                          -> P<ast::Item> {\n     // partition the attributes into ItemModifiers and others\n@@ -1056,6 +1057,7 @@ impl<'a> Folder for PatIdentRenamer<'a> {\n     }\n }\n \n+#[allow(deprecated)] // This is needed because the `Decorator` variant is used\n fn expand_annotatable(a: Annotatable,\n                       fld: &mut MacroExpander)\n                       -> SmallVector<Annotatable> {\n@@ -1092,7 +1094,8 @@ fn expand_annotatable(a: Annotatable,\n                     dec.expand(fld.cx, attr.span, &*attr.node.value, &**it,\n                                box |&mut: item| items.push(item));\n                     decorator_items.extend(items.into_iter()\n-                        .flat_map(|item| expand_item(item, fld).into_iter()));\n+                        .flat_map(|item| expand_item(item, fld).into_iter()\n+                                                               .map(|i| Annotatable::Item(i))));\n \n                     fld.cx.bt_pop();\n                 }\n@@ -1108,13 +1111,13 @@ fn expand_annotatable(a: Annotatable,\n                         }\n                     });\n \n-                    // we'd ideally decorator_items.push_all(expand_item(item, fld)),\n+                    // we'd ideally decorator_items.push_all(expand_annotatable(ann, fld)),\n                     // but that double-mut-borrows fld\n-                    let mut items: SmallVector<P<ast::Item>> = SmallVector::zero();\n-                    dec.expand(fld.cx, attr.span, &*attr.node.value, a,\n-                               box |&mut: item| items.push(item));\n-                    decorator_items.extend(items.into_iter()\n-                        .flat_map(|item| expand_item(item, fld).into_iter()));\n+                    let mut anns: SmallVector<Annotatable> = SmallVector::zero();\n+                    dec.expand(fld.cx, attr.span, &*attr.node.value, &a,\n+                               box |&mut: ann| anns.push(ann));\n+                    decorator_items.extend(anns.into_iter()\n+                        .flat_map(|ann| expand_annotatable(ann, fld).into_iter()));\n \n                     fld.cx.bt_pop();\n                 }\n@@ -1179,7 +1182,7 @@ fn expand_annotatable(a: Annotatable,\n         }\n     };\n \n-    new_items.push_all(decorator_items.into_iter().map(|i| Annotatable::Item(i)).collect());\n+    new_items.push_all(decorator_items);\n     new_items\n }\n "}]}