{"sha": "57af95b6f5d8126bf967022e182b1973e2771d38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YWY5NWI2ZjVkODEyNmJmOTY3MDIyZTE4MmIxOTczZTI3NzFkMzg=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-04-02T04:34:11Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-04-02T05:04:25Z"}, "message": "Fix clippy warning\n\nFix `option_option` warning on `to_const_range` by taking the entire range\nas an parameter instead of the start and end.", "tree": {"sha": "b1fd118775af53cc2e23145faa476e76db3918e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1fd118775af53cc2e23145faa476e76db3918e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57af95b6f5d8126bf967022e182b1973e2771d38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57af95b6f5d8126bf967022e182b1973e2771d38", "html_url": "https://github.com/rust-lang/rust/commit/57af95b6f5d8126bf967022e182b1973e2771d38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57af95b6f5d8126bf967022e182b1973e2771d38/comments", "author": null, "committer": null, "parents": [{"sha": "6397131f8a2ebef377a62094a02c2e8637cb9aca", "url": "https://api.github.com/repos/rust-lang/rust/commits/6397131f8a2ebef377a62094a02c2e8637cb9aca", "html_url": "https://github.com/rust-lang/rust/commit/6397131f8a2ebef377a62094a02c2e8637cb9aca"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "1b21cf8c5ff46f7fabf4474c6a6466c735ce82b1", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/57af95b6f5d8126bf967022e182b1973e2771d38/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57af95b6f5d8126bf967022e182b1973e2771d38/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=57af95b6f5d8126bf967022e182b1973e2771d38", "patch": "@@ -3,6 +3,7 @@ use rustc::ty;\n use rustc::hir;\n use syntax::ast::RangeLimits;\n use utils::{self, higher};\n+use utils::higher::Range;\n use consts::{constant, Constant};\n \n /// **What it does:** Checks for out of bounds array indexing with a constant\n@@ -73,10 +74,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n \n                 // Index is a constant range\n                 if let Some(range) = higher::range(index) {\n-                    let start = range.start.map(|start| constant(cx, start).map(|(c, _)| c));\n-                    let end = range.end.map(|end| constant(cx, end).map(|(c, _)| c));\n-\n-                    if let Some((start, end)) = to_const_range(&start, &end, range.limits, size) {\n+                    if let Some((start, end)) = to_const_range(cx, range, size) {\n                         if start > size || end > size {\n                             utils::span_lint(cx, OUT_OF_BOUNDS_INDEXING, e.span, \"range is out of bounds\");\n                         }\n@@ -102,20 +100,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n \n /// Returns an option containing a tuple with the start and end (exclusive) of\n /// the range.\n-fn to_const_range(\n-    start: &Option<Option<Constant>>,\n-    end: &Option<Option<Constant>>,\n-    limits: RangeLimits,\n-    array_size: u128,\n-) -> Option<(u128, u128)> {\n-    let start = match *start {\n+fn to_const_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, range: Range, array_size: u128) -> Option<(u128, u128)> {\n+    let s = range.start.map(|expr| constant(cx, expr).map(|(c, _)| c));\n+    let start = match s {\n         Some(Some(Constant::Int(x))) => x,\n         Some(_) => return None,\n         None => 0,\n     };\n \n-    let end = match *end {\n-        Some(Some(Constant::Int(x))) => if limits == RangeLimits::Closed {\n+    let e = range.end.map(|expr| constant(cx, expr).map(|(c, _)| c));\n+    let end = match e {\n+        Some(Some(Constant::Int(x))) => if range.limits == RangeLimits::Closed {\n             x + 1\n         } else {\n             x"}]}