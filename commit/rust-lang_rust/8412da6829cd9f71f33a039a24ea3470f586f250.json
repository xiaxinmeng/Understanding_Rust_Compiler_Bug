{"sha": "8412da6829cd9f71f33a039a24ea3470f586f250", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MTJkYTY4MjljZDlmNzFmMzNhMDM5YTI0ZWEzNDcwZjU4NmYyNTA=", "commit": {"author": {"name": "1000teslas", "email": "47207223+1000teslas@users.noreply.github.com", "date": "2021-02-01T16:20:56Z"}, "committer": {"name": "1000teslas", "email": "47207223+1000teslas@users.noreply.github.com", "date": "2021-02-08T02:29:42Z"}, "message": "Add tests", "tree": {"sha": "4c070ad07e0a2d3cb2e90bf13a86650f31b87868", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c070ad07e0a2d3cb2e90bf13a86650f31b87868"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8412da6829cd9f71f33a039a24ea3470f586f250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8412da6829cd9f71f33a039a24ea3470f586f250", "html_url": "https://github.com/rust-lang/rust/commit/8412da6829cd9f71f33a039a24ea3470f586f250", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8412da6829cd9f71f33a039a24ea3470f586f250/comments", "author": {"login": "1000teslas", "id": 47207223, "node_id": "MDQ6VXNlcjQ3MjA3MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47207223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1000teslas", "html_url": "https://github.com/1000teslas", "followers_url": "https://api.github.com/users/1000teslas/followers", "following_url": "https://api.github.com/users/1000teslas/following{/other_user}", "gists_url": "https://api.github.com/users/1000teslas/gists{/gist_id}", "starred_url": "https://api.github.com/users/1000teslas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1000teslas/subscriptions", "organizations_url": "https://api.github.com/users/1000teslas/orgs", "repos_url": "https://api.github.com/users/1000teslas/repos", "events_url": "https://api.github.com/users/1000teslas/events{/privacy}", "received_events_url": "https://api.github.com/users/1000teslas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "1000teslas", "id": 47207223, "node_id": "MDQ6VXNlcjQ3MjA3MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47207223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1000teslas", "html_url": "https://github.com/1000teslas", "followers_url": "https://api.github.com/users/1000teslas/followers", "following_url": "https://api.github.com/users/1000teslas/following{/other_user}", "gists_url": "https://api.github.com/users/1000teslas/gists{/gist_id}", "starred_url": "https://api.github.com/users/1000teslas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1000teslas/subscriptions", "organizations_url": "https://api.github.com/users/1000teslas/orgs", "repos_url": "https://api.github.com/users/1000teslas/repos", "events_url": "https://api.github.com/users/1000teslas/events{/privacy}", "received_events_url": "https://api.github.com/users/1000teslas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2eed3a559e1e59900261f4a5abf11053590e9df", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2eed3a559e1e59900261f4a5abf11053590e9df", "html_url": "https://github.com/rust-lang/rust/commit/b2eed3a559e1e59900261f4a5abf11053590e9df"}], "stats": {"total": 140, "additions": 139, "deletions": 1}, "files": [{"sha": "8e212a77016470c4c93ed4937d3944014ca4c6e9", "filename": "src/test/ui/borrowck/issue-81365-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-1.rs?ref=8412da6829cd9f71f33a039a24ea3470f586f250", "previous_filename": "src/test/ui/borrowck/issue-81365.rs"}, {"sha": "f680cd629d2fcce54536b2472ef8fad4b1aa32e5", "filename": "src/test/ui/borrowck/issue-81365-1.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-1.stderr?ref=8412da6829cd9f71f33a039a24ea3470f586f250", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `self.container_field` because it is borrowed\n-  --> $DIR/issue-81365.rs:21:9\n+  --> $DIR/issue-81365-1.rs:21:9\n    |\n LL |         let first = &self.target_field;\n    |                      ---- borrow of `self.container_field` occurs here", "previous_filename": "src/test/ui/borrowck/issue-81365.stderr"}, {"sha": "7602e184a9f9d4f2a76e0fc28e8dc397547480a8", "filename": "src/test/ui/borrowck/issue-81365-10.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-10.rs?ref=8412da6829cd9f71f33a039a24ea3470f586f250", "patch": "@@ -0,0 +1,26 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+impl Container {\n+    fn bad_borrow(&mut self) {\n+        let first = &self.deref().target_field;\n+        self.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "891f70ed7f6b46b8a987f57897a3b3c9d3efd9ea", "filename": "src/test/ui/borrowck/issue-81365-10.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-10.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-10.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-10.stderr?ref=8412da6829cd9f71f33a039a24ea3470f586f250", "patch": "@@ -0,0 +1,13 @@\n+error[E0506]: cannot assign to `self.container_field` because it is borrowed\n+  --> $DIR/issue-81365-10.rs:21:9\n+   |\n+LL |         let first = &self.deref().target_field;\n+   |                      ---- borrow of `self.container_field` occurs here\n+LL |         self.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "6b558c65d3d614250c4c86fff089715ad9e2a185", "filename": "src/test/ui/borrowck/issue-81365-11.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-11.rs?ref=8412da6829cd9f71f33a039a24ea3470f586f250", "patch": "@@ -0,0 +1,32 @@\n+use std::ops::{Deref, DerefMut};\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+impl DerefMut for Container {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.target\n+    }\n+}\n+\n+impl Container {\n+    fn bad_borrow(&mut self) {\n+        let first = &mut self.target_field;\n+        self.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0770c136632db1f9603c2d6ef0e68ab8c6331a5e", "filename": "src/test/ui/borrowck/issue-81365-11.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-11.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-11.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-11.stderr?ref=8412da6829cd9f71f33a039a24ea3470f586f250", "patch": "@@ -0,0 +1,13 @@\n+error[E0506]: cannot assign to `self.container_field` because it is borrowed\n+  --> $DIR/issue-81365-11.rs:27:9\n+   |\n+LL |         let first = &mut self.target_field;\n+   |                          ---- borrow of `self.container_field` occurs here\n+LL |         self.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "0656c65c8232d87b830ab8841a7692bae64bf292", "filename": "src/test/ui/borrowck/issue-81365-8.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-8.stderr?ref=8412da6829cd9f71f33a039a24ea3470f586f250", "patch": "@@ -0,0 +1,15 @@\n+error[E0506]: cannot assign to `self.container_field` because it is borrowed\n+  --> $DIR/issue-81365-8.rs:21:9\n+   |\n+LL |         let first = &(*self).target_field;\n+   |                      ------- borrow of `self.container_field` occurs here\n+LL |         self.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+   |\n+   = note: borrow occurs due to deref coercion to `DerefTarget`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "cd57afa288df77208986ebeb1195f10d9efe7dc1", "filename": "src/test/ui/borrowck/issue-81365-9.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-9.rs?ref=8412da6829cd9f71f33a039a24ea3470f586f250", "patch": "@@ -0,0 +1,26 @@\n+use std::ops::Deref;\n+\n+struct DerefTarget {\n+    target_field: bool,\n+}\n+struct Container {\n+    target: DerefTarget,\n+    container_field: bool,\n+}\n+\n+impl Deref for Container {\n+    type Target = DerefTarget;\n+    fn deref(&self) -> &Self::Target {\n+        &self.target\n+    }\n+}\n+\n+impl Container {\n+    fn bad_borrow(&mut self) {\n+        let first = &Deref::deref(self).target_field;\n+        self.container_field = true; //~ ERROR E0506\n+        first;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c7d48214fd4a81bb9abeaf08aa9b8f6b983a8074", "filename": "src/test/ui/borrowck/issue-81365-9.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8412da6829cd9f71f33a039a24ea3470f586f250/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-9.stderr?ref=8412da6829cd9f71f33a039a24ea3470f586f250", "patch": "@@ -0,0 +1,13 @@\n+error[E0506]: cannot assign to `self.container_field` because it is borrowed\n+  --> $DIR/issue-81365-9.rs:21:9\n+   |\n+LL |         let first = &Deref::deref(self).target_field;\n+   |                                   ---- borrow of `self.container_field` occurs here\n+LL |         self.container_field = true;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n+LL |         first;\n+   |         ----- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}]}