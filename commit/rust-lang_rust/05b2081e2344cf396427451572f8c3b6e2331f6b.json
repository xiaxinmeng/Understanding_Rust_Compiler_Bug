{"sha": "05b2081e2344cf396427451572f8c3b6e2331f6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YjIwODFlMjM0NGNmMzk2NDI3NDUxNTcyZjhjM2I2ZTIzMzFmNmI=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-04-28T07:50:27Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2017-05-01T17:24:04Z"}, "message": "Queryify item_body_nested_bodies", "tree": {"sha": "3765577fea5bd617b62ca8c0bc56eaa769dfcf28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3765577fea5bd617b62ca8c0bc56eaa769dfcf28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05b2081e2344cf396427451572f8c3b6e2331f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05b2081e2344cf396427451572f8c3b6e2331f6b", "html_url": "https://github.com/rust-lang/rust/commit/05b2081e2344cf396427451572f8c3b6e2331f6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05b2081e2344cf396427451572f8c3b6e2331f6b/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "526d39948af4004bb60c04dc82d60b7b395966bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/526d39948af4004bb60c04dc82d60b7b395966bb", "html_url": "https://github.com/rust-lang/rust/commit/526d39948af4004bb60c04dc82d60b7b395966bb"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "d327b3ed9d3246ee58432c0d044d24a86a327dc3", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05b2081e2344cf396427451572f8c3b6e2331f6b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b2081e2344cf396427451572f8c3b6e2331f6b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=05b2081e2344cf396427451572f8c3b6e2331f6b", "patch": "@@ -35,7 +35,6 @@ use session::search_paths::PathKind;\n use util::nodemap::{NodeSet, DefIdMap};\n \n use std::any::Any;\n-use std::collections::BTreeMap;\n use std::path::PathBuf;\n use std::rc::Rc;\n use syntax::ast;\n@@ -250,7 +249,6 @@ pub trait CrateStore {\n     // misc. metadata\n     fn item_body<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                            -> &'tcx hir::Body;\n-    fn item_body_nested_bodies(&self, def: DefId) -> BTreeMap<hir::BodyId, hir::Body>;\n     fn const_is_rvalue_promotable_to_static(&self, def: DefId) -> bool;\n \n     fn is_item_mir_available(&self, def: DefId) -> bool;\n@@ -401,9 +399,6 @@ impl CrateStore for DummyCrateStore {\n                            -> &'tcx hir::Body {\n         bug!(\"item_body\")\n     }\n-    fn item_body_nested_bodies(&self, def: DefId) -> BTreeMap<hir::BodyId, hir::Body> {\n-        bug!(\"item_body_nested_bodies\")\n-    }\n     fn const_is_rvalue_promotable_to_static(&self, def: DefId) -> bool {\n         bug!(\"const_is_rvalue_promotable_to_static\")\n     }"}, {"sha": "a7f1c556f03f1dda6c1dc25913d0a0f0ff4b92a2", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05b2081e2344cf396427451572f8c3b6e2331f6b/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b2081e2344cf396427451572f8c3b6e2331f6b/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=05b2081e2344cf396427451572f8c3b6e2331f6b", "patch": "@@ -24,6 +24,7 @@ use util::nodemap::NodeSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use std::cell::{RefCell, RefMut};\n use std::mem;\n+use std::collections::BTreeMap;\n use std::ops::Deref;\n use std::rc::Rc;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -291,10 +292,16 @@ impl<'tcx> QueryDescription for queries::def_span<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::item_body_nested_bodies<'tcx> {\n+    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+        format!(\"nested item bodies of `{}`\", tcx.item_path_str(def_id))\n+    }\n+}\n+\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n-       [$($pub:tt)*] $name:ident: $node:ident($K:ty) -> $V:ty),*) => {\n+       [$($pub:tt)*] $name:ident: $node:ident($K:ty) -> $V:ty,)*) => {\n         pub struct Maps<$tcx> {\n             providers: IndexVec<CrateNum, Providers<$tcx>>,\n             query_stack: RefCell<Vec<(Span, Query<$tcx>)>>,\n@@ -577,7 +584,9 @@ define_maps! { <'tcx>\n     [] symbol_name: symbol_name_dep_node(ty::Instance<'tcx>) -> ty::SymbolName,\n \n     [] describe_def: DescribeDef(DefId) -> Option<Def>,\n-    [] def_span: DefSpan(DefId) -> Span\n+    [] def_span: DefSpan(DefId) -> Span,\n+\n+    [] item_body_nested_bodies: metadata_dep_node(DefId) -> Rc<BTreeMap<hir::BodyId, hir::Body>>,\n }\n \n fn coherent_trait_dep_node((_, def_id): (CrateNum, DefId)) -> DepNode<DefId> {\n@@ -592,6 +601,10 @@ fn reachability_dep_node(_: CrateNum) -> DepNode<DefId> {\n     DepNode::Reachability\n }\n \n+fn metadata_dep_node(def_id: DefId) -> DepNode<DefId> {\n+    DepNode::MetaData(def_id)\n+}\n+\n fn mir_shim_dep_node(instance: ty::InstanceDef) -> DepNode<DefId> {\n     instance.dep_node()\n }\n@@ -608,4 +621,4 @@ fn typeck_item_bodies_dep_node(_: CrateNum) -> DepNode<DefId> {\n \n fn const_eval_dep_node((def_id, _): (DefId, &Substs)) -> DepNode<DefId> {\n     DepNode::ConstEval(def_id)\n-}\n\\ No newline at end of file\n+}"}, {"sha": "067fe246d946d517112771528c63c373b4ed68f8", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05b2081e2344cf396427451572f8c3b6e2331f6b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b2081e2344cf396427451572f8c3b6e2331f6b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=05b2081e2344cf396427451572f8c3b6e2331f6b", "patch": "@@ -115,6 +115,13 @@ provide! { <'tcx> tcx, def_id, cdata\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     describe_def => { cdata.get_def(def_id.index) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n+    item_body_nested_bodies => {\n+        let map: BTreeMap<_, _> = cdata.entry(def_id.index).ast.into_iter().flat_map(|ast| {\n+            ast.decode(cdata).nested_bodies.decode(cdata).map(|body| (body.id(), body))\n+        }).collect();\n+\n+        Rc::new(map)\n+    }\n }\n \n impl CrateStore for cstore::CStore {\n@@ -432,11 +439,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(def_id.krate).item_body(tcx, def_id.index)\n     }\n \n-    fn item_body_nested_bodies(&self, def: DefId) -> BTreeMap<hir::BodyId, hir::Body> {\n-        self.dep_graph.read(DepNode::MetaData(def));\n-        self.get_crate_data(def.krate).item_body_nested_bodies(def.index)\n-    }\n-\n     fn const_is_rvalue_promotable_to_static(&self, def: DefId) -> bool {\n         self.dep_graph.read(DepNode::MetaData(def));\n         self.get_crate_data(def.krate).const_is_rvalue_promotable_to_static(def.index)"}, {"sha": "9da9829b61dccfd02a9c51106f77b9df2f85c297", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05b2081e2344cf396427451572f8c3b6e2331f6b/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b2081e2344cf396427451572f8c3b6e2331f6b/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=05b2081e2344cf396427451572f8c3b6e2331f6b", "patch": "@@ -28,7 +28,6 @@ use rustc::mir::Mir;\n \n use std::borrow::Cow;\n use std::cell::Ref;\n-use std::collections::BTreeMap;\n use std::io;\n use std::mem;\n use std::rc::Rc;\n@@ -451,7 +450,7 @@ impl<'a, 'tcx> CrateMetadata {\n         self.root.index.lookup(self.blob.raw_bytes(), item_id)\n     }\n \n-    fn entry(&self, item_id: DefIndex) -> Entry<'tcx> {\n+    pub fn entry(&self, item_id: DefIndex) -> Entry<'tcx> {\n         match self.maybe_entry(item_id) {\n             None => {\n                 bug!(\"entry: id not found: {:?} in crate {:?} with number {}\",\n@@ -773,12 +772,6 @@ impl<'a, 'tcx> CrateMetadata {\n         tcx.alloc_tables(ast.tables.decode((self, tcx)))\n     }\n \n-    pub fn item_body_nested_bodies(&self, id: DefIndex) -> BTreeMap<hir::BodyId, hir::Body> {\n-        self.entry(id).ast.into_iter().flat_map(|ast| {\n-            ast.decode(self).nested_bodies.decode(self).map(|body| (body.id(), body))\n-        }).collect()\n-    }\n-\n     pub fn const_is_rvalue_promotable_to_static(&self, id: DefIndex) -> bool {\n         self.entry(id).ast.expect(\"const item missing `ast`\")\n             .decode(self).rvalue_promotable_to_static"}, {"sha": "9dea0e3d83088451b551acc35da723395105e5e4", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05b2081e2344cf396427451572f8c3b6e2331f6b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b2081e2344cf396427451572f8c3b6e2331f6b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=05b2081e2344cf396427451572f8c3b6e2331f6b", "patch": "@@ -13,6 +13,7 @@\n use std::collections::BTreeMap;\n use std::io;\n use std::iter::once;\n+use std::rc::Rc;\n \n use syntax::ast;\n use rustc::hir;\n@@ -471,7 +472,7 @@ fn build_module(cx: &DocContext, did: DefId) -> clean::Module {\n }\n \n struct InlinedConst {\n-    nested_bodies: BTreeMap<hir::BodyId, hir::Body>\n+    nested_bodies: Rc<BTreeMap<hir::BodyId, hir::Body>>\n }\n \n impl hir::print::PpAnn for InlinedConst {\n@@ -488,7 +489,7 @@ impl hir::print::PpAnn for InlinedConst {\n fn print_inlined_const(cx: &DocContext, did: DefId) -> String {\n     let body = cx.tcx.sess.cstore.item_body(cx.tcx, did);\n     let inlined = InlinedConst {\n-        nested_bodies: cx.tcx.sess.cstore.item_body_nested_bodies(did)\n+        nested_bodies: cx.tcx.item_body_nested_bodies(did)\n     };\n     hir::print::to_string(&inlined, |s| s.print_expr(&body.value))\n }"}]}