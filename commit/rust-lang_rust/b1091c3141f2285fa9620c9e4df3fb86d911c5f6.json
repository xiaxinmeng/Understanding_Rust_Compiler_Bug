{"sha": "b1091c3141f2285fa9620c9e4df3fb86d911c5f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMDkxYzMxNDFmMjI4NWZhOTYyMGM5ZTRkZjNmYjg2ZDkxMWM1ZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-25T07:01:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-25T07:01:52Z"}, "message": "auto merge of #13063 : brson/rust/dist, r=alexcrichton\n\nSeveral things here:\r\n\r\n* Cleanup\r\n* Fix build targets for building .pkg so that it works and works for all hosts\r\n* Adds support for nightly artifacts\r\n* Put docs in a location suitable for upload to s3 during 'make dist'\r\n* Add coverage of unix binary installers to 'distcheck'\r\n* Fix 'distcheck'\r\n* Change 'dist' to build source tarballs, binary tarballs and OS X packages", "tree": {"sha": "f2a0eeb3d73c7e4ae1be180e668d9108ce5c4db1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2a0eeb3d73c7e4ae1be180e668d9108ce5c4db1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1091c3141f2285fa9620c9e4df3fb86d911c5f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1091c3141f2285fa9620c9e4df3fb86d911c5f6", "html_url": "https://github.com/rust-lang/rust/commit/b1091c3141f2285fa9620c9e4df3fb86d911c5f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1091c3141f2285fa9620c9e4df3fb86d911c5f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e6e98c0c2bd6b736fc6bef9bc1fb8e34d24e488", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6e98c0c2bd6b736fc6bef9bc1fb8e34d24e488", "html_url": "https://github.com/rust-lang/rust/commit/1e6e98c0c2bd6b736fc6bef9bc1fb8e34d24e488"}, {"sha": "39b48fb8836b130fa6bec09b4864b5a8eee0cd42", "url": "https://api.github.com/repos/rust-lang/rust/commits/39b48fb8836b130fa6bec09b4864b5a8eee0cd42", "html_url": "https://github.com/rust-lang/rust/commit/39b48fb8836b130fa6bec09b4864b5a8eee0cd42"}], "stats": {"total": 476, "additions": 304, "deletions": 172}, "files": [{"sha": "725f80ac8b52ce462230ed00e1b04e350bee625a", "filename": "mk/clean.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1091c3141f2285fa9620c9e4df3fb86d911c5f6/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b1091c3141f2285fa9620c9e4df3fb86d911c5f6/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=b1091c3141f2285fa9620c9e4df3fb86d911c5f6", "patch": "@@ -43,7 +43,8 @@ clean-misc:\n \t$(Q)rm -f $(RUSTLLVM_LIB_OBJS) $(RUSTLLVM_OBJS_OBJS) $(RUSTLLVM_DEF)\n \t$(Q)rm -Rf $(GENERATED)\n \t$(Q)rm -Rf tmp/*\n-\t$(Q)rm -Rf rust-stage0-*.tar.bz2 $(PKG_NAME)-*.tar.gz $(PKG_NAME)-*.exe dist\n+\t$(Q)rm -Rf rust-stage0-*.tar.bz2 $(PKG_NAME)-*.tar.gz $(PKG_NAME)-*.exe\n+\t$(Q)rm -Rf dist/*\n \t$(Q)rm -Rf doc\n \n define CLEAN_GENERIC"}, {"sha": "4990ae12f5e9774663d24c7b158c47953e5a8710", "filename": "mk/dist.mk", "status": "modified", "additions": 181, "deletions": 91, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/b1091c3141f2285fa9620c9e4df3fb86d911c5f6/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b1091c3141f2285fa9620c9e4df3fb86d911c5f6/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=b1091c3141f2285fa9620c9e4df3fb86d911c5f6", "patch": "@@ -1,23 +1,41 @@\n+# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n ######################################################################\n # Distribution\n ######################################################################\n \n-PKG_NAME := rust\n-PKG_DIR = $(PKG_NAME)-$(CFG_RELEASE)\n-PKG_TAR = dist/$(PKG_DIR).tar.gz\n+# Primary targets:\n+#\n+# * dist - make all distribution artifacts\n+# * distcheck - sanity check dist artifacts\n+# * dist-tar-src - source tarballs\n+# * dist-win - Windows exe installers\n+# * dist-osx - OS X .pkg installers\n+# * dist-tar-bins - Ad-hoc Unix binary installers\n+# * dist-docs - Stage docs for upload\n \n-ifdef CFG_ISCC\n-PKG_ISS = $(wildcard $(S)src/etc/pkg/*.iss)\n-PKG_ICO = $(S)src/etc/pkg/rust-logo.ico\n-PKG_EXE = dist/$(PKG_DIR)-install.exe\n-endif\n+PKG_NAME = $(CFG_PACKAGE_NAME)\n \n-ifeq ($(CFG_OSTYPE), apple-darwin)\n-PKG_OSX = dist/$(PKG_DIR).pkg\n-endif\n+# License suitable for displaying in a popup\n+LICENSE.txt: $(S)COPYRIGHT $(S)LICENSE-APACHE $(S)LICENSE-MIT\n+\tcat $^ > $@\n \n-PKG_GITMODULES := $(S)src/libuv $(S)src/llvm $(S)src/gyp $(S)src/compiler-rt\n \n+######################################################################\n+# Source tarball\n+######################################################################\n+\n+PKG_TAR = dist/$(PKG_NAME).tar.gz\n+\n+PKG_GITMODULES := $(S)src/libuv $(S)src/llvm $(S)src/gyp $(S)src/compiler-rt\n PKG_FILES := \\\n     $(S)COPYRIGHT                              \\\n     $(S)LICENSE-APACHE                         \\\n@@ -40,28 +58,73 @@ PKG_FILES := \\\n       snapshots.txt                            \\\n       test)                                    \\\n     $(PKG_GITMODULES)                          \\\n-    $(filter-out Makefile config.stamp config.mk, \\\n-                 $(MKFILE_DEPS))\n+    $(filter-out config.stamp, \\\n+                 $(MKFILES_FOR_TARBALL))\n \n UNROOTED_PKG_FILES := $(patsubst $(S)%,./%,$(PKG_FILES))\n \n-LICENSE.txt: $(S)COPYRIGHT $(S)LICENSE-APACHE $(S)LICENSE-MIT\n-\tcat $^ > $@\n+$(PKG_TAR): $(PKG_FILES)\n+\t@$(call E, making dist dir)\n+\t$(Q)rm -Rf tmp/dist/$(PKG_NAME)\n+\t$(Q)mkdir -p tmp/dist/$(PKG_NAME)\n+\t$(Q)tar \\\n+         -C $(S) \\\n+         --exclude-vcs \\\n+         --exclude=*~ \\\n+         --exclude=*/llvm/test/*/*.ll \\\n+         --exclude=*/llvm/test/*/*.td \\\n+         --exclude=*/llvm/test/*/*.s \\\n+         --exclude=*/llvm/test/*/*/*.ll \\\n+         --exclude=*/llvm/test/*/*/*.td \\\n+         --exclude=*/llvm/test/*/*/*.s \\\n+         -c $(UNROOTED_PKG_FILES) | tar -x -C tmp/dist/$(PKG_NAME)\n+\t$(Q)tar -czf $(PKG_TAR) -C tmp/dist $(PKG_NAME)\n+\t$(Q)rm -Rf tmp/dist/$(PKG_NAME)\n+\n+dist-tar-src: $(PKG_TAR)\n+\n+distcheck-tar-src: dist-tar-src\n+\t$(Q)rm -Rf tmp/distcheck/$(PKG_NAME)\n+\t$(Q)rm -Rf tmp/distcheck/srccheck\n+\t$(Q)mkdir -p tmp/distcheck\n+\t@$(call E, unpacking $(PKG_TAR) in tmp/distcheck/$(PKG_NAME))\n+\t$(Q)cd tmp/distcheck && tar -xzf ../../$(PKG_TAR)\n+\t@$(call E, configuring in tmp/distcheck/srccheck)\n+\t$(Q)mkdir -p tmp/distcheck/srccheck\n+\t$(Q)cd tmp/distcheck/srccheck && ../$(PKG_NAME)/configure\n+\t@$(call E, making 'check' in tmp/distcheck/srccheck)\n+\t$(Q)+make -C tmp/distcheck/srccheck check\n+\t@$(call E, making 'clean' in tmp/distcheck/srccheck)\n+\t$(Q)+make -C tmp/distcheck/srccheck clean\n+\t$(Q)rm -Rf tmp/distcheck/$(PKG_NAME)\n+\t$(Q)rm -Rf tmp/distcheck/srccheck\n+\n+\n+######################################################################\n+# Windows .exe installer\n+######################################################################\n+\n+# FIXME Needs to support all hosts, but making rust.iss compatible looks like a chore\n \n ifdef CFG_ISCC\n+\n+PKG_EXE = dist/$(PKG_NAME)-install.exe\n+\n %.iss: $(S)src/etc/pkg/%.iss\n \tcp $< $@\n \n %.ico: $(S)src/etc/pkg/%.ico\n \tcp $< $@\n \n $(PKG_EXE): rust.iss modpath.iss LICENSE.txt rust-logo.ico \\\n-            $(PKG_FILES) $(CSREQ3_T_$(CFG_BUILD)_H_$(CFG_BUILD)) \\\n+            $(CSREQ3_T_$(CFG_BUILD)_H_$(CFG_BUILD)) \\\n             dist-prepare-win\n \t$(CFG_PYTHON) $(S)src/etc/copy-runtime-deps.py tmp/dist/win/bin\n \t@$(call E, ISCC: $@)\n \t$(Q)\"$(CFG_ISCC)\" $<\n \n+$(eval $(call DEF_PREPARE,win))\n+\n dist-prepare-win: PREPARE_HOST=$(CFG_BUILD)\n dist-prepare-win: PREPARE_TARGETS=$(CFG_BUILD)\n dist-prepare-win: PREPARE_DEST_DIR=tmp/dist/win\n@@ -70,105 +133,72 @@ dist-prepare-win: PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n dist-prepare-win: PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n dist-prepare-win: PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n dist-prepare-win: PREPARE_CLEAN=true\n-dist-prepare-win: prepare-base\n+dist-prepare-win: prepare-base-win\n \n endif\n \n-$(PKG_TAR): $(PKG_FILES)\n-\t@$(call E, making dist dir)\n-\t$(Q)rm -Rf tmp/dist/$(PKG_DIR)\n-\t$(Q)mkdir -p tmp/dist/$(PKG_DIR)\n-\t$(Q)tar \\\n-         -C $(S) \\\n-         --exclude-vcs \\\n-         --exclude=*~ \\\n-         --exclude=*/llvm/test/*/*.ll \\\n-         --exclude=*/llvm/test/*/*.td \\\n-         --exclude=*/llvm/test/*/*.s \\\n-         --exclude=*/llvm/test/*/*/*.ll \\\n-         --exclude=*/llvm/test/*/*/*.td \\\n-         --exclude=*/llvm/test/*/*/*.s \\\n-         -c $(UNROOTED_PKG_FILES) | tar -x -C tmp/dist/$(PKG_DIR)\n-\t$(Q)tar -czf $(PKG_TAR) -C tmp/dist $(PKG_DIR)\n-\t$(Q)rm -Rf tmp/dist/$(PKG_DIR)\n+dist-win: $(PKG_EXE)\n \n-.PHONY: dist distcheck\n+distcheck-win: dist-win\n \n-ifdef CFG_WINDOWSY_$(CFG_BUILD)\n+######################################################################\n+# OS X .pkg installer\n+######################################################################\n \n-dist: $(PKG_EXE)\n+ifeq ($(CFG_OSTYPE), apple-darwin)\n \n-distcheck: dist\n-\t@echo\n-\t@echo -----------------------------------------------\n-\t@echo $(PKG_EXE) ready for distribution\n-\t@echo -----------------------------------------------\n+define DEF_OSX_PKG\n \n-else\n+$$(eval $$(call DEF_PREPARE,osx-$(1)))\n \n-dist: $(PKG_TAR) $(PKG_OSX)\n-\n-distcheck: $(PKG_TAR)\n-\t$(Q)rm -Rf dist\n-\t$(Q)mkdir -p dist\n-\t@$(call E, unpacking $(PKG_TAR) in dist/$(PKG_DIR))\n-\t$(Q)cd dist && tar -xzf ../$(PKG_TAR)\n-\t@$(call E, configuring in dist/$(PKG_DIR)-build)\n-\t$(Q)mkdir -p dist/$(PKG_DIR)-build\n-\t$(Q)cd dist/$(PKG_DIR)-build && ../$(PKG_DIR)/configure\n-\t@$(call E, making 'check' in dist/$(PKG_DIR)-build)\n-\t$(Q)+make -C dist/$(PKG_DIR)-build check\n-\t@$(call E, making 'clean' in dist/$(PKG_DIR)-build)\n-\t$(Q)+make -C dist/$(PKG_DIR)-build clean\n-\t$(Q)rm -Rf dist\n-\t@echo\n-\t@echo -----------------------------------------------\n-\t@echo $(PKG_TAR) ready for distribution\n-\t@echo -----------------------------------------------\n+dist-prepare-osx-$(1): PREPARE_HOST=$(1)\n+dist-prepare-osx-$(1): PREPARE_TARGETS=$(1)\n+dist-prepare-osx-$(1): PREPARE_DEST_DIR=tmp/dist/pkgroot-$(1)\n+dist-prepare-osx-$(1): PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n+dist-prepare-osx-$(1): PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n+dist-prepare-osx-$(1): PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n+dist-prepare-osx-$(1): PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n+dist-prepare-osx-$(1): prepare-base-osx-$(1)\n \n-endif\n+dist/$(PKG_NAME)-$(1).pkg: $(S)src/etc/pkg/Distribution.xml LICENSE.txt dist-prepare-osx-$(1)\n+\t@$$(call E, making OS X pkg)\n+\t$(Q)pkgbuild --identifier org.rust-lang.rust --root tmp/dist/pkgroot-$(1) rust.pkg\n+\t$(Q)productbuild --distribution $(S)src/etc/pkg/Distribution.xml --resources . dist/$(PKG_NAME)-$(1).pkg\n+\t$(Q)rm -rf tmp rust.pkg\n \n-ifeq ($(CFG_OSTYPE), apple-darwin)\n+endef\n \n-dist-prepare-osx: PREPARE_HOST=$(CFG_BUILD)\n-dist-prepare-osx: PREPARE_TARGETS=$(CFG_BUILD)\n-dist-prepare-osx: PREPARE_DEST_DIR=tmp/dist/pkgroot\n-dist-prepare-osx: PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n-dist-prepare-osx: PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n-dist-prepare-osx: PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n-dist-prepare-osx: PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n-dist-prepare-osx: prepare-base\n-\n-$(PKG_OSX): Distribution.xml LICENSE.txt dist-prepare-osx\n-\t@$(call E, making OS X pkg)\n-\t$(Q)pkgbuild --identifier org.rust-lang.rust --root tmp/dist/pkgroot rust.pkg\n-\t$(Q)productbuild --distribution Distribution.xml --resources . $(PKG_OSX)\n-\t$(Q)rm -rf tmp rust.pkg\n+$(foreach host,$(CFG_HOST),$(eval $(call DEF_OSX_PKG,$(host))))\n \n-dist-osx: $(PKG_OSX)\n+dist-osx: $(foreach host,$(CFG_HOST),dist/$(PKG_NAME)-$(host).pkg)\n \n-distcheck-osx: $(PKG_OSX)\n-\t@echo\n-\t@echo -----------------------------------------------\n-\t@echo $(PKG_OSX) ready for distribution\n-\t@echo -----------------------------------------------\n+else\n+\n+dist-osx:\n \n endif\n \n-dist-install-dir: $(foreach host,$(CFG_HOST),dist-install-dir-$(host))\n+# FIXME should do something\n+distcheck-osx: dist-osx\n \n-dist-tar-bins: $(foreach host,$(CFG_HOST),dist/$(PKG_DIR)-$(host).tar.gz)\n+\n+######################################################################\n+# Unix binary installer tarballs\n+######################################################################\n \n define DEF_INSTALLER\n+\n+$$(eval $$(call DEF_PREPARE,dir-$(1)))\n+\n dist-install-dir-$(1): PREPARE_HOST=$(1)\n dist-install-dir-$(1): PREPARE_TARGETS=$(1)\n-dist-install-dir-$(1): PREPARE_DEST_DIR=tmp/dist/$$(PKG_DIR)-$(1)\n+dist-install-dir-$(1): PREPARE_DEST_DIR=tmp/dist/$$(PKG_NAME)-$(1)\n dist-install-dir-$(1): PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n dist-install-dir-$(1): PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n dist-install-dir-$(1): PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n dist-install-dir-$(1): PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n dist-install-dir-$(1): PREPARE_CLEAN=true\n-dist-install-dir-$(1): prepare-base\n+dist-install-dir-$(1): prepare-base-dir-$(1)\n \t$$(Q)(cd $$(PREPARE_DEST_DIR)/ && find -type f) \\\n       > $$(PREPARE_DEST_DIR)/$$(CFG_LIBDIR_RELATIVE)/$$(CFG_RUSTLIBDIR)/manifest\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)COPYRIGHT $$(PREPARE_DEST_DIR)\n@@ -177,11 +207,71 @@ dist-install-dir-$(1): prepare-base\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)README.md $$(PREPARE_DEST_DIR)\n \t$$(Q)$$(PREPARE_BIN_CMD) $$(S)src/etc/install.sh $$(PREPARE_DEST_DIR)\n \n-dist/$$(PKG_DIR)-$(1).tar.gz: dist-install-dir-$(1)\n+dist/$$(PKG_NAME)-$(1).tar.gz: dist-install-dir-$(1)\n \t@$(call E, build: $$@)\n-\t$$(Q)tar -czf dist/$$(PKG_DIR)-$(1).tar.gz -C tmp/dist $$(PKG_DIR)-$(1)\n+\t$$(Q)tar -czf dist/$$(PKG_NAME)-$(1).tar.gz -C tmp/dist $$(PKG_NAME)-$(1)\n \n endef\n \n $(foreach host,$(CFG_HOST),\\\n   $(eval $(call DEF_INSTALLER,$(host))))\n+\n+dist-install-dirs: $(foreach host,$(CFG_HOST),dist-install-dir-$(host))\n+\n+dist-tar-bins: $(foreach host,$(CFG_HOST),dist/$(PKG_NAME)-$(host).tar.gz)\n+\n+# Just try to run the compiler for the build host\n+distcheck-tar-bins: dist-tar-bins\n+\t@$(call E, checking binary tarball)\n+\t$(Q)rm -Rf tmp/distcheck/$(PKG_NAME)-$(CFG_BUILD)\n+\t$(Q)rm -Rf tmp/distcheck/tarbininstall\n+\t$(Q)mkdir -p tmp/distcheck\n+\t$(Q)cd tmp/distcheck && tar -xzf ../../dist/$(PKG_NAME)-$(CFG_BUILD).tar.gz\n+\t$(Q)mkdir -p tmp/distcheck/tarbininstall\n+\t$(Q)sh tmp/distcheck/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=tmp/distcheck/tarbininstall\n+\t$(Q)tmp/distcheck/tarbininstall/bin/rustc --version\n+\t$(Q)rm -Rf tmp/distcheck/$(PKG_NAME)-$(CFG_BUILD)\n+\t$(Q)rm -Rf tmp/distcheck/tarbininstall\n+\n+######################################################################\n+# Docs\n+######################################################################\n+\n+# Just copy the docs to a folder under dist with the appropriate name\n+# for uploading to S3\n+dist-docs: docs compiler-docs\n+\t$(Q) rm -Rf dist/doc\n+\t$(Q) mkdir -p dist/doc/\n+\t$(Q) cp -r doc dist/doc/$(CFG_PACKAGE_VERS)\n+\n+distcheck-docs: dist-docs\n+\n+######################################################################\n+# Primary targets (dist, distcheck)\n+######################################################################\n+\n+ifdef CFG_WINDOWSY_$(CFG_BUILD)\n+\n+dist: dist-win\n+\n+distcheck: distcheck-win\n+\t$(Q)rm -Rf tmp/distcheck\n+\t@echo\n+\t@echo -----------------------------------------------\n+\t@echo \"Rust ready for distribution (see ./dist)\"\n+\t@echo -----------------------------------------------\n+\n+else\n+\n+dist: dist-tar-src dist-osx dist-tar-bins dist-docs\n+\n+distcheck: distcheck-tar-src distcheck-osx distcheck-tar-bins distcheck-docs\n+\t$(Q)rm -Rf tmp/distcheck\n+\t@echo\n+\t@echo -----------------------------------------------\n+\t@echo \"Rust ready for distribution (see ./dist)\"\n+\t@echo -----------------------------------------------\n+\n+endif\n+\n+.PHONY: dist distcheck"}, {"sha": "ccbdf30a1ffe4421c2ada3639e3de59ceee94fe4", "filename": "mk/main.mk", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b1091c3141f2285fa9620c9e4df3fb86d911c5f6/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b1091c3141f2285fa9620c9e4df3fb86d911c5f6/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=b1091c3141f2285fa9620c9e4df3fb86d911c5f6", "patch": "@@ -13,9 +13,25 @@\n ######################################################################\n \n # The version number\n-CFG_RELEASE = 0.10-pre\n+CFG_RELEASE_NUM=0.10\n+CFG_RELEASE_LABEL=-pre\n \n-# The version string plus commit information\n+ifndef CFG_NIGHTLY\n+# This is the normal version string\n+CFG_RELEASE=$(CFG_RELEASE_NUM)$(CFG_RELEASE_LABEL)\n+CFG_PACKAGE_VERS=$(CFG_RELEASE)\n+else\n+# Modify the version label for nightly builds\n+CFG_RELEASE=$(CFG_RELEASE_NUM)$(CFG_RELEASE_LABEL)-nightly\n+# When building nightly distributables just reuse the same \"rust-nightly\" name\n+# so when we upload we'll always override the previous nighly. This doesn't actually\n+# impact the version reported by rustc - it's just for file naming.\n+CFG_PACKAGE_VERS=nightly\n+endif\n+# The name of the package to use for creating tarballs, installers etc.\n+CFG_PACKAGE_NAME=rust-$(CFG_PACKAGE_VERS)\n+\n+# The version string plus commit information - this is what rustc reports\n CFG_VERSION = $(CFG_RELEASE)\n CFG_GIT_DIR := $(CFG_SRC_DIR).git\n # since $(CFG_GIT) may contain spaces (especially on Windows),\n@@ -32,9 +48,9 @@ ifneq ($(wildcard $(subst $(SPACE),\\$(SPACE),$(CFG_GIT_DIR))),)\n endif\n endif\n \n-# windows exe's need numeric versions - don't use anything but\n+# Windows exe's need numeric versions - don't use anything but\n # numbers and dots here\n-CFG_VERSION_WIN = $(subst -pre,,$(CFG_RELEASE))\n+CFG_VERSION_WIN = $(CFG_RELEASE_NUM)\n \n \n ######################################################################\n@@ -45,10 +61,10 @@ CFG_VERSION_WIN = $(subst -pre,,$(CFG_RELEASE))\n # and include all of the .d files in one fell swoop.\n ALL_OBJ_FILES :=\n \n+MKFILE_DEPS := config.stamp $(call rwildcard,$(CFG_SRC_DIR)mk/,*)\n+MKFILES_FOR_TARBALL:=$(MKFILE_DEPS)\n ifneq ($(NO_MKFILE_DEPS),)\n MKFILE_DEPS :=\n-else\n-MKFILE_DEPS := config.stamp $(call rwildcard,$(CFG_SRC_DIR)mk/,*)\n endif\n NON_BUILD_HOST = $(filter-out $(CFG_BUILD),$(CFG_HOST))\n NON_BUILD_TARGET = $(filter-out $(CFG_BUILD),$(CFG_TARGET))\n@@ -259,6 +275,7 @@ export CFG_BUILD_DIR\n export CFG_VERSION\n export CFG_VERSION_WIN\n export CFG_RELEASE\n+export CFG_PACKAGE_NAME\n export CFG_BUILD\n export CFG_LLVM_ROOT\n export CFG_ENABLE_MINGW_CROSS"}, {"sha": "a4197fdb04508a5c67d479a84289df5c9c371580", "filename": "mk/prepare.mk", "status": "modified", "additions": 63, "deletions": 61, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/b1091c3141f2285fa9620c9e4df3fb86d911c5f6/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b1091c3141f2285fa9620c9e4df3fb86d911c5f6/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=b1091c3141f2285fa9620c9e4df3fb86d911c5f6", "patch": "@@ -28,23 +28,6 @@ else\n PREPARE_STAGE=2\n endif\n \n-prepare: PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n-prepare: PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n-prepare: PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n-prepare: PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n-prepare: prepare-base\n-\n-prepare-base: PREPARE_SOURCE_DIR=$(PREPARE_HOST)/stage$(PREPARE_STAGE)\n-prepare-base: PREPARE_SOURCE_BIN_DIR=$(PREPARE_SOURCE_DIR)/bin\n-prepare-base: PREPARE_SOURCE_LIB_DIR=$(PREPARE_SOURCE_DIR)/$(CFG_LIBDIR_RELATIVE)\n-prepare-base: PREPARE_SOURCE_MAN_DIR=$(S)/man\n-prepare-base: PREPARE_DEST_BIN_DIR=$(PREPARE_DEST_DIR)/bin\n-prepare-base: PREPARE_DEST_LIB_DIR=$(PREPARE_DEST_DIR)/$(CFG_LIBDIR_RELATIVE)\n-prepare-base: PREPARE_DEST_MAN_DIR=$(PREPARE_DEST_DIR)/man/man1\n-prepare-base: prepare-host prepare-targets\n-\n-prepare-everything: prepare-host prepare-targets\n-\n DEFAULT_PREPARE_DIR_CMD = umask 022 && mkdir -p\n DEFAULT_PREPARE_BIN_CMD = install -m755\n DEFAULT_PREPARE_LIB_CMD = install -m644\n@@ -93,29 +76,17 @@ define PREPARE_MAN\n \t$(Q)$(PREPARE_MAN_CMD) $(PREPARE_SOURCE_MAN_DIR)/$(1) $(PREPARE_DEST_MAN_DIR)/$(1)\n endef\n \n-\n PREPARE_TOOLS = $(filter-out compiletest, $(TOOLS))\n \n-prepare-host: prepare-host-tools\n-\n-prepare-host-tools: \\\n-        $(foreach tool, $(PREPARE_TOOLS),\\\n-          $(foreach host,$(CFG_HOST),\\\n-            prepare-host-tool-$(tool)-$(PREPARE_STAGE)-$(host)))\n-\n-prepare-host-dirs: prepare-maybe-clean\n-\t$(call PREPARE_DIR,$(PREPARE_DEST_BIN_DIR))\n-\t$(call PREPARE_DIR,$(PREPARE_DEST_LIB_DIR))\n-\t$(call PREPARE_DIR,$(PREPARE_DEST_MAN_DIR))\n \n # $(1) is tool\n # $(2) is stage\n # $(3) is host\n+# $(4) tag\n define DEF_PREPARE_HOST_TOOL\n-prepare-host-tool-$(1)-$(2)-$(3): prepare-maybe-clean \\\n-                                  $$(foreach dep,$$(TOOL_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3)) \\\n-                                  $$(HBIN$(2)_H_$(3))/$(1)$$(X_$(3)) \\\n-                                  prepare-host-dirs\n+prepare-host-tool-$(1)-$(2)-$(3)-$(4): prepare-maybe-clean-$(4) \\\n+                                  $$(foreach dep,$$(TOOL_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3)-$(4)) \\\n+                                  prepare-host-dirs-$(4)\n \t$$(if $$(findstring $(2), $$(PREPARE_STAGE)),\\\n       $$(if $$(findstring $(3), $$(PREPARE_HOST)),\\\n         $$(call PREPARE_BIN,$(1)$$(X_$$(PREPARE_HOST))),),)\n@@ -124,45 +95,35 @@ prepare-host-tool-$(1)-$(2)-$(3): prepare-maybe-clean \\\n         $$(call PREPARE_MAN,$(1).1),),)\n endef\n \n-$(foreach tool,$(PREPARE_TOOLS),\\\n-  $(foreach host,$(CFG_HOST),\\\n-      $(eval $(call DEF_PREPARE_HOST_TOOL,$(tool),$(PREPARE_STAGE),$(host)))))\n-\n # For host libraries only install dylibs, not rlibs since the host libs are only\n # used to support rustc and rustc uses dynamic linking\n #\n # $(1) is tool\n # $(2) is stage\n # $(3) is host\n+# $(4) tag\n define DEF_PREPARE_HOST_LIB\n-prepare-host-lib-$(1)-$(2)-$(3): PREPARE_WORKING_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_LIB_DIR)\n-prepare-host-lib-$(1)-$(2)-$(3): PREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_LIB_DIR)\n-prepare-host-lib-$(1)-$(2)-$(3): prepare-maybe-clean \\\n-                                 $$(foreach dep,$$(RUST_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3))\\\n+prepare-host-lib-$(1)-$(2)-$(3)-$(4): PREPARE_WORKING_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_LIB_DIR)\n+prepare-host-lib-$(1)-$(2)-$(3)-$(4): PREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_LIB_DIR)\n+prepare-host-lib-$(1)-$(2)-$(3)-$(4): prepare-maybe-clean-$(4) \\\n+                                 $$(foreach dep,$$(RUST_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3)-$(4))\\\n                                  $$(HLIB$(2)_H_$(3))/stamp.$(1) \\\n-                                 prepare-host-dirs\n+                                 prepare-host-dirs-$(4)\n \t$$(if $$(findstring $(2), $$(PREPARE_STAGE)),\\\n       $$(if $$(findstring $(3), $$(PREPARE_HOST)),\\\n         $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$$(PREPARE_HOST),$(1))),),)\n endef\n \n-$(foreach lib,$(CRATES),\\\n-  $(foreach host,$(CFG_HOST),\\\n-    $(eval $(call DEF_PREPARE_HOST_LIB,$(lib),$(PREPARE_STAGE),$(host)))))\n-\n-prepare-targets:\\\n-        $(foreach host,$(CFG_HOST),\\\n-           $(foreach target,$(CFG_TARGET),\\\n-             prepare-target-$(target)-host-$(host)-$(PREPARE_STAGE)))\n \n # $(1) is stage\n # $(2) is target\n # $(3) is host\n+# $(4) tag\n define DEF_PREPARE_TARGET_N\n # Rebind PREPARE_*_LIB_DIR to point to rustlib, then install the libs for the targets\n-prepare-target-$(2)-host-$(3)-$(1): PREPARE_WORKING_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_LIB_DIR)/$$(CFG_RUSTLIBDIR)/$(2)/lib\n-prepare-target-$(2)-host-$(3)-$(1): PREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_LIB_DIR)/$$(CFG_RUSTLIBDIR)/$(2)/lib\n-prepare-target-$(2)-host-$(3)-$(1): prepare-maybe-clean \\\n+prepare-target-$(2)-host-$(3)-$(1)-$(4): PREPARE_WORKING_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_LIB_DIR)/$$(CFG_RUSTLIBDIR)/$(2)/lib\n+prepare-target-$(2)-host-$(3)-$(1)-$(4): PREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_LIB_DIR)/$$(CFG_RUSTLIBDIR)/$(2)/lib\n+prepare-target-$(2)-host-$(3)-$(1)-$(4): prepare-maybe-clean-$(4) \\\n         $$(foreach crate,$$(TARGET_CRATES), \\\n           $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)) \\\n         $$(if $$(findstring $(2),$$(CFG_HOST)), \\\n@@ -186,12 +147,53 @@ prepare-target-$(2)-host-$(3)-$(1): prepare-maybe-clean \\\n           $$(call PREPARE_LIB,libcompiler-rt.a),),),)\n endef\n \n-$(foreach host,$(CFG_HOST),\\\n-  $(foreach target,$(CFG_TARGET), \\\n-    $(eval $(call DEF_PREPARE_TARGET_N,$(PREPARE_STAGE),$(target),$(host)))))\n+define DEF_PREPARE\n+\n+prepare-base-$(1): PREPARE_SOURCE_DIR=$$(PREPARE_HOST)/stage$$(PREPARE_STAGE)\n+prepare-base-$(1): PREPARE_SOURCE_BIN_DIR=$$(PREPARE_SOURCE_DIR)/bin\n+prepare-base-$(1): PREPARE_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_DIR)/$$(CFG_LIBDIR_RELATIVE)\n+prepare-base-$(1): PREPARE_SOURCE_MAN_DIR=$$(S)/man\n+prepare-base-$(1): PREPARE_DEST_BIN_DIR=$$(PREPARE_DEST_DIR)/bin\n+prepare-base-$(1): PREPARE_DEST_LIB_DIR=$$(PREPARE_DEST_DIR)/$$(CFG_LIBDIR_RELATIVE)\n+prepare-base-$(1): PREPARE_DEST_MAN_DIR=$$(PREPARE_DEST_DIR)/share/man/man1\n+prepare-base-$(1): prepare-host-$(1) prepare-targets-$(1)\n+\n+prepare-host-$(1): prepare-host-tools-$(1)\n+\n+prepare-host-tools-$(1): \\\n+        $$(foreach tool, $$(PREPARE_TOOLS),\\\n+          $$(foreach host,$$(CFG_HOST),\\\n+            prepare-host-tool-$$(tool)-$$(PREPARE_STAGE)-$$(host)-$(1)))\n+\n+prepare-host-dirs-$(1): prepare-maybe-clean-$(1)\n+\t$$(call PREPARE_DIR,$$(PREPARE_DEST_BIN_DIR))\n+\t$$(call PREPARE_DIR,$$(PREPARE_DEST_LIB_DIR))\n+\t$$(call PREPARE_DIR,$$(PREPARE_DEST_MAN_DIR))\n+\n+$$(foreach tool,$$(PREPARE_TOOLS),\\\n+  $$(foreach host,$$(CFG_HOST),\\\n+      $$(eval $$(call DEF_PREPARE_HOST_TOOL,$$(tool),$$(PREPARE_STAGE),$$(host),$(1)))))\n+\n+$$(foreach lib,$$(CRATES),\\\n+  $$(foreach host,$$(CFG_HOST),\\\n+    $$(eval $$(call DEF_PREPARE_HOST_LIB,$$(lib),$$(PREPARE_STAGE),$$(host),$(1)))))\n+\n+prepare-targets-$(1):\\\n+        $$(foreach host,$$(CFG_HOST),\\\n+           $$(foreach target,$$(CFG_TARGET),\\\n+             prepare-target-$$(target)-host-$$(host)-$$(PREPARE_STAGE)-$(1)))\n+\n+$$(foreach host,$$(CFG_HOST),\\\n+  $$(foreach target,$$(CFG_TARGET), \\\n+    $$(eval $$(call DEF_PREPARE_TARGET_N,$$(PREPARE_STAGE),$$(target),$$(host),$(1)))))\n+\n+prepare-maybe-clean-$(1):\n+\t$$(if $$(findstring true,$$(PREPARE_CLEAN)),\\\n+      @$$(call E, cleaning destination $$(PREPARE_DEST_DIR)),)\n+\t$$(if $$(findstring true,$$(PREPARE_CLEAN)),\\\n+      $$(Q)rm -rf $$(PREPARE_DEST_DIR),)\n+\n+\n+endef\n+\n \n-prepare-maybe-clean:\n-\t$(if $(findstring true,$(PREPARE_CLEAN)),\\\n-      @$(call E, cleaning destination $@),)\n-\t$(if $(findstring true,$(PREPARE_CLEAN)),\\\n-      $(Q)rm -rf $(PREPARE_DEST_DIR),)"}, {"sha": "8dfc1903094e7d82912b8eba214aaf1e409c50e6", "filename": "src/etc/install.sh", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b1091c3141f2285fa9620c9e4df3fb86d911c5f6/src%2Fetc%2Finstall.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b1091c3141f2285fa9620c9e4df3fb86d911c5f6/src%2Fetc%2Finstall.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstall.sh?ref=b1091c3141f2285fa9620c9e4df3fb86d911c5f6", "patch": "@@ -224,41 +224,62 @@ step_msg \"validating $CFG_SELF args\"\n validate_opt\n \n # Sanity check: can we can write to the destination?\n+umask 022 && mkdir -p \"${CFG_PREFIX}/lib\"\n+need_ok \"directory creation failed\"\n touch \"${CFG_PREFIX}/lib/rust-install-probe\" 2> /dev/null\n if [ $? -ne 0 ]\n then\n     err \"can't write to destination. try again with 'sudo'.\"\n fi\n-rm -r \"${CFG_PREFIX}/lib/rust-install-probe\"\n+rm \"${CFG_PREFIX}/lib/rust-install-probe\"\n need_ok \"failed to remove install probe\"\n \n-# Sanity check: can we run these binaries?\n-\"${CFG_SRC_DIR}/bin/rustc\" --version > /dev/null\n-need_ok \"can't run these binaries on this platform\"\n \n-# First, uninstall from the installation prefix\n+# First, uninstall from the installation prefix.\n+# Errors are warnings - try to rm everything in the manifest even if some fail.\n # FIXME: Hardcoded 'rustlib' ignores CFG_RUSTLIBDIR\n if [ -f \"${CFG_PREFIX}/lib/rustlib/manifest\" ]\n then\n+    # Iterate through installed manifest and remove files\n     while read p; do\n-        msg \"uninstall ${CFG_PREFIX}/$p\"\n-        rm \"${CFG_PREFIX}/$p\"\n-        need_ok \"failed to remove file\"\n+        msg \"removing ${CFG_PREFIX}/$p\"\n+        if [ -f \"${CFG_PREFIX}/$p\" ]\n+        then\n+            rm \"${CFG_PREFIX}/$p\"\n+            if [ $? -ne 0 ]\n+            then\n+                warn \"failed to remove ${CFG_PREFIX}/$p\"\n+            fi\n+        else\n+            warn \"supposedly installed file ${CFG_PREFIX}/$p does not exist!\"\n+        fi\n     done < \"${CFG_PREFIX}/lib/rustlib/manifest\"\n \n     # Remove 'rustlib' directory\n-    msg \"uninstall ${CFG_PREFIX}/lib/rustlib\"\n+    msg \"removing ${CFG_PREFIX}/lib/rustlib\"\n     rm -r \"${CFG_PREFIX}/lib/rustlib\"\n-    need_ok \"failed to remove rustlib\"\n+    if [ $? -ne 0 ]\n+    then\n+        warn \"failed to remove rustlib\"\n+    fi\n+else\n+    if [ -n \"${CFG_UNINSTALL}\" ]\n+    then\n+        err \"unable to find installation manifest at ${CFG_PREFIX}/lib/rustlib\"\n+    fi\n fi\n \n # If we're only uninstalling then exit\n if [ -n \"${CFG_UNINSTALL}\" ]\n then\n+    echo\n+    echo \"    Rust is uninstalled. Have a nice day.\"\n+    echo\n     exit 0\n fi\n \n-# Iterate through the new manifest and install files\n+\n+# Now install, iterate through the new manifest and copy files\n while read p; do\n \n     umask 022 && mkdir -p \"${CFG_PREFIX}/$(dirname $p)\""}, {"sha": "66bb71527fed30b40a0085aa9a7ca8c2f2ad6aec", "filename": "src/etc/pkg/rust.iss", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1091c3141f2285fa9620c9e4df3fb86d911c5f6/src%2Fetc%2Fpkg%2Frust.iss", "raw_url": "https://github.com/rust-lang/rust/raw/b1091c3141f2285fa9620c9e4df3fb86d911c5f6/src%2Fetc%2Fpkg%2Frust.iss", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpkg%2Frust.iss?ref=b1091c3141f2285fa9620c9e4df3fb86d911c5f6", "patch": "@@ -1,5 +1,6 @@\n #define CFG_VERSION_WIN GetEnv(\"CFG_VERSION_WIN\")\n #define CFG_RELEASE GetEnv(\"CFG_RELEASE\")\n+#define CFG_PACKAGE_NAME GetEnv(\"CFG_PACKAGE_NAME\")\n \n [Setup]\n \n@@ -17,9 +18,9 @@ DisableProgramGroupPage=true\n DisableReadyPage=true\n DisableStartupPrompt=true\n \n-OutputDir=.\\\n+OutputDir=.\\dist\\\n SourceDir=.\\\n-OutputBaseFilename=rust-{#CFG_RELEASE}-install\n+OutputBaseFilename={#CFG_PACKAGE_NAME}-install\n DefaultDirName={pf32}\\Rust\n \n Compression=lzma2/ultra"}]}