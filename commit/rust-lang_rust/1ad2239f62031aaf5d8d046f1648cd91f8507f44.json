{"sha": "1ad2239f62031aaf5d8d046f1648cd91f8507f44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZDIyMzlmNjIwMzFhYWY1ZDhkMDQ2ZjE2NDhjZDkxZjg1MDdmNDQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-21T03:00:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-28T01:47:58Z"}, "message": "libstd: Fix merge fallout.", "tree": {"sha": "73475c56b02b83de2ce42f69cf4bf73c57651e52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73475c56b02b83de2ce42f69cf4bf73c57651e52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ad2239f62031aaf5d8d046f1648cd91f8507f44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad2239f62031aaf5d8d046f1648cd91f8507f44", "html_url": "https://github.com/rust-lang/rust/commit/1ad2239f62031aaf5d8d046f1648cd91f8507f44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ad2239f62031aaf5d8d046f1648cd91f8507f44/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9", "html_url": "https://github.com/rust-lang/rust/commit/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "79fac4e8e8dd3f17a9147304b6baa50131f10ced", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ad2239f62031aaf5d8d046f1648cd91f8507f44/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad2239f62031aaf5d8d046f1648cd91f8507f44/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=1ad2239f62031aaf5d8d046f1648cd91f8507f44", "patch": "@@ -686,7 +686,7 @@ impl Scheduler {\n     }\n \n     pub fn run_task(task: ~Task) {\n-        let sched = Local::take::<Scheduler>();\n+        let sched: ~Scheduler = Local::take();\n         sched.process_task(task, Scheduler::switch_task).map_move(Local::put);\n     }\n "}, {"sha": "954bbc512d956b761a840dbb2a93e2d4ef812f23", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ad2239f62031aaf5d8d046f1648cd91f8507f44/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad2239f62031aaf5d8d046f1648cd91f8507f44/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=1ad2239f62031aaf5d8d046f1648cd91f8507f44", "patch": "@@ -57,7 +57,7 @@ trait HomingIO {\n         let old_home = Cell::new_empty();\n         let old_home_ptr = &old_home;\n         do task::unkillable { // FIXME(#8674)\n-            let scheduler = Local::take::<Scheduler>();\n+            let scheduler: ~Scheduler = Local::take();\n             do scheduler.deschedule_running_task_and_then |_, task| {\n                 // get the old home first\n                 do task.wake().map_move |mut task| {\n@@ -72,7 +72,7 @@ trait HomingIO {\n \n         // unhome home\n         do task::unkillable { // FIXME(#8674)\n-            let scheduler = Local::take::<Scheduler>();\n+            let scheduler: ~Scheduler = Local::take();\n             do scheduler.deschedule_running_task_and_then |scheduler, task| {\n                 do task.wake().map_move |mut task| {\n                     task.give_home(old_home.take());\n@@ -122,7 +122,7 @@ trait HomingIO {\n \n // get a handle for the current scheduler\n macro_rules! get_handle_to_current_scheduler(\n-    () => (do Local::borrow::<Scheduler, SchedHandle> |sched| { sched.make_handle() })\n+    () => (do Local::borrow |sched: &mut Scheduler| { sched.make_handle() })\n )\n \n enum SocketNameKind {\n@@ -765,7 +765,7 @@ impl RtioTcpStream for UvTcpStream {\n \n                     unsafe { (*result_cell_ptr).put_back(result); }\n \n-                    let scheduler: ~Scheduler = Local::take::<Scheduler>();\n+                    let scheduler: ~Scheduler = Local::take();\n                     scheduler.resume_blocked_task_immediately(task_cell.take());\n                 }\n             }"}]}