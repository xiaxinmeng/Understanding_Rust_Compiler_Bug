{"sha": "2f5238867186b7e30a3baff0086b25c9cf7407b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNTIzODg2NzE4NmI3ZTMwYTNiYWZmMDA4NmIyNWM5Y2Y3NDA3Yjc=", "commit": {"author": {"name": "sntdevco", "email": "nandansayan@outlook.com", "date": "2019-03-15T11:08:37Z"}, "committer": {"name": "sntdevco", "email": "nandansayan@outlook.com", "date": "2019-03-15T11:08:37Z"}, "message": "Improved test output for libcore/num/int_macros", "tree": {"sha": "8897a81d6e450756b4aa882eed39e19aebb692ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8897a81d6e450756b4aa882eed39e19aebb692ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f5238867186b7e30a3baff0086b25c9cf7407b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5238867186b7e30a3baff0086b25c9cf7407b7", "html_url": "https://github.com/rust-lang/rust/commit/2f5238867186b7e30a3baff0086b25c9cf7407b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f5238867186b7e30a3baff0086b25c9cf7407b7/comments", "author": {"login": "ohsayan", "id": 17377258, "node_id": "MDQ6VXNlcjE3Mzc3MjU4", "avatar_url": "https://avatars.githubusercontent.com/u/17377258?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohsayan", "html_url": "https://github.com/ohsayan", "followers_url": "https://api.github.com/users/ohsayan/followers", "following_url": "https://api.github.com/users/ohsayan/following{/other_user}", "gists_url": "https://api.github.com/users/ohsayan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohsayan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohsayan/subscriptions", "organizations_url": "https://api.github.com/users/ohsayan/orgs", "repos_url": "https://api.github.com/users/ohsayan/repos", "events_url": "https://api.github.com/users/ohsayan/events{/privacy}", "received_events_url": "https://api.github.com/users/ohsayan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ohsayan", "id": 17377258, "node_id": "MDQ6VXNlcjE3Mzc3MjU4", "avatar_url": "https://avatars.githubusercontent.com/u/17377258?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohsayan", "html_url": "https://github.com/ohsayan", "followers_url": "https://api.github.com/users/ohsayan/followers", "following_url": "https://api.github.com/users/ohsayan/following{/other_user}", "gists_url": "https://api.github.com/users/ohsayan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohsayan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohsayan/subscriptions", "organizations_url": "https://api.github.com/users/ohsayan/orgs", "repos_url": "https://api.github.com/users/ohsayan/repos", "events_url": "https://api.github.com/users/ohsayan/events{/privacy}", "received_events_url": "https://api.github.com/users/ohsayan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff2198bc7a8a0a986e0df930422d9aa63b1bcd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff2198bc7a8a0a986e0df930422d9aa63b1bcd3", "html_url": "https://github.com/rust-lang/rust/commit/8ff2198bc7a8a0a986e0df930422d9aa63b1bcd3"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "4881f79ec248aee8d20c00f4e91a6fd7b8dee2ec", "filename": "src/libcore/tests/num/int_macros.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2f5238867186b7e30a3baff0086b25c9cf7407b7/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5238867186b7e30a3baff0086b25c9cf7407b7/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs?ref=2f5238867186b7e30a3baff0086b25c9cf7407b7", "patch": "@@ -12,7 +12,7 @@ mod tests {\n     fn test_overflows() {\n         assert!(MAX > 0);\n         assert!(MIN <= 0);\n-        assert!(MIN + MAX + 1 == 0);\n+        assert_eq!(MIN + MAX + 1, 0);\n     }\n \n     #[test]\n@@ -22,22 +22,22 @@ mod tests {\n \n     #[test]\n     fn test_rem_euclid() {\n-        assert!((-1 as $T).rem_euclid(MIN) == MAX);\n+        assert_eq!((-1 as $T).rem_euclid(MIN), MAX);\n     }\n \n     #[test]\n     pub fn test_abs() {\n-        assert!((1 as $T).abs() == 1 as $T);\n-        assert!((0 as $T).abs() == 0 as $T);\n-        assert!((-1 as $T).abs() == 1 as $T);\n+        assert_eq!((1 as $T).abs(), 1 as $T);\n+        assert_eq!((0 as $T).abs(), 0 as $T);\n+        assert_eq!((-1 as $T).abs(), 1 as $T);\n     }\n \n     #[test]\n     fn test_signum() {\n-        assert!((1 as $T).signum() == 1 as $T);\n-        assert!((0 as $T).signum() == 0 as $T);\n-        assert!((-0 as $T).signum() == 0 as $T);\n-        assert!((-1 as $T).signum() == -1 as $T);\n+        assert_eq!((1 as $T).signum(), 1 as $T);\n+        assert_eq!((0 as $T).signum(), 0 as $T);\n+        assert_eq!((-0 as $T).signum(), 0 as $T);\n+        assert_eq!((-1 as $T).signum(), -1 as $T);\n     }\n \n     #[test]\n@@ -58,12 +58,12 @@ mod tests {\n \n     #[test]\n     fn test_bitwise_operators() {\n-        assert!(0b1110 as $T == (0b1100 as $T).bitor(0b1010 as $T));\n-        assert!(0b1000 as $T == (0b1100 as $T).bitand(0b1010 as $T));\n-        assert!(0b0110 as $T == (0b1100 as $T).bitxor(0b1010 as $T));\n-        assert!(0b1110 as $T == (0b0111 as $T).shl(1));\n-        assert!(0b0111 as $T == (0b1110 as $T).shr(1));\n-        assert!(-(0b11 as $T) - (1 as $T) == (0b11 as $T).not());\n+        assert_eq!(0b1110 as $T, (0b1100 as $T).bitor(0b1010 as $T));\n+        assert_eq!(0b1000 as $T, (0b1100 as $T).bitand(0b1010 as $T));\n+        assert_eq!(0b0110 as $T, (0b1100 as $T).bitxor(0b1010 as $T));\n+        assert_eq!(0b1110 as $T, (0b0111 as $T).shl(1));\n+        assert_eq!(0b0111 as $T, (0b1110 as $T).shr(1));\n+        assert_eq!(-(0b11 as $T) - (1 as $T), (0b11 as $T).not());\n     }\n \n     const A: $T = 0b0101100;\n@@ -75,17 +75,17 @@ mod tests {\n \n     #[test]\n     fn test_count_ones() {\n-        assert!(A.count_ones() == 3);\n-        assert!(B.count_ones() == 2);\n-        assert!(C.count_ones() == 5);\n+        assert_eq!(A.count_ones(), 3);\n+        assert_eq!(B.count_ones(), 2);\n+        assert_eq!(C.count_ones(), 5);\n     }\n \n     #[test]\n     fn test_count_zeros() {\n         let bits = mem::size_of::<$T>() * 8;\n-        assert!(A.count_zeros() == bits as u32 - 3);\n-        assert!(B.count_zeros() == bits as u32 - 2);\n-        assert!(C.count_zeros() == bits as u32 - 5);\n+        assert_eq!(A.count_zeros(), bits as u32 - 3);\n+        assert_eq!(B.count_zeros(), bits as u32 - 2);\n+        assert_eq!(C.count_zeros(), bits as u32 - 5);\n     }\n \n     #[test]\n@@ -148,9 +148,9 @@ mod tests {\n \n     #[test]\n     fn test_signed_checked_div() {\n-        assert!((10 as $T).checked_div(2) == Some(5));\n-        assert!((5 as $T).checked_div(0) == None);\n-        assert!(isize::MIN.checked_div(-1) == None);\n+        assert_eq!((10 as $T).checked_div(2), Some(5));\n+        assert_eq!((5 as $T).checked_div(0), None);\n+        assert_eq!(isize::MIN.checked_div(-1), None);\n     }\n \n     #[test]"}]}