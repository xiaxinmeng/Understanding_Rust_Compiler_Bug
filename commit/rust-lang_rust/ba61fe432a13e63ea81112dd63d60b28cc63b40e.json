{"sha": "ba61fe432a13e63ea81112dd63d60b28cc63b40e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNjFmZTQzMmExM2U2M2VhODExMTJkZDYzZDYwYjI4Y2M2M2I0MGU=", "commit": {"author": {"name": "Duddino", "email": "rezziandrea106@gmail.com", "date": "2020-04-17T12:07:44Z"}, "committer": {"name": "Duddino", "email": "rezziandrea106@gmail.com", "date": "2020-04-17T12:08:08Z"}, "message": "Account for use of `try!()` in 2018 edition and guide users in the right direction", "tree": {"sha": "5dffc4167aa4cd64313900213c6690e694f77d5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dffc4167aa4cd64313900213c6690e694f77d5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba61fe432a13e63ea81112dd63d60b28cc63b40e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba61fe432a13e63ea81112dd63d60b28cc63b40e", "html_url": "https://github.com/rust-lang/rust/commit/ba61fe432a13e63ea81112dd63d60b28cc63b40e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba61fe432a13e63ea81112dd63d60b28cc63b40e/comments", "author": null, "committer": null, "parents": [{"sha": "534a41a32952d36ec73656357777ebbea707aeb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/534a41a32952d36ec73656357777ebbea707aeb4", "html_url": "https://github.com/rust-lang/rust/commit/534a41a32952d36ec73656357777ebbea707aeb4"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "06122df304d8d23be5c784d6677ec763d0bb7a6b", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ba61fe432a13e63ea81112dd63d60b28cc63b40e/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba61fe432a13e63ea81112dd63d60b28cc63b40e/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=ba61fe432a13e63ea81112dd63d60b28cc63b40e", "patch": "@@ -1054,6 +1054,39 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    pub(super) fn try_macro_suggestion(&mut self) -> DiagnosticBuilder<'a> {\n+        let is_questionmark = self.look_ahead(1, |t| t == &token::Not); //check for !\n+        let is_open = self.look_ahead(2, |t| t == &token::OpenDelim(token::Paren)); //check for (\n+\n+        if is_questionmark && is_open {\n+            let lo = self.token.span;\n+            self.bump(); //remove try\n+            self.bump(); //remove !\n+            let try_span = lo.to(self.token.span); //we take the try!( span\n+            self.bump(); //remove (\n+            let is_empty = self.token == token::CloseDelim(token::Paren); //check if the block is empty\n+            self.consume_block(token::Paren, ConsumeClosingDelim::No); //eat the block\n+            let hi = self.token.span;\n+            self.bump(); //remove )\n+            let mut err = self.struct_span_err(lo.to(hi), \"use of deprecated `try` macro\");\n+            err.note(\"in the 2018 edition `try` is a reserved keyword, and the `try!()` macro is deprecated\");\n+            if !is_empty {\n+                err.multipart_suggestion(\n+                    \"you can use the `?` operator instead\",\n+                    vec![(try_span, \"\".to_owned()), (hi, \"?\".to_owned())],\n+                    Applicability::MachineApplicable,\n+                );\n+                err.span_suggestion(lo.shrink_to_lo(), \"alternatively, you can still access the deprecated `try!()` macro using the \\\"raw identifier\\\" syntax\", \"r#\".to_string(), Applicability::MachineApplicable);\n+            } else {\n+                //if the try! macro is empty, it isn't possible to suggest something using the `?` operator\n+                err.span_suggestion(lo.shrink_to_lo(), \"you can still access the deprecated `try!()` macro using the \\\"raw identifier\\\" syntax\", \"r#\".to_string(), Applicability::MachineApplicable);\n+            }\n+            err\n+        } else {\n+            self.expected_expression_found() // The user isn't trying to invoke the try! macro\n+        }\n+    }\n+\n     /// Recovers a situation like `for ( $pat in $expr )`\n     /// and suggest writing `for $pat in $expr` instead.\n     ///"}, {"sha": "907a8c2dce20f6172ddd7f434f0818190ba78223", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba61fe432a13e63ea81112dd63d60b28cc63b40e/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba61fe432a13e63ea81112dd63d60b28cc63b40e/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=ba61fe432a13e63ea81112dd63d60b28cc63b40e", "patch": "@@ -1001,11 +1001,13 @@ impl<'a> Parser<'a> {\n \n     fn parse_lit_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let lo = self.token.span;\n+        let is_try = self.token.is_keyword(kw::Try);\n         match self.parse_opt_lit() {\n             Some(literal) => {\n                 let expr = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Lit(literal), attrs);\n                 self.maybe_recover_from_bad_qpath(expr, true)\n             }\n+            None if is_try => Err(self.try_macro_suggestion()),\n             None => Err(self.expected_expression_found()),\n         }\n     }"}, {"sha": "635ceac0b199ede4debc7d089b319e6f65c109a7", "filename": "src/test/ui/try-macro-suggestion.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba61fe432a13e63ea81112dd63d60b28cc63b40e/src%2Ftest%2Fui%2Ftry-macro-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba61fe432a13e63ea81112dd63d60b28cc63b40e/src%2Ftest%2Fui%2Ftry-macro-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-macro-suggestion.rs?ref=ba61fe432a13e63ea81112dd63d60b28cc63b40e", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: --edition 2018\n+fn foo() -> Result<(), ()> {\n+    Ok(try!()); //~ ERROR use of deprecated `try` macro\n+    Ok(try!(Ok(()))) //~ ERROR use of deprecated `try` macro\n+}\n+\n+fn main() {\n+    let _ = foo();\n+}"}, {"sha": "9d833ef5ed9fb50cba6d1a66a7c8144017b973d7", "filename": "src/test/ui/try-macro-suggestion.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ba61fe432a13e63ea81112dd63d60b28cc63b40e/src%2Ftest%2Fui%2Ftry-macro-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba61fe432a13e63ea81112dd63d60b28cc63b40e/src%2Ftest%2Fui%2Ftry-macro-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-macro-suggestion.stderr?ref=ba61fe432a13e63ea81112dd63d60b28cc63b40e", "patch": "@@ -0,0 +1,30 @@\n+error: use of deprecated `try` macro\n+  --> $DIR/try-macro-suggestion.rs:3:8\n+   |\n+LL |     Ok(try!());\n+   |        ^^^^^^\n+   |\n+   = note: in the 2018 edition `try` is a reserved keyword, and the `try!()` macro is deprecated\n+help: you can still access the deprecated `try!()` macro using the \"raw identifier\" syntax\n+   |\n+LL |     Ok(r#try!());\n+   |        ^^\n+\n+error: use of deprecated `try` macro\n+  --> $DIR/try-macro-suggestion.rs:4:8\n+   |\n+LL |     Ok(try!(Ok(())))\n+   |        ^^^^^^^^^^^^\n+   |\n+   = note: in the 2018 edition `try` is a reserved keyword, and the `try!()` macro is deprecated\n+help: you can use the `?` operator instead\n+   |\n+LL |     Ok(Ok(())?)\n+   |       --     ^\n+help: alternatively, you can still access the deprecated `try!()` macro using the \"raw identifier\" syntax\n+   |\n+LL |     Ok(r#try!(Ok(())))\n+   |        ^^\n+\n+error: aborting due to 2 previous errors\n+"}]}