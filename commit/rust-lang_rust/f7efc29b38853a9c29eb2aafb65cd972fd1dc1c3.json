{"sha": "f7efc29b38853a9c29eb2aafb65cd972fd1dc1c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZWZjMjliMzg4NTNhOWMyOWViMmFhZmI2NWNkOTcyZmQxZGMxYzM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-11T19:36:56Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-11T19:36:56Z"}, "message": "rustc: Determine regions for locals", "tree": {"sha": "e08cce1f36086a1c579852448dca7fc100afc44a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e08cce1f36086a1c579852448dca7fc100afc44a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7efc29b38853a9c29eb2aafb65cd972fd1dc1c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7efc29b38853a9c29eb2aafb65cd972fd1dc1c3", "html_url": "https://github.com/rust-lang/rust/commit/f7efc29b38853a9c29eb2aafb65cd972fd1dc1c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7efc29b38853a9c29eb2aafb65cd972fd1dc1c3/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e968672ac7b4fe840b2b1561585f7ca7d4fd892d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e968672ac7b4fe840b2b1561585f7ca7d4fd892d", "html_url": "https://github.com/rust-lang/rust/commit/e968672ac7b4fe840b2b1561585f7ca7d4fd892d"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "875b013a608692601e05b86b56c59fdc92bef752", "filename": "src/rustc/middle/regionck.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7efc29b38853a9c29eb2aafb65cd972fd1dc1c3/src%2Frustc%2Fmiddle%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7efc29b38853a9c29eb2aafb65cd972fd1dc1c3/src%2Frustc%2Fmiddle%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregionck.rs?ref=f7efc29b38853a9c29eb2aafb65cd972fd1dc1c3", "patch": "@@ -8,6 +8,14 @@ import middle::ty;\n import std::map::hashmap;\n import syntax::{ast, visit};\n \n+// An \"extended region\", which includes the ordinarily-unnamed reference-\n+// counted heap and exchange heap regions. This is used to detect borrowing.\n+enum region_ext {\n+    re_rc,\n+    re_exheap,\n+    re_region(ty::region)\n+}\n+\n type ctxt = {\n     tcx: ty::ctxt,\n     enclosing_block: option<ast::node_id>"}, {"sha": "728d9f82a75ece4047fb4a69f028ef0ac36f7ad8", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f7efc29b38853a9c29eb2aafb65cd972fd1dc1c3/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7efc29b38853a9c29eb2aafb65cd972fd1dc1c3/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=f7efc29b38853a9c29eb2aafb65cd972fd1dc1c3", "patch": "@@ -1848,6 +1848,45 @@ fn lookup_field_ty(cx: ty::ctxt, items:[@ast::class_item],\n     cx.sess.span_fatal(sp, #fmt(\"unbound field %s\", fieldname));\n }\n \n+/*\n+ * Returns the region that the value named by the given expression lives in.\n+ * If the expression is not an lvalue, reports an error and returns the block\n+ * region.\n+ *\n+ * Note that borrowing is not detected here, because we would have to\n+ * immediately structurally resolve too many types otherwise. Thus the\n+ * reference-counted heap and exchange heap regions will be reported as block\n+ * regions instead. This is cleaned up in the region checking pass.\n+ */\n+fn region_of(fcx: @fn_ctxt, expr: @ast::expr) -> ty::region {\n+    alt expr.node {\n+        ast::expr_path(path) {\n+            let defn = lookup_def(fcx, path.span, expr.id);\n+            alt defn {\n+                ast::def_local(local_id, _) |\n+                ast::def_upvar(local_id, _, _) {\n+                    let local_blocks = fcx.ccx.tcx.region_map.local_blocks;\n+                    let local_block_id = local_blocks.get(local_id);\n+                    ret ty::re_block(local_block_id);\n+                }\n+                _ {\n+                    fcx.ccx.tcx.sess.span_unimpl(expr.span,\n+                                                 \"immortal region\");\n+                }\n+            }\n+        }\n+        ast::expr_field(base, _, _) | ast::expr_index(base, _) |\n+                ast::expr_unary(ast::deref, base) {\n+            fcx.ccx.tcx.sess.span_unimpl(expr.span, \"regions of field, \" +\n+                                         \"index, or deref operations\");\n+        }\n+        _ {\n+            fcx.ccx.tcx.sess.span_err(expr.span, \"not an lvalue\");\n+            ret ty::re_block(0);\n+        }\n+    }\n+}\n+\n fn check_expr_fn_with_unifier(fcx: @fn_ctxt,\n                               expr: @ast::expr,\n                               proto: ast::proto,\n@@ -2202,9 +2241,9 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         bot = check_expr(fcx, oper);\n         let oper_t = expr_ty(tcx, oper);\n \n-        // FIXME: This is incorrect. Infer the proper region.\n+        let region = region_of(fcx, oper);\n         let tm = { ty: oper_t, mutbl: mutbl };\n-        oper_t = ty::mk_rptr(tcx, ty::re_block(0), tm);\n+        oper_t = ty::mk_rptr(tcx, region, tm);\n         write_ty(tcx, id, oper_t);\n       }\n       ast::expr_path(pth) {"}]}