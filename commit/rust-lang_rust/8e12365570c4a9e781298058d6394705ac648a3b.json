{"sha": "8e12365570c4a9e781298058d6394705ac648a3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMTIzNjU1NzBjNGE5ZTc4MTI5ODA1OGQ2Mzk0NzA1YWM2NDhhM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-16T10:12:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-16T10:12:40Z"}, "message": "Auto merge of #30935 - ollie27:pad_int, r=alexcrichton\n\nThe function expects a value of true for zero but zero is not positive.", "tree": {"sha": "24ffa481c94cd5d403e475bae78d803f202b6efb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24ffa481c94cd5d403e475bae78d803f202b6efb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e12365570c4a9e781298058d6394705ac648a3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e12365570c4a9e781298058d6394705ac648a3b", "html_url": "https://github.com/rust-lang/rust/commit/8e12365570c4a9e781298058d6394705ac648a3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e12365570c4a9e781298058d6394705ac648a3b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83c3b7f5a4f558880501633c65400350d33960cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/83c3b7f5a4f558880501633c65400350d33960cd", "html_url": "https://github.com/rust-lang/rust/commit/83c3b7f5a4f558880501633c65400350d33960cd"}, {"sha": "b31df789f7c28d2cfaa2df5d578a415782f4a9f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b31df789f7c28d2cfaa2df5d578a415782f4a9f4", "html_url": "https://github.com/rust-lang/rust/commit/b31df789f7c28d2cfaa2df5d578a415782f4a9f4"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "e2c7579a2b2f5c449ca7e8779c6877c529a6d397", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e12365570c4a9e781298058d6394705ac648a3b/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e12365570c4a9e781298058d6394705ac648a3b/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=8e12365570c4a9e781298058d6394705ac648a3b", "patch": "@@ -852,7 +852,7 @@ impl<'a> Formatter<'a> {\n     ///\n     /// # Arguments\n     ///\n-    /// * is_positive - whether the original integer was positive or not.\n+    /// * is_nonnegative - whether the original integer was either positive or zero.\n     /// * prefix - if the '#' character (Alternate) is provided, this\n     ///   is the prefix to put in front of the number.\n     /// * buf - the byte array that the number has been formatted into\n@@ -861,7 +861,7 @@ impl<'a> Formatter<'a> {\n     /// the minimum width. It will not take precision into account.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn pad_integral(&mut self,\n-                        is_positive: bool,\n+                        is_nonnegative: bool,\n                         prefix: &str,\n                         buf: &str)\n                         -> Result {\n@@ -870,7 +870,7 @@ impl<'a> Formatter<'a> {\n         let mut width = buf.len();\n \n         let mut sign = None;\n-        if !is_positive {\n+        if !is_nonnegative {\n             sign = Some('-'); width += 1;\n         } else if self.sign_plus() {\n             sign = Some('+'); width += 1;"}, {"sha": "fa085ec19e656d27903043ef37c4efdf9e51c0d9", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e12365570c4a9e781298058d6394705ac648a3b/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e12365570c4a9e781298058d6394705ac648a3b/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=8e12365570c4a9e781298058d6394705ac648a3b", "patch": "@@ -60,11 +60,11 @@ trait GenericRadix {\n         // The radix can be as low as 2, so we need a buffer of at least 64\n         // characters for a base 2 number.\n         let zero = T::zero();\n-        let is_positive = x >= zero;\n+        let is_nonnegative = x >= zero;\n         let mut buf = [0; 64];\n         let mut curr = buf.len();\n         let base = T::from_u8(self.base());\n-        if is_positive {\n+        if is_nonnegative {\n             // Accumulate each digit of the number from the least significant\n             // to the most significant figure.\n             for byte in buf.iter_mut().rev() {\n@@ -91,7 +91,7 @@ trait GenericRadix {\n             }\n         }\n         let buf = unsafe { str::from_utf8_unchecked(&buf[curr..]) };\n-        f.pad_integral(is_positive, self.prefix(), buf)\n+        f.pad_integral(is_nonnegative, self.prefix(), buf)\n     }\n }\n \n@@ -268,8 +268,8 @@ macro_rules! impl_Display {\n     impl fmt::Display for $t {\n         #[allow(unused_comparisons)]\n         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-            let is_positive = *self >= 0;\n-            let mut n = if is_positive {\n+            let is_nonnegative = *self >= 0;\n+            let mut n = if is_nonnegative {\n                 self.$conv_fn()\n             } else {\n                 // convert the negative num to positive by summing 1 to it's 2 complement\n@@ -321,7 +321,7 @@ macro_rules! impl_Display {\n                 str::from_utf8_unchecked(\n                     slice::from_raw_parts(buf_ptr.offset(curr), buf.len() - curr as usize))\n             };\n-            f.pad_integral(is_positive, \"\", buf_slice)\n+            f.pad_integral(is_nonnegative, \"\", buf_slice)\n         }\n     })*);\n }"}]}