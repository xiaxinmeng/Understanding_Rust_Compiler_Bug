{"sha": "858eab63912db10ee5e6706724df9c909c6502e7", "node_id": "C_kwDOAAsO6NoAKDg1OGVhYjYzOTEyZGIxMGVlNWU2NzA2NzI0ZGY5YzkwOWM2NTAyZTc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-10T18:17:52Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-05T20:55:32Z"}, "message": "Do not ICE when casting polymorphic values.", "tree": {"sha": "2f276ad7f5d7248ab01f5ec425cb8ebb1858e0a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f276ad7f5d7248ab01f5ec425cb8ebb1858e0a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/858eab63912db10ee5e6706724df9c909c6502e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/858eab63912db10ee5e6706724df9c909c6502e7", "html_url": "https://github.com/rust-lang/rust/commit/858eab63912db10ee5e6706724df9c909c6502e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/858eab63912db10ee5e6706724df9c909c6502e7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d7234abb65fa8cf0007ed03dfd8448eb9128f5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d7234abb65fa8cf0007ed03dfd8448eb9128f5d", "html_url": "https://github.com/rust-lang/rust/commit/5d7234abb65fa8cf0007ed03dfd8448eb9128f5d"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "c14152a916a2937d8cf7c9e484f2ecffe6e3f449", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/858eab63912db10ee5e6706724df9c909c6502e7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/858eab63912db10ee5e6706724df9c909c6502e7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=858eab63912db10ee5e6706724df9c909c6502e7", "patch": "@@ -67,12 +67,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Pointer(PointerCast::ReifyFnPointer) => {\n+                // All reifications must be monomorphic, bail out otherwise.\n+                ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n+\n                 // The src operand does not matter, just its type\n                 match *src.layout.ty.kind() {\n                     ty::FnDef(def_id, substs) => {\n-                        // All reifications must be monomorphic, bail out otherwise.\n-                        ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n-\n                         let instance = ty::Instance::resolve_for_fn_ptr(\n                             *self.tcx,\n                             self.param_env,\n@@ -100,12 +100,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Pointer(PointerCast::ClosureFnPointer(_)) => {\n+                // All reifications must be monomorphic, bail out otherwise.\n+                ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n+\n                 // The src operand does not matter, just its type\n                 match *src.layout.ty.kind() {\n                     ty::Closure(def_id, substs) => {\n-                        // All reifications must be monomorphic, bail out otherwise.\n-                        ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n-\n                         let instance = ty::Instance::resolve_closure(\n                             *self.tcx,\n                             def_id,\n@@ -359,8 +359,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let val = Immediate::new_dyn_trait(ptr, vtable, &*self.tcx);\n                 self.write_immediate(val, dest)\n             }\n-\n             _ => {\n+                // Do not ICE if we are not monomorphic enough.\n+                ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n+                ensure_monomorphic_enough(*self.tcx, cast_ty)?;\n+\n                 span_bug!(\n                     self.cur_span(),\n                     \"invalid pointer unsizing {:?} -> {:?}\",\n@@ -404,12 +407,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 }\n                 Ok(())\n             }\n-            _ => span_bug!(\n-                self.cur_span(),\n-                \"unsize_into: invalid conversion: {:?} -> {:?}\",\n-                src.layout,\n-                dest.layout\n-            ),\n+            _ => {\n+                // Do not ICE if we are not monomorphic enough.\n+                ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n+                ensure_monomorphic_enough(*self.tcx, cast_ty.ty)?;\n+\n+                span_bug!(\n+                    self.cur_span(),\n+                    \"unsize_into: invalid conversion: {:?} -> {:?}\",\n+                    src.layout,\n+                    dest.layout\n+                )\n+            }\n         }\n     }\n }"}]}