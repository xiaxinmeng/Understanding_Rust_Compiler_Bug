{"sha": "e0543409d5c3835e1355831449dfd7435c4336ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNTQzNDA5ZDVjMzgzNWUxMzU1ODMxNDQ5ZGZkNzQzNWM0MzM2ZmY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-27T16:20:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-27T16:20:16Z"}, "message": "Rollup merge of #74487 - lcnr:const-in-ty-default, r=varkor\n\nForbid generic parameters in anon consts inside of type defaults\n\nEmit a resolution error for `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`.\nWe are unable to support this with the way `ty::Generics` is currently used,\nso let's just forbid it entirely for now.\n\nFixes some ICE on stable, e.g.\n```rust\nstruct Foo<T, U = [u8; std::mem::size_of::<*mut T>()]>(T, U);\n```\n\nr? @varkor @eddyb", "tree": {"sha": "3cbd89c6ae7b55361e48ba6379df2ac8b8feb55f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cbd89c6ae7b55361e48ba6379df2ac8b8feb55f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0543409d5c3835e1355831449dfd7435c4336ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfHv7BCRBK7hj4Ov3rIwAAdHIIABxxf/Umd9R5jewoHbjXCpri\n461kEVBklmvh3JxmlcFPPhtp1WtRUO15rUdrffUoGo4YAwciZZdqHm391e/OtT0a\njEBqxWxYU+5ENQWjb46vukQlx5ii3gasRi3QASC181ij/+18fAycYofoWpgbGXx9\ncGfX79eUOeC+KUGZlwq4yhIH+gHZtRvdsUQf3+wpeRBmUJGk5OxJIt4IOBu0xh8E\ng+MeUHgFuti4TG5oXe/p0exGYUWF0lxDKC0nHPvgsl2VsDk/52NOmZ3t+DwGSTRb\n6HVeyyDPJgcEBeg/KLDSBeNl3vVWuUEJG/ot1M4TsXrHTbgwLM4SBFLYh2vAT8M=\n=SQam\n-----END PGP SIGNATURE-----\n", "payload": "tree 3cbd89c6ae7b55361e48ba6379df2ac8b8feb55f\nparent 7864c3f5fa709b854aeee4c45fd00f834ed75449\nparent 952fd0ce5867ea65c8d760ae66e900d49669a719\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595866816 -0700\ncommitter GitHub <noreply@github.com> 1595866816 -0700\n\nRollup merge of #74487 - lcnr:const-in-ty-default, r=varkor\n\nForbid generic parameters in anon consts inside of type defaults\n\nEmit a resolution error for `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`.\nWe are unable to support this with the way `ty::Generics` is currently used,\nso let's just forbid it entirely for now.\n\nFixes some ICE on stable, e.g.\n```rust\nstruct Foo<T, U = [u8; std::mem::size_of::<*mut T>()]>(T, U);\n```\n\nr? @varkor @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0543409d5c3835e1355831449dfd7435c4336ff", "html_url": "https://github.com/rust-lang/rust/commit/e0543409d5c3835e1355831449dfd7435c4336ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0543409d5c3835e1355831449dfd7435c4336ff/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7864c3f5fa709b854aeee4c45fd00f834ed75449", "url": "https://api.github.com/repos/rust-lang/rust/commits/7864c3f5fa709b854aeee4c45fd00f834ed75449", "html_url": "https://github.com/rust-lang/rust/commit/7864c3f5fa709b854aeee4c45fd00f834ed75449"}, {"sha": "952fd0ce5867ea65c8d760ae66e900d49669a719", "url": "https://api.github.com/repos/rust-lang/rust/commits/952fd0ce5867ea65c8d760ae66e900d49669a719", "html_url": "https://github.com/rust-lang/rust/commit/952fd0ce5867ea65c8d760ae66e900d49669a719"}], "stats": {"total": 148, "additions": 135, "deletions": 13}, "files": [{"sha": "81e29047dc5e24e14c9269a6b48154ef5e1cabca", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e0543409d5c3835e1355831449dfd7435c4336ff/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0543409d5c3835e1355831449dfd7435c4336ff/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=e0543409d5c3835e1355831449dfd7435c4336ff", "patch": "@@ -442,7 +442,7 @@ impl<'a> Resolver<'a> {\n                 );\n                 err\n             }\n-            ResolutionError::ParamInTyOfConstArg(name) => {\n+            ResolutionError::ParamInTyOfConstParam(name) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n@@ -455,6 +455,17 @@ impl<'a> Resolver<'a> {\n                 );\n                 err\n             }\n+            ResolutionError::ParamInAnonConstInTyDefault(name) => {\n+                let mut err = self.session.struct_span_err(\n+                    span,\n+                    \"constant values inside of type parameter defaults must not depend on generic parameters\",\n+                );\n+                err.span_label(\n+                    span,\n+                    format!(\"the anonymous constant must not depend on the parameter `{}`\", name),\n+                );\n+                err\n+            }\n             ResolutionError::SelfInTyParamDefault => {\n                 let mut err = struct_span_err!(\n                     self.session,"}, {"sha": "bcd2c6c1f1c27cc3e29cede1605e9e44b9cb5eb0", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0543409d5c3835e1355831449dfd7435c4336ff/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0543409d5c3835e1355831449dfd7435c4336ff/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=e0543409d5c3835e1355831449dfd7435c4336ff", "patch": "@@ -570,7 +570,15 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n \n                     if let Some(ref ty) = default {\n                         self.ribs[TypeNS].push(default_ban_rib);\n-                        self.visit_ty(ty);\n+                        self.with_rib(ValueNS, ForwardTyParamBanRibKind, |this| {\n+                            // HACK: We use an empty `ForwardTyParamBanRibKind` here which\n+                            // is only used to forbid the use of const parameters inside of\n+                            // type defaults.\n+                            //\n+                            // While the rib name doesn't really fit here, it does allow us to use the same\n+                            // code for both const and type parameters.\n+                            this.visit_ty(ty);\n+                        });\n                         default_ban_rib = self.ribs[TypeNS].pop().unwrap();\n                     }\n \n@@ -1081,7 +1089,9 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     fn with_constant_rib(&mut self, f: impl FnOnce(&mut Self)) {\n         debug!(\"with_constant_rib\");\n         self.with_rib(ValueNS, ConstantItemRibKind, |this| {\n-            this.with_label_rib(ConstantItemRibKind, f);\n+            this.with_rib(TypeNS, ConstantItemRibKind, |this| {\n+                this.with_label_rib(ConstantItemRibKind, f);\n+            })\n         });\n     }\n "}, {"sha": "234fcd789eee4932242b5e389356ce43f5a827b0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 57, "deletions": 10, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/e0543409d5c3835e1355831449dfd7435c4336ff/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0543409d5c3835e1355831449dfd7435c4336ff/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e0543409d5c3835e1355831449dfd7435c4336ff", "patch": "@@ -215,7 +215,9 @@ enum ResolutionError<'a> {\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n     /// ERROR E0770: the type of const parameters must not depend on other generic parameters.\n-    ParamInTyOfConstArg(Symbol),\n+    ParamInTyOfConstParam(Symbol),\n+    /// constant values inside of type parameter defaults must not depend on generic parameters.\n+    ParamInAnonConstInTyDefault(Symbol),\n     /// Error E0735: type parameters with a default cannot use `Self`\n     SelfInTyParamDefault,\n     /// Error E0767: use of unreachable label\n@@ -2514,7 +2516,7 @@ impl<'a> Resolver<'a> {\n                         }\n                         ConstParamTyRibKind => {\n                             if record_used {\n-                                self.report_error(span, ParamInTyOfConstArg(rib_ident.name));\n+                                self.report_error(span, ParamInTyOfConstParam(rib_ident.name));\n                             }\n                             return Res::Err;\n                         }\n@@ -2526,26 +2528,48 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n             Res::Def(DefKind::TyParam, _) | Res::SelfTy(..) => {\n+                let mut in_ty_param_default = false;\n                 for rib in ribs {\n                     let has_generic_params = match rib.kind {\n                         NormalRibKind\n                         | ClosureOrAsyncRibKind\n                         | AssocItemRibKind\n                         | ModuleRibKind(..)\n-                        | MacroDefinition(..)\n-                        | ForwardTyParamBanRibKind\n-                        | ConstantItemRibKind => {\n+                        | MacroDefinition(..) => {\n                             // Nothing to do. Continue.\n                             continue;\n                         }\n+\n+                        // We only forbid constant items if we are inside of type defaults,\n+                        // for example `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`\n+                        ForwardTyParamBanRibKind => {\n+                            in_ty_param_default = true;\n+                            continue;\n+                        }\n+                        ConstantItemRibKind => {\n+                            if in_ty_param_default {\n+                                if record_used {\n+                                    self.report_error(\n+                                        span,\n+                                        ResolutionError::ParamInAnonConstInTyDefault(\n+                                            rib_ident.name,\n+                                        ),\n+                                    );\n+                                }\n+                                return Res::Err;\n+                            } else {\n+                                continue;\n+                            }\n+                        }\n+\n                         // This was an attempt to use a type parameter outside its scope.\n                         ItemRibKind(has_generic_params) => has_generic_params,\n                         FnItemRibKind => HasGenericParams::Yes,\n                         ConstParamTyRibKind => {\n                             if record_used {\n                                 self.report_error(\n                                     span,\n-                                    ResolutionError::ParamInTyOfConstArg(rib_ident.name),\n+                                    ResolutionError::ParamInTyOfConstParam(rib_ident.name),\n                                 );\n                             }\n                             return Res::Err;\n@@ -2572,22 +2596,45 @@ impl<'a> Resolver<'a> {\n                     // (spuriously) conflicting with the const param.\n                     ribs.next();\n                 }\n+\n+                let mut in_ty_param_default = false;\n                 for rib in ribs {\n                     let has_generic_params = match rib.kind {\n                         NormalRibKind\n                         | ClosureOrAsyncRibKind\n                         | AssocItemRibKind\n                         | ModuleRibKind(..)\n-                        | MacroDefinition(..)\n-                        | ForwardTyParamBanRibKind\n-                        | ConstantItemRibKind => continue,\n+                        | MacroDefinition(..) => continue,\n+\n+                        // We only forbid constant items if we are inside of type defaults,\n+                        // for example `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`\n+                        ForwardTyParamBanRibKind => {\n+                            in_ty_param_default = true;\n+                            continue;\n+                        }\n+                        ConstantItemRibKind => {\n+                            if in_ty_param_default {\n+                                if record_used {\n+                                    self.report_error(\n+                                        span,\n+                                        ResolutionError::ParamInAnonConstInTyDefault(\n+                                            rib_ident.name,\n+                                        ),\n+                                    );\n+                                }\n+                                return Res::Err;\n+                            } else {\n+                                continue;\n+                            }\n+                        }\n+\n                         ItemRibKind(has_generic_params) => has_generic_params,\n                         FnItemRibKind => HasGenericParams::Yes,\n                         ConstParamTyRibKind => {\n                             if record_used {\n                                 self.report_error(\n                                     span,\n-                                    ResolutionError::ParamInTyOfConstArg(rib_ident.name),\n+                                    ResolutionError::ParamInTyOfConstParam(rib_ident.name),\n                                 );\n                             }\n                             return Res::Err;"}, {"sha": "84bbea5b880573c72f919de7642164b0006dadfb", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e0543409d5c3835e1355831449dfd7435c4336ff/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0543409d5c3835e1355831449dfd7435c4336ff/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=e0543409d5c3835e1355831449dfd7435c4336ff", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_generics)] //~ WARN the feature `const_generics` is incomplete\n+\n+struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n+//~^ ERROR constant values inside of type parameter defaults\n+\n+// FIXME(const_generics:defaults): We still don't know how to we deal with type defaults.\n+struct Bar<T = [u8; N], const N: usize>(T);\n+//~^ ERROR constant values inside of type parameter defaults\n+//~| ERROR type parameters with a default\n+\n+fn main() {}"}, {"sha": "571be91683b7ca4c43cbdd09230795b252a291b5", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e0543409d5c3835e1355831449dfd7435c4336ff/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0543409d5c3835e1355831449dfd7435c4336ff/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.stderr?ref=e0543409d5c3835e1355831449dfd7435c4336ff", "patch": "@@ -0,0 +1,31 @@\n+error: type parameters with a default must be trailing\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:12\n+   |\n+LL | struct Bar<T = [u8; N], const N: usize>(T);\n+   |            ^\n+   |\n+   = note: using type defaults and const parameters in the same parameter list is currently not permitted\n+\n+error: constant values inside of type parameter defaults must not depend on generic parameters\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:3:44\n+   |\n+LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n+   |                                            ^ the anonymous constant must not depend on the parameter `T`\n+\n+error: constant values inside of type parameter defaults must not depend on generic parameters\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:21\n+   |\n+LL | struct Bar<T = [u8; N], const N: usize>(T);\n+   |                     ^ the anonymous constant must not depend on the parameter `N`\n+\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+"}, {"sha": "dd89bc0f7a0ff856feba1e555509b6fe48b84127", "filename": "src/test/ui/generic/param-in-ct-in-ty-param-default.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0543409d5c3835e1355831449dfd7435c4336ff/src%2Ftest%2Fui%2Fgeneric%2Fparam-in-ct-in-ty-param-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0543409d5c3835e1355831449dfd7435c4336ff/src%2Ftest%2Fui%2Fgeneric%2Fparam-in-ct-in-ty-param-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fparam-in-ct-in-ty-param-default.rs?ref=e0543409d5c3835e1355831449dfd7435c4336ff", "patch": "@@ -0,0 +1,4 @@\n+struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n+//~^ ERROR constant values inside of type parameter defaults\n+\n+fn main() {}"}, {"sha": "ea867240269efdd3bf0de265687cc543d4eaf5d3", "filename": "src/test/ui/generic/param-in-ct-in-ty-param-default.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0543409d5c3835e1355831449dfd7435c4336ff/src%2Ftest%2Fui%2Fgeneric%2Fparam-in-ct-in-ty-param-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0543409d5c3835e1355831449dfd7435c4336ff/src%2Ftest%2Fui%2Fgeneric%2Fparam-in-ct-in-ty-param-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fparam-in-ct-in-ty-param-default.stderr?ref=e0543409d5c3835e1355831449dfd7435c4336ff", "patch": "@@ -0,0 +1,8 @@\n+error: constant values inside of type parameter defaults must not depend on generic parameters\n+  --> $DIR/param-in-ct-in-ty-param-default.rs:1:44\n+   |\n+LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n+   |                                            ^ the anonymous constant must not depend on the parameter `T`\n+\n+error: aborting due to previous error\n+"}]}