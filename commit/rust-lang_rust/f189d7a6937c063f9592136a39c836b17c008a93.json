{"sha": "f189d7a6937c063f9592136a39c836b17c008a93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxODlkN2E2OTM3YzA2M2Y5NTkyMTM2YTM5YzgzNmIxN2MwMDhhOTM=", "commit": {"author": {"name": "Nikita Baksalyar", "email": "nikita.baksalyar@gmail.com", "date": "2016-01-21T16:30:22Z"}, "committer": {"name": "Nikita Baksalyar", "email": "nikita.baksalyar@gmail.com", "date": "2016-01-31T15:57:26Z"}, "message": "Add Illumos support", "tree": {"sha": "a31b16fa2af96d112a2e470d7a169b460d961efb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a31b16fa2af96d112a2e470d7a169b460d961efb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f189d7a6937c063f9592136a39c836b17c008a93", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJWri7mAAoJED7qN4oOp1jajW8IAJxmtUGtRm82LFgVx6ym+vis\n0+m5Ba8dMA4pWpofDD+/fbSsCAoM/5MpEfvpEYS0cVw9Hj9HqMyPJO5Xk14vMJNE\nFlsELEg1Ju5lBNAEPrr2K6eUIcI9ww0ZS34rLI7/i/0gZ8ZFV+e3wdH0JCEAwHmD\nxvdkZVCCVlHRUKxYKWNDkJD7kI+45cKYlQVRpW/ySRD7QjlbzpoBhZUFxGCxRn9h\nlrR0+0mUhCndOz5TiTWaH3QDUSonkjXVnjTRCxy2z0AK46KN1hL0XEgaOid7of5V\nLxh5Els6bbeYUE3U9EmoMDDUfkcgpuL4KNQoJzg/CqoHhHfCPVxW5Yx8XSf/+5Y=\n=/cAx\n-----END PGP SIGNATURE-----", "payload": "tree a31b16fa2af96d112a2e470d7a169b460d961efb\nparent 9041b930585806b948b4cc68933047ffdc96f6f9\nauthor Nikita Baksalyar <nikita.baksalyar@gmail.com> 1453393822 +0300\ncommitter Nikita Baksalyar <nikita.baksalyar@gmail.com> 1454255846 +0300\n\nAdd Illumos support\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f189d7a6937c063f9592136a39c836b17c008a93", "html_url": "https://github.com/rust-lang/rust/commit/f189d7a6937c063f9592136a39c836b17c008a93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f189d7a6937c063f9592136a39c836b17c008a93/comments", "author": {"login": "nbaksalyar", "id": 217316, "node_id": "MDQ6VXNlcjIxNzMxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/217316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbaksalyar", "html_url": "https://github.com/nbaksalyar", "followers_url": "https://api.github.com/users/nbaksalyar/followers", "following_url": "https://api.github.com/users/nbaksalyar/following{/other_user}", "gists_url": "https://api.github.com/users/nbaksalyar/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbaksalyar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbaksalyar/subscriptions", "organizations_url": "https://api.github.com/users/nbaksalyar/orgs", "repos_url": "https://api.github.com/users/nbaksalyar/repos", "events_url": "https://api.github.com/users/nbaksalyar/events{/privacy}", "received_events_url": "https://api.github.com/users/nbaksalyar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbaksalyar", "id": 217316, "node_id": "MDQ6VXNlcjIxNzMxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/217316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbaksalyar", "html_url": "https://github.com/nbaksalyar", "followers_url": "https://api.github.com/users/nbaksalyar/followers", "following_url": "https://api.github.com/users/nbaksalyar/following{/other_user}", "gists_url": "https://api.github.com/users/nbaksalyar/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbaksalyar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbaksalyar/subscriptions", "organizations_url": "https://api.github.com/users/nbaksalyar/orgs", "repos_url": "https://api.github.com/users/nbaksalyar/repos", "events_url": "https://api.github.com/users/nbaksalyar/events{/privacy}", "received_events_url": "https://api.github.com/users/nbaksalyar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9041b930585806b948b4cc68933047ffdc96f6f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9041b930585806b948b4cc68933047ffdc96f6f9", "html_url": "https://github.com/rust-lang/rust/commit/9041b930585806b948b4cc68933047ffdc96f6f9"}], "stats": {"total": 449, "additions": 412, "deletions": 37}, "files": [{"sha": "83f7e1736c2b91df009851f8489355a2a6e6c694", "filename": "configure", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/configure", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -1,5 +1,13 @@\n #!/bin/sh\n \n+# /bin/sh on Solaris is not a POSIX compatible shell, but /usr/bin/ksh is.\n+if [ `uname -s` = 'SunOS' -a \"${POSIX_SHELL}\" != \"true\" ]; then\n+    POSIX_SHELL=\"true\"\n+    export POSIX_SHELL\n+    exec /usr/bin/bash $0 \"$@\"\n+fi\n+unset POSIX_SHELL # clear it so if we invoke other scripts, they run as ksh as well\n+\n msg() {\n     echo \"configure: $*\"\n }\n@@ -416,6 +424,11 @@ case $CFG_OSTYPE in\n         CFG_OSTYPE=apple-darwin\n         ;;\n \n+    SunOS)\n+        CFG_OSTYPE=sun-solaris\n+        CFG_CPUTYPE=$(isainfo -n)\n+        ;;\n+\n     MINGW*)\n         # msys' `uname` does not print gcc configuration, but prints msys\n         # configuration. so we cannot believe `uname -m`:"}, {"sha": "0a09a5cf72d9f94ecfbe8199b9dd9e1b837ede99", "filename": "mk/cfg/x86_64-sun-solaris.mk", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/mk%2Fcfg%2Fx86_64-sun-solaris.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/mk%2Fcfg%2Fx86_64-sun-solaris.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-sun-solaris.mk?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -0,0 +1,23 @@\n+# x86_64-sun-solaris configuration\n+CROSS_PREFIX_x86_64-sun-solaris=x86_64-sun-solaris2.11-\n+CC_x86_64-sun-solaris=$(CC)\n+CXX_x86_64-sun-solaris=$(CXX)\n+CPP_x86_64-sun-solaris=$(CPP)\n+AR_x86_64-sun-solaris=$(AR)\n+CFG_LIB_NAME_x86_64-sun-solaris=lib$(1).so\n+CFG_STATIC_LIB_NAME_x86_64-sun-solaris=lib$(1).a\n+CFG_LIB_GLOB_x86_64-sun-solaris=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_x86_64-sun-solaris=$(1)-*.dylib.dSYM\n+CFG_JEMALLOC_CFLAGS_x86_64-sun-solaris := -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-sun-solaris := -Wall -Werror -g -D_POSIX_PTHREAD_SEMANTICS -fPIC -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_LINK_FLAGS_x86_64-sun-solaris := -shared -fPIC -g -pthread  -lrt\n+CFG_GCCISH_DEF_FLAG_x86_64-sun-solaris := -Wl,--export-dynamic,--dynamic-list=\n+CFG_LLC_FLAGS_x86_64-sun-solaris :=\n+CFG_INSTALL_NAME_x86_64-sun-solaris =\n+CFG_EXE_SUFFIX_x86_64-sun-solaris :=\n+CFG_WINDOWSY_x86_64-sun-solaris :=\n+CFG_UNIXY_x86_64-sun-solaris := 1\n+CFG_LDPATH_x86_64-sun-solaris :=\n+CFG_RUN_x86_64-sun-solaris=$(2)\n+CFG_RUN_TARG_x86_64-sun-solaris=$(call CFG_RUN_x86_64-sun-solaris,,$(2))\n+CFG_GNU_TRIPLE_x86_64-sun-solaris := x86_64-sun-solaris"}, {"sha": "552fd6c48bd2e1b3487fb88123774b1070d75bdf", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -25,6 +25,7 @@ const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"openbsd\", \"openbsd\"),\n     (\"win32\", \"windows\"),\n     (\"windows\", \"windows\"),\n+    (\"solaris\", \"sunos\"),\n ];\n \n const ARCH_TABLE: &'static [(&'static str, &'static str)] = &["}, {"sha": "aee69a5c8bc58f64fca8bf4b27f4fb7b3862435a", "filename": "src/etc/local_stage0.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Fetc%2Flocal_stage0.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Fetc%2Flocal_stage0.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flocal_stage0.sh?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -18,7 +18,7 @@ LIB_PREFIX=lib\n \n OS=`uname -s`\n case $OS in\n-    (\"Linux\"|\"FreeBSD\"|\"DragonFly\"|\"Bitrig\"|\"OpenBSD\")\n+    (\"Linux\"|\"FreeBSD\"|\"DragonFly\"|\"Bitrig\"|\"OpenBSD\"|\"SunOS\")\n     BIN_SUF=\n     LIB_SUF=.so\n     ;;"}, {"sha": "9d4142eaddc52d98b6a2e21797870b5112b8c601", "filename": "src/etc/snapshot.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Fetc%2Fsnapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Fetc%2Fsnapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsnapshot.py?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -48,6 +48,7 @@ def scrub(b):\n         \"macos\": [\"bin/rustc\"],\n         \"netbsd\": [\"bin/rustc\"],\n         \"openbsd\": [\"bin/rustc\"],\n+        \"sunos\": [\"bin/rustc\"],\n         \"winnt\": [\"bin/rustc.exe\"],\n         }\n "}, {"sha": "f47aeaa0f21109f0b3c9529f2bce6878bb39f795", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -59,6 +59,7 @@ mod freebsd_base;\n mod linux_base;\n mod openbsd_base;\n mod netbsd_base;\n+mod sunos_base;\n mod windows_base;\n mod windows_msvc_base;\n \n@@ -155,6 +156,10 @@ pub struct TargetOptions {\n     /// Whether the target toolchain is like OSX's. Only useful for compiling against iOS/OS X, in\n     /// particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.\n     pub is_like_osx: bool,\n+    /// Whether the target toolchain is like Solaris's.\n+    /// Only useful for compiling against Illumos/Solaris,\n+    /// as they have a different set of linker flags. Defaults to false.\n+    pub is_like_sunos: bool,\n     /// Whether the target toolchain is like Windows'. Only useful for compiling against Windows,\n     /// only really used for figuring out how to find libraries, since Windows uses its own\n     /// library naming convention. Defaults to false.\n@@ -227,6 +232,7 @@ impl Default for TargetOptions {\n             staticlib_suffix: \".a\".to_string(),\n             target_family: None,\n             is_like_osx: false,\n+            is_like_sunos: false,\n             is_like_windows: false,\n             is_like_android: false,\n             is_like_msvc: false,\n@@ -447,6 +453,8 @@ impl Target {\n             armv7_apple_ios,\n             armv7s_apple_ios,\n \n+            x86_64_sun_solaris,\n+\n             x86_64_pc_windows_gnu,\n             i686_pc_windows_gnu,\n "}, {"sha": "52052be019850f995114e834a94acc84d14c6eae", "filename": "src/librustc_back/target/sunos_base.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibrustc_back%2Ftarget%2Fsunos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibrustc_back%2Ftarget%2Fsunos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fsunos_base.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::TargetOptions;\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    TargetOptions {\n+        linker: \"cc\".to_string(),\n+        dynamic_linking: true,\n+        executables: true,\n+        has_rpath: true,\n+        is_like_sunos: true,\n+        archive_format: \"gnu\".to_string(),\n+        exe_allocation_crate: super::maybe_jemalloc(),\n+\n+        .. Default::default()\n+    }\n+}"}, {"sha": "a18aa0277e1611a99c9b2e1551122e706ca381fd", "filename": "src/librustc_back/target/x86_64_sun_solaris.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::sunos_base::opts();\n+    base.pre_link_args.push(\"-m64\".to_string());\n+    base.pre_link_args.push(\"-lsocket\".to_string());\n+    base.pre_link_args.push(\"-lposix4\".to_string());\n+\n+    Target {\n+        llvm_target: \"x86_64-pc-solaris2.11\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"sunos\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"sun\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "07f3f63eae77c0a916b0bafb677daf6727f05ba0", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -131,6 +131,9 @@ impl<'a> Linker for GnuLinker<'a> {\n         // insert it here.\n         if self.sess.target.target.options.is_like_osx {\n             self.cmd.arg(\"-Wl,-dead_strip\");\n+        } else if self.sess.target.target.options.is_like_sunos {\n+            self.cmd.arg(\"-Wl,-z\");\n+            self.cmd.arg(\"-Wl,ignore\");\n \n         // If we're building a dylib, we don't use --gc-sections because LLVM\n         // has already done the best it can do, and we also don't want to"}, {"sha": "5a3552e00e54f44b2f475aff0aa2689238f62cd8", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -111,6 +111,27 @@ mod imp {\n         pub const F_SETLKW: libc::c_int = 9;\n     }\n \n+    #[cfg(target_os = \"sunos\")]\n+    mod os {\n+        use libc;\n+\n+        pub struct flock {\n+            pub l_type: libc::c_short,\n+            pub l_whence: libc::c_short,\n+            pub l_start: libc::off_t,\n+            pub l_len: libc::off_t,\n+            pub l_sysid: libc::c_int,\n+            pub l_pid: libc::pid_t,\n+\n+            // __unused1: [libc::c_long; 4]\n+        }\n+\n+        pub const F_WRLCK: libc::c_short = 2;\n+        pub const F_UNLCK: libc::c_short = 3;\n+        pub const F_SETLK: libc::c_int = 6;\n+        pub const F_SETLKW: libc::c_int = 7;\n+    }\n+\n     pub struct Lock {\n         fd: libc::c_int,\n     }"}, {"sha": "c7aeda453a5236ce8e4436494b1703de73bd609a", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -172,7 +172,8 @@ mod tests {\n               target_os = \"dragonfly\",\n               target_os = \"bitrig\",\n               target_os = \"netbsd\",\n-              target_os = \"openbsd\"))]\n+              target_os = \"openbsd\",\n+              target_os = \"sunos\"))]\n     #[allow(deprecated)]\n     fn test_errors_do_not_crash() {\n         use path::Path;\n@@ -195,7 +196,8 @@ mod tests {\n           target_os = \"dragonfly\",\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n-          target_os = \"openbsd\"))]\n+          target_os = \"openbsd\",\n+          target_os = \"sunos\"))]\n mod dl {\n     use prelude::v1::*;\n "}, {"sha": "eaf4de619a7503d92a454cd132962cf1ae8ca89f", "filename": "src/libstd/env.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -642,6 +642,7 @@ pub mod consts {\n     /// - bitrig\n     /// - netbsd\n     /// - openbsd\n+    /// - sunos\n     /// - android\n     /// - windows\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n@@ -802,6 +803,17 @@ mod os {\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n+#[cfg(target_os = \"sunos\")]\n+mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"sunos\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n #[cfg(target_os = \"windows\")]\n mod os {\n     pub const FAMILY: &'static str = \"windows\";"}, {"sha": "2afaef2fff1905bf0bacba08f684bcb40eea1eaf", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -84,6 +84,38 @@ mod cmath {\n     }\n }\n \n+#[cfg(not(target_os = \"sunos\"))]\n+macro_rules! log_wrapper {\n+    ($num:ident, $f:ident) => (\n+        unsafe { intrinsics::$f($num) }\n+    )\n+}\n+\n+// Illumos requires a wrapper around log, log2, and log10 functions\n+// because of non-standard behavior (e.g. log(-n) returns -Inf instead\n+// of expected NaN).\n+#[cfg(target_os = \"sunos\")]\n+macro_rules! log_wrapper {\n+    ($num:ident, $f:ident) => (\n+        if $num.is_finite() {\n+            if $num > 0.0 {\n+                return unsafe { intrinsics::$f($num) }\n+            }\n+            return if $num == 0.0 {\n+                NEG_INFINITY // log(0) = -Inf\n+            } else {\n+                NAN // log(-ve) = NaN\n+            }\n+        } else if $num.is_nan() {\n+            $num // log(NaN) = NaN\n+        } else if $num > 0.0 {\n+            $num // log(Inf) = Inf\n+        } else {\n+            return NAN // log(-Inf) = NaN\n+        }\n+    )\n+}\n+\n #[cfg(not(test))]\n #[lang = \"f64\"]\n impl f64 {\n@@ -511,7 +543,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ln(self) -> f64 {\n-        unsafe { intrinsics::logf64(self) }\n+        log_wrapper!(self, logf64)\n     }\n \n     /// Returns the logarithm of the number with respect to an arbitrary base.\n@@ -546,7 +578,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log2(self) -> f64 {\n-        unsafe { intrinsics::log2f64(self) }\n+        log_wrapper!(self, log2f64)\n     }\n \n     /// Returns the base 10 logarithm of the number.\n@@ -562,7 +594,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log10(self) -> f64 {\n-        unsafe { intrinsics::log10f64(self) }\n+        log_wrapper!(self, log10f64)\n     }\n \n     /// Converts radians to degrees."}, {"sha": "69b9a0e4b416030f438b9107b45b7c22ceb2ebbf", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -30,5 +30,6 @@ pub use sys::ext as windows;\n #[cfg(target_os = \"nacl\")]      pub mod nacl;\n #[cfg(target_os = \"netbsd\")]   pub mod netbsd;\n #[cfg(target_os = \"openbsd\")]   pub mod openbsd;\n+#[cfg(target_os = \"sunos\")]     pub mod sunos;\n \n pub mod raw;"}, {"sha": "f265233bd54a550eaefefb3a6de494a262279b2c", "filename": "src/libstd/os/sunos/mod.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fos%2Fsunos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fos%2Fsunos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsunos%2Fmod.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Solaris-specific definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+pub mod raw;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub mod fs {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub use sys::fs::MetadataExt;\n+}"}, {"sha": "cf46ae4a3600d9b1a5e78cbcd92e8a9cb748faf5", "filename": "src/libstd/os/sunos/raw.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fos%2Fsunos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fos%2Fsunos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsunos%2Fraw.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Solaris-specific raw type definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+use os::raw::c_long;\n+use os::unix::raw::{uid_t, gid_t};\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+\n+#[unstable(feature = \"pthread_t\", issue = \"29791\")] pub type pthread_t = usize;\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_dev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ino: ino_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mode: mode_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_nlink: nlink_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_uid: uid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_gid: gid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_rdev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_size: off_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blksize: blksize_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blocks: blkcnt_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub __unused: [u8; 16]\n+}"}, {"sha": "f17a6d5a4b85714b5400d60b3fbfbc85b057a7a0", "filename": "src/libstd/sys/common/args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -38,7 +38,8 @@ pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n           target_os = \"dragonfly\",\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n-          target_os = \"openbsd\"))]\n+          target_os = \"openbsd\",\n+          target_os = \"sunos\"))]\n mod imp {\n     use prelude::v1::*;\n "}, {"sha": "d699a5be0901dbe17ec905d381738c97fab9af2c", "filename": "src/libstd/sys/common/libunwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -102,6 +102,7 @@ pub type _Unwind_Exception_Cleanup_Fn =\n \n #[cfg_attr(any(all(target_os = \"linux\", not(target_env = \"musl\")),\n                target_os = \"freebsd\",\n+               target_os = \"sunos\",\n                all(target_os = \"linux\", target_env = \"musl\", not(target_arch = \"x86_64\"))),\n            link(name = \"gcc_s\"))]\n #[cfg_attr(all(target_os = \"linux\", target_env = \"musl\", target_arch = \"x86_64\", not(test)),"}, {"sha": "1aeed306aa5aa4e0b193e9b625f09274236764c6", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -50,14 +50,14 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n-    #[cfg(not(target_env = \"newlib\"))]\n+    #[cfg(not(any(target_env = \"newlib\", target_os = \"sunos\")))]\n     pub fn set_cloexec(&self) {\n         unsafe {\n             let ret = libc::ioctl(self.fd, libc::FIOCLEX);\n             debug_assert_eq!(ret, 0);\n         }\n     }\n-    #[cfg(target_env = \"newlib\")]\n+    #[cfg(any(target_env = \"newlib\", target_os = \"sunos\"))]\n     pub fn set_cloexec(&self) {\n         unsafe {\n             let previous = libc::fcntl(self.fd, libc::F_GETFD);"}, {"sha": "694aff6bbecad247ba4f299d64b983b0a5af911b", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -14,8 +14,7 @@ use os::unix::prelude::*;\n use ffi::{CString, CStr, OsString, OsStr};\n use fmt;\n use io::{self, Error, ErrorKind, SeekFrom};\n-use libc::{dirent, readdir_r};\n-use libc::{self, c_int, off_t, mode_t};\n+use libc::{self, dirent, c_int, off_t, mode_t};\n use mem;\n use path::{Path, PathBuf};\n use ptr;\n@@ -25,6 +24,8 @@ use sys::platform::raw;\n use sys::{cvt, cvt_r};\n use sys_common::{AsInner, FromInner};\n use vec::Vec;\n+#[cfg(target_os = \"sunos\")]\n+use core_collections::borrow::ToOwned;\n \n pub struct File(FileDesc);\n \n@@ -46,6 +47,12 @@ unsafe impl Sync for Dir {}\n pub struct DirEntry {\n     entry: dirent,\n     root: Arc<PathBuf>,\n+    // We need to store an owned copy of the directory name\n+    // on Solaris because a) it uses a zero-length array to\n+    // store the name, b) its lifetime between readdir calls\n+    // is not guaranteed.\n+    #[cfg(target_os = \"sunos\")]\n+    name: Arc<Vec<u8>>\n }\n \n #[derive(Clone)]\n@@ -132,6 +139,32 @@ impl FromInner<raw::mode_t> for FilePermissions {\n impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n \n+    #[cfg(target_os = \"sunos\")]\n+    fn next(&mut self) -> Option<io::Result<DirEntry>> {\n+        unsafe {\n+            loop {\n+                let entry_ptr = libc::readdir(self.dirp.0);\n+                if entry_ptr.is_null() {\n+                    return None\n+                }\n+\n+                let name = (*entry_ptr).d_name.as_ptr();\n+                let namelen = libc::strlen(name) as usize;\n+\n+                let ret = DirEntry {\n+                    entry: *entry_ptr,\n+                    name: Arc::new(::slice::from_raw_parts(name as *const u8,\n+                                                           namelen as usize).to_owned()),\n+                    root: self.root.clone()\n+                };\n+                if ret.name_bytes() != b\".\" && ret.name_bytes() != b\"..\" {\n+                    return Some(Ok(ret))\n+                }\n+            }\n+        }\n+    }\n+\n+    #[cfg(not(target_os = \"sunos\"))]\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n         unsafe {\n             let mut ret = DirEntry {\n@@ -140,7 +173,7 @@ impl Iterator for ReadDir {\n             };\n             let mut entry_ptr = ptr::null_mut();\n             loop {\n-                if readdir_r(self.dirp.0, &mut ret.entry, &mut entry_ptr) != 0 {\n+                if libc::readdir_r(self.dirp.0, &mut ret.entry, &mut entry_ptr) != 0 {\n                     return Some(Err(Error::last_os_error()))\n                 }\n                 if entry_ptr.is_null() {\n@@ -174,6 +207,12 @@ impl DirEntry {\n         lstat(&self.path())\n     }\n \n+    #[cfg(target_os = \"sunos\")]\n+    pub fn file_type(&self) -> io::Result<FileType> {\n+        stat(&self.path()).map(|m| m.file_type())\n+    }\n+\n+    #[cfg(not(target_os = \"sunos\"))]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         match self.entry.d_type {\n             libc::DT_CHR => Ok(FileType { mode: libc::S_IFCHR }),\n@@ -189,7 +228,8 @@ impl DirEntry {\n \n     #[cfg(any(target_os = \"macos\",\n               target_os = \"ios\",\n-              target_os = \"linux\"))]\n+              target_os = \"linux\",\n+              target_os = \"sunos\"))]\n     pub fn ino(&self) -> raw::ino_t {\n         self.entry.d_ino\n     }\n@@ -234,6 +274,10 @@ impl DirEntry {\n             CStr::from_ptr(self.entry.d_name.as_ptr()).to_bytes()\n         }\n     }\n+    #[cfg(target_os = \"sunos\")]\n+    fn name_bytes(&self) -> &[u8] {\n+        &*self.name\n+    }\n }\n \n impl OpenOptions {"}, {"sha": "635a885fa4338aef7cf2fdafc14518a16bcd7d6f", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -25,6 +25,7 @@ use ops::Neg;\n #[cfg(target_os = \"nacl\")]      pub use os::nacl as platform;\n #[cfg(target_os = \"netbsd\")]    pub use os::netbsd as platform;\n #[cfg(target_os = \"openbsd\")]   pub use os::openbsd as platform;\n+#[cfg(target_os = \"sunos\")]     pub use os::sunos as platform;\n \n pub mod backtrace;\n pub mod condvar;"}, {"sha": "e77cd65eddea09c9537b4655ffe56280ec9c00a9", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 53, "deletions": 9, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -45,6 +45,7 @@ pub fn errno() -> i32 {\n                        target_os = \"android\",\n                        target_env = \"newlib\"),\n                    link_name = \"__errno\")]\n+        #[cfg_attr(target_os = \"sunos\", link_name = \"___errno\")]\n         #[cfg_attr(target_os = \"dragonfly\", link_name = \"__dfly_error\")]\n         #[cfg_attr(any(target_os = \"macos\",\n                        target_os = \"ios\",\n@@ -257,6 +258,28 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     }\n }\n \n+#[cfg(any(target_os = \"sunos\"))]\n+pub fn current_exe() -> io::Result<PathBuf> {\n+    extern {\n+        fn getexecname() -> *const c_char;\n+    }\n+    unsafe {\n+        let path = getexecname();\n+        if path.is_null() {\n+            Err(io::Error::last_os_error())\n+        } else {\n+            let filename = CStr::from_ptr(path).to_bytes();\n+            if filename[0] == b'/' {\n+                Ok(PathBuf::from(<OsStr as OsStrExt>::from_bytes(filename)))\n+            } else {\n+                // Prepend current working directory to the path if\n+                // it doesn't contain an absolute pathname.\n+                return getcwd().map(|cwd| cwd.join(<OsStr as OsStrExt>::from_bytes(filename)))\n+            }\n+        }\n+    }\n+}\n+\n pub struct Args {\n     iter: vec::IntoIter<OsString>,\n     _dont_send_or_sync_me: *mut (),\n@@ -359,6 +382,7 @@ pub fn args() -> Args {\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n+          target_os = \"sunos\",\n           target_os = \"nacl\"))]\n pub fn args() -> Args {\n     use sys_common;\n@@ -481,6 +505,28 @@ pub fn home_dir() -> Option<PathBuf> {\n         fallback()\n     }).map(PathBuf::from);\n \n+    #[cfg(not(target_os = \"sunos\"))]\n+    unsafe fn getpwduid_r(me: libc::uid_t, passwd: &mut libc::passwd,\n+                          buf: &mut Vec<c_char>) -> Option<()> {\n+        let mut result = ptr::null_mut();\n+        match libc::getpwuid_r(me, passwd, buf.as_mut_ptr(),\n+                               buf.capacity() as libc::size_t,\n+                               &mut result) {\n+            0 if !result.is_null() => Some(()),\n+            _ => None\n+        }\n+    }\n+\n+    #[cfg(target_os = \"sunos\")]\n+    unsafe fn getpwduid_r(me: libc::uid_t, passwd: &mut libc::passwd,\n+                          buf: &mut Vec<c_char>) -> Option<()> {\n+        // getpwuid_r semantics is different on Illumos/Solaris:\n+        // http://illumos.org/man/3c/getpwuid_r\n+        let result = libc::getpwuid_r(me, passwd, buf.as_mut_ptr(),\n+                                      buf.capacity() as libc::size_t);\n+        if result.is_null() { None } else { Some(()) }\n+    }\n+\n     #[cfg(any(target_os = \"android\",\n               target_os = \"ios\",\n               target_os = \"nacl\"))]\n@@ -497,16 +543,14 @@ pub fn home_dir() -> Option<PathBuf> {\n         loop {\n             let mut buf = Vec::with_capacity(amt);\n             let mut passwd: libc::passwd = mem::zeroed();\n-            let mut result = ptr::null_mut();\n-            match libc::getpwuid_r(me, &mut passwd, buf.as_mut_ptr(),\n-                                   buf.capacity() as libc::size_t,\n-                                   &mut result) {\n-                0 if !result.is_null() => {}\n-                _ => return None\n+\n+            if getpwduid_r(me, &mut passwd, &mut buf).is_some() {\n+                let ptr = passwd.pw_dir as *const _;\n+                let bytes = CStr::from_ptr(ptr).to_bytes().to_vec();\n+                return Some(OsStringExt::from_vec(bytes))\n+            } else {\n+                return None;\n             }\n-            let ptr = passwd.pw_dir as *const _;\n-            let bytes = CStr::from_ptr(ptr).to_bytes().to_vec();\n-            return Some(OsStringExt::from_vec(bytes))\n         }\n     }\n }"}, {"sha": "000fa097e10640d120fc2b4774af447762e4c6c0", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -93,7 +93,7 @@ fn os2c(s: &OsStr) -> CString {\n pub struct ExitStatus(c_int);\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\",\n-          target_os = \"nacl\"))]\n+          target_os = \"nacl\", target_os = \"sunos\"))]\n mod status_imp {\n     pub fn WIFEXITED(status: i32) -> bool { (status & 0xff) == 0 }\n     pub fn WEXITSTATUS(status: i32) -> i32 { (status >> 8) & 0xff }"}, {"sha": "31f37f315787b69ff5912b62f0c2958272143e47", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -39,6 +39,7 @@ impl Drop for Handler {\n           target_os = \"bitrig\",\n           target_os = \"dragonfly\",\n           target_os = \"freebsd\",\n+          target_os = \"sunos\",\n           all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n           target_os = \"openbsd\"))]\n mod imp {\n@@ -167,6 +168,7 @@ mod imp {\n               target_os = \"bitrig\",\n               target_os = \"dragonfly\",\n               target_os = \"freebsd\",\n+              target_os = \"sunos\",\n               all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n               target_os = \"openbsd\")))]\n mod imp {"}, {"sha": "49d5832f03745f800b3f97b8904db7714bf69016", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -12,7 +12,7 @@ use prelude::v1::*;\n \n use alloc::boxed::FnBox;\n use cmp;\n-#[cfg(not(target_env = \"newlib\"))]\n+#[cfg(not(any(target_env = \"newlib\", target_os = \"sunos\")))]\n use ffi::CString;\n use io;\n use libc;\n@@ -122,9 +122,9 @@ impl Thread {\n                                      carg.as_ptr() as *mut libc::c_void);\n         }\n     }\n-    #[cfg(target_env = \"newlib\")]\n-    pub unsafe fn set_name(_name: &str) {\n-        // Newlib has no way to set a thread name.\n+    #[cfg(any(target_env = \"newlib\", target_os = \"sunos\"))]\n+    pub fn set_name(_name: &str) {\n+        // Newlib and Illumos has no way to set a thread name.\n     }\n \n     pub fn sleep(dur: Duration) {\n@@ -170,7 +170,8 @@ impl Drop for Thread {\n           not(target_os = \"macos\"),\n           not(target_os = \"bitrig\"),\n           not(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\"))),\n-          not(target_os = \"openbsd\")))]\n+          not(target_os = \"openbsd\"),\n+          not(target_os = \"sunos\")))]\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n     pub unsafe fn current() -> Option<usize> { None }\n@@ -182,7 +183,8 @@ pub mod guard {\n           target_os = \"macos\",\n           target_os = \"bitrig\",\n           all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n-          target_os = \"openbsd\"))]\n+          target_os = \"openbsd\",\n+          target_os = \"sunos\"))]\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n     use prelude::v1::*;\n@@ -194,7 +196,8 @@ pub mod guard {\n \n     #[cfg(any(target_os = \"macos\",\n               target_os = \"bitrig\",\n-              target_os = \"openbsd\"))]\n+              target_os = \"openbsd\",\n+              target_os = \"sunos\"))]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n         current().map(|s| s as *mut libc::c_void)\n     }\n@@ -253,6 +256,13 @@ pub mod guard {\n         Some(stackaddr as usize + offset * psize)\n     }\n \n+    #[cfg(target_os = \"sunos\")]\n+    pub unsafe fn current() -> Option<usize> {\n+        let mut current_stack: libc::stack_t = mem::zeroed();\n+        assert_eq!(libc::stack_getbounds(&mut current_stack), 0);\n+        Some(current_stack.ss_sp as usize)\n+    }\n+\n     #[cfg(target_os = \"macos\")]\n     pub unsafe fn current() -> Option<usize> {\n         Some((libc::pthread_get_stackaddr_np(libc::pthread_self()) as libc::size_t -"}, {"sha": "faf73741479aef1b673394332e2407fba41fffe4", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -28,6 +28,7 @@ pub enum Os {\n     OsNetbsd,\n     OsOpenbsd,\n     OsNaCl,\n+    OsSunos,\n }\n \n #[derive(PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Clone, Copy, Debug)]\n@@ -147,6 +148,7 @@ impl fmt::Display for Os {\n             OsNetbsd => \"netbsd\".fmt(f),\n             OsOpenbsd => \"openbsd\".fmt(f),\n             OsNaCl => \"nacl\".fmt(f),\n+            OsSunos => \"sunos\".fmt(f),\n         }\n     }\n }"}, {"sha": "e92c8ceb51ef5c4c74837ff3c20b6bc0e4be1960", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -927,7 +927,8 @@ fn get_concurrency() -> usize {\n     #[cfg(any(target_os = \"linux\",\n               target_os = \"macos\",\n               target_os = \"ios\",\n-              target_os = \"android\"))]\n+              target_os = \"android\",\n+              target_os = \"sunos\"))]\n     fn num_cpus() -> usize {\n         unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as usize }\n     }"}, {"sha": "ecdfe1a88ad0d47e692e87811e83e42f9ee8728c", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-bitrig\n+// ignore-sunos\n // ignore-windows failing on win32 bot\n // ignore-freebsd: gdb package too new\n // ignore-tidy-linelength"}, {"sha": "ec1e282666a3e792ab0f3c811690c8515f0abdfc", "filename": "src/test/run-make/issue-22131/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -4,4 +4,4 @@ all: foo.rs\n \t$(RUSTC) --cfg 'feature=\"bar\"' --crate-type lib foo.rs\n \t$(HOST_RPATH_ENV) $(RUSTDOC) --test --cfg 'feature=\"bar\"' \\\n \t\t-L $(TMPDIR) foo.rs |\\\n-\t\tgrep --quiet 'test foo_0 ... ok'\n+\t\tgrep -q 'test foo_0 ... ok'"}, {"sha": "0c9a0169c1abbfd6467d87e387252686f2523abb", "filename": "src/test/run-make/target-specs/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -2,7 +2,7 @@\n all:\n \t$(RUSTC) foo.rs --target=my-awesome-platform.json --crate-type=lib --emit=asm\n \tgrep -q -v morestack < $(TMPDIR)/foo.s\n-\t$(RUSTC) foo.rs --target=my-invalid-platform.json 2>&1 | grep --quiet \"Error loading target specification\"\n+\t$(RUSTC) foo.rs --target=my-invalid-platform.json 2>&1 | grep -q \"Error loading target specification\"\n \t$(RUSTC) foo.rs --target=my-incomplete-platform.json 2>&1 | grep 'Field llvm-target'\n \tRUST_TARGET_PATH=. $(RUSTC) foo.rs --target=my-awesome-platform --crate-type=lib --emit=asm\n \tRUST_TARGET_PATH=. $(RUSTC) foo.rs --target=x86_64-unknown-linux-gnu --crate-type=lib --emit=asm"}, {"sha": "dab6511eb9d7075e6509dd2b897ec902715a2610", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -83,6 +83,9 @@ ifeq ($(UNAME),Bitrig)\n \tEXTRACFLAGS := -lm -lpthread\n \tEXTRACXXFLAGS := -lc++ -lc++abi\n else\n+ifeq ($(UNAME),SunOS)\n+\tEXTRACFLAGS := -lm -lpthread -lposix4 -lsocket\n+else\n ifeq ($(UNAME),OpenBSD)\n \tEXTRACFLAGS := -lm -lpthread\n \tRUSTC := $(RUSTC) -C linker=\"$(word 1,$(CC:ccache=))\"\n@@ -94,6 +97,7 @@ endif\n endif\n endif\n endif\n+endif\n \n REMOVE_DYLIBS     = rm $(TMPDIR)/$(call DYLIB_GLOB,$(1))\n REMOVE_RLIBS      = rm $(TMPDIR)/$(call RLIB_GLOB,$(1))"}, {"sha": "cc7bc176f49f59b58e562a07fa11af6e09672fac", "filename": "src/test/run-make/use-extern-for-plugins/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2FMakefile?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n \n-SKIP_OS := 'FreeBSD OpenBSD Bitrig'\n+SKIP_OS := 'FreeBSD OpenBSD Bitrig SunOS'\n \n ifneq ($(UNAME),$(findstring $(UNAME),$(SKIP_OS)))\n "}, {"sha": "1bf97a2b3a0006729bc684ef1fc8740e3b72aed5", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -23,7 +23,8 @@ mod rusti {\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n           target_os = \"netbsd\",\n-          target_os = \"openbsd\"))]\n+          target_os = \"openbsd\",\n+          target_os = \"sunos\"))]\n mod m {\n     #[main]\n     #[cfg(target_arch = \"x86\")]"}, {"sha": "98236011f63955676260f760789aff8b0c7853f0", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -41,7 +41,8 @@ struct Outer {\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n           target_os = \"netbsd\",\n-          target_os = \"openbsd\"))]\n+          target_os = \"openbsd\",\n+          target_os = \"sunos\"))]\n mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub mod m {"}, {"sha": "c4ac691a102b124f81d327ebe09cc9055fa89b43", "filename": "src/test/run-pass/x86stdcall.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f189d7a6937c063f9592136a39c836b17c008a93/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall.rs?ref=f189d7a6937c063f9592136a39c836b17c008a93", "patch": "@@ -37,5 +37,6 @@ pub fn main() {\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"android\"))]\n+          target_os = \"android\",\n+          target_os = \"sunos\"))]\n pub fn main() { }"}]}