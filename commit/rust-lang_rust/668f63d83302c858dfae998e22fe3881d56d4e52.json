{"sha": "668f63d83302c858dfae998e22fe3881d56d4e52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2OGY2M2Q4MzMwMmM4NThkZmFlOTk4ZTIyZmUzODgxZDU2ZDRlNTI=", "commit": {"author": {"name": "Amjad Alsharafi", "email": "amjadsharafi10@gmail.com", "date": "2020-08-31T10:35:04Z"}, "committer": {"name": "Amjad Alsharafi", "email": "amjadsharafi10@gmail.com", "date": "2020-08-31T10:52:22Z"}, "message": "Fix duplicate error messages in const_generics tests", "tree": {"sha": "34cb1a3dd6ac9ed99a3176165ed2a94ee67b4935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34cb1a3dd6ac9ed99a3176165ed2a94ee67b4935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/668f63d83302c858dfae998e22fe3881d56d4e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/668f63d83302c858dfae998e22fe3881d56d4e52", "html_url": "https://github.com/rust-lang/rust/commit/668f63d83302c858dfae998e22fe3881d56d4e52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/668f63d83302c858dfae998e22fe3881d56d4e52/comments", "author": {"login": "Amjad50", "id": 26300843, "node_id": "MDQ6VXNlcjI2MzAwODQz", "avatar_url": "https://avatars.githubusercontent.com/u/26300843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amjad50", "html_url": "https://github.com/Amjad50", "followers_url": "https://api.github.com/users/Amjad50/followers", "following_url": "https://api.github.com/users/Amjad50/following{/other_user}", "gists_url": "https://api.github.com/users/Amjad50/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amjad50/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amjad50/subscriptions", "organizations_url": "https://api.github.com/users/Amjad50/orgs", "repos_url": "https://api.github.com/users/Amjad50/repos", "events_url": "https://api.github.com/users/Amjad50/events{/privacy}", "received_events_url": "https://api.github.com/users/Amjad50/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amjad50", "id": 26300843, "node_id": "MDQ6VXNlcjI2MzAwODQz", "avatar_url": "https://avatars.githubusercontent.com/u/26300843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amjad50", "html_url": "https://github.com/Amjad50", "followers_url": "https://api.github.com/users/Amjad50/followers", "following_url": "https://api.github.com/users/Amjad50/following{/other_user}", "gists_url": "https://api.github.com/users/Amjad50/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amjad50/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amjad50/subscriptions", "organizations_url": "https://api.github.com/users/Amjad50/orgs", "repos_url": "https://api.github.com/users/Amjad50/repos", "events_url": "https://api.github.com/users/Amjad50/events{/privacy}", "received_events_url": "https://api.github.com/users/Amjad50/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f", "html_url": "https://github.com/rust-lang/rust/commit/7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f"}], "stats": {"total": 106, "additions": 42, "deletions": 64}, "files": [{"sha": "b52e505070330d912bfdd4912eff2b8cf1ab0fea", "filename": "src/test/ui/const-generics/argument_order.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.full.stderr?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -5,7 +5,7 @@ LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n    |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, const N: usize, T, const M: usize, U>`\n \n error[E0747]: lifetime provided when a type was expected\n-  --> $DIR/argument_order.rs:21:23\n+  --> $DIR/argument_order.rs:20:23\n    |\n LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n    |                       ^^^^^^^"}, {"sha": "728ae69b41f19f77d770c876d268329b2b436254", "filename": "src/test/ui/const-generics/argument_order.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -17,7 +17,7 @@ LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n    |               ---------------------^----------------------^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T, U, const N: usize, const M: usize>`\n \n error[E0747]: lifetime provided when a type was expected\n-  --> $DIR/argument_order.rs:21:23\n+  --> $DIR/argument_order.rs:20:23\n    |\n LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n    |                       ^^^^^^^"}, {"sha": "507baf5fd755eeb58e04f80e57d14087846abc74", "filename": "src/test/ui/const-generics/argument_order.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -10,15 +10,13 @@ struct Bad<const N: usize, T> {\n }\n \n struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n-    //[full]~^ ERROR lifetime parameters must be declared prior\n-    //[min]~^^ ERROR lifetime parameters must be declared prior to const parameters\n-    //[min]~^^^ ERROR type parameters must be declared prior to const parameters\n+    //~^ ERROR lifetime parameters must be declared prior\n+    //[min]~^^ ERROR type parameters must be declared prior to const parameters\n     a: &'a T,\n     b: &'b U,\n }\n \n fn main() {\n     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n-    //[full]~^ ERROR lifetime provided when a type was expected\n-    //[min]~^^ ERROR lifetime provided when a type was expected\n+    //~^ ERROR lifetime provided when a type was expected\n  }"}, {"sha": "6680f772fa3fea7705ae14b2aae9de01d0fab40b", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -6,8 +6,7 @@\n type Array<T, const N: usize> = [T; N];\n \n fn foo<const N: usize>() -> Array<N, ()> {\n-    //[full]~^ ERROR constant provided when a type was expected\n-    //[min]~^^ ERROR constant provided when a type was expected\n+    //~^ ERROR constant provided when a type was expected\n     unimplemented!()\n }\n "}, {"sha": "c7e6d1be421610b19a7fde14478d6c6f68bac6c3", "filename": "src/test/ui/const-generics/const-param-before-other-params.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -5,7 +5,7 @@ LL | fn bar<const X: (), 'a>(_: &'a ()) {\n    |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n \n error: type parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:12:21\n+  --> $DIR/const-param-before-other-params.rs:11:21\n    |\n LL | fn foo<const X: (), T>(_: &T) {}\n    |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n@@ -20,7 +20,7 @@ LL | fn bar<const X: (), 'a>(_: &'a ()) {\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n error: `()` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-before-other-params.rs:12:17\n+  --> $DIR/const-param-before-other-params.rs:11:17\n    |\n LL | fn foo<const X: (), T>(_: &T) {}\n    |                 ^^"}, {"sha": "f1be90cf2e418a62413c151c84e61c9c77b71121", "filename": "src/test/ui/const-generics/const-param-before-other-params.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -4,9 +4,8 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n fn bar<const X: (), 'a>(_: &'a ()) {\n-    //[full]~^ ERROR lifetime parameters must be declared prior to const parameters\n-    //[min]~^^ ERROR lifetime parameters must be declared prior to const parameters\n-    //[min]~^^^ ERROR `()` is forbidden as the type of a const generic parameter\n+    //~^ ERROR lifetime parameters must be declared prior to const parameters\n+    //[min]~^^ ERROR `()` is forbidden as the type of a const generic parameter\n }\n \n fn foo<const X: (), T>(_: &T) {}"}, {"sha": "2194eb97a410740802c64b8eafc8c761ab3991ed", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -8,10 +8,8 @@ struct B;\n impl A for B {}\n \n fn test<const T: &'static dyn A>() {\n-    //[full]~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]` to be used\n-    //[min]~^^ ERROR `&'static (dyn A + 'static)` is forbidden as the type of\n-    // a const generic parameter\n-    //[min]~| ERROR must be annotated with `#[derive(PartialEq, Eq)]` to be used\n+    //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]` to be used\n+    //[min]~^^ ERROR `&'static (dyn A + 'static)` is forbidden\n     unimplemented!()\n }\n "}, {"sha": "b87825d20ce321b1d15c4b299339629acf79885a", "filename": "src/test/ui/const-generics/issues/issue-71169.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n    |                                           ^^^ the type must not depend on the parameter `LEN`\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-71169.rs:12:14\n+  --> $DIR/issue-71169.rs:11:14\n    |\n LL |     foo::<4, DATA>();\n    |              ^^^^"}, {"sha": "7007ec222caa8440baedbcf45ca2e954a53edcda", "filename": "src/test/ui/const-generics/issues/issue-71169.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -4,9 +4,8 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n-//[full]~^ ERROR the type of const parameters must not\n-//[min]~^^ ERROR the type of const parameters must not\n-//[min]~| ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n+//~^ ERROR the type of const parameters must not\n+//[min]~^^ ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n fn main() {\n     const DATA: [u8; 4] = *b\"ABCD\";\n     foo::<4, DATA>();"}, {"sha": "453ef00e6dc1d4976fccae77352a223fc8b51e0e", "filename": "src/test/ui/const-generics/issues/issue-71381.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -5,7 +5,7 @@ LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"\n    |                                                                                  ^^^^ the type must not depend on the parameter `Args`\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-71381.rs:26:40\n+  --> $DIR/issue-71381.rs:24:40\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                                        ^^^^ the type must not depend on the parameter `Args`\n@@ -17,7 +17,7 @@ LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"\n    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71381.rs:26:19\n+  --> $DIR/issue-71381.rs:24:19\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "453ef00e6dc1d4976fccae77352a223fc8b51e0e", "filename": "src/test/ui/const-generics/issues/issue-71381.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.min.stderr?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -5,7 +5,7 @@ LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"\n    |                                                                                  ^^^^ the type must not depend on the parameter `Args`\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-71381.rs:26:40\n+  --> $DIR/issue-71381.rs:24:40\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                                        ^^^^ the type must not depend on the parameter `Args`\n@@ -17,7 +17,7 @@ LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"\n    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71381.rs:26:19\n+  --> $DIR/issue-71381.rs:24:19\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "65d88e553b9e5dd1ea324d3a41557abf1ce0a617", "filename": "src/test/ui/const-generics/issues/issue-71381.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -13,21 +13,17 @@ unsafe extern \"C\" fn pass(args: PassArg) {\n \n impl Test {\n     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n-        //[full]~^ ERROR: using function pointers as const generic parameters is forbidden\n-        //[full]~| ERROR: the type of const parameters must not depend on other generic parameters\n-        //[min]~^^^ ERROR: using function pointers as const generic parameters is forbidden\n-        //[min]~| ERROR: the type of const parameters must not depend on other generic parameters\n+        //~^ ERROR: using function pointers as const generic parameters is forbidden\n+        //~| ERROR: the type of const parameters must not depend on other generic parameters\n         self.0 = Self::trampiline::<Args, IDX, FN> as _\n     }\n \n     unsafe extern \"C\" fn trampiline<\n         Args: Sized,\n         const IDX: usize,\n         const FN: unsafe extern \"C\" fn(Args),\n-        //[full]~^ ERROR: using function pointers as const generic parameters is forbidden\n-        //[full]~| ERROR: the type of const parameters must not depend on other generic parameters\n-        //[min]~^^^ ERROR: using function pointers as const generic parameters is forbidden\n-        //[min]~| ERROR: the type of const parameters must not depend on other generic parameters\n+        //~^ ERROR: using function pointers as const generic parameters is forbidden\n+        //~| ERROR: the type of const parameters must not depend on other generic parameters\n     >(\n         args: Args,\n     ) {"}, {"sha": "12a7d08382a371c7d813a966a7e6f3ff7b02b1e9", "filename": "src/test/ui/const-generics/issues/issue-71382.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.rs?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -15,8 +15,7 @@ impl Test {\n     }\n \n     fn test<const FN: fn()>(&self) {\n-        //[full]~^ ERROR: using function pointers as const generic parameters is forbidden\n-        //[min]~^^ ERROR: using function pointers as const generic parameters is forbidden\n+        //~^ ERROR: using function pointers as const generic parameters is forbidden\n         FN();\n     }\n }"}, {"sha": "9b8e8be6bc6fc72124b9f5008a83ba19eeee0fb3", "filename": "src/test/ui/const-generics/issues/issue-71611.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -4,10 +4,8 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n fn func<A, const F: fn(inner: A)>(outer: A) {\n-    //[full]~^ ERROR: using function pointers as const generic parameters is forbidden\n-    //[full]~| ERROR: the type of const parameters must not depend on other generic parameters\n-    //[min]~^^^ ERROR: using function pointers as const generic parameters is forbidden\n-    //[min]~| ERROR: the type of const parameters must not depend on other generic parameters\n+    //~^ ERROR: using function pointers as const generic parameters is forbidden\n+    //~| ERROR: the type of const parameters must not depend on other generic parameters\n     F(outer);\n }\n "}, {"sha": "1517f3dae4ff4974d3c3210087ff5c16b879ffb8", "filename": "src/test/ui/const-generics/issues/issue-72352.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.rs?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -6,8 +6,7 @@\n use std::ffi::{CStr, CString};\n \n unsafe fn unsafely_do_the_thing<const F: fn(&CStr) -> usize>(ptr: *const i8) -> usize {\n-    //[full]~^ ERROR: using function pointers as const generic parameters is forbidden\n-    //[min]~^^ ERROR: using function pointers as const generic parameters is forbidden\n+    //~^ ERROR: using function pointers as const generic parameters is forbidden\n     F(CStr::from_ptr(ptr))\n }\n "}, {"sha": "21b87f7f9014c31457c0f6b639e0133e0e5510b3", "filename": "src/test/ui/const-generics/issues/issue-73508.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.rs?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -4,7 +4,6 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n pub const fn func_name<const X: *const u32>() {}\n-//[full]~^ ERROR using raw pointers\n-//[min]~^^ ERROR using raw pointers as const generic parameters is forbidden\n+//~^ ERROR using raw pointers\n \n fn main() {}"}, {"sha": "a71e744202151644e3bfbfcc21eb060462a39409", "filename": "src/test/ui/const-generics/std/const-generics-range.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -35,7 +35,7 @@ LL | struct _RangeInclusive<const R: std::ops::RangeInclusive<usize>>;\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n error: `std::ops::RangeTo<usize>` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-generics-range.rs:30:26\n+  --> $DIR/const-generics-range.rs:29:26\n    |\n LL | struct _RangeTo<const R: std::ops::RangeTo<usize>>;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL | struct _RangeTo<const R: std::ops::RangeTo<usize>>;\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n error: `std::ops::RangeToInclusive<usize>` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-generics-range.rs:35:35\n+  --> $DIR/const-generics-range.rs:34:35\n    |\n LL | struct _RangeToInclusive<const R: std::ops::RangeToInclusive<usize>>;\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c04f4a3acfbb582c2c42a6db6e698f3be8d1ce46", "filename": "src/test/ui/const-generics/std/const-generics-range.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -6,35 +6,33 @@\n \n // `Range` should be usable within const generics:\n struct _Range<const R: std::ops::Range<usize>>;\n-//[min]~^ ERROR `std::ops::Range<usize>` is forbidden as the type of a const generic parameter\n+//[min]~^ ERROR `std::ops::Range<usize>` is forbidden\n const RANGE : _Range<{ 0 .. 1000 }> = _Range;\n \n // `RangeFrom` should be usable within const generics:\n struct _RangeFrom<const R: std::ops::RangeFrom<usize>>;\n-//[min]~^ ERROR `std::ops::RangeFrom<usize>` is forbidden as the type of a const generic parameter\n+//[min]~^ ERROR `std::ops::RangeFrom<usize>` is forbidden\n const RANGE_FROM : _RangeFrom<{ 0 .. }> = _RangeFrom;\n \n // `RangeFull` should be usable within const generics:\n struct _RangeFull<const R: std::ops::RangeFull>;\n-//[min]~^ ERROR `std::ops::RangeFull` is forbidden as the type of a const generic parameter\n+//[min]~^ ERROR `std::ops::RangeFull` is forbidden\n const RANGE_FULL : _RangeFull<{ .. }> = _RangeFull;\n \n // Regression test for #70155\n // `RangeInclusive` should be usable within const generics:\n struct _RangeInclusive<const R: std::ops::RangeInclusive<usize>>;\n-//[min]~^ ERROR `std::ops::RangeInclusive<usize>` is forbidden as the type of a const generic\n-// parameter\n+//[min]~^ ERROR `std::ops::RangeInclusive<usize>` is forbidden\n const RANGE_INCLUSIVE : _RangeInclusive<{ 0 ..= 999 }> = _RangeInclusive;\n \n // `RangeTo` should be usable within const generics:\n struct _RangeTo<const R: std::ops::RangeTo<usize>>;\n-//[min]~^ ERROR `std::ops::RangeTo<usize>` is forbidden as the type of a const generic parameter\n+//[min]~^ ERROR `std::ops::RangeTo<usize>` is forbidden\n const RANGE_TO : _RangeTo<{ .. 1000 }> = _RangeTo;\n \n // `RangeToInclusive` should be usable within const generics:\n struct _RangeToInclusive<const R: std::ops::RangeToInclusive<usize>>;\n-//[min]~^ ERROR `std::ops::RangeToInclusive<usize>` is forbidden as the type of a const generic\n-// parameter\n+//[min]~^ ERROR `std::ops::RangeToInclusive<usize>` is forbidden\n const RANGE_TO_INCLUSIVE : _RangeToInclusive<{ ..= 999 }> = _RangeToInclusive;\n \n pub fn main() {}"}, {"sha": "497fd1381de7f3d3901326e70182e3ecd68e687e", "filename": "src/test/ui/const-generics/type-dependent/issue-71382.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.rs?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -15,8 +15,7 @@ impl Test {\n     }\n \n     fn test<const FN: fn() -> u8>(&self) -> u8 {\n-        //[full]~^ ERROR using function pointers as const generic parameters is forbidden\n-        //[min]~^^ ERROR using function pointers as const generic parameters is forbidden\n+        //~^ ERROR using function pointers as const generic parameters is forbidden\n         FN()\n     }\n }"}, {"sha": "67d80973f0397a46ab239ea019a4af092c78ce1b", "filename": "src/test/ui/const-generics/type-dependent/type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.rs?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -10,6 +10,5 @@ impl R {\n }\n fn main() {\n     assert_eq!(R.method::<1u16>(), 1);\n-    //[full]~^ ERROR mismatched types\n-    //[min]~^^ ERROR mismatched types\n+    //~^ ERROR mismatched types\n }"}, {"sha": "265e9ee618be14d8e99f93eebf25c1e8a93027f3", "filename": "src/test/ui/const-generics/types-mismatch-const-args.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -8,7 +8,7 @@ LL |     let _: A<'a, u32, {2u32}, {3u32}> = A::<'a, u32, {4u32}, {3u32}> { data\n               found type `4_u32`\n \n error[E0308]: mismatched types\n-  --> $DIR/types-mismatch-const-args.rs:18:41\n+  --> $DIR/types-mismatch-const-args.rs:17:41\n    |\n LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n    |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`"}, {"sha": "27277f0c0befad0bab38dc682686de4c1a1565b3", "filename": "src/test/ui/const-generics/types-mismatch-const-args.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -10,7 +10,7 @@ LL |     let _: A<'a, u32, {2u32}, {3u32}> = A::<'a, u32, {4u32}, {3u32}> { data\n               found struct `A<'_, _, 4_u32, _>`\n \n error[E0308]: mismatched types\n-  --> $DIR/types-mismatch-const-args.rs:18:41\n+  --> $DIR/types-mismatch-const-args.rs:17:41\n    |\n LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n    |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`"}, {"sha": "34b85304cc4d1a90185d4df1ff76eca2b5f36578", "filename": "src/test/ui/const-generics/types-mismatch-const-args.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668f63d83302c858dfae998e22fe3881d56d4e52/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.rs?ref=668f63d83302c858dfae998e22fe3881d56d4e52", "patch": "@@ -13,11 +13,9 @@ struct A<'a, T, const X: u32, const Y: u32> {\n \n fn a<'a, 'b>() {\n     let _: A<'a, u32, {2u32}, {3u32}> = A::<'a, u32, {4u32}, {3u32}> { data: PhantomData };\n-    //[full]~^ ERROR mismatched types\n-    //[min]~^^ ERROR mismatched types\n+    //~^ ERROR mismatched types\n     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n-    //[full]~^ ERROR mismatched types\n-    //[min]~^^ ERROR mismatched types\n+    //~^ ERROR mismatched types\n }\n \n pub fn main() {}"}]}