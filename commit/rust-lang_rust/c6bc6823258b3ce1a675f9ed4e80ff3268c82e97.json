{"sha": "c6bc6823258b3ce1a675f9ed4e80ff3268c82e97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YmM2ODIzMjU4YjNjZTFhNjc1ZjllZDRlODBmZjMyNjhjODJlOTc=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2018-04-11T09:17:59Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2018-04-11T09:17:59Z"}, "message": "Fix misaligned_transmute lint\n\nThis is done by adding two new lints: cast_ptr_alignment and\ntransmute_ptr_to_ptr. These will replace misaligned_transmute.", "tree": {"sha": "e312a8db7356f86e217fe4be74b204d345b1bb90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e312a8db7356f86e217fe4be74b204d345b1bb90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97", "html_url": "https://github.com/rust-lang/rust/commit/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "976bbe822a8abc438240cbf952550e383cb233ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/976bbe822a8abc438240cbf952550e383cb233ee", "html_url": "https://github.com/rust-lang/rust/commit/976bbe822a8abc438240cbf952550e383cb233ee"}], "stats": {"total": 193, "additions": 190, "deletions": 3}, "files": [{"sha": "a9ebd4dfd3ee3089537abf9d7ec65d1f36e98aae", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c6bc6823258b3ce1a675f9ed4e80ff3268c82e97", "patch": "@@ -641,12 +641,14 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         transmute::TRANSMUTE_INT_TO_CHAR,\n         transmute::TRANSMUTE_INT_TO_FLOAT,\n         transmute::TRANSMUTE_PTR_TO_REF,\n+        transmute::TRANSMUTE_PTR_TO_PTR,\n         transmute::USELESS_TRANSMUTE,\n         transmute::WRONG_TRANSMUTE,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::BORROWED_BOX,\n         types::BOX_VEC,\n         types::CAST_LOSSLESS,\n+        types::CAST_PTR_ALIGNMENT,\n         types::CHAR_LIT_AS_U8,\n         types::IMPLICIT_HASHER,\n         types::LET_UNIT_VALUE,\n@@ -791,6 +793,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         transmute::TRANSMUTE_INT_TO_CHAR,\n         transmute::TRANSMUTE_INT_TO_FLOAT,\n         transmute::TRANSMUTE_PTR_TO_REF,\n+        transmute::TRANSMUTE_PTR_TO_PTR,\n         transmute::USELESS_TRANSMUTE,\n         types::BORROWED_BOX,\n         types::CAST_LOSSLESS,\n@@ -848,6 +851,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         swap::ALMOST_SWAPPED,\n         transmute::WRONG_TRANSMUTE,\n         types::ABSURD_EXTREME_COMPARISONS,\n+        types::CAST_PTR_ALIGNMENT,\n         types::UNIT_CMP,\n         unicode::ZERO_WIDTH_SPACE,\n         unused_io_amount::UNUSED_IO_AMOUNT,"}, {"sha": "7b591a583282880fddb2a365cee1577297bf0fc7", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=c6bc6823258b3ce1a675f9ed4e80ff3268c82e97", "patch": "@@ -186,13 +186,41 @@ declare_clippy_lint! {\n     \"transmutes to a potentially less-aligned type\"\n }\n \n+/// **What it does:** Checks for transmutes from a pointer to a pointer, or\n+/// from a reference to a reference.\n+///\n+/// **Why is this bad?** Transmutes are dangerous, and these can instead be\n+/// written as casts.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let ptr = &1u32 as *const u32;\n+/// unsafe {\n+///     // pointer-to-pointer transmute\n+///     let _: *const f32 = std::mem::transmute(ptr);\n+///     // ref-ref transmute\n+///     let _: &f32 = std::mem::transmute(&1u32);\n+/// }\n+/// // These can be respectively written:\n+/// let _ = ptr as *const f32\n+/// let _ = unsafe{ &*(&1u32 as *const u32 as *const f32) };\n+/// ```\n+declare_clippy_lint! {\n+    pub TRANSMUTE_PTR_TO_PTR,\n+    complexity,\n+    \"transmutes from a pointer to a reference type\"\n+}\n+\n pub struct Transmute;\n \n impl LintPass for Transmute {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(\n             CROSSPOINTER_TRANSMUTE,\n             TRANSMUTE_PTR_TO_REF,\n+            TRANSMUTE_PTR_TO_PTR,\n             USELESS_TRANSMUTE,\n             WRONG_TRANSMUTE,\n             TRANSMUTE_INT_TO_CHAR,\n@@ -363,9 +391,35 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                                 );\n                                             }\n                                         )\n+                                    } else {\n+                                        span_lint_and_then(\n+                                            cx,\n+                                            TRANSMUTE_PTR_TO_PTR,\n+                                            e.span,\n+                                            \"transmute from a reference to a reference\",\n+                                            |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                                                let sugg_paren = arg.as_ty(cx.tcx.mk_ptr(*ref_from)).as_ty(cx.tcx.mk_ptr(*ref_to));\n+                                                let sugg = if ref_to.mutbl == Mutability::MutMutable {\n+                                                    sugg_paren.mut_addr_deref()\n+                                                } else {\n+                                                    sugg_paren.addr_deref()\n+                                                };\n+                                                db.span_suggestion(e.span, \"try\", sugg.to_string());\n+                                            },\n+                                        )\n                                     }\n                                 }\n                             },\n+                            (&ty::TyRawPtr(_), &ty::TyRawPtr(to_ty)) => span_lint_and_then(\n+                                cx,\n+                                TRANSMUTE_PTR_TO_PTR,\n+                                e.span,\n+                                \"transmute from a pointer to a pointer\",\n+                                |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                                    let sugg = arg.as_ty(cx.tcx.mk_ptr(to_ty));\n+                                    db.span_suggestion(e.span, \"try\", sugg.to_string());\n+                                },\n+                            ),\n                             (&ty::TyInt(ast::IntTy::I8), &ty::TyBool) | (&ty::TyUint(ast::UintTy::U8), &ty::TyBool) => {\n                                 span_lint_and_then(\n                                     cx,"}, {"sha": "9034badd5c5dceb475cfb181f45f77a6f32c5e96", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=c6bc6823258b3ce1a675f9ed4e80ff3268c82e97", "patch": "@@ -679,6 +679,25 @@ declare_clippy_lint! {\n     \"cast to the same type, e.g. `x as i32` where `x: i32`\"\n }\n \n+/// **What it does:** Checks for casts from a more-strictly-aligned pointer to a\n+/// less-strictly-aligned pointer\n+///\n+/// **Why is this bad?** Dereferencing the resulting pointer is undefined\n+/// behavior.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let _ = (&1u8 as *const u8) as *const u16;\n+/// let _ = (&mut 1u8 as *mut u8) as *mut u16;\n+/// ```\n+declare_clippy_lint! {\n+    pub CAST_PTR_ALIGNMENT,\n+    correctness,\n+    \"cast from a pointer to a less-strictly-aligned pointer\"\n+}\n+\n /// Returns the size in bits of an integral type.\n /// Will return 0 if the type is not an int or uint variant\n fn int_ty_to_nbits(typ: Ty, tcx: TyCtxt) -> u64 {\n@@ -871,7 +890,8 @@ impl LintPass for CastPass {\n             CAST_POSSIBLE_TRUNCATION,\n             CAST_POSSIBLE_WRAP,\n             CAST_LOSSLESS,\n-            UNNECESSARY_CAST\n+            UNNECESSARY_CAST,\n+            CAST_PTR_ALIGNMENT\n         )\n     }\n }\n@@ -955,6 +975,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n                     },\n                 }\n             }\n+            if_chain!{\n+                if let ty::TyRawPtr(from_ptr_ty) = &cast_from.sty;\n+                if let ty::TyRawPtr(to_ptr_ty) = &cast_to.sty;\n+                if let Some(from_align) = cx.layout_of(from_ptr_ty.ty).ok().map(|a| a.align.abi());\n+                if let Some(to_align) = cx.layout_of(to_ptr_ty.ty).ok().map(|a| a.align.abi());\n+                if from_align < to_align;\n+                then {\n+                    span_lint(\n+                        cx,\n+                        CAST_PTR_ALIGNMENT,\n+                        expr.span,\n+                        &format!(\"casting from `{}` to a less-strictly-aligned pointer (`{}`)\", cast_from, cast_to)\n+                    );\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "bd48774a5ca958c0cd8dd0d5816a0b448fc72120", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=c6bc6823258b3ce1a675f9ed4e80ff3268c82e97", "patch": "@@ -161,6 +161,20 @@ impl<'a> Sugg<'a> {\n         make_unop(\"*\", self)\n     }\n \n+    /// Convenience method to create the `&*<expr>` suggestion. Currently this\n+    /// is needed because `sugg.deref().addr()` produces an unnecessary set of\n+    /// parentheses around the deref.\n+    pub fn addr_deref(self) -> Sugg<'static> {\n+        make_unop(\"&*\", self)\n+    }\n+\n+    /// Convenience method to create the `&mut *<expr>` suggestion. Currently\n+    /// this is needed because `sugg.deref().mut_addr()` produces an unnecessary\n+    /// set of parentheses around the deref.\n+    pub fn mut_addr_deref(self) -> Sugg<'static> {\n+        make_unop(\"&mut *\", self)\n+    }\n+\n     /// Convenience method to create the `<lhs>..<rhs>` or `<lhs>...<rhs>`\n     /// suggestion.\n     pub fn range(self, end: &Self, limit: ast::RangeLimits) -> Sugg<'static> {"}, {"sha": "4985a90bdf561573e774d042b7b86a04e49e5ff2", "filename": "tests/ui/cast_alignment.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/tests%2Fui%2Fcast_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/tests%2Fui%2Fcast_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.rs?ref=c6bc6823258b3ce1a675f9ed4e80ff3268c82e97", "patch": "@@ -0,0 +1,19 @@\n+//! Test casts for alignment issues\n+\n+#[warn(cast_ptr_alignment)]\n+#[allow(no_effect, unnecessary_operation, cast_lossless)]\n+fn main() {\n+    /* These should be warned against */\n+\n+    // cast to more-strictly-aligned type\n+    (&1u8 as *const u8) as *const u16;\n+    (&mut 1u8 as *mut u8) as *mut u16;\n+\n+    /* These should be okay */\n+\n+    // not a pointer type\n+    1u8 as u16;\n+    // cast to less-strictly-aligned type\n+    (&1u16 as *const u16) as *const u8;\n+    (&mut 1u16 as *mut u16) as *mut u8;\n+}"}, {"sha": "d4fdb5becf9e0178cd807e4449d8e22888764278", "filename": "tests/ui/cast_alignment.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/tests%2Fui%2Fcast_alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/tests%2Fui%2Fcast_alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.stderr?ref=c6bc6823258b3ce1a675f9ed4e80ff3268c82e97", "patch": "@@ -0,0 +1,16 @@\n+error: casting from `*const u8` to a less-strictly-aligned pointer (`*const u16`)\n+ --> $DIR/cast_alignment.rs:9:5\n+  |\n+9 |     (&1u8 as *const u8) as *const u16;\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: `-D cast-ptr-alignment` implied by `-D warnings`\n+\n+error: casting from `*mut u8` to a less-strictly-aligned pointer (`*mut u16`)\n+  --> $DIR/cast_alignment.rs:10:5\n+   |\n+10 |     (&mut 1u8 as *mut u8) as *mut u16;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3ff444b386561527008b5c3ccfabfa9310e446a5", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=c6bc6823258b3ce1a675f9ed4e80ff3268c82e97", "patch": "@@ -16,7 +16,7 @@ fn my_vec() -> MyVec<i32> {\n     vec![]\n }\n \n-#[allow(needless_lifetimes)]\n+#[allow(needless_lifetimes, transmute_ptr_to_ptr)]\n #[warn(useless_transmute)]\n unsafe fn _generic<'a, T, U: 'a>(t: &'a T) {\n     let _: &'a T = core::intrinsics::transmute(t);\n@@ -147,4 +147,23 @@ fn misaligned_transmute() {\n     let _: [u8; 4] = unsafe { std::mem::transmute(0u32) }; // ok (alignment-wise)\n }\n \n+#[warn(transmute_ptr_to_ptr)]\n+fn transmute_ptr_to_ptr() {\n+    let ptr = &1u32 as *const u32;\n+    let mut_ptr = &mut 1u32 as *mut u32;\n+    unsafe {\n+        // pointer-to-pointer transmutes; bad\n+        let _: *const f32 = std::mem::transmute(ptr);\n+        let _: *mut f32 = std::mem::transmute(mut_ptr);\n+        // ref-ref transmutes; bad\n+        let _: &f32 = std::mem::transmute(&1u32);\n+        let _: &mut f32 = std::mem::transmute(&mut 1u32);\n+    }\n+    // These should be fine\n+    let _ = ptr as *const f32;\n+    let _ = mut_ptr as *mut f32;\n+    let _ = unsafe { &*(&1u32 as *const u32 as *const f32) };\n+    let _ = unsafe { &mut *(&mut 1u32 as *mut u32 as *mut f32) };\n+}\n+\n fn main() { }"}, {"sha": "f7090f0dca383f9d46ff89fc2a9430a76e736a24", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6bc6823258b3ce1a675f9ed4e80ff3268c82e97/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=c6bc6823258b3ce1a675f9ed4e80ff3268c82e97", "patch": "@@ -212,5 +212,31 @@ error: transmute from `[u8; 4]` to a less-aligned type (`u32`)\n     |\n     = note: `-D misaligned-transmute` implied by `-D warnings`\n \n-error: aborting due to 33 previous errors\n+error: transmute from a pointer to a pointer\n+   --> $DIR/transmute.rs:156:29\n+    |\n+156 |         let _: *const f32 = std::mem::transmute(ptr);\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr as *const f32`\n+    |\n+    = note: `-D transmute-ptr-to-ptr` implied by `-D warnings`\n+\n+error: transmute from a pointer to a pointer\n+   --> $DIR/transmute.rs:157:27\n+    |\n+157 |         let _: *mut f32 = std::mem::transmute(mut_ptr);\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `mut_ptr as *mut f32`\n+\n+error: transmute from a reference to a reference\n+   --> $DIR/transmute.rs:159:23\n+    |\n+159 |         let _: &f32 = std::mem::transmute(&1u32);\n+    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1u32 as *const u32 as *const f32)`\n+\n+error: transmute from a reference to a reference\n+   --> $DIR/transmute.rs:160:27\n+    |\n+160 |         let _: &mut f32 = std::mem::transmute(&mut 1u32);\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(&mut 1u32 as *mut u32 as *mut f32)`\n+\n+error: aborting due to 37 previous errors\n "}]}