{"sha": "89c66eb42d385975c91d79de139b50c298414d71", "node_id": "C_kwDOAAsO6NoAKDg5YzY2ZWI0MmQzODU5NzVjOTFkNzlkZTEzOWI1MGMyOTg0MTRkNzE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-31T13:41:52Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-31T13:41:52Z"}, "message": "update comment", "tree": {"sha": "fa053f09850f3a62bb2b5ac10ee8e81b8279ab54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa053f09850f3a62bb2b5ac10ee8e81b8279ab54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89c66eb42d385975c91d79de139b50c298414d71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89c66eb42d385975c91d79de139b50c298414d71", "html_url": "https://github.com/rust-lang/rust/commit/89c66eb42d385975c91d79de139b50c298414d71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89c66eb42d385975c91d79de139b50c298414d71/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7cada17670c03c7029441e17381845bbe8fa3cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7cada17670c03c7029441e17381845bbe8fa3cc", "html_url": "https://github.com/rust-lang/rust/commit/d7cada17670c03c7029441e17381845bbe8fa3cc"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "f8439d2e163559f5c51faa2364f18c15b2dc1aed", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89c66eb42d385975c91d79de139b50c298414d71/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c66eb42d385975c91d79de139b50c298414d71/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=89c66eb42d385975c91d79de139b50c298414d71", "patch": "@@ -253,8 +253,10 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n         let constraint_sets: Vec<_> = unnormalized_input_output_tys\n             .flat_map(|ty| {\n                 debug!(\"build: input_or_output={:?}\", ty);\n-                // We add implied bounds from both the unnormalized and normalized ty\n-                // See issue #87748\n+                // We only add implied bounds for the normalized type as the unnormalized\n+                // type may not actually get checked by the caller.\n+                //\n+                // Can otherwise be unsound, see #91068.\n                 let TypeOpOutput { output: norm_ty, constraints: constraints1, .. } = self\n                     .param_env\n                     .and(type_op::normalize::Normalize::new(ty))"}]}