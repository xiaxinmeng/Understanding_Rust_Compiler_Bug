{"sha": "7b3ac2142762b9246005080dce6bb8176936f3db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiM2FjMjE0Mjc2MmI5MjQ2MDA1MDgwZGNlNmJiODE3NjkzNmYzZGI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-01-05T04:21:57Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-01-14T06:52:16Z"}, "message": "rustc_trans: remove unused `TargetDataRef` accessor.", "tree": {"sha": "e6e1e9dd3ce3e69af827245ab3d8f8b02d3bd678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6e1e9dd3ce3e69af827245ab3d8f8b02d3bd678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b3ac2142762b9246005080dce6bb8176936f3db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3ac2142762b9246005080dce6bb8176936f3db", "html_url": "https://github.com/rust-lang/rust/commit/7b3ac2142762b9246005080dce6bb8176936f3db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b3ac2142762b9246005080dce6bb8176936f3db/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0d13204a6587ab1e1db6d449b7ebb9846095f21", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0d13204a6587ab1e1db6d449b7ebb9846095f21", "html_url": "https://github.com/rust-lang/rust/commit/d0d13204a6587ab1e1db6d449b7ebb9846095f21"}], "stats": {"total": 9, "additions": 0, "deletions": 9}, "files": [{"sha": "b97e37f4c8fb903cd43b15ea926cd258ee7122f7", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b3ac2142762b9246005080dce6bb8176936f3db/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3ac2142762b9246005080dce6bb8176936f3db/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=7b3ac2142762b9246005080dce6bb8176936f3db", "patch": "@@ -1661,7 +1661,6 @@ extern \"C\" {\n     pub fn LLVMRustArchiveMemberFree(Member: RustArchiveMemberRef);\n \n     pub fn LLVMRustSetDataLayoutFromTargetMachine(M: ModuleRef, TM: TargetMachineRef);\n-    pub fn LLVMRustGetModuleDataLayout(M: ModuleRef) -> TargetDataRef;\n \n     pub fn LLVMRustBuildOperandBundleDef(Name: *const c_char,\n                                          Inputs: *const ValueRef,"}, {"sha": "0bf57c8b0f94a4c95cab9238173fa441a8e437f1", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3ac2142762b9246005080dce6bb8176936f3db/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3ac2142762b9246005080dce6bb8176936f3db/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=7b3ac2142762b9246005080dce6bb8176936f3db", "patch": "@@ -349,10 +349,6 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.codegen_unit\n     }\n \n-    pub fn td(&self) -> llvm::TargetDataRef {\n-        unsafe { llvm::LLVMRustGetModuleDataLayout(self.llmod()) }\n-    }\n-\n     pub fn instances<'a>(&'a self) -> &'a RefCell<FxHashMap<Instance<'tcx>, ValueRef>> {\n         &self.instances\n     }"}, {"sha": "54a73a04bfa9ed9a41560dad718c16ccc32eab23", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3ac2142762b9246005080dce6bb8176936f3db/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7b3ac2142762b9246005080dce6bb8176936f3db/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=7b3ac2142762b9246005080dce6bb8176936f3db", "patch": "@@ -746,10 +746,6 @@ LLVMRustSetDataLayoutFromTargetMachine(LLVMModuleRef Module,\n   unwrap(Module)->setDataLayout(Target->createDataLayout());\n }\n \n-extern \"C\" LLVMTargetDataRef LLVMRustGetModuleDataLayout(LLVMModuleRef M) {\n-  return wrap(&unwrap(M)->getDataLayout());\n-}\n-\n extern \"C\" void LLVMRustSetModulePIELevel(LLVMModuleRef M) {\n   unwrap(M)->setPIELevel(PIELevel::Level::Large);\n }"}]}