{"sha": "3b30377e14f60e6381dc1536bd53b5f9c7a3d7c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMzAzNzdlMTRmNjBlNjM4MWRjMTUzNmJkNTNiNWY5YzdhM2Q3Yzc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-22T21:59:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-24T22:16:58Z"}, "message": "Fix a bug with the scheduler and destructor order\n\nThe PausibleIdleCallback must have some handle into the event loop, and because\nstruct destructors are run in order of top-to-bottom in order of fields, this\nmeant that the event loop was getting destroyed before the idle callback was\ngetting destroyed.\n\nI can't confirm that this fixes a problem in how we use libuv, but it does\nsemantically fix a problem for usage with other event loops.", "tree": {"sha": "ca993dd071cfac96b127bac93536960fe5ed5e7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca993dd071cfac96b127bac93536960fe5ed5e7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b30377e14f60e6381dc1536bd53b5f9c7a3d7c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b30377e14f60e6381dc1536bd53b5f9c7a3d7c7", "html_url": "https://github.com/rust-lang/rust/commit/3b30377e14f60e6381dc1536bd53b5f9c7a3d7c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b30377e14f60e6381dc1536bd53b5f9c7a3d7c7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f5b2219cc893b30863f9136703166f306fcc684", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5b2219cc893b30863f9136703166f306fcc684", "html_url": "https://github.com/rust-lang/rust/commit/3f5b2219cc893b30863f9136703166f306fcc684"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "1a6529dab189962d8ddcd17e7063854ecec4e0b5", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b30377e14f60e6381dc1536bd53b5f9c7a3d7c7/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30377e14f60e6381dc1536bd53b5f9c7a3d7c7/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=3b30377e14f60e6381dc1536bd53b5f9c7a3d7c7", "patch": "@@ -85,7 +85,17 @@ pub struct Scheduler {\n     priv yield_check_count: uint,\n     /// A flag to tell the scheduler loop it needs to do some stealing\n     /// in order to introduce randomness as part of a yield\n-    priv steal_for_yield: bool\n+    priv steal_for_yield: bool,\n+\n+    // n.b. currently destructors of an object are run in top-to-bottom in order\n+    //      of field declaration. Due to its nature, the pausible idle callback\n+    //      must have some sort of handle to the event loop, so it needs to get\n+    //      destroyed before the event loop itself. For this reason, we destroy\n+    //      the event loop last to ensure that any unsafe references to it are\n+    //      destroyed before it's actually destroyed.\n+\n+    /// The event loop used to drive the scheduler and perform I/O\n+    event_loop: ~EventLoopObject,\n }\n \n /// An indication of how hard to work on a given operation, the difference"}, {"sha": "1d4c08f0bb5def4231d1cc1fd5cf4a40e6298cd3", "filename": "src/test/run-pass/field-destruction-order.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3b30377e14f60e6381dc1536bd53b5f9c7a3d7c7/src%2Ftest%2Frun-pass%2Ffield-destruction-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30377e14f60e6381dc1536bd53b5f9c7a3d7c7/src%2Ftest%2Frun-pass%2Ffield-destruction-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffield-destruction-order.rs?ref=3b30377e14f60e6381dc1536bd53b5f9c7a3d7c7", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// In theory, it doesn't matter what order destructors are run in for rust\n+// because we have explicit ownership of values meaning that there's no need to\n+// run one before another. With unsafe code, however, there may be a safe\n+// interface which relies on fields having their destructors run in a particular\n+// order. At the time of this writing, std::rt::sched::Scheduler is an example\n+// of a structure which contains unsafe handles to FFI-like types, and the\n+// destruction order of the fields matters in the sense that some handles need\n+// to get destroyed before others.\n+//\n+// In C++, destruction order happens bottom-to-top in order of field\n+// declarations, but we currently run them top-to-bottom. I don't think the\n+// order really matters that much as long as we define what it is.\n+\n+struct A;\n+struct B;\n+struct C {\n+    a: A,\n+    b: B,\n+}\n+\n+static mut hit: bool = false;\n+\n+impl Drop for A {\n+    fn drop(&mut self) {\n+        unsafe {\n+            assert!(!hit);\n+            hit = true;\n+        }\n+    }\n+}\n+\n+impl Drop for B {\n+    fn drop(&mut self) {\n+        unsafe {\n+            assert!(hit);\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    let _c = C { a: A, b: B };\n+}"}]}