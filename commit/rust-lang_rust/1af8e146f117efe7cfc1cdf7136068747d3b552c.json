{"sha": "1af8e146f117efe7cfc1cdf7136068747d3b552c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZjhlMTQ2ZjExN2VmZTdjZmMxY2RmNzEzNjA2ODc0N2QzYjU1MmM=", "commit": {"author": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-11-22T00:26:56Z"}, "committer": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-12-14T17:28:22Z"}, "message": "First attempt at detecting if structs can ever be unsized", "tree": {"sha": "bc8104c77d8e80f8b83dad0df357155d45532021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc8104c77d8e80f8b83dad0df357155d45532021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1af8e146f117efe7cfc1cdf7136068747d3b552c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1af8e146f117efe7cfc1cdf7136068747d3b552c", "html_url": "https://github.com/rust-lang/rust/commit/1af8e146f117efe7cfc1cdf7136068747d3b552c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1af8e146f117efe7cfc1cdf7136068747d3b552c/comments", "author": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c3540706af276f6770d8a2fabecde38c33ce98", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c3540706af276f6770d8a2fabecde38c33ce98", "html_url": "https://github.com/rust-lang/rust/commit/e7c3540706af276f6770d8a2fabecde38c33ce98"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "87f6d6fc6e1ae88123fe402678222a1a84dbd0bc", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1af8e146f117efe7cfc1cdf7136068747d3b552c/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af8e146f117efe7cfc1cdf7136068747d3b552c/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=1af8e146f117efe7cfc1cdf7136068747d3b552c", "patch": "@@ -566,7 +566,7 @@ impl<'a, 'gcx, 'tcx> Struct {\n \n         if optimize {\n             let start = if let StructKind::EnumVariant = kind {1} else {0};\n-            let end = if let StructKind::MaybeUnsizedUnivariant = kind { fields.len()-1 } else { 0 };\n+            let end = if let StructKind::MaybeUnsizedUnivariant = kind { fields.len()-1 } else { fields.len() };\n             if end > start {\n                 let optimizing  = &mut inverse_memory_index[start..end];\n                 if sort_ascending {\n@@ -1155,6 +1155,18 @@ impl<'a, 'gcx, 'tcx> Layout {\n                     // Struct, or union, or univariant enum equivalent to a struct.\n                     // (Typechecking will reject discriminant-sizing attrs.)\n \n+                    let kind = if def.is_enum() || def.variants[0].fields.len() == 0{\n+                        StructKind::AlwaysSizedUnivariant\n+                    } else {\n+                        use middle::region::ROOT_CODE_EXTENT;\n+                        let param_env = tcx.construct_parameter_environment(DUMMY_SP, def.did, ROOT_CODE_EXTENT);\n+                        let fields = &def.variants[0].fields;\n+                        let last_field = &fields[fields.len()-1];\n+                        let always_sized = last_field.unsubst_ty().is_sized(tcx, &param_env, DUMMY_SP);\n+                        if !always_sized { StructKind::MaybeUnsizedUnivariant }\n+                        else { StructKind::AlwaysSizedUnivariant }\n+                    };\n+\n                     let fields = def.variants[0].fields.iter().map(|field| {\n                         field.ty(tcx, substs).layout(infcx)\n                     }).collect::<Result<Vec<_>, _>>()?;\n@@ -1165,7 +1177,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n                         UntaggedUnion { variants: un }\n                     } else {\n                         let st = Struct::new(dl, &fields, hint,\n-                          StructKind::MaybeUnsizedUnivariant, ty)?;\n+                          kind, ty)?;\n                         let non_zero = Some(def.did) == tcx.lang_items.non_zero();\n                         Univariant { variant: st, non_zero: non_zero }\n                     };"}]}