{"sha": "37f55691f46741d783ba482d42f1cf5ef60593a9", "node_id": "C_kwDOAAsO6NoAKDM3ZjU1NjkxZjQ2NzQxZDc4M2JhNDgyZDQyZjFjZjVlZjYwNTkzYTk", "commit": {"author": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-02-23T13:38:12Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-04-04T15:34:50Z"}, "message": "Ported FunctionPointerSuggestion", "tree": {"sha": "8d72125b2dd94d9bf5f94c9165a1cc0f8b978acf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d72125b2dd94d9bf5f94c9165a1cc0f8b978acf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37f55691f46741d783ba482d42f1cf5ef60593a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37f55691f46741d783ba482d42f1cf5ef60593a9", "html_url": "https://github.com/rust-lang/rust/commit/37f55691f46741d783ba482d42f1cf5ef60593a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37f55691f46741d783ba482d42f1cf5ef60593a9/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3", "html_url": "https://github.com/rust-lang/rust/commit/be8e5ba157a4ae494f9b4219b3b848e44ea5e8d3"}], "stats": {"total": 96, "additions": 75, "deletions": 21}, "files": [{"sha": "9d5933d5ab5a7741f871e0df2028433addd6e6d3", "filename": "compiler/rustc_infer/messages.ftl", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37f55691f46741d783ba482d42f1cf5ef60593a9/compiler%2Frustc_infer%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/37f55691f46741d783ba482d42f1cf5ef60593a9/compiler%2Frustc_infer%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fmessages.ftl?ref=37f55691f46741d783ba482d42f1cf5ef60593a9", "patch": "@@ -348,3 +348,8 @@ infer_prlf_known_limitation = this is a known limitation that will be removed in\n \n infer_opaque_captures_lifetime = hidden type for `{$opaque_ty}` captures lifetime that does not appear in bounds\n     .label = opaque type defined here\n+\n+infer_fps_use_ref = consider using a reference\n+infer_fps_remove_ref = consider removing the reference\n+infer_fps_cast = consider casting to a fn pointer\n+infer_fps_items_are_distinct = fn items are distinct from fn pointers"}, {"sha": "8c4f44a5b803310331e2e081acf40788f73be8fc", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/37f55691f46741d783ba482d42f1cf5ef60593a9/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f55691f46741d783ba482d42f1cf5ef60593a9/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=37f55691f46741d783ba482d42f1cf5ef60593a9", "patch": "@@ -1157,3 +1157,63 @@ pub struct OpaqueCapturesLifetime<'tcx> {\n     pub opaque_ty_span: Span,\n     pub opaque_ty: Ty<'tcx>,\n }\n+\n+#[derive(Subdiagnostic)]\n+pub enum FunctionPointerSuggestion<'a> {\n+    #[suggestion(\n+        infer_fps_use_ref,\n+        code = \"&{fn_name}\",\n+        style = \"verbose\",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    UseRef {\n+        #[primary_span]\n+        span: Span,\n+        #[skip_arg]\n+        fn_name: String,\n+    },\n+    #[suggestion(\n+        infer_fps_remove_ref,\n+        code = \"{fn_name}\",\n+        style = \"verbose\",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    RemoveRef {\n+        #[primary_span]\n+        span: Span,\n+        #[skip_arg]\n+        fn_name: String,\n+    },\n+    #[suggestion(\n+        infer_fps_cast,\n+        code = \"&({fn_name} as {sig})\",\n+        style = \"verbose\",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    CastRef {\n+        #[primary_span]\n+        span: Span,\n+        #[skip_arg]\n+        fn_name: String,\n+        #[skip_arg]\n+        sig: Binder<'a, FnSig<'a>>,\n+    },\n+    #[suggestion(\n+        infer_fps_cast,\n+        code = \"{fn_name} as {sig}\",\n+        style = \"verbose\",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    Cast {\n+        #[primary_span]\n+        span: Span,\n+        #[skip_arg]\n+        fn_name: String,\n+        #[skip_arg]\n+        sig: Binder<'a, FnSig<'a>>,\n+    },\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[note(infer_fps_items_are_distinct)]\n+pub struct FnItemsAreDistinct;"}, {"sha": "e4b3cf6905d5ea47386f5d9f653edbb04c84be78", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/37f55691f46741d783ba482d42f1cf5ef60593a9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f55691f46741d783ba482d42f1cf5ef60593a9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=37f55691f46741d783ba482d42f1cf5ef60593a9", "patch": "@@ -13,7 +13,8 @@ use rustc_span::{sym, BytePos, Span};\n use rustc_target::abi::FieldIdx;\n \n use crate::errors::{\n-    ConsiderAddingAwait, SuggAddLetForLetChains, SuggestRemoveSemiOrReturnBinding,\n+    ConsiderAddingAwait, FnItemsAreDistinct, FunctionPointerSuggestion, SuggAddLetForLetChains,\n+    SuggestRemoveSemiOrReturnBinding,\n };\n \n use super::TypeErrCtxt;\n@@ -362,31 +363,19 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     return;\n                 }\n \n-                let (msg, sug) = match (expected.is_ref(), found.is_ref()) {\n-                    (true, false) => {\n-                        let msg = \"consider using a reference\";\n-                        let sug = format!(\"&{fn_name}\");\n-                        (msg, sug)\n-                    }\n-                    (false, true) => {\n-                        let msg = \"consider removing the reference\";\n-                        let sug = format!(\"{fn_name}\");\n-                        (msg, sug)\n-                    }\n+                let sugg = match (expected.is_ref(), found.is_ref()) {\n+                    (true, false) => FunctionPointerSuggestion::UseRef { span, fn_name },\n+                    (false, true) => FunctionPointerSuggestion::RemoveRef { span, fn_name },\n                     (true, true) => {\n-                        diag.note(\"fn items are distinct from fn pointers\");\n-                        let msg = \"consider casting to a fn pointer\";\n-                        let sug = format!(\"&({fn_name} as {sig})\");\n-                        (msg, sug)\n+                        diag.subdiagnostic(FnItemsAreDistinct);\n+                        FunctionPointerSuggestion::CastRef { span, fn_name, sig: *sig }\n                     }\n                     (false, false) => {\n-                        diag.note(\"fn items are distinct from fn pointers\");\n-                        let msg = \"consider casting to a fn pointer\";\n-                        let sug = format!(\"{fn_name} as {sig}\");\n-                        (msg, sug)\n+                        diag.subdiagnostic(FnItemsAreDistinct);\n+                        FunctionPointerSuggestion::Cast { span, fn_name, sig: *sig }\n                     }\n                 };\n-                diag.span_suggestion_verbose(span, msg, sug, Applicability::MaybeIncorrect);\n+                diag.subdiagnostic(sugg);\n             }\n             (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n                 let expected_sig ="}]}