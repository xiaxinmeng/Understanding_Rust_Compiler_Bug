{"sha": "2a4dd43e4442b418c27dee3de8b644cae9dcb3d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNGRkNDNlNDQ0MmI0MThjMjdkZWUzZGU4YjY0NGNhZTlkY2IzZDQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-14T19:32:38Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-22T16:06:53Z"}, "message": "rustc: de-@ lint.", "tree": {"sha": "05702a56f1d4296e5fb7d3d8f497dfce4a17ea10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05702a56f1d4296e5fb7d3d8f497dfce4a17ea10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a4dd43e4442b418c27dee3de8b644cae9dcb3d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a4dd43e4442b418c27dee3de8b644cae9dcb3d4", "html_url": "https://github.com/rust-lang/rust/commit/2a4dd43e4442b418c27dee3de8b644cae9dcb3d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a4dd43e4442b418c27dee3de8b644cae9dcb3d4/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "186ac7116c555ba90031eab71fa27dd71326bf6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/186ac7116c555ba90031eab71fa27dd71326bf6a", "html_url": "https://github.com/rust-lang/rust/commit/186ac7116c555ba90031eab71fa27dd71326bf6a"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "299ff10780325416843139ec7ac8508adff35d5c", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2a4dd43e4442b418c27dee3de8b644cae9dcb3d4/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4dd43e4442b418c27dee3de8b644cae9dcb3d4/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=2a4dd43e4442b418c27dee3de8b644cae9dcb3d4", "patch": "@@ -423,16 +423,12 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n   '-' to '_' in command-line flags\n  */\n pub fn get_lint_dict() -> LintDict {\n-    let mut map = HashMap::new();\n-    for &(k, v) in lint_table.iter() {\n-        map.insert(k, v);\n-    }\n-    return map;\n+    lint_table.iter().map(|&(k, v)| (k, v)).collect()\n }\n \n struct Context<'a> {\n     // All known lint modes (string versions)\n-    dict: @LintDict,\n+    dict: LintDict,\n     // Current levels of each lint warning\n     cur: SmallIntMap<(level, LintSource)>,\n     // context we're checking in (used to access fields like sess)\n@@ -1775,7 +1771,7 @@ pub fn check_crate(tcx: &ty::ctxt,\n                    exported_items: &privacy::ExportedItems,\n                    krate: &ast::Crate) {\n     let mut cx = Context {\n-        dict: @get_lint_dict(),\n+        dict: get_lint_dict(),\n         cur: SmallIntMap::new(),\n         tcx: tcx,\n         exported_items: exported_items,\n@@ -1788,7 +1784,9 @@ pub fn check_crate(tcx: &ty::ctxt,\n     // Install default lint levels, followed by the command line levels, and\n     // then actually visit the whole crate.\n     for (_, spec) in cx.dict.iter() {\n-        cx.set_level(spec.lint, spec.default, Default);\n+        if spec.default != allow {\n+            cx.cur.insert(spec.lint as uint, (spec.default, Default));\n+        }\n     }\n     for &(lint, level) in tcx.sess.opts.lint_opts.iter() {\n         cx.set_level(lint, level, CommandLine);"}]}