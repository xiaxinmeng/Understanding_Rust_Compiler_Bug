{"sha": "8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNzUwMGY5YjY4ZDU2YjgzMTNhOGQzYzEwM2ZkMzFiNjM4ZWM4ZDI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-09-13T19:33:07Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-09-24T09:46:00Z"}, "message": "add lint levels to VisibilityScope", "tree": {"sha": "31c91902690085030bc20f6867c261cc9ef20437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31c91902690085030bc20f6867c261cc9ef20437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "html_url": "https://github.com/rust-lang/rust/commit/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acb73dbe8b311eb2ffa640ac3e01795d84159df4", "url": "https://api.github.com/repos/rust-lang/rust/commits/acb73dbe8b311eb2ffa640ac3e01795d84159df4", "html_url": "https://github.com/rust-lang/rust/commit/acb73dbe8b311eb2ffa640ac3e01795d84159df4"}], "stats": {"total": 322, "additions": 269, "deletions": 53}, "files": [{"sha": "068830d688c3e229d9e08d40db2e465314c4280f", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -28,6 +28,7 @@ impl_stable_hash_for!(struct mir::LocalDecl<'tcx> {\n     name,\n     source_info,\n     internal,\n+    lexical_scope,\n     is_user_variable\n });\n impl_stable_hash_for!(struct mir::UpvarDecl { debug_name, by_ref });\n@@ -75,6 +76,22 @@ for mir::Terminator<'gcx> {\n     }\n }\n \n+impl<'gcx, T> HashStable<StableHashingContext<'gcx>> for mir::ClearOnDecode<T>\n+    where T: HashStable<StableHashingContext<'gcx>>\n+{\n+    #[inline]\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'gcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n+        match *self {\n+            mir::ClearOnDecode::Clear => {}\n+            mir::ClearOnDecode::Set(ref value) => {\n+                value.hash_stable(hcx, hasher);\n+            }\n+        }\n+    }\n+}\n \n impl<'gcx> HashStable<StableHashingContext<'gcx>> for mir::Local {\n     #[inline]\n@@ -347,6 +364,7 @@ for mir::ProjectionElem<'gcx, V, T>\n }\n \n impl_stable_hash_for!(struct mir::VisibilityScopeData { span, parent_scope });\n+impl_stable_hash_for!(struct mir::VisibilityScopeInfo { lint_root });\n \n impl<'gcx> HashStable<StableHashingContext<'gcx>> for mir::Operand<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "4bc37747f2a76b1dc01c4c3ad23fedf0727b0f04", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -384,6 +384,11 @@ impl LintLevelMap {\n             self.sets.get_lint_level(lint, *idx, None)\n         })\n     }\n+\n+    /// Returns if this `id` has lint level information.\n+    pub fn lint_level_set(&self, id: HirId) -> Option<u32> {\n+        self.id_to_set.get(&id).cloned()\n+    }\n }\n \n impl<'gcx> HashStable<StableHashingContext<'gcx>> for LintLevelMap {"}, {"sha": "09da1d1f820bcdb3ab11887c57d42d873a10d32a", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -18,6 +18,7 @@ use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_data_structures::control_flow_graph::dominators::{Dominators, dominators};\n use rustc_data_structures::control_flow_graph::{GraphPredecessors, GraphSuccessors};\n use rustc_data_structures::control_flow_graph::ControlFlowGraph;\n+use rustc_serialize as serialize;\n use hir::def::CtorKind;\n use hir::def_id::DefId;\n use ty::subst::{Subst, Substs};\n@@ -33,7 +34,7 @@ use std::fmt::{self, Debug, Formatter, Write};\n use std::{iter, u32};\n use std::ops::{Index, IndexMut};\n use std::vec::IntoIter;\n-use syntax::ast::Name;\n+use syntax::ast::{self, Name};\n use syntax_pos::Span;\n \n mod cache;\n@@ -96,6 +97,10 @@ pub struct Mir<'tcx> {\n     /// and used (eventually) for debuginfo. Indexed by a `VisibilityScope`.\n     pub visibility_scopes: IndexVec<VisibilityScope, VisibilityScopeData>,\n \n+    /// Crate-local information for each visibility scope, that can't (and\n+    /// needn't) be tracked across crates.\n+    pub visibility_scope_info: ClearOnDecode<IndexVec<VisibilityScope, VisibilityScopeInfo>>,\n+\n     /// Rvalues promoted from this function, such as borrows of constants.\n     /// Each of them is the Mir of a constant with the fn's type parameters\n     /// in scope, but a separate set of locals.\n@@ -151,6 +156,8 @@ pub const START_BLOCK: BasicBlock = BasicBlock(0);\n impl<'tcx> Mir<'tcx> {\n     pub fn new(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n                visibility_scopes: IndexVec<VisibilityScope, VisibilityScopeData>,\n+               visibility_scope_info: ClearOnDecode<IndexVec<VisibilityScope,\n+                                                             VisibilityScopeInfo>>,\n                promoted: IndexVec<Promoted, Mir<'tcx>>,\n                return_ty: Ty<'tcx>,\n                yield_ty: Option<Ty<'tcx>>,\n@@ -167,6 +174,7 @@ impl<'tcx> Mir<'tcx> {\n         Mir {\n             basic_blocks,\n             visibility_scopes,\n+            visibility_scope_info,\n             promoted,\n             return_ty,\n             yield_ty,\n@@ -278,9 +286,16 @@ impl<'tcx> Mir<'tcx> {\n     }\n }\n \n+#[derive(Clone, Debug)]\n+pub struct VisibilityScopeInfo {\n+    /// A NodeId with lint levels equivalent to this scope's lint levels.\n+    pub lint_root: ast::NodeId,\n+}\n+\n impl_stable_hash_for!(struct Mir<'tcx> {\n     basic_blocks,\n     visibility_scopes,\n+    visibility_scope_info,\n     promoted,\n     return_ty,\n     yield_ty,\n@@ -310,6 +325,24 @@ impl<'tcx> IndexMut<BasicBlock> for Mir<'tcx> {\n     }\n }\n \n+#[derive(Clone, Debug)]\n+pub enum ClearOnDecode<T> {\n+    Clear,\n+    Set(T)\n+}\n+\n+impl<T> serialize::Encodable for ClearOnDecode<T> {\n+    fn encode<S: serialize::Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        serialize::Encodable::encode(&(), s)\n+    }\n+}\n+\n+impl<T> serialize::Decodable for ClearOnDecode<T> {\n+    fn decode<D: serialize::Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        serialize::Decodable::decode(d).map(|()| ClearOnDecode::Clear)\n+    }\n+}\n+\n /// Grouped information about the source code origin of a MIR entity.\n /// Intended to be inspected by diagnostics and debuginfo.\n /// Most passes can work with it as a whole, within a single function.\n@@ -438,6 +471,12 @@ pub struct LocalDecl<'tcx> {\n \n     /// Source info of the local.\n     pub source_info: SourceInfo,\n+\n+    /// The *lexical* visibility scope the local is defined\n+    /// in. If the local was defined in a let-statement, this\n+    /// is *within* the let-statement, rather than outside\n+    /// of iit.\n+    pub lexical_scope: VisibilityScope,\n }\n \n impl<'tcx> LocalDecl<'tcx> {\n@@ -452,6 +491,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                 span,\n                 scope: ARGUMENT_VISIBILITY_SCOPE\n             },\n+            lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n             internal: false,\n             is_user_variable: false\n         }\n@@ -468,6 +508,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                 span,\n                 scope: ARGUMENT_VISIBILITY_SCOPE\n             },\n+            lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n             internal: true,\n             is_user_variable: false\n         }\n@@ -485,6 +526,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                 span,\n                 scope: ARGUMENT_VISIBILITY_SCOPE\n             },\n+            lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n             internal: false,\n             name: None,     // FIXME maybe we do want some name here?\n             is_user_variable: false\n@@ -1607,6 +1649,7 @@ impl<'tcx> TypeFoldable<'tcx> for Mir<'tcx> {\n         Mir {\n             basic_blocks: self.basic_blocks.fold_with(folder),\n             visibility_scopes: self.visibility_scopes.clone(),\n+            visibility_scope_info: self.visibility_scope_info.clone(),\n             promoted: self.promoted.fold_with(folder),\n             return_ty: self.return_ty.fold_with(folder),\n             yield_ty: self.yield_ty.fold_with(folder),"}, {"sha": "63652980f9b4b68372e2a179978c10eea58634f7", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -690,11 +690,13 @@ macro_rules! make_mir_visitor {\n                     name: _,\n                     ref $($mutability)* source_info,\n                     internal: _,\n+                    ref $($mutability)* lexical_scope,\n                     is_user_variable: _,\n                 } = *local_decl;\n \n                 self.visit_ty(ty, Lookup::Src(*source_info));\n                 self.visit_source_info(source_info);\n+                self.visit_visibility_scope(lexical_scope);\n             }\n \n             fn super_visibility_scope(&mut self,"}, {"sha": "5116a3087d281969cdcefe8eee16ecc0cb71d32c", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -1009,15 +1009,16 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     // FIXME: ariel points SimplifyBranches should run after\n     // mir-borrowck; otherwise code within `if false { ... }` would\n     // not be checked.\n-    passes.push_pass(MIR_VALIDATED,\n-                     mir::transform::simplify_branches::SimplifyBranches::new(\"initial\"));\n     passes.push_pass(MIR_VALIDATED, mir::transform::simplify::SimplifyCfg::new(\"qualify-consts\"));\n     passes.push_pass(MIR_VALIDATED, mir::transform::nll::NLL);\n \n     // borrowck runs between MIR_VALIDATED and MIR_OPTIMIZED.\n \n-    // These next passes must be executed together\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::no_landing_pads::NoLandingPads);\n+    passes.push_pass(MIR_OPTIMIZED,\n+                     mir::transform::simplify_branches::SimplifyBranches::new(\"initial\"));\n+\n+    // These next passes must be executed together\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::add_call_guards::CriticalCallEdges);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::elaborate_drops::ElaborateDrops);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::no_landing_pads::NoLandingPads);"}, {"sha": "db04596dd589f8fca6d05489e147279bf95c0502", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -24,7 +24,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let Block { region_scope, opt_destruction_scope, span, stmts, expr, targeted_by_break } =\n             self.hir.mirror(ast_block);\n         self.in_opt_scope(opt_destruction_scope.map(|de|(de, source_info)), block, move |this| {\n-            this.in_scope((region_scope, source_info), block, move |this| {\n+            this.in_scope((region_scope, source_info), LintLevel::Inherited, block, move |this| {\n                 if targeted_by_break {\n                     // This is a `break`-able block (currently only `catch { ... }`)\n                     let exit_block = this.cfg.start_new_block();\n@@ -76,27 +76,35 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 StmtKind::Expr { scope, expr } => {\n                     unpack!(block = this.in_opt_scope(\n                         opt_destruction_scope.map(|de|(de, source_info)), block, |this| {\n-                            this.in_scope((scope, source_info), block, |this| {\n+                            let si = (scope, source_info);\n+                            this.in_scope(si, LintLevel::Inherited, block, |this| {\n                                 let expr = this.hir.mirror(expr);\n                                 this.stmt_expr(block, expr)\n                             })\n                         }));\n                 }\n-                StmtKind::Let { remainder_scope, init_scope, pattern, initializer } => {\n+                StmtKind::Let {\n+                    remainder_scope,\n+                    init_scope,\n+                    pattern,\n+                    initializer,\n+                    lint_level\n+                } => {\n                     // Enter the remainder scope, i.e. the bindings' destruction scope.\n                     this.push_scope((remainder_scope, source_info));\n                     let_scope_stack.push(remainder_scope);\n \n                     // Declare the bindings, which may create a visibility scope.\n                     let remainder_span = remainder_scope.span(this.hir.tcx(),\n                                                               &this.hir.region_scope_tree);\n-                    let scope = this.declare_bindings(None, remainder_span, &pattern);\n+                    let scope = this.declare_bindings(None, remainder_span, lint_level, &pattern);\n \n                     // Evaluate the initializer, if present.\n                     if let Some(init) = initializer {\n                         unpack!(block = this.in_opt_scope(\n                             opt_destruction_scope.map(|de|(de, source_info)), block, move |this| {\n-                                this.in_scope((init_scope, source_info), block, move |this| {\n+                                let scope = (init_scope, source_info);\n+                                this.in_scope(scope, lint_level, block, move |this| {\n                                     // FIXME #30046                             ^~~~\n                                     this.expr_into_pattern(block, pattern, init)\n                                 })"}, {"sha": "a57f1b95494855ca36d814b7ae7b2b3e1caec134", "filename": "src/librustc_mir/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -29,7 +29,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let Expr { ty, temp_lifetime: _, span, kind }\n             = expr;\n         match kind {\n-            ExprKind::Scope { region_scope: _, value } =>\n+            ExprKind::Scope { region_scope: _, lint_level: _, value } =>\n                 this.as_constant(value),\n             ExprKind::Literal { literal } =>\n                 Constant { span: span, ty: ty, literal: literal },"}, {"sha": "69d0dd992281ed86e3aec2ba18db9ef71c1a5de1", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -39,8 +39,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let expr_span = expr.span;\n         let source_info = this.source_info(expr_span);\n         match expr.kind {\n-            ExprKind::Scope { region_scope, value } => {\n-                this.in_scope((region_scope, source_info), block, |this| {\n+            ExprKind::Scope { region_scope, lint_level, value } => {\n+                this.in_scope((region_scope, source_info), lint_level, block, |this| {\n                     this.as_lvalue(block, value)\n                 })\n             }"}, {"sha": "ea6e4342098bc6061ab78cd52c219b5af14ef3f7", "filename": "src/librustc_mir/build/expr/as_operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -55,10 +55,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         debug!(\"expr_as_operand(block={:?}, expr={:?})\", block, expr);\n         let this = self;\n \n-        if let ExprKind::Scope { region_scope, value } = expr.kind {\n+        if let ExprKind::Scope { region_scope, lint_level, value } = expr.kind {\n             let source_info = this.source_info(expr.span);\n             let region_scope = (region_scope, source_info);\n-            return this.in_scope(region_scope, block, |this| {\n+            return this.in_scope(region_scope, lint_level, block, |this| {\n                 this.as_operand(block, scope, value)\n             });\n         }"}, {"sha": "d17f00b489c318bb4a6bd3c99510983e374d0217", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -58,9 +58,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = this.source_info(expr_span);\n \n         match expr.kind {\n-            ExprKind::Scope { region_scope, value } => {\n+            ExprKind::Scope { region_scope, lint_level, value } => {\n                 let region_scope = (region_scope, source_info);\n-                this.in_scope(region_scope, block, |this| this.as_rvalue(block, scope, value))\n+                this.in_scope(region_scope, lint_level, block,\n+                              |this| this.as_rvalue(block, scope, value))\n             }\n             ExprKind::Repeat { value, count } => {\n                 let value_operand = unpack!(block = this.as_operand(block, scope, value));"}, {"sha": "ba422a8183160fd3d5eacd3e8526c5354232d24b", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -41,8 +41,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         let expr_span = expr.span;\n         let source_info = this.source_info(expr_span);\n-        if let ExprKind::Scope { region_scope, value } = expr.kind {\n-            return this.in_scope((region_scope, source_info), block, |this| {\n+        if let ExprKind::Scope { region_scope, lint_level, value } = expr.kind {\n+            return this.in_scope((region_scope, source_info), lint_level, block, |this| {\n                 this.as_temp(block, temp_lifetime, value)\n             });\n         }"}, {"sha": "65e16657a031a5f8f7c34a6a03841de7cfa2da4f", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -38,9 +38,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = this.source_info(expr_span);\n \n         match expr.kind {\n-            ExprKind::Scope { region_scope, value } => {\n+            ExprKind::Scope { region_scope, lint_level, value } => {\n                 let region_scope = (region_scope, source_info);\n-                this.in_scope(region_scope, block, |this| this.into(destination, block, value))\n+                this.in_scope(region_scope, lint_level, block,\n+                              |this| this.into(destination, block, value))\n             }\n             ExprKind::Block { body: ast_block } => {\n                 this.ast_block(destination, block, ast_block, source_info)"}, {"sha": "3cfb0ff4010da753d3ad7fc32828eb258437ef2a", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -22,9 +22,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // Handle a number of expressions that don't need a destination at all. This\n         // avoids needing a mountain of temporary `()` variables.\n         match expr.kind {\n-            ExprKind::Scope { region_scope, value } => {\n+            ExprKind::Scope { region_scope, lint_level, value } => {\n                 let value = this.hir.mirror(value);\n-                this.in_scope((region_scope, source_info), block, |this| {\n+                this.in_scope((region_scope, source_info), lint_level, block, |this| {\n                     this.stmt_expr(block, value)\n                 })\n             }"}, {"sha": "b856e6345dc6bfc456f514bc440270d120f5ade0", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -46,8 +46,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         // Get the arm bodies and their scopes, while declaring bindings.\n         let arm_bodies: Vec<_> = arms.iter().map(|arm| {\n+            // BUG: use arm lint level\n             let body = self.hir.mirror(arm.body.clone());\n-            let scope = self.declare_bindings(None, body.span, &arm.patterns[0]);\n+            let scope = self.declare_bindings(None, body.span,\n+                                              LintLevel::Inherited,\n+                                              &arm.patterns[0]);\n             (body, scope.unwrap_or(self.visibility_scope))\n         }).collect();\n \n@@ -171,18 +174,31 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub fn declare_bindings(&mut self,\n                             mut var_scope: Option<VisibilityScope>,\n                             scope_span: Span,\n+                            lint_level: LintLevel,\n                             pattern: &Pattern<'tcx>)\n                             -> Option<VisibilityScope> {\n+        assert!(!(var_scope.is_some() && lint_level.is_explicit()),\n+               \"can't have both a var and a lint scope at the same time\");\n         self.visit_bindings(pattern, &mut |this, mutability, name, var, span, ty| {\n             if var_scope.is_none() {\n-                var_scope = Some(this.new_visibility_scope(scope_span));\n+                var_scope = Some(this.new_visibility_scope(scope_span,\n+                                                           LintLevel::Inherited));\n+                // If we have lints, create a new visibility scope\n+                // that marks the lints for the locals.\n+                if lint_level.is_explicit() {\n+                    this.new_visibility_scope(scope_span, lint_level);\n+                }\n             }\n             let source_info = SourceInfo {\n                 span,\n                 scope: var_scope.unwrap()\n             };\n             this.declare_binding(source_info, mutability, name, var, ty);\n         });\n+        // Pop any scope we created for the locals.\n+        if let Some(var_scope) = var_scope {\n+            self.visibility_scope = var_scope;\n+        }\n         var_scope\n     }\n \n@@ -712,6 +728,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ty: var_ty.clone(),\n             name: Some(name),\n             source_info,\n+            lexical_scope: self.visibility_scope,\n             internal: false,\n             is_user_variable: true,\n         });"}, {"sha": "9c2c5bbcdb8ba403893b3a57d1858b1106e759ce", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -11,6 +11,7 @@\n \n use build;\n use hair::cx::Cx;\n+use hair::LintLevel;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::region;\n@@ -277,6 +278,7 @@ struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// the vector of all scopes that we have created thus far;\n     /// we track this for debuginfo later\n     visibility_scopes: IndexVec<VisibilityScope, VisibilityScopeData>,\n+    visibility_scope_info: IndexVec<VisibilityScope, VisibilityScopeInfo>,\n     visibility_scope: VisibilityScope,\n \n     /// Maps node ids of variable bindings to the `Local`s created for them.\n@@ -378,8 +380,10 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     let arg_scope = region::Scope::Arguments(body.value.hir_id.local_id);\n     let mut block = START_BLOCK;\n     let source_info = builder.source_info(span);\n-    unpack!(block = builder.in_scope((call_site_scope, source_info), block, |builder| {\n-        unpack!(block = builder.in_scope((arg_scope, source_info), block, |builder| {\n+    let call_site_s = (call_site_scope, source_info);\n+    unpack!(block = builder.in_scope(call_site_s, LintLevel::Inherited, block, |builder| {\n+        let arg_scope_s = (arg_scope, source_info);\n+        unpack!(block = builder.in_scope(arg_scope_s, LintLevel::Inherited, block, |builder| {\n             builder.args_and_body(block, &arguments, arg_scope, &body.value)\n         }));\n         // Attribute epilogue to function's closing brace\n@@ -456,9 +460,10 @@ fn construct_const<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n }\n \n fn construct_error<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n-                                       body_id: hir::BodyId)\n-                                       -> Mir<'tcx> {\n-    let span = hir.tcx().hir.span(hir.tcx().hir.body_owner(body_id));\n+                                   body_id: hir::BodyId)\n+                                   -> Mir<'tcx> {\n+    let owner_id = hir.tcx().hir.body_owner(body_id);\n+    let span = hir.tcx().hir.span(owner_id);\n     let ty = hir.tcx().types.err;\n     let mut builder = Builder::new(hir, span, 0, ty);\n     let source_info = builder.source_info(span);\n@@ -472,6 +477,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n            arg_count: usize,\n            return_ty: Ty<'tcx>)\n            -> Builder<'a, 'gcx, 'tcx> {\n+        let lint_level = LintLevel::Explicit(hir.root_lint_level);\n         let mut builder = Builder {\n             hir,\n             cfg: CFG { basic_blocks: IndexVec::new() },\n@@ -480,6 +486,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             scopes: vec![],\n             visibility_scopes: IndexVec::new(),\n             visibility_scope: ARGUMENT_VISIBILITY_SCOPE,\n+            visibility_scope_info: IndexVec::new(),\n             breakable_scopes: vec![],\n             local_decls: IndexVec::from_elem_n(LocalDecl::new_return_pointer(return_ty,\n                                                                              span), 1),\n@@ -490,7 +497,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         };\n \n         assert_eq!(builder.cfg.start_new_block(), START_BLOCK);\n-        assert_eq!(builder.new_visibility_scope(span), ARGUMENT_VISIBILITY_SCOPE);\n+        assert_eq!(\n+            builder.new_visibility_scope(span, lint_level),\n+            ARGUMENT_VISIBILITY_SCOPE);\n         builder.visibility_scopes[ARGUMENT_VISIBILITY_SCOPE].parent_scope = None;\n \n         builder\n@@ -509,6 +518,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         Mir::new(self.cfg.basic_blocks,\n                  self.visibility_scopes,\n+                 ClearOnDecode::Set(self.visibility_scope_info),\n                  IndexVec::new(),\n                  return_ty,\n                  yield_ty,\n@@ -543,6 +553,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     scope: ARGUMENT_VISIBILITY_SCOPE,\n                     span: pattern.map_or(self.fn_span, |pat| pat.span)\n                 },\n+                lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n                 name,\n                 internal: false,\n                 is_user_variable: false,\n@@ -557,7 +568,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n             if let Some(pattern) = pattern {\n                 let pattern = self.hir.pattern_from_hir(pattern);\n-                scope = self.declare_bindings(scope, ast_body.span, &pattern);\n+                scope = self.declare_bindings(scope, ast_body.span,\n+                                              LintLevel::Inherited, &pattern);\n                 unpack!(block = self.lvalue_into_pattern(block, pattern, &lvalue));\n             }\n "}, {"sha": "62613c7168a307307d9fcd2b17ccda20636f7aa4", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -88,8 +88,10 @@ should go to.\n */\n \n use build::{BlockAnd, BlockAndExtension, Builder, CFG};\n+use hair::LintLevel;\n use rustc::middle::region;\n use rustc::ty::{Ty, TyCtxt};\n+use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n use syntax_pos::{Span};\n@@ -304,15 +306,37 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// to build its contents, popping the scope afterwards.\n     pub fn in_scope<F, R>(&mut self,\n                           region_scope: (region::Scope, SourceInfo),\n+                          lint_level: LintLevel,\n                           mut block: BasicBlock,\n                           f: F)\n                           -> BlockAnd<R>\n         where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> BlockAnd<R>\n     {\n         debug!(\"in_scope(region_scope={:?}, block={:?})\", region_scope, block);\n+        let visibility_scope = self.visibility_scope;\n+        let tcx = self.hir.tcx();\n+        if let LintLevel::Explicit(node_id) = lint_level {\n+            let same_lint_scopes = tcx.dep_graph.with_ignore(|| {\n+                let sets = tcx.lint_levels(LOCAL_CRATE);\n+                let parent_hir_id =\n+                    tcx.hir.definitions().node_to_hir_id(\n+                        self.visibility_scope_info[visibility_scope].lint_root\n+                            );\n+                let current_hir_id =\n+                    tcx.hir.definitions().node_to_hir_id(node_id);\n+                sets.lint_level_set(parent_hir_id) ==\n+                    sets.lint_level_set(current_hir_id)\n+            });\n+\n+            if !same_lint_scopes {\n+                self.visibility_scope =\n+                    self.new_visibility_scope(region_scope.1.span, lint_level);\n+            }\n+        }\n         self.push_scope(region_scope);\n         let rv = unpack!(block = f(self));\n         unpack!(block = self.pop_scope(region_scope, block));\n+        self.visibility_scope = visibility_scope;\n         debug!(\"in_scope: exiting region_scope={:?} block={:?}\", region_scope, block);\n         block.and(rv)\n     }\n@@ -474,13 +498,21 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     }\n \n     /// Creates a new visibility scope, nested in the current one.\n-    pub fn new_visibility_scope(&mut self, span: Span) -> VisibilityScope {\n+    pub fn new_visibility_scope(&mut self,\n+                                span: Span,\n+                                lint_level: LintLevel) -> VisibilityScope {\n+        debug!(\"new_visibility_scope({:?}, {:?})\", span, lint_level);\n         let parent = self.visibility_scope;\n-        let scope = VisibilityScope::new(self.visibility_scopes.len());\n-        self.visibility_scopes.push(VisibilityScopeData {\n+        let info = if let LintLevel::Explicit(lint_level) = lint_level {\n+            VisibilityScopeInfo { lint_root: lint_level }\n+        } else {\n+            self.visibility_scope_info[parent].clone()\n+        };\n+        let scope = self.visibility_scopes.push(VisibilityScopeData {\n             span,\n             parent_scope: Some(parent),\n         });\n+        self.visibility_scope_info.push(info);\n         scope\n     }\n "}, {"sha": "1c1fc2dcafa526ac9df10cd5864909ea958d558b", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -71,6 +71,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                 init_scope: region::Scope::Node(hir_id.local_id),\n                                 pattern,\n                                 initializer: local.init.to_ref(),\n+                                lint_level: cx.lint_level_of(local.id),\n                             },\n                             opt_destruction_scope: opt_dxn_ext,\n                         })));"}, {"sha": "f5a53e2aa8eed92a11cff1df9e2298533160f4fa", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -48,22 +48,24 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n             kind: ExprKind::Scope {\n                 region_scope: expr_scope,\n                 value: expr.to_ref(),\n+                lint_level: cx.lint_level_of(self.id),\n             },\n         };\n \n         // Finally, create a destruction scope, if any.\n         if let Some(region_scope) =\n-                cx.region_scope_tree.opt_destruction_scope(self.hir_id.local_id) {\n-            expr = Expr {\n-                temp_lifetime,\n-                ty: expr.ty,\n-                span: self.span,\n-                kind: ExprKind::Scope {\n-                    region_scope,\n-                    value: expr.to_ref(),\n-                },\n-            };\n-        }\n+            cx.region_scope_tree.opt_destruction_scope(self.hir_id.local_id) {\n+                expr = Expr {\n+                    temp_lifetime,\n+                    ty: expr.ty,\n+                    span: self.span,\n+                    kind: ExprKind::Scope {\n+                        region_scope,\n+                        value: expr.to_ref(),\n+                        lint_level: LintLevel::Inherited,\n+                    },\n+                };\n+            }\n \n         // OK, all done!\n         expr\n@@ -619,6 +621,8 @@ fn convert_arm<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>, arm: &'tcx hir::Arm)\n         patterns: arm.pats.iter().map(|p| cx.pattern_from_hir(p)).collect(),\n         guard: arm.guard.to_ref(),\n         body: arm.body.to_ref(),\n+        // BUG: fix this\n+        lint_level: LintLevel::Inherited,\n     }\n }\n "}, {"sha": "4434df0ac3e9bfaa36483d555eea4f78a599439f", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -20,13 +20,14 @@ use rustc::mir::transform::MirSource;\n use rustc::middle::const_val::{ConstEvalErr, ConstVal};\n use rustc_const_eval::ConstContext;\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::middle::region;\n use rustc::infer::InferCtxt;\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n+use syntax::ast;\n use syntax::symbol::Symbol;\n use rustc::hir;\n use rustc_const_math::{ConstInt, ConstUsize};\n@@ -37,6 +38,7 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n \n+    pub root_lint_level: ast::NodeId,\n     pub param_env: ty::ParamEnv<'gcx>,\n \n     /// Identity `Substs` for use with const-evaluation.\n@@ -57,7 +59,8 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n-    pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>, src: MirSource) -> Cx<'a, 'gcx, 'tcx> {\n+    pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+               src: MirSource) -> Cx<'a, 'gcx, 'tcx> {\n         let constness = match src {\n             MirSource::Const(_) |\n             MirSource::Static(..) => hir::Constness::Const,\n@@ -87,9 +90,11 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         // Constants and const fn's always need overflow checks.\n         check_overflow |= constness == hir::Constness::Const;\n \n+        let lint_level = lint_level_for_hir_id(tcx, src_id);\n         Cx {\n             tcx,\n             infcx,\n+            root_lint_level: lint_level,\n             param_env: tcx.param_env(src_def_id),\n             identity_substs: Substs::identity_for_item(tcx.global_tcx(), src_def_id),\n             region_scope_tree: tcx.region_scope_tree(src_def_id),\n@@ -99,6 +104,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n             check_overflow,\n         }\n     }\n+\n }\n \n impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n@@ -229,6 +235,19 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         ty.needs_drop(self.tcx.global_tcx(), param_env)\n     }\n \n+    fn lint_level_of(&self, node_id: ast::NodeId) -> LintLevel {\n+        let hir_id = self.tcx.hir.definitions().node_to_hir_id(node_id);\n+        let has_lint_level = self.tcx.dep_graph.with_ignore(|| {\n+            self.tcx.lint_levels(LOCAL_CRATE).lint_level_set(hir_id).is_some()\n+        });\n+\n+        if has_lint_level {\n+            LintLevel::Explicit(node_id)\n+        } else {\n+            LintLevel::Inherited\n+        }\n+    }\n+\n     pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {\n         self.tcx\n     }\n@@ -242,6 +261,31 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     }\n }\n \n+fn lint_level_for_hir_id(tcx: TyCtxt, mut id: ast::NodeId) -> ast::NodeId {\n+    // Right now we insert a `with_ignore` node in the dep graph here to\n+    // ignore the fact that `lint_levels` below depends on the entire crate.\n+    // For now this'll prevent false positives of recompiling too much when\n+    // anything changes.\n+    //\n+    // Once red/green incremental compilation lands we should be able to\n+    // remove this because while the crate changes often the lint level map\n+    // will change rarely.\n+    tcx.dep_graph.with_ignore(|| {\n+        let sets = tcx.lint_levels(LOCAL_CRATE);\n+        loop {\n+            let hir_id = tcx.hir.definitions().node_to_hir_id(id);\n+            if sets.lint_level_set(hir_id).is_some() {\n+                return id\n+            }\n+            let next = tcx.hir.get_parent_node(id);\n+            if next == id {\n+                bug!(\"lint traversal reached the root of the crate\");\n+            }\n+            id = next;\n+        }\n+    })\n+}\n+\n mod block;\n mod expr;\n mod to_ref;"}, {"sha": "0c8dba5159f4b96c00a7d9fef2fc34d061a6d0e0", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -29,6 +29,21 @@ pub mod cx;\n \n pub use rustc_const_eval::pattern::{BindingMode, Pattern, PatternKind, FieldPattern};\n \n+#[derive(Copy, Clone, Debug)]\n+pub enum LintLevel {\n+    Inherited,\n+    Explicit(ast::NodeId)\n+}\n+\n+impl LintLevel {\n+    pub fn is_explicit(self) -> bool {\n+        match self {\n+            LintLevel::Inherited => false,\n+            LintLevel::Explicit(_) => true\n+        }\n+    }\n+}\n+\n #[derive(Clone, Debug)]\n pub struct Block<'tcx> {\n     pub targeted_by_break: bool,\n@@ -73,7 +88,10 @@ pub enum StmtKind<'tcx> {\n         pattern: Pattern<'tcx>,\n \n         /// let pat = <INIT> ...\n-        initializer: Option<ExprRef<'tcx>>\n+        initializer: Option<ExprRef<'tcx>>,\n+\n+        /// the lint level for this let-statement\n+        lint_level: LintLevel,\n     },\n }\n \n@@ -111,6 +129,7 @@ pub struct Expr<'tcx> {\n pub enum ExprKind<'tcx> {\n     Scope {\n         region_scope: region::Scope,\n+        lint_level: LintLevel,\n         value: ExprRef<'tcx>,\n     },\n     Box {\n@@ -275,6 +294,7 @@ pub struct Arm<'tcx> {\n     pub patterns: Vec<Pattern<'tcx>>,\n     pub guard: Option<ExprRef<'tcx>>,\n     pub body: ExprRef<'tcx>,\n+    pub lint_level: LintLevel,\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "a3a986918a4fd6395d06b2849d414335de364002", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -140,6 +140,7 @@ fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n     LocalDecl {\n         mutability, ty, name: None,\n         source_info: SourceInfo { scope: ARGUMENT_VISIBILITY_SCOPE, span },\n+        lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n         internal: false,\n         is_user_variable: false\n     }\n@@ -195,6 +196,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         IndexVec::from_elem_n(\n             VisibilityScopeData { span: span, parent_scope: None }, 1\n         ),\n+        ClearOnDecode::Clear,\n         IndexVec::new(),\n         sig.output(),\n         None,\n@@ -342,6 +344,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             IndexVec::from_elem_n(\n                 VisibilityScopeData { span: self.span, parent_scope: None }, 1\n             ),\n+            ClearOnDecode::Clear,\n             IndexVec::new(),\n             self.sig.output(),\n             None,\n@@ -804,6 +807,7 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         IndexVec::from_elem_n(\n             VisibilityScopeData { span: span, parent_scope: None }, 1\n         ),\n+        ClearOnDecode::Clear,\n         IndexVec::new(),\n         sig.output(),\n         None,\n@@ -876,6 +880,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n         IndexVec::from_elem_n(\n             VisibilityScopeData { span: span, parent_scope: None }, 1\n         ),\n+        ClearOnDecode::Clear,\n         IndexVec::new(),\n         sig.output(),\n         None,"}, {"sha": "729fe46ef37ecc7704db57216b2c7d2d3e08e269", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -301,6 +301,7 @@ fn replace_result_variable<'tcx>(ret_ty: Ty<'tcx>,\n         ty: ret_ty,\n         name: None,\n         source_info: source_info(mir),\n+        lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n         internal: false,\n         is_user_variable: false,\n     };\n@@ -559,6 +560,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         ty: tcx.mk_nil(),\n         name: None,\n         source_info,\n+        lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n         internal: false,\n         is_user_variable: false,\n     };\n@@ -574,6 +576,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         }),\n         name: None,\n         source_info,\n+        lexical_scope: ARGUMENT_VISIBILITY_SCOPE,\n         internal: false,\n         is_user_variable: false,\n     };"}, {"sha": "339ea8a414b1e982da421159723a48c6463482ee", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -380,10 +380,10 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n         let mut promoter = Promoter {\n             promoted: Mir::new(\n                 IndexVec::new(),\n-                Some(VisibilityScopeData {\n-                    span,\n-                    parent_scope: None\n-                }).into_iter().collect(),\n+                // FIXME: maybe try to filter this to avoid blowing up\n+                // memory usage?\n+                mir.visibility_scopes.clone(),\n+                mir.visibility_scope_info.clone(),\n                 IndexVec::new(),\n                 ty,\n                 None,"}, {"sha": "c6461217ac3215df5a2c4929fdc9934145626006", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7500f9b68d56b8313a8d3c103fd31b638ec8d2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8c7500f9b68d56b8313a8d3c103fd31b638ec8d2", "patch": "@@ -2236,7 +2236,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                adjusted_ty,\n                index_ty);\n \n-\n         // First, try built-in indexing.\n         match (adjusted_ty.builtin_index(), &index_ty.sty) {\n             (Some(ty), &ty::TyUint(ast::UintTy::Us)) | (Some(ty), &ty::TyInfer(ty::IntVar(_))) => {"}]}