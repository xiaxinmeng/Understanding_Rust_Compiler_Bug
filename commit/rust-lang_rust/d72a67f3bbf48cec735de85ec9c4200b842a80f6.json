{"sha": "d72a67f3bbf48cec735de85ec9c4200b842a80f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MmE2N2YzYmJmNDhjZWM3MzVkZTg1ZWM5YzQyMDBiODQyYTgwZjY=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-06-26T09:35:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-26T09:35:33Z"}, "message": "Rollup merge of #51104 - zackmdavis:dynamo, r=nikomatsakis\n\nadd `dyn ` to display of dynamic (trait) types\n\n~~I'm not sure we want the `dyn` in the E0277 \"trait bound [...] is not satisfied\" messages (\"bound\" sounds like a different thing in contrast to the names of specific trait-object types like `Box<dyn Trait>`), but I'm finding the code I would need to change that hard to follow\u2014the [display object seems to](https://github.com/rust-lang/rust/blob/f0805a4421449bd6fe3096d63820fbebe2bfcd1d/src/librustc/traits/error_reporting.rs#L600) be a [`Predicate::Trait`](https://github.com/rust-lang/rust/blob/f0805a4421449bd6fe3096d63820fbebe2bfcd1d/src/librustc/ty/mod.rs#L962) variant, whose [`Display` implementation](https://github.com/rust-lang/rust/blob/f0805a4421449bd6fe3096d63820fbebe2bfcd1d/src/librustc/util/ppaux.rs#L1309) calls `.print` on its `PolyTraitPredicate` member, [which is a type alias](https://github.com/rust-lang/rust/blob/f0805a4421449bd6fe3096d63820fbebe2bfcd1d/src/librustc/ty/mod.rs#L1112) for `ty::Binder<TraitPredicate<'tcx>>`, whose [`Display` implementation](https://github.com/rust-lang/rust/blob/f0805a4421449bd6fe3096d63820fbebe2bfcd1d/src/librustc/util/ppaux.rs#L975-L985) ... _&c._\u2014 so maybe it's time to pull-request this and see what reviewers think.~~\n\n Resolves #49277 (?).\n\nr? @nikomatsakis", "tree": {"sha": "add2d116c03c56b897935f58ccb53c255df630b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/add2d116c03c56b897935f58ccb53c255df630b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d72a67f3bbf48cec735de85ec9c4200b842a80f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbMgjlCRBK7hj4Ov3rIwAAdHIIADq4TAeK/4sLaIG/l6x8mMkM\nVBauv+Va3rEH/3pmgqexoHSj2h4eu6GSt9g/OGyvt0+hbvbnMviVBou0dJwSRjuX\n2VjKjPdgoMhwQNRgS8RkMQ3VmEmjjmRSVrhyfgp6edmsqjziqJarcN0hSCz/2AXX\npFLb3QgsJYKIfX8MEBCS1pEbOaaquZCZSl87enfl0TAN5bCgoI9E1dRkeg/4tUSR\nzge3r9Z580TFQRzIQRyVUkXMl4xoaHOidUKEWevlK9es2lgPS2Qr6sML0euFvqaO\nVTwRHgX3frLe5nb9w84AC07fkrQB2CEeliDHU+gwn3dZZHy4KFde8R/kCuOGdCg=\n=qzus\n-----END PGP SIGNATURE-----\n", "payload": "tree add2d116c03c56b897935f58ccb53c255df630b2\nparent 773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6\nparent 4b1808578a99b1a452b65f0bf27de4c8775e9105\nauthor Pietro Albini <pietro@pietroalbini.org> 1530005733 +0200\ncommitter GitHub <noreply@github.com> 1530005733 +0200\n\nRollup merge of #51104 - zackmdavis:dynamo, r=nikomatsakis\n\nadd `dyn ` to display of dynamic (trait) types\n\n~~I'm not sure we want the `dyn` in the E0277 \"trait bound [...] is not satisfied\" messages (\"bound\" sounds like a different thing in contrast to the names of specific trait-object types like `Box<dyn Trait>`), but I'm finding the code I would need to change that hard to follow\u2014the [display object seems to](https://github.com/rust-lang/rust/blob/f0805a4421449bd6fe3096d63820fbebe2bfcd1d/src/librustc/traits/error_reporting.rs#L600) be a [`Predicate::Trait`](https://github.com/rust-lang/rust/blob/f0805a4421449bd6fe3096d63820fbebe2bfcd1d/src/librustc/ty/mod.rs#L962) variant, whose [`Display` implementation](https://github.com/rust-lang/rust/blob/f0805a4421449bd6fe3096d63820fbebe2bfcd1d/src/librustc/util/ppaux.rs#L1309) calls `.print` on its `PolyTraitPredicate` member, [which is a type alias](https://github.com/rust-lang/rust/blob/f0805a4421449bd6fe3096d63820fbebe2bfcd1d/src/librustc/ty/mod.rs#L1112) for `ty::Binder<TraitPredicate<'tcx>>`, whose [`Display` implementation](https://github.com/rust-lang/rust/blob/f0805a4421449bd6fe3096d63820fbebe2bfcd1d/src/librustc/util/ppaux.rs#L975-L985) ... _&c._\u2014 so maybe it's time to pull-request this and see what reviewers think.~~\n\n Resolves #49277 (?).\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d72a67f3bbf48cec735de85ec9c4200b842a80f6", "html_url": "https://github.com/rust-lang/rust/commit/d72a67f3bbf48cec735de85ec9c4200b842a80f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d72a67f3bbf48cec735de85ec9c4200b842a80f6/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6", "html_url": "https://github.com/rust-lang/rust/commit/773ce53ce7b3acb97cfbd3d189dc3fbf33ec05c6"}, {"sha": "4b1808578a99b1a452b65f0bf27de4c8775e9105", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1808578a99b1a452b65f0bf27de4c8775e9105", "html_url": "https://github.com/rust-lang/rust/commit/4b1808578a99b1a452b65f0bf27de4c8775e9105"}], "stats": {"total": 282, "additions": 143, "deletions": 139}, "files": [{"sha": "4fe9c34c140cbdf8136258728b33931570fdffa0", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -1062,10 +1062,14 @@ define_print! {\n                 TyParam(ref param_ty) => write!(f, \"{}\", param_ty),\n                 TyAdt(def, substs) => cx.parameterized(f, substs, def.did, &[]),\n                 TyDynamic(data, r) => {\n-                    data.print(f, cx)?;\n                     let r = r.print_to_string(cx);\n                     if !r.is_empty() {\n-                        write!(f, \" + {}\", r)\n+                        write!(f, \"(\")?;\n+                    }\n+                    write!(f, \"dyn \")?;\n+                    data.print(f, cx)?;\n+                    if !r.is_empty() {\n+                        write!(f, \" + {})\", r)\n                     } else {\n                         Ok(())\n                     }"}, {"sha": "7c76cf475d29afe415b27502c5451252a11eb354", "filename": "src/test/compile-fail/cross-borrow-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -18,6 +18,6 @@ impl Trait for Foo {}\n pub fn main() {\n     let x: Box<Trait> = Box::new(Foo);\n     let _y: &Trait = x; //~ ERROR E0308\n-                        //~| expected type `&Trait`\n-                        //~| found type `std::boxed::Box<Trait>`\n+                        //~| expected type `&dyn Trait`\n+                        //~| found type `std::boxed::Box<dyn Trait>`\n }"}, {"sha": "b5acdc12ca048679c0f8ebe259a77995c66e02a0", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -33,23 +33,23 @@ fn main() {\n     let &&x = &&(&1isize as &T);\n \n     // n == m\n-    let &x = &1isize as &T;      //~ ERROR type `&T` cannot be dereferenced\n-    let &&x = &(&1isize as &T);  //~ ERROR type `&T` cannot be dereferenced\n-    let box x = box 1isize as Box<T>; //~ ERROR type `std::boxed::Box<T>` cannot be dereferenced\n+    let &x = &1isize as &T;      //~ ERROR type `&dyn T` cannot be dereferenced\n+    let &&x = &(&1isize as &T);  //~ ERROR type `&dyn T` cannot be dereferenced\n+    let box x = box 1isize as Box<T>; //~ ERROR type `std::boxed::Box<dyn T>` cannot be dereferenced\n \n     // n > m\n     let &&x = &1isize as &T;\n     //~^ ERROR mismatched types\n-    //~| expected type `T`\n+    //~| expected type `dyn T`\n     //~| found type `&_`\n     //~| expected trait T, found reference\n     let &&&x = &(&1isize as &T);\n     //~^ ERROR mismatched types\n-    //~| expected type `T`\n+    //~| expected type `dyn T`\n     //~| found type `&_`\n     //~| expected trait T, found reference\n     let box box x = box 1isize as Box<T>;\n     //~^ ERROR mismatched types\n-    //~| expected type `T`\n+    //~| expected type `dyn T`\n     //~| found type `std::boxed::Box<_>`\n }"}, {"sha": "2a209a2959bfd7bf08c84b4338d92a636de68c28", "filename": "src/test/compile-fail/dst-bad-assign-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -42,7 +42,7 @@ pub fn main() {\n     let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.2 = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected type `ToBar`\n+    //~| expected type `dyn ToBar`\n     //~| found type `Bar1`\n     //~| expected trait ToBar, found struct `Bar1`\n     //~| ERROR the size for value values of type"}, {"sha": "e28586c4755e872320a026ee9b195ab5b623e1d6", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -44,7 +44,7 @@ pub fn main() {\n     let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected type `ToBar`\n+    //~| expected type `dyn ToBar`\n     //~| found type `Bar1`\n     //~| expected trait ToBar, found struct `Bar1`\n     //~| ERROR the size for value values of type"}, {"sha": "56d64d77ee2581bccf1b10b293e23d3218defdd4", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -16,15 +16,15 @@ fn main() {\n     let _: () = (box |_: isize| {}) as Box<FnOnce(isize)>;\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n-    //~| found type `std::boxed::Box<std::ops::FnOnce(isize)>`\n+    //~| found type `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n     let _: () = (box |_: isize, isize| {}) as Box<Fn(isize, isize)>;\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n-    //~| found type `std::boxed::Box<std::ops::Fn(isize, isize)>`\n+    //~| found type `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n     let _: () = (box || -> isize { unimplemented!() }) as Box<FnMut() -> isize>;\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n-    //~| found type `std::boxed::Box<std::ops::FnMut() -> isize>`\n+    //~| found type `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n \n     needs_fn(1);\n     //~^ ERROR : std::ops::Fn<(isize,)>`"}, {"sha": "f1fd617717a5ee5af533bf7bf3b51c44259688d2", "filename": "src/test/compile-fail/issue-13033.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fissue-13033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fissue-13033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13033.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -17,8 +17,8 @@ struct Baz;\n impl Foo for Baz {\n     fn bar(&mut self, other: &Foo) {}\n     //~^ ERROR method `bar` has an incompatible type for trait\n-    //~| expected type `fn(&mut Baz, &mut Foo)`\n-    //~| found type `fn(&mut Baz, &Foo)`\n+    //~| expected type `fn(&mut Baz, &mut dyn Foo)`\n+    //~| found type `fn(&mut Baz, &dyn Foo)`\n }\n \n fn main() {}"}, {"sha": "5282ce4bb8897dd43d09c6a61416193fe6b752e1", "filename": "src/test/compile-fail/issue-20939.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fissue-20939.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fissue-20939.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20939.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -11,6 +11,6 @@\n trait Foo {}\n \n impl<'a> Foo for Foo+'a {}\n-//~^ ERROR the object type `Foo + 'a` automatically implements the trait `Foo`\n+//~^ ERROR the object type `(dyn Foo + 'a)` automatically implements the trait `Foo`\n \n fn main() {}"}, {"sha": "24db822f89ca0fc91cb443602836b7630b99712e", "filename": "src/test/compile-fail/issue-32963.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -17,5 +17,5 @@ fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n fn main() {\n     size_of_copy::<Misc+Copy>();\n     //~^ ERROR only auto traits can be used as additional traits in a trait object\n-    //~| ERROR the trait bound `Misc: std::marker::Copy` is not satisfied\n+    //~| ERROR the trait bound `dyn Misc: std::marker::Copy` is not satisfied\n }"}, {"sha": "0509a4387bae415f5999a640f5f55f477edd0626", "filename": "src/test/compile-fail/issue-41139.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fissue-41139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fissue-41139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41139.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -14,5 +14,5 @@ fn get_function<'a>() -> &'a Fn() -> Trait { panic!(\"\") }\n \n fn main() {\n     let t : &Trait = &get_function()();\n-    //~^ ERROR cannot move a value of type Trait + 'static\n+    //~^ ERROR cannot move a value of type (dyn Trait + 'static)\n }"}, {"sha": "9b49886961d7b12b1655d172748e7c0c14521ba8", "filename": "src/test/compile-fail/issue-5153.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fissue-5153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fissue-5153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5153.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -18,5 +18,5 @@ impl Foo for isize {\n \n fn main() {\n     (&5isize as &Foo).foo();\n-    //~^ ERROR: no method named `foo` found for type `&Foo` in the current scope\n+    //~^ ERROR: no method named `foo` found for type `&dyn Foo` in the current scope\n }"}, {"sha": "82b97878549032dff3dc57a10051f0f7766d2628", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -20,12 +20,12 @@ trait Message : Send { }\n \n fn object_ref_with_static_bound_not_ok() {\n     assert_send::<&'static (Dummy+'static)>();\n-    //~^ ERROR `Dummy + 'static` cannot be shared between threads safely [E0277]\n+    //~^ ERROR `(dyn Dummy + 'static)` cannot be shared between threads safely [E0277]\n }\n \n fn box_object_with_no_bound_not_ok<'a>() {\n     assert_send::<Box<Dummy>>();\n-    //~^ ERROR `Dummy` cannot be sent between threads safely\n+    //~^ ERROR `dyn Dummy` cannot be sent between threads safely\n }\n \n fn object_with_send_bound_ok() {"}, {"sha": "853630aa41628a90f2c98d35dab6ee746a328d01", "filename": "src/test/compile-fail/kindck-send-object1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -18,7 +18,7 @@ trait Dummy { }\n // careful with object types, who knows what they close over...\n fn test51<'a>() {\n     assert_send::<&'a Dummy>();\n-    //~^ ERROR `Dummy + 'a` cannot be shared between threads safely [E0277]\n+    //~^ ERROR `(dyn Dummy + 'a)` cannot be shared between threads safely [E0277]\n }\n fn test52<'a>() {\n     assert_send::<&'a (Dummy+Sync)>();\n@@ -37,7 +37,7 @@ fn test61() {\n // them not ok\n fn test_71<'a>() {\n     assert_send::<Box<Dummy+'a>>();\n-    //~^ ERROR `Dummy + 'a` cannot be sent between threads safely\n+    //~^ ERROR `(dyn Dummy + 'a)` cannot be sent between threads safely\n }\n \n fn main() { }"}, {"sha": "0265f888e7c317411a728d9e0021bc80add29c0d", "filename": "src/test/compile-fail/kindck-send-object2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -15,12 +15,12 @@ trait Dummy { }\n \n fn test50() {\n     assert_send::<&'static Dummy>();\n-    //~^ ERROR `Dummy + 'static` cannot be shared between threads safely [E0277]\n+    //~^ ERROR `(dyn Dummy + 'static)` cannot be shared between threads safely [E0277]\n }\n \n fn test53() {\n     assert_send::<Box<Dummy>>();\n-    //~^ ERROR `Dummy` cannot be sent between threads safely\n+    //~^ ERROR `dyn Dummy` cannot be sent between threads safely\n }\n \n // ...unless they are properly bounded"}, {"sha": "e8ff9e817af2ca9d67bda5eda4bb9d4a2731fea1", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -25,5 +25,5 @@ fn main() {\n     let x: Box<HashMap<isize, isize>> = box HashMap::new();\n     let x: Box<Map<isize, isize>> = x;\n     let y: Box<Map<usize, isize>> = Box::new(x);\n-    //~^ ERROR `std::boxed::Box<Map<isize, isize>>: Map<usize, isize>` is not satisfied\n+    //~^ ERROR `std::boxed::Box<dyn Map<isize, isize>>: Map<usize, isize>` is not satisfied\n }"}, {"sha": "2a6e148ca791157c491d92fecbcfe9e1951b0708", "filename": "src/test/compile-fail/non-interger-atomic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -61,22 +61,22 @@ pub unsafe fn test_Foo_cxchg(p: &mut Foo, v: Foo) {\n \n pub unsafe fn test_Bar_load(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_load(p);\n-    //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n+    //~^ ERROR expected basic integer type, found `&dyn std::ops::Fn()`\n }\n \n pub unsafe fn test_Bar_store(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_store(p, v);\n-    //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n+    //~^ ERROR expected basic integer type, found `&dyn std::ops::Fn()`\n }\n \n pub unsafe fn test_Bar_xchg(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_xchg(p, v);\n-    //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n+    //~^ ERROR expected basic integer type, found `&dyn std::ops::Fn()`\n }\n \n pub unsafe fn test_Bar_cxchg(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_cxchg(p, v, v);\n-    //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n+    //~^ ERROR expected basic integer type, found `&dyn std::ops::Fn()`\n }\n \n pub unsafe fn test_Quux_load(p: &mut Quux, v: Quux) {"}, {"sha": "30f8d5e2f45698c5f37d1dd2b8b33d3f1c59c88a", "filename": "src/test/compile-fail/object-does-not-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -14,5 +14,5 @@\n trait Foo {}\n fn take_foo<F:Foo>(f: F) {}\n fn take_object(f: Box<Foo>) { take_foo(f); }\n-//~^ ERROR `std::boxed::Box<Foo>: Foo` is not satisfied\n+//~^ ERROR `std::boxed::Box<dyn Foo>: Foo` is not satisfied\n fn main() {}"}, {"sha": "e575bbb6ceab102fe8f29e008412915a22962641", "filename": "src/test/compile-fail/object-safety-by-value-self-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self-use.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -22,7 +22,7 @@ trait Baz {\n }\n \n fn use_bar(t: Box<Bar>) {\n-    t.bar() //~ ERROR cannot move a value of type Bar\n+    t.bar() //~ ERROR cannot move a value of type (dyn Bar + 'static)\n }\n \n fn main() { }"}, {"sha": "6019369aa2ebb5111d556194a70186b9974e09c1", "filename": "src/test/compile-fail/privacy/associated-item-privacy-type-binding.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-type-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-type-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-type-binding.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -19,19 +19,19 @@ mod priv_trait {\n \n     pub macro mac1() {\n         let _: Box<PubTr<AssocTy = u8>>;\n-        //~^ ERROR type `priv_trait::PubTr<AssocTy=u8> + '<empty>` is private\n-        //~| ERROR type `priv_trait::PubTr<AssocTy=u8> + '<empty>` is private\n+        //~^ ERROR type `(dyn priv_trait::PubTr<AssocTy=u8> + '<empty>)` is private\n+        //~| ERROR type `(dyn priv_trait::PubTr<AssocTy=u8> + '<empty>)` is private\n         type InSignatureTy2 = Box<PubTr<AssocTy = u8>>;\n-        //~^ ERROR type `priv_trait::PubTr<AssocTy=u8> + 'static` is private\n+        //~^ ERROR type `(dyn priv_trait::PubTr<AssocTy=u8> + 'static)` is private\n         trait InSignatureTr2: PubTr<AssocTy = u8> {}\n         //~^ ERROR trait `priv_trait::PrivTr` is private\n     }\n     pub macro mac2() {\n         let _: Box<PrivTr<AssocTy = u8>>;\n-        //~^ ERROR type `priv_trait::PrivTr<AssocTy=u8> + '<empty>` is private\n-        //~| ERROR type `priv_trait::PrivTr<AssocTy=u8> + '<empty>` is private\n+        //~^ ERROR type `(dyn priv_trait::PrivTr<AssocTy=u8> + '<empty>)` is private\n+        //~| ERROR type `(dyn priv_trait::PrivTr<AssocTy=u8> + '<empty>)` is private\n         type InSignatureTy1 = Box<PrivTr<AssocTy = u8>>;\n-        //~^ ERROR type `priv_trait::PrivTr<AssocTy=u8> + 'static` is private\n+        //~^ ERROR type `(dyn priv_trait::PrivTr<AssocTy=u8> + 'static)` is private\n         trait InSignatureTr1: PrivTr<AssocTy = u8> {}\n         //~^ ERROR trait `priv_trait::PrivTr` is private\n     }"}, {"sha": "3ca8b1eb2ed3a3d61b36484b2deb13d96a512d41", "filename": "src/test/compile-fail/private-inferred-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -129,7 +129,7 @@ fn main() {\n     m::leak_anon2(); //~ ERROR type `m::Priv` is private\n     m::leak_anon3(); //~ ERROR type `m::Priv` is private\n \n-    m::leak_dyn1(); //~ ERROR type `m::Trait + 'static` is private\n+    m::leak_dyn1(); //~ ERROR type `(dyn m::Trait + 'static)` is private\n     m::leak_dyn2(); //~ ERROR type `m::Priv` is private\n     m::leak_dyn3(); //~ ERROR type `m::Priv` is private\n "}, {"sha": "f8e4f0d596e20d3a005514552b5ea0eecaa42e64", "filename": "src/test/compile-fail/trait-item-privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Ftrait-item-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Ftrait-item-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-item-privacy.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -110,9 +110,9 @@ fn check_assoc_const() {\n     // A, B, C are resolved as inherent items, their traits don't need to be in scope\n     C::A; //~ ERROR associated constant `A` is private\n           //~^ ERROR the trait `assoc_const::C` cannot be made into an object\n-          //~| ERROR the trait bound `assoc_const::C: assoc_const::A` is not satisfied\n+          //~| ERROR the trait bound `dyn assoc_const::C: assoc_const::A` is not satisfied\n     C::B; // ERROR the trait `assoc_const::C` cannot be made into an object\n-          //~^ ERROR the trait bound `assoc_const::C: assoc_const::B` is not satisfied\n+          //~^ ERROR the trait bound `dyn assoc_const::C: assoc_const::B` is not satisfied\n     C::C; // OK\n }\n "}, {"sha": "559871af72ed630e8b0e5d32f38930a077d974e8", "filename": "src/test/compile-fail/traits-repeated-supertrait-ambig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Ftraits-repeated-supertrait-ambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Ftraits-repeated-supertrait-ambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-repeated-supertrait-ambig.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -33,15 +33,15 @@ impl CompareTo<u64> for i64 {\n impl CompareToInts for i64 { }\n \n fn with_obj(c: &CompareToInts) -> bool {\n-    c.same_as(22) //~ ERROR `CompareToInts: CompareTo<i32>` is not satisfied\n+    c.same_as(22) //~ ERROR `dyn CompareToInts: CompareTo<i32>` is not satisfied\n }\n \n fn with_trait<C:CompareToInts>(c: &C) -> bool {\n     c.same_as(22) //~ ERROR `C: CompareTo<i32>` is not satisfied\n }\n \n fn with_ufcs1<C:CompareToInts>(c: &C) -> bool {\n-    CompareToInts::same_as(c, 22) //~ ERROR `CompareToInts: CompareTo<i32>` is not satisfied\n+    CompareToInts::same_as(c, 22) //~ ERROR `dyn CompareToInts: CompareTo<i32>` is not satisfied\n }\n \n fn with_ufcs2<C:CompareToInts>(c: &C) -> bool {"}, {"sha": "3f2bd2ffabf4bad00cd416e10feec06f5092466d", "filename": "src/test/compile-fail/trivial_casts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -59,25 +59,25 @@ pub fn main() {\n \n     // unsize trait\n     let x: &Bar = &Bar;\n-    let _ = x as &Foo; //~ERROR trivial cast: `&Bar` as `&Foo`\n-    let _ = x as *const Foo; //~ERROR trivial cast: `&Bar` as `*const Foo`\n+    let _ = x as &Foo; //~ERROR trivial cast: `&Bar` as `&dyn Foo`\n+    let _ = x as *const Foo; //~ERROR trivial cast: `&Bar` as `*const dyn Foo`\n     let _: &Foo = x;\n     let _: *const Foo = x;\n \n     let x: &mut Bar = &mut Bar;\n-    let _ = x as &mut Foo; //~ERROR trivial cast: `&mut Bar` as `&mut Foo`\n-    let _ = x as *mut Foo; //~ERROR trivial cast: `&mut Bar` as `*mut Foo`\n+    let _ = x as &mut Foo; //~ERROR trivial cast: `&mut Bar` as `&mut dyn Foo`\n+    let _ = x as *mut Foo; //~ERROR trivial cast: `&mut Bar` as `*mut dyn Foo`\n     let _: &mut Foo = x;\n     let _: *mut Foo = x;\n \n     let x: Box<Bar> = Box::new(Bar);\n-    let _ = x as Box<Foo>; //~ERROR trivial cast: `std::boxed::Box<Bar>` as `std::boxed::Box<Foo>`\n+    let _ = x as Box<Foo>; //~ERROR `std::boxed::Box<Bar>` as `std::boxed::Box<dyn Foo>`\n     let x: Box<Bar> = Box::new(Bar);\n     let _: Box<Foo> = x;\n \n     // functions\n     fn baz(_x: i32) {}\n-    let _ = &baz as &Fn(i32); //~ERROR trivial cast: `&fn(i32) {main::baz}` as `&std::ops::Fn(i32)`\n+    let _ = &baz as &Fn(i32); //~ERROR `&fn(i32) {main::baz}` as `&dyn std::ops::Fn(i32)`\n     let _: &Fn(i32) = &baz;\n     let x = |_x: i32| {};\n     let _ = &x as &Fn(i32); //~ERROR trivial cast"}, {"sha": "7e93f626cfcfb38ef65c00769270576ecb249950", "filename": "src/test/compile-fail/type-mismatch-same-crate-name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-same-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-same-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-same-crate-name.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -33,7 +33,7 @@ fn main() {\n         //~^ ERROR mismatched types\n         //~| Perhaps two different versions of crate `crate_a1`\n         //~| expected trait `main::a::Bar`\n-        //~| expected type `std::boxed::Box<main::a::Bar + 'static>`\n-        //~| found type `std::boxed::Box<main::a::Bar>`\n+        //~| expected type `std::boxed::Box<(dyn main::a::Bar + 'static)>`\n+        //~| found type `std::boxed::Box<dyn main::a::Bar>`\n     }\n }"}, {"sha": "08988353886451992f644ceac9ab7dcb2ca2a85c", "filename": "src/test/compile-fail/type-parameter-defaults-referencing-Self-ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -23,5 +23,5 @@ fn main() {\n     let x: i32 = 5;\n     let y = x as MyAdd<i32>;\n     //~^ ERROR E0038\n-    //~| ERROR cast to unsized type: `i32` as `MyAdd<i32>`\n+    //~| ERROR cast to unsized type: `i32` as `dyn MyAdd<i32>`\n }"}, {"sha": "862439e21f4f3737743737ac08e6ab66dcc36ade", "filename": "src/test/run-pass/issue-21058.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21058.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -26,5 +26,5 @@ fn main() {\n         std::intrinsics::type_name::<NT>(),\n         // DST\n         std::intrinsics::type_name::<DST>()\n-    )}, (\"[u8]\", \"str\", \"std::marker::Send\", \"NT\", \"DST\"));\n+    )}, (\"[u8]\", \"str\", \"dyn std::marker::Send\", \"NT\", \"DST\"));\n }"}, {"sha": "809d111d74e65e2ac921756ffcadb05b68e4fae8", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -74,7 +74,7 @@ error[E0631]: type mismatch in closure arguments\n LL |     g1(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n-   |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>) -> _`\n+   |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>) -> _`\n    |\n note: required by `g1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:33:1\n@@ -102,7 +102,7 @@ error[E0631]: type mismatch in closure arguments\n LL |     g3(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n-   |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<for<'r> std::ops::Fn(&'r ()) + 'static>) -> _`\n+   |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n    |\n note: required by `g3`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:35:1\n@@ -130,7 +130,7 @@ error[E0631]: type mismatch in closure arguments\n LL |     h1(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n-   |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<for<'t0> std::ops::Fn(&'t0 ()) + 'static>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n+   |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<(dyn for<'t0> std::ops::Fn(&'t0 ()) + 'static)>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n    |\n note: required by `h1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:39:1\n@@ -144,7 +144,7 @@ error[E0631]: type mismatch in closure arguments\n LL |     h2(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n-   |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n+   |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n    |\n note: required by `h2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:40:1"}, {"sha": "ec9e65fc4c62d3fb8717c1886e4a5d13bfdf4a76", "filename": "src/test/ui/arbitrary-self-types-not-object-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -13,7 +13,7 @@ LL |     let x = Box::new(5usize) as Box<Foo>;\n    |             ^^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n    = note: method `foo` has a non-standard `self` type\n-   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<Foo>>` for `std::boxed::Box<usize>`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Foo>>` for `std::boxed::Box<usize>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1e871d472842097a4df8383d24716837ed788c2b", "filename": "src/test/ui/cast-to-unsized-trait-object-suggestion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -1,12 +1,12 @@\n-error[E0620]: cast to unsized type: `&{integer}` as `std::marker::Send`\n+error[E0620]: cast to unsized type: `&{integer}` as `dyn std::marker::Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:12:5\n    |\n LL |     &1 as Send; //~ ERROR cast to unsized\n    |     ^^^^^^----\n    |           |\n    |           help: try casting to a reference instead: `&Send`\n \n-error[E0620]: cast to unsized type: `std::boxed::Box<{integer}>` as `std::marker::Send`\n+error[E0620]: cast to unsized type: `std::boxed::Box<{integer}>` as `dyn std::marker::Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:13:5\n    |\n LL |     Box::new(1) as Send; //~ ERROR cast to unsized"}, {"sha": "d6fc5391ba83111c1f1c3f55461d65b3e99951dc", "filename": "src/test/ui/const-unsized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: the size for value values of type `std::fmt::Debug + std::marker::Sync + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:13:29\n    |\n LL | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Sync + 'static`\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: constant expressions must have a statically known size\n \n@@ -18,13 +18,13 @@ LL | const CONST_FOO: str = *\"foo\";\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: constant expressions must have a statically known size\n \n-error[E0277]: the size for value values of type `std::fmt::Debug + std::marker::Sync + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:19:31\n    |\n LL | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n    |                               ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Sync + 'static`\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: constant expressions must have a statically known size\n "}, {"sha": "33792d4f5b3fa4cb62efff4fe2ae71a42a6b3469", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -92,15 +92,15 @@ error[E0223]: ambiguous associated type\n LL | type G = 'static + (Send)::AssocTy;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n    |\n-   = note: specify the type using the syntax `<std::marker::Send + 'static as Trait>::AssocTy`\n+   = note: specify the type using the syntax `<(dyn std::marker::Send + 'static) as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:43:10\n    |\n LL | type H = Fn(u8) -> (u8)::Output;\n    |          ^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n    |\n-   = note: specify the type using the syntax `<std::ops::Fn(u8) -> u8 + 'static as Trait>::Output`\n+   = note: specify the type using the syntax `<(dyn std::ops::Fn(u8) -> u8 + 'static) as Trait>::Output`\n \n error: aborting due to 15 previous errors\n "}, {"sha": "2fac6080f496a263edec158d5909b59270fd88bc", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -12,11 +12,11 @@ LL |     let trait_obj: &SomeTrait = SomeTrait;\n    |\n    = note: method `foo` has no receiver\n \n-error[E0033]: type `&SomeTrait` cannot be dereferenced\n+error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033-teach.rs:23:9\n    |\n LL |     let &invalid = trait_obj;\n-   |         ^^^^^^^^ type `&SomeTrait` cannot be dereferenced\n+   |         ^^^^^^^^ type `&dyn SomeTrait` cannot be dereferenced\n    |\n    = note: This error indicates that a pointer to a trait type cannot be implicitly dereferenced by a pattern. Every trait defines a type, but because the size of trait implementors isn't fixed, this type has no compile-time size. Therefore, all accesses to trait types must be through pointers. If you encounter this error you should try to avoid dereferencing the pointer.\n            "}, {"sha": "5d789566beb066e9f0da6536ad9884840fe0123e", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -12,11 +12,11 @@ LL |     let trait_obj: &SomeTrait = SomeTrait;\n    |\n    = note: method `foo` has no receiver\n \n-error[E0033]: type `&SomeTrait` cannot be dereferenced\n+error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033.rs:21:9\n    |\n LL |     let &invalid = trait_obj;\n-   |         ^^^^^^^^ type `&SomeTrait` cannot be dereferenced\n+   |         ^^^^^^^^ type `&dyn SomeTrait` cannot be dereferenced\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fb7f88d5ca977e78adf9c3ef545d78fddbb6670e", "filename": "src/test/ui/error-codes/E0657.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n LL |     () //~ ERROR mismatched types\n    |     ^^ expected struct `std::boxed::Box`, found ()\n    |\n-   = note: expected type `std::boxed::Box<Id<_> + 'static>`\n+   = note: expected type `std::boxed::Box<(dyn Id<_> + 'static)>`\n               found type `()`\n \n error[E0308]: mismatched types\n@@ -25,7 +25,7 @@ error[E0308]: mismatched types\n LL |         () //~ ERROR mismatched types\n    |         ^^ expected struct `std::boxed::Box`, found ()\n    |\n-   = note: expected type `std::boxed::Box<Id<_> + 'static>`\n+   = note: expected type `std::boxed::Box<(dyn Id<_> + 'static)>`\n               found type `()`\n \n error: aborting due to 4 previous errors"}, {"sha": "778a4cf1fa01f16de791a08cea0222409da44a71", "filename": "src/test/ui/fat-ptr-cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -52,7 +52,7 @@ error[E0607]: cannot cast thin pointer `*const i32` to fat pointer `*const [i32]\n LL |     q as *const [i32]; //~ ERROR cannot cast\n    |     ^^^^^^^^^^^^^^^^^\n \n-error[E0606]: casting `usize` as `*mut Trait + 'static` is invalid\n+error[E0606]: casting `usize` as `*mut (dyn Trait + 'static)` is invalid\n   --> $DIR/fat-ptr-cast.rs:32:37\n    |\n LL |     let t: *mut (Trait + 'static) = 0 as *mut _; //~ ERROR casting"}, {"sha": "19a6a8637957eb91de7eb2e4c15ea9d9ab5ae67d", "filename": "src/test/ui/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -98,17 +98,17 @@ LL | struct TwoStrs(str, str) where str: Sized; //~ ERROR\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n-error[E0277]: the size for value values of type `A + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn A + 'static)` cannot be known at compilation time\n   --> $DIR/feature-gate-trivial_bounds.rs:65:1\n    |\n LL | / fn unsized_local() where Dst<A>: Sized { //~ ERROR\n LL | |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n-   = help: within `Dst<A + 'static>`, the trait `std::marker::Sized` is not implemented for `A + 'static`\n+   = help: within `Dst<(dyn A + 'static)>`, the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n-   = note: required because it appears within the type `Dst<A + 'static>`\n+   = note: required because it appears within the type `Dst<(dyn A + 'static)>`\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n "}, {"sha": "0d9239d72276e899c6424bd26de45e4666faf111", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -1,11 +1,11 @@\n-error[E0277]: `*mut std::ops::Fn() + 'static` cannot be shared between threads safely\n+error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:18:5\n    |\n LL |     send(format_args!(\"{:?}\", c)); //~ ERROR E0277\n-   |     ^^^^ `*mut std::ops::Fn() + 'static` cannot be shared between threads safely\n+   |     ^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n    |\n-   = help: within `[std::fmt::ArgumentV1<'_>]`, the trait `std::marker::Sync` is not implemented for `*mut std::ops::Fn() + 'static`\n-   = note: required because it appears within the type `std::marker::PhantomData<*mut std::ops::Fn() + 'static>`\n+   = help: within `[std::fmt::ArgumentV1<'_>]`, the trait `std::marker::Sync` is not implemented for `*mut (dyn std::ops::Fn() + 'static)`\n+   = note: required because it appears within the type `std::marker::PhantomData<*mut (dyn std::ops::Fn() + 'static)>`\n    = note: required because it appears within the type `core::fmt::Void`\n    = note: required because it appears within the type `&core::fmt::Void`\n    = note: required because it appears within the type `std::fmt::ArgumentV1<'_>`\n@@ -18,14 +18,14 @@ note: required by `send`\n LL | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: `*mut std::ops::Fn() + 'static` cannot be shared between threads safely\n+error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:19:5\n    |\n LL |     sync(format_args!(\"{:?}\", c)); //~ ERROR E0277\n-   |     ^^^^ `*mut std::ops::Fn() + 'static` cannot be shared between threads safely\n+   |     ^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n    |\n-   = help: within `std::fmt::Arguments<'_>`, the trait `std::marker::Sync` is not implemented for `*mut std::ops::Fn() + 'static`\n-   = note: required because it appears within the type `std::marker::PhantomData<*mut std::ops::Fn() + 'static>`\n+   = help: within `std::fmt::Arguments<'_>`, the trait `std::marker::Sync` is not implemented for `*mut (dyn std::ops::Fn() + 'static)`\n+   = note: required because it appears within the type `std::marker::PhantomData<*mut (dyn std::ops::Fn() + 'static)>`\n    = note: required because it appears within the type `core::fmt::Void`\n    = note: required because it appears within the type `&core::fmt::Void`\n    = note: required because it appears within the type `std::fmt::ArgumentV1<'_>`"}, {"sha": "07b86228f61182466b75c15c17d784d6a8303cce", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -10,8 +10,8 @@ note: first, the lifetime cannot outlive the lifetime 'a as defined on the funct\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<std::fmt::Debug>\n-              found std::boxed::Box<std::fmt::Debug + 'a>\n+           expected std::boxed::Box<dyn std::fmt::Debug>\n+              found std::boxed::Box<(dyn std::fmt::Debug + 'a)>\n    = note: but, the lifetime must be valid for the static lifetime...\n    = note: ...so that the types are compatible:\n            expected StaticTrait"}, {"sha": "169369c304eb22092fbfebaa2bc3ef638d08c3d3", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -13,8 +13,8 @@ LL | |     }\n    | |_____^\n    = note: ...but the lifetime must also be valid for the static lifetime...\n    = note: ...so that the method type is compatible with trait:\n-           expected fn(&Struct) -> &Trait + 'static\n-              found fn(&Struct) -> &Trait\n+           expected fn(&Struct) -> &(dyn Trait + 'static)\n+              found fn(&Struct) -> &dyn Trait\n \n error: aborting due to previous error\n "}, {"sha": "5432d5f5ed910007cd5b76c1505801a7ad7bc86f", "filename": "src/test/ui/issue-17441.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17441.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -13,10 +13,10 @@ fn main() {\n     //~^ ERROR cast to unsized type: `&[usize; 2]` as `[usize]`\n \n     let _bar = Box::new(1_usize) as std::fmt::Debug;\n-    //~^ ERROR cast to unsized type: `std::boxed::Box<usize>` as `std::fmt::Debug`\n+    //~^ ERROR cast to unsized type: `std::boxed::Box<usize>` as `dyn std::fmt::Debug`\n \n     let _baz = 1_usize as std::fmt::Debug;\n-    //~^ ERROR cast to unsized type: `usize` as `std::fmt::Debug`\n+    //~^ ERROR cast to unsized type: `usize` as `dyn std::fmt::Debug`\n \n     let _quux = [1_usize, 2] as [usize];\n     //~^ ERROR cast to unsized type: `[usize; 2]` as `[usize]`"}, {"sha": "6c7e883f9f9c2c118c5354a6ec93cd9673a9e2c6", "filename": "src/test/ui/issue-17441.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fissue-17441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fissue-17441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17441.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -10,15 +10,15 @@ help: consider using an implicit coercion to `&[usize]` instead\n LL |     let _foo = &[1_usize, 2] as [usize];\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0620]: cast to unsized type: `std::boxed::Box<usize>` as `std::fmt::Debug`\n+error[E0620]: cast to unsized type: `std::boxed::Box<usize>` as `dyn std::fmt::Debug`\n   --> $DIR/issue-17441.rs:15:16\n    |\n LL |     let _bar = Box::new(1_usize) as std::fmt::Debug;\n    |                ^^^^^^^^^^^^^^^^^^^^^---------------\n    |                                     |\n    |                                     help: try casting to a `Box` instead: `Box<std::fmt::Debug>`\n \n-error[E0620]: cast to unsized type: `usize` as `std::fmt::Debug`\n+error[E0620]: cast to unsized type: `usize` as `dyn std::fmt::Debug`\n   --> $DIR/issue-17441.rs:18:16\n    |\n LL |     let _baz = 1_usize as std::fmt::Debug;"}, {"sha": "156ebd920f0d95e0955076b931625c61bd7a105e", "filename": "src/test/ui/issue-20692.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-20692.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -13,7 +13,7 @@ LL |     let _ = x\n    |             ^ the trait `Array` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`\n-   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&Array>` for `&T`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Array>` for `&T`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7f22dc8739e76a6a42b47382d5eb282e95103ff5", "filename": "src/test/ui/lint-ctypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-ctypes.rs?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -59,7 +59,7 @@ extern {\n     pub fn char_type(p: char); //~ ERROR uses type `char`\n     pub fn i128_type(p: i128); //~ ERROR uses type `i128`\n     pub fn u128_type(p: u128); //~ ERROR uses type `u128`\n-    pub fn trait_type(p: &Clone); //~ ERROR uses type `std::clone::Clone`\n+    pub fn trait_type(p: &Clone); //~ ERROR uses type `dyn std::clone::Clone`\n     pub fn tuple_type(p: (i32, i32)); //~ ERROR uses type `(i32, i32)`\n     pub fn tuple_type2(p: I32Pair); //~ ERROR uses type `(i32, i32)`\n     pub fn zero_size(p: ZeroSize); //~ ERROR struct has no fields"}, {"sha": "d1ef3a7a19c294b7983399a3c4813b724197b192", "filename": "src/test/ui/lint-ctypes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-ctypes.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -73,10 +73,10 @@ error: `extern` block uses type `u128` which is not FFI-safe: 128-bit integers d\n LL |     pub fn u128_type(p: u128); //~ ERROR uses type `u128`\n    |                         ^^^^\n \n-error: `extern` block uses type `std::clone::Clone` which is not FFI-safe: trait objects have no C equivalent\n+error: `extern` block uses type `dyn std::clone::Clone` which is not FFI-safe: trait objects have no C equivalent\n   --> $DIR/lint-ctypes.rs:62:26\n    |\n-LL |     pub fn trait_type(p: &Clone); //~ ERROR uses type `std::clone::Clone`\n+LL |     pub fn trait_type(p: &Clone); //~ ERROR uses type `dyn std::clone::Clone`\n    |                          ^^^^^^\n \n error: `extern` block uses type `(i32, i32)` which is not FFI-safe: tuples have unspecified layout"}, {"sha": "79442bd108a6759fe1ef27761d6e5309935bbf50", "filename": "src/test/ui/lub-glb/old-lub-glb-object.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -9,8 +9,8 @@ LL | |         _ => y,\n LL | |     };\n    | |_____^ expected bound lifetime parameter 'a, found concrete lifetime\n    |\n-   = note: expected type `&for<'a, 'b> Foo<&'a u8, &'b u8>`\n-              found type `&for<'a> Foo<&'a u8, &'a u8>`\n+   = note: expected type `&dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n+              found type `&dyn for<'a> Foo<&'a u8, &'a u8>`\n    = note: this was previously accepted by the compiler but has been phased out\n    = note: for more information, see https://github.com/rust-lang/rust/issues/45852\n "}, {"sha": "9335795f6b8f322c0d3d0e6355f6ff61d0a025c1", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -162,13 +162,13 @@ error[E0607]: cannot cast thin pointer `*const u8` to fat pointer `*const [u8]`\n LL |     let _ = v as *const [u8]; //~ ERROR cannot cast\n    |             ^^^^^^^^^^^^^^^^\n \n-error[E0606]: casting `&Foo` as `*const str` is invalid\n+error[E0606]: casting `&dyn Foo` as `*const str` is invalid\n   --> $DIR/cast-rfc0401.rs:64:13\n    |\n LL |     let _ = foo as *const str; //~ ERROR is invalid\n    |             ^^^^^^^^^^^^^^^^^\n \n-error[E0606]: casting `&Foo` as `*mut str` is invalid\n+error[E0606]: casting `&dyn Foo` as `*mut str` is invalid\n   --> $DIR/cast-rfc0401.rs:65:13\n    |\n LL |     let _ = foo as *mut str; //~ ERROR is invalid\n@@ -200,15 +200,15 @@ LL |     let _ = fat_sv as usize; //~ ERROR is invalid\n    |\n    = help: cast through a thin pointer first\n \n-error[E0606]: casting `*const Foo` as `*const [u16]` is invalid\n+error[E0606]: casting `*const dyn Foo` as `*const [u16]` is invalid\n   --> $DIR/cast-rfc0401.rs:78:13\n    |\n LL |     let _ = cf as *const [u16]; //~ ERROR is invalid\n    |             ^^^^^^^^^^^^^^^^^^\n    |\n    = note: vtable kinds may not match\n \n-error[E0606]: casting `*const Foo` as `*const Bar` is invalid\n+error[E0606]: casting `*const dyn Foo` as `*const dyn Bar` is invalid\n   --> $DIR/cast-rfc0401.rs:79:13\n    |\n LL |     let _ = cf as *const Bar; //~ ERROR is invalid\n@@ -224,7 +224,7 @@ LL |     let _ = fat_v as *const Foo; //~ ERROR the size for value values of typ\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n-   = note: required for the cast to the object type `Foo`\n+   = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for value values of type `str` cannot be known at compilation time\n   --> $DIR/cast-rfc0401.rs:72:13\n@@ -234,7 +234,7 @@ LL |     let _ = a as *const Foo; //~ ERROR the size for value values of type\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n-   = note: required for the cast to the object type `Foo`\n+   = note: required for the cast to the object type `dyn Foo`\n \n error[E0606]: casting `&{float}` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:81:30"}, {"sha": "018ea941d12da20a3aadde361ed388a64718f0ad", "filename": "src/test/ui/mismatched_types/issue-19109.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -2,12 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/issue-19109.rs:14:5\n    |\n LL | fn function(t: &mut Trait) {\n-   |                            - help: try adding a return type: `-> *mut Trait`\n+   |                            - help: try adding a return type: `-> *mut dyn Trait`\n LL |     t as *mut Trait\n    |     ^^^^^^^^^^^^^^^ expected (), found *-ptr\n    |\n    = note: expected type `()`\n-              found type `*mut Trait`\n+              found type `*mut dyn Trait`\n \n error: aborting due to previous error\n "}, {"sha": "15c9fd6bf8fe83d0ba22ea764f7eb148e854623c", "filename": "src/test/ui/mismatched_types/trait-bounds-cant-coerce.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     a(x); //~ ERROR mismatched types [E0308]\n    |       ^ expected trait `Foo + std::marker::Send`, found trait `Foo`\n    |\n-   = note: expected type `std::boxed::Box<Foo + std::marker::Send + 'static>`\n-              found type `std::boxed::Box<Foo + 'static>`\n+   = note: expected type `std::boxed::Box<(dyn Foo + std::marker::Send + 'static)>`\n+              found type `std::boxed::Box<(dyn Foo + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "e07051135779ac6344bf4ba4fee317964e54fa76", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -20,7 +20,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<Anything + '_#2r>\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>\n            ]\n    = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n@@ -60,7 +60,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<Anything + '_#2r>\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>\n            ]\n    = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n@@ -92,7 +92,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<Anything + '_#3r>\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>\n            ]\n    = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n@@ -134,7 +134,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<Anything + '_#3r>\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>\n            ]\n    = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r"}, {"sha": "39ad96cc6cd8e9ac47a75859080aadccc4a2df21", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -20,7 +20,7 @@ LL |     with_signature(x, |y| y)\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<std::fmt::Debug + '_#2r>\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r)>\n            ]\n    = note: number of external vids: 3\n    = note: where T: '_#2r"}, {"sha": "72bd270165fd09240f7bf584f4fff4466e0e96f5", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: the size for value values of type `I + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn I + 'static)` cannot be known at compilation time\n   --> $DIR/issue-5035-2.rs:14:8\n    |\n LL | fn foo(_x: K) {}\n    |        ^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `I + 'static`\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn I + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: all local variables must have a statically known size\n "}, {"sha": "b318e778f8766b6c78f3d23290252a2bbdf67a3e", "filename": "src/test/ui/span/borrowck-object-mutability.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable item `*x` as mutable\n   --> $DIR/borrowck-object-mutability.rs:19:5\n    |\n LL | fn borrowed_receiver(x: &Foo) {\n-   |                         ---- help: consider changing this to be a mutable reference: `&mut Foo`\n+   |                         ---- help: consider changing this to be a mutable reference: `&mut dyn Foo`\n LL |     x.borrowed();\n LL |     x.borrowed_mut(); //~ ERROR cannot borrow\n    |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable"}, {"sha": "9049ffd40909007a94d56a40f5d664da56753e1c", "filename": "src/test/ui/suggestions/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -75,7 +75,7 @@ LL |     w.wrap.not_closure();\n    |\n    = help: did you mean to write `w.wrap.not_closure` instead of `w.wrap.not_closure(...)`?\n \n-error[E0599]: no method named `closure` found for type `Obj<std::boxed::Box<std::boxed::FnBox<(), Output=u32> + 'static>>` in the current scope\n+error[E0599]: no method named `closure` found for type `Obj<std::boxed::Box<(dyn std::boxed::FnBox<(), Output=u32> + 'static)>>` in the current scope\n   --> $DIR/issue-2392.rs:72:24\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {"}, {"sha": "e18018c6f0c0172a074abe4e32b98f6034df6591", "filename": "src/test/ui/trivial-bounds-inconsistent-sized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -6,7 +6,7 @@ LL | struct S(str, str) where str: Sized;\n    |\n    = note: #[warn(trivial_bounds)] on by default\n \n-warning: Trait bound for<'a> T<A + 'a>: std::marker::Sized does not depend on any type or lifetime parameters\n+warning: Trait bound for<'a> T<(dyn A + 'a)>: std::marker::Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-sized.rs:26:1\n    |\n LL | / fn unsized_local() where for<'a> T<A + 'a>: Sized {"}, {"sha": "85b16b17042f640862c23da564c98a017d038434", "filename": "src/test/ui/trivial-bounds-inconsistent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -78,7 +78,7 @@ warning: Trait bound str: std::marker::Sized does not depend on any type or life\n LL | struct TwoStrs(str, str) where str: Sized;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: Trait bound for<'a> Dst<A + 'a>: std::marker::Sized does not depend on any type or lifetime parameters\n+warning: Trait bound for<'a> Dst<(dyn A + 'a)>: std::marker::Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:65:1\n    |\n LL | / fn unsized_local() where for<'a> Dst<A + 'a>: Sized {"}, {"sha": "cb545ca008d6581f503d6360ece9a41723367cfc", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -19,8 +19,8 @@ LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |              ^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n    = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<std::iter::Iterator<Item=&T> + 'static>\n-              found std::boxed::Box<std::iter::Iterator<Item=&T>>\n+           expected std::boxed::Box<(dyn std::iter::Iterator<Item=&T> + 'static)>\n+              found std::boxed::Box<dyn std::iter::Iterator<Item=&T>>\n \n error: aborting due to previous error\n "}, {"sha": "1f30c815d30a8be7bba90b1ecee850bfa4bddff6", "filename": "src/test/ui/unsized-enum2.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72a67f3bbf48cec735de85ec9c4200b842a80f6/src%2Ftest%2Fui%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-enum2.stderr?ref=d72a67f3bbf48cec735de85ec9c4200b842a80f6", "patch": "@@ -82,43 +82,43 @@ LL |     VH{u: isize, x: [u32]},\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `Foo + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn Foo + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:63:8\n    |\n LL |     VM(Foo),\n    |        ^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Foo + 'static`\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn Foo + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `Bar + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn Bar + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:65:8\n    |\n LL |     VN{x: Bar},\n    |        ^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Bar + 'static`\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn Bar + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `FooBar + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn FooBar + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:67:15\n    |\n LL |     VO(isize, FooBar),\n    |               ^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `FooBar + 'static`\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn FooBar + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `BarFoo + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn BarFoo + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:69:18\n    |\n LL |     VP{u: isize, x: BarFoo},\n    |                  ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `BarFoo + 'static`\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn BarFoo + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -162,46 +162,46 @@ LL |     VT{u: isize, x: <&'static [i32] as Deref>::Target},\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `PathHelper1 + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn PathHelper1 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:53:8\n    |\n LL |     VI(Path1),\n    |        ^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `Path1`, the trait `std::marker::Sized` is not implemented for `PathHelper1 + 'static`\n+   = help: within `Path1`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper1 + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required because it appears within the type `Path1`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `PathHelper2 + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn PathHelper2 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:55:8\n    |\n LL |     VJ{x: Path2},\n    |        ^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `Path2`, the trait `std::marker::Sized` is not implemented for `PathHelper2 + 'static`\n+   = help: within `Path2`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper2 + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required because it appears within the type `Path2`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `PathHelper3 + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn PathHelper3 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:57:15\n    |\n LL |     VK(isize, Path3),\n    |               ^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `Path3`, the trait `std::marker::Sized` is not implemented for `PathHelper3 + 'static`\n+   = help: within `Path3`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper3 + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required because it appears within the type `Path3`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `PathHelper4 + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn PathHelper4 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:59:18\n    |\n LL |     VL{u: isize, x: Path4},\n    |                  ^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `Path4`, the trait `std::marker::Sized` is not implemented for `PathHelper4 + 'static`\n+   = help: within `Path4`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper4 + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required because it appears within the type `Path4`\n    = note: no field of an enum variant may have a dynamically sized type"}]}